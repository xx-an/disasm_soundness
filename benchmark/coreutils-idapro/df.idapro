LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 6D2699A76187EB258FE13EF3226F5D3E122E3C927FEE9B65385090E6B733A765
LOAD:0000000000000000 ; Input MD5    : 214848AC4B79452CB596ACF5D385EDEF
LOAD:0000000000000000 ; Input CRC32  : 9FC51ECD
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/df
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'df.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'find-mount-point.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'canonicalize.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'human.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'mbsalign.c'
LOAD:0000000000000000 ; Source File : 'mbswidth.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'save-cwd.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'xstrtol-error.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'asprintf.c'
LOAD:0000000000000000 ; Source File : 'chdir-long.c'
LOAD:0000000000000000 ; Source File : 'fsusage.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'mountlist.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 66E58h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 130C8h               ; Size in file image
LOAD:00000000000000D8                 dq 130C8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 13870h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 213870h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 0A80h                ; Size in file image
LOAD:0000000000000110                 dq 0D10h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 13B18h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 213B18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 10EBCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 10EBCh               ; Physical address
LOAD:00000000000001B0                 dq 53Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 53Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 13870h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 213870h              ; Physical address
LOAD:0000000000000220                 dq 790h                 ; Size in file image
LOAD:0000000000000228                 dq 790h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0F9h, 0A7h, 0D0h, 35h, 27h, 1Ah, 12h, 48h, 0D2h, 46h ; Desc
LOAD:0000000000000284                 db 0D7h, 69h, 5Ah, 0DDh, 28h, 0Ch, 65h, 0E3h, 0E2h, 0EEh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 5Ch
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 5Ch, 5Dh, 62h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_C40, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aSnprintfChk - offset byte_C40, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_C40, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aEndmntent - offset byte_C40, 12h, 0, 0, \ ; "endmntent"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrverscmp - offset byte_C40, 12h, 0, 0, \ ; "strverscmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aAbort - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aErrnoLocation - offset byte_C40, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrncmp - offset byte_C40, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aItmDeregistert - offset byte_C40, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aExit - offset byte_C40, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFpending - offset byte_C40, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aIsatty - offset byte_C40, 12h, 0, 0, \ ; "isatty"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aIswcntrl - offset byte_C40, 12h, 0, 0, \ ; "iswcntrl"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aWcswidth - offset byte_C40, 12h, 0, 0, \ ; "wcswidth"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aLocaleconv - offset byte_C40, 12h, 0, 0, \ ; "localeconv"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMbstowcs - offset byte_C40, 12h, 0, 0, \ ; "mbstowcs"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aReadlink - offset byte_C40, 12h, 0, 0, \ ; "readlink"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aFcntl - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000490                            0>
LOAD:00000000000004A8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_C40, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aFclose - offset byte_C40, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aBindtextdomain - offset byte_C40, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aDcgettext - offset byte_C40, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_C40, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrlen - offset byte_C40, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLxstat - offset byte_C40, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aOpenat - offset byte_C40, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFchdir+1 - offset byte_C40, 12h, 0, 0, \ ; "chdir"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStackChkFail - offset byte_C40, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGetoptLong - offset byte_C40, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMbrtowc - offset byte_C40, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrchr - offset byte_C40, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFxstatat - offset byte_C40, 12h, 0, 0, \ ; "__fxstatat"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aOverflow - offset byte_C40, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStrrchr - offset byte_C40, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aUname - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "uname"
LOAD:0000000000000628                            0>
LOAD:0000000000000640                 Elf64_Sym <offset aLseek - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000640                            0>
LOAD:0000000000000658                 Elf64_Sym <offset aAssertFail - offset byte_C40, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrtoulInterna - offset byte_C40, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemset - offset byte_C40, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGetcwd - offset byte_C40, 12h, 0, 0, \ ; "getcwd"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aCanonicalizeFi - offset byte_C40, 12h, 0, 0, \ ; "canonicalize_file_name"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFclose+1 - offset byte_C40, 12h, 0, 0, \ ; "close"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aStrspn - offset byte_C40, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aMemchr - offset byte_C40, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aLibcStartMain - offset byte_C40, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMemcmp - offset byte_C40, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFputsUnlocked - offset byte_C40, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aCalloc - offset byte_C40, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aGetdelim - offset byte_C40, 12h, 0, 0, \ ; "__getdelim"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aStrcmp - offset byte_C40, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMemcpyChk - offset byte_C40, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aGmonStart - offset byte_C40, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aMemcpy - offset byte_C40, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFileno - offset byte_C40, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aStatfs - offset byte_C40, 12h, 0, 0, \ ; "statfs"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aXstat - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000820                            0>
LOAD:0000000000000838                 Elf64_Sym <offset aSync - offset byte_C40, 12h, 0, 0, offset dword_0, \ ; "sync"
LOAD:0000000000000838                            0>
LOAD:0000000000000850                 Elf64_Sym <offset aWcwidth - offset byte_C40, 12h, 0, 0, \ ; "wcwidth"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aMalloc - offset byte_C40, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFflush - offset byte_C40, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aGetmntent - offset byte_C40, 12h, 0, 0, \ ; "getmntent"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aSetmntent - offset byte_C40, 12h, 0, 0, \ ; "setmntent"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aNlLanginfo - offset byte_C40, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aSscanf - offset byte_C40, 12h, 0, 0, \ ; "sscanf"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFreading - offset byte_C40, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aStatvfs - offset byte_C40, 12h, 0, 0, \ ; "statvfs"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aFchdir - offset byte_C40, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aRealloc - offset byte_C40, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aSetlocale - offset byte_C40, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aPrintfChk - offset byte_C40, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aMempcpy - offset byte_C40, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aMemmove - offset byte_C40, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aError - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000009B8                            0>
LOAD:00000000000009D0                 Elf64_Sym <offset aMemrchr - offset byte_C40, 12h, 0, 0, \ ; "memrchr"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aFopen+1 - offset byte_C40, 12h, 0, 0, \ ; "open"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aFseeko - offset byte_C40, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aFopen - offset byte_C40, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000A18                            0>
LOAD:0000000000000A30                 Elf64_Sym <offset aCxaAtexit - offset byte_C40, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aWcstombs - offset byte_C40, 12h, 0, 0, \ ; "wcstombs"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aExit+1 - offset byte_C40, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aFwrite - offset byte_C40, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aFprintfChk - offset byte_C40, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aItmRegistertmc - offset byte_C40, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aStrdup - offset byte_C40, 12h, 0, 0, \ ; "strdup"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aMbsinit - offset byte_C40, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aIswprint - offset byte_C40, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aHasmntopt - offset byte_C40, 12h, 0, 0, \ ; "hasmntopt"
LOAD:0000000000000B08                            offset dword_0, 0>
LOAD:0000000000000B20                 Elf64_Sym <offset aCxaFinalize - offset byte_C40, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000B20                            offset dword_0, 0>
LOAD:0000000000000B38                 Elf64_Sym <offset aStrstr - offset byte_C40, 12h, 0, 0, \ ; "strstr"
LOAD:0000000000000B38                            offset dword_0, 0>
LOAD:0000000000000B50                 Elf64_Sym <offset aCtypeBLoc - offset byte_C40, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000B50                            offset dword_0, 0>
LOAD:0000000000000B68                 Elf64_Sym <offset aSprintfChk - offset byte_C40, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000B68                            offset dword_0, 0>
LOAD:0000000000000B80                 Elf64_Sym <offset aStdout - offset byte_C40, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000B80                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000B98                 Elf64_Sym <offset aProgname - offset byte_C40, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000B98                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000BB0                 Elf64_Sym <offset aProgramInvocat - offset byte_C40, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000BB0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000BC8                 Elf64_Sym <offset aPrognameFull - offset byte_C40, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000BC8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000BE0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_C40, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000BE0                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000BF8                 Elf64_Sym <offset aStderr - offset byte_C40, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000BF8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000C10                 Elf64_Sym <offset aOptind - offset byte_C40, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000C10                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000C28                 Elf64_Sym <offset aOptarg - offset byte_C40, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000C28                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000C40 ; ELF String Table
LOAD:0000000000000C40 byte_C40        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000C40                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000C41 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001120↓o
LOAD:0000000000000C4B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000C52 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000C5F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C69 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C71 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000C71                                         ; LOAD:00000000000009E8↑o
LOAD:0000000000000C77 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C7F aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000C10↑o
LOAD:0000000000000C86 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C8E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C98 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000C98                                         ; LOAD:0000000000000568↑o
LOAD:0000000000000C9F aError          db 'error',0            ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000CA5 aMbstowcs       db 'mbstowcs',0         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000CAE aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000CBF aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000CC8 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000CD1 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000CD9 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000CDF aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000CDF                                         ; LOAD:0000000000000A60↑o
LOAD:0000000000000CE5 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000CEC aMemrchr        db 'memrchr',0          ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000CF4 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000CFB aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000CFB                                         ; DATA XREF: LOAD:0000000000000BB0↑o
LOAD:0000000000000D13 aStrdup         db 'strdup',0           ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000D1A aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000D28 aStatvfs        db 'statvfs',0          ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000D30 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000D30                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000D47 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000D4E aSetmntent      db 'setmntent',0        ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000D58 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000D5F aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000D66 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D6D aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000D78 aStrstr         db 'strstr',0           ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000D7F aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000D90 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000D97 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000D9F aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000DAD aWcswidth       db 'wcswidth',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000DB6 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:0000000000000DBD aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000DC3 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000DCA aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000DCA                                         ; LOAD:00000000000006D0↑o
LOAD:0000000000000DD1 aGetmntent      db 'getmntent',0        ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000DDB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000DE2 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000DEA aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000DF6 aHasmntopt      db 'hasmntopt',0        ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000E00 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000E0E aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000E15 aSscanf         db 'sscanf',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000E1C aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000C28↑o
LOAD:0000000000000E23 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000E2E aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000BF8↑o
LOAD:0000000000000E35 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000E3D aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000E4C aReadlink       db 'readlink',0         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000E55 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000E61 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000E68 aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000E6F aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000E7A aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000E81 aStatfs         db 'statfs',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000E88 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000E95 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000EA0 aStrverscmp     db 'strverscmp',0       ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000EAB aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000EB2 aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000EBB aEndmntent      db 'endmntent',0        ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000EC5 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000EC5                                         ; DATA XREF: LOAD:0000000000000BE0↑o
LOAD:0000000000000EE3 aCanonicalizeFi db 'canonicalize_file_name',0
LOAD:0000000000000EE3                                         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000EFA aWcstombs       db 'wcstombs',0         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000F03 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000F12 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000F18 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000000F26 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000F2D aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000F35 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000F3D aUname          db 'uname',0            ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000F43 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000F43                                         ; LOAD:00000000000004A8↑o
LOAD:0000000000000F52 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000F5D aSync           db 'sync',0             ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000F62 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000F69 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000F69                                         ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000F7B aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000F82 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000F8D aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000F8D                                         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000FA0 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000FAF aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000FB4 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:0000000000000FBF aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000BC8↑o
LOAD:0000000000000FCF aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000FDC aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001130↓o
LOAD:0000000000000FE6 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001140↓o
LOAD:0000000000000FF1 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001150↓o
LOAD:0000000000000FFB aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001160↓o
LOAD:0000000000001007 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001170↓o
LOAD:0000000000001013 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000001013                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:000000000000102F aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:000000000000103E aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:000000000000103E                                         ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000001058 ; ELF GNU Symbol Version Table
LOAD:0000000000001058                 dw 0
LOAD:000000000000105A                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:000000000000105C                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:000000000000105E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000001060                 dw 2                    ; endmntent@@GLIBC_2.2.5
LOAD:0000000000001062                 dw 2                    ; strverscmp@@GLIBC_2.2.5
LOAD:0000000000001064                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000001066                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000001068                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:000000000000106A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:000000000000106C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:000000000000106E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000001070                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000001072                 dw 2                    ; iswcntrl@@GLIBC_2.2.5
LOAD:0000000000001074                 dw 2                    ; wcswidth@@GLIBC_2.2.5
LOAD:0000000000001076                 dw 2                    ; localeconv@@GLIBC_2.2.5
LOAD:0000000000001078                 dw 2                    ; mbstowcs@@GLIBC_2.2.5
LOAD:000000000000107A                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:000000000000107C                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:000000000000107E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000001080                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000001082                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000001084                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000001086                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000001088                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:000000000000108A                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:000000000000108C                 dw 4                    ; openat@@GLIBC_2.4
LOAD:000000000000108E                 dw 2                    ; chdir@@GLIBC_2.2.5
LOAD:0000000000001090                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000001092                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000001094                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000001096                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000001098                 dw 4                    ; __fxstatat@@GLIBC_2.4
LOAD:000000000000109A                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:000000000000109C                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:000000000000109E                 dw 2                    ; uname@@GLIBC_2.2.5
LOAD:00000000000010A0                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:00000000000010A2                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:00000000000010A4                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:00000000000010A6                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:00000000000010A8                 dw 2                    ; getcwd@@GLIBC_2.2.5
LOAD:00000000000010AA                 dw 2                    ; canonicalize_file_name@@GLIBC_2.2.5
LOAD:00000000000010AC                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:00000000000010AE                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:00000000000010B0                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:00000000000010B2                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:00000000000010B4                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:00000000000010B6                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:00000000000010B8                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:00000000000010BA                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:00000000000010BC                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:00000000000010BE                 dw 3                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:00000000000010C0                 dw 0                    ; local  symbol: __gmon_start__
LOAD:00000000000010C2                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:00000000000010C4                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:00000000000010C6                 dw 2                    ; statfs@@GLIBC_2.2.5
LOAD:00000000000010C8                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:00000000000010CA                 dw 2                    ; sync@@GLIBC_2.2.5
LOAD:00000000000010CC                 dw 2                    ; wcwidth@@GLIBC_2.2.5
LOAD:00000000000010CE                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:00000000000010D0                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:00000000000010D2                 dw 2                    ; getmntent@@GLIBC_2.2.5
LOAD:00000000000010D4                 dw 2                    ; setmntent@@GLIBC_2.2.5
LOAD:00000000000010D6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:00000000000010D8                 dw 2                    ; sscanf@@GLIBC_2.2.5
LOAD:00000000000010DA                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:00000000000010DC                 dw 2                    ; statvfs@@GLIBC_2.2.5
LOAD:00000000000010DE                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:00000000000010E0                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:00000000000010E2                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:00000000000010E4                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:00000000000010E6                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:00000000000010E8                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:00000000000010EA                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:00000000000010EC                 dw 2                    ; memrchr@@GLIBC_2.2.5
LOAD:00000000000010EE                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:00000000000010F0                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:00000000000010F2                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:00000000000010F4                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:00000000000010F6                 dw 2                    ; wcstombs@@GLIBC_2.2.5
LOAD:00000000000010F8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:00000000000010FA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:00000000000010FC                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:00000000000010FE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000001100                 dw 2                    ; strdup@@GLIBC_2.2.5
LOAD:0000000000001102                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000001104                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000001106                 dw 2                    ; hasmntopt@@GLIBC_2.2.5
LOAD:0000000000001108                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:000000000000110A                 dw 2                    ; strstr@@GLIBC_2.2.5
LOAD:000000000000110C                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:000000000000110E                 dw 3                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000001110                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000001112                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000001114                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000001116                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000001118                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:000000000000111A                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:000000000000111C                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:000000000000111E                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000001120 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001120                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_C40, 10h, 0> ; "libc.so.6"
LOAD:0000000000001130                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_C40, \ ; "GLIBC_2.3"
LOAD:0000000000001130                                10h>
LOAD:0000000000001140                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_C40, \ ; "GLIBC_2.14"
LOAD:0000000000001140                                10h>
LOAD:0000000000001150                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_C40, \ ; "GLIBC_2.4"
LOAD:0000000000001150                                10h>
LOAD:0000000000001160                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_C40, \ ; "GLIBC_2.3.4"
LOAD:0000000000001160                                10h>
LOAD:0000000000001170                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_C40, 0> ; "GLIBC_2.2.5"
LOAD:0000000000001180 ; ELF RELA Relocation Table
LOAD:0000000000001180                 Elf64_Rela <213870h, 8, 3CA0h> ; R_X86_64_RELATIVE +3CA0h
LOAD:0000000000001198                 Elf64_Rela <213878h, 8, 3C60h> ; R_X86_64_RELATIVE +3C60h
LOAD:00000000000011B0                 Elf64_Rela <213880h, 8, 0F208h> ; R_X86_64_RELATIVE +0F208h
LOAD:00000000000011C8                 Elf64_Rela <2138A0h, 8, 0F20Ch> ; R_X86_64_RELATIVE +0F20Ch
LOAD:00000000000011E0                 Elf64_Rela <2138C0h, 8, 0F217h> ; R_X86_64_RELATIVE +0F217h
LOAD:00000000000011F8                 Elf64_Rela <2138E0h, 8, 0F21Eh> ; R_X86_64_RELATIVE +0F21Eh
LOAD:0000000000001210                 Elf64_Rela <213900h, 8, 0F22Dh> ; R_X86_64_RELATIVE +0F22Dh
LOAD:0000000000001228                 Elf64_Rela <213920h, 8, 0F230h> ; R_X86_64_RELATIVE +0F230h
LOAD:0000000000001240                 Elf64_Rela <213940h, 8, 0F15Eh> ; R_X86_64_RELATIVE +0F15Eh
LOAD:0000000000001258                 Elf64_Rela <213960h, 8, 0F236h> ; R_X86_64_RELATIVE +0F236h
LOAD:0000000000001270                 Elf64_Rela <213980h, 8, 0F242h> ; R_X86_64_RELATIVE +0F242h
LOAD:0000000000001288                 Elf64_Rela <2139A0h, 8, 0F250h> ; R_X86_64_RELATIVE +0F250h
LOAD:00000000000012A0                 Elf64_Rela <2139C0h, 8, 0F24Dh> ; R_X86_64_RELATIVE +0F24Dh
LOAD:00000000000012B8                 Elf64_Rela <2139E0h, 8, 0F298h> ; R_X86_64_RELATIVE +0F298h
LOAD:00000000000012D0                 Elf64_Rela <213A00h, 8, 0F25Dh> ; R_X86_64_RELATIVE +0F25Dh
LOAD:00000000000012E8                 Elf64_Rela <213A20h, 8, 0F255h> ; R_X86_64_RELATIVE +0F255h
LOAD:0000000000001300                 Elf64_Rela <213A40h, 8, 0F262h> ; R_X86_64_RELATIVE +0F262h
LOAD:0000000000001318                 Elf64_Rela <213A60h, 8, 0F267h> ; R_X86_64_RELATIVE +0F267h
LOAD:0000000000001330                 Elf64_Rela <213AA0h, 8, 0F21Eh> ; R_X86_64_RELATIVE +0F21Eh
LOAD:0000000000001348                 Elf64_Rela <213AA8h, 8, 0F22Dh> ; R_X86_64_RELATIVE +0F22Dh
LOAD:0000000000001360                 Elf64_Rela <213AC0h, 8, 100E5h> ; R_X86_64_RELATIVE +100E5h
LOAD:0000000000001378                 Elf64_Rela <213AC8h, 8, 100EDh> ; R_X86_64_RELATIVE +100EDh
LOAD:0000000000001390                 Elf64_Rela <213AD0h, 8, 100F3h> ; R_X86_64_RELATIVE +100F3h
LOAD:00000000000013A8                 Elf64_Rela <213AD8h, 8, 10100h> ; R_X86_64_RELATIVE +10100h
LOAD:00000000000013C0                 Elf64_Rela <213AE0h, 8, 1010Dh> ; R_X86_64_RELATIVE +1010Dh
LOAD:00000000000013D8                 Elf64_Rela <213AE8h, 8, 10B7Fh> ; R_X86_64_RELATIVE +10B7Fh
LOAD:00000000000013F0                 Elf64_Rela <213AF0h, 8, 10121h> ; R_X86_64_RELATIVE +10121h
LOAD:0000000000001408                 Elf64_Rela <213AF8h, 8, 10106h> ; R_X86_64_RELATIVE +10106h
LOAD:0000000000001420                 Elf64_Rela <213B00h, 8, 0F142h> ; R_X86_64_RELATIVE +0F142h
LOAD:0000000000001438                 Elf64_Rela <213B08h, 8, 10129h> ; R_X86_64_RELATIVE +10129h
LOAD:0000000000001450                 Elf64_Rela <214008h, 8, 214008h> ; R_X86_64_RELATIVE +214008h
LOAD:0000000000001468                 Elf64_Rela <214028h, 8, 0F26Fh> ; R_X86_64_RELATIVE +0F26Fh
LOAD:0000000000001480                 Elf64_Rela <214038h, 8, 0F276h> ; R_X86_64_RELATIVE +0F276h
LOAD:0000000000001498                 Elf64_Rela <214058h, 8, 0F281h> ; R_X86_64_RELATIVE +0F281h
LOAD:00000000000014B0                 Elf64_Rela <214068h, 8, 0F288h> ; R_X86_64_RELATIVE +0F288h
LOAD:00000000000014C8                 Elf64_Rela <214088h, 8, 0F212h> ; R_X86_64_RELATIVE +0F212h
LOAD:00000000000014E0                 Elf64_Rela <214098h, 8, 0EFE4h> ; R_X86_64_RELATIVE +0EFE4h
LOAD:00000000000014F8                 Elf64_Rela <2140B8h, 8, 0F2A6h> ; R_X86_64_RELATIVE +0F2A6h
LOAD:0000000000001510                 Elf64_Rela <2140C8h, 8, 0F2ACh> ; R_X86_64_RELATIVE +0F2ACh
LOAD:0000000000001528                 Elf64_Rela <2140E8h, 8, 0F2B2h> ; R_X86_64_RELATIVE +0F2B2h
LOAD:0000000000001540                 Elf64_Rela <2140F8h, 8, 0F28Dh> ; R_X86_64_RELATIVE +0F28Dh
LOAD:0000000000001558                 Elf64_Rela <214118h, 8, 0F2BFh> ; R_X86_64_RELATIVE +0F2BFh
LOAD:0000000000001570                 Elf64_Rela <214128h, 8, 0F2C6h> ; R_X86_64_RELATIVE +0F2C6h
LOAD:0000000000001588                 Elf64_Rela <214148h, 8, 0F297h> ; R_X86_64_RELATIVE +0F297h
LOAD:00000000000015A0                 Elf64_Rela <214158h, 8, 0F29Eh> ; R_X86_64_RELATIVE +0F29Eh
LOAD:00000000000015B8                 Elf64_Rela <214178h, 8, 0F2A5h> ; R_X86_64_RELATIVE +0F2A5h
LOAD:00000000000015D0                 Elf64_Rela <214188h, 8, 0F2ABh> ; R_X86_64_RELATIVE +0F2ABh
LOAD:00000000000015E8                 Elf64_Rela <2141A8h, 8, 0F2B1h> ; R_X86_64_RELATIVE +0F2B1h
LOAD:0000000000001600                 Elf64_Rela <2141B8h, 8, 0F2B8h> ; R_X86_64_RELATIVE +0F2B8h
LOAD:0000000000001618                 Elf64_Rela <2141D8h, 8, 0F2BEh> ; R_X86_64_RELATIVE +0F2BEh
LOAD:0000000000001630                 Elf64_Rela <2141E8h, 8, 0F2C5h> ; R_X86_64_RELATIVE +0F2C5h
LOAD:0000000000001648                 Elf64_Rela <214208h, 8, 0F2CBh> ; R_X86_64_RELATIVE +0F2CBh
LOAD:0000000000001660                 Elf64_Rela <214218h, 8, 0F2D2h> ; R_X86_64_RELATIVE +0F2D2h
LOAD:0000000000001678                 Elf64_Rela <214238h, 8, 0F2DDh> ; R_X86_64_RELATIVE +0F2DDh
LOAD:0000000000001690                 Elf64_Rela <214248h, 8, 0F2E2h> ; R_X86_64_RELATIVE +0F2E2h
LOAD:00000000000016A8                 Elf64_Rela <214260h, 8, 0FF76h> ; R_X86_64_RELATIVE +0FF76h
LOAD:00000000000016C0                 Elf64_Rela <2142C0h, 8, 2142D0h> ; R_X86_64_RELATIVE +2142D0h
LOAD:00000000000016D8                 Elf64_Rela <2142D8h, 8, 214440h> ; R_X86_64_RELATIVE +214440h
LOAD:00000000000016F0                 Elf64_Rela <2142E8h, 8, 0C5E0h> ; R_X86_64_RELATIVE +0C5E0h
LOAD:0000000000001708                 Elf64_Rela <213FD0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001720                 Elf64_Rela <213FD8h, 2D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001738                 Elf64_Rela <213FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001750                 Elf64_Rela <213FE8h, 5300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001768                 Elf64_Rela <213FF0h, 5800000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001780                 Elf64_Rela <214300h, 5D00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001798                 Elf64_Rela <214308h, 5C00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000017B0                 Elf64_Rela <214310h, 6200000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000017C8                 Elf64_Rela <214318h, 6300000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000017E0                 Elf64_Rela <214320h, 5F00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000017F8                 Elf64_Rela <214340h, 6100000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001810 ; ELF JMPREL Relocation Table
LOAD:0000000000001810                 Elf64_Rela <213D20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001828                 Elf64_Rela <213D28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001840                 Elf64_Rela <213D30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001858                 Elf64_Rela <213D38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT endmntent
LOAD:0000000000001870                 Elf64_Rela <213D40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strverscmp
LOAD:0000000000001888                 Elf64_Rela <213D48h, 600000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000018A0                 Elf64_Rela <213D50h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000018B8                 Elf64_Rela <213D58h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000018D0                 Elf64_Rela <213D60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000018E8                 Elf64_Rela <213D68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001900                 Elf64_Rela <213D70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000001918                 Elf64_Rela <213D78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:0000000000001930                 Elf64_Rela <213D80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT wcswidth
LOAD:0000000000001948                 Elf64_Rela <213D88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:0000000000001960                 Elf64_Rela <213D90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbstowcs
LOAD:0000000000001978                 Elf64_Rela <213D98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001990                 Elf64_Rela <213DA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000019A8                 Elf64_Rela <213DA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000019C0                 Elf64_Rela <213DB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000019D8                 Elf64_Rela <213DB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000019F0                 Elf64_Rela <213DC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001A08                 Elf64_Rela <213DC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001A20                 Elf64_Rela <213DD0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001A38                 Elf64_Rela <213DD8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001A50                 Elf64_Rela <213DE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001A68                 Elf64_Rela <213DE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT chdir
LOAD:0000000000001A80                 Elf64_Rela <213DF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001A98                 Elf64_Rela <213DF8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001AB0                 Elf64_Rela <213E00h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001AC8                 Elf64_Rela <213E08h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001AE0                 Elf64_Rela <213E10h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001AF8                 Elf64_Rela <213E18h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001B10                 Elf64_Rela <213E20h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001B28                 Elf64_Rela <213E28h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT uname
LOAD:0000000000001B40                 Elf64_Rela <213E30h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001B58                 Elf64_Rela <213E38h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001B70                 Elf64_Rela <213E40h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001B88                 Elf64_Rela <213E48h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001BA0                 Elf64_Rela <213E50h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:0000000000001BB8                 Elf64_Rela <213E58h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT canonicalize_file_name
LOAD:0000000000001BD0                 Elf64_Rela <213E60h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001BE8                 Elf64_Rela <213E68h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001C00                 Elf64_Rela <213E70h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001C18                 Elf64_Rela <213E78h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001C30                 Elf64_Rela <213E80h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001C48                 Elf64_Rela <213E88h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001C60                 Elf64_Rela <213E90h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001C78                 Elf64_Rela <213E98h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001C90                 Elf64_Rela <213EA0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000001CA8                 Elf64_Rela <213EA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001CC0                 Elf64_Rela <213EB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001CD8                 Elf64_Rela <213EB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT statfs
LOAD:0000000000001CF0                 Elf64_Rela <213EC0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001D08                 Elf64_Rela <213EC8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT sync
LOAD:0000000000001D20                 Elf64_Rela <213ED0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:0000000000001D38                 Elf64_Rela <213ED8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001D50                 Elf64_Rela <213EE0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001D68                 Elf64_Rela <213EE8h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT getmntent
LOAD:0000000000001D80                 Elf64_Rela <213EF0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT setmntent
LOAD:0000000000001D98                 Elf64_Rela <213EF8h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001DB0                 Elf64_Rela <213F00h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT sscanf
LOAD:0000000000001DC8                 Elf64_Rela <213F08h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001DE0                 Elf64_Rela <213F10h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT statvfs
LOAD:0000000000001DF8                 Elf64_Rela <213F18h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001E10                 Elf64_Rela <213F20h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001E28                 Elf64_Rela <213F28h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001E40                 Elf64_Rela <213F30h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001E58                 Elf64_Rela <213F38h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001E70                 Elf64_Rela <213F40h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001E88                 Elf64_Rela <213F48h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001EA0                 Elf64_Rela <213F50h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT memrchr
LOAD:0000000000001EB8                 Elf64_Rela <213F58h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001ED0                 Elf64_Rela <213F60h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001EE8                 Elf64_Rela <213F68h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001F00                 Elf64_Rela <213F70h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001F18                 Elf64_Rela <213F78h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT wcstombs
LOAD:0000000000001F30                 Elf64_Rela <213F80h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001F48                 Elf64_Rela <213F88h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001F60                 Elf64_Rela <213F90h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001F78                 Elf64_Rela <213F98h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT strdup
LOAD:0000000000001F90                 Elf64_Rela <213FA0h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001FA8                 Elf64_Rela <213FA8h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001FC0                 Elf64_Rela <213FB0h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT hasmntopt
LOAD:0000000000001FD8                 Elf64_Rela <213FB8h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT strstr
LOAD:0000000000001FF0                 Elf64_Rela <213FC0h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000002008                 Elf64_Rela <213FC8h, 5B00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000002008 LOAD            ends
LOAD:0000000000002008
.init:0000000000002020 ; ===========================================================================
.init:0000000000002020
.init:0000000000002020 ; Segment type: Pure code
.init:0000000000002020 ; Segment permissions: Read/Execute
.init:0000000000002020 _init           segment dword public 'CODE' use64
.init:0000000000002020                 assume cs:_init
.init:0000000000002020                 ;org 2020h
.init:0000000000002020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000002020
.init:0000000000002020 ; =============== S U B R O U T I N E =======================================
.init:0000000000002020
.init:0000000000002020
.init:0000000000002020                 public _init_proc
.init:0000000000002020 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000002020                 sub     rsp, 8          ; _init
.init:0000000000002024                 mov     rax, cs:__gmon_start___ptr
.init:000000000000202B                 test    rax, rax
.init:000000000000202E                 jz      short loc_2032
.init:0000000000002030                 call    rax ; __gmon_start__
.init:0000000000002032
.init:0000000000002032 loc_2032:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000002032                 add     rsp, 8
.init:0000000000002036                 retn
.init:0000000000002036 _init_proc      endp
.init:0000000000002036
.init:0000000000002036 _init           ends
.init:0000000000002036
LOAD:0000000000002037 ; ===========================================================================
LOAD:0000000000002037
LOAD:0000000000002037 ; Segment type: Pure code
LOAD:0000000000002037 ; Segment permissions: Read/Execute
LOAD:0000000000002037 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002037                 assume cs:LOAD
LOAD:0000000000002037                 ;org 2037h
LOAD:0000000000002037                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002037                 align 20h
LOAD:0000000000002037 LOAD            ends
LOAD:0000000000002037
.plt:0000000000002040 ; ===========================================================================
.plt:0000000000002040
.plt:0000000000002040 ; Segment type: Pure code
.plt:0000000000002040 ; Segment permissions: Read/Execute
.plt:0000000000002040 _plt            segment para public 'CODE' use64
.plt:0000000000002040                 assume cs:_plt
.plt:0000000000002040                 ;org 2040h
.plt:0000000000002040                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000002040
.plt:0000000000002040 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002040
.plt:0000000000002040
.plt:0000000000002040 sub_2040        proc near               ; CODE XREF: .plt:000000000000205B↓j
.plt:0000000000002040                                         ; .plt:000000000000206B↓j ...
.plt:0000000000002040 ; __unwind {
.plt:0000000000002040                 push    cs:qword_213D10
.plt:0000000000002046                 jmp     cs:qword_213D18
.plt:0000000000002046 sub_2040        endp
.plt:0000000000002046
.plt:0000000000002046 ; ---------------------------------------------------------------------------
.plt:000000000000204C                 align 10h
.plt:0000000000002050
.plt:0000000000002050 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002050
.plt:0000000000002050 ; Attributes: thunk
.plt:0000000000002050
.plt:0000000000002050 ; char *getenv(const char *name)
.plt:0000000000002050 _getenv         proc near               ; CODE XREF: main+67E↓p
.plt:0000000000002050                                         ; main+721↓p ...
.plt:0000000000002050                 jmp     cs:getenv_ptr
.plt:0000000000002050 _getenv         endp
.plt:0000000000002050
.plt:0000000000002056 ; ---------------------------------------------------------------------------
.plt:0000000000002056                 push    0
.plt:000000000000205B                 jmp     sub_2040
.plt:0000000000002060
.plt:0000000000002060 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002060
.plt:0000000000002060 ; Attributes: thunk
.plt:0000000000002060
.plt:0000000000002060 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000002060                                         ; vasnprintf+6F0↓p ...
.plt:0000000000002060                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000002060 ___snprintf_chk endp
.plt:0000000000002060
.plt:0000000000002066 ; ---------------------------------------------------------------------------
.plt:0000000000002066                 push    1
.plt:000000000000206B                 jmp     sub_2040
.plt:0000000000002070
.plt:0000000000002070 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002070
.plt:0000000000002070 ; Attributes: thunk
.plt:0000000000002070
.plt:0000000000002070 ; void free(void *ptr)
.plt:0000000000002070 _free           proc near               ; CODE XREF: main+8FC↓p
.plt:0000000000002070                                         ; main+96D↓p ...
.plt:0000000000002070                 jmp     cs:free_ptr
.plt:0000000000002070 _free           endp
.plt:0000000000002070
.plt:0000000000002076 ; ---------------------------------------------------------------------------
.plt:0000000000002076                 push    2
.plt:000000000000207B                 jmp     sub_2040
.plt:0000000000002080
.plt:0000000000002080 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002080
.plt:0000000000002080 ; Attributes: thunk
.plt:0000000000002080
.plt:0000000000002080 ; int endmntent(FILE *stream)
.plt:0000000000002080 _endmntent      proc near               ; CODE XREF: read_file_system_list+701↓p
.plt:0000000000002080                 jmp     cs:endmntent_ptr
.plt:0000000000002080 _endmntent      endp
.plt:0000000000002080
.plt:0000000000002086 ; ---------------------------------------------------------------------------
.plt:0000000000002086                 push    3
.plt:000000000000208B                 jmp     sub_2040
.plt:0000000000002090
.plt:0000000000002090 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002090
.plt:0000000000002090 ; Attributes: thunk
.plt:0000000000002090
.plt:0000000000002090 ; int strverscmp(const char *s1, const char *s2)
.plt:0000000000002090 _strverscmp     proc near               ; CODE XREF: get_fs_usage+FE↓p
.plt:0000000000002090                 jmp     cs:strverscmp_ptr
.plt:0000000000002090 _strverscmp     endp
.plt:0000000000002090
.plt:0000000000002096 ; ---------------------------------------------------------------------------
.plt:0000000000002096                 push    4
.plt:000000000000209B                 jmp     sub_2040
.plt:00000000000020A0
.plt:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020A0
.plt:00000000000020A0 ; Attributes: noreturn thunk
.plt:00000000000020A0
.plt:00000000000020A0 ; void __noreturn abort(void)
.plt:00000000000020A0 _abort          proc near               ; CODE XREF: safe_hasher:loc_61AD↓p
.plt:00000000000020A0                                         ; hash_get_first+3C↓p ...
.plt:00000000000020A0                 jmp     cs:abort_ptr
.plt:00000000000020A0 _abort          endp
.plt:00000000000020A0
.plt:00000000000020A6 ; ---------------------------------------------------------------------------
.plt:00000000000020A6                 push    5
.plt:00000000000020AB                 jmp     sub_2040
.plt:00000000000020B0
.plt:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020B0
.plt:00000000000020B0 ; Attributes: thunk
.plt:00000000000020B0
.plt:00000000000020B0 ; int *__errno_location(void)
.plt:00000000000020B0 ___errno_location proc near             ; CODE XREF: main+63A↓p
.plt:00000000000020B0                                         ; main:loc_3421↓p ...
.plt:00000000000020B0                 jmp     cs:__errno_location_ptr
.plt:00000000000020B0 ___errno_location endp
.plt:00000000000020B0
.plt:00000000000020B6 ; ---------------------------------------------------------------------------
.plt:00000000000020B6                 push    6
.plt:00000000000020BB                 jmp     sub_2040
.plt:00000000000020C0
.plt:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020C0
.plt:00000000000020C0 ; Attributes: thunk
.plt:00000000000020C0
.plt:00000000000020C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000020C0 _strncmp        proc near               ; CODE XREF: main+1449↓p
.plt:00000000000020C0                                         ; usage+354↓p ...
.plt:00000000000020C0                 jmp     cs:strncmp_ptr
.plt:00000000000020C0 _strncmp        endp
.plt:00000000000020C0
.plt:00000000000020C6 ; ---------------------------------------------------------------------------
.plt:00000000000020C6                 push    7
.plt:00000000000020CB                 jmp     sub_2040
.plt:00000000000020D0
.plt:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020D0
.plt:00000000000020D0 ; Attributes: noreturn thunk
.plt:00000000000020D0
.plt:00000000000020D0 ; void __noreturn _exit(int status)
.plt:00000000000020D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000020D0                 jmp     cs:_exit_ptr
.plt:00000000000020D0 __exit          endp
.plt:00000000000020D0
.plt:00000000000020D6 ; ---------------------------------------------------------------------------
.plt:00000000000020D6                 push    8
.plt:00000000000020DB                 jmp     sub_2040
.plt:00000000000020E0
.plt:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020E0
.plt:00000000000020E0 ; Attributes: thunk
.plt:00000000000020E0
.plt:00000000000020E0 ; size_t __fpending(FILE *fp)
.plt:00000000000020E0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000020E0                 jmp     cs:__fpending_ptr
.plt:00000000000020E0 ___fpending     endp
.plt:00000000000020E0
.plt:00000000000020E6 ; ---------------------------------------------------------------------------
.plt:00000000000020E6                 push    9
.plt:00000000000020EB                 jmp     sub_2040
.plt:00000000000020F0
.plt:00000000000020F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020F0
.plt:00000000000020F0 ; Attributes: thunk
.plt:00000000000020F0
.plt:00000000000020F0 ; int isatty(int fd)
.plt:00000000000020F0 _isatty         proc near               ; CODE XREF: replace_problematic_chars+35↓p
.plt:00000000000020F0                 jmp     cs:isatty_ptr
.plt:00000000000020F0 _isatty         endp
.plt:00000000000020F0
.plt:00000000000020F6 ; ---------------------------------------------------------------------------
.plt:00000000000020F6                 push    0Ah
.plt:00000000000020FB                 jmp     sub_2040
.plt:0000000000002100
.plt:0000000000002100 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002100
.plt:0000000000002100 ; Attributes: thunk
.plt:0000000000002100
.plt:0000000000002100 ; int iswcntrl(wint_t wc)
.plt:0000000000002100 _iswcntrl       proc near               ; CODE XREF: replace_invalid_chars+54↓p
.plt:0000000000002100                                         ; mbsnwidth+F7↓p
.plt:0000000000002100                 jmp     cs:iswcntrl_ptr
.plt:0000000000002100 _iswcntrl       endp
.plt:0000000000002100
.plt:0000000000002106 ; ---------------------------------------------------------------------------
.plt:0000000000002106                 push    0Bh
.plt:000000000000210B                 jmp     sub_2040
.plt:0000000000002110
.plt:0000000000002110 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002110
.plt:0000000000002110 ; Attributes: thunk
.plt:0000000000002110
.plt:0000000000002110 ; int wcswidth(const wchar_t *s, size_t n)
.plt:0000000000002110 _wcswidth       proc near               ; CODE XREF: mbsalign+287↓p
.plt:0000000000002110                                         ; mbsalign+34C↓p
.plt:0000000000002110                 jmp     cs:wcswidth_ptr
.plt:0000000000002110 _wcswidth       endp
.plt:0000000000002110
.plt:0000000000002116 ; ---------------------------------------------------------------------------
.plt:0000000000002116                 push    0Ch
.plt:000000000000211B                 jmp     sub_2040
.plt:0000000000002120
.plt:0000000000002120 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002120
.plt:0000000000002120 ; Attributes: thunk
.plt:0000000000002120
.plt:0000000000002120 ; struct lconv *localeconv(void)
.plt:0000000000002120 _localeconv     proc near               ; CODE XREF: human_readable+59↓p
.plt:0000000000002120                 jmp     cs:localeconv_ptr
.plt:0000000000002120 _localeconv     endp
.plt:0000000000002120
.plt:0000000000002126 ; ---------------------------------------------------------------------------
.plt:0000000000002126                 push    0Dh
.plt:000000000000212B                 jmp     sub_2040
.plt:0000000000002130
.plt:0000000000002130 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002130
.plt:0000000000002130 ; Attributes: thunk
.plt:0000000000002130
.plt:0000000000002130 ; size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)
.plt:0000000000002130 _mbstowcs       proc near               ; CODE XREF: mbsalign+1B6↓p
.plt:0000000000002130                                         ; mbsalign+220↓p
.plt:0000000000002130                 jmp     cs:mbstowcs_ptr
.plt:0000000000002130 _mbstowcs       endp
.plt:0000000000002130
.plt:0000000000002136 ; ---------------------------------------------------------------------------
.plt:0000000000002136                 push    0Eh
.plt:000000000000213B                 jmp     sub_2040
.plt:0000000000002140
.plt:0000000000002140 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002140
.plt:0000000000002140 ; Attributes: thunk
.plt:0000000000002140
.plt:0000000000002140 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000002140 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000002140                 jmp     cs:readlink_ptr
.plt:0000000000002140 _readlink       endp
.plt:0000000000002140
.plt:0000000000002146 ; ---------------------------------------------------------------------------
.plt:0000000000002146                 push    0Fh
.plt:000000000000214B                 jmp     sub_2040
.plt:0000000000002150
.plt:0000000000002150 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002150
.plt:0000000000002150 ; Attributes: thunk
.plt:0000000000002150
.plt:0000000000002150 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000002150 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000002150                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000002150                 jmp     cs:fcntl_ptr
.plt:0000000000002150 _fcntl          endp
.plt:0000000000002150
.plt:0000000000002156 ; ---------------------------------------------------------------------------
.plt:0000000000002156                 push    10h
.plt:000000000000215B                 jmp     sub_2040
.plt:0000000000002160
.plt:0000000000002160 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002160
.plt:0000000000002160 ; Attributes: thunk
.plt:0000000000002160
.plt:0000000000002160 ; char *textdomain(const char *domainname)
.plt:0000000000002160 _textdomain     proc near               ; CODE XREF: main+6F↓p
.plt:0000000000002160                 jmp     cs:textdomain_ptr
.plt:0000000000002160 _textdomain     endp
.plt:0000000000002160
.plt:0000000000002166 ; ---------------------------------------------------------------------------
.plt:0000000000002166                 push    11h
.plt:000000000000216B                 jmp     sub_2040
.plt:0000000000002170
.plt:0000000000002170 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002170
.plt:0000000000002170 ; Attributes: thunk
.plt:0000000000002170
.plt:0000000000002170 ; int fclose(FILE *stream)
.plt:0000000000002170 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000002170                                         ; rpl_fclose+6B↓j
.plt:0000000000002170                 jmp     cs:fclose_ptr
.plt:0000000000002170 _fclose         endp
.plt:0000000000002170
.plt:0000000000002176 ; ---------------------------------------------------------------------------
.plt:0000000000002176                 push    12h
.plt:000000000000217B                 jmp     sub_2040
.plt:0000000000002180
.plt:0000000000002180 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002180
.plt:0000000000002180 ; Attributes: thunk
.plt:0000000000002180
.plt:0000000000002180 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000002180 _bindtextdomain proc near               ; CODE XREF: main+63↓p
.plt:0000000000002180                 jmp     cs:bindtextdomain_ptr
.plt:0000000000002180 _bindtextdomain endp
.plt:0000000000002180
.plt:0000000000002186 ; ---------------------------------------------------------------------------
.plt:0000000000002186                 push    13h
.plt:000000000000218B                 jmp     sub_2040
.plt:0000000000002190
.plt:0000000000002190 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002190
.plt:0000000000002190 ; Attributes: thunk
.plt:0000000000002190
.plt:0000000000002190 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000002190 _dcgettext      proc near               ; CODE XREF: main+E6↓p
.plt:0000000000002190                                         ; main+4EF↓p ...
.plt:0000000000002190                 jmp     cs:dcgettext_ptr
.plt:0000000000002190 _dcgettext      endp
.plt:0000000000002190
.plt:0000000000002196 ; ---------------------------------------------------------------------------
.plt:0000000000002196                 push    14h
.plt:000000000000219B                 jmp     sub_2040
.plt:00000000000021A0
.plt:00000000000021A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021A0
.plt:00000000000021A0 ; Attributes: thunk
.plt:00000000000021A0
.plt:00000000000021A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000021A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: mbsalign:loc_8340↓p
.plt:00000000000021A0                                         ; mbsnwidth+29↓p ...
.plt:00000000000021A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000021A0 ___ctype_get_mb_cur_max endp
.plt:00000000000021A0
.plt:00000000000021A6 ; ---------------------------------------------------------------------------
.plt:00000000000021A6                 push    15h
.plt:00000000000021AB                 jmp     sub_2040
.plt:00000000000021B0
.plt:00000000000021B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021B0
.plt:00000000000021B0 ; Attributes: thunk
.plt:00000000000021B0
.plt:00000000000021B0 ; size_t strlen(const char *s)
.plt:00000000000021B0 _strlen         proc near               ; CODE XREF: replace_invalid_chars+21↓p
.plt:00000000000021B0                                         ; get_dev+1DC↓p ...
.plt:00000000000021B0                 jmp     cs:strlen_ptr
.plt:00000000000021B0 _strlen         endp
.plt:00000000000021B0
.plt:00000000000021B6 ; ---------------------------------------------------------------------------
.plt:00000000000021B6                 push    16h
.plt:00000000000021BB                 jmp     sub_2040
.plt:00000000000021C0
.plt:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021C0
.plt:00000000000021C0 ; Attributes: thunk
.plt:00000000000021C0
.plt:00000000000021C0 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000021C0 ___lxstat       proc near               ; CODE XREF: canonicalize_filename_mode:loc_5A60↓p
.plt:00000000000021C0                 jmp     cs:__lxstat_ptr
.plt:00000000000021C0 ___lxstat       endp
.plt:00000000000021C0
.plt:00000000000021C6 ; ---------------------------------------------------------------------------
.plt:00000000000021C6                 push    17h
.plt:00000000000021CB                 jmp     sub_2040
.plt:00000000000021D0
.plt:00000000000021D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021D0
.plt:00000000000021D0 ; Attributes: thunk
.plt:00000000000021D0
.plt:00000000000021D0 ; int openat(int fd, const char *file, int oflag, ...)
.plt:00000000000021D0 _openat         proc near               ; CODE XREF: cdb_advance_fd+12↓p
.plt:00000000000021D0                 jmp     cs:openat_ptr
.plt:00000000000021D0 _openat         endp
.plt:00000000000021D0
.plt:00000000000021D6 ; ---------------------------------------------------------------------------
.plt:00000000000021D6                 push    18h
.plt:00000000000021DB                 jmp     sub_2040
.plt:00000000000021E0
.plt:00000000000021E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021E0
.plt:00000000000021E0 ; Attributes: thunk
.plt:00000000000021E0
.plt:00000000000021E0 ; int chdir(const char *path)
.plt:00000000000021E0 _chdir          proc near               ; CODE XREF: find_mount_point+A0↓p
.plt:00000000000021E0                                         ; find_mount_point+10B↓p ...
.plt:00000000000021E0                 jmp     cs:chdir_ptr
.plt:00000000000021E0 _chdir          endp
.plt:00000000000021E0
.plt:00000000000021E6 ; ---------------------------------------------------------------------------
.plt:00000000000021E6                 push    19h
.plt:00000000000021EB                 jmp     sub_2040
.plt:00000000000021F0
.plt:00000000000021F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021F0
.plt:00000000000021F0 ; Attributes: noreturn thunk
.plt:00000000000021F0
.plt:00000000000021F0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_3B8E↓p
.plt:00000000000021F0                                         ; get_header:loc_419A↓p ...
.plt:00000000000021F0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000021F0 ___stack_chk_fail endp
.plt:00000000000021F0
.plt:00000000000021F6 ; ---------------------------------------------------------------------------
.plt:00000000000021F6                 push    1Ah
.plt:00000000000021FB                 jmp     sub_2040
.plt:0000000000002200
.plt:0000000000002200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002200
.plt:0000000000002200 ; Attributes: thunk
.plt:0000000000002200
.plt:0000000000002200 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002200 _getopt_long    proc near               ; CODE XREF: main+10F↓p
.plt:0000000000002200                 jmp     cs:getopt_long_ptr
.plt:0000000000002200 _getopt_long    endp
.plt:0000000000002200
.plt:0000000000002206 ; ---------------------------------------------------------------------------
.plt:0000000000002206                 push    1Bh
.plt:000000000000220B                 jmp     sub_2040
.plt:0000000000002210
.plt:0000000000002210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002210
.plt:0000000000002210 ; Attributes: thunk
.plt:0000000000002210
.plt:0000000000002210 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002210 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002210                 jmp     cs:mbrtowc_ptr
.plt:0000000000002210 _mbrtowc        endp
.plt:0000000000002210
.plt:0000000000002216 ; ---------------------------------------------------------------------------
.plt:0000000000002216                 push    1Ch
.plt:000000000000221B                 jmp     sub_2040
.plt:0000000000002220
.plt:0000000000002220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002220
.plt:0000000000002220 ; Attributes: thunk
.plt:0000000000002220
.plt:0000000000002220 ; char *strchr(const char *s, int c)
.plt:0000000000002220 _strchr         proc near               ; CODE XREF: main+1222↓p
.plt:0000000000002220                                         ; main+1235↓p ...
.plt:0000000000002220                 jmp     cs:strchr_ptr
.plt:0000000000002220 _strchr         endp
.plt:0000000000002220
.plt:0000000000002226 ; ---------------------------------------------------------------------------
.plt:0000000000002226                 push    1Dh
.plt:000000000000222B                 jmp     sub_2040
.plt:0000000000002230
.plt:0000000000002230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002230
.plt:0000000000002230 ; Attributes: thunk
.plt:0000000000002230
.plt:0000000000002230 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000002230 ___fxstatat     proc near               ; CODE XREF: same_nameat_part_0+47↓p
.plt:0000000000002230                                         ; same_nameat_part_0+7F↓p
.plt:0000000000002230                 jmp     cs:__fxstatat_ptr
.plt:0000000000002230 ___fxstatat     endp
.plt:0000000000002230
.plt:0000000000002236 ; ---------------------------------------------------------------------------
.plt:0000000000002236                 push    1Eh
.plt:000000000000223B                 jmp     sub_2040
.plt:0000000000002240
.plt:0000000000002240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002240
.plt:0000000000002240 ; Attributes: thunk
.plt:0000000000002240
.plt:0000000000002240 ; int __overflow(_IO_FILE *, int)
.plt:0000000000002240 ___overflow     proc near               ; CODE XREF: main+E50↓p
.plt:0000000000002240                                         ; main+13DB↓p ...
.plt:0000000000002240                 jmp     cs:__overflow_ptr
.plt:0000000000002240 ___overflow     endp
.plt:0000000000002240
.plt:0000000000002246 ; ---------------------------------------------------------------------------
.plt:0000000000002246                 push    1Fh
.plt:000000000000224B                 jmp     sub_2040
.plt:0000000000002250
.plt:0000000000002250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002250
.plt:0000000000002250 ; Attributes: thunk
.plt:0000000000002250
.plt:0000000000002250 ; char *strrchr(const char *s, int c)
.plt:0000000000002250 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000002250                 jmp     cs:strrchr_ptr
.plt:0000000000002250 _strrchr        endp
.plt:0000000000002250
.plt:0000000000002256 ; ---------------------------------------------------------------------------
.plt:0000000000002256                 push    20h ; ' '
.plt:000000000000225B                 jmp     sub_2040
.plt:0000000000002260
.plt:0000000000002260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002260
.plt:0000000000002260 ; Attributes: thunk
.plt:0000000000002260
.plt:0000000000002260 ; int uname(struct utsname *name)
.plt:0000000000002260 _uname          proc near               ; CODE XREF: get_fs_usage+63↓p
.plt:0000000000002260                 jmp     cs:uname_ptr
.plt:0000000000002260 _uname          endp
.plt:0000000000002260
.plt:0000000000002266 ; ---------------------------------------------------------------------------
.plt:0000000000002266                 push    21h ; '!'
.plt:000000000000226B                 jmp     sub_2040
.plt:0000000000002270
.plt:0000000000002270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002270
.plt:0000000000002270 ; Attributes: thunk
.plt:0000000000002270
.plt:0000000000002270 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000002270 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000002270                                         ; rpl_fseeko+3B↓p
.plt:0000000000002270                 jmp     cs:lseek_ptr
.plt:0000000000002270 _lseek          endp
.plt:0000000000002270
.plt:0000000000002276 ; ---------------------------------------------------------------------------
.plt:0000000000002276                 push    22h ; '"'
.plt:000000000000227B                 jmp     sub_2040
.plt:0000000000002280
.plt:0000000000002280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002280
.plt:0000000000002280 ; Attributes: noreturn thunk
.plt:0000000000002280
.plt:0000000000002280 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000002280 ___assert_fail  proc near               ; CODE XREF: main+157E↓p
.plt:0000000000002280                                         ; alloc_field+B8↓p ...
.plt:0000000000002280                 jmp     cs:__assert_fail_ptr
.plt:0000000000002280 ___assert_fail  endp
.plt:0000000000002280
.plt:0000000000002286 ; ---------------------------------------------------------------------------
.plt:0000000000002286                 push    23h ; '#'
.plt:000000000000228B                 jmp     sub_2040
.plt:0000000000002290
.plt:0000000000002290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002290
.plt:0000000000002290 ; Attributes: thunk
.plt:0000000000002290
.plt:0000000000002290 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000002290 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000002290                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000002290 ___strtoul_internal endp
.plt:0000000000002290
.plt:0000000000002296 ; ---------------------------------------------------------------------------
.plt:0000000000002296                 push    24h ; '$'
.plt:000000000000229B                 jmp     sub_2040
.plt:00000000000022A0
.plt:00000000000022A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022A0
.plt:00000000000022A0 ; Attributes: thunk
.plt:00000000000022A0
.plt:00000000000022A0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000022A0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000022A0                                         ; xzalloc+12↓j
.plt:00000000000022A0                 jmp     cs:memset_ptr
.plt:00000000000022A0 _memset         endp
.plt:00000000000022A0
.plt:00000000000022A6 ; ---------------------------------------------------------------------------
.plt:00000000000022A6                 push    25h ; '%'
.plt:00000000000022AB                 jmp     sub_2040
.plt:00000000000022B0
.plt:00000000000022B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022B0
.plt:00000000000022B0 ; Attributes: thunk
.plt:00000000000022B0
.plt:00000000000022B0 ; char *getcwd(char *buf, size_t size)
.plt:00000000000022B0 _getcwd         proc near               ; CODE XREF: save_cwd+34↓p
.plt:00000000000022B0                                         ; xgetcwd+5↓p
.plt:00000000000022B0                 jmp     cs:getcwd_ptr
.plt:00000000000022B0 _getcwd         endp
.plt:00000000000022B0
.plt:00000000000022B6 ; ---------------------------------------------------------------------------
.plt:00000000000022B6                 push    26h ; '&'
.plt:00000000000022BB                 jmp     sub_2040
.plt:00000000000022C0
.plt:00000000000022C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022C0
.plt:00000000000022C0 ; Attributes: thunk
.plt:00000000000022C0
.plt:00000000000022C0 ; char *canonicalize_file_name(const char *name)
.plt:00000000000022C0 _canonicalize_file_name proc near       ; CODE XREF: main+82B↓p
.plt:00000000000022C0                                         ; main+87E↓p ...
.plt:00000000000022C0                 jmp     cs:canonicalize_file_name_ptr
.plt:00000000000022C0 _canonicalize_file_name endp
.plt:00000000000022C0
.plt:00000000000022C6 ; ---------------------------------------------------------------------------
.plt:00000000000022C6                 push    27h ; '''
.plt:00000000000022CB                 jmp     sub_2040
.plt:00000000000022D0
.plt:00000000000022D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022D0
.plt:00000000000022D0 ; Attributes: thunk
.plt:00000000000022D0
.plt:00000000000022D0 ; int close(int fd)
.plt:00000000000022D0 _close          proc near               ; CODE XREF: main+5EA↓p
.plt:00000000000022D0                                         ; free_cwd+A↓p ...
.plt:00000000000022D0                 jmp     cs:close_ptr
.plt:00000000000022D0 _close          endp
.plt:00000000000022D0
.plt:00000000000022D6 ; ---------------------------------------------------------------------------
.plt:00000000000022D6                 push    28h ; '('
.plt:00000000000022DB                 jmp     sub_2040
.plt:00000000000022E0
.plt:00000000000022E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022E0
.plt:00000000000022E0 ; Attributes: thunk
.plt:00000000000022E0
.plt:00000000000022E0 ; size_t strspn(const char *s, const char *accept)
.plt:00000000000022E0 _strspn         proc near               ; CODE XREF: get_dev+1F3↓p
.plt:00000000000022E0                                         ; canonicalize_filename_mode+2A4↓p ...
.plt:00000000000022E0                 jmp     cs:strspn_ptr
.plt:00000000000022E0 _strspn         endp
.plt:00000000000022E0
.plt:00000000000022E6 ; ---------------------------------------------------------------------------
.plt:00000000000022E6                 push    29h ; ')'
.plt:00000000000022EB                 jmp     sub_2040
.plt:00000000000022F0
.plt:00000000000022F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022F0
.plt:00000000000022F0 ; Attributes: thunk
.plt:00000000000022F0
.plt:00000000000022F0 ; void *memchr(const void *s, int c, size_t n)
.plt:00000000000022F0 _memchr         proc near               ; CODE XREF: chdir_long+17E↓p
.plt:00000000000022F0                 jmp     cs:memchr_ptr
.plt:00000000000022F0 _memchr         endp
.plt:00000000000022F0
.plt:00000000000022F6 ; ---------------------------------------------------------------------------
.plt:00000000000022F6                 push    2Ah ; '*'
.plt:00000000000022FB                 jmp     sub_2040
.plt:0000000000002300
.plt:0000000000002300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002300
.plt:0000000000002300 ; Attributes: thunk
.plt:0000000000002300
.plt:0000000000002300 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002300 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000002300                                         ; same_nameat+69↓p ...
.plt:0000000000002300                 jmp     cs:memcmp_ptr
.plt:0000000000002300 _memcmp         endp
.plt:0000000000002300
.plt:0000000000002306 ; ---------------------------------------------------------------------------
.plt:0000000000002306                 push    2Bh ; '+'
.plt:000000000000230B                 jmp     sub_2040
.plt:0000000000002310
.plt:0000000000002310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002310
.plt:0000000000002310 ; Attributes: thunk
.plt:0000000000002310
.plt:0000000000002310 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002310 _fputs_unlocked proc near               ; CODE XREF: main:loc_327E↓p
.plt:0000000000002310                                         ; usage+9D↓p ...
.plt:0000000000002310                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002310 _fputs_unlocked endp
.plt:0000000000002310
.plt:0000000000002316 ; ---------------------------------------------------------------------------
.plt:0000000000002316                 push    2Ch ; ','
.plt:000000000000231B                 jmp     sub_2040
.plt:0000000000002320
.plt:0000000000002320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002320
.plt:0000000000002320 ; Attributes: thunk
.plt:0000000000002320
.plt:0000000000002320 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002320 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:0000000000002320                                         ; hash_rehash+C6↓p ...
.plt:0000000000002320                 jmp     cs:calloc_ptr
.plt:0000000000002320 _calloc         endp
.plt:0000000000002320
.plt:0000000000002326 ; ---------------------------------------------------------------------------
.plt:0000000000002326                 push    2Dh ; '-'
.plt:000000000000232B                 jmp     sub_2040
.plt:0000000000002330
.plt:0000000000002330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002330
.plt:0000000000002330 ; Attributes: thunk
.plt:0000000000002330
.plt:0000000000002330 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000002330 ___getdelim     proc near               ; CODE XREF: read_file_system_list+6E↓p
.plt:0000000000002330                 jmp     cs:__getdelim_ptr
.plt:0000000000002330 ___getdelim     endp
.plt:0000000000002330
.plt:0000000000002336 ; ---------------------------------------------------------------------------
.plt:0000000000002336                 push    2Eh ; '.'
.plt:000000000000233B                 jmp     sub_2040
.plt:0000000000002340
.plt:0000000000002340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002340
.plt:0000000000002340 ; Attributes: thunk
.plt:0000000000002340
.plt:0000000000002340 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002340 _strcmp         proc near               ; CODE XREF: main+4C7↓p
.plt:0000000000002340                                         ; main+89A↓p ...
.plt:0000000000002340                 jmp     cs:strcmp_ptr
.plt:0000000000002340 _strcmp         endp
.plt:0000000000002340
.plt:0000000000002346 ; ---------------------------------------------------------------------------
.plt:0000000000002346                 push    2Fh ; '/'
.plt:000000000000234B                 jmp     sub_2040
.plt:0000000000002350
.plt:0000000000002350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002350
.plt:0000000000002350 ; Attributes: thunk
.plt:0000000000002350
.plt:0000000000002350 ___memcpy_chk   proc near               ; CODE XREF: human_readable+49C↓p
.plt:0000000000002350                 jmp     cs:__memcpy_chk_ptr
.plt:0000000000002350 ___memcpy_chk   endp
.plt:0000000000002350
.plt:0000000000002356 ; ---------------------------------------------------------------------------
.plt:0000000000002356                 push    30h ; '0'
.plt:000000000000235B                 jmp     sub_2040
.plt:0000000000002360
.plt:0000000000002360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002360
.plt:0000000000002360 ; Attributes: thunk
.plt:0000000000002360
.plt:0000000000002360 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002360 _memcpy         proc near               ; CODE XREF: find_mount_point+8D↓p
.plt:0000000000002360                                         ; canonicalize_filename_mode+183↓p ...
.plt:0000000000002360                 jmp     cs:memcpy_ptr
.plt:0000000000002360 _memcpy         endp
.plt:0000000000002360
.plt:0000000000002366 ; ---------------------------------------------------------------------------
.plt:0000000000002366                 push    31h ; '1'
.plt:000000000000236B                 jmp     sub_2040
.plt:0000000000002370
.plt:0000000000002370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002370
.plt:0000000000002370 ; Attributes: thunk
.plt:0000000000002370
.plt:0000000000002370 ; int fileno(FILE *stream)
.plt:0000000000002370 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000002370                                         ; rpl_fclose+4B↓p ...
.plt:0000000000002370                 jmp     cs:fileno_ptr
.plt:0000000000002370 _fileno         endp
.plt:0000000000002370
.plt:0000000000002376 ; ---------------------------------------------------------------------------
.plt:0000000000002376                 push    32h ; '2'
.plt:000000000000237B                 jmp     sub_2040
.plt:0000000000002380
.plt:0000000000002380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002380
.plt:0000000000002380 ; Attributes: thunk
.plt:0000000000002380
.plt:0000000000002380 ; int statfs(const char *file, struct statfs *buf)
.plt:0000000000002380 _statfs         proc near               ; CODE XREF: get_fs_usage+80↓p
.plt:0000000000002380                 jmp     cs:statfs_ptr
.plt:0000000000002380 _statfs         endp
.plt:0000000000002380
.plt:0000000000002386 ; ---------------------------------------------------------------------------
.plt:0000000000002386                 push    33h ; '3'
.plt:000000000000238B                 jmp     sub_2040
.plt:0000000000002390
.plt:0000000000002390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002390
.plt:0000000000002390 ; Attributes: thunk
.plt:0000000000002390
.plt:0000000000002390 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002390 ___xstat        proc near               ; CODE XREF: main+61E↓p
.plt:0000000000002390                                         ; main+A4C↓p ...
.plt:0000000000002390                 jmp     cs:__xstat_ptr
.plt:0000000000002390 ___xstat        endp
.plt:0000000000002390
.plt:0000000000002396 ; ---------------------------------------------------------------------------
.plt:0000000000002396                 push    34h ; '4'
.plt:000000000000239B                 jmp     sub_2040
.plt:00000000000023A0
.plt:00000000000023A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023A0
.plt:00000000000023A0 ; Attributes: thunk
.plt:00000000000023A0
.plt:00000000000023A0 ; void sync(void)
.plt:00000000000023A0 _sync           proc near               ; CODE XREF: main+6DA↓p
.plt:00000000000023A0                 jmp     cs:sync_ptr
.plt:00000000000023A0 _sync           endp
.plt:00000000000023A0
.plt:00000000000023A6 ; ---------------------------------------------------------------------------
.plt:00000000000023A6                 push    35h ; '5'
.plt:00000000000023AB                 jmp     sub_2040
.plt:00000000000023B0
.plt:00000000000023B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023B0
.plt:00000000000023B0 ; Attributes: thunk
.plt:00000000000023B0
.plt:00000000000023B0 ; int wcwidth(wchar_t c)
.plt:00000000000023B0 _wcwidth        proc near               ; CODE XREF: mbsalign:loc_848E↓p
.plt:00000000000023B0                                         ; mbsnwidth+E3↓p
.plt:00000000000023B0                 jmp     cs:wcwidth_ptr
.plt:00000000000023B0 _wcwidth        endp
.plt:00000000000023B0
.plt:00000000000023B6 ; ---------------------------------------------------------------------------
.plt:00000000000023B6                 push    36h ; '6'
.plt:00000000000023BB                 jmp     sub_2040
.plt:00000000000023C0
.plt:00000000000023C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023C0
.plt:00000000000023C0 ; Attributes: thunk
.plt:00000000000023C0
.plt:00000000000023C0 ; void *malloc(size_t size)
.plt:00000000000023C0 _malloc         proc near               ; CODE XREF: mdir_name+1F↓p
.plt:00000000000023C0                                         ; transfer_entries+125↓p ...
.plt:00000000000023C0                 jmp     cs:malloc_ptr
.plt:00000000000023C0 _malloc         endp
.plt:00000000000023C0
.plt:00000000000023C6 ; ---------------------------------------------------------------------------
.plt:00000000000023C6                 push    37h ; '7'
.plt:00000000000023CB                 jmp     sub_2040
.plt:00000000000023D0
.plt:00000000000023D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023D0
.plt:00000000000023D0 ; Attributes: thunk
.plt:00000000000023D0
.plt:00000000000023D0 ; int fflush(FILE *stream)
.plt:00000000000023D0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000023D0                                         ; rpl_fflush+3B↓j
.plt:00000000000023D0                 jmp     cs:fflush_ptr
.plt:00000000000023D0 _fflush         endp
.plt:00000000000023D0
.plt:00000000000023D6 ; ---------------------------------------------------------------------------
.plt:00000000000023D6                 push    38h ; '8'
.plt:00000000000023DB                 jmp     sub_2040
.plt:00000000000023E0
.plt:00000000000023E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023E0
.plt:00000000000023E0 ; Attributes: thunk
.plt:00000000000023E0
.plt:00000000000023E0 ; struct mntent *getmntent(FILE *stream)
.plt:00000000000023E0 _getmntent      proc near               ; CODE XREF: read_file_system_list+4AE↓p
.plt:00000000000023E0                                         ; read_file_system_list+6ED↓p
.plt:00000000000023E0                 jmp     cs:getmntent_ptr
.plt:00000000000023E0 _getmntent      endp
.plt:00000000000023E0
.plt:00000000000023E6 ; ---------------------------------------------------------------------------
.plt:00000000000023E6                 push    39h ; '9'
.plt:00000000000023EB                 jmp     sub_2040
.plt:00000000000023F0
.plt:00000000000023F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023F0
.plt:00000000000023F0 ; Attributes: thunk
.plt:00000000000023F0
.plt:00000000000023F0 ; FILE *setmntent(const char *file, const char *mode)
.plt:00000000000023F0 _setmntent      proc near               ; CODE XREF: read_file_system_list+48E↓p
.plt:00000000000023F0                 jmp     cs:setmntent_ptr
.plt:00000000000023F0 _setmntent      endp
.plt:00000000000023F0
.plt:00000000000023F6 ; ---------------------------------------------------------------------------
.plt:00000000000023F6                 push    3Ah ; ':'
.plt:00000000000023FB                 jmp     sub_2040
.plt:0000000000002400
.plt:0000000000002400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002400
.plt:0000000000002400 ; Attributes: thunk
.plt:0000000000002400
.plt:0000000000002400 ; char *nl_langinfo(nl_item item)
.plt:0000000000002400 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002400                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002400 _nl_langinfo    endp
.plt:0000000000002400
.plt:0000000000002406 ; ---------------------------------------------------------------------------
.plt:0000000000002406                 push    3Bh ; ';'
.plt:000000000000240B                 jmp     sub_2040
.plt:0000000000002410
.plt:0000000000002410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002410
.plt:0000000000002410 ; Attributes: thunk
.plt:0000000000002410
.plt:0000000000002410 ; int sscanf(const char *s, const char *format, ...)
.plt:0000000000002410 _sscanf         proc near               ; CODE XREF: read_file_system_list+B5↓p
.plt:0000000000002410                                         ; read_file_system_list+10D↓p
.plt:0000000000002410                 jmp     cs:sscanf_ptr
.plt:0000000000002410 _sscanf         endp
.plt:0000000000002410
.plt:0000000000002416 ; ---------------------------------------------------------------------------
.plt:0000000000002416                 push    3Ch ; '<'
.plt:000000000000241B                 jmp     sub_2040
.plt:0000000000002420
.plt:0000000000002420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002420
.plt:0000000000002420 ; Attributes: thunk
.plt:0000000000002420
.plt:0000000000002420 ; int __freading(FILE *fp)
.plt:0000000000002420 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000002420                                         ; rpl_fflush+9↓p
.plt:0000000000002420                 jmp     cs:__freading_ptr
.plt:0000000000002420 ___freading     endp
.plt:0000000000002420
.plt:0000000000002426 ; ---------------------------------------------------------------------------
.plt:0000000000002426                 push    3Dh ; '='
.plt:000000000000242B                 jmp     sub_2040
.plt:0000000000002430
.plt:0000000000002430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002430
.plt:0000000000002430 ; Attributes: thunk
.plt:0000000000002430
.plt:0000000000002430 ; int statvfs(const char *file, struct statvfs *buf)
.plt:0000000000002430 _statvfs        proc near               ; CODE XREF: get_fs_usage+39↓p
.plt:0000000000002430                 jmp     cs:statvfs_ptr
.plt:0000000000002430 _statvfs        endp
.plt:0000000000002430
.plt:0000000000002436 ; ---------------------------------------------------------------------------
.plt:0000000000002436                 push    3Eh ; '>'
.plt:000000000000243B                 jmp     sub_2040
.plt:0000000000002440
.plt:0000000000002440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002440
.plt:0000000000002440 ; Attributes: thunk
.plt:0000000000002440
.plt:0000000000002440 ; int fchdir(int fd)
.plt:0000000000002440 _fchdir         proc near               ; CODE XREF: restore_cwd+8↓j
.plt:0000000000002440                                         ; chdir_long+1F8↓p
.plt:0000000000002440                 jmp     cs:fchdir_ptr
.plt:0000000000002440 _fchdir         endp
.plt:0000000000002440
.plt:0000000000002446 ; ---------------------------------------------------------------------------
.plt:0000000000002446                 push    3Fh ; '?'
.plt:000000000000244B                 jmp     sub_2040
.plt:0000000000002450
.plt:0000000000002450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002450
.plt:0000000000002450 ; Attributes: thunk
.plt:0000000000002450
.plt:0000000000002450 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002450 _realloc        proc near               ; CODE XREF: ambsalign+32↓p
.plt:0000000000002450                                         ; xrealloc+11↓p ...
.plt:0000000000002450                 jmp     cs:realloc_ptr
.plt:0000000000002450 _realloc        endp
.plt:0000000000002450
.plt:0000000000002456 ; ---------------------------------------------------------------------------
.plt:0000000000002456                 push    40h ; '@'
.plt:000000000000245B                 jmp     sub_2040
.plt:0000000000002460
.plt:0000000000002460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002460
.plt:0000000000002460 ; Attributes: thunk
.plt:0000000000002460
.plt:0000000000002460 ; char *setlocale(int category, const char *locale)
.plt:0000000000002460 _setlocale      proc near               ; CODE XREF: main+50↓p
.plt:0000000000002460                                         ; usage+33B↓p ...
.plt:0000000000002460                 jmp     cs:setlocale_ptr
.plt:0000000000002460 _setlocale      endp
.plt:0000000000002460
.plt:0000000000002466 ; ---------------------------------------------------------------------------
.plt:0000000000002466                 push    41h ; 'A'
.plt:000000000000246B                 jmp     sub_2040
.plt:0000000000002470
.plt:0000000000002470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002470
.plt:0000000000002470 ; Attributes: thunk
.plt:0000000000002470
.plt:0000000000002470 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000002470                                         ; usage+1EE↓p ...
.plt:0000000000002470                 jmp     cs:__printf_chk_ptr
.plt:0000000000002470 ___printf_chk   endp
.plt:0000000000002470
.plt:0000000000002476 ; ---------------------------------------------------------------------------
.plt:0000000000002476                 push    42h ; 'B'
.plt:000000000000247B                 jmp     sub_2040
.plt:0000000000002480
.plt:0000000000002480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002480
.plt:0000000000002480 ; Attributes: thunk
.plt:0000000000002480
.plt:0000000000002480 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000002480 _mempcpy        proc near               ; CODE XREF: mbsalign+F7↓p
.plt:0000000000002480                 jmp     cs:mempcpy_ptr
.plt:0000000000002480 _mempcpy        endp
.plt:0000000000002480
.plt:0000000000002486 ; ---------------------------------------------------------------------------
.plt:0000000000002486                 push    43h ; 'C'
.plt:000000000000248B                 jmp     sub_2040
.plt:0000000000002490
.plt:0000000000002490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002490
.plt:0000000000002490 ; Attributes: thunk
.plt:0000000000002490
.plt:0000000000002490 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000002490 _memmove        proc near               ; CODE XREF: replace_invalid_chars+6C↓p
.plt:0000000000002490                                         ; canonicalize_filename_mode+4A8↓p ...
.plt:0000000000002490                 jmp     cs:memmove_ptr
.plt:0000000000002490 _memmove        endp
.plt:0000000000002490
.plt:0000000000002496 ; ---------------------------------------------------------------------------
.plt:0000000000002496                 push    44h ; 'D'
.plt:000000000000249B                 jmp     sub_2040
.plt:00000000000024A0
.plt:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024A0
.plt:00000000000024A0 ; Attributes: thunk
.plt:00000000000024A0
.plt:00000000000024A0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000024A0 _error          proc near               ; CODE XREF: main+500↓p
.plt:00000000000024A0                                         ; main+64B↓p ...
.plt:00000000000024A0                 jmp     cs:error_ptr
.plt:00000000000024A0 _error          endp
.plt:00000000000024A0
.plt:00000000000024A6 ; ---------------------------------------------------------------------------
.plt:00000000000024A6                 push    45h ; 'E'
.plt:00000000000024AB                 jmp     sub_2040
.plt:00000000000024B0
.plt:00000000000024B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024B0
.plt:00000000000024B0 ; Attributes: thunk
.plt:00000000000024B0
.plt:00000000000024B0 ; void *memrchr(const void *s, int c, size_t n)
.plt:00000000000024B0 _memrchr        proc near               ; CODE XREF: chdir_long+149↓p
.plt:00000000000024B0                 jmp     cs:memrchr_ptr
.plt:00000000000024B0 _memrchr        endp
.plt:00000000000024B0
.plt:00000000000024B6 ; ---------------------------------------------------------------------------
.plt:00000000000024B6                 push    46h ; 'F'
.plt:00000000000024BB                 jmp     sub_2040
.plt:00000000000024C0
.plt:00000000000024C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024C0
.plt:00000000000024C0 ; Attributes: thunk
.plt:00000000000024C0
.plt:00000000000024C0 ; int open(const char *file, int oflag, ...)
.plt:00000000000024C0 _open           proc near               ; CODE XREF: main+5DF↓p
.plt:00000000000024C0                                         ; open_safer+23↓p
.plt:00000000000024C0                 jmp     cs:open_ptr
.plt:00000000000024C0 _open           endp
.plt:00000000000024C0
.plt:00000000000024C6 ; ---------------------------------------------------------------------------
.plt:00000000000024C6                 push    47h ; 'G'
.plt:00000000000024CB                 jmp     sub_2040
.plt:00000000000024D0
.plt:00000000000024D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024D0
.plt:00000000000024D0 ; Attributes: thunk
.plt:00000000000024D0
.plt:00000000000024D0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000024D0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_CC4A↓j
.plt:00000000000024D0                 jmp     cs:fseeko_ptr
.plt:00000000000024D0 _fseeko         endp
.plt:00000000000024D0
.plt:00000000000024D6 ; ---------------------------------------------------------------------------
.plt:00000000000024D6                 push    48h ; 'H'
.plt:00000000000024DB                 jmp     sub_2040
.plt:00000000000024E0
.plt:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024E0
.plt:00000000000024E0 ; Attributes: thunk
.plt:00000000000024E0
.plt:00000000000024E0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000024E0 _fopen          proc near               ; CODE XREF: read_file_system_list+2C↓p
.plt:00000000000024E0                 jmp     cs:fopen_ptr
.plt:00000000000024E0 _fopen          endp
.plt:00000000000024E0
.plt:00000000000024E6 ; ---------------------------------------------------------------------------
.plt:00000000000024E6                 push    49h ; 'I'
.plt:00000000000024EB                 jmp     sub_2040
.plt:00000000000024F0
.plt:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024F0
.plt:00000000000024F0 ; Attributes: thunk
.plt:00000000000024F0
.plt:00000000000024F0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000024F0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000024F0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000024F0 ___cxa_atexit   endp
.plt:00000000000024F0
.plt:00000000000024F6 ; ---------------------------------------------------------------------------
.plt:00000000000024F6                 push    4Ah ; 'J'
.plt:00000000000024FB                 jmp     sub_2040
.plt:0000000000002500
.plt:0000000000002500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002500
.plt:0000000000002500 ; Attributes: thunk
.plt:0000000000002500
.plt:0000000000002500 ; size_t wcstombs(char *s, const wchar_t *pwcs, size_t n)
.plt:0000000000002500 _wcstombs       proc near               ; CODE XREF: mbsalign+2A2↓p
.plt:0000000000002500                                         ; mbsalign+327↓p
.plt:0000000000002500                 jmp     cs:wcstombs_ptr
.plt:0000000000002500 _wcstombs       endp
.plt:0000000000002500
.plt:0000000000002506 ; ---------------------------------------------------------------------------
.plt:0000000000002506                 push    4Bh ; 'K'
.plt:000000000000250B                 jmp     sub_2040
.plt:0000000000002510
.plt:0000000000002510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002510
.plt:0000000000002510 ; Attributes: noreturn thunk
.plt:0000000000002510
.plt:0000000000002510 ; void __noreturn exit(int status)
.plt:0000000000002510 _exit           proc near               ; CODE XREF: main+40C↓p
.plt:0000000000002510                                         ; usage+58↓p
.plt:0000000000002510                 jmp     cs:exit_ptr
.plt:0000000000002510 _exit           endp
.plt:0000000000002510
.plt:0000000000002516 ; ---------------------------------------------------------------------------
.plt:0000000000002516                 push    4Ch ; 'L'
.plt:000000000000251B                 jmp     sub_2040
.plt:0000000000002520
.plt:0000000000002520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002520
.plt:0000000000002520 ; Attributes: thunk
.plt:0000000000002520
.plt:0000000000002520 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002520 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000002520                 jmp     cs:fwrite_ptr
.plt:0000000000002520 _fwrite         endp
.plt:0000000000002520
.plt:0000000000002526 ; ---------------------------------------------------------------------------
.plt:0000000000002526                 push    4Dh ; 'M'
.plt:000000000000252B                 jmp     sub_2040
.plt:0000000000002530
.plt:0000000000002530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002530
.plt:0000000000002530 ; Attributes: thunk
.plt:0000000000002530
.plt:0000000000002530 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002530                                         ; hash_print_statistics+76↓p ...
.plt:0000000000002530                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002530 ___fprintf_chk  endp
.plt:0000000000002530
.plt:0000000000002536 ; ---------------------------------------------------------------------------
.plt:0000000000002536                 push    4Eh ; 'N'
.plt:000000000000253B                 jmp     sub_2040
.plt:0000000000002540
.plt:0000000000002540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002540
.plt:0000000000002540 ; Attributes: thunk
.plt:0000000000002540
.plt:0000000000002540 ; char *strdup(const char *s)
.plt:0000000000002540 _strdup         proc near               ; CODE XREF: get_header+63↓p
.plt:0000000000002540                                         ; get_dev+475↓p
.plt:0000000000002540                 jmp     cs:strdup_ptr
.plt:0000000000002540 _strdup         endp
.plt:0000000000002540
.plt:0000000000002546 ; ---------------------------------------------------------------------------
.plt:0000000000002546                 push    4Fh ; 'O'
.plt:000000000000254B                 jmp     sub_2040
.plt:0000000000002550
.plt:0000000000002550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002550
.plt:0000000000002550 ; Attributes: thunk
.plt:0000000000002550
.plt:0000000000002550 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002550 _mbsinit        proc near               ; CODE XREF: mbsnwidth+A7↓p
.plt:0000000000002550                                         ; quotearg_buffer_restyled+9A8↓p
.plt:0000000000002550                 jmp     cs:mbsinit_ptr
.plt:0000000000002550 _mbsinit        endp
.plt:0000000000002550
.plt:0000000000002556 ; ---------------------------------------------------------------------------
.plt:0000000000002556                 push    50h ; 'P'
.plt:000000000000255B                 jmp     sub_2040
.plt:0000000000002560
.plt:0000000000002560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002560
.plt:0000000000002560 ; Attributes: thunk
.plt:0000000000002560
.plt:0000000000002560 ; int iswprint(wint_t wc)
.plt:0000000000002560 _iswprint       proc near               ; CODE XREF: mbsalign+25D↓p
.plt:0000000000002560                                         ; quotearg_buffer_restyled+990↓p
.plt:0000000000002560                 jmp     cs:iswprint_ptr
.plt:0000000000002560 _iswprint       endp
.plt:0000000000002560
.plt:0000000000002566 ; ---------------------------------------------------------------------------
.plt:0000000000002566                 push    51h ; 'Q'
.plt:000000000000256B                 jmp     sub_2040
.plt:0000000000002570
.plt:0000000000002570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002570
.plt:0000000000002570 ; Attributes: thunk
.plt:0000000000002570
.plt:0000000000002570 ; char *hasmntopt(const struct mntent *mnt, const char *opt)
.plt:0000000000002570 _hasmntopt      proc near               ; CODE XREF: read_file_system_list+4CA↓p
.plt:0000000000002570                 jmp     cs:hasmntopt_ptr
.plt:0000000000002570 _hasmntopt      endp
.plt:0000000000002570
.plt:0000000000002576 ; ---------------------------------------------------------------------------
.plt:0000000000002576                 push    52h ; 'R'
.plt:000000000000257B                 jmp     sub_2040
.plt:0000000000002580
.plt:0000000000002580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002580
.plt:0000000000002580 ; Attributes: thunk
.plt:0000000000002580
.plt:0000000000002580 ; char *strstr(const char *haystack, const char *needle)
.plt:0000000000002580 _strstr         proc near               ; CODE XREF: read_file_system_list+D7↓p
.plt:0000000000002580                 jmp     cs:strstr_ptr
.plt:0000000000002580 _strstr         endp
.plt:0000000000002580
.plt:0000000000002586 ; ---------------------------------------------------------------------------
.plt:0000000000002586                 push    53h ; 'S'
.plt:000000000000258B                 jmp     sub_2040
.plt:0000000000002590
.plt:0000000000002590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002590
.plt:0000000000002590 ; Attributes: thunk
.plt:0000000000002590
.plt:0000000000002590 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002590 ___ctype_b_loc  proc near               ; CODE XREF: mbsnwidth+16F↓p
.plt:0000000000002590                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000002590                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002590 ___ctype_b_loc  endp
.plt:0000000000002590
.plt:0000000000002596 ; ---------------------------------------------------------------------------
.plt:0000000000002596                 push    54h ; 'T'
.plt:000000000000259B                 jmp     sub_2040
.plt:00000000000025A0
.plt:00000000000025A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025A0
.plt:00000000000025A0 ; Attributes: thunk
.plt:00000000000025A0
.plt:00000000000025A0 ___sprintf_chk  proc near               ; CODE XREF: human_readable+1C1↓p
.plt:00000000000025A0                                         ; human_readable+332↓p ...
.plt:00000000000025A0                 jmp     cs:__sprintf_chk_ptr
.plt:00000000000025A0 ___sprintf_chk  endp
.plt:00000000000025A0
.plt:00000000000025A6 ; ---------------------------------------------------------------------------
.plt:00000000000025A6                 push    55h ; 'U'
.plt:00000000000025AB                 jmp     sub_2040
.plt:00000000000025AB ; } // starts at 2040
.plt:00000000000025AB _plt            ends
.plt:00000000000025AB
.plt.got:00000000000025B0 ; ===========================================================================
.plt.got:00000000000025B0
.plt.got:00000000000025B0 ; Segment type: Pure code
.plt.got:00000000000025B0 ; Segment permissions: Read/Execute
.plt.got:00000000000025B0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000025B0                 assume cs:_plt_got
.plt.got:00000000000025B0                 ;org 25B0h
.plt.got:00000000000025B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000025B0
.plt.got:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000025B0
.plt.got:00000000000025B0 ; Attributes: thunk
.plt.got:00000000000025B0
.plt.got:00000000000025B0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000025B0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000025B0 ; __unwind {
.plt.got:00000000000025B0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000025B0 __cxa_finalize  endp
.plt.got:00000000000025B0
.plt.got:00000000000025B0 ; ---------------------------------------------------------------------------
.plt.got:00000000000025B6                 align 8
.plt.got:00000000000025B6 ; } // starts at 25B0
.plt.got:00000000000025B6 _plt_got        ends
.plt.got:00000000000025B6
LOAD:00000000000025B8 ; ===========================================================================
LOAD:00000000000025B8
LOAD:00000000000025B8 ; Segment type: Pure code
LOAD:00000000000025B8 ; Segment permissions: Read/Execute
LOAD:00000000000025B8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000025B8                 assume cs:LOAD
LOAD:00000000000025B8                 ;org 25B8h
LOAD:00000000000025B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000025B8                 align 20h
LOAD:00000000000025B8 LOAD            ends
LOAD:00000000000025B8
.text:00000000000025C0 ; ===========================================================================
.text:00000000000025C0
.text:00000000000025C0 ; Segment type: Pure code
.text:00000000000025C0 ; Segment permissions: Read/Execute
.text:00000000000025C0 _text           segment para public 'CODE' use64
.text:00000000000025C0                 assume cs:_text
.text:00000000000025C0                 ;org 25C0h
.text:00000000000025C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000025C0
.text:00000000000025C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025C0
.text:00000000000025C0
.text:00000000000025C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000025C0                 public main
.text:00000000000025C0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000025C0
.text:00000000000025C0 argc            = dword ptr -170h
.text:00000000000025C0 var_168         = qword ptr -168h
.text:00000000000025C0 s1              = qword ptr -160h
.text:00000000000025C0 var_158         = qword ptr -158h
.text:00000000000025C0 ptr             = qword ptr -150h
.text:00000000000025C0 name            = qword ptr -148h
.text:00000000000025C0 var_140         = qword ptr -140h
.text:00000000000025C0 var_138         = qword ptr -138h
.text:00000000000025C0 stat_buf        = qword ptr -130h
.text:00000000000025C0 var_128         = qword ptr -128h
.text:00000000000025C0 var_120         = qword ptr -120h
.text:00000000000025C0 var_118         = qword ptr -118h
.text:00000000000025C0 var_110         = qword ptr -110h
.text:00000000000025C0 var_102         = byte ptr -102h
.text:00000000000025C0 var_101         = byte ptr -101h
.text:00000000000025C0 var_100         = qword ptr -100h
.text:00000000000025C0 longind         = dword ptr -0F8h
.text:00000000000025C0 var_D8          = qword ptr -0D8h
.text:00000000000025C0 var_40          = qword ptr -40h
.text:00000000000025C0
.text:00000000000025C0 ; __unwind {
.text:00000000000025C0                 push    r15
.text:00000000000025C2                 push    r14
.text:00000000000025C4                 mov     r14, rsi
.text:00000000000025C7                 push    r13
.text:00000000000025C9                 push    r12
.text:00000000000025CB                 push    rbp
.text:00000000000025CC                 push    rbx
.text:00000000000025CD                 lea     rbx, long_options
.text:00000000000025D4                 xor     ebp, ebp
.text:00000000000025D6                 sub     rsp, 148h
.text:00000000000025DD                 mov     [rsp+178h+argc], edi
.text:00000000000025E1                 mov     rdi, [rsi]
.text:00000000000025E4                 lea     r15, [rsp+178h+longind]
.text:00000000000025EC                 mov     rax, fs:28h
.text:00000000000025F5                 mov     [rsp+178h+var_40], rax
.text:00000000000025FD                 xor     eax, eax
.text:00000000000025FF                 call    set_program_name
.text:0000000000002604                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000260B                 mov     edi, 6          ; category
.text:0000000000002610                 call    _setlocale
.text:0000000000002615                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000261C                 lea     rdi, domainname ; "coreutils"
.text:0000000000002623                 call    _bindtextdomain
.text:0000000000002628                 lea     rdi, domainname ; "coreutils"
.text:000000000000262F                 call    _textdomain
.text:0000000000002634                 lea     rdi, close_stdout
.text:000000000000263B                 call    atexit
.text:0000000000002640                 lea     rsi, msgid      ; "options %s and %s are mutually exclusiv"...
.text:0000000000002647                 mov     edx, 5          ; category
.text:000000000000264C                 xor     edi, edi        ; domainname
.text:000000000000264E                 mov     cs:fs_select_list, 0
.text:0000000000002659                 mov     cs:fs_exclude_list, 0
.text:0000000000002664                 mov     cs:show_all_fs, 0
.text:000000000000266B                 mov     cs:show_listed_fs, 0
.text:0000000000002672                 mov     cs:human_output_opts, 0FFFFFFFFh
.text:000000000000267C                 mov     cs:print_type, 0
.text:0000000000002683                 mov     cs:file_systems_processed, 0
.text:000000000000268A                 mov     cs:exit_status, 0
.text:0000000000002694                 mov     cs:print_grand_total, 0
.text:000000000000269B                 mov     cs:grand_fsu, 1
.text:00000000000026A6                 call    _dcgettext
.text:00000000000026AB                 mov     r12, rax
.text:00000000000026AE                 xchg    ax, ax
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: main+12B↓j
.text:00000000000026B0                                         ; main+15D↓j ...
.text:00000000000026B0                 mov     edi, [rsp+178h+argc] ; argc
.text:00000000000026B4                 lea     rdx, shortopts  ; "aB:iF:hHklmPTt:vx:"
.text:00000000000026BB                 mov     r8, r15         ; longind
.text:00000000000026BE                 mov     rcx, rbx        ; longopts
.text:00000000000026C1                 mov     rsi, r14        ; argv
.text:00000000000026C4                 mov     [rsp+178h+longind], 0FFFFFFFFh
.text:00000000000026CF                 call    _getopt_long
.text:00000000000026D4                 cmp     eax, 0FFFFFFFFh
.text:00000000000026D7                 jz      loc_2A10
.text:00000000000026DD                 cmp     eax, 69h ; 'i'
.text:00000000000026E0                 jz      loc_2880
.text:00000000000026E6                 jle     short loc_2720
.text:00000000000026E8                 cmp     eax, 76h ; 'v'
.text:00000000000026EB                 jz      short loc_26B0
.text:00000000000026ED                 jle     loc_2770
.text:00000000000026F3                 cmp     eax, 81h
.text:00000000000026F8                 jz      loc_2938
.text:00000000000026FE                 jg      loc_2808
.text:0000000000002704                 cmp     eax, 78h ; 'x'
.text:0000000000002707                 jz      loc_2958
.text:000000000000270D                 add     eax, 0FFFFFF80h
.text:0000000000002710                 jnz     loc_2A06
.text:0000000000002716                 mov     cs:require_sync, 0
.text:000000000000271D                 jmp     short loc_26B0
.text:000000000000271D ; ---------------------------------------------------------------------------
.text:000000000000271F                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: main+126↑j
.text:0000000000002720                 cmp     eax, 48h ; 'H'
.text:0000000000002723                 jz      loc_28A0
.text:0000000000002729                 jle     short loc_27A8
.text:000000000000272B                 cmp     eax, 54h ; 'T'
.text:000000000000272E                 jz      loc_28E0
.text:0000000000002734                 jle     loc_28C0
.text:000000000000273A                 cmp     eax, 61h ; 'a'
.text:000000000000273D                 jz      loc_2948
.text:0000000000002743                 cmp     eax, 68h ; 'h'
.text:0000000000002746                 jnz     loc_2A06
.text:000000000000274C                 mov     cs:human_output_opts, 0B0h
.text:0000000000002756                 mov     cs:output_block_size, 1
.text:0000000000002761                 jmp     loc_26B0
.text:0000000000002761 ; ---------------------------------------------------------------------------
.text:0000000000002766                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: main+12D↑j
.text:0000000000002770                 cmp     eax, 6Ch ; 'l'
.text:0000000000002773                 jz      loc_2928
.text:0000000000002779                 jle     loc_2900
.text:000000000000277F                 cmp     eax, 6Dh ; 'm'
.text:0000000000002782                 jnz     loc_2A01
.text:0000000000002788                 mov     cs:human_output_opts, 0
.text:0000000000002792                 mov     cs:output_block_size, 100000h
.text:000000000000279D                 jmp     loc_26B0
.text:000000000000279D ; ---------------------------------------------------------------------------
.text:00000000000027A2                 align 8
.text:00000000000027A8
.text:00000000000027A8 loc_27A8:                               ; CODE XREF: main+169↑j
.text:00000000000027A8                 cmp     eax, 0FFFFFF7Eh
.text:00000000000027AD                 jz      loc_3ABD
.text:00000000000027B3                 jle     loc_2988
.text:00000000000027B9                 cmp     eax, 42h ; 'B'
.text:00000000000027BC                 jnz     loc_29D1
.text:00000000000027C2                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:00000000000027C9                 lea     rdx, output_block_size
.text:00000000000027D0                 lea     rsi, human_output_opts
.text:00000000000027D7                 call    human_options
.text:00000000000027DC                 test    eax, eax
.text:00000000000027DE                 jz      loc_26B0
.text:00000000000027E4                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:00000000000027EB                 mov     esi, [rsp+178h+longind]
.text:00000000000027F2                 lea     rcx, long_options
.text:00000000000027F9                 mov     edx, 42h ; 'B'
.text:00000000000027FE                 mov     edi, eax
.text:0000000000002800                 call    xstrtol_fatal
.text:0000000000002800 ; ---------------------------------------------------------------------------
.text:0000000000002805                 align 8
.text:0000000000002808
.text:0000000000002808 loc_2808:                               ; CODE XREF: main+13E↑j
.text:0000000000002808                 cmp     eax, 82h
.text:000000000000280D                 jz      short loc_2870
.text:000000000000280F                 cmp     eax, 83h
.text:0000000000002814                 jnz     loc_2A06
.text:000000000000281A                 mov     eax, cs:header_mode
.text:0000000000002820                 cmp     eax, 1
.text:0000000000002823                 jz      loc_3B7E
.text:0000000000002829                 test    eax, eax
.text:000000000000282B                 jnz     short loc_2836
.text:000000000000282D                 test    bpl, bpl
.text:0000000000002830                 jnz     loc_3AEF
.text:0000000000002836
.text:0000000000002836 loc_2836:                               ; CODE XREF: main+26B↑j
.text:0000000000002836                 cmp     cs:print_type, 0
.text:000000000000283D                 jnz     loc_3B6E
.text:0000000000002843                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000284A                 mov     cs:header_mode, 4
.text:0000000000002854                 test    rdi, rdi
.text:0000000000002857                 jz      loc_26B0
.text:000000000000285D                 call    decode_output_arg
.text:0000000000002862                 jmp     loc_26B0
.text:0000000000002862 ; ---------------------------------------------------------------------------
.text:0000000000002867                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: main+24D↑j
.text:0000000000002870                 mov     cs:print_grand_total, 1
.text:0000000000002877                 jmp     loc_26B0
.text:0000000000002877 ; ---------------------------------------------------------------------------
.text:000000000000287C                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: main+120↑j
.text:0000000000002880                 cmp     cs:header_mode, 4
.text:0000000000002887                 jz      loc_3B7E
.text:000000000000288D                 mov     cs:header_mode, 1
.text:0000000000002897                 jmp     loc_26B0
.text:0000000000002897 ; ---------------------------------------------------------------------------
.text:000000000000289C                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: main+163↑j
.text:00000000000028A0                 mov     cs:human_output_opts, 90h
.text:00000000000028AA                 mov     cs:output_block_size, 1
.text:00000000000028B5                 jmp     loc_26B0
.text:00000000000028B5 ; ---------------------------------------------------------------------------
.text:00000000000028BA                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: main+174↑j
.text:00000000000028C0                 cmp     eax, 50h ; 'P'
.text:00000000000028C3                 jnz     loc_2A06
.text:00000000000028C9                 cmp     cs:header_mode, 4
.text:00000000000028D0                 jz      loc_3B4D
.text:00000000000028D6                 mov     ebp, 1
.text:00000000000028DB                 jmp     loc_26B0
.text:00000000000028E0 ; ---------------------------------------------------------------------------
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: main+16E↑j
.text:00000000000028E0                 cmp     cs:header_mode, 4
.text:00000000000028E7                 jz      loc_3B6E
.text:00000000000028ED                 mov     cs:print_type, 1
.text:00000000000028F4                 jmp     loc_26B0
.text:00000000000028F4 ; ---------------------------------------------------------------------------
.text:00000000000028F9                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: main+1B9↑j
.text:0000000000002900                 cmp     eax, 6Bh ; 'k'
.text:0000000000002903                 jnz     loc_2A06
.text:0000000000002909                 mov     cs:human_output_opts, 0
.text:0000000000002913                 mov     cs:output_block_size, 400h
.text:000000000000291E                 jmp     loc_26B0
.text:000000000000291E ; ---------------------------------------------------------------------------
.text:0000000000002923                 align 8
.text:0000000000002928
.text:0000000000002928 loc_2928:                               ; CODE XREF: main+1B3↑j
.text:0000000000002928                 mov     cs:show_local_fs, 1
.text:000000000000292F                 jmp     loc_26B0
.text:000000000000292F ; ---------------------------------------------------------------------------
.text:0000000000002934                 align 8
.text:0000000000002938
.text:0000000000002938 loc_2938:                               ; CODE XREF: main+138↑j
.text:0000000000002938                 mov     cs:require_sync, 1
.text:000000000000293F                 jmp     loc_26B0
.text:000000000000293F ; ---------------------------------------------------------------------------
.text:0000000000002944                 align 8
.text:0000000000002948
.text:0000000000002948 loc_2948:                               ; CODE XREF: main+17D↑j
.text:0000000000002948                 mov     cs:show_all_fs, 1
.text:000000000000294F                 jmp     loc_26B0
.text:000000000000294F ; ---------------------------------------------------------------------------
.text:0000000000002954                 align 8
.text:0000000000002958
.text:0000000000002958 loc_2958:                               ; CODE XREF: main+147↑j
.text:0000000000002958                 mov     edi, 10h
.text:000000000000295D                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000002964                 call    xmalloc
.text:0000000000002969                 mov     rdx, cs:fs_exclude_list
.text:0000000000002970                 mov     cs:fs_exclude_list, rax
.text:0000000000002977                 mov     [rax], r13
.text:000000000000297A                 mov     [rax+8], rdx
.text:000000000000297E                 jmp     loc_26B0
.text:000000000000297E ; ---------------------------------------------------------------------------
.text:0000000000002983                 align 8
.text:0000000000002988
.text:0000000000002988 loc_2988:                               ; CODE XREF: main+1F3↑j
.text:0000000000002988                 cmp     eax, 0FFFFFF7Dh
.text:000000000000298D                 jnz     short loc_2A06
.text:000000000000298F                 lea     rax, aPaulEggert ; "Paul Eggert"
.text:0000000000002996                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000299D                 mov     rcx, cs:Version
.text:00000000000029A4                 push    0
.text:00000000000029A6                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:00000000000029AD                 lea     r8, aTorbjornGranlu ; "Torbjorn Granlund"
.text:00000000000029B4                 push    rax
.text:00000000000029B5                 lea     rdx, unk_F0E8
.text:00000000000029BC                 lea     rsi, aDf        ; "df"
.text:00000000000029C3                 xor     eax, eax
.text:00000000000029C5                 call    version_etc
.text:00000000000029CA                 xor     edi, edi        ; status
.text:00000000000029CC                 call    _exit
.text:00000000000029D1 ; ---------------------------------------------------------------------------
.text:00000000000029D1
.text:00000000000029D1 loc_29D1:                               ; CODE XREF: main+1FC↑j
.text:00000000000029D1                 cmp     eax, 46h ; 'F'
.text:00000000000029D4                 jnz     short loc_2A06
.text:00000000000029D6
.text:00000000000029D6 loc_29D6:                               ; CODE XREF: main+444↓j
.text:00000000000029D6                 mov     edi, 10h
.text:00000000000029DB                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:00000000000029E2                 call    xmalloc
.text:00000000000029E7                 mov     rdx, cs:fs_select_list
.text:00000000000029EE                 mov     cs:fs_select_list, rax
.text:00000000000029F5                 mov     [rax], r13
.text:00000000000029F8                 mov     [rax+8], rdx
.text:00000000000029FC                 jmp     loc_26B0
.text:0000000000002A01 ; ---------------------------------------------------------------------------
.text:0000000000002A01
.text:0000000000002A01 loc_2A01:                               ; CODE XREF: main+1C2↑j
.text:0000000000002A01                 cmp     eax, 74h ; 't'
.text:0000000000002A04                 jz      short loc_29D6
.text:0000000000002A06
.text:0000000000002A06 loc_2A06:                               ; CODE XREF: main+150↑j
.text:0000000000002A06                                         ; main+186↑j ...
.text:0000000000002A06                 mov     edi, 1          ; status
.text:0000000000002A0B                 call    usage
.text:0000000000002A10 ; ---------------------------------------------------------------------------
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: main+117↑j
.text:0000000000002A10                 cmp     cs:human_output_opts, 0FFFFFFFFh
.text:0000000000002A17                 jz      loc_2C24
.text:0000000000002A1D
.text:0000000000002A1D loc_2A1D:                               ; CODE XREF: main+69C↓j
.text:0000000000002A1D                                         ; main+73C↓j
.text:0000000000002A1D                 mov     eax, cs:header_mode
.text:0000000000002A23                 cmp     eax, 1
.text:0000000000002A26                 jz      short loc_2A44
.text:0000000000002A28                 cmp     eax, 4
.text:0000000000002A2B                 jz      short loc_2A44
.text:0000000000002A2D                 test    byte ptr cs:human_output_opts, 10h
.text:0000000000002A34                 jz      loc_2CC2
.text:0000000000002A3A                 mov     cs:header_mode, 2
.text:0000000000002A44
.text:0000000000002A44 loc_2A44:                               ; CODE XREF: main+466↑j
.text:0000000000002A44                                         ; main+46B↑j ...
.text:0000000000002A44                 mov     rbp, cs:fs_select_list
.text:0000000000002A4B                 xor     r12d, r12d
.text:0000000000002A4E                 test    rbp, rbp
.text:0000000000002A51                 jz      loc_2B01
.text:0000000000002A57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: main+50C↓j
.text:0000000000002A60                 mov     rbx, cs:fs_exclude_list
.text:0000000000002A67                 test    rbx, rbx
.text:0000000000002A6A                 jz      short loc_2AC5
.text:0000000000002A6C                 mov     r13, [rbp+0]
.text:0000000000002A70                 jmp     short loc_2A81
.text:0000000000002A70 ; ---------------------------------------------------------------------------
.text:0000000000002A72                 align 8
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: main+4CE↓j
.text:0000000000002A78                 mov     rbx, [rbx+8]
.text:0000000000002A7C                 test    rbx, rbx
.text:0000000000002A7F                 jz      short loc_2AC5
.text:0000000000002A81
.text:0000000000002A81 loc_2A81:                               ; CODE XREF: main+4B0↑j
.text:0000000000002A81                 mov     rsi, [rbx]      ; s2
.text:0000000000002A84                 mov     rdi, r13        ; s1
.text:0000000000002A87                 call    _strcmp
.text:0000000000002A8C                 test    eax, eax
.text:0000000000002A8E                 jnz     short loc_2A78
.text:0000000000002A90                 mov     rdi, r13
.text:0000000000002A93                 mov     r12d, 1
.text:0000000000002A99                 call    quote
.text:0000000000002A9E                 lea     rsi, aFileSystemType ; "file system type %s both selected and e"...
.text:0000000000002AA5                 mov     rbx, rax
.text:0000000000002AA8                 mov     edx, 5          ; category
.text:0000000000002AAD                 xor     edi, edi        ; domainname
.text:0000000000002AAF                 call    _dcgettext
.text:0000000000002AB4                 mov     rcx, rbx
.text:0000000000002AB7                 mov     rdx, rax        ; format
.text:0000000000002ABA                 xor     esi, esi        ; errnum
.text:0000000000002ABC                 xor     edi, edi        ; status
.text:0000000000002ABE                 xor     eax, eax
.text:0000000000002AC0                 call    _error
.text:0000000000002AC5
.text:0000000000002AC5 loc_2AC5:                               ; CODE XREF: main+4AA↑j
.text:0000000000002AC5                                         ; main+4BF↑j
.text:0000000000002AC5                 mov     rbp, [rbp+8]
.text:0000000000002AC9                 test    rbp, rbp
.text:0000000000002ACC                 jnz     short loc_2A60
.text:0000000000002ACE                 test    r12b, r12b
.text:0000000000002AD1                 mov     eax, 1
.text:0000000000002AD6                 jz      short loc_2B01
.text:0000000000002AD8
.text:0000000000002AD8 loc_2AD8:                               ; CODE XREF: main+E02↓j
.text:0000000000002AD8                 mov     rcx, [rsp+178h+var_40]
.text:0000000000002AE0                 xor     rcx, fs:28h
.text:0000000000002AE9                 jnz     loc_3B8E
.text:0000000000002AEF                 add     rsp, 148h
.text:0000000000002AF6                 pop     rbx
.text:0000000000002AF7                 pop     rbp
.text:0000000000002AF8                 pop     r12
.text:0000000000002AFA                 pop     r13
.text:0000000000002AFC                 pop     r14
.text:0000000000002AFE                 pop     r15
.text:0000000000002B00                 retn
.text:0000000000002B01 ; ---------------------------------------------------------------------------
.text:0000000000002B01
.text:0000000000002B01 loc_2B01:                               ; CODE XREF: main+491↑j
.text:0000000000002B01                                         ; main+516↑j
.text:0000000000002B01                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002B07                 cmp     eax, [rsp+178h+argc]
.text:0000000000002B0B                 jge     loc_2C69
.text:0000000000002B11                 mov     ecx, [rsp+178h+argc]
.text:0000000000002B15                 mov     edx, 90h
.text:0000000000002B1A                 xor     esi, esi
.text:0000000000002B1C                 sub     ecx, eax
.text:0000000000002B1E                 mov     rax, rdx
.text:0000000000002B21                 movsxd  rcx, ecx
.text:0000000000002B24                 mul     rcx
.text:0000000000002B27                 jo      loc_3B43
.text:0000000000002B2D
.text:0000000000002B2D loc_2B2D:                               ; CODE XREF: main+1588↓j
.text:0000000000002B2D                 test    rax, rax
.text:0000000000002B30                 js      loc_3B13
.text:0000000000002B36                 test    rsi, rsi
.text:0000000000002B39                 jnz     loc_3B13
.text:0000000000002B3F                 imul    rdi, rcx, 90h
.text:0000000000002B46                 lea     rbp, aS_0+2     ; "%s"
.text:0000000000002B4D                 call    xmalloc
.text:0000000000002B52                 movsxd  r12, cs:optind@@GLIBC_2_2_5
.text:0000000000002B59                 mov     [rsp+178h+var_168], r15
.text:0000000000002B5E                 mov     r13, rax
.text:0000000000002B61                 mov     r15, r14
.text:0000000000002B64                 mov     [rsp+178h+var_118], rax
.text:0000000000002B69                 mov     r14, r12
.text:0000000000002B6C                 mov     r12d, [rsp+178h+argc]
.text:0000000000002B71                 jmp     short loc_2BB3
.text:0000000000002B73 ; ---------------------------------------------------------------------------
.text:0000000000002B73
.text:0000000000002B73 loc_2B73:                               ; CODE XREF: main+625↓j
.text:0000000000002B73                 sub     ebx, cs:optind@@GLIBC_2_2_5
.text:0000000000002B79                 movsxd  rax, ebx
.text:0000000000002B7C                 imul    rax, 90h
.text:0000000000002B83                 mov     eax, [r13+rax+18h]
.text:0000000000002B88                 and     eax, 0F000h
.text:0000000000002B8D                 cmp     eax, 1000h
.text:0000000000002B92                 jz      short loc_2BAF
.text:0000000000002B94                 mov     rdi, [r15+r14*8] ; file
.text:0000000000002B98                 xor     eax, eax
.text:0000000000002B9A                 mov     esi, 100h       ; oflag
.text:0000000000002B9F                 call    _open
.text:0000000000002BA4                 test    eax, eax
.text:0000000000002BA6                 js      short loc_2BAF
.text:0000000000002BA8                 mov     edi, eax        ; fd
.text:0000000000002BAA                 call    _close
.text:0000000000002BAF
.text:0000000000002BAF loc_2BAF:                               ; CODE XREF: main+5D2↑j
.text:0000000000002BAF                                         ; main+5E6↑j ...
.text:0000000000002BAF                 add     r14, 1
.text:0000000000002BB3
.text:0000000000002BB3 loc_2BB3:                               ; CODE XREF: main+5B1↑j
.text:0000000000002BB3                 cmp     r14d, r12d
.text:0000000000002BB6                 mov     ebx, r14d
.text:0000000000002BB9                 jge     loc_2C61
.text:0000000000002BBF                 mov     edx, r14d
.text:0000000000002BC2                 sub     edx, cs:optind@@GLIBC_2_2_5
.text:0000000000002BC8                 mov     rsi, [r15+r14*8] ; filename
.text:0000000000002BCC                 mov     edi, 1          ; ver
.text:0000000000002BD1                 movsxd  rdx, edx
.text:0000000000002BD4                 imul    rdx, 90h
.text:0000000000002BDB                 add     rdx, r13        ; stat_buf
.text:0000000000002BDE                 call    ___xstat
.text:0000000000002BE3                 test    eax, eax
.text:0000000000002BE5                 jz      short loc_2B73
.text:0000000000002BE7                 mov     rdx, [r15+r14*8]
.text:0000000000002BEB                 mov     esi, 3
.text:0000000000002BF0                 xor     edi, edi
.text:0000000000002BF2                 call    quotearg_n_style_colon
.text:0000000000002BF7                 mov     rbx, rax
.text:0000000000002BFA                 call    ___errno_location
.text:0000000000002BFF                 mov     esi, [rax]      ; errnum
.text:0000000000002C01                 mov     rcx, rbx
.text:0000000000002C04                 mov     rdx, rbp        ; format
.text:0000000000002C07                 xor     edi, edi        ; status
.text:0000000000002C09                 xor     eax, eax
.text:0000000000002C0B                 call    _error
.text:0000000000002C10                 mov     cs:exit_status, 1
.text:0000000000002C1A                 mov     qword ptr [r15+r14*8], 0
.text:0000000000002C22                 jmp     short loc_2BAF
.text:0000000000002C24 ; ---------------------------------------------------------------------------
.text:0000000000002C24
.text:0000000000002C24 loc_2C24:                               ; CODE XREF: main+457↑j
.text:0000000000002C24                 test    bpl, bpl
.text:0000000000002C27                 jz      loc_2CDA
.text:0000000000002C2D                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000002C34                 mov     cs:human_output_opts, 0
.text:0000000000002C3E                 call    _getenv
.text:0000000000002C43                 cmp     rax, 1
.text:0000000000002C47                 sbb     rax, rax
.text:0000000000002C4A                 and     eax, 200h
.text:0000000000002C4F                 add     rax, 200h
.text:0000000000002C55                 mov     cs:output_block_size, rax
.text:0000000000002C5C                 jmp     loc_2A1D
.text:0000000000002C61 ; ---------------------------------------------------------------------------
.text:0000000000002C61
.text:0000000000002C61 loc_2C61:                               ; CODE XREF: main+5F9↑j
.text:0000000000002C61                 mov     r14, r15
.text:0000000000002C64                 mov     r15, [rsp+178h+var_168]
.text:0000000000002C69
.text:0000000000002C69 loc_2C69:                               ; CODE XREF: main+54B↑j
.text:0000000000002C69                 cmp     cs:fs_select_list, 0
.text:0000000000002C71                 mov     edi, 1
.text:0000000000002C76                 jz      loc_3962
.text:0000000000002C7C
.text:0000000000002C7C loc_2C7C:                               ; CODE XREF: main+13AA↓j
.text:0000000000002C7C                                         ; main+13B7↓j ...
.text:0000000000002C7C                 call    read_file_system_list
.text:0000000000002C81                 test    rax, rax
.text:0000000000002C84                 mov     cs:mount_list, rax
.text:0000000000002C8B                 jz      loc_38E6
.text:0000000000002C91
.text:0000000000002C91 loc_2C91:                               ; CODE XREF: main+139D↓j
.text:0000000000002C91                 cmp     cs:require_sync, 0
.text:0000000000002C98                 jz      short loc_2C9F
.text:0000000000002C9A                 call    _sync
.text:0000000000002C9F
.text:0000000000002C9F loc_2C9F:                               ; CODE XREF: main+6D8↑j
.text:0000000000002C9F                 cmp     cs:header_mode, 4 ; switch 5 cases
.text:0000000000002CA6                 ja      def_2CC0        ; jumptable 0000000000002CC0 default case
.text:0000000000002CAC                 mov     eax, cs:header_mode
.text:0000000000002CB2                 lea     rdx, jpt_2CC0
.text:0000000000002CB9                 movsxd  rax, ds:(jpt_2CC0 - 0F320h)[rdx+rax*4]
.text:0000000000002CBD                 add     rax, rdx
.text:0000000000002CC0                 jmp     rax             ; switch jump
.text:0000000000002CC2 ; ---------------------------------------------------------------------------
.text:0000000000002CC2
.text:0000000000002CC2 loc_2CC2:                               ; CODE XREF: main+474↑j
.text:0000000000002CC2                 test    bpl, bpl
.text:0000000000002CC5                 jz      loc_2A44
.text:0000000000002CCB                 mov     cs:header_mode, 3
.text:0000000000002CD5                 jmp     loc_2A44
.text:0000000000002CDA ; ---------------------------------------------------------------------------
.text:0000000000002CDA
.text:0000000000002CDA loc_2CDA:                               ; CODE XREF: main+667↑j
.text:0000000000002CDA                 lea     rdi, aDfBlockSize ; "DF_BLOCK_SIZE"
.text:0000000000002CE1                 call    _getenv
.text:0000000000002CE6                 lea     rdx, output_block_size
.text:0000000000002CED                 lea     rsi, human_output_opts
.text:0000000000002CF4                 mov     rdi, rax        ; nptr
.text:0000000000002CF7                 call    human_options
.text:0000000000002CFC                 jmp     loc_2A1D
.text:0000000000002D01 ; ---------------------------------------------------------------------------
.text:0000000000002D01
.text:0000000000002D01 loc_2D01:                               ; CODE XREF: main+700↑j
.text:0000000000002D01                                         ; DATA XREF: .rodata:jpt_2CC0↓o
.text:0000000000002D01                 xor     esi, esi        ; jumptable 0000000000002CC0 case 3
.text:0000000000002D03                 xor     edi, edi
.text:0000000000002D05                 call    alloc_field
.text:0000000000002D0A                 cmp     cs:print_type, 0
.text:0000000000002D11                 jz      short loc_2D1F
.text:0000000000002D13                 xor     esi, esi
.text:0000000000002D15                 mov     edi, 1
.text:0000000000002D1A                 call    alloc_field
.text:0000000000002D1F
.text:0000000000002D1F loc_2D1F:                               ; CODE XREF: main+751↑j
.text:0000000000002D1F                 xor     esi, esi
.text:0000000000002D21                 mov     edi, 2
.text:0000000000002D26                 call    alloc_field
.text:0000000000002D2B                 xor     esi, esi
.text:0000000000002D2D                 mov     edi, 3
.text:0000000000002D32                 call    alloc_field
.text:0000000000002D37                 xor     esi, esi
.text:0000000000002D39                 mov     edi, 4
.text:0000000000002D3E                 call    alloc_field
.text:0000000000002D43                 lea     rsi, aCapacity  ; "Capacity"
.text:0000000000002D4A
.text:0000000000002D4A loc_2D4A:                               ; CODE XREF: main+ABD↓j
.text:0000000000002D4A                 mov     edi, 5
.text:0000000000002D4F                 call    alloc_field
.text:0000000000002D54                 xor     esi, esi
.text:0000000000002D56                 mov     edi, 0Ah
.text:0000000000002D5B                 call    alloc_field
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: main+B1C↓j
.text:0000000000002D60                                         ; main+B66↓j ...
.text:0000000000002D60                 call    get_header
.text:0000000000002D65                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002D6C                 cmp     eax, [rsp+178h+argc]
.text:0000000000002D70                 jge     loc_35B8
.text:0000000000002D76                 mov     [rsp+178h+var_168], rax
.text:0000000000002D7B                 lea     rax, [rsp+178h+var_D8]
.text:0000000000002D83                 mov     cs:show_listed_fs, 1
.text:0000000000002D8A                 mov     [rsp+178h+var_138], r14
.text:0000000000002D8F                 mov     [rsp+178h+var_100], r15
.text:0000000000002D94                 mov     [rsp+178h+stat_buf], rax
.text:0000000000002D99
.text:0000000000002D99 loc_2D99:                               ; CODE XREF: main+BD1↓j
.text:0000000000002D99                 mov     rcx, [rsp+178h+var_138]
.text:0000000000002D9E                 mov     rax, [rsp+178h+var_168]
.text:0000000000002DA3                 mov     rcx, [rcx+rax*8]
.text:0000000000002DA7                 test    rcx, rcx
.text:0000000000002DAA                 mov     rbx, rcx
.text:0000000000002DAD                 mov     [rsp+178h+name], rcx
.text:0000000000002DB2                 jz      loc_3182
.text:0000000000002DB8                 sub     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002DBE                 cdqe
.text:0000000000002DC0                 imul    rax, 90h
.text:0000000000002DC7                 add     rax, [rsp+178h+var_118]
.text:0000000000002DCC                 mov     [rsp+178h+var_128], rax
.text:0000000000002DD1                 mov     eax, [rax+18h]
.text:0000000000002DD4                 mov     dword ptr [rsp+178h+s1], eax
.text:0000000000002DD8                 and     eax, 0B000h
.text:0000000000002DDD                 cmp     eax, 2000h
.text:0000000000002DE2                 jnz     loc_2F66
.text:0000000000002DE8                 mov     rdi, rcx        ; name
.text:0000000000002DEB                 call    _canonicalize_file_name
.text:0000000000002DF0                 test    rax, rax
.text:0000000000002DF3                 mov     [rsp+178h+var_110], rax
.text:0000000000002DF8                 jz      loc_38D7
.text:0000000000002DFE                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000002E01                 cmovz   rbx, rax
.text:0000000000002E05                 mov     [rsp+178h+s1], rbx
.text:0000000000002E0A
.text:0000000000002E0A loc_2E0A:                               ; CODE XREF: main+1321↓j
.text:0000000000002E0A                 mov     rbx, cs:mount_list
.text:0000000000002E11                 test    rbx, rbx
.text:0000000000002E14                 jz      loc_3A78
.text:0000000000002E1A                 xor     r14d, r14d
.text:0000000000002E1D                 mov     [rsp+178h+var_120], 0
.text:0000000000002E26                 mov     [rsp+178h+var_140], 0FFFFFFFFFFFFFFFFh
.text:0000000000002E2F                 mov     byte ptr [rsp+178h+var_158], 0
.text:0000000000002E34                 nop     dword ptr [rax+00h]
.text:0000000000002E38
.text:0000000000002E38 loc_2E38:                               ; CODE XREF: main+981↓j
.text:0000000000002E38                 mov     rbp, [rbx]
.text:0000000000002E3B                 mov     rdi, rbp        ; name
.text:0000000000002E3E                 call    _canonicalize_file_name
.text:0000000000002E43                 test    rax, rax
.text:0000000000002E46                 mov     r12, rax
.text:0000000000002E49                 jz      short loc_2E52
.text:0000000000002E4B                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000002E4E                 cmovz   rbp, rax
.text:0000000000002E52
.text:0000000000002E52 loc_2E52:                               ; CODE XREF: main+889↑j
.text:0000000000002E52                 mov     rdi, [rsp+178h+s1] ; s1
.text:0000000000002E57                 mov     rsi, rbp        ; s2
.text:0000000000002E5A                 call    _strcmp
.text:0000000000002E5F                 test    eax, eax
.text:0000000000002E61                 jnz     loc_2F32
.text:0000000000002E67                 mov     r14, cs:mount_list
.text:0000000000002E6E                 xor     r15d, r15d
.text:0000000000002E71                 mov     r13, [rbx+8]
.text:0000000000002E75                 test    r14, r14
.text:0000000000002E78                 jz      loc_3316
.text:0000000000002E7E                 xchg    ax, ax
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: main+8D9↓j
.text:0000000000002E80                 mov     rdi, [r14+8]    ; s1
.text:0000000000002E84                 mov     rsi, r13        ; s2
.text:0000000000002E87                 call    _strcmp
.text:0000000000002E8C                 test    eax, eax
.text:0000000000002E8E                 cmovz   r15, r14
.text:0000000000002E92                 mov     r14, [r14+30h]
.text:0000000000002E96                 test    r14, r14
.text:0000000000002E99                 jnz     short loc_2E80
.text:0000000000002E9B                 test    r15, r15
.text:0000000000002E9E                 jz      loc_3316
.text:0000000000002EA4                 mov     rdi, [r15]      ; name
.text:0000000000002EA7                 call    _canonicalize_file_name
.text:0000000000002EAC                 test    rax, rax
.text:0000000000002EAF                 mov     r8, rax
.text:0000000000002EB2                 jz      short loc_2EB9
.text:0000000000002EB4                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000002EB7                 jz      short loc_2ED5
.text:0000000000002EB9
.text:0000000000002EB9 loc_2EB9:                               ; CODE XREF: main+8F2↑j
.text:0000000000002EB9                 mov     rdi, r8         ; ptr
.text:0000000000002EBC                 call    _free
.text:0000000000002EC1                 mov     rdi, [r15]      ; src
.text:0000000000002EC4                 call    xstrdup
.text:0000000000002EC9                 test    rax, rax
.text:0000000000002ECC                 mov     r8, rax
.text:0000000000002ECF                 jz      loc_3312
.text:0000000000002ED5
.text:0000000000002ED5 loc_2ED5:                               ; CODE XREF: main+8F7↑j
.text:0000000000002ED5                 mov     rdi, r8         ; s1
.text:0000000000002ED8                 mov     rsi, rbp        ; s2
.text:0000000000002EDB                 mov     [rsp+178h+ptr], r8
.text:0000000000002EE0                 call    _strcmp
.text:0000000000002EE5                 test    eax, eax
.text:0000000000002EE7                 mov     r8, [rsp+178h+ptr]
.text:0000000000002EEC                 jnz     loc_331E
.text:0000000000002EF2                 mov     r13, [rbx+8]
.text:0000000000002EF6
.text:0000000000002EF6 loc_2EF6:                               ; CODE XREF: main+D59↓j
.text:0000000000002EF6                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002EFA                 xor     eax, eax
.text:0000000000002EFC                 mov     rdi, r13
.text:0000000000002EFF                 repne scasb
.text:0000000000002F01                 not     rcx
.text:0000000000002F04                 lea     rbp, [rcx-1]
.text:0000000000002F08                 movzx   ecx, byte ptr [rsp+178h+var_158]
.text:0000000000002F0D                 xor     ecx, 1
.text:0000000000002F10                 cmp     rbp, [rsp+178h+var_140]
.text:0000000000002F15                 mov     r14d, ecx
.text:0000000000002F18                 setb    r9b
.text:0000000000002F1C                 or      r14b, r9b
.text:0000000000002F1F                 jnz     loc_3329
.text:0000000000002F25                 mov     byte ptr [rsp+178h+var_158], 1
.text:0000000000002F2A
.text:0000000000002F2A loc_2F2A:                               ; CODE XREF: main+D64↓j
.text:0000000000002F2A                                         ; main+DCD↓j
.text:0000000000002F2A                 mov     rdi, r8         ; ptr
.text:0000000000002F2D                 call    _free
.text:0000000000002F32
.text:0000000000002F32 loc_2F32:                               ; CODE XREF: main+8A1↑j
.text:0000000000002F32                 mov     rdi, r12        ; ptr
.text:0000000000002F35                 call    _free
.text:0000000000002F3A                 mov     rbx, [rbx+30h]
.text:0000000000002F3E                 test    rbx, rbx
.text:0000000000002F41                 jnz     loc_2E38
.text:0000000000002F47                 mov     rdi, [rsp+178h+var_110] ; ptr
.text:0000000000002F4C                 call    _free
.text:0000000000002F51                 cmp     [rsp+178h+var_120], 0
.text:0000000000002F57                 jnz     loc_348C
.text:0000000000002F5D                 test    r14b, r14b
.text:0000000000002F60                 jnz     loc_39B6
.text:0000000000002F66
.text:0000000000002F66 loc_2F66:                               ; CODE XREF: main+822↑j
.text:0000000000002F66                                         ; main+14C2↓j
.text:0000000000002F66                 mov     rdi, [rsp+178h+name] ; name
.text:0000000000002F6B                 call    _canonicalize_file_name
.text:0000000000002F70                 test    rax, rax
.text:0000000000002F73                 mov     r15, rax
.text:0000000000002F76                 mov     r12, cs:mount_list
.text:0000000000002F7D                 jz      short loc_2F88
.text:0000000000002F7F                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000002F82                 jz      loc_34CE
.text:0000000000002F88
.text:0000000000002F88 loc_2F88:                               ; CODE XREF: main+9BD↑j
.text:0000000000002F88                 mov     rdi, r15        ; ptr
.text:0000000000002F8B                 call    _free
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: main+FBC↓j
.text:0000000000002F90                                         ; main+FD7↓j ...
.text:0000000000002F90                 test    r12, r12
.text:0000000000002F93                 jz      loc_313D
.text:0000000000002F99                 xor     ebx, ebx
.text:0000000000002F9B                 mov     rbp, 0FFFFFFFFFFFFFFFEh
.text:0000000000002FA2                 mov     r13, [rsp+178h+var_128]
.text:0000000000002FA7                 jmp     short loc_2FBE
.text:0000000000002FA7 ; ---------------------------------------------------------------------------
.text:0000000000002FA9                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: main+A13↓j
.text:0000000000002FB0                                         ; main+A28↓j ...
.text:0000000000002FB0                 mov     r12, [r12+30h]
.text:0000000000002FB5                 test    r12, r12
.text:0000000000002FB8                 jz      loc_33C7
.text:0000000000002FBE
.text:0000000000002FBE loc_2FBE:                               ; CODE XREF: main+9E7↑j
.text:0000000000002FBE                 cmp     qword ptr [r12+20h], 0FFFFFFFFFFFFFFFFh
.text:0000000000002FC4                 jz      loc_3392
.text:0000000000002FCA
.text:0000000000002FCA loc_2FCA:                               ; CODE XREF: main+DF7↓j
.text:0000000000002FCA                                         ; main+E77↓j
.text:0000000000002FCA                 mov     rax, [r12+20h]
.text:0000000000002FCF                 cmp     [r13+0], rax
.text:0000000000002FD3                 jnz     short loc_2FB0
.text:0000000000002FD5                 mov     rdi, [r12+18h]  ; s1
.text:0000000000002FDA                 lea     rsi, s2         ; "lofs"
.text:0000000000002FE1                 call    _strcmp
.text:0000000000002FE6                 test    eax, eax
.text:0000000000002FE8                 jz      short loc_2FB0
.text:0000000000002FEA                 test    rbx, rbx
.text:0000000000002FED                 jz      short loc_2FFD
.text:0000000000002FEF                 test    byte ptr [rbx+28h], 1
.text:0000000000002FF3                 jnz     short loc_2FFD
.text:0000000000002FF5                 test    byte ptr [r12+28h], 1
.text:0000000000002FFB                 jnz     short loc_2FB0
.text:0000000000002FFD
.text:0000000000002FFD loc_2FFD:                               ; CODE XREF: main+A2D↑j
.text:0000000000002FFD                                         ; main+A33↑j
.text:0000000000002FFD                 mov     rsi, [r12+8]    ; filename
.text:0000000000003002                 mov     rdx, [rsp+178h+stat_buf] ; stat_buf
.text:0000000000003007                 mov     edi, 1          ; ver
.text:000000000000300C                 call    ___xstat
.text:0000000000003011                 test    eax, eax
.text:0000000000003013                 jnz     short loc_3028
.text:0000000000003015                 mov     rax, [r12+20h]
.text:000000000000301A                 cmp     [rsp+178h+var_D8], rax
.text:0000000000003022                 jz      loc_3A3A
.text:0000000000003028
.text:0000000000003028 loc_3028:                               ; CODE XREF: main+A53↑j
.text:0000000000003028                 mov     [r12+20h], rbp
.text:000000000000302D                 jmp     short loc_2FB0
.text:000000000000302F ; ---------------------------------------------------------------------------
.text:000000000000302F
.text:000000000000302F loc_302F:                               ; CODE XREF: main+700↑j
.text:000000000000302F                                         ; DATA XREF: .rodata:jpt_2CC0↓o
.text:000000000000302F                 xor     esi, esi        ; jumptable 0000000000002CC0 case 2
.text:0000000000003031                 xor     edi, edi
.text:0000000000003033                 call    alloc_field
.text:0000000000003038                 cmp     cs:print_type, 0
.text:000000000000303F                 jz      short loc_304D
.text:0000000000003041                 xor     esi, esi
.text:0000000000003043                 mov     edi, 1
.text:0000000000003048                 call    alloc_field
.text:000000000000304D
.text:000000000000304D loc_304D:                               ; CODE XREF: main+A7F↑j
.text:000000000000304D                 lea     rsi, aSize      ; "Size"
.text:0000000000003054                 mov     edi, 2
.text:0000000000003059                 call    alloc_field
.text:000000000000305E                 xor     esi, esi
.text:0000000000003060                 mov     edi, 3
.text:0000000000003065                 call    alloc_field
.text:000000000000306A                 lea     rsi, aAvail     ; "Avail"
.text:0000000000003071
.text:0000000000003071 loc_3071:                               ; CODE XREF: main+B59↓j
.text:0000000000003071                 mov     edi, 4
.text:0000000000003076                 call    alloc_field
.text:000000000000307B                 xor     esi, esi
.text:000000000000307D                 jmp     loc_2D4A
.text:0000000000003082 ; ---------------------------------------------------------------------------
.text:0000000000003082
.text:0000000000003082 loc_3082:                               ; CODE XREF: main+700↑j
.text:0000000000003082                                         ; DATA XREF: .rodata:jpt_2CC0↓o
.text:0000000000003082                 xor     esi, esi        ; jumptable 0000000000002CC0 case 1
.text:0000000000003084                 xor     edi, edi
.text:0000000000003086                 call    alloc_field
.text:000000000000308B                 cmp     cs:print_type, 0
.text:0000000000003092                 jz      short loc_30A0
.text:0000000000003094                 xor     esi, esi
.text:0000000000003096                 mov     edi, 1
.text:000000000000309B                 call    alloc_field
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: main+AD2↑j
.text:00000000000030A0                 xor     esi, esi
.text:00000000000030A2                 mov     edi, 6
.text:00000000000030A7                 call    alloc_field
.text:00000000000030AC                 xor     esi, esi
.text:00000000000030AE                 mov     edi, 7
.text:00000000000030B3                 call    alloc_field
.text:00000000000030B8                 xor     esi, esi
.text:00000000000030BA                 mov     edi, 8
.text:00000000000030BF                 call    alloc_field
.text:00000000000030C4                 xor     esi, esi
.text:00000000000030C6                 mov     edi, 9
.text:00000000000030CB                 call    alloc_field
.text:00000000000030D0                 xor     esi, esi
.text:00000000000030D2                 mov     edi, 0Ah
.text:00000000000030D7                 call    alloc_field
.text:00000000000030DC                 jmp     loc_2D60
.text:00000000000030E1 ; ---------------------------------------------------------------------------
.text:00000000000030E1
.text:00000000000030E1 loc_30E1:                               ; CODE XREF: main+700↑j
.text:00000000000030E1                                         ; DATA XREF: .rodata:jpt_2CC0↓o
.text:00000000000030E1                 xor     esi, esi        ; jumptable 0000000000002CC0 case 0
.text:00000000000030E3                 xor     edi, edi
.text:00000000000030E5                 call    alloc_field
.text:00000000000030EA                 cmp     cs:print_type, 0
.text:00000000000030F1                 jz      short loc_30FF
.text:00000000000030F3                 xor     esi, esi
.text:00000000000030F5                 mov     edi, 1
.text:00000000000030FA                 call    alloc_field
.text:00000000000030FF
.text:00000000000030FF loc_30FF:                               ; CODE XREF: main+B31↑j
.text:00000000000030FF                 xor     esi, esi
.text:0000000000003101                 mov     edi, 2
.text:0000000000003106                 call    alloc_field
.text:000000000000310B                 xor     esi, esi
.text:000000000000310D                 mov     edi, 3
.text:0000000000003112                 call    alloc_field
.text:0000000000003117                 xor     esi, esi
.text:0000000000003119                 jmp     loc_3071
.text:000000000000311E ; ---------------------------------------------------------------------------
.text:000000000000311E
.text:000000000000311E loc_311E:                               ; CODE XREF: main+700↑j
.text:000000000000311E                                         ; DATA XREF: .rodata:jpt_2CC0↓o
.text:000000000000311E                 cmp     cs:ncolumns, 0  ; jumptable 0000000000002CC0 case 4
.text:0000000000003126                 jnz     loc_2D60
.text:000000000000312C                 lea     rdi, aSourceFstypeIt ; "source,fstype,itotal,iused,iavail,ipcen"...
.text:0000000000003133                 call    decode_output_arg
.text:0000000000003138                 jmp     loc_2D60
.text:000000000000313D ; ---------------------------------------------------------------------------
.text:000000000000313D
.text:000000000000313D loc_313D:                               ; CODE XREF: main+9D3↑j
.text:000000000000313D                                         ; main+E0A↓j
.text:000000000000313D                 mov     r15, [rsp+178h+name]
.text:0000000000003142                 mov     rsi, [rsp+178h+var_128]
.text:0000000000003147                 mov     rdi, r15        ; path
.text:000000000000314A                 call    find_mount_point
.text:000000000000314F                 test    rax, rax
.text:0000000000003152                 mov     rbx, rax
.text:0000000000003155                 jz      short loc_3182
.text:0000000000003157                 sub     rsp, 8
.text:000000000000315B                 xor     edi, edi        ; s2
.text:000000000000315D                 xor     r9d, r9d
.text:0000000000003160                 push    0               ; int
.text:0000000000003162                 push    0               ; __int64
.text:0000000000003164                 xor     r8d, r8d
.text:0000000000003167                 push    0               ; int
.text:0000000000003169                 xor     ecx, ecx
.text:000000000000316B                 mov     rdx, r15
.text:000000000000316E                 mov     rsi, rax        ; src
.text:0000000000003171                 call    get_dev
.text:0000000000003176                 add     rsp, 20h
.text:000000000000317A                 mov     rdi, rbx        ; ptr
.text:000000000000317D                 call    _free
.text:0000000000003182
.text:0000000000003182 loc_3182:                               ; CODE XREF: main+7F2↑j
.text:0000000000003182                                         ; main+B95↑j ...
.text:0000000000003182                 add     [rsp+178h+var_168], 1
.text:0000000000003188                 mov     rax, [rsp+178h+var_168]
.text:000000000000318D                 cmp     [rsp+178h+argc], eax
.text:0000000000003191                 jg      loc_2D99
.text:0000000000003197                 mov     r15, [rsp+178h+var_100]
.text:000000000000319C
.text:000000000000319C loc_319C:                               ; CODE XREF: main+1307↓j
.text:000000000000319C                 cmp     cs:file_systems_processed, 0
.text:00000000000031A3                 jz      loc_343C
.text:00000000000031A9                 cmp     cs:print_grand_total, 0
.text:00000000000031B0                 jz      short loc_31EE
.text:00000000000031B2                 cmp     cs:byte_21404C, 0
.text:00000000000031B9                 lea     rdi, src        ; "total"
.text:00000000000031C0                 lea     rsi, asc_10958+1 ; "-"
.text:00000000000031C7                 lea     rax, grand_fsu
.text:00000000000031CE                 cmovz   rsi, rdi        ; src
.text:00000000000031D2                 sub     rsp, 8
.text:00000000000031D6                 xor     r9d, r9d
.text:00000000000031D9                 push    0               ; int
.text:00000000000031DB                 push    rax             ; __int64
.text:00000000000031DC                 xor     r8d, r8d
.text:00000000000031DF                 push    0               ; int
.text:00000000000031E1                 xor     ecx, ecx
.text:00000000000031E3                 xor     edx, edx
.text:00000000000031E5                 call    get_dev
.text:00000000000031EA                 add     rsp, 20h
.text:00000000000031EE
.text:00000000000031EE loc_31EE:                               ; CODE XREF: main+BF0↑j
.text:00000000000031EE                 xor     r13d, r13d
.text:00000000000031F1
.text:00000000000031F1 loc_31F1:                               ; CODE XREF: main+D4D↓j
.text:00000000000031F1                 cmp     r13, cs:nrows
.text:00000000000031F8                 jnb     loc_33BC
.text:00000000000031FE                 mov     rax, cs:ncolumns
.text:0000000000003205                 test    rax, rax
.text:0000000000003208                 jz      loc_32E9
.text:000000000000320E                 mov     rdx, cs:table
.text:0000000000003215                 lea     r12, ds:0[r13*8]
.text:000000000000321D                 xor     ebx, ebx
.text:000000000000321F                 mov     rdx, [rdx+r13*8]
.text:0000000000003223                 mov     r14, [rdx]
.text:0000000000003226                 db      2Eh
.text:0000000000003226                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: main+CEE↓j
.text:0000000000003230                                         ; main+D10↓j ...
.text:0000000000003230                 sub     rax, 1
.text:0000000000003234                 xor     ecx, ecx
.text:0000000000003236                 mov     rdi, r14        ; s
.text:0000000000003239                 cmp     rax, rbx
.text:000000000000323C                 mov     rax, cs:columns
.text:0000000000003243                 mov     rsi, r15
.text:0000000000003246                 setz    cl
.text:0000000000003249                 lea     rbp, ds:0[rbx*8]
.text:0000000000003251                 shl     ecx, 3
.text:0000000000003254                 mov     rax, [rax+rbx*8]
.text:0000000000003258                 mov     rdx, [rax+20h]
.text:000000000000325C                 mov     qword ptr [rsp+178h+longind], rdx
.text:0000000000003264                 mov     edx, [rax+28h]
.text:0000000000003267                 call    ambsalign
.text:000000000000326C                 test    rax, rax
.text:000000000000326F                 mov     r14, rax
.text:0000000000003272                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003279                 mov     rdi, rax        ; s
.text:000000000000327C                 jz      short loc_32D8
.text:000000000000327E
.text:000000000000327E loc_327E:                               ; CODE XREF: main+D27↓j
.text:000000000000327E                 call    _fputs_unlocked
.text:0000000000003283                 mov     rdi, r14        ; ptr
.text:0000000000003286                 add     rbx, 1
.text:000000000000328A                 call    _free
.text:000000000000328F                 mov     rax, cs:ncolumns
.text:0000000000003296                 cmp     rbx, rax
.text:0000000000003299                 jnb     short loc_32E9
.text:000000000000329B                 mov     rdx, cs:table
.text:00000000000032A2                 test    rbx, rbx
.text:00000000000032A5                 mov     rdx, [rdx+r12]
.text:00000000000032A9                 mov     r14, [rdx+rbp+8]
.text:00000000000032AE                 jz      short loc_3230
.text:00000000000032B0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000032B7                 mov     rdx, [rdi+28h]
.text:00000000000032BB                 cmp     rdx, [rdi+30h]
.text:00000000000032BF                 jnb     loc_340B
.text:00000000000032C5                 lea     rcx, [rdx+1]
.text:00000000000032C9                 mov     [rdi+28h], rcx
.text:00000000000032CD                 mov     byte ptr [rdx], 20h ; ' '
.text:00000000000032D0                 jmp     loc_3230
.text:00000000000032D0 ; ---------------------------------------------------------------------------
.text:00000000000032D5                 align 8
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: main+CBC↑j
.text:00000000000032D8                 mov     rax, cs:table
.text:00000000000032DF                 mov     rax, [rax+r12]
.text:00000000000032E3                 mov     rdi, [rax+rbx*8]
.text:00000000000032E7                 jmp     short loc_327E
.text:00000000000032E9 ; ---------------------------------------------------------------------------
.text:00000000000032E9
.text:00000000000032E9 loc_32E9:                               ; CODE XREF: main+C48↑j
.text:00000000000032E9                                         ; main+CD9↑j
.text:00000000000032E9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000032F0                 mov     rax, [rdi+28h]
.text:00000000000032F4                 cmp     rax, [rdi+30h]
.text:00000000000032F8                 jnb     loc_3996
.text:00000000000032FE                 lea     rdx, [rax+1]
.text:0000000000003302                 mov     [rdi+28h], rdx
.text:0000000000003306                 mov     byte ptr [rax], 0Ah
.text:0000000000003309
.text:0000000000003309 loc_3309:                               ; CODE XREF: main+13E0↓j
.text:0000000000003309                 add     r13, 1
.text:000000000000330D                 jmp     loc_31F1
.text:0000000000003312 ; ---------------------------------------------------------------------------
.text:0000000000003312
.text:0000000000003312 loc_3312:                               ; CODE XREF: main+90F↑j
.text:0000000000003312                 mov     r13, [rbx+8]
.text:0000000000003316
.text:0000000000003316 loc_3316:                               ; CODE XREF: main+8B8↑j
.text:0000000000003316                                         ; main+8DE↑j
.text:0000000000003316                 xor     r8d, r8d
.text:0000000000003319                 jmp     loc_2EF6
.text:000000000000331E ; ---------------------------------------------------------------------------
.text:000000000000331E
.text:000000000000331E loc_331E:                               ; CODE XREF: main+92C↑j
.text:000000000000331E                 mov     r14d, 1
.text:0000000000003324                 jmp     loc_2F2A
.text:0000000000003329 ; ---------------------------------------------------------------------------
.text:0000000000003329
.text:0000000000003329 loc_3329:                               ; CODE XREF: main+95F↑j
.text:0000000000003329                 mov     rdx, [rsp+178h+stat_buf] ; stat_buf
.text:000000000000332E                 mov     rsi, r13        ; filename
.text:0000000000003331                 mov     edi, 1          ; ver
.text:0000000000003336                 mov     [rsp+178h+ptr], r8
.text:000000000000333B                 mov     [rsp+178h+var_101], r9b
.text:0000000000003340                 mov     [rsp+178h+var_102], cl
.text:0000000000003344                 call    ___xstat
.text:0000000000003349                 test    eax, eax
.text:000000000000334B                 mov     r8, [rsp+178h+ptr]
.text:0000000000003350                 jz      short loc_3371
.text:0000000000003352                 movzx   ecx, [rsp+178h+var_102]
.text:0000000000003357                 test    cl, cl
.text:0000000000003359                 jz      loc_38CC
.text:000000000000335F                 movzx   r9d, [rsp+178h+var_101]
.text:0000000000003365                 test    r9b, r9b
.text:0000000000003368                 jz      loc_38CC
.text:000000000000336E                 xor     r14d, r14d
.text:0000000000003371
.text:0000000000003371 loc_3371:                               ; CODE XREF: main+D90↑j
.text:0000000000003371                 cmp     rbp, 1
.text:0000000000003375                 jz      loc_346D
.text:000000000000337B                 mov     [rsp+178h+var_140], rbp
.text:0000000000003380                 mov     [rsp+178h+var_120], rbx
.text:0000000000003385
.text:0000000000003385 loc_3385:                               ; CODE XREF: main+1312↓j
.text:0000000000003385                 mov     byte ptr [rsp+178h+var_158], r14b
.text:000000000000338A                 xor     r14d, r14d
.text:000000000000338D                 jmp     loc_2F2A
.text:0000000000003392 ; ---------------------------------------------------------------------------
.text:0000000000003392
.text:0000000000003392 loc_3392:                               ; CODE XREF: main+A04↑j
.text:0000000000003392                 mov     rsi, [r12+8]    ; filename
.text:0000000000003397                 mov     rdx, [rsp+178h+stat_buf] ; stat_buf
.text:000000000000339C                 mov     edi, 1          ; ver
.text:00000000000033A1                 call    ___xstat
.text:00000000000033A6                 test    eax, eax
.text:00000000000033A8                 jnz     short loc_3421
.text:00000000000033AA                 mov     rax, [rsp+178h+var_D8]
.text:00000000000033B2                 mov     [r12+20h], rax
.text:00000000000033B7                 jmp     loc_2FCA
.text:00000000000033BC ; ---------------------------------------------------------------------------
.text:00000000000033BC
.text:00000000000033BC loc_33BC:                               ; CODE XREF: main+C38↑j
.text:00000000000033BC                                         ; main+E83↓j
.text:00000000000033BC                 mov     eax, cs:exit_status
.text:00000000000033C2                 jmp     loc_2AD8
.text:00000000000033C7 ; ---------------------------------------------------------------------------
.text:00000000000033C7
.text:00000000000033C7 loc_33C7:                               ; CODE XREF: main+9F8↑j
.text:00000000000033C7                 test    rbx, rbx
.text:00000000000033CA                 jz      loc_313D
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: main+FF3↓j
.text:00000000000033D0                 movzx   r9d, byte ptr [rbx+28h]
.text:00000000000033D5                 sub     rsp, 8
.text:00000000000033D9                 mov     rsi, [rbx+8]    ; src
.text:00000000000033DD                 push    0               ; int
.text:00000000000033DF                 push    0               ; __int64
.text:00000000000033E1                 mov     r8, [rbx+18h]
.text:00000000000033E5                 mov     rdi, [rbx]      ; s2
.text:00000000000033E8                 mov     eax, r9d
.text:00000000000033EB                 and     r9d, 1
.text:00000000000033EF                 shr     al, 1
.text:00000000000033F1                 and     eax, 1
.text:00000000000033F4                 push    rax             ; int
.text:00000000000033F5                 mov     rdx, [rsp+198h+name]
.text:00000000000033FA                 mov     rcx, rdx
.text:00000000000033FD                 call    get_dev
.text:0000000000003402                 add     rsp, 20h
.text:0000000000003406                 jmp     loc_3182
.text:000000000000340B ; ---------------------------------------------------------------------------
.text:000000000000340B
.text:000000000000340B loc_340B:                               ; CODE XREF: main+CFF↑j
.text:000000000000340B                 mov     esi, 20h ; ' '  ; int
.text:0000000000003410                 call    ___overflow
.text:0000000000003415                 mov     rax, cs:ncolumns
.text:000000000000341C                 jmp     loc_3230
.text:0000000000003421 ; ---------------------------------------------------------------------------
.text:0000000000003421
.text:0000000000003421 loc_3421:                               ; CODE XREF: main+DE8↑j
.text:0000000000003421                 call    ___errno_location
.text:0000000000003426                 cmp     dword ptr [rax], 5
.text:0000000000003429                 mov     r14, rax
.text:000000000000342C                 jz      loc_3A42
.text:0000000000003432
.text:0000000000003432 loc_3432:                               ; CODE XREF: main+14B3↓j
.text:0000000000003432                 mov     [r12+20h], rbp
.text:0000000000003437                 jmp     loc_2FCA
.text:000000000000343C ; ---------------------------------------------------------------------------
.text:000000000000343C
.text:000000000000343C loc_343C:                               ; CODE XREF: main+BE3↑j
.text:000000000000343C                 cmp     cs:exit_status, 0
.text:0000000000003443                 jnz     loc_33BC
.text:0000000000003449                 lea     rsi, aNoFileSystemsP ; "no file systems processed"
.text:0000000000003450                 mov     edx, 5          ; category
.text:0000000000003455                 xor     edi, edi        ; domainname
.text:0000000000003457                 call    _dcgettext
.text:000000000000345C                 xor     esi, esi        ; errnum
.text:000000000000345E                 mov     rdx, rax        ; format
.text:0000000000003461                 mov     edi, 1          ; status
.text:0000000000003466                 xor     eax, eax
.text:0000000000003468                 call    _error
.text:000000000000346D
.text:000000000000346D loc_346D:                               ; CODE XREF: main+DB5↑j
.text:000000000000346D                 mov     rdi, r8         ; ptr
.text:0000000000003470                 call    _free
.text:0000000000003475                 mov     rdi, r12        ; ptr
.text:0000000000003478                 call    _free
.text:000000000000347D                 mov     rdi, [rsp+178h+var_110] ; ptr
.text:0000000000003482                 call    _free
.text:0000000000003487                 mov     [rsp+178h+var_120], rbx
.text:000000000000348C
.text:000000000000348C loc_348C:                               ; CODE XREF: main+997↑j
.text:000000000000348C                 mov     rcx, [rsp+178h+var_120]
.text:0000000000003491                 sub     rsp, 8
.text:0000000000003495                 movzx   r9d, byte ptr [rcx+28h]
.text:000000000000349A                 mov     rsi, [rcx+8]    ; src
.text:000000000000349E                 push    0               ; int
.text:00000000000034A0                 push    0               ; __int64
.text:00000000000034A2                 mov     r8, [rcx+18h]
.text:00000000000034A6                 mov     eax, r9d
.text:00000000000034A9                 and     r9d, 1
.text:00000000000034AD                 shr     al, 1
.text:00000000000034AF                 and     eax, 1
.text:00000000000034B2                 push    rax             ; int
.text:00000000000034B3                 mov     rax, rcx
.text:00000000000034B6                 mov     rdx, [rsp+198h+name]
.text:00000000000034BB                 mov     rdi, [rax]      ; s2
.text:00000000000034BE                 xor     ecx, ecx
.text:00000000000034C0                 call    get_dev
.text:00000000000034C5                 add     rsp, 20h
.text:00000000000034C9                 jmp     loc_3182
.text:00000000000034CE ; ---------------------------------------------------------------------------
.text:00000000000034CE
.text:00000000000034CE loc_34CE:                               ; CODE XREF: main+9C2↑j
.text:00000000000034CE                 or      r13, 0FFFFFFFFFFFFFFFFh
.text:00000000000034D2                 xor     eax, eax
.text:00000000000034D4                 mov     rdi, r15
.text:00000000000034D7                 mov     rcx, r13
.text:00000000000034DA                 mov     rbp, r12
.text:00000000000034DD                 xor     ebx, ebx
.text:00000000000034DF                 repne scasb
.text:00000000000034E1                 xor     r14d, r14d
.text:00000000000034E4                 mov     [rsp+178h+s1], 0
.text:00000000000034ED                 mov     rax, rcx
.text:00000000000034F0                 not     rax
.text:00000000000034F3                 add     rax, r13
.text:00000000000034F6                 mov     [rsp+178h+var_158], rax
.text:00000000000034FB                 jmp     short loc_356C
.text:00000000000034FD ; ---------------------------------------------------------------------------
.text:00000000000034FD
.text:00000000000034FD loc_34FD:                               ; CODE XREF: main+FAF↓j
.text:00000000000034FD                 mov     rdi, [rbp+18h]  ; s1
.text:0000000000003501                 lea     rsi, s2         ; "lofs"
.text:0000000000003508                 call    _strcmp
.text:000000000000350D                 test    eax, eax
.text:000000000000350F                 jz      short loc_3568
.text:0000000000003511                 test    rbx, rbx
.text:0000000000003514                 jz      short loc_3522
.text:0000000000003516                 test    byte ptr [rbx+28h], 1
.text:000000000000351A                 jnz     short loc_3522
.text:000000000000351C                 test    byte ptr [rbp+28h], 1
.text:0000000000003520                 jnz     short loc_3568
.text:0000000000003522
.text:0000000000003522 loc_3522:                               ; CODE XREF: main+F54↑j
.text:0000000000003522                                         ; main+F5A↑j
.text:0000000000003522                 mov     r9, [rbp+8]
.text:0000000000003526                 mov     rcx, r13
.text:0000000000003529                 mov     eax, r14d
.text:000000000000352C                 mov     rdi, r9
.text:000000000000352F                 repne scasb
.text:0000000000003531                 not     rcx
.text:0000000000003534                 lea     r10, [rcx-1]
.text:0000000000003538                 cmp     r10, [rsp+178h+s1]
.text:000000000000353D                 jb      short loc_3568
.text:000000000000353F                 mov     rax, [rsp+178h+var_158]
.text:0000000000003544                 cmp     rax, r10
.text:0000000000003547                 jb      short loc_3568
.text:0000000000003549                 cmp     r10, 1
.text:000000000000354D                 jz      loc_3A29
.text:0000000000003553                 cmp     rax, r10
.text:0000000000003556                 jz      loc_39FB
.text:000000000000355C                 cmp     byte ptr [r15+rcx-1], 2Fh ; '/'
.text:0000000000003562                 jz      loc_39FB
.text:0000000000003568
.text:0000000000003568 loc_3568:                               ; CODE XREF: main+F4F↑j
.text:0000000000003568                                         ; main+F60↑j ...
.text:0000000000003568                 mov     rbp, [rbp+30h]
.text:000000000000356C
.text:000000000000356C loc_356C:                               ; CODE XREF: main+F3B↑j
.text:000000000000356C                 test    rbp, rbp
.text:000000000000356F                 jnz     short loc_34FD
.text:0000000000003571                 mov     rdi, r15        ; ptr
.text:0000000000003574                 call    _free
.text:0000000000003579                 test    rbx, rbx
.text:000000000000357C                 jz      loc_2F90
.text:0000000000003582                 mov     rsi, [rbx+8]    ; filename
.text:0000000000003586                 mov     rdx, [rsp+178h+stat_buf] ; stat_buf
.text:000000000000358B                 mov     edi, 1          ; ver
.text:0000000000003590                 call    ___xstat
.text:0000000000003595                 test    eax, eax
.text:0000000000003597                 jnz     loc_2F90
.text:000000000000359D                 mov     rax, [rsp+178h+var_128]
.text:00000000000035A2                 mov     rax, [rax]
.text:00000000000035A5                 cmp     [rsp+178h+var_D8], rax
.text:00000000000035AD                 jnz     loc_2F90
.text:00000000000035B3                 jmp     loc_33D0
.text:00000000000035B8 ; ---------------------------------------------------------------------------
.text:00000000000035B8
.text:00000000000035B8 loc_35B8:                               ; CODE XREF: main+7B0↑j
.text:00000000000035B8                 movzx   ebp, cs:show_all_fs
.text:00000000000035BF                 mov     rax, cs:mount_list
.text:00000000000035C6                 xor     edx, edx
.text:00000000000035C8                 jmp     short loc_35D1
.text:00000000000035CA ; ---------------------------------------------------------------------------
.text:00000000000035CA
.text:00000000000035CA loc_35CA:                               ; CODE XREF: main+1014↓j
.text:00000000000035CA                 mov     rax, [rax+30h]
.text:00000000000035CE                 add     edx, 1
.text:00000000000035D1
.text:00000000000035D1 loc_35D1:                               ; CODE XREF: main+1008↑j
.text:00000000000035D1                 test    rax, rax
.text:00000000000035D4                 jnz     short loc_35CA
.text:00000000000035D6                 movsxd  rdi, edx
.text:00000000000035D9                 lea     r8, devlist_free
.text:00000000000035E0                 lea     rcx, devlist_compare
.text:00000000000035E7                 lea     rdx, devlist_hash
.text:00000000000035EE                 xor     esi, esi
.text:00000000000035F0                 call    hash_initialize
.text:00000000000035F5                 test    rax, rax
.text:00000000000035F8                 mov     cs:devlist_table, rax
.text:00000000000035FF                 jz      loc_3B13
.text:0000000000003605                 lea     rax, [rsp+178h+var_D8]
.text:000000000000360D                 mov     r13, cs:mount_list
.text:0000000000003614                 xor     ebx, ebx
.text:0000000000003616                 mov     qword ptr [rsp+178h+argc], rax
.text:000000000000361B                 jmp     short loc_366A
.text:000000000000361D ; ---------------------------------------------------------------------------
.text:000000000000361D
.text:000000000000361D loc_361D:                               ; CODE XREF: main+10C3↓j
.text:000000000000361D                                         ; main+10D9↓j ...
.text:000000000000361D                 mov     rax, [r13+20h]
.text:0000000000003621                 mov     [rsp+178h+var_D8], rax
.text:0000000000003629
.text:0000000000003629 loc_3629:                               ; CODE XREF: main+1128↓j
.text:0000000000003629                                         ; main+114E↓j ...
.text:0000000000003629                 mov     edi, 18h
.text:000000000000362E                 call    xmalloc
.text:0000000000003633                 mov     r12, rax
.text:0000000000003636                 mov     [rax+8], r13
.text:000000000000363A                 mov     rax, [rsp+178h+var_D8]
.text:0000000000003642                 mov     rdi, cs:devlist_table
.text:0000000000003649                 mov     [r12+10h], rbx
.text:000000000000364E                 mov     rsi, r12
.text:0000000000003651                 mov     [r12], rax
.text:0000000000003655                 call    hash_insert
.text:000000000000365A                 test    rax, rax
.text:000000000000365D                 jz      loc_3B13
.text:0000000000003663                 mov     r13, [r13+30h]
.text:0000000000003667                 mov     rbx, r12
.text:000000000000366A
.text:000000000000366A loc_366A:                               ; CODE XREF: main+105B↑j
.text:000000000000366A                                         ; main+1265↓j ...
.text:000000000000366A                 test    r13, r13
.text:000000000000366D                 jz      loc_3838
.text:0000000000003673                 movzx   eax, byte ptr [r13+28h]
.text:0000000000003678                 test    al, 2
.text:000000000000367A                 jz      short loc_3685
.text:000000000000367C                 cmp     cs:show_local_fs, 0
.text:0000000000003683                 jnz     short loc_361D
.text:0000000000003685
.text:0000000000003685 loc_3685:                               ; CODE XREF: main+10BA↑j
.text:0000000000003685                 test    al, 1
.text:0000000000003687                 jz      short loc_369B
.text:0000000000003689                 cmp     cs:show_all_fs, 0
.text:0000000000003690                 jnz     short loc_369B
.text:0000000000003692                 cmp     cs:show_listed_fs, 0
.text:0000000000003699                 jz      short loc_361D
.text:000000000000369B
.text:000000000000369B loc_369B:                               ; CODE XREF: main+10C7↑j
.text:000000000000369B                                         ; main+10D0↑j
.text:000000000000369B                 mov     r12, [r13+18h]
.text:000000000000369F                 mov     rdi, r12        ; s1
.text:00000000000036A2                 call    selected_fstype
.text:00000000000036A7                 test    al, al
.text:00000000000036A9                 jz      loc_361D
.text:00000000000036AF                 mov     rdi, r12        ; s1
.text:00000000000036B2                 call    excluded_fstype
.text:00000000000036B7                 test    al, al
.text:00000000000036B9                 mov     r14d, eax
.text:00000000000036BC                 jnz     loc_361D
.text:00000000000036C2                 mov     rsi, [r13+8]    ; filename
.text:00000000000036C6                 mov     rdx, qword ptr [rsp+178h+argc] ; stat_buf
.text:00000000000036CB                 mov     edi, 1          ; ver
.text:00000000000036D0                 call    ___xstat
.text:00000000000036D5                 add     eax, 1
.text:00000000000036D8                 jz      loc_361D
.text:00000000000036DE                 mov     rdi, cs:devlist_table
.text:00000000000036E5                 test    rdi, rdi
.text:00000000000036E8                 jz      loc_3629
.text:00000000000036EE                 mov     rax, [rsp+178h+var_D8]
.text:00000000000036F6                 mov     rsi, r15
.text:00000000000036F9                 mov     qword ptr [rsp+178h+longind], rax
.text:0000000000003701                 call    hash_lookup
.text:0000000000003706                 test    rax, rax
.text:0000000000003709                 mov     [rsp+178h+var_168], rax
.text:000000000000370E                 jz      loc_3629
.text:0000000000003714                 mov     r12, [rax+8]
.text:0000000000003718                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000371C                 mov     eax, r14d
.text:000000000000371F                 mov     rdi, [r12+8]
.text:0000000000003724                 mov     [rsp+178h+s1], rdi
.text:0000000000003729                 repne scasb
.text:000000000000372B                 mov     rdi, [r13+8]
.text:000000000000372F                 not     rcx
.text:0000000000003732                 mov     rdx, rcx
.text:0000000000003735                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003739                 mov     [rsp+178h+var_158], rdi
.text:000000000000373E                 sub     rdx, 1
.text:0000000000003742                 repne scasb
.text:0000000000003744                 mov     rdi, [r12+10h]
.text:0000000000003749                 mov     rax, rcx
.text:000000000000374C                 not     rax
.text:000000000000374F                 sub     rax, 1
.text:0000000000003753                 cmp     rdx, rax
.text:0000000000003756                 setnbe  byte ptr [rsp+178h+ptr]
.text:000000000000375B                 test    rdi, rdi
.text:000000000000375E                 jz      loc_3A87
.text:0000000000003764                 mov     rsi, [r13+10h]
.text:0000000000003768                 test    rsi, rsi
.text:000000000000376B                 jz      loc_3A87
.text:0000000000003771                 mov     eax, r14d
.text:0000000000003774                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003778                 repne scasb
.text:000000000000377A                 mov     rdi, rsi
.text:000000000000377D                 not     rcx
.text:0000000000003780                 mov     rdx, rcx
.text:0000000000003783                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003787                 repne scasb
.text:0000000000003789                 sub     rdx, 1
.text:000000000000378D                 mov     rax, rcx
.text:0000000000003790                 not     rax
.text:0000000000003793                 sub     rax, 1
.text:0000000000003797                 cmp     rdx, rax
.text:000000000000379A                 setb    al
.text:000000000000379D                 movzx   eax, al
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: main+14C9↓j
.text:00000000000037A0                 and     eax, 1
.text:00000000000037A3                 cmp     cs:print_grand_total, 0
.text:00000000000037AA                 mov     byte ptr [rsp+178h+name], al
.text:00000000000037AE                 mov     rax, [r13+0]
.text:00000000000037B2                 mov     r14, rax
.text:00000000000037B5                 jnz     short loc_37DA
.text:00000000000037B7                 test    byte ptr [r13+28h], 2
.text:00000000000037BC                 jz      short loc_37DA
.text:00000000000037BE                 test    byte ptr [r12+28h], 2
.text:00000000000037C4                 jz      short loc_37DA
.text:00000000000037C6                 mov     rdi, [r12]      ; s1
.text:00000000000037CA                 mov     rsi, rax        ; s2
.text:00000000000037CD                 call    _strcmp
.text:00000000000037D2                 test    eax, eax
.text:00000000000037D4                 jnz     loc_3629
.text:00000000000037DA
.text:00000000000037DA loc_37DA:                               ; CODE XREF: main+11F5↑j
.text:00000000000037DA                                         ; main+11FC↑j ...
.text:00000000000037DA                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000037DF                 mov     rdi, r14        ; s
.text:00000000000037E2                 call    _strchr
.text:00000000000037E7                 test    rax, rax
.text:00000000000037EA                 jz      short loc_37FF
.text:00000000000037EC                 mov     rdi, [r12]      ; s
.text:00000000000037F0                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000037F5                 call    _strchr
.text:00000000000037FA                 test    rax, rax
.text:00000000000037FD                 jz      short loc_3815
.text:00000000000037FF
.text:00000000000037FF loc_37FF:                               ; CODE XREF: main+122A↑j
.text:00000000000037FF                 cmp     byte ptr [rsp+178h+name], 0
.text:0000000000003804                 jnz     loc_3A8E
.text:000000000000380A                 cmp     byte ptr [rsp+178h+ptr], 0
.text:000000000000380F                 jz      loc_3A8E
.text:0000000000003815
.text:0000000000003815 loc_3815:                               ; CODE XREF: main+123D↑j
.text:0000000000003815                                         ; main+14EF↓j
.text:0000000000003815                 mov     rax, [rsp+178h+var_168]
.text:000000000000381A                 mov     [rax+8], r13
.text:000000000000381E
.text:000000000000381E loc_381E:                               ; CODE XREF: main+14F8↓j
.text:000000000000381E                 test    bpl, bpl
.text:0000000000003821                 mov     r13, [r13+30h]
.text:0000000000003825                 jnz     loc_366A
.text:000000000000382B                 mov     rdi, r12        ; ptr
.text:000000000000382E                 call    free_mount_entry
.text:0000000000003833                 jmp     loc_366A
.text:0000000000003838 ; ---------------------------------------------------------------------------
.text:0000000000003838
.text:0000000000003838 loc_3838:                               ; CODE XREF: main+10AD↑j
.text:0000000000003838                 test    bpl, bpl
.text:000000000000383B                 jnz     short loc_3883
.text:000000000000383D                 mov     cs:mount_list, 0
.text:0000000000003848                 jmp     short loc_385E
.text:000000000000384A ; ---------------------------------------------------------------------------
.text:000000000000384A
.text:000000000000384A loc_384A:                               ; CODE XREF: main+12A1↓j
.text:000000000000384A                 mov     rax, [rbx+8]
.text:000000000000384E                 mov     rbx, [rbx+10h]
.text:0000000000003852                 mov     ebp, 1
.text:0000000000003857                 mov     [rax+30h], r13
.text:000000000000385B                 mov     r13, rax
.text:000000000000385E
.text:000000000000385E loc_385E:                               ; CODE XREF: main+1288↑j
.text:000000000000385E                 test    rbx, rbx
.text:0000000000003861                 jnz     short loc_384A
.text:0000000000003863                 test    bpl, bpl
.text:0000000000003866                 jnz     loc_3B18
.text:000000000000386C
.text:000000000000386C loc_386C:                               ; CODE XREF: main+155F↓j
.text:000000000000386C                 mov     rdi, cs:devlist_table ; ptr
.text:0000000000003873                 call    hash_free
.text:0000000000003878                 mov     cs:devlist_table, 0
.text:0000000000003883
.text:0000000000003883 loc_3883:                               ; CODE XREF: main+127B↑j
.text:0000000000003883                 mov     rbx, cs:mount_list
.text:000000000000388A                 jmp     short loc_38C2
.text:000000000000388C ; ---------------------------------------------------------------------------
.text:000000000000388C
.text:000000000000388C loc_388C:                               ; CODE XREF: main+1305↓j
.text:000000000000388C                 movzx   r9d, byte ptr [rbx+28h]
.text:0000000000003891                 mov     rsi, [rbx+8]    ; src
.text:0000000000003895                 sub     rsp, 8
.text:0000000000003899                 mov     r8, [rbx+18h]
.text:000000000000389D                 mov     rdi, [rbx]      ; s2
.text:00000000000038A0                 xor     ecx, ecx
.text:00000000000038A2                 push    1               ; int
.text:00000000000038A4                 push    0               ; __int64
.text:00000000000038A6                 xor     edx, edx
.text:00000000000038A8                 mov     eax, r9d
.text:00000000000038AB                 and     r9d, 1
.text:00000000000038AF                 shr     al, 1
.text:00000000000038B1                 and     eax, 1
.text:00000000000038B4                 push    rax             ; int
.text:00000000000038B5                 call    get_dev
.text:00000000000038BA                 mov     rbx, [rbx+30h]
.text:00000000000038BE                 add     rsp, 20h
.text:00000000000038C2
.text:00000000000038C2 loc_38C2:                               ; CODE XREF: main+12CA↑j
.text:00000000000038C2                 test    rbx, rbx
.text:00000000000038C5                 jnz     short loc_388C
.text:00000000000038C7                 jmp     loc_319C
.text:00000000000038CC ; ---------------------------------------------------------------------------
.text:00000000000038CC
.text:00000000000038CC loc_38CC:                               ; CODE XREF: main+D99↑j
.text:00000000000038CC                                         ; main+DA8↑j
.text:00000000000038CC                 movzx   r14d, byte ptr [rsp+178h+var_158]
.text:00000000000038D2                 jmp     loc_3385
.text:00000000000038D7 ; ---------------------------------------------------------------------------
.text:00000000000038D7
.text:00000000000038D7 loc_38D7:                               ; CODE XREF: main+838↑j
.text:00000000000038D7                 mov     rax, [rsp+178h+name]
.text:00000000000038DC                 mov     [rsp+178h+s1], rax
.text:00000000000038E1                 jmp     loc_2E0A
.text:00000000000038E6 ; ---------------------------------------------------------------------------
.text:00000000000038E6
.text:00000000000038E6 loc_38E6:                               ; CODE XREF: main+6CB↑j
.text:00000000000038E6                 mov     eax, [rsp+178h+argc]
.text:00000000000038EA                 cmp     cs:optind@@GLIBC_2_2_5, eax
.text:00000000000038F0                 jge     loc_39A5
.text:00000000000038F6                 cmp     cs:show_all_fs, 0
.text:00000000000038FD                 jnz     loc_39A5
.text:0000000000003903                 cmp     cs:show_local_fs, 0
.text:000000000000390A                 jnz     loc_39A5
.text:0000000000003910                 cmp     cs:fs_select_list, 0
.text:0000000000003918                 mov     ebx, 1
.text:000000000000391D                 lea     rbp, aWrittenBySSAnd+1Bh ; ""
.text:0000000000003924                 jz      loc_3AC4
.text:000000000000392A
.text:000000000000392A loc_392A:                               ; CODE XREF: main+13F1↓j
.text:000000000000392A                                         ; main+150C↓j ...
.text:000000000000392A                 lea     rsi, aCannotReadTabl ; "cannot read table of mounted file syste"...
.text:0000000000003931                 xor     edi, edi        ; domainname
.text:0000000000003933                 mov     edx, 5          ; category
.text:0000000000003938                 call    _dcgettext
.text:000000000000393D                 mov     r12, rax
.text:0000000000003940                 call    ___errno_location
.text:0000000000003945                 mov     esi, [rax]      ; errnum
.text:0000000000003947                 lea     rdx, format     ; "%s%s"
.text:000000000000394E                 mov     r8, r12
.text:0000000000003951                 mov     rcx, rbp
.text:0000000000003954                 mov     edi, ebx        ; status
.text:0000000000003956                 xor     eax, eax
.text:0000000000003958                 call    _error
.text:000000000000395D                 jmp     loc_2C91
.text:0000000000003962 ; ---------------------------------------------------------------------------
.text:0000000000003962
.text:0000000000003962 loc_3962:                               ; CODE XREF: main+6B6↑j
.text:0000000000003962                 cmp     cs:fs_exclude_list, 0
.text:000000000000396A                 jnz     loc_2C7C
.text:0000000000003970                 cmp     cs:print_type, 0
.text:0000000000003977                 jnz     loc_2C7C
.text:000000000000397D                 cmp     cs:byte_21407C, 0
.text:0000000000003984                 jnz     loc_2C7C
.text:000000000000398A                 movzx   edi, cs:show_local_fs
.text:0000000000003991                 jmp     loc_2C7C
.text:0000000000003996 ; ---------------------------------------------------------------------------
.text:0000000000003996
.text:0000000000003996 loc_3996:                               ; CODE XREF: main+D38↑j
.text:0000000000003996                 mov     esi, 0Ah        ; int
.text:000000000000399B                 call    ___overflow
.text:00000000000039A0                 jmp     loc_3309
.text:00000000000039A5 ; ---------------------------------------------------------------------------
.text:00000000000039A5
.text:00000000000039A5 loc_39A5:                               ; CODE XREF: main+1330↑j
.text:00000000000039A5                                         ; main+133D↑j ...
.text:00000000000039A5                 mov     ebx, 1
.text:00000000000039AA                 lea     rbp, aWrittenBySSAnd+1Bh ; ""
.text:00000000000039B1                 jmp     loc_392A
.text:00000000000039B6 ; ---------------------------------------------------------------------------
.text:00000000000039B6
.text:00000000000039B6 loc_39B6:                               ; CODE XREF: main+9A0↑j
.text:00000000000039B6                 mov     rsi, [rsp+178h+name]
.text:00000000000039BB                 mov     edi, 4
.text:00000000000039C0                 call    quotearg_style
.text:00000000000039C5                 lea     rsi, aCannotAccessSO ; "cannot access %s: over-mounted by anoth"...
.text:00000000000039CC                 mov     rbx, rax
.text:00000000000039CF                 mov     edx, 5          ; category
.text:00000000000039D4                 xor     edi, edi        ; domainname
.text:00000000000039D6                 call    _dcgettext
.text:00000000000039DB                 mov     rcx, rbx
.text:00000000000039DE                 mov     rdx, rax        ; format
.text:00000000000039E1                 xor     esi, esi        ; errnum
.text:00000000000039E3                 xor     edi, edi        ; status
.text:00000000000039E5                 xor     eax, eax
.text:00000000000039E7                 call    _error
.text:00000000000039EC                 mov     cs:exit_status, 1
.text:00000000000039F6                 jmp     loc_3182
.text:00000000000039FB ; ---------------------------------------------------------------------------
.text:00000000000039FB
.text:00000000000039FB loc_39FB:                               ; CODE XREF: main+F96↑j
.text:00000000000039FB                                         ; main+FA2↑j
.text:00000000000039FB                 mov     rdx, r10        ; n
.text:00000000000039FE                 mov     rsi, r15        ; s2
.text:0000000000003A01                 mov     rdi, r9         ; s1
.text:0000000000003A04                 mov     [rsp+178h+ptr], r10
.text:0000000000003A09                 call    _strncmp
.text:0000000000003A0E                 mov     r10, [rsp+178h+ptr]
.text:0000000000003A13                 test    eax, eax
.text:0000000000003A15                 cmovnz  r10, [rsp+178h+s1]
.text:0000000000003A1B                 cmovz   rbx, rbp
.text:0000000000003A1F                 mov     [rsp+178h+s1], r10
.text:0000000000003A24                 jmp     loc_3568
.text:0000000000003A29 ; ---------------------------------------------------------------------------
.text:0000000000003A29
.text:0000000000003A29 loc_3A29:                               ; CODE XREF: main+F8D↑j
.text:0000000000003A29                 mov     [rsp+178h+s1], 1
.text:0000000000003A32                 mov     rbx, rbp
.text:0000000000003A35                 jmp     loc_3568
.text:0000000000003A3A ; ---------------------------------------------------------------------------
.text:0000000000003A3A
.text:0000000000003A3A loc_3A3A:                               ; CODE XREF: main+A62↑j
.text:0000000000003A3A                 mov     rbx, r12
.text:0000000000003A3D                 jmp     loc_2FB0
.text:0000000000003A42 ; ---------------------------------------------------------------------------
.text:0000000000003A42
.text:0000000000003A42 loc_3A42:                               ; CODE XREF: main+E6C↑j
.text:0000000000003A42                 mov     rdx, [r12+8]
.text:0000000000003A47                 mov     esi, 3
.text:0000000000003A4C                 xor     edi, edi
.text:0000000000003A4E                 call    quotearg_n_style_colon
.text:0000000000003A53                 mov     esi, [r14]      ; errnum
.text:0000000000003A56                 lea     rdx, aS_0+2     ; format
.text:0000000000003A5D                 mov     rcx, rax
.text:0000000000003A60                 xor     edi, edi        ; status
.text:0000000000003A62                 xor     eax, eax
.text:0000000000003A64                 call    _error
.text:0000000000003A69                 mov     cs:exit_status, 1
.text:0000000000003A73                 jmp     loc_3432
.text:0000000000003A78 ; ---------------------------------------------------------------------------
.text:0000000000003A78
.text:0000000000003A78 loc_3A78:                               ; CODE XREF: main+854↑j
.text:0000000000003A78                 mov     rdi, [rsp+178h+var_110] ; ptr
.text:0000000000003A7D                 call    _free
.text:0000000000003A82                 jmp     loc_2F66
.text:0000000000003A87 ; ---------------------------------------------------------------------------
.text:0000000000003A87
.text:0000000000003A87 loc_3A87:                               ; CODE XREF: main+119E↑j
.text:0000000000003A87                                         ; main+11AB↑j
.text:0000000000003A87                 xor     eax, eax
.text:0000000000003A89                 jmp     loc_37A0
.text:0000000000003A8E ; ---------------------------------------------------------------------------
.text:0000000000003A8E
.text:0000000000003A8E loc_3A8E:                               ; CODE XREF: main+1244↑j
.text:0000000000003A8E                                         ; main+124F↑j
.text:0000000000003A8E                 mov     rdi, [r12]      ; s1
.text:0000000000003A92                 mov     rsi, r14        ; s2
.text:0000000000003A95                 call    _strcmp
.text:0000000000003A9A                 test    eax, eax
.text:0000000000003A9C                 jz      short loc_3AB5
.text:0000000000003A9E                 mov     rsi, [rsp+178h+s1] ; s2
.text:0000000000003AA3                 mov     rdi, [rsp+178h+var_158] ; s1
.text:0000000000003AA8                 call    _strcmp
.text:0000000000003AAD                 test    eax, eax
.text:0000000000003AAF                 jz      loc_3815
.text:0000000000003AB5
.text:0000000000003AB5 loc_3AB5:                               ; CODE XREF: main+14DC↑j
.text:0000000000003AB5                 mov     r12, r13
.text:0000000000003AB8                 jmp     loc_381E
.text:0000000000003ABD ; ---------------------------------------------------------------------------
.text:0000000000003ABD
.text:0000000000003ABD loc_3ABD:                               ; CODE XREF: main+1ED↑j
.text:0000000000003ABD                 xor     edi, edi        ; status
.text:0000000000003ABF                 call    usage
.text:0000000000003AC4 ; ---------------------------------------------------------------------------
.text:0000000000003AC4
.text:0000000000003AC4 loc_3AC4:                               ; CODE XREF: main+1364↑j
.text:0000000000003AC4                 cmp     cs:fs_exclude_list, 0
.text:0000000000003ACC                 jnz     loc_392A
.text:0000000000003AD2                 lea     rsi, aWarning   ; "Warning: "
.text:0000000000003AD9                 mov     edx, 5          ; category
.text:0000000000003ADE                 xor     edi, edi        ; domainname
.text:0000000000003AE0                 xor     ebx, ebx
.text:0000000000003AE2                 call    _dcgettext
.text:0000000000003AE7                 mov     rbp, rax
.text:0000000000003AEA                 jmp     loc_392A
.text:0000000000003AEF ; ---------------------------------------------------------------------------
.text:0000000000003AEF
.text:0000000000003AEF loc_3AEF:                               ; CODE XREF: main+270↑j
.text:0000000000003AEF                 lea     r8, aOutput     ; "--output"
.text:0000000000003AF6                 lea     rcx, aP         ; "-P"
.text:0000000000003AFD                 xor     edi, edi        ; status
.text:0000000000003AFF                 mov     rdx, r12        ; format
.text:0000000000003B02                 xor     esi, esi        ; errnum
.text:0000000000003B04                 call    _error
.text:0000000000003B09                 mov     edi, 1          ; status
.text:0000000000003B0E                 call    usage
.text:0000000000003B13 ; ---------------------------------------------------------------------------
.text:0000000000003B13
.text:0000000000003B13 loc_3B13:                               ; CODE XREF: main+570↑j
.text:0000000000003B13                                         ; main+579↑j ...
.text:0000000000003B13                 call    xalloc_die
.text:0000000000003B18 ; ---------------------------------------------------------------------------
.text:0000000000003B18
.text:0000000000003B18 loc_3B18:                               ; CODE XREF: main+12A6↑j
.text:0000000000003B18                 mov     cs:mount_list, r13
.text:0000000000003B1F                 jmp     loc_386C
.text:0000000000003B24 ; ---------------------------------------------------------------------------
.text:0000000000003B24
.text:0000000000003B24 def_2CC0:                               ; CODE XREF: main+6E6↑j
.text:0000000000003B24                 lea     rcx, __PRETTY_FUNCTION___8870 ; jumptable 0000000000002CC0 default case
.text:0000000000003B2B                 lea     rsi, file       ; "../coreutils-8.31/src/df.c"
.text:0000000000003B32                 lea     rdi, assertion  ; "!\"invalid header_mode\""
.text:0000000000003B39                 mov     edx, 222h       ; line
.text:0000000000003B3E                 call    ___assert_fail
.text:0000000000003B43 ; ---------------------------------------------------------------------------
.text:0000000000003B43
.text:0000000000003B43 loc_3B43:                               ; CODE XREF: main+567↑j
.text:0000000000003B43                 mov     esi, 1
.text:0000000000003B48                 jmp     loc_2B2D
.text:0000000000003B4D ; ---------------------------------------------------------------------------
.text:0000000000003B4D
.text:0000000000003B4D loc_3B4D:                               ; CODE XREF: main+310↑j
.text:0000000000003B4D                 lea     r8, aOutput     ; "--output"
.text:0000000000003B54                 lea     rcx, aP         ; "-P"
.text:0000000000003B5B
.text:0000000000003B5B loc_3B5B:                               ; CODE XREF: main+15BC↓j
.text:0000000000003B5B                                         ; main+15CC↓j
.text:0000000000003B5B                 mov     rdx, r12        ; format
.text:0000000000003B5E                 xor     esi, esi        ; errnum
.text:0000000000003B60                 xor     edi, edi        ; status
.text:0000000000003B62                 xor     eax, eax
.text:0000000000003B64                 call    _error
.text:0000000000003B69                 jmp     loc_2A06
.text:0000000000003B6E ; ---------------------------------------------------------------------------
.text:0000000000003B6E
.text:0000000000003B6E loc_3B6E:                               ; CODE XREF: main+27D↑j
.text:0000000000003B6E                                         ; main+327↑j
.text:0000000000003B6E                 lea     r8, aOutput     ; "--output"
.text:0000000000003B75                 lea     rcx, aT         ; "-T"
.text:0000000000003B7C                 jmp     short loc_3B5B
.text:0000000000003B7E ; ---------------------------------------------------------------------------
.text:0000000000003B7E
.text:0000000000003B7E loc_3B7E:                               ; CODE XREF: main+263↑j
.text:0000000000003B7E                                         ; main+2C7↑j
.text:0000000000003B7E                 lea     r8, aOutput     ; "--output"
.text:0000000000003B85                 lea     rcx, aI         ; "-i"
.text:0000000000003B8C                 jmp     short loc_3B5B
.text:0000000000003B8E ; ---------------------------------------------------------------------------
.text:0000000000003B8E
.text:0000000000003B8E loc_3B8E:                               ; CODE XREF: main+529↑j
.text:0000000000003B8E                 call    ___stack_chk_fail
.text:0000000000003B8E ; } // starts at 25C0
.text:0000000000003B8E main            endp
.text:0000000000003B8E
.text:0000000000003B8E ; ---------------------------------------------------------------------------
.text:0000000000003B93                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003BA0
.text:0000000000003BA0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003BA0                 public start
.text:0000000000003BA0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 xor     ebp, ebp
.text:0000000000003BA2                 mov     r9, rdx         ; rtld_fini
.text:0000000000003BA5                 pop     rsi             ; argc
.text:0000000000003BA6                 mov     rdx, rsp        ; ubp_av
.text:0000000000003BA9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000003BAD                 push    rax
.text:0000000000003BAE                 push    rsp             ; stack_end
.text:0000000000003BAF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003BB6                 lea     rcx, __libc_csu_init ; init
.text:0000000000003BBD                 lea     rdi, main       ; main
.text:0000000000003BC4                 call    cs:__libc_start_main_ptr
.text:0000000000003BCA                 hlt
.text:0000000000003BCA ; } // starts at 3BA0
.text:0000000000003BCA start           endp
.text:0000000000003BCA
.text:0000000000003BCA ; ---------------------------------------------------------------------------
.text:0000000000003BCB                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003BD0
.text:0000000000003BD0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3C83↓p
.text:0000000000003BD0                 lea     rdi, __bss_start
.text:0000000000003BD7                 push    rbp
.text:0000000000003BD8                 lea     rax, __bss_start
.text:0000000000003BDF                 cmp     rax, rdi
.text:0000000000003BE2                 mov     rbp, rsp
.text:0000000000003BE5                 jz      short loc_3C00
.text:0000000000003BE7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000003BEE                 test    rax, rax
.text:0000000000003BF1                 jz      short loc_3C00
.text:0000000000003BF3                 pop     rbp
.text:0000000000003BF4                 jmp     rax
.text:0000000000003BF4 ; ---------------------------------------------------------------------------
.text:0000000000003BF6                 align 20h
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003C00                                         ; deregister_tm_clones+21↑j
.text:0000000000003C00                 pop     rbp
.text:0000000000003C01                 retn
.text:0000000000003C01 deregister_tm_clones endp
.text:0000000000003C01
.text:0000000000003C01 ; ---------------------------------------------------------------------------
.text:0000000000003C02                 align 10h
.text:0000000000003C10
.text:0000000000003C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C10
.text:0000000000003C10 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003C10
.text:0000000000003C10 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003C10                 lea     rdi, __bss_start
.text:0000000000003C17                 lea     rsi, __bss_start
.text:0000000000003C1E                 push    rbp
.text:0000000000003C1F                 sub     rsi, rdi
.text:0000000000003C22                 mov     rbp, rsp
.text:0000000000003C25                 sar     rsi, 3
.text:0000000000003C29                 mov     rax, rsi
.text:0000000000003C2C                 shr     rax, 3Fh
.text:0000000000003C30                 add     rsi, rax
.text:0000000000003C33                 sar     rsi, 1
.text:0000000000003C36                 jz      short loc_3C50
.text:0000000000003C38                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000003C3F                 test    rax, rax
.text:0000000000003C42                 jz      short loc_3C50
.text:0000000000003C44                 pop     rbp
.text:0000000000003C45                 jmp     rax
.text:0000000000003C45 ; ---------------------------------------------------------------------------
.text:0000000000003C47                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003C50                                         ; register_tm_clones+32↑j
.text:0000000000003C50                 pop     rbp
.text:0000000000003C51                 retn
.text:0000000000003C51 register_tm_clones endp
.text:0000000000003C51
.text:0000000000003C51 ; ---------------------------------------------------------------------------
.text:0000000000003C52                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60 ; Attributes: info_from_lumina
.text:0000000000003C60
.text:0000000000003C60 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003C60                 cmp     cs:completed_7697, 0
.text:0000000000003C67                 jnz     short locret_3C98
.text:0000000000003C69                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003C71                 push    rbp
.text:0000000000003C72                 mov     rbp, rsp
.text:0000000000003C75                 jz      short loc_3C83
.text:0000000000003C77                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000003C7E                 call    __cxa_finalize
.text:0000000000003C83
.text:0000000000003C83 loc_3C83:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003C83                 call    deregister_tm_clones
.text:0000000000003C88                 mov     cs:completed_7697, 1
.text:0000000000003C8F                 pop     rbp
.text:0000000000003C90                 retn
.text:0000000000003C90 ; ---------------------------------------------------------------------------
.text:0000000000003C91                 align 8
.text:0000000000003C98
.text:0000000000003C98 locret_3C98:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003C98                 rep retn
.text:0000000000003C98 __do_global_dtors_aux endp
.text:0000000000003C98
.text:0000000000003C98 ; ---------------------------------------------------------------------------
.text:0000000000003C9A                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0 ; Attributes: bp-based frame
.text:0000000000003CA0
.text:0000000000003CA0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003CA0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003CA0                 push    rbp
.text:0000000000003CA1                 mov     rbp, rsp
.text:0000000000003CA4                 pop     rbp
.text:0000000000003CA5                 jmp     register_tm_clones
.text:0000000000003CA5 frame_dummy     endp
.text:0000000000003CA5
.text:0000000000003CA5 ; ---------------------------------------------------------------------------
.text:0000000000003CAA                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0
.text:0000000000003CB0 replace_control_chars proc near         ; DATA XREF: replace_problematic_chars+17↓o
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 jmp     short loc_3CCB
.text:0000000000003CB0 ; ---------------------------------------------------------------------------
.text:0000000000003CB2                 align 8
.text:0000000000003CB8
.text:0000000000003CB8 loc_3CB8:                               ; CODE XREF: replace_control_chars+20↓j
.text:0000000000003CB8                 cmp     al, 1
.text:0000000000003CBA                 jl      short loc_3CC7
.text:0000000000003CBC                 cmp     al, 1Fh
.text:0000000000003CBE                 jle     short loc_3CC4
.text:0000000000003CC0                 cmp     al, 7Fh
.text:0000000000003CC2                 jnz     short loc_3CC7
.text:0000000000003CC4
.text:0000000000003CC4 loc_3CC4:                               ; CODE XREF: replace_control_chars+E↑j
.text:0000000000003CC4                 mov     byte ptr [rdi], 3Fh ; '?'
.text:0000000000003CC7
.text:0000000000003CC7 loc_3CC7:                               ; CODE XREF: replace_control_chars+A↑j
.text:0000000000003CC7                                         ; replace_control_chars+12↑j
.text:0000000000003CC7                 add     rdi, 1
.text:0000000000003CCB
.text:0000000000003CCB loc_3CCB:                               ; CODE XREF: replace_control_chars↑j
.text:0000000000003CCB                 movzx   eax, byte ptr [rdi]
.text:0000000000003CCE                 test    al, al
.text:0000000000003CD0                 jnz     short loc_3CB8
.text:0000000000003CD2                 rep retn
.text:0000000000003CD2 ; } // starts at 3CB0
.text:0000000000003CD2 replace_control_chars endp
.text:0000000000003CD2
.text:0000000000003CD2 ; ---------------------------------------------------------------------------
.text:0000000000003CD4                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0
.text:0000000000003CE0 devlist_hash    proc near               ; DATA XREF: main+1027↑o
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 mov     rax, [rdi]
.text:0000000000003CE3                 xor     edx, edx
.text:0000000000003CE5                 div     rsi
.text:0000000000003CE8                 mov     rax, rdx
.text:0000000000003CEB                 retn
.text:0000000000003CEB ; } // starts at 3CE0
.text:0000000000003CEB devlist_hash    endp
.text:0000000000003CEB
.text:0000000000003CEB ; ---------------------------------------------------------------------------
.text:0000000000003CEC                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0
.text:0000000000003CF0 devlist_compare proc near               ; DATA XREF: main+1020↑o
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 mov     rax, [rsi]
.text:0000000000003CF3                 cmp     [rdi], rax
.text:0000000000003CF6                 setz    al
.text:0000000000003CF9                 retn
.text:0000000000003CF9 ; } // starts at 3CF0
.text:0000000000003CF9 devlist_compare endp
.text:0000000000003CF9
.text:0000000000003CF9 ; ---------------------------------------------------------------------------
.text:0000000000003CFA                 align 20h
.text:0000000000003D00
.text:0000000000003D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D00
.text:0000000000003D00
.text:0000000000003D00 ; __int64 __fastcall selected_fstype(char *s1)
.text:0000000000003D00 selected_fstype proc near               ; CODE XREF: main+10E2↑p
.text:0000000000003D00                                         ; get_dev+A3↓p
.text:0000000000003D00 ; __unwind {
.text:0000000000003D00                 push    r12
.text:0000000000003D02                 push    rbp
.text:0000000000003D03                 push    rbx
.text:0000000000003D04                 mov     rbx, cs:fs_select_list
.text:0000000000003D0B                 test    rbx, rbx
.text:0000000000003D0E                 setz    al
.text:0000000000003D11                 test    rdi, rdi
.text:0000000000003D14                 setz    r12b
.text:0000000000003D18                 or      r12b, al
.text:0000000000003D1B                 jnz     short loc_3D38
.text:0000000000003D1D                 mov     rbp, rdi
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: selected_fstype+36↓j
.text:0000000000003D20                 mov     rsi, [rbx]      ; s2
.text:0000000000003D23                 mov     rdi, rbp        ; s1
.text:0000000000003D26                 call    _strcmp
.text:0000000000003D2B                 test    eax, eax
.text:0000000000003D2D                 jz      short loc_3D40
.text:0000000000003D2F                 mov     rbx, [rbx+8]
.text:0000000000003D33                 test    rbx, rbx
.text:0000000000003D36                 jnz     short loc_3D20
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: selected_fstype+1B↑j
.text:0000000000003D38                 mov     eax, r12d
.text:0000000000003D3B                 pop     rbx
.text:0000000000003D3C                 pop     rbp
.text:0000000000003D3D                 pop     r12
.text:0000000000003D3F                 retn
.text:0000000000003D40 ; ---------------------------------------------------------------------------
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: selected_fstype+2D↑j
.text:0000000000003D40                 mov     r12d, 1
.text:0000000000003D46                 mov     eax, r12d
.text:0000000000003D49                 pop     rbx
.text:0000000000003D4A                 pop     rbp
.text:0000000000003D4B                 pop     r12
.text:0000000000003D4D                 retn
.text:0000000000003D4D ; } // starts at 3D00
.text:0000000000003D4D selected_fstype endp
.text:0000000000003D4D
.text:0000000000003D4D ; ---------------------------------------------------------------------------
.text:0000000000003D4E                 align 10h
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50
.text:0000000000003D50 ; __int64 __fastcall excluded_fstype(char *s1)
.text:0000000000003D50 excluded_fstype proc near               ; CODE XREF: main+10F2↑p
.text:0000000000003D50                                         ; get_dev+AF↓p
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 push    r12
.text:0000000000003D52                 push    rbp
.text:0000000000003D53                 push    rbx
.text:0000000000003D54                 mov     rbx, cs:fs_exclude_list
.text:0000000000003D5B                 test    rbx, rbx
.text:0000000000003D5E                 setz    al
.text:0000000000003D61                 test    rdi, rdi
.text:0000000000003D64                 setz    bpl
.text:0000000000003D68                 or      bpl, al
.text:0000000000003D6B                 jnz     short loc_3D90
.text:0000000000003D6D                 mov     r12, rdi
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: excluded_fstype+36↓j
.text:0000000000003D70                 mov     rsi, [rbx]      ; s2
.text:0000000000003D73                 mov     rdi, r12        ; s1
.text:0000000000003D76                 call    _strcmp
.text:0000000000003D7B                 test    eax, eax
.text:0000000000003D7D                 jz      short loc_3DA0
.text:0000000000003D7F                 mov     rbx, [rbx+8]
.text:0000000000003D83                 test    rbx, rbx
.text:0000000000003D86                 jnz     short loc_3D70
.text:0000000000003D88                 mov     eax, ebp
.text:0000000000003D8A                 pop     rbx
.text:0000000000003D8B                 pop     rbp
.text:0000000000003D8C                 pop     r12
.text:0000000000003D8E                 retn
.text:0000000000003D8E ; ---------------------------------------------------------------------------
.text:0000000000003D8F                 align 10h
.text:0000000000003D90
.text:0000000000003D90 loc_3D90:                               ; CODE XREF: excluded_fstype+1B↑j
.text:0000000000003D90                 xor     ebp, ebp
.text:0000000000003D92                 mov     eax, ebp
.text:0000000000003D94                 pop     rbx
.text:0000000000003D95                 pop     rbp
.text:0000000000003D96                 pop     r12
.text:0000000000003D98                 retn
.text:0000000000003D98 ; ---------------------------------------------------------------------------
.text:0000000000003D99                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: excluded_fstype+2D↑j
.text:0000000000003DA0                 mov     ebp, 1
.text:0000000000003DA5                 mov     eax, ebp
.text:0000000000003DA7                 pop     rbx
.text:0000000000003DA8                 pop     rbp
.text:0000000000003DA9                 pop     r12
.text:0000000000003DAB                 retn
.text:0000000000003DAB ; } // starts at 3D50
.text:0000000000003DAB excluded_fstype endp
.text:0000000000003DAB
.text:0000000000003DAB ; ---------------------------------------------------------------------------
.text:0000000000003DAC                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DB0
.text:0000000000003DB0
.text:0000000000003DB0 ; void devlist_free(void *ptr)
.text:0000000000003DB0 devlist_free    proc near               ; DATA XREF: main+1019↑o
.text:0000000000003DB0 ; __unwind {
.text:0000000000003DB0                 jmp     _free
.text:0000000000003DB0 ; } // starts at 3DB0
.text:0000000000003DB0 devlist_free    endp
.text:0000000000003DB0
.text:0000000000003DB0 ; ---------------------------------------------------------------------------
.text:0000000000003DB5                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DC0
.text:0000000000003DC0
.text:0000000000003DC0 alloc_table_row proc near               ; CODE XREF: get_header+24↓p
.text:0000000000003DC0                                         ; get_dev:loc_44F9↓p
.text:0000000000003DC0 ; __unwind {
.text:0000000000003DC0                 mov     rax, cs:nrows
.text:0000000000003DC7                 mov     edx, 8
.text:0000000000003DCC                 push    rbx
.text:0000000000003DCD                 mov     rdi, cs:table
.text:0000000000003DD4                 lea     rsi, [rax+1]
.text:0000000000003DD8                 mov     rax, rdx
.text:0000000000003DDB                 mul     rsi
.text:0000000000003DDE                 mov     cs:nrows, rsi
.text:0000000000003DE5                 jo      short loc_3E42
.text:0000000000003DE7                 xor     ecx, ecx
.text:0000000000003DE9
.text:0000000000003DE9 loc_3DE9:                               ; CODE XREF: alloc_table_row+87↓j
.text:0000000000003DE9                 test    rax, rax
.text:0000000000003DEC                 js      short loc_3E3D
.text:0000000000003DEE                 test    rcx, rcx
.text:0000000000003DF1                 jnz     short loc_3E3D
.text:0000000000003DF3                 shl     rsi, 3
.text:0000000000003DF7                 call    xrealloc
.text:0000000000003DFC                 mov     rdx, cs:nrows
.text:0000000000003E03                 mov     rdi, cs:ncolumns
.text:0000000000003E0A                 xor     ecx, ecx
.text:0000000000003E0C                 mov     cs:table, rax
.text:0000000000003E13                 lea     rbx, [rax+rdx*8-8]
.text:0000000000003E18                 mov     edx, 8
.text:0000000000003E1D                 mov     rax, rdx
.text:0000000000003E20                 mul     rdi
.text:0000000000003E23                 jo      short loc_3E49
.text:0000000000003E25
.text:0000000000003E25 loc_3E25:                               ; CODE XREF: alloc_table_row+8E↓j
.text:0000000000003E25                 test    rax, rax
.text:0000000000003E28                 js      short loc_3E3D
.text:0000000000003E2A                 test    rcx, rcx
.text:0000000000003E2D                 jnz     short loc_3E3D
.text:0000000000003E2F                 shl     rdi, 3
.text:0000000000003E33                 call    xmalloc
.text:0000000000003E38                 mov     [rbx], rax
.text:0000000000003E3B                 pop     rbx
.text:0000000000003E3C                 retn
.text:0000000000003E3D ; ---------------------------------------------------------------------------
.text:0000000000003E3D
.text:0000000000003E3D loc_3E3D:                               ; CODE XREF: alloc_table_row+2C↑j
.text:0000000000003E3D                                         ; alloc_table_row+31↑j ...
.text:0000000000003E3D                 call    xalloc_die
.text:0000000000003E42 ; ---------------------------------------------------------------------------
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: alloc_table_row+25↑j
.text:0000000000003E42                 mov     ecx, 1
.text:0000000000003E47                 jmp     short loc_3DE9
.text:0000000000003E49 ; ---------------------------------------------------------------------------
.text:0000000000003E49
.text:0000000000003E49 loc_3E49:                               ; CODE XREF: alloc_table_row+63↑j
.text:0000000000003E49                 mov     ecx, 1
.text:0000000000003E4E                 jmp     short loc_3E25
.text:0000000000003E4E ; } // starts at 3DC0
.text:0000000000003E4E alloc_table_row endp
.text:0000000000003E4E
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50 df_readable     proc near               ; CODE XREF: get_dev+4A7↓p
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 mov     rax, rsi
.text:0000000000003E53                 mov     rsi, rdx
.text:0000000000003E56                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000003E5A                 jbe     short loc_3E90
.text:0000000000003E5C                 test    dil, dil
.text:0000000000003E5F                 jz      short loc_3EB0
.text:0000000000003E61                 mov     edx, cs:human_output_opts
.text:0000000000003E67                 add     rsi, 1
.text:0000000000003E6B
.text:0000000000003E6B loc_3E6B:                               ; CODE XREF: df_readable+50↓j
.text:0000000000003E6B                 mov     rdi, rax
.text:0000000000003E6E                 sub     rsp, 8
.text:0000000000003E72                 neg     rdi
.text:0000000000003E75                 call    human_readable
.text:0000000000003E7A                 lea     rdx, [rax-1]
.text:0000000000003E7E                 mov     byte ptr [rax-1], 2Dh ; '-'
.text:0000000000003E82                 add     rsp, 8
.text:0000000000003E86                 mov     rax, rdx
.text:0000000000003E89                 retn
.text:0000000000003E89 ; ---------------------------------------------------------------------------
.text:0000000000003E8A                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: df_readable+A↑j
.text:0000000000003E90                 movzx   r9d, dil
.text:0000000000003E94                 mov     edx, cs:human_output_opts
.text:0000000000003E9A                 add     rsi, r9
.text:0000000000003E9D                 test    dil, dil
.text:0000000000003EA0                 jnz     short loc_3E6B
.text:0000000000003EA2                 mov     rdi, rax
.text:0000000000003EA5                 jmp     human_readable
.text:0000000000003EA5 ; ---------------------------------------------------------------------------
.text:0000000000003EAA                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: df_readable+F↑j
.text:0000000000003EB0                 lea     rdx, asc_10958+1 ; "-"
.text:0000000000003EB7                 mov     rax, rdx
.text:0000000000003EBA                 retn
.text:0000000000003EBA ; } // starts at 3E50
.text:0000000000003EBA df_readable     endp
.text:0000000000003EBA
.text:0000000000003EBA ; ---------------------------------------------------------------------------
.text:0000000000003EBB                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0 replace_problematic_chars proc near     ; CODE XREF: get_header+79↓p
.text:0000000000003EC0                                         ; get_dev:loc_4749↓p
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 mov     eax, cs:tty_out_8809
.text:0000000000003EC6                 push    rbx
.text:0000000000003EC7                 mov     rbx, rdi
.text:0000000000003ECA                 test    eax, eax
.text:0000000000003ECC                 js      short loc_3EF0
.text:0000000000003ECE
.text:0000000000003ECE loc_3ECE:                               ; CODE XREF: replace_problematic_chars+40↓j
.text:0000000000003ECE                 test    eax, eax
.text:0000000000003ED0                 lea     rdx, replace_invalid_chars
.text:0000000000003ED7                 lea     rax, replace_control_chars
.text:0000000000003EDE                 mov     rdi, rbx
.text:0000000000003EE1                 pop     rbx
.text:0000000000003EE2                 cmovnz  rax, rdx
.text:0000000000003EE6                 jmp     rax
.text:0000000000003EE6 ; ---------------------------------------------------------------------------
.text:0000000000003EE8                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: replace_problematic_chars+C↑j
.text:0000000000003EF0                 mov     edi, 1          ; fd
.text:0000000000003EF5                 call    _isatty
.text:0000000000003EFA                 mov     cs:tty_out_8809, eax
.text:0000000000003F00                 jmp     short loc_3ECE
.text:0000000000003F00 ; } // starts at 3EC0
.text:0000000000003F00 replace_problematic_chars endp
.text:0000000000003F00
.text:0000000000003F00 ; ---------------------------------------------------------------------------
.text:0000000000003F02                 align 10h
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10
.text:0000000000003F10 get_header      proc near               ; CODE XREF: main:loc_2D60↑p
.text:0000000000003F10
.text:0000000000003F10 var_2F0         = qword ptr -2F0h
.text:0000000000003F10 var_2E0         = qword ptr -2E0h
.text:0000000000003F10 var_2D8         = byte ptr -2D8h
.text:0000000000003F10 var_40          = qword ptr -40h
.text:0000000000003F10
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 push    r15
.text:0000000000003F12                 push    r14
.text:0000000000003F14                 push    r13
.text:0000000000003F16                 push    r12
.text:0000000000003F18                 push    rbp
.text:0000000000003F19                 push    rbx
.text:0000000000003F1A                 sub     rsp, 2C8h
.text:0000000000003F21                 mov     rax, fs:28h
.text:0000000000003F2A                 mov     [rsp+2F8h+var_40], rax
.text:0000000000003F32                 xor     eax, eax
.text:0000000000003F34                 call    alloc_table_row
.text:0000000000003F39                 cmp     cs:ncolumns, 0
.text:0000000000003F41                 jz      loc_4148
.text:0000000000003F47                 mov     rdx, cs:columns
.text:0000000000003F4E                 xor     ebx, ebx
.text:0000000000003F50                 mov     r12, 20C49BA5E353F7CFh
.text:0000000000003F5A                 lea     r14, [rsp+2F8h+var_2D8]
.text:0000000000003F5F                 lea     r13, [rsp+2F8h+var_2E0]
.text:0000000000003F64                 jmp     short loc_3FE1
.text:0000000000003F64 ; ---------------------------------------------------------------------------
.text:0000000000003F66                 align 10h
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: get_header+102↓j
.text:0000000000003F70                                         ; get_header+121↓j ...
.text:0000000000003F70                 mov     rdi, rcx        ; s
.text:0000000000003F73                 call    _strdup
.text:0000000000003F78                 mov     rdi, rax
.text:0000000000003F7B                 mov     [rsp+2F8h+var_2E0], rax
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: get_header+179↓j
.text:0000000000003F80                 test    rdi, rdi
.text:0000000000003F83                 jz      loc_4183
.text:0000000000003F89                 call    replace_problematic_chars
.text:0000000000003F8E                 mov     rdx, cs:nrows
.text:0000000000003F95                 mov     rax, cs:table
.text:0000000000003F9C                 xor     esi, esi
.text:0000000000003F9E                 mov     rax, [rax+rdx*8-8]
.text:0000000000003FA3                 mov     rdx, [rsp+2F8h+var_2E0]
.text:0000000000003FA8                 mov     [rax+rbp], rdx
.text:0000000000003FAC                 mov     rdi, [rsp+2F8h+var_2E0]
.text:0000000000003FB1                 call    gnu_mbswidth
.text:0000000000003FB6                 mov     rdx, cs:columns
.text:0000000000003FBD                 cdqe
.text:0000000000003FBF                 mov     rcx, [rdx+rbp]
.text:0000000000003FC3                 cmp     [rcx+20h], rax
.text:0000000000003FC7                 cmovnb  rax, [rcx+20h]
.text:0000000000003FCC                 add     rbx, 1
.text:0000000000003FD0                 cmp     cs:ncolumns, rbx
.text:0000000000003FD7                 mov     [rcx+20h], rax
.text:0000000000003FDB                 jbe     loc_4148
.text:0000000000003FE1
.text:0000000000003FE1 loc_3FE1:                               ; CODE XREF: get_header+54↑j
.text:0000000000003FE1                 lea     rbp, ds:0[rbx*8]
.text:0000000000003FE9                 xor     edi, edi        ; domainname
.text:0000000000003FEB                 mov     [rsp+2F8h+var_2E0], 0
.text:0000000000003FF4                 lea     r15, [rdx+rbp]
.text:0000000000003FF8                 mov     edx, 5          ; category
.text:0000000000003FFD                 mov     rax, [r15]
.text:0000000000004000                 mov     rsi, [rax+18h]  ; msgid
.text:0000000000004004                 call    _dcgettext
.text:0000000000004009                 mov     rcx, rax
.text:000000000000400C                 mov     rax, [r15]
.text:000000000000400F                 cmp     dword ptr [rax], 2
.text:0000000000004012                 jnz     loc_3F70
.text:0000000000004018                 mov     eax, cs:header_mode
.text:000000000000401E                 mov     r10d, cs:human_output_opts
.text:0000000000004025                 test    eax, eax
.text:0000000000004027                 jz      short loc_40A8
.text:0000000000004029                 cmp     eax, 4
.text:000000000000402C                 jz      short loc_4090
.text:000000000000402E                 cmp     eax, 3
.text:0000000000004031                 jnz     loc_3F70
.text:0000000000004037                 mov     rdi, cs:output_block_size
.text:000000000000403E                 mov     rsi, r14
.text:0000000000004041                 mov     [rsp+2F8h+var_2F0], rcx
.text:0000000000004046                 call    umaxtostr
.text:000000000000404B                 mov     r15, rax
.text:000000000000404E
.text:000000000000404E loc_404E:                               ; CODE XREF: get_header+230↓j
.text:000000000000404E                 lea     rsi, aSS_0      ; "%s-%s"
.text:0000000000004055                 xor     edi, edi        ; domainname
.text:0000000000004057                 mov     edx, 5          ; category
.text:000000000000405C                 call    _dcgettext
.text:0000000000004061                 mov     rcx, [rsp+2F8h+var_2F0]
.text:0000000000004066                 mov     rsi, rax
.text:0000000000004069                 mov     rdx, r15
.text:000000000000406C                 xor     eax, eax
.text:000000000000406E                 mov     rdi, r13
.text:0000000000004071                 call    gzprintf
.text:0000000000004076                 cmp     eax, 0FFFFFFFFh
.text:0000000000004079                 jnz     short loc_4084
.text:000000000000407B                 mov     [rsp+2F8h+var_2E0], 0
.text:0000000000004084
.text:0000000000004084 loc_4084:                               ; CODE XREF: get_header+169↑j
.text:0000000000004084                 mov     rdi, [rsp+2F8h+var_2E0]
.text:0000000000004089                 jmp     loc_3F80
.text:0000000000004089 ; ---------------------------------------------------------------------------
.text:000000000000408E                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: get_header+11C↑j
.text:0000000000004090                 mov     r10d, cs:human_output_opts
.text:0000000000004097                 test    r10b, 10h
.text:000000000000409B                 jnz     loc_3F70
.text:00000000000040A1                 nop     dword ptr [rax+00000000h]
.text:00000000000040A8
.text:00000000000040A8 loc_40A8:                               ; CODE XREF: get_header+117↑j
.text:00000000000040A8                 mov     rdi, cs:output_block_size
.text:00000000000040AF                 mov     r9d, r10d
.text:00000000000040B2                 and     r9d, 124h
.text:00000000000040B9                 mov     r8, rdi
.text:00000000000040BC                 mov     rsi, rdi
.text:00000000000040BF                 nop
.text:00000000000040C0
.text:00000000000040C0 loc_40C0:                               ; CODE XREF: get_header+1EA↓j
.text:00000000000040C0                 mov     rdx, rsi
.text:00000000000040C3                 shr     rdx, 3
.text:00000000000040C7                 mov     rax, rdx
.text:00000000000040CA                 mul     r12
.text:00000000000040CD                 mov     rax, r8
.text:00000000000040D0                 shr     r8, 0Ah
.text:00000000000040D4                 and     eax, 3FFh
.text:00000000000040D9                 mov     rcx, rdx
.text:00000000000040DC                 shr     rcx, 4
.text:00000000000040E0                 imul    rcx, 3E8h
.text:00000000000040E7                 sub     rsi, rcx
.text:00000000000040EA                 mov     rcx, rsi
.text:00000000000040ED                 mov     rsi, rdx
.text:00000000000040F0                 mov     rdx, rcx
.text:00000000000040F3                 shr     rsi, 4
.text:00000000000040F7                 or      rdx, rax
.text:00000000000040FA                 jz      short loc_40C0
.text:00000000000040FC                 test    rcx, rcx
.text:00000000000040FF                 setz    dl
.text:0000000000004102                 test    rax, rax
.text:0000000000004105                 setz    al
.text:0000000000004108                 cmp     dl, al
.text:000000000000410A                 jnb     short loc_4170
.text:000000000000410C                 mov     edx, r9d
.text:000000000000410F                 or      dl, 0B8h
.text:0000000000004112
.text:0000000000004112 loc_4112:                               ; CODE XREF: get_header+271↓j
.text:0000000000004112                                         ; get_header+282↓j
.text:0000000000004112                 mov     r8d, 1
.text:0000000000004118                 mov     ecx, 1
.text:000000000000411D                 mov     rsi, r14
.text:0000000000004120                 call    human_readable
.text:0000000000004125                 lea     rsi, aBlocks    ; "blocks"
.text:000000000000412C                 mov     edx, 5          ; category
.text:0000000000004131                 xor     edi, edi        ; domainname
.text:0000000000004133                 mov     r15, rax
.text:0000000000004136                 call    _dcgettext
.text:000000000000413B                 mov     [rsp+2F8h+var_2F0], rax
.text:0000000000004140                 jmp     loc_404E
.text:0000000000004140 ; ---------------------------------------------------------------------------
.text:0000000000004145                 align 8
.text:0000000000004148
.text:0000000000004148 loc_4148:                               ; CODE XREF: get_header+31↑j
.text:0000000000004148                                         ; get_header+CB↑j
.text:0000000000004148                 mov     rax, [rsp+2F8h+var_40]
.text:0000000000004150                 xor     rax, fs:28h
.text:0000000000004159                 jnz     short loc_419A
.text:000000000000415B                 add     rsp, 2C8h
.text:0000000000004162                 pop     rbx
.text:0000000000004163                 pop     rbp
.text:0000000000004164                 pop     r12
.text:0000000000004166                 pop     r13
.text:0000000000004168                 pop     r14
.text:000000000000416A                 pop     r15
.text:000000000000416C                 retn
.text:000000000000416C ; ---------------------------------------------------------------------------
.text:000000000000416D                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: get_header+1FA↑j
.text:0000000000004170                 jbe     short loc_4188
.text:0000000000004172                 mov     edx, r10d
.text:0000000000004175                 and     edx, 104h
.text:000000000000417B                 or      dl, 98h
.text:000000000000417E
.text:000000000000417E loc_417E:                               ; CODE XREF: get_header+288↓j
.text:000000000000417E                 or      dh, 1
.text:0000000000004181                 jmp     short loc_4112
.text:0000000000004183 ; ---------------------------------------------------------------------------
.text:0000000000004183
.text:0000000000004183 loc_4183:                               ; CODE XREF: get_header+73↑j
.text:0000000000004183                 call    xalloc_die
.text:0000000000004188 ; ---------------------------------------------------------------------------
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: get_header:loc_4170↑j
.text:0000000000004188                 mov     edx, r9d
.text:000000000000418B                 or      dl, 98h
.text:000000000000418E                 and     r10b, 20h
.text:0000000000004192                 jnz     loc_4112
.text:0000000000004198                 jmp     short loc_417E
.text:000000000000419A ; ---------------------------------------------------------------------------
.text:000000000000419A
.text:000000000000419A loc_419A:                               ; CODE XREF: get_header+249↑j
.text:000000000000419A                 call    ___stack_chk_fail
.text:000000000000419A ; } // starts at 3F10
.text:000000000000419A get_header      endp
.text:000000000000419A
.text:000000000000419A ; ---------------------------------------------------------------------------
.text:000000000000419F                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0
.text:00000000000041A0 alloc_field     proc near               ; CODE XREF: main+745↑p
.text:00000000000041A0                                         ; main+75A↑p ...
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 push    rbp
.text:00000000000041A1                 push    rbx
.text:00000000000041A2                 mov     edx, 8
.text:00000000000041A7                 mov     rbp, rsi
.text:00000000000041AA                 mov     ebx, edi
.text:00000000000041AC                 sub     rsp, 8
.text:00000000000041B0                 mov     rax, cs:ncolumns
.text:00000000000041B7                 mov     rdi, cs:columns
.text:00000000000041BE                 lea     rsi, [rax+1]
.text:00000000000041C2                 mov     rax, rdx
.text:00000000000041C5                 mul     rsi
.text:00000000000041C8                 mov     cs:ncolumns, rsi
.text:00000000000041CF                 jo      short loc_4237
.text:00000000000041D1                 xor     ecx, ecx
.text:00000000000041D3
.text:00000000000041D3 loc_41D3:                               ; CODE XREF: alloc_field+9C↓j
.text:00000000000041D3                 test    rax, rax
.text:00000000000041D6                 js      loc_425D
.text:00000000000041DC                 test    rcx, rcx
.text:00000000000041DF                 jnz     short loc_425D
.text:00000000000041E1                 shl     rsi, 3
.text:00000000000041E5                 call    xrealloc
.text:00000000000041EA                 movsxd  rdi, ebx
.text:00000000000041ED                 lea     rcx, field_data
.text:00000000000041F4                 mov     rsi, cs:ncolumns
.text:00000000000041FB                 lea     rdx, [rdi+rdi*2]
.text:00000000000041FF                 mov     cs:columns, rax
.text:0000000000004206                 shl     rdx, 4
.text:000000000000420A                 add     rdx, rcx
.text:000000000000420D                 test    rbp, rbp
.text:0000000000004210                 mov     [rax+rsi*8-8], rdx
.text:0000000000004215                 jz      short loc_421B
.text:0000000000004217                 mov     [rdx+18h], rbp
.text:000000000000421B
.text:000000000000421B loc_421B:                               ; CODE XREF: alloc_field+75↑j
.text:000000000000421B                 lea     rax, [rdi+rdi*2]
.text:000000000000421F                 shl     rax, 4
.text:0000000000004223                 add     rax, rcx
.text:0000000000004226                 cmp     byte ptr [rax+2Ch], 0
.text:000000000000422A                 jnz     short loc_423E
.text:000000000000422C                 mov     byte ptr [rax+2Ch], 1
.text:0000000000004230                 add     rsp, 8
.text:0000000000004234                 pop     rbx
.text:0000000000004235                 pop     rbp
.text:0000000000004236                 retn
.text:0000000000004237 ; ---------------------------------------------------------------------------
.text:0000000000004237
.text:0000000000004237 loc_4237:                               ; CODE XREF: alloc_field+2F↑j
.text:0000000000004237                 mov     ecx, 1
.text:000000000000423C                 jmp     short loc_41D3
.text:000000000000423E ; ---------------------------------------------------------------------------
.text:000000000000423E
.text:000000000000423E loc_423E:                               ; CODE XREF: alloc_field+8A↑j
.text:000000000000423E                 lea     rcx, __PRETTY_FUNCTION___8831 ; "alloc_field"
.text:0000000000004245                 lea     rsi, file       ; "../coreutils-8.31/src/df.c"
.text:000000000000424C                 lea     rdi, aFieldUsed ; "!\"field used\""
.text:0000000000004253                 mov     edx, 196h       ; line
.text:0000000000004258                 call    ___assert_fail
.text:000000000000425D ; ---------------------------------------------------------------------------
.text:000000000000425D
.text:000000000000425D loc_425D:                               ; CODE XREF: alloc_field+36↑j
.text:000000000000425D                                         ; alloc_field+3F↑j
.text:000000000000425D                 call    xalloc_die
.text:000000000000425D ; } // starts at 41A0
.text:000000000000425D alloc_field     endp
.text:000000000000425D
.text:000000000000425D ; ---------------------------------------------------------------------------
.text:0000000000004262                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270
.text:0000000000004270 ; __int64 __fastcall replace_invalid_chars(void *src)
.text:0000000000004270 replace_invalid_chars proc near         ; DATA XREF: replace_problematic_chars+10↑o
.text:0000000000004270
.text:0000000000004270 var_60          = qword ptr -60h
.text:0000000000004270 wc              = dword ptr -4Ch
.text:0000000000004270 var_48          = qword ptr -48h
.text:0000000000004270 var_40          = qword ptr -40h
.text:0000000000004270
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 push    r15
.text:0000000000004272                 push    r14
.text:0000000000004274                 push    r13
.text:0000000000004276                 push    r12
.text:0000000000004278                 mov     r12, rdi
.text:000000000000427B                 push    rbp
.text:000000000000427C                 push    rbx
.text:000000000000427D                 sub     rsp, 38h
.text:0000000000004281                 mov     rax, fs:28h
.text:000000000000428A                 mov     [rsp+68h+var_40], rax
.text:000000000000428F                 xor     eax, eax
.text:0000000000004291                 call    _strlen
.text:0000000000004296                 lea     r13, [r12+rax]
.text:000000000000429A                 mov     [rsp+68h+var_48], 0
.text:00000000000042A3                 cmp     r12, r13
.text:00000000000042A6                 jz      short loc_4324
.text:00000000000042A8                 lea     rax, [rsp+68h+wc]
.text:00000000000042AD                 mov     rbx, r12
.text:00000000000042B0                 lea     r14, [rsp+68h+var_48]
.text:00000000000042B5                 mov     [rsp+68h+var_60], rax
.text:00000000000042BA                 jmp     short loc_42E6
.text:00000000000042BA ; ---------------------------------------------------------------------------
.text:00000000000042BC                 align 20h
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: replace_invalid_chars+95↓j
.text:00000000000042C0                 mov     edi, [rsp+68h+wc] ; wc
.text:00000000000042C4                 call    _iswcntrl
.text:00000000000042C9                 test    eax, eax
.text:00000000000042CB                 jnz     short loc_430C
.text:00000000000042CD                 mov     rsi, rbx        ; src
.text:00000000000042D0                 mov     rdi, r12        ; dest
.text:00000000000042D3                 mov     rdx, rbp        ; n
.text:00000000000042D6                 add     rbx, rbp
.text:00000000000042D9                 add     r12, rbp
.text:00000000000042DC                 call    _memmove
.text:00000000000042E1                 cmp     r13, rbx
.text:00000000000042E4                 jz      short loc_4324
.text:00000000000042E6
.text:00000000000042E6 loc_42E6:                               ; CODE XREF: replace_invalid_chars+4A↑j
.text:00000000000042E6                                         ; replace_invalid_chars+B2↓j
.text:00000000000042E6                 mov     r15, r13
.text:00000000000042E9                 mov     rdi, [rsp+68h+var_60]
.text:00000000000042EE                 mov     rcx, r14
.text:00000000000042F1                 sub     r15, rbx
.text:00000000000042F4                 mov     rsi, rbx
.text:00000000000042F7                 mov     rdx, r15
.text:00000000000042FA                 call    rpl_mbrtowc
.text:00000000000042FF                 cmp     r15, rax
.text:0000000000004302                 mov     rbp, rax
.text:0000000000004305                 jnb     short loc_42C0
.text:0000000000004307                 mov     ebp, 1
.text:000000000000430C
.text:000000000000430C loc_430C:                               ; CODE XREF: replace_invalid_chars+5B↑j
.text:000000000000430C                 add     rbx, rbp
.text:000000000000430F                 mov     byte ptr [r12], 3Fh ; '?'
.text:0000000000004314                 add     r12, 1
.text:0000000000004318                 cmp     r13, rbx
.text:000000000000431B                 mov     qword ptr [r14], 0
.text:0000000000004322                 jnz     short loc_42E6
.text:0000000000004324
.text:0000000000004324 loc_4324:                               ; CODE XREF: replace_invalid_chars+36↑j
.text:0000000000004324                                         ; replace_invalid_chars+74↑j
.text:0000000000004324                 mov     rax, [rsp+68h+var_40]
.text:0000000000004329                 xor     rax, fs:28h
.text:0000000000004332                 mov     byte ptr [r12], 0
.text:0000000000004337                 jnz     short loc_4348
.text:0000000000004339                 add     rsp, 38h
.text:000000000000433D                 pop     rbx
.text:000000000000433E                 pop     rbp
.text:000000000000433F                 pop     r12
.text:0000000000004341                 pop     r13
.text:0000000000004343                 pop     r14
.text:0000000000004345                 pop     r15
.text:0000000000004347                 retn
.text:0000000000004348 ; ---------------------------------------------------------------------------
.text:0000000000004348
.text:0000000000004348 loc_4348:                               ; CODE XREF: replace_invalid_chars+C7↑j
.text:0000000000004348                 call    ___stack_chk_fail
.text:0000000000004348 ; } // starts at 4270
.text:0000000000004348 replace_invalid_chars endp
.text:0000000000004348
.text:0000000000004348 ; ---------------------------------------------------------------------------
.text:000000000000434D                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350
.text:0000000000004350 ; __int64 __usercall get_dev@<rax>(char *s2@<rdi>, void *src@<rsi>, int, __int64, int)
.text:0000000000004350 get_dev         proc near               ; CODE XREF: main+BB1↑p
.text:0000000000004350                                         ; main+C25↑p ...
.text:0000000000004350
.text:0000000000004350 ptr             = qword ptr -448h
.text:0000000000004350 var_440         = dword ptr -440h
.text:0000000000004350 var_439         = byte ptr -439h
.text:0000000000004350 var_430         = qword ptr -430h
.text:0000000000004350 var_428         = xmmword ptr -428h
.text:0000000000004350 var_418         = xmmword ptr -418h
.text:0000000000004350 var_408         = xmmword ptr -408h
.text:0000000000004350 var_3F8         = qword ptr -3F8h
.text:0000000000004350 var_3E8         = qword ptr -3E8h
.text:0000000000004350 var_3E0         = qword ptr -3E0h
.text:0000000000004350 var_3D8         = qword ptr -3D8h
.text:0000000000004350 var_3D0         = qword ptr -3D0h
.text:0000000000004350 var_3C8         = byte ptr -3C8h
.text:0000000000004350 var_3C0         = qword ptr -3C0h
.text:0000000000004350 var_3B8         = qword ptr -3B8h
.text:0000000000004350 var_3B0         = byte ptr -3B0h
.text:0000000000004350 var_3A8         = qword ptr -3A8h
.text:0000000000004350 var_3A0         = qword ptr -3A0h
.text:0000000000004350 var_398         = qword ptr -398h
.text:0000000000004350 var_390         = qword ptr -390h
.text:0000000000004350 var_388         = byte ptr -388h
.text:0000000000004350 var_380         = qword ptr -380h
.text:0000000000004350 var_378         = qword ptr -378h
.text:0000000000004350 var_370         = byte ptr -370h
.text:0000000000004350 stat_buf        = stat ptr -368h
.text:0000000000004350 var_2D8         = byte ptr -2D8h
.text:0000000000004350 var_40          = qword ptr -40h
.text:0000000000004350 arg_0           = dword ptr  8
.text:0000000000004350 arg_8           = qword ptr  10h
.text:0000000000004350 arg_10          = dword ptr  18h
.text:0000000000004350
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 push    r15
.text:0000000000004352                 push    r14
.text:0000000000004354                 mov     r14, rdi
.text:0000000000004357                 push    r13
.text:0000000000004359                 push    r12
.text:000000000000435B                 mov     r13, rdx
.text:000000000000435E                 push    rbp
.text:000000000000435F                 push    rbx
.text:0000000000004360                 mov     r12, rsi
.text:0000000000004363                 mov     rbx, r8
.text:0000000000004366                 sub     rsp, 418h
.text:000000000000436D                 mov     eax, [rsp+448h+arg_10]
.text:0000000000004374                 mov     ebp, [rsp+448h+arg_0]
.text:000000000000437B                 mov     [rsp+448h+ptr], rcx
.text:000000000000437F                 mov     r15, [rsp+448h+arg_8]
.text:0000000000004387                 mov     [rsp+448h+var_440], eax
.text:000000000000438B                 mov     rax, fs:28h
.text:0000000000004394                 mov     [rsp+448h+var_40], rax
.text:000000000000439C                 xor     eax, eax
.text:000000000000439E                 test    bpl, bpl
.text:00000000000043A1                 jz      short loc_43D8
.text:00000000000043A3                 cmp     cs:show_local_fs, 0
.text:00000000000043AA                 jz      short loc_43D8
.text:00000000000043AC
.text:00000000000043AC loc_43AC:                               ; CODE XREF: get_dev+9D↓j
.text:00000000000043AC                                         ; get_dev+AA↓j ...
.text:00000000000043AC                 mov     rax, [rsp+448h+var_40]
.text:00000000000043B4                 xor     rax, fs:28h
.text:00000000000043BD                 jnz     loc_4D66
.text:00000000000043C3                 add     rsp, 418h
.text:00000000000043CA                 pop     rbx
.text:00000000000043CB                 pop     rbp
.text:00000000000043CC                 pop     r12
.text:00000000000043CE                 pop     r13
.text:00000000000043D0                 pop     r14
.text:00000000000043D2                 pop     r15
.text:00000000000043D4                 retn
.text:00000000000043D4 ; ---------------------------------------------------------------------------
.text:00000000000043D5                 align 8
.text:00000000000043D8
.text:00000000000043D8 loc_43D8:                               ; CODE XREF: get_dev+51↑j
.text:00000000000043D8                                         ; get_dev+5A↑j
.text:00000000000043D8                 test    r9b, r9b
.text:00000000000043DB                 jz      short loc_43F0
.text:00000000000043DD                 cmp     cs:show_all_fs, 0
.text:00000000000043E4                 jnz     short loc_43F0
.text:00000000000043E6                 cmp     cs:show_listed_fs, 0
.text:00000000000043ED                 jz      short loc_43AC
.text:00000000000043EF                 nop
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: get_dev+8B↑j
.text:00000000000043F0                                         ; get_dev+94↑j
.text:00000000000043F0                 mov     rdi, rbx        ; s1
.text:00000000000043F3                 call    selected_fstype
.text:00000000000043F8                 test    al, al
.text:00000000000043FA                 jz      short loc_43AC
.text:00000000000043FC                 mov     rdi, rbx        ; s1
.text:00000000000043FF                 call    excluded_fstype
.text:0000000000004404                 test    al, al
.text:0000000000004406                 jnz     short loc_43AC
.text:0000000000004408                 test    r15, r15
.text:000000000000440B                 setz    [rsp+448h+var_439]
.text:0000000000004410                 test    r12, r12
.text:0000000000004413                 movzx   eax, [rsp+448h+var_439]
.text:0000000000004418                 jz      loc_44B0
.text:000000000000441E                 test    al, al
.text:0000000000004420                 jz      loc_44B0
.text:0000000000004426                 cmp     byte ptr [r12], 2Fh ; '/'
.text:000000000000442B                 jnz     loc_43AC
.text:0000000000004431                 mov     rax, [rsp+448h+ptr]
.text:0000000000004435                 test    rax, rax
.text:0000000000004438                 cmovz   rax, r12
.text:000000000000443C                 mov     [rsp+448h+ptr], rax
.text:0000000000004440
.text:0000000000004440 loc_4440:                               ; CODE XREF: get_dev+16E↓j
.text:0000000000004440                 mov     rdi, [rsp+448h+ptr] ; file
.text:0000000000004444                 lea     rdx, [rsp+448h+var_428]
.text:0000000000004449                 mov     rsi, r14
.text:000000000000444C                 call    get_fs_usage
.text:0000000000004451                 test    eax, eax
.text:0000000000004453                 jz      loc_4B1E
.text:0000000000004459                 call    ___errno_location
.text:000000000000445E                 cmp     byte ptr [rsp+448h+var_440], 0
.text:0000000000004463                 mov     rbx, rax
.text:0000000000004466                 jz      short loc_447C
.text:0000000000004468                 mov     eax, [rax]
.text:000000000000446A                 cmp     eax, 0Dh
.text:000000000000446D                 jz      loc_4BA5
.text:0000000000004473                 cmp     eax, 2
.text:0000000000004476                 jz      loc_4BA5
.text:000000000000447C
.text:000000000000447C loc_447C:                               ; CODE XREF: get_dev+116↑j
.text:000000000000447C                 mov     rdx, [rsp+448h+ptr]
.text:0000000000004480                 mov     esi, 3
.text:0000000000004485                 xor     edi, edi
.text:0000000000004487                 call    quotearg_n_style_colon
.text:000000000000448C                 mov     esi, [rbx]      ; errnum
.text:000000000000448E                 lea     rdx, aS_0+2     ; format
.text:0000000000004495                 mov     rcx, rax
.text:0000000000004498                 xor     edi, edi        ; status
.text:000000000000449A                 xor     eax, eax
.text:000000000000449C                 call    _error
.text:00000000000044A1                 mov     cs:exit_status, 1
.text:00000000000044AB                 jmp     loc_43AC
.text:00000000000044B0 ; ---------------------------------------------------------------------------
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: get_dev+C8↑j
.text:00000000000044B0                                         ; get_dev+D0↑j
.text:00000000000044B0                 cmp     [rsp+448h+ptr], 0
.text:00000000000044B5                 jz      loc_4A93
.text:00000000000044BB
.text:00000000000044BB loc_44BB:                               ; CODE XREF: get_dev+751↓j
.text:00000000000044BB                 test    r15, r15
.text:00000000000044BE                 jz      loc_4440
.text:00000000000044C4                 movdqa  xmm0, xmmword ptr [r15]
.text:00000000000044C9                 mov     rax, [r15+30h]
.text:00000000000044CD                 movaps  [rsp+448h+var_428], xmm0
.text:00000000000044D2                 cmp     qword ptr [rsp+448h+var_428+8], 0
.text:00000000000044D8                 movdqa  xmm0, xmmword ptr [r15+10h]
.text:00000000000044DE                 mov     [rsp+448h+var_3F8], rax
.text:00000000000044E3                 movaps  [rsp+448h+var_418], xmm0
.text:00000000000044E8                 movdqa  xmm0, xmmword ptr [r15+20h]
.text:00000000000044EE                 movaps  [rsp+448h+var_408], xmm0
.text:00000000000044F3                 jz      loc_49F0
.text:00000000000044F9
.text:00000000000044F9 loc_44F9:                               ; CODE XREF: get_dev+6A7↓j
.text:00000000000044F9                                         ; get_dev+6B4↓j ...
.text:00000000000044F9                 call    alloc_table_row
.text:00000000000044FE                 lea     rax, asc_10958+1 ; "-"
.text:0000000000004505                 test    r14, r14
.text:0000000000004508                 cmovz   r14, rax
.text:000000000000450C                 test    r13, r13
.text:000000000000450F                 mov     rdi, r14        ; src
.text:0000000000004512                 cmovz   r13, rax
.text:0000000000004516                 call    xstrdup
.text:000000000000451B                 cmp     byte ptr [rsp+448h+var_440], 0
.text:0000000000004520                 mov     r15, rax
.text:0000000000004523                 mov     [rsp+448h+ptr], rax
.text:0000000000004527                 jz      short loc_4570
.text:0000000000004529                 mov     rdi, rax        ; s
.text:000000000000452C                 call    _strlen
.text:0000000000004531                 cmp     rax, 24h ; '$'
.text:0000000000004535                 jbe     short loc_4570
.text:0000000000004537                 lea     rdi, [r15+rax-24h] ; s
.text:000000000000453C                 lea     rsi, accept     ; "-0123456789abcdefABCDEF"
.text:0000000000004543                 call    _strspn
.text:0000000000004548                 cmp     rax, 24h ; '$'
.text:000000000000454C                 jnz     short loc_4570
.text:000000000000454E                 mov     rdi, [rsp+448h+ptr] ; src
.text:0000000000004552                 xor     esi, esi
.text:0000000000004554                 call    canonicalize_filename_mode
.text:0000000000004559                 test    rax, rax
.text:000000000000455C                 mov     r14, rax
.text:000000000000455F                 jz      short loc_4570
.text:0000000000004561                 mov     rdi, [rsp+448h+ptr] ; ptr
.text:0000000000004565                 call    _free
.text:000000000000456A                 mov     [rsp+448h+ptr], r14
.text:000000000000456E                 xchg    ax, ax
.text:0000000000004570
.text:0000000000004570 loc_4570:                               ; CODE XREF: get_dev+1D7↑j
.text:0000000000004570                                         ; get_dev+1E5↑j ...
.text:0000000000004570                 lea     rax, asc_10958+1 ; "-"
.text:0000000000004577                 test    rbx, rbx
.text:000000000000457A                 mov     rsi, qword ptr [rsp+448h+var_408+8]
.text:000000000000457F                 mov     [rsp+448h+var_3A0], 1
.text:000000000000458B                 mov     [rsp+448h+var_3A8], 1
.text:0000000000004597                 cmovz   rbx, rax
.text:000000000000459B                 mov     rax, [rsp+448h+var_3F8]
.text:00000000000045A0                 mov     [rsp+448h+var_388], 0
.text:00000000000045A8                 cmp     rsi, 0FFFFFFFFFFFFFFFDh
.text:00000000000045AC                 mov     [rsp+448h+var_398], rsi
.text:00000000000045B4                 mov     [rsp+448h+var_378], 0FFFFFFFFFFFFFFFFh
.text:00000000000045C0                 mov     [rsp+448h+var_370], 0
.text:00000000000045C8                 mov     [rsp+448h+var_380], rax
.text:00000000000045D0                 mov     [rsp+448h+var_390], rax
.text:00000000000045D8                 ja      short loc_45E4
.text:00000000000045DA                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000045DE                 jbe     loc_4A50
.text:00000000000045E4
.text:00000000000045E4 loc_45E4:                               ; CODE XREF: get_dev+288↑j
.text:00000000000045E4                                         ; get_dev+719↓j
.text:00000000000045E4                 mov     r8, qword ptr [rsp+448h+var_418+8]
.text:00000000000045E9                 mov     rdx, cs:output_block_size
.text:00000000000045F0                 mov     rcx, qword ptr [rsp+448h+var_418]
.text:00000000000045F5                 mov     r9, qword ptr [rsp+448h+var_428]
.text:00000000000045FA                 mov     rdi, qword ptr [rsp+448h+var_428+8]
.text:00000000000045FF                 mov     [rsp+448h+var_3B8], 0FFFFFFFFFFFFFFFFh
.text:000000000000460B                 cmp     r8, 0FFFFFFFFFFFFFFFDh
.text:000000000000460F                 mov     [rsp+448h+var_3E0], rdx
.text:0000000000004614                 mov     [rsp+448h+var_3D0], r8
.text:0000000000004619                 setbe   dl
.text:000000000000461C                 and     dl, byte ptr [rsp+448h+var_408]
.text:0000000000004620                 cmp     rcx, 0FFFFFFFFFFFFFFFDh
.text:0000000000004624                 mov     [rsp+448h+var_3E8], r9
.text:0000000000004629                 mov     [rsp+448h+var_3D8], rdi
.text:000000000000462E                 mov     [rsp+448h+var_3C0], rcx
.text:0000000000004636                 mov     [rsp+448h+var_3B0], 0
.text:000000000000463E                 mov     [rsp+448h+var_3C8], dl
.text:0000000000004645                 ja      short loc_4651
.text:0000000000004647                 cmp     rdi, 0FFFFFFFFFFFFFFFDh
.text:000000000000464B                 jbe     loc_4A32
.text:0000000000004651
.text:0000000000004651 loc_4651:                               ; CODE XREF: get_dev+2F5↑j
.text:0000000000004651                                         ; get_dev+6FB↓j
.text:0000000000004651                 cmp     cs:print_grand_total, 0
.text:0000000000004658                 jz      short loc_46D0
.text:000000000000465A                 cmp     [rsp+448h+var_439], 0
.text:000000000000465F                 jz      short loc_46D0
.text:0000000000004661                 cmp     rsi, 0FFFFFFFFFFFFFFFDh
.text:0000000000004665                 ja      short loc_466E
.text:0000000000004667                 add     cs:qword_2143C8, rsi
.text:000000000000466E
.text:000000000000466E loc_466E:                               ; CODE XREF: get_dev+315↑j
.text:000000000000466E                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004672                 ja      short loc_467B
.text:0000000000004674                 add     cs:qword_2143D0, rax
.text:000000000000467B
.text:000000000000467B loc_467B:                               ; CODE XREF: get_dev+322↑j
.text:000000000000467B                 cmp     rdi, 0FFFFFFFFFFFFFFFDh
.text:000000000000467F                 ja      short loc_468C
.text:0000000000004681                 imul    rdi, r9
.text:0000000000004685                 add     cs:qword_2143A8, rdi
.text:000000000000468C
.text:000000000000468C loc_468C:                               ; CODE XREF: get_dev+32F↑j
.text:000000000000468C                 cmp     rcx, 0FFFFFFFFFFFFFFFDh
.text:0000000000004690                 ja      short loc_469D
.text:0000000000004692                 imul    rcx, r9
.text:0000000000004696                 add     cs:qword_2143B0, rcx
.text:000000000000469D
.text:000000000000469D loc_469D:                               ; CODE XREF: get_dev+340↑j
.text:000000000000469D                 cmp     r8, 0FFFFFFFFFFFFFFFDh
.text:00000000000046A1                 ja      short loc_46D0
.text:00000000000046A3                 movzx   edi, cs:byte_2143C0
.text:00000000000046AA                 mov     rax, r9
.text:00000000000046AD                 imul    rax, r8
.text:00000000000046B1                 mov     rcx, cs:qword_2143B8
.text:00000000000046B8                 mov     esi, edi
.text:00000000000046BA                 xor     esi, 1
.text:00000000000046BD                 cmp     sil, dl
.text:00000000000046C0                 jz      loc_4CE0
.text:00000000000046C6                 add     rax, rcx
.text:00000000000046C9                 mov     cs:qword_2143B8, rax
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: get_dev+308↑j
.text:00000000000046D0                                         ; get_dev+30F↑j ...
.text:00000000000046D0                 xor     ebp, ebp
.text:00000000000046D2                 cmp     cs:ncolumns, 0
.text:00000000000046DA                 mov     rcx, cs:columns
.text:00000000000046E1                 jz      loc_47A1
.text:00000000000046E7                 lea     r15, jpt_472B
.text:00000000000046EE                 xchg    ax, ax
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: get_dev+44B↓j
.text:00000000000046F0                 mov     rax, [rcx+rbp*8]
.text:00000000000046F4                 lea     r14, ds:0[rbp*8]
.text:00000000000046FC                 mov     edx, [rax+10h]
.text:00000000000046FF                 cmp     edx, 1
.text:0000000000004702                 jz      loc_48C0
.text:0000000000004708                 jb      loc_48B0
.text:000000000000470E                 cmp     edx, 2
.text:0000000000004711                 jnz     loc_4D2F
.text:0000000000004717                 xor     ecx, ecx
.text:0000000000004719
.text:0000000000004719 loc_4719:                               ; CODE XREF: get_dev+565↓j
.text:0000000000004719                                         ; get_dev+578↓j
.text:0000000000004719                 cmp     dword ptr [rax], 0Bh ; switch 12 cases
.text:000000000000471C                 ja      def_472B        ; jumptable 000000000000472B default case
.text:0000000000004722                 mov     eax, [rax]
.text:0000000000004724                 movsxd  rax, ds:(jpt_472B - 0F2F0h)[r15+rax*4]
.text:0000000000004728                 add     rax, r15
.text:000000000000472B                 jmp     rax             ; switch jump
.text:000000000000472B ; ---------------------------------------------------------------------------
.text:000000000000472D                 align 10h
.text:0000000000004730
.text:0000000000004730 loc_4730:                               ; CODE XREF: get_dev+3DB↑j
.text:0000000000004730                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:0000000000004730                 mov     rdi, r12        ; jumptable 000000000000472B case 10
.text:0000000000004733                 call    xstrdup
.text:0000000000004738                 mov     rdi, rax
.text:000000000000473B                 mov     [rsp+448h+var_430], rax
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: get_dev+4BC↓j
.text:0000000000004740                                         ; get_dev+528↓j ...
.text:0000000000004740                 test    rdi, rdi
.text:0000000000004743                 jz      loc_4CC1
.text:0000000000004749
.text:0000000000004749 loc_4749:                               ; CODE XREF: get_dev+485↓j
.text:0000000000004749                 call    replace_problematic_chars
.text:000000000000474E                 mov     rdi, [rsp+448h+var_430]
.text:0000000000004753                 xor     esi, esi
.text:0000000000004755                 call    gnu_mbswidth
.text:000000000000475A                 mov     rcx, cs:columns
.text:0000000000004761                 cdqe
.text:0000000000004763                 mov     rdx, [rcx+r14]
.text:0000000000004767                 cmp     [rdx+20h], rax
.text:000000000000476B                 cmovnb  rax, [rdx+20h]
.text:0000000000004770                 add     rbp, 1
.text:0000000000004774                 cmp     cs:ncolumns, rbp
.text:000000000000477B                 mov     [rdx+20h], rax
.text:000000000000477F                 mov     rdx, cs:nrows
.text:0000000000004786                 mov     rax, cs:table
.text:000000000000478D                 mov     rax, [rax+rdx*8-8]
.text:0000000000004792                 mov     rdx, [rsp+448h+var_430]
.text:0000000000004797                 mov     [rax+r14], rdx
.text:000000000000479B                 ja      loc_46F0
.text:00000000000047A1
.text:00000000000047A1 loc_47A1:                               ; CODE XREF: get_dev+391↑j
.text:00000000000047A1                 mov     rdi, [rsp+448h+ptr] ; ptr
.text:00000000000047A5                 call    _free
.text:00000000000047AA                 jmp     loc_43AC
.text:00000000000047AA ; ---------------------------------------------------------------------------
.text:00000000000047AF                 align 10h
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: get_dev+3DB↑j
.text:00000000000047B0                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:00000000000047B0                 mov     rax, [rcx+30h]  ; jumptable 000000000000472B cases 5,9
.text:00000000000047B4                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000047B8                 jbe     loc_48D0
.text:00000000000047BE
.text:00000000000047BE loc_47BE:                               ; CODE XREF: get_dev+588↓j
.text:00000000000047BE                                         ; get_dev+612↓j ...
.text:00000000000047BE                 lea     rdi, asc_10958+1 ; s
.text:00000000000047C5                 call    _strdup
.text:00000000000047CA                 mov     rdi, rax
.text:00000000000047CD                 mov     [rsp+448h+var_430], rax
.text:00000000000047D2
.text:00000000000047D2 loc_47D2:                               ; CODE XREF: get_dev+696↓j
.text:00000000000047D2                 test    rdi, rdi
.text:00000000000047D5                 jnz     loc_4749
.text:00000000000047DB                 jmp     loc_4A79
.text:00000000000047E0 ; ---------------------------------------------------------------------------
.text:00000000000047E0
.text:00000000000047E0 loc_47E0:                               ; CODE XREF: get_dev+3DB↑j
.text:00000000000047E0                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:00000000000047E0                 movzx   edi, byte ptr [rcx+20h] ; jumptable 000000000000472B cases 4,8
.text:00000000000047E4                 mov     rsi, [rcx+18h]
.text:00000000000047E8                 lea     rdx, [rsp+448h+var_2D8]
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: get_dev+4D8↓j
.text:00000000000047F0                 mov     r8, [rcx+8]
.text:00000000000047F4                 mov     rcx, [rcx]
.text:00000000000047F7                 call    df_readable
.text:00000000000047FC                 mov     rdi, rax        ; src
.text:00000000000047FF
.text:00000000000047FF loc_47FF:                               ; CODE XREF: get_dev+4EF↓j
.text:00000000000047FF                                         ; get_dev+511↓j ...
.text:00000000000047FF                 call    xstrdup
.text:0000000000004804                 mov     rdi, rax
.text:0000000000004807                 mov     [rsp+448h+var_430], rax
.text:000000000000480C                 jmp     loc_4740
.text:000000000000480C ; ---------------------------------------------------------------------------
.text:0000000000004811                 align 8
.text:0000000000004818
.text:0000000000004818 loc_4818:                               ; CODE XREF: get_dev+3DB↑j
.text:0000000000004818                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:0000000000004818                 lea     rdx, [rsp+448h+var_2D8] ; jumptable 000000000000472B cases 3,7
.text:0000000000004820                 mov     rsi, [rcx+30h]
.text:0000000000004824                 movzx   edi, byte ptr [rcx+38h]
.text:0000000000004828                 jmp     short loc_47F0
.text:0000000000004828 ; ---------------------------------------------------------------------------
.text:000000000000482A                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: get_dev+3DB↑j
.text:0000000000004830                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:0000000000004830                 mov     rax, [rcx+10h]  ; jumptable 000000000000472B cases 2,6
.text:0000000000004834                 lea     rdi, asc_10958+1 ; "-"
.text:000000000000483B                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000483F                 ja      short loc_47FF
.text:0000000000004841                 mov     r8, [rcx+8]
.text:0000000000004845                 mov     edx, cs:human_output_opts
.text:000000000000484B                 lea     rsi, [rsp+448h+var_2D8]
.text:0000000000004853                 mov     rcx, [rcx]
.text:0000000000004856                 mov     rdi, rax
.text:0000000000004859                 call    human_readable
.text:000000000000485E                 mov     rdi, rax
.text:0000000000004861                 jmp     short loc_47FF
.text:0000000000004861 ; ---------------------------------------------------------------------------
.text:0000000000004863                 align 8
.text:0000000000004868
.text:0000000000004868 loc_4868:                               ; CODE XREF: get_dev+3DB↑j
.text:0000000000004868                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:0000000000004868                 mov     rdi, rbx        ; jumptable 000000000000472B case 1
.text:000000000000486B                 call    xstrdup
.text:0000000000004870                 mov     rdi, rax
.text:0000000000004873                 mov     [rsp+448h+var_430], rax
.text:0000000000004878                 jmp     loc_4740
.text:0000000000004878 ; ---------------------------------------------------------------------------
.text:000000000000487D                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: get_dev+3DB↑j
.text:0000000000004880                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:0000000000004880                 mov     rdi, [rsp+448h+ptr] ; jumptable 000000000000472B case 0
.text:0000000000004884                 call    xstrdup
.text:0000000000004889                 mov     rdi, rax
.text:000000000000488C                 mov     [rsp+448h+var_430], rax
.text:0000000000004891                 jmp     loc_4740
.text:0000000000004891 ; ---------------------------------------------------------------------------
.text:0000000000004896                 align 20h
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: get_dev+3DB↑j
.text:00000000000048A0                                         ; DATA XREF: .rodata:jpt_472B↓o
.text:00000000000048A0                 mov     rdi, r13        ; jumptable 000000000000472B case 11
.text:00000000000048A3                 jmp     loc_47FF
.text:00000000000048A3 ; ---------------------------------------------------------------------------
.text:00000000000048A8                 align 10h
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: get_dev+3B8↑j
.text:00000000000048B0                 lea     rcx, [rsp+448h+var_3E8]
.text:00000000000048B5                 jmp     loc_4719
.text:00000000000048B5 ; ---------------------------------------------------------------------------
.text:00000000000048BA                 align 20h
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: get_dev+3B2↑j
.text:00000000000048C0                 lea     rcx, [rsp+448h+var_3A8]
.text:00000000000048C8                 jmp     loc_4719
.text:00000000000048C8 ; ---------------------------------------------------------------------------
.text:00000000000048CD                 align 10h
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: get_dev+468↑j
.text:00000000000048D0                 mov     rsi, [rcx+18h]
.text:00000000000048D4                 cmp     rsi, 0FFFFFFFFFFFFFFFDh
.text:00000000000048D8                 ja      loc_47BE
.text:00000000000048DE                 cmp     byte ptr [rcx+38h], 0
.text:00000000000048E2                 movzx   edi, byte ptr [rcx+20h]
.text:00000000000048E6                 jnz     loc_4A10
.text:00000000000048EC                 mov     rdx, 28F5C28F5C28F5Ch
.text:00000000000048F6                 cmp     rax, rdx
.text:00000000000048F9                 ja      short loc_4918
.text:00000000000048FB                 mov     rcx, rax
.text:00000000000048FE                 xor     edx, edx
.text:0000000000004900                 add     rcx, rsi
.text:0000000000004903                 setb    dl
.text:0000000000004906                 test    rcx, rcx
.text:0000000000004909                 jz      short loc_4918
.text:000000000000490B                 cmp     dil, dl
.text:000000000000490E                 jz      loc_4B70
.text:0000000000004914                 nop     dword ptr [rax+00h]
.text:0000000000004918
.text:0000000000004918 loc_4918:                               ; CODE XREF: get_dev+5A9↑j
.text:0000000000004918                                         ; get_dev+5B9↑j
.text:0000000000004918                 test    rax, rax
.text:000000000000491B                 js      loc_4AE2
.text:0000000000004921                 pxor    xmm0, xmm0
.text:0000000000004925                 cvtsi2sd xmm0, rax
.text:000000000000492A
.text:000000000000492A loc_492A:                               ; CODE XREF: get_dev+6DD↓j
.text:000000000000492A                                         ; get_dev+7AB↓j
.text:000000000000492A                 test    dil, dil
.text:000000000000492D                 jz      loc_4A80
.text:0000000000004933                 neg     rsi
.text:0000000000004936                 test    rsi, rsi
.text:0000000000004939                 js      loc_4AC4
.text:000000000000493F                 pxor    xmm1, xmm1
.text:0000000000004943                 cvtsi2sd xmm1, rsi
.text:0000000000004948
.text:0000000000004948 loc_4948:                               ; CODE XREF: get_dev+78D↓j
.text:0000000000004948                 xorpd   xmm1, cs:xmmword_FEB0
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: get_dev+73E↓j
.text:0000000000004950                                         ; get_dev+7C9↓j
.text:0000000000004950                 addsd   xmm1, xmm0
.text:0000000000004954                 pxor    xmm5, xmm5
.text:0000000000004958                 pxor    xmm3, xmm3
.text:000000000000495C                 ucomisd xmm1, xmm5
.text:0000000000004960                 jp      short loc_4968
.text:0000000000004962                 jz      loc_47BE
.text:0000000000004968
.text:0000000000004968 loc_4968:                               ; CODE XREF: get_dev+610↑j
.text:0000000000004968                 mulsd   xmm0, cs:qword_FEC0
.text:0000000000004970                 movsd   xmm2, cs:qword_FEC8
.text:0000000000004978                 divsd   xmm0, xmm1
.text:000000000000497C                 pxor    xmm1, xmm1
.text:0000000000004980                 cvttsd2si rax, xmm0
.text:0000000000004985                 cvtsi2sd xmm1, rax
.text:000000000000498A                 movapd  xmm4, xmm1
.text:000000000000498E                 subsd   xmm4, xmm2
.text:0000000000004992                 ucomisd xmm0, xmm4
.text:0000000000004996                 jbe     short loc_49B8
.text:0000000000004998                 addsd   xmm2, xmm1
.text:000000000000499C                 ucomisd xmm2, xmm0
.text:00000000000049A0                 jb      short loc_49B8
.text:00000000000049A2                 ucomisd xmm0, xmm1
.text:00000000000049A6                 ja      loc_4B5C
.text:00000000000049AC                 pxor    xmm0, xmm0
.text:00000000000049B0                 addsd   xmm0, xmm1
.text:00000000000049B4                 nop     dword ptr [rax+00h]
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: get_dev+646↑j
.text:00000000000049B8                                         ; get_dev+650↑j ...
.text:00000000000049B8                 ucomisd xmm0, xmm3
.text:00000000000049BC                 jb      loc_47BE
.text:00000000000049C2                 lea     rdi, [rsp+448h+var_430]
.text:00000000000049C7                 lea     rsi, a0f        ; "%.0f%%"
.text:00000000000049CE                 mov     eax, 1
.text:00000000000049D3                 call    gzprintf
.text:00000000000049D8                 cmp     eax, 0FFFFFFFFh
.text:00000000000049DB                 jz      loc_4A70
.text:00000000000049E1                 mov     rdi, [rsp+448h+var_430]
.text:00000000000049E6                 jmp     loc_47D2
.text:00000000000049E6 ; ---------------------------------------------------------------------------
.text:00000000000049EB                 align 10h
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: get_dev+1A3↑j
.text:00000000000049F0                 cmp     cs:show_all_fs, 0
.text:00000000000049F7                 jnz     loc_44F9
.text:00000000000049FD                 cmp     cs:show_listed_fs, 0
.text:0000000000004A04                 jnz     loc_44F9
.text:0000000000004A0A                 jmp     loc_43AC
.text:0000000000004A0A ; ---------------------------------------------------------------------------
.text:0000000000004A0F                 align 10h
.text:0000000000004A10
.text:0000000000004A10 loc_4A10:                               ; CODE XREF: get_dev+596↑j
.text:0000000000004A10                 neg     rax
.text:0000000000004A13                 test    rax, rax
.text:0000000000004A16                 js      loc_4AA6
.text:0000000000004A1C                 pxor    xmm0, xmm0
.text:0000000000004A20                 cvtsi2sd xmm0, rax
.text:0000000000004A25
.text:0000000000004A25 loc_4A25:                               ; CODE XREF: get_dev+76F↓j
.text:0000000000004A25                 xorpd   xmm0, cs:xmmword_FEB0
.text:0000000000004A2D                 jmp     loc_492A
.text:0000000000004A32 ; ---------------------------------------------------------------------------
.text:0000000000004A32
.text:0000000000004A32 loc_4A32:                               ; CODE XREF: get_dev+2FB↑j
.text:0000000000004A32                 mov     r10, rdi
.text:0000000000004A35                 sub     r10, rcx
.text:0000000000004A38                 cmp     rdi, rcx
.text:0000000000004A3B                 mov     [rsp+448h+var_3B8], r10
.text:0000000000004A43                 setb    [rsp+448h+var_3B0]
.text:0000000000004A4B                 jmp     loc_4651
.text:0000000000004A50 ; ---------------------------------------------------------------------------
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: get_dev+28E↑j
.text:0000000000004A50                 mov     rdx, rsi
.text:0000000000004A53                 sub     rdx, rax
.text:0000000000004A56                 cmp     rsi, rax
.text:0000000000004A59                 mov     [rsp+448h+var_378], rdx
.text:0000000000004A61                 setb    [rsp+448h+var_370]
.text:0000000000004A69                 jmp     loc_45E4
.text:0000000000004A69 ; ---------------------------------------------------------------------------
.text:0000000000004A6E                 align 10h
.text:0000000000004A70
.text:0000000000004A70 loc_4A70:                               ; CODE XREF: get_dev+68B↑j
.text:0000000000004A70                 mov     [rsp+448h+var_430], 0
.text:0000000000004A79
.text:0000000000004A79 loc_4A79:                               ; CODE XREF: get_dev+48B↑j
.text:0000000000004A79                 call    xalloc_die
.text:0000000000004A79 ; ---------------------------------------------------------------------------
.text:0000000000004A7E                 align 20h
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: get_dev+5DD↑j
.text:0000000000004A80                 test    rsi, rsi
.text:0000000000004A83                 js      short loc_4B00
.text:0000000000004A85                 pxor    xmm1, xmm1
.text:0000000000004A89                 cvtsi2sd xmm1, rsi
.text:0000000000004A8E                 jmp     loc_4950
.text:0000000000004A93 ; ---------------------------------------------------------------------------
.text:0000000000004A93
.text:0000000000004A93 loc_4A93:                               ; CODE XREF: get_dev+165↑j
.text:0000000000004A93                 test    r12, r12
.text:0000000000004A96                 mov     rax, r12
.text:0000000000004A99                 cmovz   rax, r14
.text:0000000000004A9D                 mov     [rsp+448h+ptr], rax
.text:0000000000004AA1                 jmp     loc_44BB
.text:0000000000004AA6 ; ---------------------------------------------------------------------------
.text:0000000000004AA6
.text:0000000000004AA6 loc_4AA6:                               ; CODE XREF: get_dev+6C6↑j
.text:0000000000004AA6                 mov     rdx, rax
.text:0000000000004AA9                 pxor    xmm0, xmm0
.text:0000000000004AAD                 shr     rdx, 1
.text:0000000000004AB0                 and     eax, 1
.text:0000000000004AB3                 or      rdx, rax
.text:0000000000004AB6                 cvtsi2sd xmm0, rdx
.text:0000000000004ABB                 addsd   xmm0, xmm0
.text:0000000000004ABF                 jmp     loc_4A25
.text:0000000000004AC4 ; ---------------------------------------------------------------------------
.text:0000000000004AC4
.text:0000000000004AC4 loc_4AC4:                               ; CODE XREF: get_dev+5E9↑j
.text:0000000000004AC4                 mov     rax, rsi
.text:0000000000004AC7                 pxor    xmm1, xmm1
.text:0000000000004ACB                 shr     rax, 1
.text:0000000000004ACE                 and     esi, 1
.text:0000000000004AD1                 or      rax, rsi
.text:0000000000004AD4                 cvtsi2sd xmm1, rax
.text:0000000000004AD9                 addsd   xmm1, xmm1
.text:0000000000004ADD                 jmp     loc_4948
.text:0000000000004AE2 ; ---------------------------------------------------------------------------
.text:0000000000004AE2
.text:0000000000004AE2 loc_4AE2:                               ; CODE XREF: get_dev+5CB↑j
.text:0000000000004AE2                 mov     rdx, rax
.text:0000000000004AE5                 pxor    xmm0, xmm0
.text:0000000000004AE9                 shr     rdx, 1
.text:0000000000004AEC                 and     eax, 1
.text:0000000000004AEF                 or      rdx, rax
.text:0000000000004AF2                 cvtsi2sd xmm0, rdx
.text:0000000000004AF7                 addsd   xmm0, xmm0
.text:0000000000004AFB                 jmp     loc_492A
.text:0000000000004B00 ; ---------------------------------------------------------------------------
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: get_dev+733↑j
.text:0000000000004B00                 mov     rax, rsi
.text:0000000000004B03                 pxor    xmm1, xmm1
.text:0000000000004B07                 shr     rax, 1
.text:0000000000004B0A                 and     esi, 1
.text:0000000000004B0D                 or      rax, rsi
.text:0000000000004B10                 cvtsi2sd xmm1, rax
.text:0000000000004B15                 addsd   xmm1, xmm1
.text:0000000000004B19                 jmp     loc_4950
.text:0000000000004B1E ; ---------------------------------------------------------------------------
.text:0000000000004B1E
.text:0000000000004B1E loc_4B1E:                               ; CODE XREF: get_dev+103↑j
.text:0000000000004B1E                 cmp     byte ptr [rsp+448h+var_440], 0
.text:0000000000004B23                 jz      short loc_4B65
.text:0000000000004B25                 cmp     cs:show_all_fs, 0
.text:0000000000004B2C                 jnz     loc_4BE8
.text:0000000000004B32
.text:0000000000004B32 loc_4B32:                               ; CODE XREF: get_dev+8B0↓j
.text:0000000000004B32                                         ; get_dev+8C0↓j ...
.text:0000000000004B32                 cmp     qword ptr [rsp+448h+var_428+8], 0
.text:0000000000004B38                 jnz     short loc_4B50
.text:0000000000004B3A
.text:0000000000004B3A loc_4B3A:                               ; CODE XREF: get_dev+81D↓j
.text:0000000000004B3A                 cmp     cs:show_all_fs, 0
.text:0000000000004B41                 jnz     short loc_4B50
.text:0000000000004B43                 cmp     cs:show_listed_fs, 0
.text:0000000000004B4A                 jz      loc_43AC
.text:0000000000004B50
.text:0000000000004B50 loc_4B50:                               ; CODE XREF: get_dev+7E8↑j
.text:0000000000004B50                                         ; get_dev+7F1↑j ...
.text:0000000000004B50                 mov     cs:file_systems_processed, 1
.text:0000000000004B57                 jmp     loc_44F9
.text:0000000000004B5C ; ---------------------------------------------------------------------------
.text:0000000000004B5C
.text:0000000000004B5C loc_4B5C:                               ; CODE XREF: get_dev+656↑j
.text:0000000000004B5C                 movapd  xmm0, xmm2
.text:0000000000004B60                 jmp     loc_49B8
.text:0000000000004B65 ; ---------------------------------------------------------------------------
.text:0000000000004B65
.text:0000000000004B65 loc_4B65:                               ; CODE XREF: get_dev+7D3↑j
.text:0000000000004B65                 cmp     qword ptr [rsp+448h+var_428+8], 0
.text:0000000000004B6B                 jnz     short loc_4B50
.text:0000000000004B6D                 jmp     short loc_4B3A
.text:0000000000004B6D ; ---------------------------------------------------------------------------
.text:0000000000004B6F                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: get_dev+5BE↑j
.text:0000000000004B70                 lea     rax, [rax+rax*4]
.text:0000000000004B74                 xor     edx, edx
.text:0000000000004B76                 lea     rax, [rax+rax*4]
.text:0000000000004B7A                 shl     rax, 2
.text:0000000000004B7E                 div     rcx
.text:0000000000004B81                 test    rdx, rdx
.text:0000000000004B84                 setnz   dl
.text:0000000000004B87                 movzx   edx, dl
.text:0000000000004B8A                 add     rdx, rax
.text:0000000000004B8D                 js      loc_4C9F
.text:0000000000004B93                 pxor    xmm0, xmm0
.text:0000000000004B97                 pxor    xmm3, xmm3
.text:0000000000004B9B                 cvtsi2sd xmm0, rdx
.text:0000000000004BA0                 jmp     loc_49B8
.text:0000000000004BA5 ; ---------------------------------------------------------------------------
.text:0000000000004BA5
.text:0000000000004BA5 loc_4BA5:                               ; CODE XREF: get_dev+11D↑j
.text:0000000000004BA5                                         ; get_dev+126↑j
.text:0000000000004BA5                 cmp     cs:show_all_fs, 0
.text:0000000000004BAC                 jz      loc_43AC
.text:0000000000004BB2                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BB9                 mov     byte ptr [rsp+448h+var_408], 0
.text:0000000000004BBE                 lea     rbx, asc_10958+1 ; "-"
.text:0000000000004BC5                 mov     [rsp+448h+var_3F8], rax
.text:0000000000004BCA                 mov     qword ptr [rsp+448h+var_408+8], rax
.text:0000000000004BCF                 mov     qword ptr [rsp+448h+var_418+8], rax
.text:0000000000004BD4                 mov     qword ptr [rsp+448h+var_418], rax
.text:0000000000004BD9                 mov     qword ptr [rsp+448h+var_428+8], rax
.text:0000000000004BDE                 mov     qword ptr [rsp+448h+var_428], rax
.text:0000000000004BE3                 jmp     loc_4B50
.text:0000000000004BE8 ; ---------------------------------------------------------------------------
.text:0000000000004BE8
.text:0000000000004BE8 loc_4BE8:                               ; CODE XREF: get_dev+7DC↑j
.text:0000000000004BE8                 mov     rsi, [rsp+448h+ptr] ; filename
.text:0000000000004BEC                 lea     rdx, [rsp+448h+stat_buf] ; stat_buf
.text:0000000000004BF4                 mov     edi, 1          ; ver
.text:0000000000004BF9                 call    ___xstat
.text:0000000000004BFE                 test    eax, eax
.text:0000000000004C00                 jnz     loc_4B32
.text:0000000000004C06                 mov     rdi, cs:devlist_table
.text:0000000000004C0D                 test    rdi, rdi
.text:0000000000004C10                 jz      loc_4B32
.text:0000000000004C16                 mov     rax, [rsp+448h+stat_buf.st_dev]
.text:0000000000004C1E                 lea     rsi, [rsp+448h+var_3A8]
.text:0000000000004C26                 mov     [rsp+448h+var_3A8], rax
.text:0000000000004C2E                 call    hash_lookup
.text:0000000000004C33                 test    rax, rax
.text:0000000000004C36                 jz      loc_4B32
.text:0000000000004C3C                 mov     r15, [rax+8]
.text:0000000000004C40                 test    r15, r15
.text:0000000000004C43                 jz      loc_4B32
.text:0000000000004C49                 mov     rdi, [r15]      ; s1
.text:0000000000004C4C                 mov     rsi, r14        ; s2
.text:0000000000004C4F                 call    _strcmp
.text:0000000000004C54                 test    eax, eax
.text:0000000000004C56                 jz      loc_4B32
.text:0000000000004C5C                 test    byte ptr [r15+28h], 2
.text:0000000000004C61                 jz      short loc_4C6C
.text:0000000000004C63                 test    bpl, bpl
.text:0000000000004C66                 jnz     loc_4B32
.text:0000000000004C6C
.text:0000000000004C6C loc_4C6C:                               ; CODE XREF: get_dev+911↑j
.text:0000000000004C6C                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C70                 mov     byte ptr [rsp+448h+var_408], 0
.text:0000000000004C75                 lea     rbx, asc_10958+1 ; "-"
.text:0000000000004C7C                 mov     [rsp+448h+var_3F8], rax
.text:0000000000004C81                 mov     qword ptr [rsp+448h+var_408+8], rax
.text:0000000000004C86                 mov     qword ptr [rsp+448h+var_418+8], rax
.text:0000000000004C8B                 mov     qword ptr [rsp+448h+var_418], rax
.text:0000000000004C90                 mov     qword ptr [rsp+448h+var_428+8], rax
.text:0000000000004C95                 mov     qword ptr [rsp+448h+var_428], rax
.text:0000000000004C9A                 jmp     loc_4B32
.text:0000000000004C9F ; ---------------------------------------------------------------------------
.text:0000000000004C9F
.text:0000000000004C9F loc_4C9F:                               ; CODE XREF: get_dev+83D↑j
.text:0000000000004C9F                 mov     rax, rdx
.text:0000000000004CA2                 pxor    xmm0, xmm0
.text:0000000000004CA6                 shr     rax, 1
.text:0000000000004CA9                 and     edx, 1
.text:0000000000004CAC                 or      rax, rdx
.text:0000000000004CAF                 pxor    xmm3, xmm3
.text:0000000000004CB3                 cvtsi2sd xmm0, rax
.text:0000000000004CB8                 addsd   xmm0, xmm0
.text:0000000000004CBC                 jmp     loc_49B8
.text:0000000000004CC1 ; ---------------------------------------------------------------------------
.text:0000000000004CC1
.text:0000000000004CC1 loc_4CC1:                               ; CODE XREF: get_dev+3F3↑j
.text:0000000000004CC1                 lea     rcx, __PRETTY_FUNCTION___9006 ; "get_dev"
.text:0000000000004CC8                 lea     rsi, file       ; "../coreutils-8.31/src/df.c"
.text:0000000000004CCF                 lea     rdi, aEmptyCell ; "!\"empty cell\""
.text:0000000000004CD6                 mov     edx, 4D2h       ; line
.text:0000000000004CDB                 call    ___assert_fail
.text:0000000000004CE0 ; ---------------------------------------------------------------------------
.text:0000000000004CE0
.text:0000000000004CE0 loc_4CE0:                               ; CODE XREF: get_dev+370↑j
.text:0000000000004CE0                 test    dil, dil
.text:0000000000004CE3                 jz      short loc_4D61
.text:0000000000004CE5                 neg     rcx
.text:0000000000004CE8
.text:0000000000004CE8 loc_4CE8:                               ; CODE XREF: get_dev+A14↓j
.text:0000000000004CE8                 cmp     rcx, rax
.text:0000000000004CEB                 jbe     short loc_4D4E
.text:0000000000004CED                 sub     rcx, rax
.text:0000000000004CF0                 mov     cs:qword_2143B8, rcx
.text:0000000000004CF7
.text:0000000000004CF7 loc_4CF7:                               ; CODE XREF: get_dev+A0F↓j
.text:0000000000004CF7                 cmp     cs:byte_2143C0, 0
.text:0000000000004CFE                 jz      loc_46D0
.text:0000000000004D04                 neg     cs:qword_2143B8
.text:0000000000004D0B                 jmp     loc_46D0
.text:0000000000004D10 ; ---------------------------------------------------------------------------
.text:0000000000004D10
.text:0000000000004D10 def_472B:                               ; CODE XREF: get_dev+3CC↑j
.text:0000000000004D10                 lea     rcx, __PRETTY_FUNCTION___9006 ; jumptable 000000000000472B default case
.text:0000000000004D17                 lea     rsi, file       ; "../coreutils-8.31/src/df.c"
.text:0000000000004D1E                 lea     rdi, aUnhandledField ; "!\"unhandled field\""
.text:0000000000004D25                 mov     edx, 4CEh       ; line
.text:0000000000004D2A                 call    ___assert_fail
.text:0000000000004D2F ; ---------------------------------------------------------------------------
.text:0000000000004D2F
.text:0000000000004D2F loc_4D2F:                               ; CODE XREF: get_dev+3C1↑j
.text:0000000000004D2F                 lea     rcx, __PRETTY_FUNCTION___9006 ; "get_dev"
.text:0000000000004D36                 lea     rsi, file       ; "../coreutils-8.31/src/df.c"
.text:0000000000004D3D                 lea     rdi, aBadFieldType ; "!\"bad field_type\""
.text:0000000000004D44                 mov     edx, 468h       ; line
.text:0000000000004D49                 call    ___assert_fail
.text:0000000000004D4E ; ---------------------------------------------------------------------------
.text:0000000000004D4E
.text:0000000000004D4E loc_4D4E:                               ; CODE XREF: get_dev+99B↑j
.text:0000000000004D4E                 sub     rax, rcx
.text:0000000000004D51                 mov     cs:byte_2143C0, sil
.text:0000000000004D58                 mov     cs:qword_2143B8, rax
.text:0000000000004D5F                 jmp     short loc_4CF7
.text:0000000000004D61 ; ---------------------------------------------------------------------------
.text:0000000000004D61
.text:0000000000004D61 loc_4D61:                               ; CODE XREF: get_dev+993↑j
.text:0000000000004D61                 neg     rax
.text:0000000000004D64                 jmp     short loc_4CE8
.text:0000000000004D66 ; ---------------------------------------------------------------------------
.text:0000000000004D66
.text:0000000000004D66 loc_4D66:                               ; CODE XREF: get_dev+6D↑j
.text:0000000000004D66                 call    ___stack_chk_fail
.text:0000000000004D66 ; } // starts at 4350
.text:0000000000004D66 get_dev         endp
.text:0000000000004D66
.text:0000000000004D66 ; ---------------------------------------------------------------------------
.text:0000000000004D6B                 align 10h
.text:0000000000004D70
.text:0000000000004D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D70
.text:0000000000004D70 ; Attributes: noreturn
.text:0000000000004D70
.text:0000000000004D70 ; void __fastcall __noreturn usage(int status)
.text:0000000000004D70                 public usage
.text:0000000000004D70 usage           proc near               ; CODE XREF: main+44B↑p
.text:0000000000004D70                                         ; main+14FF↑p ...
.text:0000000000004D70
.text:0000000000004D70 var_A8          = qword ptr -0A8h
.text:0000000000004D70 var_A0          = qword ptr -0A0h
.text:0000000000004D70 var_98          = qword ptr -98h
.text:0000000000004D70 var_90          = qword ptr -90h
.text:0000000000004D70 var_88          = qword ptr -88h
.text:0000000000004D70 var_80          = qword ptr -80h
.text:0000000000004D70 var_78          = qword ptr -78h
.text:0000000000004D70 var_70          = qword ptr -70h
.text:0000000000004D70 var_68          = qword ptr -68h
.text:0000000000004D70 var_60          = qword ptr -60h
.text:0000000000004D70 var_58          = qword ptr -58h
.text:0000000000004D70 var_50          = qword ptr -50h
.text:0000000000004D70 var_48          = qword ptr -48h
.text:0000000000004D70 var_40          = qword ptr -40h
.text:0000000000004D70 var_30          = qword ptr -30h
.text:0000000000004D70
.text:0000000000004D70 ; __unwind {
.text:0000000000004D70                 push    r13
.text:0000000000004D72                 push    r12
.text:0000000000004D74                 mov     edx, 5          ; category
.text:0000000000004D79                 push    rbp
.text:0000000000004D7A                 push    rbx
.text:0000000000004D7B                 mov     ebp, edi
.text:0000000000004D7D                 sub     rsp, 88h
.text:0000000000004D84                 mov     rbx, cs:program_name
.text:0000000000004D8B                 mov     rax, fs:28h
.text:0000000000004D94                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004D99                 xor     eax, eax
.text:0000000000004D9B                 test    edi, edi
.text:0000000000004D9D                 jz      short loc_4DCD
.text:0000000000004D9F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004DA6                 xor     edi, edi        ; domainname
.text:0000000000004DA8                 call    _dcgettext
.text:0000000000004DAD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004DB4                 mov     rdx, rax
.text:0000000000004DB7                 mov     rcx, rbx
.text:0000000000004DBA                 mov     esi, 1
.text:0000000000004DBF                 xor     eax, eax
.text:0000000000004DC1                 call    ___fprintf_chk
.text:0000000000004DC6
.text:0000000000004DC6 loc_4DC6:                               ; CODE XREF: usage+3CE↓j
.text:0000000000004DC6                 mov     edi, ebp        ; status
.text:0000000000004DC8                 call    _exit
.text:0000000000004DCD ; ---------------------------------------------------------------------------
.text:0000000000004DCD
.text:0000000000004DCD loc_4DCD:                               ; CODE XREF: usage+2D↑j
.text:0000000000004DCD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000004DD4                 xor     edi, edi        ; domainname
.text:0000000000004DD6                 call    _dcgettext
.text:0000000000004DDB                 mov     rdx, rbx
.text:0000000000004DDE                 mov     rsi, rax
.text:0000000000004DE1                 mov     edi, 1
.text:0000000000004DE6                 xor     eax, eax
.text:0000000000004DE8                 call    ___printf_chk
.text:0000000000004DED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004DF4                 lea     rsi, aShowInformatio ; "Show information about the file system "...
.text:0000000000004DFB                 mov     edx, 5          ; category
.text:0000000000004E00                 xor     edi, edi        ; domainname
.text:0000000000004E02                 call    _dcgettext
.text:0000000000004E07                 mov     rsi, rbx        ; stream
.text:0000000000004E0A                 mov     rdi, rax        ; s
.text:0000000000004E0D                 call    _fputs_unlocked
.text:0000000000004E12                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E19                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000004E20                 mov     edx, 5          ; category
.text:0000000000004E25                 xor     edi, edi        ; domainname
.text:0000000000004E27                 call    _dcgettext
.text:0000000000004E2C                 mov     rsi, rbx        ; stream
.text:0000000000004E2F                 mov     rdi, rax        ; s
.text:0000000000004E32                 call    _fputs_unlocked
.text:0000000000004E37                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E3E                 lea     rsi, aAAllIncludePse ; "  -a, --all             include pseudo,"...
.text:0000000000004E45                 mov     edx, 5          ; category
.text:0000000000004E4A                 xor     edi, edi        ; domainname
.text:0000000000004E4C                 call    _dcgettext
.text:0000000000004E51                 mov     rsi, rbx        ; stream
.text:0000000000004E54                 mov     rdi, rax        ; s
.text:0000000000004E57                 call    _fputs_unlocked
.text:0000000000004E5C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E63                 lea     rsi, aIInodesListIno ; "  -i, --inodes          list inode info"...
.text:0000000000004E6A                 mov     edx, 5          ; category
.text:0000000000004E6F                 xor     edi, edi        ; domainname
.text:0000000000004E71                 call    _dcgettext
.text:0000000000004E76                 mov     rsi, rbx        ; stream
.text:0000000000004E79                 mov     rdi, rax        ; s
.text:0000000000004E7C                 call    _fputs_unlocked
.text:0000000000004E81                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004E88                 lea     rsi, aOutputFieldLis ; "      --output[=FIELD_LIST]  use the ou"...
.text:0000000000004E8F                 mov     edx, 5          ; category
.text:0000000000004E94                 xor     edi, edi        ; domainname
.text:0000000000004E96                 call    _dcgettext
.text:0000000000004E9B                 mov     rsi, rbx        ; stream
.text:0000000000004E9E                 mov     rdi, rax        ; s
.text:0000000000004EA1                 call    _fputs_unlocked
.text:0000000000004EA6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004EAD                 lea     rsi, aTotalElideAllE ; "      --total           elide all entri"...
.text:0000000000004EB4                 mov     edx, 5          ; category
.text:0000000000004EB9                 xor     edi, edi        ; domainname
.text:0000000000004EBB                 call    _dcgettext
.text:0000000000004EC0                 mov     rsi, rbx        ; stream
.text:0000000000004EC3                 mov     rdi, rax        ; s
.text:0000000000004EC6                 call    _fputs_unlocked
.text:0000000000004ECB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004ED2                 lea     rsi, aTTypeTypeLimit ; "  -t, --type=TYPE       limit listing t"...
.text:0000000000004ED9                 mov     edx, 5          ; category
.text:0000000000004EDE                 xor     edi, edi        ; domainname
.text:0000000000004EE0                 call    _dcgettext
.text:0000000000004EE5                 mov     rsi, rbx        ; stream
.text:0000000000004EE8                 mov     rdi, rax        ; s
.text:0000000000004EEB                 call    _fputs_unlocked
.text:0000000000004EF0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004EF7                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004EFE                 mov     edx, 5          ; category
.text:0000000000004F03                 xor     edi, edi        ; domainname
.text:0000000000004F05                 call    _dcgettext
.text:0000000000004F0A                 mov     rsi, rbx        ; stream
.text:0000000000004F0D                 mov     rdi, rax        ; s
.text:0000000000004F10                 call    _fputs_unlocked
.text:0000000000004F15                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F1C                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000004F23                 mov     edx, 5          ; category
.text:0000000000004F28                 xor     edi, edi        ; domainname
.text:0000000000004F2A                 call    _dcgettext
.text:0000000000004F2F                 mov     rsi, rbx        ; stream
.text:0000000000004F32                 mov     rdi, rax        ; s
.text:0000000000004F35                 call    _fputs_unlocked
.text:0000000000004F3A                 lea     rsi, aDisplayValuesA ; "\nDisplay values are in units of the fi"...
.text:0000000000004F41                 mov     edx, 5          ; category
.text:0000000000004F46                 xor     edi, edi        ; domainname
.text:0000000000004F48                 call    _dcgettext
.text:0000000000004F4D                 lea     rdx, aDf_0      ; "DF"
.text:0000000000004F54                 mov     rsi, rax
.text:0000000000004F57                 mov     edi, 1
.text:0000000000004F5C                 xor     eax, eax
.text:0000000000004F5E                 call    ___printf_chk
.text:0000000000004F63                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F6A                 lea     rsi, aTheSizeArgumen ; "\nThe SIZE argument is an integer and o"...
.text:0000000000004F71                 mov     edx, 5          ; category
.text:0000000000004F76                 xor     edi, edi        ; domainname
.text:0000000000004F78                 call    _dcgettext
.text:0000000000004F7D                 mov     rsi, rbx        ; stream
.text:0000000000004F80                 mov     rdi, rax        ; s
.text:0000000000004F83                 call    _fputs_unlocked
.text:0000000000004F88                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F8F                 lea     rsi, aFieldListIsACo ; "\nFIELD_LIST is a comma-separated list "...
.text:0000000000004F96                 mov     edx, 5          ; category
.text:0000000000004F9B                 xor     edi, edi        ; domainname
.text:0000000000004F9D                 call    _dcgettext
.text:0000000000004FA2                 mov     rsi, rbx        ; stream
.text:0000000000004FA5                 mov     rdi, rax        ; s
.text:0000000000004FA8                 lea     rbx, aDf        ; "df"
.text:0000000000004FAF                 call    _fputs_unlocked
.text:0000000000004FB4                 lea     rax, asc_F072   ; "["
.text:0000000000004FBB                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000004FC2                 mov     [rsp+0A8h+var_48], 0
.text:0000000000004FCB                 mov     [rsp+0A8h+var_40], 0
.text:0000000000004FD4                 mov     rdx, rsp
.text:0000000000004FD7                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000004FDB                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000004FE2                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000004FE7                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000004FEE                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000004FF3                 lea     rax, domainname ; "coreutils"
.text:0000000000004FFA                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000004FFF                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000005006                 mov     [rsp+0A8h+var_98], rax
.text:000000000000500B                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000005012                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000005017                 mov     [rsp+0A8h+var_90], rax
.text:000000000000501C                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000005023                 mov     [rsp+0A8h+var_88], rax
.text:0000000000005028                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000502F                 mov     [rsp+0A8h+var_80], rax
.text:0000000000005034                 mov     [rsp+0A8h+var_70], rax
.text:0000000000005039                 mov     [rsp+0A8h+var_60], rax
.text:000000000000503E                 mov     [rsp+0A8h+var_50], rax
.text:0000000000005043                 nop     dword ptr [rax+rax+00h]
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: usage+2F5↓j
.text:0000000000005048                 add     rdx, 10h
.text:000000000000504C                 mov     rdi, [rdx]
.text:000000000000504F                 test    rdi, rdi
.text:0000000000005052                 jz      short loc_5067
.text:0000000000005054                 mov     ecx, 3
.text:0000000000005059                 mov     rsi, rbx
.text:000000000000505C                 repe cmpsb
.text:000000000000505E                 setnbe  al
.text:0000000000005061                 sbb     al, 0
.text:0000000000005063                 test    al, al
.text:0000000000005065                 jnz     short loc_5048
.text:0000000000005067
.text:0000000000005067 loc_5067:                               ; CODE XREF: usage+2E2↑j
.text:0000000000005067                 mov     r12, [rdx+8]
.text:000000000000506B                 xor     edi, edi        ; domainname
.text:000000000000506D                 mov     edx, 5          ; category
.text:0000000000005072                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000005079                 test    r12, r12
.text:000000000000507C                 jz      loc_5143
.text:0000000000005082                 call    _dcgettext
.text:0000000000005087                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000508E                 lea     rdx, unk_F0E8
.text:0000000000005095                 mov     rsi, rax
.text:0000000000005098                 mov     edi, 1
.text:000000000000509D                 xor     eax, eax
.text:000000000000509F                 call    ___printf_chk
.text:00000000000050A4                 xor     esi, esi        ; locale
.text:00000000000050A6                 mov     edi, 5          ; category
.text:00000000000050AB                 call    _setlocale
.text:00000000000050B0                 test    rax, rax
.text:00000000000050B3                 jz      short loc_50D1
.text:00000000000050B5                 lea     rsi, aEn        ; "en_"
.text:00000000000050BC                 mov     edx, 3          ; n
.text:00000000000050C1                 mov     rdi, rax        ; s1
.text:00000000000050C4                 call    _strncmp
.text:00000000000050C9                 test    eax, eax
.text:00000000000050CB                 jnz     loc_51D8
.text:00000000000050D1
.text:00000000000050D1 loc_50D1:                               ; CODE XREF: usage+343↑j
.text:00000000000050D1                                         ; usage+48D↓j
.text:00000000000050D1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000050D8                 xor     edi, edi        ; domainname
.text:00000000000050DA                 mov     edx, 5          ; category
.text:00000000000050DF                 call    _dcgettext
.text:00000000000050E4                 lea     rcx, aDf        ; "df"
.text:00000000000050EB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000050F2                 mov     rsi, rax
.text:00000000000050F5                 mov     edi, 1
.text:00000000000050FA                 xor     eax, eax
.text:00000000000050FC                 call    ___printf_chk
.text:0000000000005101                 cmp     r12, rbx
.text:0000000000005104                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000510B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005112                 cmovz   rbx, rcx
.text:0000000000005116
.text:0000000000005116 loc_5116:                               ; CODE XREF: usage+45C↓j
.text:0000000000005116                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000511D                 xor     edi, edi        ; domainname
.text:000000000000511F                 mov     edx, 5          ; category
.text:0000000000005124                 call    _dcgettext
.text:0000000000005129                 mov     rcx, rbx
.text:000000000000512C                 mov     rsi, rax
.text:000000000000512F                 mov     rdx, r12
.text:0000000000005132                 mov     edi, 1
.text:0000000000005137                 xor     eax, eax
.text:0000000000005139                 call    ___printf_chk
.text:000000000000513E                 jmp     loc_4DC6
.text:0000000000005143 ; ---------------------------------------------------------------------------
.text:0000000000005143
.text:0000000000005143 loc_5143:                               ; CODE XREF: usage+30C↑j
.text:0000000000005143                 call    _dcgettext
.text:0000000000005148                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000514F                 lea     rdx, unk_F0E8
.text:0000000000005156                 mov     rsi, rax
.text:0000000000005159                 mov     edi, 1
.text:000000000000515E                 xor     eax, eax
.text:0000000000005160                 call    ___printf_chk
.text:0000000000005165                 xor     esi, esi        ; locale
.text:0000000000005167                 mov     edi, 5          ; category
.text:000000000000516C                 call    _setlocale
.text:0000000000005171                 test    rax, rax
.text:0000000000005174                 jz      short loc_518E
.text:0000000000005176                 lea     rsi, aEn        ; "en_"
.text:000000000000517D                 mov     edx, 3          ; n
.text:0000000000005182                 mov     rdi, rax        ; s1
.text:0000000000005185                 call    _strncmp
.text:000000000000518A                 test    eax, eax
.text:000000000000518C                 jnz     short loc_51D1
.text:000000000000518E
.text:000000000000518E loc_518E:                               ; CODE XREF: usage+404↑j
.text:000000000000518E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000005195                 mov     edx, 5          ; category
.text:000000000000519A                 xor     edi, edi        ; domainname
.text:000000000000519C                 lea     r12, aDf        ; "df"
.text:00000000000051A3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000051AA                 call    _dcgettext
.text:00000000000051AF                 lea     rcx, aDf        ; "df"
.text:00000000000051B6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000051BD                 mov     rsi, rax
.text:00000000000051C0                 mov     edi, 1
.text:00000000000051C5                 xor     eax, eax
.text:00000000000051C7                 call    ___printf_chk
.text:00000000000051CC                 jmp     loc_5116
.text:00000000000051D1 ; ---------------------------------------------------------------------------
.text:00000000000051D1
.text:00000000000051D1 loc_51D1:                               ; CODE XREF: usage+41C↑j
.text:00000000000051D1                 lea     r12, aDf        ; "df"
.text:00000000000051D8
.text:00000000000051D8 loc_51D8:                               ; CODE XREF: usage+35B↑j
.text:00000000000051D8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000051DF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000051E6                 xor     edi, edi        ; domainname
.text:00000000000051E8                 mov     edx, 5          ; category
.text:00000000000051ED                 call    _dcgettext
.text:00000000000051F2                 mov     rsi, r13        ; stream
.text:00000000000051F5                 mov     rdi, rax        ; s
.text:00000000000051F8                 call    _fputs_unlocked
.text:00000000000051FD                 jmp     loc_50D1
.text:00000000000051FD ; } // starts at 4D70
.text:00000000000051FD usage           endp
.text:00000000000051FD
.text:00000000000051FD ; ---------------------------------------------------------------------------
.text:0000000000005202                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210
.text:0000000000005210 decode_output_arg proc near             ; CODE XREF: main+29D↑p
.text:0000000000005210                                         ; main+B73↑p
.text:0000000000005210
.text:0000000000005210 ptr             = qword ptr -40h
.text:0000000000005210
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 push    r15
.text:0000000000005212                 push    r14
.text:0000000000005214                 lea     r14, field_data
.text:000000000000521B                 push    r13
.text:000000000000521D                 push    r12
.text:000000000000521F                 push    rbp
.text:0000000000005220                 push    rbx
.text:0000000000005221                 sub     rsp, 18h
.text:0000000000005225                 call    xstrdup
.text:000000000000522A                 mov     [rsp+48h+ptr], rax
.text:000000000000522F                 mov     r12, rax
.text:0000000000005232                 nop     word ptr [rax+rax+00h]
.text:0000000000005238
.text:0000000000005238 loc_5238:                               ; CODE XREF: decode_output_arg+EF↓j
.text:0000000000005238                 mov     esi, 2Ch ; ','  ; c
.text:000000000000523D                 mov     rdi, r12        ; s
.text:0000000000005240                 xor     r13d, r13d
.text:0000000000005243                 call    _strchr
.text:0000000000005248                 test    rax, rax
.text:000000000000524B                 jz      short loc_5254
.text:000000000000524D                 lea     r13, [rax+1]
.text:0000000000005251                 mov     byte ptr [rax], 0
.text:0000000000005254
.text:0000000000005254 loc_5254:                               ; CODE XREF: decode_output_arg+3B↑j
.text:0000000000005254                 lea     r15, off_214028 ; "source"
.text:000000000000525B                 xor     ebx, ebx
.text:000000000000525D                 nop     dword ptr [rax]
.text:0000000000005260
.text:0000000000005260 loc_5260:                               ; CODE XREF: decode_output_arg+6C↓j
.text:0000000000005260                 mov     rbp, [r15]
.text:0000000000005263                 mov     rsi, r12        ; s2
.text:0000000000005266                 mov     rdi, rbp        ; s1
.text:0000000000005269                 call    _strcmp
.text:000000000000526E                 test    eax, eax
.text:0000000000005270                 jz      short loc_52C0
.text:0000000000005272                 add     ebx, 1
.text:0000000000005275                 add     r15, 30h ; '0'
.text:0000000000005279                 cmp     ebx, 0Ch
.text:000000000000527C                 jnz     short loc_5260
.text:000000000000527E                 mov     rdi, r12
.text:0000000000005281                 call    quote
.text:0000000000005286                 lea     rsi, aOptionOutputFi ; "option --output: field %s unknown"
.text:000000000000528D                 mov     rbx, rax
.text:0000000000005290                 mov     edx, 5          ; category
.text:0000000000005295
.text:0000000000005295 loc_5295:                               ; CODE XREF: decode_output_arg+147↓j
.text:0000000000005295                 xor     edi, edi        ; domainname
.text:0000000000005297                 call    _dcgettext
.text:000000000000529C                 xor     edi, edi        ; status
.text:000000000000529E                 mov     rdx, rax        ; format
.text:00000000000052A1                 mov     rcx, rbx
.text:00000000000052A4                 xor     esi, esi        ; errnum
.text:00000000000052A6                 xor     eax, eax
.text:00000000000052A8                 call    _error
.text:00000000000052AD                 mov     edi, 1          ; status
.text:00000000000052B2                 call    usage
.text:00000000000052B2 ; ---------------------------------------------------------------------------
.text:00000000000052B7                 align 20h
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: decode_output_arg+60↑j
.text:00000000000052C0                 mov     eax, ebx
.text:00000000000052C2                 lea     rax, [rax+rax*2]
.text:00000000000052C6                 shl     rax, 4
.text:00000000000052CA                 cmp     byte ptr [r14+rax+2Ch], 0
.text:00000000000052D0                 jnz     short loc_5340
.text:00000000000052D2                 mov     eax, 1
.text:00000000000052D7                 mov     ecx, ebx
.text:00000000000052D9                 shl     rax, cl
.text:00000000000052DC                 test    eax, 0FEBh
.text:00000000000052E1                 jnz     short loc_5320
.text:00000000000052E3                 test    al, 10h
.text:00000000000052E5                 jnz     short loc_5330
.text:00000000000052E7                 test    al, 4
.text:00000000000052E9                 jz      short loc_535C
.text:00000000000052EB                 lea     rsi, aSize      ; "Size"
.text:00000000000052F2                 mov     edi, ebx
.text:00000000000052F4                 call    alloc_field
.text:00000000000052F9
.text:00000000000052F9 loc_52F9:                               ; CODE XREF: decode_output_arg+119↓j
.text:00000000000052F9                                         ; decode_output_arg+12E↓j
.text:00000000000052F9                 test    r13, r13
.text:00000000000052FC                 mov     r12, r13
.text:00000000000052FF                 jnz     loc_5238
.text:0000000000005305                 mov     rdi, [rsp+48h+ptr] ; ptr
.text:000000000000530A                 add     rsp, 18h
.text:000000000000530E                 pop     rbx
.text:000000000000530F                 pop     rbp
.text:0000000000005310                 pop     r12
.text:0000000000005312                 pop     r13
.text:0000000000005314                 pop     r14
.text:0000000000005316                 pop     r15
.text:0000000000005318                 jmp     _free
.text:0000000000005318 ; ---------------------------------------------------------------------------
.text:000000000000531D                 align 20h
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: decode_output_arg+D1↑j
.text:0000000000005320                 xor     esi, esi
.text:0000000000005322                 mov     edi, ebx
.text:0000000000005324                 call    alloc_field
.text:0000000000005329                 jmp     short loc_52F9
.text:0000000000005329 ; ---------------------------------------------------------------------------
.text:000000000000532B                 align 10h
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: decode_output_arg+D5↑j
.text:0000000000005330                 lea     rsi, aAvail     ; "Avail"
.text:0000000000005337                 mov     edi, ebx
.text:0000000000005339                 call    alloc_field
.text:000000000000533E                 jmp     short loc_52F9
.text:0000000000005340 ; ---------------------------------------------------------------------------
.text:0000000000005340
.text:0000000000005340 loc_5340:                               ; CODE XREF: decode_output_arg+C0↑j
.text:0000000000005340                 mov     rdi, rbp
.text:0000000000005343                 call    quote
.text:0000000000005348                 mov     edx, 5
.text:000000000000534D                 mov     rbx, rax
.text:0000000000005350                 lea     rsi, aOptionOutputFi_0 ; "option --output: field %s used more tha"...
.text:0000000000005357                 jmp     loc_5295
.text:000000000000535C ; ---------------------------------------------------------------------------
.text:000000000000535C
.text:000000000000535C loc_535C:                               ; CODE XREF: decode_output_arg+D9↑j
.text:000000000000535C                 lea     rcx, __PRETTY_FUNCTION___8857 ; "decode_output_arg"
.text:0000000000005363                 lea     rsi, file       ; "../coreutils-8.31/src/df.c"
.text:000000000000536A                 lea     rdi, aInvalidField ; "!\"invalid field\""
.text:0000000000005371                 mov     edx, 1DDh       ; line
.text:0000000000005376                 call    ___assert_fail
.text:0000000000005376 ; } // starts at 5210
.text:0000000000005376 decode_output_arg endp
.text:0000000000005376
.text:0000000000005376 ; ---------------------------------------------------------------------------
.text:000000000000537B                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380 ; Attributes: bp-based frame
.text:0000000000005380
.text:0000000000005380 ; __int64 __fastcall find_mount_point(char *path)
.text:0000000000005380                 public find_mount_point
.text:0000000000005380 find_mount_point proc near              ; CODE XREF: main+B8A↑p
.text:0000000000005380
.text:0000000000005380 var_170         = byte ptr -170h
.text:0000000000005380 var_161         = byte ptr -161h
.text:0000000000005380 stat_buf        = stat ptr -160h
.text:0000000000005380 var_D0          = stat ptr -0D0h
.text:0000000000005380 var_38          = qword ptr -38h
.text:0000000000005380
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 push    rbp
.text:0000000000005381                 mov     rbp, rsp
.text:0000000000005384                 push    r15
.text:0000000000005386                 push    r14
.text:0000000000005388                 push    r13
.text:000000000000538A                 lea     r13, [rbp+var_170]
.text:0000000000005391                 push    r12
.text:0000000000005393                 push    rbx
.text:0000000000005394                 mov     r12, rdi
.text:0000000000005397                 mov     rbx, rsi
.text:000000000000539A                 mov     rdi, r13
.text:000000000000539D                 sub     rsp, 148h
.text:00000000000053A4                 mov     rax, fs:28h
.text:00000000000053AD                 mov     [rbp+var_38], rax
.text:00000000000053B1                 xor     eax, eax
.text:00000000000053B3                 call    save_cwd
.text:00000000000053B8                 mov     r15d, eax
.text:00000000000053BB                 call    ___errno_location
.text:00000000000053C0                 test    r15d, r15d
.text:00000000000053C3                 mov     r14, rax
.text:00000000000053C6                 jnz     loc_56E5
.text:00000000000053CC                 mov     eax, [rbx+18h]
.text:00000000000053CF                 and     eax, 0F000h
.text:00000000000053D4                 cmp     eax, 4000h
.text:00000000000053D9                 jz      loc_55C0
.text:00000000000053DF                 mov     rdi, r12
.text:00000000000053E2                 call    dir_name
.text:00000000000053E7                 mov     rdi, rax        ; s
.text:00000000000053EA                 mov     rbx, rax
.text:00000000000053ED                 call    _strlen
.text:00000000000053F2                 lea     rdx, [rax+1]    ; n
.text:00000000000053F6                 add     rax, 1Fh
.text:00000000000053FA                 mov     rsi, rbx        ; src
.text:00000000000053FD                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000005401                 sub     rsp, rax
.text:0000000000005404                 lea     rdi, [rsp+170h+var_161]
.text:0000000000005409                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:000000000000540D                 call    _memcpy
.text:0000000000005412                 mov     rdi, rbx        ; ptr
.text:0000000000005415                 mov     r12, rax
.text:0000000000005418                 call    _free
.text:000000000000541D                 mov     rdi, r12        ; path
.text:0000000000005420                 call    _chdir
.text:0000000000005425                 test    eax, eax
.text:0000000000005427                 js      loc_563E
.text:000000000000542D                 lea     rdx, [rbp+stat_buf] ; stat_buf
.text:0000000000005434                 lea     rsi, filename+1 ; filename
.text:000000000000543B                 mov     edi, 1          ; ver
.text:0000000000005440                 call    ___xstat
.text:0000000000005445                 test    eax, eax
.text:0000000000005447                 js      loc_5680
.text:000000000000544D
.text:000000000000544D loc_544D:                               ; CODE XREF: find_mount_point+2B8↓j
.text:000000000000544D                 lea     r12, [rbp+var_D0]
.text:0000000000005454                 lea     rbx, filename   ; ".."
.text:000000000000545B                 jmp     loc_5513
.text:0000000000005460 ; ---------------------------------------------------------------------------
.text:0000000000005460
.text:0000000000005460 loc_5460:                               ; CODE XREF: find_mount_point+1A5↓j
.text:0000000000005460                 mov     rax, [rbp+stat_buf.st_dev]
.text:0000000000005467                 cmp     [rbp+var_D0.st_dev], rax
.text:000000000000546E                 jnz     loc_55B0
.text:0000000000005474                 mov     rax, [rbp+stat_buf.st_ino]
.text:000000000000547B                 cmp     [rbp+var_D0.st_ino], rax
.text:0000000000005482                 jz      loc_55B0
.text:0000000000005488                 mov     rdi, rbx        ; path
.text:000000000000548B                 call    _chdir
.text:0000000000005490                 test    eax, eax
.text:0000000000005492                 js      loc_56C0
.text:0000000000005498                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_dev]
.text:00000000000054A0                 movaps  xmmword ptr [rbp+stat_buf.st_dev], xmm0
.text:00000000000054A7                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_nlink]
.text:00000000000054AF                 movaps  xmmword ptr [rbp+stat_buf.st_nlink], xmm0
.text:00000000000054B6                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_gid]
.text:00000000000054BE                 movaps  xmmword ptr [rbp+stat_buf.st_gid], xmm0
.text:00000000000054C5                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_size]
.text:00000000000054CD                 movaps  xmmword ptr [rbp+stat_buf.st_size], xmm0
.text:00000000000054D4                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_blocks]
.text:00000000000054DC                 movaps  xmmword ptr [rbp+stat_buf.st_blocks], xmm0
.text:00000000000054E3                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_atim.tv_nsec]
.text:00000000000054E8                 movaps  xmmword ptr [rbp+stat_buf.st_atim.tv_nsec], xmm0
.text:00000000000054EF                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_mtim.tv_nsec]
.text:00000000000054F4                 movaps  xmmword ptr [rbp+stat_buf.st_mtim.tv_nsec], xmm0
.text:00000000000054FB                 movdqa  xmm0, xmmword ptr [rbp+var_D0.st_ctim.tv_nsec]
.text:0000000000005500                 movaps  xmmword ptr [rbp+stat_buf.st_ctim.tv_nsec], xmm0
.text:0000000000005507                 movdqa  xmm0, xmmword ptr [rbp+var_D0.__unused+8]
.text:000000000000550C                 movaps  xmmword ptr [rbp+stat_buf.__unused+8], xmm0
.text:0000000000005513
.text:0000000000005513 loc_5513:                               ; CODE XREF: find_mount_point+DB↑j
.text:0000000000005513                 mov     rdx, r12        ; stat_buf
.text:0000000000005516                 mov     rsi, rbx        ; filename
.text:0000000000005519                 mov     edi, 1          ; ver
.text:000000000000551E                 call    ___xstat
.text:0000000000005523                 test    eax, eax
.text:0000000000005525                 jns     loc_5460
.text:000000000000552B                 lea     rsi, filename   ; ".."
.text:0000000000005532                 mov     edi, 4
.text:0000000000005537                 call    quotearg_style
.text:000000000000553C                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000005543                 mov     rbx, rax
.text:0000000000005546                 mov     edx, 5          ; category
.text:000000000000554B
.text:000000000000554B loc_554B:                               ; CODE XREF: find_mount_point+360↓j
.text:000000000000554B                 xor     edi, edi        ; domainname
.text:000000000000554D                 call    _dcgettext
.text:0000000000005552                 mov     esi, [r14]      ; errnum
.text:0000000000005555                 mov     rcx, rbx
.text:0000000000005558                 mov     rdx, rax        ; format
.text:000000000000555B                 xor     edi, edi        ; status
.text:000000000000555D                 xor     eax, eax
.text:000000000000555F                 xor     ebx, ebx
.text:0000000000005561                 call    _error
.text:0000000000005566
.text:0000000000005566 loc_5566:                               ; CODE XREF: find_mount_point+238↓j
.text:0000000000005566                                         ; find_mount_point+337↓j
.text:0000000000005566                 mov     rdi, r13
.text:0000000000005569                 mov     r12d, [r14]
.text:000000000000556C                 call    restore_cwd
.text:0000000000005571                 test    eax, eax
.text:0000000000005573                 jnz     loc_570E
.text:0000000000005579                 mov     rdi, r13
.text:000000000000557C                 call    free_cwd
.text:0000000000005581                 mov     [r14], r12d
.text:0000000000005584
.text:0000000000005584 loc_5584:                               ; CODE XREF: find_mount_point+2F5↓j
.text:0000000000005584                                         ; find_mount_point+389↓j
.text:0000000000005584                 mov     rcx, [rbp+var_38]
.text:0000000000005588                 xor     rcx, fs:28h
.text:0000000000005591                 mov     rax, rbx
.text:0000000000005594                 jnz     loc_5733
.text:000000000000559A                 lea     rsp, [rbp-28h]
.text:000000000000559E                 pop     rbx
.text:000000000000559F                 pop     r12
.text:00000000000055A1                 pop     r13
.text:00000000000055A3                 pop     r14
.text:00000000000055A5                 pop     r15
.text:00000000000055A7                 pop     rbp
.text:00000000000055A8                 retn
.text:00000000000055A8 ; ---------------------------------------------------------------------------
.text:00000000000055A9                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: find_mount_point+EE↑j
.text:00000000000055B0                                         ; find_mount_point+102↑j
.text:00000000000055B0                 call    xgetcwd
.text:00000000000055B5                 mov     rbx, rax
.text:00000000000055B8                 jmp     short loc_5566
.text:00000000000055B8 ; ---------------------------------------------------------------------------
.text:00000000000055BA                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: find_mount_point+59↑j
.text:00000000000055C0                 movdqu  xmm0, xmmword ptr [rbx]
.text:00000000000055C4                 mov     rdi, r12        ; path
.text:00000000000055C7                 movaps  xmmword ptr [rbp+stat_buf.st_dev], xmm0
.text:00000000000055CE                 movdqu  xmm0, xmmword ptr [rbx+10h]
.text:00000000000055D3                 movaps  xmmword ptr [rbp+stat_buf.st_nlink], xmm0
.text:00000000000055DA                 movdqu  xmm0, xmmword ptr [rbx+20h]
.text:00000000000055DF                 movaps  xmmword ptr [rbp+stat_buf.st_gid], xmm0
.text:00000000000055E6                 movdqu  xmm0, xmmword ptr [rbx+30h]
.text:00000000000055EB                 movaps  xmmword ptr [rbp+stat_buf.st_size], xmm0
.text:00000000000055F2                 movdqu  xmm0, xmmword ptr [rbx+40h]
.text:00000000000055F7                 movaps  xmmword ptr [rbp+stat_buf.st_blocks], xmm0
.text:00000000000055FE                 movdqu  xmm0, xmmword ptr [rbx+50h]
.text:0000000000005603                 movaps  xmmword ptr [rbp+stat_buf.st_atim.tv_nsec], xmm0
.text:000000000000560A                 movdqu  xmm0, xmmword ptr [rbx+60h]
.text:000000000000560F                 movaps  xmmword ptr [rbp+stat_buf.st_mtim.tv_nsec], xmm0
.text:0000000000005616                 movdqu  xmm0, xmmword ptr [rbx+70h]
.text:000000000000561B                 movaps  xmmword ptr [rbp+stat_buf.st_ctim.tv_nsec], xmm0
.text:0000000000005622                 movdqu  xmm0, xmmword ptr [rbx+80h]
.text:000000000000562A                 movaps  xmmword ptr [rbp+stat_buf.__unused+8], xmm0
.text:0000000000005631                 call    _chdir
.text:0000000000005636                 test    eax, eax
.text:0000000000005638                 jns     loc_544D
.text:000000000000563E
.text:000000000000563E loc_563E:                               ; CODE XREF: find_mount_point+A7↑j
.text:000000000000563E                 mov     rsi, r12
.text:0000000000005641                 mov     edi, 4
.text:0000000000005646                 call    quotearg_style
.text:000000000000564B                 lea     rsi, aCannotChangeTo ; "cannot change to directory %s"
.text:0000000000005652                 mov     edx, 5          ; category
.text:0000000000005657                 xor     edi, edi        ; domainname
.text:0000000000005659                 mov     rbx, rax
.text:000000000000565C                 call    _dcgettext
.text:0000000000005661                 mov     esi, [r14]      ; errnum
.text:0000000000005664                 mov     rcx, rbx
.text:0000000000005667                 mov     rdx, rax        ; format
.text:000000000000566A                 xor     edi, edi        ; status
.text:000000000000566C                 xor     eax, eax
.text:000000000000566E                 xor     ebx, ebx
.text:0000000000005670                 call    _error
.text:0000000000005675                 jmp     loc_5584
.text:0000000000005675 ; ---------------------------------------------------------------------------
.text:000000000000567A                 align 20h
.text:0000000000005680
.text:0000000000005680 loc_5680:                               ; CODE XREF: find_mount_point+C7↑j
.text:0000000000005680                 mov     rsi, r12
.text:0000000000005683                 mov     edi, 4
.text:0000000000005688                 call    quotearg_style
.text:000000000000568D                 lea     rsi, aCannotStatCurr ; "cannot stat current directory (now %s)"
.text:0000000000005694                 mov     edx, 5          ; category
.text:0000000000005699                 xor     edi, edi        ; domainname
.text:000000000000569B                 mov     rbx, rax
.text:000000000000569E                 call    _dcgettext
.text:00000000000056A3                 mov     esi, [r14]      ; errnum
.text:00000000000056A6                 mov     rcx, rbx
.text:00000000000056A9                 mov     rdx, rax        ; format
.text:00000000000056AC                 xor     edi, edi        ; status
.text:00000000000056AE                 xor     eax, eax
.text:00000000000056B0                 xor     ebx, ebx
.text:00000000000056B2                 call    _error
.text:00000000000056B7                 jmp     loc_5566
.text:00000000000056B7 ; ---------------------------------------------------------------------------
.text:00000000000056BC                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: find_mount_point+112↑j
.text:00000000000056C0                 lea     rsi, filename   ; ".."
.text:00000000000056C7                 mov     edi, 4
.text:00000000000056CC                 call    quotearg_style
.text:00000000000056D1                 mov     edx, 5
.text:00000000000056D6                 mov     rbx, rax
.text:00000000000056D9                 lea     rsi, aCannotChangeTo ; "cannot change to directory %s"
.text:00000000000056E0                 jmp     loc_554B
.text:00000000000056E5 ; ---------------------------------------------------------------------------
.text:00000000000056E5
.text:00000000000056E5 loc_56E5:                               ; CODE XREF: find_mount_point+46↑j
.text:00000000000056E5                 lea     rsi, aCannotGetCurre ; "cannot get current directory"
.text:00000000000056EC                 mov     edx, 5          ; category
.text:00000000000056F1                 xor     edi, edi        ; domainname
.text:00000000000056F3                 xor     ebx, ebx
.text:00000000000056F5                 call    _dcgettext
.text:00000000000056FA                 mov     esi, [r14]      ; errnum
.text:00000000000056FD                 mov     rdx, rax        ; format
.text:0000000000005700                 xor     edi, edi        ; status
.text:0000000000005702                 xor     eax, eax
.text:0000000000005704                 call    _error
.text:0000000000005709                 jmp     loc_5584
.text:000000000000570E ; ---------------------------------------------------------------------------
.text:000000000000570E
.text:000000000000570E loc_570E:                               ; CODE XREF: find_mount_point+1F3↑j
.text:000000000000570E                 lea     rsi, aFailedToReturn ; "failed to return to initial working dir"...
.text:0000000000005715                 mov     edx, 5          ; category
.text:000000000000571A                 xor     edi, edi        ; domainname
.text:000000000000571C                 call    _dcgettext
.text:0000000000005721                 mov     esi, [r14]      ; errnum
.text:0000000000005724                 mov     rdx, rax        ; format
.text:0000000000005727                 mov     edi, 1          ; status
.text:000000000000572C                 xor     eax, eax
.text:000000000000572E                 call    _error
.text:0000000000005733
.text:0000000000005733 loc_5733:                               ; CODE XREF: find_mount_point+214↑j
.text:0000000000005733                 call    ___stack_chk_fail
.text:0000000000005733 ; } // starts at 5380
.text:0000000000005733 find_mount_point endp
.text:0000000000005733
.text:0000000000005733 ; ---------------------------------------------------------------------------
.text:0000000000005738                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740 ; Attributes: info_from_lumina
.text:0000000000005740
.text:0000000000005740 ; char *__fastcall canonicalize_filename_mode(const char *name, canonicalize_mode_t_0 can_mode)
.text:0000000000005740                 public canonicalize_filename_mode
.text:0000000000005740 canonicalize_filename_mode proc near    ; CODE XREF: get_dev+204↑p
.text:0000000000005740
.text:0000000000005740 var_114         = dword ptr -114h
.text:0000000000005740 stat_buf        = qword ptr -110h
.text:0000000000005740 var_108         = qword ptr -108h
.text:0000000000005740 var_FD          = byte ptr -0FDh
.text:0000000000005740 var_FC          = dword ptr -0FCh
.text:0000000000005740 n               = qword ptr -0F8h
.text:0000000000005740 ptr             = qword ptr -0F0h
.text:0000000000005740 var_E8          = qword ptr -0E8h
.text:0000000000005740 var_E0          = qword ptr -0E0h
.text:0000000000005740 var_D8          = byte ptr -0D8h
.text:0000000000005740 var_C0          = dword ptr -0C0h
.text:0000000000005740 var_A8          = qword ptr -0A8h
.text:0000000000005740 var_40          = qword ptr -40h
.text:0000000000005740
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 push    r15
.text:0000000000005742                 push    r14
.text:0000000000005744                 push    r13
.text:0000000000005746                 push    r12
.text:0000000000005748                 push    rbp
.text:0000000000005749                 push    rbx
.text:000000000000574A                 sub     rsp, 0E8h
.text:0000000000005751                 mov     rax, fs:28h
.text:000000000000575A                 mov     [rsp+118h+var_40], rax
.text:0000000000005762                 xor     eax, eax
.text:0000000000005764                 mov     eax, esi
.text:0000000000005766                 and     eax, 4
.text:0000000000005769                 setnz   [rsp+118h+var_FD]
.text:000000000000576E                 and     esi, 3
.text:0000000000005771                 mov     [rsp+118h+var_FC], eax
.text:0000000000005775                 lea     eax, [rsi-1]
.text:0000000000005778                 mov     [rsp+118h+var_114], esi
.text:000000000000577C                 test    esi, eax
.text:000000000000577E                 jnz     loc_5CD0
.text:0000000000005784                 test    rdi, rdi
.text:0000000000005787                 mov     r14, rdi
.text:000000000000578A                 jz      loc_5CD0
.text:0000000000005790                 movzx   eax, byte ptr [rdi]
.text:0000000000005793                 test    al, al
.text:0000000000005795                 jz      loc_5D10
.text:000000000000579B                 cmp     al, 2Fh ; '/'
.text:000000000000579D                 jz      loc_5C60
.text:00000000000057A3                 call    xgetcwd
.text:00000000000057A8                 test    rax, rax
.text:00000000000057AB                 mov     rbp, rax
.text:00000000000057AE                 jz      loc_5960
.text:00000000000057B4                 mov     rdi, rax        ; s
.text:00000000000057B7                 call    _strlen
.text:00000000000057BC                 cmp     rax, 0FFFh
.text:00000000000057C2                 mov     r15, rax
.text:00000000000057C5                 jbe     loc_5C80
.text:00000000000057CB                 add     r15, rbp
.text:00000000000057CE                 mov     rbx, r15
.text:00000000000057D1
.text:00000000000057D1 loc_57D1:                               ; CODE XREF: canonicalize_filename_mode+53B↓j
.text:00000000000057D1                                         ; canonicalize_filename_mode+55A↓j
.text:00000000000057D1                 lea     rax, [rsp+118h+var_D8]
.text:00000000000057D6                 mov     [rsp+118h+n], r14
.text:00000000000057DB                 mov     [rsp+118h+var_108], 0
.text:00000000000057E4                 mov     [rsp+118h+var_E8], 0
.text:00000000000057ED                 mov     [rsp+118h+ptr], 0
.text:00000000000057F6                 mov     [rsp+118h+stat_buf], rax
.text:00000000000057FB
.text:00000000000057FB loc_57FB:                               ; CODE XREF: canonicalize_filename_mode+3D5↓j
.text:00000000000057FB                                         ; canonicalize_filename_mode+3F0↓j ...
.text:00000000000057FB                 movzx   eax, byte ptr [r14]
.text:00000000000057FF                 test    al, al
.text:0000000000005801                 jz      loc_590F
.text:0000000000005807                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005810
.text:0000000000005810 loc_5810:                               ; CODE XREF: canonicalize_filename_mode+1C9↓j
.text:0000000000005810                 cmp     al, 2Fh ; '/'
.text:0000000000005812                 jnz     short loc_582C
.text:0000000000005814                 nop     dword ptr [rax+00h]
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: canonicalize_filename_mode+E2↓j
.text:0000000000005818                 add     r14, 1
.text:000000000000581C                 movzx   eax, byte ptr [r14]
.text:0000000000005820                 cmp     al, 2Fh ; '/'
.text:0000000000005822                 jz      short loc_5818
.text:0000000000005824                 test    al, al
.text:0000000000005826                 jz      loc_5AF0
.text:000000000000582C
.text:000000000000582C loc_582C:                               ; CODE XREF: canonicalize_filename_mode+D2↑j
.text:000000000000582C                 mov     r13, r14
.text:000000000000582F                 jmp     short loc_583D
.text:000000000000582F ; ---------------------------------------------------------------------------
.text:0000000000005831                 align 8
.text:0000000000005838
.text:0000000000005838 loc_5838:                               ; CODE XREF: canonicalize_filename_mode+108↓j
.text:0000000000005838                 cmp     dl, 2Fh ; '/'
.text:000000000000583B                 jz      short loc_584A
.text:000000000000583D
.text:000000000000583D loc_583D:                               ; CODE XREF: canonicalize_filename_mode+EF↑j
.text:000000000000583D                 add     r13, 1
.text:0000000000005841                 movzx   edx, byte ptr [r13+0]
.text:0000000000005846                 test    dl, dl
.text:0000000000005848                 jnz     short loc_5838
.text:000000000000584A
.text:000000000000584A loc_584A:                               ; CODE XREF: canonicalize_filename_mode+FB↑j
.text:000000000000584A                                         ; canonicalize_filename_mode+3B3↓j
.text:000000000000584A                 cmp     r13, r14
.text:000000000000584D                 jz      loc_590F
.text:0000000000005853                 mov     r12, r13
.text:0000000000005856                 sub     r12, r14
.text:0000000000005859                 cmp     r12, 1
.text:000000000000585D                 jz      loc_5A30
.text:0000000000005863                 cmp     r12, 2
.text:0000000000005867                 jnz     short loc_5871
.text:0000000000005869                 cmp     al, 2Eh ; '.'
.text:000000000000586B                 jz      loc_5B00
.text:0000000000005871
.text:0000000000005871 loc_5871:                               ; CODE XREF: canonicalize_filename_mode+127↑j
.text:0000000000005871                                         ; canonicalize_filename_mode+2F2↓j ...
.text:0000000000005871                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000005876                 jz      short loc_5880
.text:0000000000005878                 mov     byte ptr [r15], 2Fh ; '/'
.text:000000000000587C                 add     r15, 1
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: canonicalize_filename_mode+136↑j
.text:0000000000005880                 lea     rax, [r15+r12]
.text:0000000000005884                 cmp     rbx, rax
.text:0000000000005887                 ja      short loc_58BA
.text:0000000000005889                 sub     rbx, rbp
.text:000000000000588C                 sub     r15, rbp
.text:000000000000588F                 mov     rdi, rbp
.text:0000000000005892                 lea     rax, [r12+rbx+1]
.text:0000000000005897                 add     rbx, 1000h
.text:000000000000589E                 cmp     r12, 1000h
.text:00000000000058A5                 cmovge  rbx, rax
.text:00000000000058A9                 mov     rsi, rbx
.text:00000000000058AC                 call    xrealloc
.text:00000000000058B1                 mov     rbp, rax
.text:00000000000058B4                 add     rbx, rax
.text:00000000000058B7                 add     r15, rax
.text:00000000000058BA
.text:00000000000058BA loc_58BA:                               ; CODE XREF: canonicalize_filename_mode+147↑j
.text:00000000000058BA                 mov     rdi, r15        ; dest
.text:00000000000058BD                 mov     rdx, r12        ; n
.text:00000000000058C0                 mov     rsi, r14        ; src
.text:00000000000058C3                 call    _memcpy
.text:00000000000058C8                 cmp     [rsp+118h+var_114], 2
.text:00000000000058CD                 lea     r15, [r15+r12]
.text:00000000000058D1                 mov     byte ptr [r15], 0
.text:00000000000058D5                 jnz     loc_5990
.text:00000000000058DB                 cmp     [rsp+118h+var_FD], 0
.text:00000000000058E0                 jz      loc_5990
.text:00000000000058E6
.text:00000000000058E6 loc_58E6:                               ; CODE XREF: canonicalize_filename_mode+290↓j
.text:00000000000058E6                 mov     [rsp+118h+var_C0], 0
.text:00000000000058EE
.text:00000000000058EE loc_58EE:                               ; CODE XREF: canonicalize_filename_mode+31B↓j
.text:00000000000058EE                 cmp     byte ptr [r13+0], 0
.text:00000000000058F3                 jz      short loc_5900
.text:00000000000058F5                 cmp     [rsp+118h+var_114], 2
.text:00000000000058FA                 jnz     loc_5D57
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: canonicalize_filename_mode+1B3↑j
.text:0000000000005900                                         ; canonicalize_filename_mode+2B8↓j ...
.text:0000000000005900                 mov     r14, r13
.text:0000000000005903                 movzx   eax, byte ptr [r14]
.text:0000000000005907                 test    al, al
.text:0000000000005909                 jnz     loc_5810
.text:000000000000590F
.text:000000000000590F loc_590F:                               ; CODE XREF: canonicalize_filename_mode+C1↑j
.text:000000000000590F                                         ; canonicalize_filename_mode+10D↑j
.text:000000000000590F                 lea     rax, [rbp+1]
.text:0000000000005913                 cmp     r15, rax
.text:0000000000005916                 jbe     short loc_5923
.text:0000000000005918                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:000000000000591D                 jnz     short loc_5923
.text:000000000000591F                 sub     r15, 1
.text:0000000000005923
.text:0000000000005923 loc_5923:                               ; CODE XREF: canonicalize_filename_mode+1D6↑j
.text:0000000000005923                                         ; canonicalize_filename_mode+1DD↑j
.text:0000000000005923                 lea     rax, [r15+1]
.text:0000000000005927                 mov     byte ptr [r15], 0
.text:000000000000592B                 cmp     rbx, rax
.text:000000000000592E                 jz      short loc_5942
.text:0000000000005930                 sub     r15, rbp
.text:0000000000005933                 mov     rdi, rbp
.text:0000000000005936                 lea     rsi, [r15+1]
.text:000000000000593A                 call    xrealloc
.text:000000000000593F                 mov     rbp, rax
.text:0000000000005942
.text:0000000000005942 loc_5942:                               ; CODE XREF: canonicalize_filename_mode+1EE↑j
.text:0000000000005942                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000005947                 call    _free
.text:000000000000594C                 mov     rax, [rsp+118h+var_108]
.text:0000000000005951                 test    rax, rax
.text:0000000000005954                 jz      short loc_5960
.text:0000000000005956                 mov     rdi, rax        ; ptr
.text:0000000000005959                 call    hash_free
.text:000000000000595E                 xchg    ax, ax
.text:0000000000005960
.text:0000000000005960 loc_5960:                               ; CODE XREF: canonicalize_filename_mode+6E↑j
.text:0000000000005960                                         ; canonicalize_filename_mode+214↑j ...
.text:0000000000005960                 mov     rcx, [rsp+118h+var_40]
.text:0000000000005968                 xor     rcx, fs:28h
.text:0000000000005971                 mov     rax, rbp
.text:0000000000005974                 jnz     loc_5D71
.text:000000000000597A                 add     rsp, 0E8h
.text:0000000000005981                 pop     rbx
.text:0000000000005982                 pop     rbp
.text:0000000000005983                 pop     r12
.text:0000000000005985                 pop     r13
.text:0000000000005987                 pop     r14
.text:0000000000005989                 pop     r15
.text:000000000000598B                 retn
.text:000000000000598B ; ---------------------------------------------------------------------------
.text:000000000000598C                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: canonicalize_filename_mode+195↑j
.text:0000000000005990                                         ; canonicalize_filename_mode+1A0↑j
.text:0000000000005990                 mov     eax, [rsp+118h+var_FC]
.text:0000000000005994                 mov     rdx, [rsp+118h+stat_buf] ; stat_buf
.text:0000000000005999                 mov     rsi, rbp        ; filename
.text:000000000000599C                 mov     edi, 1          ; ver
.text:00000000000059A1                 test    eax, eax
.text:00000000000059A3                 jz      loc_5A60
.text:00000000000059A9                 call    ___xstat
.text:00000000000059AE                 test    eax, eax
.text:00000000000059B0                 setnz   al
.text:00000000000059B3
.text:00000000000059B3 loc_59B3:                               ; CODE XREF: canonicalize_filename_mode+32A↓j
.text:00000000000059B3                 test    al, al
.text:00000000000059B5                 jz      loc_5A40
.text:00000000000059BB                 call    ___errno_location
.text:00000000000059C0                 mov     r14, rax
.text:00000000000059C3                 mov     edx, [rax]
.text:00000000000059C5                 mov     eax, [rsp+118h+var_114]
.text:00000000000059C9                 test    eax, eax
.text:00000000000059CB                 jz      short loc_59FE
.text:00000000000059CD                 cmp     eax, 1
.text:00000000000059D0                 jnz     loc_58E6
.text:00000000000059D6                 lea     rsi, aLibs+6    ; accept
.text:00000000000059DD                 mov     rdi, r13        ; s
.text:00000000000059E0                 mov     dword ptr [rsp+118h+var_E0], edx
.text:00000000000059E4                 call    _strspn
.text:00000000000059E9                 cmp     byte ptr [r13+rax+0], 0
.text:00000000000059EF                 mov     edx, dword ptr [rsp+118h+var_E0]
.text:00000000000059F3                 jnz     short loc_59FE
.text:00000000000059F5                 cmp     edx, 2
.text:00000000000059F8                 jz      loc_5900
.text:00000000000059FE
.text:00000000000059FE loc_59FE:                               ; CODE XREF: canonicalize_filename_mode+28B↑j
.text:00000000000059FE                                         ; canonicalize_filename_mode+2B3↑j
.text:00000000000059FE                 mov     r12, r14
.text:0000000000005A01
.text:0000000000005A01 loc_5A01:                               ; CODE XREF: canonicalize_filename_mode+624↓j
.text:0000000000005A01                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000005A06                 mov     [rsp+118h+var_114], edx
.text:0000000000005A0A                 call    _free
.text:0000000000005A0F                 mov     rdi, rbp        ; ptr
.text:0000000000005A12                 call    _free
.text:0000000000005A17                 cmp     [rsp+118h+var_108], 0
.text:0000000000005A1D                 mov     edx, [rsp+118h+var_114]
.text:0000000000005A21                 jz      loc_5ADC
.text:0000000000005A27                 jmp     loc_5ACA
.text:0000000000005A27 ; ---------------------------------------------------------------------------
.text:0000000000005A2C                 align 10h
.text:0000000000005A30
.text:0000000000005A30 loc_5A30:                               ; CODE XREF: canonicalize_filename_mode+11D↑j
.text:0000000000005A30                 cmp     al, 2Eh ; '.'
.text:0000000000005A32                 jnz     loc_5871
.text:0000000000005A38                 jmp     loc_5900
.text:0000000000005A38 ; ---------------------------------------------------------------------------
.text:0000000000005A3D                 align 20h
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: canonicalize_filename_mode+275↑j
.text:0000000000005A40                 mov     eax, [rsp+118h+var_C0]
.text:0000000000005A44                 and     eax, 0F000h
.text:0000000000005A49                 cmp     eax, 0A000h
.text:0000000000005A4E                 jz      short loc_5A70
.text:0000000000005A50                 cmp     eax, 4000h
.text:0000000000005A55                 jz      loc_5900
.text:0000000000005A5B                 jmp     loc_58EE
.text:0000000000005A60 ; ---------------------------------------------------------------------------
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: canonicalize_filename_mode+263↑j
.text:0000000000005A60                 call    ___lxstat
.text:0000000000005A65                 test    eax, eax
.text:0000000000005A67                 setnz   al
.text:0000000000005A6A                 jmp     loc_59B3
.text:0000000000005A6A ; ---------------------------------------------------------------------------
.text:0000000000005A6F                 align 10h
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: canonicalize_filename_mode+30E↑j
.text:0000000000005A70                 cmp     [rsp+118h+var_108], 0
.text:0000000000005A76                 jz      loc_5C26
.text:0000000000005A7C
.text:0000000000005A7C loc_5A7C:                               ; CODE XREF: canonicalize_filename_mode+50F↓j
.text:0000000000005A7C                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000005A81                 mov     rsi, [rsp+118h+n]
.text:0000000000005A86                 mov     rdi, [rsp+118h+var_108]
.text:0000000000005A8B                 call    seen_file
.text:0000000000005A90                 test    al, al
.text:0000000000005A92                 jz      loc_5B50
.text:0000000000005A98                 cmp     [rsp+118h+var_114], 2
.text:0000000000005A9D                 jz      loc_5900
.text:0000000000005AA3                 call    ___errno_location
.text:0000000000005AA8                 mov     edx, 28h ; '('
.text:0000000000005AAD                 mov     r12, rax
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: canonicalize_filename_mode+5BF↓j
.text:0000000000005AB0                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000005AB5                 mov     [rsp+118h+var_114], edx
.text:0000000000005AB9                 call    _free
.text:0000000000005ABE                 mov     rdi, rbp        ; ptr
.text:0000000000005AC1                 call    _free
.text:0000000000005AC6                 mov     edx, [rsp+118h+var_114]
.text:0000000000005ACA
.text:0000000000005ACA loc_5ACA:                               ; CODE XREF: canonicalize_filename_mode+2E7↑j
.text:0000000000005ACA                 mov     rdi, [rsp+118h+var_108] ; ptr
.text:0000000000005ACF                 mov     [rsp+118h+var_114], edx
.text:0000000000005AD3                 call    hash_free
.text:0000000000005AD8                 mov     edx, [rsp+118h+var_114]
.text:0000000000005ADC
.text:0000000000005ADC loc_5ADC:                               ; CODE XREF: canonicalize_filename_mode+2E1↑j
.text:0000000000005ADC                 mov     [r12], edx
.text:0000000000005AE0                 xor     ebp, ebp
.text:0000000000005AE2                 jmp     loc_5960
.text:0000000000005AE2 ; ---------------------------------------------------------------------------
.text:0000000000005AE7                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 loc_5AF0:                               ; CODE XREF: canonicalize_filename_mode+E6↑j
.text:0000000000005AF0                 mov     r13, r14
.text:0000000000005AF3                 jmp     loc_584A
.text:0000000000005AF3 ; ---------------------------------------------------------------------------
.text:0000000000005AF8                 align 20h
.text:0000000000005B00
.text:0000000000005B00 loc_5B00:                               ; CODE XREF: canonicalize_filename_mode+12B↑j
.text:0000000000005B00                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:0000000000005B05                 jnz     loc_5871
.text:0000000000005B0B                 lea     rax, [rbp+1]
.text:0000000000005B0F                 mov     r14, r13
.text:0000000000005B12                 cmp     r15, rax
.text:0000000000005B15                 jbe     loc_57FB
.text:0000000000005B1B                 lea     rax, [r15-1]
.text:0000000000005B1F                 cmp     rbp, rax
.text:0000000000005B22                 jnb     loc_5D69
.text:0000000000005B28                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:0000000000005B2D                 mov     r15, rax
.text:0000000000005B30                 jz      loc_57FB
.text:0000000000005B36
.text:0000000000005B36 loc_5B36:                               ; CODE XREF: canonicalize_filename_mode+40E↓j
.text:0000000000005B36                 sub     r15, 1
.text:0000000000005B3A                 cmp     rbp, r15
.text:0000000000005B3D                 jz      loc_5900
.text:0000000000005B43                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000005B48                 jz      loc_5900
.text:0000000000005B4E                 jmp     short loc_5B36
.text:0000000000005B50 ; ---------------------------------------------------------------------------
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: canonicalize_filename_mode+352↑j
.text:0000000000005B50                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000005B55                 mov     rsi, [rsp+118h+n]
.text:0000000000005B5A                 mov     rdi, [rsp+118h+var_108]
.text:0000000000005B5F                 call    record_file
.text:0000000000005B64                 mov     rsi, [rsp+118h+var_A8]
.text:0000000000005B69                 mov     rdi, rbp        ; path
.text:0000000000005B6C                 call    areadlink_with_size
.text:0000000000005B71                 test    rax, rax
.text:0000000000005B74                 mov     r14, rax
.text:0000000000005B77                 jz      loc_5CE2
.text:0000000000005B7D                 mov     rdi, rax        ; s
.text:0000000000005B80                 call    _strlen
.text:0000000000005B85                 mov     rdi, r13        ; s
.text:0000000000005B88                 mov     r12, rax
.text:0000000000005B8B                 mov     [rsp+118h+n], rax
.text:0000000000005B90                 call    _strlen
.text:0000000000005B95                 cmp     [rsp+118h+var_E8], 0
.text:0000000000005B9B                 mov     rdx, rax
.text:0000000000005B9E                 lea     rcx, [r12+rdx+1]
.text:0000000000005BA3                 jz      loc_5C9F
.text:0000000000005BA9                 cmp     [rsp+118h+var_E8], rcx
.text:0000000000005BAE                 jnb     short loc_5BD1
.text:0000000000005BB0                 mov     rdi, [rsp+118h+ptr]
.text:0000000000005BB5                 mov     rsi, rcx
.text:0000000000005BB8                 mov     [rsp+118h+var_E0], rdx
.text:0000000000005BBD                 mov     [rsp+118h+var_E8], rcx
.text:0000000000005BC2                 call    xrealloc
.text:0000000000005BC7                 mov     rdx, [rsp+118h+var_E0]
.text:0000000000005BCC                 mov     [rsp+118h+ptr], rax
.text:0000000000005BD1
.text:0000000000005BD1 loc_5BD1:                               ; CODE XREF: canonicalize_filename_mode+46E↑j
.text:0000000000005BD1                                         ; canonicalize_filename_mode+58B↓j
.text:0000000000005BD1                 mov     r12, [rsp+118h+ptr]
.text:0000000000005BD6                 mov     rdi, [rsp+118h+n]
.text:0000000000005BDB                 add     rdx, 1          ; n
.text:0000000000005BDF                 mov     rsi, r13        ; src
.text:0000000000005BE2                 add     rdi, r12        ; dest
.text:0000000000005BE5                 mov     r13, r12
.text:0000000000005BE8                 call    _memmove
.text:0000000000005BED                 mov     rdx, [rsp+118h+n] ; n
.text:0000000000005BF2                 mov     rsi, r14        ; src
.text:0000000000005BF5                 mov     rdi, r12        ; dest
.text:0000000000005BF8                 call    _memcpy
.text:0000000000005BFD                 cmp     byte ptr [r14], 2Fh ; '/'
.text:0000000000005C01                 mov     [rsp+118h+n], r12
.text:0000000000005C06                 lea     rax, [rbp+1]
.text:0000000000005C0A                 jz      loc_5D04
.text:0000000000005C10                 cmp     r15, rax
.text:0000000000005C13                 ja      loc_5D22
.text:0000000000005C19
.text:0000000000005C19 loc_5C19:                               ; CODE XREF: canonicalize_filename_mode+5CB↓j
.text:0000000000005C19                                         ; canonicalize_filename_mode+5F5↓j ...
.text:0000000000005C19                 mov     rdi, r14        ; ptr
.text:0000000000005C1C                 call    _free
.text:0000000000005C21                 jmp     loc_5900
.text:0000000000005C26 ; ---------------------------------------------------------------------------
.text:0000000000005C26
.text:0000000000005C26 loc_5C26:                               ; CODE XREF: canonicalize_filename_mode+336↑j
.text:0000000000005C26                 lea     r8, triple_free
.text:0000000000005C2D                 lea     rcx, triple_compare_ino_str
.text:0000000000005C34                 xor     esi, esi
.text:0000000000005C36                 lea     rdx, triple_hash
.text:0000000000005C3D                 mov     edi, 7
.text:0000000000005C42                 call    hash_initialize
.text:0000000000005C47                 test    rax, rax
.text:0000000000005C4A                 mov     [rsp+118h+var_108], rax
.text:0000000000005C4F                 jnz     loc_5A7C
.text:0000000000005C55                 call    xalloc_die
.text:0000000000005C55 ; ---------------------------------------------------------------------------
.text:0000000000005C5A                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: canonicalize_filename_mode+5D↑j
.text:0000000000005C60                 mov     edi, 1000h
.text:0000000000005C65                 call    xmalloc
.text:0000000000005C6A                 mov     rbp, rax
.text:0000000000005C6D                 lea     rbx, [rax+1000h]
.text:0000000000005C74                 lea     r15, [rax+1]
.text:0000000000005C78                 mov     byte ptr [rax], 2Fh ; '/'
.text:0000000000005C7B                 jmp     loc_57D1
.text:0000000000005C80 ; ---------------------------------------------------------------------------
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: canonicalize_filename_mode+85↑j
.text:0000000000005C80                 mov     rdi, rbp
.text:0000000000005C83                 mov     esi, 1000h
.text:0000000000005C88                 call    xrealloc
.text:0000000000005C8D                 mov     rbp, rax
.text:0000000000005C90                 add     r15, rax
.text:0000000000005C93                 lea     rbx, [rax+1000h]
.text:0000000000005C9A                 jmp     loc_57D1
.text:0000000000005C9F ; ---------------------------------------------------------------------------
.text:0000000000005C9F
.text:0000000000005C9F loc_5C9F:                               ; CODE XREF: canonicalize_filename_mode+463↑j
.text:0000000000005C9F                 cmp     rcx, 1000h
.text:0000000000005CA6                 mov     eax, 1000h
.text:0000000000005CAB                 mov     [rsp+118h+var_E0], rdx
.text:0000000000005CB0                 cmovnb  rax, rcx
.text:0000000000005CB4                 mov     rdi, rax
.text:0000000000005CB7                 mov     [rsp+118h+var_E8], rax
.text:0000000000005CBC                 call    xmalloc
.text:0000000000005CC1                 mov     rdx, [rsp+118h+var_E0]
.text:0000000000005CC6                 mov     [rsp+118h+ptr], rax
.text:0000000000005CCB                 jmp     loc_5BD1
.text:0000000000005CD0 ; ---------------------------------------------------------------------------
.text:0000000000005CD0
.text:0000000000005CD0 loc_5CD0:                               ; CODE XREF: canonicalize_filename_mode+3E↑j
.text:0000000000005CD0                                         ; canonicalize_filename_mode+4A↑j
.text:0000000000005CD0                 call    ___errno_location
.text:0000000000005CD5                 xor     ebp, ebp
.text:0000000000005CD7                 mov     dword ptr [rax], 16h
.text:0000000000005CDD                 jmp     loc_5960
.text:0000000000005CE2 ; ---------------------------------------------------------------------------
.text:0000000000005CE2
.text:0000000000005CE2 loc_5CE2:                               ; CODE XREF: canonicalize_filename_mode+437↑j
.text:0000000000005CE2                 call    ___errno_location
.text:0000000000005CE7                 cmp     [rsp+118h+var_114], 2
.text:0000000000005CEC                 mov     r14, rax
.text:0000000000005CEF                 mov     edx, [rax]
.text:0000000000005CF1                 jnz     short loc_5CFC
.text:0000000000005CF3                 cmp     edx, 0Ch
.text:0000000000005CF6                 jnz     loc_5900
.text:0000000000005CFC
.text:0000000000005CFC loc_5CFC:                               ; CODE XREF: canonicalize_filename_mode+5B1↑j
.text:0000000000005CFC                 mov     r12, r14
.text:0000000000005CFF                 jmp     loc_5AB0
.text:0000000000005D04 ; ---------------------------------------------------------------------------
.text:0000000000005D04
.text:0000000000005D04 loc_5D04:                               ; CODE XREF: canonicalize_filename_mode+4CA↑j
.text:0000000000005D04                 mov     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000005D08                 mov     r15, rax
.text:0000000000005D0B                 jmp     loc_5C19
.text:0000000000005D10 ; ---------------------------------------------------------------------------
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: canonicalize_filename_mode+55↑j
.text:0000000000005D10                 call    ___errno_location
.text:0000000000005D15                 xor     ebp, ebp
.text:0000000000005D17                 mov     dword ptr [rax], 2
.text:0000000000005D1D                 jmp     loc_5960
.text:0000000000005D22 ; ---------------------------------------------------------------------------
.text:0000000000005D22
.text:0000000000005D22 loc_5D22:                               ; CODE XREF: canonicalize_filename_mode+4D3↑j
.text:0000000000005D22                 lea     rax, [r15-1]
.text:0000000000005D26                 cmp     rbp, rax
.text:0000000000005D29                 jnb     short loc_5D32
.text:0000000000005D2B                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:0000000000005D30                 jnz     short loc_5D3D
.text:0000000000005D32
.text:0000000000005D32 loc_5D32:                               ; CODE XREF: canonicalize_filename_mode+5E9↑j
.text:0000000000005D32                 mov     r15, rax
.text:0000000000005D35                 jmp     loc_5C19
.text:0000000000005D3A ; ---------------------------------------------------------------------------
.text:0000000000005D3A
.text:0000000000005D3A loc_5D3A:                               ; CODE XREF: canonicalize_filename_mode+615↓j
.text:0000000000005D3A                 mov     rax, r15
.text:0000000000005D3D
.text:0000000000005D3D loc_5D3D:                               ; CODE XREF: canonicalize_filename_mode+5F0↑j
.text:0000000000005D3D                 lea     r15, [rax-1]
.text:0000000000005D41                 cmp     rbp, r15
.text:0000000000005D44                 jz      loc_5C19
.text:0000000000005D4A                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000005D4F                 jz      loc_5C19
.text:0000000000005D55                 jmp     short loc_5D3A
.text:0000000000005D57 ; ---------------------------------------------------------------------------
.text:0000000000005D57
.text:0000000000005D57 loc_5D57:                               ; CODE XREF: canonicalize_filename_mode+1BA↑j
.text:0000000000005D57                 call    ___errno_location
.text:0000000000005D5C                 mov     edx, 14h
.text:0000000000005D61                 mov     r12, rax
.text:0000000000005D64                 jmp     loc_5A01
.text:0000000000005D69 ; ---------------------------------------------------------------------------
.text:0000000000005D69
.text:0000000000005D69 loc_5D69:                               ; CODE XREF: canonicalize_filename_mode+3E2↑j
.text:0000000000005D69                 mov     r15, rax
.text:0000000000005D6C                 jmp     loc_57FB
.text:0000000000005D71 ; ---------------------------------------------------------------------------
.text:0000000000005D71
.text:0000000000005D71 loc_5D71:                               ; CODE XREF: canonicalize_filename_mode+234↑j
.text:0000000000005D71                 call    ___stack_chk_fail
.text:0000000000005D71 ; } // starts at 5740
.text:0000000000005D71 canonicalize_filename_mode endp
.text:0000000000005D71
.text:0000000000005D71 ; ---------------------------------------------------------------------------
.text:0000000000005D76                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80
.text:0000000000005D80                 public close_stdout_set_file_name
.text:0000000000005D80 close_stdout_set_file_name proc near
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 mov     cs:file_name, rdi
.text:0000000000005D87                 retn
.text:0000000000005D87 ; } // starts at 5D80
.text:0000000000005D87 close_stdout_set_file_name endp
.text:0000000000005D87
.text:0000000000005D87 ; ---------------------------------------------------------------------------
.text:0000000000005D88                 align 10h
.text:0000000000005D90
.text:0000000000005D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D90
.text:0000000000005D90
.text:0000000000005D90                 public close_stdout_set_ignore_EPIPE
.text:0000000000005D90 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005D90 ; __unwind {
.text:0000000000005D90                 mov     cs:ignore_EPIPE, dil
.text:0000000000005D97                 retn
.text:0000000000005D97 ; } // starts at 5D90
.text:0000000000005D97 close_stdout_set_ignore_EPIPE endp
.text:0000000000005D97
.text:0000000000005D97 ; ---------------------------------------------------------------------------
.text:0000000000005D98                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DA0
.text:0000000000005DA0 ; Attributes: info_from_lumina
.text:0000000000005DA0
.text:0000000000005DA0 ; void __cdecl close_stdout()
.text:0000000000005DA0                 public close_stdout
.text:0000000000005DA0 close_stdout    proc near               ; DATA XREF: main+74↑o
.text:0000000000005DA0 ; __unwind {
.text:0000000000005DA0                 push    rbp
.text:0000000000005DA1                 push    rbx
.text:0000000000005DA2                 sub     rsp, 8
.text:0000000000005DA6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005DAD                 call    close_stream
.text:0000000000005DB2                 test    eax, eax
.text:0000000000005DB4                 jz      short loc_5DCC
.text:0000000000005DB6                 call    ___errno_location
.text:0000000000005DBB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005DC2                 mov     rbx, rax
.text:0000000000005DC5                 jz      short loc_5DE3
.text:0000000000005DC7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000005DCA                 jnz     short loc_5DE3
.text:0000000000005DCC
.text:0000000000005DCC loc_5DCC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000005DCC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005DD3                 call    close_stream
.text:0000000000005DD8                 test    eax, eax
.text:0000000000005DDA                 jnz     short loc_5E22
.text:0000000000005DDC                 add     rsp, 8
.text:0000000000005DE0                 pop     rbx
.text:0000000000005DE1                 pop     rbp
.text:0000000000005DE2                 retn
.text:0000000000005DE3 ; ---------------------------------------------------------------------------
.text:0000000000005DE3
.text:0000000000005DE3 loc_5DE3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005DE3                                         ; close_stdout+2A↑j
.text:0000000000005DE3                 lea     rsi, aWriteError ; "write error"
.text:0000000000005DEA                 xor     edi, edi        ; domainname
.text:0000000000005DEC                 mov     edx, 5          ; category
.text:0000000000005DF1                 call    _dcgettext
.text:0000000000005DF6                 mov     rdi, cs:file_name
.text:0000000000005DFD                 mov     rbp, rax
.text:0000000000005E00                 test    rdi, rdi
.text:0000000000005E03                 jz      short loc_5E2D
.text:0000000000005E05                 call    quotearg_colon
.text:0000000000005E0A                 mov     esi, [rbx]      ; errnum
.text:0000000000005E0C                 lea     rdx, aSS_1      ; "%s: %s"
.text:0000000000005E13                 mov     rcx, rax
.text:0000000000005E16                 mov     r8, rbp
.text:0000000000005E19                 xor     edi, edi        ; status
.text:0000000000005E1B                 xor     eax, eax
.text:0000000000005E1D                 call    _error
.text:0000000000005E22
.text:0000000000005E22 loc_5E22:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005E22                                         ; close_stdout+A2↓j
.text:0000000000005E22                 mov     edi, cs:exit_failure ; status
.text:0000000000005E28                 call    __exit
.text:0000000000005E2D ; ---------------------------------------------------------------------------
.text:0000000000005E2D
.text:0000000000005E2D loc_5E2D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000005E2D                 mov     esi, [rbx]      ; errnum
.text:0000000000005E2F                 lea     rdx, aS_0+2     ; format
.text:0000000000005E36                 mov     rcx, rax
.text:0000000000005E39                 xor     edi, edi        ; status
.text:0000000000005E3B                 xor     eax, eax
.text:0000000000005E3D                 call    _error
.text:0000000000005E42                 jmp     short loc_5E22
.text:0000000000005E42 ; } // starts at 5DA0
.text:0000000000005E42 close_stdout    endp
.text:0000000000005E42
.text:0000000000005E42 ; ---------------------------------------------------------------------------
.text:0000000000005E44                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50                 public dir_name
.text:0000000000005E50 dir_name        proc near               ; CODE XREF: find_mount_point+62↑p
.text:0000000000005E50                                         ; same_nameat_part_0+2B↓p ...
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 sub     rsp, 8
.text:0000000000005E54                 call    mdir_name
.text:0000000000005E59                 test    rax, rax
.text:0000000000005E5C                 jz      short loc_5E63
.text:0000000000005E5E                 add     rsp, 8
.text:0000000000005E62                 retn
.text:0000000000005E63 ; ---------------------------------------------------------------------------
.text:0000000000005E63
.text:0000000000005E63 loc_5E63:                               ; CODE XREF: dir_name+C↑j
.text:0000000000005E63                 call    xalloc_die
.text:0000000000005E63 ; } // starts at 5E50
.text:0000000000005E63 dir_name        endp
.text:0000000000005E63
.text:0000000000005E63 ; ---------------------------------------------------------------------------
.text:0000000000005E68                 align 10h
.text:0000000000005E70
.text:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E70
.text:0000000000005E70 ; Attributes: info_from_lumina
.text:0000000000005E70
.text:0000000000005E70 ; size_t __fastcall dir_len(const char *file)
.text:0000000000005E70                 public dir_len
.text:0000000000005E70 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:0000000000005E70 ; __unwind {
.text:0000000000005E70                 push    rbp
.text:0000000000005E71                 push    rbx
.text:0000000000005E72                 xor     ebp, ebp
.text:0000000000005E74                 mov     rbx, rdi
.text:0000000000005E77                 sub     rsp, 8
.text:0000000000005E7B                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000005E7E                 setz    bpl
.text:0000000000005E82                 call    last_component
.text:0000000000005E87                 mov     rcx, rax
.text:0000000000005E8A                 sub     rcx, rbx
.text:0000000000005E8D                 cmp     rcx, rbp
.text:0000000000005E90                 jbe     short loc_5EC0
.text:0000000000005E92                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000005E96                 lea     rdx, [rcx-1]
.text:0000000000005E9A                 jz      short loc_5EAE
.text:0000000000005E9C                 jmp     short loc_5EC0
.text:0000000000005E9C ; ---------------------------------------------------------------------------
.text:0000000000005E9E                 align 20h
.text:0000000000005EA0
.text:0000000000005EA0 loc_5EA0:                               ; CODE XREF: dir_len+41↓j
.text:0000000000005EA0                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000005EA5                 lea     rax, [rdx-1]
.text:0000000000005EA9                 jnz     short loc_5EB3
.text:0000000000005EAB                 mov     rdx, rax
.text:0000000000005EAE
.text:0000000000005EAE loc_5EAE:                               ; CODE XREF: dir_len+2A↑j
.text:0000000000005EAE                 cmp     rbp, rdx
.text:0000000000005EB1                 jnz     short loc_5EA0
.text:0000000000005EB3
.text:0000000000005EB3 loc_5EB3:                               ; CODE XREF: dir_len+39↑j
.text:0000000000005EB3                 add     rsp, 8
.text:0000000000005EB7                 mov     rax, rdx
.text:0000000000005EBA                 pop     rbx
.text:0000000000005EBB                 pop     rbp
.text:0000000000005EBC                 retn
.text:0000000000005EBC ; ---------------------------------------------------------------------------
.text:0000000000005EBD                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 loc_5EC0:                               ; CODE XREF: dir_len+20↑j
.text:0000000000005EC0                                         ; dir_len+2C↑j
.text:0000000000005EC0                 add     rsp, 8
.text:0000000000005EC4                 mov     rdx, rcx
.text:0000000000005EC7                 mov     rax, rdx
.text:0000000000005ECA                 pop     rbx
.text:0000000000005ECB                 pop     rbp
.text:0000000000005ECC                 retn
.text:0000000000005ECC ; } // starts at 5E70
.text:0000000000005ECC dir_len         endp
.text:0000000000005ECC
.text:0000000000005ECC ; ---------------------------------------------------------------------------
.text:0000000000005ECD                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: info_from_lumina
.text:0000000000005ED0
.text:0000000000005ED0 ; char *__fastcall mdir_name(const char *file)
.text:0000000000005ED0                 public mdir_name
.text:0000000000005ED0 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 push    rbp
.text:0000000000005ED1                 push    rbx
.text:0000000000005ED2                 mov     rbp, rdi
.text:0000000000005ED5                 sub     rsp, 8
.text:0000000000005ED9                 call    dir_len
.text:0000000000005EDE                 test    rax, rax
.text:0000000000005EE1                 mov     rbx, rax
.text:0000000000005EE4                 setz    al
.text:0000000000005EE7                 movzx   eax, al
.text:0000000000005EEA                 lea     rdi, [rbx+rax+1] ; size
.text:0000000000005EEF                 call    _malloc
.text:0000000000005EF4                 test    rax, rax
.text:0000000000005EF7                 mov     rcx, rax
.text:0000000000005EFA                 jz      short loc_5F16
.text:0000000000005EFC                 mov     rdx, rbx        ; n
.text:0000000000005EFF                 mov     rsi, rbp        ; src
.text:0000000000005F02                 mov     rdi, rax        ; dest
.text:0000000000005F05                 call    _memcpy
.text:0000000000005F0A                 test    rbx, rbx
.text:0000000000005F0D                 mov     rcx, rax
.text:0000000000005F10                 jz      short loc_5F20
.text:0000000000005F12
.text:0000000000005F12 loc_5F12:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000005F12                 mov     byte ptr [rcx+rbx], 0
.text:0000000000005F16
.text:0000000000005F16 loc_5F16:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000005F16                 add     rsp, 8
.text:0000000000005F1A                 mov     rax, rcx
.text:0000000000005F1D                 pop     rbx
.text:0000000000005F1E                 pop     rbp
.text:0000000000005F1F                 retn
.text:0000000000005F20 ; ---------------------------------------------------------------------------
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000005F20                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000005F23                 mov     ebx, 1
.text:0000000000005F28                 jmp     short loc_5F12
.text:0000000000005F28 ; } // starts at 5ED0
.text:0000000000005F28 mdir_name       endp
.text:0000000000005F28
.text:0000000000005F28 ; ---------------------------------------------------------------------------
.text:0000000000005F2A                 align 10h
.text:0000000000005F30
.text:0000000000005F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F30
.text:0000000000005F30 ; Attributes: info_from_lumina
.text:0000000000005F30
.text:0000000000005F30 ; char *__fastcall last_component(const char *name)
.text:0000000000005F30                 public last_component
.text:0000000000005F30 last_component  proc near               ; CODE XREF: dir_len+12↑p
.text:0000000000005F30                                         ; same_nameat+1E↓p ...
.text:0000000000005F30 ; __unwind {
.text:0000000000005F30                 movzx   edx, byte ptr [rdi]
.text:0000000000005F33                 mov     rax, rdi
.text:0000000000005F36                 cmp     dl, 2Fh ; '/'
.text:0000000000005F39                 jnz     short loc_5F4C
.text:0000000000005F3B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: last_component+1A↓j
.text:0000000000005F40                 add     rax, 1
.text:0000000000005F44                 movzx   edx, byte ptr [rax]
.text:0000000000005F47                 cmp     dl, 2Fh ; '/'
.text:0000000000005F4A                 jz      short loc_5F40
.text:0000000000005F4C
.text:0000000000005F4C loc_5F4C:                               ; CODE XREF: last_component+9↑j
.text:0000000000005F4C                 test    dl, dl
.text:0000000000005F4E                 jz      short locret_5F8A
.text:0000000000005F50                 mov     rcx, rax
.text:0000000000005F53                 xor     esi, esi
.text:0000000000005F55                 jmp     short loc_5F75
.text:0000000000005F55 ; ---------------------------------------------------------------------------
.text:0000000000005F57                 align 20h
.text:0000000000005F60
.text:0000000000005F60 loc_5F60:                               ; CODE XREF: last_component+48↓j
.text:0000000000005F60                 test    sil, sil
.text:0000000000005F63                 jz      short loc_5F6A
.text:0000000000005F65                 mov     rax, rcx
.text:0000000000005F68                 xor     esi, esi
.text:0000000000005F6A
.text:0000000000005F6A loc_5F6A:                               ; CODE XREF: last_component+33↑j
.text:0000000000005F6A                 add     rcx, 1
.text:0000000000005F6E                 movzx   edx, byte ptr [rcx]
.text:0000000000005F71                 test    dl, dl
.text:0000000000005F73                 jz      short locret_5F8A
.text:0000000000005F75
.text:0000000000005F75 loc_5F75:                               ; CODE XREF: last_component+25↑j
.text:0000000000005F75                                         ; last_component+58↓j
.text:0000000000005F75                 cmp     dl, 2Fh ; '/'
.text:0000000000005F78                 jnz     short loc_5F60
.text:0000000000005F7A                 add     rcx, 1
.text:0000000000005F7E                 movzx   edx, byte ptr [rcx]
.text:0000000000005F81                 mov     esi, 1
.text:0000000000005F86                 test    dl, dl
.text:0000000000005F88                 jnz     short loc_5F75
.text:0000000000005F8A
.text:0000000000005F8A locret_5F8A:                            ; CODE XREF: last_component+1E↑j
.text:0000000000005F8A                                         ; last_component+43↑j
.text:0000000000005F8A                 rep retn
.text:0000000000005F8A ; } // starts at 5F30
.text:0000000000005F8A last_component  endp
.text:0000000000005F8A
.text:0000000000005F8A ; ---------------------------------------------------------------------------
.text:0000000000005F8C                 align 10h
.text:0000000000005F90
.text:0000000000005F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F90
.text:0000000000005F90 ; Attributes: info_from_lumina
.text:0000000000005F90
.text:0000000000005F90 ; size_t __fastcall base_len(const char *name)
.text:0000000000005F90                 public base_len
.text:0000000000005F90 base_len        proc near               ; CODE XREF: same_nameat+34↓p
.text:0000000000005F90                                         ; same_nameat+3F↓p
.text:0000000000005F90 ; __unwind {
.text:0000000000005F90                 push    rbx
.text:0000000000005F91                 mov     rbx, rdi
.text:0000000000005F94                 call    _strlen
.text:0000000000005F99                 cmp     rax, 1
.text:0000000000005F9D                 jbe     short loc_5FAA
.text:0000000000005F9F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000005FA4                 lea     rdx, [rax-1]
.text:0000000000005FA8                 jz      short loc_5FB8
.text:0000000000005FAA
.text:0000000000005FAA loc_5FAA:                               ; CODE XREF: base_len+D↑j
.text:0000000000005FAA                 pop     rbx
.text:0000000000005FAB                 retn
.text:0000000000005FAB ; ---------------------------------------------------------------------------
.text:0000000000005FAC                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 loc_5FB0:                               ; CODE XREF: base_len+37↓j
.text:0000000000005FB0                 mov     rdx, rax
.text:0000000000005FB3                 nop     dword ptr [rax+rax+00h]
.text:0000000000005FB8
.text:0000000000005FB8 loc_5FB8:                               ; CODE XREF: base_len+18↑j
.text:0000000000005FB8                 cmp     rdx, 1
.text:0000000000005FBC                 jz      short loc_5FD0
.text:0000000000005FBE                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000005FC3                 lea     rax, [rdx-1]
.text:0000000000005FC7                 jz      short loc_5FB0
.text:0000000000005FC9                 mov     rax, rdx
.text:0000000000005FCC                 pop     rbx
.text:0000000000005FCD                 retn
.text:0000000000005FCD ; ---------------------------------------------------------------------------
.text:0000000000005FCE                 align 10h
.text:0000000000005FD0
.text:0000000000005FD0 loc_5FD0:                               ; CODE XREF: base_len+2C↑j
.text:0000000000005FD0                 mov     eax, 1
.text:0000000000005FD5                 pop     rbx
.text:0000000000005FD6                 retn
.text:0000000000005FD6 ; } // starts at 5F90
.text:0000000000005FD6 base_len        endp
.text:0000000000005FD6
.text:0000000000005FD6 ; ---------------------------------------------------------------------------
.text:0000000000005FD7                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FE0
.text:0000000000005FE0 ; Attributes: info_from_lumina
.text:0000000000005FE0
.text:0000000000005FE0 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:0000000000005FE0                 public record_file
.text:0000000000005FE0 record_file     proc near               ; CODE XREF: canonicalize_filename_mode+41F↑p
.text:0000000000005FE0 ; __unwind {
.text:0000000000005FE0                 test    rdi, rdi
.text:0000000000005FE3                 jz      short locret_6060
.text:0000000000005FE5                 push    r13
.text:0000000000005FE7                 push    r12
.text:0000000000005FE9                 mov     r13, rdi
.text:0000000000005FEC                 push    rbp
.text:0000000000005FED                 push    rbx
.text:0000000000005FEE                 mov     r12, rsi
.text:0000000000005FF1                 mov     edi, 18h
.text:0000000000005FF6                 mov     rbp, rdx
.text:0000000000005FF9                 sub     rsp, 8
.text:0000000000005FFD                 call    xmalloc
.text:0000000000006002                 mov     rdi, r12        ; src
.text:0000000000006005                 mov     rbx, rax
.text:0000000000006008                 call    xstrdup
.text:000000000000600D                 mov     [rbx], rax
.text:0000000000006010                 mov     rax, [rbp+8]
.text:0000000000006014                 mov     rsi, rbx
.text:0000000000006017                 mov     rdi, r13
.text:000000000000601A                 mov     [rbx+8], rax
.text:000000000000601E                 mov     rax, [rbp+0]
.text:0000000000006022                 mov     [rbx+10h], rax
.text:0000000000006026                 call    hash_insert
.text:000000000000602B                 test    rax, rax
.text:000000000000602E                 jz      short loc_6062
.text:0000000000006030                 cmp     rbx, rax
.text:0000000000006033                 jz      short loc_6050
.text:0000000000006035                 add     rsp, 8
.text:0000000000006039                 mov     rdi, rbx        ; ptr
.text:000000000000603C                 pop     rbx
.text:000000000000603D                 pop     rbp
.text:000000000000603E                 pop     r12
.text:0000000000006040                 pop     r13
.text:0000000000006042                 jmp     triple_free
.text:0000000000006042 ; ---------------------------------------------------------------------------
.text:0000000000006047                 align 10h
.text:0000000000006050
.text:0000000000006050 loc_6050:                               ; CODE XREF: record_file+53↑j
.text:0000000000006050                 add     rsp, 8
.text:0000000000006054                 pop     rbx
.text:0000000000006055                 pop     rbp
.text:0000000000006056                 pop     r12
.text:0000000000006058                 pop     r13
.text:000000000000605A                 retn
.text:000000000000605A ; ---------------------------------------------------------------------------
.text:000000000000605B                 align 20h
.text:0000000000006060
.text:0000000000006060 locret_6060:                            ; CODE XREF: record_file+3↑j
.text:0000000000006060                 rep retn
.text:0000000000006062 ; ---------------------------------------------------------------------------
.text:0000000000006062
.text:0000000000006062 loc_6062:                               ; CODE XREF: record_file+4E↑j
.text:0000000000006062                 call    xalloc_die
.text:0000000000006062 ; } // starts at 5FE0
.text:0000000000006062 record_file     endp
.text:0000000000006062
.text:0000000000006062 ; ---------------------------------------------------------------------------
.text:0000000000006067                 align 10h
.text:0000000000006070
.text:0000000000006070 ; =============== S U B R O U T I N E =======================================
.text:0000000000006070
.text:0000000000006070 ; Attributes: info_from_lumina
.text:0000000000006070
.text:0000000000006070 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:0000000000006070                 public seen_file
.text:0000000000006070 seen_file       proc near               ; CODE XREF: canonicalize_filename_mode+34B↑p
.text:0000000000006070
.text:0000000000006070 var_28          = qword ptr -28h
.text:0000000000006070 var_20          = qword ptr -20h
.text:0000000000006070 var_18          = qword ptr -18h
.text:0000000000006070 var_10          = qword ptr -10h
.text:0000000000006070
.text:0000000000006070 ; __unwind {
.text:0000000000006070                 sub     rsp, 28h
.text:0000000000006074                 mov     rax, fs:28h
.text:000000000000607D                 mov     [rsp+28h+var_10], rax
.text:0000000000006082                 xor     eax, eax
.text:0000000000006084                 test    rdi, rdi
.text:0000000000006087                 jz      short loc_60AC
.text:0000000000006089                 mov     rax, [rdx+8]
.text:000000000000608D                 mov     [rsp+28h+var_28], rsi
.text:0000000000006091                 mov     rsi, rsp
.text:0000000000006094                 mov     [rsp+28h+var_20], rax
.text:0000000000006099                 mov     rax, [rdx]
.text:000000000000609C                 mov     [rsp+28h+var_18], rax
.text:00000000000060A1                 call    hash_lookup
.text:00000000000060A6                 test    rax, rax
.text:00000000000060A9                 setnz   al
.text:00000000000060AC
.text:00000000000060AC loc_60AC:                               ; CODE XREF: seen_file+17↑j
.text:00000000000060AC                 mov     rcx, [rsp+28h+var_10]
.text:00000000000060B1                 xor     rcx, fs:28h
.text:00000000000060BA                 jnz     short loc_60C1
.text:00000000000060BC                 add     rsp, 28h
.text:00000000000060C0                 retn
.text:00000000000060C1 ; ---------------------------------------------------------------------------
.text:00000000000060C1
.text:00000000000060C1 loc_60C1:                               ; CODE XREF: seen_file+4A↑j
.text:00000000000060C1                 call    ___stack_chk_fail
.text:00000000000060C1 ; } // starts at 6070
.text:00000000000060C1 seen_file       endp
.text:00000000000060C1
.text:00000000000060C1 ; ---------------------------------------------------------------------------
.text:00000000000060C6                 align 10h
.text:00000000000060D0
.text:00000000000060D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060D0
.text:00000000000060D0 ; Attributes: info_from_lumina
.text:00000000000060D0
.text:00000000000060D0 ; size_t __fastcall next_prime(size_t candidate)
.text:00000000000060D0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:00000000000060D0                                         ; hash_rehash+7B↓p
.text:00000000000060D0 ; __unwind {
.text:00000000000060D0                 cmp     rdi, 0Ah
.text:00000000000060D4                 mov     eax, 0Ah
.text:00000000000060D9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:00000000000060E3                 cmovb   rdi, rax
.text:00000000000060E7                 or      rdi, 1
.text:00000000000060EB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000060EF                 jz      short loc_615F
.text:00000000000060F1                 nop     dword ptr [rax+00000000h]
.text:00000000000060F8
.text:00000000000060F8 loc_60F8:                               ; CODE XREF: next_prime+8D↓j
.text:00000000000060F8                 mov     rax, rdi
.text:00000000000060FB                 mov     rcx, rdi
.text:00000000000060FE                 mul     r9
.text:0000000000006101                 mov     rax, rdx
.text:0000000000006104                 shr     rax, 1
.text:0000000000006107                 lea     rax, [rax+rax*2]
.text:000000000000610B                 sub     rcx, rax
.text:000000000000610E                 cmp     rdi, 9
.text:0000000000006112                 mov     rax, rcx
.text:0000000000006115                 jbe     short loc_6150
.text:0000000000006117                 test    rcx, rcx
.text:000000000000611A                 jz      short loc_6155
.text:000000000000611C                 mov     r8d, 10h
.text:0000000000006122                 mov     esi, 9
.text:0000000000006127                 mov     ecx, 3
.text:000000000000612C                 jmp     short loc_6139
.text:000000000000612C ; ---------------------------------------------------------------------------
.text:000000000000612E                 align 10h
.text:0000000000006130
.text:0000000000006130 loc_6130:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000006130                 add     r8, 8
.text:0000000000006134                 test    rdx, rdx
.text:0000000000006137                 jz      short loc_6155
.text:0000000000006139
.text:0000000000006139 loc_6139:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000006139                 add     rcx, 2
.text:000000000000613D                 xor     edx, edx
.text:000000000000613F                 mov     rax, rdi
.text:0000000000006142                 div     rcx
.text:0000000000006145                 add     rsi, r8
.text:0000000000006148                 cmp     rsi, rdi
.text:000000000000614B                 mov     rax, rdx
.text:000000000000614E                 jb      short loc_6130
.text:0000000000006150
.text:0000000000006150 loc_6150:                               ; CODE XREF: next_prime+45↑j
.text:0000000000006150                 test    rax, rax
.text:0000000000006153                 jnz     short loc_615F
.text:0000000000006155
.text:0000000000006155 loc_6155:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000006155                                         ; next_prime+67↑j
.text:0000000000006155                 add     rdi, 2
.text:0000000000006159                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000615D                 jnz     short loc_60F8
.text:000000000000615F
.text:000000000000615F loc_615F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000615F                                         ; next_prime+83↑j
.text:000000000000615F                 mov     rax, rdi
.text:0000000000006162                 retn
.text:0000000000006162 ; } // starts at 60D0
.text:0000000000006162 next_prime      endp
.text:0000000000006162
.text:0000000000006162 ; ---------------------------------------------------------------------------
.text:0000000000006163                 align 10h
.text:0000000000006170
.text:0000000000006170 ; =============== S U B R O U T I N E =======================================
.text:0000000000006170
.text:0000000000006170
.text:0000000000006170 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000006170 ; __unwind {
.text:0000000000006170                 mov     rax, rdi
.text:0000000000006173                 xor     edx, edx
.text:0000000000006175                 ror     rax, 3
.text:0000000000006179                 div     rsi
.text:000000000000617C                 mov     rax, rdx
.text:000000000000617F                 retn
.text:000000000000617F ; } // starts at 6170
.text:000000000000617F raw_hasher      endp
.text:000000000000617F
.text:0000000000006180
.text:0000000000006180 ; =============== S U B R O U T I N E =======================================
.text:0000000000006180
.text:0000000000006180
.text:0000000000006180 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000006180 ; __unwind {
.text:0000000000006180                 cmp     rdi, rsi
.text:0000000000006183                 setz    al
.text:0000000000006186                 retn
.text:0000000000006186 ; } // starts at 6180
.text:0000000000006186 raw_comparator  endp
.text:0000000000006186
.text:0000000000006186 ; ---------------------------------------------------------------------------
.text:0000000000006187                 align 10h
.text:0000000000006190
.text:0000000000006190 ; =============== S U B R O U T I N E =======================================
.text:0000000000006190
.text:0000000000006190 ; Attributes: info_from_lumina
.text:0000000000006190
.text:0000000000006190 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000006190 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000006190                                         ; transfer_entries+65↓p ...
.text:0000000000006190 ; __unwind {
.text:0000000000006190                 push    rbx
.text:0000000000006191                 mov     rbx, rdi
.text:0000000000006194                 mov     rdi, rsi
.text:0000000000006197                 mov     rsi, [rbx+10h]
.text:000000000000619B                 call    qword ptr [rbx+30h]
.text:000000000000619E                 cmp     [rbx+10h], rax
.text:00000000000061A2                 jbe     short loc_61AD
.text:00000000000061A4                 shl     rax, 4
.text:00000000000061A8                 add     rax, [rbx]
.text:00000000000061AB                 pop     rbx
.text:00000000000061AC                 retn
.text:00000000000061AD ; ---------------------------------------------------------------------------
.text:00000000000061AD
.text:00000000000061AD loc_61AD:                               ; CODE XREF: safe_hasher+12↑j
.text:00000000000061AD                 call    _abort
.text:00000000000061AD ; } // starts at 6190
.text:00000000000061AD safe_hasher     endp
.text:00000000000061AD
.text:00000000000061AD ; ---------------------------------------------------------------------------
.text:00000000000061B2                 align 20h
.text:00000000000061C0
.text:00000000000061C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061C0
.text:00000000000061C0 ; Attributes: info_from_lumina
.text:00000000000061C0
.text:00000000000061C0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:00000000000061C0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:00000000000061C0                                         ; hash_insert_if_absent+1CF↓p ...
.text:00000000000061C0 ; __unwind {
.text:00000000000061C0                 push    r14
.text:00000000000061C2                 push    r13
.text:00000000000061C4                 mov     r14, rdx
.text:00000000000061C7                 push    r12
.text:00000000000061C9                 push    rbp
.text:00000000000061CA                 mov     r12, rdi
.text:00000000000061CD                 push    rbx
.text:00000000000061CE                 mov     rbp, rsi
.text:00000000000061D1                 mov     r13d, ecx
.text:00000000000061D4                 call    safe_hasher
.text:00000000000061D9                 mov     [r14], rax
.text:00000000000061DC                 mov     rsi, [rax]
.text:00000000000061DF                 test    rsi, rsi
.text:00000000000061E2                 jz      loc_62D0
.text:00000000000061E8                 cmp     rsi, rbp
.text:00000000000061EB                 mov     rbx, rax
.text:00000000000061EE                 jz      loc_6283
.text:00000000000061F4                 mov     rdi, rbp
.text:00000000000061F7                 call    qword ptr [r12+38h]
.text:00000000000061FC                 test    al, al
.text:00000000000061FE                 jnz     loc_6280
.text:0000000000006204                 mov     rax, [rbx+8]
.text:0000000000006208                 test    rax, rax
.text:000000000000620B                 jz      loc_62D0
.text:0000000000006211                 mov     rsi, [rax]
.text:0000000000006214                 cmp     rbp, rsi
.text:0000000000006217                 jnz     short loc_6239
.text:0000000000006219                 jmp     short loc_624C
.text:0000000000006219 ; ---------------------------------------------------------------------------
.text:000000000000621B                 align 20h
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000006220                 mov     rbx, [rbx+8]
.text:0000000000006224                 mov     rax, [rbx+8]
.text:0000000000006228                 test    rax, rax
.text:000000000000622B                 jz      loc_62D0
.text:0000000000006231                 mov     rsi, [rax]
.text:0000000000006234                 cmp     rsi, rbp
.text:0000000000006237                 jz      short loc_624C
.text:0000000000006239
.text:0000000000006239 loc_6239:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000006239                 mov     rdi, rbp
.text:000000000000623C                 call    qword ptr [r12+38h]
.text:0000000000006241                 test    al, al
.text:0000000000006243                 jz      short loc_6220
.text:0000000000006245                 mov     rax, [rbx+8]
.text:0000000000006249                 mov     rsi, [rax]
.text:000000000000624C
.text:000000000000624C loc_624C:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000624C                                         ; hash_find_entry+77↑j
.text:000000000000624C                 test    r13b, r13b
.text:000000000000624F                 jz      short loc_626E
.text:0000000000006251                 mov     rdx, [rax+8]
.text:0000000000006255                 mov     [rbx+8], rdx
.text:0000000000006259                 mov     qword ptr [rax], 0
.text:0000000000006260                 mov     rdx, [r12+48h]
.text:0000000000006265                 mov     [rax+8], rdx
.text:0000000000006269                 mov     [r12+48h], rax
.text:000000000000626E
.text:000000000000626E loc_626E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000626E                                         ; hash_find_entry+C6↓j ...
.text:000000000000626E                 pop     rbx
.text:000000000000626F                 mov     rax, rsi
.text:0000000000006272                 pop     rbp
.text:0000000000006273                 pop     r12
.text:0000000000006275                 pop     r13
.text:0000000000006277                 pop     r14
.text:0000000000006279                 retn
.text:0000000000006279 ; ---------------------------------------------------------------------------
.text:000000000000627A                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000006280                 mov     rsi, [rbx]
.text:0000000000006283
.text:0000000000006283 loc_6283:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000006283                 test    r13b, r13b
.text:0000000000006286                 jz      short loc_626E
.text:0000000000006288                 mov     rax, [rbx+8]
.text:000000000000628C                 test    rax, rax
.text:000000000000628F                 jz      short loc_62C0
.text:0000000000006291                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000006295                 movups  xmmword ptr [rbx], xmm0
.text:0000000000006298                 mov     qword ptr [rax], 0
.text:000000000000629F                 mov     rdx, [r12+48h]
.text:00000000000062A4                 mov     [rax+8], rdx
.text:00000000000062A8                 mov     [r12+48h], rax
.text:00000000000062AD                 mov     rax, rsi
.text:00000000000062B0                 pop     rbx
.text:00000000000062B1                 pop     rbp
.text:00000000000062B2                 pop     r12
.text:00000000000062B4                 pop     r13
.text:00000000000062B6                 pop     r14
.text:00000000000062B8                 retn
.text:00000000000062B8 ; ---------------------------------------------------------------------------
.text:00000000000062B9                 align 20h
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:00000000000062C0                 mov     qword ptr [rbx], 0
.text:00000000000062C7                 jmp     short loc_626E
.text:00000000000062C7 ; ---------------------------------------------------------------------------
.text:00000000000062C9                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: hash_find_entry+22↑j
.text:00000000000062D0                                         ; hash_find_entry+4B↑j ...
.text:00000000000062D0                 xor     esi, esi
.text:00000000000062D2                 pop     rbx
.text:00000000000062D3                 mov     rax, rsi
.text:00000000000062D6                 pop     rbp
.text:00000000000062D7                 pop     r12
.text:00000000000062D9                 pop     r13
.text:00000000000062DB                 pop     r14
.text:00000000000062DD                 retn
.text:00000000000062DD ; } // starts at 61C0
.text:00000000000062DD hash_find_entry endp
.text:00000000000062DD
.text:00000000000062DD ; ---------------------------------------------------------------------------
.text:00000000000062DE                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0 ; Attributes: info_from_lumina
.text:00000000000062E0
.text:00000000000062E0 ; _Bool check_tuning(Hash_table *table)
.text:00000000000062E0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:00000000000062E0                                         ; hash_initialize+11B↓p ...
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 mov     rdx, [rdi]
.text:00000000000062E3                 lea     rcx, default_tuning
.text:00000000000062EA                 mov     eax, 1
.text:00000000000062EF                 cmp     rdx, rcx
.text:00000000000062F2                 jz      short locret_6355
.text:00000000000062F4                 movss   xmm0, dword ptr [rdx+8]
.text:00000000000062F9                 ucomiss xmm0, cs:dword_10014
.text:0000000000006300                 jbe     short loc_6350
.text:0000000000006302                 movss   xmm1, cs:dword_10018
.text:000000000000630A                 ucomiss xmm1, xmm0
.text:000000000000630D                 jbe     short loc_6350
.text:000000000000630F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000006314                 ucomiss xmm1, cs:dword_1001C
.text:000000000000631B                 jbe     short loc_6350
.text:000000000000631D                 movss   xmm1, dword ptr [rdx]
.text:0000000000006321                 ucomiss xmm1, cs:dword_10020
.text:0000000000006328                 jb      short loc_6350
.text:000000000000632A                 addss   xmm1, cs:dword_10014
.text:0000000000006332                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000006337                 ucomiss xmm2, xmm1
.text:000000000000633A                 jbe     short loc_6350
.text:000000000000633C                 movss   xmm3, cs:dword_10024
.text:0000000000006344                 ucomiss xmm3, xmm2
.text:0000000000006347                 jb      short loc_6350
.text:0000000000006349                 ucomiss xmm0, xmm1
.text:000000000000634C                 ja      short locret_6355
.text:000000000000634E                 xchg    ax, ax
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000006350                                         ; check_tuning+2D↑j ...
.text:0000000000006350                 mov     [rdi], rcx
.text:0000000000006353                 xor     eax, eax
.text:0000000000006355
.text:0000000000006355 locret_6355:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000006355                                         ; check_tuning+6C↑j
.text:0000000000006355                 rep retn
.text:0000000000006355 ; } // starts at 62E0
.text:0000000000006355 check_tuning    endp
.text:0000000000006355
.text:0000000000006355 ; ---------------------------------------------------------------------------
.text:0000000000006357                 align 20h
.text:0000000000006360
.text:0000000000006360 ; =============== S U B R O U T I N E =======================================
.text:0000000000006360
.text:0000000000006360 ; Attributes: info_from_lumina
.text:0000000000006360
.text:0000000000006360 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000006360 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000006360                                         ; hash_rehash+152↓p ...
.text:0000000000006360 ; __unwind {
.text:0000000000006360                 push    r15
.text:0000000000006362                 push    r14
.text:0000000000006364                 push    r13
.text:0000000000006366                 push    r12
.text:0000000000006368                 push    rbp
.text:0000000000006369                 push    rbx
.text:000000000000636A                 sub     rsp, 8
.text:000000000000636E                 mov     r12, [rsi]
.text:0000000000006371                 cmp     r12, [rsi+8]
.text:0000000000006375                 jnb     loc_6458
.text:000000000000637B                 mov     rbp, rdi
.text:000000000000637E                 mov     r13, rsi
.text:0000000000006381                 mov     r14d, edx
.text:0000000000006384                 nop     dword ptr [rax+00h]
.text:0000000000006388
.text:0000000000006388 loc_6388:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000006388                 mov     r15, [r12]
.text:000000000000638C                 test    r15, r15
.text:000000000000638F                 jz      loc_644A
.text:0000000000006395                 mov     rbx, [r12+8]
.text:000000000000639A                 test    rbx, rbx
.text:000000000000639D                 jnz     short loc_63BC
.text:000000000000639F                 jmp     short loc_63FB
.text:000000000000639F ; ---------------------------------------------------------------------------
.text:00000000000063A1                 align 8
.text:00000000000063A8
.text:00000000000063A8 loc_63A8:                               ; CODE XREF: transfer_entries+72↓j
.text:00000000000063A8                 mov     rcx, [rax+8]
.text:00000000000063AC                 test    rdx, rdx
.text:00000000000063AF                 mov     [rbx+8], rcx
.text:00000000000063B3                 mov     [rax+8], rbx
.text:00000000000063B7                 mov     rbx, rdx
.text:00000000000063BA                 jz      short loc_63F7
.text:00000000000063BC
.text:00000000000063BC loc_63BC:                               ; CODE XREF: transfer_entries+3D↑j
.text:00000000000063BC                                         ; transfer_entries+95↓j
.text:00000000000063BC                 mov     r15, [rbx]
.text:00000000000063BF                 mov     rdi, rbp
.text:00000000000063C2                 mov     rsi, r15
.text:00000000000063C5                 call    safe_hasher
.text:00000000000063CA                 cmp     qword ptr [rax], 0
.text:00000000000063CE                 mov     rdx, [rbx+8]
.text:00000000000063D2                 jnz     short loc_63A8
.text:00000000000063D4                 mov     [rax], r15
.text:00000000000063D7                 add     qword ptr [rbp+18h], 1
.text:00000000000063DC                 test    rdx, rdx
.text:00000000000063DF                 mov     qword ptr [rbx], 0
.text:00000000000063E6                 mov     rax, [rbp+48h]
.text:00000000000063EA                 mov     [rbx+8], rax
.text:00000000000063EE                 mov     [rbp+48h], rbx
.text:00000000000063F2                 mov     rbx, rdx
.text:00000000000063F5                 jnz     short loc_63BC
.text:00000000000063F7
.text:00000000000063F7 loc_63F7:                               ; CODE XREF: transfer_entries+5A↑j
.text:00000000000063F7                 mov     r15, [r12]
.text:00000000000063FB
.text:00000000000063FB loc_63FB:                               ; CODE XREF: transfer_entries+3F↑j
.text:00000000000063FB                 test    r14b, r14b
.text:00000000000063FE                 mov     qword ptr [r12+8], 0
.text:0000000000006407                 jnz     short loc_644A
.text:0000000000006409                 mov     rsi, r15
.text:000000000000640C                 mov     rdi, rbp
.text:000000000000640F                 call    safe_hasher
.text:0000000000006414                 cmp     qword ptr [rax], 0
.text:0000000000006418                 mov     rbx, rax
.text:000000000000641B                 jz      short loc_6470
.text:000000000000641D                 mov     rax, [rbp+48h]
.text:0000000000006421                 test    rax, rax
.text:0000000000006424                 jz      short loc_6480
.text:0000000000006426                 mov     rdx, [rax+8]
.text:000000000000642A                 mov     [rbp+48h], rdx
.text:000000000000642E
.text:000000000000642E loc_642E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000642E                 mov     rdx, [rbx+8]
.text:0000000000006432                 mov     [rax], r15
.text:0000000000006435                 mov     [rax+8], rdx
.text:0000000000006439                 mov     [rbx+8], rax
.text:000000000000643D
.text:000000000000643D loc_643D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000643D                 mov     qword ptr [r12], 0
.text:0000000000006445                 sub     qword ptr [r13+18h], 1
.text:000000000000644A
.text:000000000000644A loc_644A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000644A                                         ; transfer_entries+A7↑j
.text:000000000000644A                 add     r12, 10h
.text:000000000000644E                 cmp     [r13+8], r12
.text:0000000000006452                 ja      loc_6388
.text:0000000000006458
.text:0000000000006458 loc_6458:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000006458                 add     rsp, 8
.text:000000000000645C                 mov     eax, 1
.text:0000000000006461                 pop     rbx
.text:0000000000006462                 pop     rbp
.text:0000000000006463                 pop     r12
.text:0000000000006465                 pop     r13
.text:0000000000006467                 pop     r14
.text:0000000000006469                 pop     r15
.text:000000000000646B                 retn
.text:000000000000646B ; ---------------------------------------------------------------------------
.text:000000000000646C                 align 10h
.text:0000000000006470
.text:0000000000006470 loc_6470:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000006470                 mov     [rax], r15
.text:0000000000006473                 add     qword ptr [rbp+18h], 1
.text:0000000000006478                 jmp     short loc_643D
.text:0000000000006478 ; ---------------------------------------------------------------------------
.text:000000000000647A                 align 20h
.text:0000000000006480
.text:0000000000006480 loc_6480:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000006480                 mov     edi, 10h        ; size
.text:0000000000006485                 call    _malloc
.text:000000000000648A                 test    rax, rax
.text:000000000000648D                 jnz     short loc_642E
.text:000000000000648F                 add     rsp, 8
.text:0000000000006493                 xor     eax, eax
.text:0000000000006495                 pop     rbx
.text:0000000000006496                 pop     rbp
.text:0000000000006497                 pop     r12
.text:0000000000006499                 pop     r13
.text:000000000000649B                 pop     r14
.text:000000000000649D                 pop     r15
.text:000000000000649F                 retn
.text:000000000000649F ; } // starts at 6360
.text:000000000000649F transfer_entries endp
.text:000000000000649F
.text:00000000000064A0
.text:00000000000064A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064A0
.text:00000000000064A0
.text:00000000000064A0                 public hash_get_n_buckets
.text:00000000000064A0 hash_get_n_buckets proc near
.text:00000000000064A0 ; __unwind {
.text:00000000000064A0                 mov     rax, [rdi+10h]
.text:00000000000064A4                 retn
.text:00000000000064A4 ; } // starts at 64A0
.text:00000000000064A4 hash_get_n_buckets endp
.text:00000000000064A4
.text:00000000000064A4 ; ---------------------------------------------------------------------------
.text:00000000000064A5                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0
.text:00000000000064B0                 public hash_get_n_buckets_used
.text:00000000000064B0 hash_get_n_buckets_used proc near
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 mov     rax, [rdi+18h]
.text:00000000000064B4                 retn
.text:00000000000064B4 ; } // starts at 64B0
.text:00000000000064B4 hash_get_n_buckets_used endp
.text:00000000000064B4
.text:00000000000064B4 ; ---------------------------------------------------------------------------
.text:00000000000064B5                 align 20h
.text:00000000000064C0
.text:00000000000064C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064C0
.text:00000000000064C0
.text:00000000000064C0                 public hash_get_n_entries
.text:00000000000064C0 hash_get_n_entries proc near
.text:00000000000064C0 ; __unwind {
.text:00000000000064C0                 mov     rax, [rdi+20h]
.text:00000000000064C4                 retn
.text:00000000000064C4 ; } // starts at 64C0
.text:00000000000064C4 hash_get_n_entries endp
.text:00000000000064C4
.text:00000000000064C4 ; ---------------------------------------------------------------------------
.text:00000000000064C5                 align 10h
.text:00000000000064D0
.text:00000000000064D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064D0
.text:00000000000064D0 ; Attributes: info_from_lumina
.text:00000000000064D0
.text:00000000000064D0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:00000000000064D0                 public hash_get_max_bucket_length
.text:00000000000064D0 hash_get_max_bucket_length proc near
.text:00000000000064D0 ; __unwind {
.text:00000000000064D0                 mov     rsi, [rdi]
.text:00000000000064D3                 mov     rdi, [rdi+8]
.text:00000000000064D7                 xor     eax, eax
.text:00000000000064D9                 cmp     rsi, rdi
.text:00000000000064DC                 jnb     short locret_6517
.text:00000000000064DE                 xchg    ax, ax
.text:00000000000064E0
.text:00000000000064E0 loc_64E0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:00000000000064E0                 cmp     qword ptr [rsi], 0
.text:00000000000064E4                 jz      short loc_650C
.text:00000000000064E6                 mov     rdx, [rsi+8]
.text:00000000000064EA                 mov     ecx, 1
.text:00000000000064EF                 test    rdx, rdx
.text:00000000000064F2                 jz      short loc_6505
.text:00000000000064F4                 nop     dword ptr [rax+00h]
.text:00000000000064F8
.text:00000000000064F8 loc_64F8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:00000000000064F8                 mov     rdx, [rdx+8]
.text:00000000000064FC                 add     rcx, 1
.text:0000000000006500                 test    rdx, rdx
.text:0000000000006503                 jnz     short loc_64F8
.text:0000000000006505
.text:0000000000006505 loc_6505:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000006505                 cmp     rax, rcx
.text:0000000000006508                 cmovb   rax, rcx
.text:000000000000650C
.text:000000000000650C loc_650C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000650C                 add     rsi, 10h
.text:0000000000006510                 cmp     rsi, rdi
.text:0000000000006513                 jb      short loc_64E0
.text:0000000000006515                 rep retn
.text:0000000000006517 ; ---------------------------------------------------------------------------
.text:0000000000006517
.text:0000000000006517 locret_6517:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000006517                 rep retn
.text:0000000000006517 ; } // starts at 64D0
.text:0000000000006517 hash_get_max_bucket_length endp
.text:0000000000006517
.text:0000000000006517 ; ---------------------------------------------------------------------------
.text:0000000000006519                 align 20h
.text:0000000000006520
.text:0000000000006520 ; =============== S U B R O U T I N E =======================================
.text:0000000000006520
.text:0000000000006520 ; Attributes: info_from_lumina
.text:0000000000006520
.text:0000000000006520 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000006520                 public hash_table_ok
.text:0000000000006520 hash_table_ok   proc near
.text:0000000000006520 ; __unwind {
.text:0000000000006520                 mov     rcx, [rdi]
.text:0000000000006523                 mov     r8, [rdi+8]
.text:0000000000006527                 xor     edx, edx
.text:0000000000006529                 xor     esi, esi
.text:000000000000652B                 cmp     rcx, r8
.text:000000000000652E                 jnb     short loc_6566
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000006530                 cmp     qword ptr [rcx], 0
.text:0000000000006534                 jz      short loc_655D
.text:0000000000006536                 mov     rax, [rcx+8]
.text:000000000000653A                 add     rsi, 1
.text:000000000000653E                 add     rdx, 1
.text:0000000000006542                 test    rax, rax
.text:0000000000006545                 jz      short loc_655D
.text:0000000000006547                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000006550                 mov     rax, [rax+8]
.text:0000000000006554                 add     rdx, 1
.text:0000000000006558                 test    rax, rax
.text:000000000000655B                 jnz     short loc_6550
.text:000000000000655D
.text:000000000000655D loc_655D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000655D                                         ; hash_table_ok+25↑j
.text:000000000000655D                 add     rcx, 10h
.text:0000000000006561                 cmp     rcx, r8
.text:0000000000006564                 jb      short loc_6530
.text:0000000000006566
.text:0000000000006566 loc_6566:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000006566                 xor     eax, eax
.text:0000000000006568                 cmp     [rdi+18h], rsi
.text:000000000000656C                 jz      short loc_6570
.text:000000000000656E                 rep retn
.text:0000000000006570 ; ---------------------------------------------------------------------------
.text:0000000000006570
.text:0000000000006570 loc_6570:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000006570                 cmp     [rdi+20h], rdx
.text:0000000000006574                 setz    al
.text:0000000000006577                 retn
.text:0000000000006577 ; } // starts at 6520
.text:0000000000006577 hash_table_ok   endp
.text:0000000000006577
.text:0000000000006577 ; ---------------------------------------------------------------------------
.text:0000000000006578                 align 20h
.text:0000000000006580
.text:0000000000006580 ; =============== S U B R O U T I N E =======================================
.text:0000000000006580
.text:0000000000006580 ; Attributes: info_from_lumina
.text:0000000000006580
.text:0000000000006580 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000006580                 public hash_print_statistics
.text:0000000000006580 hash_print_statistics proc near
.text:0000000000006580 ; __unwind {
.text:0000000000006580                 push    r13
.text:0000000000006582                 push    r12
.text:0000000000006584                 mov     r12, rsi
.text:0000000000006587                 push    rbp
.text:0000000000006588                 push    rbx
.text:0000000000006589                 xor     ebx, ebx
.text:000000000000658B                 sub     rsp, 8
.text:000000000000658F                 mov     rsi, [rdi]
.text:0000000000006592                 mov     rcx, [rdi+20h]
.text:0000000000006596                 mov     rbp, [rdi+10h]
.text:000000000000659A                 mov     r13, [rdi+18h]
.text:000000000000659E                 mov     rdi, [rdi+8]
.text:00000000000065A2                 cmp     rsi, rdi
.text:00000000000065A5                 jnb     short loc_65E5
.text:00000000000065A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000065B0
.text:00000000000065B0 loc_65B0:                               ; CODE XREF: hash_print_statistics+63↓j
.text:00000000000065B0                 cmp     qword ptr [rsi], 0
.text:00000000000065B4                 jz      short loc_65DC
.text:00000000000065B6                 mov     rax, [rsi+8]
.text:00000000000065BA                 mov     edx, 1
.text:00000000000065BF                 test    rax, rax
.text:00000000000065C2                 jz      short loc_65D5
.text:00000000000065C4                 nop     dword ptr [rax+00h]
.text:00000000000065C8
.text:00000000000065C8 loc_65C8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:00000000000065C8                 mov     rax, [rax+8]
.text:00000000000065CC                 add     rdx, 1
.text:00000000000065D0                 test    rax, rax
.text:00000000000065D3                 jnz     short loc_65C8
.text:00000000000065D5
.text:00000000000065D5 loc_65D5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:00000000000065D5                 cmp     rbx, rdx
.text:00000000000065D8                 cmovb   rbx, rdx
.text:00000000000065DC
.text:00000000000065DC loc_65DC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:00000000000065DC                 add     rsi, 10h
.text:00000000000065E0                 cmp     rsi, rdi
.text:00000000000065E3                 jb      short loc_65B0
.text:00000000000065E5
.text:00000000000065E5 loc_65E5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:00000000000065E5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:00000000000065EC                 mov     esi, 1
.text:00000000000065F1                 mov     rdi, r12
.text:00000000000065F4                 xor     eax, eax
.text:00000000000065F6                 call    ___fprintf_chk
.text:00000000000065FB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000006602                 xor     eax, eax
.text:0000000000006604                 mov     rcx, rbp
.text:0000000000006607                 mov     esi, 1
.text:000000000000660C                 mov     rdi, r12
.text:000000000000660F                 call    ___fprintf_chk
.text:0000000000006614                 test    r13, r13
.text:0000000000006617                 js      short loc_6680
.text:0000000000006619                 pxor    xmm0, xmm0
.text:000000000000661D                 test    rbp, rbp
.text:0000000000006620                 cvtsi2sd xmm0, r13
.text:0000000000006625                 mulsd   xmm0, cs:qword_FEC0
.text:000000000000662D                 js      short loc_66A9
.text:000000000000662F
.text:000000000000662F loc_662F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000662F                 pxor    xmm1, xmm1
.text:0000000000006633                 cvtsi2sd xmm1, rbp
.text:0000000000006638
.text:0000000000006638 loc_6638:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000006638                 divsd   xmm0, xmm1
.text:000000000000663C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000006643                 mov     rcx, r13
.text:0000000000006646                 mov     rdi, r12
.text:0000000000006649                 mov     esi, 1
.text:000000000000664E                 mov     eax, 1
.text:0000000000006653                 call    ___fprintf_chk
.text:0000000000006658                 add     rsp, 8
.text:000000000000665C                 mov     rcx, rbx
.text:000000000000665F                 mov     rdi, r12
.text:0000000000006662                 pop     rbx
.text:0000000000006663                 pop     rbp
.text:0000000000006664                 pop     r12
.text:0000000000006666                 pop     r13
.text:0000000000006668                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000666F                 mov     esi, 1
.text:0000000000006674                 xor     eax, eax
.text:0000000000006676                 jmp     ___fprintf_chk
.text:0000000000006676 ; ---------------------------------------------------------------------------
.text:000000000000667B                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000006680                 mov     rax, r13
.text:0000000000006683                 mov     rdx, r13
.text:0000000000006686                 pxor    xmm0, xmm0
.text:000000000000668A                 shr     rax, 1
.text:000000000000668D                 and     edx, 1
.text:0000000000006690                 or      rax, rdx
.text:0000000000006693                 test    rbp, rbp
.text:0000000000006696                 cvtsi2sd xmm0, rax
.text:000000000000669B                 addsd   xmm0, xmm0
.text:000000000000669F                 mulsd   xmm0, cs:qword_FEC0
.text:00000000000066A7                 jns     short loc_662F
.text:00000000000066A9
.text:00000000000066A9 loc_66A9:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:00000000000066A9                 mov     rax, rbp
.text:00000000000066AC                 pxor    xmm1, xmm1
.text:00000000000066B0                 shr     rax, 1
.text:00000000000066B3                 and     ebp, 1
.text:00000000000066B6                 or      rax, rbp
.text:00000000000066B9                 cvtsi2sd xmm1, rax
.text:00000000000066BE                 addsd   xmm1, xmm1
.text:00000000000066C2                 jmp     loc_6638
.text:00000000000066C2 ; } // starts at 6580
.text:00000000000066C2 hash_print_statistics endp
.text:00000000000066C2
.text:00000000000066C2 ; ---------------------------------------------------------------------------
.text:00000000000066C7                 align 10h
.text:00000000000066D0
.text:00000000000066D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066D0
.text:00000000000066D0 ; Attributes: info_from_lumina
.text:00000000000066D0
.text:00000000000066D0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000066D0                 public hash_lookup
.text:00000000000066D0 hash_lookup     proc near               ; CODE XREF: main+1141↑p
.text:00000000000066D0                                         ; get_dev+8DE↑p ...
.text:00000000000066D0 ; __unwind {
.text:00000000000066D0                 push    r12
.text:00000000000066D2                 push    rbp
.text:00000000000066D3                 mov     r12, rdi
.text:00000000000066D6                 push    rbx
.text:00000000000066D7                 mov     rbp, rsi
.text:00000000000066DA                 call    safe_hasher
.text:00000000000066DF                 mov     rsi, [rax]
.text:00000000000066E2                 test    rsi, rsi
.text:00000000000066E5                 jz      short loc_670D
.text:00000000000066E7                 mov     rbx, rax
.text:00000000000066EA                 jmp     short loc_66F3
.text:00000000000066EA ; ---------------------------------------------------------------------------
.text:00000000000066EC                 align 10h
.text:00000000000066F0
.text:00000000000066F0 loc_66F0:                               ; CODE XREF: hash_lookup+3B↓j
.text:00000000000066F0                 mov     rsi, [rbx]
.text:00000000000066F3
.text:00000000000066F3 loc_66F3:                               ; CODE XREF: hash_lookup+1A↑j
.text:00000000000066F3                 cmp     rsi, rbp
.text:00000000000066F6                 jz      short loc_670F
.text:00000000000066F8                 mov     rdi, rbp
.text:00000000000066FB                 call    qword ptr [r12+38h]
.text:0000000000006700                 test    al, al
.text:0000000000006702                 jnz     short loc_6720
.text:0000000000006704                 mov     rbx, [rbx+8]
.text:0000000000006708                 test    rbx, rbx
.text:000000000000670B                 jnz     short loc_66F0
.text:000000000000670D
.text:000000000000670D loc_670D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000670D                 xor     esi, esi
.text:000000000000670F
.text:000000000000670F loc_670F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000670F                 pop     rbx
.text:0000000000006710                 mov     rax, rsi
.text:0000000000006713                 pop     rbp
.text:0000000000006714                 pop     r12
.text:0000000000006716                 retn
.text:0000000000006716 ; ---------------------------------------------------------------------------
.text:0000000000006717                 align 20h
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000006720                 mov     rsi, [rbx]
.text:0000000000006723                 pop     rbx
.text:0000000000006724                 pop     rbp
.text:0000000000006725                 mov     rax, rsi
.text:0000000000006728                 pop     r12
.text:000000000000672A                 retn
.text:000000000000672A ; } // starts at 66D0
.text:000000000000672A hash_lookup     endp
.text:000000000000672A
.text:000000000000672A ; ---------------------------------------------------------------------------
.text:000000000000672B                 align 10h
.text:0000000000006730
.text:0000000000006730 ; =============== S U B R O U T I N E =======================================
.text:0000000000006730
.text:0000000000006730 ; Attributes: info_from_lumina
.text:0000000000006730
.text:0000000000006730 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000006730                 public hash_get_first
.text:0000000000006730 hash_get_first  proc near
.text:0000000000006730 ; __unwind {
.text:0000000000006730                 cmp     qword ptr [rdi+20h], 0
.text:0000000000006735                 jz      short loc_6763
.text:0000000000006737                 mov     rdx, [rdi]
.text:000000000000673A                 mov     rcx, [rdi+8]
.text:000000000000673E                 cmp     rdx, rcx
.text:0000000000006741                 jnb     short loc_6768
.text:0000000000006743                 mov     rax, [rdx]
.text:0000000000006746                 test    rax, rax
.text:0000000000006749                 jnz     short locret_6766
.text:000000000000674B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000006750                 add     rdx, 10h
.text:0000000000006754                 cmp     rdx, rcx
.text:0000000000006757                 jnb     short loc_6768
.text:0000000000006759                 mov     rax, [rdx]
.text:000000000000675C                 test    rax, rax
.text:000000000000675F                 jz      short loc_6750
.text:0000000000006761                 rep retn
.text:0000000000006763 ; ---------------------------------------------------------------------------
.text:0000000000006763
.text:0000000000006763 loc_6763:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000006763                 xor     eax, eax
.text:0000000000006765                 retn
.text:0000000000006766 ; ---------------------------------------------------------------------------
.text:0000000000006766
.text:0000000000006766 locret_6766:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000006766                 rep retn
.text:0000000000006768 ; ---------------------------------------------------------------------------
.text:0000000000006768
.text:0000000000006768 loc_6768:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000006768                                         ; hash_get_first+27↑j
.text:0000000000006768                 sub     rsp, 8
.text:000000000000676C                 call    _abort
.text:000000000000676C ; } // starts at 6730
.text:000000000000676C hash_get_first  endp
.text:000000000000676C
.text:000000000000676C ; ---------------------------------------------------------------------------
.text:0000000000006771                 align 20h
.text:0000000000006780
.text:0000000000006780 ; =============== S U B R O U T I N E =======================================
.text:0000000000006780
.text:0000000000006780 ; Attributes: info_from_lumina
.text:0000000000006780
.text:0000000000006780 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000006780                 public hash_get_next
.text:0000000000006780 hash_get_next   proc near
.text:0000000000006780 ; __unwind {
.text:0000000000006780                 push    rbp
.text:0000000000006781                 push    rbx
.text:0000000000006782                 mov     rbp, rdi
.text:0000000000006785                 mov     rbx, rsi
.text:0000000000006788                 sub     rsp, 8
.text:000000000000678C                 call    safe_hasher
.text:0000000000006791                 mov     rdx, rax
.text:0000000000006794                 mov     rcx, rax
.text:0000000000006797                 mov     rax, [rdx]
.text:000000000000679A                 mov     rdx, [rdx+8]
.text:000000000000679E                 cmp     rax, rbx
.text:00000000000067A1                 jz      short loc_67B9
.text:00000000000067A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000067A8
.text:00000000000067A8 loc_67A8:                               ; CODE XREF: hash_get_next+37↓j
.text:00000000000067A8                 test    rdx, rdx
.text:00000000000067AB                 jz      short loc_67BE
.text:00000000000067AD                 mov     rax, [rdx]
.text:00000000000067B0                 mov     rdx, [rdx+8]
.text:00000000000067B4                 cmp     rax, rbx
.text:00000000000067B7                 jnz     short loc_67A8
.text:00000000000067B9
.text:00000000000067B9 loc_67B9:                               ; CODE XREF: hash_get_next+21↑j
.text:00000000000067B9                 test    rdx, rdx
.text:00000000000067BC                 jnz     short loc_67E8
.text:00000000000067BE
.text:00000000000067BE loc_67BE:                               ; CODE XREF: hash_get_next+2B↑j
.text:00000000000067BE                 mov     rdx, [rbp+8]
.text:00000000000067C2                 jmp     short loc_67D0
.text:00000000000067C2 ; ---------------------------------------------------------------------------
.text:00000000000067C4                 align 8
.text:00000000000067C8
.text:00000000000067C8 loc_67C8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000067C8                 mov     rax, [rcx]
.text:00000000000067CB                 test    rax, rax
.text:00000000000067CE                 jnz     short loc_67DB
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000067D0                 add     rcx, 10h
.text:00000000000067D4                 cmp     rdx, rcx
.text:00000000000067D7                 ja      short loc_67C8
.text:00000000000067D9                 xor     eax, eax
.text:00000000000067DB
.text:00000000000067DB loc_67DB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000067DB                 add     rsp, 8
.text:00000000000067DF                 pop     rbx
.text:00000000000067E0                 pop     rbp
.text:00000000000067E1                 retn
.text:00000000000067E1 ; ---------------------------------------------------------------------------
.text:00000000000067E2                 align 8
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: hash_get_next+3C↑j
.text:00000000000067E8                 mov     rax, [rdx]
.text:00000000000067EB                 add     rsp, 8
.text:00000000000067EF                 pop     rbx
.text:00000000000067F0                 pop     rbp
.text:00000000000067F1                 retn
.text:00000000000067F1 ; } // starts at 6780
.text:00000000000067F1 hash_get_next   endp
.text:00000000000067F1
.text:00000000000067F1 ; ---------------------------------------------------------------------------
.text:00000000000067F2                 align 20h
.text:0000000000006800
.text:0000000000006800 ; =============== S U B R O U T I N E =======================================
.text:0000000000006800
.text:0000000000006800 ; Attributes: info_from_lumina
.text:0000000000006800
.text:0000000000006800 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000006800                 public hash_get_entries
.text:0000000000006800 hash_get_entries proc near
.text:0000000000006800 ; __unwind {
.text:0000000000006800                 mov     r9, [rdi]
.text:0000000000006803                 cmp     [rdi+8], r9
.text:0000000000006807                 jbe     short loc_6862
.text:0000000000006809                 xor     r8d, r8d
.text:000000000000680C
.text:000000000000680C loc_680C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000680C                 mov     rcx, [r9]
.text:000000000000680F                 test    rcx, rcx
.text:0000000000006812                 jz      short loc_684D
.text:0000000000006814                 cmp     rdx, r8
.text:0000000000006817                 jbe     short loc_6857
.text:0000000000006819                 mov     [rsi+r8*8], rcx
.text:000000000000681D                 mov     rcx, [r9+8]
.text:0000000000006821                 lea     rax, [r8+1]
.text:0000000000006825                 test    rcx, rcx
.text:0000000000006828                 jz      short loc_684A
.text:000000000000682A                 nop     word ptr [rax+rax+00h]
.text:0000000000006830
.text:0000000000006830 loc_6830:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000006830                 cmp     rdx, rax
.text:0000000000006833                 jz      short locret_6860
.text:0000000000006835                 mov     r8, [rcx]
.text:0000000000006838                 add     rax, 1
.text:000000000000683C                 mov     [rsi+rax*8-8], r8
.text:0000000000006841                 mov     rcx, [rcx+8]
.text:0000000000006845                 test    rcx, rcx
.text:0000000000006848                 jnz     short loc_6830
.text:000000000000684A
.text:000000000000684A loc_684A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000684A                 mov     r8, rax
.text:000000000000684D
.text:000000000000684D loc_684D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000684D                 add     r9, 10h
.text:0000000000006851                 cmp     [rdi+8], r9
.text:0000000000006855                 ja      short loc_680C
.text:0000000000006857
.text:0000000000006857 loc_6857:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000006857                 mov     rax, r8
.text:000000000000685A                 retn
.text:000000000000685A ; ---------------------------------------------------------------------------
.text:000000000000685B                 align 20h
.text:0000000000006860
.text:0000000000006860 locret_6860:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000006860                 rep retn
.text:0000000000006862 ; ---------------------------------------------------------------------------
.text:0000000000006862
.text:0000000000006862 loc_6862:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000006862                 xor     eax, eax
.text:0000000000006864                 retn
.text:0000000000006864 ; } // starts at 6800
.text:0000000000006864 hash_get_entries endp
.text:0000000000006864
.text:0000000000006864 ; ---------------------------------------------------------------------------
.text:0000000000006865                 align 10h
.text:0000000000006870
.text:0000000000006870 ; =============== S U B R O U T I N E =======================================
.text:0000000000006870
.text:0000000000006870 ; Attributes: info_from_lumina
.text:0000000000006870
.text:0000000000006870 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000006870                 public hash_do_for_each
.text:0000000000006870 hash_do_for_each proc near
.text:0000000000006870 ; __unwind {
.text:0000000000006870                 push    r15
.text:0000000000006872                 push    r14
.text:0000000000006874                 push    r13
.text:0000000000006876                 push    r12
.text:0000000000006878                 push    rbp
.text:0000000000006879                 push    rbx
.text:000000000000687A                 sub     rsp, 8
.text:000000000000687E                 mov     r14, [rdi]
.text:0000000000006881                 cmp     [rdi+8], r14
.text:0000000000006885                 jbe     short loc_68D6
.text:0000000000006887                 mov     r13, rdx
.text:000000000000688A                 mov     r12, rsi
.text:000000000000688D                 mov     r15, rdi
.text:0000000000006890                 xor     ebp, ebp
.text:0000000000006892
.text:0000000000006892 loc_6892:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000006892                 mov     rdi, [r14]
.text:0000000000006895                 test    rdi, rdi
.text:0000000000006898                 jz      short loc_68BA
.text:000000000000689A                 mov     rbx, r14
.text:000000000000689D                 jmp     short loc_68A3
.text:000000000000689D ; ---------------------------------------------------------------------------
.text:000000000000689F                 align 20h
.text:00000000000068A0
.text:00000000000068A0 loc_68A0:                               ; CODE XREF: hash_do_for_each+48↓j
.text:00000000000068A0                 mov     rdi, [rbx]
.text:00000000000068A3
.text:00000000000068A3 loc_68A3:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:00000000000068A3                 mov     rsi, r13
.text:00000000000068A6                 call    r12
.text:00000000000068A9                 test    al, al
.text:00000000000068AB                 jz      short loc_68C4
.text:00000000000068AD                 mov     rbx, [rbx+8]
.text:00000000000068B1                 add     rbp, 1
.text:00000000000068B5                 test    rbx, rbx
.text:00000000000068B8                 jnz     short loc_68A0
.text:00000000000068BA
.text:00000000000068BA loc_68BA:                               ; CODE XREF: hash_do_for_each+28↑j
.text:00000000000068BA                 add     r14, 10h
.text:00000000000068BE                 cmp     [r15+8], r14
.text:00000000000068C2                 ja      short loc_6892
.text:00000000000068C4
.text:00000000000068C4 loc_68C4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000068C4                                         ; hash_do_for_each+68↓j
.text:00000000000068C4                 add     rsp, 8
.text:00000000000068C8                 mov     rax, rbp
.text:00000000000068CB                 pop     rbx
.text:00000000000068CC                 pop     rbp
.text:00000000000068CD                 pop     r12
.text:00000000000068CF                 pop     r13
.text:00000000000068D1                 pop     r14
.text:00000000000068D3                 pop     r15
.text:00000000000068D5                 retn
.text:00000000000068D6 ; ---------------------------------------------------------------------------
.text:00000000000068D6
.text:00000000000068D6 loc_68D6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:00000000000068D6                 xor     ebp, ebp
.text:00000000000068D8                 jmp     short loc_68C4
.text:00000000000068D8 ; } // starts at 6870
.text:00000000000068D8 hash_do_for_each endp
.text:00000000000068D8
.text:00000000000068D8 ; ---------------------------------------------------------------------------
.text:00000000000068DA                 align 20h
.text:00000000000068E0
.text:00000000000068E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068E0
.text:00000000000068E0 ; Attributes: info_from_lumina
.text:00000000000068E0
.text:00000000000068E0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:00000000000068E0                 public hash_string
.text:00000000000068E0 hash_string     proc near
.text:00000000000068E0 ; __unwind {
.text:00000000000068E0                 movzx   ecx, byte ptr [rdi]
.text:00000000000068E3                 xor     edx, edx
.text:00000000000068E5                 test    cl, cl
.text:00000000000068E7                 jz      short loc_690D
.text:00000000000068E9                 nop     dword ptr [rax+00000000h]
.text:00000000000068F0
.text:00000000000068F0 loc_68F0:                               ; CODE XREF: hash_string+2B↓j
.text:00000000000068F0                 mov     rax, rdx
.text:00000000000068F3                 add     rdi, 1
.text:00000000000068F7                 shl     rax, 5
.text:00000000000068FB                 sub     rax, rdx
.text:00000000000068FE                 xor     edx, edx
.text:0000000000006900                 add     rax, rcx
.text:0000000000006903                 movzx   ecx, byte ptr [rdi]
.text:0000000000006906                 div     rsi
.text:0000000000006909                 test    cl, cl
.text:000000000000690B                 jnz     short loc_68F0
.text:000000000000690D
.text:000000000000690D loc_690D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000690D                 mov     rax, rdx
.text:0000000000006910                 retn
.text:0000000000006910 ; } // starts at 68E0
.text:0000000000006910 hash_string     endp
.text:0000000000006910
.text:0000000000006910 ; ---------------------------------------------------------------------------
.text:0000000000006911                 align 20h
.text:0000000000006920
.text:0000000000006920 ; =============== S U B R O U T I N E =======================================
.text:0000000000006920
.text:0000000000006920 ; Attributes: info_from_lumina
.text:0000000000006920
.text:0000000000006920 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000006920                 public hash_reset_tuning
.text:0000000000006920 hash_reset_tuning proc near
.text:0000000000006920 ; __unwind {
.text:0000000000006920                 mov     rax, 3F80000000000000h
.text:000000000000692A                 mov     byte ptr [rdi+10h], 0
.text:000000000000692E                 mov     [rdi], rax
.text:0000000000006931                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000693B                 mov     [rdi+8], rax
.text:000000000000693F                 retn
.text:000000000000693F ; } // starts at 6920
.text:000000000000693F hash_reset_tuning endp
.text:000000000000693F
.text:0000000000006940
.text:0000000000006940 ; =============== S U B R O U T I N E =======================================
.text:0000000000006940
.text:0000000000006940 ; Attributes: info_from_lumina
.text:0000000000006940
.text:0000000000006940 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000006940                 public hash_initialize
.text:0000000000006940 hash_initialize proc near               ; CODE XREF: main+1030↑p
.text:0000000000006940                                         ; canonicalize_filename_mode+502↑p
.text:0000000000006940 ; __unwind {
.text:0000000000006940                 push    r15
.text:0000000000006942                 push    r14
.text:0000000000006944                 lea     rax, raw_hasher
.text:000000000000694B                 push    r13
.text:000000000000694D                 push    r12
.text:000000000000694F                 mov     r12, rdx
.text:0000000000006952                 push    rbp
.text:0000000000006953                 push    rbx
.text:0000000000006954                 mov     r13, rcx
.text:0000000000006957                 mov     rbp, rdi
.text:000000000000695A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000695F                 mov     r15, rsi
.text:0000000000006962                 sub     rsp, 8
.text:0000000000006966                 test    rdx, rdx
.text:0000000000006969                 mov     r14, r8
.text:000000000000696C                 cmovz   r12, rax
.text:0000000000006970                 lea     rax, raw_comparator
.text:0000000000006977                 test    rcx, rcx
.text:000000000000697A                 cmovz   r13, rax
.text:000000000000697E                 call    _malloc
.text:0000000000006983                 test    rax, rax
.text:0000000000006986                 mov     rbx, rax
.text:0000000000006989                 jz      loc_6A3A
.text:000000000000698F                 test    r15, r15
.text:0000000000006992                 lea     rdi, [rax+28h]
.text:0000000000006996                 jz      loc_6A50
.text:000000000000699C                 mov     [rax+28h], r15
.text:00000000000069A0                 call    check_tuning
.text:00000000000069A5                 test    al, al
.text:00000000000069A7                 jz      loc_6A30
.text:00000000000069AD                 cmp     byte ptr [r15+10h], 0
.text:00000000000069B2                 jz      loc_6AB0
.text:00000000000069B8
.text:00000000000069B8 loc_69B8:                               ; CODE XREF: hash_initialize+16A↓j
.text:00000000000069B8                                         ; hash_initialize+1A5↓j
.text:00000000000069B8                 mov     rdi, rbp
.text:00000000000069BB                 call    next_prime
.text:00000000000069C0                 mov     edx, 8
.text:00000000000069C5                 mov     rbp, rax
.text:00000000000069C8                 xor     ecx, ecx
.text:00000000000069CA                 mov     rax, rdx
.text:00000000000069CD                 mul     rbp
.text:00000000000069D0                 jo      loc_6AEA
.text:00000000000069D6
.text:00000000000069D6 loc_69D6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000069D6                 test    rax, rax
.text:00000000000069D9                 js      short loc_6A30
.text:00000000000069DB                 test    rcx, rcx
.text:00000000000069DE                 jnz     short loc_6A30
.text:00000000000069E0                 test    rbp, rbp
.text:00000000000069E3                 mov     [rbx+10h], rbp
.text:00000000000069E7                 jz      short loc_6A30
.text:00000000000069E9                 mov     esi, 10h        ; size
.text:00000000000069EE                 mov     rdi, rbp        ; nmemb
.text:00000000000069F1                 call    _calloc
.text:00000000000069F6                 test    rax, rax
.text:00000000000069F9                 mov     [rbx], rax
.text:00000000000069FC                 jz      short loc_6A30
.text:00000000000069FE                 shl     rbp, 4
.text:0000000000006A02                 mov     qword ptr [rbx+18h], 0
.text:0000000000006A0A                 mov     qword ptr [rbx+20h], 0
.text:0000000000006A12                 add     rbp, rax
.text:0000000000006A15                 mov     [rbx+30h], r12
.text:0000000000006A19                 mov     [rbx+38h], r13
.text:0000000000006A1D                 mov     [rbx+8], rbp
.text:0000000000006A21                 mov     [rbx+40h], r14
.text:0000000000006A25                 mov     qword ptr [rbx+48h], 0
.text:0000000000006A2D                 jmp     short loc_6A3A
.text:0000000000006A2D ; ---------------------------------------------------------------------------
.text:0000000000006A2F                 align 10h
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000006A30                                         ; hash_initialize+99↑j ...
.text:0000000000006A30                 mov     rdi, rbx        ; ptr
.text:0000000000006A33                 xor     ebx, ebx
.text:0000000000006A35                 call    _free
.text:0000000000006A3A
.text:0000000000006A3A loc_6A3A:                               ; CODE XREF: hash_initialize+49↑j
.text:0000000000006A3A                                         ; hash_initialize+ED↑j
.text:0000000000006A3A                 add     rsp, 8
.text:0000000000006A3E                 mov     rax, rbx
.text:0000000000006A41                 pop     rbx
.text:0000000000006A42                 pop     rbp
.text:0000000000006A43                 pop     r12
.text:0000000000006A45                 pop     r13
.text:0000000000006A47                 pop     r14
.text:0000000000006A49                 pop     r15
.text:0000000000006A4B                 retn
.text:0000000000006A4B ; ---------------------------------------------------------------------------
.text:0000000000006A4C                 align 10h
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000006A50                 lea     rax, default_tuning
.text:0000000000006A57                 mov     [rbx+28h], rax
.text:0000000000006A5B                 call    check_tuning
.text:0000000000006A60                 test    al, al
.text:0000000000006A62                 movss   xmm1, cs:dword_10028
.text:0000000000006A6A                 jz      short loc_6A30
.text:0000000000006A6C                 test    rbp, rbp
.text:0000000000006A6F                 js      short loc_6ABB
.text:0000000000006A71
.text:0000000000006A71 loc_6A71:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000006A71                 pxor    xmm0, xmm0
.text:0000000000006A75                 cvtsi2ss xmm0, rbp
.text:0000000000006A7A
.text:0000000000006A7A loc_6A7A:                               ; CODE XREF: hash_initialize+194↓j
.text:0000000000006A7A                 divss   xmm0, xmm1
.text:0000000000006A7E                 ucomiss xmm0, cs:dword_1002C
.text:0000000000006A85                 jnb     short loc_6A30
.text:0000000000006A87                 ucomiss xmm0, cs:dword_10030
.text:0000000000006A8E                 jb      short loc_6AE0
.text:0000000000006A90                 subss   xmm0, cs:dword_10030
.text:0000000000006A98                 mov     rax, 8000000000000000h
.text:0000000000006AA2                 cvttss2si rbp, xmm0
.text:0000000000006AA7                 xor     rbp, rax
.text:0000000000006AAA                 jmp     loc_69B8
.text:0000000000006AAA ; ---------------------------------------------------------------------------
.text:0000000000006AAF                 align 10h
.text:0000000000006AB0
.text:0000000000006AB0 loc_6AB0:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000006AB0                 test    rbp, rbp
.text:0000000000006AB3                 movss   xmm1, dword ptr [r15+8]
.text:0000000000006AB9                 jns     short loc_6A71
.text:0000000000006ABB
.text:0000000000006ABB loc_6ABB:                               ; CODE XREF: hash_initialize+12F↑j
.text:0000000000006ABB                 mov     rax, rbp
.text:0000000000006ABE                 pxor    xmm0, xmm0
.text:0000000000006AC2                 shr     rax, 1
.text:0000000000006AC5                 and     ebp, 1
.text:0000000000006AC8                 or      rax, rbp
.text:0000000000006ACB                 cvtsi2ss xmm0, rax
.text:0000000000006AD0                 addss   xmm0, xmm0
.text:0000000000006AD4                 jmp     short loc_6A7A
.text:0000000000006AD4 ; ---------------------------------------------------------------------------
.text:0000000000006AD6                 align 20h
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000006AE0                 cvttss2si rbp, xmm0
.text:0000000000006AE5                 jmp     loc_69B8
.text:0000000000006AEA ; ---------------------------------------------------------------------------
.text:0000000000006AEA
.text:0000000000006AEA loc_6AEA:                               ; CODE XREF: hash_initialize+90↑j
.text:0000000000006AEA                 mov     ecx, 1
.text:0000000000006AEF                 jmp     loc_69D6
.text:0000000000006AEF ; } // starts at 6940
.text:0000000000006AEF hash_initialize endp
.text:0000000000006AEF
.text:0000000000006AEF ; ---------------------------------------------------------------------------
.text:0000000000006AF4                 align 20h
.text:0000000000006B00
.text:0000000000006B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B00
.text:0000000000006B00 ; Attributes: info_from_lumina
.text:0000000000006B00
.text:0000000000006B00 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000006B00                 public hash_clear
.text:0000000000006B00 hash_clear      proc near
.text:0000000000006B00 ; __unwind {
.text:0000000000006B00                 push    r12
.text:0000000000006B02                 push    rbp
.text:0000000000006B03                 mov     rbp, rdi
.text:0000000000006B06                 push    rbx
.text:0000000000006B07                 mov     r12, [rdi]
.text:0000000000006B0A                 cmp     r12, [rdi+8]
.text:0000000000006B0E                 jnb     short loc_6B7B
.text:0000000000006B10
.text:0000000000006B10 loc_6B10:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000006B10                 cmp     qword ptr [r12], 0
.text:0000000000006B15                 jz      short loc_6B71
.text:0000000000006B17                 mov     rbx, [r12+8]
.text:0000000000006B1C                 mov     rax, [rbp+40h]
.text:0000000000006B20                 test    rbx, rbx
.text:0000000000006B23                 jz      short loc_6B55
.text:0000000000006B25                 nop     dword ptr [rax]
.text:0000000000006B28
.text:0000000000006B28 loc_6B28:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000006B28                 test    rax, rax
.text:0000000000006B2B                 jz      short loc_6B36
.text:0000000000006B2D                 mov     rdi, [rbx]
.text:0000000000006B30                 call    rax
.text:0000000000006B32                 mov     rax, [rbp+40h]
.text:0000000000006B36
.text:0000000000006B36 loc_6B36:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000006B36                 mov     rdx, [rbx+8]
.text:0000000000006B3A                 mov     rcx, [rbp+48h]
.text:0000000000006B3E                 mov     qword ptr [rbx], 0
.text:0000000000006B45                 test    rdx, rdx
.text:0000000000006B48                 mov     [rbx+8], rcx
.text:0000000000006B4C                 mov     [rbp+48h], rbx
.text:0000000000006B50                 mov     rbx, rdx
.text:0000000000006B53                 jnz     short loc_6B28
.text:0000000000006B55
.text:0000000000006B55 loc_6B55:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000006B55                 test    rax, rax
.text:0000000000006B58                 jz      short loc_6B60
.text:0000000000006B5A                 mov     rdi, [r12]
.text:0000000000006B5E                 call    rax
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000006B60                 mov     qword ptr [r12], 0
.text:0000000000006B68                 mov     qword ptr [r12+8], 0
.text:0000000000006B71
.text:0000000000006B71 loc_6B71:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000006B71                 add     r12, 10h
.text:0000000000006B75                 cmp     [rbp+8], r12
.text:0000000000006B79                 ja      short loc_6B10
.text:0000000000006B7B
.text:0000000000006B7B loc_6B7B:                               ; CODE XREF: hash_clear+E↑j
.text:0000000000006B7B                 mov     qword ptr [rbp+18h], 0
.text:0000000000006B83                 mov     qword ptr [rbp+20h], 0
.text:0000000000006B8B                 pop     rbx
.text:0000000000006B8C                 pop     rbp
.text:0000000000006B8D                 pop     r12
.text:0000000000006B8F                 retn
.text:0000000000006B8F ; } // starts at 6B00
.text:0000000000006B8F hash_clear      endp
.text:0000000000006B8F
.text:0000000000006B90
.text:0000000000006B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B90
.text:0000000000006B90 ; Attributes: info_from_lumina
.text:0000000000006B90
.text:0000000000006B90 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000006B90                 public hash_free
.text:0000000000006B90 hash_free       proc near               ; CODE XREF: main+12B3↑p
.text:0000000000006B90                                         ; canonicalize_filename_mode+219↑p ...
.text:0000000000006B90 ; __unwind {
.text:0000000000006B90                 push    r12
.text:0000000000006B92                 push    rbp
.text:0000000000006B93                 mov     r12, rdi
.text:0000000000006B96                 push    rbx
.text:0000000000006B97                 cmp     qword ptr [rdi+40h], 0
.text:0000000000006B9C                 mov     rbp, [rdi]
.text:0000000000006B9F                 mov     rax, [rdi+8]
.text:0000000000006BA3                 jz      short loc_6BF3
.text:0000000000006BA5                 cmp     qword ptr [rdi+20h], 0
.text:0000000000006BAA                 jz      short loc_6BF3
.text:0000000000006BAC                 cmp     rbp, rax
.text:0000000000006BAF                 jnb     short loc_6C2C
.text:0000000000006BB1                 nop     dword ptr [rax+00000000h]
.text:0000000000006BB8
.text:0000000000006BB8 loc_6BB8:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000006BB8                 mov     rdi, [rbp+0]
.text:0000000000006BBC                 test    rdi, rdi
.text:0000000000006BBF                 jz      short loc_6BE6
.text:0000000000006BC1                 mov     rbx, rbp
.text:0000000000006BC4                 jmp     short loc_6BD3
.text:0000000000006BC4 ; ---------------------------------------------------------------------------
.text:0000000000006BC6                 align 10h
.text:0000000000006BD0
.text:0000000000006BD0 loc_6BD0:                               ; CODE XREF: hash_free+4F↓j
.text:0000000000006BD0                 mov     rdi, [rbx]
.text:0000000000006BD3
.text:0000000000006BD3 loc_6BD3:                               ; CODE XREF: hash_free+34↑j
.text:0000000000006BD3                 call    qword ptr [r12+40h]
.text:0000000000006BD8                 mov     rbx, [rbx+8]
.text:0000000000006BDC                 test    rbx, rbx
.text:0000000000006BDF                 jnz     short loc_6BD0
.text:0000000000006BE1                 mov     rax, [r12+8]
.text:0000000000006BE6
.text:0000000000006BE6 loc_6BE6:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000006BE6                 add     rbp, 10h
.text:0000000000006BEA                 cmp     rax, rbp
.text:0000000000006BED                 ja      short loc_6BB8
.text:0000000000006BEF                 mov     rbp, [r12]
.text:0000000000006BF3
.text:0000000000006BF3 loc_6BF3:                               ; CODE XREF: hash_free+13↑j
.text:0000000000006BF3                                         ; hash_free+1A↑j
.text:0000000000006BF3                 cmp     rbp, rax
.text:0000000000006BF6                 jnb     short loc_6C2C
.text:0000000000006BF8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000006C00                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000006C04                 test    rdi, rdi
.text:0000000000006C07                 jz      short loc_6C21
.text:0000000000006C09                 nop     dword ptr [rax+00000000h]
.text:0000000000006C10
.text:0000000000006C10 loc_6C10:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000006C10                 mov     rbx, [rdi+8]
.text:0000000000006C14                 call    _free
.text:0000000000006C19                 test    rbx, rbx
.text:0000000000006C1C                 mov     rdi, rbx
.text:0000000000006C1F                 jnz     short loc_6C10
.text:0000000000006C21
.text:0000000000006C21 loc_6C21:                               ; CODE XREF: hash_free+77↑j
.text:0000000000006C21                 add     rbp, 10h
.text:0000000000006C25                 cmp     [r12+8], rbp
.text:0000000000006C2A                 ja      short loc_6C00
.text:0000000000006C2C
.text:0000000000006C2C loc_6C2C:                               ; CODE XREF: hash_free+1F↑j
.text:0000000000006C2C                                         ; hash_free+66↑j
.text:0000000000006C2C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000006C31                 test    rdi, rdi
.text:0000000000006C34                 jz      short loc_6C51
.text:0000000000006C36                 db      2Eh
.text:0000000000006C36                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006C40
.text:0000000000006C40 loc_6C40:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000006C40                 mov     rbx, [rdi+8]
.text:0000000000006C44                 call    _free
.text:0000000000006C49                 test    rbx, rbx
.text:0000000000006C4C                 mov     rdi, rbx
.text:0000000000006C4F                 jnz     short loc_6C40
.text:0000000000006C51
.text:0000000000006C51 loc_6C51:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000006C51                 mov     rdi, [r12]      ; ptr
.text:0000000000006C55                 call    _free
.text:0000000000006C5A                 pop     rbx
.text:0000000000006C5B                 mov     rdi, r12        ; ptr
.text:0000000000006C5E                 pop     rbp
.text:0000000000006C5F                 pop     r12
.text:0000000000006C61                 jmp     _free
.text:0000000000006C61 ; } // starts at 6B90
.text:0000000000006C61 hash_free       endp
.text:0000000000006C61
.text:0000000000006C61 ; ---------------------------------------------------------------------------
.text:0000000000006C66                 align 10h
.text:0000000000006C70
.text:0000000000006C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C70
.text:0000000000006C70 ; Attributes: info_from_lumina
.text:0000000000006C70
.text:0000000000006C70 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000006C70                 public hash_rehash
.text:0000000000006C70 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000006C70                                         ; hash_delete+10F↓p
.text:0000000000006C70
.text:0000000000006C70 ptr             = qword ptr -78h
.text:0000000000006C70 var_70          = qword ptr -70h
.text:0000000000006C70 var_68          = qword ptr -68h
.text:0000000000006C70 var_60          = qword ptr -60h
.text:0000000000006C70 var_58          = qword ptr -58h
.text:0000000000006C70 var_50          = qword ptr -50h
.text:0000000000006C70 var_48          = qword ptr -48h
.text:0000000000006C70 var_40          = qword ptr -40h
.text:0000000000006C70 var_38          = qword ptr -38h
.text:0000000000006C70 var_30          = qword ptr -30h
.text:0000000000006C70 var_20          = qword ptr -20h
.text:0000000000006C70
.text:0000000000006C70 ; __unwind {
.text:0000000000006C70                 push    r12
.text:0000000000006C72                 push    rbp
.text:0000000000006C73                 mov     rbp, rdi
.text:0000000000006C76                 push    rbx
.text:0000000000006C77                 sub     rsp, 60h
.text:0000000000006C7B                 mov     r12, [rdi+28h]
.text:0000000000006C7F                 mov     rax, fs:28h
.text:0000000000006C88                 mov     [rsp+78h+var_20], rax
.text:0000000000006C8D                 xor     eax, eax
.text:0000000000006C8F                 cmp     byte ptr [r12+10h], 0
.text:0000000000006C95                 jnz     short loc_6CE8
.text:0000000000006C97                 test    rsi, rsi
.text:0000000000006C9A                 js      loc_6E18
.text:0000000000006CA0                 pxor    xmm0, xmm0
.text:0000000000006CA4                 cvtsi2ss xmm0, rsi
.text:0000000000006CA9
.text:0000000000006CA9 loc_6CA9:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000006CA9                 divss   xmm0, dword ptr [r12+8]
.text:0000000000006CB0                 ucomiss xmm0, cs:dword_1002C
.text:0000000000006CB7                 jnb     loc_6DF0
.text:0000000000006CBD                 ucomiss xmm0, cs:dword_10030
.text:0000000000006CC4                 jb      loc_6E40
.text:0000000000006CCA                 subss   xmm0, cs:dword_10030
.text:0000000000006CD2                 mov     rax, 8000000000000000h
.text:0000000000006CDC                 cvttss2si rsi, xmm0
.text:0000000000006CE1                 xor     rsi, rax
.text:0000000000006CE4                 nop     dword ptr [rax+00h]
.text:0000000000006CE8
.text:0000000000006CE8 loc_6CE8:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000006CE8                                         ; hash_rehash+1D5↓j
.text:0000000000006CE8                 mov     rdi, rsi
.text:0000000000006CEB                 call    next_prime
.text:0000000000006CF0                 mov     edx, 8
.text:0000000000006CF5                 mov     rbx, rax
.text:0000000000006CF8                 xor     ecx, ecx
.text:0000000000006CFA                 mov     rax, rdx
.text:0000000000006CFD                 mul     rbx
.text:0000000000006D00                 jo      loc_6E9F
.text:0000000000006D06
.text:0000000000006D06 loc_6D06:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000006D06                 test    rax, rax
.text:0000000000006D09                 mov     eax, 1
.text:0000000000006D0E                 cmovs   rcx, rax
.text:0000000000006D12                 test    rbx, rbx
.text:0000000000006D15                 jz      loc_6DF0
.text:0000000000006D1B                 and     ecx, 1
.text:0000000000006D1E                 jnz     loc_6DF0
.text:0000000000006D24                 cmp     [rbp+10h], rbx
.text:0000000000006D28                 jz      loc_6E50
.text:0000000000006D2E                 mov     esi, 10h        ; size
.text:0000000000006D33                 mov     rdi, rbx        ; nmemb
.text:0000000000006D36                 call    _calloc
.text:0000000000006D3B                 test    rax, rax
.text:0000000000006D3E                 mov     [rsp+78h+ptr], rax
.text:0000000000006D42                 jz      loc_6DF0
.text:0000000000006D48                 mov     [rsp+78h+var_68], rbx
.text:0000000000006D4D                 shl     rbx, 4
.text:0000000000006D51                 mov     [rsp+78h+var_50], r12
.text:0000000000006D56                 add     rbx, rax
.text:0000000000006D59                 mov     rax, [rbp+30h]
.text:0000000000006D5D                 mov     r12, rsp
.text:0000000000006D60                 xor     edx, edx
.text:0000000000006D62                 mov     rsi, rbp
.text:0000000000006D65                 mov     rdi, r12
.text:0000000000006D68                 mov     [rsp+78h+var_70], rbx
.text:0000000000006D6D                 mov     [rsp+78h+var_60], 0
.text:0000000000006D76                 mov     [rsp+78h+var_48], rax
.text:0000000000006D7B                 mov     rax, [rbp+38h]
.text:0000000000006D7F                 mov     [rsp+78h+var_58], 0
.text:0000000000006D88                 mov     [rsp+78h+var_40], rax
.text:0000000000006D8D                 mov     rax, [rbp+40h]
.text:0000000000006D91                 mov     [rsp+78h+var_38], rax
.text:0000000000006D96                 mov     rax, [rbp+48h]
.text:0000000000006D9A                 mov     [rsp+78h+var_30], rax
.text:0000000000006D9F                 call    transfer_entries
.text:0000000000006DA4                 test    al, al
.text:0000000000006DA6                 mov     ebx, eax
.text:0000000000006DA8                 jnz     loc_6E60
.text:0000000000006DAE                 mov     rax, [rsp+78h+var_30]
.text:0000000000006DB3                 mov     edx, 1
.text:0000000000006DB8                 mov     rsi, r12
.text:0000000000006DBB                 mov     rdi, rbp
.text:0000000000006DBE                 mov     [rbp+48h], rax
.text:0000000000006DC2                 call    transfer_entries
.text:0000000000006DC7                 test    al, al
.text:0000000000006DC9                 jz      loc_6EA9
.text:0000000000006DCF                 xor     edx, edx
.text:0000000000006DD1                 mov     rsi, r12
.text:0000000000006DD4                 mov     rdi, rbp
.text:0000000000006DD7                 call    transfer_entries
.text:0000000000006DDC                 test    al, al
.text:0000000000006DDE                 jz      loc_6EA9
.text:0000000000006DE4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000006DE8                 call    _free
.text:0000000000006DED                 jmp     short loc_6DF2
.text:0000000000006DED ; ---------------------------------------------------------------------------
.text:0000000000006DEF                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000006DF0                                         ; hash_rehash+A5↑j ...
.text:0000000000006DF0                 xor     ebx, ebx
.text:0000000000006DF2
.text:0000000000006DF2 loc_6DF2:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000006DF2                                         ; hash_rehash+1E5↓j ...
.text:0000000000006DF2                 mov     rcx, [rsp+78h+var_20]
.text:0000000000006DF7                 xor     rcx, fs:28h
.text:0000000000006E00                 mov     eax, ebx
.text:0000000000006E02                 jnz     loc_6E9A
.text:0000000000006E08                 add     rsp, 60h
.text:0000000000006E0C                 pop     rbx
.text:0000000000006E0D                 pop     rbp
.text:0000000000006E0E                 pop     r12
.text:0000000000006E10                 retn
.text:0000000000006E10 ; ---------------------------------------------------------------------------
.text:0000000000006E11                 align 8
.text:0000000000006E18
.text:0000000000006E18 loc_6E18:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000006E18                 mov     rax, rsi
.text:0000000000006E1B                 pxor    xmm0, xmm0
.text:0000000000006E1F                 shr     rax, 1
.text:0000000000006E22                 and     esi, 1
.text:0000000000006E25                 or      rax, rsi
.text:0000000000006E28                 cvtsi2ss xmm0, rax
.text:0000000000006E2D                 addss   xmm0, xmm0
.text:0000000000006E31                 jmp     loc_6CA9
.text:0000000000006E31 ; ---------------------------------------------------------------------------
.text:0000000000006E36                 align 20h
.text:0000000000006E40
.text:0000000000006E40 loc_6E40:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000006E40                 cvttss2si rsi, xmm0
.text:0000000000006E45                 jmp     loc_6CE8
.text:0000000000006E45 ; ---------------------------------------------------------------------------
.text:0000000000006E4A                 align 10h
.text:0000000000006E50
.text:0000000000006E50 loc_6E50:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000006E50                 mov     ebx, 1
.text:0000000000006E55                 jmp     short loc_6DF2
.text:0000000000006E55 ; ---------------------------------------------------------------------------
.text:0000000000006E57                 align 20h
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000006E60                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000006E64                 call    _free
.text:0000000000006E69                 mov     rax, [rsp+78h+ptr]
.text:0000000000006E6D                 mov     [rbp+0], rax
.text:0000000000006E71                 mov     rax, [rsp+78h+var_70]
.text:0000000000006E76                 mov     [rbp+8], rax
.text:0000000000006E7A                 mov     rax, [rsp+78h+var_68]
.text:0000000000006E7F                 mov     [rbp+10h], rax
.text:0000000000006E83                 mov     rax, [rsp+78h+var_60]
.text:0000000000006E88                 mov     [rbp+18h], rax
.text:0000000000006E8C                 mov     rax, [rsp+78h+var_30]
.text:0000000000006E91                 mov     [rbp+48h], rax
.text:0000000000006E95                 jmp     loc_6DF2
.text:0000000000006E9A ; ---------------------------------------------------------------------------
.text:0000000000006E9A
.text:0000000000006E9A loc_6E9A:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000006E9A                 call    ___stack_chk_fail
.text:0000000000006E9F ; ---------------------------------------------------------------------------
.text:0000000000006E9F
.text:0000000000006E9F loc_6E9F:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000006E9F                 mov     ecx, 1
.text:0000000000006EA4                 jmp     loc_6D06
.text:0000000000006EA9 ; ---------------------------------------------------------------------------
.text:0000000000006EA9
.text:0000000000006EA9 loc_6EA9:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000006EA9                                         ; hash_rehash+16E↑j
.text:0000000000006EA9                 call    _abort
.text:0000000000006EA9 ; } // starts at 6C70
.text:0000000000006EA9 hash_rehash     endp
.text:0000000000006EA9
.text:0000000000006EA9 ; ---------------------------------------------------------------------------
.text:0000000000006EAE                 align 10h
.text:0000000000006EB0
.text:0000000000006EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EB0
.text:0000000000006EB0 ; Attributes: info_from_lumina
.text:0000000000006EB0
.text:0000000000006EB0 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000006EB0                 public hash_insert_if_absent
.text:0000000000006EB0 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000006EB0
.text:0000000000006EB0 var_38          = qword ptr -38h
.text:0000000000006EB0 var_30          = qword ptr -30h
.text:0000000000006EB0
.text:0000000000006EB0 ; __unwind {
.text:0000000000006EB0                 push    r13
.text:0000000000006EB2                 push    r12
.text:0000000000006EB4                 push    rbp
.text:0000000000006EB5                 push    rbx
.text:0000000000006EB6                 sub     rsp, 18h
.text:0000000000006EBA                 mov     rax, fs:28h
.text:0000000000006EC3                 mov     [rsp+38h+var_30], rax
.text:0000000000006EC8                 xor     eax, eax
.text:0000000000006ECA                 test    rsi, rsi
.text:0000000000006ECD                 jz      loc_708D
.text:0000000000006ED3                 mov     r12, rsp
.text:0000000000006ED6                 xor     ecx, ecx
.text:0000000000006ED8                 mov     r13, rdx
.text:0000000000006EDB                 mov     rdx, r12
.text:0000000000006EDE                 mov     rbx, rdi
.text:0000000000006EE1                 mov     rbp, rsi
.text:0000000000006EE4                 call    hash_find_entry
.text:0000000000006EE9                 test    rax, rax
.text:0000000000006EEC                 mov     rdx, rax
.text:0000000000006EEF                 jz      short loc_6F20
.text:0000000000006EF1                 xor     eax, eax
.text:0000000000006EF3                 test    r13, r13
.text:0000000000006EF6                 jz      short loc_6EFC
.text:0000000000006EF8                 mov     [r13+0], rdx
.text:0000000000006EFC
.text:0000000000006EFC loc_6EFC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000006EFC                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000006EFC                 mov     rcx, [rsp+38h+var_30]
.text:0000000000006F01                 xor     rcx, fs:28h
.text:0000000000006F0A                 jnz     loc_712F
.text:0000000000006F10                 add     rsp, 18h
.text:0000000000006F14                 pop     rbx
.text:0000000000006F15                 pop     rbp
.text:0000000000006F16                 pop     r12
.text:0000000000006F18                 pop     r13
.text:0000000000006F1A                 retn
.text:0000000000006F1A ; ---------------------------------------------------------------------------
.text:0000000000006F1B                 align 20h
.text:0000000000006F20
.text:0000000000006F20 loc_6F20:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000006F20                 mov     rax, [rbx+18h]
.text:0000000000006F24                 test    rax, rax
.text:0000000000006F27                 js      short loc_6FA0
.text:0000000000006F29                 pxor    xmm1, xmm1
.text:0000000000006F2D                 mov     rdx, [rbx+28h]
.text:0000000000006F31                 cvtsi2ss xmm1, rax
.text:0000000000006F36                 mov     rax, [rbx+10h]
.text:0000000000006F3A                 test    rax, rax
.text:0000000000006F3D                 js      loc_6FCA
.text:0000000000006F43
.text:0000000000006F43 loc_6F43:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000006F43                 pxor    xmm0, xmm0
.text:0000000000006F47                 cvtsi2ss xmm0, rax
.text:0000000000006F4C
.text:0000000000006F4C loc_6F4C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000006F4C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000006F51                 ucomiss xmm1, xmm0
.text:0000000000006F54                 ja      loc_6FF0
.text:0000000000006F5A
.text:0000000000006F5A loc_6F5A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000006F5A                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000006F5A                 mov     r12, [rsp+38h+var_38]
.text:0000000000006F5E                 cmp     qword ptr [r12], 0
.text:0000000000006F63                 jz      loc_7098
.text:0000000000006F69                 mov     rax, [rbx+48h]
.text:0000000000006F6D                 test    rax, rax
.text:0000000000006F70                 jz      loc_70B0
.text:0000000000006F76                 mov     rdx, [rax+8]
.text:0000000000006F7A                 mov     [rbx+48h], rdx
.text:0000000000006F7E
.text:0000000000006F7E loc_6F7E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000006F7E                 mov     rdx, [r12+8]
.text:0000000000006F83                 mov     [rax], rbp
.text:0000000000006F86                 mov     [rax+8], rdx
.text:0000000000006F8A                 mov     [r12+8], rax
.text:0000000000006F8F                 mov     eax, 1
.text:0000000000006F94                 add     qword ptr [rbx+20h], 1
.text:0000000000006F99                 jmp     loc_6EFC
.text:0000000000006F99 ; ---------------------------------------------------------------------------
.text:0000000000006F9E                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 loc_6FA0:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000006FA0                 mov     rdx, rax
.text:0000000000006FA3                 pxor    xmm1, xmm1
.text:0000000000006FA7                 and     eax, 1
.text:0000000000006FAA                 shr     rdx, 1
.text:0000000000006FAD                 or      rdx, rax
.text:0000000000006FB0                 mov     rax, [rbx+10h]
.text:0000000000006FB4                 cvtsi2ss xmm1, rdx
.text:0000000000006FB9                 mov     rdx, [rbx+28h]
.text:0000000000006FBD                 test    rax, rax
.text:0000000000006FC0                 addss   xmm1, xmm1
.text:0000000000006FC4                 jns     loc_6F43
.text:0000000000006FCA
.text:0000000000006FCA loc_6FCA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000006FCA                 mov     rcx, rax
.text:0000000000006FCD                 pxor    xmm0, xmm0
.text:0000000000006FD1                 shr     rcx, 1
.text:0000000000006FD4                 and     eax, 1
.text:0000000000006FD7                 or      rcx, rax
.text:0000000000006FDA                 cvtsi2ss xmm0, rcx
.text:0000000000006FDF                 addss   xmm0, xmm0
.text:0000000000006FE3                 jmp     loc_6F4C
.text:0000000000006FE3 ; ---------------------------------------------------------------------------
.text:0000000000006FE8                 align 10h
.text:0000000000006FF0
.text:0000000000006FF0 loc_6FF0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000006FF0                 lea     rdi, [rbx+28h]
.text:0000000000006FF4                 call    check_tuning
.text:0000000000006FF9                 mov     rax, [rbx+10h]
.text:0000000000006FFD                 mov     rdx, [rbx+28h]
.text:0000000000007001                 test    rax, rax
.text:0000000000007004                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000007009                 js      loc_70D0
.text:000000000000700F                 pxor    xmm0, xmm0
.text:0000000000007013                 cvtsi2ss xmm0, rax
.text:0000000000007018
.text:0000000000007018 loc_7018:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000007018                 mov     rax, [rbx+18h]
.text:000000000000701C                 test    rax, rax
.text:000000000000701F                 js      loc_70F0
.text:0000000000007025                 pxor    xmm1, xmm1
.text:0000000000007029                 cvtsi2ss xmm1, rax
.text:000000000000702E
.text:000000000000702E loc_702E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000702E                 movaps  xmm3, xmm2
.text:0000000000007031                 mulss   xmm3, xmm0
.text:0000000000007035                 ucomiss xmm1, xmm3
.text:0000000000007038                 jbe     loc_6F5A
.text:000000000000703E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000007042                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000007047                 jnz     short loc_704D
.text:0000000000007049                 mulss   xmm0, xmm2
.text:000000000000704D
.text:000000000000704D loc_704D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000704D                 ucomiss xmm0, cs:dword_1002C
.text:0000000000007054                 jnb     short loc_70C3
.text:0000000000007056                 ucomiss xmm0, cs:dword_10030
.text:000000000000705D                 jnb     loc_7110
.text:0000000000007063                 cvttss2si rsi, xmm0
.text:0000000000007068
.text:0000000000007068 loc_7068:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000007068                 mov     rdi, rbx
.text:000000000000706B                 call    hash_rehash
.text:0000000000007070                 test    al, al
.text:0000000000007072                 jz      short loc_70C3
.text:0000000000007074                 xor     ecx, ecx
.text:0000000000007076                 mov     rdx, r12
.text:0000000000007079                 mov     rsi, rbp
.text:000000000000707C                 mov     rdi, rbx
.text:000000000000707F                 call    hash_find_entry
.text:0000000000007084                 test    rax, rax
.text:0000000000007087                 jz      loc_6F5A
.text:000000000000708D
.text:000000000000708D loc_708D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000708D                 call    _abort
.text:000000000000708D ; ---------------------------------------------------------------------------
.text:0000000000007092                 align 8
.text:0000000000007098
.text:0000000000007098 loc_7098:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000007098                 mov     [r12], rbp
.text:000000000000709C                 mov     eax, 1
.text:00000000000070A1                 add     qword ptr [rbx+20h], 1
.text:00000000000070A6                 add     qword ptr [rbx+18h], 1
.text:00000000000070AB                 jmp     loc_6EFC
.text:00000000000070B0 ; ---------------------------------------------------------------------------
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:00000000000070B0                 mov     edi, 10h        ; size
.text:00000000000070B5                 call    _malloc
.text:00000000000070BA                 test    rax, rax
.text:00000000000070BD                 jnz     loc_6F7E
.text:00000000000070C3
.text:00000000000070C3 loc_70C3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:00000000000070C3                                         ; hash_insert_if_absent+1C2↑j
.text:00000000000070C3                 mov     eax, 0FFFFFFFFh
.text:00000000000070C8                 jmp     loc_6EFC
.text:00000000000070C8 ; ---------------------------------------------------------------------------
.text:00000000000070CD                 align 10h
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:00000000000070D0                 mov     rcx, rax
.text:00000000000070D3                 pxor    xmm0, xmm0
.text:00000000000070D7                 shr     rcx, 1
.text:00000000000070DA                 and     eax, 1
.text:00000000000070DD                 or      rcx, rax
.text:00000000000070E0                 cvtsi2ss xmm0, rcx
.text:00000000000070E5                 addss   xmm0, xmm0
.text:00000000000070E9                 jmp     loc_7018
.text:00000000000070E9 ; ---------------------------------------------------------------------------
.text:00000000000070EE                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:00000000000070F0                 mov     rcx, rax
.text:00000000000070F3                 pxor    xmm1, xmm1
.text:00000000000070F7                 shr     rcx, 1
.text:00000000000070FA                 and     eax, 1
.text:00000000000070FD                 or      rcx, rax
.text:0000000000007100                 cvtsi2ss xmm1, rcx
.text:0000000000007105                 addss   xmm1, xmm1
.text:0000000000007109                 jmp     loc_702E
.text:0000000000007109 ; ---------------------------------------------------------------------------
.text:000000000000710E                 align 10h
.text:0000000000007110
.text:0000000000007110 loc_7110:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000007110                 subss   xmm0, cs:dword_10030
.text:0000000000007118                 mov     rax, 8000000000000000h
.text:0000000000007122                 cvttss2si rsi, xmm0
.text:0000000000007127                 xor     rsi, rax
.text:000000000000712A                 jmp     loc_7068
.text:000000000000712F ; ---------------------------------------------------------------------------
.text:000000000000712F
.text:000000000000712F loc_712F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000712F                 call    ___stack_chk_fail
.text:000000000000712F ; } // starts at 6EB0
.text:000000000000712F hash_insert_if_absent endp
.text:000000000000712F
.text:000000000000712F ; ---------------------------------------------------------------------------
.text:0000000000007134                 align 20h
.text:0000000000007140
.text:0000000000007140 ; =============== S U B R O U T I N E =======================================
.text:0000000000007140
.text:0000000000007140 ; Attributes: info_from_lumina
.text:0000000000007140
.text:0000000000007140 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000007140                 public hash_insert
.text:0000000000007140 hash_insert     proc near               ; CODE XREF: main+1095↑p
.text:0000000000007140                                         ; record_file+46↑p
.text:0000000000007140
.text:0000000000007140 var_18          = qword ptr -18h
.text:0000000000007140 var_10          = qword ptr -10h
.text:0000000000007140
.text:0000000000007140 ; __unwind {
.text:0000000000007140                 push    rbx
.text:0000000000007141                 mov     rbx, rsi
.text:0000000000007144                 sub     rsp, 10h
.text:0000000000007148                 mov     rdx, rsp
.text:000000000000714B                 mov     rax, fs:28h
.text:0000000000007154                 mov     [rsp+18h+var_10], rax
.text:0000000000007159                 xor     eax, eax
.text:000000000000715B                 call    hash_insert_if_absent
.text:0000000000007160                 cmp     eax, 0FFFFFFFFh
.text:0000000000007163                 jz      short loc_7190
.text:0000000000007165                 test    eax, eax
.text:0000000000007167                 jnz     short loc_716D
.text:0000000000007169                 mov     rbx, [rsp+18h+var_18]
.text:000000000000716D
.text:000000000000716D loc_716D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000716D                                         ; hash_insert+52↓j
.text:000000000000716D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000007172                 xor     rcx, fs:28h
.text:000000000000717B                 mov     rax, rbx
.text:000000000000717E                 jnz     short loc_7194
.text:0000000000007180                 add     rsp, 10h
.text:0000000000007184                 pop     rbx
.text:0000000000007185                 retn
.text:0000000000007185 ; ---------------------------------------------------------------------------
.text:0000000000007186                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000007190                 xor     ebx, ebx
.text:0000000000007192                 jmp     short loc_716D
.text:0000000000007194 ; ---------------------------------------------------------------------------
.text:0000000000007194
.text:0000000000007194 loc_7194:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000007194                 call    ___stack_chk_fail
.text:0000000000007194 ; } // starts at 7140
.text:0000000000007194 hash_insert     endp
.text:0000000000007194
.text:0000000000007194 ; ---------------------------------------------------------------------------
.text:0000000000007199                 align 20h
.text:00000000000071A0
.text:00000000000071A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071A0
.text:00000000000071A0 ; Attributes: info_from_lumina
.text:00000000000071A0
.text:00000000000071A0 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:00000000000071A0                 public hash_delete
.text:00000000000071A0 hash_delete     proc near
.text:00000000000071A0
.text:00000000000071A0 var_28          = qword ptr -28h
.text:00000000000071A0 var_20          = qword ptr -20h
.text:00000000000071A0
.text:00000000000071A0 ; __unwind {
.text:00000000000071A0                 push    r12
.text:00000000000071A2                 push    rbp
.text:00000000000071A3                 mov     ecx, 1
.text:00000000000071A8                 push    rbx
.text:00000000000071A9                 mov     rbx, rdi
.text:00000000000071AC                 sub     rsp, 10h
.text:00000000000071B0                 mov     rdx, rsp
.text:00000000000071B3                 mov     rax, fs:28h
.text:00000000000071BC                 mov     [rsp+28h+var_20], rax
.text:00000000000071C1                 xor     eax, eax
.text:00000000000071C3                 call    hash_find_entry
.text:00000000000071C8                 test    rax, rax
.text:00000000000071CB                 mov     rbp, rax
.text:00000000000071CE                 jz      short loc_71DF
.text:00000000000071D0                 mov     rax, [rsp+28h+var_28]
.text:00000000000071D4                 sub     qword ptr [rbx+20h], 1
.text:00000000000071D9                 cmp     qword ptr [rax], 0
.text:00000000000071DD                 jz      short loc_7200
.text:00000000000071DF
.text:00000000000071DF loc_71DF:                               ; CODE XREF: hash_delete+2E↑j
.text:00000000000071DF                                         ; hash_delete+9F↓j ...
.text:00000000000071DF                 mov     rcx, [rsp+28h+var_20]
.text:00000000000071E4                 xor     rcx, fs:28h
.text:00000000000071ED                 mov     rax, rbp
.text:00000000000071F0                 jnz     loc_739E
.text:00000000000071F6                 add     rsp, 10h
.text:00000000000071FA                 pop     rbx
.text:00000000000071FB                 pop     rbp
.text:00000000000071FC                 pop     r12
.text:00000000000071FE                 retn
.text:00000000000071FE ; ---------------------------------------------------------------------------
.text:00000000000071FF                 align 20h
.text:0000000000007200
.text:0000000000007200 loc_7200:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000007200                 mov     rax, [rbx+18h]
.text:0000000000007204                 sub     rax, 1
.text:0000000000007208                 test    rax, rax
.text:000000000000720B                 mov     [rbx+18h], rax
.text:000000000000720F                 js      loc_7310
.text:0000000000007215                 pxor    xmm0, xmm0
.text:0000000000007219                 cvtsi2ss xmm0, rax
.text:000000000000721E
.text:000000000000721E loc_721E:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000721E                 mov     rax, [rbx+10h]
.text:0000000000007222                 mov     rdx, [rbx+28h]
.text:0000000000007226                 test    rax, rax
.text:0000000000007229                 js      loc_72F0
.text:000000000000722F                 pxor    xmm1, xmm1
.text:0000000000007233                 cvtsi2ss xmm1, rax
.text:0000000000007238
.text:0000000000007238 loc_7238:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000007238                 mulss   xmm1, dword ptr [rdx]
.text:000000000000723C                 ucomiss xmm1, xmm0
.text:000000000000723F                 jbe     short loc_71DF
.text:0000000000007241                 lea     rdi, [rbx+28h]
.text:0000000000007245                 call    check_tuning
.text:000000000000724A                 mov     rax, [rbx+10h]
.text:000000000000724E                 mov     rdx, [rbx+28h]
.text:0000000000007252                 test    rax, rax
.text:0000000000007255                 js      loc_7380
.text:000000000000725B                 pxor    xmm0, xmm0
.text:000000000000725F                 cvtsi2ss xmm0, rax
.text:0000000000007264
.text:0000000000007264 loc_7264:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000007264                 mov     rax, [rbx+18h]
.text:0000000000007268                 test    rax, rax
.text:000000000000726B                 js      loc_7360
.text:0000000000007271                 pxor    xmm1, xmm1
.text:0000000000007275                 cvtsi2ss xmm1, rax
.text:000000000000727A
.text:000000000000727A loc_727A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000727A                 movss   xmm2, dword ptr [rdx]
.text:000000000000727E                 mulss   xmm2, xmm0
.text:0000000000007282                 ucomiss xmm2, xmm1
.text:0000000000007285                 jbe     loc_71DF
.text:000000000000728B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000728F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000007294                 jz      loc_7350
.text:000000000000729A
.text:000000000000729A loc_729A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000729A                 ucomiss xmm0, cs:dword_10030
.text:00000000000072A1                 jnb     loc_7330
.text:00000000000072A7                 cvttss2si rsi, xmm0
.text:00000000000072AC
.text:00000000000072AC loc_72AC:                               ; CODE XREF: hash_delete+1AA↓j
.text:00000000000072AC                 mov     rdi, rbx
.text:00000000000072AF                 call    hash_rehash
.text:00000000000072B4                 test    al, al
.text:00000000000072B6                 jnz     loc_71DF
.text:00000000000072BC                 mov     rdi, [rbx+48h]  ; ptr
.text:00000000000072C0                 test    rdi, rdi
.text:00000000000072C3                 jz      short loc_72D9
.text:00000000000072C5                 nop     dword ptr [rax]
.text:00000000000072C8
.text:00000000000072C8 loc_72C8:                               ; CODE XREF: hash_delete+137↓j
.text:00000000000072C8                 mov     r12, [rdi+8]
.text:00000000000072CC                 call    _free
.text:00000000000072D1                 test    r12, r12
.text:00000000000072D4                 mov     rdi, r12
.text:00000000000072D7                 jnz     short loc_72C8
.text:00000000000072D9
.text:00000000000072D9 loc_72D9:                               ; CODE XREF: hash_delete+123↑j
.text:00000000000072D9                 mov     qword ptr [rbx+48h], 0
.text:00000000000072E1                 jmp     loc_71DF
.text:00000000000072E1 ; ---------------------------------------------------------------------------
.text:00000000000072E6                 align 10h
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: hash_delete+89↑j
.text:00000000000072F0                 mov     rcx, rax
.text:00000000000072F3                 pxor    xmm1, xmm1
.text:00000000000072F7                 shr     rcx, 1
.text:00000000000072FA                 and     eax, 1
.text:00000000000072FD                 or      rcx, rax
.text:0000000000007300                 cvtsi2ss xmm1, rcx
.text:0000000000007305                 addss   xmm1, xmm1
.text:0000000000007309                 jmp     loc_7238
.text:0000000000007309 ; ---------------------------------------------------------------------------
.text:000000000000730E                 align 10h
.text:0000000000007310
.text:0000000000007310 loc_7310:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000007310                 mov     rdx, rax
.text:0000000000007313                 pxor    xmm0, xmm0
.text:0000000000007317                 shr     rdx, 1
.text:000000000000731A                 and     eax, 1
.text:000000000000731D                 or      rdx, rax
.text:0000000000007320                 cvtsi2ss xmm0, rdx
.text:0000000000007325                 addss   xmm0, xmm0
.text:0000000000007329                 jmp     loc_721E
.text:0000000000007329 ; ---------------------------------------------------------------------------
.text:000000000000732E                 align 10h
.text:0000000000007330
.text:0000000000007330 loc_7330:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000007330                 subss   xmm0, cs:dword_10030
.text:0000000000007338                 mov     rax, 8000000000000000h
.text:0000000000007342                 cvttss2si rsi, xmm0
.text:0000000000007347                 xor     rsi, rax
.text:000000000000734A                 jmp     loc_72AC
.text:000000000000734A ; ---------------------------------------------------------------------------
.text:000000000000734F                 align 10h
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000007350                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000007355                 jmp     loc_729A
.text:0000000000007355 ; ---------------------------------------------------------------------------
.text:000000000000735A                 align 20h
.text:0000000000007360
.text:0000000000007360 loc_7360:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000007360                 mov     rcx, rax
.text:0000000000007363                 pxor    xmm1, xmm1
.text:0000000000007367                 shr     rcx, 1
.text:000000000000736A                 and     eax, 1
.text:000000000000736D                 or      rcx, rax
.text:0000000000007370                 cvtsi2ss xmm1, rcx
.text:0000000000007375                 addss   xmm1, xmm1
.text:0000000000007379                 jmp     loc_727A
.text:0000000000007379 ; ---------------------------------------------------------------------------
.text:000000000000737E                 align 20h
.text:0000000000007380
.text:0000000000007380 loc_7380:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000007380                 mov     rcx, rax
.text:0000000000007383                 pxor    xmm0, xmm0
.text:0000000000007387                 shr     rcx, 1
.text:000000000000738A                 and     eax, 1
.text:000000000000738D                 or      rcx, rax
.text:0000000000007390                 cvtsi2ss xmm0, rcx
.text:0000000000007395                 addss   xmm0, xmm0
.text:0000000000007399                 jmp     loc_7264
.text:000000000000739E ; ---------------------------------------------------------------------------
.text:000000000000739E
.text:000000000000739E loc_739E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000739E                 call    ___stack_chk_fail
.text:000000000000739E ; } // starts at 71A0
.text:000000000000739E hash_delete     endp
.text:000000000000739E
.text:000000000000739E ; ---------------------------------------------------------------------------
.text:00000000000073A3                 align 10h
.text:00000000000073B0
.text:00000000000073B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073B0
.text:00000000000073B0 ; Attributes: info_from_lumina
.text:00000000000073B0
.text:00000000000073B0 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:00000000000073B0                 public triple_hash
.text:00000000000073B0 triple_hash     proc near               ; DATA XREF: canonicalize_filename_mode+4F6↑o
.text:00000000000073B0 ; __unwind {
.text:00000000000073B0                 push    rbp
.text:00000000000073B1                 push    rbx
.text:00000000000073B2                 mov     rbp, rdi
.text:00000000000073B5                 mov     rbx, rsi
.text:00000000000073B8                 sub     rsp, 8
.text:00000000000073BC                 mov     rdi, [rdi]
.text:00000000000073BF                 call    hash_pjw
.text:00000000000073C4                 xor     rax, [rbp+8]
.text:00000000000073C8                 xor     edx, edx
.text:00000000000073CA                 add     rsp, 8
.text:00000000000073CE                 div     rbx
.text:00000000000073D1                 pop     rbx
.text:00000000000073D2                 pop     rbp
.text:00000000000073D3                 mov     rax, rdx
.text:00000000000073D6                 retn
.text:00000000000073D6 ; } // starts at 73B0
.text:00000000000073D6 triple_hash     endp
.text:00000000000073D6
.text:00000000000073D6 ; ---------------------------------------------------------------------------
.text:00000000000073D7                 align 20h
.text:00000000000073E0
.text:00000000000073E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073E0
.text:00000000000073E0
.text:00000000000073E0                 public triple_hash_no_name
.text:00000000000073E0 triple_hash_no_name proc near
.text:00000000000073E0 ; __unwind {
.text:00000000000073E0                 mov     rax, [rdi+8]
.text:00000000000073E4                 xor     edx, edx
.text:00000000000073E6                 div     rsi
.text:00000000000073E9                 mov     rax, rdx
.text:00000000000073EC                 retn
.text:00000000000073EC ; } // starts at 73E0
.text:00000000000073EC triple_hash_no_name endp
.text:00000000000073EC
.text:00000000000073EC ; ---------------------------------------------------------------------------
.text:00000000000073ED                 align 10h
.text:00000000000073F0
.text:00000000000073F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073F0
.text:00000000000073F0 ; Attributes: info_from_lumina
.text:00000000000073F0
.text:00000000000073F0 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:00000000000073F0                 public triple_compare
.text:00000000000073F0 triple_compare  proc near
.text:00000000000073F0 ; __unwind {
.text:00000000000073F0                 xor     eax, eax
.text:00000000000073F2                 mov     rdx, [rsi+8]
.text:00000000000073F6                 cmp     [rdi+8], rdx
.text:00000000000073FA                 jz      short loc_7400
.text:00000000000073FC
.text:00000000000073FC locret_73FC:                            ; CODE XREF: triple_compare+18↓j
.text:00000000000073FC                 rep retn
.text:00000000000073FC ; ---------------------------------------------------------------------------
.text:00000000000073FE                 align 20h
.text:0000000000007400
.text:0000000000007400 loc_7400:                               ; CODE XREF: triple_compare+A↑j
.text:0000000000007400                 mov     rcx, [rsi+10h]
.text:0000000000007404                 cmp     [rdi+10h], rcx
.text:0000000000007408                 jnz     short locret_73FC
.text:000000000000740A                 sub     rsp, 8
.text:000000000000740E                 mov     rsi, [rsi]
.text:0000000000007411                 mov     rdi, [rdi]
.text:0000000000007414                 call    same_name
.text:0000000000007419                 add     rsp, 8
.text:000000000000741D                 retn
.text:000000000000741D ; } // starts at 73F0
.text:000000000000741D triple_compare  endp
.text:000000000000741D
.text:000000000000741D ; ---------------------------------------------------------------------------
.text:000000000000741E                 align 20h
.text:0000000000007420
.text:0000000000007420 ; =============== S U B R O U T I N E =======================================
.text:0000000000007420
.text:0000000000007420 ; Attributes: info_from_lumina
.text:0000000000007420
.text:0000000000007420 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:0000000000007420                 public triple_compare_ino_str
.text:0000000000007420 triple_compare_ino_str proc near        ; DATA XREF: canonicalize_filename_mode+4ED↑o
.text:0000000000007420 ; __unwind {
.text:0000000000007420                 xor     eax, eax
.text:0000000000007422                 mov     rdx, [rsi+8]
.text:0000000000007426                 cmp     [rdi+8], rdx
.text:000000000000742A                 jz      short loc_7430
.text:000000000000742C
.text:000000000000742C locret_742C:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:000000000000742C                 rep retn
.text:000000000000742C ; ---------------------------------------------------------------------------
.text:000000000000742E                 align 10h
.text:0000000000007430
.text:0000000000007430 loc_7430:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:0000000000007430                 mov     rcx, [rsi+10h]
.text:0000000000007434                 cmp     [rdi+10h], rcx
.text:0000000000007438                 jnz     short locret_742C
.text:000000000000743A                 sub     rsp, 8
.text:000000000000743E                 mov     rsi, [rsi]      ; s2
.text:0000000000007441                 mov     rdi, [rdi]      ; s1
.text:0000000000007444                 call    _strcmp
.text:0000000000007449                 test    eax, eax
.text:000000000000744B                 setz    al
.text:000000000000744E                 add     rsp, 8
.text:0000000000007452                 retn
.text:0000000000007452 ; } // starts at 7420
.text:0000000000007452 triple_compare_ino_str endp
.text:0000000000007452
.text:0000000000007452 ; ---------------------------------------------------------------------------
.text:0000000000007453                 align 20h
.text:0000000000007460
.text:0000000000007460 ; =============== S U B R O U T I N E =======================================
.text:0000000000007460
.text:0000000000007460
.text:0000000000007460 ; __int64 __fastcall triple_free(void *ptr)
.text:0000000000007460                 public triple_free
.text:0000000000007460 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:0000000000007460                                         ; DATA XREF: canonicalize_filename_mode:loc_5C26↑o
.text:0000000000007460 ; __unwind {
.text:0000000000007460                 push    rbx
.text:0000000000007461                 mov     rbx, rdi
.text:0000000000007464                 mov     rdi, [rdi]      ; ptr
.text:0000000000007467                 call    _free
.text:000000000000746C                 mov     rdi, rbx        ; ptr
.text:000000000000746F                 pop     rbx
.text:0000000000007470                 jmp     _free
.text:0000000000007470 ; } // starts at 7460
.text:0000000000007470 triple_free     endp
.text:0000000000007470
.text:0000000000007470 ; ---------------------------------------------------------------------------
.text:0000000000007475                 align 20h
.text:0000000000007480
.text:0000000000007480 ; =============== S U B R O U T I N E =======================================
.text:0000000000007480
.text:0000000000007480 ; Attributes: info_from_lumina
.text:0000000000007480
.text:0000000000007480 ; long double __usercall adjust_value@<st0>(int inexact_style@<edi>, long double value)
.text:0000000000007480 adjust_value    proc near               ; CODE XREF: human_readable+578↓p
.text:0000000000007480                                         ; human_readable+59A↓p ...
.text:0000000000007480
.text:0000000000007480 var_20          = qword ptr -20h
.text:0000000000007480 var_18          = qword ptr -18h
.text:0000000000007480 var_C           = word ptr -0Ch
.text:0000000000007480 var_A           = word ptr -0Ah
.text:0000000000007480 arg_0           = tbyte ptr  8
.text:0000000000007480
.text:0000000000007480 ; __unwind {
.text:0000000000007480                 fld     cs:dword_10030
.text:0000000000007486                 fld     [rsp+arg_0]
.text:000000000000748A                 fucomi  st, st(1)
.text:000000000000748C                 jnb     short loc_7500
.text:000000000000748E                 fstp    st(1)
.text:0000000000007490                 fnstcw  [rsp+var_A]
.text:0000000000007494                 movzx   eax, [rsp+var_A]
.text:0000000000007499                 or      ah, 0Ch
.text:000000000000749C                 mov     [rsp+var_C], ax
.text:00000000000074A1                 fld     st
.text:00000000000074A3                 fldcw   [rsp+var_C]
.text:00000000000074A7                 fistp   [rsp+var_18]
.text:00000000000074AB                 fldcw   [rsp+var_A]
.text:00000000000074AF                 mov     rax, [rsp+var_18]
.text:00000000000074B4
.text:00000000000074B4 loc_74B4:                               ; CODE XREF: adjust_value+B3↓j
.text:00000000000074B4                 mov     [rsp+var_20], rax
.text:00000000000074B9                 test    rax, rax
.text:00000000000074BC                 fild    [rsp+var_20]
.text:00000000000074C0                 jns     short loc_74C8
.text:00000000000074C2                 fadd    cs:dword_1002C
.text:00000000000074C8
.text:00000000000074C8 loc_74C8:                               ; CODE XREF: adjust_value+40↑j
.text:00000000000074C8                 test    edi, edi
.text:00000000000074CA                 jnz     short loc_74F8
.text:00000000000074CC                 fxch    st(1)
.text:00000000000074CE                 fucomip st, st(1)
.text:00000000000074D0                 jp      short loc_74D8
.text:00000000000074D2                 jz      short locret_74FA
.text:00000000000074D4                 fstp    st
.text:00000000000074D6                 jmp     short loc_74E0
.text:00000000000074D8 ; ---------------------------------------------------------------------------
.text:00000000000074D8
.text:00000000000074D8 loc_74D8:                               ; CODE XREF: adjust_value+50↑j
.text:00000000000074D8                 fstp    st
.text:00000000000074DA                 nop     word ptr [rax+rax+00h]
.text:00000000000074E0
.text:00000000000074E0 loc_74E0:                               ; CODE XREF: adjust_value+56↑j
.text:00000000000074E0                 add     rax, 1
.text:00000000000074E4                 mov     [rsp+var_20], rax
.text:00000000000074E9                 test    rax, rax
.text:00000000000074EC                 fild    [rsp+var_20]
.text:00000000000074F0                 js      short loc_7540
.text:00000000000074F2                 jmp     short locret_74FA
.text:00000000000074F2 ; ---------------------------------------------------------------------------
.text:00000000000074F4                 align 8
.text:00000000000074F8
.text:00000000000074F8 loc_74F8:                               ; CODE XREF: adjust_value+4A↑j
.text:00000000000074F8                 fstp    st(1)
.text:00000000000074FA
.text:00000000000074FA locret_74FA:                            ; CODE XREF: adjust_value+52↑j
.text:00000000000074FA                                         ; adjust_value+72↑j
.text:00000000000074FA                 rep retn
.text:00000000000074FA ; ---------------------------------------------------------------------------
.text:00000000000074FC                 align 20h
.text:0000000000007500
.text:0000000000007500 loc_7500:                               ; CODE XREF: adjust_value+C↑j
.text:0000000000007500                 fnstcw  [rsp+var_A]
.text:0000000000007504                 movzx   eax, [rsp+var_A]
.text:0000000000007509                 fsubr   st(1), st
.text:000000000000750B                 fxch    st(1)
.text:000000000000750D                 mov     rdx, 8000000000000000h
.text:0000000000007517                 or      ah, 0Ch
.text:000000000000751A                 mov     [rsp+var_C], ax
.text:000000000000751F                 fldcw   [rsp+var_C]
.text:0000000000007523                 fistp   [rsp+var_18]
.text:0000000000007527                 fldcw   [rsp+var_A]
.text:000000000000752B                 mov     rax, [rsp+var_18]
.text:0000000000007530                 xor     rax, rdx
.text:0000000000007533                 jmp     loc_74B4
.text:0000000000007533 ; ---------------------------------------------------------------------------
.text:0000000000007538                 align 20h
.text:0000000000007540
.text:0000000000007540 loc_7540:                               ; CODE XREF: adjust_value+70↑j
.text:0000000000007540                 fadd    cs:dword_1002C
.text:0000000000007546                 retn
.text:0000000000007546 ; } // starts at 7480
.text:0000000000007546 adjust_value    endp
.text:0000000000007546
.text:0000000000007546 ; ---------------------------------------------------------------------------
.text:0000000000007547                 align 10h
.text:0000000000007550
.text:0000000000007550 ; =============== S U B R O U T I N E =======================================
.text:0000000000007550
.text:0000000000007550 ; Attributes: info_from_lumina
.text:0000000000007550
.text:0000000000007550 ; char *__fastcall human_readable(uintmax_t n, char *buf, int opts, uintmax_t from_block_size, uintmax_t to_block_size)
.text:0000000000007550                 public human_readable
.text:0000000000007550 human_readable  proc near               ; CODE XREF: df_readable+25↑p
.text:0000000000007550                                         ; df_readable+55↑j ...
.text:0000000000007550
.text:0000000000007550 var_D8          = tbyte ptr -0D8h
.text:0000000000007550 s               = qword ptr -0C8h
.text:0000000000007550 var_C0          = qword ptr -0C0h
.text:0000000000007550 var_B8          = qword ptr -0B8h
.text:0000000000007550 src             = qword ptr -0B0h
.text:0000000000007550 var_A8          = tbyte ptr -0A8h
.text:0000000000007550 var_98          = dword ptr -98h
.text:0000000000007550 var_94          = dword ptr -94h
.text:0000000000007550 var_90          = qword ptr -90h
.text:0000000000007550 n               = qword ptr -88h
.text:0000000000007550 var_80          = qword ptr -80h
.text:0000000000007550 var_78          = byte ptr -78h
.text:0000000000007550 var_40          = qword ptr -40h
.text:0000000000007550
.text:0000000000007550 ; __unwind {
.text:0000000000007550                 push    r15
.text:0000000000007552                 push    r14
.text:0000000000007554                 mov     eax, edx
.text:0000000000007556                 push    r13
.text:0000000000007558                 push    r12
.text:000000000000755A                 mov     r15d, edx
.text:000000000000755D                 push    rbp
.text:000000000000755E                 push    rbx
.text:000000000000755F                 and     eax, 20h
.text:0000000000007562                 and     r15d, 3
.text:0000000000007566                 mov     r12d, edx
.text:0000000000007569                 mov     rbx, rdi
.text:000000000000756C                 sub     rsp, 98h
.text:0000000000007573                 mov     [rsp+0C8h+src], rcx
.text:0000000000007578                 mov     [rsp+0C8h+var_98], eax
.text:000000000000757C                 mov     rcx, fs:28h
.text:0000000000007585                 mov     [rsp+0C8h+var_40], rcx
.text:000000000000758D                 xor     ecx, ecx
.text:000000000000758F                 cmp     eax, 1
.text:0000000000007592                 mov     [rsp+0C8h+s], rsi
.text:0000000000007596                 mov     [rsp+0C8h+var_B8], r8
.text:000000000000759B                 sbb     eax, eax
.text:000000000000759D                 and     eax, 0FFFFFFE8h
.text:00000000000075A0                 add     eax, 400h
.text:00000000000075A5                 mov     [rsp+0C8h+var_94], eax
.text:00000000000075A9                 call    _localeconv
.text:00000000000075AE                 mov     r14, [rax]
.text:00000000000075B1                 mov     r13, rax
.text:00000000000075B4                 mov     rdi, r14        ; s
.text:00000000000075B7                 call    _strlen
.text:00000000000075BC                 mov     rcx, [r13+10h]
.text:00000000000075C0                 mov     r13, [r13+8]
.text:00000000000075C4                 mov     rbp, rax
.text:00000000000075C7                 sub     rax, 1
.text:00000000000075CB                 mov     edx, 1
.text:00000000000075D0                 cmp     rax, 10h
.text:00000000000075D4                 lea     rax, filename+1 ; "."
.text:00000000000075DB                 mov     rdi, r13        ; s
.text:00000000000075DE                 cmovnb  rbp, rdx
.text:00000000000075E2                 mov     [rsp+0C8h+var_90], rcx
.text:00000000000075E7                 cmovnb  r14, rax
.text:00000000000075EB                 call    _strlen
.text:00000000000075F0                 cmp     rax, 11h
.text:00000000000075F4                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:00000000000075FB                 mov     rdi, [rsp+0C8h+var_B8]
.text:0000000000007600                 mov     rcx, [rsp+0C8h+src]
.text:0000000000007605                 cmovnb  r13, rax
.text:0000000000007609                 mov     rax, [rsp+0C8h+s]
.text:000000000000760D                 add     rax, 287h
.text:0000000000007613                 cmp     rdi, rcx
.text:0000000000007616                 mov     [rsp+0C8h+var_C0], rax
.text:000000000000761B                 ja      loc_7768
.text:0000000000007621                 xor     edx, edx
.text:0000000000007623                 mov     rax, rcx
.text:0000000000007626                 div     rdi
.text:0000000000007629                 test    rdx, rdx
.text:000000000000762C                 mov     rdi, rax
.text:000000000000762F                 jz      loc_7990
.text:0000000000007635
.text:0000000000007635 loc_7635:                               ; CODE XREF: human_readable+21B↓j
.text:0000000000007635                                         ; human_readable+231↓j ...
.text:0000000000007635                 mov     [rsp+0C8h+src], rcx
.text:000000000000763A                 test    rcx, rcx
.text:000000000000763D                 fild    [rsp+0C8h+src]
.text:0000000000007641                 jns     short loc_7649
.text:0000000000007643                 fadd    cs:dword_1002C
.text:0000000000007649
.text:0000000000007649 loc_7649:                               ; CODE XREF: human_readable+F1↑j
.text:0000000000007649                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000764E                 mov     [rsp+0C8h+src], rax
.text:0000000000007653                 test    rax, rax
.text:0000000000007656                 fild    [rsp+0C8h+src]
.text:000000000000765A                 jns     short loc_7662
.text:000000000000765C                 fadd    cs:dword_1002C
.text:0000000000007662
.text:0000000000007662 loc_7662:                               ; CODE XREF: human_readable+10A↑j
.text:0000000000007662                 fdivp   st(1), st
.text:0000000000007664                 mov     [rsp+0C8h+src], rbx
.text:0000000000007669                 test    rbx, rbx
.text:000000000000766C                 fild    [rsp+0C8h+src]
.text:0000000000007670                 jns     short loc_7678
.text:0000000000007672                 fadd    cs:dword_1002C
.text:0000000000007678
.text:0000000000007678 loc_7678:                               ; CODE XREF: human_readable+120↑j
.text:0000000000007678                 test    r12b, 10h
.text:000000000000767C                 fmulp   st(1), st
.text:000000000000767E                 jz      loc_7848
.text:0000000000007684                 fild    [rsp+0C8h+var_94]
.text:0000000000007688                 xor     ebx, ebx
.text:000000000000768A                 fld     st
.text:000000000000768C                 jmp     short loc_7694
.text:000000000000768C ; ---------------------------------------------------------------------------
.text:000000000000768E                 align 10h
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: human_readable+154↓j
.text:0000000000007690                 fstp    st(1)
.text:0000000000007692                 fxch    st(2)
.text:0000000000007694
.text:0000000000007694 loc_7694:                               ; CODE XREF: human_readable+13C↑j
.text:0000000000007694                 fld     st
.text:0000000000007696                 add     ebx, 1
.text:0000000000007699                 fmul    st, st(2)
.text:000000000000769B                 fxch    st(3)
.text:000000000000769D                 fucomi  st, st(3)
.text:000000000000769F                 jb      short loc_76B0
.text:00000000000076A1                 cmp     ebx, 8
.text:00000000000076A4                 jnz     short loc_7690
.text:00000000000076A6                 fstp    st(2)
.text:00000000000076A8                 fstp    st(2)
.text:00000000000076AA                 jmp     short loc_76B4
.text:00000000000076AA ; ---------------------------------------------------------------------------
.text:00000000000076AC                 align 10h
.text:00000000000076B0
.text:00000000000076B0 loc_76B0:                               ; CODE XREF: human_readable+14F↑j
.text:00000000000076B0                 fstp    st(2)
.text:00000000000076B2                 fstp    st(2)
.text:00000000000076B4
.text:00000000000076B4 loc_76B4:                               ; CODE XREF: human_readable+15A↑j
.text:00000000000076B4                 mov     ecx, [rsp+0C8h+var_98]
.text:00000000000076B8                 add     rbp, 1
.text:00000000000076BC                 xor     eax, eax
.text:00000000000076BE                 fdivrp  st(1), st
.text:00000000000076C0                 test    ecx, ecx
.text:00000000000076C2                 setz    al
.text:00000000000076C5                 cmp     r15d, 1
.text:00000000000076C9                 lea     rax, [rbp+rax+1]
.text:00000000000076CE                 mov     [rsp+0C8h+src], rax
.text:00000000000076D3                 jz      loc_7C40
.text:00000000000076D9                 fld     cs:tbyte_10080
.text:00000000000076DF                 fucomip st, st(1)
.text:00000000000076E1                 ja      loc_7AB8
.text:00000000000076E7                 fld     st
.text:00000000000076E9
.text:00000000000076E9 loc_76E9:                               ; CODE XREF: human_readable+583↓j
.text:00000000000076E9                 fstp    [rsp+0C8h+var_A8]
.text:00000000000076ED                 sub     rsp, 10h
.text:00000000000076F1                 lea     rcx, a1lf       ; "%.1Lf"
.text:00000000000076F8                 mov     esi, 1
.text:00000000000076FD                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007704                 xor     eax, eax
.text:0000000000007706                 mov     r14, [rsp+0D8h+s]
.text:000000000000770B                 mov     rdi, r14
.text:000000000000770E                 fstp    [rsp+0D8h+var_D8]
.text:0000000000007711                 call    ___sprintf_chk
.text:0000000000007716                 mov     rdi, r14        ; s
.text:0000000000007719                 call    _strlen
.text:000000000000771E                 pop     rcx
.text:000000000000771F                 pop     rsi
.text:0000000000007720                 cmp     rax, [rsp+0C8h+src]
.text:0000000000007725                 mov     r14, rax
.text:0000000000007728                 fld     [rsp+0C8h+var_A8]
.text:000000000000772C                 ja      loc_7CD8
.text:0000000000007732
.text:0000000000007732 loc_7732:                               ; CODE XREF: human_readable+735↓j
.text:0000000000007732                 test    r12b, 8
.text:0000000000007736                 jz      loc_78A0
.text:000000000000773C                 mov     rax, [rsp+0C8h+s]
.text:0000000000007740                 cmp     byte ptr [rax+r14-1], 30h ; '0'
.text:0000000000007746                 jnz     loc_78A8
.text:000000000000774C                 fld     cs:flt_10074
.text:0000000000007752                 cmp     r15d, 1
.text:0000000000007756                 fmul    st(1), st
.text:0000000000007758                 jnz     loc_7CE0
.text:000000000000775E                 jmp     loc_7C93
.text:000000000000775E ; ---------------------------------------------------------------------------
.text:0000000000007763                 align 8
.text:0000000000007768
.text:0000000000007768 loc_7768:                               ; CODE XREF: human_readable+CB↑j
.text:0000000000007768                 test    rcx, rcx
.text:000000000000776B                 jz      loc_7635
.text:0000000000007771                 mov     rax, [rsp+0C8h+var_B8]
.text:0000000000007776                 xor     edx, edx
.text:0000000000007778                 div     rcx
.text:000000000000777B                 test    rdx, rdx
.text:000000000000777E                 mov     r8, rax
.text:0000000000007781                 jnz     loc_7635
.text:0000000000007787                 mov     rax, rbx
.text:000000000000778A                 xor     edx, edx
.text:000000000000778C                 div     r8
.text:000000000000778F                 mov     rbx, rax
.text:0000000000007792                 lea     rax, [rdx+rdx*4]
.text:0000000000007796                 xor     edx, edx
.text:0000000000007798                 mov     rsi, rbx
.text:000000000000779B                 add     rax, rax
.text:000000000000779E                 div     r8
.text:00000000000077A1                 add     rdx, rdx
.text:00000000000077A4                 mov     r9d, eax
.text:00000000000077A7                 cmp     r8, rdx
.text:00000000000077AA                 jbe     loc_7D38
.text:00000000000077B0                 xor     edi, edi
.text:00000000000077B2                 test    rdx, rdx
.text:00000000000077B5                 setnz   dil
.text:00000000000077B9
.text:00000000000077B9 loc_77B9:                               ; CODE XREF: human_readable+45D↓j
.text:00000000000077B9                                         ; human_readable+7F3↓j
.text:00000000000077B9                 mov     ecx, r12d
.text:00000000000077BC                 mov     r8, [rsp+0C8h+var_C0]
.text:00000000000077C1                 mov     ebx, 0FFFFFFFFh
.text:00000000000077C6                 and     ecx, 10h
.text:00000000000077C9                 jz      loc_7B90
.text:00000000000077CF                 mov     r8d, [rsp+0C8h+var_94]
.text:00000000000077D4                 cmp     r8, rsi
.text:00000000000077D7                 mov     r11, r8
.text:00000000000077DA                 ja      loc_7D50
.text:00000000000077E0                 xor     ebx, ebx
.text:00000000000077E2                 jmp     short loc_7807
.text:00000000000077E2 ; ---------------------------------------------------------------------------
.text:00000000000077E4                 align 8
.text:00000000000077E8
.text:00000000000077E8 loc_77E8:                               ; CODE XREF: human_readable+2E0↓j
.text:00000000000077E8                 test    edi, edi
.text:00000000000077EA                 setnz   dil
.text:00000000000077EE                 movzx   edi, dil
.text:00000000000077F2
.text:00000000000077F2 loc_77F2:                               ; CODE XREF: human_readable+2F0↓j
.text:00000000000077F2                 add     ebx, 1
.text:00000000000077F5                 cmp     r8, r10
.text:00000000000077F8                 ja      loc_7B0D
.text:00000000000077FE                 cmp     ebx, 8
.text:0000000000007801                 jz      loc_7DA8
.text:0000000000007807
.text:0000000000007807 loc_7807:                               ; CODE XREF: human_readable+292↑j
.text:0000000000007807                 mov     rax, rsi
.text:000000000000780A                 xor     edx, edx
.text:000000000000780C                 mov     esi, edi
.text:000000000000780E                 div     r8
.text:0000000000007811                 sar     esi, 1
.text:0000000000007813                 mov     r10, rax
.text:0000000000007816                 lea     eax, [rdx+rdx*4]
.text:0000000000007819                 xor     edx, edx
.text:000000000000781B                 lea     eax, [r9+rax*2]
.text:000000000000781F                 div     r11d
.text:0000000000007822                 lea     edx, [rsi+rdx*2]
.text:0000000000007825                 mov     r9d, eax
.text:0000000000007828                 mov     rsi, r10
.text:000000000000782B                 add     edi, edx
.text:000000000000782D                 cmp     r11d, edx
.text:0000000000007830                 ja      short loc_77E8
.text:0000000000007832                 cmp     r11d, edi
.text:0000000000007835                 setb    dil
.text:0000000000007839                 movzx   edi, dil
.text:000000000000783D                 add     edi, 2
.text:0000000000007840                 jmp     short loc_77F2
.text:0000000000007840 ; ---------------------------------------------------------------------------
.text:0000000000007842                 align 8
.text:0000000000007848
.text:0000000000007848 loc_7848:                               ; CODE XREF: human_readable+12E↑j
.text:0000000000007848                 cmp     r15d, 1
.text:000000000000784C                 jz      short loc_785C
.text:000000000000784E                 fld     cs:tbyte_10080
.text:0000000000007854                 fucomip st, st(1)
.text:0000000000007856                 ja      loc_7AE0
.text:000000000000785C
.text:000000000000785C loc_785C:                               ; CODE XREF: human_readable+2FC↑j
.text:000000000000785C                                         ; human_readable+5A3↓j
.text:000000000000785C                 sub     rsp, 10h
.text:0000000000007860                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000007867                 mov     esi, 1
.text:000000000000786C                 mov     rbx, [rsp+0D8h+s]
.text:0000000000007871                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007878                 xor     eax, eax
.text:000000000000787A                 fstp    [rsp+0D8h+var_D8]
.text:000000000000787D                 xor     ebp, ebp
.text:000000000000787F                 mov     rdi, rbx
.text:0000000000007882                 call    ___sprintf_chk
.text:0000000000007887                 mov     rdi, rbx        ; s
.text:000000000000788A                 mov     ebx, 0FFFFFFFFh
.text:000000000000788F                 call    _strlen
.text:0000000000007894                 pop     rsi
.text:0000000000007895                 pop     rdi
.text:0000000000007896                 mov     r14, rax
.text:0000000000007899                 jmp     short loc_78B0
.text:0000000000007899 ; ---------------------------------------------------------------------------
.text:000000000000789B                 align 20h
.text:00000000000078A0
.text:00000000000078A0 loc_78A0:                               ; CODE XREF: human_readable+1E6↑j
.text:00000000000078A0                 fstp    st
.text:00000000000078A2                 jmp     short loc_78B0
.text:00000000000078A2 ; ---------------------------------------------------------------------------
.text:00000000000078A4                 align 8
.text:00000000000078A8
.text:00000000000078A8 loc_78A8:                               ; CODE XREF: human_readable+1F6↑j
.text:00000000000078A8                 fstp    st
.text:00000000000078AA                 nop     word ptr [rax+rax+00h]
.text:00000000000078B0
.text:00000000000078B0 loc_78B0:                               ; CODE XREF: human_readable+349↑j
.text:00000000000078B0                                         ; human_readable+352↑j ...
.text:00000000000078B0                 mov     r15, [rsp+0C8h+var_C0]
.text:00000000000078B5                 mov     rsi, [rsp+0C8h+s] ; src
.text:00000000000078B9                 mov     rdx, r14        ; n
.text:00000000000078BC                 sub     r15, r14
.text:00000000000078BF                 sub     r14, rbp
.text:00000000000078C2                 mov     rdi, r15        ; dest
.text:00000000000078C5                 call    _memmove
.text:00000000000078CA                 mov     r8, r14
.text:00000000000078CD                 add     r8, r15
.text:00000000000078D0
.text:00000000000078D0 loc_78D0:                               ; CODE XREF: human_readable+6A6↓j
.text:00000000000078D0                                         ; human_readable+84F↓j
.text:00000000000078D0                 test    r12b, 4
.text:00000000000078D4                 jnz     loc_79B8
.text:00000000000078DA
.text:00000000000078DA loc_78DA:                               ; CODE XREF: human_readable+53F↓j
.text:00000000000078DA                                         ; human_readable+A02↓j
.text:00000000000078DA                 test    r12b, 80h
.text:00000000000078DE                 jz      short loc_7957
.text:00000000000078E0                 cmp     ebx, 0FFFFFFFFh
.text:00000000000078E3                 jz      loc_7C00
.text:00000000000078E9
.text:00000000000078E9 loc_78E9:                               ; CODE XREF: human_readable+6D4↓j
.text:00000000000078E9                                         ; human_readable+6E2↓j ...
.text:00000000000078E9                 mov     eax, r12d
.text:00000000000078EC                 and     eax, 100h
.text:00000000000078F1                 mov     ecx, eax
.text:00000000000078F3                 or      ecx, ebx
.text:00000000000078F5                 jz      short loc_7957
.text:00000000000078F7                 and     r12d, 40h
.text:00000000000078FB                 jnz     loc_7A98
.text:0000000000007901
.text:0000000000007901 loc_7901:                               ; CODE XREF: human_readable+55F↓j
.text:0000000000007901                 test    ebx, ebx
.text:0000000000007903                 jz      loc_7F36
.text:0000000000007909                 cmp     ebx, 1
.text:000000000000790C                 jnz     short loc_791C
.text:000000000000790E                 mov     r9d, [rsp+0C8h+var_98]
.text:0000000000007913                 test    r9d, r9d
.text:0000000000007916                 jz      loc_7D60
.text:000000000000791C
.text:000000000000791C loc_791C:                               ; CODE XREF: human_readable+3BC↑j
.text:000000000000791C                 lea     rcx, power_letter
.text:0000000000007923                 movsxd  rbx, ebx
.text:0000000000007926                 mov     rdi, [rsp+0C8h+var_C0]
.text:000000000000792B                 test    eax, eax
.text:000000000000792D                 movzx   ecx, byte ptr [rcx+rbx]
.text:0000000000007931                 lea     rdx, [rdi+1]
.text:0000000000007935                 mov     [rdi], cl
.text:0000000000007937                 jz      loc_7D74
.text:000000000000793D                 mov     r8d, [rsp+0C8h+var_98]
.text:0000000000007942                 test    r8d, r8d
.text:0000000000007945                 jnz     loc_7B00
.text:000000000000794B
.text:000000000000794B loc_794B:                               ; CODE XREF: human_readable+5B8↓j
.text:000000000000794B                                         ; human_readable+81E↓j ...
.text:000000000000794B                 lea     rax, [rdx+1]
.text:000000000000794F                 mov     byte ptr [rdx], 42h ; 'B'
.text:0000000000007952                 mov     [rsp+0C8h+var_C0], rax
.text:0000000000007957
.text:0000000000007957 loc_7957:                               ; CODE XREF: human_readable+38E↑j
.text:0000000000007957                                         ; human_readable+3A5↑j ...
.text:0000000000007957                 mov     rax, [rsp+0C8h+var_C0]
.text:000000000000795C                 mov     rcx, [rsp+0C8h+var_40]
.text:0000000000007964                 xor     rcx, fs:28h
.text:000000000000796D                 mov     byte ptr [rax], 0
.text:0000000000007970                 mov     rax, r15
.text:0000000000007973                 jnz     loc_7F0B
.text:0000000000007979                 add     rsp, 98h
.text:0000000000007980                 pop     rbx
.text:0000000000007981                 pop     rbp
.text:0000000000007982                 pop     r12
.text:0000000000007984                 pop     r13
.text:0000000000007986                 pop     r14
.text:0000000000007988                 pop     r15
.text:000000000000798A                 retn
.text:000000000000798A ; ---------------------------------------------------------------------------
.text:000000000000798B                 align 10h
.text:0000000000007990
.text:0000000000007990 loc_7990:                               ; CODE XREF: human_readable+DF↑j
.text:0000000000007990                 mov     rsi, rbx
.text:0000000000007993                 xor     edx, edx
.text:0000000000007995                 imul    rsi, rax
.text:0000000000007999                 mov     rax, rsi
.text:000000000000799C                 div     rdi
.text:000000000000799F                 cmp     rax, rbx
.text:00000000000079A2                 jnz     loc_7635
.text:00000000000079A8                 xor     edi, edi
.text:00000000000079AA                 xor     r9d, r9d
.text:00000000000079AD                 jmp     loc_77B9
.text:00000000000079AD ; ---------------------------------------------------------------------------
.text:00000000000079B2                 align 8
.text:00000000000079B8
.text:00000000000079B8 loc_79B8:                               ; CODE XREF: human_readable+384↑j
.text:00000000000079B8                 mov     r14, r8
.text:00000000000079BB                 mov     rdi, r13        ; s
.text:00000000000079BE                 mov     [rsp+0C8h+var_80], r8
.text:00000000000079C3                 sub     r14, r15
.text:00000000000079C6                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000079CD                 call    _strlen
.text:00000000000079D2                 lea     rdi, [rsp+0C8h+var_78]
.text:00000000000079D7                 mov     ecx, 29h ; ')'
.text:00000000000079DC                 mov     rdx, r14
.text:00000000000079DF                 mov     rsi, r15
.text:00000000000079E2                 mov     [rsp+0C8h+n], rax
.text:00000000000079E7                 mov     [rsp+0C8h+src], rdi
.text:00000000000079EC                 call    ___memcpy_chk
.text:00000000000079F1                 mov     ecx, r12d
.text:00000000000079F4                 mov     dword ptr [rsp+0C8h+var_A8], ebx
.text:00000000000079F8                 mov     r12, r14
.text:00000000000079FB                 mov     rbx, r13
.text:00000000000079FE                 mov     r8, [rsp+0C8h+var_80]
.text:0000000000007A03                 mov     r15, [rsp+0C8h+var_90]
.text:0000000000007A08                 mov     r13, [rsp+0C8h+n]
.text:0000000000007A0D                 mov     r14d, ecx
.text:0000000000007A10                 jmp     short loc_7A52
.text:0000000000007A10 ; ---------------------------------------------------------------------------
.text:0000000000007A12                 align 8
.text:0000000000007A18
.text:0000000000007A18 loc_7A18:                               ; CODE XREF: human_readable+51A↓j
.text:0000000000007A18                 mov     rax, [rsp+0C8h+src]
.text:0000000000007A1D                 sub     r12, rbp
.text:0000000000007A20                 sub     r8, rbp
.text:0000000000007A23                 mov     rdi, r8         ; dest
.text:0000000000007A26                 mov     rdx, rbp        ; n
.text:0000000000007A29                 lea     rsi, [rax+r12]  ; src
.text:0000000000007A2D                 call    _memcpy
.text:0000000000007A32                 test    r12, r12
.text:0000000000007A35                 mov     r8, rax
.text:0000000000007A38                 jz      loc_7F48
.text:0000000000007A3E                 sub     r8, r13
.text:0000000000007A41                 mov     rdx, r13        ; n
.text:0000000000007A44                 mov     rsi, rbx        ; src
.text:0000000000007A47                 mov     rdi, r8         ; dest
.text:0000000000007A4A                 call    _memcpy
.text:0000000000007A4F                 mov     r8, rax
.text:0000000000007A52
.text:0000000000007A52 loc_7A52:                               ; CODE XREF: human_readable+4C0↑j
.text:0000000000007A52                 movzx   eax, byte ptr [r15]
.text:0000000000007A56                 test    al, al
.text:0000000000007A58                 jz      short loc_7A67
.text:0000000000007A5A                 cmp     al, 7Fh
.text:0000000000007A5C                 movzx   ebp, al
.text:0000000000007A5F                 cmovnb  rbp, r12
.text:0000000000007A63                 add     r15, 1
.text:0000000000007A67
.text:0000000000007A67 loc_7A67:                               ; CODE XREF: human_readable+508↑j
.text:0000000000007A67                 cmp     rbp, r12
.text:0000000000007A6A                 jbe     short loc_7A18
.text:0000000000007A6C                 mov     eax, r14d
.text:0000000000007A6F                 mov     r15, r8
.text:0000000000007A72                 mov     r14, r12
.text:0000000000007A75                 mov     rsi, [rsp+0C8h+src] ; src
.text:0000000000007A7A                 sub     r15, r14
.text:0000000000007A7D                 mov     rdx, r14        ; n
.text:0000000000007A80                 mov     rdi, r15        ; dest
.text:0000000000007A83                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000007A87                 mov     r12d, eax
.text:0000000000007A8A                 call    _memcpy
.text:0000000000007A8F                 jmp     loc_78DA
.text:0000000000007A8F ; ---------------------------------------------------------------------------
.text:0000000000007A94                 align 8
.text:0000000000007A98
.text:0000000000007A98 loc_7A98:                               ; CODE XREF: human_readable+3AB↑j
.text:0000000000007A98                 mov     rcx, [rsp+0C8h+s]
.text:0000000000007A9C                 lea     rdi, [rcx+288h]
.text:0000000000007AA3                 mov     byte ptr [rcx+287h], 20h ; ' '
.text:0000000000007AAA                 mov     [rsp+0C8h+var_C0], rdi
.text:0000000000007AAF                 jmp     loc_7901
.text:0000000000007AAF ; ---------------------------------------------------------------------------
.text:0000000000007AB4                 align 8
.text:0000000000007AB8
.text:0000000000007AB8 loc_7AB8:                               ; CODE XREF: human_readable+191↑j
.text:0000000000007AB8                 sub     rsp, 10h
.text:0000000000007ABC                 mov     edi, r15d
.text:0000000000007ABF                 fld     st
.text:0000000000007AC1                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000007AC4                 fstp    [rsp+0D8h+var_A8]
.text:0000000000007AC8                 call    adjust_value
.text:0000000000007ACD                 pop     rax
.text:0000000000007ACE                 pop     rdx
.text:0000000000007ACF                 fld     [rsp+0C8h+var_A8]
.text:0000000000007AD3                 jmp     loc_76E9
.text:0000000000007AD3 ; ---------------------------------------------------------------------------
.text:0000000000007AD8                 align 20h
.text:0000000000007AE0
.text:0000000000007AE0 loc_7AE0:                               ; CODE XREF: human_readable+306↑j
.text:0000000000007AE0                 sub     rsp, 10h
.text:0000000000007AE4                 mov     edi, r15d
.text:0000000000007AE7                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000007AEA                 call    adjust_value
.text:0000000000007AEF                 pop     r8
.text:0000000000007AF1                 pop     r9
.text:0000000000007AF3                 jmp     loc_785C
.text:0000000000007AF3 ; ---------------------------------------------------------------------------
.text:0000000000007AF8                 align 20h
.text:0000000000007B00
.text:0000000000007B00 loc_7B00:                               ; CODE XREF: human_readable+3F5↑j
.text:0000000000007B00                 lea     rdx, [rdi+2]
.text:0000000000007B04                 mov     byte ptr [rdi+1], 69h ; 'i'
.text:0000000000007B08                 jmp     loc_794B
.text:0000000000007B0D ; ---------------------------------------------------------------------------
.text:0000000000007B0D
.text:0000000000007B0D loc_7B0D:                               ; CODE XREF: human_readable+2A8↑j
.text:0000000000007B0D                 cmp     r10, 9
.text:0000000000007B11                 ja      loc_7DA8
.text:0000000000007B17                 cmp     r15d, 1
.text:0000000000007B1B                 jz      loc_7DD2
.text:0000000000007B21                 test    r15d, r15d
.text:0000000000007B24                 setz    dl
.text:0000000000007B27                 test    edi, edi
.text:0000000000007B29                 setnle  r8b
.text:0000000000007B2D                 and     edx, r8d
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: human_readable+88F↓j
.text:0000000000007B30                 test    dl, dl
.text:0000000000007B32                 jz      loc_7DB9
.text:0000000000007B38                 lea     r9d, [rax+1]
.text:0000000000007B3C                 cmp     r9d, 0Ah
.text:0000000000007B40                 jz      loc_7E41
.text:0000000000007B46
.text:0000000000007B46 loc_7B46:                               ; CODE XREF: human_readable+86B↓j
.text:0000000000007B46                 add     r9d, 30h ; '0'
.text:0000000000007B4A
.text:0000000000007B4A loc_7B4A:                               ; CODE XREF: human_readable+87D↓j
.text:0000000000007B4A                 mov     rax, [rsp+0C8h+s]
.text:0000000000007B4E                 lea     r8, [rax+286h]
.text:0000000000007B55                 mov     [rax+286h], r9b
.text:0000000000007B5C                 mov     eax, ebp
.text:0000000000007B5E                 sub     r8, rbp
.text:0000000000007B61                 cmp     ebp, 8
.text:0000000000007B64                 jnb     loc_7DF1
.text:0000000000007B6A                 test    bpl, 4
.text:0000000000007B6E                 jnz     loc_7EF6
.text:0000000000007B74                 test    eax, eax
.text:0000000000007B76                 jz      short loc_7B87
.text:0000000000007B78                 movzx   edx, byte ptr [r14]
.text:0000000000007B7C                 test    al, 2
.text:0000000000007B7E                 mov     [r8], dl
.text:0000000000007B81                 jnz     loc_7F10
.text:0000000000007B87
.text:0000000000007B87 loc_7B87:                               ; CODE XREF: human_readable+626↑j
.text:0000000000007B87                                         ; human_readable+8CF↓j ...
.text:0000000000007B87                 xor     edi, edi
.text:0000000000007B89                 xor     r9d, r9d
.text:0000000000007B8C                 nop     dword ptr [rax+00h]
.text:0000000000007B90
.text:0000000000007B90 loc_7B90:                               ; CODE XREF: human_readable+279↑j
.text:0000000000007B90                                         ; human_readable+807↓j ...
.text:0000000000007B90                 cmp     r15d, 1
.text:0000000000007B94                 jz      loc_7D10
.text:0000000000007B9A                 test    r15d, r15d
.text:0000000000007B9D                 jnz     short loc_7BC0
.text:0000000000007B9F                 add     edi, r9d
.text:0000000000007BA2                 test    edi, edi
.text:0000000000007BA4                 jle     short loc_7BC0
.text:0000000000007BA6
.text:0000000000007BA6 loc_7BA6:                               ; CODE XREF: human_readable+7D9↓j
.text:0000000000007BA6                 add     rsi, 1
.text:0000000000007BAA                 test    ecx, ecx
.text:0000000000007BAC                 jz      short loc_7BC0
.text:0000000000007BAE                 mov     eax, [rsp+0C8h+var_94]
.text:0000000000007BB2                 cmp     rax, rsi
.text:0000000000007BB5                 jz      loc_7D80
.text:0000000000007BBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000007BC0
.text:0000000000007BC0 loc_7BC0:                               ; CODE XREF: human_readable+64D↑j
.text:0000000000007BC0                                         ; human_readable+654↑j ...
.text:0000000000007BC0                 mov     r15, r8
.text:0000000000007BC3                 mov     rcx, 0CCCCCCCCCCCCCCCDh
.text:0000000000007BCD                 nop     dword ptr [rax]
.text:0000000000007BD0
.text:0000000000007BD0 loc_7BD0:                               ; CODE XREF: human_readable+6A4↓j
.text:0000000000007BD0                 mov     rax, rsi
.text:0000000000007BD3                 sub     r15, 1
.text:0000000000007BD7                 mul     rcx
.text:0000000000007BDA                 shr     rdx, 3
.text:0000000000007BDE                 lea     rax, [rdx+rdx*4]
.text:0000000000007BE2                 add     rax, rax
.text:0000000000007BE5                 sub     rsi, rax
.text:0000000000007BE8                 add     esi, 30h ; '0'
.text:0000000000007BEB                 test    rdx, rdx
.text:0000000000007BEE                 mov     [r15], sil
.text:0000000000007BF1                 mov     rsi, rdx
.text:0000000000007BF4                 jnz     short loc_7BD0
.text:0000000000007BF6                 jmp     loc_78D0
.text:0000000000007BF6 ; ---------------------------------------------------------------------------
.text:0000000000007BFB                 align 20h
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: human_readable+393↑j
.text:0000000000007C00                 mov     rcx, [rsp+0C8h+var_B8]
.text:0000000000007C05                 cmp     rcx, 1
.text:0000000000007C09                 jbe     loc_7DB2
.text:0000000000007C0F                 mov     edx, [rsp+0C8h+var_94]
.text:0000000000007C13                 mov     ebx, 1
.text:0000000000007C18                 mov     eax, 1
.text:0000000000007C1D
.text:0000000000007C1D loc_7C1D:                               ; CODE XREF: human_readable+6E0↓j
.text:0000000000007C1D                 imul    rax, rdx
.text:0000000000007C21                 cmp     rcx, rax
.text:0000000000007C24                 jbe     loc_78E9
.text:0000000000007C2A                 add     ebx, 1
.text:0000000000007C2D                 cmp     ebx, 8
.text:0000000000007C30                 jnz     short loc_7C1D
.text:0000000000007C32                 jmp     loc_78E9
.text:0000000000007C32 ; ---------------------------------------------------------------------------
.text:0000000000007C37                 align 20h
.text:0000000000007C40
.text:0000000000007C40 loc_7C40:                               ; CODE XREF: human_readable+183↑j
.text:0000000000007C40                 sub     rsp, 10h
.text:0000000000007C44                 lea     rcx, a1lf       ; "%.1Lf"
.text:0000000000007C4B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007C52                 fld     st
.text:0000000000007C54                 fstp    [rsp+0D8h+var_D8]
.text:0000000000007C57                 mov     r14, [rsp+0D8h+s]
.text:0000000000007C5C                 mov     esi, 1
.text:0000000000007C61                 xor     eax, eax
.text:0000000000007C63                 mov     rdi, r14
.text:0000000000007C66                 fstp    [rsp+0D8h+var_A8]
.text:0000000000007C6A                 call    ___sprintf_chk
.text:0000000000007C6F                 mov     rdi, r14        ; s
.text:0000000000007C72                 call    _strlen
.text:0000000000007C77                 mov     r14, rax
.text:0000000000007C7A                 pop     rax
.text:0000000000007C7B                 pop     rdx
.text:0000000000007C7C                 cmp     r14, [rsp+0C8h+src]
.text:0000000000007C81                 fld     [rsp+0C8h+var_A8]
.text:0000000000007C85                 jbe     loc_7732
.text:0000000000007C8B                 fld     cs:flt_10074
.text:0000000000007C91                 fmul    st(1), st
.text:0000000000007C93
.text:0000000000007C93 loc_7C93:                               ; CODE XREF: human_readable+20E↑j
.text:0000000000007C93                                         ; human_readable+798↓j ...
.text:0000000000007C93                 fdivp   st(1), st
.text:0000000000007C95                 sub     rsp, 10h
.text:0000000000007C99                 lea     rcx, a0lf       ; "%.0Lf"
.text:0000000000007CA0                 mov     r14, [rsp+0D8h+s]
.text:0000000000007CA5                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007CAC                 mov     esi, 1
.text:0000000000007CB1                 xor     eax, eax
.text:0000000000007CB3                 xor     ebp, ebp
.text:0000000000007CB5                 mov     rdi, r14
.text:0000000000007CB8                 fstp    [rsp+0D8h+var_D8]
.text:0000000000007CBB                 call    ___sprintf_chk
.text:0000000000007CC0                 mov     rdi, r14        ; s
.text:0000000000007CC3                 call    _strlen
.text:0000000000007CC8                 pop     r10
.text:0000000000007CCA                 mov     r14, rax
.text:0000000000007CCD                 pop     r11
.text:0000000000007CCF                 jmp     loc_78B0
.text:0000000000007CCF ; ---------------------------------------------------------------------------
.text:0000000000007CD4                 align 8
.text:0000000000007CD8
.text:0000000000007CD8 loc_7CD8:                               ; CODE XREF: human_readable+1DC↑j
.text:0000000000007CD8                 fld     cs:flt_10074
.text:0000000000007CDE                 fmul    st(1), st
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: human_readable+208↑j
.text:0000000000007CE0                 fld     cs:tbyte_10080
.text:0000000000007CE6                 fucomip st, st(2)
.text:0000000000007CE8                 jbe     short loc_7C93
.text:0000000000007CEA                 fstp    dword ptr [rsp+0C8h+src]
.text:0000000000007CEE                 sub     rsp, 10h
.text:0000000000007CF2                 mov     edi, r15d
.text:0000000000007CF5                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000007CF8                 call    adjust_value
.text:0000000000007CFD                 pop     rbp
.text:0000000000007CFE                 pop     r14
.text:0000000000007D00                 fld     dword ptr [rsp+0C8h+src]
.text:0000000000007D04                 jmp     short loc_7C93
.text:0000000000007D04 ; ---------------------------------------------------------------------------
.text:0000000000007D06                 align 10h
.text:0000000000007D10
.text:0000000000007D10 loc_7D10:                               ; CODE XREF: human_readable+644↑j
.text:0000000000007D10                 mov     rax, rsi
.text:0000000000007D13                 movsxd  rdi, edi
.text:0000000000007D16                 and     eax, 1
.text:0000000000007D19                 add     rax, rdi
.text:0000000000007D1C                 setnz   al
.text:0000000000007D1F                 movzx   eax, al
.text:0000000000007D22                 add     r9d, eax
.text:0000000000007D25                 cmp     r9d, 5
.text:0000000000007D29                 jg      loc_7BA6
.text:0000000000007D2F                 jmp     loc_7BC0
.text:0000000000007D2F ; ---------------------------------------------------------------------------
.text:0000000000007D34                 align 8
.text:0000000000007D38
.text:0000000000007D38 loc_7D38:                               ; CODE XREF: human_readable+25A↑j
.text:0000000000007D38                 setb    dil
.text:0000000000007D3C                 movzx   edi, dil
.text:0000000000007D40                 add     edi, 2
.text:0000000000007D43                 jmp     loc_77B9
.text:0000000000007D43 ; ---------------------------------------------------------------------------
.text:0000000000007D48                 align 10h
.text:0000000000007D50
.text:0000000000007D50 loc_7D50:                               ; CODE XREF: human_readable+28A↑j
.text:0000000000007D50                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000007D55                 xor     ebx, ebx
.text:0000000000007D57                 jmp     loc_7B90
.text:0000000000007D57 ; ---------------------------------------------------------------------------
.text:0000000000007D5C                 align 20h
.text:0000000000007D60
.text:0000000000007D60 loc_7D60:                               ; CODE XREF: human_readable+3C6↑j
.text:0000000000007D60                 mov     rbx, [rsp+0C8h+var_C0]
.text:0000000000007D65                 test    eax, eax
.text:0000000000007D67                 lea     rdx, [rbx+1]
.text:0000000000007D6B                 mov     byte ptr [rbx], 6Bh ; 'k'
.text:0000000000007D6E                 jnz     loc_794B
.text:0000000000007D74
.text:0000000000007D74 loc_7D74:                               ; CODE XREF: human_readable+3E7↑j
.text:0000000000007D74                 mov     [rsp+0C8h+var_C0], rdx
.text:0000000000007D79                 jmp     loc_7957
.text:0000000000007D79 ; ---------------------------------------------------------------------------
.text:0000000000007D7E                 align 20h
.text:0000000000007D80
.text:0000000000007D80 loc_7D80:                               ; CODE XREF: human_readable+665↑j
.text:0000000000007D80                 cmp     ebx, 8
.text:0000000000007D83                 jz      loc_7BC0
.text:0000000000007D89                 add     ebx, 1
.text:0000000000007D8C                 test    r12b, 8
.text:0000000000007D90                 jz      loc_7E52
.text:0000000000007D96
.text:0000000000007D96 loc_7D96:                               ; CODE XREF: human_readable+922↓j
.text:0000000000007D96                                         ; human_readable+931↓j ...
.text:0000000000007D96                 lea     r15, [r8-1]
.text:0000000000007D9A                 mov     byte ptr [r8-1], 31h ; '1'
.text:0000000000007D9F                 jmp     loc_78D0
.text:0000000000007D9F ; ---------------------------------------------------------------------------
.text:0000000000007DA4                 align 8
.text:0000000000007DA8
.text:0000000000007DA8 loc_7DA8:                               ; CODE XREF: human_readable+2B1↑j
.text:0000000000007DA8                                         ; human_readable+5C1↑j
.text:0000000000007DA8                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000007DAD                 jmp     loc_7B90
.text:0000000000007DB2 ; ---------------------------------------------------------------------------
.text:0000000000007DB2
.text:0000000000007DB2 loc_7DB2:                               ; CODE XREF: human_readable+6B9↑j
.text:0000000000007DB2                 xor     ebx, ebx
.text:0000000000007DB4                 jmp     loc_78E9
.text:0000000000007DB9 ; ---------------------------------------------------------------------------
.text:0000000000007DB9
.text:0000000000007DB9 loc_7DB9:                               ; CODE XREF: human_readable+5E2↑j
.text:0000000000007DB9                 test    eax, eax
.text:0000000000007DBB                 jnz     loc_7B46
.text:0000000000007DC1
.text:0000000000007DC1 loc_7DC1:                               ; CODE XREF: human_readable+8FD↓j
.text:0000000000007DC1                 test    r12b, 8
.text:0000000000007DC5                 jnz     short loc_7DE4
.text:0000000000007DC7                 mov     r9d, 30h ; '0'
.text:0000000000007DCD                 jmp     loc_7B4A
.text:0000000000007DD2 ; ---------------------------------------------------------------------------
.text:0000000000007DD2
.text:0000000000007DD2 loc_7DD2:                               ; CODE XREF: human_readable+5CB↑j
.text:0000000000007DD2                 mov     edx, eax
.text:0000000000007DD4                 and     edx, 1
.text:0000000000007DD7                 add     edx, edi
.text:0000000000007DD9                 cmp     edx, 2
.text:0000000000007DDC                 setnle  dl
.text:0000000000007DDF                 jmp     loc_7B30
.text:0000000000007DE4 ; ---------------------------------------------------------------------------
.text:0000000000007DE4
.text:0000000000007DE4 loc_7DE4:                               ; CODE XREF: human_readable+875↑j
.text:0000000000007DE4                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000007DE9                 xor     r9d, r9d
.text:0000000000007DEC                 jmp     loc_7B90
.text:0000000000007DF1 ; ---------------------------------------------------------------------------
.text:0000000000007DF1
.text:0000000000007DF1 loc_7DF1:                               ; CODE XREF: human_readable+614↑j
.text:0000000000007DF1                 mov     rax, [r14]
.text:0000000000007DF4                 mov     r9, r14
.text:0000000000007DF7                 mov     [r8], rax
.text:0000000000007DFA                 mov     eax, ebp
.text:0000000000007DFC                 mov     rdx, [r14+rax-8]
.text:0000000000007E01                 mov     [r8+rax-8], rdx
.text:0000000000007E06                 lea     rdx, [r8+8]
.text:0000000000007E0A                 mov     rax, r8
.text:0000000000007E0D                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:0000000000007E11                 sub     rax, rdx
.text:0000000000007E14                 sub     r9, rax
.text:0000000000007E17                 add     eax, ebp
.text:0000000000007E19                 and     eax, 0FFFFFFF8h
.text:0000000000007E1C                 cmp     eax, 8
.text:0000000000007E1F                 jb      loc_7B87
.text:0000000000007E25                 and     eax, 0FFFFFFF8h
.text:0000000000007E28                 xor     edi, edi
.text:0000000000007E2A
.text:0000000000007E2A loc_7E2A:                               ; CODE XREF: human_readable+8EA↓j
.text:0000000000007E2A                 mov     r10d, edi
.text:0000000000007E2D                 add     edi, 8
.text:0000000000007E30                 mov     r11, [r9+r10]
.text:0000000000007E34                 cmp     edi, eax
.text:0000000000007E36                 mov     [rdx+r10], r11
.text:0000000000007E3A                 jb      short loc_7E2A
.text:0000000000007E3C                 jmp     loc_7B87
.text:0000000000007E41 ; ---------------------------------------------------------------------------
.text:0000000000007E41
.text:0000000000007E41 loc_7E41:                               ; CODE XREF: human_readable+5F0↑j
.text:0000000000007E41                 lea     rsi, [r10+1]
.text:0000000000007E45                 cmp     rsi, 0Ah
.text:0000000000007E49                 jz      short loc_7EA0
.text:0000000000007E4B                 xor     edi, edi
.text:0000000000007E4D                 jmp     loc_7DC1
.text:0000000000007E52 ; ---------------------------------------------------------------------------
.text:0000000000007E52
.text:0000000000007E52 loc_7E52:                               ; CODE XREF: human_readable+840↑j
.text:0000000000007E52                 mov     rax, rbp
.text:0000000000007E55                 mov     byte ptr [r8-1], 30h ; '0'
.text:0000000000007E5A                 not     rax
.text:0000000000007E5D                 add     r8, rax
.text:0000000000007E60                 cmp     ebp, 8
.text:0000000000007E63                 mov     eax, ebp
.text:0000000000007E65                 jnb     short loc_7EAA
.text:0000000000007E67                 and     ebp, 4
.text:0000000000007E6A                 jnz     loc_7F21
.text:0000000000007E70                 test    eax, eax
.text:0000000000007E72                 jz      loc_7D96
.text:0000000000007E78                 movzx   edx, byte ptr [r14]
.text:0000000000007E7C                 test    al, 2
.text:0000000000007E7E                 mov     [r8], dl
.text:0000000000007E81                 jz      loc_7D96
.text:0000000000007E87                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000007E8D                 mov     [r8+rax-2], dx
.text:0000000000007E93                 jmp     loc_7D96
.text:0000000000007E93 ; ---------------------------------------------------------------------------
.text:0000000000007E98                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: human_readable+8F9↑j
.text:0000000000007EA0                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000007EA5                 jmp     loc_7B87
.text:0000000000007EAA ; ---------------------------------------------------------------------------
.text:0000000000007EAA
.text:0000000000007EAA loc_7EAA:                               ; CODE XREF: human_readable+915↑j
.text:0000000000007EAA                 mov     rax, [r14]
.text:0000000000007EAD                 lea     rcx, [r8+8]
.text:0000000000007EB1                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000007EB5                 mov     [r8], rax
.text:0000000000007EB8                 mov     eax, ebp
.text:0000000000007EBA                 mov     rdx, [r14+rax-8]
.text:0000000000007EBF                 mov     [r8+rax-8], rdx
.text:0000000000007EC4                 mov     rax, r8
.text:0000000000007EC7                 sub     rax, rcx
.text:0000000000007ECA                 sub     r14, rax
.text:0000000000007ECD                 add     eax, ebp
.text:0000000000007ECF                 and     eax, 0FFFFFFF8h
.text:0000000000007ED2                 cmp     eax, 8
.text:0000000000007ED5                 jb      loc_7D96
.text:0000000000007EDB                 and     eax, 0FFFFFFF8h
.text:0000000000007EDE                 xor     edx, edx
.text:0000000000007EE0
.text:0000000000007EE0 loc_7EE0:                               ; CODE XREF: human_readable+99F↓j
.text:0000000000007EE0                 mov     esi, edx
.text:0000000000007EE2                 add     edx, 8
.text:0000000000007EE5                 mov     rdi, [r14+rsi]
.text:0000000000007EE9                 cmp     edx, eax
.text:0000000000007EEB                 mov     [rcx+rsi], rdi
.text:0000000000007EEF                 jb      short loc_7EE0
.text:0000000000007EF1                 jmp     loc_7D96
.text:0000000000007EF6 ; ---------------------------------------------------------------------------
.text:0000000000007EF6
.text:0000000000007EF6 loc_7EF6:                               ; CODE XREF: human_readable+61E↑j
.text:0000000000007EF6                 mov     edx, [r14]
.text:0000000000007EF9                 mov     [r8], edx
.text:0000000000007EFC                 mov     edx, [r14+rax-4]
.text:0000000000007F01                 mov     [r8+rax-4], edx
.text:0000000000007F06                 jmp     loc_7B87
.text:0000000000007F0B ; ---------------------------------------------------------------------------
.text:0000000000007F0B
.text:0000000000007F0B loc_7F0B:                               ; CODE XREF: human_readable+423↑j
.text:0000000000007F0B                 call    ___stack_chk_fail
.text:0000000000007F10 ; ---------------------------------------------------------------------------
.text:0000000000007F10
.text:0000000000007F10 loc_7F10:                               ; CODE XREF: human_readable+631↑j
.text:0000000000007F10                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000007F16                 mov     [r8+rax-2], dx
.text:0000000000007F1C                 jmp     loc_7B87
.text:0000000000007F21 ; ---------------------------------------------------------------------------
.text:0000000000007F21
.text:0000000000007F21 loc_7F21:                               ; CODE XREF: human_readable+91A↑j
.text:0000000000007F21                 mov     edx, [r14]
.text:0000000000007F24                 mov     [r8], edx
.text:0000000000007F27                 mov     edx, [r14+rax-4]
.text:0000000000007F2C                 mov     [r8+rax-4], edx
.text:0000000000007F31                 jmp     loc_7D96
.text:0000000000007F36 ; ---------------------------------------------------------------------------
.text:0000000000007F36
.text:0000000000007F36 loc_7F36:                               ; CODE XREF: human_readable+3B3↑j
.text:0000000000007F36                 test    eax, eax
.text:0000000000007F38                 mov     rdx, [rsp+0C8h+var_C0]
.text:0000000000007F3D                 jnz     loc_794B
.text:0000000000007F43                 jmp     loc_7957
.text:0000000000007F48 ; ---------------------------------------------------------------------------
.text:0000000000007F48
.text:0000000000007F48 loc_7F48:                               ; CODE XREF: human_readable+4E8↑j
.text:0000000000007F48                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000007F4C                 mov     r15, rax
.text:0000000000007F4F                 mov     r12d, r14d
.text:0000000000007F52                 jmp     loc_78DA
.text:0000000000007F52 ; } // starts at 7550
.text:0000000000007F52 human_readable  endp
.text:0000000000007F52
.text:0000000000007F52 ; ---------------------------------------------------------------------------
.text:0000000000007F57                 align 20h
.text:0000000000007F60
.text:0000000000007F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F60
.text:0000000000007F60 ; Attributes: info_from_lumina
.text:0000000000007F60
.text:0000000000007F60 ; strtol_error __fastcall human_options(const char *spec, int *opts, uintmax_t *block_size)
.text:0000000000007F60                 public human_options
.text:0000000000007F60 human_options   proc near               ; CODE XREF: main+217↑p
.text:0000000000007F60                                         ; main+737↑p
.text:0000000000007F60
.text:0000000000007F60 var_38          = qword ptr -38h
.text:0000000000007F60 var_30          = qword ptr -30h
.text:0000000000007F60
.text:0000000000007F60 ; __unwind {
.text:0000000000007F60                 push    r13
.text:0000000000007F62                 push    r12
.text:0000000000007F64                 mov     r13, rsi
.text:0000000000007F67                 push    rbp
.text:0000000000007F68                 push    rbx
.text:0000000000007F69                 mov     r12, rdx
.text:0000000000007F6C                 mov     rbx, rdi
.text:0000000000007F6F                 sub     rsp, 18h
.text:0000000000007F73                 mov     rax, fs:28h
.text:0000000000007F7C                 mov     [rsp+38h+var_30], rax
.text:0000000000007F81                 xor     eax, eax
.text:0000000000007F83                 test    rdi, rdi
.text:0000000000007F86                 jz      loc_80A0
.text:0000000000007F8C
.text:0000000000007F8C loc_7F8C:                               ; CODE XREF: human_options+152↓j
.text:0000000000007F8C                                         ; human_options+16A↓j
.text:0000000000007F8C                 xor     ebp, ebp
.text:0000000000007F8E                 cmp     byte ptr [rbx], 27h ; '''
.text:0000000000007F91                 jnz     short loc_7F9C
.text:0000000000007F93                 add     rbx, 1
.text:0000000000007F97                 mov     ebp, 4
.text:0000000000007F9C
.text:0000000000007F9C loc_7F9C:                               ; CODE XREF: human_options+31↑j
.text:0000000000007F9C                 lea     rdx, block_size_opts
.text:0000000000007FA3                 lea     rsi, block_size_args
.text:0000000000007FAA                 mov     ecx, 4
.text:0000000000007FAF                 mov     rdi, rbx
.text:0000000000007FB2                 call    argmatch
.text:0000000000007FB7                 test    eax, eax
.text:0000000000007FB9                 js      short loc_7FF8
.text:0000000000007FBB                 lea     rdx, block_size_opts
.text:0000000000007FC2                 cdqe
.text:0000000000007FC4                 mov     qword ptr [r12], 1
.text:0000000000007FCC                 or      ebp, [rdx+rax*4]
.text:0000000000007FCF                 xor     eax, eax
.text:0000000000007FD1                 mov     [r13+0], ebp
.text:0000000000007FD5
.text:0000000000007FD5 loc_7FD5:                               ; CODE XREF: human_options+107↓j
.text:0000000000007FD5                                         ; human_options+134↓j ...
.text:0000000000007FD5                 mov     rcx, [rsp+38h+var_30]
.text:0000000000007FDA                 xor     rcx, fs:28h
.text:0000000000007FE3                 jnz     loc_8141
.text:0000000000007FE9                 add     rsp, 18h
.text:0000000000007FED                 pop     rbx
.text:0000000000007FEE                 pop     rbp
.text:0000000000007FEF                 pop     r12
.text:0000000000007FF1                 pop     r13
.text:0000000000007FF3                 retn
.text:0000000000007FF3 ; ---------------------------------------------------------------------------
.text:0000000000007FF4                 align 8
.text:0000000000007FF8
.text:0000000000007FF8 loc_7FF8:                               ; CODE XREF: human_options+59↑j
.text:0000000000007FF8                 lea     r8, aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:0000000000007FFF                 xor     edx, edx
.text:0000000000008001                 mov     rsi, rsp
.text:0000000000008004                 mov     rcx, r12
.text:0000000000008007                 mov     rdi, rbx        ; nptr
.text:000000000000800A                 call    xstrtoumax
.text:000000000000800F                 test    eax, eax
.text:0000000000008011                 jnz     short loc_8058
.text:0000000000008013                 movzx   esi, byte ptr [rbx]
.text:0000000000008016                 lea     edx, [rsi-30h]
.text:0000000000008019                 cmp     dl, 9
.text:000000000000801C                 jbe     short loc_8048
.text:000000000000801E                 mov     rcx, [rsp+38h+var_38]
.text:0000000000008022                 cmp     rbx, rcx
.text:0000000000008025                 jnz     short loc_8039
.text:0000000000008027                 jmp     loc_8100
.text:0000000000008027 ; ---------------------------------------------------------------------------
.text:000000000000802C                 align 10h
.text:0000000000008030
.text:0000000000008030 loc_8030:                               ; CODE XREF: human_options+E6↓j
.text:0000000000008030                 cmp     rbx, rcx
.text:0000000000008033                 jz      loc_8100
.text:0000000000008039
.text:0000000000008039 loc_8039:                               ; CODE XREF: human_options+C5↑j
.text:0000000000008039                 add     rbx, 1
.text:000000000000803D                 movzx   edi, byte ptr [rbx]
.text:0000000000008040                 lea     edx, [rdi-30h]
.text:0000000000008043                 cmp     dl, 9
.text:0000000000008046                 ja      short loc_8030
.text:0000000000008048
.text:0000000000008048 loc_8048:                               ; CODE XREF: human_options+BC↑j
.text:0000000000008048                                         ; human_options+1AD↓j ...
.text:0000000000008048                 mov     rdx, [r12]
.text:000000000000804C                 mov     [r13+0], ebp
.text:0000000000008050                 jmp     short loc_8064
.text:0000000000008050 ; ---------------------------------------------------------------------------
.text:0000000000008052                 align 8
.text:0000000000008058
.text:0000000000008058 loc_8058:                               ; CODE XREF: human_options+B1↑j
.text:0000000000008058                 mov     rdx, [r12]
.text:000000000000805C                 mov     dword ptr [r13+0], 0
.text:0000000000008064
.text:0000000000008064 loc_8064:                               ; CODE XREF: human_options+F0↑j
.text:0000000000008064                 test    rdx, rdx
.text:0000000000008067                 jnz     loc_7FD5
.text:000000000000806D                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000008074                 call    _getenv
.text:0000000000008079                 cmp     rax, 1
.text:000000000000807D                 sbb     rax, rax
.text:0000000000008080                 and     eax, 200h
.text:0000000000008085                 add     rax, 200h
.text:000000000000808B                 mov     [r12], rax
.text:000000000000808F                 mov     eax, 4
.text:0000000000008094                 jmp     loc_7FD5
.text:0000000000008094 ; ---------------------------------------------------------------------------
.text:0000000000008099                 align 20h
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: human_options+26↑j
.text:00000000000080A0                 lea     rdi, aDfBlockSize+3 ; name
.text:00000000000080A7                 call    _getenv
.text:00000000000080AC                 test    rax, rax
.text:00000000000080AF                 mov     rbx, rax
.text:00000000000080B2                 jnz     loc_7F8C
.text:00000000000080B8                 lea     rdi, aBlocksize ; "BLOCKSIZE"
.text:00000000000080BF                 call    _getenv
.text:00000000000080C4                 test    rax, rax
.text:00000000000080C7                 mov     rbx, rax
.text:00000000000080CA                 jnz     loc_7F8C
.text:00000000000080D0                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:00000000000080D7                 call    _getenv
.text:00000000000080DC                 test    rax, rax
.text:00000000000080DF                 jz      short loc_812A
.text:00000000000080E1                 mov     qword ptr [r12], 200h
.text:00000000000080E9                 xor     eax, eax
.text:00000000000080EB                 mov     dword ptr [r13+0], 0
.text:00000000000080F3                 jmp     loc_7FD5
.text:00000000000080F3 ; ---------------------------------------------------------------------------
.text:00000000000080F8                 align 20h
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: human_options+C7↑j
.text:0000000000008100                                         ; human_options+D3↑j
.text:0000000000008100                 cmp     byte ptr [rcx-1], 42h ; 'B'
.text:0000000000008104                 jz      short loc_8118
.text:0000000000008106                 or      bpl, 80h
.text:000000000000810A
.text:000000000000810A loc_810A:                               ; CODE XREF: human_options+1C8↓j
.text:000000000000810A                 or      ebp, 20h
.text:000000000000810D                 jmp     loc_8048
.text:000000000000810D ; ---------------------------------------------------------------------------
.text:0000000000008112                 align 8
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: human_options+1A4↑j
.text:0000000000008118                 or      ebp, 180h
.text:000000000000811E                 cmp     byte ptr [rcx-2], 69h ; 'i'
.text:0000000000008122                 jnz     loc_8048
.text:0000000000008128                 jmp     short loc_810A
.text:000000000000812A ; ---------------------------------------------------------------------------
.text:000000000000812A
.text:000000000000812A loc_812A:                               ; CODE XREF: human_options+17F↑j
.text:000000000000812A                 mov     qword ptr [r12], 400h
.text:0000000000008132                 xor     eax, eax
.text:0000000000008134                 mov     dword ptr [r13+0], 0
.text:000000000000813C                 jmp     loc_7FD5
.text:0000000000008141 ; ---------------------------------------------------------------------------
.text:0000000000008141
.text:0000000000008141 loc_8141:                               ; CODE XREF: human_options+83↑j
.text:0000000000008141                 call    ___stack_chk_fail
.text:0000000000008141 ; } // starts at 7F60
.text:0000000000008141 human_options   endp
.text:0000000000008141
.text:0000000000008141 ; ---------------------------------------------------------------------------
.text:0000000000008146                 align 10h
.text:0000000000008150
.text:0000000000008150 ; =============== S U B R O U T I N E =======================================
.text:0000000000008150
.text:0000000000008150 ; Attributes: info_from_lumina
.text:0000000000008150
.text:0000000000008150 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000008150                 public umaxtostr
.text:0000000000008150 umaxtostr       proc near               ; CODE XREF: get_header+136↑p
.text:0000000000008150 ; __unwind {
.text:0000000000008150                 lea     rcx, [rsi+14h]
.text:0000000000008154                 mov     byte ptr [rsi+14h], 0
.text:0000000000008158                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000008162                 nop     word ptr [rax+rax+00h]
.text:0000000000008168
.text:0000000000008168 loc_8168:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000008168                 mov     rax, rdi
.text:000000000000816B                 sub     rcx, 1
.text:000000000000816F                 mul     rsi
.text:0000000000008172                 shr     rdx, 3
.text:0000000000008176                 lea     rax, [rdx+rdx*4]
.text:000000000000817A                 add     rax, rax
.text:000000000000817D                 sub     rdi, rax
.text:0000000000008180                 add     edi, 30h ; '0'
.text:0000000000008183                 test    rdx, rdx
.text:0000000000008186                 mov     [rcx], dil
.text:0000000000008189                 mov     rdi, rdx
.text:000000000000818C                 jnz     short loc_8168
.text:000000000000818E                 mov     rax, rcx
.text:0000000000008191                 retn
.text:0000000000008191 ; } // starts at 8150
.text:0000000000008191 umaxtostr       endp
.text:0000000000008191
.text:0000000000008191 ; ---------------------------------------------------------------------------
.text:0000000000008192                 align 20h
.text:00000000000081A0
.text:00000000000081A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081A0
.text:00000000000081A0 ; Attributes: info_from_lumina
.text:00000000000081A0
.text:00000000000081A0 ; size_t __fastcall mbsalign(const char *src, char *dest, size_t dest_size, size_t *width, mbs_align_t align, int flags)
.text:00000000000081A0                 public mbsalign
.text:00000000000081A0 mbsalign        proc near               ; CODE XREF: ambsalign+59↓p
.text:00000000000081A0
.text:00000000000081A0 ptr             = qword ptr -68h
.text:00000000000081A0 s               = qword ptr -60h
.text:00000000000081A0 var_58          = qword ptr -58h
.text:00000000000081A0 var_4C          = dword ptr -4Ch
.text:00000000000081A0 size            = qword ptr -48h
.text:00000000000081A0 var_40          = qword ptr -40h
.text:00000000000081A0
.text:00000000000081A0 ; __unwind {
.text:00000000000081A0                 push    r15
.text:00000000000081A2                 push    r14
.text:00000000000081A4                 mov     r14, rdi
.text:00000000000081A7                 push    r13
.text:00000000000081A9                 push    r12
.text:00000000000081AB                 mov     r13, rsi
.text:00000000000081AE                 push    rbp
.text:00000000000081AF                 push    rbx
.text:00000000000081B0                 mov     ebx, r9d
.text:00000000000081B3                 mov     r12, rcx
.text:00000000000081B6                 sub     rsp, 38h
.text:00000000000081BA                 mov     [rsp+68h+var_58], rdx
.text:00000000000081BF                 mov     [rsp+68h+var_4C], r8d
.text:00000000000081C4                 call    _strlen
.text:00000000000081C9                 test    bl, 2
.text:00000000000081CC                 mov     r15, rax
.text:00000000000081CF                 mov     [rsp+68h+s], rax
.text:00000000000081D4                 jz      loc_8340
.text:00000000000081DA
.text:00000000000081DA loc_81DA:                               ; CODE XREF: mbsalign+1A9↓j
.text:00000000000081DA                                         ; mbsalign+1C4↓j
.text:00000000000081DA                 mov     rbp, r15
.text:00000000000081DD                 mov     [rsp+68h+ptr], 0
.text:00000000000081E5                 mov     [rsp+68h+s], 0
.text:00000000000081EE
.text:00000000000081EE loc_81EE:                               ; CODE XREF: mbsalign+32F↓j
.text:00000000000081EE                                         ; mbsalign+340↓j ...
.text:00000000000081EE                 mov     rax, [r12]
.text:00000000000081F2                 cmp     rax, rbp
.text:00000000000081F5                 jnb     loc_8309
.text:00000000000081FB                 mov     r15, rax
.text:00000000000081FE                 xor     edx, edx
.text:0000000000008200
.text:0000000000008200 loc_8200:                               ; CODE XREF: mbsalign+3BF↓j
.text:0000000000008200                 mov     [r12], rax
.text:0000000000008204                 mov     eax, [rsp+68h+var_4C]
.text:0000000000008208                 test    eax, eax
.text:000000000000820A                 jz      loc_832B
.text:0000000000008210
.text:0000000000008210 loc_8210:                               ; CODE XREF: mbsalign+185↓j
.text:0000000000008210                 xor     ebp, ebp
.text:0000000000008212                 cmp     eax, 1
.text:0000000000008215                 jz      short loc_8223
.text:0000000000008217                 mov     rbp, rdx
.text:000000000000821A                 and     edx, 1
.text:000000000000821D                 shr     rbp, 1
.text:0000000000008220                 add     rdx, rbp
.text:0000000000008223
.text:0000000000008223 loc_8223:                               ; CODE XREF: mbsalign+75↑j
.text:0000000000008223                                         ; mbsalign+190↓j
.text:0000000000008223                 test    bl, 4
.text:0000000000008226                 lea     r12, [rdx+r15]
.text:000000000000822A                 jz      short loc_8231
.text:000000000000822C                 mov     r12, r15
.text:000000000000822F                 xor     edx, edx
.text:0000000000008231
.text:0000000000008231 loc_8231:                               ; CODE XREF: mbsalign+8A↑j
.text:0000000000008231                 and     ebx, 8
.text:0000000000008234                 jnz     loc_8338
.text:000000000000823A                 add     r12, rbp
.text:000000000000823D
.text:000000000000823D loc_823D:                               ; CODE XREF: mbsalign+19A↓j
.text:000000000000823D                 mov     rax, [rsp+68h+var_58]
.text:0000000000008242                 test    rax, rax
.text:0000000000008245                 jz      loc_82D1
.text:000000000000824B                 lea     rbx, [r13+rax-1]
.text:0000000000008250                 lea     rax, [rdx-1]
.text:0000000000008254                 cmp     r13, rbx
.text:0000000000008257                 jnb     short loc_827F
.text:0000000000008259                 test    rdx, rdx
.text:000000000000825C                 jz      short loc_827F
.text:000000000000825E                 xchg    ax, ax
.text:0000000000008260
.text:0000000000008260 loc_8260:                               ; CODE XREF: mbsalign+DD↓j
.text:0000000000008260                 add     r13, 1
.text:0000000000008264                 mov     byte ptr [r13-1], 20h ; ' '
.text:0000000000008269                 cmp     rbx, r13
.text:000000000000826C                 setnbe  sil
.text:0000000000008270                 test    rax, rax
.text:0000000000008273                 setnz   dl
.text:0000000000008276                 sub     rax, 1
.text:000000000000827A                 test    sil, dl
.text:000000000000827D                 jnz     short loc_8260
.text:000000000000827F
.text:000000000000827F loc_827F:                               ; CODE XREF: mbsalign+B7↑j
.text:000000000000827F                                         ; mbsalign+BC↑j
.text:000000000000827F                 mov     rdx, rbx
.text:0000000000008282                 mov     byte ptr [r13+0], 0
.text:0000000000008287                 mov     rsi, r14        ; src
.text:000000000000828A                 sub     rdx, r13
.text:000000000000828D                 mov     rdi, r13        ; dest
.text:0000000000008290                 cmp     rdx, r15
.text:0000000000008293                 cmova   rdx, r15        ; n
.text:0000000000008297                 call    _mempcpy
.text:000000000000829C                 cmp     rbx, rax
.text:000000000000829F                 lea     rdx, [rbp-1]
.text:00000000000082A3                 jbe     short loc_82CE
.text:00000000000082A5                 test    rbp, rbp
.text:00000000000082A8                 jz      short loc_82CE
.text:00000000000082AA                 nop     word ptr [rax+rax+00h]
.text:00000000000082B0
.text:00000000000082B0 loc_82B0:                               ; CODE XREF: mbsalign+12C↓j
.text:00000000000082B0                 add     rax, 1
.text:00000000000082B4                 test    rdx, rdx
.text:00000000000082B7                 mov     byte ptr [rax-1], 20h ; ' '
.text:00000000000082BB                 setnz   sil
.text:00000000000082BF                 cmp     rbx, rax
.text:00000000000082C2                 setnbe  cl
.text:00000000000082C5                 sub     rdx, 1
.text:00000000000082C9                 test    sil, cl
.text:00000000000082CC                 jnz     short loc_82B0
.text:00000000000082CE
.text:00000000000082CE loc_82CE:                               ; CODE XREF: mbsalign+103↑j
.text:00000000000082CE                                         ; mbsalign+108↑j
.text:00000000000082CE                 mov     byte ptr [rax], 0
.text:00000000000082D1
.text:00000000000082D1 loc_82D1:                               ; CODE XREF: mbsalign+A5↑j
.text:00000000000082D1                                         ; mbsalign+1E2↓j ...
.text:00000000000082D1                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:00000000000082D5                 call    _free
.text:00000000000082DA                 mov     rdi, [rsp+68h+s] ; ptr
.text:00000000000082DF                 call    _free
.text:00000000000082E4                 add     rsp, 38h
.text:00000000000082E8                 mov     rax, r12
.text:00000000000082EB                 pop     rbx
.text:00000000000082EC                 pop     rbp
.text:00000000000082ED                 pop     r12
.text:00000000000082EF                 pop     r13
.text:00000000000082F1                 pop     r14
.text:00000000000082F3                 pop     r15
.text:00000000000082F5                 retn
.text:00000000000082F5 ; ---------------------------------------------------------------------------
.text:00000000000082F6                 align 20h
.text:0000000000008300
.text:0000000000008300 loc_8300:                               ; CODE XREF: mbsalign+35F↓j
.text:0000000000008300                 mov     [rsp+68h+s], 0
.text:0000000000008309
.text:0000000000008309 loc_8309:                               ; CODE XREF: mbsalign+55↑j
.text:0000000000008309                 cmp     rbp, rax
.text:000000000000830C                 jnb     loc_855A
.text:0000000000008312                 sub     rax, rbp
.text:0000000000008315                 mov     rdx, rax
.text:0000000000008318                 mov     rax, rbp
.text:000000000000831B                 mov     [r12], rax
.text:000000000000831F                 mov     eax, [rsp+68h+var_4C]
.text:0000000000008323                 test    eax, eax
.text:0000000000008325                 jnz     loc_8210
.text:000000000000832B
.text:000000000000832B loc_832B:                               ; CODE XREF: mbsalign+6A↑j
.text:000000000000832B                 mov     rbp, rdx
.text:000000000000832E                 xor     edx, edx
.text:0000000000008330                 jmp     loc_8223
.text:0000000000008330 ; ---------------------------------------------------------------------------
.text:0000000000008335                 align 8
.text:0000000000008338
.text:0000000000008338 loc_8338:                               ; CODE XREF: mbsalign+94↑j
.text:0000000000008338                 xor     ebp, ebp
.text:000000000000833A                 jmp     loc_823D
.text:000000000000833A ; ---------------------------------------------------------------------------
.text:000000000000833F                 align 20h
.text:0000000000008340
.text:0000000000008340 loc_8340:                               ; CODE XREF: mbsalign+34↑j
.text:0000000000008340                 call    ___ctype_get_mb_cur_max
.text:0000000000008345                 cmp     rax, 1
.text:0000000000008349                 jbe     loc_81DA
.text:000000000000834F                 xor     edx, edx        ; n
.text:0000000000008351                 xor     edi, edi        ; pwcs
.text:0000000000008353                 mov     rsi, r14        ; s
.text:0000000000008356                 call    _mbstowcs
.text:000000000000835B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000835F                 jnz     short loc_8390
.text:0000000000008361                 test    bl, 1
.text:0000000000008364                 jnz     loc_81DA
.text:000000000000836A
.text:000000000000836A loc_836A:                               ; CODE XREF: mbsalign+3AA↓j
.text:000000000000836A                 mov     [rsp+68h+ptr], 0
.text:0000000000008372                 mov     [rsp+68h+s], 0
.text:000000000000837B                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000008382                 jmp     loc_82D1
.text:0000000000008382 ; ---------------------------------------------------------------------------
.text:0000000000008387                 align 10h
.text:0000000000008390
.text:0000000000008390 loc_8390:                               ; CODE XREF: mbsalign+1BF↑j
.text:0000000000008390                 lea     rbp, [rax+1]
.text:0000000000008394                 lea     rax, ds:0[rbp*4]
.text:000000000000839C                 mov     rdi, rax        ; size
.text:000000000000839F                 mov     [rsp+68h+size], rax
.text:00000000000083A4                 call    _malloc
.text:00000000000083A9                 test    rax, rax
.text:00000000000083AC                 mov     [rsp+68h+ptr], rax
.text:00000000000083B0                 jz      loc_8535
.text:00000000000083B6                 mov     rdi, [rsp+68h+ptr] ; pwcs
.text:00000000000083BA                 mov     rdx, rbp        ; n
.text:00000000000083BD                 mov     rsi, r14        ; s
.text:00000000000083C0                 call    _mbstowcs
.text:00000000000083C5                 test    rax, rax
.text:00000000000083C8                 jz      loc_84D4
.text:00000000000083CE                 mov     rax, [rsp+68h+ptr]
.text:00000000000083D2                 mov     rcx, [rsp+68h+size]
.text:00000000000083D7                 mov     dword ptr [rax+rcx-4], 0
.text:00000000000083DF                 mov     edi, [rax]      ; wc
.text:00000000000083E1                 mov     rdx, rax
.text:00000000000083E4                 test    edi, edi
.text:00000000000083E6                 jz      loc_84E5
.text:00000000000083EC                 mov     byte ptr [rsp+68h+size], 0
.text:00000000000083F1                 nop     dword ptr [rax+00000000h]
.text:00000000000083F8
.text:00000000000083F8 loc_83F8:                               ; CODE XREF: mbsalign+27E↓j
.text:00000000000083F8                 mov     [rsp+68h+var_40], rdx
.text:00000000000083FD                 call    _iswprint
.text:0000000000008402                 test    eax, eax
.text:0000000000008404                 mov     rdx, [rsp+68h+var_40]
.text:0000000000008409                 jnz     short loc_8416
.text:000000000000840B                 mov     dword ptr [rdx], 0FFFDh
.text:0000000000008411                 mov     byte ptr [rsp+68h+size], 1
.text:0000000000008416
.text:0000000000008416 loc_8416:                               ; CODE XREF: mbsalign+269↑j
.text:0000000000008416                 add     rdx, 4
.text:000000000000841A                 mov     edi, [rdx]
.text:000000000000841C                 test    edi, edi
.text:000000000000841E                 jnz     short loc_83F8
.text:0000000000008420                 mov     rdi, [rsp+68h+ptr] ; s
.text:0000000000008424                 mov     rsi, rbp        ; n
.text:0000000000008427                 call    _wcswidth
.text:000000000000842C                 cmp     byte ptr [rsp+68h+size], 0
.text:0000000000008431                 movsxd  rbp, eax
.text:0000000000008434                 jz      loc_84F8
.text:000000000000843A                 mov     rsi, [rsp+68h+ptr] ; pwcs
.text:000000000000843E                 xor     edx, edx        ; n
.text:0000000000008440                 xor     edi, edi        ; s
.text:0000000000008442                 call    _wcstombs
.text:0000000000008447                 add     rax, 1
.text:000000000000844B                 mov     [rsp+68h+size], rax
.text:0000000000008450
.text:0000000000008450 loc_8450:                               ; CODE XREF: mbsalign+373↓j
.text:0000000000008450                 mov     rdi, [rsp+68h+size] ; size
.text:0000000000008455                 call    _malloc
.text:000000000000845A                 test    rax, rax
.text:000000000000845D                 mov     [rsp+68h+s], rax
.text:0000000000008462                 jz      loc_8520
.text:0000000000008468                 mov     r15, [rsp+68h+ptr]
.text:000000000000846C                 mov     r14, [r12]
.text:0000000000008470                 mov     edi, [r15]
.text:0000000000008473                 test    edi, edi
.text:0000000000008475                 jz      loc_854F
.text:000000000000847B                 xor     ebp, ebp
.text:000000000000847D                 jmp     short loc_848E
.text:000000000000847D ; ---------------------------------------------------------------------------
.text:000000000000847F                 align 20h
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: mbsalign+30D↓j
.text:0000000000008480                 add     r15, 4
.text:0000000000008484                 mov     edi, [r15]      ; c
.text:0000000000008487                 mov     rbp, rdx
.text:000000000000848A                 test    edi, edi
.text:000000000000848C                 jz      short loc_84AF
.text:000000000000848E
.text:000000000000848E loc_848E:                               ; CODE XREF: mbsalign+2DD↑j
.text:000000000000848E                 call    _wcwidth
.text:0000000000008493                 cmp     eax, 0FFFFFFFFh
.text:0000000000008496                 movsxd  rdx, eax
.text:0000000000008499                 jnz     short loc_84A7
.text:000000000000849B                 mov     dword ptr [r15], 0FFFDh
.text:00000000000084A2                 mov     edx, 1
.text:00000000000084A7
.text:00000000000084A7 loc_84A7:                               ; CODE XREF: mbsalign+2F9↑j
.text:00000000000084A7                 add     rdx, rbp
.text:00000000000084AA                 cmp     r14, rdx
.text:00000000000084AD                 jnb     short loc_8480
.text:00000000000084AF
.text:00000000000084AF loc_84AF:                               ; CODE XREF: mbsalign+2EC↑j
.text:00000000000084AF                                         ; mbsalign+3B5↓j
.text:00000000000084AF                 mov     r14, [rsp+68h+s]
.text:00000000000084B4                 mov     rdx, [rsp+68h+size] ; n
.text:00000000000084B9                 mov     rsi, [rsp+68h+ptr] ; pwcs
.text:00000000000084BD                 mov     dword ptr [r15], 0
.text:00000000000084C4                 mov     rdi, r14        ; s
.text:00000000000084C7                 call    _wcstombs
.text:00000000000084CC                 mov     r15, rax
.text:00000000000084CF                 jmp     loc_81EE
.text:00000000000084D4 ; ---------------------------------------------------------------------------
.text:00000000000084D4
.text:00000000000084D4 loc_84D4:                               ; CODE XREF: mbsalign+228↑j
.text:00000000000084D4                 mov     rbp, r15
.text:00000000000084D7                 mov     [rsp+68h+s], 0
.text:00000000000084E0                 jmp     loc_81EE
.text:00000000000084E5 ; ---------------------------------------------------------------------------
.text:00000000000084E5
.text:00000000000084E5 loc_84E5:                               ; CODE XREF: mbsalign+246↑j
.text:00000000000084E5                 mov     rdi, [rsp+68h+ptr] ; s
.text:00000000000084E9                 mov     rsi, rbp        ; n
.text:00000000000084EC                 call    _wcswidth
.text:00000000000084F1                 movsxd  rbp, eax
.text:00000000000084F4                 nop     dword ptr [rax+00h]
.text:00000000000084F8
.text:00000000000084F8 loc_84F8:                               ; CODE XREF: mbsalign+294↑j
.text:00000000000084F8                 mov     rax, [r12]
.text:00000000000084FC                 cmp     rax, rbp
.text:00000000000084FF                 jnb     loc_8300
.text:0000000000008505                 mov     rax, [rsp+68h+s]
.text:000000000000850A                 add     rax, 1
.text:000000000000850E                 mov     [rsp+68h+size], rax
.text:0000000000008513                 jmp     loc_8450
.text:0000000000008513 ; ---------------------------------------------------------------------------
.text:0000000000008518                 align 20h
.text:0000000000008520
.text:0000000000008520 loc_8520:                               ; CODE XREF: mbsalign+2C2↑j
.text:0000000000008520                 test    bl, 1
.text:0000000000008523                 jnz     loc_81EE
.text:0000000000008529                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000008530                 jmp     loc_82D1
.text:0000000000008535 ; ---------------------------------------------------------------------------
.text:0000000000008535
.text:0000000000008535 loc_8535:                               ; CODE XREF: mbsalign+210↑j
.text:0000000000008535                 test    bl, 1
.text:0000000000008538                 mov     rbp, r15
.text:000000000000853B                 mov     [rsp+68h+s], 0
.text:0000000000008544                 jnz     loc_81EE
.text:000000000000854A                 jmp     loc_836A
.text:000000000000854F ; ---------------------------------------------------------------------------
.text:000000000000854F
.text:000000000000854F loc_854F:                               ; CODE XREF: mbsalign+2D5↑j
.text:000000000000854F                 mov     r15, [rsp+68h+ptr]
.text:0000000000008553                 xor     ebp, ebp
.text:0000000000008555                 jmp     loc_84AF
.text:000000000000855A ; ---------------------------------------------------------------------------
.text:000000000000855A
.text:000000000000855A loc_855A:                               ; CODE XREF: mbsalign+16C↑j
.text:000000000000855A                 mov     rax, rbp
.text:000000000000855D                 xor     edx, edx
.text:000000000000855F                 jmp     loc_8200
.text:000000000000855F ; } // starts at 81A0
.text:000000000000855F mbsalign        endp
.text:000000000000855F
.text:000000000000855F ; ---------------------------------------------------------------------------
.text:0000000000008564                 align 10h
.text:0000000000008570
.text:0000000000008570 ; =============== S U B R O U T I N E =======================================
.text:0000000000008570
.text:0000000000008570 ; Attributes: info_from_lumina
.text:0000000000008570
.text:0000000000008570 ; char *__fastcall ambsalign(const char *src, size_t *width, mbs_align_t align, int flags)
.text:0000000000008570                 public ambsalign
.text:0000000000008570 ambsalign       proc near               ; CODE XREF: main+CA7↑p
.text:0000000000008570
.text:0000000000008570 var_40          = dword ptr -40h
.text:0000000000008570 var_3C          = dword ptr -3Ch
.text:0000000000008570
.text:0000000000008570 ; __unwind {
.text:0000000000008570                 push    r15
.text:0000000000008572                 push    r14
.text:0000000000008574                 mov     r15, rdi
.text:0000000000008577                 push    r13
.text:0000000000008579                 push    r12
.text:000000000000857B                 xor     r12d, r12d
.text:000000000000857E                 push    rbp
.text:000000000000857F                 push    rbx
.text:0000000000008580                 mov     rbp, rsi
.text:0000000000008583                 sub     rsp, 18h
.text:0000000000008587                 mov     r13, [rsi]
.text:000000000000858A                 mov     [rsp+48h+var_40], edx
.text:000000000000858E                 mov     [rsp+48h+var_3C], ecx
.text:0000000000008592                 mov     rax, r13
.text:0000000000008595                 nop     dword ptr [rax]
.text:0000000000008598
.text:0000000000008598 loc_8598:                               ; CODE XREF: ambsalign+6A↓j
.text:0000000000008598                 lea     rbx, [rax+1]
.text:000000000000859C                 mov     rdi, r12        ; ptr
.text:000000000000859F                 mov     rsi, rbx        ; size
.text:00000000000085A2                 call    _realloc
.text:00000000000085A7                 test    rax, rax
.text:00000000000085AA                 mov     r14, rax
.text:00000000000085AD                 jz      short loc_85F0
.text:00000000000085AF                 mov     r9d, [rsp+48h+var_3C]
.text:00000000000085B4                 mov     r8d, [rsp+48h+var_40]
.text:00000000000085B9                 mov     rcx, rbp
.text:00000000000085BC                 mov     [rbp+0], r13
.text:00000000000085C0                 mov     rdx, rbx
.text:00000000000085C3                 mov     rsi, rax        ; dest
.text:00000000000085C6                 mov     rdi, r15        ; s
.text:00000000000085C9                 call    mbsalign
.text:00000000000085CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000085D2                 jz      short loc_8600
.text:00000000000085D4                 cmp     rbx, rax
.text:00000000000085D7                 mov     r12, r14
.text:00000000000085DA                 jbe     short loc_8598
.text:00000000000085DC
.text:00000000000085DC loc_85DC:                               ; CODE XREF: ambsalign+88↓j
.text:00000000000085DC                                         ; ambsalign+9B↓j
.text:00000000000085DC                 add     rsp, 18h
.text:00000000000085E0                 mov     rax, r14
.text:00000000000085E3                 pop     rbx
.text:00000000000085E4                 pop     rbp
.text:00000000000085E5                 pop     r12
.text:00000000000085E7                 pop     r13
.text:00000000000085E9                 pop     r14
.text:00000000000085EB                 pop     r15
.text:00000000000085ED                 retn
.text:00000000000085ED ; ---------------------------------------------------------------------------
.text:00000000000085EE                 align 10h
.text:00000000000085F0
.text:00000000000085F0 loc_85F0:                               ; CODE XREF: ambsalign+3D↑j
.text:00000000000085F0                 mov     rdi, r12        ; ptr
.text:00000000000085F3                 call    _free
.text:00000000000085F8                 jmp     short loc_85DC
.text:00000000000085F8 ; ---------------------------------------------------------------------------
.text:00000000000085FA                 align 20h
.text:0000000000008600
.text:0000000000008600 loc_8600:                               ; CODE XREF: ambsalign+62↑j
.text:0000000000008600                 mov     rdi, r14        ; ptr
.text:0000000000008603                 xor     r14d, r14d
.text:0000000000008606                 call    _free
.text:000000000000860B                 jmp     short loc_85DC
.text:000000000000860B ; } // starts at 8570
.text:000000000000860B ambsalign       endp
.text:000000000000860B
.text:000000000000860B ; ---------------------------------------------------------------------------
.text:000000000000860D                 align 10h
.text:0000000000008610
.text:0000000000008610 ; =============== S U B R O U T I N E =======================================
.text:0000000000008610
.text:0000000000008610 ; Attributes: info_from_lumina
.text:0000000000008610
.text:0000000000008610 ; int __fastcall mbsnwidth(const char *string, size_t nbytes, int flags)
.text:0000000000008610                 public mbsnwidth
.text:0000000000008610 mbsnwidth       proc near               ; CODE XREF: gnu_mbswidth+1E↓j
.text:0000000000008610
.text:0000000000008610 var_5C          = dword ptr -5Ch
.text:0000000000008610 c               = dword ptr -4Ch
.text:0000000000008610 ps              = mbstate_t ptr -48h
.text:0000000000008610 var_40          = qword ptr -40h
.text:0000000000008610
.text:0000000000008610 ; __unwind {
.text:0000000000008610                 push    r15
.text:0000000000008612                 push    r14
.text:0000000000008614                 push    r13
.text:0000000000008616                 push    r12
.text:0000000000008618                 lea     r13, [rdi+rsi]
.text:000000000000861C                 push    rbp
.text:000000000000861D                 push    rbx
.text:000000000000861E                 mov     rbx, rdi
.text:0000000000008621                 sub     rsp, 38h
.text:0000000000008625                 mov     rax, fs:28h
.text:000000000000862E                 mov     [rsp+68h+var_40], rax
.text:0000000000008633                 xor     eax, eax
.text:0000000000008635                 mov     [rsp+68h+var_5C], edx
.text:0000000000008639                 call    ___ctype_get_mb_cur_max
.text:000000000000863E                 cmp     rax, 1
.text:0000000000008642                 jbe     loc_8778
.text:0000000000008648                 xor     ebp, ebp
.text:000000000000864A                 cmp     rbx, r13
.text:000000000000864D                 jnb     loc_873D
.text:0000000000008653                 lea     r12, [rsp+68h+ps]
.text:0000000000008658                 lea     r14, [rsp+68h+c]
.text:000000000000865D                 jmp     short loc_867B
.text:000000000000865D ; ---------------------------------------------------------------------------
.text:000000000000865F                 align 20h
.text:0000000000008660
.text:0000000000008660 loc_8660:                               ; CODE XREF: mbsnwidth+70↓j
.text:0000000000008660                 cmp     al, 25h ; '%'
.text:0000000000008662                 jge     short loc_866B
.text:0000000000008664                 sub     eax, 20h ; ' '
.text:0000000000008667                 cmp     al, 3
.text:0000000000008669                 ja      short loc_8691
.text:000000000000866B
.text:000000000000866B loc_866B:                               ; CODE XREF: mbsnwidth+52↑j
.text:000000000000866B                                         ; mbsnwidth+78↓j ...
.text:000000000000866B                 add     rbx, 1
.text:000000000000866F                 add     ebp, 1
.text:0000000000008672
.text:0000000000008672 loc_8672:                               ; CODE XREF: mbsnwidth+AE↓j
.text:0000000000008672                                         ; mbsnwidth+15D↓j
.text:0000000000008672                 cmp     rbx, r13
.text:0000000000008675                 jnb     loc_873D
.text:000000000000867B
.text:000000000000867B loc_867B:                               ; CODE XREF: mbsnwidth+4D↑j
.text:000000000000867B                 movzx   eax, byte ptr [rbx]
.text:000000000000867E                 cmp     al, 3Fh ; '?'
.text:0000000000008680                 jle     short loc_8660
.text:0000000000008682                 cmp     al, 41h ; 'A'
.text:0000000000008684                 jl      short loc_8691
.text:0000000000008686                 cmp     al, 5Fh ; '_'
.text:0000000000008688                 jle     short loc_866B
.text:000000000000868A                 sub     eax, 61h ; 'a'
.text:000000000000868D                 cmp     al, 1Dh
.text:000000000000868F                 jbe     short loc_866B
.text:0000000000008691
.text:0000000000008691 loc_8691:                               ; CODE XREF: mbsnwidth+59↑j
.text:0000000000008691                                         ; mbsnwidth+74↑j
.text:0000000000008691                 mov     qword ptr [r12], 0
.text:0000000000008699                 jmp     short loc_86C0
.text:0000000000008699 ; ---------------------------------------------------------------------------
.text:000000000000869B                 align 20h
.text:00000000000086A0
.text:00000000000086A0 loc_86A0:                               ; CODE XREF: mbsnwidth+EA↓j
.text:00000000000086A0                 mov     ecx, 7FFFFFFFh
.text:00000000000086A5                 sub     ecx, ebp
.text:00000000000086A7                 cmp     ecx, eax
.text:00000000000086A9                 jl      loc_87C0
.text:00000000000086AF                 add     ebp, eax
.text:00000000000086B1
.text:00000000000086B1 loc_86B1:                               ; CODE XREF: mbsnwidth+FE↓j
.text:00000000000086B1                                         ; mbsnwidth+10F↓j
.text:00000000000086B1                 mov     rdi, r12        ; ps
.text:00000000000086B4                 add     rbx, r15
.text:00000000000086B7                 call    _mbsinit
.text:00000000000086BC                 test    eax, eax
.text:00000000000086BE                 jnz     short loc_8672
.text:00000000000086C0
.text:00000000000086C0 loc_86C0:                               ; CODE XREF: mbsnwidth+89↑j
.text:00000000000086C0                 mov     rdx, r13
.text:00000000000086C3                 mov     rcx, r12
.text:00000000000086C6                 mov     rsi, rbx
.text:00000000000086C9                 sub     rdx, rbx
.text:00000000000086CC                 mov     rdi, r14
.text:00000000000086CF                 call    rpl_mbrtowc
.text:00000000000086D4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000086D8                 mov     r15, rax
.text:00000000000086DB                 jz      short loc_8728
.text:00000000000086DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000086E1                 jz      short loc_8760
.text:00000000000086E3                 mov     edi, [rsp+68h+c] ; c
.text:00000000000086E7                 test    rax, rax
.text:00000000000086EA                 mov     eax, 1
.text:00000000000086EF                 cmovz   r15, rax
.text:00000000000086F3                 call    _wcwidth
.text:00000000000086F8                 test    eax, eax
.text:00000000000086FA                 jns     short loc_86A0
.text:00000000000086FC                 test    byte ptr [rsp+68h+var_5C], 2
.text:0000000000008701                 jnz     short loc_8738
.text:0000000000008703                 mov     edi, [rsp+68h+c] ; wc
.text:0000000000008707                 call    _iswcntrl
.text:000000000000870C                 test    eax, eax
.text:000000000000870E                 jnz     short loc_86B1
.text:0000000000008710                 cmp     ebp, 7FFFFFFFh
.text:0000000000008716                 jz      loc_87C0
.text:000000000000871C                 add     ebp, 1
.text:000000000000871F                 jmp     short loc_86B1
.text:000000000000871F ; ---------------------------------------------------------------------------
.text:0000000000008721                 align 8
.text:0000000000008728
.text:0000000000008728 loc_8728:                               ; CODE XREF: mbsnwidth+CB↑j
.text:0000000000008728                 test    byte ptr [rsp+68h+var_5C], 1
.text:000000000000872D                 jz      loc_866B
.text:0000000000008733                 nop     dword ptr [rax+rax+00h]
.text:0000000000008738
.text:0000000000008738 loc_8738:                               ; CODE XREF: mbsnwidth+F1↑j
.text:0000000000008738                                         ; mbsnwidth+155↓j ...
.text:0000000000008738                 mov     ebp, 0FFFFFFFFh
.text:000000000000873D
.text:000000000000873D loc_873D:                               ; CODE XREF: mbsnwidth+3D↑j
.text:000000000000873D                                         ; mbsnwidth+65↑j ...
.text:000000000000873D                 mov     rsi, [rsp+68h+var_40]
.text:0000000000008742                 xor     rsi, fs:28h
.text:000000000000874B                 mov     eax, ebp
.text:000000000000874D                 jnz     short loc_87CA
.text:000000000000874F                 add     rsp, 38h
.text:0000000000008753                 pop     rbx
.text:0000000000008754                 pop     rbp
.text:0000000000008755                 pop     r12
.text:0000000000008757                 pop     r13
.text:0000000000008759                 pop     r14
.text:000000000000875B                 pop     r15
.text:000000000000875D                 retn
.text:000000000000875D ; ---------------------------------------------------------------------------
.text:000000000000875E                 align 20h
.text:0000000000008760
.text:0000000000008760 loc_8760:                               ; CODE XREF: mbsnwidth+D1↑j
.text:0000000000008760                 test    byte ptr [rsp+68h+var_5C], 1
.text:0000000000008765                 jnz     short loc_8738
.text:0000000000008767                 add     ebp, 1
.text:000000000000876A                 mov     rbx, r13
.text:000000000000876D                 jmp     loc_8672
.text:000000000000876D ; ---------------------------------------------------------------------------
.text:0000000000008772                 align 8
.text:0000000000008778
.text:0000000000008778 loc_8778:                               ; CODE XREF: mbsnwidth+32↑j
.text:0000000000008778                 xor     ebp, ebp
.text:000000000000877A                 cmp     rbx, r13
.text:000000000000877D                 jnb     short loc_873D
.text:000000000000877F                 call    ___ctype_b_loc
.text:0000000000008784                 mov     edx, [rsp+68h+var_5C]
.text:0000000000008788                 mov     rcx, [rax]
.text:000000000000878B                 xor     ebp, ebp
.text:000000000000878D                 and     edx, 2
.text:0000000000008790
.text:0000000000008790 loc_8790:                               ; CODE XREF: mbsnwidth+1A7↓j
.text:0000000000008790                 add     rbx, 1
.text:0000000000008794                 movzx   eax, byte ptr [rbx-1]
.text:0000000000008798                 movzx   eax, word ptr [rcx+rax*2]
.text:000000000000879C                 test    ah, 40h
.text:000000000000879F                 jnz     short loc_87A9
.text:00000000000087A1                 test    edx, edx
.text:00000000000087A3                 jnz     short loc_8738
.text:00000000000087A5                 test    al, 2
.text:00000000000087A7                 jnz     short loc_87B4
.text:00000000000087A9
.text:00000000000087A9 loc_87A9:                               ; CODE XREF: mbsnwidth+18F↑j
.text:00000000000087A9                 cmp     ebp, 7FFFFFFFh
.text:00000000000087AF                 jz      short loc_873D
.text:00000000000087B1                 add     ebp, 1
.text:00000000000087B4
.text:00000000000087B4 loc_87B4:                               ; CODE XREF: mbsnwidth+197↑j
.text:00000000000087B4                 cmp     r13, rbx
.text:00000000000087B7                 jnz     short loc_8790
.text:00000000000087B9                 jmp     short loc_873D
.text:00000000000087B9 ; ---------------------------------------------------------------------------
.text:00000000000087BB                 align 20h
.text:00000000000087C0
.text:00000000000087C0 loc_87C0:                               ; CODE XREF: mbsnwidth+99↑j
.text:00000000000087C0                                         ; mbsnwidth+106↑j
.text:00000000000087C0                 mov     ebp, 7FFFFFFFh
.text:00000000000087C5                 jmp     loc_873D
.text:00000000000087CA ; ---------------------------------------------------------------------------
.text:00000000000087CA
.text:00000000000087CA loc_87CA:                               ; CODE XREF: mbsnwidth+13D↑j
.text:00000000000087CA                 call    ___stack_chk_fail
.text:00000000000087CA ; } // starts at 8610
.text:00000000000087CA mbsnwidth       endp
.text:00000000000087CA
.text:00000000000087CA ; ---------------------------------------------------------------------------
.text:00000000000087CF                 align 10h
.text:00000000000087D0
.text:00000000000087D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087D0
.text:00000000000087D0 ; Attributes: info_from_lumina
.text:00000000000087D0
.text:00000000000087D0 ; int __fastcall gnu_mbswidth(const char *string, int flags)
.text:00000000000087D0                 public gnu_mbswidth
.text:00000000000087D0 gnu_mbswidth    proc near               ; CODE XREF: get_header+A1↑p
.text:00000000000087D0                                         ; get_dev+405↑p
.text:00000000000087D0 ; __unwind {
.text:00000000000087D0                 push    rbp
.text:00000000000087D1                 push    rbx
.text:00000000000087D2                 mov     ebp, esi
.text:00000000000087D4                 mov     rbx, rdi
.text:00000000000087D7                 sub     rsp, 8
.text:00000000000087DB                 call    _strlen
.text:00000000000087E0                 add     rsp, 8
.text:00000000000087E4                 mov     edx, ebp
.text:00000000000087E6                 mov     rdi, rbx
.text:00000000000087E9                 pop     rbx
.text:00000000000087EA                 pop     rbp
.text:00000000000087EB                 mov     rsi, rax
.text:00000000000087EE                 jmp     mbsnwidth
.text:00000000000087EE ; } // starts at 87D0
.text:00000000000087EE gnu_mbswidth    endp
.text:00000000000087EE
.text:00000000000087EE ; ---------------------------------------------------------------------------
.text:00000000000087F3                 align 20h
.text:0000000000008800
.text:0000000000008800 ; =============== S U B R O U T I N E =======================================
.text:0000000000008800
.text:0000000000008800
.text:0000000000008800                 public set_program_name
.text:0000000000008800 set_program_name proc near              ; CODE XREF: main+3F↑p
.text:0000000000008800 ; __unwind {
.text:0000000000008800                 test    rdi, rdi
.text:0000000000008803                 push    rbx
.text:0000000000008804                 jz      short loc_887D
.text:0000000000008806                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000880B                 mov     rbx, rdi
.text:000000000000880E                 call    _strrchr
.text:0000000000008813                 test    rax, rax
.text:0000000000008816                 jz      short loc_886D
.text:0000000000008818                 lea     r8, [rax+1]
.text:000000000000881C                 mov     rdx, r8
.text:000000000000881F                 sub     rdx, rbx
.text:0000000000008822                 cmp     rdx, 6
.text:0000000000008826                 jle     short loc_886D
.text:0000000000008828                 lea     rsi, [rax-6]
.text:000000000000882C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000008833                 mov     ecx, 7
.text:0000000000008838                 repe cmpsb
.text:000000000000883A                 setnbe  dl
.text:000000000000883D                 sbb     dl, 0
.text:0000000000008840                 test    dl, dl
.text:0000000000008842                 jnz     short loc_886D
.text:0000000000008844                 lea     rdi, aLt        ; "lt-"
.text:000000000000884B                 mov     ecx, 3
.text:0000000000008850                 mov     rsi, r8
.text:0000000000008853                 mov     rbx, r8
.text:0000000000008856                 repe cmpsb
.text:0000000000008858                 setnbe  dl
.text:000000000000885B                 sbb     dl, 0
.text:000000000000885E                 test    dl, dl
.text:0000000000008860                 jnz     short loc_886D
.text:0000000000008862                 lea     rbx, [rax+4]
.text:0000000000008866                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000886D
.text:000000000000886D loc_886D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000886D                                         ; set_program_name+26↑j ...
.text:000000000000886D                 mov     cs:program_name, rbx
.text:0000000000008874                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000887B                 pop     rbx
.text:000000000000887C                 retn
.text:000000000000887D ; ---------------------------------------------------------------------------
.text:000000000000887D
.text:000000000000887D loc_887D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000887D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000008884                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000888B                 mov     edx, 37h ; '7'  ; n
.text:0000000000008890                 mov     esi, 1          ; size
.text:0000000000008895                 call    _fwrite
.text:000000000000889A                 call    _abort
.text:000000000000889A ; } // starts at 8800
.text:000000000000889A set_program_name endp
.text:000000000000889A
.text:000000000000889A ; ---------------------------------------------------------------------------
.text:000000000000889F                 align 20h
.text:00000000000088A0
.text:00000000000088A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088A0
.text:00000000000088A0 ; Attributes: info_from_lumina
.text:00000000000088A0
.text:00000000000088A0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000088A0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000088A0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000088A0 ; __unwind {
.text:00000000000088A0                 push    rbp
.text:00000000000088A1                 push    rbx
.text:00000000000088A2                 mov     rbp, rdi
.text:00000000000088A5                 mov     ebx, esi
.text:00000000000088A7                 sub     rsp, 8
.text:00000000000088AB                 call    locale_charset
.text:00000000000088B0                 movzx   edx, byte ptr [rax]
.text:00000000000088B3                 and     edx, 0FFFFFFDFh
.text:00000000000088B6                 cmp     dl, 55h ; 'U'
.text:00000000000088B9                 jz      short loc_8930
.text:00000000000088BB                 cmp     dl, 47h ; 'G'
.text:00000000000088BE                 jz      short loc_88E0
.text:00000000000088C0
.text:00000000000088C0 loc_88C0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000088C0                                         ; gettext_quote+50↓j ...
.text:00000000000088C0                 lea     rax, aFieldUsed+0Ch ; "\""
.text:00000000000088C7                 lea     rdx, aDir+0Ah   ; "'"
.text:00000000000088CE                 cmp     ebx, 9
.text:00000000000088D1                 cmovnz  rax, rdx
.text:00000000000088D5                 add     rsp, 8
.text:00000000000088D9                 pop     rbx
.text:00000000000088DA                 pop     rbp
.text:00000000000088DB                 retn
.text:00000000000088DB ; ---------------------------------------------------------------------------
.text:00000000000088DC                 align 20h
.text:00000000000088E0
.text:00000000000088E0 loc_88E0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000088E0                 movzx   edx, byte ptr [rax+1]
.text:00000000000088E4                 and     edx, 0FFFFFFDFh
.text:00000000000088E7                 cmp     dl, 42h ; 'B'
.text:00000000000088EA                 jnz     short loc_88C0
.text:00000000000088EC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000088F0                 jnz     short loc_88C0
.text:00000000000088F2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000088F6                 jnz     short loc_88C0
.text:00000000000088F8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000088FC                 jnz     short loc_88C0
.text:00000000000088FE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000008902                 jnz     short loc_88C0
.text:0000000000008904                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000008908                 jnz     short loc_88C0
.text:000000000000890A                 cmp     byte ptr [rax+7], 0
.text:000000000000890E                 jnz     short loc_88C0
.text:0000000000008910                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000008914                 lea     rax, unk_100DC
.text:000000000000891B                 lea     rdx, unk_100E0
.text:0000000000008922                 cmovnz  rax, rdx
.text:0000000000008926                 add     rsp, 8
.text:000000000000892A                 pop     rbx
.text:000000000000892B                 pop     rbp
.text:000000000000892C                 retn
.text:000000000000892C ; ---------------------------------------------------------------------------
.text:000000000000892D                 align 10h
.text:0000000000008930
.text:0000000000008930 loc_8930:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000008930                 movzx   edx, byte ptr [rax+1]
.text:0000000000008934                 and     edx, 0FFFFFFDFh
.text:0000000000008937                 cmp     dl, 54h ; 'T'
.text:000000000000893A                 jnz     short loc_88C0
.text:000000000000893C                 movzx   edx, byte ptr [rax+2]
.text:0000000000008940                 and     edx, 0FFFFFFDFh
.text:0000000000008943                 cmp     dl, 46h ; 'F'
.text:0000000000008946                 jnz     loc_88C0
.text:000000000000894C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000008950                 jnz     loc_88C0
.text:0000000000008956                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000895A                 jnz     loc_88C0
.text:0000000000008960                 cmp     byte ptr [rax+5], 0
.text:0000000000008964                 jnz     loc_88C0
.text:000000000000896A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000896E                 lea     rax, unk_100D4
.text:0000000000008975                 lea     rdx, unk_100D8
.text:000000000000897C                 cmovnz  rax, rdx
.text:0000000000008980                 add     rsp, 8
.text:0000000000008984                 pop     rbx
.text:0000000000008985                 pop     rbp
.text:0000000000008986                 retn
.text:0000000000008986 ; } // starts at 88A0
.text:0000000000008986 gettext_quote   endp
.text:0000000000008986
.text:0000000000008986 ; ---------------------------------------------------------------------------
.text:0000000000008987                 align 10h
.text:0000000000008990
.text:0000000000008990 ; =============== S U B R O U T I N E =======================================
.text:0000000000008990
.text:0000000000008990 ; Attributes: info_from_lumina
.text:0000000000008990
.text:0000000000008990 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000008990 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000008990                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000008990
.text:0000000000008990 var_E0          = dword ptr -0E0h
.text:0000000000008990 var_DB          = byte ptr -0DBh
.text:0000000000008990 var_DA          = byte ptr -0DAh
.text:0000000000008990 var_D9          = byte ptr -0D9h
.text:0000000000008990 s               = qword ptr -0D8h
.text:0000000000008990 n               = qword ptr -0D0h
.text:0000000000008990 var_C8          = qword ptr -0C8h
.text:0000000000008990 ps              = qword ptr -0C0h
.text:0000000000008990 var_B8          = qword ptr -0B8h
.text:0000000000008990 var_B0          = qword ptr -0B0h
.text:0000000000008990 var_A8          = qword ptr -0A8h
.text:0000000000008990 s2              = qword ptr -0A0h
.text:0000000000008990 var_98          = qword ptr -98h
.text:0000000000008990 var_90          = qword ptr -90h
.text:0000000000008990 var_88          = qword ptr -88h
.text:0000000000008990 var_80          = qword ptr -80h
.text:0000000000008990 var_78          = qword ptr -78h
.text:0000000000008990 var_70          = dword ptr -70h
.text:0000000000008990 var_6C          = byte ptr -6Ch
.text:0000000000008990 var_6B          = byte ptr -6Bh
.text:0000000000008990 var_6A          = byte ptr -6Ah
.text:0000000000008990 var_69          = byte ptr -69h
.text:0000000000008990 var_68          = qword ptr -68h
.text:0000000000008990 var_60          = qword ptr -60h
.text:0000000000008990 wc              = dword ptr -4Ch
.text:0000000000008990 var_48          = qword ptr -48h
.text:0000000000008990 var_40          = qword ptr -40h
.text:0000000000008990 arg_0           = qword ptr  8
.text:0000000000008990 arg_8           = qword ptr  10h
.text:0000000000008990 arg_10          = qword ptr  18h
.text:0000000000008990
.text:0000000000008990 ; __unwind {
.text:0000000000008990                 push    r15
.text:0000000000008992                 push    r14
.text:0000000000008994                 mov     r15d, r8d
.text:0000000000008997                 push    r13
.text:0000000000008999                 push    r12
.text:000000000000899B                 mov     r14, rdi
.text:000000000000899E                 push    rbp
.text:000000000000899F                 push    rbx
.text:00000000000089A0                 mov     ebx, r9d
.text:00000000000089A3                 mov     r13, rsi
.text:00000000000089A6                 mov     rbp, rcx
.text:00000000000089A9                 and     ebx, 2
.text:00000000000089AC                 sub     rsp, 0B8h
.text:00000000000089B3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000089BB                 mov     [rsp+0E8h+s], rdx
.text:00000000000089C0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000089C5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000089CA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000089CF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000089D7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000089DC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000089E4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000089E9                 mov     rax, fs:28h
.text:00000000000089F2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000089FA                 xor     eax, eax
.text:00000000000089FC                 call    ___ctype_get_mb_cur_max
.text:0000000000008A01                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000008A05                 mov     [rsp+0E8h+var_90], rax
.text:0000000000008A0A                 ja      def_8A21        ; jumptable 00000000000121F1 default case
.text:0000000000008A10                 lea     rcx, jpt_8A21
.text:0000000000008A17                 mov     edx, r15d
.text:0000000000008A1A                 movsxd  rax, ds:(jpt_8A21 - 10140h)[rcx+rdx*4]
.text:0000000000008A1E                 add     rax, rcx
.text:0000000000008A21                 jmp     rax             ; switch jump
.text:0000000000008A23 ; ---------------------------------------------------------------------------
.text:0000000000008A23
.text:0000000000008A23 loc_8A23:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008A23                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000008A23                                         ; DATA XREF: ...
.text:0000000000008A23                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000008A28                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008A2D                 xor     r12d, r12d
.text:0000000000008A30                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008A39                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008A3E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000008A43
.text:0000000000008A43 loc_8A43:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000008A43                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000008A4A                 mov     [rsp+0E8h+n], 1
.text:0000000000008A53                 xor     r15d, r15d
.text:0000000000008A56                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008A5E                 mov     [rsp+0E8h+s2], rax
.text:0000000000008A63
.text:0000000000008A63 loc_8A63:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000008A63                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000008A63                 xor     r11d, r11d
.text:0000000000008A66                 mov     rax, rbp
.text:0000000000008A69                 mov     r8d, r12d
.text:0000000000008A6C                 mov     rbp, r11
.text:0000000000008A6F                 mov     r11, rax
.text:0000000000008A72                 nop     word ptr [rax+rax+00h]
.text:0000000000008A78
.text:0000000000008A78 loc_8A78:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000008A78                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000008A78                 cmp     r11, rbp
.text:0000000000008A7B                 setnz   r12b
.text:0000000000008A7F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008A83                 jnz     short loc_8A92
.text:0000000000008A85                 mov     rax, [rsp+0E8h+s]
.text:0000000000008A8A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000008A8E                 setnz   r12b
.text:0000000000008A92
.text:0000000000008A92 loc_8A92:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000008A92                 test    r12b, r12b
.text:0000000000008A95                 jz      loc_90F0
.text:0000000000008A9B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008AA0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000008AA5                 lea     r9, [rdi+rbp]
.text:0000000000008AA9                 setnz   al
.text:0000000000008AAC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000008AB0                 mov     r10d, eax
.text:0000000000008AB3                 jz      loc_8B60
.text:0000000000008AB9                 mov     rax, [rsp+0E8h+n]
.text:0000000000008ABE                 test    rax, rax
.text:0000000000008AC1                 jz      loc_8EF0
.text:0000000000008AC7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008ACB                 lea     rbx, [rbp+rax+0]
.text:0000000000008AD0                 jnz     short loc_8B00
.text:0000000000008AD2                 cmp     rax, 1
.text:0000000000008AD6                 jbe     short loc_8B00
.text:0000000000008AD8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000008ADD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000008AE2                 mov     [rsp+0E8h+ps], r9
.text:0000000000008AE7                 call    _strlen
.text:0000000000008AEC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000008AF2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000008AF8                 mov     r11, rax
.text:0000000000008AFB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000008B00
.text:0000000000008B00 loc_8B00:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000008B00                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000008B00                 cmp     rbx, r11
.text:0000000000008B03                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000008B08                 ja      loc_90C0
.text:0000000000008B0E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000008B13                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000008B18                 mov     rdi, r9         ; s1
.text:0000000000008B1B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000008B20                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000008B25                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000008B2A                 call    _memcmp
.text:0000000000008B2F                 test    eax, eax
.text:0000000000008B31                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000008B36                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000008B3C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000008B41                 jnz     loc_90C0
.text:0000000000008B47                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008B4C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000008B52                 jnz     loc_9AD5
.text:0000000000008B58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008B60
.text:0000000000008B60 loc_8B60:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000008B60                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000008B60                 movzx   ebx, byte ptr [r9]
.text:0000000000008B64                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000008B67                 ja      def_8B7E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000008B6D                 lea     rcx, jpt_8B7E
.text:0000000000008B74                 movzx   edx, bl
.text:0000000000008B77                 movsxd  rax, ds:(jpt_8B7E - 1016Ch)[rcx+rdx*4]
.text:0000000000008B7B                 add     rax, rcx
.text:0000000000008B7E                 jmp     rax             ; switch jump
.text:0000000000008B80 ; ---------------------------------------------------------------------------
.text:0000000000008B80
.text:0000000000008B80 loc_8B80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008B80                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008B80                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000008B83
.text:0000000000008B83 loc_8B83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008B83                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008B83                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000008B87                 setnz   al
.text:0000000000008B8A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B8E                 jnz     short loc_8B9C
.text:0000000000008B90                 mov     rax, [rsp+0E8h+s]
.text:0000000000008B95                 cmp     byte ptr [rax+1], 0
.text:0000000000008B99                 setnz   al
.text:0000000000008B9C
.text:0000000000008B9C loc_8B9C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000008B9C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008BA1                 setz    dl
.text:0000000000008BA4                 test    al, al
.text:0000000000008BA6                 jz      loc_8DF8
.text:0000000000008BAC
.text:0000000000008BAC loc_8BAC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000008BAC                 xor     r12d, r12d
.text:0000000000008BAF                 xor     eax, eax
.text:0000000000008BB1                 nop     dword ptr [rax+00000000h]
.text:0000000000008BB8
.text:0000000000008BB8 loc_8BB8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000008BB8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000008BB8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000008BBD                 jnz     loc_8CD2
.text:0000000000008BC3                 test    dl, dl
.text:0000000000008BC5                 jnz     loc_8CD2
.text:0000000000008BCB
.text:0000000000008BCB loc_8BCB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000008BCB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000008BD0                 test    rsi, rsi
.text:0000000000008BD3                 jz      short loc_8BE9
.text:0000000000008BD5                 mov     edx, ebx
.text:0000000000008BD7                 shr     dl, 5
.text:0000000000008BDA                 movzx   edx, dl
.text:0000000000008BDD                 mov     edx, [rsi+rdx*4]
.text:0000000000008BE0                 bt      edx, ebx
.text:0000000000008BE3                 jb      loc_8D33
.text:0000000000008BE9
.text:0000000000008BE9 loc_8BE9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000008BE9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000008BE9                 test    r10b, r10b
.text:0000000000008BEC                 jnz     loc_8D33
.text:0000000000008BF2                 xor     eax, 1
.text:0000000000008BF5                 add     rbp, 1
.text:0000000000008BF9                 and     eax, r8d
.text:0000000000008BFC
.text:0000000000008BFC loc_8BFC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000008BFC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000008BFC                 test    al, al
.text:0000000000008BFE                 jz      short loc_8C20
.text:0000000000008C00                 cmp     r13, r15
.text:0000000000008C03                 jbe     short loc_8C0A
.text:0000000000008C05                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008C0A
.text:0000000000008C0A loc_8C0A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000008C0A                 lea     rax, [r15+1]
.text:0000000000008C0E                 cmp     r13, rax
.text:0000000000008C11                 jbe     short loc_8C19
.text:0000000000008C13                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000008C19
.text:0000000000008C19 loc_8C19:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000008C19                 add     r15, 2
.text:0000000000008C1D                 xor     r8d, r8d
.text:0000000000008C20
.text:0000000000008C20 loc_8C20:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000008C20                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000008C20                 cmp     r15, r13
.text:0000000000008C23                 jnb     short loc_8C29
.text:0000000000008C25                 mov     [r14+r15], bl
.text:0000000000008C29
.text:0000000000008C29 loc_8C29:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000008C29                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000008C2E                 add     r15, 1
.text:0000000000008C32                 mov     eax, 0
.text:0000000000008C37                 test    r12b, r12b
.text:0000000000008C3A                 cmovz   edi, eax
.text:0000000000008C3D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000008C42                 jmp     loc_8A78
.text:0000000000008C42 ; ---------------------------------------------------------------------------
.text:0000000000008C47                 align 10h
.text:0000000000008C50
.text:0000000000008C50 loc_8C50:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008C50                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008C50                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000008C53
.text:0000000000008C53 loc_8C53:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008C53                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008C53                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000008C57                 cmp     eax, 2
.text:0000000000008C5A                 jz      loc_9218
.text:0000000000008C60                 cmp     eax, 5
.text:0000000000008C63                 jz      loc_91D8
.text:0000000000008C69                 cmp     eax, 2
.text:0000000000008C6C                 mov     ebx, 3Fh ; '?'
.text:0000000000008C71                 setz    dl
.text:0000000000008C74                 xor     r12d, r12d
.text:0000000000008C77                 xor     eax, eax
.text:0000000000008C79                 jmp     loc_8BB8
.text:0000000000008C79 ; ---------------------------------------------------------------------------
.text:0000000000008C7E                 align 20h
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008C80                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008C80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000008C83
.text:0000000000008C83 loc_8C83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008C83                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008C83                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000008C88                 jz      loc_9190
.text:0000000000008C8E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000008C93                 xor     edx, edx
.text:0000000000008C95                 xor     eax, eax
.text:0000000000008C97                 mov     ebx, 27h ; '''
.text:0000000000008C9C                 jmp     loc_8BB8
.text:0000000000008C9C ; ---------------------------------------------------------------------------
.text:0000000000008CA1                 align 8
.text:0000000000008CA8
.text:0000000000008CA8 loc_8CA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008CA8                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008CA8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000008CAD                 mov     ebx, 74h ; 't'
.text:0000000000008CB2
.text:0000000000008CB2 loc_8CB2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000008CB2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000008CB2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008CB7                 setz    al
.text:0000000000008CBA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000008CBE                 jnz     loc_8E0E
.text:0000000000008CC4
.text:0000000000008CC4 loc_8CC4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000008CC4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000008CC4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000008CC9                 jnz     short loc_8D30
.text:0000000000008CCB
.text:0000000000008CCB loc_8CCB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000008CCB                 mov     ebx, edx
.text:0000000000008CCD                 xor     r12d, r12d
.text:0000000000008CD0                 xor     eax, eax
.text:0000000000008CD2
.text:0000000000008CD2 loc_8CD2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000008CD2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000008CD2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008CD7                 jnz     loc_8BCB
.text:0000000000008CDD                 jmp     loc_8BE9
.text:0000000000008CDD ; ---------------------------------------------------------------------------
.text:0000000000008CE2                 align 8
.text:0000000000008CE8
.text:0000000000008CE8 loc_8CE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008CE8                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008CE8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000008CED                 mov     ebx, 62h ; 'b'
.text:0000000000008CF2                 jmp     short loc_8CC4
.text:0000000000008CF2 ; ---------------------------------------------------------------------------
.text:0000000000008CF4                 align 8
.text:0000000000008CF8
.text:0000000000008CF8 loc_8CF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008CF8                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008CF8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000008CFD                 jz      loc_90D0
.text:0000000000008D03                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000008D08                 jz      loc_8F20
.text:0000000000008D0E
.text:0000000000008D0E loc_8D0E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000008D0E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008D13                 jz      loc_8F20
.text:0000000000008D19                 cmp     [rsp+0E8h+n], 0
.text:0000000000008D1F                 jnz     loc_90DB
.text:0000000000008D25                 mov     ebx, 5Ch ; '\'
.text:0000000000008D2A                 nop     word ptr [rax+rax+00h]
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000008D30                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000008D30                 xor     r12d, r12d
.text:0000000000008D33
.text:0000000000008D33 loc_8D33:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000008D33                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000008D33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008D38                 setz    dl
.text:0000000000008D3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008D40                 mov     eax, edx
.text:0000000000008D42                 jnz     loc_9598
.text:0000000000008D48                 mov     eax, r8d
.text:0000000000008D4B                 xor     eax, 1
.text:0000000000008D4E                 and     al, dl
.text:0000000000008D50                 jz      short loc_8D81
.text:0000000000008D52                 cmp     r13, r15
.text:0000000000008D55                 jbe     short loc_8D5C
.text:0000000000008D57                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008D5C
.text:0000000000008D5C loc_8D5C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000008D5C                 lea     rdx, [r15+1]
.text:0000000000008D60                 cmp     r13, rdx
.text:0000000000008D63                 jbe     short loc_8D6B
.text:0000000000008D65                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000008D6B
.text:0000000000008D6B loc_8D6B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000008D6B                 lea     rdx, [r15+2]
.text:0000000000008D6F                 cmp     r13, rdx
.text:0000000000008D72                 jbe     short loc_8D7A
.text:0000000000008D74                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000008D7A
.text:0000000000008D7A loc_8D7A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000008D7A                 add     r15, 3
.text:0000000000008D7E                 mov     r8d, eax
.text:0000000000008D81
.text:0000000000008D81 loc_8D81:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000008D81                 cmp     r13, r15
.text:0000000000008D84                 jbe     short loc_8D8B
.text:0000000000008D86                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000008D8B
.text:0000000000008D8B loc_8D8B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000008D8B                 add     r15, 1
.text:0000000000008D8F                 add     rbp, 1
.text:0000000000008D93                 jmp     loc_8C20
.text:0000000000008D93 ; ---------------------------------------------------------------------------
.text:0000000000008D98                 align 20h
.text:0000000000008DA0
.text:0000000000008DA0 loc_8DA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008DA0                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008DA0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000008DA5                 jnz     loc_8F73
.text:0000000000008DAB                 xor     edx, edx
.text:0000000000008DAD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000008DB2                 jz      loc_8CCB
.text:0000000000008DB8                 add     rbp, 1
.text:0000000000008DBC                 jmp     loc_8A78
.text:0000000000008DBC ; ---------------------------------------------------------------------------
.text:0000000000008DC1                 align 8
.text:0000000000008DC8
.text:0000000000008DC8 loc_8DC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008DC8                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008DC8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000008DCD                 setz    dl
.text:0000000000008DD0                 xor     eax, eax
.text:0000000000008DD2                 jmp     loc_8BB8
.text:0000000000008DD2 ; ---------------------------------------------------------------------------
.text:0000000000008DD7                 align 20h
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008DE0                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008DE0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000008DE5                 mov     ebx, 61h ; 'a'
.text:0000000000008DEA                 jmp     loc_8CC4
.text:0000000000008DEA ; ---------------------------------------------------------------------------
.text:0000000000008DEF                 align 10h
.text:0000000000008DF0
.text:0000000000008DF0 loc_8DF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008DF0                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008DF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000008DF5                 setz    dl
.text:0000000000008DF8
.text:0000000000008DF8 loc_8DF8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000008DF8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000008DF8                 test    rbp, rbp
.text:0000000000008DFB                 jnz     loc_8BAC
.text:0000000000008E01
.text:0000000000008E01 loc_8E01:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000008E01                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000008E01                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000008E06                 and     al, dl
.text:0000000000008E08                 jz      loc_8BB8
.text:0000000000008E0E
.text:0000000000008E0E loc_8E0E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000008E0E                 mov     rbp, r11
.text:0000000000008E11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008E19                 jmp     loc_9519
.text:0000000000008E19 ; ---------------------------------------------------------------------------
.text:0000000000008E1E                 align 20h
.text:0000000000008E20
.text:0000000000008E20 loc_8E20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008E20                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008E20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000008E25                 setz    dl
.text:0000000000008E28                 xor     r12d, r12d
.text:0000000000008E2B                 jmp     short loc_8E01
.text:0000000000008E2B ; ---------------------------------------------------------------------------
.text:0000000000008E2D                 align 10h
.text:0000000000008E30
.text:0000000000008E30 loc_8E30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008E30                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008E30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000008E35                 mov     ebx, 20h ; ' '
.text:0000000000008E3A                 setz    dl
.text:0000000000008E3D                 jmp     short loc_8E01
.text:0000000000008E3D ; ---------------------------------------------------------------------------
.text:0000000000008E3F                 align 20h
.text:0000000000008E40
.text:0000000000008E40 loc_8E40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008E40                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008E40                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000008E45                 mov     ebx, 72h ; 'r'
.text:0000000000008E4A                 jmp     loc_8CB2
.text:0000000000008E4A ; ---------------------------------------------------------------------------
.text:0000000000008E4F                 align 10h
.text:0000000000008E50
.text:0000000000008E50 loc_8E50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008E50                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008E50                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000008E55                 mov     ebx, 66h ; 'f'
.text:0000000000008E5A                 jmp     loc_8CC4
.text:0000000000008E5A ; ---------------------------------------------------------------------------
.text:0000000000008E5F                 align 20h
.text:0000000000008E60
.text:0000000000008E60 loc_8E60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008E60                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008E60                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000008E65                 mov     ebx, 76h ; 'v'
.text:0000000000008E6A                 jmp     loc_8CC4
.text:0000000000008E6A ; ---------------------------------------------------------------------------
.text:0000000000008E6F                 align 10h
.text:0000000000008E70
.text:0000000000008E70 loc_8E70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008E70                                         ; DATA XREF: .rodata:jpt_8B7E↓o
.text:0000000000008E70                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000008E75                 mov     ebx, 6Eh ; 'n'
.text:0000000000008E7A                 jmp     loc_8CB2
.text:0000000000008E7A ; ---------------------------------------------------------------------------
.text:0000000000008E7F                 align 20h
.text:0000000000008E80
.text:0000000000008E80 def_8F0A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000008E80                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000008E80                                         ; DATA XREF: ...
.text:0000000000008E80                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000008E83                 nop     dword ptr [rax+rax+00h]
.text:0000000000008E88
.text:0000000000008E88 def_8B7E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000008E88                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000008E88                                         ; DATA XREF: ...
.text:0000000000008E88                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000008E8E                 jnz     loc_9238
.text:0000000000008E94                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000008E99                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000008E9E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000008EA3                 call    ___ctype_b_loc
.text:0000000000008EA8                 mov     rcx, [rax]
.text:0000000000008EAB                 movzx   edx, bl
.text:0000000000008EAE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000008EB4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000008EBA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000008EBF                 mov     edi, 1
.text:0000000000008EC4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000008EC8                 and     ax, 4000h
.text:0000000000008ECC                 setnz   r12b
.text:0000000000008ED0                 setz    al
.text:0000000000008ED3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000008ED7
.text:0000000000008ED7 loc_8ED7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000008ED7                 test    al, al
.text:0000000000008ED9                 jnz     loc_9871
.text:0000000000008EDF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008EE4                 setz    dl
.text:0000000000008EE7                 jmp     loc_8BB8
.text:0000000000008EE7 ; ---------------------------------------------------------------------------
.text:0000000000008EEC                 align 10h
.text:0000000000008EF0
.text:0000000000008EF0 loc_8EF0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000008EF0                 movzx   ebx, byte ptr [r9]
.text:0000000000008EF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000008EF7                 ja      short def_8F0A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000008EF9                 lea     rcx, jpt_8F0A
.text:0000000000008F00                 movzx   edx, bl
.text:0000000000008F03                 movsxd  rax, ds:(jpt_8F0A - 10368h)[rcx+rdx*4]
.text:0000000000008F07                 add     rax, rcx
.text:0000000000008F0A                 jmp     rax             ; switch jump
.text:0000000000008F0A ; ---------------------------------------------------------------------------
.text:0000000000008F0C                 align 10h
.text:0000000000008F10
.text:0000000000008F10 loc_8F10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008F10                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008F10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000008F13                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000008F18                 jnz     loc_8D0E
.text:0000000000008F1E                 xchg    ax, ax
.text:0000000000008F20
.text:0000000000008F20 loc_8F20:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000008F20                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000008F20                 mov     edx, 5Ch ; '\'
.text:0000000000008F25                 mov     ebx, 5Ch ; '\'
.text:0000000000008F2A                 jmp     loc_8CC4
.text:0000000000008F2A ; ---------------------------------------------------------------------------
.text:0000000000008F2F                 align 10h
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008F30                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008F30                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000008F35                 xor     r10d, r10d
.text:0000000000008F38                 mov     ebx, 66h ; 'f'
.text:0000000000008F3D                 jmp     loc_8CC4
.text:0000000000008F3D ; ---------------------------------------------------------------------------
.text:0000000000008F42                 align 8
.text:0000000000008F48
.text:0000000000008F48 loc_8F48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008F48                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008F48                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000008F4D                 xor     r10d, r10d
.text:0000000000008F50                 mov     ebx, 6Eh ; 'n'
.text:0000000000008F55                 jmp     loc_8CB2
.text:0000000000008F55 ; ---------------------------------------------------------------------------
.text:0000000000008F5A                 align 20h
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008F60                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008F60                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000008F65                 jmp     loc_8D30
.text:0000000000008F65 ; ---------------------------------------------------------------------------
.text:0000000000008F6A                 align 10h
.text:0000000000008F70
.text:0000000000008F70 loc_8F70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008F70                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000008F70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000008F73
.text:0000000000008F73 loc_8F73:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000008F73                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008F78                 setz    dl
.text:0000000000008F7B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008F80                 jnz     loc_9B1A
.text:0000000000008F86                 mov     eax, r8d
.text:0000000000008F89                 mov     rcx, r15
.text:0000000000008F8C                 xor     eax, 1
.text:0000000000008F8F                 and     al, dl
.text:0000000000008F91                 jz      short loc_8FC0
.text:0000000000008F93                 cmp     r13, r15
.text:0000000000008F96                 jbe     short loc_8F9D
.text:0000000000008F98                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008F9D
.text:0000000000008F9D loc_8F9D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000008F9D                 lea     rcx, [r15+1]
.text:0000000000008FA1                 cmp     r13, rcx
.text:0000000000008FA4                 jbe     short loc_8FAC
.text:0000000000008FA6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000008FAC
.text:0000000000008FAC loc_8FAC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000008FAC                 lea     rcx, [r15+2]
.text:0000000000008FB0                 cmp     r13, rcx
.text:0000000000008FB3                 ja      loc_95E9
.text:0000000000008FB9
.text:0000000000008FB9 loc_8FB9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000008FB9                 lea     rcx, [r15+3]
.text:0000000000008FBD                 mov     r8d, eax
.text:0000000000008FC0
.text:0000000000008FC0 loc_8FC0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000008FC0                 cmp     r13, rcx
.text:0000000000008FC3                 jbe     short loc_8FCA
.text:0000000000008FC5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000008FCA
.text:0000000000008FCA loc_8FCA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000008FCA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008FCF                 lea     r15, [rcx+1]
.text:0000000000008FD3                 jz      loc_95D9
.text:0000000000008FD9                 lea     rax, [rbp+1]
.text:0000000000008FDD                 cmp     rax, r11
.text:0000000000008FE0                 jnb     short loc_8FFB
.text:0000000000008FE2                 mov     rax, [rsp+0E8h+s]
.text:0000000000008FE7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000008FEC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000008FF0                 sub     eax, 30h ; '0'
.text:0000000000008FF3                 cmp     al, 9
.text:0000000000008FF5                 jbe     loc_9829
.text:0000000000008FFB
.text:0000000000008FFB loc_8FFB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000008FFB                 mov     eax, r12d
.text:0000000000008FFE                 mov     ebx, 30h ; '0'
.text:0000000000009003                 xor     r12d, r12d
.text:0000000000009006                 jmp     loc_8BB8
.text:0000000000009006 ; ---------------------------------------------------------------------------
.text:000000000000900B                 align 10h
.text:0000000000009010
.text:0000000000009010 loc_9010:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009010                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009010                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000009015                 mov     r12d, r10d
.text:0000000000009018                 setz    dl
.text:000000000000901B                 xor     r10d, r10d
.text:000000000000901E                 xor     eax, eax
.text:0000000000009020                 jmp     loc_8BB8
.text:0000000000009020 ; ---------------------------------------------------------------------------
.text:0000000000009025                 align 8
.text:0000000000009028
.text:0000000000009028 loc_9028:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009028                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009028                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000902D                 setz    dl
.text:0000000000009030                 xor     r10d, r10d
.text:0000000000009033                 jmp     loc_8DF8
.text:0000000000009033 ; ---------------------------------------------------------------------------
.text:0000000000009038                 align 20h
.text:0000000000009040
.text:0000000000009040 loc_9040:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009040                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009040                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000009045                 setz    dl
.text:0000000000009048                 xor     r10d, r10d
.text:000000000000904B                 xor     r12d, r12d
.text:000000000000904E                 jmp     loc_8E01
.text:000000000000904E ; ---------------------------------------------------------------------------
.text:0000000000009053                 align 8
.text:0000000000009058
.text:0000000000009058 loc_9058:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009058                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009058                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000905D                 mov     r12d, r10d
.text:0000000000009060                 mov     ebx, 20h ; ' '
.text:0000000000009065                 setz    dl
.text:0000000000009068                 xor     r10d, r10d
.text:000000000000906B                 jmp     loc_8E01
.text:0000000000009070 ; ---------------------------------------------------------------------------
.text:0000000000009070
.text:0000000000009070 loc_9070:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009070                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009070                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000009075                 xor     r10d, r10d
.text:0000000000009078                 mov     ebx, 72h ; 'r'
.text:000000000000907D                 jmp     loc_8CB2
.text:000000000000907D ; ---------------------------------------------------------------------------
.text:0000000000009082                 align 8
.text:0000000000009088
.text:0000000000009088 loc_9088:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009088                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009088                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000908D                 jmp     loc_8D30
.text:000000000000908D ; ---------------------------------------------------------------------------
.text:0000000000009092                 align 8
.text:0000000000009098
.text:0000000000009098 loc_9098:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009098                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:0000000000009098                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000909D                 xor     r10d, r10d
.text:00000000000090A0                 mov     ebx, 74h ; 't'
.text:00000000000090A5                 jmp     loc_8CB2
.text:00000000000090A5 ; ---------------------------------------------------------------------------
.text:00000000000090AA                 align 10h
.text:00000000000090B0
.text:00000000000090B0 loc_90B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000090B0                                         ; DATA XREF: .rodata:jpt_8F0A↓o
.text:00000000000090B0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000090B5                 jmp     loc_8D30
.text:00000000000090B5 ; ---------------------------------------------------------------------------
.text:00000000000090BA                 align 20h
.text:00000000000090C0
.text:00000000000090C0 loc_90C0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000090C0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000090C0                 xor     r10d, r10d
.text:00000000000090C3                 jmp     loc_8B60
.text:00000000000090C3 ; ---------------------------------------------------------------------------
.text:00000000000090C8                 align 10h
.text:00000000000090D0
.text:00000000000090D0 loc_90D0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000090D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000090D5                 jnz     loc_9A40
.text:00000000000090DB
.text:00000000000090DB loc_90DB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000090DB                 add     rbp, 1
.text:00000000000090DF                 mov     eax, r8d
.text:00000000000090E2                 xor     r12d, r12d
.text:00000000000090E5                 mov     ebx, 5Ch ; '\'
.text:00000000000090EA                 jmp     loc_8BFC
.text:00000000000090EA ; ---------------------------------------------------------------------------
.text:00000000000090EF                 align 10h
.text:00000000000090F0
.text:00000000000090F0 loc_90F0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000090F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000090F5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000090FA                 mov     r12d, r8d
.text:00000000000090FD                 mov     rbp, r11
.text:0000000000009100                 setz    dl
.text:0000000000009103                 mov     eax, ebx
.text:0000000000009105                 test    r15, r15
.text:0000000000009108                 setz    cl
.text:000000000000910B                 and     eax, edx
.text:000000000000910D                 and     al, cl
.text:000000000000910F                 jnz     loc_9B76
.text:0000000000009115                 mov     eax, ebx
.text:0000000000009117                 xor     eax, 1
.text:000000000000911A                 and     dl, al
.text:000000000000911C                 jz      loc_9A8C
.text:0000000000009122                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000009127                 jz      loc_9A8A
.text:000000000000912D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000009132                 jnz     loc_9B2D
.text:0000000000009138                 test    r13, r13
.text:000000000000913B                 setz    al
.text:000000000000913E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000009144                 setnz   dl
.text:0000000000009147                 and     al, dl
.text:0000000000009149                 jz      loc_9B6C
.text:000000000000914F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000009154
.text:0000000000009154 loc_9154:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000009154                 lea     rbx, aDir+0Ah   ; "'"
.text:000000000000915B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000915F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009167                 mov     r15d, 1
.text:000000000000916D                 mov     [rsp+0E8h+n], 1
.text:0000000000009176                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000917B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000009180                 mov     [rsp+0E8h+var_6C], al
.text:0000000000009184                 jmp     loc_8A63
.text:0000000000009184 ; ---------------------------------------------------------------------------
.text:0000000000009189                 align 10h
.text:0000000000009190
.text:0000000000009190 loc_9190:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000009190                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009195                 jnz     loc_9A40
.text:000000000000919B                 test    r13, r13
.text:000000000000919E                 jz      loc_95A0
.text:00000000000091A4                 xor     edx, edx
.text:00000000000091A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000091AC                 jnz     loc_95A0
.text:00000000000091B2
.text:00000000000091B2 loc_91B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000091B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000091B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000091B7                 add     r15, 3
.text:00000000000091BB                 xor     eax, eax
.text:00000000000091BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000091C2                 xor     r8d, r8d
.text:00000000000091C5                 mov     r13, rdx
.text:00000000000091C8                 mov     ebx, 27h ; '''
.text:00000000000091CD                 jmp     loc_8BE9
.text:00000000000091CD ; ---------------------------------------------------------------------------
.text:00000000000091D2                 align 8
.text:00000000000091D8
.text:00000000000091D8 loc_91D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000091D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000091DD                 jz      short loc_9200
.text:00000000000091DF                 lea     rcx, [rbp+2]
.text:00000000000091E3                 cmp     rcx, r11
.text:00000000000091E6                 jnb     short loc_9200
.text:00000000000091E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000091ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000091F2                 jz      loc_9982
.text:00000000000091F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009200
.text:0000000000009200 loc_9200:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000009200                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000009200                 xor     edx, edx
.text:0000000000009202                 xor     r12d, r12d
.text:0000000000009205                 xor     eax, eax
.text:0000000000009207                 mov     ebx, 3Fh ; '?'
.text:000000000000920C                 jmp     loc_8BB8
.text:000000000000920C ; ---------------------------------------------------------------------------
.text:0000000000009211                 align 8
.text:0000000000009218
.text:0000000000009218 loc_9218:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000009218                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000921D                 jnz     loc_9A40
.text:0000000000009223                 xor     r12d, r12d
.text:0000000000009226                 xor     eax, eax
.text:0000000000009228                 mov     ebx, 3Fh ; '?'
.text:000000000000922D                 jmp     loc_8BE9
.text:000000000000922D ; ---------------------------------------------------------------------------
.text:0000000000009232                 align 8
.text:0000000000009238
.text:0000000000009238 loc_9238:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000009238                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000009240                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000009244                 mov     [rsp+0E8h+var_48], 0
.text:0000000000009250                 mov     [rsp+0E8h+ps], rax
.text:0000000000009255                 jnz     short loc_9284
.text:0000000000009257                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000925C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000009261                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000009266                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000926B                 call    _strlen
.text:0000000000009270                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000009276                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000927C                 mov     r11, rax
.text:000000000000927F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000009284
.text:0000000000009284 loc_9284:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000009284                 lea     rax, [rsp+0E8h+wc]
.text:000000000000928C                 xor     ecx, ecx
.text:000000000000928E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000009292                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000009297                 mov     rbx, rcx
.text:000000000000929A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000092A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000092A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000092AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000092B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000092B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000092BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000092C3
.text:00000000000092C3 loc_92C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000092C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000092C8                 lea     r14, [rbp+rbx+0]
.text:00000000000092CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000092D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000092D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000092DC                 lea     r13, [rax+r14]
.text:00000000000092E0                 sub     rdx, r14
.text:00000000000092E3                 mov     rsi, r13
.text:00000000000092E6                 call    rpl_mbrtowc
.text:00000000000092EB                 test    rax, rax
.text:00000000000092EE                 mov     r15, rax
.text:00000000000092F1                 jz      short loc_9341
.text:00000000000092F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000092F7                 jz      loc_9915
.text:00000000000092FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000009301                 jz      loc_98A1
.text:0000000000009307                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000930C                 setz    al
.text:000000000000930F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000009313                 jnz     loc_94B0
.text:0000000000009319
.text:0000000000009319 loc_9319:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000009319                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000009319                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000009320                 call    _iswprint
.text:0000000000009325                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000932A                 test    eax, eax
.text:000000000000932C                 mov     eax, 0
.text:0000000000009331                 cmovz   r12d, eax
.text:0000000000009335                 add     rbx, r15
.text:0000000000009338                 call    _mbsinit
.text:000000000000933D                 test    eax, eax
.text:000000000000933F                 jz      short loc_92C3
.text:0000000000009341
.text:0000000000009341 loc_9341:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000009341                 mov     edx, r12d
.text:0000000000009344                 mov     rdi, rbx
.text:0000000000009347                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000934D                 xor     edx, 1
.text:0000000000009350                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000009355                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000935B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000935F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000009367                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000936C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000009371                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000009376
.text:0000000000009376 loc_9376:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000009376                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000009376                 cmp     rdi, 1
.text:000000000000937A                 jbe     loc_997B
.text:0000000000009380
.text:0000000000009380 loc_9380:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000009380                 mov     rcx, rdi
.text:0000000000009383                 xor     esi, esi
.text:0000000000009385                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000938B                 add     rcx, rbp
.text:000000000000938E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000009393                 jmp     loc_944E
.text:0000000000009393 ; ---------------------------------------------------------------------------
.text:0000000000009398                 align 20h
.text:00000000000093A0
.text:00000000000093A0 loc_93A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000093A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000093A5                 setz    al
.text:00000000000093A8                 test    r9b, r9b
.text:00000000000093AB                 jnz     loc_9860
.text:00000000000093B1                 mov     esi, r8d
.text:00000000000093B4                 xor     esi, 1
.text:00000000000093B7                 and     al, sil
.text:00000000000093BA                 jz      short loc_93EB
.text:00000000000093BC                 cmp     r13, r15
.text:00000000000093BF                 jbe     short loc_93C6
.text:00000000000093C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000093C6
.text:00000000000093C6 loc_93C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000093C6                 lea     rsi, [r15+1]
.text:00000000000093CA                 cmp     r13, rsi
.text:00000000000093CD                 jbe     short loc_93D5
.text:00000000000093CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000093D5
.text:00000000000093D5 loc_93D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000093D5                 lea     rsi, [r15+2]
.text:00000000000093D9                 cmp     r13, rsi
.text:00000000000093DC                 jbe     short loc_93E4
.text:00000000000093DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000093E4
.text:00000000000093E4 loc_93E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000093E4                 add     r15, 3
.text:00000000000093E8                 mov     r8d, eax
.text:00000000000093EB
.text:00000000000093EB loc_93EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000093EB                 cmp     r13, r15
.text:00000000000093EE                 jbe     short loc_93F5
.text:00000000000093F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000093F5
.text:00000000000093F5 loc_93F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000093F5                 lea     rax, [r15+1]
.text:00000000000093F9                 cmp     r13, rax
.text:00000000000093FC                 jbe     short loc_940B
.text:00000000000093FE                 mov     eax, ebx
.text:0000000000009400                 shr     al, 6
.text:0000000000009403                 add     eax, 30h ; '0'
.text:0000000000009406                 mov     [r14+r15+1], al
.text:000000000000940B
.text:000000000000940B loc_940B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000940B                 lea     rax, [r15+2]
.text:000000000000940F                 cmp     r13, rax
.text:0000000000009412                 jbe     short loc_9424
.text:0000000000009414                 mov     eax, ebx
.text:0000000000009416                 shr     al, 3
.text:0000000000009419                 and     eax, 7
.text:000000000000941C                 add     eax, 30h ; '0'
.text:000000000000941F                 mov     [r14+r15+2], al
.text:0000000000009424
.text:0000000000009424 loc_9424:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000009424                 and     ebx, 7
.text:0000000000009427                 add     rbp, 1
.text:000000000000942B                 add     r15, 3
.text:000000000000942F                 add     ebx, 30h ; '0'
.text:0000000000009432                 cmp     rbp, rcx
.text:0000000000009435                 jnb     loc_8C20
.text:000000000000943B                 mov     esi, edx
.text:000000000000943D
.text:000000000000943D loc_943D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000943D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000943D                 cmp     r13, r15
.text:0000000000009440                 jbe     short loc_9446
.text:0000000000009442                 mov     [r14+r15], bl
.text:0000000000009446
.text:0000000000009446 loc_9446:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000009446                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000944A                 add     r15, 1
.text:000000000000944E
.text:000000000000944E loc_944E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000944E                 test    dl, dl
.text:0000000000009450                 jnz     loc_93A0
.text:0000000000009456                 mov     eax, esi
.text:0000000000009458                 xor     eax, 1
.text:000000000000945B                 and     eax, r8d
.text:000000000000945E                 test    r10b, r10b
.text:0000000000009461                 jz      short loc_9471
.text:0000000000009463                 cmp     r13, r15
.text:0000000000009466                 jbe     short loc_946D
.text:0000000000009468                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000946D
.text:000000000000946D loc_946D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000946D                 add     r15, 1
.text:0000000000009471
.text:0000000000009471 loc_9471:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000009471                 add     rbp, 1
.text:0000000000009475                 cmp     rbp, rcx
.text:0000000000009478                 jnb     loc_8BFC
.text:000000000000947E                 test    al, al
.text:0000000000009480                 jz      loc_987E
.text:0000000000009486                 cmp     r13, r15
.text:0000000000009489                 jbe     short loc_9490
.text:000000000000948B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000009490
.text:0000000000009490 loc_9490:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000009490                 lea     rax, [r15+1]
.text:0000000000009494                 cmp     r13, rax
.text:0000000000009497                 jbe     short loc_949F
.text:0000000000009499                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000949F
.text:000000000000949F loc_949F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000949F                 add     r15, 2
.text:00000000000094A3                 xor     r10d, r10d
.text:00000000000094A6                 xor     r8d, r8d
.text:00000000000094A9                 jmp     short loc_943D
.text:00000000000094A9 ; ---------------------------------------------------------------------------
.text:00000000000094AB                 align 10h
.text:00000000000094B0
.text:00000000000094B0 loc_94B0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000094B0                 cmp     r15, 1
.text:00000000000094B4                 jz      loc_9319
.text:00000000000094BA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000094BF                 lea     rcx, [rdi+r15]
.text:00000000000094C3                 lea     rdx, [rdi+r14+1]
.text:00000000000094C8                 lea     r8, [rcx+r14]
.text:00000000000094CC                 jmp     short loc_94DD
.text:00000000000094CC ; ---------------------------------------------------------------------------
.text:00000000000094CE                 align 10h
.text:00000000000094D0
.text:00000000000094D0 loc_94D0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000094D0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000094D0                 add     rdx, 1
.text:00000000000094D4                 cmp     r8, rdx
.text:00000000000094D7                 jz      loc_9319
.text:00000000000094DD
.text:00000000000094DD loc_94DD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000094DD                 movzx   ecx, byte ptr [rdx]
.text:00000000000094E0                 sub     ecx, 5Bh ; '['
.text:00000000000094E3                 cmp     cl, 21h ; '!'
.text:00000000000094E6                 ja      short loc_94D0
.text:00000000000094E8                 mov     esi, 1
.text:00000000000094ED                 shl     rsi, cl
.text:00000000000094F0                 mov     rcx, rsi
.text:00000000000094F3                 mov     rsi, 20000002Bh
.text:00000000000094FD                 test    rcx, rsi
.text:0000000000009500                 jz      short loc_94D0
.text:0000000000009502                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000009507                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000950C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000009511                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009519
.text:0000000000009519 loc_9519:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000009519                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000009519                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000951E                 jz      short loc_9530
.text:0000000000009520                 test    al, al
.text:0000000000009522                 mov     eax, 4
.text:0000000000009527                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000952C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000009530
.text:0000000000009530 loc_9530:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000009530                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000009530                 sub     rsp, 8
.text:0000000000009534                 mov     rcx, rbp
.text:0000000000009537                 mov     rsi, r13
.text:000000000000953A                 push    [rsp+0F0h+var_88]
.text:000000000000953E                 push    [rsp+0F8h+var_80]
.text:0000000000009542                 mov     rdi, r14
.text:0000000000009545                 push    0
.text:0000000000009547                 mov     r9d, [rsp+108h+var_70]
.text:000000000000954F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000009554                 mov     rdx, [rsp+108h+s]
.text:0000000000009559                 and     r9d, 0FFFFFFFDh
.text:000000000000955D                 call    quotearg_buffer_restyled
.text:0000000000009562                 add     rsp, 20h
.text:0000000000009566                 mov     r15, rax
.text:0000000000009569
.text:0000000000009569 loc_9569:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000009569                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000009569                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000009571                 xor     rbx, fs:28h
.text:000000000000957A                 mov     rax, r15
.text:000000000000957D                 jnz     loc_9B83
.text:0000000000009583                 add     rsp, 0B8h
.text:000000000000958A                 pop     rbx
.text:000000000000958B                 pop     rbp
.text:000000000000958C                 pop     r12
.text:000000000000958E                 pop     r13
.text:0000000000009590                 pop     r14
.text:0000000000009592                 pop     r15
.text:0000000000009594                 retn
.text:0000000000009594 ; ---------------------------------------------------------------------------
.text:0000000000009595                 align 8
.text:0000000000009598
.text:0000000000009598 loc_9598:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000009598                 mov     rbp, r11
.text:000000000000959B                 jmp     loc_9519
.text:00000000000095A0 ; ---------------------------------------------------------------------------
.text:00000000000095A0
.text:00000000000095A0 loc_95A0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000095A0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000095A0                 cmp     r13, r15
.text:00000000000095A3                 jbe     short loc_95AA
.text:00000000000095A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000095AA
.text:00000000000095AA loc_95AA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000095AA                 lea     rax, [r15+1]
.text:00000000000095AE                 cmp     r13, rax
.text:00000000000095B1                 jbe     short loc_95B9
.text:00000000000095B3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000095B9
.text:00000000000095B9 loc_95B9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000095B9                 lea     rax, [r15+2]
.text:00000000000095BD                 cmp     r13, rax
.text:00000000000095C0                 jbe     loc_9BB2
.text:00000000000095C6                 mov     rdx, r13
.text:00000000000095C9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000095CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000095D4                 jmp     loc_91B2
.text:00000000000095D9 ; ---------------------------------------------------------------------------
.text:00000000000095D9
.text:00000000000095D9 loc_95D9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000095D9                 mov     eax, r12d
.text:00000000000095DC                 mov     ebx, 30h ; '0'
.text:00000000000095E1                 xor     r12d, r12d
.text:00000000000095E4                 jmp     loc_8BE9
.text:00000000000095E9 ; ---------------------------------------------------------------------------
.text:00000000000095E9
.text:00000000000095E9 loc_95E9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000095E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000095EF                 jmp     loc_8FB9
.text:00000000000095F4 ; ---------------------------------------------------------------------------
.text:00000000000095F4
.text:00000000000095F4 loc_95F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000095F4                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:00000000000095F4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000095F6                 jnz     loc_8A23        ; jumptable 00000000000121F1 case 1
.text:00000000000095FC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009601
.text:0000000000009601 loc_9601:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000009601                 test    r13, r13
.text:0000000000009604                 jnz     loc_9B9A
.text:000000000000960A                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000009611                 mov     [rsp+0E8h+var_98], 0
.text:000000000000961A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000961F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009624                 xor     r12d, r12d
.text:0000000000009627                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000962C                 mov     [rsp+0E8h+n], 1
.text:0000000000009635                 mov     [rsp+0E8h+s2], rax
.text:000000000000963A                 mov     r15d, 1
.text:0000000000009640                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009648                 jmp     loc_8A63
.text:0000000000009648 ; ---------------------------------------------------------------------------
.text:000000000000964D                 align 10h
.text:0000000000009650
.text:0000000000009650 loc_9650:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009650                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:0000000000009650                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000009652                 jnz     loc_9A4D
.text:0000000000009658                 test    r13, r13
.text:000000000000965B                 jz      loc_9886
.text:0000000000009661                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000009665                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000966A                 xor     r12d, r12d
.text:000000000000966D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009672                 mov     [rsp+0E8h+var_98], 0
.text:000000000000967B
.text:000000000000967B loc_967B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000967B                 lea     rax, aFieldUsed+0Ch ; "\""
.text:0000000000009682                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000009687                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000968C                 mov     [rsp+0E8h+n], 1
.text:0000000000009695                 mov     r15d, 1
.text:000000000000969B                 mov     [rsp+0E8h+s2], rax
.text:00000000000096A0                 jmp     loc_8A63
.text:00000000000096A5 ; ---------------------------------------------------------------------------
.text:00000000000096A5
.text:00000000000096A5 loc_96A5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000096A5                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:00000000000096A5                 lea     rax, aFieldUsed+0Ch ; jumptable 00000000000121F1 case 6
.text:00000000000096AC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000096B1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000096B6                 xor     r12d, r12d
.text:00000000000096B9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000096C2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000096C7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000096CC                 mov     [rsp+0E8h+n], 1
.text:00000000000096D5                 xor     r15d, r15d
.text:00000000000096D8                 mov     [rsp+0E8h+s2], rax
.text:00000000000096DD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000096E5                 jmp     loc_8A63
.text:00000000000096EA ; ---------------------------------------------------------------------------
.text:00000000000096EA
.text:00000000000096EA loc_96EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000096EA                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:00000000000096EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000096EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000096F4                 xor     r12d, r12d
.text:00000000000096F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009700                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000009705                 xor     r15d, r15d
.text:0000000000009708                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000970D                 mov     [rsp+0E8h+n], 0
.text:0000000000009716                 mov     [rsp+0E8h+s2], 0
.text:000000000000971F                 jmp     loc_8A63
.text:0000000000009724 ; ---------------------------------------------------------------------------
.text:0000000000009724
.text:0000000000009724 loc_9724:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009724                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:0000000000009724                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000009729                 jz      short loc_9781
.text:000000000000972B                 lea     rsi, asc_100E3  ; "`"
.text:0000000000009732                 xor     edi, edi        ; domainname
.text:0000000000009734                 mov     edx, 5          ; category
.text:0000000000009739                 call    _dcgettext
.text:000000000000973E                 mov     rcx, rax
.text:0000000000009741                 mov     [rsp+0E8h+var_80], rax
.text:0000000000009746                 lea     rax, asc_100E3  ; "`"
.text:000000000000974D                 cmp     rcx, rax
.text:0000000000009750                 jz      loc_9AEE
.text:0000000000009756
.text:0000000000009756 loc_9756:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000009756                 lea     rsi, aDir+0Ah   ; msgid
.text:000000000000975D                 xor     edi, edi        ; domainname
.text:000000000000975F                 mov     edx, 5          ; category
.text:0000000000009764                 call    _dcgettext
.text:0000000000009769                 mov     rcx, rax
.text:000000000000976C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000009771                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000009778                 cmp     rcx, rax
.text:000000000000977B                 jz      loc_9B04
.text:0000000000009781
.text:0000000000009781 loc_9781:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000009781                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000009781                 xor     r15d, r15d
.text:0000000000009784                 test    ebx, ebx
.text:0000000000009786                 jz      loc_994D
.text:000000000000978C
.text:000000000000978C loc_978C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000978C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000978C                 test    ebx, ebx
.text:000000000000978E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000009793                 setnz   [rsp+0E8h+var_D9]
.text:0000000000009798                 xor     r12d, r12d
.text:000000000000979B                 mov     rdi, rbx        ; s
.text:000000000000979E                 call    _strlen
.text:00000000000097A3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000097A8                 mov     [rsp+0E8h+n], rax
.text:00000000000097AD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000097B2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000097B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000097C0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000097C5                 jmp     loc_8A63
.text:00000000000097CA ; ---------------------------------------------------------------------------
.text:00000000000097CA
.text:00000000000097CA loc_97CA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000097CA                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:00000000000097CA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000097CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000097D4                 xor     r12d, r12d
.text:00000000000097D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000097E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000097E5                 xor     r15d, r15d
.text:00000000000097E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000097ED                 mov     [rsp+0E8h+n], 0
.text:00000000000097F6                 mov     [rsp+0E8h+s2], 0
.text:00000000000097FF                 jmp     loc_8A63
.text:0000000000009804 ; ---------------------------------------------------------------------------
.text:0000000000009804
.text:0000000000009804 loc_9804:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009804                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:0000000000009804                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000009809                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000980E                 xor     r12d, r12d
.text:0000000000009811                 mov     [rsp+0E8h+var_98], 0
.text:000000000000981A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000981F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009824                 jmp     loc_8A43
.text:0000000000009829 ; ---------------------------------------------------------------------------
.text:0000000000009829
.text:0000000000009829 loc_9829:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000009829                 cmp     r13, r15
.text:000000000000982C                 jbe     short loc_9833
.text:000000000000982E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000009833
.text:0000000000009833 loc_9833:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000009833                 lea     rax, [rcx+2]
.text:0000000000009837                 cmp     r13, rax
.text:000000000000983A                 jbe     short loc_9842
.text:000000000000983C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000009842
.text:0000000000009842 loc_9842:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000009842                 mov     eax, r12d
.text:0000000000009845                 lea     r15, [rcx+3]
.text:0000000000009849                 xor     r12d, r12d
.text:000000000000984C                 mov     ebx, 30h ; '0'
.text:0000000000009851                 jmp     loc_8BB8
.text:0000000000009851 ; ---------------------------------------------------------------------------
.text:0000000000009856                 align 20h
.text:0000000000009860
.text:0000000000009860 loc_9860:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000009860                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009865                 mov     rbp, r11
.text:0000000000009868                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000986C                 jmp     loc_9519
.text:0000000000009871 ; ---------------------------------------------------------------------------
.text:0000000000009871
.text:0000000000009871 loc_9871:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000009871                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009876                 xor     r12d, r12d
.text:0000000000009879                 jmp     loc_9380
.text:000000000000987E ; ---------------------------------------------------------------------------
.text:000000000000987E
.text:000000000000987E loc_987E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000987E                 xor     r10d, r10d
.text:0000000000009881                 jmp     loc_943D
.text:0000000000009886 ; ---------------------------------------------------------------------------
.text:0000000000009886
.text:0000000000009886 loc_9886:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000009886                 mov     [rsp+0E8h+var_98], 0
.text:000000000000988F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009894                 xor     r12d, r12d
.text:0000000000009897                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000989C                 jmp     loc_967B
.text:00000000000098A1 ; ---------------------------------------------------------------------------
.text:00000000000098A1
.text:00000000000098A1 loc_98A1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000098A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000098A6                 mov     rsi, r14
.text:00000000000098A9                 mov     rcx, r13
.text:00000000000098AC                 mov     rax, rbx
.text:00000000000098AF                 mov     rdi, rbx
.text:00000000000098B2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000098B8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000098BD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000098C5                 cmp     rsi, r11
.text:00000000000098C8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000098CE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000098D6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000098DB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000098E0                 jnb     short loc_9908
.text:00000000000098E2                 cmp     byte ptr [rcx], 0
.text:00000000000098E5                 jnz     short loc_98F7
.text:00000000000098E7                 jmp     short loc_9908
.text:00000000000098E7 ; ---------------------------------------------------------------------------
.text:00000000000098E9                 align 10h
.text:00000000000098F0
.text:00000000000098F0 loc_98F0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000098F0                 cmp     byte ptr [r9+rax], 0
.text:00000000000098F5                 jz      short loc_9905
.text:00000000000098F7
.text:00000000000098F7 loc_98F7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000098F7                 add     rax, 1
.text:00000000000098FB                 lea     rdx, [rbp+rax+0]
.text:0000000000009900                 cmp     r11, rdx
.text:0000000000009903                 ja      short loc_98F0
.text:0000000000009905
.text:0000000000009905 loc_9905:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000009905                 mov     rdi, rax
.text:0000000000009908
.text:0000000000009908 loc_9908:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000009908                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000009908                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000990D                 xor     r12d, r12d
.text:0000000000009910                 jmp     loc_9376
.text:0000000000009915 ; ---------------------------------------------------------------------------
.text:0000000000009915
.text:0000000000009915 loc_9915:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000009915                 mov     rdi, rbx
.text:0000000000009918                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000991E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000009923                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000009929                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000009931                 xor     r12d, r12d
.text:0000000000009934                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000009939                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000993E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000009943                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009948                 jmp     loc_9376
.text:000000000000994D ; ---------------------------------------------------------------------------
.text:000000000000994D
.text:000000000000994D loc_994D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000994D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000009952                 movzx   eax, byte ptr [rdx]
.text:0000000000009955                 test    al, al
.text:0000000000009957                 jz      loc_978C
.text:000000000000995D                 nop     dword ptr [rax]
.text:0000000000009960
.text:0000000000009960 loc_9960:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000009960                 cmp     r13, r15
.text:0000000000009963                 jbe     short loc_9969
.text:0000000000009965                 mov     [r14+r15], al
.text:0000000000009969
.text:0000000000009969 loc_9969:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000009969                 add     r15, 1
.text:000000000000996D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000009972                 test    al, al
.text:0000000000009974                 jnz     short loc_9960
.text:0000000000009976                 jmp     loc_978C
.text:000000000000997B ; ---------------------------------------------------------------------------
.text:000000000000997B
.text:000000000000997B loc_997B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000997B                 mov     eax, edx
.text:000000000000997D                 jmp     loc_8ED7
.text:0000000000009982 ; ---------------------------------------------------------------------------
.text:0000000000009982
.text:0000000000009982 loc_9982:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000009982                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000009986                 cmp     bl, 3Eh ; '>'
.text:0000000000009989                 ja      loc_9200
.text:000000000000998F                 mov     rax, 7000A38200000000h
.text:0000000000009999                 bt      rax, rbx
.text:000000000000999D                 jnb     loc_9200
.text:00000000000099A3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000099A8                 jnz     loc_9B92
.text:00000000000099AE                 cmp     r13, r15
.text:00000000000099B1                 jbe     short loc_99B8
.text:00000000000099B3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000099B8
.text:00000000000099B8 loc_99B8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000099B8                 lea     rax, [r15+1]
.text:00000000000099BC                 cmp     r13, rax
.text:00000000000099BF                 jbe     short loc_99C7
.text:00000000000099C1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000099C7
.text:00000000000099C7 loc_99C7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000099C7                 lea     rax, [r15+2]
.text:00000000000099CB                 cmp     r13, rax
.text:00000000000099CE                 jbe     short loc_99D6
.text:00000000000099D0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000099D6
.text:00000000000099D6 loc_99D6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000099D6                 lea     rax, [r15+3]
.text:00000000000099DA                 cmp     r13, rax
.text:00000000000099DD                 jbe     short loc_99E5
.text:00000000000099DF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000099E5
.text:00000000000099E5 loc_99E5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000099E5                 add     r15, 4
.text:00000000000099E9                 xor     edx, edx
.text:00000000000099EB                 xor     r12d, r12d
.text:00000000000099EE                 xor     eax, eax
.text:00000000000099F0                 mov     rbp, rcx
.text:00000000000099F3                 jmp     loc_8BB8
.text:00000000000099F8 ; ---------------------------------------------------------------------------
.text:00000000000099F8
.text:00000000000099F8 loc_99F8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000099F8                                         ; DATA XREF: .rodata:jpt_8A21↓o
.text:00000000000099F8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000099FA                 jz      loc_9B88
.text:0000000000009A00                 lea     rax, aDir+0Ah   ; "'"
.text:0000000000009A07                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009A0C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009A11                 xor     r12d, r12d
.text:0000000000009A14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009A1D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009A22                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000009A27                 mov     [rsp+0E8h+n], 1
.text:0000000000009A30                 xor     r15d, r15d
.text:0000000000009A33                 mov     [rsp+0E8h+s2], rax
.text:0000000000009A38                 jmp     loc_8A63
.text:0000000000009A38 ; ---------------------------------------------------------------------------
.text:0000000000009A3D                 align 20h
.text:0000000000009A40
.text:0000000000009A40 loc_9A40:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000009A40                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000009A40                 mov     rbp, r11
.text:0000000000009A43                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000009A48                 jmp     loc_9519
.text:0000000000009A4D ; ---------------------------------------------------------------------------
.text:0000000000009A4D
.text:0000000000009A4D loc_9A4D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000009A4D                 lea     rax, aFieldUsed+0Ch ; "\""
.text:0000000000009A54                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009A59                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009A5E                 xor     r12d, r12d
.text:0000000000009A61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009A6A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009A6F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009A74                 mov     [rsp+0E8h+n], 1
.text:0000000000009A7D                 xor     r15d, r15d
.text:0000000000009A80                 mov     [rsp+0E8h+s2], rax
.text:0000000000009A85                 jmp     loc_8A63
.text:0000000000009A8A ; ---------------------------------------------------------------------------
.text:0000000000009A8A
.text:0000000000009A8A loc_9A8A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000009A8A                 mov     eax, edx
.text:0000000000009A8C
.text:0000000000009A8C loc_9A8C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000009A8C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000009A8C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000009A91                 test    rbx, rbx
.text:0000000000009A94                 jz      short loc_9AC2
.text:0000000000009A96                 test    al, al
.text:0000000000009A98                 jz      short loc_9AC2
.text:0000000000009A9A                 movzx   ecx, byte ptr [rbx]
.text:0000000000009A9D                 mov     rax, rbx
.text:0000000000009AA0                 test    cl, cl
.text:0000000000009AA2                 jz      short loc_9AC2
.text:0000000000009AA4                 mov     rdx, r15
.text:0000000000009AA7                 sub     rax, r15
.text:0000000000009AAA
.text:0000000000009AAA loc_9AAA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000009AAA                 cmp     r13, rdx
.text:0000000000009AAD                 jbe     short loc_9AB3
.text:0000000000009AAF                 mov     [r14+rdx], cl
.text:0000000000009AB3
.text:0000000000009AB3 loc_9AB3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000009AB3                 add     rdx, 1
.text:0000000000009AB7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000009ABB                 test    cl, cl
.text:0000000000009ABD                 jnz     short loc_9AAA
.text:0000000000009ABF                 mov     r15, rdx
.text:0000000000009AC2
.text:0000000000009AC2 loc_9AC2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000009AC2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000009AC2                 cmp     r13, r15
.text:0000000000009AC5                 jbe     loc_9569
.text:0000000000009ACB                 mov     byte ptr [r14+r15], 0
.text:0000000000009AD0                 jmp     loc_9569
.text:0000000000009AD5 ; ---------------------------------------------------------------------------
.text:0000000000009AD5
.text:0000000000009AD5 loc_9AD5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000009AD5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000009ADA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009ADF                 mov     rbp, r11
.text:0000000000009AE2                 setz    al
.text:0000000000009AE5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000009AE9                 jmp     loc_9519
.text:0000000000009AEE ; ---------------------------------------------------------------------------
.text:0000000000009AEE
.text:0000000000009AEE loc_9AEE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000009AEE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000009AF2                 mov     rdi, rcx
.text:0000000000009AF5                 call    gettext_quote
.text:0000000000009AFA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000009AFF                 jmp     loc_9756
.text:0000000000009B04 ; ---------------------------------------------------------------------------
.text:0000000000009B04
.text:0000000000009B04 loc_9B04:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000009B04                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000009B08                 mov     rdi, rcx
.text:0000000000009B0B                 call    gettext_quote
.text:0000000000009B10                 mov     [rsp+0E8h+var_88], rax
.text:0000000000009B15                 jmp     loc_9781
.text:0000000000009B1A ; ---------------------------------------------------------------------------
.text:0000000000009B1A
.text:0000000000009B1A loc_9B1A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000009B1A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009B1F                 mov     rbp, r11
.text:0000000000009B22                 mov     eax, edx
.text:0000000000009B24                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000009B28                 jmp     loc_9519
.text:0000000000009B2D ; ---------------------------------------------------------------------------
.text:0000000000009B2D
.text:0000000000009B2D loc_9B2D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000009B2D                 sub     rsp, 8
.text:0000000000009B31                 mov     r8d, 5
.text:0000000000009B37                 mov     rcx, r11
.text:0000000000009B3A                 push    [rsp+0F0h+var_88]
.text:0000000000009B3E                 push    [rsp+0F8h+var_80]
.text:0000000000009B42                 mov     rdi, r14
.text:0000000000009B45                 push    [rsp+100h+var_C8]
.text:0000000000009B49                 mov     r9d, [rsp+108h+var_70]
.text:0000000000009B51                 mov     rdx, [rsp+108h+s]
.text:0000000000009B56                 mov     rsi, [rsp+108h+var_98]
.text:0000000000009B5B                 call    quotearg_buffer_restyled
.text:0000000000009B60                 add     rsp, 20h
.text:0000000000009B64                 mov     r15, rax
.text:0000000000009B67                 jmp     loc_9569
.text:0000000000009B6C ; ---------------------------------------------------------------------------
.text:0000000000009B6C
.text:0000000000009B6C loc_9B6C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000009B6C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000009B71                 jmp     loc_9A8C
.text:0000000000009B76 ; ---------------------------------------------------------------------------
.text:0000000000009B76
.text:0000000000009B76 loc_9B76:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000009B76                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009B7E                 jmp     loc_9519
.text:0000000000009B83 ; ---------------------------------------------------------------------------
.text:0000000000009B83
.text:0000000000009B83 loc_9B83:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000009B83                 call    ___stack_chk_fail
.text:0000000000009B88 ; ---------------------------------------------------------------------------
.text:0000000000009B88
.text:0000000000009B88 loc_9B88:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000009B88                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000009B8D                 jmp     loc_9601
.text:0000000000009B92 ; ---------------------------------------------------------------------------
.text:0000000000009B92
.text:0000000000009B92 loc_9B92:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000009B92                 mov     rbp, r11
.text:0000000000009B95                 jmp     loc_9530
.text:0000000000009B9A ; ---------------------------------------------------------------------------
.text:0000000000009B9A
.text:0000000000009B9A loc_9B9A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000009B9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009B9F                 xor     eax, eax
.text:0000000000009BA1                 xor     r12d, r12d
.text:0000000000009BA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009BAD                 jmp     loc_9154
.text:0000000000009BB2 ; ---------------------------------------------------------------------------
.text:0000000000009BB2
.text:0000000000009BB2 loc_9BB2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000009BB2                 mov     rdx, r13
.text:0000000000009BB5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000009BBA                 jmp     loc_91B2
.text:0000000000009BBF ; ---------------------------------------------------------------------------
.text:0000000000009BBF
.text:0000000000009BBF def_8A21:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000009BBF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000009BBF ; } // starts at 8990
.text:0000000000009BBF quotearg_buffer_restyled endp
.text:0000000000009BBF
.text:0000000000009BBF ; ---------------------------------------------------------------------------
.text:0000000000009BC4                 align 10h
.text:0000000000009BD0
.text:0000000000009BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BD0
.text:0000000000009BD0
.text:0000000000009BD0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000009BD0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000009BD0
.text:0000000000009BD0 var_50          = qword ptr -50h
.text:0000000000009BD0 var_48          = qword ptr -48h
.text:0000000000009BD0 var_40          = dword ptr -40h
.text:0000000000009BD0 var_3C          = dword ptr -3Ch
.text:0000000000009BD0
.text:0000000000009BD0 ; __unwind {
.text:0000000000009BD0                 push    r15
.text:0000000000009BD2                 push    r14
.text:0000000000009BD4                 movsxd  r15, edi
.text:0000000000009BD7                 push    r13
.text:0000000000009BD9                 push    r12
.text:0000000000009BDB                 mov     r14, rdx
.text:0000000000009BDE                 push    rbp
.text:0000000000009BDF                 push    rbx
.text:0000000000009BE0                 mov     rbp, rcx
.text:0000000000009BE3                 sub     rsp, 28h
.text:0000000000009BE7                 mov     [rsp+58h+var_50], rsi
.text:0000000000009BEC                 call    ___errno_location
.text:0000000000009BF1                 mov     r13, rax
.text:0000000000009BF4                 mov     eax, [rax]
.text:0000000000009BF6                 test    r15d, r15d
.text:0000000000009BF9                 mov     rbx, cs:slotvec
.text:0000000000009C00                 mov     [rsp+58h+var_40], eax
.text:0000000000009C04                 js      loc_9D71
.text:0000000000009C0A                 cmp     cs:nslots, r15d
.text:0000000000009C11                 jg      short loc_9C75
.text:0000000000009C13                 cmp     r15d, 7FFFFFFFh
.text:0000000000009C1A                 jz      loc_9D76
.text:0000000000009C20                 lea     r12d, [r15+1]
.text:0000000000009C24                 lea     rax, slotvec0
.text:0000000000009C2B                 movsxd  rsi, r12d
.text:0000000000009C2E                 shl     rsi, 4
.text:0000000000009C32                 cmp     rbx, rax
.text:0000000000009C35                 jz      loc_9D50
.text:0000000000009C3B                 mov     rdi, rbx
.text:0000000000009C3E                 call    xrealloc
.text:0000000000009C43                 mov     rbx, rax
.text:0000000000009C46                 mov     cs:slotvec, rax
.text:0000000000009C4D
.text:0000000000009C4D loc_9C4D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000009C4D                 movsxd  rdi, cs:nslots
.text:0000000000009C54                 mov     edx, r12d
.text:0000000000009C57                 xor     esi, esi        ; c
.text:0000000000009C59                 sub     edx, edi
.text:0000000000009C5B                 shl     rdi, 4
.text:0000000000009C5F                 movsxd  rdx, edx
.text:0000000000009C62                 add     rdi, rbx        ; s
.text:0000000000009C65                 shl     rdx, 4          ; n
.text:0000000000009C69                 call    _memset
.text:0000000000009C6E                 mov     cs:nslots, r12d
.text:0000000000009C75
.text:0000000000009C75 loc_9C75:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000009C75                 mov     eax, [rbp+4]
.text:0000000000009C78                 shl     r15, 4
.text:0000000000009C7C                 sub     rsp, 8
.text:0000000000009C80                 add     rbx, r15
.text:0000000000009C83                 lea     r15, [rbp+8]
.text:0000000000009C87                 mov     r8d, [rbp+0]
.text:0000000000009C8B                 mov     r11, [rbx]
.text:0000000000009C8E                 mov     r12, [rbx+8]
.text:0000000000009C92                 mov     rcx, r14
.text:0000000000009C95                 or      eax, 1
.text:0000000000009C98                 mov     [rsp+60h+var_3C], eax
.text:0000000000009C9C                 push    qword ptr [rbp+30h]
.text:0000000000009C9F                 mov     r9d, eax
.text:0000000000009CA2                 push    qword ptr [rbp+28h]
.text:0000000000009CA5                 push    r15
.text:0000000000009CA7                 mov     rsi, r11
.text:0000000000009CAA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000009CAF                 mov     rdi, r12
.text:0000000000009CB2                 mov     [rsp+78h+var_48], r11
.text:0000000000009CB7                 call    quotearg_buffer_restyled
.text:0000000000009CBC                 add     rsp, 20h
.text:0000000000009CC0                 mov     r11, [rsp+58h+var_48]
.text:0000000000009CC5                 cmp     r11, rax
.text:0000000000009CC8                 ja      short loc_9D31
.text:0000000000009CCA                 lea     rsi, [rax+1]
.text:0000000000009CCE                 lea     rax, slot0
.text:0000000000009CD5                 cmp     r12, rax
.text:0000000000009CD8                 mov     [rbx], rsi
.text:0000000000009CDB                 jz      short loc_9CEF
.text:0000000000009CDD                 mov     rdi, r12        ; ptr
.text:0000000000009CE0                 mov     [rsp+58h+var_48], rsi
.text:0000000000009CE5                 call    _free
.text:0000000000009CEA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000009CEF
.text:0000000000009CEF loc_9CEF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000009CEF                 mov     rdi, rsi
.text:0000000000009CF2                 mov     [rsp+58h+var_48], rsi
.text:0000000000009CF7                 call    xmalloc
.text:0000000000009CFC                 sub     rsp, 8
.text:0000000000009D00                 mov     [rbx+8], rax
.text:0000000000009D04                 mov     r8d, [rbp+0]
.text:0000000000009D08                 push    qword ptr [rbp+30h]
.text:0000000000009D0B                 push    qword ptr [rbp+28h]
.text:0000000000009D0E                 mov     rcx, r14
.text:0000000000009D11                 push    r15
.text:0000000000009D13                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000009D18                 mov     rdi, rax
.text:0000000000009D1B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000009D20                 mov     rsi, [rsp+78h+var_48]
.text:0000000000009D25                 mov     r12, rax
.text:0000000000009D28                 call    quotearg_buffer_restyled
.text:0000000000009D2D                 add     rsp, 20h
.text:0000000000009D31
.text:0000000000009D31 loc_9D31:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000009D31                 mov     eax, [rsp+58h+var_40]
.text:0000000000009D35                 mov     [r13+0], eax
.text:0000000000009D39                 add     rsp, 28h
.text:0000000000009D3D                 mov     rax, r12
.text:0000000000009D40                 pop     rbx
.text:0000000000009D41                 pop     rbp
.text:0000000000009D42                 pop     r12
.text:0000000000009D44                 pop     r13
.text:0000000000009D46                 pop     r14
.text:0000000000009D48                 pop     r15
.text:0000000000009D4A                 retn
.text:0000000000009D4A ; ---------------------------------------------------------------------------
.text:0000000000009D4B                 align 10h
.text:0000000000009D50
.text:0000000000009D50 loc_9D50:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000009D50                 xor     edi, edi
.text:0000000000009D52                 call    xrealloc
.text:0000000000009D57                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000009D5F                 mov     rbx, rax
.text:0000000000009D62                 mov     cs:slotvec, rax
.text:0000000000009D69                 movups  xmmword ptr [rax], xmm0
.text:0000000000009D6C                 jmp     loc_9C4D
.text:0000000000009D71 ; ---------------------------------------------------------------------------
.text:0000000000009D71
.text:0000000000009D71 loc_9D71:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000009D71                 call    _abort
.text:0000000000009D76 ; ---------------------------------------------------------------------------
.text:0000000000009D76
.text:0000000000009D76 loc_9D76:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000009D76                 call    xalloc_die
.text:0000000000009D76 ; } // starts at 9BD0
.text:0000000000009D76 quotearg_n_options endp
.text:0000000000009D76
.text:0000000000009D76 ; ---------------------------------------------------------------------------
.text:0000000000009D7B                 align 20h
.text:0000000000009D80
.text:0000000000009D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D80
.text:0000000000009D80 ; Attributes: info_from_lumina
.text:0000000000009D80
.text:0000000000009D80 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000009D80                 public clone_quoting_options
.text:0000000000009D80 clone_quoting_options proc near
.text:0000000000009D80 ; __unwind {
.text:0000000000009D80                 push    r12
.text:0000000000009D82                 push    rbp
.text:0000000000009D83                 push    rbx
.text:0000000000009D84                 mov     rbx, rdi
.text:0000000000009D87                 call    ___errno_location
.text:0000000000009D8C                 mov     r12d, [rax]
.text:0000000000009D8F                 mov     rbp, rax
.text:0000000000009D92                 lea     rax, default_quoting_options
.text:0000000000009D99                 test    rbx, rbx
.text:0000000000009D9C                 mov     esi, 38h ; '8'  ; n
.text:0000000000009DA1                 cmovz   rbx, rax
.text:0000000000009DA5                 mov     rdi, rbx        ; src
.text:0000000000009DA8                 call    xmemdup
.text:0000000000009DAD                 mov     [rbp+0], r12d
.text:0000000000009DB1                 pop     rbx
.text:0000000000009DB2                 pop     rbp
.text:0000000000009DB3                 pop     r12
.text:0000000000009DB5                 retn
.text:0000000000009DB5 ; } // starts at 9D80
.text:0000000000009DB5 clone_quoting_options endp
.text:0000000000009DB5
.text:0000000000009DB5 ; ---------------------------------------------------------------------------
.text:0000000000009DB6                 align 20h
.text:0000000000009DC0
.text:0000000000009DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DC0
.text:0000000000009DC0
.text:0000000000009DC0                 public get_quoting_style
.text:0000000000009DC0 get_quoting_style proc near
.text:0000000000009DC0 ; __unwind {
.text:0000000000009DC0                 lea     rax, default_quoting_options
.text:0000000000009DC7                 test    rdi, rdi
.text:0000000000009DCA                 cmovz   rdi, rax
.text:0000000000009DCE                 mov     eax, [rdi]
.text:0000000000009DD0                 retn
.text:0000000000009DD0 ; } // starts at 9DC0
.text:0000000000009DD0 get_quoting_style endp
.text:0000000000009DD0
.text:0000000000009DD0 ; ---------------------------------------------------------------------------
.text:0000000000009DD1                 align 20h
.text:0000000000009DE0
.text:0000000000009DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DE0
.text:0000000000009DE0
.text:0000000000009DE0                 public set_quoting_style
.text:0000000000009DE0 set_quoting_style proc near
.text:0000000000009DE0 ; __unwind {
.text:0000000000009DE0                 lea     rax, default_quoting_options
.text:0000000000009DE7                 test    rdi, rdi
.text:0000000000009DEA                 cmovz   rdi, rax
.text:0000000000009DEE                 mov     [rdi], esi
.text:0000000000009DF0                 retn
.text:0000000000009DF0 ; } // starts at 9DE0
.text:0000000000009DF0 set_quoting_style endp
.text:0000000000009DF0
.text:0000000000009DF0 ; ---------------------------------------------------------------------------
.text:0000000000009DF1                 align 20h
.text:0000000000009E00
.text:0000000000009E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E00
.text:0000000000009E00 ; Attributes: info_from_lumina
.text:0000000000009E00
.text:0000000000009E00 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000009E00                 public set_char_quoting
.text:0000000000009E00 set_char_quoting proc near
.text:0000000000009E00 ; __unwind {
.text:0000000000009E00                 lea     rax, default_quoting_options
.text:0000000000009E07                 test    rdi, rdi
.text:0000000000009E0A                 mov     ecx, esi
.text:0000000000009E0C                 cmovz   rdi, rax
.text:0000000000009E10                 mov     eax, esi
.text:0000000000009E12                 and     ecx, 1Fh
.text:0000000000009E15                 shr     al, 5
.text:0000000000009E18                 movzx   eax, al
.text:0000000000009E1B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000009E20                 mov     esi, [rdi]
.text:0000000000009E22                 mov     eax, esi
.text:0000000000009E24                 shr     eax, cl
.text:0000000000009E26                 xor     edx, eax
.text:0000000000009E28                 and     eax, 1
.text:0000000000009E2B                 and     edx, 1
.text:0000000000009E2E                 shl     edx, cl
.text:0000000000009E30                 xor     edx, esi
.text:0000000000009E32                 mov     [rdi], edx
.text:0000000000009E34                 retn
.text:0000000000009E34 ; } // starts at 9E00
.text:0000000000009E34 set_char_quoting endp
.text:0000000000009E34
.text:0000000000009E34 ; ---------------------------------------------------------------------------
.text:0000000000009E35                 align 20h
.text:0000000000009E40
.text:0000000000009E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E40
.text:0000000000009E40
.text:0000000000009E40                 public set_quoting_flags
.text:0000000000009E40 set_quoting_flags proc near
.text:0000000000009E40 ; __unwind {
.text:0000000000009E40                 lea     rax, default_quoting_options
.text:0000000000009E47                 test    rdi, rdi
.text:0000000000009E4A                 cmovz   rdi, rax
.text:0000000000009E4E                 mov     eax, [rdi+4]
.text:0000000000009E51                 mov     [rdi+4], esi
.text:0000000000009E54                 retn
.text:0000000000009E54 ; } // starts at 9E40
.text:0000000000009E54 set_quoting_flags endp
.text:0000000000009E54
.text:0000000000009E54 ; ---------------------------------------------------------------------------
.text:0000000000009E55                 align 20h
.text:0000000000009E60
.text:0000000000009E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E60
.text:0000000000009E60 ; Attributes: info_from_lumina
.text:0000000000009E60
.text:0000000000009E60 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000009E60                 public set_custom_quoting
.text:0000000000009E60 set_custom_quoting proc near
.text:0000000000009E60 ; __unwind {
.text:0000000000009E60                 lea     rax, default_quoting_options
.text:0000000000009E67                 test    rdi, rdi
.text:0000000000009E6A                 cmovz   rdi, rax
.text:0000000000009E6E                 test    rsi, rsi
.text:0000000000009E71                 mov     dword ptr [rdi], 0Ah
.text:0000000000009E77                 jz      short loc_9E87
.text:0000000000009E79                 test    rdx, rdx
.text:0000000000009E7C                 jz      short loc_9E87
.text:0000000000009E7E                 mov     [rdi+28h], rsi
.text:0000000000009E82                 mov     [rdi+30h], rdx
.text:0000000000009E86                 retn
.text:0000000000009E87 ; ---------------------------------------------------------------------------
.text:0000000000009E87
.text:0000000000009E87 loc_9E87:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000009E87                                         ; set_custom_quoting+1C↑j
.text:0000000000009E87                 sub     rsp, 8
.text:0000000000009E8B                 call    _abort
.text:0000000000009E8B ; } // starts at 9E60
.text:0000000000009E8B set_custom_quoting endp
.text:0000000000009E8B
.text:0000000000009E90
.text:0000000000009E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E90
.text:0000000000009E90 ; Attributes: info_from_lumina
.text:0000000000009E90
.text:0000000000009E90 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000009E90                 public quotearg_buffer
.text:0000000000009E90 quotearg_buffer proc near
.text:0000000000009E90
.text:0000000000009E90 var_40          = qword ptr -40h
.text:0000000000009E90
.text:0000000000009E90 ; __unwind {
.text:0000000000009E90                 push    r15
.text:0000000000009E92                 push    r14
.text:0000000000009E94                 lea     rax, default_quoting_options
.text:0000000000009E9B                 push    r13
.text:0000000000009E9D                 push    r12
.text:0000000000009E9F                 mov     r13, rdi
.text:0000000000009EA2                 push    rbp
.text:0000000000009EA3                 push    rbx
.text:0000000000009EA4                 mov     rbx, r8
.text:0000000000009EA7                 mov     r14, rsi
.text:0000000000009EAA                 mov     r15, rdx
.text:0000000000009EAD                 sub     rsp, 18h
.text:0000000000009EB1                 test    r8, r8
.text:0000000000009EB4                 cmovz   rbx, rax
.text:0000000000009EB8                 mov     [rsp+48h+var_40], rcx
.text:0000000000009EBD                 call    ___errno_location
.text:0000000000009EC2                 mov     r12d, [rax]
.text:0000000000009EC5                 mov     rbp, rax
.text:0000000000009EC8                 lea     rax, [rbx+8]
.text:0000000000009ECC                 sub     rsp, 8
.text:0000000000009ED0                 mov     r9d, [rbx+4]
.text:0000000000009ED4                 push    qword ptr [rbx+30h]
.text:0000000000009ED7                 mov     r8d, [rbx]
.text:0000000000009EDA                 push    qword ptr [rbx+28h]
.text:0000000000009EDD                 mov     rdx, r15
.text:0000000000009EE0                 push    rax
.text:0000000000009EE1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000009EE6                 mov     rsi, r14
.text:0000000000009EE9                 mov     rdi, r13
.text:0000000000009EEC                 call    quotearg_buffer_restyled
.text:0000000000009EF1                 mov     [rbp+0], r12d
.text:0000000000009EF5                 add     rsp, 38h
.text:0000000000009EF9                 pop     rbx
.text:0000000000009EFA                 pop     rbp
.text:0000000000009EFB                 pop     r12
.text:0000000000009EFD                 pop     r13
.text:0000000000009EFF                 pop     r14
.text:0000000000009F01                 pop     r15
.text:0000000000009F03                 retn
.text:0000000000009F03 ; } // starts at 9E90
.text:0000000000009F03 quotearg_buffer endp
.text:0000000000009F03
.text:0000000000009F03 ; ---------------------------------------------------------------------------
.text:0000000000009F04                 align 10h
.text:0000000000009F10
.text:0000000000009F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F10
.text:0000000000009F10 ; Attributes: info_from_lumina
.text:0000000000009F10
.text:0000000000009F10 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000009F10                 public quotearg_alloc_mem
.text:0000000000009F10 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000009F10
.text:0000000000009F10 var_5C          = dword ptr -5Ch
.text:0000000000009F10 var_58          = qword ptr -58h
.text:0000000000009F10 var_50          = qword ptr -50h
.text:0000000000009F10 var_48          = qword ptr -48h
.text:0000000000009F10 var_40          = qword ptr -40h
.text:0000000000009F10
.text:0000000000009F10 ; __unwind {
.text:0000000000009F10                 push    r15
.text:0000000000009F12                 push    r14
.text:0000000000009F14                 lea     rax, default_quoting_options
.text:0000000000009F1B                 push    r13
.text:0000000000009F1D                 push    r12
.text:0000000000009F1F                 mov     r12, rdx
.text:0000000000009F22                 push    rbp
.text:0000000000009F23                 push    rbx
.text:0000000000009F24                 mov     rbx, rcx
.text:0000000000009F27                 mov     r14, rdi
.text:0000000000009F2A                 mov     r15, rsi
.text:0000000000009F2D                 sub     rsp, 38h
.text:0000000000009F31                 test    rcx, rcx
.text:0000000000009F34                 cmovz   rbx, rax
.text:0000000000009F38                 xor     ebp, ebp
.text:0000000000009F3A                 call    ___errno_location
.text:0000000000009F3F                 test    r12, r12
.text:0000000000009F42                 mov     r13, rax
.text:0000000000009F45                 mov     eax, [rax]
.text:0000000000009F47                 setz    bpl
.text:0000000000009F4B                 or      ebp, [rbx+4]
.text:0000000000009F4E                 lea     r10, [rbx+8]
.text:0000000000009F52                 sub     rsp, 8
.text:0000000000009F56                 mov     r8d, [rbx]
.text:0000000000009F59                 mov     rcx, r15
.text:0000000000009F5C                 mov     [rsp+70h+var_5C], eax
.text:0000000000009F60                 push    qword ptr [rbx+30h]
.text:0000000000009F63                 mov     rdx, r14
.text:0000000000009F66                 push    qword ptr [rbx+28h]
.text:0000000000009F69                 push    r10
.text:0000000000009F6B                 xor     esi, esi
.text:0000000000009F6D                 mov     r9d, ebp
.text:0000000000009F70                 xor     edi, edi
.text:0000000000009F72                 mov     [rsp+88h+var_48], r10
.text:0000000000009F77                 call    quotearg_buffer_restyled
.text:0000000000009F7C                 lea     rsi, [rax+1]
.text:0000000000009F80                 mov     [rsp+88h+var_40], rax
.text:0000000000009F85                 add     rsp, 20h
.text:0000000000009F89                 mov     rdi, rsi
.text:0000000000009F8C                 mov     [rsp+68h+var_50], rsi
.text:0000000000009F91                 call    xmalloc
.text:0000000000009F96                 mov     [rsp+68h+var_58], rax
.text:0000000000009F9B                 sub     rsp, 8
.text:0000000000009F9F                 push    qword ptr [rbx+30h]
.text:0000000000009FA2                 push    qword ptr [rbx+28h]
.text:0000000000009FA5                 mov     r10, [rsp+80h+var_48]
.text:0000000000009FAA                 mov     r9d, ebp
.text:0000000000009FAD                 mov     r8d, [rbx]
.text:0000000000009FB0                 mov     rcx, r15
.text:0000000000009FB3                 mov     rdx, r14
.text:0000000000009FB6                 mov     rdi, rax
.text:0000000000009FB9                 push    r10
.text:0000000000009FBB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000009FC0                 call    quotearg_buffer_restyled
.text:0000000000009FC5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000009FC9                 add     rsp, 20h
.text:0000000000009FCD                 test    r12, r12
.text:0000000000009FD0                 mov     [r13+0], eax
.text:0000000000009FD4                 jz      short loc_9FDF
.text:0000000000009FD6                 mov     r11, [rsp+68h+var_40]
.text:0000000000009FDB                 mov     [r12], r11
.text:0000000000009FDF
.text:0000000000009FDF loc_9FDF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000009FDF                 mov     rax, [rsp+68h+var_58]
.text:0000000000009FE4                 add     rsp, 38h
.text:0000000000009FE8                 pop     rbx
.text:0000000000009FE9                 pop     rbp
.text:0000000000009FEA                 pop     r12
.text:0000000000009FEC                 pop     r13
.text:0000000000009FEE                 pop     r14
.text:0000000000009FF0                 pop     r15
.text:0000000000009FF2                 retn
.text:0000000000009FF2 ; } // starts at 9F10
.text:0000000000009FF2 quotearg_alloc_mem endp
.text:0000000000009FF2
.text:0000000000009FF2 ; ---------------------------------------------------------------------------
.text:0000000000009FF3                 align 20h
.text:000000000000A000
.text:000000000000A000 ; =============== S U B R O U T I N E =======================================
.text:000000000000A000
.text:000000000000A000
.text:000000000000A000                 public quotearg_alloc
.text:000000000000A000 quotearg_alloc  proc near
.text:000000000000A000 ; __unwind {
.text:000000000000A000                 mov     rcx, rdx
.text:000000000000A003                 xor     edx, edx
.text:000000000000A005                 jmp     quotearg_alloc_mem
.text:000000000000A005 ; } // starts at A000
.text:000000000000A005 quotearg_alloc  endp
.text:000000000000A005
.text:000000000000A005 ; ---------------------------------------------------------------------------
.text:000000000000A00A                 align 10h
.text:000000000000A010
.text:000000000000A010 ; =============== S U B R O U T I N E =======================================
.text:000000000000A010
.text:000000000000A010 ; Attributes: info_from_lumina
.text:000000000000A010
.text:000000000000A010 ; void __cdecl quotearg_free()
.text:000000000000A010                 public quotearg_free
.text:000000000000A010 quotearg_free   proc near
.text:000000000000A010 ; __unwind {
.text:000000000000A010                 mov     eax, cs:nslots
.text:000000000000A016                 push    r12
.text:000000000000A018                 mov     r12, cs:slotvec
.text:000000000000A01F                 push    rbp
.text:000000000000A020                 push    rbx
.text:000000000000A021                 cmp     eax, 1
.text:000000000000A024                 jle     short loc_A051
.text:000000000000A026                 sub     eax, 2
.text:000000000000A029                 lea     rbx, [r12+18h]
.text:000000000000A02E                 shl     rax, 4
.text:000000000000A032                 lea     rbp, [r12+rax+28h]
.text:000000000000A037                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A040
.text:000000000000A040 loc_A040:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000A040                 mov     rdi, [rbx]      ; ptr
.text:000000000000A043                 add     rbx, 10h
.text:000000000000A047                 call    _free
.text:000000000000A04C                 cmp     rbx, rbp
.text:000000000000A04F                 jnz     short loc_A040
.text:000000000000A051
.text:000000000000A051 loc_A051:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000A051                 mov     rdi, [r12+8]    ; ptr
.text:000000000000A056                 lea     rbx, slot0
.text:000000000000A05D                 cmp     rdi, rbx
.text:000000000000A060                 jz      short loc_A079
.text:000000000000A062                 call    _free
.text:000000000000A067                 mov     cs:slotvec0, 100h
.text:000000000000A072                 mov     cs:off_2142D8, rbx
.text:000000000000A079
.text:000000000000A079 loc_A079:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000A079                 lea     rbx, slotvec0
.text:000000000000A080                 cmp     r12, rbx
.text:000000000000A083                 jz      short loc_A094
.text:000000000000A085                 mov     rdi, r12        ; ptr
.text:000000000000A088                 call    _free
.text:000000000000A08D                 mov     cs:slotvec, rbx
.text:000000000000A094
.text:000000000000A094 loc_A094:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000A094                 pop     rbx
.text:000000000000A095                 mov     cs:nslots, 1
.text:000000000000A09F                 pop     rbp
.text:000000000000A0A0                 pop     r12
.text:000000000000A0A2                 retn
.text:000000000000A0A2 ; } // starts at A010
.text:000000000000A0A2 quotearg_free   endp
.text:000000000000A0A2
.text:000000000000A0A2 ; ---------------------------------------------------------------------------
.text:000000000000A0A3                 align 10h
.text:000000000000A0B0
.text:000000000000A0B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0B0
.text:000000000000A0B0
.text:000000000000A0B0                 public quotearg_n
.text:000000000000A0B0 quotearg_n      proc near
.text:000000000000A0B0 ; __unwind {
.text:000000000000A0B0                 lea     rcx, default_quoting_options
.text:000000000000A0B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A0BE                 jmp     quotearg_n_options
.text:000000000000A0BE ; } // starts at A0B0
.text:000000000000A0BE quotearg_n      endp
.text:000000000000A0BE
.text:000000000000A0BE ; ---------------------------------------------------------------------------
.text:000000000000A0C3                 align 10h
.text:000000000000A0D0
.text:000000000000A0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0D0
.text:000000000000A0D0
.text:000000000000A0D0                 public quotearg_n_mem
.text:000000000000A0D0 quotearg_n_mem  proc near
.text:000000000000A0D0 ; __unwind {
.text:000000000000A0D0                 lea     rcx, default_quoting_options
.text:000000000000A0D7                 jmp     quotearg_n_options
.text:000000000000A0D7 ; } // starts at A0D0
.text:000000000000A0D7 quotearg_n_mem  endp
.text:000000000000A0D7
.text:000000000000A0D7 ; ---------------------------------------------------------------------------
.text:000000000000A0DC                 align 20h
.text:000000000000A0E0
.text:000000000000A0E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0E0
.text:000000000000A0E0
.text:000000000000A0E0                 public quotearg
.text:000000000000A0E0 quotearg        proc near
.text:000000000000A0E0 ; __unwind {
.text:000000000000A0E0                 lea     rcx, default_quoting_options
.text:000000000000A0E7                 mov     rsi, rdi
.text:000000000000A0EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A0F1                 xor     edi, edi
.text:000000000000A0F3                 jmp     quotearg_n_options
.text:000000000000A0F3 ; } // starts at A0E0
.text:000000000000A0F3 quotearg        endp
.text:000000000000A0F3
.text:000000000000A0F3 ; ---------------------------------------------------------------------------
.text:000000000000A0F8                 align 20h
.text:000000000000A100
.text:000000000000A100 ; =============== S U B R O U T I N E =======================================
.text:000000000000A100
.text:000000000000A100
.text:000000000000A100                 public quotearg_mem
.text:000000000000A100 quotearg_mem    proc near
.text:000000000000A100 ; __unwind {
.text:000000000000A100                 lea     rcx, default_quoting_options
.text:000000000000A107                 mov     rdx, rsi
.text:000000000000A10A                 mov     rsi, rdi
.text:000000000000A10D                 xor     edi, edi
.text:000000000000A10F                 jmp     quotearg_n_options
.text:000000000000A10F ; } // starts at A100
.text:000000000000A10F quotearg_mem    endp
.text:000000000000A10F
.text:000000000000A10F ; ---------------------------------------------------------------------------
.text:000000000000A114                 align 20h
.text:000000000000A120
.text:000000000000A120 ; =============== S U B R O U T I N E =======================================
.text:000000000000A120
.text:000000000000A120 ; Attributes: info_from_lumina
.text:000000000000A120
.text:000000000000A120 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000A120                 public quotearg_n_style
.text:000000000000A120 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:000000000000A120                                         ; argmatch_invalid+40↓p
.text:000000000000A120
.text:000000000000A120 var_48          = dword ptr -48h
.text:000000000000A120 var_44          = qword ptr -44h
.text:000000000000A120 var_3C          = qword ptr -3Ch
.text:000000000000A120 var_34          = qword ptr -34h
.text:000000000000A120 var_2C          = qword ptr -2Ch
.text:000000000000A120 var_24          = qword ptr -24h
.text:000000000000A120 var_1C          = qword ptr -1Ch
.text:000000000000A120 var_14          = dword ptr -14h
.text:000000000000A120 var_10          = qword ptr -10h
.text:000000000000A120
.text:000000000000A120 ; __unwind {
.text:000000000000A120                 sub     rsp, 48h
.text:000000000000A124                 mov     rax, rdx
.text:000000000000A127                 mov     rdx, fs:28h
.text:000000000000A130                 mov     [rsp+48h+var_10], rdx
.text:000000000000A135                 xor     edx, edx
.text:000000000000A137                 cmp     esi, 0Ah
.text:000000000000A13A                 jz      short loc_A1A4
.text:000000000000A13C                 mov     [rsp+48h+var_48], esi
.text:000000000000A13F                 mov     rcx, rsp
.text:000000000000A142                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A149                 mov     rsi, rax
.text:000000000000A14C                 mov     [rsp+48h+var_44], 0
.text:000000000000A155                 mov     [rsp+48h+var_3C], 0
.text:000000000000A15E                 mov     [rsp+48h+var_34], 0
.text:000000000000A167                 mov     [rsp+48h+var_2C], 0
.text:000000000000A170                 mov     [rsp+48h+var_24], 0
.text:000000000000A179                 mov     [rsp+48h+var_1C], 0
.text:000000000000A182                 mov     [rsp+48h+var_14], 0
.text:000000000000A18A                 call    quotearg_n_options
.text:000000000000A18F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000A194                 xor     rcx, fs:28h
.text:000000000000A19D                 jnz     short loc_A1A9
.text:000000000000A19F                 add     rsp, 48h
.text:000000000000A1A3                 retn
.text:000000000000A1A4 ; ---------------------------------------------------------------------------
.text:000000000000A1A4
.text:000000000000A1A4 loc_A1A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000A1A4                 call    _abort
.text:000000000000A1A9 ; ---------------------------------------------------------------------------
.text:000000000000A1A9
.text:000000000000A1A9 loc_A1A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000A1A9                 call    ___stack_chk_fail
.text:000000000000A1A9 ; } // starts at A120
.text:000000000000A1A9 quotearg_n_style endp
.text:000000000000A1A9
.text:000000000000A1A9 ; ---------------------------------------------------------------------------
.text:000000000000A1AE                 align 10h
.text:000000000000A1B0
.text:000000000000A1B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A1B0
.text:000000000000A1B0 ; Attributes: info_from_lumina
.text:000000000000A1B0
.text:000000000000A1B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000A1B0                 public quotearg_n_style_mem
.text:000000000000A1B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000A1B0
.text:000000000000A1B0 var_48          = dword ptr -48h
.text:000000000000A1B0 var_44          = qword ptr -44h
.text:000000000000A1B0 var_3C          = qword ptr -3Ch
.text:000000000000A1B0 var_34          = qword ptr -34h
.text:000000000000A1B0 var_2C          = qword ptr -2Ch
.text:000000000000A1B0 var_24          = qword ptr -24h
.text:000000000000A1B0 var_1C          = qword ptr -1Ch
.text:000000000000A1B0 var_14          = dword ptr -14h
.text:000000000000A1B0 var_10          = qword ptr -10h
.text:000000000000A1B0
.text:000000000000A1B0 ; __unwind {
.text:000000000000A1B0                 sub     rsp, 48h
.text:000000000000A1B4                 mov     rax, rdx
.text:000000000000A1B7                 mov     rdx, rcx
.text:000000000000A1BA                 mov     rcx, fs:28h
.text:000000000000A1C3                 mov     [rsp+48h+var_10], rcx
.text:000000000000A1C8                 xor     ecx, ecx
.text:000000000000A1CA                 cmp     esi, 0Ah
.text:000000000000A1CD                 jz      short loc_A230
.text:000000000000A1CF                 mov     [rsp+48h+var_48], esi
.text:000000000000A1D2                 mov     rcx, rsp
.text:000000000000A1D5                 mov     rsi, rax
.text:000000000000A1D8                 mov     [rsp+48h+var_44], 0
.text:000000000000A1E1                 mov     [rsp+48h+var_3C], 0
.text:000000000000A1EA                 mov     [rsp+48h+var_34], 0
.text:000000000000A1F3                 mov     [rsp+48h+var_2C], 0
.text:000000000000A1FC                 mov     [rsp+48h+var_24], 0
.text:000000000000A205                 mov     [rsp+48h+var_1C], 0
.text:000000000000A20E                 mov     [rsp+48h+var_14], 0
.text:000000000000A216                 call    quotearg_n_options
.text:000000000000A21B                 mov     rdx, [rsp+48h+var_10]
.text:000000000000A220                 xor     rdx, fs:28h
.text:000000000000A229                 jnz     short loc_A235
.text:000000000000A22B                 add     rsp, 48h
.text:000000000000A22F                 retn
.text:000000000000A230 ; ---------------------------------------------------------------------------
.text:000000000000A230
.text:000000000000A230 loc_A230:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000A230                 call    _abort
.text:000000000000A235 ; ---------------------------------------------------------------------------
.text:000000000000A235
.text:000000000000A235 loc_A235:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000A235                 call    ___stack_chk_fail
.text:000000000000A235 ; } // starts at A1B0
.text:000000000000A235 quotearg_n_style_mem endp
.text:000000000000A235
.text:000000000000A235 ; ---------------------------------------------------------------------------
.text:000000000000A23A                 align 20h
.text:000000000000A240
.text:000000000000A240 ; =============== S U B R O U T I N E =======================================
.text:000000000000A240
.text:000000000000A240
.text:000000000000A240                 public quotearg_style
.text:000000000000A240 quotearg_style  proc near               ; CODE XREF: main+1400↑p
.text:000000000000A240                                         ; find_mount_point+1B7↑p ...
.text:000000000000A240 ; __unwind {
.text:000000000000A240                 mov     rdx, rsi
.text:000000000000A243                 mov     esi, edi
.text:000000000000A245                 xor     edi, edi
.text:000000000000A247                 jmp     quotearg_n_style
.text:000000000000A247 ; } // starts at A240
.text:000000000000A247 quotearg_style  endp
.text:000000000000A247
.text:000000000000A247 ; ---------------------------------------------------------------------------
.text:000000000000A24C                 align 10h
.text:000000000000A250
.text:000000000000A250 ; =============== S U B R O U T I N E =======================================
.text:000000000000A250
.text:000000000000A250
.text:000000000000A250                 public quotearg_style_mem
.text:000000000000A250 quotearg_style_mem proc near
.text:000000000000A250 ; __unwind {
.text:000000000000A250                 mov     rcx, rdx
.text:000000000000A253                 mov     rdx, rsi
.text:000000000000A256                 mov     esi, edi
.text:000000000000A258                 xor     edi, edi
.text:000000000000A25A                 jmp     quotearg_n_style_mem
.text:000000000000A25A ; } // starts at A250
.text:000000000000A25A quotearg_style_mem endp
.text:000000000000A25A
.text:000000000000A25A ; ---------------------------------------------------------------------------
.text:000000000000A25F                 align 20h
.text:000000000000A260
.text:000000000000A260 ; =============== S U B R O U T I N E =======================================
.text:000000000000A260
.text:000000000000A260 ; Attributes: info_from_lumina
.text:000000000000A260
.text:000000000000A260 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000A260                 public quotearg_char_mem
.text:000000000000A260 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000A260                                         ; quotearg_colon+C↓j ...
.text:000000000000A260
.text:000000000000A260 var_48          = xmmword ptr -48h
.text:000000000000A260 var_38          = xmmword ptr -38h
.text:000000000000A260 var_28          = xmmword ptr -28h
.text:000000000000A260 var_18          = qword ptr -18h
.text:000000000000A260 var_10          = qword ptr -10h
.text:000000000000A260
.text:000000000000A260 ; __unwind {
.text:000000000000A260                 sub     rsp, 48h
.text:000000000000A264                 mov     ecx, edx
.text:000000000000A266                 mov     rax, fs:28h
.text:000000000000A26F                 mov     [rsp+48h+var_10], rax
.text:000000000000A274                 xor     eax, eax
.text:000000000000A276                 mov     rax, cs:qword_214570
.text:000000000000A27D                 mov     r8, rsp
.text:000000000000A280                 and     ecx, 1Fh
.text:000000000000A283                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000A28B                 mov     [rsp+48h+var_18], rax
.text:000000000000A290                 mov     eax, edx
.text:000000000000A292                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000A296                 shr     al, 5
.text:000000000000A299                 movzx   eax, al
.text:000000000000A29C                 lea     r9, [r8+rax*4+8]
.text:000000000000A2A1                 movdqa  xmm0, cs:xmmword_214550
.text:000000000000A2A9                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000A2AE                 movdqa  xmm0, cs:xmmword_214560
.text:000000000000A2B6                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000A2BB                 mov     edx, [r9]
.text:000000000000A2BE                 mov     eax, edx
.text:000000000000A2C0                 shr     eax, cl
.text:000000000000A2C2                 not     eax
.text:000000000000A2C4                 and     eax, 1
.text:000000000000A2C7                 shl     eax, cl
.text:000000000000A2C9                 mov     rcx, r8
.text:000000000000A2CC                 xor     eax, edx
.text:000000000000A2CE                 mov     rdx, rsi
.text:000000000000A2D1                 mov     rsi, rdi
.text:000000000000A2D4                 mov     [r9], eax
.text:000000000000A2D7                 xor     edi, edi
.text:000000000000A2D9                 call    quotearg_n_options
.text:000000000000A2DE                 mov     rsi, [rsp+48h+var_10]
.text:000000000000A2E3                 xor     rsi, fs:28h
.text:000000000000A2EC                 jnz     short loc_A2F3
.text:000000000000A2EE                 add     rsp, 48h
.text:000000000000A2F2                 retn
.text:000000000000A2F3 ; ---------------------------------------------------------------------------
.text:000000000000A2F3
.text:000000000000A2F3 loc_A2F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000A2F3                 call    ___stack_chk_fail
.text:000000000000A2F3 ; } // starts at A260
.text:000000000000A2F3 quotearg_char_mem endp
.text:000000000000A2F3
.text:000000000000A2F3 ; ---------------------------------------------------------------------------
.text:000000000000A2F8                 align 20h
.text:000000000000A300
.text:000000000000A300 ; =============== S U B R O U T I N E =======================================
.text:000000000000A300
.text:000000000000A300
.text:000000000000A300                 public quotearg_char
.text:000000000000A300 quotearg_char   proc near
.text:000000000000A300 ; __unwind {
.text:000000000000A300                 movsx   edx, sil
.text:000000000000A304                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A30B                 jmp     quotearg_char_mem
.text:000000000000A30B ; } // starts at A300
.text:000000000000A30B quotearg_char   endp
.text:000000000000A30B
.text:000000000000A310
.text:000000000000A310 ; =============== S U B R O U T I N E =======================================
.text:000000000000A310
.text:000000000000A310
.text:000000000000A310                 public quotearg_colon
.text:000000000000A310 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:000000000000A310 ; __unwind {
.text:000000000000A310                 mov     edx, 3Ah ; ':'
.text:000000000000A315                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A31C                 jmp     quotearg_char_mem
.text:000000000000A31C ; } // starts at A310
.text:000000000000A31C quotearg_colon  endp
.text:000000000000A31C
.text:000000000000A31C ; ---------------------------------------------------------------------------
.text:000000000000A321                 align 10h
.text:000000000000A330
.text:000000000000A330 ; =============== S U B R O U T I N E =======================================
.text:000000000000A330
.text:000000000000A330
.text:000000000000A330                 public quotearg_colon_mem
.text:000000000000A330 quotearg_colon_mem proc near
.text:000000000000A330 ; __unwind {
.text:000000000000A330                 mov     edx, 3Ah ; ':'
.text:000000000000A335                 jmp     quotearg_char_mem
.text:000000000000A335 ; } // starts at A330
.text:000000000000A335 quotearg_colon_mem endp
.text:000000000000A335
.text:000000000000A335 ; ---------------------------------------------------------------------------
.text:000000000000A33A                 align 20h
.text:000000000000A340
.text:000000000000A340 ; =============== S U B R O U T I N E =======================================
.text:000000000000A340
.text:000000000000A340 ; Attributes: info_from_lumina
.text:000000000000A340
.text:000000000000A340 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000A340                 public quotearg_n_style_colon
.text:000000000000A340 quotearg_n_style_colon proc near        ; CODE XREF: main+632↑p
.text:000000000000A340                                         ; main+148E↑p ...
.text:000000000000A340
.text:000000000000A340 var_48          = dword ptr -48h
.text:000000000000A340 var_44          = qword ptr -44h
.text:000000000000A340 var_3C          = qword ptr -3Ch
.text:000000000000A340 var_34          = qword ptr -34h
.text:000000000000A340 var_2C          = qword ptr -2Ch
.text:000000000000A340 var_24          = qword ptr -24h
.text:000000000000A340 var_1C          = qword ptr -1Ch
.text:000000000000A340 var_14          = dword ptr -14h
.text:000000000000A340 var_10          = qword ptr -10h
.text:000000000000A340
.text:000000000000A340 ; __unwind {
.text:000000000000A340                 sub     rsp, 48h
.text:000000000000A344                 mov     rax, rdx
.text:000000000000A347                 mov     rdx, fs:28h
.text:000000000000A350                 mov     [rsp+48h+var_10], rdx
.text:000000000000A355                 xor     edx, edx
.text:000000000000A357                 cmp     esi, 0Ah
.text:000000000000A35A                 jz      short loc_A3C4
.text:000000000000A35C                 mov     [rsp+48h+var_48], esi
.text:000000000000A35F                 mov     rcx, rsp
.text:000000000000A362                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A369                 mov     rsi, rax
.text:000000000000A36C                 mov     [rsp+48h+var_44], 0
.text:000000000000A375                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000A37E                 mov     [rsp+48h+var_34], 0
.text:000000000000A387                 mov     [rsp+48h+var_2C], 0
.text:000000000000A390                 mov     [rsp+48h+var_24], 0
.text:000000000000A399                 mov     [rsp+48h+var_1C], 0
.text:000000000000A3A2                 mov     [rsp+48h+var_14], 0
.text:000000000000A3AA                 call    quotearg_n_options
.text:000000000000A3AF                 mov     rcx, [rsp+48h+var_10]
.text:000000000000A3B4                 xor     rcx, fs:28h
.text:000000000000A3BD                 jnz     short loc_A3C9
.text:000000000000A3BF                 add     rsp, 48h
.text:000000000000A3C3                 retn
.text:000000000000A3C4 ; ---------------------------------------------------------------------------
.text:000000000000A3C4
.text:000000000000A3C4 loc_A3C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000A3C4                 call    _abort
.text:000000000000A3C9 ; ---------------------------------------------------------------------------
.text:000000000000A3C9
.text:000000000000A3C9 loc_A3C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000A3C9                 call    ___stack_chk_fail
.text:000000000000A3C9 ; } // starts at A340
.text:000000000000A3C9 quotearg_n_style_colon endp
.text:000000000000A3C9
.text:000000000000A3C9 ; ---------------------------------------------------------------------------
.text:000000000000A3CE                 align 10h
.text:000000000000A3D0
.text:000000000000A3D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3D0
.text:000000000000A3D0 ; Attributes: info_from_lumina
.text:000000000000A3D0
.text:000000000000A3D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000A3D0                 public quotearg_n_custom_mem
.text:000000000000A3D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000A3D0                                         ; quotearg_custom+12↓j ...
.text:000000000000A3D0
.text:000000000000A3D0 var_48          = xmmword ptr -48h
.text:000000000000A3D0 var_38          = xmmword ptr -38h
.text:000000000000A3D0 var_28          = xmmword ptr -28h
.text:000000000000A3D0 var_18          = qword ptr -18h
.text:000000000000A3D0 var_10          = qword ptr -10h
.text:000000000000A3D0
.text:000000000000A3D0 ; __unwind {
.text:000000000000A3D0                 sub     rsp, 48h
.text:000000000000A3D4                 mov     r9, rcx
.text:000000000000A3D7                 mov     rcx, cs:qword_214570
.text:000000000000A3DE                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000A3E6                 mov     rax, fs:28h
.text:000000000000A3EF                 mov     [rsp+48h+var_10], rax
.text:000000000000A3F4                 xor     eax, eax
.text:000000000000A3F6                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000A3FA                 test    rsi, rsi
.text:000000000000A3FD                 mov     [rsp+48h+var_18], rcx
.text:000000000000A402                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000A409                 movdqa  xmm0, cs:xmmword_214550
.text:000000000000A411                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000A416                 movdqa  xmm0, cs:xmmword_214560
.text:000000000000A41E                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000A423                 jz      short loc_A457
.text:000000000000A425                 test    rdx, rdx
.text:000000000000A428                 jz      short loc_A457
.text:000000000000A42A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000A42F                 mov     [rsp+48h+var_18], rdx
.text:000000000000A434                 mov     rcx, rsp
.text:000000000000A437                 mov     rdx, r8
.text:000000000000A43A                 mov     rsi, r9
.text:000000000000A43D                 call    quotearg_n_options
.text:000000000000A442                 mov     rdi, [rsp+48h+var_10]
.text:000000000000A447                 xor     rdi, fs:28h
.text:000000000000A450                 jnz     short loc_A45C
.text:000000000000A452                 add     rsp, 48h
.text:000000000000A456                 retn
.text:000000000000A457 ; ---------------------------------------------------------------------------
.text:000000000000A457
.text:000000000000A457 loc_A457:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000A457                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000A457                 call    _abort
.text:000000000000A45C ; ---------------------------------------------------------------------------
.text:000000000000A45C
.text:000000000000A45C loc_A45C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000A45C                 call    ___stack_chk_fail
.text:000000000000A45C ; } // starts at A3D0
.text:000000000000A45C quotearg_n_custom_mem endp
.text:000000000000A45C
.text:000000000000A45C ; ---------------------------------------------------------------------------
.text:000000000000A461                 align 10h
.text:000000000000A470
.text:000000000000A470 ; =============== S U B R O U T I N E =======================================
.text:000000000000A470
.text:000000000000A470
.text:000000000000A470                 public quotearg_n_custom
.text:000000000000A470 quotearg_n_custom proc near
.text:000000000000A470 ; __unwind {
.text:000000000000A470                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000A477                 jmp     quotearg_n_custom_mem
.text:000000000000A477 ; } // starts at A470
.text:000000000000A477 quotearg_n_custom endp
.text:000000000000A477
.text:000000000000A477 ; ---------------------------------------------------------------------------
.text:000000000000A47C                 align 20h
.text:000000000000A480
.text:000000000000A480 ; =============== S U B R O U T I N E =======================================
.text:000000000000A480
.text:000000000000A480
.text:000000000000A480                 public quotearg_custom
.text:000000000000A480 quotearg_custom proc near
.text:000000000000A480 ; __unwind {
.text:000000000000A480                 mov     rcx, rdx
.text:000000000000A483                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000A48A                 mov     rdx, rsi
.text:000000000000A48D                 mov     rsi, rdi
.text:000000000000A490                 xor     edi, edi
.text:000000000000A492                 jmp     quotearg_n_custom_mem
.text:000000000000A492 ; } // starts at A480
.text:000000000000A492 quotearg_custom endp
.text:000000000000A492
.text:000000000000A492 ; ---------------------------------------------------------------------------
.text:000000000000A497                 align 20h
.text:000000000000A4A0
.text:000000000000A4A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4A0
.text:000000000000A4A0
.text:000000000000A4A0                 public quotearg_custom_mem
.text:000000000000A4A0 quotearg_custom_mem proc near
.text:000000000000A4A0 ; __unwind {
.text:000000000000A4A0                 mov     r8, rcx
.text:000000000000A4A3                 mov     rcx, rdx
.text:000000000000A4A6                 mov     rdx, rsi
.text:000000000000A4A9                 mov     rsi, rdi
.text:000000000000A4AC                 xor     edi, edi
.text:000000000000A4AE                 jmp     quotearg_n_custom_mem
.text:000000000000A4AE ; } // starts at A4A0
.text:000000000000A4AE quotearg_custom_mem endp
.text:000000000000A4AE
.text:000000000000A4AE ; ---------------------------------------------------------------------------
.text:000000000000A4B3                 align 20h
.text:000000000000A4C0
.text:000000000000A4C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4C0
.text:000000000000A4C0
.text:000000000000A4C0                 public quote_n_mem
.text:000000000000A4C0 quote_n_mem     proc near
.text:000000000000A4C0 ; __unwind {
.text:000000000000A4C0                 lea     rcx, quote_quoting_options
.text:000000000000A4C7                 jmp     quotearg_n_options
.text:000000000000A4C7 ; } // starts at A4C0
.text:000000000000A4C7 quote_n_mem     endp
.text:000000000000A4C7
.text:000000000000A4C7 ; ---------------------------------------------------------------------------
.text:000000000000A4CC                 align 10h
.text:000000000000A4D0
.text:000000000000A4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4D0
.text:000000000000A4D0
.text:000000000000A4D0                 public quote_mem
.text:000000000000A4D0 quote_mem       proc near
.text:000000000000A4D0 ; __unwind {
.text:000000000000A4D0                 lea     rcx, quote_quoting_options
.text:000000000000A4D7                 mov     rdx, rsi
.text:000000000000A4DA                 mov     rsi, rdi
.text:000000000000A4DD                 xor     edi, edi
.text:000000000000A4DF                 jmp     quotearg_n_options
.text:000000000000A4DF ; } // starts at A4D0
.text:000000000000A4DF quote_mem       endp
.text:000000000000A4DF
.text:000000000000A4DF ; ---------------------------------------------------------------------------
.text:000000000000A4E4                 align 10h
.text:000000000000A4F0
.text:000000000000A4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4F0
.text:000000000000A4F0
.text:000000000000A4F0                 public quote_n
.text:000000000000A4F0 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↓p
.text:000000000000A4F0 ; __unwind {
.text:000000000000A4F0                 lea     rcx, quote_quoting_options
.text:000000000000A4F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A4FE                 jmp     quotearg_n_options
.text:000000000000A4FE ; } // starts at A4F0
.text:000000000000A4FE quote_n         endp
.text:000000000000A4FE
.text:000000000000A4FE ; ---------------------------------------------------------------------------
.text:000000000000A503                 align 10h
.text:000000000000A510
.text:000000000000A510 ; =============== S U B R O U T I N E =======================================
.text:000000000000A510
.text:000000000000A510
.text:000000000000A510                 public quote
.text:000000000000A510 quote           proc near               ; CODE XREF: main+4D9↑p
.text:000000000000A510                                         ; decode_output_arg+71↑p ...
.text:000000000000A510 ; __unwind {
.text:000000000000A510                 lea     rcx, quote_quoting_options
.text:000000000000A517                 mov     rsi, rdi
.text:000000000000A51A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A521                 xor     edi, edi
.text:000000000000A523                 jmp     quotearg_n_options
.text:000000000000A523 ; } // starts at A510
.text:000000000000A523 quote           endp
.text:000000000000A523
.text:000000000000A523 ; ---------------------------------------------------------------------------
.text:000000000000A528                 align 10h
.text:000000000000A530
.text:000000000000A530 ; =============== S U B R O U T I N E =======================================
.text:000000000000A530
.text:000000000000A530
.text:000000000000A530 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:000000000000A530 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:000000000000A530
.text:000000000000A530 var_158         = qword ptr -158h
.text:000000000000A530 var_150         = qword ptr -150h
.text:000000000000A530 stat_buf        = stat ptr -0C8h
.text:000000000000A530 var_30          = qword ptr -30h
.text:000000000000A530
.text:000000000000A530 ; __unwind {
.text:000000000000A530                 push    r13
.text:000000000000A532                 push    r12
.text:000000000000A534                 mov     r13d, edi
.text:000000000000A537                 push    rbp
.text:000000000000A538                 push    rbx
.text:000000000000A539                 mov     rdi, rsi
.text:000000000000A53C                 mov     ebp, edx
.text:000000000000A53E                 mov     r12, rcx
.text:000000000000A541                 sub     rsp, 138h
.text:000000000000A548                 mov     rax, fs:28h
.text:000000000000A551                 mov     [rsp+158h+var_30], rax
.text:000000000000A559                 xor     eax, eax
.text:000000000000A55B                 call    dir_name
.text:000000000000A560                 mov     rcx, rsp        ; stat_buf
.text:000000000000A563                 mov     r8d, 100h       ; flag
.text:000000000000A569                 mov     rdx, rax        ; filename
.text:000000000000A56C                 mov     esi, r13d       ; fildes
.text:000000000000A56F                 mov     edi, 1          ; ver
.text:000000000000A574                 mov     rbx, rax
.text:000000000000A577                 call    ___fxstatat
.text:000000000000A57C                 test    eax, eax
.text:000000000000A57E                 jnz     loc_A630
.text:000000000000A584
.text:000000000000A584 loc_A584:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:000000000000A584                 mov     rdi, rbx        ; ptr
.text:000000000000A587                 call    _free
.text:000000000000A58C                 mov     rdi, r12
.text:000000000000A58F                 call    dir_name
.text:000000000000A594                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000A59C                 mov     r8d, 100h       ; flag
.text:000000000000A5A2                 mov     rdx, rax        ; filename
.text:000000000000A5A5                 mov     esi, ebp        ; fildes
.text:000000000000A5A7                 mov     edi, 1          ; ver
.text:000000000000A5AC                 mov     rbx, rax
.text:000000000000A5AF                 call    ___fxstatat
.text:000000000000A5B4                 test    eax, eax
.text:000000000000A5B6                 jnz     short loc_A608
.text:000000000000A5B8
.text:000000000000A5B8 loc_A5B8:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:000000000000A5B8                 xor     ebp, ebp
.text:000000000000A5BA                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:000000000000A5C2                 cmp     [rsp+158h+var_150], rax
.text:000000000000A5C7                 jnz     short loc_A5D9
.text:000000000000A5C9                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:000000000000A5D1                 cmp     [rsp+158h+var_158], rax
.text:000000000000A5D5                 setz    bpl
.text:000000000000A5D9
.text:000000000000A5D9 loc_A5D9:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:000000000000A5D9                 mov     rdi, rbx        ; ptr
.text:000000000000A5DC                 call    _free
.text:000000000000A5E1                 mov     rdx, [rsp+158h+var_30]
.text:000000000000A5E9                 xor     rdx, fs:28h
.text:000000000000A5F2                 mov     eax, ebp
.text:000000000000A5F4                 jnz     short loc_A652
.text:000000000000A5F6                 add     rsp, 138h
.text:000000000000A5FD                 pop     rbx
.text:000000000000A5FE                 pop     rbp
.text:000000000000A5FF                 pop     r12
.text:000000000000A601                 pop     r13
.text:000000000000A603                 retn
.text:000000000000A603 ; ---------------------------------------------------------------------------
.text:000000000000A604                 align 8
.text:000000000000A608
.text:000000000000A608 loc_A608:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:000000000000A608                 call    ___errno_location
.text:000000000000A60D                 mov     esi, [rax]      ; errnum
.text:000000000000A60F                 lea     rdx, aS_0+2     ; format
.text:000000000000A616                 mov     rcx, rbx
.text:000000000000A619                 mov     edi, 1          ; status
.text:000000000000A61E                 xor     eax, eax
.text:000000000000A620                 call    _error
.text:000000000000A625                 jmp     short loc_A5B8
.text:000000000000A625 ; ---------------------------------------------------------------------------
.text:000000000000A627                 align 10h
.text:000000000000A630
.text:000000000000A630 loc_A630:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:000000000000A630                 call    ___errno_location
.text:000000000000A635                 mov     esi, [rax]      ; errnum
.text:000000000000A637                 lea     rdx, aS_0+2     ; format
.text:000000000000A63E                 mov     rcx, rbx
.text:000000000000A641                 mov     edi, 1          ; status
.text:000000000000A646                 xor     eax, eax
.text:000000000000A648                 call    _error
.text:000000000000A64D                 jmp     loc_A584
.text:000000000000A652 ; ---------------------------------------------------------------------------
.text:000000000000A652
.text:000000000000A652 loc_A652:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:000000000000A652                 call    ___stack_chk_fail
.text:000000000000A652 ; } // starts at A530
.text:000000000000A652 same_nameat_part_0 endp
.text:000000000000A652
.text:000000000000A652 ; ---------------------------------------------------------------------------
.text:000000000000A657                 align 20h
.text:000000000000A660
.text:000000000000A660 ; =============== S U B R O U T I N E =======================================
.text:000000000000A660
.text:000000000000A660
.text:000000000000A660                 public same_nameat
.text:000000000000A660 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:000000000000A660
.text:000000000000A660 fildes          = dword ptr -3Ch
.text:000000000000A660
.text:000000000000A660 ; __unwind {
.text:000000000000A660                 push    r15
.text:000000000000A662                 push    r14
.text:000000000000A664                 mov     r15d, edx
.text:000000000000A667                 push    r13
.text:000000000000A669                 push    r12
.text:000000000000A66B                 push    rbp
.text:000000000000A66C                 push    rbx
.text:000000000000A66D                 mov     rbp, rcx
.text:000000000000A670                 mov     rbx, rsi
.text:000000000000A673                 sub     rsp, 18h
.text:000000000000A677                 mov     [rsp+48h+fildes], edi
.text:000000000000A67B                 mov     rdi, rsi
.text:000000000000A67E                 call    last_component
.text:000000000000A683                 mov     rdi, rbp
.text:000000000000A686                 mov     r12, rax
.text:000000000000A689                 call    last_component
.text:000000000000A68E                 mov     rdi, r12
.text:000000000000A691                 mov     r13, rax
.text:000000000000A694                 call    base_len
.text:000000000000A699                 mov     rdi, r13
.text:000000000000A69C                 mov     r14, rax
.text:000000000000A69F                 call    base_len
.text:000000000000A6A4                 cmp     r14, rax
.text:000000000000A6A7                 jz      short loc_A6C0
.text:000000000000A6A9
.text:000000000000A6A9 loc_A6A9:                               ; CODE XREF: same_nameat+70↓j
.text:000000000000A6A9                 add     rsp, 18h
.text:000000000000A6AD                 xor     eax, eax
.text:000000000000A6AF                 pop     rbx
.text:000000000000A6B0                 pop     rbp
.text:000000000000A6B1                 pop     r12
.text:000000000000A6B3                 pop     r13
.text:000000000000A6B5                 pop     r14
.text:000000000000A6B7                 pop     r15
.text:000000000000A6B9                 retn
.text:000000000000A6B9 ; ---------------------------------------------------------------------------
.text:000000000000A6BA                 align 20h
.text:000000000000A6C0
.text:000000000000A6C0 loc_A6C0:                               ; CODE XREF: same_nameat+47↑j
.text:000000000000A6C0                 mov     rdx, r14        ; n
.text:000000000000A6C3                 mov     rsi, r13        ; s2
.text:000000000000A6C6                 mov     rdi, r12        ; s1
.text:000000000000A6C9                 call    _memcmp
.text:000000000000A6CE                 test    eax, eax
.text:000000000000A6D0                 jnz     short loc_A6A9
.text:000000000000A6D2                 mov     edi, [rsp+48h+fildes] ; fildes
.text:000000000000A6D6                 add     rsp, 18h
.text:000000000000A6DA                 mov     rcx, rbp
.text:000000000000A6DD                 mov     edx, r15d
.text:000000000000A6E0                 mov     rsi, rbx
.text:000000000000A6E3                 pop     rbx
.text:000000000000A6E4                 pop     rbp
.text:000000000000A6E5                 pop     r12
.text:000000000000A6E7                 pop     r13
.text:000000000000A6E9                 pop     r14
.text:000000000000A6EB                 pop     r15
.text:000000000000A6ED                 jmp     same_nameat_part_0
.text:000000000000A6ED ; } // starts at A660
.text:000000000000A6ED same_nameat     endp
.text:000000000000A6ED
.text:000000000000A6ED ; ---------------------------------------------------------------------------
.text:000000000000A6F2                 align 20h
.text:000000000000A700
.text:000000000000A700 ; =============== S U B R O U T I N E =======================================
.text:000000000000A700
.text:000000000000A700
.text:000000000000A700                 public same_name
.text:000000000000A700 same_name       proc near               ; CODE XREF: triple_compare+24↑p
.text:000000000000A700 ; __unwind {
.text:000000000000A700                 mov     edx, 0FFFFFF9Ch
.text:000000000000A705                 mov     rcx, rsi
.text:000000000000A708                 mov     rsi, rdi
.text:000000000000A70B                 mov     edi, edx
.text:000000000000A70D                 jmp     same_nameat
.text:000000000000A70D ; } // starts at A700
.text:000000000000A70D same_name       endp
.text:000000000000A70D
.text:000000000000A70D ; ---------------------------------------------------------------------------
.text:000000000000A712                 align 20h
.text:000000000000A720
.text:000000000000A720 ; =============== S U B R O U T I N E =======================================
.text:000000000000A720
.text:000000000000A720
.text:000000000000A720                 public save_cwd
.text:000000000000A720 save_cwd        proc near               ; CODE XREF: find_mount_point+33↑p
.text:000000000000A720 ; __unwind {
.text:000000000000A720                 push    rbx
.text:000000000000A721                 mov     rbx, rdi
.text:000000000000A724                 mov     qword ptr [rdi+8], 0
.text:000000000000A72C                 lea     rdi, filename+1 ; "."
.text:000000000000A733                 xor     eax, eax
.text:000000000000A735                 mov     esi, 80000h
.text:000000000000A73A                 call    open_safer
.text:000000000000A73F                 mov     edx, eax
.text:000000000000A741                 mov     [rbx], eax
.text:000000000000A743                 xor     eax, eax
.text:000000000000A745                 test    edx, edx
.text:000000000000A747                 js      short loc_A750
.text:000000000000A749                 pop     rbx
.text:000000000000A74A                 retn
.text:000000000000A74A ; ---------------------------------------------------------------------------
.text:000000000000A74B                 align 10h
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: save_cwd+27↑j
.text:000000000000A750                 xor     esi, esi        ; size
.text:000000000000A752                 xor     edi, edi        ; buf
.text:000000000000A754                 call    _getcwd
.text:000000000000A759                 test    rax, rax
.text:000000000000A75C                 mov     [rbx+8], rax
.text:000000000000A760                 setz    al
.text:000000000000A763                 movzx   eax, al
.text:000000000000A766                 neg     eax
.text:000000000000A768                 pop     rbx
.text:000000000000A769                 retn
.text:000000000000A769 ; } // starts at A720
.text:000000000000A769 save_cwd        endp
.text:000000000000A769
.text:000000000000A769 ; ---------------------------------------------------------------------------
.text:000000000000A76A                 align 10h
.text:000000000000A770
.text:000000000000A770 ; =============== S U B R O U T I N E =======================================
.text:000000000000A770
.text:000000000000A770
.text:000000000000A770                 public restore_cwd
.text:000000000000A770 restore_cwd     proc near               ; CODE XREF: find_mount_point+1EC↑p
.text:000000000000A770 ; __unwind {
.text:000000000000A770                 mov     eax, [rdi]
.text:000000000000A772                 test    eax, eax
.text:000000000000A774                 js      short loc_A780
.text:000000000000A776                 mov     edi, eax        ; fd
.text:000000000000A778                 jmp     _fchdir
.text:000000000000A778 ; ---------------------------------------------------------------------------
.text:000000000000A77D                 align 20h
.text:000000000000A780
.text:000000000000A780 loc_A780:                               ; CODE XREF: restore_cwd+4↑j
.text:000000000000A780                 mov     rdi, [rdi+8]    ; s
.text:000000000000A784                 jmp     chdir_long
.text:000000000000A784 ; } // starts at A770
.text:000000000000A784 restore_cwd     endp
.text:000000000000A784
.text:000000000000A784 ; ---------------------------------------------------------------------------
.text:000000000000A789                 align 10h
.text:000000000000A790
.text:000000000000A790 ; =============== S U B R O U T I N E =======================================
.text:000000000000A790
.text:000000000000A790
.text:000000000000A790                 public free_cwd
.text:000000000000A790 free_cwd        proc near               ; CODE XREF: find_mount_point+1FC↑p
.text:000000000000A790 ; __unwind {
.text:000000000000A790                 push    rbx
.text:000000000000A791                 mov     rbx, rdi
.text:000000000000A794                 mov     edi, [rdi]      ; fd
.text:000000000000A796                 test    edi, edi
.text:000000000000A798                 js      short loc_A79F
.text:000000000000A79A                 call    _close
.text:000000000000A79F
.text:000000000000A79F loc_A79F:                               ; CODE XREF: free_cwd+8↑j
.text:000000000000A79F                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000A7A3                 pop     rbx
.text:000000000000A7A4                 jmp     _free
.text:000000000000A7A4 ; } // starts at A790
.text:000000000000A7A4 free_cwd        endp
.text:000000000000A7A4
.text:000000000000A7A4 ; ---------------------------------------------------------------------------
.text:000000000000A7A9                 align 10h
.text:000000000000A7B0
.text:000000000000A7B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A7B0
.text:000000000000A7B0
.text:000000000000A7B0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:000000000000A7B0                 public version_etc_arn
.text:000000000000A7B0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_ABEB↓j
.text:000000000000A7B0                                         ; version_etc_va:loc_AC3B↓p ...
.text:000000000000A7B0
.text:000000000000A7B0 var_58          = qword ptr -58h
.text:000000000000A7B0 var_50          = qword ptr -50h
.text:000000000000A7B0 var_48          = qword ptr -48h
.text:000000000000A7B0 var_40          = qword ptr -40h
.text:000000000000A7B0
.text:000000000000A7B0 ; __unwind {
.text:000000000000A7B0                 push    r15
.text:000000000000A7B2                 push    r14
.text:000000000000A7B4                 push    r13
.text:000000000000A7B6                 push    r12
.text:000000000000A7B8                 mov     r12, r9
.text:000000000000A7BB                 push    rbp
.text:000000000000A7BC                 push    rbx
.text:000000000000A7BD                 mov     rbp, rdi
.text:000000000000A7C0                 mov     rbx, r8
.text:000000000000A7C3                 sub     rsp, 28h
.text:000000000000A7C7                 test    rsi, rsi
.text:000000000000A7CA                 jz      loc_A8E8
.text:000000000000A7D0                 mov     r8, rdx
.text:000000000000A7D3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000A7DA                 mov     r9, rcx
.text:000000000000A7DD                 xor     eax, eax
.text:000000000000A7DF                 mov     rcx, rsi
.text:000000000000A7E2                 mov     esi, 1
.text:000000000000A7E7                 call    ___fprintf_chk
.text:000000000000A7EC
.text:000000000000A7EC loc_A7EC:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000A7EC                 lea     rsi, aC_0       ; "(C)"
.text:000000000000A7F3                 xor     edi, edi        ; domainname
.text:000000000000A7F5                 mov     edx, 5          ; category
.text:000000000000A7FA                 call    _dcgettext
.text:000000000000A7FF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:000000000000A806                 mov     rcx, rax
.text:000000000000A809                 mov     r8d, 7E3h
.text:000000000000A80F                 mov     esi, 1
.text:000000000000A814                 mov     rdi, rbp
.text:000000000000A817                 xor     eax, eax
.text:000000000000A819                 call    ___fprintf_chk
.text:000000000000A81E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:000000000000A825                 xor     edi, edi        ; domainname
.text:000000000000A827                 mov     edx, 5          ; category
.text:000000000000A82C                 call    _dcgettext
.text:000000000000A831                 mov     rsi, rbp        ; stream
.text:000000000000A834                 mov     rdi, rax        ; s
.text:000000000000A837                 call    _fputs_unlocked
.text:000000000000A83C                 cmp     r12, 9          ; switch 10 cases
.text:000000000000A840                 ja      def_A854        ; jumptable 000000000000A854 default case
.text:000000000000A846                 lea     rdx, jpt_A854
.text:000000000000A84D                 movsxd  rax, ds:(jpt_A854 - 108A4h)[rdx+r12*4]
.text:000000000000A851                 add     rax, rdx
.text:000000000000A854                 jmp     rax             ; switch jump
.text:000000000000A854 ; ---------------------------------------------------------------------------
.text:000000000000A856                 align 20h
.text:000000000000A860
.text:000000000000A860 loc_A860:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A860                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000A860                 mov     r9, [rbx+38h]   ; jumptable 000000000000A854 case 8
.text:000000000000A864                 mov     rax, [rbx+10h]
.text:000000000000A868                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000A86F                 mov     r8, [rbx+8]
.text:000000000000A873                 mov     edx, 5          ; category
.text:000000000000A878                 xor     edi, edi        ; domainname
.text:000000000000A87A                 mov     r13, [rbx+30h]
.text:000000000000A87E                 mov     r12, [rbx+28h]
.text:000000000000A882                 mov     [rsp+58h+var_48], r9
.text:000000000000A887                 mov     r15, [rbx+20h]
.text:000000000000A88B                 mov     r14, [rbx+18h]
.text:000000000000A88F                 mov     [rsp+58h+var_58], rax
.text:000000000000A893                 mov     [rsp+58h+var_50], r8
.text:000000000000A898                 mov     rbx, [rbx]
.text:000000000000A89B                 call    _dcgettext
.text:000000000000A8A0                 sub     rsp, 8
.text:000000000000A8A4
.text:000000000000A8A4 loc_A8A4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:000000000000A8A4                 mov     r9, [rsp+60h+var_48]
.text:000000000000A8A9                 mov     rdx, rax
.text:000000000000A8AC                 mov     rcx, rbx
.text:000000000000A8AF                 mov     esi, 1
.text:000000000000A8B4                 mov     rdi, rbp
.text:000000000000A8B7                 xor     eax, eax
.text:000000000000A8B9                 push    r9
.text:000000000000A8BB                 push    r13
.text:000000000000A8BD                 push    r12
.text:000000000000A8BF                 push    r15
.text:000000000000A8C1                 push    r14
.text:000000000000A8C3                 mov     r9, [rsp+88h+var_58]
.text:000000000000A8C8                 mov     r8, [rsp+88h+var_50]
.text:000000000000A8CD                 call    ___fprintf_chk
.text:000000000000A8D2                 add     rsp, 30h
.text:000000000000A8D6
.text:000000000000A8D6 loc_A8D6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A8D6                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000A8D6                 add     rsp, 28h        ; jumptable 000000000000A854 case 0
.text:000000000000A8DA                 pop     rbx
.text:000000000000A8DB                 pop     rbp
.text:000000000000A8DC                 pop     r12
.text:000000000000A8DE                 pop     r13
.text:000000000000A8E0                 pop     r14
.text:000000000000A8E2                 pop     r15
.text:000000000000A8E4                 retn
.text:000000000000A8E4 ; ---------------------------------------------------------------------------
.text:000000000000A8E5                 align 8
.text:000000000000A8E8
.text:000000000000A8E8 loc_A8E8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:000000000000A8E8                 mov     r8, rcx
.text:000000000000A8EB                 mov     rcx, rdx
.text:000000000000A8EE                 lea     rdx, aSS_2      ; "%s %s\n"
.text:000000000000A8F5                 mov     esi, 1
.text:000000000000A8FA                 xor     eax, eax
.text:000000000000A8FC                 call    ___fprintf_chk
.text:000000000000A901                 jmp     loc_A7EC
.text:000000000000A901 ; ---------------------------------------------------------------------------
.text:000000000000A906                 align 10h
.text:000000000000A910
.text:000000000000A910 loc_A910:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A910                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000A910                 mov     r10, [rbx+40h]  ; jumptable 000000000000A854 case 9
.text:000000000000A914                 mov     r9, [rbx+38h]
.text:000000000000A918                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000A91F                 mov     rax, [rbx+10h]
.text:000000000000A923                 mov     r8, [rbx+8]
.text:000000000000A927                 mov     edx, 5          ; category
.text:000000000000A92C                 mov     r13, [rbx+30h]
.text:000000000000A930                 mov     r12, [rbx+28h]
.text:000000000000A934                 mov     r15, [rbx+20h]
.text:000000000000A938                 mov     r14, [rbx+18h]
.text:000000000000A93C                 mov     rbx, [rbx]
.text:000000000000A93F                 mov     [rsp+58h+var_40], r10
.text:000000000000A944                 mov     [rsp+58h+var_48], r9
.text:000000000000A949                 mov     [rsp+58h+var_58], rax
.text:000000000000A94D                 mov     [rsp+58h+var_50], r8
.text:000000000000A952
.text:000000000000A952 loc_A952:                               ; CODE XREF: version_etc_arn+412↓j
.text:000000000000A952                 xor     edi, edi        ; domainname
.text:000000000000A954                 call    _dcgettext
.text:000000000000A959                 mov     r10, [rsp+58h+var_40]
.text:000000000000A95E                 push    r10
.text:000000000000A960                 jmp     loc_A8A4
.text:000000000000A960 ; ---------------------------------------------------------------------------
.text:000000000000A965                 align 8
.text:000000000000A968
.text:000000000000A968 loc_A968:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A968                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000A968                 mov     rbx, [rbx]      ; jumptable 000000000000A854 case 1
.text:000000000000A96B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:000000000000A972                 mov     edx, 5          ; category
.text:000000000000A977                 xor     edi, edi        ; domainname
.text:000000000000A979                 call    _dcgettext
.text:000000000000A97E                 add     rsp, 28h
.text:000000000000A982                 mov     rcx, rbx
.text:000000000000A985                 mov     rdi, rbp
.text:000000000000A988                 pop     rbx
.text:000000000000A989                 pop     rbp
.text:000000000000A98A                 pop     r12
.text:000000000000A98C                 pop     r13
.text:000000000000A98E                 pop     r14
.text:000000000000A990                 pop     r15
.text:000000000000A992                 mov     rdx, rax
.text:000000000000A995                 mov     esi, 1
.text:000000000000A99A                 xor     eax, eax
.text:000000000000A99C                 jmp     ___fprintf_chk
.text:000000000000A99C ; ---------------------------------------------------------------------------
.text:000000000000A9A1                 align 8
.text:000000000000A9A8
.text:000000000000A9A8 loc_A9A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A9A8                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000A9A8                 mov     r12, [rbx+8]    ; jumptable 000000000000A854 case 2
.text:000000000000A9AC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:000000000000A9B3                 mov     rbx, [rbx]
.text:000000000000A9B6                 mov     edx, 5          ; category
.text:000000000000A9BB                 xor     edi, edi        ; domainname
.text:000000000000A9BD                 call    _dcgettext
.text:000000000000A9C2                 add     rsp, 28h
.text:000000000000A9C6                 mov     r8, r12
.text:000000000000A9C9                 mov     rcx, rbx
.text:000000000000A9CC                 mov     rdi, rbp
.text:000000000000A9CF                 mov     rdx, rax
.text:000000000000A9D2                 mov     esi, 1
.text:000000000000A9D7                 pop     rbx
.text:000000000000A9D8                 pop     rbp
.text:000000000000A9D9                 pop     r12
.text:000000000000A9DB                 pop     r13
.text:000000000000A9DD                 pop     r14
.text:000000000000A9DF                 pop     r15
.text:000000000000A9E1                 xor     eax, eax
.text:000000000000A9E3                 jmp     ___fprintf_chk
.text:000000000000A9E3 ; ---------------------------------------------------------------------------
.text:000000000000A9E8                 align 10h
.text:000000000000A9F0
.text:000000000000A9F0 loc_A9F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A9F0                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000A9F0                 mov     r13, [rbx+10h]  ; jumptable 000000000000A854 case 3
.text:000000000000A9F4                 mov     r12, [rbx+8]
.text:000000000000A9F8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000A9FF                 mov     rbx, [rbx]
.text:000000000000AA02                 mov     edx, 5          ; category
.text:000000000000AA07                 xor     edi, edi        ; domainname
.text:000000000000AA09                 call    _dcgettext
.text:000000000000AA0E                 add     rsp, 28h
.text:000000000000AA12                 mov     r9, r13
.text:000000000000AA15                 mov     r8, r12
.text:000000000000AA18                 mov     rcx, rbx
.text:000000000000AA1B                 mov     rdi, rbp
.text:000000000000AA1E                 mov     rdx, rax
.text:000000000000AA21                 pop     rbx
.text:000000000000AA22                 pop     rbp
.text:000000000000AA23                 pop     r12
.text:000000000000AA25                 pop     r13
.text:000000000000AA27                 pop     r14
.text:000000000000AA29                 pop     r15
.text:000000000000AA2B                 mov     esi, 1
.text:000000000000AA30                 xor     eax, eax
.text:000000000000AA32                 jmp     ___fprintf_chk
.text:000000000000AA32 ; ---------------------------------------------------------------------------
.text:000000000000AA37                 align 20h
.text:000000000000AA40
.text:000000000000AA40 loc_AA40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AA40                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000AA40                 lea     rsi, aWrittenBySSSAn ; jumptable 000000000000A854 case 4
.text:000000000000AA47                 mov     edx, 5          ; category
.text:000000000000AA4C                 xor     edi, edi        ; domainname
.text:000000000000AA4E                 mov     r14, [rbx+18h]
.text:000000000000AA52                 mov     r13, [rbx+10h]
.text:000000000000AA56                 mov     r12, [rbx+8]
.text:000000000000AA5A                 mov     rbx, [rbx]
.text:000000000000AA5D                 call    _dcgettext
.text:000000000000AA62                 sub     rsp, 8
.text:000000000000AA66
.text:000000000000AA66 loc_AA66:                               ; CODE XREF: version_etc_arn+310↓j
.text:000000000000AA66                 push    r14
.text:000000000000AA68                 mov     rdx, rax
.text:000000000000AA6B                 mov     r9, r13
.text:000000000000AA6E                 mov     r8, r12
.text:000000000000AA71                 mov     rcx, rbx
.text:000000000000AA74                 mov     rdi, rbp
.text:000000000000AA77                 mov     esi, 1
.text:000000000000AA7C                 xor     eax, eax
.text:000000000000AA7E                 call    ___fprintf_chk
.text:000000000000AA83                 pop     rax
.text:000000000000AA84                 pop     rdx
.text:000000000000AA85                 add     rsp, 28h
.text:000000000000AA89                 pop     rbx
.text:000000000000AA8A                 pop     rbp
.text:000000000000AA8B                 pop     r12
.text:000000000000AA8D                 pop     r13
.text:000000000000AA8F                 pop     r14
.text:000000000000AA91                 pop     r15
.text:000000000000AA93                 retn
.text:000000000000AA93 ; ---------------------------------------------------------------------------
.text:000000000000AA94                 align 8
.text:000000000000AA98
.text:000000000000AA98 loc_AA98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AA98                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000AA98                 mov     r15, [rbx+20h]  ; jumptable 000000000000A854 case 5
.text:000000000000AA9C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:000000000000AAA3                 mov     edx, 5          ; category
.text:000000000000AAA8                 xor     edi, edi        ; domainname
.text:000000000000AAAA                 mov     r14, [rbx+18h]
.text:000000000000AAAE                 mov     r13, [rbx+10h]
.text:000000000000AAB2                 mov     r12, [rbx+8]
.text:000000000000AAB6                 mov     rbx, [rbx]
.text:000000000000AAB9                 call    _dcgettext
.text:000000000000AABE                 push    r15
.text:000000000000AAC0                 jmp     short loc_AA66
.text:000000000000AAC0 ; ---------------------------------------------------------------------------
.text:000000000000AAC2                 align 8
.text:000000000000AAC8
.text:000000000000AAC8 loc_AAC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AAC8                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000AAC8                 mov     r8, [rbx+8]     ; jumptable 000000000000A854 case 6
.text:000000000000AACC                 mov     r12, [rbx+28h]
.text:000000000000AAD0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:000000000000AAD7                 mov     r15, [rbx+20h]
.text:000000000000AADB                 mov     r14, [rbx+18h]
.text:000000000000AADF                 mov     edx, 5          ; category
.text:000000000000AAE4                 mov     r13, [rbx+10h]
.text:000000000000AAE8                 xor     edi, edi        ; domainname
.text:000000000000AAEA                 mov     rbx, [rbx]
.text:000000000000AAED                 mov     [rsp+58h+var_58], r8
.text:000000000000AAF1                 call    _dcgettext
.text:000000000000AAF6                 sub     rsp, 8
.text:000000000000AAFA                 mov     r9, r13
.text:000000000000AAFD                 push    r12
.text:000000000000AAFF                 push    r15
.text:000000000000AB01                 push    r14
.text:000000000000AB03
.text:000000000000AB03 loc_AB03:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:000000000000AB03                 mov     r8, [rsp+78h+var_58]
.text:000000000000AB08                 mov     rcx, rbx
.text:000000000000AB0B                 mov     rdx, rax
.text:000000000000AB0E                 mov     rdi, rbp
.text:000000000000AB11                 mov     esi, 1
.text:000000000000AB16                 xor     eax, eax
.text:000000000000AB18                 call    ___fprintf_chk
.text:000000000000AB1D                 add     rsp, 20h
.text:000000000000AB21                 add     rsp, 28h
.text:000000000000AB25                 pop     rbx
.text:000000000000AB26                 pop     rbp
.text:000000000000AB27                 pop     r12
.text:000000000000AB29                 pop     r13
.text:000000000000AB2B                 pop     r14
.text:000000000000AB2D                 pop     r15
.text:000000000000AB2F                 retn
.text:000000000000AB30 ; ---------------------------------------------------------------------------
.text:000000000000AB30
.text:000000000000AB30 loc_AB30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AB30                                         ; DATA XREF: .rodata:jpt_A854↓o
.text:000000000000AB30                 mov     r9, [rbx+10h]   ; jumptable 000000000000A854 case 7
.text:000000000000AB34                 mov     r13, [rbx+30h]
.text:000000000000AB38                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000AB3F                 mov     r12, [rbx+28h]
.text:000000000000AB43                 mov     r15, [rbx+20h]
.text:000000000000AB47                 mov     edx, 5          ; category
.text:000000000000AB4C                 mov     r14, [rbx+18h]
.text:000000000000AB50                 mov     r8, [rbx+8]
.text:000000000000AB54                 xor     edi, edi        ; domainname
.text:000000000000AB56                 mov     [rsp+58h+var_50], r9
.text:000000000000AB5B                 mov     rbx, [rbx]
.text:000000000000AB5E                 mov     [rsp+58h+var_58], r8
.text:000000000000AB62                 call    _dcgettext
.text:000000000000AB67                 push    r13
.text:000000000000AB69                 push    r12
.text:000000000000AB6B                 push    r15
.text:000000000000AB6D                 push    r14
.text:000000000000AB6F                 mov     r9, [rsp+78h+var_50]
.text:000000000000AB74                 jmp     short loc_AB03
.text:000000000000AB74 ; ---------------------------------------------------------------------------
.text:000000000000AB76                 align 20h
.text:000000000000AB80
.text:000000000000AB80 def_A854:                               ; CODE XREF: version_etc_arn+90↑j
.text:000000000000AB80                 mov     r10, [rbx+40h]  ; jumptable 000000000000A854 default case
.text:000000000000AB84                 mov     r9, [rbx+38h]
.text:000000000000AB88                 mov     edx, 5
.text:000000000000AB8D                 mov     rax, [rbx+10h]
.text:000000000000AB91                 mov     r8, [rbx+8]
.text:000000000000AB95                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000AB9C                 mov     r13, [rbx+30h]
.text:000000000000ABA0                 mov     r12, [rbx+28h]
.text:000000000000ABA4                 mov     r15, [rbx+20h]
.text:000000000000ABA8                 mov     r14, [rbx+18h]
.text:000000000000ABAC                 mov     [rsp+58h+var_40], r10
.text:000000000000ABB1                 mov     [rsp+58h+var_48], r9
.text:000000000000ABB6                 mov     [rsp+58h+var_58], rax
.text:000000000000ABBA                 mov     [rsp+58h+var_50], r8
.text:000000000000ABBF                 mov     rbx, [rbx]
.text:000000000000ABC2                 jmp     loc_A952
.text:000000000000ABC2 ; } // starts at A7B0
.text:000000000000ABC2 version_etc_arn endp
.text:000000000000ABC2
.text:000000000000ABC2 ; ---------------------------------------------------------------------------
.text:000000000000ABC7                 align 10h
.text:000000000000ABD0
.text:000000000000ABD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABD0
.text:000000000000ABD0 ; Attributes: info_from_lumina
.text:000000000000ABD0
.text:000000000000ABD0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:000000000000ABD0                 public version_etc_ar
.text:000000000000ABD0 version_etc_ar  proc near
.text:000000000000ABD0 ; __unwind {
.text:000000000000ABD0                 xor     r9d, r9d
.text:000000000000ABD3                 cmp     qword ptr [r8], 0
.text:000000000000ABD7                 jz      short loc_ABEB
.text:000000000000ABD9                 nop     dword ptr [rax+00000000h]
.text:000000000000ABE0
.text:000000000000ABE0 loc_ABE0:                               ; CODE XREF: version_etc_ar+19↓j
.text:000000000000ABE0                 add     r9, 1
.text:000000000000ABE4                 cmp     qword ptr [r8+r9*8], 0
.text:000000000000ABE9                 jnz     short loc_ABE0
.text:000000000000ABEB
.text:000000000000ABEB loc_ABEB:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000ABEB                 jmp     version_etc_arn
.text:000000000000ABEB ; } // starts at ABD0
.text:000000000000ABEB version_etc_ar  endp
.text:000000000000ABEB
.text:000000000000ABF0
.text:000000000000ABF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABF0
.text:000000000000ABF0 ; Attributes: info_from_lumina
.text:000000000000ABF0
.text:000000000000ABF0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:000000000000ABF0                 public version_etc_va
.text:000000000000ABF0 version_etc_va  proc near
.text:000000000000ABF0
.text:000000000000ABF0 authtab         = qword ptr -68h
.text:000000000000ABF0 var_10          = qword ptr -10h
.text:000000000000ABF0
.text:000000000000ABF0 ; __unwind {
.text:000000000000ABF0                 sub     rsp, 68h
.text:000000000000ABF4                 mov     r10, r8
.text:000000000000ABF7                 xor     r9d, r9d
.text:000000000000ABFA                 mov     rax, fs:28h
.text:000000000000AC03                 mov     [rsp+68h+var_10], rax
.text:000000000000AC08                 xor     eax, eax
.text:000000000000AC0A                 mov     r8, rsp
.text:000000000000AC0D                 nop     dword ptr [rax]
.text:000000000000AC10
.text:000000000000AC10 loc_AC10:                               ; CODE XREF: version_etc_va+49↓j
.text:000000000000AC10                 mov     eax, [r10]
.text:000000000000AC13                 cmp     eax, 2Fh ; '/'
.text:000000000000AC16                 ja      short loc_AC5A
.text:000000000000AC18                 mov     r11d, eax
.text:000000000000AC1B                 add     r11, [r10+10h]
.text:000000000000AC1F                 add     eax, 8
.text:000000000000AC22                 mov     [r10], eax
.text:000000000000AC25
.text:000000000000AC25 loc_AC25:                               ; CODE XREF: version_etc_va+76↓j
.text:000000000000AC25                 mov     rax, [r11]
.text:000000000000AC28                 test    rax, rax
.text:000000000000AC2B                 mov     [r8+r9*8], rax
.text:000000000000AC2F                 jz      short loc_AC3B
.text:000000000000AC31                 add     r9, 1
.text:000000000000AC35                 cmp     r9, 0Ah
.text:000000000000AC39                 jnz     short loc_AC10
.text:000000000000AC3B
.text:000000000000AC3B loc_AC3B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000AC3B                 call    version_etc_arn
.text:000000000000AC40                 mov     rax, [rsp+68h+var_10]
.text:000000000000AC45                 xor     rax, fs:28h
.text:000000000000AC4E                 jnz     short loc_AC55
.text:000000000000AC50                 add     rsp, 68h
.text:000000000000AC54                 retn
.text:000000000000AC55 ; ---------------------------------------------------------------------------
.text:000000000000AC55
.text:000000000000AC55 loc_AC55:                               ; CODE XREF: version_etc_va+5E↑j
.text:000000000000AC55                 call    ___stack_chk_fail
.text:000000000000AC5A ; ---------------------------------------------------------------------------
.text:000000000000AC5A
.text:000000000000AC5A loc_AC5A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000AC5A                 mov     r11, [r10+8]
.text:000000000000AC5E                 lea     rax, [r11+8]
.text:000000000000AC62                 mov     [r10+8], rax
.text:000000000000AC66                 jmp     short loc_AC25
.text:000000000000AC66 ; } // starts at ABF0
.text:000000000000AC66 version_etc_va  endp
.text:000000000000AC66
.text:000000000000AC66 ; ---------------------------------------------------------------------------
.text:000000000000AC68                 align 10h
.text:000000000000AC70
.text:000000000000AC70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC70
.text:000000000000AC70 ; Attributes: info_from_lumina
.text:000000000000AC70
.text:000000000000AC70 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:000000000000AC70                 public version_etc
.text:000000000000AC70 version_etc     proc near               ; CODE XREF: main+405↑p
.text:000000000000AC70
.text:000000000000AC70 var_C0          = dword ptr -0C0h
.text:000000000000AC70 var_B8          = qword ptr -0B8h
.text:000000000000AC70 var_B0          = qword ptr -0B0h
.text:000000000000AC70 var_A8          = byte ptr -0A8h
.text:000000000000AC70 var_50          = qword ptr -50h
.text:000000000000AC70 var_48          = byte ptr -48h
.text:000000000000AC70 var_28          = qword ptr -28h
.text:000000000000AC70 var_20          = qword ptr -20h
.text:000000000000AC70 arg_0           = byte ptr  8
.text:000000000000AC70
.text:000000000000AC70 ; __unwind {
.text:000000000000AC70                 push    rbp
.text:000000000000AC71                 push    rbx
.text:000000000000AC72                 mov     r10d, 20h ; ' '
.text:000000000000AC78                 xor     r11d, r11d
.text:000000000000AC7B                 sub     rsp, 0B8h
.text:000000000000AC82                 mov     rax, fs:28h
.text:000000000000AC8B                 mov     [rsp+0C8h+var_50], rax
.text:000000000000AC90                 xor     eax, eax
.text:000000000000AC92                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000AC9A                 mov     [rsp+0C8h+var_28], r8
.text:000000000000ACA2                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000ACAA                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000ACAF                 mov     [rsp+0C8h+var_20], r9
.text:000000000000ACB7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000ACBF                 mov     [rsp+0C8h+var_B8], rax
.text:000000000000ACC4                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000ACCC                 xor     r9d, r9d
.text:000000000000ACCF                 mov     [rsp+0C8h+var_B0], rax
.text:000000000000ACD4                 mov     rbp, rax
.text:000000000000ACD7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000ACE0
.text:000000000000ACE0 loc_ACE0:                               ; CODE XREF: version_etc+9A↓j
.text:000000000000ACE0                 cmp     r10d, 2Fh ; '/'
.text:000000000000ACE4                 ja      short loc_AD3C
.text:000000000000ACE6                 mov     eax, r10d
.text:000000000000ACE9                 mov     r11d, 1
.text:000000000000ACEF                 add     r10d, 8
.text:000000000000ACF3                 add     rax, rbp
.text:000000000000ACF6
.text:000000000000ACF6 loc_ACF6:                               ; CODE XREF: version_etc+D3↓j
.text:000000000000ACF6                 mov     rax, [rax]
.text:000000000000ACF9                 test    rax, rax
.text:000000000000ACFC                 mov     [r8+r9*8], rax
.text:000000000000AD00                 jz      short loc_AD0C
.text:000000000000AD02                 add     r9, 1
.text:000000000000AD06                 cmp     r9, 0Ah
.text:000000000000AD0A                 jnz     short loc_ACE0
.text:000000000000AD0C
.text:000000000000AD0C loc_AD0C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000AD0C                 test    r11b, r11b
.text:000000000000AD0F                 jnz     short loc_AD35
.text:000000000000AD11
.text:000000000000AD11 loc_AD11:                               ; CODE XREF: version_etc+CA↓j
.text:000000000000AD11                 call    version_etc_arn
.text:000000000000AD16                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000AD1B                 xor     rax, fs:28h
.text:000000000000AD24                 jnz     short loc_AD30
.text:000000000000AD26                 add     rsp, 0B8h
.text:000000000000AD2D                 pop     rbx
.text:000000000000AD2E                 pop     rbp
.text:000000000000AD2F                 retn
.text:000000000000AD30 ; ---------------------------------------------------------------------------
.text:000000000000AD30
.text:000000000000AD30 loc_AD30:                               ; CODE XREF: version_etc+B4↑j
.text:000000000000AD30                 call    ___stack_chk_fail
.text:000000000000AD35 ; ---------------------------------------------------------------------------
.text:000000000000AD35
.text:000000000000AD35 loc_AD35:                               ; CODE XREF: version_etc+9F↑j
.text:000000000000AD35                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000AD3A                 jmp     short loc_AD11
.text:000000000000AD3C ; ---------------------------------------------------------------------------
.text:000000000000AD3C
.text:000000000000AD3C loc_AD3C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000AD3C                 mov     rax, rbx
.text:000000000000AD3F                 add     rbx, 8
.text:000000000000AD43                 jmp     short loc_ACF6
.text:000000000000AD43 ; } // starts at AC70
.text:000000000000AD43 version_etc     endp
.text:000000000000AD43
.text:000000000000AD43 ; ---------------------------------------------------------------------------
.text:000000000000AD45                 align 10h
.text:000000000000AD50
.text:000000000000AD50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD50
.text:000000000000AD50 ; Attributes: info_from_lumina
.text:000000000000AD50
.text:000000000000AD50 ; void __cdecl emit_bug_reporting_address()
.text:000000000000AD50                 public emit_bug_reporting_address
.text:000000000000AD50 emit_bug_reporting_address proc near
.text:000000000000AD50 ; __unwind {
.text:000000000000AD50                 push    rbx
.text:000000000000AD51                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:000000000000AD58                 mov     edx, 5          ; category
.text:000000000000AD5D                 xor     edi, edi        ; domainname
.text:000000000000AD5F                 call    _dcgettext
.text:000000000000AD64                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000AD6B                 mov     rsi, rax
.text:000000000000AD6E                 mov     edi, 1
.text:000000000000AD73                 xor     eax, eax
.text:000000000000AD75                 call    ___printf_chk
.text:000000000000AD7A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:000000000000AD81                 mov     edx, 5          ; category
.text:000000000000AD86                 xor     edi, edi        ; domainname
.text:000000000000AD88                 call    _dcgettext
.text:000000000000AD8D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000AD94                 lea     rdx, unk_F0E8
.text:000000000000AD9B                 mov     rsi, rax
.text:000000000000AD9E                 mov     edi, 1
.text:000000000000ADA3                 xor     eax, eax
.text:000000000000ADA5                 call    ___printf_chk
.text:000000000000ADAA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000ADB1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:000000000000ADB8                 xor     edi, edi        ; domainname
.text:000000000000ADBA                 mov     edx, 5          ; category
.text:000000000000ADBF                 call    _dcgettext
.text:000000000000ADC4                 mov     rsi, rbx        ; stream
.text:000000000000ADC7                 mov     rdi, rax        ; s
.text:000000000000ADCA                 pop     rbx
.text:000000000000ADCB                 jmp     _fputs_unlocked
.text:000000000000ADCB ; } // starts at AD50
.text:000000000000ADCB emit_bug_reporting_address endp
.text:000000000000ADCB
.text:000000000000ADD0
.text:000000000000ADD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ADD0
.text:000000000000ADD0
.text:000000000000ADD0                 public xmalloc
.text:000000000000ADD0 xmalloc         proc near               ; CODE XREF: main+3A4↑p
.text:000000000000ADD0                                         ; main+422↑p ...
.text:000000000000ADD0 ; __unwind {
.text:000000000000ADD0                 push    rbx
.text:000000000000ADD1                 mov     rbx, rdi
.text:000000000000ADD4                 call    _malloc
.text:000000000000ADD9                 test    rax, rax
.text:000000000000ADDC                 jnz     short loc_ADE3
.text:000000000000ADDE                 test    rbx, rbx
.text:000000000000ADE1                 jnz     short loc_ADE5
.text:000000000000ADE3
.text:000000000000ADE3 loc_ADE3:                               ; CODE XREF: xmalloc+C↑j
.text:000000000000ADE3                 pop     rbx
.text:000000000000ADE4                 retn
.text:000000000000ADE5 ; ---------------------------------------------------------------------------
.text:000000000000ADE5
.text:000000000000ADE5 loc_ADE5:                               ; CODE XREF: xmalloc+11↑j
.text:000000000000ADE5                 call    xalloc_die
.text:000000000000ADE5 ; } // starts at ADD0
.text:000000000000ADE5 xmalloc         endp
.text:000000000000ADE5
.text:000000000000ADE5 ; ---------------------------------------------------------------------------
.text:000000000000ADEA                 align 10h
.text:000000000000ADF0
.text:000000000000ADF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ADF0
.text:000000000000ADF0 ; Attributes: info_from_lumina
.text:000000000000ADF0
.text:000000000000ADF0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:000000000000ADF0                 public xnmalloc
.text:000000000000ADF0 xnmalloc        proc near
.text:000000000000ADF0 ; __unwind {
.text:000000000000ADF0                 mov     rax, rdi
.text:000000000000ADF3                 mul     rsi
.text:000000000000ADF6                 mov     rdi, rax
.text:000000000000ADF9                 seto    al
.text:000000000000ADFC                 test    rdi, rdi
.text:000000000000ADFF                 js      short loc_AE0B
.text:000000000000AE01                 movzx   eax, al
.text:000000000000AE04                 test    rax, rax
.text:000000000000AE07                 jnz     short loc_AE0B
.text:000000000000AE09                 jmp     short xmalloc
.text:000000000000AE0B ; ---------------------------------------------------------------------------
.text:000000000000AE0B
.text:000000000000AE0B loc_AE0B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000AE0B                                         ; xnmalloc+17↑j
.text:000000000000AE0B                 sub     rsp, 8
.text:000000000000AE0F                 call    xalloc_die
.text:000000000000AE0F ; } // starts at ADF0
.text:000000000000AE0F xnmalloc        endp
.text:000000000000AE0F
.text:000000000000AE0F ; ---------------------------------------------------------------------------
.text:000000000000AE14                 align 20h
.text:000000000000AE20
.text:000000000000AE20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE20
.text:000000000000AE20
.text:000000000000AE20                 public xcharalloc
.text:000000000000AE20 xcharalloc      proc near
.text:000000000000AE20 ; __unwind {
.text:000000000000AE20                 jmp     short xmalloc
.text:000000000000AE20 ; } // starts at AE20
.text:000000000000AE20 xcharalloc      endp
.text:000000000000AE20
.text:000000000000AE20 ; ---------------------------------------------------------------------------
.text:000000000000AE22                 align 10h
.text:000000000000AE30
.text:000000000000AE30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE30
.text:000000000000AE30 ; Attributes: info_from_lumina
.text:000000000000AE30
.text:000000000000AE30 ; void *__fastcall xrealloc(void *p, size_t n)
.text:000000000000AE30                 public xrealloc
.text:000000000000AE30 xrealloc        proc near               ; CODE XREF: alloc_table_row+37↑p
.text:000000000000AE30                                         ; alloc_field+45↑p ...
.text:000000000000AE30 ; __unwind {
.text:000000000000AE30                 test    rsi, rsi
.text:000000000000AE33                 push    rbx
.text:000000000000AE34                 mov     rbx, rsi
.text:000000000000AE37                 jnz     short loc_AE3E
.text:000000000000AE39                 test    rdi, rdi
.text:000000000000AE3C                 jnz     short loc_AE58
.text:000000000000AE3E
.text:000000000000AE3E loc_AE3E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000AE3E                 mov     rsi, rbx        ; size
.text:000000000000AE41                 call    _realloc
.text:000000000000AE46                 test    rax, rax
.text:000000000000AE49                 jnz     short loc_AE50
.text:000000000000AE4B                 test    rbx, rbx
.text:000000000000AE4E                 jnz     short loc_AE61
.text:000000000000AE50
.text:000000000000AE50 loc_AE50:                               ; CODE XREF: xrealloc+19↑j
.text:000000000000AE50                 pop     rbx
.text:000000000000AE51                 retn
.text:000000000000AE51 ; ---------------------------------------------------------------------------
.text:000000000000AE52                 align 8
.text:000000000000AE58
.text:000000000000AE58 loc_AE58:                               ; CODE XREF: xrealloc+C↑j
.text:000000000000AE58                 call    _free
.text:000000000000AE5D                 xor     eax, eax
.text:000000000000AE5F                 pop     rbx
.text:000000000000AE60                 retn
.text:000000000000AE61 ; ---------------------------------------------------------------------------
.text:000000000000AE61
.text:000000000000AE61 loc_AE61:                               ; CODE XREF: xrealloc+1E↑j
.text:000000000000AE61                 call    xalloc_die
.text:000000000000AE61 ; } // starts at AE30
.text:000000000000AE61 xrealloc        endp
.text:000000000000AE61
.text:000000000000AE61 ; ---------------------------------------------------------------------------
.text:000000000000AE66                 align 10h
.text:000000000000AE70
.text:000000000000AE70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE70
.text:000000000000AE70 ; Attributes: info_from_lumina
.text:000000000000AE70
.text:000000000000AE70 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:000000000000AE70                 public xnrealloc
.text:000000000000AE70 xnrealloc       proc near
.text:000000000000AE70 ; __unwind {
.text:000000000000AE70                 mov     rax, rsi
.text:000000000000AE73                 mul     rdx
.text:000000000000AE76                 mov     rsi, rax
.text:000000000000AE79                 seto    al
.text:000000000000AE7C                 test    rsi, rsi
.text:000000000000AE7F                 js      short loc_AE8B
.text:000000000000AE81                 movzx   eax, al
.text:000000000000AE84                 test    rax, rax
.text:000000000000AE87                 jnz     short loc_AE8B
.text:000000000000AE89                 jmp     short xrealloc
.text:000000000000AE8B ; ---------------------------------------------------------------------------
.text:000000000000AE8B
.text:000000000000AE8B loc_AE8B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000AE8B                                         ; xnrealloc+17↑j
.text:000000000000AE8B                 sub     rsp, 8
.text:000000000000AE8F                 call    xalloc_die
.text:000000000000AE8F ; } // starts at AE70
.text:000000000000AE8F xnrealloc       endp
.text:000000000000AE8F
.text:000000000000AE8F ; ---------------------------------------------------------------------------
.text:000000000000AE94                 align 20h
.text:000000000000AEA0
.text:000000000000AEA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AEA0
.text:000000000000AEA0 ; Attributes: info_from_lumina
.text:000000000000AEA0
.text:000000000000AEA0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:000000000000AEA0                 public x2nrealloc
.text:000000000000AEA0 x2nrealloc      proc near
.text:000000000000AEA0 ; __unwind {
.text:000000000000AEA0                 test    rdi, rdi
.text:000000000000AEA3                 mov     r9, rdx
.text:000000000000AEA6                 mov     rcx, [rsi]
.text:000000000000AEA9                 jz      short loc_AEE0
.text:000000000000AEAB                 xor     edx, edx
.text:000000000000AEAD                 mov     rax, 5555555555555554h
.text:000000000000AEB7                 div     r9
.text:000000000000AEBA                 cmp     rax, rcx
.text:000000000000AEBD                 jbe     short loc_AEFB
.text:000000000000AEBF                 mov     rax, rcx
.text:000000000000AEC2                 shr     rax, 1
.text:000000000000AEC5                 lea     rcx, [rax+rcx+1]
.text:000000000000AECA
.text:000000000000AECA loc_AECA:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000AECA                 mov     [rsi], rcx
.text:000000000000AECD                 imul    rcx, r9
.text:000000000000AED1                 mov     rsi, rcx
.text:000000000000AED4                 jmp     xrealloc
.text:000000000000AED4 ; ---------------------------------------------------------------------------
.text:000000000000AED9                 align 20h
.text:000000000000AEE0
.text:000000000000AEE0 loc_AEE0:                               ; CODE XREF: x2nrealloc+9↑j
.text:000000000000AEE0                 test    rcx, rcx
.text:000000000000AEE3                 jz      short loc_AF08
.text:000000000000AEE5
.text:000000000000AEE5 loc_AEE5:                               ; CODE XREF: x2nrealloc+80↓j
.text:000000000000AEE5                 mov     rax, rcx
.text:000000000000AEE8                 mul     r9
.text:000000000000AEEB                 seto    dl
.text:000000000000AEEE                 test    rax, rax
.text:000000000000AEF1                 movzx   edx, dl
.text:000000000000AEF4                 js      short loc_AEFB
.text:000000000000AEF6                 test    rdx, rdx
.text:000000000000AEF9                 jz      short loc_AECA
.text:000000000000AEFB
.text:000000000000AEFB loc_AEFB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000AEFB                                         ; x2nrealloc+54↑j
.text:000000000000AEFB                 sub     rsp, 8
.text:000000000000AEFF                 call    xalloc_die
.text:000000000000AEFF ; ---------------------------------------------------------------------------
.text:000000000000AF04                 align 8
.text:000000000000AF08
.text:000000000000AF08 loc_AF08:                               ; CODE XREF: x2nrealloc+43↑j
.text:000000000000AF08                 xor     edx, edx
.text:000000000000AF0A                 mov     eax, 80h
.text:000000000000AF0F                 xor     r8d, r8d
.text:000000000000AF12                 div     r9
.text:000000000000AF15                 test    rax, rax
.text:000000000000AF18                 setz    r8b
.text:000000000000AF1C                 lea     rcx, [r8+rax]
.text:000000000000AF20                 jmp     short loc_AEE5
.text:000000000000AF20 ; } // starts at AEA0
.text:000000000000AF20 x2nrealloc      endp
.text:000000000000AF20
.text:000000000000AF20 ; ---------------------------------------------------------------------------
.text:000000000000AF22                 align 10h
.text:000000000000AF30
.text:000000000000AF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF30
.text:000000000000AF30 ; Attributes: info_from_lumina
.text:000000000000AF30
.text:000000000000AF30 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:000000000000AF30                 public x2realloc
.text:000000000000AF30 x2realloc       proc near
.text:000000000000AF30 ; __unwind {
.text:000000000000AF30                 test    rdi, rdi
.text:000000000000AF33                 mov     rax, [rsi]
.text:000000000000AF36                 jz      short loc_AF60
.text:000000000000AF38                 mov     rdx, 5555555555555553h
.text:000000000000AF42                 cmp     rax, rdx
.text:000000000000AF45                 ja      short loc_AF71
.text:000000000000AF47                 mov     rdx, rax
.text:000000000000AF4A                 shr     rdx, 1
.text:000000000000AF4D                 lea     rax, [rdx+rax+1]
.text:000000000000AF52
.text:000000000000AF52 loc_AF52:                               ; CODE XREF: x2realloc+3F↓j
.text:000000000000AF52                 mov     [rsi], rax
.text:000000000000AF55                 mov     rsi, rax
.text:000000000000AF58                 jmp     xrealloc
.text:000000000000AF58 ; ---------------------------------------------------------------------------
.text:000000000000AF5D                 align 20h
.text:000000000000AF60
.text:000000000000AF60 loc_AF60:                               ; CODE XREF: x2realloc+6↑j
.text:000000000000AF60                 test    rax, rax
.text:000000000000AF63                 mov     edx, 80h
.text:000000000000AF68                 cmovz   rax, rdx
.text:000000000000AF6C                 test    rax, rax
.text:000000000000AF6F                 jns     short loc_AF52
.text:000000000000AF71
.text:000000000000AF71 loc_AF71:                               ; CODE XREF: x2realloc+15↑j
.text:000000000000AF71                 sub     rsp, 8
.text:000000000000AF75                 call    xalloc_die
.text:000000000000AF75 ; } // starts at AF30
.text:000000000000AF75 x2realloc       endp
.text:000000000000AF75
.text:000000000000AF75 ; ---------------------------------------------------------------------------
.text:000000000000AF7A                 align 20h
.text:000000000000AF80
.text:000000000000AF80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF80
.text:000000000000AF80
.text:000000000000AF80 ; __int64 __fastcall xzalloc(size_t n)
.text:000000000000AF80                 public xzalloc
.text:000000000000AF80 xzalloc         proc near
.text:000000000000AF80 ; __unwind {
.text:000000000000AF80                 push    rbx
.text:000000000000AF81                 mov     rbx, rdi
.text:000000000000AF84                 call    xmalloc
.text:000000000000AF89                 mov     rdx, rbx        ; n
.text:000000000000AF8C                 xor     esi, esi        ; c
.text:000000000000AF8E                 mov     rdi, rax        ; s
.text:000000000000AF91                 pop     rbx
.text:000000000000AF92                 jmp     _memset
.text:000000000000AF92 ; } // starts at AF80
.text:000000000000AF92 xzalloc         endp
.text:000000000000AF92
.text:000000000000AF92 ; ---------------------------------------------------------------------------
.text:000000000000AF97                 align 20h
.text:000000000000AFA0
.text:000000000000AFA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFA0
.text:000000000000AFA0 ; Attributes: info_from_lumina
.text:000000000000AFA0
.text:000000000000AFA0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:000000000000AFA0                 public xcalloc
.text:000000000000AFA0 xcalloc         proc near
.text:000000000000AFA0 ; __unwind {
.text:000000000000AFA0                 mov     rax, rdi
.text:000000000000AFA3                 sub     rsp, 8
.text:000000000000AFA7                 mul     rsi
.text:000000000000AFAA                 seto    dl
.text:000000000000AFAD                 test    rax, rax
.text:000000000000AFB0                 js      short loc_AFC9
.text:000000000000AFB2                 movzx   edx, dl
.text:000000000000AFB5                 test    rdx, rdx
.text:000000000000AFB8                 jnz     short loc_AFC9
.text:000000000000AFBA                 call    _calloc
.text:000000000000AFBF                 test    rax, rax
.text:000000000000AFC2                 jz      short loc_AFC9
.text:000000000000AFC4                 add     rsp, 8
.text:000000000000AFC8                 retn
.text:000000000000AFC9 ; ---------------------------------------------------------------------------
.text:000000000000AFC9
.text:000000000000AFC9 loc_AFC9:                               ; CODE XREF: xcalloc+10↑j
.text:000000000000AFC9                                         ; xcalloc+18↑j ...
.text:000000000000AFC9                 call    xalloc_die
.text:000000000000AFC9 ; } // starts at AFA0
.text:000000000000AFC9 xcalloc         endp
.text:000000000000AFC9
.text:000000000000AFC9 ; ---------------------------------------------------------------------------
.text:000000000000AFCE                 align 10h
.text:000000000000AFD0
.text:000000000000AFD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFD0
.text:000000000000AFD0 ; Attributes: info_from_lumina
.text:000000000000AFD0
.text:000000000000AFD0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:000000000000AFD0                 public xmemdup
.text:000000000000AFD0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:000000000000AFD0                                         ; xstrdup+11↓j
.text:000000000000AFD0 ; __unwind {
.text:000000000000AFD0                 push    rbp
.text:000000000000AFD1                 push    rbx
.text:000000000000AFD2                 mov     rbp, rdi
.text:000000000000AFD5                 mov     rdi, rsi
.text:000000000000AFD8                 mov     rbx, rsi
.text:000000000000AFDB                 sub     rsp, 8
.text:000000000000AFDF                 call    xmalloc
.text:000000000000AFE4                 add     rsp, 8
.text:000000000000AFE8                 mov     rdx, rbx        ; n
.text:000000000000AFEB                 mov     rsi, rbp        ; src
.text:000000000000AFEE                 pop     rbx
.text:000000000000AFEF                 pop     rbp
.text:000000000000AFF0                 mov     rdi, rax        ; dest
.text:000000000000AFF3                 jmp     _memcpy
.text:000000000000AFF3 ; } // starts at AFD0
.text:000000000000AFF3 xmemdup         endp
.text:000000000000AFF3
.text:000000000000AFF3 ; ---------------------------------------------------------------------------
.text:000000000000AFF8                 align 20h
.text:000000000000B000
.text:000000000000B000 ; =============== S U B R O U T I N E =======================================
.text:000000000000B000
.text:000000000000B000
.text:000000000000B000 ; __int64 __fastcall xstrdup(void *src)
.text:000000000000B000                 public xstrdup
.text:000000000000B000 xstrdup         proc near               ; CODE XREF: main+904↑p
.text:000000000000B000                                         ; get_dev+1C6↑p ...
.text:000000000000B000 ; __unwind {
.text:000000000000B000                 push    rbx
.text:000000000000B001                 mov     rbx, rdi
.text:000000000000B004                 call    _strlen
.text:000000000000B009                 mov     rdi, rbx        ; src
.text:000000000000B00C                 lea     rsi, [rax+1]    ; n
.text:000000000000B010                 pop     rbx
.text:000000000000B011                 jmp     short xmemdup
.text:000000000000B011 ; } // starts at B000
.text:000000000000B011 xstrdup         endp
.text:000000000000B011
.text:000000000000B011 ; ---------------------------------------------------------------------------
.text:000000000000B013                 align 20h
.text:000000000000B020
.text:000000000000B020 ; =============== S U B R O U T I N E =======================================
.text:000000000000B020
.text:000000000000B020 ; Attributes: noreturn info_from_lumina
.text:000000000000B020
.text:000000000000B020 ; void __cdecl xalloc_die()
.text:000000000000B020                 public xalloc_die
.text:000000000000B020 xalloc_die      proc near               ; CODE XREF: main:loc_3B13↑p
.text:000000000000B020                                         ; alloc_table_row:loc_3E3D↑p ...
.text:000000000000B020 ; __unwind {
.text:000000000000B020                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:000000000000B027                 sub     rsp, 8
.text:000000000000B02B                 mov     edx, 5          ; category
.text:000000000000B030                 xor     edi, edi        ; domainname
.text:000000000000B032                 call    _dcgettext
.text:000000000000B037                 mov     edi, cs:exit_failure ; status
.text:000000000000B03D                 lea     rdx, aS_0+2     ; format
.text:000000000000B044                 mov     rcx, rax
.text:000000000000B047                 xor     esi, esi        ; errnum
.text:000000000000B049                 xor     eax, eax
.text:000000000000B04B                 call    _error
.text:000000000000B050                 call    _abort
.text:000000000000B050 ; } // starts at B020
.text:000000000000B050 xalloc_die      endp
.text:000000000000B050
.text:000000000000B050 ; ---------------------------------------------------------------------------
.text:000000000000B055                 align 20h
.text:000000000000B060
.text:000000000000B060 ; =============== S U B R O U T I N E =======================================
.text:000000000000B060
.text:000000000000B060 ; Attributes: info_from_lumina
.text:000000000000B060
.text:000000000000B060 ; char *__cdecl xgetcwd()
.text:000000000000B060                 public xgetcwd
.text:000000000000B060 xgetcwd         proc near               ; CODE XREF: find_mount_point:loc_55B0↑p
.text:000000000000B060                                         ; canonicalize_filename_mode+63↑p
.text:000000000000B060 ; __unwind {
.text:000000000000B060                 push    rbx
.text:000000000000B061                 xor     esi, esi        ; size
.text:000000000000B063                 xor     edi, edi        ; buf
.text:000000000000B065                 call    _getcwd
.text:000000000000B06A                 test    rax, rax
.text:000000000000B06D                 mov     rbx, rax
.text:000000000000B070                 jz      short loc_B080
.text:000000000000B072
.text:000000000000B072 loc_B072:                               ; CODE XREF: xgetcwd+28↓j
.text:000000000000B072                 mov     rax, rbx
.text:000000000000B075                 pop     rbx
.text:000000000000B076                 retn
.text:000000000000B076 ; ---------------------------------------------------------------------------
.text:000000000000B077                 align 20h
.text:000000000000B080
.text:000000000000B080 loc_B080:                               ; CODE XREF: xgetcwd+10↑j
.text:000000000000B080                 call    ___errno_location
.text:000000000000B085                 cmp     dword ptr [rax], 0Ch
.text:000000000000B088                 jnz     short loc_B072
.text:000000000000B08A                 call    xalloc_die
.text:000000000000B08A ; } // starts at B060
.text:000000000000B08A xgetcwd         endp
.text:000000000000B08A
.text:000000000000B08A ; ---------------------------------------------------------------------------
.text:000000000000B08F                 align 10h
.text:000000000000B090
.text:000000000000B090 ; =============== S U B R O U T I N E =======================================
.text:000000000000B090
.text:000000000000B090 ; Attributes: noreturn info_from_lumina
.text:000000000000B090
.text:000000000000B090 ; void __fastcall xstrtol_fatal(strtol_error err, int opt_idx, char c, const option *long_options, const char *arg)
.text:000000000000B090                 public xstrtol_fatal
.text:000000000000B090 xstrtol_fatal   proc near               ; CODE XREF: main+240↑p
.text:000000000000B090
.text:000000000000B090 var_32          = byte ptr -32h
.text:000000000000B090 var_31          = byte ptr -31h
.text:000000000000B090 var_30          = qword ptr -30h
.text:000000000000B090
.text:000000000000B090 ; __unwind {
.text:000000000000B090                 push    r13
.text:000000000000B092                 push    r12
.text:000000000000B094                 mov     r10d, esi
.text:000000000000B097                 push    rbp
.text:000000000000B098                 push    rbx
.text:000000000000B099                 mov     r12, r8
.text:000000000000B09C                 sub     rsp, 18h
.text:000000000000B0A0                 mov     rax, fs:28h
.text:000000000000B0A9                 mov     [rsp+38h+var_30], rax
.text:000000000000B0AE                 xor     eax, eax
.text:000000000000B0B0                 cmp     edi, 3
.text:000000000000B0B3                 mov     ebp, cs:exit_failure
.text:000000000000B0B9                 ja      short loc_B114
.text:000000000000B0BB                 cmp     edi, 2
.text:000000000000B0BE                 jnb     short loc_B10B
.text:000000000000B0C0                 sub     edi, 1
.text:000000000000B0C3                 lea     rsi, aSSArgumentSToo ; "%s%s argument '%s' too large"
.text:000000000000B0CA                 jnz     short loc_B106
.text:000000000000B0CC
.text:000000000000B0CC loc_B0CC:                               ; CODE XREF: xstrtol_fatal+82↓j
.text:000000000000B0CC                                         ; xstrtol_fatal+8E↓j
.text:000000000000B0CC                 test    r10d, r10d
.text:000000000000B0CF                 movsxd  rax, r10d
.text:000000000000B0D2                 js      short loc_B122
.text:000000000000B0D4                 shl     rax, 5
.text:000000000000B0D8                 lea     rbx, asc_10958  ; "--"
.text:000000000000B0DF                 mov     r13, [rcx+rax]
.text:000000000000B0E3
.text:000000000000B0E3 loc_B0E3:                               ; CODE XREF: xstrtol_fatal+AA↓j
.text:000000000000B0E3                 mov     edx, 5          ; category
.text:000000000000B0E8                 xor     edi, edi        ; domainname
.text:000000000000B0EA                 call    _dcgettext
.text:000000000000B0EF                 mov     r9, r12
.text:000000000000B0F2                 mov     rdx, rax        ; format
.text:000000000000B0F5                 mov     r8, r13
.text:000000000000B0F8                 mov     rcx, rbx
.text:000000000000B0FB                 xor     esi, esi        ; errnum
.text:000000000000B0FD                 mov     edi, ebp        ; status
.text:000000000000B0FF                 xor     eax, eax
.text:000000000000B101                 call    _error
.text:000000000000B106
.text:000000000000B106 loc_B106:                               ; CODE XREF: xstrtol_fatal+3A↑j
.text:000000000000B106                                         ; xstrtol_fatal+90↓j
.text:000000000000B106                 call    _abort
.text:000000000000B10B ; ---------------------------------------------------------------------------
.text:000000000000B10B
.text:000000000000B10B loc_B10B:                               ; CODE XREF: xstrtol_fatal+2E↑j
.text:000000000000B10B                 lea     rsi, aInvalidSuffixI ; "invalid suffix in %s%s argument '%s'"
.text:000000000000B112                 jmp     short loc_B0CC
.text:000000000000B114 ; ---------------------------------------------------------------------------
.text:000000000000B114
.text:000000000000B114 loc_B114:                               ; CODE XREF: xstrtol_fatal+29↑j
.text:000000000000B114                 cmp     edi, 4
.text:000000000000B117                 lea     rsi, aInvalidSSArgum ; "invalid %s%s argument '%s'"
.text:000000000000B11E                 jz      short loc_B0CC
.text:000000000000B120                 jmp     short loc_B106
.text:000000000000B122 ; ---------------------------------------------------------------------------
.text:000000000000B122
.text:000000000000B122 loc_B122:                               ; CODE XREF: xstrtol_fatal+42↑j
.text:000000000000B122                 lea     rbx, asc_10958  ; "--"
.text:000000000000B129                 mov     [rsp+38h+var_32], dl
.text:000000000000B12D                 mov     [rsp+38h+var_31], 0
.text:000000000000B132                 lea     r13, [rsp+38h+var_32]
.text:000000000000B137                 sub     rbx, rax
.text:000000000000B13A                 jmp     short loc_B0E3
.text:000000000000B13A ; } // starts at B090
.text:000000000000B13A xstrtol_fatal   endp
.text:000000000000B13A
.text:000000000000B13A ; ---------------------------------------------------------------------------
.text:000000000000B13C                 align 20h
.text:000000000000B140
.text:000000000000B140 ; =============== S U B R O U T I N E =======================================
.text:000000000000B140
.text:000000000000B140
.text:000000000000B140 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:000000000000B140                 public xstrtoumax
.text:000000000000B140 xstrtoumax      proc near               ; CODE XREF: human_options+AA↑p
.text:000000000000B140
.text:000000000000B140 base            = dword ptr -50h
.text:000000000000B140 endptr          = qword ptr -48h
.text:000000000000B140 var_40          = qword ptr -40h
.text:000000000000B140
.text:000000000000B140 ; __unwind {
.text:000000000000B140                 push    r15
.text:000000000000B142                 push    r14
.text:000000000000B144                 push    r13
.text:000000000000B146                 push    r12
.text:000000000000B148                 push    rbp
.text:000000000000B149                 push    rbx
.text:000000000000B14A                 sub     rsp, 28h
.text:000000000000B14E                 mov     rax, fs:28h
.text:000000000000B157                 mov     [rsp+58h+var_40], rax
.text:000000000000B15C                 xor     eax, eax
.text:000000000000B15E                 cmp     edx, 24h ; '$'
.text:000000000000B161                 ja      loc_B4C5
.text:000000000000B167                 lea     rax, [rsp+58h+endptr]
.text:000000000000B16C                 mov     r15, rsi
.text:000000000000B16F                 test    rsi, rsi
.text:000000000000B172                 mov     rbp, rdi
.text:000000000000B175                 mov     [rsp+58h+base], edx
.text:000000000000B179                 mov     r14, rcx
.text:000000000000B17C                 mov     r13, r8
.text:000000000000B17F                 cmovz   r15, rax
.text:000000000000B183                 call    ___errno_location
.text:000000000000B188                 mov     dword ptr [rax], 0
.text:000000000000B18E                 mov     r12, rax
.text:000000000000B191                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000B195                 call    ___ctype_b_loc
.text:000000000000B19A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000B19E                 mov     rsi, [rax]
.text:000000000000B1A1                 mov     rax, rbp
.text:000000000000B1A4                 jmp     short loc_B1B7
.text:000000000000B1A4 ; ---------------------------------------------------------------------------
.text:000000000000B1A6                 align 10h
.text:000000000000B1B0
.text:000000000000B1B0 loc_B1B0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:000000000000B1B0                 add     rax, 1
.text:000000000000B1B4                 movzx   ebx, byte ptr [rax]
.text:000000000000B1B7
.text:000000000000B1B7 loc_B1B7:                               ; CODE XREF: xstrtoumax+64↑j
.text:000000000000B1B7                 movzx   ecx, bl
.text:000000000000B1BA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000B1BF                 jnz     short loc_B1B0
.text:000000000000B1C1                 cmp     bl, 2Dh ; '-'
.text:000000000000B1C4                 jz      short loc_B218
.text:000000000000B1C6                 xor     ecx, ecx        ; group
.text:000000000000B1C8                 mov     rsi, r15        ; endptr
.text:000000000000B1CB                 mov     rdi, rbp        ; nptr
.text:000000000000B1CE                 call    ___strtoul_internal
.text:000000000000B1D3                 mov     rcx, [r15]
.text:000000000000B1D6                 mov     rbx, rax
.text:000000000000B1D9                 cmp     rcx, rbp
.text:000000000000B1DC                 jz      short loc_B208
.text:000000000000B1DE                 mov     eax, [r12]
.text:000000000000B1E2                 test    eax, eax
.text:000000000000B1E4                 jz      short loc_B248
.text:000000000000B1E6                 cmp     eax, 22h ; '"'
.text:000000000000B1E9                 mov     ebp, 1
.text:000000000000B1EE                 jnz     short loc_B218
.text:000000000000B1F0
.text:000000000000B1F0 loc_B1F0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:000000000000B1F0                 test    r13, r13
.text:000000000000B1F3                 jz      short loc_B1FE
.text:000000000000B1F5                 movzx   r12d, byte ptr [rcx]
.text:000000000000B1F9                 test    r12b, r12b
.text:000000000000B1FC                 jnz     short loc_B277
.text:000000000000B1FE
.text:000000000000B1FE loc_B1FE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000B1FE                 mov     [r14], rbx
.text:000000000000B201                 jmp     short loc_B21D
.text:000000000000B201 ; ---------------------------------------------------------------------------
.text:000000000000B203                 align 8
.text:000000000000B208
.text:000000000000B208 loc_B208:                               ; CODE XREF: xstrtoumax+9C↑j
.text:000000000000B208                 test    r13, r13
.text:000000000000B20B                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000B210                 jnz     short loc_B250
.text:000000000000B212                 nop     word ptr [rax+rax+00h]
.text:000000000000B218
.text:000000000000B218 loc_B218:                               ; CODE XREF: xstrtoumax+84↑j
.text:000000000000B218                                         ; xstrtoumax+AE↑j ...
.text:000000000000B218                 mov     ebp, 4
.text:000000000000B21D
.text:000000000000B21D loc_B21D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000B21D                                         ; xstrtoumax+217↓j ...
.text:000000000000B21D                 mov     rdi, [rsp+58h+var_40]
.text:000000000000B222                 xor     rdi, fs:28h
.text:000000000000B22B                 mov     eax, ebp
.text:000000000000B22D                 jnz     loc_B4C0
.text:000000000000B233                 add     rsp, 28h
.text:000000000000B237                 pop     rbx
.text:000000000000B238                 pop     rbp
.text:000000000000B239                 pop     r12
.text:000000000000B23B                 pop     r13
.text:000000000000B23D                 pop     r14
.text:000000000000B23F                 pop     r15
.text:000000000000B241                 retn
.text:000000000000B241 ; ---------------------------------------------------------------------------
.text:000000000000B242                 align 8
.text:000000000000B248
.text:000000000000B248 loc_B248:                               ; CODE XREF: xstrtoumax+A4↑j
.text:000000000000B248                 xor     ebp, ebp
.text:000000000000B24A                 jmp     short loc_B1F0
.text:000000000000B24A ; ---------------------------------------------------------------------------
.text:000000000000B24C                 align 10h
.text:000000000000B250
.text:000000000000B250 loc_B250:                               ; CODE XREF: xstrtoumax+D0↑j
.text:000000000000B250                 movzx   r12d, byte ptr [rbp+0]
.text:000000000000B255                 test    r12b, r12b
.text:000000000000B258                 jz      short loc_B218
.text:000000000000B25A                 movsx   esi, r12b       ; c
.text:000000000000B25E                 mov     rdi, r13        ; s
.text:000000000000B261                 xor     ebp, ebp
.text:000000000000B263                 call    _strchr
.text:000000000000B268                 test    rax, rax
.text:000000000000B26B                 mov     ebx, 1
.text:000000000000B270                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000B275                 jz      short loc_B218
.text:000000000000B277
.text:000000000000B277 loc_B277:                               ; CODE XREF: xstrtoumax+BC↑j
.text:000000000000B277                 movsx   esi, r12b       ; c
.text:000000000000B27B                 mov     rdi, r13        ; s
.text:000000000000B27E                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000B283                 call    _strchr
.text:000000000000B288                 test    rax, rax
.text:000000000000B28B                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000B290                 jz      def_B316        ; jumptable 000000000000B316 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000B296                 lea     eax, [r12-45h]
.text:000000000000B29B                 cmp     al, 2Fh ; '/'
.text:000000000000B29D                 ja      short loc_B2F0
.text:000000000000B29F                 mov     rdx, 814400308945h
.text:000000000000B2A9                 bt      rdx, rax
.text:000000000000B2AD                 jnb     short loc_B2F0
.text:000000000000B2AF                 mov     esi, 30h ; '0'  ; c
.text:000000000000B2B4                 mov     rdi, r13        ; s
.text:000000000000B2B7                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000B2BC                 call    _strchr
.text:000000000000B2C1                 test    rax, rax
.text:000000000000B2C4                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000B2C9                 jz      short loc_B2F0
.text:000000000000B2CB                 movzx   eax, byte ptr [rcx+1]
.text:000000000000B2CF                 cmp     al, 44h ; 'D'
.text:000000000000B2D1                 jz      short loc_B2DF
.text:000000000000B2D3                 cmp     al, 69h ; 'i'
.text:000000000000B2D5                 jz      loc_B4A8
.text:000000000000B2DB                 cmp     al, 42h ; 'B'
.text:000000000000B2DD                 jnz     short loc_B2F0
.text:000000000000B2DF
.text:000000000000B2DF loc_B2DF:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000B2DF                 mov     edi, 2
.text:000000000000B2E4                 mov     esi, 3E8h
.text:000000000000B2E9                 jmp     short loc_B2FA
.text:000000000000B2E9 ; ---------------------------------------------------------------------------
.text:000000000000B2EB                 align 10h
.text:000000000000B2F0
.text:000000000000B2F0 loc_B2F0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:000000000000B2F0                                         ; xstrtoumax+16D↑j ...
.text:000000000000B2F0                 mov     edi, 1
.text:000000000000B2F5                 mov     esi, 400h
.text:000000000000B2FA
.text:000000000000B2FA loc_B2FA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000B2FA                                         ; xstrtoumax+37B↓j
.text:000000000000B2FA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000B2FE                 cmp     r12b, 35h
.text:000000000000B302                 ja      short def_B316  ; jumptable 000000000000B316 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000B304                 lea     rdx, jpt_B316
.text:000000000000B30B                 movzx   r12d, r12b
.text:000000000000B30F                 movsxd  rax, ds:(jpt_B316 - 109D0h)[rdx+r12*4]
.text:000000000000B313                 add     rax, rdx
.text:000000000000B316                 jmp     rax             ; switch jump
.text:000000000000B318 ; ---------------------------------------------------------------------------
.text:000000000000B318
.text:000000000000B318 loc_B318:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B318                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B318                 mov     rax, rbx        ; jumptable 000000000000B316 cases 77,109
.text:000000000000B31B                 mul     rsi
.text:000000000000B31E                 jo      loc_B511
.text:000000000000B324                 xor     r8d, r8d
.text:000000000000B327
.text:000000000000B327 loc_B327:                               ; CODE XREF: xstrtoumax+34E↓j
.text:000000000000B327                                         ; xstrtoumax+35E↓j ...
.text:000000000000B327                 mul     rsi
.text:000000000000B32A                 jo      loc_B502
.text:000000000000B330                 mov     rbx, rax
.text:000000000000B333
.text:000000000000B333 loc_B333:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:000000000000B333                 or      ebp, r8d
.text:000000000000B336                 db      2Eh
.text:000000000000B336                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B340
.text:000000000000B340 loc_B340:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B340                                         ; xstrtoumax+23B↓j ...
.text:000000000000B340                 movsxd  rdi, edi        ; jumptable 000000000000B316 case 99
.text:000000000000B343                 mov     eax, ebp
.text:000000000000B345                 add     rcx, rdi
.text:000000000000B348                 or      eax, 2
.text:000000000000B34B                 mov     [r15], rcx
.text:000000000000B34E                 cmp     byte ptr [rcx], 0
.text:000000000000B351                 mov     [r14], rbx
.text:000000000000B354                 cmovnz  ebp, eax
.text:000000000000B357                 jmp     loc_B21D
.text:000000000000B35C ; ---------------------------------------------------------------------------
.text:000000000000B35C
.text:000000000000B35C def_B316:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000B35C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000B35C                 mov     [r14], rbx      ; jumptable 000000000000B316 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000B35F                 or      ebp, 2
.text:000000000000B362                 jmp     loc_B21D
.text:000000000000B367 ; ---------------------------------------------------------------------------
.text:000000000000B367
.text:000000000000B367 loc_B367:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B367                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B367                 mov     edx, 2          ; jumptable 000000000000B316 case 119
.text:000000000000B36C                 mov     rax, rdx
.text:000000000000B36F                 mul     rbx
.text:000000000000B372                 jo      loc_B40E
.text:000000000000B378                 add     rbx, rbx
.text:000000000000B37B                 jmp     short loc_B340  ; jumptable 000000000000B316 case 99
.text:000000000000B37D ; ---------------------------------------------------------------------------
.text:000000000000B37D
.text:000000000000B37D loc_B37D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B37D                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B37D                 mov     edx, 200h       ; jumptable 000000000000B316 case 98
.text:000000000000B382                 mov     rax, rdx
.text:000000000000B385                 mul     rbx
.text:000000000000B388                 jo      loc_B40E
.text:000000000000B38E                 shl     rbx, 9
.text:000000000000B392                 jmp     short loc_B340  ; jumptable 000000000000B316 case 99
.text:000000000000B394 ; ---------------------------------------------------------------------------
.text:000000000000B394
.text:000000000000B394 loc_B394:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B394                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B394                 mov     r8d, 7          ; jumptable 000000000000B316 case 90
.text:000000000000B39A                 xor     r9d, r9d
.text:000000000000B39D                 nop     dword ptr [rax]
.text:000000000000B3A0
.text:000000000000B3A0 loc_B3A0:                               ; CODE XREF: xstrtoumax+273↓j
.text:000000000000B3A0                 mov     rax, rbx
.text:000000000000B3A3                 mul     rsi
.text:000000000000B3A6                 mov     rbx, rax
.text:000000000000B3A9                 jo      loc_B53E
.text:000000000000B3AF
.text:000000000000B3AF loc_B3AF:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000B3AF                 sub     r8d, 1
.text:000000000000B3B3                 jnz     short loc_B3A0
.text:000000000000B3B5
.text:000000000000B3B5 loc_B3B5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:000000000000B3B5                                         ; xstrtoumax+2BD↓j ...
.text:000000000000B3B5                 or      ebp, r9d
.text:000000000000B3B8                 jmp     short loc_B340  ; jumptable 000000000000B316 case 99
.text:000000000000B3BA ; ---------------------------------------------------------------------------
.text:000000000000B3BA
.text:000000000000B3BA loc_B3BA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B3BA                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B3BA                 mov     r8d, 8          ; jumptable 000000000000B316 case 89
.text:000000000000B3C0                 xor     r9d, r9d
.text:000000000000B3C3                 nop     dword ptr [rax+rax+00h]
.text:000000000000B3C8
.text:000000000000B3C8 loc_B3C8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:000000000000B3C8                 mov     rax, rbx
.text:000000000000B3CB                 mul     rsi
.text:000000000000B3CE                 mov     rbx, rax
.text:000000000000B3D1                 jo      loc_B520
.text:000000000000B3D7
.text:000000000000B3D7 loc_B3D7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:000000000000B3D7                 sub     r8d, 1
.text:000000000000B3DB                 jnz     short loc_B3C8
.text:000000000000B3DD                 jmp     short loc_B3B5
.text:000000000000B3DF ; ---------------------------------------------------------------------------
.text:000000000000B3DF
.text:000000000000B3DF loc_B3DF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B3DF                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B3DF                 mov     r8d, 4          ; jumptable 000000000000B316 cases 84,116
.text:000000000000B3E5                 xor     r9d, r9d
.text:000000000000B3E8
.text:000000000000B3E8 loc_B3E8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:000000000000B3E8                 mov     rax, rbx
.text:000000000000B3EB                 mul     rsi
.text:000000000000B3EE                 mov     rbx, rax
.text:000000000000B3F1                 jo      loc_B4F3
.text:000000000000B3F7
.text:000000000000B3F7 loc_B3F7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:000000000000B3F7                 sub     r8d, 1
.text:000000000000B3FB                 jnz     short loc_B3E8
.text:000000000000B3FD                 jmp     short loc_B3B5
.text:000000000000B3FF ; ---------------------------------------------------------------------------
.text:000000000000B3FF
.text:000000000000B3FF loc_B3FF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B3FF                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B3FF                 mov     rax, rbx        ; jumptable 000000000000B316 cases 75,107
.text:000000000000B402                 mul     rsi
.text:000000000000B405                 mov     rbx, rax
.text:000000000000B408                 jno     loc_B340        ; jumptable 000000000000B316 case 99
.text:000000000000B40E
.text:000000000000B40E loc_B40E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000B40E                                         ; xstrtoumax+248↑j ...
.text:000000000000B40E                 mov     ebp, 1
.text:000000000000B413                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B417                 jmp     loc_B340        ; jumptable 000000000000B316 case 99
.text:000000000000B417 ; ---------------------------------------------------------------------------
.text:000000000000B41C                 align 20h
.text:000000000000B420
.text:000000000000B420 loc_B420:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B420                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B420                 mov     r8d, 5          ; jumptable 000000000000B316 case 80
.text:000000000000B426                 xor     r9d, r9d
.text:000000000000B429
.text:000000000000B429 loc_B429:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:000000000000B429                 mov     rax, rbx
.text:000000000000B42C                 mul     rsi
.text:000000000000B42F                 mov     rbx, rax
.text:000000000000B432                 jo      loc_B52F
.text:000000000000B438
.text:000000000000B438 loc_B438:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:000000000000B438                 sub     r8d, 1
.text:000000000000B43C                 jnz     short loc_B429
.text:000000000000B43E                 jmp     loc_B3B5
.text:000000000000B443 ; ---------------------------------------------------------------------------
.text:000000000000B443
.text:000000000000B443 loc_B443:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B443                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B443                 mov     r8d, 6          ; jumptable 000000000000B316 case 69
.text:000000000000B449                 xor     r9d, r9d
.text:000000000000B44C
.text:000000000000B44C loc_B44C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000B44C                 mov     rax, rbx
.text:000000000000B44F                 mul     rsi
.text:000000000000B452                 mov     rbx, rax
.text:000000000000B455                 jo      loc_B4E4
.text:000000000000B45B
.text:000000000000B45B loc_B45B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000B45B                 sub     r8d, 1
.text:000000000000B45F                 jnz     short loc_B44C
.text:000000000000B461                 jmp     loc_B3B5
.text:000000000000B466 ; ---------------------------------------------------------------------------
.text:000000000000B466
.text:000000000000B466 loc_B466:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B466                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B466                 mov     edx, 400h       ; jumptable 000000000000B316 case 66
.text:000000000000B46B                 mov     rax, rdx
.text:000000000000B46E                 mul     rbx
.text:000000000000B471                 jo      short loc_B40E
.text:000000000000B473                 shl     rbx, 0Ah
.text:000000000000B477                 jmp     loc_B340        ; jumptable 000000000000B316 case 99
.text:000000000000B47C ; ---------------------------------------------------------------------------
.text:000000000000B47C
.text:000000000000B47C loc_B47C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B47C                                         ; DATA XREF: .rodata:jpt_B316↓o
.text:000000000000B47C                 mov     rax, rbx        ; jumptable 000000000000B316 cases 71,103
.text:000000000000B47F                 mul     rsi
.text:000000000000B482                 jo      loc_B54D
.text:000000000000B488                 xor     r8d, r8d
.text:000000000000B48B
.text:000000000000B48B loc_B48B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000B48B                 mul     rsi
.text:000000000000B48E                 jno     loc_B327
.text:000000000000B494                 mov     r8d, 1
.text:000000000000B49A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B49E                 jmp     loc_B327
.text:000000000000B49E ; ---------------------------------------------------------------------------
.text:000000000000B4A3                 align 8
.text:000000000000B4A8
.text:000000000000B4A8 loc_B4A8:                               ; CODE XREF: xstrtoumax+195↑j
.text:000000000000B4A8                 xor     edi, edi
.text:000000000000B4AA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000B4AE                 mov     esi, 400h
.text:000000000000B4B3                 setz    dil
.text:000000000000B4B7                 lea     edi, [rdi+rdi+1]
.text:000000000000B4BB                 jmp     loc_B2FA
.text:000000000000B4C0 ; ---------------------------------------------------------------------------
.text:000000000000B4C0
.text:000000000000B4C0 loc_B4C0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:000000000000B4C0                 call    ___stack_chk_fail
.text:000000000000B4C5 ; ---------------------------------------------------------------------------
.text:000000000000B4C5
.text:000000000000B4C5 loc_B4C5:                               ; CODE XREF: xstrtoumax+21↑j
.text:000000000000B4C5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:000000000000B4CC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000B4D3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000B4DA                 mov     edx, 54h ; 'T'  ; line
.text:000000000000B4DF                 call    ___assert_fail
.text:000000000000B4E4 ; ---------------------------------------------------------------------------
.text:000000000000B4E4
.text:000000000000B4E4 loc_B4E4:                               ; CODE XREF: xstrtoumax+315↑j
.text:000000000000B4E4                 mov     r9d, 1
.text:000000000000B4EA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B4EE                 jmp     loc_B45B
.text:000000000000B4F3 ; ---------------------------------------------------------------------------
.text:000000000000B4F3
.text:000000000000B4F3 loc_B4F3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:000000000000B4F3                 mov     r9d, 1
.text:000000000000B4F9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B4FD                 jmp     loc_B3F7
.text:000000000000B502 ; ---------------------------------------------------------------------------
.text:000000000000B502
.text:000000000000B502 loc_B502:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:000000000000B502                 mov     r8d, 1
.text:000000000000B508                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B50C                 jmp     loc_B333
.text:000000000000B511 ; ---------------------------------------------------------------------------
.text:000000000000B511
.text:000000000000B511 loc_B511:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:000000000000B511                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B515                 mov     r8d, 1
.text:000000000000B51B                 jmp     loc_B327
.text:000000000000B520 ; ---------------------------------------------------------------------------
.text:000000000000B520
.text:000000000000B520 loc_B520:                               ; CODE XREF: xstrtoumax+291↑j
.text:000000000000B520                 mov     r9d, 1
.text:000000000000B526                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B52A                 jmp     loc_B3D7
.text:000000000000B52F ; ---------------------------------------------------------------------------
.text:000000000000B52F
.text:000000000000B52F loc_B52F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000B52F                 mov     r9d, 1
.text:000000000000B535                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B539                 jmp     loc_B438
.text:000000000000B53E ; ---------------------------------------------------------------------------
.text:000000000000B53E
.text:000000000000B53E loc_B53E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000B53E                 mov     r9d, 1
.text:000000000000B544                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B548                 jmp     loc_B3AF
.text:000000000000B54D ; ---------------------------------------------------------------------------
.text:000000000000B54D
.text:000000000000B54D loc_B54D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000B54D                 mov     r8d, 1
.text:000000000000B553                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B557                 jmp     loc_B48B
.text:000000000000B557 ; } // starts at B140
.text:000000000000B557 xstrtoumax      endp
.text:000000000000B557
.text:000000000000B557 ; ---------------------------------------------------------------------------
.text:000000000000B55C                 align 20h
.text:000000000000B560
.text:000000000000B560 ; =============== S U B R O U T I N E =======================================
.text:000000000000B560
.text:000000000000B560 ; Attributes: info_from_lumina
.text:000000000000B560
.text:000000000000B560 ; int gzprintf(gzFile_0 file, const char *format, ...)
.text:000000000000B560                 public gzprintf
.text:000000000000B560 gzprintf        proc near               ; CODE XREF: get_header+161↑p
.text:000000000000B560                                         ; get_dev+683↑p
.text:000000000000B560
.text:000000000000B560 var_D8          = dword ptr -0D8h
.text:000000000000B560 var_D4          = dword ptr -0D4h
.text:000000000000B560 var_D0          = qword ptr -0D0h
.text:000000000000B560 var_C8          = qword ptr -0C8h
.text:000000000000B560 var_C0          = qword ptr -0C0h
.text:000000000000B560 var_B8          = byte ptr -0B8h
.text:000000000000B560 var_A8          = qword ptr -0A8h
.text:000000000000B560 var_A0          = qword ptr -0A0h
.text:000000000000B560 var_98          = qword ptr -98h
.text:000000000000B560 var_90          = qword ptr -90h
.text:000000000000B560 var_88          = xmmword ptr -88h
.text:000000000000B560 var_78          = xmmword ptr -78h
.text:000000000000B560 var_68          = xmmword ptr -68h
.text:000000000000B560 var_58          = xmmword ptr -58h
.text:000000000000B560 var_48          = xmmword ptr -48h
.text:000000000000B560 var_38          = xmmword ptr -38h
.text:000000000000B560 var_28          = xmmword ptr -28h
.text:000000000000B560 var_18          = xmmword ptr -18h
.text:000000000000B560 arg_0           = byte ptr  8
.text:000000000000B560
.text:000000000000B560 ; __unwind {
.text:000000000000B560                 sub     rsp, 0D8h
.text:000000000000B567                 test    al, al
.text:000000000000B569                 mov     [rsp+0D8h+var_A8], rdx
.text:000000000000B56E                 mov     [rsp+0D8h+var_A0], rcx
.text:000000000000B573                 mov     [rsp+0D8h+var_98], r8
.text:000000000000B578                 mov     [rsp+0D8h+var_90], r9
.text:000000000000B57D                 jz      short loc_B5B6
.text:000000000000B57F                 movaps  [rsp+0D8h+var_88], xmm0
.text:000000000000B584                 movaps  [rsp+0D8h+var_78], xmm1
.text:000000000000B589                 movaps  [rsp+0D8h+var_68], xmm2
.text:000000000000B58E                 movaps  [rsp+0D8h+var_58], xmm3
.text:000000000000B596                 movaps  [rsp+0D8h+var_48], xmm4
.text:000000000000B59E                 movaps  [rsp+0D8h+var_38], xmm5
.text:000000000000B5A6                 movaps  [rsp+0D8h+var_28], xmm6
.text:000000000000B5AE                 movaps  [rsp+0D8h+var_18], xmm7
.text:000000000000B5B6
.text:000000000000B5B6 loc_B5B6:                               ; CODE XREF: gzprintf+1D↑j
.text:000000000000B5B6                 mov     rax, fs:28h
.text:000000000000B5BF                 mov     [rsp+0D8h+var_C0], rax
.text:000000000000B5C4                 xor     eax, eax
.text:000000000000B5C6                 lea     rax, [rsp+0D8h+arg_0]
.text:000000000000B5CE                 mov     rdx, rsp
.text:000000000000B5D1                 mov     [rsp+0D8h+var_D0], rax
.text:000000000000B5D6                 lea     rax, [rsp+0D8h+var_B8]
.text:000000000000B5DB                 mov     [rsp+0D8h+var_D8], 10h
.text:000000000000B5E2                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:000000000000B5EA                 mov     [rsp+0D8h+var_C8], rax
.text:000000000000B5EF                 call    u16_u16_vasprintf
.text:000000000000B5F4                 mov     rcx, [rsp+0D8h+var_C0]
.text:000000000000B5F9                 xor     rcx, fs:28h
.text:000000000000B602                 jnz     short loc_B60C
.text:000000000000B604                 add     rsp, 0D8h
.text:000000000000B60B                 retn
.text:000000000000B60C ; ---------------------------------------------------------------------------
.text:000000000000B60C
.text:000000000000B60C loc_B60C:                               ; CODE XREF: gzprintf+A2↑j
.text:000000000000B60C                 call    ___stack_chk_fail
.text:000000000000B60C ; } // starts at B560
.text:000000000000B60C gzprintf        endp
.text:000000000000B60C
.text:000000000000B60C ; ---------------------------------------------------------------------------
.text:000000000000B611                 align 20h
.text:000000000000B620
.text:000000000000B620 ; =============== S U B R O U T I N E =======================================
.text:000000000000B620
.text:000000000000B620
.text:000000000000B620 cdb_free        proc near               ; CODE XREF: cdb_advance_fd+20↓p
.text:000000000000B620                                         ; chdir_long+1CE↓p ...
.text:000000000000B620 ; __unwind {
.text:000000000000B620                 mov     edi, [rdi]      ; fd
.text:000000000000B622                 test    edi, edi
.text:000000000000B624                 js      short locret_B640
.text:000000000000B626                 sub     rsp, 8
.text:000000000000B62A                 call    _close
.text:000000000000B62F                 test    eax, eax
.text:000000000000B631                 jnz     short loc_B642
.text:000000000000B633                 add     rsp, 8
.text:000000000000B637                 retn
.text:000000000000B637 ; ---------------------------------------------------------------------------
.text:000000000000B638                 align 20h
.text:000000000000B640
.text:000000000000B640 locret_B640:                            ; CODE XREF: cdb_free+4↑j
.text:000000000000B640                 rep retn
.text:000000000000B642 ; ---------------------------------------------------------------------------
.text:000000000000B642
.text:000000000000B642 loc_B642:                               ; CODE XREF: cdb_free+11↑j
.text:000000000000B642                 lea     rcx, __PRETTY_FUNCTION___5081 ; "cdb_free"
.text:000000000000B649                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000B650                 lea     rdi, aCloseFail ; "! close_fail"
.text:000000000000B657                 mov     edx, 40h ; '@'  ; line
.text:000000000000B65C                 call    ___assert_fail
.text:000000000000B65C ; } // starts at B620
.text:000000000000B65C cdb_free        endp
.text:000000000000B65C
.text:000000000000B65C ; ---------------------------------------------------------------------------
.text:000000000000B661                 align 10h
.text:000000000000B670
.text:000000000000B670 ; =============== S U B R O U T I N E =======================================
.text:000000000000B670
.text:000000000000B670
.text:000000000000B670 cdb_advance_fd  proc near               ; CODE XREF: chdir_long+103↓p
.text:000000000000B670                                         ; chdir_long+199↓p ...
.text:000000000000B670 ; __unwind {
.text:000000000000B670                 push    rbp
.text:000000000000B671                 push    rbx
.text:000000000000B672                 mov     rbx, rdi
.text:000000000000B675                 xor     eax, eax
.text:000000000000B677                 mov     edx, 10900h     ; oflag
.text:000000000000B67C                 sub     rsp, 8
.text:000000000000B680                 mov     edi, [rdi]      ; fd
.text:000000000000B682                 call    _openat
.text:000000000000B687                 test    eax, eax
.text:000000000000B689                 js      short loc_B6A0
.text:000000000000B68B                 mov     ebp, eax
.text:000000000000B68D                 mov     rdi, rbx
.text:000000000000B690                 call    cdb_free
.text:000000000000B695                 mov     [rbx], ebp
.text:000000000000B697                 xor     eax, eax
.text:000000000000B699
.text:000000000000B699 loc_B699:                               ; CODE XREF: cdb_advance_fd+35↓j
.text:000000000000B699                 add     rsp, 8
.text:000000000000B69D                 pop     rbx
.text:000000000000B69E                 pop     rbp
.text:000000000000B69F                 retn
.text:000000000000B6A0 ; ---------------------------------------------------------------------------
.text:000000000000B6A0
.text:000000000000B6A0 loc_B6A0:                               ; CODE XREF: cdb_advance_fd+19↑j
.text:000000000000B6A0                 mov     eax, 0FFFFFFFFh
.text:000000000000B6A5                 jmp     short loc_B699
.text:000000000000B6A5 ; } // starts at B670
.text:000000000000B6A5 cdb_advance_fd  endp
.text:000000000000B6A5
.text:000000000000B6A5 ; ---------------------------------------------------------------------------
.text:000000000000B6A7                 align 10h
.text:000000000000B6B0
.text:000000000000B6B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6B0
.text:000000000000B6B0 ; Attributes: info_from_lumina
.text:000000000000B6B0
.text:000000000000B6B0 ; __int64 __fastcall chdir_long(void *s)
.text:000000000000B6B0                 public chdir_long
.text:000000000000B6B0 chdir_long      proc near               ; CODE XREF: restore_cwd+14↑j
.text:000000000000B6B0
.text:000000000000B6B0 fd              = dword ptr -44h
.text:000000000000B6B0 var_40          = qword ptr -40h
.text:000000000000B6B0
.text:000000000000B6B0 ; __unwind {
.text:000000000000B6B0                 push    r15
.text:000000000000B6B2                 push    r14
.text:000000000000B6B4                 push    r13
.text:000000000000B6B6                 push    r12
.text:000000000000B6B8                 push    rbp
.text:000000000000B6B9                 push    rbx
.text:000000000000B6BA                 mov     rbp, rdi
.text:000000000000B6BD                 sub     rsp, 18h
.text:000000000000B6C1                 mov     rax, fs:28h
.text:000000000000B6CA                 mov     [rsp+48h+var_40], rax
.text:000000000000B6CF                 xor     eax, eax
.text:000000000000B6D1                 call    _chdir          ; PIC mode
.text:000000000000B6D6                 test    eax, eax
.text:000000000000B6D8                 mov     ebx, eax
.text:000000000000B6DA                 jz      short loc_B6E9
.text:000000000000B6DC                 call    ___errno_location ; PIC mode
.text:000000000000B6E1                 cmp     dword ptr [rax], 24h ; '$'
.text:000000000000B6E4                 mov     r14, rax
.text:000000000000B6E7                 jz      short loc_B710
.text:000000000000B6E9
.text:000000000000B6E9 loc_B6E9:                               ; CODE XREF: chdir_long+2A↑j
.text:000000000000B6E9                                         ; chdir_long+162↓j ...
.text:000000000000B6E9                 mov     rcx, [rsp+48h+var_40]
.text:000000000000B6EE                 xor     rcx, fs:28h
.text:000000000000B6F7                 mov     eax, ebx
.text:000000000000B6F9                 jnz     loc_B901
.text:000000000000B6FF                 add     rsp, 18h
.text:000000000000B703                 pop     rbx
.text:000000000000B704                 pop     rbp
.text:000000000000B705                 pop     r12
.text:000000000000B707                 pop     r13
.text:000000000000B709                 pop     r14
.text:000000000000B70B                 pop     r15
.text:000000000000B70D                 retn
.text:000000000000B70D ; ---------------------------------------------------------------------------
.text:000000000000B70E                 align 10h
.text:000000000000B710
.text:000000000000B710 loc_B710:                               ; CODE XREF: chdir_long+37↑j
.text:000000000000B710                 mov     rdi, rbp        ; s
.text:000000000000B713                 call    _strlen         ; PIC mode
.text:000000000000B718                 test    rax, rax
.text:000000000000B71B                 mov     r12, rax
.text:000000000000B71E                 mov     [rsp+48h+fd], 0FFFFFF9Ch
.text:000000000000B726                 jz      loc_B906
.text:000000000000B72C                 cmp     rax, 0FFFh
.text:000000000000B732                 jbe     loc_B925
.text:000000000000B738                 lea     rsi, aLibs+6    ; accept
.text:000000000000B73F                 mov     rdi, rbp        ; s
.text:000000000000B742                 call    _strspn         ; PIC mode
.text:000000000000B747                 cmp     rax, 2
.text:000000000000B74B                 mov     rbx, rax
.text:000000000000B74E                 jz      loc_B820
.text:000000000000B754                 test    rax, rax
.text:000000000000B757                 mov     r15, rbp
.text:000000000000B75A                 jnz     loc_B8C0
.text:000000000000B760
.text:000000000000B760 loc_B760:                               ; CODE XREF: chdir_long+1BC↓j
.text:000000000000B760                                         ; chdir_long+22D↓j
.text:000000000000B760                 cmp     byte ptr [r15], 2Fh ; '/'
.text:000000000000B764                 jz      loc_B963
.text:000000000000B76A                 add     rbp, r12
.text:000000000000B76D                 cmp     r15, rbp
.text:000000000000B770                 ja      loc_B944
.text:000000000000B776                 mov     rax, rbp
.text:000000000000B779                 lea     r12, [rsp+48h+fd]
.text:000000000000B77E                 sub     rax, r15
.text:000000000000B781                 cmp     rax, 0FFFh
.text:000000000000B787                 mov     r13, r12
.text:000000000000B78A                 jg      short loc_B7EC
.text:000000000000B78C                 jmp     loc_B890
.text:000000000000B78C ; ---------------------------------------------------------------------------
.text:000000000000B791                 align 8
.text:000000000000B798
.text:000000000000B798 loc_B798:                               ; CODE XREF: chdir_long+154↓j
.text:000000000000B798                 mov     byte ptr [rax], 0
.text:000000000000B79B                 sub     rax, r15
.text:000000000000B79E                 cmp     rax, 0FFFh
.text:000000000000B7A4                 jg      loc_B8E2
.text:000000000000B7AA                 mov     rsi, r15
.text:000000000000B7AD                 mov     rdi, r12
.text:000000000000B7B0                 mov     r13, r12
.text:000000000000B7B3                 call    cdb_advance_fd
.text:000000000000B7B8                 test    eax, eax
.text:000000000000B7BA                 mov     byte ptr [rbx], 2Fh ; '/'
.text:000000000000B7BD                 jnz     loc_B878
.text:000000000000B7C3                 add     rbx, 1
.text:000000000000B7C7                 lea     rsi, aLibs+6    ; accept
.text:000000000000B7CE                 mov     rdi, rbx        ; s
.text:000000000000B7D1                 call    _strspn         ; PIC mode
.text:000000000000B7D6                 lea     r15, [rbx+rax]
.text:000000000000B7DA                 mov     rax, rbp
.text:000000000000B7DD                 sub     rax, r15
.text:000000000000B7E0                 cmp     rax, 0FFFh
.text:000000000000B7E6                 jle     loc_B890
.text:000000000000B7EC
.text:000000000000B7EC loc_B7EC:                               ; CODE XREF: chdir_long+DA↑j
.text:000000000000B7EC                 mov     edx, 1000h      ; n
.text:000000000000B7F1                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000B7F6                 mov     rdi, r15        ; s
.text:000000000000B7F9                 call    _memrchr        ; PIC mode
.text:000000000000B7FE                 test    rax, rax
.text:000000000000B801                 mov     rbx, rax
.text:000000000000B804                 jnz     short loc_B798
.text:000000000000B806                 mov     dword ptr [r14], 24h ; '$'
.text:000000000000B80D                 mov     ebx, 0FFFFFFFFh
.text:000000000000B812                 jmp     loc_B6E9
.text:000000000000B812 ; ---------------------------------------------------------------------------
.text:000000000000B817                 align 20h
.text:000000000000B820
.text:000000000000B820 loc_B820:                               ; CODE XREF: chdir_long+9E↑j
.text:000000000000B820                 lea     rdx, [r12-3]    ; n
.text:000000000000B825                 lea     rdi, [rbp+3]    ; s
.text:000000000000B829                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000B82E                 call    _memchr         ; PIC mode
.text:000000000000B833                 test    rax, rax
.text:000000000000B836                 mov     rbx, rax
.text:000000000000B839                 jz      short loc_B886
.text:000000000000B83B                 lea     r13, [rsp+48h+fd]
.text:000000000000B840                 mov     byte ptr [rax], 0
.text:000000000000B843                 mov     rsi, rbp
.text:000000000000B846                 mov     rdi, r13
.text:000000000000B849                 call    cdb_advance_fd
.text:000000000000B84E                 test    eax, eax
.text:000000000000B850                 mov     byte ptr [rbx], 2Fh ; '/'
.text:000000000000B853                 jnz     short loc_B878
.text:000000000000B855                 add     rbx, 1
.text:000000000000B859                 lea     rsi, aLibs+6    ; accept
.text:000000000000B860                 mov     rdi, rbx        ; s
.text:000000000000B863                 call    _strspn         ; PIC mode
.text:000000000000B868                 lea     r15, [rbx+rax]
.text:000000000000B86C                 jmp     loc_B760
.text:000000000000B86C ; ---------------------------------------------------------------------------
.text:000000000000B871                 align 8
.text:000000000000B878
.text:000000000000B878 loc_B878:                               ; CODE XREF: chdir_long+10D↑j
.text:000000000000B878                                         ; chdir_long+1A3↑j ...
.text:000000000000B878                 mov     ebx, [r14]
.text:000000000000B87B                 mov     rdi, r13
.text:000000000000B87E                 call    cdb_free
.text:000000000000B883                 mov     [r14], ebx
.text:000000000000B886
.text:000000000000B886 loc_B886:                               ; CODE XREF: chdir_long+189↑j
.text:000000000000B886                 mov     ebx, 0FFFFFFFFh
.text:000000000000B88B                 jmp     loc_B6E9
.text:000000000000B890 ; ---------------------------------------------------------------------------
.text:000000000000B890
.text:000000000000B890 loc_B890:                               ; CODE XREF: chdir_long+DC↑j
.text:000000000000B890                                         ; chdir_long+136↑j
.text:000000000000B890                 cmp     rbp, r15
.text:000000000000B893                 jbe     short loc_B8A4
.text:000000000000B895                 mov     rsi, r15
.text:000000000000B898                 mov     rdi, r13
.text:000000000000B89B                 call    cdb_advance_fd
.text:000000000000B8A0                 test    eax, eax
.text:000000000000B8A2                 jnz     short loc_B878
.text:000000000000B8A4
.text:000000000000B8A4 loc_B8A4:                               ; CODE XREF: chdir_long+1E3↑j
.text:000000000000B8A4                 mov     edi, [rsp+48h+fd] ; fd
.text:000000000000B8A8                 call    _fchdir         ; PIC mode
.text:000000000000B8AD                 test    eax, eax
.text:000000000000B8AF                 mov     ebx, eax
.text:000000000000B8B1                 jnz     short loc_B878
.text:000000000000B8B3                 mov     rdi, r13
.text:000000000000B8B6                 call    cdb_free
.text:000000000000B8BB                 jmp     loc_B6E9
.text:000000000000B8C0 ; ---------------------------------------------------------------------------
.text:000000000000B8C0
.text:000000000000B8C0 loc_B8C0:                               ; CODE XREF: chdir_long+AA↑j
.text:000000000000B8C0                 lea     r13, [rsp+48h+fd]
.text:000000000000B8C5                 lea     rsi, aLibs+6    ; "/"
.text:000000000000B8CC                 mov     rdi, r13
.text:000000000000B8CF                 call    cdb_advance_fd
.text:000000000000B8D4                 test    eax, eax
.text:000000000000B8D6                 jnz     short loc_B878
.text:000000000000B8D8                 lea     r15, [rbp+rbx+0]
.text:000000000000B8DD                 jmp     loc_B760
.text:000000000000B8E2 ; ---------------------------------------------------------------------------
.text:000000000000B8E2
.text:000000000000B8E2 loc_B8E2:                               ; CODE XREF: chdir_long+F4↑j
.text:000000000000B8E2                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000B8E9                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000B8F0                 lea     rdi, aSlashDir4096 ; "slash - dir < 4096"
.text:000000000000B8F7                 mov     edx, 0B3h       ; line
.text:000000000000B8FC                 call    ___assert_fail  ; PIC mode
.text:000000000000B901 ; ---------------------------------------------------------------------------
.text:000000000000B901
.text:000000000000B901 loc_B901:                               ; CODE XREF: chdir_long+49↑j
.text:000000000000B901                 call    ___stack_chk_fail ; PIC mode
.text:000000000000B906 ; ---------------------------------------------------------------------------
.text:000000000000B906
.text:000000000000B906 loc_B906:                               ; CODE XREF: chdir_long+76↑j
.text:000000000000B906                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000B90D                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000B914                 lea     rdi, a0Len      ; "0 < len"
.text:000000000000B91B                 mov     edx, 7Eh ; '~'  ; line
.text:000000000000B920                 call    ___assert_fail  ; PIC mode
.text:000000000000B925 ; ---------------------------------------------------------------------------
.text:000000000000B925
.text:000000000000B925 loc_B925:                               ; CODE XREF: chdir_long+82↑j
.text:000000000000B925                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000B92C                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000B933                 lea     rdi, a4096Len   ; "4096 <= len"
.text:000000000000B93A                 mov     edx, 7Fh        ; line
.text:000000000000B93F                 call    ___assert_fail  ; PIC mode
.text:000000000000B944 ; ---------------------------------------------------------------------------
.text:000000000000B944
.text:000000000000B944 loc_B944:                               ; CODE XREF: chdir_long+C0↑j
.text:000000000000B944                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000B94B                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000B952                 lea     rdi, aDirDirEnd ; "dir <= dir_end"
.text:000000000000B959                 mov     edx, 0A3h       ; line
.text:000000000000B95E                 call    ___assert_fail  ; PIC mode
.text:000000000000B963 ; ---------------------------------------------------------------------------
.text:000000000000B963
.text:000000000000B963 loc_B963:                               ; CODE XREF: chdir_long+B4↑j
.text:000000000000B963                 lea     rcx, __PRETTY_FUNCTION___5099 ; "chdir_long"
.text:000000000000B96A                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/chdir-long.c"
.text:000000000000B971                 lea     rdi, aDir       ; "*dir != '/'"
.text:000000000000B978                 mov     edx, 0A2h       ; line
.text:000000000000B97D                 call    ___assert_fail  ; PIC mode
.text:000000000000B97D ; } // starts at B6B0
.text:000000000000B97D chdir_long      endp
.text:000000000000B97D
.text:000000000000B97D ; ---------------------------------------------------------------------------
.text:000000000000B982                 align 10h
.text:000000000000B990
.text:000000000000B990 ; =============== S U B R O U T I N E =======================================
.text:000000000000B990
.text:000000000000B990 ; Attributes: bp-based frame
.text:000000000000B990
.text:000000000000B990 ; __int64 __fastcall get_fs_usage(char *file)
.text:000000000000B990                 public get_fs_usage
.text:000000000000B990 get_fs_usage    proc near               ; CODE XREF: get_dev+FC↑p
.text:000000000000B990
.text:000000000000B990 var_s0          = qword ptr  0
.text:000000000000B990 var_s8          = qword ptr  8
.text:000000000000B990 var_s10         = qword ptr  10h
.text:000000000000B990 var_s18         = qword ptr  18h
.text:000000000000B990 var_s20         = qword ptr  20h
.text:000000000000B990 var_s28         = qword ptr  28h
.text:000000000000B990 var_s30         = qword ptr  30h
.text:000000000000B990 var_s48         = qword ptr  48h
.text:000000000000B990 s1              = byte ptr  82h
.text:000000000000B990 var_s188        = qword ptr  188h
.text:000000000000B990
.text:000000000000B990 ; __unwind {
.text:000000000000B990                 push    r12
.text:000000000000B992                 push    rbp
.text:000000000000B993                 mov     r12, rdi
.text:000000000000B996                 push    rbx
.text:000000000000B997                 mov     rbx, rdx
.text:000000000000B99A                 sub     rsp, 190h
.text:000000000000B9A1                 mov     rax, fs:28h
.text:000000000000B9AA                 mov     [rsp+var_s188], rax
.text:000000000000B9B2                 xor     eax, eax
.text:000000000000B9B4                 mov     eax, cs:statvfs_works_cache_2531
.text:000000000000B9BA                 mov     rbp, rsp
.text:000000000000B9BD                 test    eax, eax
.text:000000000000B9BF                 js      short loc_B9F0
.text:000000000000B9C1                 jz      short loc_BA0A
.text:000000000000B9C3
.text:000000000000B9C3 loc_B9C3:                               ; CODE XREF: get_fs_usage+115↓j
.text:000000000000B9C3                 mov     rsi, rbp        ; buf
.text:000000000000B9C6                 mov     rdi, r12        ; file
.text:000000000000B9C9                 call    _statvfs
.text:000000000000B9CE                 mov     edx, eax
.text:000000000000B9D0                 mov     eax, 0FFFFFFFFh
.text:000000000000B9D5                 test    edx, edx
.text:000000000000B9D7                 js      loc_BA5B
.text:000000000000B9DD                 mov     rax, [rsp+var_s8]
.text:000000000000B9E2                 test    rax, rax
.text:000000000000B9E5                 jnz     short loc_BA22
.text:000000000000B9E7                 mov     rax, [rsp+var_s0]
.text:000000000000B9EB                 jmp     short loc_BA22
.text:000000000000B9EB ; ---------------------------------------------------------------------------
.text:000000000000B9ED                 align 10h
.text:000000000000B9F0
.text:000000000000B9F0 loc_B9F0:                               ; CODE XREF: get_fs_usage+2F↑j
.text:000000000000B9F0                 mov     rdi, rbp        ; name
.text:000000000000B9F3                 call    _uname
.text:000000000000B9F8                 test    eax, eax
.text:000000000000B9FA                 jz      loc_BA80
.text:000000000000BA00
.text:000000000000BA00 loc_BA00:                               ; CODE XREF: get_fs_usage+105↓j
.text:000000000000BA00                 mov     cs:statvfs_works_cache_2531, 0
.text:000000000000BA0A
.text:000000000000BA0A loc_BA0A:                               ; CODE XREF: get_fs_usage+31↑j
.text:000000000000BA0A                 mov     rsi, rbp        ; buf
.text:000000000000BA0D                 mov     rdi, r12        ; file
.text:000000000000BA10                 call    _statfs
.text:000000000000BA15                 test    eax, eax
.text:000000000000BA17                 js      loc_BAAA
.text:000000000000BA1D                 mov     rax, [rsp+var_s48]
.text:000000000000BA22
.text:000000000000BA22 loc_BA22:                               ; CODE XREF: get_fs_usage+55↑j
.text:000000000000BA22                                         ; get_fs_usage+5B↑j
.text:000000000000BA22                 mov     [rbx], rax
.text:000000000000BA25                 mov     rax, [rsp+var_s10]
.text:000000000000BA2A                 mov     [rbx+8], rax
.text:000000000000BA2E                 mov     rax, [rsp+var_s18]
.text:000000000000BA33                 mov     [rbx+10h], rax
.text:000000000000BA37                 mov     rax, [rsp+var_s20]
.text:000000000000BA3C                 mov     [rbx+18h], rax
.text:000000000000BA40                 shr     rax, 3Fh
.text:000000000000BA44                 mov     [rbx+20h], al
.text:000000000000BA47                 mov     rax, [rsp+var_s28]
.text:000000000000BA4C                 mov     [rbx+28h], rax
.text:000000000000BA50                 mov     rax, [rsp+var_s30]
.text:000000000000BA55                 mov     [rbx+30h], rax
.text:000000000000BA59                 xor     eax, eax
.text:000000000000BA5B
.text:000000000000BA5B loc_BA5B:                               ; CODE XREF: get_fs_usage+47↑j
.text:000000000000BA5B                                         ; get_fs_usage+11F↓j
.text:000000000000BA5B                 mov     rcx, [rsp+var_s188]
.text:000000000000BA63                 xor     rcx, fs:28h
.text:000000000000BA6C                 jnz     short loc_BAB1
.text:000000000000BA6E                 add     rsp, 190h
.text:000000000000BA75                 pop     rbx
.text:000000000000BA76                 pop     rbp
.text:000000000000BA77                 pop     r12
.text:000000000000BA79                 retn
.text:000000000000BA79 ; ---------------------------------------------------------------------------
.text:000000000000BA7A                 align 20h
.text:000000000000BA80
.text:000000000000BA80 loc_BA80:                               ; CODE XREF: get_fs_usage+6A↑j
.text:000000000000BA80                 lea     rdi, [rbp+s1]   ; s1
.text:000000000000BA87                 lea     rsi, a2636      ; "2.6.36"
.text:000000000000BA8E                 call    _strverscmp
.text:000000000000BA93                 test    eax, eax
.text:000000000000BA95                 js      loc_BA00
.text:000000000000BA9B                 mov     cs:statvfs_works_cache_2531, 1
.text:000000000000BAA5                 jmp     loc_B9C3
.text:000000000000BAAA ; ---------------------------------------------------------------------------
.text:000000000000BAAA
.text:000000000000BAAA loc_BAAA:                               ; CODE XREF: get_fs_usage+87↑j
.text:000000000000BAAA                 mov     eax, 0FFFFFFFFh
.text:000000000000BAAF                 jmp     short loc_BA5B
.text:000000000000BAB1 ; ---------------------------------------------------------------------------
.text:000000000000BAB1
.text:000000000000BAB1 loc_BAB1:                               ; CODE XREF: get_fs_usage+DC↑j
.text:000000000000BAB1                 call    ___stack_chk_fail
.text:000000000000BAB1 ; } // starts at B990
.text:000000000000BAB1 get_fs_usage    endp
.text:000000000000BAB1
.text:000000000000BAB1 ; ---------------------------------------------------------------------------
.text:000000000000BAB6                 align 20h
.text:000000000000BAC0
.text:000000000000BAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAC0
.text:000000000000BAC0 ; Attributes: info_from_lumina
.text:000000000000BAC0
.text:000000000000BAC0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000BAC0                 public rpl_mbrtowc
.text:000000000000BAC0 rpl_mbrtowc     proc near               ; CODE XREF: replace_invalid_chars+8A↑p
.text:000000000000BAC0                                         ; mbsnwidth+BF↑p ...
.text:000000000000BAC0
.text:000000000000BAC0 pwc             = dword ptr -34h
.text:000000000000BAC0 var_30          = qword ptr -30h
.text:000000000000BAC0
.text:000000000000BAC0 ; __unwind {
.text:000000000000BAC0                 push    r13
.text:000000000000BAC2                 push    r12
.text:000000000000BAC4                 mov     r13, rsi
.text:000000000000BAC7                 push    rbp
.text:000000000000BAC8                 push    rbx
.text:000000000000BAC9                 mov     rbx, rdi
.text:000000000000BACC                 mov     r12, rdx
.text:000000000000BACF                 sub     rsp, 18h
.text:000000000000BAD3                 mov     rax, fs:28h
.text:000000000000BADC                 mov     [rsp+38h+var_30], rax
.text:000000000000BAE1                 xor     eax, eax
.text:000000000000BAE3                 lea     rax, [rsp+38h+pwc]
.text:000000000000BAE8                 test    rdi, rdi
.text:000000000000BAEB                 cmovz   rbx, rax
.text:000000000000BAEF                 mov     rdi, rbx        ; pwc
.text:000000000000BAF2                 call    _mbrtowc
.text:000000000000BAF7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000BAFB                 mov     rbp, rax
.text:000000000000BAFE                 jbe     short loc_BB20
.text:000000000000BB00                 test    r12, r12
.text:000000000000BB03                 jz      short loc_BB20
.text:000000000000BB05                 xor     edi, edi
.text:000000000000BB07                 call    hard_locale
.text:000000000000BB0C                 test    al, al
.text:000000000000BB0E                 jnz     short loc_BB20
.text:000000000000BB10                 movzx   eax, byte ptr [r13+0]
.text:000000000000BB15                 mov     ebp, 1
.text:000000000000BB1A                 mov     [rbx], eax
.text:000000000000BB1C                 nop     dword ptr [rax+00h]
.text:000000000000BB20
.text:000000000000BB20 loc_BB20:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000BB20                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000BB20                 mov     rdx, [rsp+38h+var_30]
.text:000000000000BB25                 xor     rdx, fs:28h
.text:000000000000BB2E                 mov     rax, rbp
.text:000000000000BB31                 jnz     short loc_BB3E
.text:000000000000BB33                 add     rsp, 18h
.text:000000000000BB37                 pop     rbx
.text:000000000000BB38                 pop     rbp
.text:000000000000BB39                 pop     r12
.text:000000000000BB3B                 pop     r13
.text:000000000000BB3D                 retn
.text:000000000000BB3E ; ---------------------------------------------------------------------------
.text:000000000000BB3E
.text:000000000000BB3E loc_BB3E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000BB3E                 call    ___stack_chk_fail
.text:000000000000BB3E ; } // starts at BAC0
.text:000000000000BB3E rpl_mbrtowc     endp
.text:000000000000BB3E
.text:000000000000BB3E ; ---------------------------------------------------------------------------
.text:000000000000BB43                 align 10h
.text:000000000000BB50
.text:000000000000BB50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB50
.text:000000000000BB50
.text:000000000000BB50 unescape_tab    proc near               ; CODE XREF: read_file_system_list+158↓p
.text:000000000000BB50                                         ; read_file_system_list+167↓p ...
.text:000000000000BB50 ; __unwind {
.text:000000000000BB50                 push    rbx
.text:000000000000BB51                 mov     rbx, rdi
.text:000000000000BB54                 call    _strlen
.text:000000000000BB59                 mov     rcx, rbx
.text:000000000000BB5C                 add     rax, 1
.text:000000000000BB60                 xor     edx, edx
.text:000000000000BB62                 jmp     short loc_BB77
.text:000000000000BB62 ; ---------------------------------------------------------------------------
.text:000000000000BB64                 align 8
.text:000000000000BB68
.text:000000000000BB68 loc_BB68:                               ; CODE XREF: unescape_tab+33↓j
.text:000000000000BB68                                         ; unescape_tab+3C↓j ...
.text:000000000000BB68                 mov     [rcx], sil
.text:000000000000BB6B                 mov     rdx, rdi
.text:000000000000BB6E
.text:000000000000BB6E loc_BB6E:                               ; CODE XREF: unescape_tab+7A↓j
.text:000000000000BB6E                 add     rcx, 1
.text:000000000000BB72                 cmp     rax, rdx
.text:000000000000BB75                 jbe     short loc_BBD0
.text:000000000000BB77
.text:000000000000BB77 loc_BB77:                               ; CODE XREF: unescape_tab+12↑j
.text:000000000000BB77                 movzx   esi, byte ptr [rbx+rdx]
.text:000000000000BB7B                 lea     rdi, [rdx+1]
.text:000000000000BB7F                 cmp     sil, 5Ch ; '\'
.text:000000000000BB83                 jnz     short loc_BB68
.text:000000000000BB85                 lea     r8, [rdx+4]
.text:000000000000BB89                 cmp     r8, rax
.text:000000000000BB8C                 jnb     short loc_BB68
.text:000000000000BB8E                 movzx   r9d, byte ptr [rbx+rdi]
.text:000000000000BB93                 lea     r10d, [r9-30h]
.text:000000000000BB97                 cmp     r10b, 3
.text:000000000000BB9B                 ja      short loc_BB68
.text:000000000000BB9D                 movzx   r10d, byte ptr [rbx+rdx+2]
.text:000000000000BBA3                 lea     r11d, [r10-30h]
.text:000000000000BBA7                 cmp     r11b, 7
.text:000000000000BBAB                 ja      short loc_BB68
.text:000000000000BBAD                 movzx   edx, byte ptr [rbx+rdx+3]
.text:000000000000BBB2                 lea     r11d, [rdx-30h]
.text:000000000000BBB6                 cmp     r11b, 7
.text:000000000000BBBA                 ja      short loc_BB68
.text:000000000000BBBC                 lea     edx, [r10+r9*8]
.text:000000000000BBC0                 lea     edx, [r11+rdx*8-80h]
.text:000000000000BBC5                 mov     [rcx], dl
.text:000000000000BBC7                 mov     rdx, r8
.text:000000000000BBCA                 jmp     short loc_BB6E
.text:000000000000BBCA ; ---------------------------------------------------------------------------
.text:000000000000BBCC                 align 10h
.text:000000000000BBD0
.text:000000000000BBD0 loc_BBD0:                               ; CODE XREF: unescape_tab+25↑j
.text:000000000000BBD0                 pop     rbx
.text:000000000000BBD1                 retn
.text:000000000000BBD1 ; } // starts at BB50
.text:000000000000BBD1 unescape_tab    endp
.text:000000000000BBD1
.text:000000000000BBD1 ; ---------------------------------------------------------------------------
.text:000000000000BBD2                 align 20h
.text:000000000000BBE0
.text:000000000000BBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBE0
.text:000000000000BBE0
.text:000000000000BBE0 ; __int64 __fastcall free_mount_entry(void *ptr)
.text:000000000000BBE0                 public free_mount_entry
.text:000000000000BBE0 free_mount_entry proc near              ; CODE XREF: main+126E↑p
.text:000000000000BBE0                                         ; read_file_system_list+734↓p
.text:000000000000BBE0 ; __unwind {
.text:000000000000BBE0                 push    rbx
.text:000000000000BBE1                 mov     rbx, rdi
.text:000000000000BBE4                 mov     rdi, [rdi]      ; ptr
.text:000000000000BBE7                 call    _free
.text:000000000000BBEC                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000BBF0                 call    _free
.text:000000000000BBF5                 mov     rdi, [rbx+10h]  ; ptr
.text:000000000000BBF9                 call    _free
.text:000000000000BBFE                 test    byte ptr [rbx+28h], 4
.text:000000000000BC02                 jz      short loc_BC0D
.text:000000000000BC04                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000BC08                 call    _free
.text:000000000000BC0D
.text:000000000000BC0D loc_BC0D:                               ; CODE XREF: free_mount_entry+22↑j
.text:000000000000BC0D                 mov     rdi, rbx        ; ptr
.text:000000000000BC10                 pop     rbx
.text:000000000000BC11                 jmp     _free
.text:000000000000BC11 ; } // starts at BBE0
.text:000000000000BC11 free_mount_entry endp
.text:000000000000BC11
.text:000000000000BC11 ; ---------------------------------------------------------------------------
.text:000000000000BC16                 align 20h
.text:000000000000BC20
.text:000000000000BC20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC20
.text:000000000000BC20
.text:000000000000BC20                 public read_file_system_list
.text:000000000000BC20 read_file_system_list proc near         ; CODE XREF: main:loc_2C7C↑p
.text:000000000000BC20
.text:000000000000BC20 var_90          = qword ptr -90h
.text:000000000000BC20 var_81          = byte ptr -81h
.text:000000000000BC20 var_80          = dword ptr -80h
.text:000000000000BC20 var_7C          = dword ptr -7Ch
.text:000000000000BC20 var_78          = dword ptr -78h
.text:000000000000BC20 var_74          = dword ptr -74h
.text:000000000000BC20 var_70          = dword ptr -70h
.text:000000000000BC20 var_6C          = dword ptr -6Ch
.text:000000000000BC20 var_68          = dword ptr -68h
.text:000000000000BC20 var_64          = dword ptr -64h
.text:000000000000BC20 var_60          = dword ptr -60h
.text:000000000000BC20 var_5C          = dword ptr -5Ch
.text:000000000000BC20 ptr             = qword ptr -58h
.text:000000000000BC20 lineptr         = qword ptr -50h
.text:000000000000BC20 n               = qword ptr -48h
.text:000000000000BC20 var_40          = qword ptr -40h
.text:000000000000BC20
.text:000000000000BC20 ; __unwind {
.text:000000000000BC20                 push    r15
.text:000000000000BC22                 push    r14
.text:000000000000BC24                 lea     rsi, aWriteError+0Ah ; modes
.text:000000000000BC2B                 push    r13
.text:000000000000BC2D                 push    r12
.text:000000000000BC2F                 lea     rdi, aProcSelfMounti ; "/proc/self/mountinfo"
.text:000000000000BC36                 push    rbp
.text:000000000000BC37                 push    rbx
.text:000000000000BC38                 sub     rsp, 68h
.text:000000000000BC3C                 mov     rax, fs:28h
.text:000000000000BC45                 mov     [rsp+98h+var_40], rax
.text:000000000000BC4A                 xor     eax, eax
.text:000000000000BC4C                 call    _fopen
.text:000000000000BC51                 test    rax, rax
.text:000000000000BC54                 jz      loc_C0A0
.text:000000000000BC5A                 lea     r14, [rsp+98h+ptr]
.text:000000000000BC5F                 lea     r13, [rsp+98h+n]
.text:000000000000BC64                 lea     r12, [rsp+98h+lineptr]
.text:000000000000BC69                 mov     rbp, rax
.text:000000000000BC6C                 mov     [rsp+98h+lineptr], 0
.text:000000000000BC75                 mov     [rsp+98h+n], 0
.text:000000000000BC7E                 xchg    ax, ax
.text:000000000000BC80
.text:000000000000BC80 loc_BC80:                               ; CODE XREF: read_file_system_list+C4↓j
.text:000000000000BC80                                         ; read_file_system_list+E2↓j ...
.text:000000000000BC80                 mov     rcx, rbp        ; stream
.text:000000000000BC83                 mov     edx, 0Ah        ; delimiter
.text:000000000000BC88                 mov     rsi, r13        ; n
.text:000000000000BC8B                 mov     rdi, r12        ; lineptr
.text:000000000000BC8E                 call    ___getdelim
.text:000000000000BC93                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BC97                 jz      loc_BED0
.text:000000000000BC9D                 lea     rcx, [rsp+98h+var_7C]
.text:000000000000BCA2                 lea     rdx, [rsp+98h+var_80]
.text:000000000000BCA7                 sub     rsp, 8
.text:000000000000BCAB                 lea     rbx, [rsp+0A0h+var_81]
.text:000000000000BCB0                 lea     rsi, aUUUUNSNNSNC ; "%*u %*u %u:%u %n%*s%n %n%*s%n%c"
.text:000000000000BCB7                 push    rbx
.text:000000000000BCB8                 lea     rax, [rsp+0A8h+var_74]
.text:000000000000BCBD                 push    rax
.text:000000000000BCBE                 lea     rax, [rsp+0B0h+var_78]
.text:000000000000BCC3                 push    rax
.text:000000000000BCC4                 mov     rdi, [rsp+0B8h+lineptr] ; s
.text:000000000000BCC9                 xor     eax, eax
.text:000000000000BCCB                 lea     r9, [rsp+0B8h+var_5C]
.text:000000000000BCD0                 lea     r8, [rsp+0B8h+var_60]
.text:000000000000BCD5                 call    _sscanf
.text:000000000000BCDA                 and     eax, 0FFFFFFFBh
.text:000000000000BCDD                 add     rsp, 20h
.text:000000000000BCE1                 cmp     eax, 3
.text:000000000000BCE4                 jnz     short loc_BC80
.text:000000000000BCE6                 movsxd  rdi, [rsp+98h+var_74]
.text:000000000000BCEB                 lea     rsi, needle     ; " - "
.text:000000000000BCF2                 add     rdi, [rsp+98h+lineptr] ; haystack
.text:000000000000BCF7                 call    _strstr
.text:000000000000BCFC                 test    rax, rax
.text:000000000000BCFF                 mov     r15, rax
.text:000000000000BD02                 jz      loc_BC80
.text:000000000000BD08                 lea     rcx, [rsp+98h+var_6C]
.text:000000000000BD0D                 lea     rdx, [rsp+98h+var_70]
.text:000000000000BD12                 sub     rsp, 8
.text:000000000000BD16                 push    rbx
.text:000000000000BD17                 lea     rsi, aNSNNSNC   ; " - %n%*s%n %n%*s%n %c"
.text:000000000000BD1E                 mov     rdi, rax        ; s
.text:000000000000BD21                 xor     eax, eax
.text:000000000000BD23                 lea     r9, [rsp+0A8h+var_64]
.text:000000000000BD28                 lea     r8, [rsp+0A8h+var_68]
.text:000000000000BD2D                 call    _sscanf
.text:000000000000BD32                 and     eax, 0FFFFFFFBh
.text:000000000000BD35                 cmp     eax, 1
.text:000000000000BD38                 pop     rdx
.text:000000000000BD39                 pop     rcx
.text:000000000000BD3A                 jnz     loc_BC80
.text:000000000000BD40                 movsxd  rax, [rsp+98h+var_5C]
.text:000000000000BD45                 mov     rdx, [rsp+98h+lineptr]
.text:000000000000BD4A                 mov     byte ptr [rdx+rax], 0
.text:000000000000BD4E                 movsxd  rax, [rsp+98h+var_74]
.text:000000000000BD53                 mov     rdx, [rsp+98h+lineptr]
.text:000000000000BD58                 mov     byte ptr [rdx+rax], 0
.text:000000000000BD5C                 movsxd  rax, [rsp+98h+var_6C]
.text:000000000000BD61                 mov     byte ptr [r15+rax], 0
.text:000000000000BD66                 movsxd  rax, [rsp+98h+var_64]
.text:000000000000BD6B                 mov     byte ptr [r15+rax], 0
.text:000000000000BD70                 movsxd  rdi, [rsp+98h+var_68]
.text:000000000000BD75                 add     rdi, r15
.text:000000000000BD78                 call    unescape_tab
.text:000000000000BD7D                 movsxd  rdi, [rsp+98h+var_78]
.text:000000000000BD82                 add     rdi, [rsp+98h+lineptr]
.text:000000000000BD87                 call    unescape_tab
.text:000000000000BD8C                 movsxd  rdi, [rsp+98h+var_60]
.text:000000000000BD91                 add     rdi, [rsp+98h+lineptr]
.text:000000000000BD96                 call    unescape_tab
.text:000000000000BD9B                 mov     edi, 38h ; '8'
.text:000000000000BDA0                 call    xmalloc
.text:000000000000BDA5                 movsxd  rdi, [rsp+98h+var_68]
.text:000000000000BDAA                 mov     rbx, rax
.text:000000000000BDAD                 add     rdi, r15        ; src
.text:000000000000BDB0                 call    xstrdup
.text:000000000000BDB5                 movsxd  rdi, [rsp+98h+var_78]
.text:000000000000BDBA                 mov     [rbx], rax
.text:000000000000BDBD                 add     rdi, [rsp+98h+lineptr] ; src
.text:000000000000BDC2                 call    xstrdup
.text:000000000000BDC7                 movsxd  rdi, [rsp+98h+var_60]
.text:000000000000BDCC                 mov     [rbx+8], rax
.text:000000000000BDD0                 add     rdi, [rsp+98h+lineptr] ; src
.text:000000000000BDD5                 call    xstrdup
.text:000000000000BDDA                 movsxd  rdi, [rsp+98h+var_70]
.text:000000000000BDDF                 mov     [rbx+10h], rax
.text:000000000000BDE3                 add     rdi, r15        ; src
.text:000000000000BDE6                 call    xstrdup
.text:000000000000BDEB                 mov     edx, [rsp+98h+var_80]
.text:000000000000BDEF                 mov     r15, rax
.text:000000000000BDF2                 mov     [rbx+18h], rax
.text:000000000000BDF6                 mov     eax, [rsp+98h+var_7C]
.text:000000000000BDFA                 mov     rsi, 0FFFFF00000000000h
.text:000000000000BE04                 lea     rdi, aAutofs    ; "autofs"
.text:000000000000BE0B                 or      byte ptr [rbx+28h], 4
.text:000000000000BE0F                 mov     rcx, rdx
.text:000000000000BE12                 shl     rdx, 20h
.text:000000000000BE16                 shl     rcx, 8
.text:000000000000BE1A                 and     rdx, rsi
.text:000000000000BE1D                 mov     rsi, 0FFFFFF00000h
.text:000000000000BE27                 and     ecx, 0FFF00h
.text:000000000000BE2D                 or      rdx, rcx
.text:000000000000BE30                 movzx   ecx, al
.text:000000000000BE33                 shl     rax, 0Ch
.text:000000000000BE37                 or      rdx, rcx
.text:000000000000BE3A                 and     rax, rsi
.text:000000000000BE3D                 mov     ecx, 7
.text:000000000000BE42                 mov     rsi, r15
.text:000000000000BE45                 or      rax, rdx
.text:000000000000BE48                 mov     edx, 1
.text:000000000000BE4D                 repe cmpsb
.text:000000000000BE4F                 mov     [rbx+20h], rax
.text:000000000000BE53                 setnbe  al
.text:000000000000BE56                 sbb     al, 0
.text:000000000000BE58                 test    al, al
.text:000000000000BE5A                 jz      short loc_BE7A
.text:000000000000BE5C                 lea     rdi, aProc      ; "proc"
.text:000000000000BE63                 mov     ecx, 5
.text:000000000000BE68                 mov     rsi, r15
.text:000000000000BE6B                 repe cmpsb
.text:000000000000BE6D                 setnbe  al
.text:000000000000BE70                 sbb     al, 0
.text:000000000000BE72                 test    al, al
.text:000000000000BE74                 jnz     loc_BF28
.text:000000000000BE7A
.text:000000000000BE7A loc_BE7A:                               ; CODE XREF: read_file_system_list+23A↑j
.text:000000000000BE7A                                         ; read_file_system_list+320↓j ...
.text:000000000000BE7A                 movzx   eax, byte ptr [rbx+28h]
.text:000000000000BE7E                 mov     r8, [rbx]
.text:000000000000BE81                 mov     esi, 3Ah ; ':'  ; c
.text:000000000000BE86                 mov     rdi, r8         ; s
.text:000000000000BE89                 mov     [rsp+98h+var_90], r8
.text:000000000000BE8E                 and     eax, 0FFFFFFFEh
.text:000000000000BE91                 or      eax, edx
.text:000000000000BE93                 mov     [rbx+28h], al
.text:000000000000BE96                 call    _strchr
.text:000000000000BE9B                 test    rax, rax
.text:000000000000BE9E                 mov     edx, 1
.text:000000000000BEA3                 mov     r8, [rsp+98h+var_90]
.text:000000000000BEA8                 jz      loc_C070
.text:000000000000BEAE
.text:000000000000BEAE loc_BEAE:                               ; CODE XREF: read_file_system_list+475↓j
.text:000000000000BEAE                                         ; read_file_system_list+7A3↓j ...
.text:000000000000BEAE                 movzx   eax, byte ptr [rbx+28h]
.text:000000000000BEB2                 add     edx, edx
.text:000000000000BEB4                 and     eax, 0FFFFFFFDh
.text:000000000000BEB7                 or      eax, edx
.text:000000000000BEB9                 mov     [rbx+28h], al
.text:000000000000BEBC                 mov     [r14], rbx
.text:000000000000BEBF                 lea     r14, [rbx+30h]
.text:000000000000BEC3                 jmp     loc_BC80
.text:000000000000BEC3 ; ---------------------------------------------------------------------------
.text:000000000000BEC8                 align 10h
.text:000000000000BED0
.text:000000000000BED0 loc_BED0:                               ; CODE XREF: read_file_system_list+77↑j
.text:000000000000BED0                 mov     rdi, [rsp+98h+lineptr] ; ptr
.text:000000000000BED5                 call    _free
.text:000000000000BEDA                 test    byte ptr [rbp+0], 20h
.text:000000000000BEDE                 jnz     loc_C440
.text:000000000000BEE4                 mov     rdi, rbp        ; stream
.text:000000000000BEE7                 call    rpl_fclose
.text:000000000000BEEC                 cmp     eax, 0FFFFFFFFh
.text:000000000000BEEF                 jz      loc_C32E
.text:000000000000BEF5
.text:000000000000BEF5 loc_BEF5:                               ; CODE XREF: read_file_system_list+708↓j
.text:000000000000BEF5                 mov     qword ptr [r14], 0
.text:000000000000BEFC                 mov     rax, [rsp+98h+ptr]
.text:000000000000BF01
.text:000000000000BF01 loc_BF01:                               ; CODE XREF: read_file_system_list+74C↓j
.text:000000000000BF01                                         ; read_file_system_list+83E↓j
.text:000000000000BF01                 mov     rbx, [rsp+98h+var_40]
.text:000000000000BF06                 xor     rbx, fs:28h
.text:000000000000BF0F                 jnz     loc_C463
.text:000000000000BF15                 add     rsp, 68h
.text:000000000000BF19                 pop     rbx
.text:000000000000BF1A                 pop     rbp
.text:000000000000BF1B                 pop     r12
.text:000000000000BF1D                 pop     r13
.text:000000000000BF1F                 pop     r14
.text:000000000000BF21                 pop     r15
.text:000000000000BF23                 retn
.text:000000000000BF23 ; ---------------------------------------------------------------------------
.text:000000000000BF24                 align 8
.text:000000000000BF28
.text:000000000000BF28 loc_BF28:                               ; CODE XREF: read_file_system_list+254↑j
.text:000000000000BF28                 lea     rdi, aSubfs     ; "subfs"
.text:000000000000BF2F                 mov     ecx, 6
.text:000000000000BF34                 mov     rsi, r15
.text:000000000000BF37                 repe cmpsb
.text:000000000000BF39                 setnbe  al
.text:000000000000BF3C                 sbb     al, 0
.text:000000000000BF3E                 test    al, al
.text:000000000000BF40                 jz      loc_BE7A
.text:000000000000BF46                 lea     rdi, aDebugfs   ; "debugfs"
.text:000000000000BF4D                 mov     ecx, 8
.text:000000000000BF52                 mov     rsi, r15
.text:000000000000BF55                 repe cmpsb
.text:000000000000BF57                 setnbe  al
.text:000000000000BF5A                 sbb     al, 0
.text:000000000000BF5C                 test    al, al
.text:000000000000BF5E                 jz      loc_BE7A
.text:000000000000BF64                 lea     rdi, aDevpts    ; "devpts"
.text:000000000000BF6B                 mov     ecx, 7
.text:000000000000BF70                 mov     rsi, r15
.text:000000000000BF73                 repe cmpsb
.text:000000000000BF75                 setnbe  al
.text:000000000000BF78                 sbb     al, 0
.text:000000000000BF7A                 test    al, al
.text:000000000000BF7C                 jz      loc_BE7A
.text:000000000000BF82                 lea     rdi, aFusectl   ; "fusectl"
.text:000000000000BF89                 mov     ecx, 8
.text:000000000000BF8E                 mov     rsi, r15
.text:000000000000BF91                 repe cmpsb
.text:000000000000BF93                 setnbe  al
.text:000000000000BF96                 sbb     al, 0
.text:000000000000BF98                 test    al, al
.text:000000000000BF9A                 jz      loc_BE7A
.text:000000000000BFA0                 lea     rdi, aMqueue    ; "mqueue"
.text:000000000000BFA7                 mov     ecx, 7
.text:000000000000BFAC                 mov     rsi, r15
.text:000000000000BFAF                 repe cmpsb
.text:000000000000BFB1                 setnbe  al
.text:000000000000BFB4                 sbb     al, 0
.text:000000000000BFB6                 test    al, al
.text:000000000000BFB8                 jz      loc_BE7A
.text:000000000000BFBE                 lea     rdi, aRpcPipefs ; "rpc_pipefs"
.text:000000000000BFC5                 mov     ecx, 0Bh
.text:000000000000BFCA                 mov     rsi, r15
.text:000000000000BFCD                 repe cmpsb
.text:000000000000BFCF                 setnbe  al
.text:000000000000BFD2                 sbb     al, 0
.text:000000000000BFD4                 test    al, al
.text:000000000000BFD6                 jz      loc_BE7A
.text:000000000000BFDC                 lea     rdi, aSysfs     ; "sysfs"
.text:000000000000BFE3                 mov     ecx, 6
.text:000000000000BFE8                 mov     rsi, r15
.text:000000000000BFEB                 repe cmpsb
.text:000000000000BFED                 setnbe  al
.text:000000000000BFF0                 sbb     al, 0
.text:000000000000BFF2                 test    al, al
.text:000000000000BFF4                 jz      loc_BE7A
.text:000000000000BFFA                 lea     rdi, aDevfs     ; "devfs"
.text:000000000000C001                 mov     ecx, 6
.text:000000000000C006                 mov     rsi, r15
.text:000000000000C009                 repe cmpsb
.text:000000000000C00B                 setnbe  al
.text:000000000000C00E                 sbb     al, 0
.text:000000000000C010                 test    al, al
.text:000000000000C012                 jz      loc_BE7A
.text:000000000000C018                 lea     rdi, aKernfs    ; "kernfs"
.text:000000000000C01F                 mov     ecx, 7
.text:000000000000C024                 mov     rsi, r15
.text:000000000000C027                 repe cmpsb
.text:000000000000C029                 setnbe  al
.text:000000000000C02C                 sbb     al, 0
.text:000000000000C02E                 test    al, al
.text:000000000000C030                 jz      loc_BE7A
.text:000000000000C036                 lea     rsi, aIgnore    ; "ignore"
.text:000000000000C03D                 mov     rdi, r15        ; s1
.text:000000000000C040                 mov     byte ptr [rsp+98h+var_90], dl
.text:000000000000C044                 call    _strcmp
.text:000000000000C049                 test    eax, eax
.text:000000000000C04B                 movzx   edx, byte ptr [rsp+98h+var_90]
.text:000000000000C050                 jz      loc_BE7A
.text:000000000000C056                 lea     rsi, aNone      ; "none"
.text:000000000000C05D                 mov     rdi, r15        ; s1
.text:000000000000C060                 call    _strcmp
.text:000000000000C065                 test    eax, eax
.text:000000000000C067                 setz    dl
.text:000000000000C06A                 jmp     loc_BE7A
.text:000000000000C06A ; ---------------------------------------------------------------------------
.text:000000000000C06F                 align 10h
.text:000000000000C070
.text:000000000000C070 loc_C070:                               ; CODE XREF: read_file_system_list+288↑j
.text:000000000000C070                 cmp     byte ptr [r8], 2Fh ; '/'
.text:000000000000C074                 jz      loc_C3A0
.text:000000000000C07A
.text:000000000000C07A loc_C07A:                               ; CODE XREF: read_file_system_list+785↓j
.text:000000000000C07A                                         ; read_file_system_list+7C7↓j
.text:000000000000C07A                 lea     rsi, aHosts     ; "-hosts"
.text:000000000000C081                 mov     ecx, 7
.text:000000000000C086                 mov     rdi, r8
.text:000000000000C089                 repe cmpsb
.text:000000000000C08B                 setnbe  al
.text:000000000000C08E                 sbb     al, 0
.text:000000000000C090                 test    al, al
.text:000000000000C092                 setz    dl
.text:000000000000C095                 jmp     loc_BEAE
.text:000000000000C095 ; ---------------------------------------------------------------------------
.text:000000000000C09A                 align 20h
.text:000000000000C0A0
.text:000000000000C0A0 loc_C0A0:                               ; CODE XREF: read_file_system_list+34↑j
.text:000000000000C0A0                 lea     rsi, aWriteError+0Ah ; mode
.text:000000000000C0A7                 lea     rdi, aEtcMtab   ; "/etc/mtab"
.text:000000000000C0AE                 call    _setmntent
.text:000000000000C0B3                 test    rax, rax
.text:000000000000C0B6                 mov     rbx, rax
.text:000000000000C0B9                 jz      loc_C45C
.text:000000000000C0BF                 mov     rdi, rbx        ; stream
.text:000000000000C0C2                 lea     r14, [rsp+98h+ptr]
.text:000000000000C0C7                 lea     rbp, aAutofs    ; "autofs"
.text:000000000000C0CE                 call    _getmntent
.text:000000000000C0D3                 test    rax, rax
.text:000000000000C0D6                 mov     r13, rax
.text:000000000000C0D9                 jz      loc_C31E
.text:000000000000C0DF                 nop
.text:000000000000C0E0
.text:000000000000C0E0 loc_C0E0:                               ; CODE XREF: read_file_system_list+6F8↓j
.text:000000000000C0E0                 lea     rsi, opt        ; "bind"
.text:000000000000C0E7                 mov     rdi, r13        ; mnt
.text:000000000000C0EA                 call    _hasmntopt
.text:000000000000C0EF                 mov     edi, 38h ; '8'
.text:000000000000C0F4                 mov     r15, rax
.text:000000000000C0F7                 call    xmalloc
.text:000000000000C0FC                 mov     rdi, [r13+0]    ; src
.text:000000000000C100                 mov     r12, rax
.text:000000000000C103                 call    xstrdup
.text:000000000000C108                 mov     rdi, [r13+8]    ; src
.text:000000000000C10C                 mov     [r12], rax
.text:000000000000C110                 call    xstrdup
.text:000000000000C115                 mov     rdi, [r13+10h]  ; src
.text:000000000000C119                 mov     [r12+8], rax
.text:000000000000C11E                 mov     qword ptr [r12+10h], 0
.text:000000000000C127                 call    xstrdup
.text:000000000000C12C                 mov     ecx, 7
.text:000000000000C131                 mov     rsi, rax
.text:000000000000C134                 mov     rdi, rbp
.text:000000000000C137                 or      byte ptr [r12+28h], 4
.text:000000000000C13D                 mov     r13, rax
.text:000000000000C140                 mov     [r12+18h], rax
.text:000000000000C145                 repe cmpsb
.text:000000000000C147                 mov     edx, 1
.text:000000000000C14C                 setnbe  al
.text:000000000000C14F                 sbb     al, 0
.text:000000000000C151                 test    al, al
.text:000000000000C153                 jz      loc_C2B8
.text:000000000000C159                 lea     rdi, aProc      ; "proc"
.text:000000000000C160                 mov     ecx, 5
.text:000000000000C165                 mov     rsi, r13
.text:000000000000C168                 repe cmpsb
.text:000000000000C16A                 setnbe  al
.text:000000000000C16D                 sbb     al, 0
.text:000000000000C16F                 test    al, al
.text:000000000000C171                 jz      loc_C2B8
.text:000000000000C177                 lea     rdi, aSubfs     ; "subfs"
.text:000000000000C17E                 mov     ecx, 6
.text:000000000000C183                 mov     rsi, r13
.text:000000000000C186                 repe cmpsb
.text:000000000000C188                 setnbe  al
.text:000000000000C18B                 sbb     al, 0
.text:000000000000C18D                 test    al, al
.text:000000000000C18F                 jz      loc_C2B8
.text:000000000000C195                 lea     rdi, aDebugfs   ; "debugfs"
.text:000000000000C19C                 mov     ecx, 8
.text:000000000000C1A1                 mov     rsi, r13
.text:000000000000C1A4                 repe cmpsb
.text:000000000000C1A6                 setnbe  al
.text:000000000000C1A9                 sbb     al, 0
.text:000000000000C1AB                 test    al, al
.text:000000000000C1AD                 jz      loc_C2B8
.text:000000000000C1B3                 lea     rdi, aDevpts    ; "devpts"
.text:000000000000C1BA                 mov     ecx, 7
.text:000000000000C1BF                 mov     rsi, r13
.text:000000000000C1C2                 repe cmpsb
.text:000000000000C1C4                 setnbe  al
.text:000000000000C1C7                 sbb     al, 0
.text:000000000000C1C9                 test    al, al
.text:000000000000C1CB                 jz      loc_C2B8
.text:000000000000C1D1                 lea     rdi, aFusectl   ; "fusectl"
.text:000000000000C1D8                 mov     ecx, 8
.text:000000000000C1DD                 mov     rsi, r13
.text:000000000000C1E0                 repe cmpsb
.text:000000000000C1E2                 setnbe  al
.text:000000000000C1E5                 sbb     al, 0
.text:000000000000C1E7                 test    al, al
.text:000000000000C1E9                 jz      loc_C2B8
.text:000000000000C1EF                 lea     rdi, aMqueue    ; "mqueue"
.text:000000000000C1F6                 mov     ecx, 7
.text:000000000000C1FB                 mov     rsi, r13
.text:000000000000C1FE                 repe cmpsb
.text:000000000000C200                 setnbe  al
.text:000000000000C203                 sbb     al, 0
.text:000000000000C205                 test    al, al
.text:000000000000C207                 jz      loc_C2B8
.text:000000000000C20D                 lea     rdi, aRpcPipefs ; "rpc_pipefs"
.text:000000000000C214                 mov     ecx, 0Bh
.text:000000000000C219                 mov     rsi, r13
.text:000000000000C21C                 repe cmpsb
.text:000000000000C21E                 setnbe  al
.text:000000000000C221                 sbb     al, 0
.text:000000000000C223                 test    al, al
.text:000000000000C225                 jz      loc_C2B8
.text:000000000000C22B                 lea     rdi, aSysfs     ; "sysfs"
.text:000000000000C232                 mov     ecx, 6
.text:000000000000C237                 mov     rsi, r13
.text:000000000000C23A                 repe cmpsb
.text:000000000000C23C                 setnbe  al
.text:000000000000C23F                 sbb     al, 0
.text:000000000000C241                 test    al, al
.text:000000000000C243                 jz      short loc_C2B8
.text:000000000000C245                 lea     rdi, aDevfs     ; "devfs"
.text:000000000000C24C                 mov     ecx, 6
.text:000000000000C251                 mov     rsi, r13
.text:000000000000C254                 repe cmpsb
.text:000000000000C256                 setnbe  al
.text:000000000000C259                 sbb     al, 0
.text:000000000000C25B                 test    al, al
.text:000000000000C25D                 jz      short loc_C2B8
.text:000000000000C25F                 lea     rdi, aKernfs    ; "kernfs"
.text:000000000000C266                 mov     ecx, 7
.text:000000000000C26B                 mov     rsi, r13
.text:000000000000C26E                 repe cmpsb
.text:000000000000C270                 setnbe  al
.text:000000000000C273                 sbb     al, 0
.text:000000000000C275                 test    al, al
.text:000000000000C277                 jz      short loc_C2B8
.text:000000000000C279                 lea     rsi, aIgnore    ; "ignore"
.text:000000000000C280                 mov     rdi, r13        ; s1
.text:000000000000C283                 mov     byte ptr [rsp+98h+var_90], dl
.text:000000000000C287                 call    _strcmp
.text:000000000000C28C                 test    eax, eax
.text:000000000000C28E                 movzx   edx, byte ptr [rsp+98h+var_90]
.text:000000000000C293                 jz      short loc_C2B8
.text:000000000000C295                 lea     rsi, aNone      ; "none"
.text:000000000000C29C                 mov     rdi, r13        ; s1
.text:000000000000C29F                 call    _strcmp
.text:000000000000C2A4                 test    r15, r15
.text:000000000000C2A7                 setz    dl
.text:000000000000C2AA                 test    eax, eax
.text:000000000000C2AC                 setz    al
.text:000000000000C2AF                 and     edx, eax
.text:000000000000C2B1                 nop     dword ptr [rax+00000000h]
.text:000000000000C2B8
.text:000000000000C2B8 loc_C2B8:                               ; CODE XREF: read_file_system_list+533↑j
.text:000000000000C2B8                                         ; read_file_system_list+551↑j ...
.text:000000000000C2B8                 movzx   eax, byte ptr [r12+28h]
.text:000000000000C2BE                 mov     r15, [r12]
.text:000000000000C2C2                 mov     esi, 3Ah ; ':'  ; c
.text:000000000000C2C7                 mov     rdi, r15        ; s
.text:000000000000C2CA                 and     eax, 0FFFFFFFEh
.text:000000000000C2CD                 or      eax, edx
.text:000000000000C2CF                 mov     [r12+28h], al
.text:000000000000C2D4                 call    _strchr
.text:000000000000C2D9                 test    rax, rax
.text:000000000000C2DC                 mov     edx, 1
.text:000000000000C2E1                 jz      loc_C378
.text:000000000000C2E7
.text:000000000000C2E7 loc_C2E7:                               ; CODE XREF: read_file_system_list+779↓j
.text:000000000000C2E7                                         ; read_file_system_list+7EF↓j ...
.text:000000000000C2E7                 movzx   eax, byte ptr [r12+28h]
.text:000000000000C2ED                 add     edx, edx
.text:000000000000C2EF                 mov     qword ptr [r12+20h], 0FFFFFFFFFFFFFFFFh
.text:000000000000C2F8                 mov     rdi, rbx        ; stream
.text:000000000000C2FB                 and     eax, 0FFFFFFFDh
.text:000000000000C2FE                 or      eax, edx
.text:000000000000C300                 mov     [r12+28h], al
.text:000000000000C305                 mov     [r14], r12
.text:000000000000C308                 lea     r14, [r12+30h]
.text:000000000000C30D                 call    _getmntent
.text:000000000000C312                 test    rax, rax
.text:000000000000C315                 mov     r13, rax
.text:000000000000C318                 jnz     loc_C0E0
.text:000000000000C31E
.text:000000000000C31E loc_C31E:                               ; CODE XREF: read_file_system_list+4B9↑j
.text:000000000000C31E                 mov     rdi, rbx        ; stream
.text:000000000000C321                 call    _endmntent
.text:000000000000C326                 test    eax, eax
.text:000000000000C328                 jnz     loc_BEF5
.text:000000000000C32E
.text:000000000000C32E loc_C32E:                               ; CODE XREF: read_file_system_list+2CF↑j
.text:000000000000C32E                 call    ___errno_location
.text:000000000000C333                 mov     r13d, [rax]
.text:000000000000C336                 mov     r12, rax
.text:000000000000C339
.text:000000000000C339 loc_C339:                               ; CODE XREF: read_file_system_list+837↓j
.text:000000000000C339                 mov     qword ptr [r14], 0
.text:000000000000C340                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000C345                 test    rdi, rdi
.text:000000000000C348                 jz      short loc_C366
.text:000000000000C34A                 nop     word ptr [rax+rax+00h]
.text:000000000000C350
.text:000000000000C350 loc_C350:                               ; CODE XREF: read_file_system_list+744↓j
.text:000000000000C350                 mov     rbx, [rdi+30h]
.text:000000000000C354                 call    free_mount_entry
.text:000000000000C359                 test    rbx, rbx
.text:000000000000C35C                 mov     [rsp+98h+ptr], rbx
.text:000000000000C361                 mov     rdi, rbx
.text:000000000000C364                 jnz     short loc_C350
.text:000000000000C366
.text:000000000000C366 loc_C366:                               ; CODE XREF: read_file_system_list+728↑j
.text:000000000000C366                 mov     [r12], r13d
.text:000000000000C36A                 xor     eax, eax
.text:000000000000C36C                 jmp     loc_BF01
.text:000000000000C36C ; ---------------------------------------------------------------------------
.text:000000000000C371                 align 8
.text:000000000000C378
.text:000000000000C378 loc_C378:                               ; CODE XREF: read_file_system_list+6C1↑j
.text:000000000000C378                 cmp     byte ptr [r15], 2Fh ; '/'
.text:000000000000C37C                 jz      short loc_C3F0
.text:000000000000C37E
.text:000000000000C37E loc_C37E:                               ; CODE XREF: read_file_system_list+7D5↓j
.text:000000000000C37E                                         ; read_file_system_list+813↓j
.text:000000000000C37E                 lea     rsi, aHosts     ; "-hosts"
.text:000000000000C385                 mov     ecx, 7
.text:000000000000C38A                 mov     rdi, r15
.text:000000000000C38D                 repe cmpsb
.text:000000000000C38F                 setnbe  al
.text:000000000000C392                 sbb     al, 0
.text:000000000000C394                 test    al, al
.text:000000000000C396                 setz    dl
.text:000000000000C399                 jmp     loc_C2E7
.text:000000000000C399 ; ---------------------------------------------------------------------------
.text:000000000000C39E                 align 20h
.text:000000000000C3A0
.text:000000000000C3A0 loc_C3A0:                               ; CODE XREF: read_file_system_list+454↑j
.text:000000000000C3A0                 cmp     byte ptr [r8+1], 2Fh ; '/'
.text:000000000000C3A5                 jnz     loc_C07A
.text:000000000000C3AB                 lea     rdi, aSmbfs     ; "smbfs"
.text:000000000000C3B2                 mov     ecx, 6
.text:000000000000C3B7                 mov     rsi, r15
.text:000000000000C3BA                 repe cmpsb
.text:000000000000C3BC                 setnbe  al
.text:000000000000C3BF                 sbb     al, 0
.text:000000000000C3C1                 test    al, al
.text:000000000000C3C3                 jz      loc_BEAE
.text:000000000000C3C9                 lea     rdi, aCifs      ; "cifs"
.text:000000000000C3D0                 mov     ecx, 5
.text:000000000000C3D5                 mov     rsi, r15
.text:000000000000C3D8                 repe cmpsb
.text:000000000000C3DA                 setnbe  al
.text:000000000000C3DD                 sbb     al, 0
.text:000000000000C3DF                 test    al, al
.text:000000000000C3E1                 jz      loc_BEAE
.text:000000000000C3E7                 jmp     loc_C07A
.text:000000000000C3E7 ; ---------------------------------------------------------------------------
.text:000000000000C3EC                 align 10h
.text:000000000000C3F0
.text:000000000000C3F0 loc_C3F0:                               ; CODE XREF: read_file_system_list+75C↑j
.text:000000000000C3F0                 cmp     byte ptr [r15+1], 2Fh ; '/'
.text:000000000000C3F5                 jnz     short loc_C37E
.text:000000000000C3F7                 lea     rdi, aSmbfs     ; "smbfs"
.text:000000000000C3FE                 mov     ecx, 6
.text:000000000000C403                 mov     rsi, r13
.text:000000000000C406                 repe cmpsb
.text:000000000000C408                 setnbe  al
.text:000000000000C40B                 sbb     al, 0
.text:000000000000C40D                 test    al, al
.text:000000000000C40F                 jz      loc_C2E7
.text:000000000000C415                 lea     rdi, aCifs      ; "cifs"
.text:000000000000C41C                 mov     ecx, 5
.text:000000000000C421                 mov     rsi, r13
.text:000000000000C424                 repe cmpsb
.text:000000000000C426                 setnbe  al
.text:000000000000C429                 sbb     al, 0
.text:000000000000C42B                 test    al, al
.text:000000000000C42D                 jz      loc_C2E7
.text:000000000000C433                 jmp     loc_C37E
.text:000000000000C433 ; ---------------------------------------------------------------------------
.text:000000000000C438                 align 20h
.text:000000000000C440
.text:000000000000C440 loc_C440:                               ; CODE XREF: read_file_system_list+2BE↑j
.text:000000000000C440                 call    ___errno_location
.text:000000000000C445                 mov     r13d, [rax]
.text:000000000000C448                 mov     r12, rax
.text:000000000000C44B                 mov     rdi, rbp        ; stream
.text:000000000000C44E                 call    rpl_fclose
.text:000000000000C453                 mov     [r12], r13d
.text:000000000000C457                 jmp     loc_C339
.text:000000000000C45C ; ---------------------------------------------------------------------------
.text:000000000000C45C
.text:000000000000C45C loc_C45C:                               ; CODE XREF: read_file_system_list+499↑j
.text:000000000000C45C                 xor     eax, eax
.text:000000000000C45E                 jmp     loc_BF01
.text:000000000000C463 ; ---------------------------------------------------------------------------
.text:000000000000C463
.text:000000000000C463 loc_C463:                               ; CODE XREF: read_file_system_list+2EF↑j
.text:000000000000C463                 call    ___stack_chk_fail
.text:000000000000C463 ; } // starts at BC20
.text:000000000000C463 read_file_system_list endp
.text:000000000000C463
.text:000000000000C463 ; ---------------------------------------------------------------------------
.text:000000000000C468                 align 10h
.text:000000000000C470
.text:000000000000C470 ; =============== S U B R O U T I N E =======================================
.text:000000000000C470
.text:000000000000C470 ; Attributes: info_from_lumina
.text:000000000000C470
.text:000000000000C470                 public u16_u16_vasprintf
.text:000000000000C470 u16_u16_vasprintf proc near             ; CODE XREF: gzprintf+8F↑p
.text:000000000000C470
.text:000000000000C470 var_18          = qword ptr -18h
.text:000000000000C470 var_10          = qword ptr -10h
.text:000000000000C470
.text:000000000000C470 ; __unwind {
.text:000000000000C470                 push    rbx
.text:000000000000C471                 mov     rax, rsi
.text:000000000000C474                 mov     rbx, rdi
.text:000000000000C477                 xor     edi, edi
.text:000000000000C479                 sub     rsp, 10h
.text:000000000000C47D                 mov     rcx, fs:28h
.text:000000000000C486                 mov     [rsp+18h+var_10], rcx
.text:000000000000C48B                 xor     ecx, ecx
.text:000000000000C48D                 mov     rsi, rsp
.text:000000000000C490                 mov     rcx, rdx
.text:000000000000C493                 mov     rdx, rax
.text:000000000000C496                 call    vasnprintf
.text:000000000000C49B                 test    rax, rax
.text:000000000000C49E                 jz      short loc_C4E2
.text:000000000000C4A0                 mov     rdx, [rsp+18h+var_18]
.text:000000000000C4A4                 cmp     rdx, 7FFFFFFFh
.text:000000000000C4AB                 ja      short loc_C4C8
.text:000000000000C4AD                 mov     [rbx], rax
.text:000000000000C4B0                 mov     eax, edx
.text:000000000000C4B2
.text:000000000000C4B2 loc_C4B2:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:000000000000C4B2                                         ; u16_u16_vasprintf+77↓j
.text:000000000000C4B2                 mov     rbx, [rsp+18h+var_10]
.text:000000000000C4B7                 xor     rbx, fs:28h
.text:000000000000C4C0                 jnz     short loc_C4E9
.text:000000000000C4C2                 add     rsp, 10h
.text:000000000000C4C6                 pop     rbx
.text:000000000000C4C7                 retn
.text:000000000000C4C8 ; ---------------------------------------------------------------------------
.text:000000000000C4C8
.text:000000000000C4C8 loc_C4C8:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:000000000000C4C8                 mov     rdi, rax        ; ptr
.text:000000000000C4CB                 call    _free
.text:000000000000C4D0                 call    ___errno_location
.text:000000000000C4D5                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000C4DB                 mov     eax, 0FFFFFFFFh
.text:000000000000C4E0                 jmp     short loc_C4B2
.text:000000000000C4E2 ; ---------------------------------------------------------------------------
.text:000000000000C4E2
.text:000000000000C4E2 loc_C4E2:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:000000000000C4E2                 mov     eax, 0FFFFFFFFh
.text:000000000000C4E7                 jmp     short loc_C4B2
.text:000000000000C4E9 ; ---------------------------------------------------------------------------
.text:000000000000C4E9
.text:000000000000C4E9 loc_C4E9:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:000000000000C4E9                 call    ___stack_chk_fail
.text:000000000000C4E9 ; } // starts at C470
.text:000000000000C4E9 u16_u16_vasprintf endp
.text:000000000000C4E9
.text:000000000000C4E9 ; ---------------------------------------------------------------------------
.text:000000000000C4EE                 align 10h
.text:000000000000C4F0
.text:000000000000C4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C4F0
.text:000000000000C4F0 ; Attributes: info_from_lumina
.text:000000000000C4F0
.text:000000000000C4F0 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:000000000000C4F0                 public areadlink_with_size
.text:000000000000C4F0 areadlink_with_size proc near           ; CODE XREF: canonicalize_filename_mode+42C↑p
.text:000000000000C4F0 ; __unwind {
.text:000000000000C4F0                 push    r15
.text:000000000000C4F2                 push    r14
.text:000000000000C4F4                 mov     eax, 401h
.text:000000000000C4F9                 push    r13
.text:000000000000C4FB                 push    r12
.text:000000000000C4FD                 mov     r13, rdi
.text:000000000000C500                 push    rbp
.text:000000000000C501                 push    rbx
.text:000000000000C502                 lea     rbx, [rsi+1]
.text:000000000000C506                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:000000000000C510                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:000000000000C51A                 sub     rsp, 8
.text:000000000000C51E                 cmp     rsi, 401h
.text:000000000000C525                 cmovnb  rbx, rax
.text:000000000000C529                 nop     dword ptr [rax+00000000h]
.text:000000000000C530
.text:000000000000C530 loc_C530:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:000000000000C530                 mov     rdi, rbx        ; size
.text:000000000000C533                 call    _malloc
.text:000000000000C538                 test    rax, rax
.text:000000000000C53B                 mov     rbp, rax
.text:000000000000C53E                 jz      short loc_C57B
.text:000000000000C540
.text:000000000000C540 loc_C540:                               ; CODE XREF: areadlink_with_size+89↓j
.text:000000000000C540                 mov     rdx, rbx        ; len
.text:000000000000C543                 mov     rsi, rax        ; buf
.text:000000000000C546                 mov     rdi, r13        ; path
.text:000000000000C549                 call    _readlink
.text:000000000000C54E                 test    rax, rax
.text:000000000000C551                 mov     r12, rax
.text:000000000000C554                 js      short loc_C5A8
.text:000000000000C556
.text:000000000000C556 loc_C556:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:000000000000C556                 cmp     rbx, r12
.text:000000000000C559                 ja      short loc_C5C0
.text:000000000000C55B                 mov     rdi, rbp        ; ptr
.text:000000000000C55E                 call    _free
.text:000000000000C563                 cmp     rbx, r14
.text:000000000000C566                 ja      short loc_C590
.text:000000000000C568                 add     rbx, rbx
.text:000000000000C56B                 mov     rdi, rbx        ; size
.text:000000000000C56E                 call    _malloc
.text:000000000000C573                 test    rax, rax
.text:000000000000C576                 mov     rbp, rax
.text:000000000000C579                 jnz     short loc_C540
.text:000000000000C57B
.text:000000000000C57B loc_C57B:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000C57B                                         ; areadlink_with_size+CC↓j ...
.text:000000000000C57B                 add     rsp, 8
.text:000000000000C57F                 mov     rax, rbp
.text:000000000000C582                 pop     rbx
.text:000000000000C583                 pop     rbp
.text:000000000000C584                 pop     r12
.text:000000000000C586                 pop     r13
.text:000000000000C588                 pop     r14
.text:000000000000C58A                 pop     r15
.text:000000000000C58C                 retn
.text:000000000000C58C ; ---------------------------------------------------------------------------
.text:000000000000C58D                 align 10h
.text:000000000000C590
.text:000000000000C590 loc_C590:                               ; CODE XREF: areadlink_with_size+76↑j
.text:000000000000C590                 cmp     rbx, r15
.text:000000000000C593                 ja      short loc_C5D0
.text:000000000000C595                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:000000000000C59F                 jmp     short loc_C530
.text:000000000000C59F ; ---------------------------------------------------------------------------
.text:000000000000C5A1                 align 8
.text:000000000000C5A8
.text:000000000000C5A8 loc_C5A8:                               ; CODE XREF: areadlink_with_size+64↑j
.text:000000000000C5A8                 call    ___errno_location
.text:000000000000C5AD                 cmp     dword ptr [rax], 22h ; '"'
.text:000000000000C5B0                 jz      short loc_C556
.text:000000000000C5B2                 mov     rdi, rbp        ; ptr
.text:000000000000C5B5                 xor     ebp, ebp
.text:000000000000C5B7                 call    _free
.text:000000000000C5BC                 jmp     short loc_C57B
.text:000000000000C5BC ; ---------------------------------------------------------------------------
.text:000000000000C5BE                 align 20h
.text:000000000000C5C0
.text:000000000000C5C0 loc_C5C0:                               ; CODE XREF: areadlink_with_size+69↑j
.text:000000000000C5C0                 mov     byte ptr [rbp+r12+0], 0
.text:000000000000C5C6                 jmp     short loc_C57B
.text:000000000000C5C6 ; ---------------------------------------------------------------------------
.text:000000000000C5C8                 align 10h
.text:000000000000C5D0
.text:000000000000C5D0 loc_C5D0:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:000000000000C5D0                 call    ___errno_location
.text:000000000000C5D5                 xor     ebp, ebp
.text:000000000000C5D7                 mov     dword ptr [rax], 0Ch
.text:000000000000C5DD                 jmp     short loc_C57B
.text:000000000000C5DD ; } // starts at C4F0
.text:000000000000C5DD areadlink_with_size endp
.text:000000000000C5DD
.text:000000000000C5DD ; ---------------------------------------------------------------------------
.text:000000000000C5DF                 align 20h
.text:000000000000C5E0
.text:000000000000C5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C5E0
.text:000000000000C5E0 ; Attributes: noreturn
.text:000000000000C5E0
.text:000000000000C5E0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:000000000000C5E0 ; __unwind {
.text:000000000000C5E0                 mov     edi, 1          ; status
.text:000000000000C5E5                 jmp     usage
.text:000000000000C5E5 ; } // starts at C5E0
.text:000000000000C5E5 __argmatch_die  endp
.text:000000000000C5E5
.text:000000000000C5E5 ; ---------------------------------------------------------------------------
.text:000000000000C5EA                 align 10h
.text:000000000000C5F0
.text:000000000000C5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C5F0
.text:000000000000C5F0 ; Attributes: info_from_lumina
.text:000000000000C5F0
.text:000000000000C5F0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000C5F0                 public argmatch
.text:000000000000C5F0 argmatch        proc near               ; CODE XREF: human_options+52↑p
.text:000000000000C5F0                                         ; __xargmatch_internal+2C↓p
.text:000000000000C5F0
.text:000000000000C5F0 var_58          = qword ptr -58h
.text:000000000000C5F0 s2              = qword ptr -50h
.text:000000000000C5F0 var_41          = byte ptr -41h
.text:000000000000C5F0 var_40          = qword ptr -40h
.text:000000000000C5F0
.text:000000000000C5F0 ; __unwind {
.text:000000000000C5F0                 push    r15
.text:000000000000C5F2                 push    r14
.text:000000000000C5F4                 mov     r15, rsi
.text:000000000000C5F7                 push    r13
.text:000000000000C5F9                 push    r12
.text:000000000000C5FB                 mov     r13, rcx
.text:000000000000C5FE                 push    rbp
.text:000000000000C5FF                 push    rbx
.text:000000000000C600                 mov     rbp, rdx
.text:000000000000C603                 sub     rsp, 28h
.text:000000000000C607                 mov     [rsp+58h+s2], rdi
.text:000000000000C60C                 mov     [rsp+58h+var_40], rdx
.text:000000000000C611                 call    _strlen
.text:000000000000C616                 mov     r14, [r15]
.text:000000000000C619                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000C621                 test    r14, r14
.text:000000000000C624                 jz      loc_C6DD
.text:000000000000C62A                 mov     r12, rax
.text:000000000000C62D                 mov     [rsp+58h+var_41], 0
.text:000000000000C632                 xor     ebx, ebx
.text:000000000000C634                 jmp     short loc_C687
.text:000000000000C634 ; ---------------------------------------------------------------------------
.text:000000000000C636                 align 20h
.text:000000000000C640
.text:000000000000C640 loc_C640:                               ; CODE XREF: argmatch+BD↓j
.text:000000000000C640                 mov     rax, [rsp+58h+var_40]
.text:000000000000C645                 test    rax, rax
.text:000000000000C648                 jz      loc_C6F0
.text:000000000000C64E                 mov     rdi, [rsp+58h+var_58]
.text:000000000000C652                 mov     rdx, r13        ; n
.text:000000000000C655                 mov     rsi, rbp        ; s2
.text:000000000000C658                 imul    rdi, r13
.text:000000000000C65C                 add     rdi, rax        ; s1
.text:000000000000C65F                 call    _memcmp
.text:000000000000C664                 test    eax, eax
.text:000000000000C666                 movzx   eax, [rsp+58h+var_41]
.text:000000000000C66B                 mov     ecx, 1
.text:000000000000C670                 cmovnz  eax, ecx
.text:000000000000C673                 mov     [rsp+58h+var_41], al
.text:000000000000C677
.text:000000000000C677 loc_C677:                               ; CODE XREF: argmatch+A9↓j
.text:000000000000C677                                         ; argmatch+105↓j
.text:000000000000C677                 add     rbx, 1
.text:000000000000C67B                 add     rbp, r13
.text:000000000000C67E                 mov     r14, [r15+rbx*8]
.text:000000000000C682                 test    r14, r14
.text:000000000000C685                 jz      short loc_C6C8
.text:000000000000C687
.text:000000000000C687 loc_C687:                               ; CODE XREF: argmatch+44↑j
.text:000000000000C687                                         ; argmatch+D1↓j
.text:000000000000C687                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000C68C                 mov     rdx, r12        ; n
.text:000000000000C68F                 mov     rdi, r14        ; s1
.text:000000000000C692                 call    _strncmp
.text:000000000000C697                 test    eax, eax
.text:000000000000C699                 jnz     short loc_C677
.text:000000000000C69B                 mov     rdi, r14        ; s
.text:000000000000C69E                 call    _strlen
.text:000000000000C6A3                 cmp     rax, r12
.text:000000000000C6A6                 jz      short loc_C700
.text:000000000000C6A8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000C6AD                 jnz     short loc_C640
.text:000000000000C6AF                 mov     [rsp+58h+var_58], rbx
.text:000000000000C6B3                 add     rbx, 1
.text:000000000000C6B7                 add     rbp, r13
.text:000000000000C6BA                 mov     r14, [r15+rbx*8]
.text:000000000000C6BE                 test    r14, r14
.text:000000000000C6C1                 jnz     short loc_C687
.text:000000000000C6C3                 nop     dword ptr [rax+rax+00h]
.text:000000000000C6C8
.text:000000000000C6C8 loc_C6C8:                               ; CODE XREF: argmatch+95↑j
.text:000000000000C6C8                 cmp     [rsp+58h+var_41], 0
.text:000000000000C6CD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000C6D4                 cmovz   rax, [rsp+58h+var_58]
.text:000000000000C6D9                 mov     [rsp+58h+var_58], rax
.text:000000000000C6DD
.text:000000000000C6DD loc_C6DD:                               ; CODE XREF: argmatch+34↑j
.text:000000000000C6DD                                         ; argmatch+114↓j
.text:000000000000C6DD                 mov     rax, [rsp+58h+var_58]
.text:000000000000C6E1                 add     rsp, 28h
.text:000000000000C6E5                 pop     rbx
.text:000000000000C6E6                 pop     rbp
.text:000000000000C6E7                 pop     r12
.text:000000000000C6E9                 pop     r13
.text:000000000000C6EB                 pop     r14
.text:000000000000C6ED                 pop     r15
.text:000000000000C6EF                 retn
.text:000000000000C6F0 ; ---------------------------------------------------------------------------
.text:000000000000C6F0
.text:000000000000C6F0 loc_C6F0:                               ; CODE XREF: argmatch+58↑j
.text:000000000000C6F0                 mov     [rsp+58h+var_41], 1
.text:000000000000C6F5                 jmp     short loc_C677
.text:000000000000C6F5 ; ---------------------------------------------------------------------------
.text:000000000000C6F7                 align 20h
.text:000000000000C700
.text:000000000000C700 loc_C700:                               ; CODE XREF: argmatch+B6↑j
.text:000000000000C700                 mov     [rsp+58h+var_58], rbx
.text:000000000000C704                 jmp     short loc_C6DD
.text:000000000000C704 ; } // starts at C5F0
.text:000000000000C704 argmatch        endp
.text:000000000000C704
.text:000000000000C704 ; ---------------------------------------------------------------------------
.text:000000000000C706                 align 10h
.text:000000000000C710
.text:000000000000C710 ; =============== S U B R O U T I N E =======================================
.text:000000000000C710
.text:000000000000C710 ; Attributes: info_from_lumina
.text:000000000000C710
.text:000000000000C710 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:000000000000C710                 public argmatch_invalid
.text:000000000000C710 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:000000000000C710 ; __unwind {
.text:000000000000C710                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C714                 push    r12
.text:000000000000C716                 mov     edx, 5          ; category
.text:000000000000C71B                 push    rbp
.text:000000000000C71C                 mov     r12, rsi
.text:000000000000C71F                 push    rbx
.text:000000000000C720                 mov     rbp, rdi
.text:000000000000C723                 jz      short loc_C770
.text:000000000000C725                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000C72C                 xor     edi, edi        ; domainname
.text:000000000000C72E                 call    _dcgettext
.text:000000000000C733                 mov     rbx, rax
.text:000000000000C736
.text:000000000000C736 loc_C736:                               ; CODE XREF: argmatch_invalid+71↓j
.text:000000000000C736                 mov     rsi, rbp
.text:000000000000C739                 mov     edi, 1
.text:000000000000C73E                 call    quote_n
.text:000000000000C743                 mov     rdx, r12
.text:000000000000C746                 mov     rbp, rax
.text:000000000000C749                 mov     esi, 8
.text:000000000000C74E                 xor     edi, edi
.text:000000000000C750                 call    quotearg_n_style
.text:000000000000C755                 mov     r8, rbp
.text:000000000000C758                 mov     rdx, rbx        ; format
.text:000000000000C75B                 mov     rcx, rax
.text:000000000000C75E                 pop     rbx
.text:000000000000C75F                 pop     rbp
.text:000000000000C760                 pop     r12
.text:000000000000C762                 xor     esi, esi        ; errnum
.text:000000000000C764                 xor     edi, edi        ; status
.text:000000000000C766                 xor     eax, eax
.text:000000000000C768                 jmp     _error
.text:000000000000C768 ; ---------------------------------------------------------------------------
.text:000000000000C76D                 align 10h
.text:000000000000C770
.text:000000000000C770 loc_C770:                               ; CODE XREF: argmatch_invalid+13↑j
.text:000000000000C770                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:000000000000C777                 xor     edi, edi        ; domainname
.text:000000000000C779                 call    _dcgettext
.text:000000000000C77E                 mov     rbx, rax
.text:000000000000C781                 jmp     short loc_C736
.text:000000000000C781 ; } // starts at C710
.text:000000000000C781 argmatch_invalid endp
.text:000000000000C781
.text:000000000000C781 ; ---------------------------------------------------------------------------
.text:000000000000C783                 align 10h
.text:000000000000C790
.text:000000000000C790 ; =============== S U B R O U T I N E =======================================
.text:000000000000C790
.text:000000000000C790 ; Attributes: info_from_lumina
.text:000000000000C790
.text:000000000000C790 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000C790                 public argmatch_valid
.text:000000000000C790 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:000000000000C790 ; __unwind {
.text:000000000000C790                 push    r15
.text:000000000000C792                 push    r14
.text:000000000000C794                 mov     r14, rdi
.text:000000000000C797                 push    r13
.text:000000000000C799                 push    r12
.text:000000000000C79B                 xor     edi, edi        ; domainname
.text:000000000000C79D                 push    rbp
.text:000000000000C79E                 push    rbx
.text:000000000000C79F                 mov     rbp, rsi
.text:000000000000C7A2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:000000000000C7A9                 mov     r12, rdx
.text:000000000000C7AC                 mov     edx, 5          ; category
.text:000000000000C7B1                 sub     rsp, 8
.text:000000000000C7B5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000C7BC                 call    _dcgettext
.text:000000000000C7C1                 mov     rdi, rax        ; s
.text:000000000000C7C4                 mov     rsi, rbx        ; stream
.text:000000000000C7C7                 call    _fputs_unlocked
.text:000000000000C7CC                 mov     r15, [r14]
.text:000000000000C7CF                 test    r15, r15
.text:000000000000C7D2                 jz      loc_C868
.text:000000000000C7D8                 xor     r13d, r13d
.text:000000000000C7DB                 xor     ebx, ebx
.text:000000000000C7DD                 jmp     short loc_C818
.text:000000000000C7DD ; ---------------------------------------------------------------------------
.text:000000000000C7DF                 align 20h
.text:000000000000C7E0
.text:000000000000C7E0 loc_C7E0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:000000000000C7E0                                         ; argmatch_valid+9D↓j
.text:000000000000C7E0                 mov     rdi, r15
.text:000000000000C7E3                 add     rbx, 1
.text:000000000000C7E7                 mov     r13, rbp
.text:000000000000C7EA                 call    quote
.text:000000000000C7EF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000C7F6                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000C7FD                 mov     rcx, rax
.text:000000000000C800                 mov     esi, 1
.text:000000000000C805                 xor     eax, eax
.text:000000000000C807                 add     rbp, r12
.text:000000000000C80A                 call    ___fprintf_chk
.text:000000000000C80F                 mov     r15, [r14+rbx*8]
.text:000000000000C813                 test    r15, r15
.text:000000000000C816                 jz      short loc_C868
.text:000000000000C818
.text:000000000000C818 loc_C818:                               ; CODE XREF: argmatch_valid+4D↑j
.text:000000000000C818                                         ; argmatch_valid+D2↓j
.text:000000000000C818                 test    rbx, rbx
.text:000000000000C81B                 jz      short loc_C7E0
.text:000000000000C81D                 mov     rdx, r12        ; n
.text:000000000000C820                 mov     rsi, rbp        ; s2
.text:000000000000C823                 mov     rdi, r13        ; s1
.text:000000000000C826                 call    _memcmp
.text:000000000000C82B                 test    eax, eax
.text:000000000000C82D                 jnz     short loc_C7E0
.text:000000000000C82F                 mov     rdi, r15
.text:000000000000C832                 add     rbx, 1
.text:000000000000C836                 add     rbp, r12
.text:000000000000C839                 call    quote
.text:000000000000C83E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000C845                 lea     rdx, aS_0       ; ", %s"
.text:000000000000C84C                 mov     rcx, rax
.text:000000000000C84F                 mov     esi, 1
.text:000000000000C854                 xor     eax, eax
.text:000000000000C856                 call    ___fprintf_chk
.text:000000000000C85B                 mov     r15, [r14+rbx*8]
.text:000000000000C85F                 test    r15, r15
.text:000000000000C862                 jnz     short loc_C818
.text:000000000000C864                 nop     dword ptr [rax+00h]
.text:000000000000C868
.text:000000000000C868 loc_C868:                               ; CODE XREF: argmatch_valid+42↑j
.text:000000000000C868                                         ; argmatch_valid+86↑j
.text:000000000000C868                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000C86F                 mov     rax, [rdi+28h]
.text:000000000000C873                 cmp     rax, [rdi+30h]
.text:000000000000C877                 jnb     short loc_C898
.text:000000000000C879                 lea     rdx, [rax+1]
.text:000000000000C87D                 mov     [rdi+28h], rdx
.text:000000000000C881                 mov     byte ptr [rax], 0Ah
.text:000000000000C884                 add     rsp, 8
.text:000000000000C888                 pop     rbx
.text:000000000000C889                 pop     rbp
.text:000000000000C88A                 pop     r12
.text:000000000000C88C                 pop     r13
.text:000000000000C88E                 pop     r14
.text:000000000000C890                 pop     r15
.text:000000000000C892                 retn
.text:000000000000C892 ; ---------------------------------------------------------------------------
.text:000000000000C893                 align 8
.text:000000000000C898
.text:000000000000C898 loc_C898:                               ; CODE XREF: argmatch_valid+E7↑j
.text:000000000000C898                 add     rsp, 8
.text:000000000000C89C                 mov     esi, 0Ah        ; int
.text:000000000000C8A1                 pop     rbx
.text:000000000000C8A2                 pop     rbp
.text:000000000000C8A3                 pop     r12
.text:000000000000C8A5                 pop     r13
.text:000000000000C8A7                 pop     r14
.text:000000000000C8A9                 pop     r15
.text:000000000000C8AB                 jmp     ___overflow
.text:000000000000C8AB ; } // starts at C790
.text:000000000000C8AB argmatch_valid  endp
.text:000000000000C8AB
.text:000000000000C8B0
.text:000000000000C8B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C8B0
.text:000000000000C8B0 ; Attributes: info_from_lumina
.text:000000000000C8B0
.text:000000000000C8B0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:000000000000C8B0                 public __xargmatch_internal
.text:000000000000C8B0 __xargmatch_internal proc near
.text:000000000000C8B0 ; __unwind {
.text:000000000000C8B0                 push    r15
.text:000000000000C8B2                 push    r14
.text:000000000000C8B4                 mov     r14, rdi
.text:000000000000C8B7                 push    r13
.text:000000000000C8B9                 push    r12
.text:000000000000C8BB                 mov     r12, rsi
.text:000000000000C8BE                 push    rbp
.text:000000000000C8BF                 push    rbx
.text:000000000000C8C0                 mov     rbp, rcx
.text:000000000000C8C3                 mov     rbx, rdx
.text:000000000000C8C6                 mov     rcx, r8
.text:000000000000C8C9                 mov     rdx, rbp
.text:000000000000C8CC                 sub     rsp, 8
.text:000000000000C8D0                 mov     rsi, rbx
.text:000000000000C8D3                 mov     rdi, r12
.text:000000000000C8D6                 mov     r15, r8
.text:000000000000C8D9                 mov     r13, r9
.text:000000000000C8DC                 call    argmatch
.text:000000000000C8E1                 test    rax, rax
.text:000000000000C8E4                 js      short loc_C8F5
.text:000000000000C8E6
.text:000000000000C8E6 loc_C8E6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:000000000000C8E6                 add     rsp, 8
.text:000000000000C8EA                 pop     rbx
.text:000000000000C8EB                 pop     rbp
.text:000000000000C8EC                 pop     r12
.text:000000000000C8EE                 pop     r13
.text:000000000000C8F0                 pop     r14
.text:000000000000C8F2                 pop     r15
.text:000000000000C8F4                 retn
.text:000000000000C8F5 ; ---------------------------------------------------------------------------
.text:000000000000C8F5
.text:000000000000C8F5 loc_C8F5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:000000000000C8F5                 mov     rdx, rax
.text:000000000000C8F8                 mov     rsi, r12
.text:000000000000C8FB                 mov     rdi, r14
.text:000000000000C8FE                 call    argmatch_invalid
.text:000000000000C903                 mov     rdx, r15
.text:000000000000C906                 mov     rsi, rbp
.text:000000000000C909                 mov     rdi, rbx
.text:000000000000C90C                 call    argmatch_valid
.text:000000000000C911                 call    r13
.text:000000000000C914                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C91B                 jmp     short loc_C8E6
.text:000000000000C91B ; } // starts at C8B0
.text:000000000000C91B __xargmatch_internal endp
.text:000000000000C91B
.text:000000000000C91B ; ---------------------------------------------------------------------------
.text:000000000000C91D                 align 20h
.text:000000000000C920
.text:000000000000C920 ; =============== S U B R O U T I N E =======================================
.text:000000000000C920
.text:000000000000C920 ; Attributes: info_from_lumina
.text:000000000000C920
.text:000000000000C920 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000C920                 public argmatch_to_argument
.text:000000000000C920 argmatch_to_argument proc near
.text:000000000000C920 ; __unwind {
.text:000000000000C920                 push    r14
.text:000000000000C922                 push    r13
.text:000000000000C924                 push    r12
.text:000000000000C926                 push    rbp
.text:000000000000C927                 push    rbx
.text:000000000000C928                 mov     r14, [rsi]
.text:000000000000C92B                 test    r14, r14
.text:000000000000C92E                 jz      short loc_C961
.text:000000000000C930                 mov     r12, rcx
.text:000000000000C933                 mov     r13, rdi
.text:000000000000C936                 mov     rbp, rdx
.text:000000000000C939                 lea     rbx, [rsi+8]
.text:000000000000C93D                 jmp     short loc_C94F
.text:000000000000C93D ; ---------------------------------------------------------------------------
.text:000000000000C93F                 align 20h
.text:000000000000C940
.text:000000000000C940 loc_C940:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:000000000000C940                 mov     r14, [rbx]
.text:000000000000C943                 add     rbp, r12
.text:000000000000C946                 add     rbx, 8
.text:000000000000C94A                 test    r14, r14
.text:000000000000C94D                 jz      short loc_C961
.text:000000000000C94F
.text:000000000000C94F loc_C94F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000C94F                 mov     rdx, r12        ; n
.text:000000000000C952                 mov     rsi, rbp        ; s2
.text:000000000000C955                 mov     rdi, r13        ; s1
.text:000000000000C958                 call    _memcmp
.text:000000000000C95D                 test    eax, eax
.text:000000000000C95F                 jnz     short loc_C940
.text:000000000000C961
.text:000000000000C961 loc_C961:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:000000000000C961                                         ; argmatch_to_argument+2D↑j
.text:000000000000C961                 pop     rbx
.text:000000000000C962                 mov     rax, r14
.text:000000000000C965                 pop     rbp
.text:000000000000C966                 pop     r12
.text:000000000000C968                 pop     r13
.text:000000000000C96A                 pop     r14
.text:000000000000C96C                 retn
.text:000000000000C96C ; } // starts at C920
.text:000000000000C96C argmatch_to_argument endp
.text:000000000000C96C
.text:000000000000C96C ; ---------------------------------------------------------------------------
.text:000000000000C96D                 align 10h
.text:000000000000C970
.text:000000000000C970 ; =============== S U B R O U T I N E =======================================
.text:000000000000C970
.text:000000000000C970 ; Attributes: info_from_lumina
.text:000000000000C970
.text:000000000000C970 ; int __fastcall close_stream(FILE *stream)
.text:000000000000C970                 public close_stream
.text:000000000000C970 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000000C970                                         ; close_stdout+33↑p
.text:000000000000C970 ; __unwind {
.text:000000000000C970                 push    r12
.text:000000000000C972                 push    rbp
.text:000000000000C973                 mov     rbp, rdi
.text:000000000000C976                 push    rbx
.text:000000000000C977                 call    ___fpending
.text:000000000000C97C                 mov     ebx, [rbp+0]
.text:000000000000C97F                 mov     rdi, rbp        ; stream
.text:000000000000C982                 mov     r12, rax
.text:000000000000C985                 call    rpl_fclose
.text:000000000000C98A                 and     ebx, 20h
.text:000000000000C98D                 test    ebx, ebx
.text:000000000000C98F                 jnz     short loc_C9A8
.text:000000000000C991                 test    eax, eax
.text:000000000000C993                 jz      short loc_C99F
.text:000000000000C995                 test    r12, r12
.text:000000000000C998                 mov     eax, 0FFFFFFFFh
.text:000000000000C99D                 jz      short loc_C9D8
.text:000000000000C99F
.text:000000000000C99F loc_C99F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000C99F                 pop     rbx
.text:000000000000C9A0                 pop     rbp
.text:000000000000C9A1                 pop     r12
.text:000000000000C9A3                 retn
.text:000000000000C9A3 ; ---------------------------------------------------------------------------
.text:000000000000C9A4                 align 8
.text:000000000000C9A8
.text:000000000000C9A8 loc_C9A8:                               ; CODE XREF: close_stream+1F↑j
.text:000000000000C9A8                 test    eax, eax
.text:000000000000C9AA                 jnz     short loc_C9C8
.text:000000000000C9AC                 call    ___errno_location
.text:000000000000C9B1                 mov     dword ptr [rax], 0
.text:000000000000C9B7                 mov     eax, 0FFFFFFFFh
.text:000000000000C9BC                 pop     rbx
.text:000000000000C9BD                 pop     rbp
.text:000000000000C9BE                 pop     r12
.text:000000000000C9C0                 retn
.text:000000000000C9C0 ; ---------------------------------------------------------------------------
.text:000000000000C9C1                 align 8
.text:000000000000C9C8
.text:000000000000C9C8 loc_C9C8:                               ; CODE XREF: close_stream+3A↑j
.text:000000000000C9C8                 pop     rbx
.text:000000000000C9C9                 mov     eax, 0FFFFFFFFh
.text:000000000000C9CE                 pop     rbp
.text:000000000000C9CF                 pop     r12
.text:000000000000C9D1                 retn
.text:000000000000C9D1 ; ---------------------------------------------------------------------------
.text:000000000000C9D2                 align 8
.text:000000000000C9D8
.text:000000000000C9D8 loc_C9D8:                               ; CODE XREF: close_stream+2D↑j
.text:000000000000C9D8                 call    ___errno_location
.text:000000000000C9DD                 cmp     dword ptr [rax], 9
.text:000000000000C9E0                 pop     rbx
.text:000000000000C9E1                 pop     rbp
.text:000000000000C9E2                 pop     r12
.text:000000000000C9E4                 setnz   al
.text:000000000000C9E7                 movzx   eax, al
.text:000000000000C9EA                 neg     eax
.text:000000000000C9EC                 retn
.text:000000000000C9EC ; } // starts at C970
.text:000000000000C9EC close_stream    endp
.text:000000000000C9EC
.text:000000000000C9EC ; ---------------------------------------------------------------------------
.text:000000000000C9ED                 align 10h
.text:000000000000C9F0
.text:000000000000C9F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C9F0
.text:000000000000C9F0
.text:000000000000C9F0                 public open_safer
.text:000000000000C9F0 open_safer      proc near               ; CODE XREF: save_cwd+1A↑p
.text:000000000000C9F0
.text:000000000000C9F0 var_58          = dword ptr -58h
.text:000000000000C9F0 var_50          = qword ptr -50h
.text:000000000000C9F0 var_48          = qword ptr -48h
.text:000000000000C9F0 var_40          = qword ptr -40h
.text:000000000000C9F0 var_38          = byte ptr -38h
.text:000000000000C9F0 var_28          = qword ptr -28h
.text:000000000000C9F0 arg_0           = byte ptr  8
.text:000000000000C9F0
.text:000000000000C9F0 ; __unwind {
.text:000000000000C9F0                 sub     rsp, 58h
.text:000000000000C9F4                 mov     [rsp+58h+var_28], rdx
.text:000000000000C9F9                 xor     edx, edx
.text:000000000000C9FB                 mov     rax, fs:28h
.text:000000000000CA04                 mov     [rsp+58h+var_40], rax
.text:000000000000CA09                 xor     eax, eax
.text:000000000000CA0B                 test    sil, 40h
.text:000000000000CA0F                 jnz     short loc_CA38
.text:000000000000CA11
.text:000000000000CA11 loc_CA11:                               ; CODE XREF: open_safer+67↓j
.text:000000000000CA11                 xor     eax, eax
.text:000000000000CA13                 call    _open
.text:000000000000CA18                 mov     edi, eax        ; fd
.text:000000000000CA1A                 call    fd_safer_flag
.text:000000000000CA1F                 mov     rcx, [rsp+58h+var_40]
.text:000000000000CA24                 xor     rcx, fs:28h
.text:000000000000CA2D                 jnz     short loc_CA59
.text:000000000000CA2F                 add     rsp, 58h
.text:000000000000CA33                 retn
.text:000000000000CA33 ; ---------------------------------------------------------------------------
.text:000000000000CA34                 align 8
.text:000000000000CA38
.text:000000000000CA38 loc_CA38:                               ; CODE XREF: open_safer+1F↑j
.text:000000000000CA38                 lea     rax, [rsp+58h+arg_0]
.text:000000000000CA3D                 mov     [rsp+58h+var_58], 10h
.text:000000000000CA44                 mov     edx, dword ptr [rsp+58h+var_28]
.text:000000000000CA48                 mov     [rsp+58h+var_50], rax
.text:000000000000CA4D                 lea     rax, [rsp+58h+var_38]
.text:000000000000CA52                 mov     [rsp+58h+var_48], rax
.text:000000000000CA57                 jmp     short loc_CA11
.text:000000000000CA59 ; ---------------------------------------------------------------------------
.text:000000000000CA59
.text:000000000000CA59 loc_CA59:                               ; CODE XREF: open_safer+3D↑j
.text:000000000000CA59                 call    ___stack_chk_fail
.text:000000000000CA59 ; } // starts at C9F0
.text:000000000000CA59 open_safer      endp
.text:000000000000CA59
.text:000000000000CA59 ; ---------------------------------------------------------------------------
.text:000000000000CA5E                 align 20h
.text:000000000000CA60
.text:000000000000CA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA60
.text:000000000000CA60
.text:000000000000CA60                 public hard_locale
.text:000000000000CA60 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000000CA60 ; __unwind {
.text:000000000000CA60                 sub     rsp, 8
.text:000000000000CA64                 xor     esi, esi        ; locale
.text:000000000000CA66                 call    _setlocale
.text:000000000000CA6B                 mov     rdx, rax
.text:000000000000CA6E                 mov     eax, 1
.text:000000000000CA73                 test    rdx, rdx
.text:000000000000CA76                 jz      short loc_CA95
.text:000000000000CA78                 lea     rdi, aC         ; "C"
.text:000000000000CA7F                 mov     ecx, 2
.text:000000000000CA84                 mov     rsi, rdx
.text:000000000000CA87                 repe cmpsb
.text:000000000000CA89                 setnbe  cl
.text:000000000000CA8C                 sbb     cl, 0
.text:000000000000CA8F                 xor     eax, eax
.text:000000000000CA91                 test    cl, cl
.text:000000000000CA93                 jnz     short loc_CAA0
.text:000000000000CA95
.text:000000000000CA95 loc_CA95:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000CA95                 add     rsp, 8
.text:000000000000CA99                 retn
.text:000000000000CA99 ; ---------------------------------------------------------------------------
.text:000000000000CA9A                 align 20h
.text:000000000000CAA0
.text:000000000000CAA0 loc_CAA0:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000CAA0                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000CAA7                 mov     ecx, 6
.text:000000000000CAAC                 mov     rsi, rdx
.text:000000000000CAAF                 repe cmpsb
.text:000000000000CAB1                 setnbe  al
.text:000000000000CAB4                 sbb     al, 0
.text:000000000000CAB6                 test    al, al
.text:000000000000CAB8                 setnz   al
.text:000000000000CABB                 add     rsp, 8
.text:000000000000CABF                 retn
.text:000000000000CABF ; } // starts at CA60
.text:000000000000CABF hard_locale     endp
.text:000000000000CABF
.text:000000000000CAC0
.text:000000000000CAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CAC0
.text:000000000000CAC0 ; Attributes: info_from_lumina
.text:000000000000CAC0
.text:000000000000CAC0 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:000000000000CAC0                 public hash_pjw
.text:000000000000CAC0 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:000000000000CAC0 ; __unwind {
.text:000000000000CAC0                 movsx   rcx, byte ptr [rdi]
.text:000000000000CAC4                 test    cl, cl
.text:000000000000CAC6                 jz      short loc_CAF0
.text:000000000000CAC8                 xor     eax, eax
.text:000000000000CACA                 nop     word ptr [rax+rax+00h]
.text:000000000000CAD0
.text:000000000000CAD0 loc_CAD0:                               ; CODE XREF: hash_pjw+21↓j
.text:000000000000CAD0                 rol     rax, 9
.text:000000000000CAD4                 add     rdi, 1
.text:000000000000CAD8                 add     rax, rcx
.text:000000000000CADB                 movsx   rcx, byte ptr [rdi]
.text:000000000000CADF                 test    cl, cl
.text:000000000000CAE1                 jnz     short loc_CAD0
.text:000000000000CAE3                 xor     edx, edx
.text:000000000000CAE5                 div     rsi
.text:000000000000CAE8                 mov     rax, rdx
.text:000000000000CAEB                 retn
.text:000000000000CAEB ; ---------------------------------------------------------------------------
.text:000000000000CAEC                 align 10h
.text:000000000000CAF0
.text:000000000000CAF0 loc_CAF0:                               ; CODE XREF: hash_pjw+6↑j
.text:000000000000CAF0                 xor     edx, edx
.text:000000000000CAF2                 mov     rax, rdx
.text:000000000000CAF5                 retn
.text:000000000000CAF5 ; } // starts at CAC0
.text:000000000000CAF5 hash_pjw        endp
.text:000000000000CAF5
.text:000000000000CAF5 ; ---------------------------------------------------------------------------
.text:000000000000CAF6                 align 20h
.text:000000000000CB00
.text:000000000000CB00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB00
.text:000000000000CB00
.text:000000000000CB00                 public locale_charset
.text:000000000000CB00 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000CB00 ; __unwind {
.text:000000000000CB00                 sub     rsp, 8
.text:000000000000CB04                 mov     edi, 0Eh        ; item
.text:000000000000CB09                 call    _nl_langinfo
.text:000000000000CB0E                 test    rax, rax
.text:000000000000CB11                 jz      short loc_CB30
.text:000000000000CB13                 cmp     byte ptr [rax], 0
.text:000000000000CB16                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000CB1D                 cmovz   rax, rdx
.text:000000000000CB21                 add     rsp, 8
.text:000000000000CB25                 retn
.text:000000000000CB25 ; ---------------------------------------------------------------------------
.text:000000000000CB26                 align 10h
.text:000000000000CB30
.text:000000000000CB30 loc_CB30:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000CB30                 lea     rax, aAscii     ; "ASCII"
.text:000000000000CB37                 add     rsp, 8
.text:000000000000CB3B                 retn
.text:000000000000CB3B ; } // starts at CB00
.text:000000000000CB3B locale_charset  endp
.text:000000000000CB3B
.text:000000000000CB3B ; ---------------------------------------------------------------------------
.text:000000000000CB3C                 align 20h
.text:000000000000CB40
.text:000000000000CB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB40
.text:000000000000CB40 ; Attributes: info_from_lumina
.text:000000000000CB40
.text:000000000000CB40 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000000CB40                 public fd_safer_flag
.text:000000000000CB40 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000000CB40 ; __unwind {
.text:000000000000CB40                 push    r13
.text:000000000000CB42                 push    r12
.text:000000000000CB44                 push    rbp
.text:000000000000CB45                 push    rbx
.text:000000000000CB46                 mov     ebx, edi
.text:000000000000CB48                 sub     rsp, 8
.text:000000000000CB4C                 cmp     edi, 2
.text:000000000000CB4F                 ja      short loc_CB72
.text:000000000000CB51                 call    dup_safer
.text:000000000000CB56                 mov     r12d, eax
.text:000000000000CB59                 call    ___errno_location
.text:000000000000CB5E                 mov     r13d, [rax]
.text:000000000000CB61                 mov     rbp, rax
.text:000000000000CB64                 mov     edi, ebx        ; fd
.text:000000000000CB66                 call    _close
.text:000000000000CB6B                 mov     ebx, r12d
.text:000000000000CB6E                 mov     [rbp+0], r13d
.text:000000000000CB72
.text:000000000000CB72 loc_CB72:                               ; CODE XREF: fd_safer_flag+F↑j
.text:000000000000CB72                 add     rsp, 8
.text:000000000000CB76                 mov     eax, ebx
.text:000000000000CB78                 pop     rbx
.text:000000000000CB79                 pop     rbp
.text:000000000000CB7A                 pop     r12
.text:000000000000CB7C                 pop     r13
.text:000000000000CB7E                 retn
.text:000000000000CB7E ; } // starts at CB40
.text:000000000000CB7E fd_safer_flag   endp
.text:000000000000CB7E
.text:000000000000CB7E ; ---------------------------------------------------------------------------
.text:000000000000CB7F                 align 20h
.text:000000000000CB80
.text:000000000000CB80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB80
.text:000000000000CB80 ; Attributes: info_from_lumina
.text:000000000000CB80
.text:000000000000CB80 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000CB80                 public rpl_fclose
.text:000000000000CB80 rpl_fclose      proc near               ; CODE XREF: read_file_system_list+2C7↑p
.text:000000000000CB80                                         ; read_file_system_list+82E↑p ...
.text:000000000000CB80 ; __unwind {
.text:000000000000CB80                 push    r12
.text:000000000000CB82                 push    rbp
.text:000000000000CB83                 push    rbx
.text:000000000000CB84                 mov     rbx, rdi
.text:000000000000CB87                 call    _fileno
.text:000000000000CB8C                 test    eax, eax
.text:000000000000CB8E                 mov     rdi, rbx        ; fp
.text:000000000000CB91                 js      short loc_CBE7
.text:000000000000CB93                 call    ___freading
.text:000000000000CB98                 test    eax, eax
.text:000000000000CB9A                 jnz     short loc_CBC8
.text:000000000000CB9C
.text:000000000000CB9C loc_CB9C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000CB9C                 mov     rdi, rbx        ; stream
.text:000000000000CB9F                 call    rpl_fflush
.text:000000000000CBA4                 test    eax, eax
.text:000000000000CBA6                 jz      short loc_CBE4
.text:000000000000CBA8                 call    ___errno_location
.text:000000000000CBAD                 mov     r12d, [rax]
.text:000000000000CBB0                 mov     rdi, rbx        ; stream
.text:000000000000CBB3                 mov     rbp, rax
.text:000000000000CBB6                 call    _fclose
.text:000000000000CBBB                 test    r12d, r12d
.text:000000000000CBBE                 jnz     short loc_CBF0
.text:000000000000CBC0
.text:000000000000CBC0 loc_CBC0:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000CBC0                 pop     rbx
.text:000000000000CBC1                 pop     rbp
.text:000000000000CBC2                 pop     r12
.text:000000000000CBC4                 retn
.text:000000000000CBC4 ; ---------------------------------------------------------------------------
.text:000000000000CBC5                 align 8
.text:000000000000CBC8
.text:000000000000CBC8 loc_CBC8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000CBC8                 mov     rdi, rbx        ; stream
.text:000000000000CBCB                 call    _fileno
.text:000000000000CBD0                 xor     esi, esi        ; offset
.text:000000000000CBD2                 mov     edx, 1          ; whence
.text:000000000000CBD7                 mov     edi, eax        ; fd
.text:000000000000CBD9                 call    _lseek
.text:000000000000CBDE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000CBE2                 jnz     short loc_CB9C
.text:000000000000CBE4
.text:000000000000CBE4 loc_CBE4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000CBE4                 mov     rdi, rbx        ; stream
.text:000000000000CBE7
.text:000000000000CBE7 loc_CBE7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000CBE7                 pop     rbx
.text:000000000000CBE8                 pop     rbp
.text:000000000000CBE9                 pop     r12
.text:000000000000CBEB                 jmp     _fclose
.text:000000000000CBF0 ; ---------------------------------------------------------------------------
.text:000000000000CBF0
.text:000000000000CBF0 loc_CBF0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000CBF0                 mov     [rbp+0], r12d
.text:000000000000CBF4                 mov     eax, 0FFFFFFFFh
.text:000000000000CBF9                 jmp     short loc_CBC0
.text:000000000000CBF9 ; } // starts at CB80
.text:000000000000CBF9 rpl_fclose      endp
.text:000000000000CBF9
.text:000000000000CBF9 ; ---------------------------------------------------------------------------
.text:000000000000CBFB                 align 20h
.text:000000000000CC00
.text:000000000000CC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC00
.text:000000000000CC00 ; Attributes: info_from_lumina
.text:000000000000CC00
.text:000000000000CC00 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000CC00                 public rpl_fflush
.text:000000000000CC00 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000CC00 ; __unwind {
.text:000000000000CC00                 test    rdi, rdi
.text:000000000000CC03                 push    rbx
.text:000000000000CC04                 mov     rbx, rdi
.text:000000000000CC07                 jz      short loc_CC1A
.text:000000000000CC09                 call    ___freading
.text:000000000000CC0E                 test    eax, eax
.text:000000000000CC10                 jz      short loc_CC1A
.text:000000000000CC12                 test    dword ptr [rbx], 100h
.text:000000000000CC18                 jnz     short loc_CC28
.text:000000000000CC1A
.text:000000000000CC1A loc_CC1A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000CC1A                                         ; rpl_fflush+10↑j
.text:000000000000CC1A                 mov     rdi, rbx        ; stream
.text:000000000000CC1D                 pop     rbx
.text:000000000000CC1E                 jmp     _fflush
.text:000000000000CC1E ; ---------------------------------------------------------------------------
.text:000000000000CC23                 align 8
.text:000000000000CC28
.text:000000000000CC28 loc_CC28:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000CC28                 mov     rdi, rbx
.text:000000000000CC2B                 mov     edx, 1
.text:000000000000CC30                 xor     esi, esi
.text:000000000000CC32                 call    rpl_fseeko
.text:000000000000CC37                 mov     rdi, rbx        ; stream
.text:000000000000CC3A                 pop     rbx
.text:000000000000CC3B                 jmp     _fflush
.text:000000000000CC3B ; } // starts at CC00
.text:000000000000CC3B rpl_fflush      endp
.text:000000000000CC3B
.text:000000000000CC40
.text:000000000000CC40 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC40
.text:000000000000CC40 ; Attributes: info_from_lumina
.text:000000000000CC40
.text:000000000000CC40 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000CC40                 public rpl_fseeko
.text:000000000000CC40 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000CC40 ; __unwind {
.text:000000000000CC40                 mov     rax, [rdi+8]
.text:000000000000CC44                 cmp     [rdi+10h], rax
.text:000000000000CC48                 jz      short loc_CC50
.text:000000000000CC4A
.text:000000000000CC4A loc_CC4A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000CC4A                                         ; rpl_fseeko+1F↓j
.text:000000000000CC4A                 jmp     _fseeko
.text:000000000000CC4A ; ---------------------------------------------------------------------------
.text:000000000000CC4F                 align 10h
.text:000000000000CC50
.text:000000000000CC50 loc_CC50:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000CC50                 mov     rax, [rdi+20h]
.text:000000000000CC54                 cmp     [rdi+28h], rax
.text:000000000000CC58                 jnz     short loc_CC4A
.text:000000000000CC5A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000CC5F                 jnz     short loc_CC4A
.text:000000000000CC61                 push    r12
.text:000000000000CC63                 push    rbp
.text:000000000000CC64                 mov     r12d, edx
.text:000000000000CC67                 push    rbx
.text:000000000000CC68                 mov     rbp, rsi
.text:000000000000CC6B                 mov     rbx, rdi
.text:000000000000CC6E                 call    _fileno
.text:000000000000CC73                 mov     edx, r12d       ; whence
.text:000000000000CC76                 mov     rsi, rbp        ; offset
.text:000000000000CC79                 mov     edi, eax        ; fd
.text:000000000000CC7B                 call    _lseek
.text:000000000000CC80                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000CC84                 jz      short loc_CC92
.text:000000000000CC86                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000CC89                 mov     [rbx+90h], rax
.text:000000000000CC90                 xor     eax, eax
.text:000000000000CC92
.text:000000000000CC92 loc_CC92:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000CC92                 pop     rbx
.text:000000000000CC93                 pop     rbp
.text:000000000000CC94                 pop     r12
.text:000000000000CC96                 retn
.text:000000000000CC96 ; } // starts at CC40
.text:000000000000CC96 rpl_fseeko      endp
.text:000000000000CC96
.text:000000000000CC96 ; ---------------------------------------------------------------------------
.text:000000000000CC97                 align 20h
.text:000000000000CCA0
.text:000000000000CCA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCA0
.text:000000000000CCA0 ; Attributes: bp-based frame
.text:000000000000CCA0
.text:000000000000CCA0                 public vasnprintf
.text:000000000000CCA0 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:000000000000CCA0
.text:000000000000CCA0 var_450         = tbyte ptr -450h
.text:000000000000CCA0 var_440         = tbyte ptr -440h
.text:000000000000CCA0 var_430         = qword ptr -430h
.text:000000000000CCA0 var_421         = byte ptr -421h
.text:000000000000CCA0 ptr             = qword ptr -420h
.text:000000000000CCA0 var_418         = qword ptr -418h
.text:000000000000CCA0 var_410         = qword ptr -410h
.text:000000000000CCA0 var_408         = qword ptr -408h
.text:000000000000CCA0 var_400         = qword ptr -400h
.text:000000000000CCA0 var_3F8         = qword ptr -3F8h
.text:000000000000CCA0 var_3F0         = qword ptr -3F0h
.text:000000000000CCA0 src             = qword ptr -3E8h
.text:000000000000CCA0 var_3E0         = qword ptr -3E0h
.text:000000000000CCA0 var_3D8         = qword ptr -3D8h
.text:000000000000CCA0 var_3D0         = qword ptr -3D0h
.text:000000000000CCA0 n               = qword ptr -3C8h
.text:000000000000CCA0 var_3BC         = dword ptr -3BCh
.text:000000000000CCA0 var_3B8         = dword ptr -3B8h
.text:000000000000CCA0 var_3B4         = dword ptr -3B4h
.text:000000000000CCA0 var_3B0         = byte ptr -3B0h
.text:000000000000CCA0 var_3A8         = qword ptr -3A8h
.text:000000000000CCA0 var_2C0         = qword ptr -2C0h
.text:000000000000CCA0 var_2B8         = qword ptr -2B8h
.text:000000000000CCA0 var_2B0         = qword ptr -2B0h
.text:000000000000CCA0 var_2A8         = qword ptr -2A8h
.text:000000000000CCA0 var_38          = qword ptr -38h
.text:000000000000CCA0
.text:000000000000CCA0 ; __unwind {
.text:000000000000CCA0                 push    rbp
.text:000000000000CCA1                 mov     rbp, rsp
.text:000000000000CCA4                 push    r15
.text:000000000000CCA6                 push    r14
.text:000000000000CCA8                 push    r13
.text:000000000000CCAA                 push    r12
.text:000000000000CCAC                 lea     r14, [rbp+var_3B0]
.text:000000000000CCB3                 push    rbx
.text:000000000000CCB4                 mov     rbx, rdx
.text:000000000000CCB7                 mov     r12, rcx
.text:000000000000CCBA                 mov     rdx, r14
.text:000000000000CCBD                 sub     rsp, 408h
.text:000000000000CCC4                 mov     [rbp+var_418], rsi
.text:000000000000CCCB                 lea     rsi, [rbp+var_2C0]
.text:000000000000CCD2                 mov     [rbp+src], rdi
.text:000000000000CCD9                 mov     rdi, rbx
.text:000000000000CCDC                 mov     [rbp+var_410], r14
.text:000000000000CCE3                 mov     rax, fs:28h
.text:000000000000CCEC                 mov     [rbp+var_38], rax
.text:000000000000CCF0                 xor     eax, eax
.text:000000000000CCF2                 mov     [rbp+var_408], rsi
.text:000000000000CCF9                 call    printf_parse
.text:000000000000CCFE                 test    eax, eax
.text:000000000000CD00                 js      loc_DB68
.text:000000000000CD06                 mov     rsi, r14
.text:000000000000CD09                 mov     rdi, r12
.text:000000000000CD0C                 call    printf_fetchargs
.text:000000000000CD11                 test    eax, eax
.text:000000000000CD13                 js      loc_DBD0
.text:000000000000CD19                 mov     rax, [rbp+var_2B0]
.text:000000000000CD20                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000CD27                 add     rax, 7
.text:000000000000CD2B                 cmp     rax, 6
.text:000000000000CD2F                 cmovbe  rax, rdx
.text:000000000000CD33                 add     rax, [rbp+var_2A8]
.text:000000000000CD3A                 jb      loc_D768
.text:000000000000CD40                 mov     rdi, rax
.text:000000000000CD43                 xor     r8d, r8d
.text:000000000000CD46                 add     rdi, 6          ; size
.text:000000000000CD4A                 setb    r8b
.text:000000000000CD4E                 jb      loc_D768
.text:000000000000CD54                 cmp     rdi, 0F9Fh
.text:000000000000CD5B                 jbe     loc_CEA8
.text:000000000000CD61                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000CD65                 mov     [rbp+n], r8
.text:000000000000CD6C                 jz      loc_D768
.text:000000000000CD72                 call    _malloc
.text:000000000000CD77                 test    rax, rax
.text:000000000000CD7A                 mov     [rbp+var_3D8], rax
.text:000000000000CD81                 jz      loc_D768
.text:000000000000CD87                 mov     r8, [rbp+n]
.text:000000000000CD8E                 mov     [rbp+ptr], rax
.text:000000000000CD95
.text:000000000000CD95 loc_CD95:                               ; CODE XREF: vasnprintf+22E↓j
.text:000000000000CD95                 xor     r12d, r12d
.text:000000000000CD98                 cmp     [rbp+src], 0
.text:000000000000CDA0                 jz      short loc_CDAC
.text:000000000000CDA2                 mov     rax, [rbp+var_418]
.text:000000000000CDA9                 mov     r12, [rax]
.text:000000000000CDAC
.text:000000000000CDAC loc_CDAC:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000CDAC                 mov     r13, [rbp+var_2B8]
.text:000000000000CDB3                 lea     rax, [rbp+var_3BC]
.text:000000000000CDBA                 mov     r15, [rbp+src]
.text:000000000000CDC1                 mov     [rbp+var_400], 0
.text:000000000000CDCC                 mov     [rbp+var_3F0], rax
.text:000000000000CDD3                 mov     rax, rbx
.text:000000000000CDD6                 mov     rbx, r8
.text:000000000000CDD9                 mov     rcx, [r13+0]
.text:000000000000CDDD                 mov     r8, rax
.text:000000000000CDE0                 cmp     rcx, r8
.text:000000000000CDE3                 jz      loc_D751
.text:000000000000CDE9
.text:000000000000CDE9 loc_CDE9:                               ; CODE XREF: vasnprintf+AAB↓j
.text:000000000000CDE9                 sub     rcx, r8
.text:000000000000CDEC                 mov     rax, rbx
.text:000000000000CDEF                 add     rax, rcx
.text:000000000000CDF2                 mov     r14, rax
.text:000000000000CDF5                 jnb     loc_CED8
.text:000000000000CDFB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000CDFF                 jz      loc_D8D0
.text:000000000000CE05
.text:000000000000CE05 loc_CE05:                               ; CODE XREF: vasnprintf+4E2↓j
.text:000000000000CE05                                         ; vasnprintf+A86↓j ...
.text:000000000000CE05                 call    ___errno_location
.text:000000000000CE0A                 mov     [rbp+n], rax
.text:000000000000CE11
.text:000000000000CE11 loc_CE11:                               ; CODE XREF: vasnprintf+640↓j
.text:000000000000CE11                                         ; vasnprintf+652↓j ...
.text:000000000000CE11                 cmp     r15, [rbp+src]
.text:000000000000CE18                 jz      short loc_CE23
.text:000000000000CE1A                 test    r15, r15
.text:000000000000CE1D                 jnz     loc_D900
.text:000000000000CE23
.text:000000000000CE23 loc_CE23:                               ; CODE XREF: vasnprintf+178↑j
.text:000000000000CE23                                         ; vasnprintf+C68↓j
.text:000000000000CE23                 mov     rax, [rbp+ptr]
.text:000000000000CE2A                 test    rax, rax
.text:000000000000CE2D                 jz      short loc_CE37
.text:000000000000CE2F                 mov     rdi, rax        ; ptr
.text:000000000000CE32                 call    _free
.text:000000000000CE37
.text:000000000000CE37 loc_CE37:                               ; CODE XREF: vasnprintf+18D↑j
.text:000000000000CE37                                         ; vasnprintf+AD4↓j
.text:000000000000CE37                 mov     rax, [rbp+var_408]
.text:000000000000CE3E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000CE45                 add     rax, 20h ; ' '
.text:000000000000CE49                 cmp     rdi, rax
.text:000000000000CE4C                 jz      short loc_CE53
.text:000000000000CE4E                 call    _free
.text:000000000000CE53
.text:000000000000CE53 loc_CE53:                               ; CODE XREF: vasnprintf+1AC↑j
.text:000000000000CE53                 mov     rax, [rbp+var_410]
.text:000000000000CE5A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000CE61                 add     rax, 10h
.text:000000000000CE65                 cmp     rdi, rax
.text:000000000000CE68                 jz      short loc_CE6F
.text:000000000000CE6A                 call    _free
.text:000000000000CE6F
.text:000000000000CE6F loc_CE6F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000CE6F                 mov     rax, [rbp+n]
.text:000000000000CE76                 xor     r15d, r15d
.text:000000000000CE79                 mov     dword ptr [rax], 0Ch
.text:000000000000CE7F
.text:000000000000CE7F loc_CE7F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000CE7F                                         ; vasnprintf+EBE↓j ...
.text:000000000000CE7F                 mov     rdi, [rbp+var_38]
.text:000000000000CE83                 xor     rdi, fs:28h
.text:000000000000CE8C                 mov     rax, r15
.text:000000000000CE8F                 jnz     loc_DD97
.text:000000000000CE95                 lea     rsp, [rbp-28h]
.text:000000000000CE99                 pop     rbx
.text:000000000000CE9A                 pop     r12
.text:000000000000CE9C                 pop     r13
.text:000000000000CE9E                 pop     r14
.text:000000000000CEA0                 pop     r15
.text:000000000000CEA2                 pop     rbp
.text:000000000000CEA3                 retn
.text:000000000000CEA3 ; ---------------------------------------------------------------------------
.text:000000000000CEA4                 align 8
.text:000000000000CEA8
.text:000000000000CEA8 loc_CEA8:                               ; CODE XREF: vasnprintf+BB↑j
.text:000000000000CEA8                 add     rax, 24h ; '$'
.text:000000000000CEAC                 mov     [rbp+ptr], 0
.text:000000000000CEB7                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000CEBB                 sub     rsp, rax
.text:000000000000CEBE                 lea     rax, [rsp+430h+var_421]
.text:000000000000CEC3                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000CEC7                 mov     [rbp+var_3D8], rax
.text:000000000000CECE                 jmp     loc_CD95
.text:000000000000CECE ; ---------------------------------------------------------------------------
.text:000000000000CED3                 align 8
.text:000000000000CED8
.text:000000000000CED8 loc_CED8:                               ; CODE XREF: vasnprintf+155↑j
.text:000000000000CED8                 cmp     r12, rax
.text:000000000000CEDB                 jnb     short loc_CF44
.text:000000000000CEDD                 test    r12, r12
.text:000000000000CEE0                 jnz     loc_D810
.text:000000000000CEE6                 cmp     rax, 0Ch
.text:000000000000CEEA                 ja      loc_D822
.text:000000000000CEF0                 mov     r12d, 0Ch
.text:000000000000CEF6
.text:000000000000CEF6 loc_CEF6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:000000000000CEF6                 cmp     r15, [rbp+src]
.text:000000000000CEFD                 setz    dl
.text:000000000000CF00                 test    r15, r15
.text:000000000000CF03                 jz      loc_D848
.text:000000000000CF09
.text:000000000000CF09 loc_CF09:                               ; CODE XREF: vasnprintf+B9C↓j
.text:000000000000CF09                 test    dl, dl
.text:000000000000CF0B                 jnz     loc_D848
.text:000000000000CF11                 mov     rsi, r12        ; size
.text:000000000000CF14                 mov     rdi, r15        ; ptr
.text:000000000000CF17                 mov     [rbp+var_3D0], r8
.text:000000000000CF1E                 mov     [rbp+n], rcx
.text:000000000000CF25                 call    _realloc
.text:000000000000CF2A                 test    rax, rax
.text:000000000000CF2D                 mov     rcx, [rbp+n]
.text:000000000000CF34                 mov     r8, [rbp+var_3D0]
.text:000000000000CF3B                 jz      loc_D8EB
.text:000000000000CF41                 mov     r15, rax
.text:000000000000CF44
.text:000000000000CF44 loc_CF44:                               ; CODE XREF: vasnprintf+23B↑j
.text:000000000000CF44                                         ; vasnprintf+C23↓j ...
.text:000000000000CF44                 lea     rdi, [r15+rbx]  ; dest
.text:000000000000CF48                 mov     rdx, rcx        ; n
.text:000000000000CF4B                 mov     rsi, r8         ; src
.text:000000000000CF4E                 call    _memcpy
.text:000000000000CF53
.text:000000000000CF53 loc_CF53:                               ; CODE XREF: vasnprintf+AB4↓j
.text:000000000000CF53                 mov     rax, [rbp+var_400]
.text:000000000000CF5A                 cmp     [rbp+var_2C0], rax
.text:000000000000CF61                 jz      loc_DC1B
.text:000000000000CF67                 movzx   edx, byte ptr [r13+48h]
.text:000000000000CF6C                 mov     rax, [r13+50h]
.text:000000000000CF70                 cmp     dl, 25h ; '%'
.text:000000000000CF73                 jz      loc_D708
.text:000000000000CF79                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000CF7D                 jz      def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000CF7D                                         ; jumptable 000000000000D7A0 default case
.text:000000000000CF83                 mov     r8, [rbp+var_3A8]
.text:000000000000CF8A                 shl     rax, 5
.text:000000000000CF8E                 add     rax, r8
.text:000000000000CF91                 cmp     dl, 6Eh ; 'n'
.text:000000000000CF94                 mov     edi, [rax]
.text:000000000000CF96                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000CF9C                 jz      loc_D780
.text:000000000000CFA2                 mov     eax, [r13+10h]
.text:000000000000CFA6                 mov     rdi, [rbp+var_3D8]
.text:000000000000CFAD                 test    al, 1
.text:000000000000CFAF                 mov     byte ptr [rdi], 25h ; '%'
.text:000000000000CFB2                 lea     rbx, [rdi+1]
.text:000000000000CFB6                 jz      short loc_CFC7
.text:000000000000CFB8                 mov     rdi, [rbp+var_3D8]
.text:000000000000CFBF                 lea     rbx, [rdi+2]
.text:000000000000CFC3                 mov     byte ptr [rdi+1], 27h ; '''
.text:000000000000CFC7
.text:000000000000CFC7 loc_CFC7:                               ; CODE XREF: vasnprintf+316↑j
.text:000000000000CFC7                 test    al, 2
.text:000000000000CFC9                 jz      short loc_CFD2
.text:000000000000CFCB                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000CFCE                 add     rbx, 1
.text:000000000000CFD2
.text:000000000000CFD2 loc_CFD2:                               ; CODE XREF: vasnprintf+329↑j
.text:000000000000CFD2                 test    al, 4
.text:000000000000CFD4                 jz      short loc_CFDD
.text:000000000000CFD6                 mov     byte ptr [rbx], 2Bh ; '+'
.text:000000000000CFD9                 add     rbx, 1
.text:000000000000CFDD
.text:000000000000CFDD loc_CFDD:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000CFDD                 test    al, 8
.text:000000000000CFDF                 jz      short loc_CFE8
.text:000000000000CFE1                 mov     byte ptr [rbx], 20h ; ' '
.text:000000000000CFE4                 add     rbx, 1
.text:000000000000CFE8
.text:000000000000CFE8 loc_CFE8:                               ; CODE XREF: vasnprintf+33F↑j
.text:000000000000CFE8                 test    al, 10h
.text:000000000000CFEA                 jz      short loc_CFF3
.text:000000000000CFEC                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000CFEF                 add     rbx, 1
.text:000000000000CFF3
.text:000000000000CFF3 loc_CFF3:                               ; CODE XREF: vasnprintf+34A↑j
.text:000000000000CFF3                 test    al, 40h
.text:000000000000CFF5                 jz      short loc_CFFE
.text:000000000000CFF7                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000CFFA                 add     rbx, 1
.text:000000000000CFFE
.text:000000000000CFFE loc_CFFE:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000CFFE                 test    al, 20h
.text:000000000000D000                 jz      short loc_D009
.text:000000000000D002                 mov     byte ptr [rbx], 30h ; '0'
.text:000000000000D005                 add     rbx, 1
.text:000000000000D009
.text:000000000000D009 loc_D009:                               ; CODE XREF: vasnprintf+360↑j
.text:000000000000D009                 mov     rsi, [r13+18h]  ; src
.text:000000000000D00D                 mov     rdx, [r13+20h]
.text:000000000000D011                 cmp     rsi, rdx
.text:000000000000D014                 jz      short loc_D046
.text:000000000000D016                 mov     rcx, rdx
.text:000000000000D019                 mov     rdi, rbx        ; dest
.text:000000000000D01C                 mov     [rbp+var_3E0], r8
.text:000000000000D023                 sub     rcx, rsi
.text:000000000000D026                 mov     rdx, rcx        ; n
.text:000000000000D029                 mov     [rbp+n], rcx
.text:000000000000D030                 call    _memcpy
.text:000000000000D035                 mov     rcx, [rbp+n]
.text:000000000000D03C                 mov     r8, [rbp+var_3E0]
.text:000000000000D043                 add     rbx, rcx
.text:000000000000D046
.text:000000000000D046 loc_D046:                               ; CODE XREF: vasnprintf+374↑j
.text:000000000000D046                 mov     rsi, [r13+30h]  ; src
.text:000000000000D04A                 mov     rdx, [r13+38h]
.text:000000000000D04E                 cmp     rsi, rdx
.text:000000000000D051                 jz      short loc_D083
.text:000000000000D053                 mov     rcx, rdx
.text:000000000000D056                 mov     rdi, rbx        ; dest
.text:000000000000D059                 mov     [rbp+var_3E0], r8
.text:000000000000D060                 sub     rcx, rsi
.text:000000000000D063                 mov     rdx, rcx        ; n
.text:000000000000D066                 mov     [rbp+n], rcx
.text:000000000000D06D                 call    _memcpy
.text:000000000000D072                 mov     rcx, [rbp+n]
.text:000000000000D079                 mov     r8, [rbp+var_3E0]
.text:000000000000D080                 add     rbx, rcx
.text:000000000000D083
.text:000000000000D083 loc_D083:                               ; CODE XREF: vasnprintf+3B1↑j
.text:000000000000D083                 mov     edi, dword ptr [rbp+var_3D0]
.text:000000000000D089                 cmp     edi, 10h
.text:000000000000D08C                 ja      short loc_D0BB
.text:000000000000D08E                 mov     eax, 1
.text:000000000000D093                 mov     ecx, edi
.text:000000000000D095                 shl     rax, cl
.text:000000000000D098                 test    eax, 14180h
.text:000000000000D09D                 jnz     short loc_D0B4
.text:000000000000D09F                 test    ah, 10h
.text:000000000000D0A2                 jnz     loc_DA00
.text:000000000000D0A8                 test    ah, 6
.text:000000000000D0AB                 jz      short loc_D0BB
.text:000000000000D0AD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000D0B0                 add     rbx, 1
.text:000000000000D0B4
.text:000000000000D0B4 loc_D0B4:                               ; CODE XREF: vasnprintf+3FD↑j
.text:000000000000D0B4                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000D0B7                 add     rbx, 1
.text:000000000000D0BB
.text:000000000000D0BB loc_D0BB:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000D0BB                                         ; vasnprintf+40B↑j ...
.text:000000000000D0BB                 movzx   eax, byte ptr [r13+48h]
.text:000000000000D0C0                 mov     byte ptr [rbx+1], 0
.text:000000000000D0C4                 mov     [rbx], al
.text:000000000000D0C6                 mov     rax, [r13+28h]
.text:000000000000D0CA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D0CE                 jz      loc_D800
.text:000000000000D0D4                 shl     rax, 5
.text:000000000000D0D8                 add     rax, r8
.text:000000000000D0DB                 cmp     dword ptr [rax], 5
.text:000000000000D0DE                 jnz     def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000D0DE                                         ; jumptable 000000000000D7A0 default case
.text:000000000000D0E4                 mov     eax, [rax+10h]
.text:000000000000D0E7                 mov     dword ptr [rbp+var_3E0], 1
.text:000000000000D0F1                 mov     [rbp+var_3B8], eax
.text:000000000000D0F7
.text:000000000000D0F7 loc_D0F7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:000000000000D0F7                 mov     rax, [r13+40h]
.text:000000000000D0FB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D0FF                 jz      short loc_D12C
.text:000000000000D101                 shl     rax, 5
.text:000000000000D105                 add     r8, rax
.text:000000000000D108                 cmp     dword ptr [r8], 5
.text:000000000000D10C                 jnz     def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000D10C                                         ; jumptable 000000000000D7A0 default case
.text:000000000000D112                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D118                 mov     edx, [r8+10h]
.text:000000000000D11C                 mov     [rbp+rax*4+var_3B8], edx
.text:000000000000D123                 lea     eax, [rax+1]
.text:000000000000D126                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000D12C
.text:000000000000D12C loc_D12C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000D12C                 mov     rax, r14
.text:000000000000D12F                 xor     edx, edx
.text:000000000000D131                 add     rax, 2
.text:000000000000D135                 jb      loc_DD9C
.text:000000000000D13B                 cmp     r12, rax
.text:000000000000D13E                 jnb     short loc_D18B
.text:000000000000D140                 test    r12, r12
.text:000000000000D143                 jnz     loc_D968
.text:000000000000D149                 cmp     rax, 0Ch
.text:000000000000D14D                 ja      loc_D980
.text:000000000000D153                 mov     r12d, 0Ch
.text:000000000000D159
.text:000000000000D159 loc_D159:                               ; CODE XREF: vasnprintf+CD4↓j
.text:000000000000D159                 cmp     r15, [rbp+src]
.text:000000000000D160                 setz    dl
.text:000000000000D163                 test    r15, r15
.text:000000000000D166                 jz      loc_D9B0
.text:000000000000D16C
.text:000000000000D16C loc_D16C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000D16C                 test    dl, dl
.text:000000000000D16E                 jnz     loc_D9B0
.text:000000000000D174                 mov     rsi, r12        ; size
.text:000000000000D177                 mov     rdi, r15        ; ptr
.text:000000000000D17A                 call    _realloc
.text:000000000000D17F                 test    rax, rax
.text:000000000000D182                 jz      loc_CE05
.text:000000000000D188                 mov     r15, rax
.text:000000000000D18B
.text:000000000000D18B loc_D18B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000D18B                                         ; vasnprintf+D53↓j ...
.text:000000000000D18B                 mov     byte ptr [r15+r14], 0
.text:000000000000D190                 call    ___errno_location
.text:000000000000D195                 mov     [rbp+n], rax
.text:000000000000D19C                 mov     eax, [rax]
.text:000000000000D19E                 mov     [rbp+var_3F8], rbx
.text:000000000000D1A5                 mov     [rbp-424h], eax
.text:000000000000D1AB                 nop     dword ptr [rax+rax+00h]
.text:000000000000D1B0
.text:000000000000D1B0 loc_D1B0:                               ; CODE XREF: vasnprintf+637↓j
.text:000000000000D1B0                                         ; vasnprintf+68D↓j ...
.text:000000000000D1B0                 mov     rax, [rbp+n]
.text:000000000000D1B7                 mov     rbx, r12
.text:000000000000D1BA                 mov     r10d, 7FFFFFFFh
.text:000000000000D1C0                 sub     rbx, r14
.text:000000000000D1C3                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000D1CD                 cmp     rbx, 7FFFFFFFh
.text:000000000000D1D4                 mov     dword ptr [rax], 0
.text:000000000000D1DA                 mov     eax, dword ptr [rbp+var_3D0]
.text:000000000000D1E0                 cmovbe  r10, rbx
.text:000000000000D1E4                 cmp     eax, 11h        ; switch 18 cases
.text:000000000000D1E7                 ja      def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000D1E7                                         ; jumptable 000000000000D7A0 default case
.text:000000000000D1ED                 lea     rsi, jpt_D1FB
.text:000000000000D1F4                 movsxd  rax, ds:(jpt_D1FB - 10C88h)[rsi+rax*4]
.text:000000000000D1F8                 add     rax, rsi
.text:000000000000D1FB                 jmp     rax             ; switch jump
.text:000000000000D1FB ; ---------------------------------------------------------------------------
.text:000000000000D1FD                 align 20h
.text:000000000000D200
.text:000000000000D200 loc_D200:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D200                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D200                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB cases 7-10,15-17
.text:000000000000D204                 lea     rdi, [r15+r14]
.text:000000000000D208                 shl     rax, 5
.text:000000000000D20C                 add     rax, [rbp+var_3A8]
.text:000000000000D213                 mov     r9, [rax+10h]
.text:000000000000D217                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D21D                 cmp     eax, 1
.text:000000000000D220                 jz      loc_D6E8
.text:000000000000D226                 cmp     eax, 2
.text:000000000000D229                 jz      loc_D6D0
.text:000000000000D22F                 sub     rsp, 8
.text:000000000000D233                 push    [rbp+var_3F0]
.text:000000000000D239
.text:000000000000D239 loc_D239:                               ; CODE XREF: vasnprintf+CBE↓j
.text:000000000000D239                 mov     r8, [rbp+var_3D8]
.text:000000000000D240                 mov     rsi, r10
.text:000000000000D243                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D24A                 mov     edx, 1
.text:000000000000D24F                 xor     eax, eax
.text:000000000000D251                 mov     [rbp+var_430], r10
.text:000000000000D258                 call    ___snprintf_chk
.text:000000000000D25D                 pop     rsi
.text:000000000000D25E                 pop     rdi
.text:000000000000D25F                 mov     r10, [rbp+var_430]
.text:000000000000D266
.text:000000000000D266 loc_D266:                               ; CODE XREF: vasnprintf+83D↓j
.text:000000000000D266                                         ; vasnprintf+8BE↓j ...
.text:000000000000D266                 mov     ecx, [rbp+var_3BC]
.text:000000000000D26C                 test    ecx, ecx
.text:000000000000D26E                 js      loc_D3AC
.text:000000000000D274
.text:000000000000D274 loc_D274:                               ; CODE XREF: vasnprintf+706↓j
.text:000000000000D274                 movsxd  rdx, ecx
.text:000000000000D277                 cmp     rdx, r10
.text:000000000000D27A                 jnb     short loc_D28A
.text:000000000000D27C                 add     rdx, r15
.text:000000000000D27F                 cmp     byte ptr [rdx+r14], 0
.text:000000000000D284                 jnz     def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000D284                                         ; jumptable 000000000000D7A0 default case
.text:000000000000D28A
.text:000000000000D28A loc_D28A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000D28A                 cmp     ecx, eax
.text:000000000000D28C                 jge     short loc_D296
.text:000000000000D28E
.text:000000000000D28E loc_D28E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000D28E                 mov     [rbp+var_3BC], eax
.text:000000000000D294                 mov     ecx, eax
.text:000000000000D296
.text:000000000000D296 loc_D296:                               ; CODE XREF: vasnprintf+5EC↑j
.text:000000000000D296                 lea     eax, [rcx+1]
.text:000000000000D299                 cmp     rax, r10
.text:000000000000D29C                 jb      loc_DAD0
.text:000000000000D2A2                 cmp     rbx, 7FFFFFFEh
.text:000000000000D2A9                 ja      loc_DAF0
.text:000000000000D2AF                 lea     rsi, [r12+r12]
.text:000000000000D2B3                 lea     edx, [rcx+2]
.text:000000000000D2B6                 test    r12, r12
.text:000000000000D2B9                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D2C0                 cmovns  rax, rsi
.text:000000000000D2C4                 add     rdx, r14
.text:000000000000D2C7                 jb      loc_DD88
.text:000000000000D2CD                 cmp     rax, rdx
.text:000000000000D2D0                 cmovb   rax, rdx
.text:000000000000D2D4                 cmp     r12, rax
.text:000000000000D2D7                 jnb     loc_D1B0
.text:000000000000D2DD                 test    r12, r12
.text:000000000000D2E0                 js      loc_CE11
.text:000000000000D2E6                 cmp     rsi, rax
.text:000000000000D2E9                 mov     r12, rsi
.text:000000000000D2EC                 jnb     short loc_D2FB
.text:000000000000D2EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D2F2                 jz      loc_CE11
.text:000000000000D2F8                 mov     r12, rax
.text:000000000000D2FB
.text:000000000000D2FB loc_D2FB:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000D2FB                 cmp     r15, [rbp+src]
.text:000000000000D302                 setz    bl
.text:000000000000D305                 test    r15, r15
.text:000000000000D308                 jz      loc_D690
.text:000000000000D30E                 test    bl, bl
.text:000000000000D310                 jnz     loc_D690
.text:000000000000D316                 mov     rsi, r12        ; size
.text:000000000000D319                 mov     rdi, r15        ; ptr
.text:000000000000D31C                 call    _realloc
.text:000000000000D321                 test    rax, rax
.text:000000000000D324                 jz      loc_CE11
.text:000000000000D32A                 mov     r15, rax
.text:000000000000D32D                 jmp     loc_D1B0
.text:000000000000D32D ; ---------------------------------------------------------------------------
.text:000000000000D332                 align 8
.text:000000000000D338
.text:000000000000D338 loc_D338:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D338                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D338                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB cases 5,6,13,14
.text:000000000000D33C                 lea     rdi, [r15+r14]
.text:000000000000D340                 shl     rax, 5
.text:000000000000D344                 add     rax, [rbp+var_3A8]
.text:000000000000D34B                 mov     r9d, [rax+10h]
.text:000000000000D34F                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D355                 cmp     eax, 1
.text:000000000000D358                 jz      loc_D590
.text:000000000000D35E
.text:000000000000D35E loc_D35E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000D35E                                         ; vasnprintf+9B1↓j ...
.text:000000000000D35E                 cmp     eax, 2
.text:000000000000D361                 jz      loc_D5D8
.text:000000000000D367
.text:000000000000D367 loc_D367:                               ; CODE XREF: vasnprintf+92E↓j
.text:000000000000D367                 sub     rsp, 8
.text:000000000000D36B                 push    [rbp+var_3F0]
.text:000000000000D371
.text:000000000000D371 loc_D371:                               ; CODE XREF: vasnprintf+8FF↓j
.text:000000000000D371                 mov     r8, [rbp+var_3D8]
.text:000000000000D378                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D37F                 mov     edx, 1
.text:000000000000D384                 mov     rsi, r10
.text:000000000000D387                 xor     eax, eax
.text:000000000000D389                 mov     [rbp+var_430], r10
.text:000000000000D390                 call    ___snprintf_chk
.text:000000000000D395                 pop     rdx
.text:000000000000D396                 pop     rcx
.text:000000000000D397                 mov     ecx, [rbp+var_3BC]
.text:000000000000D39D                 mov     r10, [rbp+var_430]
.text:000000000000D3A4                 test    ecx, ecx
.text:000000000000D3A6                 jns     loc_D274
.text:000000000000D3AC
.text:000000000000D3AC loc_D3AC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000D3AC                 mov     rdi, [rbp+var_3F8]
.text:000000000000D3B3                 cmp     byte ptr [rdi+1], 0
.text:000000000000D3B7                 jnz     loc_D6F8
.text:000000000000D3BD                 test    eax, eax
.text:000000000000D3BF                 jns     loc_D28E
.text:000000000000D3C5                 mov     rax, [rbp+n]
.text:000000000000D3CC                 mov     ebx, [rax]
.text:000000000000D3CE                 test    ebx, ebx
.text:000000000000D3D0                 jnz     short loc_D3F0
.text:000000000000D3D2                 movzx   eax, byte ptr [r13+48h]
.text:000000000000D3D7                 mov     ebx, 16h
.text:000000000000D3DC                 and     eax, 0FFFFFFEFh
.text:000000000000D3DF                 cmp     al, 63h ; 'c'
.text:000000000000D3E1                 mov     eax, 54h ; 'T'
.text:000000000000D3E6                 cmovz   ebx, eax
.text:000000000000D3E9                 nop     dword ptr [rax+00000000h]
.text:000000000000D3F0
.text:000000000000D3F0 loc_D3F0:                               ; CODE XREF: vasnprintf+730↑j
.text:000000000000D3F0                 cmp     r15, [rbp+src]
.text:000000000000D3F7                 jz      short loc_D402
.text:000000000000D3F9                 test    r15, r15
.text:000000000000D3FC                 jnz     loc_DBAC
.text:000000000000D402
.text:000000000000D402 loc_D402:                               ; CODE XREF: vasnprintf+757↑j
.text:000000000000D402                                         ; vasnprintf+F14↓j
.text:000000000000D402                 mov     rax, [rbp+ptr]
.text:000000000000D409                 test    rax, rax
.text:000000000000D40C                 jz      short loc_D416
.text:000000000000D40E                 mov     rdi, rax        ; ptr
.text:000000000000D411                 call    _free
.text:000000000000D416
.text:000000000000D416 loc_D416:                               ; CODE XREF: vasnprintf+76C↑j
.text:000000000000D416                 mov     rax, [rbp+var_408]
.text:000000000000D41D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000D424                 add     rax, 20h ; ' '
.text:000000000000D428                 cmp     rdi, rax
.text:000000000000D42B                 jz      short loc_D432
.text:000000000000D42D                 call    _free
.text:000000000000D432
.text:000000000000D432 loc_D432:                               ; CODE XREF: vasnprintf+78B↑j
.text:000000000000D432                 mov     rax, [rbp+var_410]
.text:000000000000D439                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000D440                 add     rax, 10h
.text:000000000000D444                 cmp     rdi, rax
.text:000000000000D447                 jz      short loc_D44E
.text:000000000000D449                 call    _free
.text:000000000000D44E
.text:000000000000D44E loc_D44E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000D44E                 mov     rax, [rbp+n]
.text:000000000000D455                 xor     r15d, r15d
.text:000000000000D458                 mov     [rax], ebx
.text:000000000000D45A                 jmp     loc_CE7F
.text:000000000000D45A ; ---------------------------------------------------------------------------
.text:000000000000D45F                 align 20h
.text:000000000000D460
.text:000000000000D460 loc_D460:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D460                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D460                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB case 12
.text:000000000000D464                 lea     rdi, [r15+r14]
.text:000000000000D468                 shl     rax, 5
.text:000000000000D46C                 add     rax, [rbp+var_3A8]
.text:000000000000D473                 fld     tbyte ptr [rax+10h]
.text:000000000000D476                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D47C                 cmp     eax, 1
.text:000000000000D47F                 jz      loc_DAB0
.text:000000000000D485                 cmp     eax, 2
.text:000000000000D488                 jnz     loc_D950
.text:000000000000D48E                 mov     eax, [rbp+var_3B4]
.text:000000000000D494                 sub     rsp, 8
.text:000000000000D498                 push    [rbp+var_3F0]
.text:000000000000D49E                 mov     r9d, [rbp+var_3B8]
.text:000000000000D4A5                 mov     r8, [rbp+var_3D8]
.text:000000000000D4AC                 mov     rsi, r10
.text:000000000000D4AF                 sub     rsp, 18h
.text:000000000000D4B3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D4BA                 mov     edx, 1
.text:000000000000D4BF                 fstp    [rsp+458h+var_450]
.text:000000000000D4C3                 push    rax
.text:000000000000D4C4                 xor     eax, eax
.text:000000000000D4C6                 mov     [rbp+var_430], r10
.text:000000000000D4CD                 call    ___snprintf_chk
.text:000000000000D4D2                 add     rsp, 30h
.text:000000000000D4D6                 mov     r10, [rbp+var_430]
.text:000000000000D4DD                 jmp     loc_D266
.text:000000000000D4DD ; ---------------------------------------------------------------------------
.text:000000000000D4E2                 align 8
.text:000000000000D4E8
.text:000000000000D4E8 loc_D4E8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D4E8                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D4E8                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB case 11
.text:000000000000D4EC                 lea     rdi, [r15+r14]
.text:000000000000D4F0                 shl     rax, 5
.text:000000000000D4F4                 add     rax, [rbp+var_3A8]
.text:000000000000D4FB                 movsd   xmm0, qword ptr [rax+10h]
.text:000000000000D500                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D506                 cmp     eax, 1
.text:000000000000D509                 jz      loc_DAA0
.text:000000000000D50F                 cmp     eax, 2
.text:000000000000D512                 jnz     loc_D910
.text:000000000000D518                 mov     eax, [rbp+var_3B4]
.text:000000000000D51E                 push    [rbp+var_3F0]
.text:000000000000D524                 push    rax
.text:000000000000D525
.text:000000000000D525 loc_D525:                               ; CODE XREF: vasnprintf+E0A↓j
.text:000000000000D525                 mov     r9d, [rbp+var_3B8]
.text:000000000000D52C                 mov     r8, [rbp+var_3D8]
.text:000000000000D533                 mov     rsi, r10
.text:000000000000D536                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D53D                 mov     edx, 1
.text:000000000000D542                 mov     eax, 1
.text:000000000000D547                 mov     [rbp+var_430], r10
.text:000000000000D54E                 call    ___snprintf_chk
.text:000000000000D553                 pop     r8
.text:000000000000D555                 mov     r10, [rbp+var_430]
.text:000000000000D55C                 pop     r9
.text:000000000000D55E                 jmp     loc_D266
.text:000000000000D55E ; ---------------------------------------------------------------------------
.text:000000000000D563                 align 8
.text:000000000000D568
.text:000000000000D568 loc_D568:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D568                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D568                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB case 4
.text:000000000000D56C                 lea     rdi, [r15+r14]
.text:000000000000D570                 shl     rax, 5
.text:000000000000D574                 add     rax, [rbp+var_3A8]
.text:000000000000D57B                 movzx   r9d, word ptr [rax+10h]
.text:000000000000D580                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D586                 cmp     eax, 1
.text:000000000000D589                 jnz     loc_D35E
.text:000000000000D58F                 nop
.text:000000000000D590
.text:000000000000D590 loc_D590:                               ; CODE XREF: vasnprintf+6B8↑j
.text:000000000000D590                                         ; vasnprintf+929↓j ...
.text:000000000000D590                 push    [rbp+var_3F0]
.text:000000000000D596                 push    r9
.text:000000000000D598
.text:000000000000D598 loc_D598:                               ; CODE XREF: vasnprintf+A50↓j
.text:000000000000D598                 mov     r9d, [rbp+var_3B8]
.text:000000000000D59F                 jmp     loc_D371
.text:000000000000D59F ; ---------------------------------------------------------------------------
.text:000000000000D5A4                 align 8
.text:000000000000D5A8
.text:000000000000D5A8 loc_D5A8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D5A8                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D5A8                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB case 3
.text:000000000000D5AC                 lea     rdi, [r15+r14]
.text:000000000000D5B0                 shl     rax, 5
.text:000000000000D5B4                 add     rax, [rbp+var_3A8]
.text:000000000000D5BB                 movsx   r9d, word ptr [rax+10h]
.text:000000000000D5C0                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D5C6                 cmp     eax, 1
.text:000000000000D5C9                 jz      short loc_D590
.text:000000000000D5CB                 cmp     eax, 2
.text:000000000000D5CE                 jnz     loc_D367
.text:000000000000D5D4                 nop     dword ptr [rax+00h]
.text:000000000000D5D8
.text:000000000000D5D8 loc_D5D8:                               ; CODE XREF: vasnprintf+6C1↑j
.text:000000000000D5D8                 sub     rsp, 8
.text:000000000000D5DC                 push    [rbp+var_3F0]
.text:000000000000D5E2                 push    r9
.text:000000000000D5E4
.text:000000000000D5E4 loc_D5E4:                               ; CODE XREF: vasnprintf+A3C↓j
.text:000000000000D5E4                 mov     eax, [rbp+var_3B4]
.text:000000000000D5EA                 push    rax
.text:000000000000D5EB
.text:000000000000D5EB loc_D5EB:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000D5EB                 mov     r9d, [rbp+var_3B8]
.text:000000000000D5F2                 mov     r8, [rbp+var_3D8]
.text:000000000000D5F9                 mov     rsi, r10
.text:000000000000D5FC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D603                 mov     edx, 1
.text:000000000000D608                 xor     eax, eax
.text:000000000000D60A                 mov     [rbp+var_430], r10
.text:000000000000D611                 call    ___snprintf_chk
.text:000000000000D616                 add     rsp, 20h
.text:000000000000D61A                 mov     r10, [rbp+var_430]
.text:000000000000D621                 jmp     loc_D266
.text:000000000000D621 ; ---------------------------------------------------------------------------
.text:000000000000D626                 align 10h
.text:000000000000D630
.text:000000000000D630 loc_D630:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D630                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D630                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB case 2
.text:000000000000D634                 lea     rdi, [r15+r14]
.text:000000000000D638                 shl     rax, 5
.text:000000000000D63C                 add     rax, [rbp+var_3A8]
.text:000000000000D643                 movzx   r9d, byte ptr [rax+10h]
.text:000000000000D648                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D64E                 cmp     eax, 1
.text:000000000000D651                 jnz     loc_D35E
.text:000000000000D657                 jmp     loc_D590
.text:000000000000D657 ; ---------------------------------------------------------------------------
.text:000000000000D65C                 align 20h
.text:000000000000D660
.text:000000000000D660 loc_D660:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000D660                                         ; DATA XREF: .rodata:jpt_D1FB↓o
.text:000000000000D660                 mov     rax, [r13+50h]  ; jumptable 000000000000D1FB case 1
.text:000000000000D664                 lea     rdi, [r15+r14]
.text:000000000000D668                 shl     rax, 5
.text:000000000000D66C                 add     rax, [rbp+var_3A8]
.text:000000000000D673                 movsx   r9d, byte ptr [rax+10h]
.text:000000000000D678                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000D67E                 cmp     eax, 1
.text:000000000000D681                 jnz     loc_D35E
.text:000000000000D687                 jmp     loc_D590
.text:000000000000D687 ; ---------------------------------------------------------------------------
.text:000000000000D68C                 align 10h
.text:000000000000D690
.text:000000000000D690 loc_D690:                               ; CODE XREF: vasnprintf+668↑j
.text:000000000000D690                                         ; vasnprintf+670↑j
.text:000000000000D690                 mov     rdi, r12        ; size
.text:000000000000D693                 call    _malloc
.text:000000000000D698                 test    rax, rax
.text:000000000000D69B                 mov     rcx, rax
.text:000000000000D69E                 jz      loc_CE11
.text:000000000000D6A4                 test    r14, r14
.text:000000000000D6A7                 jz      loc_D760
.text:000000000000D6AD                 test    bl, bl
.text:000000000000D6AF                 jz      loc_D760
.text:000000000000D6B5                 mov     rsi, r15        ; src
.text:000000000000D6B8                 mov     rdx, r14        ; n
.text:000000000000D6BB                 mov     rdi, rax        ; dest
.text:000000000000D6BE                 call    _memcpy
.text:000000000000D6C3                 mov     r15, rax
.text:000000000000D6C6                 jmp     loc_D1B0
.text:000000000000D6C6 ; ---------------------------------------------------------------------------
.text:000000000000D6CB                 align 10h
.text:000000000000D6D0
.text:000000000000D6D0 loc_D6D0:                               ; CODE XREF: vasnprintf+589↑j
.text:000000000000D6D0                 sub     rsp, 8
.text:000000000000D6D4                 push    [rbp+var_3F0]
.text:000000000000D6DA                 push    r9
.text:000000000000D6DC                 jmp     loc_D5E4
.text:000000000000D6DC ; ---------------------------------------------------------------------------
.text:000000000000D6E1                 align 8
.text:000000000000D6E8
.text:000000000000D6E8 loc_D6E8:                               ; CODE XREF: vasnprintf+580↑j
.text:000000000000D6E8                 push    [rbp+var_3F0]
.text:000000000000D6EE                 push    r9
.text:000000000000D6F0                 jmp     loc_D598
.text:000000000000D6F0 ; ---------------------------------------------------------------------------
.text:000000000000D6F5                 align 8
.text:000000000000D6F8
.text:000000000000D6F8 loc_D6F8:                               ; CODE XREF: vasnprintf+717↑j
.text:000000000000D6F8                 mov     byte ptr [rdi+1], 0
.text:000000000000D6FC                 jmp     loc_D1B0
.text:000000000000D6FC ; ---------------------------------------------------------------------------
.text:000000000000D701                 align 8
.text:000000000000D708
.text:000000000000D708 loc_D708:                               ; CODE XREF: vasnprintf+2D3↑j
.text:000000000000D708                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D70C                 jnz     def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000D70C                                         ; jumptable 000000000000D7A0 default case
.text:000000000000D712                 mov     rax, r14
.text:000000000000D715                 add     rax, 1
.text:000000000000D719                 mov     rbx, rax
.text:000000000000D71C                 jnb     loc_D7A8
.text:000000000000D722                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000D726                 jnz     loc_CE05
.text:000000000000D72C                 mov     rbx, r12
.text:000000000000D72F
.text:000000000000D72F loc_D72F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000D72F                                         ; vasnprintf+B58↓j ...
.text:000000000000D72F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:000000000000D734
.text:000000000000D734 loc_D734:                               ; CODE XREF: vasnprintf+C46↓j
.text:000000000000D734                                         ; vasnprintf+D76↓j ...
.text:000000000000D734                 mov     r8, [r13+8]
.text:000000000000D738                 add     r13, 58h ; 'X'
.text:000000000000D73C                 mov     rcx, [r13+0]
.text:000000000000D740                 add     [rbp+var_400], 1
.text:000000000000D748                 cmp     rcx, r8
.text:000000000000D74B                 jnz     loc_CDE9
.text:000000000000D751
.text:000000000000D751 loc_D751:                               ; CODE XREF: vasnprintf+143↑j
.text:000000000000D751                 mov     r14, rbx
.text:000000000000D754                 jmp     loc_CF53
.text:000000000000D754 ; ---------------------------------------------------------------------------
.text:000000000000D759                 align 20h
.text:000000000000D760
.text:000000000000D760 loc_D760:                               ; CODE XREF: vasnprintf+A07↑j
.text:000000000000D760                                         ; vasnprintf+A0F↑j
.text:000000000000D760                 mov     r15, rcx
.text:000000000000D763                 jmp     loc_D1B0
.text:000000000000D768 ; ---------------------------------------------------------------------------
.text:000000000000D768
.text:000000000000D768 loc_D768:                               ; CODE XREF: vasnprintf+9A↑j
.text:000000000000D768                                         ; vasnprintf+AE↑j ...
.text:000000000000D768                 call    ___errno_location
.text:000000000000D76D                 mov     [rbp+n], rax
.text:000000000000D774                 jmp     loc_CE37
.text:000000000000D774 ; ---------------------------------------------------------------------------
.text:000000000000D779                 align 20h
.text:000000000000D780
.text:000000000000D780 loc_D780:                               ; CODE XREF: vasnprintf+2FC↑j
.text:000000000000D780                 mov     edx, edi
.text:000000000000D782                 sub     edx, 12h        ; switch 5 cases
.text:000000000000D785                 cmp     edx, 4
.text:000000000000D788                 ja      def_D1FB        ; jumptable 000000000000D1FB default case, case 0
.text:000000000000D788                                         ; jumptable 000000000000D7A0 default case
.text:000000000000D78E                 lea     rdi, jpt_D7A0
.text:000000000000D795                 mov     rax, [rax+10h]
.text:000000000000D799                 movsxd  rdx, ds:(jpt_D7A0 - 10CD0h)[rdi+rdx*4]
.text:000000000000D79D                 add     rdx, rdi
.text:000000000000D7A0                 jmp     rdx             ; switch jump
.text:000000000000D7A0 ; ---------------------------------------------------------------------------
.text:000000000000D7A2                 align 8
.text:000000000000D7A8
.text:000000000000D7A8 loc_D7A8:                               ; CODE XREF: vasnprintf+A7C↑j
.text:000000000000D7A8                 cmp     r12, rax
.text:000000000000D7AB                 jnb     short loc_D72F
.text:000000000000D7AD                 test    r12, r12
.text:000000000000D7B0                 jnz     loc_DB80
.text:000000000000D7B6                 cmp     rax, 0Ch
.text:000000000000D7BA                 ja      loc_DB92
.text:000000000000D7C0                 mov     r12d, 0Ch
.text:000000000000D7C6
.text:000000000000D7C6 loc_D7C6:                               ; CODE XREF: vasnprintf+EEC↓j
.text:000000000000D7C6                                         ; vasnprintf+EFF↓j
.text:000000000000D7C6                 cmp     r15, [rbp+src]
.text:000000000000D7CD                 setz    dl
.text:000000000000D7D0                 test    r15, r15
.text:000000000000D7D3                 jz      loc_DA40
.text:000000000000D7D9                 test    dl, dl
.text:000000000000D7DB                 jnz     loc_DA40
.text:000000000000D7E1                 mov     rsi, r12        ; size
.text:000000000000D7E4                 mov     rdi, r15        ; ptr
.text:000000000000D7E7                 call    _realloc
.text:000000000000D7EC                 test    rax, rax
.text:000000000000D7EF                 jz      loc_D8EB
.text:000000000000D7F5                 mov     r15, rax
.text:000000000000D7F8                 jmp     loc_D72F
.text:000000000000D7F8 ; ---------------------------------------------------------------------------
.text:000000000000D7FD                 align 20h
.text:000000000000D800
.text:000000000000D800 loc_D800:                               ; CODE XREF: vasnprintf+42E↑j
.text:000000000000D800                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000D80A                 jmp     loc_D0F7
.text:000000000000D80A ; ---------------------------------------------------------------------------
.text:000000000000D80F                 align 10h
.text:000000000000D810
.text:000000000000D810 loc_D810:                               ; CODE XREF: vasnprintf+240↑j
.text:000000000000D810                 js      loc_CE05
.text:000000000000D816                 add     r12, r12
.text:000000000000D819                 cmp     r12, rax
.text:000000000000D81C                 jnb     loc_CEF6
.text:000000000000D822
.text:000000000000D822 loc_D822:                               ; CODE XREF: vasnprintf+24A↑j
.text:000000000000D822                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D826                 jz      loc_CE05
.text:000000000000D82C                 cmp     r15, [rbp+src]
.text:000000000000D833                 mov     r12, rax
.text:000000000000D836                 setz    dl
.text:000000000000D839                 test    r15, r15
.text:000000000000D83C                 jnz     loc_CF09
.text:000000000000D842                 nop     word ptr [rax+rax+00h]
.text:000000000000D848
.text:000000000000D848 loc_D848:                               ; CODE XREF: vasnprintf+263↑j
.text:000000000000D848                                         ; vasnprintf+26B↑j
.text:000000000000D848                 mov     rdi, r12        ; size
.text:000000000000D84B                 mov     [rbp+var_3E0], r8
.text:000000000000D852                 mov     byte ptr [rbp+var_3D0], dl
.text:000000000000D858                 mov     [rbp+n], rcx
.text:000000000000D85F                 call    _malloc
.text:000000000000D864                 test    rax, rax
.text:000000000000D867                 mov     r9, rax
.text:000000000000D86A                 mov     rcx, [rbp+n]
.text:000000000000D871                 movzx   edx, byte ptr [rbp+var_3D0]
.text:000000000000D878                 mov     r8, [rbp+var_3E0]
.text:000000000000D87F                 jz      loc_CE05
.text:000000000000D885                 test    rbx, rbx
.text:000000000000D888                 jz      loc_DA90
.text:000000000000D88E                 test    dl, dl
.text:000000000000D890                 jz      loc_DA90
.text:000000000000D896                 mov     rsi, r15        ; src
.text:000000000000D899                 mov     rdx, rbx        ; n
.text:000000000000D89C                 mov     rdi, rax        ; dest
.text:000000000000D89F                 mov     [rbp+var_3D0], r8
.text:000000000000D8A6                 mov     [rbp+n], rcx
.text:000000000000D8AD                 call    _memcpy
.text:000000000000D8B2                 mov     rcx, [rbp+n]
.text:000000000000D8B9                 mov     r15, rax
.text:000000000000D8BC                 mov     r8, [rbp+var_3D0]
.text:000000000000D8C3                 jmp     loc_CF44
.text:000000000000D8C3 ; ---------------------------------------------------------------------------
.text:000000000000D8C8                 align 10h
.text:000000000000D8D0
.text:000000000000D8D0 loc_D8D0:                               ; CODE XREF: vasnprintf+15F↑j
.text:000000000000D8D0                 mov     r14, r12
.text:000000000000D8D3                 jmp     loc_CF44
.text:000000000000D8D3 ; ---------------------------------------------------------------------------
.text:000000000000D8D8                 align 20h
.text:000000000000D8E0
.text:000000000000D8E0 loc_D8E0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000D8E0                                         ; DATA XREF: .rodata:jpt_D7A0↓o
.text:000000000000D8E0                 mov     [rax], r14      ; jumptable 000000000000D7A0 cases 21,22
.text:000000000000D8E3                 mov     rbx, r14
.text:000000000000D8E6                 jmp     loc_D734
.text:000000000000D8EB ; ---------------------------------------------------------------------------
.text:000000000000D8EB
.text:000000000000D8EB loc_D8EB:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000D8EB                                         ; vasnprintf+B4F↑j ...
.text:000000000000D8EB                 call    ___errno_location
.text:000000000000D8F0                 mov     [rbp+n], rax
.text:000000000000D8F7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D900
.text:000000000000D900 loc_D900:                               ; CODE XREF: vasnprintf+17D↑j
.text:000000000000D900                 mov     rdi, r15        ; ptr
.text:000000000000D903                 call    _free
.text:000000000000D908                 jmp     loc_CE23
.text:000000000000D908 ; ---------------------------------------------------------------------------
.text:000000000000D90D                 align 10h
.text:000000000000D910
.text:000000000000D910 loc_D910:                               ; CODE XREF: vasnprintf+872↑j
.text:000000000000D910                 mov     r9, [rbp+var_3F0]
.text:000000000000D917                 mov     r8, [rbp+var_3D8]
.text:000000000000D91E                 mov     rsi, r10
.text:000000000000D921                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D928                 mov     edx, 1
.text:000000000000D92D                 mov     eax, 1
.text:000000000000D932                 mov     [rbp+var_430], r10
.text:000000000000D939                 call    ___snprintf_chk
.text:000000000000D93E                 mov     r10, [rbp+var_430]
.text:000000000000D945                 jmp     loc_D266
.text:000000000000D945 ; ---------------------------------------------------------------------------
.text:000000000000D94A                 align 10h
.text:000000000000D950
.text:000000000000D950 loc_D950:                               ; CODE XREF: vasnprintf+7E8↑j
.text:000000000000D950                 sub     rsp, 10h
.text:000000000000D954                 mov     r9, [rbp+var_3F0]
.text:000000000000D95B                 fstp    [rsp+440h+var_440]
.text:000000000000D95E                 jmp     loc_D239
.text:000000000000D95E ; ---------------------------------------------------------------------------
.text:000000000000D963                 align 8
.text:000000000000D968
.text:000000000000D968 loc_D968:                               ; CODE XREF: vasnprintf+4A3↑j
.text:000000000000D968                 js      loc_CE05
.text:000000000000D96E                 add     r12, r12
.text:000000000000D971                 cmp     r12, rax
.text:000000000000D974                 jnb     loc_D159
.text:000000000000D97A                 nop     word ptr [rax+rax+00h]
.text:000000000000D980
.text:000000000000D980 loc_D980:                               ; CODE XREF: vasnprintf+4AD↑j
.text:000000000000D980                                         ; vasnprintf+1114↓j
.text:000000000000D980                 test    rdx, rdx
.text:000000000000D983                 jnz     loc_CE05
.text:000000000000D989                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D98D                 jz      loc_CE05
.text:000000000000D993                 cmp     r15, [rbp+src]
.text:000000000000D99A                 mov     r12, rax
.text:000000000000D99D                 setz    dl
.text:000000000000D9A0                 test    r15, r15
.text:000000000000D9A3                 jnz     loc_D16C
.text:000000000000D9A9                 nop     dword ptr [rax+00000000h]
.text:000000000000D9B0
.text:000000000000D9B0 loc_D9B0:                               ; CODE XREF: vasnprintf+4C6↑j
.text:000000000000D9B0                                         ; vasnprintf+4CE↑j
.text:000000000000D9B0                 mov     rdi, r12        ; size
.text:000000000000D9B3                 mov     byte ptr [rbp+n], dl
.text:000000000000D9B9                 call    _malloc
.text:000000000000D9BE                 test    rax, rax
.text:000000000000D9C1                 mov     rcx, rax
.text:000000000000D9C4                 movzx   edx, byte ptr [rbp+n]
.text:000000000000D9CB                 jz      loc_CE05
.text:000000000000D9D1                 test    r14, r14
.text:000000000000D9D4                 jz      loc_DB70
.text:000000000000D9DA                 test    dl, dl
.text:000000000000D9DC                 jz      loc_DB70
.text:000000000000D9E2                 mov     rsi, r15        ; src
.text:000000000000D9E5                 mov     rdx, r14        ; n
.text:000000000000D9E8                 mov     rdi, rax        ; dest
.text:000000000000D9EB                 call    _memcpy
.text:000000000000D9F0                 mov     r15, rax
.text:000000000000D9F3                 jmp     loc_D18B
.text:000000000000D9F3 ; ---------------------------------------------------------------------------
.text:000000000000D9F8                 align 20h
.text:000000000000DA00
.text:000000000000DA00 loc_DA00:                               ; CODE XREF: vasnprintf+402↑j
.text:000000000000DA00                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:000000000000DA03                 add     rbx, 1
.text:000000000000DA07                 jmp     loc_D0BB
.text:000000000000DA07 ; ---------------------------------------------------------------------------
.text:000000000000DA0C                 align 10h
.text:000000000000DA10
.text:000000000000DA10 loc_DA10:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000DA10                                         ; DATA XREF: .rodata:jpt_D7A0↓o
.text:000000000000DA10                 mov     [rax], r14b     ; jumptable 000000000000D7A0 case 18
.text:000000000000DA13                 mov     rbx, r14
.text:000000000000DA16                 jmp     loc_D734
.text:000000000000DA16 ; ---------------------------------------------------------------------------
.text:000000000000DA1B                 align 20h
.text:000000000000DA20
.text:000000000000DA20 loc_DA20:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000DA20                                         ; DATA XREF: .rodata:jpt_D7A0↓o
.text:000000000000DA20                 mov     [rax], r14d     ; jumptable 000000000000D7A0 case 20
.text:000000000000DA23                 mov     rbx, r14
.text:000000000000DA26                 jmp     loc_D734
.text:000000000000DA26 ; ---------------------------------------------------------------------------
.text:000000000000DA2B                 align 10h
.text:000000000000DA30
.text:000000000000DA30 loc_DA30:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000DA30                                         ; DATA XREF: .rodata:jpt_D7A0↓o
.text:000000000000DA30                 mov     [rax], r14w     ; jumptable 000000000000D7A0 case 19
.text:000000000000DA34                 mov     rbx, r14
.text:000000000000DA37                 jmp     loc_D734
.text:000000000000DA37 ; ---------------------------------------------------------------------------
.text:000000000000DA3C                 align 20h
.text:000000000000DA40
.text:000000000000DA40 loc_DA40:                               ; CODE XREF: vasnprintf+B33↑j
.text:000000000000DA40                                         ; vasnprintf+B3B↑j
.text:000000000000DA40                 mov     rdi, r12        ; size
.text:000000000000DA43                 mov     byte ptr [rbp+n], dl
.text:000000000000DA49                 call    _malloc
.text:000000000000DA4E                 test    rax, rax
.text:000000000000DA51                 mov     rcx, rax
.text:000000000000DA54                 movzx   edx, byte ptr [rbp+n]
.text:000000000000DA5B                 jz      loc_CE05
.text:000000000000DA61                 test    r14, r14
.text:000000000000DA64                 jz      loc_DBA4
.text:000000000000DA6A                 test    dl, dl
.text:000000000000DA6C                 jz      loc_DBA4
.text:000000000000DA72                 mov     rsi, r15        ; src
.text:000000000000DA75                 mov     rdx, r14        ; n
.text:000000000000DA78                 mov     rdi, rax        ; dest
.text:000000000000DA7B                 call    _memcpy
.text:000000000000DA80                 mov     r15, rax
.text:000000000000DA83                 jmp     loc_D72F
.text:000000000000DA83 ; ---------------------------------------------------------------------------
.text:000000000000DA88                 align 10h
.text:000000000000DA90
.text:000000000000DA90 loc_DA90:                               ; CODE XREF: vasnprintf+BE8↑j
.text:000000000000DA90                                         ; vasnprintf+BF0↑j
.text:000000000000DA90                 mov     r15, r9
.text:000000000000DA93                 jmp     loc_CF44
.text:000000000000DA93 ; ---------------------------------------------------------------------------
.text:000000000000DA98                 align 20h
.text:000000000000DAA0
.text:000000000000DAA0 loc_DAA0:                               ; CODE XREF: vasnprintf+869↑j
.text:000000000000DAA0                 sub     rsp, 8
.text:000000000000DAA4                 push    [rbp+var_3F0]
.text:000000000000DAAA                 jmp     loc_D525
.text:000000000000DAAA ; ---------------------------------------------------------------------------
.text:000000000000DAAF                 align 10h
.text:000000000000DAB0
.text:000000000000DAB0 loc_DAB0:                               ; CODE XREF: vasnprintf+7DF↑j
.text:000000000000DAB0                 sub     rsp, 8
.text:000000000000DAB4                 push    [rbp+var_3F0]
.text:000000000000DABA                 sub     rsp, 10h
.text:000000000000DABE                 fstp    [rsp+450h+var_450]
.text:000000000000DAC1                 jmp     loc_D5EB
.text:000000000000DAC1 ; ---------------------------------------------------------------------------
.text:000000000000DAC6                 align 10h
.text:000000000000DAD0
.text:000000000000DAD0 loc_DAD0:                               ; CODE XREF: vasnprintf+5FC↑j
.text:000000000000DAD0                 mov     rax, [rbp+n]
.text:000000000000DAD7                 mov     edi, [rbp-424h]
.text:000000000000DADD                 movsxd  rbx, ecx
.text:000000000000DAE0                 add     rbx, r14
.text:000000000000DAE3                 mov     [rax], edi
.text:000000000000DAE5                 jmp     loc_D734
.text:000000000000DAE5 ; ---------------------------------------------------------------------------
.text:000000000000DAEA                 align 10h
.text:000000000000DAF0
.text:000000000000DAF0 loc_DAF0:                               ; CODE XREF: vasnprintf+609↑j
.text:000000000000DAF0                 cmp     r15, [rbp+src]
.text:000000000000DAF7                 jz      short loc_DB02
.text:000000000000DAF9                 test    r15, r15
.text:000000000000DAFC                 jnz     loc_DBB9
.text:000000000000DB02
.text:000000000000DB02 loc_DB02:                               ; CODE XREF: vasnprintf+E57↑j
.text:000000000000DB02                                         ; vasnprintf+F21↓j
.text:000000000000DB02                 mov     rax, [rbp+ptr]
.text:000000000000DB09                 test    rax, rax
.text:000000000000DB0C                 jz      short loc_DB16
.text:000000000000DB0E                 mov     rdi, rax        ; ptr
.text:000000000000DB11                 call    _free
.text:000000000000DB16
.text:000000000000DB16 loc_DB16:                               ; CODE XREF: vasnprintf+E6C↑j
.text:000000000000DB16                 mov     rax, [rbp+var_408]
.text:000000000000DB1D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000DB24                 add     rax, 20h ; ' '
.text:000000000000DB28                 cmp     rdi, rax
.text:000000000000DB2B                 jz      short loc_DB32
.text:000000000000DB2D                 call    _free
.text:000000000000DB32
.text:000000000000DB32 loc_DB32:                               ; CODE XREF: vasnprintf+E8B↑j
.text:000000000000DB32                 mov     rax, [rbp+var_410]
.text:000000000000DB39                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000DB40                 add     rax, 10h
.text:000000000000DB44                 cmp     rdi, rax
.text:000000000000DB47                 jz      short loc_DB4E
.text:000000000000DB49                 call    _free
.text:000000000000DB4E
.text:000000000000DB4E loc_DB4E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000DB4E                 mov     rax, [rbp+n]
.text:000000000000DB55                 xor     r15d, r15d
.text:000000000000DB58                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000DB5E                 jmp     loc_CE7F
.text:000000000000DB5E ; ---------------------------------------------------------------------------
.text:000000000000DB63                 align 8
.text:000000000000DB68
.text:000000000000DB68 loc_DB68:                               ; CODE XREF: vasnprintf+60↑j
.text:000000000000DB68                 xor     r15d, r15d
.text:000000000000DB6B                 jmp     loc_CE7F
.text:000000000000DB70 ; ---------------------------------------------------------------------------
.text:000000000000DB70
.text:000000000000DB70 loc_DB70:                               ; CODE XREF: vasnprintf+D34↑j
.text:000000000000DB70                                         ; vasnprintf+D3C↑j
.text:000000000000DB70                 mov     r15, rcx
.text:000000000000DB73                 jmp     loc_D18B
.text:000000000000DB73 ; ---------------------------------------------------------------------------
.text:000000000000DB78                 align 20h
.text:000000000000DB80
.text:000000000000DB80 loc_DB80:                               ; CODE XREF: vasnprintf+B10↑j
.text:000000000000DB80                 js      loc_CE05
.text:000000000000DB86                 add     r12, r12
.text:000000000000DB89                 cmp     r12, rax
.text:000000000000DB8C                 jnb     loc_D7C6
.text:000000000000DB92
.text:000000000000DB92 loc_DB92:                               ; CODE XREF: vasnprintf+B1A↑j
.text:000000000000DB92                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DB96                 jz      loc_CE05
.text:000000000000DB9C                 mov     r12, rax
.text:000000000000DB9F                 jmp     loc_D7C6
.text:000000000000DBA4 ; ---------------------------------------------------------------------------
.text:000000000000DBA4
.text:000000000000DBA4 loc_DBA4:                               ; CODE XREF: vasnprintf+DC4↑j
.text:000000000000DBA4                                         ; vasnprintf+DCC↑j
.text:000000000000DBA4                 mov     r15, rcx
.text:000000000000DBA7                 jmp     loc_D72F
.text:000000000000DBAC ; ---------------------------------------------------------------------------
.text:000000000000DBAC
.text:000000000000DBAC loc_DBAC:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000DBAC                 mov     rdi, r15        ; ptr
.text:000000000000DBAF                 call    _free
.text:000000000000DBB4                 jmp     loc_D402
.text:000000000000DBB9 ; ---------------------------------------------------------------------------
.text:000000000000DBB9
.text:000000000000DBB9 loc_DBB9:                               ; CODE XREF: vasnprintf+E5C↑j
.text:000000000000DBB9                 mov     rdi, r15        ; ptr
.text:000000000000DBBC                 call    _free
.text:000000000000DBC1                 jmp     loc_DB02
.text:000000000000DBC6 ; ---------------------------------------------------------------------------
.text:000000000000DBC6
.text:000000000000DBC6 def_D1FB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:000000000000DBC6                                         ; vasnprintf+43E↑j ...
.text:000000000000DBC6                 call    _abort          ; jumptable 000000000000D1FB default case, case 0
.text:000000000000DBC6                                         ; jumptable 000000000000D7A0 default case
.text:000000000000DBC6 ; ---------------------------------------------------------------------------
.text:000000000000DBCB                 align 10h
.text:000000000000DBD0
.text:000000000000DBD0 loc_DBD0:                               ; CODE XREF: vasnprintf+73↑j
.text:000000000000DBD0                 mov     rax, [rbp+var_408]
.text:000000000000DBD7                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000DBDE                 add     rax, 20h ; ' '
.text:000000000000DBE2                 cmp     rdi, rax
.text:000000000000DBE5                 jz      short loc_DBEC
.text:000000000000DBE7                 call    _free
.text:000000000000DBEC
.text:000000000000DBEC loc_DBEC:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000DBEC                 mov     rax, [rbp+var_410]
.text:000000000000DBF3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000DBFA                 add     rax, 10h
.text:000000000000DBFE                 cmp     rdi, rax
.text:000000000000DC01                 jz      short loc_DC08
.text:000000000000DC03                 call    _free
.text:000000000000DC08
.text:000000000000DC08 loc_DC08:                               ; CODE XREF: vasnprintf+F61↑j
.text:000000000000DC08                 call    ___errno_location
.text:000000000000DC0D                 xor     r15d, r15d
.text:000000000000DC10                 mov     dword ptr [rax], 16h
.text:000000000000DC16                 jmp     loc_CE7F
.text:000000000000DC1B ; ---------------------------------------------------------------------------
.text:000000000000DC1B
.text:000000000000DC1B loc_DC1B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000DC1B                 mov     rbx, r14
.text:000000000000DC1E                 xor     eax, eax
.text:000000000000DC20                 add     rbx, 1
.text:000000000000DC24                 jb      loc_DD30
.text:000000000000DC2A                 cmp     r12, rbx
.text:000000000000DC2D                 jnb     short loc_DC7C
.text:000000000000DC2F                 test    r12, r12
.text:000000000000DC32                 jnz     loc_DD69
.text:000000000000DC38                 cmp     rbx, 0Ch
.text:000000000000DC3C                 ja      loc_DD4E
.text:000000000000DC42                 mov     r12d, 0Ch
.text:000000000000DC48
.text:000000000000DC48 loc_DC48:                               ; CODE XREF: vasnprintf+10C4↓j
.text:000000000000DC48                                         ; vasnprintf+10D5↓j
.text:000000000000DC48                 cmp     r15, [rbp+src]
.text:000000000000DC4F                 setz    r13b
.text:000000000000DC53                 test    r15, r15
.text:000000000000DC56                 jz      loc_DCFC
.text:000000000000DC5C                 test    r13b, r13b
.text:000000000000DC5F                 jnz     loc_DCFC
.text:000000000000DC65                 mov     rsi, r12        ; size
.text:000000000000DC68                 mov     rdi, r15        ; ptr
.text:000000000000DC6B                 call    _realloc
.text:000000000000DC70                 test    rax, rax
.text:000000000000DC73                 jz      loc_D8EB
.text:000000000000DC79                 mov     r15, rax
.text:000000000000DC7C
.text:000000000000DC7C loc_DC7C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000DC7C                                         ; vasnprintf+108B↓j ...
.text:000000000000DC7C                 cmp     r15, [rbp+src]
.text:000000000000DC83                 mov     byte ptr [r15+r14], 0
.text:000000000000DC88                 jz      short loc_DCA1
.text:000000000000DC8A                 cmp     r12, rbx
.text:000000000000DC8D                 jbe     short loc_DCA1
.text:000000000000DC8F                 mov     rdi, r15        ; ptr
.text:000000000000DC92                 mov     rsi, rbx        ; size
.text:000000000000DC95                 call    _realloc
.text:000000000000DC9A                 test    rax, rax
.text:000000000000DC9D                 cmovnz  r15, rax
.text:000000000000DCA1
.text:000000000000DCA1 loc_DCA1:                               ; CODE XREF: vasnprintf+FE8↑j
.text:000000000000DCA1                                         ; vasnprintf+FED↑j
.text:000000000000DCA1                 mov     rax, [rbp+ptr]
.text:000000000000DCA8                 test    rax, rax
.text:000000000000DCAB                 jz      short loc_DCB5
.text:000000000000DCAD                 mov     rdi, rax        ; ptr
.text:000000000000DCB0                 call    _free
.text:000000000000DCB5
.text:000000000000DCB5 loc_DCB5:                               ; CODE XREF: vasnprintf+100B↑j
.text:000000000000DCB5                 mov     rax, [rbp+var_408]
.text:000000000000DCBC                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000DCC3                 add     rax, 20h ; ' '
.text:000000000000DCC7                 cmp     rdi, rax
.text:000000000000DCCA                 jz      short loc_DCD1
.text:000000000000DCCC                 call    _free
.text:000000000000DCD1
.text:000000000000DCD1 loc_DCD1:                               ; CODE XREF: vasnprintf+102A↑j
.text:000000000000DCD1                 mov     rax, [rbp+var_410]
.text:000000000000DCD8                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000DCDF                 add     rax, 10h
.text:000000000000DCE3                 cmp     rdi, rax
.text:000000000000DCE6                 jz      short loc_DCED
.text:000000000000DCE8                 call    _free
.text:000000000000DCED
.text:000000000000DCED loc_DCED:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000DCED                 mov     rax, [rbp+var_418]
.text:000000000000DCF4                 mov     [rax], r14
.text:000000000000DCF7                 jmp     loc_CE7F
.text:000000000000DCFC ; ---------------------------------------------------------------------------
.text:000000000000DCFC
.text:000000000000DCFC loc_DCFC:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000DCFC                                         ; vasnprintf+FBF↑j
.text:000000000000DCFC                 mov     rdi, r12        ; size
.text:000000000000DCFF                 call    _malloc
.text:000000000000DD04                 test    rax, rax
.text:000000000000DD07                 mov     rcx, rax
.text:000000000000DD0A                 jz      loc_CE05
.text:000000000000DD10                 test    r14, r14
.text:000000000000DD13                 jz      short loc_DD80
.text:000000000000DD15                 test    r13b, r13b
.text:000000000000DD18                 jz      short loc_DD80
.text:000000000000DD1A                 mov     rsi, r15        ; src
.text:000000000000DD1D                 mov     rdx, r14        ; n
.text:000000000000DD20                 mov     rdi, rax        ; dest
.text:000000000000DD23                 call    _memcpy
.text:000000000000DD28                 mov     r15, rax
.text:000000000000DD2B                 jmp     loc_DC7C
.text:000000000000DD30 ; ---------------------------------------------------------------------------
.text:000000000000DD30
.text:000000000000DD30 loc_DD30:                               ; CODE XREF: vasnprintf+F84↑j
.text:000000000000DD30                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD34                 mov     eax, 1
.text:000000000000DD39                 jz      loc_DC7C
.text:000000000000DD3F                 test    r12, r12
.text:000000000000DD42                 jz      loc_CE05
.text:000000000000DD48                 js      loc_CE05
.text:000000000000DD4E
.text:000000000000DD4E loc_DD4E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000DD4E                                         ; vasnprintf+10DB↓j
.text:000000000000DD4E                 test    rax, rax
.text:000000000000DD51                 jnz     loc_CE05
.text:000000000000DD57                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD5B                 jz      loc_CE05
.text:000000000000DD61                 mov     r12, rbx
.text:000000000000DD64                 jmp     loc_DC48
.text:000000000000DD69 ; ---------------------------------------------------------------------------
.text:000000000000DD69
.text:000000000000DD69 loc_DD69:                               ; CODE XREF: vasnprintf+F92↑j
.text:000000000000DD69                 js      loc_CE05
.text:000000000000DD6F                 add     r12, r12
.text:000000000000DD72                 cmp     r12, rbx
.text:000000000000DD75                 jnb     loc_DC48
.text:000000000000DD7B                 jmp     short loc_DD4E
.text:000000000000DD7B ; ---------------------------------------------------------------------------
.text:000000000000DD7D                 align 20h
.text:000000000000DD80
.text:000000000000DD80 loc_DD80:                               ; CODE XREF: vasnprintf+1073↑j
.text:000000000000DD80                                         ; vasnprintf+1078↑j
.text:000000000000DD80                 mov     r15, rcx
.text:000000000000DD83                 jmp     loc_DC7C
.text:000000000000DD88 ; ---------------------------------------------------------------------------
.text:000000000000DD88
.text:000000000000DD88 loc_DD88:                               ; CODE XREF: vasnprintf+627↑j
.text:000000000000DD88                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD8C                 jz      loc_D1B0
.text:000000000000DD92                 jmp     loc_CE11
.text:000000000000DD97 ; ---------------------------------------------------------------------------
.text:000000000000DD97
.text:000000000000DD97 loc_DD97:                               ; CODE XREF: vasnprintf+1EF↑j
.text:000000000000DD97                 call    ___stack_chk_fail
.text:000000000000DD9C ; ---------------------------------------------------------------------------
.text:000000000000DD9C
.text:000000000000DD9C loc_DD9C:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000DD9C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000DDA0                 mov     edx, 1
.text:000000000000DDA5                 jz      loc_D18B
.text:000000000000DDAB                 test    r12, r12
.text:000000000000DDAE                 jz      loc_CE05
.text:000000000000DDB4                 jns     loc_D980
.text:000000000000DDBA                 jmp     loc_CE05
.text:000000000000DDBA ; } // starts at CCA0
.text:000000000000DDBA vasnprintf      endp
.text:000000000000DDBA
.text:000000000000DDBA ; ---------------------------------------------------------------------------
.text:000000000000DDBF                 align 20h
.text:000000000000DDC0
.text:000000000000DDC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDC0
.text:000000000000DDC0
.text:000000000000DDC0                 public dup_safer
.text:000000000000DDC0 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000DDC0 ; __unwind {
.text:000000000000DDC0                 mov     edx, 3
.text:000000000000DDC5                 xor     esi, esi
.text:000000000000DDC7                 xor     eax, eax
.text:000000000000DDC9                 jmp     rpl_fcntl
.text:000000000000DDC9 ; } // starts at DDC0
.text:000000000000DDC9 dup_safer       endp
.text:000000000000DDC9
.text:000000000000DDC9 ; ---------------------------------------------------------------------------
.text:000000000000DDCE                 align 10h
.text:000000000000DDD0
.text:000000000000DDD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDD0
.text:000000000000DDD0
.text:000000000000DDD0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000DDD0                 public rpl_fcntl
.text:000000000000DDD0 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:000000000000DDD0
.text:000000000000DDD0 var_68          = dword ptr -68h
.text:000000000000DDD0 var_60          = qword ptr -60h
.text:000000000000DDD0 var_58          = qword ptr -58h
.text:000000000000DDD0 var_50          = qword ptr -50h
.text:000000000000DDD0 var_48          = byte ptr -48h
.text:000000000000DDD0 var_38          = qword ptr -38h
.text:000000000000DDD0 var_30          = qword ptr -30h
.text:000000000000DDD0 var_28          = qword ptr -28h
.text:000000000000DDD0 var_20          = qword ptr -20h
.text:000000000000DDD0 arg_0           = byte ptr  8
.text:000000000000DDD0
.text:000000000000DDD0 ; __unwind {
.text:000000000000DDD0                 push    r12
.text:000000000000DDD2                 push    rbp
.text:000000000000DDD3                 mov     ebp, edi
.text:000000000000DDD5                 push    rbx
.text:000000000000DDD6                 sub     rsp, 50h
.text:000000000000DDDA                 mov     rax, fs:28h
.text:000000000000DDE3                 mov     [rsp+68h+var_50], rax
.text:000000000000DDE8                 xor     eax, eax
.text:000000000000DDEA                 lea     rax, [rsp+68h+arg_0]
.text:000000000000DDEF                 test    esi, esi
.text:000000000000DDF1                 mov     [rsp+68h+var_38], rdx
.text:000000000000DDF6                 mov     [rsp+68h+var_30], rcx
.text:000000000000DDFB                 mov     [rsp+68h+var_28], r8
.text:000000000000DE00                 mov     [rsp+68h+var_60], rax
.text:000000000000DE05                 lea     rax, [rsp+68h+var_48]
.text:000000000000DE0A                 mov     [rsp+68h+var_20], r9
.text:000000000000DE0F                 mov     [rsp+68h+var_68], 10h
.text:000000000000DE16                 mov     [rsp+68h+var_58], rax
.text:000000000000DE1B                 jz      loc_E022
.text:000000000000DE21                 cmp     esi, 406h
.text:000000000000DE27                 jnz     short loc_DE70
.text:000000000000DE29                 mov     rax, [rsp+68h+var_58]
.text:000000000000DE2E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000DE35                 mov     [rsp+68h+var_68], 18h
.text:000000000000DE3C                 mov     r12d, [rax+10h]
.text:000000000000DE40                 mov     edx, r12d
.text:000000000000DE43                 js      loc_DF73
.text:000000000000DE49                 xor     eax, eax
.text:000000000000DE4B                 mov     esi, 406h       ; cmd
.text:000000000000DE50                 call    _fcntl
.text:000000000000DE55                 test    eax, eax
.text:000000000000DE57                 mov     ebx, eax
.text:000000000000DE59                 js      loc_DFE8
.text:000000000000DE5F
.text:000000000000DE5F loc_DE5F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000DE5F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000DE69                 jmp     short loc_DEB0
.text:000000000000DE69 ; ---------------------------------------------------------------------------
.text:000000000000DE6B                 align 10h
.text:000000000000DE70
.text:000000000000DE70 loc_DE70:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000DE70                 cmp     esi, 0Bh
.text:000000000000DE73                 jz      short loc_DEA0
.text:000000000000DE75                 jg      short loc_DED0
.text:000000000000DE77                 cmp     esi, 4
.text:000000000000DE7A                 jz      loc_DF50
.text:000000000000DE80                 jg      loc_DF40
.text:000000000000DE86                 cmp     esi, 2
.text:000000000000DE89                 jz      loc_DF50
.text:000000000000DE8F                 jg      short loc_DEA0
.text:000000000000DE91                 cmp     esi, 1
.text:000000000000DE94                 jnz     short loc_DEF8
.text:000000000000DE96                 db      2Eh
.text:000000000000DE96                 nop     word ptr [rax+rax+00000000h]
.text:000000000000DEA0
.text:000000000000DEA0 loc_DEA0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000DEA0                                         ; rpl_fcntl+BF↑j ...
.text:000000000000DEA0                 mov     edi, ebp        ; fd
.text:000000000000DEA2                 xor     eax, eax
.text:000000000000DEA4                 call    _fcntl
.text:000000000000DEA9                 mov     ebx, eax
.text:000000000000DEAB                 nop     dword ptr [rax+rax+00h]
.text:000000000000DEB0
.text:000000000000DEB0 loc_DEB0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000DEB0                                         ; rpl_fcntl+147↓j ...
.text:000000000000DEB0                 mov     rcx, [rsp+68h+var_50]
.text:000000000000DEB5                 xor     rcx, fs:28h
.text:000000000000DEBE                 mov     eax, ebx
.text:000000000000DEC0                 jnz     loc_E01D
.text:000000000000DEC6                 add     rsp, 50h
.text:000000000000DECA                 pop     rbx
.text:000000000000DECB                 pop     rbp
.text:000000000000DECC                 pop     r12
.text:000000000000DECE                 retn
.text:000000000000DECE ; ---------------------------------------------------------------------------
.text:000000000000DECF                 align 10h
.text:000000000000DED0
.text:000000000000DED0 loc_DED0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000DED0                 cmp     esi, 407h
.text:000000000000DED6                 jg      short loc_DF20
.text:000000000000DED8                 cmp     esi, 406h
.text:000000000000DEDE                 jge     short loc_DF50
.text:000000000000DEE0                 cmp     esi, 401h
.text:000000000000DEE6                 jz      short loc_DEA0
.text:000000000000DEE8                 cmp     esi, 402h
.text:000000000000DEEE                 jz      short loc_DF50
.text:000000000000DEF0                 cmp     esi, 400h
.text:000000000000DEF6                 jz      short loc_DF50
.text:000000000000DEF8
.text:000000000000DEF8 loc_DEF8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000DEF8                                         ; rpl_fcntl+164↓j ...
.text:000000000000DEF8                 mov     eax, [rsp+68h+var_68]
.text:000000000000DEFB                 cmp     eax, 2Fh ; '/'
.text:000000000000DEFE                 ja      loc_E03A
.text:000000000000DF04                 add     rax, [rsp+68h+var_58]
.text:000000000000DF09
.text:000000000000DF09 loc_DF09:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000DF09                 mov     rdx, [rax]
.text:000000000000DF0C                 mov     edi, ebp        ; fd
.text:000000000000DF0E                 xor     eax, eax
.text:000000000000DF10                 call    _fcntl
.text:000000000000DF15                 mov     ebx, eax
.text:000000000000DF17                 jmp     short loc_DEB0
.text:000000000000DF17 ; ---------------------------------------------------------------------------
.text:000000000000DF19                 align 20h
.text:000000000000DF20
.text:000000000000DF20 loc_DF20:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000DF20                 cmp     esi, 409h
.text:000000000000DF26                 jz      short loc_DF50
.text:000000000000DF28                 jl      loc_DEA0
.text:000000000000DF2E                 cmp     esi, 40Ah
.text:000000000000DF34                 jnz     short loc_DEF8
.text:000000000000DF36                 jmp     loc_DEA0
.text:000000000000DF36 ; ---------------------------------------------------------------------------
.text:000000000000DF3B                 align 20h
.text:000000000000DF40
.text:000000000000DF40 loc_DF40:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000DF40                 cmp     esi, 9
.text:000000000000DF43                 jz      loc_DEA0
.text:000000000000DF49                 jg      short loc_DF50
.text:000000000000DF4B                 cmp     esi, 8
.text:000000000000DF4E                 jnz     short loc_DEF8
.text:000000000000DF50
.text:000000000000DF50 loc_DF50:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000DF50                                         ; rpl_fcntl+B9↑j ...
.text:000000000000DF50                 mov     eax, [rsp+68h+var_68]
.text:000000000000DF53                 cmp     eax, 2Fh ; '/'
.text:000000000000DF56                 ja      loc_E044
.text:000000000000DF5C                 add     rax, [rsp+68h+var_58]
.text:000000000000DF61
.text:000000000000DF61 loc_DF61:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000DF61                 mov     edx, [rax]
.text:000000000000DF63                 mov     edi, ebp        ; fd
.text:000000000000DF65                 xor     eax, eax
.text:000000000000DF67                 call    _fcntl
.text:000000000000DF6C                 mov     ebx, eax
.text:000000000000DF6E                 jmp     loc_DEB0
.text:000000000000DF73 ; ---------------------------------------------------------------------------
.text:000000000000DF73
.text:000000000000DF73 loc_DF73:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000DF73                 xor     esi, esi        ; cmd
.text:000000000000DF75                 xor     eax, eax
.text:000000000000DF77                 call    _fcntl
.text:000000000000DF7C                 test    eax, eax
.text:000000000000DF7E                 mov     ebx, eax
.text:000000000000DF80                 js      loc_DEB0
.text:000000000000DF86                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000DF8D                 jnz     loc_DEB0
.text:000000000000DF93
.text:000000000000DF93 loc_DF93:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000DF93                 xor     eax, eax
.text:000000000000DF95                 mov     esi, 1          ; cmd
.text:000000000000DF9A                 mov     edi, ebx        ; fd
.text:000000000000DF9C                 call    _fcntl
.text:000000000000DFA1                 test    eax, eax
.text:000000000000DFA3                 js      short loc_DFC1
.text:000000000000DFA5                 or      eax, 1
.text:000000000000DFA8                 mov     esi, 2          ; cmd
.text:000000000000DFAD                 mov     edi, ebx        ; fd
.text:000000000000DFAF                 mov     edx, eax
.text:000000000000DFB1                 xor     eax, eax
.text:000000000000DFB3                 call    _fcntl
.text:000000000000DFB8                 cmp     eax, 0FFFFFFFFh
.text:000000000000DFBB                 jnz     loc_DEB0
.text:000000000000DFC1
.text:000000000000DFC1 loc_DFC1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000DFC1                 call    ___errno_location
.text:000000000000DFC6                 mov     r12d, [rax]
.text:000000000000DFC9                 mov     rbp, rax
.text:000000000000DFCC                 mov     edi, ebx        ; fd
.text:000000000000DFCE                 call    _close
.text:000000000000DFD3                 mov     ebx, 0FFFFFFFFh
.text:000000000000DFD8                 mov     [rbp+0], r12d
.text:000000000000DFDC                 jmp     loc_DEB0
.text:000000000000DFDC ; ---------------------------------------------------------------------------
.text:000000000000DFE1                 align 8
.text:000000000000DFE8
.text:000000000000DFE8 loc_DFE8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000DFE8                 call    ___errno_location
.text:000000000000DFED                 cmp     dword ptr [rax], 16h
.text:000000000000DFF0                 jnz     loc_DE5F
.text:000000000000DFF6                 xor     esi, esi        ; cmd
.text:000000000000DFF8                 xor     eax, eax
.text:000000000000DFFA                 mov     edx, r12d
.text:000000000000DFFD                 mov     edi, ebp        ; fd
.text:000000000000DFFF                 call    _fcntl
.text:000000000000E004                 test    eax, eax
.text:000000000000E006                 mov     ebx, eax
.text:000000000000E008                 js      loc_DEB0
.text:000000000000E00E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000E018                 jmp     loc_DF93
.text:000000000000E01D ; ---------------------------------------------------------------------------
.text:000000000000E01D
.text:000000000000E01D loc_E01D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000E01D                 call    ___stack_chk_fail
.text:000000000000E022 ; ---------------------------------------------------------------------------
.text:000000000000E022
.text:000000000000E022 loc_E022:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000E022                 mov     rax, [rsp+68h+var_58]
.text:000000000000E027                 xor     esi, esi        ; cmd
.text:000000000000E029                 mov     edx, [rax+10h]
.text:000000000000E02C                 xor     eax, eax
.text:000000000000E02E                 call    _fcntl
.text:000000000000E033                 mov     ebx, eax
.text:000000000000E035                 jmp     loc_DEB0
.text:000000000000E03A ; ---------------------------------------------------------------------------
.text:000000000000E03A
.text:000000000000E03A loc_E03A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000E03A                 mov     rax, [rsp+68h+var_60]
.text:000000000000E03F                 jmp     loc_DF09
.text:000000000000E044 ; ---------------------------------------------------------------------------
.text:000000000000E044
.text:000000000000E044 loc_E044:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000E044                 mov     rax, [rsp+68h+var_60]
.text:000000000000E049                 jmp     loc_DF61
.text:000000000000E049 ; } // starts at DDD0
.text:000000000000E049 rpl_fcntl       endp
.text:000000000000E049
.text:000000000000E049 ; ---------------------------------------------------------------------------
.text:000000000000E04E                 align 10h
.text:000000000000E050
.text:000000000000E050 ; =============== S U B R O U T I N E =======================================
.text:000000000000E050
.text:000000000000E050
.text:000000000000E050                 public printf_fetchargs
.text:000000000000E050 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:000000000000E050 ; __unwind {
.text:000000000000E050                 cmp     qword ptr [rsi], 0
.text:000000000000E054                 mov     rax, [rsi+8]
.text:000000000000E058                 jz      short loc_E0BD
.text:000000000000E05A                 lea     r8, jpt_E086
.text:000000000000E061                 lea     r10, wide_null_string_2696
.text:000000000000E068                 lea     r9, aNull       ; "(NULL)"
.text:000000000000E06F                 xor     ecx, ecx
.text:000000000000E071                 nop     dword ptr [rax+00000000h]
.text:000000000000E078
.text:000000000000E078 loc_E078:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:000000000000E078                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000E07B                 ja      short def_E086  ; jumptable 000000000000E086 default case, case 0
.text:000000000000E07D                 mov     edx, [rax]
.text:000000000000E07F                 movsxd  rdx, ds:(jpt_E086 - 10CF0h)[r8+rdx*4]
.text:000000000000E083                 add     rdx, r8
.text:000000000000E086                 jmp     rdx             ; switch jump
.text:000000000000E086 ; ---------------------------------------------------------------------------
.text:000000000000E088                 align 10h
.text:000000000000E090
.text:000000000000E090 loc_E090:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E090                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E090                 mov     rdx, [rdi+8]    ; jumptable 000000000000E086 case 12
.text:000000000000E094                 add     rdx, 0Fh
.text:000000000000E098                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000E09C                 lea     r11, [rdx+10h]
.text:000000000000E0A0                 mov     [rdi+8], r11
.text:000000000000E0A4                 fld     tbyte ptr [rdx]
.text:000000000000E0A6                 fstp    tbyte ptr [rax+10h]
.text:000000000000E0A9                 nop     dword ptr [rax+00000000h]
.text:000000000000E0B0
.text:000000000000E0B0 loc_E0B0:                               ; CODE XREF: printf_fetchargs+98↓j
.text:000000000000E0B0                                         ; printf_fetchargs+BA↓j ...
.text:000000000000E0B0                 add     rcx, 1
.text:000000000000E0B4                 add     rax, 20h ; ' '
.text:000000000000E0B8                 cmp     [rsi], rcx
.text:000000000000E0BB                 ja      short loc_E078
.text:000000000000E0BD
.text:000000000000E0BD loc_E0BD:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000E0BD                 xor     eax, eax
.text:000000000000E0BF                 retn
.text:000000000000E0C0 ; ---------------------------------------------------------------------------
.text:000000000000E0C0
.text:000000000000E0C0 def_E086:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:000000000000E0C0                                         ; printf_fetchargs+36↑j
.text:000000000000E0C0                                         ; DATA XREF: ...
.text:000000000000E0C0                 mov     eax, 0FFFFFFFFh ; jumptable 000000000000E086 default case, case 0
.text:000000000000E0C5                 retn
.text:000000000000E0C6 ; ---------------------------------------------------------------------------
.text:000000000000E0C6
.text:000000000000E0C6 loc_E0C6:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E0C6                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E0C6                 mov     r11d, [rdi]     ; jumptable 000000000000E086 cases 7-10,17-22
.text:000000000000E0C9                 cmp     r11d, 2Fh ; '/'
.text:000000000000E0CD                 ja      loc_E20A
.text:000000000000E0D3                 mov     edx, r11d
.text:000000000000E0D6                 add     rdx, [rdi+10h]
.text:000000000000E0DA                 add     r11d, 8
.text:000000000000E0DE                 mov     [rdi], r11d
.text:000000000000E0E1
.text:000000000000E0E1 loc_E0E1:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:000000000000E0E1                 mov     rdx, [rdx]
.text:000000000000E0E4                 mov     [rax+10h], rdx
.text:000000000000E0E8                 jmp     short loc_E0B0
.text:000000000000E0EA ; ---------------------------------------------------------------------------
.text:000000000000E0EA
.text:000000000000E0EA loc_E0EA:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E0EA                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E0EA                 mov     r11d, [rdi]     ; jumptable 000000000000E086 cases 5,6,13,14
.text:000000000000E0ED                 cmp     r11d, 2Fh ; '/'
.text:000000000000E0F1                 ja      loc_E22C
.text:000000000000E0F7                 mov     edx, r11d
.text:000000000000E0FA                 add     rdx, [rdi+10h]
.text:000000000000E0FE                 add     r11d, 8
.text:000000000000E102                 mov     [rdi], r11d
.text:000000000000E105
.text:000000000000E105 loc_E105:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:000000000000E105                 mov     edx, [rdx]
.text:000000000000E107                 mov     [rax+10h], edx
.text:000000000000E10A                 jmp     short loc_E0B0
.text:000000000000E10C ; ---------------------------------------------------------------------------
.text:000000000000E10C
.text:000000000000E10C loc_E10C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E10C                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E10C                 mov     r11d, [rdi]     ; jumptable 000000000000E086 cases 1,2
.text:000000000000E10F                 cmp     r11d, 2Fh ; '/'
.text:000000000000E113                 ja      loc_E21B
.text:000000000000E119                 mov     edx, r11d
.text:000000000000E11C                 add     rdx, [rdi+10h]
.text:000000000000E120                 add     r11d, 8
.text:000000000000E124                 mov     [rdi], r11d
.text:000000000000E127
.text:000000000000E127 loc_E127:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:000000000000E127                 mov     edx, [rdx]
.text:000000000000E129                 mov     [rax+10h], dl
.text:000000000000E12C                 jmp     short loc_E0B0
.text:000000000000E12E ; ---------------------------------------------------------------------------
.text:000000000000E12E
.text:000000000000E12E loc_E12E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E12E                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E12E                 mov     r11d, [rdi]     ; jumptable 000000000000E086 cases 3,4
.text:000000000000E131                 cmp     r11d, 2Fh ; '/'
.text:000000000000E135                 ja      loc_E1DA
.text:000000000000E13B                 mov     edx, r11d
.text:000000000000E13E                 add     rdx, [rdi+10h]
.text:000000000000E142                 add     r11d, 8
.text:000000000000E146                 mov     [rdi], r11d
.text:000000000000E149
.text:000000000000E149 loc_E149:                               ; CODE XREF: printf_fetchargs+196↓j
.text:000000000000E149                 mov     edx, [rdx]
.text:000000000000E14B                 mov     [rax+10h], dx
.text:000000000000E14F                 jmp     loc_E0B0
.text:000000000000E154 ; ---------------------------------------------------------------------------
.text:000000000000E154
.text:000000000000E154 loc_E154:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E154                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E154                 mov     r11d, [rdi]     ; jumptable 000000000000E086 case 15
.text:000000000000E157                 cmp     r11d, 2Fh ; '/'
.text:000000000000E15B                 ja      loc_E1EB
.text:000000000000E161                 mov     edx, r11d
.text:000000000000E164                 add     rdx, [rdi+10h]
.text:000000000000E168                 add     r11d, 8
.text:000000000000E16C                 mov     [rdi], r11d
.text:000000000000E16F
.text:000000000000E16F loc_E16F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000E16F                 mov     rdx, [rdx]
.text:000000000000E172                 test    rdx, rdx
.text:000000000000E175                 cmovz   rdx, r9
.text:000000000000E179                 mov     [rax+10h], rdx
.text:000000000000E17D                 jmp     loc_E0B0
.text:000000000000E182 ; ---------------------------------------------------------------------------
.text:000000000000E182
.text:000000000000E182 loc_E182:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E182                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E182                 mov     r11d, [rdi+4]   ; jumptable 000000000000E086 case 11
.text:000000000000E186                 cmp     r11d, 0AFh
.text:000000000000E18D                 ja      loc_E23D
.text:000000000000E193                 mov     edx, r11d
.text:000000000000E196                 add     rdx, [rdi+10h]
.text:000000000000E19A                 add     r11d, 10h
.text:000000000000E19E                 mov     [rdi+4], r11d
.text:000000000000E1A2
.text:000000000000E1A2 loc_E1A2:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:000000000000E1A2                 movsd   xmm0, qword ptr [rdx]
.text:000000000000E1A6                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000E1AB                 jmp     loc_E0B0
.text:000000000000E1B0 ; ---------------------------------------------------------------------------
.text:000000000000E1B0
.text:000000000000E1B0 loc_E1B0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E1B0                                         ; DATA XREF: .rodata:jpt_E086↓o
.text:000000000000E1B0                 mov     r11d, [rdi]     ; jumptable 000000000000E086 case 16
.text:000000000000E1B3                 cmp     r11d, 2Fh ; '/'
.text:000000000000E1B7                 ja      short loc_E1FC
.text:000000000000E1B9                 mov     edx, r11d
.text:000000000000E1BC                 add     rdx, [rdi+10h]
.text:000000000000E1C0                 add     r11d, 8
.text:000000000000E1C4                 mov     [rdi], r11d
.text:000000000000E1C7
.text:000000000000E1C7 loc_E1C7:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:000000000000E1C7                 mov     rdx, [rdx]
.text:000000000000E1CA                 test    rdx, rdx
.text:000000000000E1CD                 cmovz   rdx, r10
.text:000000000000E1D1                 mov     [rax+10h], rdx
.text:000000000000E1D5                 jmp     loc_E0B0
.text:000000000000E1DA ; ---------------------------------------------------------------------------
.text:000000000000E1DA
.text:000000000000E1DA loc_E1DA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000E1DA                 mov     rdx, [rdi+8]
.text:000000000000E1DE                 lea     r11, [rdx+8]
.text:000000000000E1E2                 mov     [rdi+8], r11
.text:000000000000E1E6                 jmp     loc_E149
.text:000000000000E1EB ; ---------------------------------------------------------------------------
.text:000000000000E1EB
.text:000000000000E1EB loc_E1EB:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000E1EB                 mov     rdx, [rdi+8]
.text:000000000000E1EF                 lea     r11, [rdx+8]
.text:000000000000E1F3                 mov     [rdi+8], r11
.text:000000000000E1F7                 jmp     loc_E16F
.text:000000000000E1FC ; ---------------------------------------------------------------------------
.text:000000000000E1FC
.text:000000000000E1FC loc_E1FC:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000E1FC                 mov     rdx, [rdi+8]
.text:000000000000E200                 lea     r11, [rdx+8]
.text:000000000000E204                 mov     [rdi+8], r11
.text:000000000000E208                 jmp     short loc_E1C7
.text:000000000000E20A ; ---------------------------------------------------------------------------
.text:000000000000E20A
.text:000000000000E20A loc_E20A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000E20A                 mov     rdx, [rdi+8]
.text:000000000000E20E                 lea     r11, [rdx+8]
.text:000000000000E212                 mov     [rdi+8], r11
.text:000000000000E216                 jmp     loc_E0E1
.text:000000000000E21B ; ---------------------------------------------------------------------------
.text:000000000000E21B
.text:000000000000E21B loc_E21B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000E21B                 mov     rdx, [rdi+8]
.text:000000000000E21F                 lea     r11, [rdx+8]
.text:000000000000E223                 mov     [rdi+8], r11
.text:000000000000E227                 jmp     loc_E127
.text:000000000000E22C ; ---------------------------------------------------------------------------
.text:000000000000E22C
.text:000000000000E22C loc_E22C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000E22C                 mov     rdx, [rdi+8]
.text:000000000000E230                 lea     r11, [rdx+8]
.text:000000000000E234                 mov     [rdi+8], r11
.text:000000000000E238                 jmp     loc_E105
.text:000000000000E23D ; ---------------------------------------------------------------------------
.text:000000000000E23D
.text:000000000000E23D loc_E23D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000E23D                 mov     rdx, [rdi+8]
.text:000000000000E241                 lea     r11, [rdx+8]
.text:000000000000E245                 mov     [rdi+8], r11
.text:000000000000E249                 jmp     loc_E1A2
.text:000000000000E249 ; } // starts at E050
.text:000000000000E249 printf_fetchargs endp
.text:000000000000E249
.text:000000000000E249 ; ---------------------------------------------------------------------------
.text:000000000000E24E                 align 10h
.text:000000000000E250 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:000000000000E250 ; Format      : ELF64 for x86-64 (Relocatable)
.text:000000000000E250 ;
.text:000000000000E250 ; Source File : 'printf-parse.c'
.text:000000000000E250
.text:000000000000E250 ; =============== S U B R O U T I N E =======================================
.text:000000000000E250
.text:000000000000E250 ; Attributes: info_from_lumina
.text:000000000000E250
.text:000000000000E250 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:000000000000E250                 public printf_parse
.text:000000000000E250 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:000000000000E250
.text:000000000000E250 src             = qword ptr -80h
.text:000000000000E250 var_78          = qword ptr -78h
.text:000000000000E250 var_70          = qword ptr -70h
.text:000000000000E250 var_68          = qword ptr -68h
.text:000000000000E250 var_60          = qword ptr -60h
.text:000000000000E250 var_58          = qword ptr -58h
.text:000000000000E250 var_50          = qword ptr -50h
.text:000000000000E250 var_48          = qword ptr -48h
.text:000000000000E250 var_40          = qword ptr -40h
.text:000000000000E250
.text:000000000000E250 ; __unwind {
.text:000000000000E250                 push    r15
.text:000000000000E252                 push    r14
.text:000000000000E254                 lea     rcx, [rsi+20h]
.text:000000000000E258                 push    r13
.text:000000000000E25A                 push    r12
.text:000000000000E25C                 lea     rax, [rdx+10h]
.text:000000000000E260                 push    rbp
.text:000000000000E261                 push    rbx
.text:000000000000E262                 mov     r14, rsi
.text:000000000000E265                 mov     r15, rdx
.text:000000000000E268                 xor     ebx, ebx
.text:000000000000E26A                 mov     r9d, 7
.text:000000000000E270                 sub     rsp, 58h
.text:000000000000E274                 mov     r10d, 7
.text:000000000000E27A                 mov     qword ptr [rsi], 0
.text:000000000000E281                 mov     [rsi+8], rcx
.text:000000000000E285                 mov     [rsp+88h+var_60], rcx
.text:000000000000E28A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000E291                 mov     qword ptr [rdx], 0
.text:000000000000E298                 mov     [rsp+88h+src], rax
.text:000000000000E29D                 mov     [rdx+8], rax
.text:000000000000E2A1                 mov     [rsp+88h+var_70], 0
.text:000000000000E2AA                 mov     [rsp+88h+var_78], 0
.text:000000000000E2B3                 mov     [rsp+88h+var_68], 0
.text:000000000000E2BC                 jmp     short loc_E2CB
.text:000000000000E2BC ; ---------------------------------------------------------------------------
.text:000000000000E2BE                 align 20h
.text:000000000000E2C0
.text:000000000000E2C0 loc_E2C0:                               ; CODE XREF: printf_parse+80↓j
.text:000000000000E2C0                 cmp     al, 25h ; '%'
.text:000000000000E2C2                 lea     rbp, [rdi+1]
.text:000000000000E2C6                 jz      short loc_E308
.text:000000000000E2C8
.text:000000000000E2C8 loc_E2C8:                               ; CODE XREF: printf_parse+35B↓j
.text:000000000000E2C8                                         ; printf_parse+364↓j
.text:000000000000E2C8                 mov     rdi, rbp
.text:000000000000E2CB
.text:000000000000E2CB loc_E2CB:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000E2CB                 movzx   eax, byte ptr [rdi]
.text:000000000000E2CE                 test    al, al
.text:000000000000E2D0                 jnz     short loc_E2C0
.text:000000000000E2D2                 lea     rax, [rbx+rbx*4]
.text:000000000000E2D6                 lea     rax, [rbx+rax*2]
.text:000000000000E2DA                 mov     [rcx+rax*8], rdi
.text:000000000000E2DE                 mov     rax, [rsp+88h+var_78]
.text:000000000000E2E3                 mov     [r14+10h], rax
.text:000000000000E2E7                 mov     rax, [rsp+88h+var_70]
.text:000000000000E2EC                 mov     [r14+18h], rax
.text:000000000000E2F0                 xor     eax, eax
.text:000000000000E2F2
.text:000000000000E2F2 loc_E2F2:                               ; CODE XREF: printf_parse+87E↓j
.text:000000000000E2F2                                         ; printf_parse+B1C↓j
.text:000000000000E2F2                 add     rsp, 58h
.text:000000000000E2F6                 pop     rbx
.text:000000000000E2F7                 pop     rbp
.text:000000000000E2F8                 pop     r12
.text:000000000000E2FA                 pop     r13
.text:000000000000E2FC                 pop     r14
.text:000000000000E2FE                 pop     r15
.text:000000000000E300                 retn
.text:000000000000E300 ; ---------------------------------------------------------------------------
.text:000000000000E301                 align 8
.text:000000000000E308
.text:000000000000E308 loc_E308:                               ; CODE XREF: printf_parse+76↑j
.text:000000000000E308                 lea     rax, [rbx+rbx*4]
.text:000000000000E30C                 mov     r13, r8
.text:000000000000E30F                 lea     rax, [rbx+rax*2]
.text:000000000000E313                 lea     r12, [rcx+rax*8]
.text:000000000000E317                 mov     [r12], rdi
.text:000000000000E31B                 mov     dword ptr [r12+10h], 0
.text:000000000000E324                 mov     qword ptr [r12+18h], 0
.text:000000000000E32D                 mov     qword ptr [r12+20h], 0
.text:000000000000E336                 mov     [r12+28h], r8
.text:000000000000E33B                 mov     qword ptr [r12+30h], 0
.text:000000000000E344                 mov     qword ptr [r12+38h], 0
.text:000000000000E34D                 mov     [r12+40h], r8
.text:000000000000E352                 mov     [r12+50h], r8
.text:000000000000E357                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000E35B                 lea     eax, [rbx-30h]
.text:000000000000E35E                 cmp     al, 9
.text:000000000000E360                 ja      short loc_E39E
.text:000000000000E362                 jmp     loc_E79A
.text:000000000000E362 ; ---------------------------------------------------------------------------
.text:000000000000E367                 align 10h
.text:000000000000E370
.text:000000000000E370 loc_E370:                               ; CODE XREF: printf_parse+158↓j
.text:000000000000E370                 cmp     bl, 2Dh ; '-'
.text:000000000000E373                 jz      short loc_E3B8
.text:000000000000E375                 cmp     bl, 2Bh ; '+'
.text:000000000000E378                 jz      short loc_E3C0
.text:000000000000E37A                 cmp     bl, 20h ; ' '
.text:000000000000E37D                 jz      short loc_E3D0
.text:000000000000E37F                 cmp     bl, 23h ; '#'
.text:000000000000E382                 jz      short loc_E3E0
.text:000000000000E384                 cmp     bl, 30h ; '0'
.text:000000000000E387                 jz      short loc_E3F0
.text:000000000000E389                 cmp     bl, 49h ; 'I'
.text:000000000000E38C                 jnz     short loc_E400
.text:000000000000E38E                 or      dword ptr [r12+10h], 40h
.text:000000000000E394                 nop     dword ptr [rax+00h]
.text:000000000000E398
.text:000000000000E398 loc_E398:                               ; CODE XREF: printf_parse+160↓j
.text:000000000000E398                                         ; printf_parse+16E↓j ...
.text:000000000000E398                 movzx   ebx, byte ptr [rax]
.text:000000000000E39B                 mov     rbp, rax
.text:000000000000E39E
.text:000000000000E39E loc_E39E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000E39E                                         ; printf_parse+565↓j ...
.text:000000000000E39E                 lea     rax, [rbp+1]
.text:000000000000E3A2                 cmp     bl, 27h ; '''
.text:000000000000E3A5                 mov     rdx, rax
.text:000000000000E3A8                 jnz     short loc_E370
.text:000000000000E3AA                 or      dword ptr [r12+10h], 1
.text:000000000000E3B0                 jmp     short loc_E398
.text:000000000000E3B0 ; ---------------------------------------------------------------------------
.text:000000000000E3B2                 align 8
.text:000000000000E3B8
.text:000000000000E3B8 loc_E3B8:                               ; CODE XREF: printf_parse+123↑j
.text:000000000000E3B8                 or      dword ptr [r12+10h], 2
.text:000000000000E3BE                 jmp     short loc_E398
.text:000000000000E3C0 ; ---------------------------------------------------------------------------
.text:000000000000E3C0
.text:000000000000E3C0 loc_E3C0:                               ; CODE XREF: printf_parse+128↑j
.text:000000000000E3C0                 or      dword ptr [r12+10h], 4
.text:000000000000E3C6                 jmp     short loc_E398
.text:000000000000E3C6 ; ---------------------------------------------------------------------------
.text:000000000000E3C8                 align 10h
.text:000000000000E3D0
.text:000000000000E3D0 loc_E3D0:                               ; CODE XREF: printf_parse+12D↑j
.text:000000000000E3D0                 or      dword ptr [r12+10h], 8
.text:000000000000E3D6                 jmp     short loc_E398
.text:000000000000E3D6 ; ---------------------------------------------------------------------------
.text:000000000000E3D8                 align 20h
.text:000000000000E3E0
.text:000000000000E3E0 loc_E3E0:                               ; CODE XREF: printf_parse+132↑j
.text:000000000000E3E0                 or      dword ptr [r12+10h], 10h
.text:000000000000E3E6                 jmp     short loc_E398
.text:000000000000E3E6 ; ---------------------------------------------------------------------------
.text:000000000000E3E8                 align 10h
.text:000000000000E3F0
.text:000000000000E3F0 loc_E3F0:                               ; CODE XREF: printf_parse+137↑j
.text:000000000000E3F0                 or      dword ptr [r12+10h], 20h
.text:000000000000E3F6                 jmp     short loc_E398
.text:000000000000E3F6 ; ---------------------------------------------------------------------------
.text:000000000000E3F8                 align 20h
.text:000000000000E400
.text:000000000000E400 loc_E400:                               ; CODE XREF: printf_parse+13C↑j
.text:000000000000E400                 cmp     bl, 2Ah ; '*'
.text:000000000000E403                 jz      loc_E5B9
.text:000000000000E409                 lea     ecx, [rbx-30h]
.text:000000000000E40C                 cmp     cl, 9
.text:000000000000E40F                 jbe     loc_E827
.text:000000000000E415
.text:000000000000E415 loc_E415:                               ; CODE XREF: printf_parse+629↓j
.text:000000000000E415                                         ; printf_parse+96C↓j
.text:000000000000E415                 cmp     bl, 2Eh ; '.'
.text:000000000000E418                 jz      loc_E6EF
.text:000000000000E41E
.text:000000000000E41E loc_E41E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000E41E                                         ; printf_parse+545↓j ...
.text:000000000000E41E                 xor     eax, eax
.text:000000000000E420                 mov     esi, 1
.text:000000000000E425                 jmp     short loc_E457
.text:000000000000E425 ; ---------------------------------------------------------------------------
.text:000000000000E427                 align 10h
.text:000000000000E430
.text:000000000000E430 loc_E430:                               ; CODE XREF: printf_parse+20E↓j
.text:000000000000E430                 cmp     bl, 4Ch ; 'L'
.text:000000000000E433                 jz      short loc_E470
.text:000000000000E435                 cmp     bl, 6Ch ; 'l'
.text:000000000000E438                 jz      short loc_E450
.text:000000000000E43A                 cmp     bl, 6Ah ; 'j'
.text:000000000000E43D                 jz      short loc_E450
.text:000000000000E43F                 mov     edx, ebx
.text:000000000000E441                 and     edx, 0FFFFFFDFh
.text:000000000000E444                 cmp     dl, 5Ah ; 'Z'
.text:000000000000E447                 jz      short loc_E450
.text:000000000000E449                 cmp     bl, 74h ; 't'
.text:000000000000E44C                 jnz     short loc_E478
.text:000000000000E44E                 xchg    ax, ax
.text:000000000000E450
.text:000000000000E450 loc_E450:                               ; CODE XREF: printf_parse+1E8↑j
.text:000000000000E450                                         ; printf_parse+1ED↑j ...
.text:000000000000E450                 add     eax, 8
.text:000000000000E453
.text:000000000000E453 loc_E453:                               ; CODE XREF: printf_parse+21B↓j
.text:000000000000E453                                         ; printf_parse+223↓j
.text:000000000000E453                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000E457
.text:000000000000E457 loc_E457:                               ; CODE XREF: printf_parse+1D5↑j
.text:000000000000E457                 add     rbp, 1
.text:000000000000E45B                 cmp     bl, 68h ; 'h'
.text:000000000000E45E                 jnz     short loc_E430
.text:000000000000E460                 mov     ecx, eax
.text:000000000000E462                 mov     edx, esi
.text:000000000000E464                 and     ecx, 1
.text:000000000000E467                 shl     edx, cl
.text:000000000000E469                 or      eax, edx
.text:000000000000E46B                 jmp     short loc_E453
.text:000000000000E46B ; ---------------------------------------------------------------------------
.text:000000000000E46D                 align 10h
.text:000000000000E470
.text:000000000000E470 loc_E470:                               ; CODE XREF: printf_parse+1E3↑j
.text:000000000000E470                 or      eax, 4
.text:000000000000E473                 jmp     short loc_E453
.text:000000000000E473 ; ---------------------------------------------------------------------------
.text:000000000000E475                 align 8
.text:000000000000E478
.text:000000000000E478 loc_E478:                               ; CODE XREF: printf_parse+1FC↑j
.text:000000000000E478                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000E47B                 cmp     dl, 53h
.text:000000000000E47E                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000E484                 lea     rcx, jpt_E495
.text:000000000000E48B                 movzx   edx, dl
.text:000000000000E48E                 movsxd  rdx, ds:(jpt_E495 - 10D6Ch)[rcx+rdx*4]
.text:000000000000E492                 add     rdx, rcx
.text:000000000000E495                 jmp     rdx             ; switch jump
.text:000000000000E497 ; ---------------------------------------------------------------------------
.text:000000000000E497
.text:000000000000E497 loc_E497:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000E497                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000E497                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000E49D                 mov     ebx, 73h ; 's'
.text:000000000000E4A2                 nop     word ptr [rax+rax+00h]
.text:000000000000E4A8
.text:000000000000E4A8 loc_E4A8:                               ; CODE XREF: printf_parse+705↓j
.text:000000000000E4A8                                         ; printf_parse+70D↓j ...
.text:000000000000E4A8                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000E4AC                 jz      loc_EB67
.text:000000000000E4B2                 mov     [r12+50h], r13
.text:000000000000E4B7
.text:000000000000E4B7 loc_E4B7:                               ; CODE XREF: printf_parse+939↓j
.text:000000000000E4B7                 cmp     r9, r13
.text:000000000000E4BA                 mov     rcx, [r15+8]
.text:000000000000E4BE                 jbe     loc_EAE0
.text:000000000000E4C4
.text:000000000000E4C4 loc_E4C4:                               ; CODE XREF: printf_parse+912↓j
.text:000000000000E4C4                 mov     rax, [r15]
.text:000000000000E4C7                 mov     rdx, rax
.text:000000000000E4CA                 shl     rdx, 5
.text:000000000000E4CE                 add     rdx, rcx
.text:000000000000E4D1                 cmp     rax, r13
.text:000000000000E4D4                 ja      short loc_E4F6
.text:000000000000E4D6                 db      2Eh
.text:000000000000E4D6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E4E0
.text:000000000000E4E0 loc_E4E0:                               ; CODE XREF: printf_parse+2A1↓j
.text:000000000000E4E0                 add     rax, 1
.text:000000000000E4E4                 mov     dword ptr [rdx], 0
.text:000000000000E4EA                 add     rdx, 20h ; ' '
.text:000000000000E4EE                 cmp     rax, r13
.text:000000000000E4F1                 jbe     short loc_E4E0
.text:000000000000E4F3                 mov     [r15], rax
.text:000000000000E4F6
.text:000000000000E4F6 loc_E4F6:                               ; CODE XREF: printf_parse+284↑j
.text:000000000000E4F6                 shl     r13, 5
.text:000000000000E4FA                 lea     rax, [rcx+r13]
.text:000000000000E4FE                 mov     edx, [rax]
.text:000000000000E500                 test    edx, edx
.text:000000000000E502                 jnz     loc_EAD3
.text:000000000000E508                 mov     [rax], r11d
.text:000000000000E50B
.text:000000000000E50B loc_E50B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000E50B                                         ; printf_parse+886↓j
.text:000000000000E50B                                         ; DATA XREF: ...
.text:000000000000E50B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:000000000000E510                 mov     rax, [r14]
.text:000000000000E513                 mov     [r12+8], rbp
.text:000000000000E518                 lea     rbx, [rax+1]
.text:000000000000E51C                 cmp     r10, rbx
.text:000000000000E51F                 mov     [r14], rbx
.text:000000000000E522                 ja      loc_E5B0
.text:000000000000E528                 test    r10, r10
.text:000000000000E52B                 js      loc_EED7
.text:000000000000E531                 add     r10, r10
.text:000000000000E534                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000E53E                 cmp     r10, rax
.text:000000000000E541                 ja      loc_EED7
.text:000000000000E547                 lea     rax, [r10+r10*4]
.text:000000000000E54B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000E54F                 cmp     [rsp+88h+var_60], rdi
.text:000000000000E554                 mov     [rsp+88h+var_48], r9
.text:000000000000E559                 mov     [rsp+88h+var_50], r10
.text:000000000000E55E                 lea     rax, [r10+rax*2]
.text:000000000000E562                 mov     [rsp+88h+var_58], r8
.text:000000000000E567                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000E56F                 jz      loc_EC2D
.text:000000000000E575                 call    _realloc        ; PIC mode
.text:000000000000E57A                 test    rax, rax
.text:000000000000E57D                 mov     rcx, rax
.text:000000000000E580                 mov     r8, [rsp+88h+var_58]
.text:000000000000E585                 mov     r10, [rsp+88h+var_50]
.text:000000000000E58A                 mov     r9, [rsp+88h+var_48]
.text:000000000000E58F                 jz      loc_EED7
.text:000000000000E595                 mov     rax, [rsp+88h+var_60]
.text:000000000000E59A                 cmp     rax, [r14+8]
.text:000000000000E59E                 mov     rbx, [r14]
.text:000000000000E5A1                 jz      loc_EC50
.text:000000000000E5A7
.text:000000000000E5A7 loc_E5A7:                               ; CODE XREF: printf_parse+A3D↓j
.text:000000000000E5A7                 mov     [r14+8], rcx
.text:000000000000E5AB                 jmp     loc_E2C8
.text:000000000000E5B0 ; ---------------------------------------------------------------------------
.text:000000000000E5B0
.text:000000000000E5B0 loc_E5B0:                               ; CODE XREF: printf_parse+2D2↑j
.text:000000000000E5B0                 mov     rcx, [r14+8]
.text:000000000000E5B4                 jmp     loc_E2C8
.text:000000000000E5B9 ; ---------------------------------------------------------------------------
.text:000000000000E5B9
.text:000000000000E5B9 loc_E5B9:                               ; CODE XREF: printf_parse+1B3↑j
.text:000000000000E5B9                 mov     rsi, [rsp+88h+var_78]
.text:000000000000E5BE                 mov     ecx, 1
.text:000000000000E5C3                 mov     [r12+18h], rbp
.text:000000000000E5C8                 mov     [r12+20h], rax
.text:000000000000E5CD                 test    rsi, rsi
.text:000000000000E5D0                 cmovnz  rcx, rsi
.text:000000000000E5D4                 mov     [rsp+88h+var_78], rcx
.text:000000000000E5D9                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000E5DD                 lea     esi, [rcx-30h]
.text:000000000000E5E0                 cmp     sil, 9
.text:000000000000E5E4                 jbe     loc_E8C5
.text:000000000000E5EA
.text:000000000000E5EA loc_E5EA:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000E5EA                 mov     rsi, [rsp+88h+var_68]
.text:000000000000E5EF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000E5F3                 lea     rdx, [rsi+1]
.text:000000000000E5F7                 mov     [r12+28h], rsi
.text:000000000000E5FC                 jz      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000E602                 mov     rbx, [rsp+88h+var_68]
.text:000000000000E607                 mov     rbp, rax
.text:000000000000E60A                 mov     [rsp+88h+var_68], rdx
.text:000000000000E60F
.text:000000000000E60F loc_E60F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000E60F                 cmp     r9, rbx
.text:000000000000E612                 mov     rcx, [r15+8]
.text:000000000000E616                 ja      loc_EC92
.text:000000000000E61C                 add     r9, r9
.text:000000000000E61F                 lea     rax, [rbx+1]
.text:000000000000E623                 cmp     r9, rbx
.text:000000000000E626                 cmovbe  r9, rax
.text:000000000000E62A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000E634                 cmp     r9, rax
.text:000000000000E637                 ja      loc_EEDB
.text:000000000000E63D                 mov     rsi, r9
.text:000000000000E640                 mov     [rsp+88h+var_48], r9
.text:000000000000E645                 mov     [rsp+88h+var_50], r10
.text:000000000000E64A                 shl     rsi, 5          ; size
.text:000000000000E64E                 cmp     [rsp+88h+src], rcx
.text:000000000000E653                 mov     [rsp+88h+var_58], r8
.text:000000000000E658                 jz      loc_ED71
.text:000000000000E65E                 mov     rdi, rcx        ; ptr
.text:000000000000E661                 call    _realloc        ; PIC mode
.text:000000000000E666                 mov     rdx, [r15+8]
.text:000000000000E66A                 mov     r8, [rsp+88h+var_58]
.text:000000000000E66F                 mov     rcx, rax
.text:000000000000E672                 mov     r10, [rsp+88h+var_50]
.text:000000000000E677                 mov     r9, [rsp+88h+var_48]
.text:000000000000E67C
.text:000000000000E67C loc_E67C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000E67C                 test    rcx, rcx
.text:000000000000E67F                 jz      loc_EF37
.text:000000000000E685                 cmp     [rsp+88h+src], rdx
.text:000000000000E68A                 mov     rax, [r15]
.text:000000000000E68D                 jz      loc_EE4B
.text:000000000000E693
.text:000000000000E693 loc_E693:                               ; CODE XREF: printf_parse+C33↓j
.text:000000000000E693                 mov     [r15+8], rcx
.text:000000000000E697
.text:000000000000E697 loc_E697:                               ; CODE XREF: printf_parse+A45↓j
.text:000000000000E697                 mov     rdx, rax
.text:000000000000E69A                 shl     rdx, 5
.text:000000000000E69E                 add     rdx, rcx
.text:000000000000E6A1                 cmp     rax, rbx
.text:000000000000E6A4                 ja      short loc_E6C6
.text:000000000000E6A6                 db      2Eh
.text:000000000000E6A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E6B0
.text:000000000000E6B0 loc_E6B0:                               ; CODE XREF: printf_parse+471↓j
.text:000000000000E6B0                 add     rax, 1
.text:000000000000E6B4                 mov     dword ptr [rdx], 0
.text:000000000000E6BA                 add     rdx, 20h ; ' '
.text:000000000000E6BE                 cmp     rax, rbx
.text:000000000000E6C1                 jbe     short loc_E6B0
.text:000000000000E6C3                 mov     [r15], rax
.text:000000000000E6C6
.text:000000000000E6C6 loc_E6C6:                               ; CODE XREF: printf_parse+454↑j
.text:000000000000E6C6                 shl     rbx, 5
.text:000000000000E6CA                 lea     rax, [rcx+rbx]
.text:000000000000E6CE                 mov     edx, [rax]
.text:000000000000E6D0                 test    edx, edx
.text:000000000000E6D2                 jnz     loc_EBAB
.text:000000000000E6D8                 mov     dword ptr [rax], 5
.text:000000000000E6DE                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000E6E2                 lea     rdx, [rbp+1]
.text:000000000000E6E6                 cmp     bl, 2Eh ; '.'
.text:000000000000E6E9                 jnz     loc_E41E
.text:000000000000E6EF
.text:000000000000E6EF loc_E6EF:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000E6EF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:000000000000E6F3                 mov     [r12+30h], rbp
.text:000000000000E6F8                 jnz     loc_E87E
.text:000000000000E6FE                 mov     rsi, [rsp+88h+var_70]
.text:000000000000E703                 lea     r11, [rbp+2]
.text:000000000000E707                 mov     eax, 2
.text:000000000000E70C                 mov     [r12+38h], r11
.text:000000000000E711                 cmp     rsi, 2
.text:000000000000E715                 cmovnb  rax, rsi
.text:000000000000E719                 mov     [rsp+88h+var_70], rax
.text:000000000000E71E                 movsx   eax, byte ptr [rbp+2]
.text:000000000000E722                 lea     edx, [rax-30h]
.text:000000000000E725                 cmp     dl, 9
.text:000000000000E728                 jbe     loc_EDBC
.text:000000000000E72E
.text:000000000000E72E loc_E72E:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000E72E                 mov     rbx, [r12+40h]
.text:000000000000E733                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E737                 jz      loc_ED95
.text:000000000000E73D
.text:000000000000E73D loc_E73D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000E73D                                         ; printf_parse+C59↓j
.text:000000000000E73D                 cmp     r9, rbx
.text:000000000000E740                 mov     rcx, [r15+8]
.text:000000000000E744                 jbe     loc_ECAF
.text:000000000000E74A                 mov     rax, [r15]
.text:000000000000E74D
.text:000000000000E74D loc_E74D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000E74D                 mov     rdx, rax
.text:000000000000E750                 shl     rdx, 5
.text:000000000000E754                 add     rdx, rcx
.text:000000000000E757                 cmp     rax, rbx
.text:000000000000E75A                 ja      short loc_E776
.text:000000000000E75C                 nop     dword ptr [rax+00h]
.text:000000000000E760
.text:000000000000E760 loc_E760:                               ; CODE XREF: printf_parse+521↓j
.text:000000000000E760                 add     rax, 1
.text:000000000000E764                 mov     dword ptr [rdx], 0
.text:000000000000E76A                 add     rdx, 20h ; ' '
.text:000000000000E76E                 cmp     rax, rbx
.text:000000000000E771                 jbe     short loc_E760
.text:000000000000E773                 mov     [r15], rax
.text:000000000000E776
.text:000000000000E776 loc_E776:                               ; CODE XREF: printf_parse+50A↑j
.text:000000000000E776                 shl     rbx, 5
.text:000000000000E77A                 lea     rax, [rcx+rbx]
.text:000000000000E77E                 mov     edx, [rax]
.text:000000000000E780                 test    edx, edx
.text:000000000000E782                 jnz     loc_EC9A
.text:000000000000E788                 mov     dword ptr [rax], 5
.text:000000000000E78E                 mov     rbp, r11
.text:000000000000E791                 movzx   ebx, byte ptr [r11]
.text:000000000000E795                 jmp     loc_E41E
.text:000000000000E79A ; ---------------------------------------------------------------------------
.text:000000000000E79A
.text:000000000000E79A loc_E79A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000E79A                 mov     rax, rbp
.text:000000000000E79D                 nop     dword ptr [rax]
.text:000000000000E7A0
.text:000000000000E7A0 loc_E7A0:                               ; CODE XREF: printf_parse+55D↓j
.text:000000000000E7A0                 add     rax, 1
.text:000000000000E7A4                 movzx   edx, byte ptr [rax]
.text:000000000000E7A7                 lea     ecx, [rdx-30h]
.text:000000000000E7AA                 cmp     cl, 9
.text:000000000000E7AD                 jbe     short loc_E7A0
.text:000000000000E7AF                 cmp     dl, 24h ; '$'
.text:000000000000E7B2                 mov     r13, r8
.text:000000000000E7B5                 jnz     loc_E39E
.text:000000000000E7BB                 xor     edx, edx
.text:000000000000E7BD
.text:000000000000E7BD loc_E7BD:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000E7BD                 movsx   eax, bl
.text:000000000000E7C0                 mov     rdi, 1999999999999999h
.text:000000000000E7CA                 mov     rsi, r8
.text:000000000000E7CD                 sub     eax, 30h ; '0'
.text:000000000000E7D0                 cmp     rdx, rdi
.text:000000000000E7D3                 cdqe
.text:000000000000E7D5                 ja      short loc_E7DE
.text:000000000000E7D7                 lea     rsi, [rdx+rdx*4]
.text:000000000000E7DB                 add     rsi, rsi
.text:000000000000E7DE
.text:000000000000E7DE loc_E7DE:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000E7DE                 mov     rcx, rbp
.text:000000000000E7E1
.text:000000000000E7E1 loc_E7E1:                               ; CODE XREF: printf_parse+956↓j
.text:000000000000E7E1                 add     rax, rsi
.text:000000000000E7E4                 movzx   ebx, byte ptr [rbp+1]
.text:000000000000E7E8                 setb    sil
.text:000000000000E7EC                 add     rbp, 1
.text:000000000000E7F0                 mov     rdx, rax
.text:000000000000E7F3                 movzx   esi, sil
.text:000000000000E7F7                 test    rsi, rsi
.text:000000000000E7FA                 lea     edi, [rbx-30h]
.text:000000000000E7FD                 jnz     loc_EB8E
.text:000000000000E803                 cmp     dil, 9
.text:000000000000E807                 jbe     short loc_E7BD
.text:000000000000E809                 mov     r13, rax
.text:000000000000E80C                 sub     r13, 1
.text:000000000000E810                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:000000000000E814                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000E81A                 lea     rbp, [rcx+2]
.text:000000000000E81E                 movzx   ebx, byte ptr [rcx+2]
.text:000000000000E822                 jmp     loc_E39E
.text:000000000000E827 ; ---------------------------------------------------------------------------
.text:000000000000E827
.text:000000000000E827 loc_E827:                               ; CODE XREF: printf_parse+1BF↑j
.text:000000000000E827                 mov     [r12+18h], rbp
.text:000000000000E82C                 movzx   edi, byte ptr [rbp+0]
.text:000000000000E830                 mov     rsi, rbp
.text:000000000000E833                 lea     ecx, [rdi-30h]
.text:000000000000E836                 cmp     cl, 9
.text:000000000000E839                 jbe     short loc_E847
.text:000000000000E83B                 jmp     short loc_E870
.text:000000000000E83B ; ---------------------------------------------------------------------------
.text:000000000000E83D                 align 20h
.text:000000000000E840
.text:000000000000E840 loc_E840:                               ; CODE XREF: printf_parse+600↓j
.text:000000000000E840                 mov     rbp, rax
.text:000000000000E843                 add     rax, 1
.text:000000000000E847
.text:000000000000E847 loc_E847:                               ; CODE XREF: printf_parse+5E9↑j
.text:000000000000E847                 movzx   edi, byte ptr [rax]
.text:000000000000E84A                 lea     edx, [rdi-30h]
.text:000000000000E84D                 cmp     dl, 9
.text:000000000000E850                 jbe     short loc_E840
.text:000000000000E852                 mov     rcx, rax
.text:000000000000E855                 lea     rdx, [rbp+2]
.text:000000000000E859                 mov     rbp, rax
.text:000000000000E85C                 sub     rcx, rsi
.text:000000000000E85F                 mov     rsi, [rsp+88h+var_78]
.text:000000000000E864                 cmp     rsi, rcx
.text:000000000000E867                 cmovnb  rcx, rsi
.text:000000000000E86B                 mov     [rsp+88h+var_78], rcx
.text:000000000000E870
.text:000000000000E870 loc_E870:                               ; CODE XREF: printf_parse+5EB↑j
.text:000000000000E870                 mov     [r12+20h], rbp
.text:000000000000E875                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000E879                 jmp     loc_E415
.text:000000000000E87E ; ---------------------------------------------------------------------------
.text:000000000000E87E
.text:000000000000E87E loc_E87E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000E87E                 movzx   eax, byte ptr [rbp+1]
.text:000000000000E882                 sub     eax, 30h ; '0'
.text:000000000000E885                 cmp     al, 9
.text:000000000000E887                 ja      short loc_E89E
.text:000000000000E889                 nop     dword ptr [rax+00000000h]
.text:000000000000E890
.text:000000000000E890 loc_E890:                               ; CODE XREF: printf_parse+64C↓j
.text:000000000000E890                 add     rdx, 1
.text:000000000000E894                 movzx   eax, byte ptr [rdx]
.text:000000000000E897                 sub     eax, 30h ; '0'
.text:000000000000E89A                 cmp     al, 9
.text:000000000000E89C                 jbe     short loc_E890
.text:000000000000E89E
.text:000000000000E89E loc_E89E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000E89E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000E8A3                 mov     rax, rdx
.text:000000000000E8A6                 mov     [r12+38h], rdx
.text:000000000000E8AB                 sub     rax, rbp
.text:000000000000E8AE                 movzx   ebx, byte ptr [rdx]
.text:000000000000E8B1                 mov     rbp, rdx
.text:000000000000E8B4                 cmp     rsi, rax
.text:000000000000E8B7                 cmovnb  rax, rsi
.text:000000000000E8BB                 mov     [rsp+88h+var_70], rax
.text:000000000000E8C0                 jmp     loc_E41E
.text:000000000000E8C5 ; ---------------------------------------------------------------------------
.text:000000000000E8C5
.text:000000000000E8C5 loc_E8C5:                               ; CODE XREF: printf_parse+394↑j
.text:000000000000E8C5                 mov     rsi, rax
.text:000000000000E8C8
.text:000000000000E8C8 loc_E8C8:                               ; CODE XREF: printf_parse+687↓j
.text:000000000000E8C8                 add     rsi, 1
.text:000000000000E8CC                 movzx   edi, byte ptr [rsi]
.text:000000000000E8CF                 lea     r11d, [rdi-30h]
.text:000000000000E8D3                 cmp     r11b, 9
.text:000000000000E8D7                 jbe     short loc_E8C8
.text:000000000000E8D9                 cmp     dil, 24h ; '$'
.text:000000000000E8DD                 jnz     loc_E5EA
.text:000000000000E8E3                 xor     esi, esi
.text:000000000000E8E5
.text:000000000000E8E5 loc_E8E5:                               ; CODE XREF: printf_parse+6DE↓j
.text:000000000000E8E5                 movsx   eax, cl
.text:000000000000E8E8                 mov     rdi, 1999999999999999h
.text:000000000000E8F2                 mov     rcx, r8
.text:000000000000E8F5                 sub     eax, 30h ; '0'
.text:000000000000E8F8                 cmp     rsi, rdi
.text:000000000000E8FB                 cdqe
.text:000000000000E8FD                 ja      short loc_E906
.text:000000000000E8FF                 lea     rcx, [rsi+rsi*4]
.text:000000000000E903                 add     rcx, rcx
.text:000000000000E906
.text:000000000000E906 loc_E906:                               ; CODE XREF: printf_parse+6AD↑j
.text:000000000000E906                 mov     rbp, rdx
.text:000000000000E909
.text:000000000000E909 loc_E909:                               ; CODE XREF: printf_parse+BF6↓j
.text:000000000000E909                 xor     r11d, r11d
.text:000000000000E90C                 add     rax, rcx
.text:000000000000E90F                 movzx   ecx, byte ptr [rdx+1]
.text:000000000000E913                 setb    r11b
.text:000000000000E917                 add     rdx, 1
.text:000000000000E91B                 mov     rsi, rax
.text:000000000000E91E                 test    r11, r11
.text:000000000000E921                 lea     edi, [rcx-30h]
.text:000000000000E924                 jnz     loc_EE2E
.text:000000000000E92A                 cmp     dil, 9
.text:000000000000E92E                 jbe     short loc_E8E5
.text:000000000000E930                 lea     rbx, [rax-1]
.text:000000000000E934                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000E938                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000E93E                 mov     [r12+28h], rbx
.text:000000000000E943                 add     rbp, 2
.text:000000000000E947                 jmp     loc_E60F
.text:000000000000E94C ; ---------------------------------------------------------------------------
.text:000000000000E94C
.text:000000000000E94C loc_E94C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000E94C                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000E94C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000E94F                 mov     r11d, 16h
.text:000000000000E955                 jg      loc_E4A8
.text:000000000000E95B                 test    al, 4
.text:000000000000E95D                 jnz     loc_E4A8
.text:000000000000E963                 cmp     eax, 7
.text:000000000000E966                 mov     r11d, 15h
.text:000000000000E96C                 jg      loc_E4A8
.text:000000000000E972                 test    al, 2
.text:000000000000E974                 mov     r11d, 12h
.text:000000000000E97A                 jnz     loc_E4A8
.text:000000000000E980                 xor     r11d, r11d
.text:000000000000E983                 test    al, 1
.text:000000000000E985                 setz    r11b
.text:000000000000E989                 add     r11d, 13h
.text:000000000000E98D                 jmp     loc_E4A8
.text:000000000000E98D ; ---------------------------------------------------------------------------
.text:000000000000E992                 align 8
.text:000000000000E998
.text:000000000000E998 loc_E998:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000E998                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000E998                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000E99B                 cmp     eax, 7
.text:000000000000E99E                 setnle  r11b
.text:000000000000E9A2                 add     r11d, 0Dh
.text:000000000000E9A6                 jmp     loc_E4A8
.text:000000000000E9AB ; ---------------------------------------------------------------------------
.text:000000000000E9AB
.text:000000000000E9AB loc_E9AB:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000E9AB                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000E9AB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000E9AE                 mov     r11d, 9
.text:000000000000E9B4                 jg      loc_E4A8
.text:000000000000E9BA                 test    al, 4
.text:000000000000E9BC                 jnz     loc_E4A8
.text:000000000000E9C2                 cmp     eax, 7
.text:000000000000E9C5                 mov     r11d, 7
.text:000000000000E9CB                 jg      loc_E4A8
.text:000000000000E9D1                 test    al, 2
.text:000000000000E9D3                 mov     r11d, 1
.text:000000000000E9D9                 jnz     loc_E4A8
.text:000000000000E9DF                 and     eax, 1
.text:000000000000E9E2                 cmp     eax, 1
.text:000000000000E9E5                 sbb     r11d, r11d
.text:000000000000E9E8                 and     r11d, 2
.text:000000000000E9EC                 add     r11d, 3
.text:000000000000E9F0                 jmp     loc_E4A8
.text:000000000000E9F0 ; ---------------------------------------------------------------------------
.text:000000000000E9F5                 align 8
.text:000000000000E9F8
.text:000000000000E9F8 loc_E9F8:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000E9F8                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000E9F8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000E9FB                 cmp     eax, 7
.text:000000000000E9FE                 setnle  r11b
.text:000000000000EA02                 add     r11d, 0Fh
.text:000000000000EA06                 jmp     loc_E4A8
.text:000000000000EA0B ; ---------------------------------------------------------------------------
.text:000000000000EA0B
.text:000000000000EA0B loc_EA0B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000EA0B                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000EA0B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000EA0E                 mov     r11d, 0Ch
.text:000000000000EA14                 jg      loc_E4A8
.text:000000000000EA1A                 xor     r11d, r11d
.text:000000000000EA1D                 test    al, 4
.text:000000000000EA1F                 setnz   r11b
.text:000000000000EA23                 add     r11d, 0Bh
.text:000000000000EA27                 jmp     loc_E4A8
.text:000000000000EA2C ; ---------------------------------------------------------------------------
.text:000000000000EA2C
.text:000000000000EA2C loc_EA2C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000EA2C                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000EA2C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:000000000000EA32                 mov     ebx, 63h ; 'c'
.text:000000000000EA37                 jmp     loc_E4A8
.text:000000000000EA3C ; ---------------------------------------------------------------------------
.text:000000000000EA3C
.text:000000000000EA3C loc_EA3C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000EA3C                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000EA3C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000EA3F                 mov     r11d, 0Ah
.text:000000000000EA45                 jg      loc_E4A8
.text:000000000000EA4B                 test    al, 4
.text:000000000000EA4D                 jnz     loc_E4A8
.text:000000000000EA53                 cmp     eax, 7
.text:000000000000EA56                 mov     r11d, 8
.text:000000000000EA5C                 jg      loc_E4A8
.text:000000000000EA62                 test    al, 2
.text:000000000000EA64                 mov     r11d, 2
.text:000000000000EA6A                 jnz     loc_E4A8
.text:000000000000EA70                 and     eax, 1
.text:000000000000EA73                 cmp     eax, 1
.text:000000000000EA76                 sbb     r11d, r11d
.text:000000000000EA79                 and     r11d, 2
.text:000000000000EA7D                 add     r11d, 4
.text:000000000000EA81                 jmp     loc_E4A8
.text:000000000000EA81 ; ---------------------------------------------------------------------------
.text:000000000000EA86                 align 10h
.text:000000000000EA90
.text:000000000000EA90 loc_EA90:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000EA90                                         ; DATA XREF: .rodata:jpt_E495↓o
.text:000000000000EA90                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:000000000000EA96                 jmp     loc_E4A8
.text:000000000000EA9B ; ---------------------------------------------------------------------------
.text:000000000000EA9B
.text:000000000000EA9B def_E495:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000EA9B                                         ; printf_parse+245↑j ...
.text:000000000000EA9B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EA9F
.text:000000000000EA9F loc_EA9F:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000EA9F                                         ; printf_parse+95E↓j ...
.text:000000000000EA9F                 cmp     [rsp+88h+src], rcx
.text:000000000000EAA4                 jz      short loc_EAAE
.text:000000000000EAA6                 mov     rdi, rcx        ; ptr
.text:000000000000EAA9                 call    _free           ; PIC mode
.text:000000000000EAAE
.text:000000000000EAAE loc_EAAE:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000EAAE                 mov     rdi, [r14+8]    ; ptr
.text:000000000000EAB2                 cmp     [rsp+88h+var_60], rdi
.text:000000000000EAB7                 jz      short loc_EABE
.text:000000000000EAB9                 call    _free           ; PIC mode
.text:000000000000EABE
.text:000000000000EABE loc_EABE:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000EABE                 call    ___errno_location ; PIC mode
.text:000000000000EAC3                 mov     dword ptr [rax], 16h
.text:000000000000EAC9                 mov     eax, 0FFFFFFFFh
.text:000000000000EACE                 jmp     loc_E2F2
.text:000000000000EAD3 ; ---------------------------------------------------------------------------
.text:000000000000EAD3
.text:000000000000EAD3 loc_EAD3:                               ; CODE XREF: printf_parse+2B2↑j
.text:000000000000EAD3                 cmp     edx, r11d
.text:000000000000EAD6                 jz      loc_E50B        ; jumptable 0000000000000245 case 37
.text:000000000000EADC                 jmp     short loc_EA9F
.text:000000000000EADC ; ---------------------------------------------------------------------------
.text:000000000000EADE                 align 20h
.text:000000000000EAE0
.text:000000000000EAE0 loc_EAE0:                               ; CODE XREF: printf_parse+26E↑j
.text:000000000000EAE0                 add     r9, r9
.text:000000000000EAE3                 lea     rax, [r13+1]
.text:000000000000EAE7                 cmp     r9, r13
.text:000000000000EAEA                 cmovbe  r9, rax
.text:000000000000EAEE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000EAF8                 cmp     r9, rax
.text:000000000000EAFB                 ja      loc_EEDB
.text:000000000000EB01                 mov     rsi, r9
.text:000000000000EB04                 mov     [rsp+88h+var_40], r9
.text:000000000000EB09                 mov     [rsp+88h+var_48], r10
.text:000000000000EB0E                 shl     rsi, 5          ; size
.text:000000000000EB12                 cmp     [rsp+88h+src], rcx
.text:000000000000EB17                 mov     [rsp+88h+var_50], r8
.text:000000000000EB1C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000EB21                 jz      loc_EBC1
.text:000000000000EB27                 mov     rdi, rcx        ; ptr
.text:000000000000EB2A                 call    _realloc        ; PIC mode
.text:000000000000EB2F                 test    rax, rax
.text:000000000000EB32                 mov     rcx, rax
.text:000000000000EB35                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000EB3A                 mov     r8, [rsp+88h+var_50]
.text:000000000000EB3F                 mov     r10, [rsp+88h+var_48]
.text:000000000000EB44                 mov     r9, [rsp+88h+var_40]
.text:000000000000EB49                 jz      loc_EED7
.text:000000000000EB4F                 mov     rax, [rsp+88h+src]
.text:000000000000EB54                 cmp     rax, [r15+8]
.text:000000000000EB58                 jz      loc_EBE9
.text:000000000000EB5E
.text:000000000000EB5E loc_EB5E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000EB5E                 mov     [r15+8], rcx
.text:000000000000EB62                 jmp     loc_E4C4
.text:000000000000EB67 ; ---------------------------------------------------------------------------
.text:000000000000EB67
.text:000000000000EB67 loc_EB67:                               ; CODE XREF: printf_parse+25C↑j
.text:000000000000EB67                 mov     rsi, [rsp+88h+var_68]
.text:000000000000EB6C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000EB70                 lea     rax, [rsi+1]
.text:000000000000EB74                 mov     [r12+50h], rsi
.text:000000000000EB79                 jz      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EB7F                 mov     r13, [rsp+88h+var_68]
.text:000000000000EB84                 mov     [rsp+88h+var_68], rax
.text:000000000000EB89                 jmp     loc_E4B7
.text:000000000000EB8E ; ---------------------------------------------------------------------------
.text:000000000000EB8E
.text:000000000000EB8E loc_EB8E:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000EB8E                 cmp     dil, 9
.text:000000000000EB92                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EB98                 movsx   eax, bl
.text:000000000000EB9B                 mov     rsi, r8
.text:000000000000EB9E                 mov     rcx, rbp
.text:000000000000EBA1                 sub     eax, 30h ; '0'
.text:000000000000EBA4                 cdqe
.text:000000000000EBA6                 jmp     loc_E7E1
.text:000000000000EBAB ; ---------------------------------------------------------------------------
.text:000000000000EBAB
.text:000000000000EBAB loc_EBAB:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000EBAB                 cmp     edx, 5
.text:000000000000EBAE                 jnz     loc_EA9F
.text:000000000000EBB4                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000EBB8                 lea     rdx, [rbp+1]
.text:000000000000EBBC                 jmp     loc_E415
.text:000000000000EBC1 ; ---------------------------------------------------------------------------
.text:000000000000EBC1
.text:000000000000EBC1 loc_EBC1:                               ; CODE XREF: printf_parse+8D1↑j
.text:000000000000EBC1                 mov     rdi, rsi        ; size
.text:000000000000EBC4                 call    _malloc         ; PIC mode
.text:000000000000EBC9                 test    rax, rax
.text:000000000000EBCC                 mov     rcx, rax
.text:000000000000EBCF                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000EBD4                 mov     r8, [rsp+88h+var_50]
.text:000000000000EBD9                 mov     r10, [rsp+88h+var_48]
.text:000000000000EBDE                 mov     r9, [rsp+88h+var_40]
.text:000000000000EBE3                 jz      loc_ED4C
.text:000000000000EBE9
.text:000000000000EBE9 loc_EBE9:                               ; CODE XREF: printf_parse+908↑j
.text:000000000000EBE9                 mov     rdx, [r15]
.text:000000000000EBEC                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000EBF1                 mov     rdi, rcx        ; dest
.text:000000000000EBF4                 mov     [rsp+88h+var_40], r9
.text:000000000000EBF9                 mov     [rsp+88h+var_48], r10
.text:000000000000EBFE                 mov     [rsp+88h+var_50], r8
.text:000000000000EC03                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000EC08                 shl     rdx, 5          ; n
.text:000000000000EC0C                 call    _memcpy         ; PIC mode
.text:000000000000EC11                 mov     r9, [rsp+88h+var_40]
.text:000000000000EC16                 mov     r10, [rsp+88h+var_48]
.text:000000000000EC1B                 mov     rcx, rax
.text:000000000000EC1E                 mov     r8, [rsp+88h+var_50]
.text:000000000000EC23                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000EC28                 jmp     loc_EB5E
.text:000000000000EC2D ; ---------------------------------------------------------------------------
.text:000000000000EC2D
.text:000000000000EC2D loc_EC2D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000EC2D                 mov     rdi, rsi        ; size
.text:000000000000EC30                 call    _malloc         ; PIC mode
.text:000000000000EC35                 test    rax, rax
.text:000000000000EC38                 mov     rcx, rax
.text:000000000000EC3B                 mov     r8, [rsp+88h+var_58]
.text:000000000000EC40                 mov     r10, [rsp+88h+var_50]
.text:000000000000EC45                 mov     r9, [rsp+88h+var_48]
.text:000000000000EC4A                 jz      loc_ED39
.text:000000000000EC50
.text:000000000000EC50 loc_EC50:                               ; CODE XREF: printf_parse+351↑j
.text:000000000000EC50                 lea     rax, [rbx+rbx*4]
.text:000000000000EC54                 mov     rsi, [rsp+88h+var_60] ; src
.text:000000000000EC59                 mov     rdi, rcx        ; dest
.text:000000000000EC5C                 mov     [rsp+88h+var_48], r9
.text:000000000000EC61                 mov     [rsp+88h+var_50], r10
.text:000000000000EC66                 lea     rdx, [rbx+rax*2]
.text:000000000000EC6A                 mov     [rsp+88h+var_58], r8
.text:000000000000EC6F                 shl     rdx, 3          ; n
.text:000000000000EC73                 call    _memcpy         ; PIC mode
.text:000000000000EC78                 mov     rbx, [r14]
.text:000000000000EC7B                 mov     rcx, rax
.text:000000000000EC7E                 mov     r9, [rsp+88h+var_48]
.text:000000000000EC83                 mov     r10, [rsp+88h+var_50]
.text:000000000000EC88                 mov     r8, [rsp+88h+var_58]
.text:000000000000EC8D                 jmp     loc_E5A7
.text:000000000000EC92 ; ---------------------------------------------------------------------------
.text:000000000000EC92
.text:000000000000EC92 loc_EC92:                               ; CODE XREF: printf_parse+3C6↑j
.text:000000000000EC92                 mov     rax, [r15]
.text:000000000000EC95                 jmp     loc_E697
.text:000000000000EC9A ; ---------------------------------------------------------------------------
.text:000000000000EC9A
.text:000000000000EC9A loc_EC9A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000EC9A                 cmp     edx, 5
.text:000000000000EC9D                 jnz     loc_EA9F
.text:000000000000ECA3                 movzx   ebx, byte ptr [r11]
.text:000000000000ECA7                 mov     rbp, r11
.text:000000000000ECAA                 jmp     loc_E41E
.text:000000000000ECAF ; ---------------------------------------------------------------------------
.text:000000000000ECAF
.text:000000000000ECAF loc_ECAF:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000ECAF                 add     r9, r9
.text:000000000000ECB2                 lea     rax, [rbx+1]
.text:000000000000ECB6                 cmp     r9, rbx
.text:000000000000ECB9                 cmovbe  r9, rax
.text:000000000000ECBD                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000ECC7                 cmp     r9, rax
.text:000000000000ECCA                 ja      loc_EEDB
.text:000000000000ECD0                 mov     rsi, r9
.text:000000000000ECD3                 mov     [rsp+88h+var_40], r9
.text:000000000000ECD8                 mov     [rsp+88h+var_48], r10
.text:000000000000ECDD                 shl     rsi, 5          ; size
.text:000000000000ECE1                 cmp     [rsp+88h+src], rcx
.text:000000000000ECE6                 mov     [rsp+88h+var_50], r8
.text:000000000000ECEB                 mov     [rsp+88h+var_58], r11
.text:000000000000ECF0                 jz      loc_EEAE
.text:000000000000ECF6                 mov     rdi, rcx        ; ptr
.text:000000000000ECF9                 call    _realloc        ; PIC mode
.text:000000000000ECFE                 mov     rdx, [r15+8]
.text:000000000000ED02                 mov     r11, [rsp+88h+var_58]
.text:000000000000ED07                 mov     rcx, rax
.text:000000000000ED0A                 mov     r8, [rsp+88h+var_50]
.text:000000000000ED0F                 mov     r10, [rsp+88h+var_48]
.text:000000000000ED14                 mov     r9, [rsp+88h+var_40]
.text:000000000000ED19
.text:000000000000ED19 loc_ED19:                               ; CODE XREF: printf_parse+C82↓j
.text:000000000000ED19                 test    rcx, rcx
.text:000000000000ED1C                 jz      loc_EF37
.text:000000000000ED22                 cmp     [rsp+88h+src], rdx
.text:000000000000ED27                 mov     rax, [r15]
.text:000000000000ED2A                 jz      loc_EEF0
.text:000000000000ED30
.text:000000000000ED30 loc_ED30:                               ; CODE XREF: printf_parse+CE2↓j
.text:000000000000ED30                 mov     [r15+8], rcx
.text:000000000000ED34                 jmp     loc_E74D
.text:000000000000ED39 ; ---------------------------------------------------------------------------
.text:000000000000ED39
.text:000000000000ED39 loc_ED39:                               ; CODE XREF: printf_parse+9FA↑j
.text:000000000000ED39                 mov     rcx, [r15+8]
.text:000000000000ED3D                 cmp     [rsp+88h+src], rcx
.text:000000000000ED42                 jz      short loc_ED5C
.text:000000000000ED44
.text:000000000000ED44 loc_ED44:                               ; CODE XREF: printf_parse+C90↓j
.text:000000000000ED44                 mov     rdi, rcx        ; ptr
.text:000000000000ED47                 call    _free           ; PIC mode
.text:000000000000ED4C
.text:000000000000ED4C loc_ED4C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000ED4C                                         ; printf_parse+C96↓j
.text:000000000000ED4C                 mov     rdi, [r14+8]    ; ptr
.text:000000000000ED50                 cmp     [rsp+88h+var_60], rdi
.text:000000000000ED55                 jz      short loc_ED5C
.text:000000000000ED57                 call    _free           ; PIC mode
.text:000000000000ED5C
.text:000000000000ED5C loc_ED5C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000ED5C                                         ; printf_parse+B05↑j
.text:000000000000ED5C                 call    ___errno_location ; PIC mode
.text:000000000000ED61                 mov     dword ptr [rax], 0Ch
.text:000000000000ED67                 mov     eax, 0FFFFFFFFh
.text:000000000000ED6C                 jmp     loc_E2F2
.text:000000000000ED71 ; ---------------------------------------------------------------------------
.text:000000000000ED71
.text:000000000000ED71 loc_ED71:                               ; CODE XREF: printf_parse+408↑j
.text:000000000000ED71                 mov     rdi, rsi        ; size
.text:000000000000ED74                 call    _malloc         ; PIC mode
.text:000000000000ED79                 mov     rdx, [rsp+88h+src]
.text:000000000000ED7E                 mov     rcx, rax
.text:000000000000ED81                 mov     r9, [rsp+88h+var_48]
.text:000000000000ED86                 mov     r10, [rsp+88h+var_50]
.text:000000000000ED8B                 mov     r8, [rsp+88h+var_58]
.text:000000000000ED90                 jmp     loc_E67C
.text:000000000000ED95 ; ---------------------------------------------------------------------------
.text:000000000000ED95
.text:000000000000ED95 loc_ED95:                               ; CODE XREF: printf_parse+4E7↑j
.text:000000000000ED95                 mov     rsi, [rsp+88h+var_68]
.text:000000000000ED9A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000ED9E                 lea     rax, [rsi+1]
.text:000000000000EDA2                 mov     [r12+40h], rsi
.text:000000000000EDA7                 jz      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EDAD                 mov     rbx, [rsp+88h+var_68]
.text:000000000000EDB2                 mov     [rsp+88h+var_68], rax
.text:000000000000EDB7                 jmp     loc_E73D
.text:000000000000EDBC ; ---------------------------------------------------------------------------
.text:000000000000EDBC
.text:000000000000EDBC loc_EDBC:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000EDBC                 mov     rdx, r11
.text:000000000000EDBF
.text:000000000000EDBF loc_EDBF:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000EDBF                 add     rdx, 1
.text:000000000000EDC3                 movzx   ecx, byte ptr [rdx]
.text:000000000000EDC6                 lea     esi, [rcx-30h]
.text:000000000000EDC9                 cmp     sil, 9
.text:000000000000EDCD                 jbe     short loc_EDBF
.text:000000000000EDCF                 cmp     cl, 24h ; '$'
.text:000000000000EDD2                 jnz     loc_E72E
.text:000000000000EDD8                 xor     ecx, ecx
.text:000000000000EDDA
.text:000000000000EDDA loc_EDDA:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000EDDA                 mov     rsi, 1999999999999999h
.text:000000000000EDE4                 sub     eax, 30h ; '0'
.text:000000000000EDE7                 mov     rdx, r8
.text:000000000000EDEA                 cmp     rcx, rsi
.text:000000000000EDED                 cdqe
.text:000000000000EDEF                 ja      short loc_EDF8
.text:000000000000EDF1                 lea     rdx, [rcx+rcx*4]
.text:000000000000EDF5                 add     rdx, rdx
.text:000000000000EDF8
.text:000000000000EDF8 loc_EDF8:                               ; CODE XREF: printf_parse+B9F↑j
.text:000000000000EDF8                 mov     rsi, r11
.text:000000000000EDFB
.text:000000000000EDFB loc_EDFB:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000EDFB                 xor     ebx, ebx
.text:000000000000EDFD                 add     rdx, rax
.text:000000000000EE00                 movsx   eax, byte ptr [r11+1]
.text:000000000000EE05                 setb    bl
.text:000000000000EE08                 add     r11, 1
.text:000000000000EE0C                 mov     rcx, rdx
.text:000000000000EE0F                 test    rbx, rbx
.text:000000000000EE12                 lea     edi, [rax-30h]
.text:000000000000EE15                 jz      short loc_EE88
.text:000000000000EE17                 cmp     dil, 9
.text:000000000000EE1B                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EE21                 sub     eax, 30h ; '0'
.text:000000000000EE24                 mov     rdx, r8
.text:000000000000EE27                 mov     rsi, r11
.text:000000000000EE2A                 cdqe
.text:000000000000EE2C                 jmp     short loc_EDFB
.text:000000000000EE2E ; ---------------------------------------------------------------------------
.text:000000000000EE2E
.text:000000000000EE2E loc_EE2E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000EE2E                 cmp     dil, 9
.text:000000000000EE32                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EE38                 movsx   eax, cl
.text:000000000000EE3B                 mov     rbp, rdx
.text:000000000000EE3E                 mov     rcx, r8
.text:000000000000EE41                 sub     eax, 30h ; '0'
.text:000000000000EE44                 cdqe
.text:000000000000EE46                 jmp     loc_E909
.text:000000000000EE4B ; ---------------------------------------------------------------------------
.text:000000000000EE4B
.text:000000000000EE4B loc_EE4B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000EE4B                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000EE50                 shl     rax, 5
.text:000000000000EE54                 mov     rdi, rcx        ; dest
.text:000000000000EE57                 mov     rdx, rax        ; n
.text:000000000000EE5A                 mov     [rsp+88h+var_48], r9
.text:000000000000EE5F                 mov     [rsp+88h+var_50], r10
.text:000000000000EE64                 mov     [rsp+88h+var_58], r8
.text:000000000000EE69                 call    _memcpy         ; PIC mode
.text:000000000000EE6E                 mov     r9, [rsp+88h+var_48]
.text:000000000000EE73                 mov     rcx, rax
.text:000000000000EE76                 mov     r10, [rsp+88h+var_50]
.text:000000000000EE7B                 mov     rax, [r15]
.text:000000000000EE7E                 mov     r8, [rsp+88h+var_58]
.text:000000000000EE83                 jmp     loc_E693
.text:000000000000EE88 ; ---------------------------------------------------------------------------
.text:000000000000EE88
.text:000000000000EE88 loc_EE88:                               ; CODE XREF: printf_parse+BC5↑j
.text:000000000000EE88                 cmp     dil, 9
.text:000000000000EE8C                 jbe     loc_EDDA
.text:000000000000EE92                 lea     rbx, [rdx-1]
.text:000000000000EE96                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000EE9A                 ja      def_E495        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EEA0                 mov     [r12+40h], rbx
.text:000000000000EEA5                 lea     r11, [rsi+2]
.text:000000000000EEA9                 jmp     loc_E73D
.text:000000000000EEAE ; ---------------------------------------------------------------------------
.text:000000000000EEAE
.text:000000000000EEAE loc_EEAE:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000EEAE                 mov     rdi, rsi        ; size
.text:000000000000EEB1                 call    _malloc         ; PIC mode
.text:000000000000EEB6                 mov     rdx, [rsp+88h+src]
.text:000000000000EEBB                 mov     rcx, rax
.text:000000000000EEBE                 mov     r9, [rsp+88h+var_40]
.text:000000000000EEC3                 mov     r10, [rsp+88h+var_48]
.text:000000000000EEC8                 mov     r8, [rsp+88h+var_50]
.text:000000000000EECD                 mov     r11, [rsp+88h+var_58]
.text:000000000000EED2                 jmp     loc_ED19
.text:000000000000EED7 ; ---------------------------------------------------------------------------
.text:000000000000EED7
.text:000000000000EED7 loc_EED7:                               ; CODE XREF: printf_parse+2DB↑j
.text:000000000000EED7                                         ; printf_parse+2F1↑j ...
.text:000000000000EED7                 mov     rcx, [r15+8]
.text:000000000000EEDB
.text:000000000000EEDB loc_EEDB:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000EEDB                                         ; printf_parse+8AB↑j ...
.text:000000000000EEDB                 cmp     [rsp+88h+src], rcx
.text:000000000000EEE0                 jnz     loc_ED44
.text:000000000000EEE6                 jmp     loc_ED4C
.text:000000000000EEE6 ; ---------------------------------------------------------------------------
.text:000000000000EEEB                 align 10h
.text:000000000000EEF0
.text:000000000000EEF0 loc_EEF0:                               ; CODE XREF: printf_parse+ADA↑j
.text:000000000000EEF0                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000EEF5                 shl     rax, 5
.text:000000000000EEF9                 mov     rdi, rcx        ; dest
.text:000000000000EEFC                 mov     rdx, rax        ; n
.text:000000000000EEFF                 mov     [rsp+88h+var_40], r9
.text:000000000000EF04                 mov     [rsp+88h+var_48], r10
.text:000000000000EF09                 mov     [rsp+88h+var_50], r8
.text:000000000000EF0E                 mov     [rsp+88h+var_58], r11
.text:000000000000EF13                 call    _memcpy         ; PIC mode
.text:000000000000EF18                 mov     r9, [rsp+88h+var_40]
.text:000000000000EF1D                 mov     rcx, rax
.text:000000000000EF20                 mov     r10, [rsp+88h+var_48]
.text:000000000000EF25                 mov     rax, [r15]
.text:000000000000EF28                 mov     r8, [rsp+88h+var_50]
.text:000000000000EF2D                 mov     r11, [rsp+88h+var_58]
.text:000000000000EF32                 jmp     loc_ED30
.text:000000000000EF37 ; ---------------------------------------------------------------------------
.text:000000000000EF37
.text:000000000000EF37 loc_EF37:                               ; CODE XREF: printf_parse+42F↑j
.text:000000000000EF37                                         ; printf_parse+ACC↑j
.text:000000000000EF37                 mov     rcx, rdx
.text:000000000000EF3A                 jmp     short loc_EEDB
.text:000000000000EF3A ; } // starts at E250
.text:000000000000EF3A printf_parse    endp
.text:000000000000EF3A
.text:000000000000EF3A ; ---------------------------------------------------------------------------
.text:000000000000EF3C                 align 20h
.text:000000000000EF40
.text:000000000000EF40 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF40
.text:000000000000EF40 ; Attributes: info_from_lumina
.text:000000000000EF40
.text:000000000000EF40 ; void _libc_csu_init(void)
.text:000000000000EF40                 public __libc_csu_init
.text:000000000000EF40 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000EF40 ; __unwind {
.text:000000000000EF40                 push    r15
.text:000000000000EF42                 push    r14
.text:000000000000EF44                 mov     r15, rdx
.text:000000000000EF47                 push    r13
.text:000000000000EF49                 push    r12
.text:000000000000EF4B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000EF52                 push    rbp
.text:000000000000EF53                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000EF5A                 push    rbx
.text:000000000000EF5B                 mov     r13d, edi
.text:000000000000EF5E                 mov     r14, rsi
.text:000000000000EF61                 sub     rbp, r12
.text:000000000000EF64                 sub     rsp, 8
.text:000000000000EF68                 sar     rbp, 3
.text:000000000000EF6C                 call    _init_proc
.text:000000000000EF71                 test    rbp, rbp
.text:000000000000EF74                 jz      short loc_EF96
.text:000000000000EF76                 xor     ebx, ebx
.text:000000000000EF78                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000EF80
.text:000000000000EF80 loc_EF80:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000EF80                 mov     rdx, r15
.text:000000000000EF83                 mov     rsi, r14
.text:000000000000EF86                 mov     edi, r13d
.text:000000000000EF89                 call    ds:(__frame_dummy_init_array_entry - 213870h)[r12+rbx*8]
.text:000000000000EF8D                 add     rbx, 1
.text:000000000000EF91                 cmp     rbp, rbx
.text:000000000000EF94                 jnz     short loc_EF80
.text:000000000000EF96
.text:000000000000EF96 loc_EF96:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000EF96                 add     rsp, 8
.text:000000000000EF9A                 pop     rbx
.text:000000000000EF9B                 pop     rbp
.text:000000000000EF9C                 pop     r12
.text:000000000000EF9E                 pop     r13
.text:000000000000EFA0                 pop     r14
.text:000000000000EFA2                 pop     r15
.text:000000000000EFA4                 retn
.text:000000000000EFA4 ; } // starts at EF40
.text:000000000000EFA4 __libc_csu_init endp
.text:000000000000EFA4
.text:000000000000EFA4 ; ---------------------------------------------------------------------------
.text:000000000000EFA5                 align 10h
.text:000000000000EFB0
.text:000000000000EFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EFB0
.text:000000000000EFB0
.text:000000000000EFB0 ; void _libc_csu_fini(void)
.text:000000000000EFB0                 public __libc_csu_fini
.text:000000000000EFB0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000EFB0 ; __unwind {
.text:000000000000EFB0                 rep retn
.text:000000000000EFB0 ; } // starts at EFB0
.text:000000000000EFB0 __libc_csu_fini endp
.text:000000000000EFB0
.text:000000000000EFB0 ; ---------------------------------------------------------------------------
.text:000000000000EFB2                 align 20h
.text:000000000000EFC0
.text:000000000000EFC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EFC0
.text:000000000000EFC0
.text:000000000000EFC0 atexit          proc near               ; CODE XREF: main+7B↑p
.text:000000000000EFC0 ; __unwind {
.text:000000000000EFC0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000EFC7                 xor     esi, esi        ; obj
.text:000000000000EFC9                 jmp     ___cxa_atexit
.text:000000000000EFC9 ; } // starts at EFC0
.text:000000000000EFC9 atexit          endp
.text:000000000000EFC9
.text:000000000000EFC9 _text           ends
.text:000000000000EFC9
LOAD:000000000000EFCE ; ===========================================================================
LOAD:000000000000EFCE
LOAD:000000000000EFCE ; Segment type: Pure code
LOAD:000000000000EFCE ; Segment permissions: Read/Execute
LOAD:000000000000EFCE LOAD            segment byte public 'CODE' use64
LOAD:000000000000EFCE                 assume cs:LOAD
LOAD:000000000000EFCE                 ;org 0EFCEh
LOAD:000000000000EFCE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000EFCE                 align 10h
LOAD:000000000000EFCE LOAD            ends
LOAD:000000000000EFCE
.fini:000000000000EFD0 ; ===========================================================================
.fini:000000000000EFD0
.fini:000000000000EFD0 ; Segment type: Pure code
.fini:000000000000EFD0 ; Segment permissions: Read/Execute
.fini:000000000000EFD0 _fini           segment dword public 'CODE' use64
.fini:000000000000EFD0                 assume cs:_fini
.fini:000000000000EFD0                 ;org 0EFD0h
.fini:000000000000EFD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000EFD0
.fini:000000000000EFD0 ; =============== S U B R O U T I N E =======================================
.fini:000000000000EFD0
.fini:000000000000EFD0
.fini:000000000000EFD0                 public _term_proc
.fini:000000000000EFD0 _term_proc      proc near
.fini:000000000000EFD0                 sub     rsp, 8          ; _fini
.fini:000000000000EFD4                 add     rsp, 8
.fini:000000000000EFD8                 retn
.fini:000000000000EFD8 _term_proc      endp
.fini:000000000000EFD8
.fini:000000000000EFD8 _fini           ends
.fini:000000000000EFD8
LOAD:000000000000EFD9 ; ===========================================================================
LOAD:000000000000EFD9
LOAD:000000000000EFD9 ; Segment type: Pure code
LOAD:000000000000EFD9 ; Segment permissions: Read/Execute
LOAD:000000000000EFD9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000EFD9                 assume cs:LOAD
LOAD:000000000000EFD9                 ;org 0EFD9h
LOAD:000000000000EFD9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000EFD9                 align 20h
LOAD:000000000000EFD9 LOAD            ends
LOAD:000000000000EFD9
.rodata:000000000000EFE0 ; ===========================================================================
.rodata:000000000000EFE0
.rodata:000000000000EFE0 ; Segment type: Pure data
.rodata:000000000000EFE0 ; Segment permissions: Read
.rodata:000000000000EFE0 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000EFE0                 assume cs:_rodata
.rodata:000000000000EFE0                 ;org 0EFE0h
.rodata:000000000000EFE0                 public _IO_stdin_used
.rodata:000000000000EFE0 _IO_stdin_used  db    1
.rodata:000000000000EFE1                 db    0
.rodata:000000000000EFE2                 db    2
.rodata:000000000000EFE3                 db    0
.rodata:000000000000EFE4 ; const char aBlocks[]
.rodata:000000000000EFE4 aBlocks         db 'blocks',0           ; DATA XREF: get_header+215↑o
.rodata:000000000000EFE4                                         ; .data:0000000000214098↓o
.rodata:000000000000EFEB ; const char aSS_0[]
.rodata:000000000000EFEB aSS_0           db '%s-%s',0            ; DATA XREF: get_header:loc_404E↑o
.rodata:000000000000EFF1 ; const char file[]
.rodata:000000000000EFF1 file            db '../coreutils-8.31/src/df.c',0
.rodata:000000000000EFF1                                         ; DATA XREF: main+156B↑o
.rodata:000000000000EFF1                                         ; alloc_field+A5↑o ...
.rodata:000000000000F00C ; const char aFieldUsed[]
.rodata:000000000000F00C aFieldUsed      db '!"field used"',0    ; DATA XREF: alloc_field+AC↑o
.rodata:000000000000F00C                                         ; gettext_quote:loc_88C0↑o ...
.rodata:000000000000F01A ; const char accept[]
.rodata:000000000000F01A accept          db '-0123456789abcdefABCDEF',0
.rodata:000000000000F01A                                         ; DATA XREF: get_dev+1EC↑o
.rodata:000000000000F032 ; const char aBadFieldType[]
.rodata:000000000000F032 aBadFieldType   db '!"bad field_type"',0
.rodata:000000000000F032                                         ; DATA XREF: get_dev+9ED↑o
.rodata:000000000000F044 a0f             db '%.0f%%',0           ; DATA XREF: get_dev+677↑o
.rodata:000000000000F04B ; const char aUnhandledField[]
.rodata:000000000000F04B aUnhandledField db '!"unhandled field"',0
.rodata:000000000000F04B                                         ; DATA XREF: get_dev+9CE↑o
.rodata:000000000000F05E ; const char aEmptyCell[]
.rodata:000000000000F05E aEmptyCell      db '!"empty cell"',0    ; DATA XREF: get_dev+97F↑o
.rodata:000000000000F06C aDf             db 'df',0               ; DATA XREF: main+3FC↑o
.rodata:000000000000F06C                                         ; usage+238↑o ...
.rodata:000000000000F06F aDf_0           db 'DF',0               ; DATA XREF: usage+1DD↑o
.rodata:000000000000F072 asc_F072        db '[',0                ; DATA XREF: usage+244↑o
.rodata:000000000000F074 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+26B↑o
.rodata:000000000000F084 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000F084                                         ; DATA XREF: usage+29B↑o
.rodata:000000000000F084                                         ; usage+394↑o ...
.rodata:000000000000F09A aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2AC↑o
.rodata:000000000000F0A4 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2B8↑o
.rodata:000000000000F0B3 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+24B↑o
.rodata:000000000000F0BD aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+277↑o
.rodata:000000000000F0C7 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+28F↑o
.rodata:000000000000F0D1 ; const char aSOnlineHelpS[]
.rodata:000000000000F0D1 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+302↑o
.rodata:000000000000F0D1                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000F0E8 unk_F0E8        db  47h ; G             ; DATA XREF: main+3F5↑o
.rodata:000000000000F0E8                                         ; usage+31E↑o ...
.rodata:000000000000F0E9                 db  4Eh ; N
.rodata:000000000000F0EA                 db  55h ; U
.rodata:000000000000F0EB                 db  20h
.rodata:000000000000F0EC ; const char domainname[]
.rodata:000000000000F0EC domainname      db 'coreutils',0        ; DATA XREF: main+5C↑o
.rodata:000000000000F0EC                                         ; main+68↑o ...
.rodata:000000000000F0F6 ; const char aEn[]
.rodata:000000000000F0F6 aEn             db 'en_',0              ; DATA XREF: usage+345↑o
.rodata:000000000000F0F6                                         ; usage+406↑o
.rodata:000000000000F0FA ; const char aFullDocumentat[]
.rodata:000000000000F0FA aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000F0FA                                         ; DATA XREF: usage:loc_50D1↑o
.rodata:000000000000F0FA                                         ; usage:loc_518E↑o
.rodata:000000000000F115 aSize           db 'Size',0             ; DATA XREF: main:loc_304D↑o
.rodata:000000000000F115                                         ; decode_output_arg+DB↑o
.rodata:000000000000F11A aAvail          db 'Avail',0            ; DATA XREF: main+AAA↑o
.rodata:000000000000F11A                                         ; decode_output_arg:loc_5330↑o
.rodata:000000000000F120 ; const char aInvalidField[]
.rodata:000000000000F120 aInvalidField   db '!"invalid field"',0 ; DATA XREF: decode_output_arg+15A↑o
.rodata:000000000000F131 ; const char dirname[]
.rodata:000000000000F131 dirname         db '/usr/local/share/locale',0
.rodata:000000000000F131                                         ; DATA XREF: main+55↑o
.rodata:000000000000F149 ; const char shortopts[]
.rodata:000000000000F149 shortopts       db 'aB:iF:hHklmPTt:vx:',0
.rodata:000000000000F149                                         ; DATA XREF: main+F4↑o
.rodata:000000000000F15C aOutput         db '--output',0         ; DATA XREF: main:loc_3AEF↑o
.rodata:000000000000F15C                                         ; main:loc_3B4D↑o ...
.rodata:000000000000F165 aI              db '-i',0               ; DATA XREF: main+15C5↑o
.rodata:000000000000F168 aT              db '-T',0               ; DATA XREF: main+15B5↑o
.rodata:000000000000F16B aP              db '-P',0               ; DATA XREF: main+1536↑o
.rodata:000000000000F16B                                         ; main+1594↑o
.rodata:000000000000F16E aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+3E6↑o
.rodata:000000000000F17E aTorbjornGranlu db 'Torbjorn Granlund',0
.rodata:000000000000F17E                                         ; DATA XREF: main+3ED↑o
.rodata:000000000000F190 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+3CF↑o
.rodata:000000000000F19C ; const char name[]
.rodata:000000000000F19C name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+66D↑o
.rodata:000000000000F19C                                         ; human_options+10D↑o ...
.rodata:000000000000F1AC ; const char aDfBlockSize[]
.rodata:000000000000F1AC aDfBlockSize    db 'DF_BLOCK_SIZE',0    ; DATA XREF: main:loc_2CDA↑o
.rodata:000000000000F1AC                                         ; human_options:loc_80A0↑o
.rodata:000000000000F1BA ; const char aWarning[]
.rodata:000000000000F1BA aWarning        db 'Warning: ',0        ; DATA XREF: main+1512↑o
.rodata:000000000000F1C4 ; const char format[]
.rodata:000000000000F1C4 format          db '%s%s',0             ; DATA XREF: main+1387↑o
.rodata:000000000000F1C9 aCapacity       db 'Capacity',0         ; DATA XREF: main+783↑o
.rodata:000000000000F1D2 ; const char assertion[]
.rodata:000000000000F1D2 assertion       db '!"invalid header_mode"',0
.rodata:000000000000F1D2                                         ; DATA XREF: main+1572↑o
.rodata:000000000000F1E9 ; const char s2[]
.rodata:000000000000F1E9 s2              db 'lofs',0             ; DATA XREF: main+A1A↑o
.rodata:000000000000F1E9                                         ; main+F41↑o
.rodata:000000000000F1EE ; const char aNoFileSystemsP[]
.rodata:000000000000F1EE aNoFileSystemsP db 'no file systems processed',0
.rodata:000000000000F1EE                                         ; DATA XREF: main+E89↑o
.rodata:000000000000F208 aAll            db 'all',0              ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000F20C aBlockSize      db 'block-size',0       ; DATA XREF: .data.rel.ro:00000000002138A0↓o
.rodata:000000000000F20C                                         ; .data:0000000000214088↓o
.rodata:000000000000F217 aInodes         db 'inodes',0           ; DATA XREF: .data.rel.ro:00000000002138C0↓o
.rodata:000000000000F21E aHumanReadable  db 'human-readable',0   ; DATA XREF: .data.rel.ro:00000000002138E0↓o
.rodata:000000000000F21E                                         ; .data.rel.ro:block_size_args↓o
.rodata:000000000000F22D aSi             db 'si',0               ; DATA XREF: .data.rel.ro:0000000000213900↓o
.rodata:000000000000F22D                                         ; .data.rel.ro:0000000000213AA8↓o
.rodata:000000000000F230 aLocal          db 'local',0            ; DATA XREF: .data.rel.ro:0000000000213920↓o
.rodata:000000000000F236 aPortability    db 'portability',0      ; DATA XREF: .data.rel.ro:0000000000213960↓o
.rodata:000000000000F242 aPrintType      db 'print-type',0       ; DATA XREF: .data.rel.ro:0000000000213980↓o
.rodata:000000000000F24D aNoSync         db 'no-sync',0          ; DATA XREF: .data.rel.ro:00000000002139C0↓o
.rodata:000000000000F24D                                         ; .data.rel.ro:00000000002139A0↓o
.rodata:000000000000F255 aExcludeType    db 'exclude-type',0     ; DATA XREF: .data.rel.ro:0000000000213A20↓o
.rodata:000000000000F255                                         ; .data.rel.ro:0000000000213A00↓o
.rodata:000000000000F262 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000213A40↓o
.rodata:000000000000F267 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000213A60↓o
.rodata:000000000000F26F aSource         db 'source',0           ; DATA XREF: .data:off_214028↓o
.rodata:000000000000F276 aFilesystem     db 'Filesystem',0       ; DATA XREF: .data:0000000000214038↓o
.rodata:000000000000F281 aFstype         db 'fstype',0           ; DATA XREF: .data:0000000000214058↓o
.rodata:000000000000F288 aType           db 'Type',0             ; DATA XREF: .data:0000000000214068↓o
.rodata:000000000000F28D aAvailable      db 'Available',0        ; DATA XREF: .data:00000000002140F8↓o
.rodata:000000000000F297 unk_F297        db  69h ; i             ; DATA XREF: .data:0000000000214148↓o
.rodata:000000000000F298 ; const char src[]
.rodata:000000000000F298 src             db 'total',0            ; DATA XREF: main+BF9↑o
.rodata:000000000000F298                                         ; .data.rel.ro:00000000002139E0↓o
.rodata:000000000000F29E aInodes_0       db 'Inodes',0           ; DATA XREF: .data:0000000000214158↓o
.rodata:000000000000F2A5 aIused          db 'iused',0            ; DATA XREF: .data:0000000000214178↓o
.rodata:000000000000F2A5                                         ; .data:00000000002140B8↓o
.rodata:000000000000F2AB aIused_0        db 'IUsed',0            ; DATA XREF: .data:0000000000214188↓o
.rodata:000000000000F2AB                                         ; .data:00000000002140C8↓o
.rodata:000000000000F2B1 aIavail         db 'iavail',0           ; DATA XREF: .data:00000000002141A8↓o
.rodata:000000000000F2B1                                         ; .data:00000000002140E8↓o
.rodata:000000000000F2B8 aIfree          db 'IFree',0            ; DATA XREF: .data:00000000002141B8↓o
.rodata:000000000000F2BE aIpcent         db 'ipcent',0           ; DATA XREF: .data:00000000002141D8↓o
.rodata:000000000000F2BE                                         ; .data:0000000000214118↓o
.rodata:000000000000F2C5 aIuse           db 'IUse%',0            ; DATA XREF: .data:00000000002141E8↓o
.rodata:000000000000F2C5                                         ; .data:0000000000214128↓o
.rodata:000000000000F2CB aTarget         db 'target',0           ; DATA XREF: .data:0000000000214208↓o
.rodata:000000000000F2D2 aMountedOn      db 'Mounted on',0       ; DATA XREF: .data:0000000000214218↓o
.rodata:000000000000F2DD aFile           db 'file',0             ; DATA XREF: .data:0000000000214238↓o
.rodata:000000000000F2E2 aFile_0         db 'File',0             ; DATA XREF: .data:0000000000214248↓o
.rodata:000000000000F2E7                 align 10h
.rodata:000000000000F2F0 jpt_472B        dd offset loc_4880 - 0F2F0h
.rodata:000000000000F2F0                                         ; DATA XREF: get_dev+397↑o
.rodata:000000000000F2F0                                         ; get_dev+3D4↑r
.rodata:000000000000F2F0                 dd offset loc_4868 - 0F2F0h ; jump table for switch statement
.rodata:000000000000F2F0                 dd offset loc_4830 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_4818 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_47E0 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_47B0 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_4830 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_4818 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_47E0 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_47B0 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_4730 - 0F2F0h
.rodata:000000000000F2F0                 dd offset loc_48A0 - 0F2F0h
.rodata:000000000000F320 jpt_2CC0        dd offset loc_30E1 - 0F320h
.rodata:000000000000F320                                         ; DATA XREF: main+6F2↑o
.rodata:000000000000F320                                         ; main+6F9↑r
.rodata:000000000000F320                 dd offset loc_3082 - 0F320h ; jump table for switch statement
.rodata:000000000000F320                 dd offset loc_302F - 0F320h
.rodata:000000000000F320                 dd offset loc_2D01 - 0F320h
.rodata:000000000000F320                 dd offset loc_311E - 0F320h
.rodata:000000000000F334                 align 8
.rodata:000000000000F338 ; const char _PRETTY_FUNCTION___9006[]
.rodata:000000000000F338 __PRETTY_FUNCTION___9006 db 'get_dev',0 ; DATA XREF: get_dev:loc_4CC1↑o
.rodata:000000000000F338                                         ; get_dev:def_472B↑o ...
.rodata:000000000000F340 ; const char _PRETTY_FUNCTION___8870[]
.rodata:000000000000F340 __PRETTY_FUNCTION___8870 db 'get_field_list',0
.rodata:000000000000F340                                         ; DATA XREF: main:def_2CC0↑o
.rodata:000000000000F34F                 align 10h
.rodata:000000000000F350 ; const char _PRETTY_FUNCTION___8831[]
.rodata:000000000000F350 __PRETTY_FUNCTION___8831 db 'alloc_field',0
.rodata:000000000000F350                                         ; DATA XREF: alloc_field:loc_423E↑o
.rodata:000000000000F35C                 align 20h
.rodata:000000000000F360 ; const char _PRETTY_FUNCTION___8857[]
.rodata:000000000000F360 __PRETTY_FUNCTION___8857 db 'decode_output_arg',0
.rodata:000000000000F360                                         ; DATA XREF: decode_output_arg:loc_535C↑o
.rodata:000000000000F372                 align 8
.rodata:000000000000F378 ; const char aTrySHelpForMor[]
.rodata:000000000000F378 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000F378                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000F39F                 align 20h
.rodata:000000000000F3A0 ; const char aUsageSOptionFi[]
.rodata:000000000000F3A0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:000000000000F3A0                                         ; DATA XREF: usage:loc_4DCD↑o
.rodata:000000000000F3C1                 align 8
.rodata:000000000000F3C8 ; const char aShowInformatio[]
.rodata:000000000000F3C8 aShowInformatio db 'Show information about the file system on which each FILE resides'
.rodata:000000000000F3C8                                         ; DATA XREF: usage+84↑o
.rodata:000000000000F3C8                 db ',',0Ah
.rodata:000000000000F3C8                 db 'or all file systems by default.',0Ah,0
.rodata:000000000000F42C                 align 10h
.rodata:000000000000F430 ; const char aMandatoryArgum[]
.rodata:000000000000F430 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:000000000000F430                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000F430                 db 'ns too.',0Ah,0
.rodata:000000000000F47B                 align 20h
.rodata:000000000000F480 ; const char aAAllIncludePse[]
.rodata:000000000000F480 aAAllIncludePse db '  -a, --all             include pseudo, duplicate, inaccessible f'
.rodata:000000000000F480                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000F480                 db 'ile systems',0Ah
.rodata:000000000000F480                 db '  -B, --block-size=SIZE  scale sizes by SIZE before printing them'
.rodata:000000000000F480                 db '; e.g.,',0Ah
.rodata:000000000000F480                 db '                           ',27h,'-BM',27h,' prints sizes in unit'
.rodata:000000000000F480                 db 's of 1,048,576 bytes;',0Ah
.rodata:000000000000F480                 db '                           see SIZE format below',0Ah
.rodata:000000000000F480                 db '  -h, --human-readable  print sizes in powers of 1024 (e.g., 1023'
.rodata:000000000000F480                 db 'M)',0Ah
.rodata:000000000000F480                 db '  -H, --si              print sizes in powers of 1000 (e.g., 1.1G'
.rodata:000000000000F480                 db ')',0Ah,0
.rodata:000000000000F61A                 align 20h
.rodata:000000000000F620 ; const char aIInodesListIno[]
.rodata:000000000000F620 aIInodesListIno db '  -i, --inodes          list inode information instead of block u'
.rodata:000000000000F620                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000F620                 db 'sage',0Ah
.rodata:000000000000F620                 db '  -k                    like --block-size=1K',0Ah
.rodata:000000000000F620                 db '  -l, --local           limit listing to local file systems',0Ah
.rodata:000000000000F620                 db '      --no-sync         do not invoke sync before getting usage i'
.rodata:000000000000F620                 db 'nfo (default)',0Ah,0
.rodata:000000000000F71F                 align 20h
.rodata:000000000000F720 ; const char aOutputFieldLis[]
.rodata:000000000000F720 aOutputFieldLis db '      --output[=FIELD_LIST]  use the output format defined by FIE'
.rodata:000000000000F720                                         ; DATA XREF: usage+118↑o
.rodata:000000000000F720                 db 'LD_LIST,',0Ah
.rodata:000000000000F720                 db '                               or print all fields if FIELD_LIST '
.rodata:000000000000F720                 db 'is omitted.',0Ah
.rodata:000000000000F720                 db '  -P, --portability     use the POSIX output format',0Ah
.rodata:000000000000F720                 db '      --sync            invoke sync before getting usage info',0Ah
.rodata:000000000000F720                 db 0
.rodata:000000000000F82A                 align 10h
.rodata:000000000000F830 ; const char aTotalElideAllE[]
.rodata:000000000000F830 aTotalElideAllE db '      --total           elide all entries insignificant to availa'
.rodata:000000000000F830                                         ; DATA XREF: usage+13D↑o
.rodata:000000000000F830                 db 'ble space,',0Ah
.rodata:000000000000F830                 db '                          and produce a grand total',0Ah,0
.rodata:000000000000F8B1                 align 8
.rodata:000000000000F8B8 ; const char aTTypeTypeLimit[]
.rodata:000000000000F8B8 aTTypeTypeLimit db '  -t, --type=TYPE       limit listing to file systems of type TYP'
.rodata:000000000000F8B8                                         ; DATA XREF: usage+162↑o
.rodata:000000000000F8B8                 db 'E',0Ah
.rodata:000000000000F8B8                 db '  -T, --print-type      print file system type',0Ah
.rodata:000000000000F8B8                 db '  -x, --exclude-type=TYPE   limit listing to file systems not of '
.rodata:000000000000F8B8                 db 'type TYPE',0Ah
.rodata:000000000000F8B8                 db '  -v                    (ignored)',0Ah,0
.rodata:000000000000F998 ; const char aHelpDisplayThi[]
.rodata:000000000000F998 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000F998                                         ; DATA XREF: usage+187↑o
.rodata:000000000000F9C5                 align 8
.rodata:000000000000F9C8 ; const char aVersionOutputV[]
.rodata:000000000000F9C8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000F9C8                                         ; DATA XREF: usage+1AC↑o
.rodata:000000000000F9FE                 align 20h
.rodata:000000000000FA00 ; const char aDisplayValuesA[]
.rodata:000000000000FA00 aDisplayValuesA db 0Ah                  ; DATA XREF: usage+1CA↑o
.rodata:000000000000FA00                 db 'Display values are in units of the first available SIZE from --bl'
.rodata:000000000000FA00                 db 'ock-size,',0Ah
.rodata:000000000000FA00                 db 'and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment varia'
.rodata:000000000000FA00                 db 'bles.',0Ah
.rodata:000000000000FA00                 db 'Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT'
.rodata:000000000000FA00                 db ' is set).',0Ah,0
.rodata:000000000000FADF                 align 20h
.rodata:000000000000FAE0 ; const char aTheSizeArgumen[]
.rodata:000000000000FAE0 aTheSizeArgumen db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:000000000000FAE0                 db 'The SIZE argument is an integer and optional unit (example: 10K i'
.rodata:000000000000FAE0                 db 's 10*1024).',0Ah
.rodata:000000000000FAE0                 db 'Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers o'
.rodata:000000000000FAE0                 db 'f 1000).',0Ah
.rodata:000000000000FAE0                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:000000000000FBB4                 align 8
.rodata:000000000000FBB8 ; const char aFieldListIsACo[]
.rodata:000000000000FBB8 aFieldListIsACo db 0Ah                  ; DATA XREF: usage+21F↑o
.rodata:000000000000FBB8                 db 'FIELD_LIST is a comma-separated list of columns to be included.  '
.rodata:000000000000FBB8                 db 'Valid',0Ah
.rodata:000000000000FBB8                 db 'field names are: ',27h,'source',27h,', ',27h,'fstype',27h,', ',27h
.rodata:000000000000FBB8                 db 'itotal',27h,', ',27h,'iused',27h,', ',27h,'iavail',27h,', ',27h,'i'
.rodata:000000000000FBB8                 db 'pcent',27h,',',0Ah
.rodata:000000000000FBB8                 db 27h,'size',27h,', ',27h,'used',27h,', ',27h,'avail',27h,', ',27h,'p'
.rodata:000000000000FBB8                 db 'cent',27h,', ',27h,'file',27h,' and ',27h,'target',27h,' (see inf'
.rodata:000000000000FBB8                 db 'o page).',0Ah,0
.rodata:000000000000FC94                 align 8
.rodata:000000000000FC98 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000FC98                                         ; DATA XREF: usage+317↑o
.rodata:000000000000FC98                                         ; usage+37B↑o ...
.rodata:000000000000FCC0 ; const char aReportAnyTrans[]
.rodata:000000000000FCC0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000FCC0                                         ; DATA XREF: usage+46F↑o
.rodata:000000000000FCC0                 db 'am/>',0Ah,0
.rodata:000000000000FD07                 align 8
.rodata:000000000000FD08 ; const char aOrAvailableLoc[]
.rodata:000000000000FD08 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000FD08                                         ; DATA XREF: usage:loc_5116↑o
.rodata:000000000000FD3B                 align 20h
.rodata:000000000000FD40 aOptionOutputFi_0 db 'option --output: field %s used more than once',0
.rodata:000000000000FD40                                         ; DATA XREF: decode_output_arg+140↑o
.rodata:000000000000FD6E                 align 10h
.rodata:000000000000FD70 ; const char aOptionOutputFi[]
.rodata:000000000000FD70 aOptionOutputFi db 'option --output: field %s unknown',0
.rodata:000000000000FD70                                         ; DATA XREF: decode_output_arg+76↑o
.rodata:000000000000FD92                 align 8
.rodata:000000000000FD98 ; const char msgid[]
.rodata:000000000000FD98 msgid           db 'options %s and %s are mutually exclusive',0
.rodata:000000000000FD98                                         ; DATA XREF: main+80↑o
.rodata:000000000000FDC1                 align 8
.rodata:000000000000FDC8 ; const char aFileSystemType[]
.rodata:000000000000FDC8 aFileSystemType db 'file system type %s both selected and excluded',0
.rodata:000000000000FDC8                                         ; DATA XREF: main+4DE↑o
.rodata:000000000000FDF7                 align 8
.rodata:000000000000FDF8 ; const char aCannotReadTabl[]
.rodata:000000000000FDF8 aCannotReadTabl db 'cannot read table of mounted file systems',0
.rodata:000000000000FDF8                                         ; DATA XREF: main:loc_392A↑o
.rodata:000000000000FE22                 align 8
.rodata:000000000000FE28 aSourceFstypeIt db 'source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,fi'
.rodata:000000000000FE28                                         ; DATA XREF: main+B6C↑o
.rodata:000000000000FE28                 db 'le,target',0
.rodata:000000000000FE73                 align 8
.rodata:000000000000FE78 ; const char aCannotAccessSO[]
.rodata:000000000000FE78 aCannotAccessSO db 'cannot access %s: over-mounted by another device',0
.rodata:000000000000FE78                                         ; DATA XREF: main+1405↑o
.rodata:000000000000FEA9                 align 10h
.rodata:000000000000FEB0 xmmword_FEB0    xmmword 8000000000000000h
.rodata:000000000000FEB0                                         ; DATA XREF: get_dev:loc_4948↑r
.rodata:000000000000FEB0                                         ; get_dev:loc_4A25↑r
.rodata:000000000000FEC0 qword_FEC0      dq 4059000000000000h    ; DATA XREF: get_dev:loc_4968↑r
.rodata:000000000000FEC0                                         ; hash_print_statistics+A5↑r ...
.rodata:000000000000FEC8 qword_FEC8      dq 3FF0000000000000h    ; DATA XREF: get_dev+620↑r
.rodata:000000000000FED0 ; const char aCannotGetCurre[]
.rodata:000000000000FED0 aCannotGetCurre db 'cannot get current directory',0
.rodata:000000000000FED0                                         ; DATA XREF: find_mount_point:loc_56E5↑o
.rodata:000000000000FEED ; const char aCannotChangeTo[]
.rodata:000000000000FEED aCannotChangeTo db 'cannot change to directory %s',0
.rodata:000000000000FEED                                         ; DATA XREF: find_mount_point+2CB↑o
.rodata:000000000000FEED                                         ; find_mount_point+359↑o
.rodata:000000000000FF0B ; const char filename[]
.rodata:000000000000FF0B filename        db '..',0               ; DATA XREF: find_mount_point+D4↑o
.rodata:000000000000FF0B                                         ; find_mount_point+1AB↑o ...
.rodata:000000000000FF0E ; const char aCannotStatS[]
.rodata:000000000000FF0E aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: find_mount_point+1BC↑o
.rodata:000000000000FF1D                 align 20h
.rodata:000000000000FF20 ; const char aCannotStatCurr[]
.rodata:000000000000FF20 aCannotStatCurr db 'cannot stat current directory (now %s)',0
.rodata:000000000000FF20                                         ; DATA XREF: find_mount_point+30D↑o
.rodata:000000000000FF47                 align 8
.rodata:000000000000FF48 ; const char aFailedToReturn[]
.rodata:000000000000FF48 aFailedToReturn db 'failed to return to initial working directory',0
.rodata:000000000000FF48                                         ; DATA XREF: find_mount_point:loc_570E↑o
.rodata:000000000000FF76 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000FF7B ; const char aWriteError[]
.rodata:000000000000FF7B aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5DE3↑o
.rodata:000000000000FF7B                                         ; read_file_system_list+4↑o ...
.rodata:000000000000FF87 ; const char aSS_1[]
.rodata:000000000000FF87 aSS_1           db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000FF8E aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000FF8E                                         ; DATA XREF: hash_print_statistics:loc_65E5↑o
.rodata:000000000000FFA6 aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000FFA6                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000FFBE aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000FFBE                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000FFD6                 align 8
.rodata:000000000000FFD8 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000FFD8                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000FFF9                 align 20h
.rodata:0000000000010000 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:0000000000010000                                         ; hash_initialize:loc_6A50↑o
.rodata:0000000000010001                 db    0
.rodata:0000000000010002                 db    0
.rodata:0000000000010003                 db    0
.rodata:0000000000010004                 db    0
.rodata:0000000000010005                 db    0
.rodata:0000000000010006                 db  80h
.rodata:0000000000010007                 db  3Fh ; ?
.rodata:0000000000010008                 db 0CDh
.rodata:0000000000010009                 db 0CCh
.rodata:000000000001000A                 db  4Ch ; L
.rodata:000000000001000B                 db  3Fh ; ?
.rodata:000000000001000C                 db 0F4h
.rodata:000000000001000D                 db 0FDh
.rodata:000000000001000E                 db 0B4h
.rodata:000000000001000F                 db  3Fh ; ?
.rodata:0000000000010010                 db    0
.rodata:0000000000010011                 db    0
.rodata:0000000000010012                 db    0
.rodata:0000000000010013                 db    0
.rodata:0000000000010014 dword_10014     dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:0000000000010014                                         ; check_tuning+4A↑r
.rodata:0000000000010018 dword_10018     dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000001001C dword_1001C     dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:0000000000010020 dword_10020     dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:0000000000010024 dword_10024     dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:0000000000010028 dword_10028     dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000001002C dword_1002C     dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000001002C                                         ; hash_rehash+40↑r ...
.rodata:0000000000010030 dword_10030     dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:0000000000010030                                         ; hash_initialize+150↑r ...
.rodata:0000000000010034 a0lf            db '%.0Lf',0            ; DATA XREF: human_readable+310↑o
.rodata:0000000000010034                                         ; human_readable+749↑o
.rodata:000000000001003A a1lf            db '%.1Lf',0            ; DATA XREF: human_readable+1A1↑o
.rodata:000000000001003A                                         ; human_readable+6F4↑o
.rodata:0000000000010040 ; const char aBlocksize[]
.rodata:0000000000010040 aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: human_options+158↑o
.rodata:000000000001004A aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.rodata:000000000001004A                                         ; DATA XREF: human_options:loc_7FF8↑o
.rodata:000000000001005C                 align 20h
.rodata:0000000000010060 block_size_opts db 0B0h                 ; DATA XREF: human_options:loc_7F9C↑o
.rodata:0000000000010060                                         ; human_options+5B↑o
.rodata:0000000000010061                 db    0
.rodata:0000000000010062                 db    0
.rodata:0000000000010063                 db    0
.rodata:0000000000010064                 db  90h
.rodata:0000000000010065                 db    0
.rodata:0000000000010066                 db    0
.rodata:0000000000010067                 db    0
.rodata:0000000000010068 power_letter    db    0                 ; DATA XREF: human_readable:loc_791C↑o
.rodata:0000000000010069                 db  4Bh ; K
.rodata:000000000001006A                 db  4Dh ; M
.rodata:000000000001006B                 db  47h ; G
.rodata:000000000001006C                 db  54h ; T
.rodata:000000000001006D                 db  50h ; P
.rodata:000000000001006E                 db  45h ; E
.rodata:000000000001006F                 db  5Ah ; Z
.rodata:0000000000010070                 db  59h ; Y
.rodata:0000000000010071                 db    0
.rodata:0000000000010072                 db    0
.rodata:0000000000010073                 db    0
.rodata:0000000000010074 flt_10074       dd 10.0                 ; DATA XREF: human_readable+1FC↑r
.rodata:0000000000010074                                         ; human_readable+73B↑r ...
.rodata:0000000000010078                 align 20h
.rodata:0000000000010080 tbyte_10080     dt 1.8446744073709551615e19
.rodata:0000000000010080                                         ; DATA XREF: human_readable+189↑r
.rodata:0000000000010080                                         ; human_readable+2FE↑r ...
.rodata:000000000001008A                 align 10h
.rodata:0000000000010090 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000010090                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000100C8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000100C8                                         ; canonicalize_filename_mode+296↑o ...
.rodata:00000000000100D0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000100D4 unk_100D4       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000100D5                 db  80h
.rodata:00000000000100D6                 db  98h
.rodata:00000000000100D7                 db    0
.rodata:00000000000100D8 unk_100D8       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000100D9                 db  80h
.rodata:00000000000100DA                 db  99h
.rodata:00000000000100DB                 db    0
.rodata:00000000000100DC unk_100DC       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000100DD                 db    7
.rodata:00000000000100DE                 db  65h ; e
.rodata:00000000000100DF                 db    0
.rodata:00000000000100E0 unk_100E0       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000100E1                 db 0AFh
.rodata:00000000000100E2                 db    0
.rodata:00000000000100E3 ; const char asc_100E3[2]
.rodata:00000000000100E3 asc_100E3       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000100E3                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000100E5 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000100ED aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000213AC8↓o
.rodata:00000000000100F3 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000213AD0↓o
.rodata:0000000000010100 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000213AD8↓o
.rodata:0000000000010100                                         ; .data.rel.ro:0000000000213AF8↓o
.rodata:000000000001010D aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000001010D                                         ; DATA XREF: .data.rel.ro:0000000000213AE0↓o
.rodata:0000000000010121 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000213AF0↓o
.rodata:0000000000010129 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000213B08↓o
.rodata:0000000000010131                 align 20h
.rodata:0000000000010140 jpt_8A21        dd offset loc_97CA - 10140h
.rodata:0000000000010140                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000010140                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000010140                 dd offset loc_8A23 - 10140h ; jump table for switch statement
.rodata:0000000000010140                 dd offset loc_99F8 - 10140h
.rodata:0000000000010140                 dd offset loc_9804 - 10140h
.rodata:0000000000010140                 dd offset loc_95F4 - 10140h
.rodata:0000000000010140                 dd offset loc_9650 - 10140h
.rodata:0000000000010140                 dd offset loc_96A5 - 10140h
.rodata:0000000000010140                 dd offset loc_96EA - 10140h
.rodata:0000000000010140                 dd offset loc_9724 - 10140h
.rodata:0000000000010140                 dd offset loc_9724 - 10140h
.rodata:0000000000010140                 dd offset loc_9724 - 10140h
.rodata:000000000001016C jpt_8B7E        dd offset loc_8DA0 - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000001016C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch ; jump table for switch statement
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset loc_8DE0 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8CE8 - 1016Ch, offset loc_8CA8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E70 - 1016Ch, offset loc_8E60 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E50 - 1016Ch, offset loc_8E40 - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset def_8B7E - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E30 - 1016Ch, offset loc_8E20 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8DF0 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8C83 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8E20 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8E20 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8E20 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8C53 - 1016Ch
.rodata:000000000001016C                 dd offset def_8B7E - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8E20 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8CF8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8DC8 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DC8 - 1016Ch, offset loc_8B83 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8E20 - 1016Ch, offset loc_8B83 - 1016Ch
.rodata:000000000001016C                 dd offset loc_8DF0 - 1016Ch
.rodata:0000000000010368 jpt_8F0A        dd offset loc_8F70 - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000010368                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h ; jump table for switch statement
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset loc_8F60 - 10368h
.rodata:0000000000010368                 dd offset loc_90B0 - 10368h, offset loc_9098 - 10368h
.rodata:0000000000010368                 dd offset loc_8F48 - 10368h, offset loc_9088 - 10368h
.rodata:0000000000010368                 dd offset loc_8F30 - 10368h, offset loc_9070 - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset def_8F0A - 10368h
.rodata:0000000000010368                 dd offset loc_9058 - 10368h, offset loc_9040 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9028 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_8C80 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9040 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9040 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9040 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_8C50 - 10368h
.rodata:0000000000010368                 dd offset def_8F0A - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9040 - 10368h
.rodata:0000000000010368                 dd offset loc_8F10 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_9010 - 10368h
.rodata:0000000000010368                 dd offset loc_9010 - 10368h, offset loc_8B80 - 10368h
.rodata:0000000000010368                 dd offset loc_9040 - 10368h, offset loc_8B80 - 10368h
.rodata:0000000000010368                 dd offset loc_9028 - 10368h
.rodata:0000000000010564                 align 20h
.rodata:0000000000010580                 public quoting_style_vals
.rodata:0000000000010580 quoting_style_vals db    0
.rodata:0000000000010581                 db    0
.rodata:0000000000010582                 db    0
.rodata:0000000000010583                 db    0
.rodata:0000000000010584                 db    1
.rodata:0000000000010585                 db    0
.rodata:0000000000010586                 db    0
.rodata:0000000000010587                 db    0
.rodata:0000000000010588                 db    2
.rodata:0000000000010589                 db    0
.rodata:000000000001058A                 db    0
.rodata:000000000001058B                 db    0
.rodata:000000000001058C                 db    3
.rodata:000000000001058D                 db    0
.rodata:000000000001058E                 db    0
.rodata:000000000001058F                 db    0
.rodata:0000000000010590                 db    4
.rodata:0000000000010591                 db    0
.rodata:0000000000010592                 db    0
.rodata:0000000000010593                 db    0
.rodata:0000000000010594                 db    5
.rodata:0000000000010595                 db    0
.rodata:0000000000010596                 db    0
.rodata:0000000000010597                 db    0
.rodata:0000000000010598                 db    6
.rodata:0000000000010599                 db    0
.rodata:000000000001059A                 db    0
.rodata:000000000001059B                 db    0
.rodata:000000000001059C                 db    7
.rodata:000000000001059D                 db    0
.rodata:000000000001059E                 db    0
.rodata:000000000001059F                 db    0
.rodata:00000000000105A0                 db    8
.rodata:00000000000105A1                 db    0
.rodata:00000000000105A2                 db    0
.rodata:00000000000105A3                 db    0
.rodata:00000000000105A4                 db    9
.rodata:00000000000105A5                 db    0
.rodata:00000000000105A6                 db    0
.rodata:00000000000105A7                 db    0
.rodata:00000000000105A8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000105B4 aSS_2           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000105BB ; const char aC_0[]
.rodata:00000000000105BB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_A7EC↑o
.rodata:00000000000105BF ; const char aWrittenByS[]
.rodata:00000000000105BF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000105BF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000105CF ; const char aWrittenBySAndS[]
.rodata:00000000000105CF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000105CF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000105E6 ; const char aWrittenBySSAnd[]
.rodata:00000000000105E6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000105E6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000010602 ; const char aReportBugsToS[]
.rodata:0000000000010602 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000010602                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000010617 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000010617                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000001062D ; const char aSHomePageS[]
.rodata:000000000001062D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001062D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000010641                 align 8
.rodata:0000000000010648 ; const char aLicenseGplv3Gn[]
.rodata:0000000000010648 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000010648                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000010648                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000010648                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000010648                 db '.',0Ah
.rodata:0000000000010648                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000010648                 db 0Ah,0
.rodata:0000000000010714                 align 8
.rodata:0000000000010718 ; const char aWrittenBySSSAn[]
.rodata:0000000000010718 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000010718                                         ; DATA XREF: version_etc_arn:loc_AA40↑o
.rodata:0000000000010718                 db 'and %s.',0Ah,0
.rodata:0000000000010738 ; const char aWrittenBySSSSA[]
.rodata:0000000000010738 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000010738                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000010738                 db '%s, and %s.',0Ah,0
.rodata:000000000001075C                 align 20h
.rodata:0000000000010760 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000010760 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000010760                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000010760                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000010788 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000010788 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000010788                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000010788                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000107B4                 align 8
.rodata:00000000000107B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000107B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000107B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000107B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000107B8                 db 'and %s.',0Ah,0
.rodata:00000000000107E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000107E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000107E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000107E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000107E8                 db '%s, and %s.',0Ah,0
.rodata:000000000001081C                 align 20h
.rodata:0000000000010820 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000010820                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000010820                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000010820                 db '%s, %s, and others.',0Ah,0
.rodata:000000000001085C                 align 20h
.rodata:0000000000010860 ; const char aGeneralHelpUsi[]
.rodata:0000000000010860 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000010860                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000010860                 db 0
.rodata:00000000000108A1                 align 4
.rodata:00000000000108A4 jpt_A854        dd offset loc_A8D6 - 108A4h
.rodata:00000000000108A4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000108A4                                         ; version_etc_arn+9D↑r
.rodata:00000000000108A4                 dd offset loc_A968 - 108A4h ; jump table for switch statement
.rodata:00000000000108A4                 dd offset loc_A9A8 - 108A4h
.rodata:00000000000108A4                 dd offset loc_A9F0 - 108A4h
.rodata:00000000000108A4                 dd offset loc_AA40 - 108A4h
.rodata:00000000000108A4                 dd offset loc_AA98 - 108A4h
.rodata:00000000000108A4                 dd offset loc_AAC8 - 108A4h
.rodata:00000000000108A4                 dd offset loc_AB30 - 108A4h
.rodata:00000000000108A4                 dd offset loc_A860 - 108A4h
.rodata:00000000000108A4                 dd offset loc_A910 - 108A4h
.rodata:00000000000108CC                 align 20h
.rodata:00000000000108E0                 public version_etc_copyright
.rodata:00000000000108E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000108E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000001090F ; const char aMemoryExhauste[]
.rodata:000000000001090F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000010920 aInvalidSSArgum db 'invalid %s%s argument ',27h,'%s',27h,0
.rodata:0000000000010920                                         ; DATA XREF: xstrtol_fatal+87↑o
.rodata:000000000001093B ; const char aSSArgumentSToo[]
.rodata:000000000001093B aSSArgumentSToo db '%s%s argument ',27h,'%s',27h,' too large',0
.rodata:000000000001093B                                         ; DATA XREF: xstrtol_fatal+33↑o
.rodata:0000000000010958 asc_10958       db '--',0               ; DATA XREF: xstrtol_fatal+48↑o
.rodata:0000000000010958                                         ; xstrtol_fatal:loc_B122↑o ...
.rodata:000000000001095B                 align 20h
.rodata:0000000000010960 aInvalidSuffixI db 'invalid suffix in %s%s argument ',27h,'%s',27h,0
.rodata:0000000000010960                                         ; DATA XREF: xstrtol_fatal:loc_B10B↑o
.rodata:0000000000010985                 align 8
.rodata:0000000000010988 ; const char aCoreutils831Li[]
.rodata:0000000000010988 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000010988                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:00000000000109A8 ; const char a0StrtolBaseStr[]
.rodata:00000000000109A8 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:00000000000109A8                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:00000000000109CE                 align 10h
.rodata:00000000000109D0 jpt_B316        dd offset loc_B466 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:00000000000109D0                                         ; xstrtoumax+1CF↑r
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B443 - 109D0h ; jump table for switch statement
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B47C - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B3FF - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B318 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset loc_B420 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset loc_B3DF - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B3BA - 109D0h
.rodata:00000000000109D0                 dd offset loc_B394 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset loc_B37D - 109D0h, offset loc_B340 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B47C - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B3FF - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B318 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset loc_B3DF - 109D0h, offset def_B316 - 109D0h
.rodata:00000000000109D0                 dd offset def_B316 - 109D0h, offset loc_B367 - 109D0h
.rodata:0000000000010AA8 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000010AA8 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000010AA8                                         ; DATA XREF: xstrtoumax:loc_B4C5↑o
.rodata:0000000000010AB3                 align 8
.rodata:0000000000010AB8 ; const char aCoreutils831Li_0[]
.rodata:0000000000010AB8 aCoreutils831Li_0 db '../coreutils-8.31/lib/chdir-long.c',0
.rodata:0000000000010AB8                                         ; DATA XREF: cdb_free+29↑o
.rodata:0000000000010AB8                                         ; chdir_long+239↑o ...
.rodata:0000000000010ADB ; const char aCloseFail[]
.rodata:0000000000010ADB aCloseFail      db '! close_fail',0     ; DATA XREF: cdb_free+30↑o
.rodata:0000000000010AE8 ; const char a0Len[]
.rodata:0000000000010AE8 a0Len           db '0 < len',0          ; DATA XREF: chdir_long+264↑o
.rodata:0000000000010AF0 ; const char a4096Len[]
.rodata:0000000000010AF0 a4096Len        db '4096 <= len',0      ; DATA XREF: chdir_long+283↑o
.rodata:0000000000010AFC ; const char aDir[]
.rodata:0000000000010AFC aDir            db '*dir != ',27h,'/',27h,0
.rodata:0000000000010AFC                                         ; DATA XREF: chdir_long+2C1↑o
.rodata:0000000000010AFC                                         ; gettext_quote+27↑o ...
.rodata:0000000000010B08 ; const char aDirDirEnd[]
.rodata:0000000000010B08 aDirDirEnd      db 'dir <= dir_end',0   ; DATA XREF: chdir_long+2A2↑o
.rodata:0000000000010B17 ; const char aSlashDir4096[]
.rodata:0000000000010B17 aSlashDir4096   db 'slash - dir < 4096',0
.rodata:0000000000010B17                                         ; DATA XREF: chdir_long+240↑o
.rodata:0000000000010B2A                 align 10h
.rodata:0000000000010B30 ; const char _PRETTY_FUNCTION___5081[]
.rodata:0000000000010B30 __PRETTY_FUNCTION___5081 db 'cdb_free',0
.rodata:0000000000010B30                                         ; DATA XREF: cdb_free:loc_B642↑o
.rodata:0000000000010B39                 align 20h
.rodata:0000000000010B40 ; const char _PRETTY_FUNCTION___5099[]
.rodata:0000000000010B40 __PRETTY_FUNCTION___5099 db 'chdir_long',0
.rodata:0000000000010B40                                         ; DATA XREF: chdir_long:loc_B8E2↑o
.rodata:0000000000010B40                                         ; chdir_long:loc_B906↑o ...
.rodata:0000000000010B4B ; const char a2636[]
.rodata:0000000000010B4B a2636           db '2.6.36',0           ; DATA XREF: get_fs_usage+F7↑o
.rodata:0000000000010B52 ; const char aProcSelfMounti[]
.rodata:0000000000010B52 aProcSelfMounti db '/proc/self/mountinfo',0
.rodata:0000000000010B52                                         ; DATA XREF: read_file_system_list+F↑o
.rodata:0000000000010B67 ; const char needle[]
.rodata:0000000000010B67 needle          db ' - ',0              ; DATA XREF: read_file_system_list+CB↑o
.rodata:0000000000010B6B ; const char aNSNNSNC[]
.rodata:0000000000010B6B aNSNNSNC        db ' - %n%*s%n %n%*s%n %c',0
.rodata:0000000000010B6B                                         ; DATA XREF: read_file_system_list+F7↑o
.rodata:0000000000010B81 aAutofs         db 'autofs',0           ; DATA XREF: read_file_system_list+1E4↑o
.rodata:0000000000010B81                                         ; read_file_system_list+4A7↑o
.rodata:0000000000010B88 aProc           db 'proc',0             ; DATA XREF: read_file_system_list+23C↑o
.rodata:0000000000010B88                                         ; read_file_system_list+539↑o
.rodata:0000000000010B8D aSubfs          db 'subfs',0            ; DATA XREF: read_file_system_list:loc_BF28↑o
.rodata:0000000000010B8D                                         ; read_file_system_list+557↑o
.rodata:0000000000010B93 aDebugfs        db 'debugfs',0          ; DATA XREF: read_file_system_list+326↑o
.rodata:0000000000010B93                                         ; read_file_system_list+575↑o
.rodata:0000000000010B9B aDevpts         db 'devpts',0           ; DATA XREF: read_file_system_list+344↑o
.rodata:0000000000010B9B                                         ; read_file_system_list+593↑o
.rodata:0000000000010BA2 aFusectl        db 'fusectl',0          ; DATA XREF: read_file_system_list+362↑o
.rodata:0000000000010BA2                                         ; read_file_system_list+5B1↑o
.rodata:0000000000010BAA aMqueue         db 'mqueue',0           ; DATA XREF: read_file_system_list+380↑o
.rodata:0000000000010BAA                                         ; read_file_system_list+5CF↑o
.rodata:0000000000010BB1 aRpcPipefs      db 'rpc_pipefs',0       ; DATA XREF: read_file_system_list+39E↑o
.rodata:0000000000010BB1                                         ; read_file_system_list+5ED↑o
.rodata:0000000000010BBC aSysfs          db 'sysfs',0            ; DATA XREF: read_file_system_list+3BC↑o
.rodata:0000000000010BBC                                         ; read_file_system_list+60B↑o
.rodata:0000000000010BC2 aDevfs          db 'devfs',0            ; DATA XREF: read_file_system_list+3DA↑o
.rodata:0000000000010BC2                                         ; read_file_system_list+625↑o
.rodata:0000000000010BC8 aKernfs         db 'kernfs',0           ; DATA XREF: read_file_system_list+3F8↑o
.rodata:0000000000010BC8                                         ; read_file_system_list+63F↑o
.rodata:0000000000010BCF ; const char aIgnore[]
.rodata:0000000000010BCF aIgnore         db 'ignore',0           ; DATA XREF: read_file_system_list+416↑o
.rodata:0000000000010BCF                                         ; read_file_system_list+659↑o
.rodata:0000000000010BD6 ; const char aNone[]
.rodata:0000000000010BD6 aNone           db 'none',0             ; DATA XREF: read_file_system_list+436↑o
.rodata:0000000000010BD6                                         ; read_file_system_list+675↑o
.rodata:0000000000010BDB aSmbfs          db 'smbfs',0            ; DATA XREF: read_file_system_list+78B↑o
.rodata:0000000000010BDB                                         ; read_file_system_list+7D7↑o
.rodata:0000000000010BE1 aCifs           db 'cifs',0             ; DATA XREF: read_file_system_list+7A9↑o
.rodata:0000000000010BE1                                         ; read_file_system_list+7F5↑o
.rodata:0000000000010BE6 aHosts          db '-hosts',0           ; DATA XREF: read_file_system_list:loc_C07A↑o
.rodata:0000000000010BE6                                         ; read_file_system_list:loc_C37E↑o
.rodata:0000000000010BED ; const char aEtcMtab[]
.rodata:0000000000010BED aEtcMtab        db '/etc/mtab',0        ; DATA XREF: read_file_system_list+487↑o
.rodata:0000000000010BF7 ; const char opt[]
.rodata:0000000000010BF7 opt             db 'bind',0             ; DATA XREF: read_file_system_list:loc_C0E0↑o
.rodata:0000000000010BFC                 align 20h
.rodata:0000000000010C00 ; const char aUUUUNSNNSNC[]
.rodata:0000000000010C00 aUUUUNSNNSNC    db '%*u %*u %u:%u %n%*s%n %n%*s%n%c',0
.rodata:0000000000010C00                                         ; DATA XREF: read_file_system_list+90↑o
.rodata:0000000000010C20 ; const char aInvalidArgumen[]
.rodata:0000000000010C20 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000010C20                                         ; DATA XREF: argmatch_invalid:loc_C770↑o
.rodata:0000000000010C3B ; const char aAmbiguousArgum[]
.rodata:0000000000010C3B aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000010C3B                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000010C58 ; const char aValidArguments[]
.rodata:0000000000010C58 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000010C58                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000010C6D aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000010C6D                 db '  - %s',0
.rodata:0000000000010C75 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000010C75                                         ; main+586↑o ...
.rodata:0000000000010C7A aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000010C7C aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_CAA0↑o
.rodata:0000000000010C82 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000010C82                                         ; locale_charset:loc_CB30↑o
.rodata:0000000000010C88 jpt_D1FB        dd offset def_D1FB - 10C88h
.rodata:0000000000010C88                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000010C88                                         ; vasnprintf+554↑r
.rodata:0000000000010C88                 dd offset loc_D660 - 10C88h ; jump table for switch statement
.rodata:0000000000010C88                 dd offset loc_D630 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D5A8 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D568 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D338 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D338 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D4E8 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D460 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D338 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D338 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010C88                 dd offset loc_D200 - 10C88h
.rodata:0000000000010CD0 jpt_D7A0        dd offset loc_DA10 - 10CD0h
.rodata:0000000000010CD0                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000010CD0                                         ; vasnprintf+AF9↑r
.rodata:0000000000010CD0                 dd offset loc_DA30 - 10CD0h ; jump table for switch statement
.rodata:0000000000010CD0                 dd offset loc_DA20 - 10CD0h
.rodata:0000000000010CD0                 dd offset loc_D8E0 - 10CD0h
.rodata:0000000000010CD0                 dd offset loc_D8E0 - 10CD0h
.rodata:0000000000010CE4 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000010CEB                 align 10h
.rodata:0000000000010CF0 jpt_E086        dd offset def_E086 - 10CF0h
.rodata:0000000000010CF0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000010CF0                                         ; printf_fetchargs+2F↑r
.rodata:0000000000010CF0                 dd offset loc_E10C - 10CF0h ; jump table for switch statement
.rodata:0000000000010CF0                 dd offset loc_E10C - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E12E - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E12E - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0EA - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0EA - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E182 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E090 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0EA - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0EA - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E154 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E1B0 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010CF0                 dd offset loc_E0C6 - 10CF0h
.rodata:0000000000010D4C                 align 10h
.rodata:0000000000010D50 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000010D51                 db    0
.rodata:0000000000010D52                 db    0
.rodata:0000000000010D53                 db    0
.rodata:0000000000010D54                 db  4Eh ; N
.rodata:0000000000010D55                 db    0
.rodata:0000000000010D56                 db    0
.rodata:0000000000010D57                 db    0
.rodata:0000000000010D58                 db  55h ; U
.rodata:0000000000010D59                 db    0
.rodata:0000000000010D5A                 db    0
.rodata:0000000000010D5B                 db    0
.rodata:0000000000010D5C                 db  4Ch ; L
.rodata:0000000000010D5D                 db    0
.rodata:0000000000010D5E                 db    0
.rodata:0000000000010D5F                 db    0
.rodata:0000000000010D60                 db  4Ch ; L
.rodata:0000000000010D61                 db    0
.rodata:0000000000010D62                 db    0
.rodata:0000000000010D63                 db    0
.rodata:0000000000010D64                 db  29h ; )
.rodata:0000000000010D65                 db    0
.rodata:0000000000010D66                 db    0
.rodata:0000000000010D67                 db    0
.rodata:0000000000010D68                 db    0
.rodata:0000000000010D69                 db    0
.rodata:0000000000010D6A                 db    0
.rodata:0000000000010D6B                 db    0
.rodata:0000000000010D6C jpt_E495        dd offset loc_E50B - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                                         ; DATA XREF: printf_parse+234↑o
.rodata:0000000000010D6C                                         ; printf_parse+23E↑r
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch ; jump table for switch statement
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA0B - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA2C - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA0B - 10D6Ch, offset loc_EA0B - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA0B - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_E497 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset loc_EA3C - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA0B - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_E998 - 10D6Ch, offset loc_E9AB - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA0B - 10D6Ch, offset loc_EA0B - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA0B - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_E9AB - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset loc_E94C - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA3C - 10D6Ch, offset loc_EA90 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_E9F8 - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset loc_EA3C - 10D6Ch, offset def_E495 - 10D6Ch
.rodata:0000000000010D6C                 dd offset def_E495 - 10D6Ch, offset loc_EA3C - 10D6Ch
.rodata:0000000000010D6C _rodata         ends
.rodata:0000000000010D6C
.eh_frame_hdr:0000000000010EBC ; ===========================================================================
.eh_frame_hdr:0000000000010EBC
.eh_frame_hdr:0000000000010EBC ; Segment type: Pure data
.eh_frame_hdr:0000000000010EBC ; Segment permissions: Read
.eh_frame_hdr:0000000000010EBC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000010EBC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000010EBC                 ;org 10EBCh
.eh_frame_hdr:0000000000010EBC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000010EBD                 db  1Bh
.eh_frame_hdr:0000000000010EBE                 db    3
.eh_frame_hdr:0000000000010EBF                 db  3Bh ; ;
.eh_frame_hdr:0000000000010EC0                 db  38h ; 8
.eh_frame_hdr:0000000000010EC1                 db    5
.eh_frame_hdr:0000000000010EC2                 db    0
.eh_frame_hdr:0000000000010EC3                 db    0
.eh_frame_hdr:0000000000010EC4                 db 0A6h
.eh_frame_hdr:0000000000010EC5                 db    0
.eh_frame_hdr:0000000000010EC6                 db    0
.eh_frame_hdr:0000000000010EC7                 db    0
.eh_frame_hdr:0000000000010EC8                 db  84h
.eh_frame_hdr:0000000000010EC9                 db  11h
.eh_frame_hdr:0000000000010ECA                 db 0FFh
.eh_frame_hdr:0000000000010ECB                 db 0FFh
.eh_frame_hdr:0000000000010ECC                 db  84h
.eh_frame_hdr:0000000000010ECD                 db    5
.eh_frame_hdr:0000000000010ECE                 db    0
.eh_frame_hdr:0000000000010ECF                 db    0
.eh_frame_hdr:0000000000010ED0                 db 0F4h
.eh_frame_hdr:0000000000010ED1                 db  16h
.eh_frame_hdr:0000000000010ED2                 db 0FFh
.eh_frame_hdr:0000000000010ED3                 db 0FFh
.eh_frame_hdr:0000000000010ED4                 db 0ACh
.eh_frame_hdr:0000000000010ED5                 db    5
.eh_frame_hdr:0000000000010ED6                 db    0
.eh_frame_hdr:0000000000010ED7                 db    0
.eh_frame_hdr:0000000000010ED8                 db    4
.eh_frame_hdr:0000000000010ED9                 db  17h
.eh_frame_hdr:0000000000010EDA                 db 0FFh
.eh_frame_hdr:0000000000010EDB                 db 0FFh
.eh_frame_hdr:0000000000010EDC                 db  70h ; p
.eh_frame_hdr:0000000000010EDD                 db    8
.eh_frame_hdr:0000000000010EDE                 db    0
.eh_frame_hdr:0000000000010EDF                 db    0
.eh_frame_hdr:0000000000010EE0                 db 0E4h
.eh_frame_hdr:0000000000010EE1                 db  2Ch ; ,
.eh_frame_hdr:0000000000010EE2                 db 0FFh
.eh_frame_hdr:0000000000010EE3                 db 0FFh
.eh_frame_hdr:0000000000010EE4                 db  54h ; T
.eh_frame_hdr:0000000000010EE5                 db    5
.eh_frame_hdr:0000000000010EE6                 db    0
.eh_frame_hdr:0000000000010EE7                 db    0
.eh_frame_hdr:0000000000010EE8                 db 0F4h
.eh_frame_hdr:0000000000010EE9                 db  2Dh ; -
.eh_frame_hdr:0000000000010EEA                 db 0FFh
.eh_frame_hdr:0000000000010EEB                 db 0FFh
.eh_frame_hdr:0000000000010EEC                 db 0C4h
.eh_frame_hdr:0000000000010EED                 db    5
.eh_frame_hdr:0000000000010EEE                 db    0
.eh_frame_hdr:0000000000010EEF                 db    0
.eh_frame_hdr:0000000000010EF0                 db  24h ; $
.eh_frame_hdr:0000000000010EF1                 db  2Eh ; .
.eh_frame_hdr:0000000000010EF2                 db 0FFh
.eh_frame_hdr:0000000000010EF3                 db 0FFh
.eh_frame_hdr:0000000000010EF4                 db 0D8h
.eh_frame_hdr:0000000000010EF5                 db    5
.eh_frame_hdr:0000000000010EF6                 db    0
.eh_frame_hdr:0000000000010EF7                 db    0
.eh_frame_hdr:0000000000010EF8                 db  34h ; 4
.eh_frame_hdr:0000000000010EF9                 db  2Eh ; .
.eh_frame_hdr:0000000000010EFA                 db 0FFh
.eh_frame_hdr:0000000000010EFB                 db 0FFh
.eh_frame_hdr:0000000000010EFC                 db 0ECh
.eh_frame_hdr:0000000000010EFD                 db    5
.eh_frame_hdr:0000000000010EFE                 db    0
.eh_frame_hdr:0000000000010EFF                 db    0
.eh_frame_hdr:0000000000010F00                 db  44h ; D
.eh_frame_hdr:0000000000010F01                 db  2Eh ; .
.eh_frame_hdr:0000000000010F02                 db 0FFh
.eh_frame_hdr:0000000000010F03                 db 0FFh
.eh_frame_hdr:0000000000010F04                 db    0
.eh_frame_hdr:0000000000010F05                 db    6
.eh_frame_hdr:0000000000010F06                 db    0
.eh_frame_hdr:0000000000010F07                 db    0
.eh_frame_hdr:0000000000010F08                 db  94h
.eh_frame_hdr:0000000000010F09                 db  2Eh ; .
.eh_frame_hdr:0000000000010F0A                 db 0FFh
.eh_frame_hdr:0000000000010F0B                 db 0FFh
.eh_frame_hdr:0000000000010F0C                 db  38h ; 8
.eh_frame_hdr:0000000000010F0D                 db    6
.eh_frame_hdr:0000000000010F0E                 db    0
.eh_frame_hdr:0000000000010F0F                 db    0
.eh_frame_hdr:0000000000010F10                 db 0F4h
.eh_frame_hdr:0000000000010F11                 db  2Eh ; .
.eh_frame_hdr:0000000000010F12                 db 0FFh
.eh_frame_hdr:0000000000010F13                 db 0FFh
.eh_frame_hdr:0000000000010F14                 db  7Ch ; |
.eh_frame_hdr:0000000000010F15                 db    6
.eh_frame_hdr:0000000000010F16                 db    0
.eh_frame_hdr:0000000000010F17                 db    0
.eh_frame_hdr:0000000000010F18                 db    4
.eh_frame_hdr:0000000000010F19                 db  2Fh ; /
.eh_frame_hdr:0000000000010F1A                 db 0FFh
.eh_frame_hdr:0000000000010F1B                 db 0FFh
.eh_frame_hdr:0000000000010F1C                 db  90h
.eh_frame_hdr:0000000000010F1D                 db    6
.eh_frame_hdr:0000000000010F1E                 db    0
.eh_frame_hdr:0000000000010F1F                 db    0
.eh_frame_hdr:0000000000010F20                 db  94h
.eh_frame_hdr:0000000000010F21                 db  2Fh ; /
.eh_frame_hdr:0000000000010F22                 db 0FFh
.eh_frame_hdr:0000000000010F23                 db 0FFh
.eh_frame_hdr:0000000000010F24                 db 0B0h
.eh_frame_hdr:0000000000010F25                 db    6
.eh_frame_hdr:0000000000010F26                 db    0
.eh_frame_hdr:0000000000010F27                 db    0
.eh_frame_hdr:0000000000010F28                 db    4
.eh_frame_hdr:0000000000010F29                 db  30h ; 0
.eh_frame_hdr:0000000000010F2A                 db 0FFh
.eh_frame_hdr:0000000000010F2B                 db 0FFh
.eh_frame_hdr:0000000000010F2C                 db 0C8h
.eh_frame_hdr:0000000000010F2D                 db    6
.eh_frame_hdr:0000000000010F2E                 db    0
.eh_frame_hdr:0000000000010F2F                 db    0
.eh_frame_hdr:0000000000010F30                 db  54h ; T
.eh_frame_hdr:0000000000010F31                 db  30h ; 0
.eh_frame_hdr:0000000000010F32                 db 0FFh
.eh_frame_hdr:0000000000010F33                 db 0FFh
.eh_frame_hdr:0000000000010F34                 db 0E4h
.eh_frame_hdr:0000000000010F35                 db    6
.eh_frame_hdr:0000000000010F36                 db    0
.eh_frame_hdr:0000000000010F37                 db    0
.eh_frame_hdr:0000000000010F38                 db 0E4h
.eh_frame_hdr:0000000000010F39                 db  32h ; 2
.eh_frame_hdr:0000000000010F3A                 db 0FFh
.eh_frame_hdr:0000000000010F3B                 db 0FFh
.eh_frame_hdr:0000000000010F3C                 db  34h ; 4
.eh_frame_hdr:0000000000010F3D                 db    7
.eh_frame_hdr:0000000000010F3E                 db    0
.eh_frame_hdr:0000000000010F3F                 db    0
.eh_frame_hdr:0000000000010F40                 db 0B4h
.eh_frame_hdr:0000000000010F41                 db  33h ; 3
.eh_frame_hdr:0000000000010F42                 db 0FFh
.eh_frame_hdr:0000000000010F43                 db 0FFh
.eh_frame_hdr:0000000000010F44                 db  60h ; `
.eh_frame_hdr:0000000000010F45                 db    7
.eh_frame_hdr:0000000000010F46                 db    0
.eh_frame_hdr:0000000000010F47                 db    0
.eh_frame_hdr:0000000000010F48                 db  94h
.eh_frame_hdr:0000000000010F49                 db  34h ; 4
.eh_frame_hdr:0000000000010F4A                 db 0FFh
.eh_frame_hdr:0000000000010F4B                 db 0FFh
.eh_frame_hdr:0000000000010F4C                 db 0ACh
.eh_frame_hdr:0000000000010F4D                 db    7
.eh_frame_hdr:0000000000010F4E                 db    0
.eh_frame_hdr:0000000000010F4F                 db    0
.eh_frame_hdr:0000000000010F50                 db 0B4h
.eh_frame_hdr:0000000000010F51                 db  3Eh ; >
.eh_frame_hdr:0000000000010F52                 db 0FFh
.eh_frame_hdr:0000000000010F53                 db 0FFh
.eh_frame_hdr:0000000000010F54                 db 0F8h
.eh_frame_hdr:0000000000010F55                 db    7
.eh_frame_hdr:0000000000010F56                 db    0
.eh_frame_hdr:0000000000010F57                 db    0
.eh_frame_hdr:0000000000010F58                 db  54h ; T
.eh_frame_hdr:0000000000010F59                 db  43h ; C
.eh_frame_hdr:0000000000010F5A                 db 0FFh
.eh_frame_hdr:0000000000010F5B                 db 0FFh
.eh_frame_hdr:0000000000010F5C                 db  24h ; $
.eh_frame_hdr:0000000000010F5D                 db    8
.eh_frame_hdr:0000000000010F5E                 db    0
.eh_frame_hdr:0000000000010F5F                 db    0
.eh_frame_hdr:0000000000010F60                 db 0C4h
.eh_frame_hdr:0000000000010F61                 db  44h ; D
.eh_frame_hdr:0000000000010F62                 db 0FFh
.eh_frame_hdr:0000000000010F63                 db 0FFh
.eh_frame_hdr:0000000000010F64                 db  3Ch ; <
.eh_frame_hdr:0000000000010F65                 db    9
.eh_frame_hdr:0000000000010F66                 db    0
.eh_frame_hdr:0000000000010F67                 db    0
.eh_frame_hdr:0000000000010F68                 db  84h
.eh_frame_hdr:0000000000010F69                 db  48h ; H
.eh_frame_hdr:0000000000010F6A                 db 0FFh
.eh_frame_hdr:0000000000010F6B                 db 0FFh
.eh_frame_hdr:0000000000010F6C                 db  6Ch ; l
.eh_frame_hdr:0000000000010F6D                 db    9
.eh_frame_hdr:0000000000010F6E                 db    0
.eh_frame_hdr:0000000000010F6F                 db    0
.eh_frame_hdr:0000000000010F70                 db 0C4h
.eh_frame_hdr:0000000000010F71                 db  4Eh ; N
.eh_frame_hdr:0000000000010F72                 db 0FFh
.eh_frame_hdr:0000000000010F73                 db 0FFh
.eh_frame_hdr:0000000000010F74                 db 0BCh
.eh_frame_hdr:0000000000010F75                 db    9
.eh_frame_hdr:0000000000010F76                 db    0
.eh_frame_hdr:0000000000010F77                 db    0
.eh_frame_hdr:0000000000010F78                 db 0D4h
.eh_frame_hdr:0000000000010F79                 db  4Eh ; N
.eh_frame_hdr:0000000000010F7A                 db 0FFh
.eh_frame_hdr:0000000000010F7B                 db 0FFh
.eh_frame_hdr:0000000000010F7C                 db 0D0h
.eh_frame_hdr:0000000000010F7D                 db    9
.eh_frame_hdr:0000000000010F7E                 db    0
.eh_frame_hdr:0000000000010F7F                 db    0
.eh_frame_hdr:0000000000010F80                 db 0E4h
.eh_frame_hdr:0000000000010F81                 db  4Eh ; N
.eh_frame_hdr:0000000000010F82                 db 0FFh
.eh_frame_hdr:0000000000010F83                 db 0FFh
.eh_frame_hdr:0000000000010F84                 db 0E4h
.eh_frame_hdr:0000000000010F85                 db    9
.eh_frame_hdr:0000000000010F86                 db    0
.eh_frame_hdr:0000000000010F87                 db    0
.eh_frame_hdr:0000000000010F88                 db  94h
.eh_frame_hdr:0000000000010F89                 db  4Fh ; O
.eh_frame_hdr:0000000000010F8A                 db 0FFh
.eh_frame_hdr:0000000000010F8B                 db 0FFh
.eh_frame_hdr:0000000000010F8C                 db  14h
.eh_frame_hdr:0000000000010F8D                 db  0Ah
.eh_frame_hdr:0000000000010F8E                 db    0
.eh_frame_hdr:0000000000010F8F                 db    0
.eh_frame_hdr:0000000000010F90                 db 0B4h
.eh_frame_hdr:0000000000010F91                 db  4Fh ; O
.eh_frame_hdr:0000000000010F92                 db 0FFh
.eh_frame_hdr:0000000000010F93                 db 0FFh
.eh_frame_hdr:0000000000010F94                 db  34h ; 4
.eh_frame_hdr:0000000000010F95                 db  0Ah
.eh_frame_hdr:0000000000010F96                 db    0
.eh_frame_hdr:0000000000010F97                 db    0
.eh_frame_hdr:0000000000010F98                 db  14h
.eh_frame_hdr:0000000000010F99                 db  50h ; P
.eh_frame_hdr:0000000000010F9A                 db 0FFh
.eh_frame_hdr:0000000000010F9B                 db 0FFh
.eh_frame_hdr:0000000000010F9C                 db  68h ; h
.eh_frame_hdr:0000000000010F9D                 db  0Ah
.eh_frame_hdr:0000000000010F9E                 db    0
.eh_frame_hdr:0000000000010F9F                 db    0
.eh_frame_hdr:0000000000010FA0                 db  74h ; t
.eh_frame_hdr:0000000000010FA1                 db  50h ; P
.eh_frame_hdr:0000000000010FA2                 db 0FFh
.eh_frame_hdr:0000000000010FA3                 db 0FFh
.eh_frame_hdr:0000000000010FA4                 db  94h
.eh_frame_hdr:0000000000010FA5                 db  0Ah
.eh_frame_hdr:0000000000010FA6                 db    0
.eh_frame_hdr:0000000000010FA7                 db    0
.eh_frame_hdr:0000000000010FA8                 db 0D4h
.eh_frame_hdr:0000000000010FA9                 db  50h ; P
.eh_frame_hdr:0000000000010FAA                 db 0FFh
.eh_frame_hdr:0000000000010FAB                 db 0FFh
.eh_frame_hdr:0000000000010FAC                 db 0A8h
.eh_frame_hdr:0000000000010FAD                 db  0Ah
.eh_frame_hdr:0000000000010FAE                 db    0
.eh_frame_hdr:0000000000010FAF                 db    0
.eh_frame_hdr:0000000000010FB0                 db  24h ; $
.eh_frame_hdr:0000000000010FB1                 db  51h ; Q
.eh_frame_hdr:0000000000010FB2                 db 0FFh
.eh_frame_hdr:0000000000010FB3                 db 0FFh
.eh_frame_hdr:0000000000010FB4                 db 0D4h
.eh_frame_hdr:0000000000010FB5                 db  0Ah
.eh_frame_hdr:0000000000010FB6                 db    0
.eh_frame_hdr:0000000000010FB7                 db    0
.eh_frame_hdr:0000000000010FB8                 db 0B4h
.eh_frame_hdr:0000000000010FB9                 db  51h ; Q
.eh_frame_hdr:0000000000010FBA                 db 0FFh
.eh_frame_hdr:0000000000010FBB                 db 0FFh
.eh_frame_hdr:0000000000010FBC                 db  34h ; 4
.eh_frame_hdr:0000000000010FBD                 db  0Bh
.eh_frame_hdr:0000000000010FBE                 db    0
.eh_frame_hdr:0000000000010FBF                 db    0
.eh_frame_hdr:0000000000010FC0                 db  14h
.eh_frame_hdr:0000000000010FC1                 db  52h ; R
.eh_frame_hdr:0000000000010FC2                 db 0FFh
.eh_frame_hdr:0000000000010FC3                 db 0FFh
.eh_frame_hdr:0000000000010FC4                 db  54h ; T
.eh_frame_hdr:0000000000010FC5                 db  0Bh
.eh_frame_hdr:0000000000010FC6                 db    0
.eh_frame_hdr:0000000000010FC7                 db    0
.eh_frame_hdr:0000000000010FC8                 db 0B4h
.eh_frame_hdr:0000000000010FC9                 db  52h ; R
.eh_frame_hdr:0000000000010FCA                 db 0FFh
.eh_frame_hdr:0000000000010FCB                 db 0FFh
.eh_frame_hdr:0000000000010FCC                 db  68h ; h
.eh_frame_hdr:0000000000010FCD                 db  0Bh
.eh_frame_hdr:0000000000010FCE                 db    0
.eh_frame_hdr:0000000000010FCF                 db    0
.eh_frame_hdr:0000000000010FD0                 db 0C4h
.eh_frame_hdr:0000000000010FD1                 db  52h ; R
.eh_frame_hdr:0000000000010FD2                 db 0FFh
.eh_frame_hdr:0000000000010FD3                 db 0FFh
.eh_frame_hdr:0000000000010FD4                 db  7Ch ; |
.eh_frame_hdr:0000000000010FD5                 db  0Bh
.eh_frame_hdr:0000000000010FD6                 db    0
.eh_frame_hdr:0000000000010FD7                 db    0
.eh_frame_hdr:0000000000010FD8                 db 0D4h
.eh_frame_hdr:0000000000010FD9                 db  52h ; R
.eh_frame_hdr:0000000000010FDA                 db 0FFh
.eh_frame_hdr:0000000000010FDB                 db 0FFh
.eh_frame_hdr:0000000000010FDC                 db  90h
.eh_frame_hdr:0000000000010FDD                 db  0Bh
.eh_frame_hdr:0000000000010FDE                 db    0
.eh_frame_hdr:0000000000010FDF                 db    0
.eh_frame_hdr:0000000000010FE0                 db    4
.eh_frame_hdr:0000000000010FE1                 db  53h ; S
.eh_frame_hdr:0000000000010FE2                 db 0FFh
.eh_frame_hdr:0000000000010FE3                 db 0FFh
.eh_frame_hdr:0000000000010FE4                 db 0ACh
.eh_frame_hdr:0000000000010FE5                 db  0Bh
.eh_frame_hdr:0000000000010FE6                 db    0
.eh_frame_hdr:0000000000010FE7                 db    0
.eh_frame_hdr:0000000000010FE8                 db  24h ; $
.eh_frame_hdr:0000000000010FE9                 db  54h ; T
.eh_frame_hdr:0000000000010FEA                 db 0FFh
.eh_frame_hdr:0000000000010FEB                 db 0FFh
.eh_frame_hdr:0000000000010FEC                 db  0Ch
.eh_frame_hdr:0000000000010FED                 db  0Ch
.eh_frame_hdr:0000000000010FEE                 db    0
.eh_frame_hdr:0000000000010FEF                 db    0
.eh_frame_hdr:0000000000010FF0                 db 0A4h
.eh_frame_hdr:0000000000010FF1                 db  54h ; T
.eh_frame_hdr:0000000000010FF2                 db 0FFh
.eh_frame_hdr:0000000000010FF3                 db 0FFh
.eh_frame_hdr:0000000000010FF4                 db  20h
.eh_frame_hdr:0000000000010FF5                 db  0Ch
.eh_frame_hdr:0000000000010FF6                 db    0
.eh_frame_hdr:0000000000010FF7                 db    0
.eh_frame_hdr:0000000000010FF8                 db 0E4h
.eh_frame_hdr:0000000000010FF9                 db  55h ; U
.eh_frame_hdr:0000000000010FFA                 db 0FFh
.eh_frame_hdr:0000000000010FFB                 db 0FFh
.eh_frame_hdr:0000000000010FFC                 db  80h
.eh_frame_hdr:0000000000010FFD                 db  0Ch
.eh_frame_hdr:0000000000010FFE                 db    0
.eh_frame_hdr:0000000000010FFF                 db    0
.eh_frame_hdr:0000000000011000                 db 0F4h
.eh_frame_hdr:0000000000011001                 db  55h ; U
.eh_frame_hdr:0000000000011002                 db 0FFh
.eh_frame_hdr:0000000000011003                 db 0FFh
.eh_frame_hdr:0000000000011004                 db  94h
.eh_frame_hdr:0000000000011005                 db  0Ch
.eh_frame_hdr:0000000000011006                 db    0
.eh_frame_hdr:0000000000011007                 db    0
.eh_frame_hdr:0000000000011008                 db    4
.eh_frame_hdr:0000000000011009                 db  56h ; V
.eh_frame_hdr:000000000001100A                 db 0FFh
.eh_frame_hdr:000000000001100B                 db 0FFh
.eh_frame_hdr:000000000001100C                 db 0A8h
.eh_frame_hdr:000000000001100D                 db  0Ch
.eh_frame_hdr:000000000001100E                 db    0
.eh_frame_hdr:000000000001100F                 db    0
.eh_frame_hdr:0000000000011010                 db  14h
.eh_frame_hdr:0000000000011011                 db  56h ; V
.eh_frame_hdr:0000000000011012                 db 0FFh
.eh_frame_hdr:0000000000011013                 db 0FFh
.eh_frame_hdr:0000000000011014                 db 0BCh
.eh_frame_hdr:0000000000011015                 db  0Ch
.eh_frame_hdr:0000000000011016                 db    0
.eh_frame_hdr:0000000000011017                 db    0
.eh_frame_hdr:0000000000011018                 db  64h ; d
.eh_frame_hdr:0000000000011019                 db  56h ; V
.eh_frame_hdr:000000000001101A                 db 0FFh
.eh_frame_hdr:000000000001101B                 db 0FFh
.eh_frame_hdr:000000000001101C                 db 0D0h
.eh_frame_hdr:000000000001101D                 db  0Ch
.eh_frame_hdr:000000000001101E                 db    0
.eh_frame_hdr:000000000001101F                 db    0
.eh_frame_hdr:0000000000011020                 db 0C4h
.eh_frame_hdr:0000000000011021                 db  56h ; V
.eh_frame_hdr:0000000000011022                 db 0FFh
.eh_frame_hdr:0000000000011023                 db 0FFh
.eh_frame_hdr:0000000000011024                 db 0E4h
.eh_frame_hdr:0000000000011025                 db  0Ch
.eh_frame_hdr:0000000000011026                 db    0
.eh_frame_hdr:0000000000011027                 db    0
.eh_frame_hdr:0000000000011028                 db  14h
.eh_frame_hdr:0000000000011029                 db  58h ; X
.eh_frame_hdr:000000000001102A                 db 0FFh
.eh_frame_hdr:000000000001102B                 db 0FFh
.eh_frame_hdr:000000000001102C                 db  20h
.eh_frame_hdr:000000000001102D                 db  0Dh
.eh_frame_hdr:000000000001102E                 db    0
.eh_frame_hdr:000000000001102F                 db    0
.eh_frame_hdr:0000000000011030                 db  74h ; t
.eh_frame_hdr:0000000000011031                 db  58h ; X
.eh_frame_hdr:0000000000011032                 db 0FFh
.eh_frame_hdr:0000000000011033                 db 0FFh
.eh_frame_hdr:0000000000011034                 db  58h ; X
.eh_frame_hdr:0000000000011035                 db  0Dh
.eh_frame_hdr:0000000000011036                 db    0
.eh_frame_hdr:0000000000011037                 db    0
.eh_frame_hdr:0000000000011038                 db 0C4h
.eh_frame_hdr:0000000000011039                 db  58h ; X
.eh_frame_hdr:000000000001103A                 db 0FFh
.eh_frame_hdr:000000000001103B                 db 0FFh
.eh_frame_hdr:000000000001103C                 db  6Ch ; l
.eh_frame_hdr:000000000001103D                 db  0Dh
.eh_frame_hdr:000000000001103E                 db    0
.eh_frame_hdr:000000000001103F                 db    0
.eh_frame_hdr:0000000000011040                 db  44h ; D
.eh_frame_hdr:0000000000011041                 db  59h ; Y
.eh_frame_hdr:0000000000011042                 db 0FFh
.eh_frame_hdr:0000000000011043                 db 0FFh
.eh_frame_hdr:0000000000011044                 db 0A0h
.eh_frame_hdr:0000000000011045                 db  0Dh
.eh_frame_hdr:0000000000011046                 db    0
.eh_frame_hdr:0000000000011047                 db    0
.eh_frame_hdr:0000000000011048                 db 0B4h
.eh_frame_hdr:0000000000011049                 db  59h ; Y
.eh_frame_hdr:000000000001104A                 db 0FFh
.eh_frame_hdr:000000000001104B                 db 0FFh
.eh_frame_hdr:000000000001104C                 db 0B4h
.eh_frame_hdr:000000000001104D                 db  0Dh
.eh_frame_hdr:000000000001104E                 db    0
.eh_frame_hdr:000000000001104F                 db    0
.eh_frame_hdr:0000000000011050                 db  24h ; $
.eh_frame_hdr:0000000000011051                 db  5Ah ; Z
.eh_frame_hdr:0000000000011052                 db 0FFh
.eh_frame_hdr:0000000000011053                 db 0FFh
.eh_frame_hdr:0000000000011054                 db    0
.eh_frame_hdr:0000000000011055                 db  0Eh
.eh_frame_hdr:0000000000011056                 db    0
.eh_frame_hdr:0000000000011057                 db    0
.eh_frame_hdr:0000000000011058                 db  64h ; d
.eh_frame_hdr:0000000000011059                 db  5Ah ; Z
.eh_frame_hdr:000000000001105A                 db 0FFh
.eh_frame_hdr:000000000001105B                 db 0FFh
.eh_frame_hdr:000000000001105C                 db  14h
.eh_frame_hdr:000000000001105D                 db  0Eh
.eh_frame_hdr:000000000001105E                 db    0
.eh_frame_hdr:000000000001105F                 db    0
.eh_frame_hdr:0000000000011060                 db  84h
.eh_frame_hdr:0000000000011061                 db  5Ah ; Z
.eh_frame_hdr:0000000000011062                 db 0FFh
.eh_frame_hdr:0000000000011063                 db 0FFh
.eh_frame_hdr:0000000000011064                 db  28h ; (
.eh_frame_hdr:0000000000011065                 db  0Eh
.eh_frame_hdr:0000000000011066                 db    0
.eh_frame_hdr:0000000000011067                 db    0
.eh_frame_hdr:0000000000011068                 db  44h ; D
.eh_frame_hdr:0000000000011069                 db  5Ch ; \
.eh_frame_hdr:000000000001106A                 db 0FFh
.eh_frame_hdr:000000000001106B                 db 0FFh
.eh_frame_hdr:000000000001106C                 db  74h ; t
.eh_frame_hdr:000000000001106D                 db  0Eh
.eh_frame_hdr:000000000001106E                 db    0
.eh_frame_hdr:000000000001106F                 db    0
.eh_frame_hdr:0000000000011070                 db 0D4h
.eh_frame_hdr:0000000000011071                 db  5Ch ; \
.eh_frame_hdr:0000000000011072                 db 0FFh
.eh_frame_hdr:0000000000011073                 db 0FFh
.eh_frame_hdr:0000000000011074                 db 0A0h
.eh_frame_hdr:0000000000011075                 db  0Eh
.eh_frame_hdr:0000000000011076                 db    0
.eh_frame_hdr:0000000000011077                 db    0
.eh_frame_hdr:0000000000011078                 db 0B4h
.eh_frame_hdr:0000000000011079                 db  5Dh ; ]
.eh_frame_hdr:000000000001107A                 db 0FFh
.eh_frame_hdr:000000000001107B                 db 0FFh
.eh_frame_hdr:000000000001107C                 db 0CCh
.eh_frame_hdr:000000000001107D                 db  0Eh
.eh_frame_hdr:000000000001107E                 db    0
.eh_frame_hdr:000000000001107F                 db    0
.eh_frame_hdr:0000000000011080                 db 0F4h
.eh_frame_hdr:0000000000011081                 db  5Fh ; _
.eh_frame_hdr:0000000000011082                 db 0FFh
.eh_frame_hdr:0000000000011083                 db 0FFh
.eh_frame_hdr:0000000000011084                 db    4
.eh_frame_hdr:0000000000011085                 db  0Fh
.eh_frame_hdr:0000000000011086                 db    0
.eh_frame_hdr:0000000000011087                 db    0
.eh_frame_hdr:0000000000011088                 db  84h
.eh_frame_hdr:0000000000011089                 db  62h ; b
.eh_frame_hdr:000000000001108A                 db 0FFh
.eh_frame_hdr:000000000001108B                 db 0FFh
.eh_frame_hdr:000000000001108C                 db  40h ; @
.eh_frame_hdr:000000000001108D                 db  0Fh
.eh_frame_hdr:000000000001108E                 db    0
.eh_frame_hdr:000000000001108F                 db    0
.eh_frame_hdr:0000000000011090                 db 0E4h
.eh_frame_hdr:0000000000011091                 db  62h ; b
.eh_frame_hdr:0000000000011092                 db 0FFh
.eh_frame_hdr:0000000000011093                 db 0FFh
.eh_frame_hdr:0000000000011094                 db  64h ; d
.eh_frame_hdr:0000000000011095                 db  0Fh
.eh_frame_hdr:0000000000011096                 db    0
.eh_frame_hdr:0000000000011097                 db    0
.eh_frame_hdr:0000000000011098                 db 0F4h
.eh_frame_hdr:0000000000011099                 db  64h ; d
.eh_frame_hdr:000000000001109A                 db 0FFh
.eh_frame_hdr:000000000001109B                 db 0FFh
.eh_frame_hdr:000000000001109C                 db  9Ch
.eh_frame_hdr:000000000001109D                 db  0Fh
.eh_frame_hdr:000000000001109E                 db    0
.eh_frame_hdr:000000000001109F                 db    0
.eh_frame_hdr:00000000000110A0                 db  24h ; $
.eh_frame_hdr:00000000000110A1                 db  65h ; e
.eh_frame_hdr:00000000000110A2                 db 0FFh
.eh_frame_hdr:00000000000110A3                 db 0FFh
.eh_frame_hdr:00000000000110A4                 db 0C4h
.eh_frame_hdr:00000000000110A5                 db  0Fh
.eh_frame_hdr:00000000000110A6                 db    0
.eh_frame_hdr:00000000000110A7                 db    0
.eh_frame_hdr:00000000000110A8                 db  34h ; 4
.eh_frame_hdr:00000000000110A9                 db  65h ; e
.eh_frame_hdr:00000000000110AA                 db 0FFh
.eh_frame_hdr:00000000000110AB                 db 0FFh
.eh_frame_hdr:00000000000110AC                 db 0D8h
.eh_frame_hdr:00000000000110AD                 db  0Fh
.eh_frame_hdr:00000000000110AE                 db    0
.eh_frame_hdr:00000000000110AF                 db    0
.eh_frame_hdr:00000000000110B0                 db  64h ; d
.eh_frame_hdr:00000000000110B1                 db  65h ; e
.eh_frame_hdr:00000000000110B2                 db 0FFh
.eh_frame_hdr:00000000000110B3                 db 0FFh
.eh_frame_hdr:00000000000110B4                 db 0F0h
.eh_frame_hdr:00000000000110B5                 db  0Fh
.eh_frame_hdr:00000000000110B6                 db    0
.eh_frame_hdr:00000000000110B7                 db    0
.eh_frame_hdr:00000000000110B8                 db 0A4h
.eh_frame_hdr:00000000000110B9                 db  65h ; e
.eh_frame_hdr:00000000000110BA                 db 0FFh
.eh_frame_hdr:00000000000110BB                 db 0FFh
.eh_frame_hdr:00000000000110BC                 db    8
.eh_frame_hdr:00000000000110BD                 db  10h
.eh_frame_hdr:00000000000110BE                 db    0
.eh_frame_hdr:00000000000110BF                 db    0
.eh_frame_hdr:00000000000110C0                 db 0C4h
.eh_frame_hdr:00000000000110C1                 db  65h ; e
.eh_frame_hdr:00000000000110C2                 db 0FFh
.eh_frame_hdr:00000000000110C3                 db 0FFh
.eh_frame_hdr:00000000000110C4                 db  24h ; $
.eh_frame_hdr:00000000000110C5                 db  10h
.eh_frame_hdr:00000000000110C6                 db    0
.eh_frame_hdr:00000000000110C7                 db    0
.eh_frame_hdr:00000000000110C8                 db  94h
.eh_frame_hdr:00000000000110C9                 db  66h ; f
.eh_frame_hdr:00000000000110CA                 db 0FFh
.eh_frame_hdr:00000000000110CB                 db 0FFh
.eh_frame_hdr:00000000000110CC                 db  38h ; 8
.eh_frame_hdr:00000000000110CD                 db  10h
.eh_frame_hdr:00000000000110CE                 db    0
.eh_frame_hdr:00000000000110CF                 db    0
.eh_frame_hdr:00000000000110D0                 db 0A4h
.eh_frame_hdr:00000000000110D1                 db  70h ; p
.eh_frame_hdr:00000000000110D2                 db 0FFh
.eh_frame_hdr:00000000000110D3                 db 0FFh
.eh_frame_hdr:00000000000110D4                 db 0E0h
.eh_frame_hdr:00000000000110D5                 db  10h
.eh_frame_hdr:00000000000110D6                 db    0
.eh_frame_hdr:00000000000110D7                 db    0
.eh_frame_hdr:00000000000110D8                 db  94h
.eh_frame_hdr:00000000000110D9                 db  72h ; r
.eh_frame_hdr:00000000000110DA                 db 0FFh
.eh_frame_hdr:00000000000110DB                 db 0FFh
.eh_frame_hdr:00000000000110DC                 db  1Ch
.eh_frame_hdr:00000000000110DD                 db  11h
.eh_frame_hdr:00000000000110DE                 db    0
.eh_frame_hdr:00000000000110DF                 db    0
.eh_frame_hdr:00000000000110E0                 db 0E4h
.eh_frame_hdr:00000000000110E1                 db  72h ; r
.eh_frame_hdr:00000000000110E2                 db 0FFh
.eh_frame_hdr:00000000000110E3                 db 0FFh
.eh_frame_hdr:00000000000110E4                 db  34h ; 4
.eh_frame_hdr:00000000000110E5                 db  11h
.eh_frame_hdr:00000000000110E6                 db    0
.eh_frame_hdr:00000000000110E7                 db    0
.eh_frame_hdr:00000000000110E8                 db 0B4h
.eh_frame_hdr:00000000000110E9                 db  76h ; v
.eh_frame_hdr:00000000000110EA                 db 0FFh
.eh_frame_hdr:00000000000110EB                 db 0FFh
.eh_frame_hdr:00000000000110EC                 db  80h
.eh_frame_hdr:00000000000110ED                 db  11h
.eh_frame_hdr:00000000000110EE                 db    0
.eh_frame_hdr:00000000000110EF                 db    0
.eh_frame_hdr:00000000000110F0                 db  54h ; T
.eh_frame_hdr:00000000000110F1                 db  77h ; w
.eh_frame_hdr:00000000000110F2                 db 0FFh
.eh_frame_hdr:00000000000110F3                 db 0FFh
.eh_frame_hdr:00000000000110F4                 db 0CCh
.eh_frame_hdr:00000000000110F5                 db  11h
.eh_frame_hdr:00000000000110F6                 db    0
.eh_frame_hdr:00000000000110F7                 db    0
.eh_frame_hdr:00000000000110F8                 db  14h
.eh_frame_hdr:00000000000110F9                 db  79h ; y
.eh_frame_hdr:00000000000110FA                 db 0FFh
.eh_frame_hdr:00000000000110FB                 db 0FFh
.eh_frame_hdr:00000000000110FC                 db  18h
.eh_frame_hdr:00000000000110FD                 db  12h
.eh_frame_hdr:00000000000110FE                 db    0
.eh_frame_hdr:00000000000110FF                 db    0
.eh_frame_hdr:0000000000011100                 db  44h ; D
.eh_frame_hdr:0000000000011101                 db  79h ; y
.eh_frame_hdr:0000000000011102                 db 0FFh
.eh_frame_hdr:0000000000011103                 db 0FFh
.eh_frame_hdr:0000000000011104                 db  44h ; D
.eh_frame_hdr:0000000000011105                 db  12h
.eh_frame_hdr:0000000000011106                 db    0
.eh_frame_hdr:0000000000011107                 db    0
.eh_frame_hdr:0000000000011108                 db 0E4h
.eh_frame_hdr:0000000000011109                 db  79h ; y
.eh_frame_hdr:000000000001110A                 db 0FFh
.eh_frame_hdr:000000000001110B                 db 0FFh
.eh_frame_hdr:000000000001110C                 db  64h ; d
.eh_frame_hdr:000000000001110D                 db  12h
.eh_frame_hdr:000000000001110E                 db    0
.eh_frame_hdr:000000000001110F                 db    0
.eh_frame_hdr:0000000000011110                 db 0D4h
.eh_frame_hdr:0000000000011111                 db  7Ah ; z
.eh_frame_hdr:0000000000011112                 db 0FFh
.eh_frame_hdr:0000000000011113                 db 0FFh
.eh_frame_hdr:0000000000011114                 db 0A8h
.eh_frame_hdr:0000000000011115                 db  12h
.eh_frame_hdr:0000000000011116                 db    0
.eh_frame_hdr:0000000000011117                 db    0
.eh_frame_hdr:0000000000011118                 db  14h
.eh_frame_hdr:0000000000011119                 db  8Dh
.eh_frame_hdr:000000000001111A                 db 0FFh
.eh_frame_hdr:000000000001111B                 db 0FFh
.eh_frame_hdr:000000000001111C                 db  20h
.eh_frame_hdr:000000000001111D                 db  13h
.eh_frame_hdr:000000000001111E                 db    0
.eh_frame_hdr:000000000001111F                 db    0
.eh_frame_hdr:0000000000011120                 db 0C4h
.eh_frame_hdr:0000000000011121                 db  8Eh
.eh_frame_hdr:0000000000011122                 db 0FFh
.eh_frame_hdr:0000000000011123                 db 0FFh
.eh_frame_hdr:0000000000011124                 db  8Ch
.eh_frame_hdr:0000000000011125                 db  13h
.eh_frame_hdr:0000000000011126                 db    0
.eh_frame_hdr:0000000000011127                 db    0
.eh_frame_hdr:0000000000011128                 db    4
.eh_frame_hdr:0000000000011129                 db  8Fh
.eh_frame_hdr:000000000001112A                 db 0FFh
.eh_frame_hdr:000000000001112B                 db 0FFh
.eh_frame_hdr:000000000001112C                 db 0B8h
.eh_frame_hdr:000000000001112D                 db  13h
.eh_frame_hdr:000000000001112E                 db    0
.eh_frame_hdr:000000000001112F                 db    0
.eh_frame_hdr:0000000000011130                 db  24h ; $
.eh_frame_hdr:0000000000011131                 db  8Fh
.eh_frame_hdr:0000000000011132                 db 0FFh
.eh_frame_hdr:0000000000011133                 db 0FFh
.eh_frame_hdr:0000000000011134                 db 0CCh
.eh_frame_hdr:0000000000011135                 db  13h
.eh_frame_hdr:0000000000011136                 db    0
.eh_frame_hdr:0000000000011137                 db    0
.eh_frame_hdr:0000000000011138                 db  44h ; D
.eh_frame_hdr:0000000000011139                 db  8Fh
.eh_frame_hdr:000000000001113A                 db 0FFh
.eh_frame_hdr:000000000001113B                 db 0FFh
.eh_frame_hdr:000000000001113C                 db 0E0h
.eh_frame_hdr:000000000001113D                 db  13h
.eh_frame_hdr:000000000001113E                 db    0
.eh_frame_hdr:000000000001113F                 db    0
.eh_frame_hdr:0000000000011140                 db  84h
.eh_frame_hdr:0000000000011141                 db  8Fh
.eh_frame_hdr:0000000000011142                 db 0FFh
.eh_frame_hdr:0000000000011143                 db 0FFh
.eh_frame_hdr:0000000000011144                 db 0F4h
.eh_frame_hdr:0000000000011145                 db  13h
.eh_frame_hdr:0000000000011146                 db    0
.eh_frame_hdr:0000000000011147                 db    0
.eh_frame_hdr:0000000000011148                 db 0A4h
.eh_frame_hdr:0000000000011149                 db  8Fh
.eh_frame_hdr:000000000001114A                 db 0FFh
.eh_frame_hdr:000000000001114B                 db 0FFh
.eh_frame_hdr:000000000001114C                 db    8
.eh_frame_hdr:000000000001114D                 db  14h
.eh_frame_hdr:000000000001114E                 db    0
.eh_frame_hdr:000000000001114F                 db    0
.eh_frame_hdr:0000000000011150                 db 0D4h
.eh_frame_hdr:0000000000011151                 db  8Fh
.eh_frame_hdr:0000000000011152                 db 0FFh
.eh_frame_hdr:0000000000011153                 db 0FFh
.eh_frame_hdr:0000000000011154                 db  1Ch
.eh_frame_hdr:0000000000011155                 db  14h
.eh_frame_hdr:0000000000011156                 db    0
.eh_frame_hdr:0000000000011157                 db    0
.eh_frame_hdr:0000000000011158                 db  54h ; T
.eh_frame_hdr:0000000000011159                 db  90h
.eh_frame_hdr:000000000001115A                 db 0FFh
.eh_frame_hdr:000000000001115B                 db 0FFh
.eh_frame_hdr:000000000001115C                 db  70h ; p
.eh_frame_hdr:000000000001115D                 db  14h
.eh_frame_hdr:000000000001115E                 db    0
.eh_frame_hdr:000000000001115F                 db    0
.eh_frame_hdr:0000000000011160                 db  44h ; D
.eh_frame_hdr:0000000000011161                 db  91h
.eh_frame_hdr:0000000000011162                 db 0FFh
.eh_frame_hdr:0000000000011163                 db 0FFh
.eh_frame_hdr:0000000000011164                 db 0DCh
.eh_frame_hdr:0000000000011165                 db  14h
.eh_frame_hdr:0000000000011166                 db    0
.eh_frame_hdr:0000000000011167                 db    0
.eh_frame_hdr:0000000000011168                 db  54h ; T
.eh_frame_hdr:0000000000011169                 db  91h
.eh_frame_hdr:000000000001116A                 db 0FFh
.eh_frame_hdr:000000000001116B                 db 0FFh
.eh_frame_hdr:000000000001116C                 db 0F0h
.eh_frame_hdr:000000000001116D                 db  14h
.eh_frame_hdr:000000000001116E                 db    0
.eh_frame_hdr:000000000001116F                 db    0
.eh_frame_hdr:0000000000011170                 db 0F4h
.eh_frame_hdr:0000000000011171                 db  91h
.eh_frame_hdr:0000000000011172                 db 0FFh
.eh_frame_hdr:0000000000011173                 db 0FFh
.eh_frame_hdr:0000000000011174                 db  1Ch
.eh_frame_hdr:0000000000011175                 db  15h
.eh_frame_hdr:0000000000011176                 db    0
.eh_frame_hdr:0000000000011177                 db    0
.eh_frame_hdr:0000000000011178                 db  14h
.eh_frame_hdr:0000000000011179                 db  92h
.eh_frame_hdr:000000000001117A                 db 0FFh
.eh_frame_hdr:000000000001117B                 db 0FFh
.eh_frame_hdr:000000000001117C                 db  30h ; 0
.eh_frame_hdr:000000000001117D                 db  15h
.eh_frame_hdr:000000000001117E                 db    0
.eh_frame_hdr:000000000001117F                 db    0
.eh_frame_hdr:0000000000011180                 db  24h ; $
.eh_frame_hdr:0000000000011181                 db  92h
.eh_frame_hdr:0000000000011182                 db 0FFh
.eh_frame_hdr:0000000000011183                 db 0FFh
.eh_frame_hdr:0000000000011184                 db  44h ; D
.eh_frame_hdr:0000000000011185                 db  15h
.eh_frame_hdr:0000000000011186                 db    0
.eh_frame_hdr:0000000000011187                 db    0
.eh_frame_hdr:0000000000011188                 db  44h ; D
.eh_frame_hdr:0000000000011189                 db  92h
.eh_frame_hdr:000000000001118A                 db 0FFh
.eh_frame_hdr:000000000001118B                 db 0FFh
.eh_frame_hdr:000000000001118C                 db  58h ; X
.eh_frame_hdr:000000000001118D                 db  15h
.eh_frame_hdr:000000000001118E                 db    0
.eh_frame_hdr:000000000001118F                 db    0
.eh_frame_hdr:0000000000011190                 db  64h ; d
.eh_frame_hdr:0000000000011191                 db  92h
.eh_frame_hdr:0000000000011192                 db 0FFh
.eh_frame_hdr:0000000000011193                 db 0FFh
.eh_frame_hdr:0000000000011194                 db  6Ch ; l
.eh_frame_hdr:0000000000011195                 db  15h
.eh_frame_hdr:0000000000011196                 db    0
.eh_frame_hdr:0000000000011197                 db    0
.eh_frame_hdr:0000000000011198                 db 0F4h
.eh_frame_hdr:0000000000011199                 db  92h
.eh_frame_hdr:000000000001119A                 db 0FFh
.eh_frame_hdr:000000000001119B                 db 0FFh
.eh_frame_hdr:000000000001119C                 db  88h
.eh_frame_hdr:000000000001119D                 db  15h
.eh_frame_hdr:000000000001119E                 db    0
.eh_frame_hdr:000000000001119F                 db    0
.eh_frame_hdr:00000000000111A0                 db  84h
.eh_frame_hdr:00000000000111A1                 db  93h
.eh_frame_hdr:00000000000111A2                 db 0FFh
.eh_frame_hdr:00000000000111A3                 db 0FFh
.eh_frame_hdr:00000000000111A4                 db 0A4h
.eh_frame_hdr:00000000000111A5                 db  15h
.eh_frame_hdr:00000000000111A6                 db    0
.eh_frame_hdr:00000000000111A7                 db    0
.eh_frame_hdr:00000000000111A8                 db  94h
.eh_frame_hdr:00000000000111A9                 db  93h
.eh_frame_hdr:00000000000111AA                 db 0FFh
.eh_frame_hdr:00000000000111AB                 db 0FFh
.eh_frame_hdr:00000000000111AC                 db 0B8h
.eh_frame_hdr:00000000000111AD                 db  15h
.eh_frame_hdr:00000000000111AE                 db    0
.eh_frame_hdr:00000000000111AF                 db    0
.eh_frame_hdr:00000000000111B0                 db 0A4h
.eh_frame_hdr:00000000000111B1                 db  93h
.eh_frame_hdr:00000000000111B2                 db 0FFh
.eh_frame_hdr:00000000000111B3                 db 0FFh
.eh_frame_hdr:00000000000111B4                 db 0CCh
.eh_frame_hdr:00000000000111B5                 db  15h
.eh_frame_hdr:00000000000111B6                 db    0
.eh_frame_hdr:00000000000111B7                 db    0
.eh_frame_hdr:00000000000111B8                 db  44h ; D
.eh_frame_hdr:00000000000111B9                 db  94h
.eh_frame_hdr:00000000000111BA                 db 0FFh
.eh_frame_hdr:00000000000111BB                 db 0FFh
.eh_frame_hdr:00000000000111BC                 db 0E8h
.eh_frame_hdr:00000000000111BD                 db  15h
.eh_frame_hdr:00000000000111BE                 db    0
.eh_frame_hdr:00000000000111BF                 db    0
.eh_frame_hdr:00000000000111C0                 db  54h ; T
.eh_frame_hdr:00000000000111C1                 db  94h
.eh_frame_hdr:00000000000111C2                 db 0FFh
.eh_frame_hdr:00000000000111C3                 db 0FFh
.eh_frame_hdr:00000000000111C4                 db 0FCh
.eh_frame_hdr:00000000000111C5                 db  15h
.eh_frame_hdr:00000000000111C6                 db    0
.eh_frame_hdr:00000000000111C7                 db    0
.eh_frame_hdr:00000000000111C8                 db  74h ; t
.eh_frame_hdr:00000000000111C9                 db  94h
.eh_frame_hdr:00000000000111CA                 db 0FFh
.eh_frame_hdr:00000000000111CB                 db 0FFh
.eh_frame_hdr:00000000000111CC                 db  10h
.eh_frame_hdr:00000000000111CD                 db  16h
.eh_frame_hdr:00000000000111CE                 db    0
.eh_frame_hdr:00000000000111CF                 db    0
.eh_frame_hdr:00000000000111D0                 db  84h
.eh_frame_hdr:00000000000111D1                 db  94h
.eh_frame_hdr:00000000000111D2                 db 0FFh
.eh_frame_hdr:00000000000111D3                 db 0FFh
.eh_frame_hdr:00000000000111D4                 db  24h ; $
.eh_frame_hdr:00000000000111D5                 db  16h
.eh_frame_hdr:00000000000111D6                 db    0
.eh_frame_hdr:00000000000111D7                 db    0
.eh_frame_hdr:00000000000111D8                 db  14h
.eh_frame_hdr:00000000000111D9                 db  95h
.eh_frame_hdr:00000000000111DA                 db 0FFh
.eh_frame_hdr:00000000000111DB                 db 0FFh
.eh_frame_hdr:00000000000111DC                 db  40h ; @
.eh_frame_hdr:00000000000111DD                 db  16h
.eh_frame_hdr:00000000000111DE                 db    0
.eh_frame_hdr:00000000000111DF                 db    0
.eh_frame_hdr:00000000000111E0                 db 0B4h
.eh_frame_hdr:00000000000111E1                 db  95h
.eh_frame_hdr:00000000000111E2                 db 0FFh
.eh_frame_hdr:00000000000111E3                 db 0FFh
.eh_frame_hdr:00000000000111E4                 db  5Ch ; \
.eh_frame_hdr:00000000000111E5                 db  16h
.eh_frame_hdr:00000000000111E6                 db    0
.eh_frame_hdr:00000000000111E7                 db    0
.eh_frame_hdr:00000000000111E8                 db 0C4h
.eh_frame_hdr:00000000000111E9                 db  95h
.eh_frame_hdr:00000000000111EA                 db 0FFh
.eh_frame_hdr:00000000000111EB                 db 0FFh
.eh_frame_hdr:00000000000111EC                 db  70h ; p
.eh_frame_hdr:00000000000111ED                 db  16h
.eh_frame_hdr:00000000000111EE                 db    0
.eh_frame_hdr:00000000000111EF                 db    0
.eh_frame_hdr:00000000000111F0                 db 0E4h
.eh_frame_hdr:00000000000111F1                 db  95h
.eh_frame_hdr:00000000000111F2                 db 0FFh
.eh_frame_hdr:00000000000111F3                 db 0FFh
.eh_frame_hdr:00000000000111F4                 db  84h
.eh_frame_hdr:00000000000111F5                 db  16h
.eh_frame_hdr:00000000000111F6                 db    0
.eh_frame_hdr:00000000000111F7                 db    0
.eh_frame_hdr:00000000000111F8                 db    4
.eh_frame_hdr:00000000000111F9                 db  96h
.eh_frame_hdr:00000000000111FA                 db 0FFh
.eh_frame_hdr:00000000000111FB                 db 0FFh
.eh_frame_hdr:00000000000111FC                 db  98h
.eh_frame_hdr:00000000000111FD                 db  16h
.eh_frame_hdr:00000000000111FE                 db    0
.eh_frame_hdr:00000000000111FF                 db    0
.eh_frame_hdr:0000000000011200                 db  14h
.eh_frame_hdr:0000000000011201                 db  96h
.eh_frame_hdr:0000000000011202                 db 0FFh
.eh_frame_hdr:0000000000011203                 db 0FFh
.eh_frame_hdr:0000000000011204                 db 0ACh
.eh_frame_hdr:0000000000011205                 db  16h
.eh_frame_hdr:0000000000011206                 db    0
.eh_frame_hdr:0000000000011207                 db    0
.eh_frame_hdr:0000000000011208                 db  34h ; 4
.eh_frame_hdr:0000000000011209                 db  96h
.eh_frame_hdr:000000000001120A                 db 0FFh
.eh_frame_hdr:000000000001120B                 db 0FFh
.eh_frame_hdr:000000000001120C                 db 0C0h
.eh_frame_hdr:000000000001120D                 db  16h
.eh_frame_hdr:000000000001120E                 db    0
.eh_frame_hdr:000000000001120F                 db    0
.eh_frame_hdr:0000000000011210                 db  54h ; T
.eh_frame_hdr:0000000000011211                 db  96h
.eh_frame_hdr:0000000000011212                 db 0FFh
.eh_frame_hdr:0000000000011213                 db 0FFh
.eh_frame_hdr:0000000000011214                 db 0D4h
.eh_frame_hdr:0000000000011215                 db  16h
.eh_frame_hdr:0000000000011216                 db    0
.eh_frame_hdr:0000000000011217                 db    0
.eh_frame_hdr:0000000000011218                 db  74h ; t
.eh_frame_hdr:0000000000011219                 db  96h
.eh_frame_hdr:000000000001121A                 db 0FFh
.eh_frame_hdr:000000000001121B                 db 0FFh
.eh_frame_hdr:000000000001121C                 db 0ECh
.eh_frame_hdr:000000000001121D                 db  16h
.eh_frame_hdr:000000000001121E                 db    0
.eh_frame_hdr:000000000001121F                 db    0
.eh_frame_hdr:0000000000011220                 db 0A4h
.eh_frame_hdr:0000000000011221                 db  97h
.eh_frame_hdr:0000000000011222                 db 0FFh
.eh_frame_hdr:0000000000011223                 db 0FFh
.eh_frame_hdr:0000000000011224                 db  28h ; (
.eh_frame_hdr:0000000000011225                 db  17h
.eh_frame_hdr:0000000000011226                 db    0
.eh_frame_hdr:0000000000011227                 db    0
.eh_frame_hdr:0000000000011228                 db  44h ; D
.eh_frame_hdr:0000000000011229                 db  98h
.eh_frame_hdr:000000000001122A                 db 0FFh
.eh_frame_hdr:000000000001122B                 db 0FFh
.eh_frame_hdr:000000000001122C                 db  88h
.eh_frame_hdr:000000000001122D                 db  17h
.eh_frame_hdr:000000000001122E                 db    0
.eh_frame_hdr:000000000001122F                 db    0
.eh_frame_hdr:0000000000011230                 db  64h ; d
.eh_frame_hdr:0000000000011231                 db  98h
.eh_frame_hdr:0000000000011232                 db 0FFh
.eh_frame_hdr:0000000000011233                 db 0FFh
.eh_frame_hdr:0000000000011234                 db  9Ch
.eh_frame_hdr:0000000000011235                 db  17h
.eh_frame_hdr:0000000000011236                 db    0
.eh_frame_hdr:0000000000011237                 db    0
.eh_frame_hdr:0000000000011238                 db 0B4h
.eh_frame_hdr:0000000000011239                 db  98h
.eh_frame_hdr:000000000001123A                 db 0FFh
.eh_frame_hdr:000000000001123B                 db 0FFh
.eh_frame_hdr:000000000001123C                 db 0BCh
.eh_frame_hdr:000000000001123D                 db  17h
.eh_frame_hdr:000000000001123E                 db    0
.eh_frame_hdr:000000000001123F                 db    0
.eh_frame_hdr:0000000000011240                 db 0D4h
.eh_frame_hdr:0000000000011241                 db  98h
.eh_frame_hdr:0000000000011242                 db 0FFh
.eh_frame_hdr:0000000000011243                 db 0FFh
.eh_frame_hdr:0000000000011244                 db 0D0h
.eh_frame_hdr:0000000000011245                 db  17h
.eh_frame_hdr:0000000000011246                 db    0
.eh_frame_hdr:0000000000011247                 db    0
.eh_frame_hdr:0000000000011248                 db 0F4h
.eh_frame_hdr:0000000000011249                 db  98h
.eh_frame_hdr:000000000001124A                 db 0FFh
.eh_frame_hdr:000000000001124B                 db 0FFh
.eh_frame_hdr:000000000001124C                 db 0ECh
.eh_frame_hdr:000000000001124D                 db  17h
.eh_frame_hdr:000000000001124E                 db    0
.eh_frame_hdr:000000000001124F                 db    0
.eh_frame_hdr:0000000000011250                 db  14h
.eh_frame_hdr:0000000000011251                 db  9Dh
.eh_frame_hdr:0000000000011252                 db 0FFh
.eh_frame_hdr:0000000000011253                 db 0FFh
.eh_frame_hdr:0000000000011254                 db    0
.eh_frame_hdr:0000000000011255                 db  19h
.eh_frame_hdr:0000000000011256                 db    0
.eh_frame_hdr:0000000000011257                 db    0
.eh_frame_hdr:0000000000011258                 db  34h ; 4
.eh_frame_hdr:0000000000011259                 db  9Dh
.eh_frame_hdr:000000000001125A                 db 0FFh
.eh_frame_hdr:000000000001125B                 db 0FFh
.eh_frame_hdr:000000000001125C                 db  14h
.eh_frame_hdr:000000000001125D                 db  19h
.eh_frame_hdr:000000000001125E                 db    0
.eh_frame_hdr:000000000001125F                 db    0
.eh_frame_hdr:0000000000011260                 db 0B4h
.eh_frame_hdr:0000000000011261                 db  9Dh
.eh_frame_hdr:0000000000011262                 db 0FFh
.eh_frame_hdr:0000000000011263                 db 0FFh
.eh_frame_hdr:0000000000011264                 db  30h ; 0
.eh_frame_hdr:0000000000011265                 db  19h
.eh_frame_hdr:0000000000011266                 db    0
.eh_frame_hdr:0000000000011267                 db    0
.eh_frame_hdr:0000000000011268                 db  94h
.eh_frame_hdr:0000000000011269                 db  9Eh
.eh_frame_hdr:000000000001126A                 db 0FFh
.eh_frame_hdr:000000000001126B                 db 0FFh
.eh_frame_hdr:000000000001126C                 db  5Ch ; \
.eh_frame_hdr:000000000001126D                 db  19h
.eh_frame_hdr:000000000001126E                 db    0
.eh_frame_hdr:000000000001126F                 db    0
.eh_frame_hdr:0000000000011270                 db  14h
.eh_frame_hdr:0000000000011271                 db  9Fh
.eh_frame_hdr:0000000000011272                 db 0FFh
.eh_frame_hdr:0000000000011273                 db 0FFh
.eh_frame_hdr:0000000000011274                 db  7Ch ; |
.eh_frame_hdr:0000000000011275                 db  19h
.eh_frame_hdr:0000000000011276                 db    0
.eh_frame_hdr:0000000000011277                 db    0
.eh_frame_hdr:0000000000011278                 db  34h ; 4
.eh_frame_hdr:0000000000011279                 db  9Fh
.eh_frame_hdr:000000000001127A                 db 0FFh
.eh_frame_hdr:000000000001127B                 db 0FFh
.eh_frame_hdr:000000000001127C                 db  98h
.eh_frame_hdr:000000000001127D                 db  19h
.eh_frame_hdr:000000000001127E                 db    0
.eh_frame_hdr:000000000001127F                 db    0
.eh_frame_hdr:0000000000011280                 db  64h ; d
.eh_frame_hdr:0000000000011281                 db  9Fh
.eh_frame_hdr:0000000000011282                 db 0FFh
.eh_frame_hdr:0000000000011283                 db 0FFh
.eh_frame_hdr:0000000000011284                 db 0ACh
.eh_frame_hdr:0000000000011285                 db  19h
.eh_frame_hdr:0000000000011286                 db    0
.eh_frame_hdr:0000000000011287                 db    0
.eh_frame_hdr:0000000000011288                 db  74h ; t
.eh_frame_hdr:0000000000011289                 db  9Fh
.eh_frame_hdr:000000000001128A                 db 0FFh
.eh_frame_hdr:000000000001128B                 db 0FFh
.eh_frame_hdr:000000000001128C                 db 0C0h
.eh_frame_hdr:000000000001128D                 db  19h
.eh_frame_hdr:000000000001128E                 db    0
.eh_frame_hdr:000000000001128F                 db    0
.eh_frame_hdr:0000000000011290                 db 0B4h
.eh_frame_hdr:0000000000011291                 db  9Fh
.eh_frame_hdr:0000000000011292                 db 0FFh
.eh_frame_hdr:0000000000011293                 db 0FFh
.eh_frame_hdr:0000000000011294                 db 0E4h
.eh_frame_hdr:0000000000011295                 db  19h
.eh_frame_hdr:0000000000011296                 db    0
.eh_frame_hdr:0000000000011297                 db    0
.eh_frame_hdr:0000000000011298                 db 0E4h
.eh_frame_hdr:0000000000011299                 db  9Fh
.eh_frame_hdr:000000000001129A                 db 0FFh
.eh_frame_hdr:000000000001129B                 db 0FFh
.eh_frame_hdr:000000000001129C                 db 0F8h
.eh_frame_hdr:000000000001129D                 db  19h
.eh_frame_hdr:000000000001129E                 db    0
.eh_frame_hdr:000000000001129F                 db    0
.eh_frame_hdr:00000000000112A0                 db  74h ; t
.eh_frame_hdr:00000000000112A1                 db 0A0h
.eh_frame_hdr:00000000000112A2                 db 0FFh
.eh_frame_hdr:00000000000112A3                 db 0FFh
.eh_frame_hdr:00000000000112A4                 db  10h
.eh_frame_hdr:00000000000112A5                 db  1Ah
.eh_frame_hdr:00000000000112A6                 db    0
.eh_frame_hdr:00000000000112A7                 db    0
.eh_frame_hdr:00000000000112A8                 db 0C4h
.eh_frame_hdr:00000000000112A9                 db 0A0h
.eh_frame_hdr:00000000000112AA                 db 0FFh
.eh_frame_hdr:00000000000112AB                 db 0FFh
.eh_frame_hdr:00000000000112AC                 db  28h ; (
.eh_frame_hdr:00000000000112AD                 db  1Ah
.eh_frame_hdr:00000000000112AE                 db    0
.eh_frame_hdr:00000000000112AF                 db    0
.eh_frame_hdr:00000000000112B0                 db 0E4h
.eh_frame_hdr:00000000000112B1                 db 0A0h
.eh_frame_hdr:00000000000112B2                 db 0FFh
.eh_frame_hdr:00000000000112B3                 db 0FFh
.eh_frame_hdr:00000000000112B4                 db  44h ; D
.eh_frame_hdr:00000000000112B5                 db  1Ah
.eh_frame_hdr:00000000000112B6                 db    0
.eh_frame_hdr:00000000000112B7                 db    0
.eh_frame_hdr:00000000000112B8                 db  14h
.eh_frame_hdr:00000000000112B9                 db 0A1h
.eh_frame_hdr:00000000000112BA                 db 0FFh
.eh_frame_hdr:00000000000112BB                 db 0FFh
.eh_frame_hdr:00000000000112BC                 db  60h ; `
.eh_frame_hdr:00000000000112BD                 db  1Ah
.eh_frame_hdr:00000000000112BE                 db    0
.eh_frame_hdr:00000000000112BF                 db    0
.eh_frame_hdr:00000000000112C0                 db  44h ; D
.eh_frame_hdr:00000000000112C1                 db 0A1h
.eh_frame_hdr:00000000000112C2                 db 0FFh
.eh_frame_hdr:00000000000112C3                 db 0FFh
.eh_frame_hdr:00000000000112C4                 db  88h
.eh_frame_hdr:00000000000112C5                 db  1Ah
.eh_frame_hdr:00000000000112C6                 db    0
.eh_frame_hdr:00000000000112C7                 db    0
.eh_frame_hdr:00000000000112C8                 db  64h ; d
.eh_frame_hdr:00000000000112C9                 db 0A1h
.eh_frame_hdr:00000000000112CA                 db 0FFh
.eh_frame_hdr:00000000000112CB                 db 0FFh
.eh_frame_hdr:00000000000112CC                 db 0A4h
.eh_frame_hdr:00000000000112CD                 db  1Ah
.eh_frame_hdr:00000000000112CE                 db    0
.eh_frame_hdr:00000000000112CF                 db    0
.eh_frame_hdr:00000000000112D0                 db 0A4h
.eh_frame_hdr:00000000000112D1                 db 0A1h
.eh_frame_hdr:00000000000112D2                 db 0FFh
.eh_frame_hdr:00000000000112D3                 db 0FFh
.eh_frame_hdr:00000000000112D4                 db 0BCh
.eh_frame_hdr:00000000000112D5                 db  1Ah
.eh_frame_hdr:00000000000112D6                 db    0
.eh_frame_hdr:00000000000112D7                 db    0
.eh_frame_hdr:00000000000112D8                 db 0D4h
.eh_frame_hdr:00000000000112D9                 db 0A1h
.eh_frame_hdr:00000000000112DA                 db 0FFh
.eh_frame_hdr:00000000000112DB                 db 0FFh
.eh_frame_hdr:00000000000112DC                 db 0DCh
.eh_frame_hdr:00000000000112DD                 db  1Ah
.eh_frame_hdr:00000000000112DE                 db    0
.eh_frame_hdr:00000000000112DF                 db    0
.eh_frame_hdr:00000000000112E0                 db  84h
.eh_frame_hdr:00000000000112E1                 db 0A2h
.eh_frame_hdr:00000000000112E2                 db 0FFh
.eh_frame_hdr:00000000000112E3                 db 0FFh
.eh_frame_hdr:00000000000112E4                 db    4
.eh_frame_hdr:00000000000112E5                 db  1Bh
.eh_frame_hdr:00000000000112E6                 db    0
.eh_frame_hdr:00000000000112E7                 db    0
.eh_frame_hdr:00000000000112E8                 db 0A4h
.eh_frame_hdr:00000000000112E9                 db 0A6h
.eh_frame_hdr:00000000000112EA                 db 0FFh
.eh_frame_hdr:00000000000112EB                 db 0FFh
.eh_frame_hdr:00000000000112EC                 db  54h ; T
.eh_frame_hdr:00000000000112ED                 db  1Bh
.eh_frame_hdr:00000000000112EE                 db    0
.eh_frame_hdr:00000000000112EF                 db    0
.eh_frame_hdr:00000000000112F0                 db  64h ; d
.eh_frame_hdr:00000000000112F1                 db 0A7h
.eh_frame_hdr:00000000000112F2                 db 0FFh
.eh_frame_hdr:00000000000112F3                 db 0FFh
.eh_frame_hdr:00000000000112F4                 db  74h ; t
.eh_frame_hdr:00000000000112F5                 db  1Bh
.eh_frame_hdr:00000000000112F6                 db    0
.eh_frame_hdr:00000000000112F7                 db    0
.eh_frame_hdr:00000000000112F8                 db 0B4h
.eh_frame_hdr:00000000000112F9                 db 0A7h
.eh_frame_hdr:00000000000112FA                 db 0FFh
.eh_frame_hdr:00000000000112FB                 db 0FFh
.eh_frame_hdr:00000000000112FC                 db  90h
.eh_frame_hdr:00000000000112FD                 db  1Bh
.eh_frame_hdr:00000000000112FE                 db    0
.eh_frame_hdr:00000000000112FF                 db    0
.eh_frame_hdr:0000000000011300                 db 0F4h
.eh_frame_hdr:0000000000011301                 db 0A7h
.eh_frame_hdr:0000000000011302                 db 0FFh
.eh_frame_hdr:0000000000011303                 db 0FFh
.eh_frame_hdr:0000000000011304                 db 0BCh
.eh_frame_hdr:0000000000011305                 db  1Bh
.eh_frame_hdr:0000000000011306                 db    0
.eh_frame_hdr:0000000000011307                 db    0
.eh_frame_hdr:0000000000011308                 db 0D4h
.eh_frame_hdr:0000000000011309                 db 0AAh
.eh_frame_hdr:000000000001130A                 db 0FFh
.eh_frame_hdr:000000000001130B                 db 0FFh
.eh_frame_hdr:000000000001130C                 db  0Ch
.eh_frame_hdr:000000000001130D                 db  1Ch
.eh_frame_hdr:000000000001130E                 db    0
.eh_frame_hdr:000000000001130F                 db    0
.eh_frame_hdr:0000000000011310                 db    4
.eh_frame_hdr:0000000000011311                 db 0ACh
.eh_frame_hdr:0000000000011312                 db 0FFh
.eh_frame_hdr:0000000000011313                 db 0FFh
.eh_frame_hdr:0000000000011314                 db  44h ; D
.eh_frame_hdr:0000000000011315                 db  1Ch
.eh_frame_hdr:0000000000011316                 db    0
.eh_frame_hdr:0000000000011317                 db    0
.eh_frame_hdr:0000000000011318                 db  94h
.eh_frame_hdr:0000000000011319                 db 0ACh
.eh_frame_hdr:000000000001131A                 db 0FFh
.eh_frame_hdr:000000000001131B                 db 0FFh
.eh_frame_hdr:000000000001131C                 db  84h
.eh_frame_hdr:000000000001131D                 db  1Ch
.eh_frame_hdr:000000000001131E                 db    0
.eh_frame_hdr:000000000001131F                 db    0
.eh_frame_hdr:0000000000011320                 db  24h ; $
.eh_frame_hdr:0000000000011321                 db 0ADh
.eh_frame_hdr:0000000000011322                 db 0FFh
.eh_frame_hdr:0000000000011323                 db 0FFh
.eh_frame_hdr:0000000000011324                 db 0A0h
.eh_frame_hdr:0000000000011325                 db  1Ch
.eh_frame_hdr:0000000000011326                 db    0
.eh_frame_hdr:0000000000011327                 db    0
.eh_frame_hdr:0000000000011328                 db  64h ; d
.eh_frame_hdr:0000000000011329                 db 0ADh
.eh_frame_hdr:000000000001132A                 db 0FFh
.eh_frame_hdr:000000000001132B                 db 0FFh
.eh_frame_hdr:000000000001132C                 db 0BCh
.eh_frame_hdr:000000000001132D                 db  1Ch
.eh_frame_hdr:000000000001132E                 db    0
.eh_frame_hdr:000000000001132F                 db    0
.eh_frame_hdr:0000000000011330                 db 0B4h
.eh_frame_hdr:0000000000011331                 db 0B5h
.eh_frame_hdr:0000000000011332                 db 0FFh
.eh_frame_hdr:0000000000011333                 db 0FFh
.eh_frame_hdr:0000000000011334                 db  34h ; 4
.eh_frame_hdr:0000000000011335                 db  1Dh
.eh_frame_hdr:0000000000011336                 db    0
.eh_frame_hdr:0000000000011337                 db    0
.eh_frame_hdr:0000000000011338                 db  34h ; 4
.eh_frame_hdr:0000000000011339                 db 0B6h
.eh_frame_hdr:000000000001133A                 db 0FFh
.eh_frame_hdr:000000000001133B                 db 0FFh
.eh_frame_hdr:000000000001133C                 db  5Ch ; \
.eh_frame_hdr:000000000001133D                 db  1Dh
.eh_frame_hdr:000000000001133E                 db    0
.eh_frame_hdr:000000000001133F                 db    0
.eh_frame_hdr:0000000000011340                 db  24h ; $
.eh_frame_hdr:0000000000011341                 db 0B7h
.eh_frame_hdr:0000000000011342                 db 0FFh
.eh_frame_hdr:0000000000011343                 db 0FFh
.eh_frame_hdr:0000000000011344                 db 0ACh
.eh_frame_hdr:0000000000011345                 db  1Dh
.eh_frame_hdr:0000000000011346                 db    0
.eh_frame_hdr:0000000000011347                 db    0
.eh_frame_hdr:0000000000011348                 db  34h ; 4
.eh_frame_hdr:0000000000011349                 db 0B7h
.eh_frame_hdr:000000000001134A                 db 0FFh
.eh_frame_hdr:000000000001134B                 db 0FFh
.eh_frame_hdr:000000000001134C                 db 0C0h
.eh_frame_hdr:000000000001134D                 db  1Dh
.eh_frame_hdr:000000000001134E                 db    0
.eh_frame_hdr:000000000001134F                 db    0
.eh_frame_hdr:0000000000011350                 db  54h ; T
.eh_frame_hdr:0000000000011351                 db 0B8h
.eh_frame_hdr:0000000000011352                 db 0FFh
.eh_frame_hdr:0000000000011353                 db 0FFh
.eh_frame_hdr:0000000000011354                 db  0Ch
.eh_frame_hdr:0000000000011355                 db  1Eh
.eh_frame_hdr:0000000000011356                 db    0
.eh_frame_hdr:0000000000011357                 db    0
.eh_frame_hdr:0000000000011358                 db 0D4h
.eh_frame_hdr:0000000000011359                 db 0B8h
.eh_frame_hdr:000000000001135A                 db 0FFh
.eh_frame_hdr:000000000001135B                 db 0FFh
.eh_frame_hdr:000000000001135C                 db  38h ; 8
.eh_frame_hdr:000000000001135D                 db  1Eh
.eh_frame_hdr:000000000001135E                 db    0
.eh_frame_hdr:000000000001135F                 db    0
.eh_frame_hdr:0000000000011360                 db 0F4h
.eh_frame_hdr:0000000000011361                 db 0B9h
.eh_frame_hdr:0000000000011362                 db 0FFh
.eh_frame_hdr:0000000000011363                 db 0FFh
.eh_frame_hdr:0000000000011364                 db  98h
.eh_frame_hdr:0000000000011365                 db  1Eh
.eh_frame_hdr:0000000000011366                 db    0
.eh_frame_hdr:0000000000011367                 db    0
.eh_frame_hdr:0000000000011368                 db  64h ; d
.eh_frame_hdr:0000000000011369                 db 0BAh
.eh_frame_hdr:000000000001136A                 db 0FFh
.eh_frame_hdr:000000000001136B                 db 0FFh
.eh_frame_hdr:000000000001136C                 db 0E4h
.eh_frame_hdr:000000000001136D                 db  1Eh
.eh_frame_hdr:000000000001136E                 db    0
.eh_frame_hdr:000000000001136F                 db    0
.eh_frame_hdr:0000000000011370                 db 0B4h
.eh_frame_hdr:0000000000011371                 db 0BAh
.eh_frame_hdr:0000000000011372                 db 0FFh
.eh_frame_hdr:0000000000011373                 db 0FFh
.eh_frame_hdr:0000000000011374                 db  24h ; $
.eh_frame_hdr:0000000000011375                 db  1Fh
.eh_frame_hdr:0000000000011376                 db    0
.eh_frame_hdr:0000000000011377                 db    0
.eh_frame_hdr:0000000000011378                 db  34h ; 4
.eh_frame_hdr:0000000000011379                 db 0BBh
.eh_frame_hdr:000000000001137A                 db 0FFh
.eh_frame_hdr:000000000001137B                 db 0FFh
.eh_frame_hdr:000000000001137C                 db  74h ; t
.eh_frame_hdr:000000000001137D                 db  1Fh
.eh_frame_hdr:000000000001137E                 db    0
.eh_frame_hdr:000000000001137F                 db    0
.eh_frame_hdr:0000000000011380                 db 0A4h
.eh_frame_hdr:0000000000011381                 db 0BBh
.eh_frame_hdr:0000000000011382                 db 0FFh
.eh_frame_hdr:0000000000011383                 db 0FFh
.eh_frame_hdr:0000000000011384                 db  94h
.eh_frame_hdr:0000000000011385                 db  1Fh
.eh_frame_hdr:0000000000011386                 db    0
.eh_frame_hdr:0000000000011387                 db    0
.eh_frame_hdr:0000000000011388                 db    4
.eh_frame_hdr:0000000000011389                 db 0BCh
.eh_frame_hdr:000000000001138A                 db 0FFh
.eh_frame_hdr:000000000001138B                 db 0FFh
.eh_frame_hdr:000000000001138C                 db 0B4h
.eh_frame_hdr:000000000001138D                 db  1Fh
.eh_frame_hdr:000000000001138E                 db    0
.eh_frame_hdr:000000000001138F                 db    0
.eh_frame_hdr:0000000000011390                 db  44h ; D
.eh_frame_hdr:0000000000011391                 db 0BCh
.eh_frame_hdr:0000000000011392                 db 0FFh
.eh_frame_hdr:0000000000011393                 db 0FFh
.eh_frame_hdr:0000000000011394                 db 0CCh
.eh_frame_hdr:0000000000011395                 db  1Fh
.eh_frame_hdr:0000000000011396                 db    0
.eh_frame_hdr:0000000000011397                 db    0
.eh_frame_hdr:0000000000011398                 db  84h
.eh_frame_hdr:0000000000011399                 db 0BCh
.eh_frame_hdr:000000000001139A                 db 0FFh
.eh_frame_hdr:000000000001139B                 db 0FFh
.eh_frame_hdr:000000000001139C                 db 0ECh
.eh_frame_hdr:000000000001139D                 db  1Fh
.eh_frame_hdr:000000000001139E                 db    0
.eh_frame_hdr:000000000001139F                 db    0
.eh_frame_hdr:00000000000113A0                 db 0C4h
.eh_frame_hdr:00000000000113A1                 db 0BCh
.eh_frame_hdr:00000000000113A2                 db 0FFh
.eh_frame_hdr:00000000000113A3                 db 0FFh
.eh_frame_hdr:00000000000113A4                 db  24h ; $
.eh_frame_hdr:00000000000113A5                 db  20h
.eh_frame_hdr:00000000000113A6                 db    0
.eh_frame_hdr:00000000000113A7                 db    0
.eh_frame_hdr:00000000000113A8                 db  44h ; D
.eh_frame_hdr:00000000000113A9                 db 0BDh
.eh_frame_hdr:00000000000113AA                 db 0FFh
.eh_frame_hdr:00000000000113AB                 db 0FFh
.eh_frame_hdr:00000000000113AC                 db  5Ch ; \
.eh_frame_hdr:00000000000113AD                 db  20h
.eh_frame_hdr:00000000000113AE                 db    0
.eh_frame_hdr:00000000000113AF                 db    0
.eh_frame_hdr:00000000000113B0                 db  84h
.eh_frame_hdr:00000000000113B1                 db 0BDh
.eh_frame_hdr:00000000000113B2                 db 0FFh
.eh_frame_hdr:00000000000113B3                 db 0FFh
.eh_frame_hdr:00000000000113B4                 db  7Ch ; |
.eh_frame_hdr:00000000000113B5                 db  20h
.eh_frame_hdr:00000000000113B6                 db    0
.eh_frame_hdr:00000000000113B7                 db    0
.eh_frame_hdr:00000000000113B8                 db 0E4h
.eh_frame_hdr:00000000000113B9                 db 0BDh
.eh_frame_hdr:00000000000113BA                 db 0FFh
.eh_frame_hdr:00000000000113BB                 db 0FFh
.eh_frame_hdr:00000000000113BC                 db 0ACh
.eh_frame_hdr:00000000000113BD                 db  20h
.eh_frame_hdr:00000000000113BE                 db    0
.eh_frame_hdr:00000000000113BF                 db    0
.eh_frame_hdr:00000000000113C0                 db    4
.eh_frame_hdr:00000000000113C1                 db 0CFh
.eh_frame_hdr:00000000000113C2                 db 0FFh
.eh_frame_hdr:00000000000113C3                 db 0FFh
.eh_frame_hdr:00000000000113C4                 db 0DCh
.eh_frame_hdr:00000000000113C5                 db  20h
.eh_frame_hdr:00000000000113C6                 db    0
.eh_frame_hdr:00000000000113C7                 db    0
.eh_frame_hdr:00000000000113C8                 db  14h
.eh_frame_hdr:00000000000113C9                 db 0CFh
.eh_frame_hdr:00000000000113CA                 db 0FFh
.eh_frame_hdr:00000000000113CB                 db 0FFh
.eh_frame_hdr:00000000000113CC                 db 0F4h
.eh_frame_hdr:00000000000113CD                 db  20h
.eh_frame_hdr:00000000000113CE                 db    0
.eh_frame_hdr:00000000000113CF                 db    0
.eh_frame_hdr:00000000000113D0                 db  94h
.eh_frame_hdr:00000000000113D1                 db 0D1h
.eh_frame_hdr:00000000000113D2                 db 0FFh
.eh_frame_hdr:00000000000113D3                 db 0FFh
.eh_frame_hdr:00000000000113D4                 db  2Ch ; ,
.eh_frame_hdr:00000000000113D5                 db  21h ; !
.eh_frame_hdr:00000000000113D6                 db    0
.eh_frame_hdr:00000000000113D7                 db    0
.eh_frame_hdr:00000000000113D8                 db  94h
.eh_frame_hdr:00000000000113D9                 db 0D3h
.eh_frame_hdr:00000000000113DA                 db 0FFh
.eh_frame_hdr:00000000000113DB                 db 0FFh
.eh_frame_hdr:00000000000113DC                 db  44h ; D
.eh_frame_hdr:00000000000113DD                 db  21h ; !
.eh_frame_hdr:00000000000113DE                 db    0
.eh_frame_hdr:00000000000113DF                 db    0
.eh_frame_hdr:00000000000113E0                 db  84h
.eh_frame_hdr:00000000000113E1                 db 0E0h
.eh_frame_hdr:00000000000113E2                 db 0FFh
.eh_frame_hdr:00000000000113E3                 db 0FFh
.eh_frame_hdr:00000000000113E4                 db  94h
.eh_frame_hdr:00000000000113E5                 db  21h ; !
.eh_frame_hdr:00000000000113E6                 db    0
.eh_frame_hdr:00000000000113E7                 db    0
.eh_frame_hdr:00000000000113E8                 db 0F4h
.eh_frame_hdr:00000000000113E9                 db 0E0h
.eh_frame_hdr:00000000000113EA                 db 0FFh
.eh_frame_hdr:00000000000113EB                 db 0FFh
.eh_frame_hdr:00000000000113EC                 db 0DCh
.eh_frame_hdr:00000000000113ED                 db  21h ; !
.eh_frame_hdr:00000000000113EE                 db    0
.eh_frame_hdr:00000000000113EF                 db    0
.eh_frame_hdr:00000000000113F0                 db    4
.eh_frame_hdr:00000000000113F1                 db 0E1h
.eh_frame_hdr:00000000000113F2                 db 0FFh
.eh_frame_hdr:00000000000113F3                 db 0FFh
.eh_frame_hdr:00000000000113F4                 db 0F4h
.eh_frame_hdr:00000000000113F5                 db  21h ; !
.eh_frame_hdr:00000000000113F6                 db    0
.eh_frame_hdr:00000000000113F7                 db    0
.eh_frame_hdr:00000000000113F7 _eh_frame_hdr   ends
.eh_frame_hdr:00000000000113F7
.eh_frame:00000000000113F8 ; ===========================================================================
.eh_frame:00000000000113F8
.eh_frame:00000000000113F8 ; Segment type: Pure data
.eh_frame:00000000000113F8 ; Segment permissions: Read
.eh_frame:00000000000113F8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000113F8                 assume cs:_eh_frame
.eh_frame:00000000000113F8                 ;org 113F8h
.eh_frame:00000000000113F8                 db  14h
.eh_frame:00000000000113F9                 db    0
.eh_frame:00000000000113FA                 db    0
.eh_frame:00000000000113FB                 db    0
.eh_frame:00000000000113FC                 db    0
.eh_frame:00000000000113FD                 db    0
.eh_frame:00000000000113FE                 db    0
.eh_frame:00000000000113FF                 db    0
.eh_frame:0000000000011400                 db    1
.eh_frame:0000000000011401                 db  7Ah ; z
.eh_frame:0000000000011402                 db  52h ; R
.eh_frame:0000000000011403                 db    0
.eh_frame:0000000000011404                 db    1
.eh_frame:0000000000011405                 db  78h ; x
.eh_frame:0000000000011406                 db  10h
.eh_frame:0000000000011407                 db    1
.eh_frame:0000000000011408                 db  1Bh
.eh_frame:0000000000011409                 db  0Ch
.eh_frame:000000000001140A                 db    7
.eh_frame:000000000001140B                 db    8
.eh_frame:000000000001140C                 db  90h
.eh_frame:000000000001140D                 db    1
.eh_frame:000000000001140E                 db    7
.eh_frame:000000000001140F                 db  10h
.eh_frame:0000000000011410                 db  14h
.eh_frame:0000000000011411                 db    0
.eh_frame:0000000000011412                 db    0
.eh_frame:0000000000011413                 db    0
.eh_frame:0000000000011414                 db  1Ch
.eh_frame:0000000000011415                 db    0
.eh_frame:0000000000011416                 db    0
.eh_frame:0000000000011417                 db    0
.eh_frame:0000000000011418                 db  88h
.eh_frame:0000000000011419                 db  27h ; '
.eh_frame:000000000001141A                 db 0FFh
.eh_frame:000000000001141B                 db 0FFh
.eh_frame:000000000001141C                 db  2Bh ; +
.eh_frame:000000000001141D                 db    0
.eh_frame:000000000001141E                 db    0
.eh_frame:000000000001141F                 db    0
.eh_frame:0000000000011420                 db    0
.eh_frame:0000000000011421                 db    0
.eh_frame:0000000000011422                 db    0
.eh_frame:0000000000011423                 db    0
.eh_frame:0000000000011424                 db    0
.eh_frame:0000000000011425                 db    0
.eh_frame:0000000000011426                 db    0
.eh_frame:0000000000011427                 db    0
.eh_frame:0000000000011428                 db  14h
.eh_frame:0000000000011429                 db    0
.eh_frame:000000000001142A                 db    0
.eh_frame:000000000001142B                 db    0
.eh_frame:000000000001142C                 db    0
.eh_frame:000000000001142D                 db    0
.eh_frame:000000000001142E                 db    0
.eh_frame:000000000001142F                 db    0
.eh_frame:0000000000011430                 db    1
.eh_frame:0000000000011431                 db  7Ah ; z
.eh_frame:0000000000011432                 db  52h ; R
.eh_frame:0000000000011433                 db    0
.eh_frame:0000000000011434                 db    1
.eh_frame:0000000000011435                 db  78h ; x
.eh_frame:0000000000011436                 db  10h
.eh_frame:0000000000011437                 db    1
.eh_frame:0000000000011438                 db  1Bh
.eh_frame:0000000000011439                 db  0Ch
.eh_frame:000000000001143A                 db    7
.eh_frame:000000000001143B                 db    8
.eh_frame:000000000001143C                 db  90h
.eh_frame:000000000001143D                 db    1
.eh_frame:000000000001143E                 db    0
.eh_frame:000000000001143F                 db    0
.eh_frame:0000000000011440                 db  24h ; $
.eh_frame:0000000000011441                 db    0
.eh_frame:0000000000011442                 db    0
.eh_frame:0000000000011443                 db    0
.eh_frame:0000000000011444                 db  1Ch
.eh_frame:0000000000011445                 db    0
.eh_frame:0000000000011446                 db    0
.eh_frame:0000000000011447                 db    0
.eh_frame:0000000000011448                 db 0F8h
.eh_frame:0000000000011449                 db  0Bh
.eh_frame:000000000001144A                 db 0FFh
.eh_frame:000000000001144B                 db 0FFh
.eh_frame:000000000001144C                 db  70h ; p
.eh_frame:000000000001144D                 db    5
.eh_frame:000000000001144E                 db    0
.eh_frame:000000000001144F                 db    0
.eh_frame:0000000000011450                 db    0
.eh_frame:0000000000011451                 db  0Eh
.eh_frame:0000000000011452                 db  10h
.eh_frame:0000000000011453                 db  46h ; F
.eh_frame:0000000000011454                 db  0Eh
.eh_frame:0000000000011455                 db  18h
.eh_frame:0000000000011456                 db  4Ah ; J
.eh_frame:0000000000011457                 db  0Fh
.eh_frame:0000000000011458                 db  0Bh
.eh_frame:0000000000011459                 db  77h ; w
.eh_frame:000000000001145A                 db    8
.eh_frame:000000000001145B                 db  80h
.eh_frame:000000000001145C                 db    0
.eh_frame:000000000001145D                 db  3Fh ; ?
.eh_frame:000000000001145E                 db  1Ah
.eh_frame:000000000001145F                 db  3Bh ; ;
.eh_frame:0000000000011460                 db  2Ah ; *
.eh_frame:0000000000011461                 db  33h ; 3
.eh_frame:0000000000011462                 db  24h ; $
.eh_frame:0000000000011463                 db  22h ; "
.eh_frame:0000000000011464                 db    0
.eh_frame:0000000000011465                 db    0
.eh_frame:0000000000011466                 db    0
.eh_frame:0000000000011467                 db    0
.eh_frame:0000000000011468                 db  14h
.eh_frame:0000000000011469                 db    0
.eh_frame:000000000001146A                 db    0
.eh_frame:000000000001146B                 db    0
.eh_frame:000000000001146C                 db  44h ; D
.eh_frame:000000000001146D                 db    0
.eh_frame:000000000001146E                 db    0
.eh_frame:000000000001146F                 db    0
.eh_frame:0000000000011470                 db  40h ; @
.eh_frame:0000000000011471                 db  11h
.eh_frame:0000000000011472                 db 0FFh
.eh_frame:0000000000011473                 db 0FFh
.eh_frame:0000000000011474                 db    8
.eh_frame:0000000000011475                 db    0
.eh_frame:0000000000011476                 db    0
.eh_frame:0000000000011477                 db    0
.eh_frame:0000000000011478                 db    0
.eh_frame:0000000000011479                 db    0
.eh_frame:000000000001147A                 db    0
.eh_frame:000000000001147B                 db    0
.eh_frame:000000000001147C                 db    0
.eh_frame:000000000001147D                 db    0
.eh_frame:000000000001147E                 db    0
.eh_frame:000000000001147F                 db    0
.eh_frame:0000000000011480                 db  10h
.eh_frame:0000000000011481                 db    0
.eh_frame:0000000000011482                 db    0
.eh_frame:0000000000011483                 db    0
.eh_frame:0000000000011484                 db  5Ch ; \
.eh_frame:0000000000011485                 db    0
.eh_frame:0000000000011486                 db    0
.eh_frame:0000000000011487                 db    0
.eh_frame:0000000000011488                 db  28h ; (
.eh_frame:0000000000011489                 db  28h ; (
.eh_frame:000000000001148A                 db 0FFh
.eh_frame:000000000001148B                 db 0FFh
.eh_frame:000000000001148C                 db  24h ; $
.eh_frame:000000000001148D                 db    0
.eh_frame:000000000001148E                 db    0
.eh_frame:000000000001148F                 db    0
.eh_frame:0000000000011490                 db    0
.eh_frame:0000000000011491                 db    0
.eh_frame:0000000000011492                 db    0
.eh_frame:0000000000011493                 db    0
.eh_frame:0000000000011494                 db  10h
.eh_frame:0000000000011495                 db    0
.eh_frame:0000000000011496                 db    0
.eh_frame:0000000000011497                 db    0
.eh_frame:0000000000011498                 db  70h ; p
.eh_frame:0000000000011499                 db    0
.eh_frame:000000000001149A                 db    0
.eh_frame:000000000001149B                 db    0
.eh_frame:000000000001149C                 db  44h ; D
.eh_frame:000000000001149D                 db  28h ; (
.eh_frame:000000000001149E                 db 0FFh
.eh_frame:000000000001149F                 db 0FFh
.eh_frame:00000000000114A0                 db  0Ch
.eh_frame:00000000000114A1                 db    0
.eh_frame:00000000000114A2                 db    0
.eh_frame:00000000000114A3                 db    0
.eh_frame:00000000000114A4                 db    0
.eh_frame:00000000000114A5                 db    0
.eh_frame:00000000000114A6                 db    0
.eh_frame:00000000000114A7                 db    0
.eh_frame:00000000000114A8                 db  10h
.eh_frame:00000000000114A9                 db    0
.eh_frame:00000000000114AA                 db    0
.eh_frame:00000000000114AB                 db    0
.eh_frame:00000000000114AC                 db  84h
.eh_frame:00000000000114AD                 db    0
.eh_frame:00000000000114AE                 db    0
.eh_frame:00000000000114AF                 db    0
.eh_frame:00000000000114B0                 db  40h ; @
.eh_frame:00000000000114B1                 db  28h ; (
.eh_frame:00000000000114B2                 db 0FFh
.eh_frame:00000000000114B3                 db 0FFh
.eh_frame:00000000000114B4                 db  0Ah
.eh_frame:00000000000114B5                 db    0
.eh_frame:00000000000114B6                 db    0
.eh_frame:00000000000114B7                 db    0
.eh_frame:00000000000114B8                 db    0
.eh_frame:00000000000114B9                 db    0
.eh_frame:00000000000114BA                 db    0
.eh_frame:00000000000114BB                 db    0
.eh_frame:00000000000114BC                 db  34h ; 4
.eh_frame:00000000000114BD                 db    0
.eh_frame:00000000000114BE                 db    0
.eh_frame:00000000000114BF                 db    0
.eh_frame:00000000000114C0                 db  98h
.eh_frame:00000000000114C1                 db    0
.eh_frame:00000000000114C2                 db    0
.eh_frame:00000000000114C3                 db    0
.eh_frame:00000000000114C4                 db  3Ch ; <
.eh_frame:00000000000114C5                 db  28h ; (
.eh_frame:00000000000114C6                 db 0FFh
.eh_frame:00000000000114C7                 db 0FFh
.eh_frame:00000000000114C8                 db  4Eh ; N
.eh_frame:00000000000114C9                 db    0
.eh_frame:00000000000114CA                 db    0
.eh_frame:00000000000114CB                 db    0
.eh_frame:00000000000114CC                 db    0
.eh_frame:00000000000114CD                 db  42h ; B
.eh_frame:00000000000114CE                 db  0Eh
.eh_frame:00000000000114CF                 db  10h
.eh_frame:00000000000114D0                 db  8Ch
.eh_frame:00000000000114D1                 db    2
.eh_frame:00000000000114D2                 db  41h ; A
.eh_frame:00000000000114D3                 db  0Eh
.eh_frame:00000000000114D4                 db  18h
.eh_frame:00000000000114D5                 db  86h
.eh_frame:00000000000114D6                 db    3
.eh_frame:00000000000114D7                 db  41h ; A
.eh_frame:00000000000114D8                 db  0Eh
.eh_frame:00000000000114D9                 db  20h
.eh_frame:00000000000114DA                 db  83h
.eh_frame:00000000000114DB                 db    4
.eh_frame:00000000000114DC                 db  78h ; x
.eh_frame:00000000000114DD                 db  0Ah
.eh_frame:00000000000114DE                 db  0Eh
.eh_frame:00000000000114DF                 db  18h
.eh_frame:00000000000114E0                 db  41h ; A
.eh_frame:00000000000114E1                 db  0Eh
.eh_frame:00000000000114E2                 db  10h
.eh_frame:00000000000114E3                 db  42h ; B
.eh_frame:00000000000114E4                 db  0Eh
.eh_frame:00000000000114E5                 db    8
.eh_frame:00000000000114E6                 db  41h ; A
.eh_frame:00000000000114E7                 db  0Bh
.eh_frame:00000000000114E8                 db  4Ah ; J
.eh_frame:00000000000114E9                 db  0Eh
.eh_frame:00000000000114EA                 db  18h
.eh_frame:00000000000114EB                 db  41h ; A
.eh_frame:00000000000114EC                 db  0Eh
.eh_frame:00000000000114ED                 db  10h
.eh_frame:00000000000114EE                 db  42h ; B
.eh_frame:00000000000114EF                 db  0Eh
.eh_frame:00000000000114F0                 db    8
.eh_frame:00000000000114F1                 db    0
.eh_frame:00000000000114F2                 db    0
.eh_frame:00000000000114F3                 db    0
.eh_frame:00000000000114F4                 db  40h ; @
.eh_frame:00000000000114F5                 db    0
.eh_frame:00000000000114F6                 db    0
.eh_frame:00000000000114F7                 db    0
.eh_frame:00000000000114F8                 db 0D0h
.eh_frame:00000000000114F9                 db    0
.eh_frame:00000000000114FA                 db    0
.eh_frame:00000000000114FB                 db    0
.eh_frame:00000000000114FC                 db  54h ; T
.eh_frame:00000000000114FD                 db  28h ; (
.eh_frame:00000000000114FE                 db 0FFh
.eh_frame:00000000000114FF                 db 0FFh
.eh_frame:0000000000011500                 db  5Ch ; \
.eh_frame:0000000000011501                 db    0
.eh_frame:0000000000011502                 db    0
.eh_frame:0000000000011503                 db    0
.eh_frame:0000000000011504                 db    0
.eh_frame:0000000000011505                 db  42h ; B
.eh_frame:0000000000011506                 db  0Eh
.eh_frame:0000000000011507                 db  10h
.eh_frame:0000000000011508                 db  8Ch
.eh_frame:0000000000011509                 db    2
.eh_frame:000000000001150A                 db  41h ; A
.eh_frame:000000000001150B                 db  0Eh
.eh_frame:000000000001150C                 db  18h
.eh_frame:000000000001150D                 db  86h
.eh_frame:000000000001150E                 db    3
.eh_frame:000000000001150F                 db  41h ; A
.eh_frame:0000000000011510                 db  0Eh
.eh_frame:0000000000011511                 db  20h
.eh_frame:0000000000011512                 db  83h
.eh_frame:0000000000011513                 db    4
.eh_frame:0000000000011514                 db  77h ; w
.eh_frame:0000000000011515                 db  0Ah
.eh_frame:0000000000011516                 db  0Eh
.eh_frame:0000000000011517                 db  18h
.eh_frame:0000000000011518                 db  41h ; A
.eh_frame:0000000000011519                 db  0Eh
.eh_frame:000000000001151A                 db  10h
.eh_frame:000000000001151B                 db  42h ; B
.eh_frame:000000000001151C                 db  0Eh
.eh_frame:000000000001151D                 db    8
.eh_frame:000000000001151E                 db  42h ; B
.eh_frame:000000000001151F                 db  0Bh
.eh_frame:0000000000011520                 db  45h ; E
.eh_frame:0000000000011521                 db  0Ah
.eh_frame:0000000000011522                 db  0Eh
.eh_frame:0000000000011523                 db  18h
.eh_frame:0000000000011524                 db  41h ; A
.eh_frame:0000000000011525                 db  0Eh
.eh_frame:0000000000011526                 db  10h
.eh_frame:0000000000011527                 db  42h ; B
.eh_frame:0000000000011528                 db  0Eh
.eh_frame:0000000000011529                 db    8
.eh_frame:000000000001152A                 db  48h ; H
.eh_frame:000000000001152B                 db  0Bh
.eh_frame:000000000001152C                 db  48h ; H
.eh_frame:000000000001152D                 db  0Eh
.eh_frame:000000000001152E                 db  18h
.eh_frame:000000000001152F                 db  41h ; A
.eh_frame:0000000000011530                 db  0Eh
.eh_frame:0000000000011531                 db  10h
.eh_frame:0000000000011532                 db  42h ; B
.eh_frame:0000000000011533                 db  0Eh
.eh_frame:0000000000011534                 db    8
.eh_frame:0000000000011535                 db    0
.eh_frame:0000000000011536                 db    0
.eh_frame:0000000000011537                 db    0
.eh_frame:0000000000011538                 db  10h
.eh_frame:0000000000011539                 db    0
.eh_frame:000000000001153A                 db    0
.eh_frame:000000000001153B                 db    0
.eh_frame:000000000001153C                 db  14h
.eh_frame:000000000001153D                 db    1
.eh_frame:000000000001153E                 db    0
.eh_frame:000000000001153F                 db    0
.eh_frame:0000000000011540                 db  70h ; p
.eh_frame:0000000000011541                 db  28h ; (
.eh_frame:0000000000011542                 db 0FFh
.eh_frame:0000000000011543                 db 0FFh
.eh_frame:0000000000011544                 db    5
.eh_frame:0000000000011545                 db    0
.eh_frame:0000000000011546                 db    0
.eh_frame:0000000000011547                 db    0
.eh_frame:0000000000011548                 db    0
.eh_frame:0000000000011549                 db    0
.eh_frame:000000000001154A                 db    0
.eh_frame:000000000001154B                 db    0
.eh_frame:000000000001154C                 db  1Ch
.eh_frame:000000000001154D                 db    0
.eh_frame:000000000001154E                 db    0
.eh_frame:000000000001154F                 db    0
.eh_frame:0000000000011550                 db  28h ; (
.eh_frame:0000000000011551                 db    1
.eh_frame:0000000000011552                 db    0
.eh_frame:0000000000011553                 db    0
.eh_frame:0000000000011554                 db  6Ch ; l
.eh_frame:0000000000011555                 db  28h ; (
.eh_frame:0000000000011556                 db 0FFh
.eh_frame:0000000000011557                 db 0FFh
.eh_frame:0000000000011558                 db  90h
.eh_frame:0000000000011559                 db    0
.eh_frame:000000000001155A                 db    0
.eh_frame:000000000001155B                 db    0
.eh_frame:000000000001155C                 db    0
.eh_frame:000000000001155D                 db  4Dh ; M
.eh_frame:000000000001155E                 db  0Eh
.eh_frame:000000000001155F                 db  10h
.eh_frame:0000000000011560                 db  83h
.eh_frame:0000000000011561                 db    2
.eh_frame:0000000000011562                 db    2
.eh_frame:0000000000011563                 db  6Fh ; o
.eh_frame:0000000000011564                 db  0Ah
.eh_frame:0000000000011565                 db  0Eh
.eh_frame:0000000000011566                 db    8
.eh_frame:0000000000011567                 db  41h ; A
.eh_frame:0000000000011568                 db  0Bh
.eh_frame:0000000000011569                 db    0
.eh_frame:000000000001156A                 db    0
.eh_frame:000000000001156B                 db    0
.eh_frame:000000000001156C                 db  14h
.eh_frame:000000000001156D                 db    0
.eh_frame:000000000001156E                 db    0
.eh_frame:000000000001156F                 db    0
.eh_frame:0000000000011570                 db  48h ; H
.eh_frame:0000000000011571                 db    1
.eh_frame:0000000000011572                 db    0
.eh_frame:0000000000011573                 db    0
.eh_frame:0000000000011574                 db 0DCh
.eh_frame:0000000000011575                 db  28h ; (
.eh_frame:0000000000011576                 db 0FFh
.eh_frame:0000000000011577                 db 0FFh
.eh_frame:0000000000011578                 db  6Bh ; k
.eh_frame:0000000000011579                 db    0
.eh_frame:000000000001157A                 db    0
.eh_frame:000000000001157B                 db    0
.eh_frame:000000000001157C                 db    0
.eh_frame:000000000001157D                 db  62h ; b
.eh_frame:000000000001157E                 db  0Eh
.eh_frame:000000000001157F                 db  10h
.eh_frame:0000000000011580                 db  54h ; T
.eh_frame:0000000000011581                 db  0Eh
.eh_frame:0000000000011582                 db    8
.eh_frame:0000000000011583                 db    0
.eh_frame:0000000000011584                 db  18h
.eh_frame:0000000000011585                 db    0
.eh_frame:0000000000011586                 db    0
.eh_frame:0000000000011587                 db    0
.eh_frame:0000000000011588                 db  60h ; `
.eh_frame:0000000000011589                 db    1
.eh_frame:000000000001158A                 db    0
.eh_frame:000000000001158B                 db    0
.eh_frame:000000000001158C                 db  34h ; 4
.eh_frame:000000000001158D                 db  29h ; )
.eh_frame:000000000001158E                 db 0FFh
.eh_frame:000000000001158F                 db 0FFh
.eh_frame:0000000000011590                 db  42h ; B
.eh_frame:0000000000011591                 db    0
.eh_frame:0000000000011592                 db    0
.eh_frame:0000000000011593                 db    0
.eh_frame:0000000000011594                 db    0
.eh_frame:0000000000011595                 db  47h ; G
.eh_frame:0000000000011596                 db  0Eh
.eh_frame:0000000000011597                 db  10h
.eh_frame:0000000000011598                 db  83h
.eh_frame:0000000000011599                 db    2
.eh_frame:000000000001159A                 db  5Bh ; [
.eh_frame:000000000001159B                 db  0Ah
.eh_frame:000000000001159C                 db  0Eh
.eh_frame:000000000001159D                 db    8
.eh_frame:000000000001159E                 db  4Eh ; N
.eh_frame:000000000001159F                 db  0Bh
.eh_frame:00000000000115A0                 db  4Ch ; L
.eh_frame:00000000000115A1                 db    0
.eh_frame:00000000000115A2                 db    0
.eh_frame:00000000000115A3                 db    0
.eh_frame:00000000000115A4                 db  7Ch ; |
.eh_frame:00000000000115A5                 db    1
.eh_frame:00000000000115A6                 db    0
.eh_frame:00000000000115A7                 db    0
.eh_frame:00000000000115A8                 db  68h ; h
.eh_frame:00000000000115A9                 db  29h ; )
.eh_frame:00000000000115AA                 db 0FFh
.eh_frame:00000000000115AB                 db 0FFh
.eh_frame:00000000000115AC                 db  8Fh
.eh_frame:00000000000115AD                 db    2
.eh_frame:00000000000115AE                 db    0
.eh_frame:00000000000115AF                 db    0
.eh_frame:00000000000115B0                 db    0
.eh_frame:00000000000115B1                 db  42h ; B
.eh_frame:00000000000115B2                 db  0Eh
.eh_frame:00000000000115B3                 db  10h
.eh_frame:00000000000115B4                 db  8Fh
.eh_frame:00000000000115B5                 db    2
.eh_frame:00000000000115B6                 db  42h ; B
.eh_frame:00000000000115B7                 db  0Eh
.eh_frame:00000000000115B8                 db  18h
.eh_frame:00000000000115B9                 db  8Eh
.eh_frame:00000000000115BA                 db    3
.eh_frame:00000000000115BB                 db  42h ; B
.eh_frame:00000000000115BC                 db  0Eh
.eh_frame:00000000000115BD                 db  20h
.eh_frame:00000000000115BE                 db  8Dh
.eh_frame:00000000000115BF                 db    4
.eh_frame:00000000000115C0                 db  42h ; B
.eh_frame:00000000000115C1                 db  0Eh
.eh_frame:00000000000115C2                 db  28h ; (
.eh_frame:00000000000115C3                 db  8Ch
.eh_frame:00000000000115C4                 db    5
.eh_frame:00000000000115C5                 db  41h ; A
.eh_frame:00000000000115C6                 db  0Eh
.eh_frame:00000000000115C7                 db  30h ; 0
.eh_frame:00000000000115C8                 db  86h
.eh_frame:00000000000115C9                 db    6
.eh_frame:00000000000115CA                 db  41h ; A
.eh_frame:00000000000115CB                 db  0Eh
.eh_frame:00000000000115CC                 db  38h ; 8
.eh_frame:00000000000115CD                 db  83h
.eh_frame:00000000000115CE                 db    7
.eh_frame:00000000000115CF                 db  47h ; G
.eh_frame:00000000000115D0                 db  0Eh
.eh_frame:00000000000115D1                 db  80h
.eh_frame:00000000000115D2                 db    6
.eh_frame:00000000000115D3                 db    3
.eh_frame:00000000000115D4                 db  41h ; A
.eh_frame:00000000000115D5                 db    2
.eh_frame:00000000000115D6                 db  0Ah
.eh_frame:00000000000115D7                 db  0Eh
.eh_frame:00000000000115D8                 db  38h ; 8
.eh_frame:00000000000115D9                 db  41h ; A
.eh_frame:00000000000115DA                 db  0Eh
.eh_frame:00000000000115DB                 db  30h ; 0
.eh_frame:00000000000115DC                 db  41h ; A
.eh_frame:00000000000115DD                 db  0Eh
.eh_frame:00000000000115DE                 db  28h ; (
.eh_frame:00000000000115DF                 db  42h ; B
.eh_frame:00000000000115E0                 db  0Eh
.eh_frame:00000000000115E1                 db  20h
.eh_frame:00000000000115E2                 db  42h ; B
.eh_frame:00000000000115E3                 db  0Eh
.eh_frame:00000000000115E4                 db  18h
.eh_frame:00000000000115E5                 db  42h ; B
.eh_frame:00000000000115E6                 db  0Eh
.eh_frame:00000000000115E7                 db  10h
.eh_frame:00000000000115E8                 db  42h ; B
.eh_frame:00000000000115E9                 db  0Eh
.eh_frame:00000000000115EA                 db    8
.eh_frame:00000000000115EB                 db  44h ; D
.eh_frame:00000000000115EC                 db  0Bh
.eh_frame:00000000000115ED                 db    0
.eh_frame:00000000000115EE                 db    0
.eh_frame:00000000000115EF                 db    0
.eh_frame:00000000000115F0                 db  28h ; (
.eh_frame:00000000000115F1                 db    0
.eh_frame:00000000000115F2                 db    0
.eh_frame:00000000000115F3                 db    0
.eh_frame:00000000000115F4                 db 0CCh
.eh_frame:00000000000115F5                 db    1
.eh_frame:00000000000115F6                 db    0
.eh_frame:00000000000115F7                 db    0
.eh_frame:00000000000115F8                 db 0A8h
.eh_frame:00000000000115F9                 db  2Bh ; +
.eh_frame:00000000000115FA                 db 0FFh
.eh_frame:00000000000115FB                 db 0FFh
.eh_frame:00000000000115FC                 db 0C2h
.eh_frame:00000000000115FD                 db    0
.eh_frame:00000000000115FE                 db    0
.eh_frame:00000000000115FF                 db    0
.eh_frame:0000000000011600                 db    0
.eh_frame:0000000000011601                 db  41h ; A
.eh_frame:0000000000011602                 db  0Eh
.eh_frame:0000000000011603                 db  10h
.eh_frame:0000000000011604                 db  86h
.eh_frame:0000000000011605                 db    2
.eh_frame:0000000000011606                 db  41h ; A
.eh_frame:0000000000011607                 db  0Eh
.eh_frame:0000000000011608                 db  18h
.eh_frame:0000000000011609                 db  83h
.eh_frame:000000000001160A                 db    3
.eh_frame:000000000001160B                 db  4Eh ; N
.eh_frame:000000000001160C                 db  0Eh
.eh_frame:000000000001160D                 db  20h
.eh_frame:000000000001160E                 db    2
.eh_frame:000000000001160F                 db  84h
.eh_frame:0000000000011610                 db  0Ah
.eh_frame:0000000000011611                 db  0Eh
.eh_frame:0000000000011612                 db  18h
.eh_frame:0000000000011613                 db  41h ; A
.eh_frame:0000000000011614                 db  0Eh
.eh_frame:0000000000011615                 db  10h
.eh_frame:0000000000011616                 db  41h ; A
.eh_frame:0000000000011617                 db  0Eh
.eh_frame:0000000000011618                 db    8
.eh_frame:0000000000011619                 db  41h ; A
.eh_frame:000000000001161A                 db  0Bh
.eh_frame:000000000001161B                 db    0
.eh_frame:000000000001161C                 db  48h ; H
.eh_frame:000000000001161D                 db    0
.eh_frame:000000000001161E                 db    0
.eh_frame:000000000001161F                 db    0
.eh_frame:0000000000011620                 db 0F8h
.eh_frame:0000000000011621                 db    1
.eh_frame:0000000000011622                 db    0
.eh_frame:0000000000011623                 db    0
.eh_frame:0000000000011624                 db  4Ch ; L
.eh_frame:0000000000011625                 db  2Ch ; ,
.eh_frame:0000000000011626                 db 0FFh
.eh_frame:0000000000011627                 db 0FFh
.eh_frame:0000000000011628                 db 0DDh
.eh_frame:0000000000011629                 db    0
.eh_frame:000000000001162A                 db    0
.eh_frame:000000000001162B                 db    0
.eh_frame:000000000001162C                 db    0
.eh_frame:000000000001162D                 db  42h ; B
.eh_frame:000000000001162E                 db  0Eh
.eh_frame:000000000001162F                 db  10h
.eh_frame:0000000000011630                 db  8Fh
.eh_frame:0000000000011631                 db    2
.eh_frame:0000000000011632                 db  42h ; B
.eh_frame:0000000000011633                 db  0Eh
.eh_frame:0000000000011634                 db  18h
.eh_frame:0000000000011635                 db  8Eh
.eh_frame:0000000000011636                 db    3
.eh_frame:0000000000011637                 db  42h ; B
.eh_frame:0000000000011638                 db  0Eh
.eh_frame:0000000000011639                 db  20h
.eh_frame:000000000001163A                 db  8Dh
.eh_frame:000000000001163B                 db    4
.eh_frame:000000000001163C                 db  42h ; B
.eh_frame:000000000001163D                 db  0Eh
.eh_frame:000000000001163E                 db  28h ; (
.eh_frame:000000000001163F                 db  8Ch
.eh_frame:0000000000011640                 db    5
.eh_frame:0000000000011641                 db  44h ; D
.eh_frame:0000000000011642                 db  0Eh
.eh_frame:0000000000011643                 db  30h ; 0
.eh_frame:0000000000011644                 db  86h
.eh_frame:0000000000011645                 db    6
.eh_frame:0000000000011646                 db  41h ; A
.eh_frame:0000000000011647                 db  0Eh
.eh_frame:0000000000011648                 db  38h ; 8
.eh_frame:0000000000011649                 db  83h
.eh_frame:000000000001164A                 db    7
.eh_frame:000000000001164B                 db  44h ; D
.eh_frame:000000000001164C                 db  0Eh
.eh_frame:000000000001164D                 db  70h ; p
.eh_frame:000000000001164E                 db    2
.eh_frame:000000000001164F                 db 0BCh
.eh_frame:0000000000011650                 db  0Ah
.eh_frame:0000000000011651                 db  0Eh
.eh_frame:0000000000011652                 db  38h ; 8
.eh_frame:0000000000011653                 db  41h ; A
.eh_frame:0000000000011654                 db  0Eh
.eh_frame:0000000000011655                 db  30h ; 0
.eh_frame:0000000000011656                 db  41h ; A
.eh_frame:0000000000011657                 db  0Eh
.eh_frame:0000000000011658                 db  28h ; (
.eh_frame:0000000000011659                 db  42h ; B
.eh_frame:000000000001165A                 db  0Eh
.eh_frame:000000000001165B                 db  20h
.eh_frame:000000000001165C                 db  42h ; B
.eh_frame:000000000001165D                 db  0Eh
.eh_frame:000000000001165E                 db  18h
.eh_frame:000000000001165F                 db  42h ; B
.eh_frame:0000000000011660                 db  0Eh
.eh_frame:0000000000011661                 db  10h
.eh_frame:0000000000011662                 db  42h ; B
.eh_frame:0000000000011663                 db  0Eh
.eh_frame:0000000000011664                 db    8
.eh_frame:0000000000011665                 db  41h ; A
.eh_frame:0000000000011666                 db  0Bh
.eh_frame:0000000000011667                 db    0
.eh_frame:0000000000011668                 db  48h ; H
.eh_frame:0000000000011669                 db    0
.eh_frame:000000000001166A                 db    0
.eh_frame:000000000001166B                 db    0
.eh_frame:000000000001166C                 db  44h ; D
.eh_frame:000000000001166D                 db    2
.eh_frame:000000000001166E                 db    0
.eh_frame:000000000001166F                 db    0
.eh_frame:0000000000011670                 db 0E0h
.eh_frame:0000000000011671                 db  2Ch ; ,
.eh_frame:0000000000011672                 db 0FFh
.eh_frame:0000000000011673                 db 0FFh
.eh_frame:0000000000011674                 db  1Bh
.eh_frame:0000000000011675                 db  0Ah
.eh_frame:0000000000011676                 db    0
.eh_frame:0000000000011677                 db    0
.eh_frame:0000000000011678                 db    0
.eh_frame:0000000000011679                 db  42h ; B
.eh_frame:000000000001167A                 db  0Eh
.eh_frame:000000000001167B                 db  10h
.eh_frame:000000000001167C                 db  8Fh
.eh_frame:000000000001167D                 db    2
.eh_frame:000000000001167E                 db  42h ; B
.eh_frame:000000000001167F                 db  0Eh
.eh_frame:0000000000011680                 db  18h
.eh_frame:0000000000011681                 db  8Eh
.eh_frame:0000000000011682                 db    3
.eh_frame:0000000000011683                 db  45h ; E
.eh_frame:0000000000011684                 db  0Eh
.eh_frame:0000000000011685                 db  20h
.eh_frame:0000000000011686                 db  8Dh
.eh_frame:0000000000011687                 db    4
.eh_frame:0000000000011688                 db  42h ; B
.eh_frame:0000000000011689                 db  0Eh
.eh_frame:000000000001168A                 db  28h ; (
.eh_frame:000000000001168B                 db  8Ch
.eh_frame:000000000001168C                 db    5
.eh_frame:000000000001168D                 db  44h ; D
.eh_frame:000000000001168E                 db  0Eh
.eh_frame:000000000001168F                 db  30h ; 0
.eh_frame:0000000000011690                 db  86h
.eh_frame:0000000000011691                 db    6
.eh_frame:0000000000011692                 db  41h ; A
.eh_frame:0000000000011693                 db  0Eh
.eh_frame:0000000000011694                 db  38h ; 8
.eh_frame:0000000000011695                 db  83h
.eh_frame:0000000000011696                 db    7
.eh_frame:0000000000011697                 db  4Dh ; M
.eh_frame:0000000000011698                 db  0Eh
.eh_frame:0000000000011699                 db 0D0h
.eh_frame:000000000001169A                 db    8
.eh_frame:000000000001169B                 db    2
.eh_frame:000000000001169C                 db  5Dh ; ]
.eh_frame:000000000001169D                 db  0Ah
.eh_frame:000000000001169E                 db  0Eh
.eh_frame:000000000001169F                 db  38h ; 8
.eh_frame:00000000000116A0                 db  41h ; A
.eh_frame:00000000000116A1                 db  0Eh
.eh_frame:00000000000116A2                 db  30h ; 0
.eh_frame:00000000000116A3                 db  41h ; A
.eh_frame:00000000000116A4                 db  0Eh
.eh_frame:00000000000116A5                 db  28h ; (
.eh_frame:00000000000116A6                 db  42h ; B
.eh_frame:00000000000116A7                 db  0Eh
.eh_frame:00000000000116A8                 db  20h
.eh_frame:00000000000116A9                 db  42h ; B
.eh_frame:00000000000116AA                 db  0Eh
.eh_frame:00000000000116AB                 db  18h
.eh_frame:00000000000116AC                 db  42h ; B
.eh_frame:00000000000116AD                 db  0Eh
.eh_frame:00000000000116AE                 db  10h
.eh_frame:00000000000116AF                 db  42h ; B
.eh_frame:00000000000116B0                 db  0Eh
.eh_frame:00000000000116B1                 db    8
.eh_frame:00000000000116B2                 db  44h ; D
.eh_frame:00000000000116B3                 db  0Bh
.eh_frame:00000000000116B4                 db  28h ; (
.eh_frame:00000000000116B5                 db    0
.eh_frame:00000000000116B6                 db    0
.eh_frame:00000000000116B7                 db    0
.eh_frame:00000000000116B8                 db  90h
.eh_frame:00000000000116B9                 db    2
.eh_frame:00000000000116BA                 db    0
.eh_frame:00000000000116BB                 db    0
.eh_frame:00000000000116BC                 db 0B4h
.eh_frame:00000000000116BD                 db  36h ; 6
.eh_frame:00000000000116BE                 db 0FFh
.eh_frame:00000000000116BF                 db 0FFh
.eh_frame:00000000000116C0                 db  92h
.eh_frame:00000000000116C1                 db    4
.eh_frame:00000000000116C2                 db    0
.eh_frame:00000000000116C3                 db    0
.eh_frame:00000000000116C4                 db    0
.eh_frame:00000000000116C5                 db  42h ; B
.eh_frame:00000000000116C6                 db  0Eh
.eh_frame:00000000000116C7                 db  10h
.eh_frame:00000000000116C8                 db  8Dh
.eh_frame:00000000000116C9                 db    2
.eh_frame:00000000000116CA                 db  42h ; B
.eh_frame:00000000000116CB                 db  0Eh
.eh_frame:00000000000116CC                 db  18h
.eh_frame:00000000000116CD                 db  8Ch
.eh_frame:00000000000116CE                 db    3
.eh_frame:00000000000116CF                 db  46h ; F
.eh_frame:00000000000116D0                 db  0Eh
.eh_frame:00000000000116D1                 db  20h
.eh_frame:00000000000116D2                 db  86h
.eh_frame:00000000000116D3                 db    4
.eh_frame:00000000000116D4                 db  41h ; A
.eh_frame:00000000000116D5                 db  0Eh
.eh_frame:00000000000116D6                 db  28h ; (
.eh_frame:00000000000116D7                 db  83h
.eh_frame:00000000000116D8                 db    5
.eh_frame:00000000000116D9                 db  49h ; I
.eh_frame:00000000000116DA                 db  0Eh
.eh_frame:00000000000116DB                 db 0B0h
.eh_frame:00000000000116DC                 db    1
.eh_frame:00000000000116DD                 db    0
.eh_frame:00000000000116DE                 db    0
.eh_frame:00000000000116DF                 db    0
.eh_frame:00000000000116E0                 db  48h ; H
.eh_frame:00000000000116E1                 db    0
.eh_frame:00000000000116E2                 db    0
.eh_frame:00000000000116E3                 db    0
.eh_frame:00000000000116E4                 db 0BCh
.eh_frame:00000000000116E5                 db    2
.eh_frame:00000000000116E6                 db    0
.eh_frame:00000000000116E7                 db    0
.eh_frame:00000000000116E8                 db  28h ; (
.eh_frame:00000000000116E9                 db  3Bh ; ;
.eh_frame:00000000000116EA                 db 0FFh
.eh_frame:00000000000116EB                 db 0FFh
.eh_frame:00000000000116EC                 db  6Bh ; k
.eh_frame:00000000000116ED                 db    1
.eh_frame:00000000000116EE                 db    0
.eh_frame:00000000000116EF                 db    0
.eh_frame:00000000000116F0                 db    0
.eh_frame:00000000000116F1                 db  42h ; B
.eh_frame:00000000000116F2                 db  0Eh
.eh_frame:00000000000116F3                 db  10h
.eh_frame:00000000000116F4                 db  8Fh
.eh_frame:00000000000116F5                 db    2
.eh_frame:00000000000116F6                 db  42h ; B
.eh_frame:00000000000116F7                 db  0Eh
.eh_frame:00000000000116F8                 db  18h
.eh_frame:00000000000116F9                 db  8Eh
.eh_frame:00000000000116FA                 db    3
.eh_frame:00000000000116FB                 db  49h ; I
.eh_frame:00000000000116FC                 db  0Eh
.eh_frame:00000000000116FD                 db  20h
.eh_frame:00000000000116FE                 db  8Dh
.eh_frame:00000000000116FF                 db    4
.eh_frame:0000000000011700                 db  42h ; B
.eh_frame:0000000000011701                 db  0Eh
.eh_frame:0000000000011702                 db  28h ; (
.eh_frame:0000000000011703                 db  8Ch
.eh_frame:0000000000011704                 db    5
.eh_frame:0000000000011705                 db  41h ; A
.eh_frame:0000000000011706                 db  0Eh
.eh_frame:0000000000011707                 db  30h ; 0
.eh_frame:0000000000011708                 db  86h
.eh_frame:0000000000011709                 db    6
.eh_frame:000000000001170A                 db  41h ; A
.eh_frame:000000000001170B                 db  0Eh
.eh_frame:000000000001170C                 db  38h ; 8
.eh_frame:000000000001170D                 db  83h
.eh_frame:000000000001170E                 db    7
.eh_frame:000000000001170F                 db  44h ; D
.eh_frame:0000000000011710                 db  0Eh
.eh_frame:0000000000011711                 db  50h ; P
.eh_frame:0000000000011712                 db    2
.eh_frame:0000000000011713                 db 0E9h
.eh_frame:0000000000011714                 db  0Ah
.eh_frame:0000000000011715                 db  0Eh
.eh_frame:0000000000011716                 db  38h ; 8
.eh_frame:0000000000011717                 db  41h ; A
.eh_frame:0000000000011718                 db  0Eh
.eh_frame:0000000000011719                 db  30h ; 0
.eh_frame:000000000001171A                 db  41h ; A
.eh_frame:000000000001171B                 db  0Eh
.eh_frame:000000000001171C                 db  28h ; (
.eh_frame:000000000001171D                 db  42h ; B
.eh_frame:000000000001171E                 db  0Eh
.eh_frame:000000000001171F                 db  20h
.eh_frame:0000000000011720                 db  42h ; B
.eh_frame:0000000000011721                 db  0Eh
.eh_frame:0000000000011722                 db  18h
.eh_frame:0000000000011723                 db  42h ; B
.eh_frame:0000000000011724                 db  0Eh
.eh_frame:0000000000011725                 db  10h
.eh_frame:0000000000011726                 db  42h ; B
.eh_frame:0000000000011727                 db  0Eh
.eh_frame:0000000000011728                 db    8
.eh_frame:0000000000011729                 db  48h ; H
.eh_frame:000000000001172A                 db  0Bh
.eh_frame:000000000001172B                 db    0
.eh_frame:000000000001172C                 db 0C8h
.eh_frame:000000000001172D                 db    0
.eh_frame:000000000001172E                 db    0
.eh_frame:000000000001172F                 db    0
.eh_frame:0000000000011730                 db    8
.eh_frame:0000000000011731                 db    3
.eh_frame:0000000000011732                 db    0
.eh_frame:0000000000011733                 db    0
.eh_frame:0000000000011734                 db  8Ch
.eh_frame:0000000000011735                 db  0Eh
.eh_frame:0000000000011736                 db 0FFh
.eh_frame:0000000000011737                 db 0FFh
.eh_frame:0000000000011738                 db 0D3h
.eh_frame:0000000000011739                 db  15h
.eh_frame:000000000001173A                 db    0
.eh_frame:000000000001173B                 db    0
.eh_frame:000000000001173C                 db    0
.eh_frame:000000000001173D                 db  42h ; B
.eh_frame:000000000001173E                 db  0Eh
.eh_frame:000000000001173F                 db  10h
.eh_frame:0000000000011740                 db  8Fh
.eh_frame:0000000000011741                 db    2
.eh_frame:0000000000011742                 db  42h ; B
.eh_frame:0000000000011743                 db  0Eh
.eh_frame:0000000000011744                 db  18h
.eh_frame:0000000000011745                 db  8Eh
.eh_frame:0000000000011746                 db    3
.eh_frame:0000000000011747                 db  45h ; E
.eh_frame:0000000000011748                 db  0Eh
.eh_frame:0000000000011749                 db  20h
.eh_frame:000000000001174A                 db  8Dh
.eh_frame:000000000001174B                 db    4
.eh_frame:000000000001174C                 db  42h ; B
.eh_frame:000000000001174D                 db  0Eh
.eh_frame:000000000001174E                 db  28h ; (
.eh_frame:000000000001174F                 db  8Ch
.eh_frame:0000000000011750                 db    5
.eh_frame:0000000000011751                 db  41h ; A
.eh_frame:0000000000011752                 db  0Eh
.eh_frame:0000000000011753                 db  30h ; 0
.eh_frame:0000000000011754                 db  86h
.eh_frame:0000000000011755                 db    6
.eh_frame:0000000000011756                 db  41h ; A
.eh_frame:0000000000011757                 db  0Eh
.eh_frame:0000000000011758                 db  38h ; 8
.eh_frame:0000000000011759                 db  83h
.eh_frame:000000000001175A                 db    7
.eh_frame:000000000001175B                 db  50h ; P
.eh_frame:000000000001175C                 db  0Eh
.eh_frame:000000000001175D                 db  80h
.eh_frame:000000000001175E                 db    3
.eh_frame:000000000001175F                 db    3
.eh_frame:0000000000011760                 db 0C9h
.eh_frame:0000000000011761                 db    3
.eh_frame:0000000000011762                 db  0Ah
.eh_frame:0000000000011763                 db  0Eh
.eh_frame:0000000000011764                 db  88h
.eh_frame:0000000000011765                 db    3
.eh_frame:0000000000011766                 db  4Fh ; O
.eh_frame:0000000000011767                 db  0Eh
.eh_frame:0000000000011768                 db  90h
.eh_frame:0000000000011769                 db    3
.eh_frame:000000000001176A                 db  5Ch ; \
.eh_frame:000000000001176B                 db  0Bh
.eh_frame:000000000001176C                 db    3
.eh_frame:000000000001176D                 db  25h ; %
.eh_frame:000000000001176E                 db    1
.eh_frame:000000000001176F                 db  0Ah
.eh_frame:0000000000011770                 db  0Eh
.eh_frame:0000000000011771                 db  38h ; 8
.eh_frame:0000000000011772                 db  41h ; A
.eh_frame:0000000000011773                 db  0Eh
.eh_frame:0000000000011774                 db  30h ; 0
.eh_frame:0000000000011775                 db  41h ; A
.eh_frame:0000000000011776                 db  0Eh
.eh_frame:0000000000011777                 db  28h ; (
.eh_frame:0000000000011778                 db  42h ; B
.eh_frame:0000000000011779                 db  0Eh
.eh_frame:000000000001177A                 db  20h
.eh_frame:000000000001177B                 db  42h ; B
.eh_frame:000000000001177C                 db  0Eh
.eh_frame:000000000001177D                 db  18h
.eh_frame:000000000001177E                 db  42h ; B
.eh_frame:000000000001177F                 db  0Eh
.eh_frame:0000000000011780                 db  10h
.eh_frame:0000000000011781                 db  42h ; B
.eh_frame:0000000000011782                 db  0Eh
.eh_frame:0000000000011783                 db    8
.eh_frame:0000000000011784                 db  41h ; A
.eh_frame:0000000000011785                 db  0Bh
.eh_frame:0000000000011786                 db    3
.eh_frame:0000000000011787                 db  5Ah ; Z
.eh_frame:0000000000011788                 db    6
.eh_frame:0000000000011789                 db  0Eh
.eh_frame:000000000001178A                 db  88h
.eh_frame:000000000001178B                 db    3
.eh_frame:000000000001178C                 db  47h ; G
.eh_frame:000000000001178D                 db  0Eh
.eh_frame:000000000001178E                 db  90h
.eh_frame:000000000001178F                 db    3
.eh_frame:0000000000011790                 db  42h ; B
.eh_frame:0000000000011791                 db  0Eh
.eh_frame:0000000000011792                 db  98h
.eh_frame:0000000000011793                 db    3
.eh_frame:0000000000011794                 db  45h ; E
.eh_frame:0000000000011795                 db  0Eh
.eh_frame:0000000000011796                 db 0A0h
.eh_frame:0000000000011797                 db    3
.eh_frame:0000000000011798                 db  51h ; Q
.eh_frame:0000000000011799                 db  0Eh
.eh_frame:000000000001179A                 db  80h
.eh_frame:000000000001179B                 db    3
.eh_frame:000000000001179C                 db    2
.eh_frame:000000000001179D                 db  5Ch ; \
.eh_frame:000000000001179E                 db  0Eh
.eh_frame:000000000001179F                 db  88h
.eh_frame:00000000000117A0                 db    3
.eh_frame:00000000000117A1                 db  45h ; E
.eh_frame:00000000000117A2                 db  0Eh
.eh_frame:00000000000117A3                 db  90h
.eh_frame:00000000000117A4                 db    3
.eh_frame:00000000000117A5                 db  41h ; A
.eh_frame:00000000000117A6                 db  0Eh
.eh_frame:00000000000117A7                 db  98h
.eh_frame:00000000000117A8                 db    3
.eh_frame:00000000000117A9                 db  45h ; E
.eh_frame:00000000000117AA                 db  0Eh
.eh_frame:00000000000117AB                 db 0A0h
.eh_frame:00000000000117AC                 db    3
.eh_frame:00000000000117AD                 db  4Dh ; M
.eh_frame:00000000000117AE                 db  0Eh
.eh_frame:00000000000117AF                 db  80h
.eh_frame:00000000000117B0                 db    3
.eh_frame:00000000000117B1                 db    3
.eh_frame:00000000000117B2                 db 0EBh
.eh_frame:00000000000117B3                 db    1
.eh_frame:00000000000117B4                 db  0Eh
.eh_frame:00000000000117B5                 db  88h
.eh_frame:00000000000117B6                 db    3
.eh_frame:00000000000117B7                 db  46h ; F
.eh_frame:00000000000117B8                 db  0Eh
.eh_frame:00000000000117B9                 db  90h
.eh_frame:00000000000117BA                 db    3
.eh_frame:00000000000117BB                 db  42h ; B
.eh_frame:00000000000117BC                 db  0Eh
.eh_frame:00000000000117BD                 db  98h
.eh_frame:00000000000117BE                 db    3
.eh_frame:00000000000117BF                 db  54h ; T
.eh_frame:00000000000117C0                 db  0Eh
.eh_frame:00000000000117C1                 db 0A0h
.eh_frame:00000000000117C2                 db    3
.eh_frame:00000000000117C3                 db  51h ; Q
.eh_frame:00000000000117C4                 db  0Eh
.eh_frame:00000000000117C5                 db  80h
.eh_frame:00000000000117C6                 db    3
.eh_frame:00000000000117C7                 db    2
.eh_frame:00000000000117C8                 db  8Fh
.eh_frame:00000000000117C9                 db  0Eh
.eh_frame:00000000000117CA                 db  88h
.eh_frame:00000000000117CB                 db    3
.eh_frame:00000000000117CC                 db  4Bh ; K
.eh_frame:00000000000117CD                 db  0Eh
.eh_frame:00000000000117CE                 db  90h
.eh_frame:00000000000117CF                 db    3
.eh_frame:00000000000117D0                 db  42h ; B
.eh_frame:00000000000117D1                 db  0Eh
.eh_frame:00000000000117D2                 db  98h
.eh_frame:00000000000117D3                 db    3
.eh_frame:00000000000117D4                 db  51h ; Q
.eh_frame:00000000000117D5                 db  0Eh
.eh_frame:00000000000117D6                 db 0A0h
.eh_frame:00000000000117D7                 db    3
.eh_frame:00000000000117D8                 db  56h ; V
.eh_frame:00000000000117D9                 db  0Eh
.eh_frame:00000000000117DA                 db  80h
.eh_frame:00000000000117DB                 db    3
.eh_frame:00000000000117DC                 db    3
.eh_frame:00000000000117DD                 db 0D0h
.eh_frame:00000000000117DE                 db    3
.eh_frame:00000000000117DF                 db  0Eh
.eh_frame:00000000000117E0                 db  88h
.eh_frame:00000000000117E1                 db    3
.eh_frame:00000000000117E2                 db  4Bh ; K
.eh_frame:00000000000117E3                 db  0Eh
.eh_frame:00000000000117E4                 db  90h
.eh_frame:00000000000117E5                 db    3
.eh_frame:00000000000117E6                 db  42h ; B
.eh_frame:00000000000117E7                 db  0Eh
.eh_frame:00000000000117E8                 db  98h
.eh_frame:00000000000117E9                 db    3
.eh_frame:00000000000117EA                 db  4Fh ; O
.eh_frame:00000000000117EB                 db  0Eh
.eh_frame:00000000000117EC                 db 0A0h
.eh_frame:00000000000117ED                 db    3
.eh_frame:00000000000117EE                 db  4Dh ; M
.eh_frame:00000000000117EF                 db  0Eh
.eh_frame:00000000000117F0                 db  80h
.eh_frame:00000000000117F1                 db    3
.eh_frame:00000000000117F2                 db    0
.eh_frame:00000000000117F3                 db    0
.eh_frame:00000000000117F4                 db    0
.eh_frame:00000000000117F5                 db    0
.eh_frame:00000000000117F6                 db    0
.eh_frame:00000000000117F7                 db    0
.eh_frame:00000000000117F8                 db  2Ch ; ,
.eh_frame:00000000000117F9                 db    0
.eh_frame:00000000000117FA                 db    0
.eh_frame:00000000000117FB                 db    0
.eh_frame:00000000000117FC                 db 0D4h
.eh_frame:00000000000117FD                 db    3
.eh_frame:00000000000117FE                 db    0
.eh_frame:00000000000117FF                 db    0
.eh_frame:0000000000011800                 db  80h
.eh_frame:0000000000011801                 db  3Bh ; ;
.eh_frame:0000000000011802                 db 0FFh
.eh_frame:0000000000011803                 db 0FFh
.eh_frame:0000000000011804                 db 0B8h
.eh_frame:0000000000011805                 db    3
.eh_frame:0000000000011806                 db    0
.eh_frame:0000000000011807                 db    0
.eh_frame:0000000000011808                 db    0
.eh_frame:0000000000011809                 db  41h ; A
.eh_frame:000000000001180A                 db  0Eh
.eh_frame:000000000001180B                 db  10h
.eh_frame:000000000001180C                 db  86h
.eh_frame:000000000001180D                 db    2
.eh_frame:000000000001180E                 db  43h ; C
.eh_frame:000000000001180F                 db  0Dh
.eh_frame:0000000000011810                 db    6
.eh_frame:0000000000011811                 db  46h ; F
.eh_frame:0000000000011812                 db  8Fh
.eh_frame:0000000000011813                 db    3
.eh_frame:0000000000011814                 db  8Eh
.eh_frame:0000000000011815                 db    4
.eh_frame:0000000000011816                 db  8Dh
.eh_frame:0000000000011817                 db    5
.eh_frame:0000000000011818                 db  4Ah ; J
.eh_frame:0000000000011819                 db  8Ch
.eh_frame:000000000001181A                 db    6
.eh_frame:000000000001181B                 db  83h
.eh_frame:000000000001181C                 db    7
.eh_frame:000000000001181D                 db    3
.eh_frame:000000000001181E                 db  14h
.eh_frame:000000000001181F                 db    2
.eh_frame:0000000000011820                 db  0Ah
.eh_frame:0000000000011821                 db  0Ch
.eh_frame:0000000000011822                 db    7
.eh_frame:0000000000011823                 db    8
.eh_frame:0000000000011824                 db  48h ; H
.eh_frame:0000000000011825                 db  0Bh
.eh_frame:0000000000011826                 db    0
.eh_frame:0000000000011827                 db    0
.eh_frame:0000000000011828                 db  4Ch ; L
.eh_frame:0000000000011829                 db    0
.eh_frame:000000000001182A                 db    0
.eh_frame:000000000001182B                 db    0
.eh_frame:000000000001182C                 db    4
.eh_frame:000000000001182D                 db    4
.eh_frame:000000000001182E                 db    0
.eh_frame:000000000001182F                 db    0
.eh_frame:0000000000011830                 db  10h
.eh_frame:0000000000011831                 db  3Fh ; ?
.eh_frame:0000000000011832                 db 0FFh
.eh_frame:0000000000011833                 db 0FFh
.eh_frame:0000000000011834                 db  36h ; 6
.eh_frame:0000000000011835                 db    6
.eh_frame:0000000000011836                 db    0
.eh_frame:0000000000011837                 db    0
.eh_frame:0000000000011838                 db    0
.eh_frame:0000000000011839                 db  42h ; B
.eh_frame:000000000001183A                 db  0Eh
.eh_frame:000000000001183B                 db  10h
.eh_frame:000000000001183C                 db  8Fh
.eh_frame:000000000001183D                 db    2
.eh_frame:000000000001183E                 db  42h ; B
.eh_frame:000000000001183F                 db  0Eh
.eh_frame:0000000000011840                 db  18h
.eh_frame:0000000000011841                 db  8Eh
.eh_frame:0000000000011842                 db    3
.eh_frame:0000000000011843                 db  42h ; B
.eh_frame:0000000000011844                 db  0Eh
.eh_frame:0000000000011845                 db  20h
.eh_frame:0000000000011846                 db  8Dh
.eh_frame:0000000000011847                 db    4
.eh_frame:0000000000011848                 db  42h ; B
.eh_frame:0000000000011849                 db  0Eh
.eh_frame:000000000001184A                 db  28h ; (
.eh_frame:000000000001184B                 db  8Ch
.eh_frame:000000000001184C                 db    5
.eh_frame:000000000001184D                 db  41h ; A
.eh_frame:000000000001184E                 db  0Eh
.eh_frame:000000000001184F                 db  30h ; 0
.eh_frame:0000000000011850                 db  86h
.eh_frame:0000000000011851                 db    6
.eh_frame:0000000000011852                 db  41h ; A
.eh_frame:0000000000011853                 db  0Eh
.eh_frame:0000000000011854                 db  38h ; 8
.eh_frame:0000000000011855                 db  83h
.eh_frame:0000000000011856                 db    7
.eh_frame:0000000000011857                 db  47h ; G
.eh_frame:0000000000011858                 db  0Eh
.eh_frame:0000000000011859                 db 0A0h
.eh_frame:000000000001185A                 db    2
.eh_frame:000000000001185B                 db    3
.eh_frame:000000000001185C                 db  30h ; 0
.eh_frame:000000000001185D                 db    2
.eh_frame:000000000001185E                 db  0Ah
.eh_frame:000000000001185F                 db  0Eh
.eh_frame:0000000000011860                 db  38h ; 8
.eh_frame:0000000000011861                 db  41h ; A
.eh_frame:0000000000011862                 db  0Eh
.eh_frame:0000000000011863                 db  30h ; 0
.eh_frame:0000000000011864                 db  41h ; A
.eh_frame:0000000000011865                 db  0Eh
.eh_frame:0000000000011866                 db  28h ; (
.eh_frame:0000000000011867                 db  42h ; B
.eh_frame:0000000000011868                 db  0Eh
.eh_frame:0000000000011869                 db  20h
.eh_frame:000000000001186A                 db  42h ; B
.eh_frame:000000000001186B                 db  0Eh
.eh_frame:000000000001186C                 db  18h
.eh_frame:000000000001186D                 db  42h ; B
.eh_frame:000000000001186E                 db  0Eh
.eh_frame:000000000001186F                 db  10h
.eh_frame:0000000000011870                 db  42h ; B
.eh_frame:0000000000011871                 db  0Eh
.eh_frame:0000000000011872                 db    8
.eh_frame:0000000000011873                 db  45h ; E
.eh_frame:0000000000011874                 db  0Bh
.eh_frame:0000000000011875                 db    0
.eh_frame:0000000000011876                 db    0
.eh_frame:0000000000011877                 db    0
.eh_frame:0000000000011878                 db  10h
.eh_frame:0000000000011879                 db    0
.eh_frame:000000000001187A                 db    0
.eh_frame:000000000001187B                 db    0
.eh_frame:000000000001187C                 db  54h ; T
.eh_frame:000000000001187D                 db    4
.eh_frame:000000000001187E                 db    0
.eh_frame:000000000001187F                 db    0
.eh_frame:0000000000011880                 db    0
.eh_frame:0000000000011881                 db  45h ; E
.eh_frame:0000000000011882                 db 0FFh
.eh_frame:0000000000011883                 db 0FFh
.eh_frame:0000000000011884                 db    8
.eh_frame:0000000000011885                 db    0
.eh_frame:0000000000011886                 db    0
.eh_frame:0000000000011887                 db    0
.eh_frame:0000000000011888                 db    0
.eh_frame:0000000000011889                 db    0
.eh_frame:000000000001188A                 db    0
.eh_frame:000000000001188B                 db    0
.eh_frame:000000000001188C                 db  10h
.eh_frame:000000000001188D                 db    0
.eh_frame:000000000001188E                 db    0
.eh_frame:000000000001188F                 db    0
.eh_frame:0000000000011890                 db  68h ; h
.eh_frame:0000000000011891                 db    4
.eh_frame:0000000000011892                 db    0
.eh_frame:0000000000011893                 db    0
.eh_frame:0000000000011894                 db 0FCh
.eh_frame:0000000000011895                 db  44h ; D
.eh_frame:0000000000011896                 db 0FFh
.eh_frame:0000000000011897                 db 0FFh
.eh_frame:0000000000011898                 db    8
.eh_frame:0000000000011899                 db    0
.eh_frame:000000000001189A                 db    0
.eh_frame:000000000001189B                 db    0
.eh_frame:000000000001189C                 db    0
.eh_frame:000000000001189D                 db    0
.eh_frame:000000000001189E                 db    0
.eh_frame:000000000001189F                 db    0
.eh_frame:00000000000118A0                 db  2Ch ; ,
.eh_frame:00000000000118A1                 db    0
.eh_frame:00000000000118A2                 db    0
.eh_frame:00000000000118A3                 db    0
.eh_frame:00000000000118A4                 db  7Ch ; |
.eh_frame:00000000000118A5                 db    4
.eh_frame:00000000000118A6                 db    0
.eh_frame:00000000000118A7                 db    0
.eh_frame:00000000000118A8                 db 0F8h
.eh_frame:00000000000118A9                 db  44h ; D
.eh_frame:00000000000118AA                 db 0FFh
.eh_frame:00000000000118AB                 db 0FFh
.eh_frame:00000000000118AC                 db 0A4h
.eh_frame:00000000000118AD                 db    0
.eh_frame:00000000000118AE                 db    0
.eh_frame:00000000000118AF                 db    0
.eh_frame:00000000000118B0                 db    0
.eh_frame:00000000000118B1                 db  41h ; A
.eh_frame:00000000000118B2                 db  0Eh
.eh_frame:00000000000118B3                 db  10h
.eh_frame:00000000000118B4                 db  86h
.eh_frame:00000000000118B5                 db    2
.eh_frame:00000000000118B6                 db  41h ; A
.eh_frame:00000000000118B7                 db  0Eh
.eh_frame:00000000000118B8                 db  18h
.eh_frame:00000000000118B9                 db  83h
.eh_frame:00000000000118BA                 db    3
.eh_frame:00000000000118BB                 db  44h ; D
.eh_frame:00000000000118BC                 db  0Eh
.eh_frame:00000000000118BD                 db  20h
.eh_frame:00000000000118BE                 db  7Ah ; z
.eh_frame:00000000000118BF                 db  0Ah
.eh_frame:00000000000118C0                 db  0Eh
.eh_frame:00000000000118C1                 db  18h
.eh_frame:00000000000118C2                 db  41h ; A
.eh_frame:00000000000118C3                 db  0Eh
.eh_frame:00000000000118C4                 db  10h
.eh_frame:00000000000118C5                 db  41h ; A
.eh_frame:00000000000118C6                 db  0Eh
.eh_frame:00000000000118C7                 db    8
.eh_frame:00000000000118C8                 db  41h ; A
.eh_frame:00000000000118C9                 db  0Bh
.eh_frame:00000000000118CA                 db    0
.eh_frame:00000000000118CB                 db    0
.eh_frame:00000000000118CC                 db    0
.eh_frame:00000000000118CD                 db    0
.eh_frame:00000000000118CE                 db    0
.eh_frame:00000000000118CF                 db    0
.eh_frame:00000000000118D0                 db  1Ch
.eh_frame:00000000000118D1                 db    0
.eh_frame:00000000000118D2                 db    0
.eh_frame:00000000000118D3                 db    0
.eh_frame:00000000000118D4                 db 0ACh
.eh_frame:00000000000118D5                 db    4
.eh_frame:00000000000118D6                 db    0
.eh_frame:00000000000118D7                 db    0
.eh_frame:00000000000118D8                 db  78h ; x
.eh_frame:00000000000118D9                 db  45h ; E
.eh_frame:00000000000118DA                 db 0FFh
.eh_frame:00000000000118DB                 db 0FFh
.eh_frame:00000000000118DC                 db  18h
.eh_frame:00000000000118DD                 db    0
.eh_frame:00000000000118DE                 db    0
.eh_frame:00000000000118DF                 db    0
.eh_frame:00000000000118E0                 db    0
.eh_frame:00000000000118E1                 db  44h ; D
.eh_frame:00000000000118E2                 db  0Eh
.eh_frame:00000000000118E3                 db  10h
.eh_frame:00000000000118E4                 db  4Eh ; N
.eh_frame:00000000000118E5                 db  0Ah
.eh_frame:00000000000118E6                 db  0Eh
.eh_frame:00000000000118E7                 db    8
.eh_frame:00000000000118E8                 db  41h ; A
.eh_frame:00000000000118E9                 db  0Bh
.eh_frame:00000000000118EA                 db    0
.eh_frame:00000000000118EB                 db    0
.eh_frame:00000000000118EC                 db    0
.eh_frame:00000000000118ED                 db    0
.eh_frame:00000000000118EE                 db    0
.eh_frame:00000000000118EF                 db    0
.eh_frame:00000000000118F0                 db  30h ; 0
.eh_frame:00000000000118F1                 db    0
.eh_frame:00000000000118F2                 db    0
.eh_frame:00000000000118F3                 db    0
.eh_frame:00000000000118F4                 db 0CCh
.eh_frame:00000000000118F5                 db    4
.eh_frame:00000000000118F6                 db    0
.eh_frame:00000000000118F7                 db    0
.eh_frame:00000000000118F8                 db  78h ; x
.eh_frame:00000000000118F9                 db  45h ; E
.eh_frame:00000000000118FA                 db 0FFh
.eh_frame:00000000000118FB                 db 0FFh
.eh_frame:00000000000118FC                 db  5Dh ; ]
.eh_frame:00000000000118FD                 db    0
.eh_frame:00000000000118FE                 db    0
.eh_frame:00000000000118FF                 db    0
.eh_frame:0000000000011900                 db    0
.eh_frame:0000000000011901                 db  41h ; A
.eh_frame:0000000000011902                 db  0Eh
.eh_frame:0000000000011903                 db  10h
.eh_frame:0000000000011904                 db  86h
.eh_frame:0000000000011905                 db    2
.eh_frame:0000000000011906                 db  41h ; A
.eh_frame:0000000000011907                 db  0Eh
.eh_frame:0000000000011908                 db  18h
.eh_frame:0000000000011909                 db  83h
.eh_frame:000000000001190A                 db    3
.eh_frame:000000000001190B                 db  49h ; I
.eh_frame:000000000001190C                 db  0Eh
.eh_frame:000000000001190D                 db  20h
.eh_frame:000000000001190E                 db  7Ch ; |
.eh_frame:000000000001190F                 db  0Ah
.eh_frame:0000000000011910                 db  0Eh
.eh_frame:0000000000011911                 db  18h
.eh_frame:0000000000011912                 db  44h ; D
.eh_frame:0000000000011913                 db  0Eh
.eh_frame:0000000000011914                 db  10h
.eh_frame:0000000000011915                 db  41h ; A
.eh_frame:0000000000011916                 db  0Eh
.eh_frame:0000000000011917                 db    8
.eh_frame:0000000000011918                 db  44h ; D
.eh_frame:0000000000011919                 db  0Bh
.eh_frame:000000000001191A                 db  44h ; D
.eh_frame:000000000001191B                 db  0Eh
.eh_frame:000000000001191C                 db  18h
.eh_frame:000000000001191D                 db  47h ; G
.eh_frame:000000000001191E                 db  0Eh
.eh_frame:000000000001191F                 db  10h
.eh_frame:0000000000011920                 db  41h ; A
.eh_frame:0000000000011921                 db  0Eh
.eh_frame:0000000000011922                 db    8
.eh_frame:0000000000011923                 db    0
.eh_frame:0000000000011924                 db  28h ; (
.eh_frame:0000000000011925                 db    0
.eh_frame:0000000000011926                 db    0
.eh_frame:0000000000011927                 db    0
.eh_frame:0000000000011928                 db    0
.eh_frame:0000000000011929                 db    5
.eh_frame:000000000001192A                 db    0
.eh_frame:000000000001192B                 db    0
.eh_frame:000000000001192C                 db 0A4h
.eh_frame:000000000001192D                 db  45h ; E
.eh_frame:000000000001192E                 db 0FFh
.eh_frame:000000000001192F                 db 0FFh
.eh_frame:0000000000011930                 db  5Ah ; Z
.eh_frame:0000000000011931                 db    0
.eh_frame:0000000000011932                 db    0
.eh_frame:0000000000011933                 db    0
.eh_frame:0000000000011934                 db    0
.eh_frame:0000000000011935                 db  41h ; A
.eh_frame:0000000000011936                 db  0Eh
.eh_frame:0000000000011937                 db  10h
.eh_frame:0000000000011938                 db  86h
.eh_frame:0000000000011939                 db    2
.eh_frame:000000000001193A                 db  41h ; A
.eh_frame:000000000001193B                 db  0Eh
.eh_frame:000000000001193C                 db  18h
.eh_frame:000000000001193D                 db  83h
.eh_frame:000000000001193E                 db    3
.eh_frame:000000000001193F                 db  47h ; G
.eh_frame:0000000000011940                 db  0Eh
.eh_frame:0000000000011941                 db  20h
.eh_frame:0000000000011942                 db    2
.eh_frame:0000000000011943                 db  41h ; A
.eh_frame:0000000000011944                 db  0Ah
.eh_frame:0000000000011945                 db  0Eh
.eh_frame:0000000000011946                 db  18h
.eh_frame:0000000000011947                 db  44h ; D
.eh_frame:0000000000011948                 db  0Eh
.eh_frame:0000000000011949                 db  10h
.eh_frame:000000000001194A                 db  41h ; A
.eh_frame:000000000001194B                 db  0Eh
.eh_frame:000000000001194C                 db    8
.eh_frame:000000000001194D                 db  41h ; A
.eh_frame:000000000001194E                 db  0Bh
.eh_frame:000000000001194F                 db    0
.eh_frame:0000000000011950                 db  10h
.eh_frame:0000000000011951                 db    0
.eh_frame:0000000000011952                 db    0
.eh_frame:0000000000011953                 db    0
.eh_frame:0000000000011954                 db  2Ch ; ,
.eh_frame:0000000000011955                 db    5
.eh_frame:0000000000011956                 db    0
.eh_frame:0000000000011957                 db    0
.eh_frame:0000000000011958                 db 0D8h
.eh_frame:0000000000011959                 db  45h ; E
.eh_frame:000000000001195A                 db 0FFh
.eh_frame:000000000001195B                 db 0FFh
.eh_frame:000000000001195C                 db  5Ch ; \
.eh_frame:000000000001195D                 db    0
.eh_frame:000000000001195E                 db    0
.eh_frame:000000000001195F                 db    0
.eh_frame:0000000000011960                 db    0
.eh_frame:0000000000011961                 db    0
.eh_frame:0000000000011962                 db    0
.eh_frame:0000000000011963                 db    0
.eh_frame:0000000000011964                 db  28h ; (
.eh_frame:0000000000011965                 db    0
.eh_frame:0000000000011966                 db    0
.eh_frame:0000000000011967                 db    0
.eh_frame:0000000000011968                 db  40h ; @
.eh_frame:0000000000011969                 db    5
.eh_frame:000000000001196A                 db    0
.eh_frame:000000000001196B                 db    0
.eh_frame:000000000001196C                 db  24h ; $
.eh_frame:000000000001196D                 db  46h ; F
.eh_frame:000000000001196E                 db 0FFh
.eh_frame:000000000001196F                 db 0FFh
.eh_frame:0000000000011970                 db  47h ; G
.eh_frame:0000000000011971                 db    0
.eh_frame:0000000000011972                 db    0
.eh_frame:0000000000011973                 db    0
.eh_frame:0000000000011974                 db    0
.eh_frame:0000000000011975                 db  41h ; A
.eh_frame:0000000000011976                 db  0Eh
.eh_frame:0000000000011977                 db  10h
.eh_frame:0000000000011978                 db  83h
.eh_frame:0000000000011979                 db    2
.eh_frame:000000000001197A                 db  5Ah ; Z
.eh_frame:000000000001197B                 db  0Ah
.eh_frame:000000000001197C                 db  0Eh
.eh_frame:000000000001197D                 db    8
.eh_frame:000000000001197E                 db  45h ; E
.eh_frame:000000000001197F                 db  0Bh
.eh_frame:0000000000011980                 db  5Dh ; ]
.eh_frame:0000000000011981                 db  0Ah
.eh_frame:0000000000011982                 db  0Eh
.eh_frame:0000000000011983                 db    8
.eh_frame:0000000000011984                 db  43h ; C
.eh_frame:0000000000011985                 db  0Bh
.eh_frame:0000000000011986                 db  46h ; F
.eh_frame:0000000000011987                 db  0Eh
.eh_frame:0000000000011988                 db    8
.eh_frame:0000000000011989                 db    0
.eh_frame:000000000001198A                 db    0
.eh_frame:000000000001198B                 db    0
.eh_frame:000000000001198C                 db    0
.eh_frame:000000000001198D                 db    0
.eh_frame:000000000001198E                 db    0
.eh_frame:000000000001198F                 db    0
.eh_frame:0000000000011990                 db  5Ch ; \
.eh_frame:0000000000011991                 db    0
.eh_frame:0000000000011992                 db    0
.eh_frame:0000000000011993                 db    0
.eh_frame:0000000000011994                 db  6Ch ; l
.eh_frame:0000000000011995                 db    5
.eh_frame:0000000000011996                 db    0
.eh_frame:0000000000011997                 db    0
.eh_frame:0000000000011998                 db  48h ; H
.eh_frame:0000000000011999                 db  46h ; F
.eh_frame:000000000001199A                 db 0FFh
.eh_frame:000000000001199B                 db 0FFh
.eh_frame:000000000001199C                 db  87h
.eh_frame:000000000001199D                 db    0
.eh_frame:000000000001199E                 db    0
.eh_frame:000000000001199F                 db    0
.eh_frame:00000000000119A0                 db    0
.eh_frame:00000000000119A1                 db  47h ; G
.eh_frame:00000000000119A2                 db  0Eh
.eh_frame:00000000000119A3                 db  10h
.eh_frame:00000000000119A4                 db  8Dh
.eh_frame:00000000000119A5                 db    2
.eh_frame:00000000000119A6                 db  42h ; B
.eh_frame:00000000000119A7                 db  0Eh
.eh_frame:00000000000119A8                 db  18h
.eh_frame:00000000000119A9                 db  8Ch
.eh_frame:00000000000119AA                 db    3
.eh_frame:00000000000119AB                 db  44h ; D
.eh_frame:00000000000119AC                 db  0Eh
.eh_frame:00000000000119AD                 db  20h
.eh_frame:00000000000119AE                 db  86h
.eh_frame:00000000000119AF                 db    4
.eh_frame:00000000000119B0                 db  41h ; A
.eh_frame:00000000000119B1                 db  0Eh
.eh_frame:00000000000119B2                 db  28h ; (
.eh_frame:00000000000119B3                 db  83h
.eh_frame:00000000000119B4                 db    5
.eh_frame:00000000000119B5                 db  4Fh ; O
.eh_frame:00000000000119B6                 db  0Eh
.eh_frame:00000000000119B7                 db  30h ; 0
.eh_frame:00000000000119B8                 db  7Ch ; |
.eh_frame:00000000000119B9                 db  0Ah
.eh_frame:00000000000119BA                 db  0Eh
.eh_frame:00000000000119BB                 db  28h ; (
.eh_frame:00000000000119BC                 db  44h ; D
.eh_frame:00000000000119BD                 db 0C3h
.eh_frame:00000000000119BE                 db  0Eh
.eh_frame:00000000000119BF                 db  20h
.eh_frame:00000000000119C0                 db  41h ; A
.eh_frame:00000000000119C1                 db 0C6h
.eh_frame:00000000000119C2                 db  0Eh
.eh_frame:00000000000119C3                 db  18h
.eh_frame:00000000000119C4                 db  42h ; B
.eh_frame:00000000000119C5                 db 0CCh
.eh_frame:00000000000119C6                 db  0Eh
.eh_frame:00000000000119C7                 db  10h
.eh_frame:00000000000119C8                 db  42h ; B
.eh_frame:00000000000119C9                 db 0CDh
.eh_frame:00000000000119CA                 db  0Eh
.eh_frame:00000000000119CB                 db    8
.eh_frame:00000000000119CC                 db  4Eh ; N
.eh_frame:00000000000119CD                 db  0Bh
.eh_frame:00000000000119CE                 db  44h ; D
.eh_frame:00000000000119CF                 db  0Eh
.eh_frame:00000000000119D0                 db  28h ; (
.eh_frame:00000000000119D1                 db  41h ; A
.eh_frame:00000000000119D2                 db  0Eh
.eh_frame:00000000000119D3                 db  20h
.eh_frame:00000000000119D4                 db  41h ; A
.eh_frame:00000000000119D5                 db  0Eh
.eh_frame:00000000000119D6                 db  18h
.eh_frame:00000000000119D7                 db  42h ; B
.eh_frame:00000000000119D8                 db  0Eh
.eh_frame:00000000000119D9                 db  10h
.eh_frame:00000000000119DA                 db  42h ; B
.eh_frame:00000000000119DB                 db  0Eh
.eh_frame:00000000000119DC                 db    8
.eh_frame:00000000000119DD                 db  46h ; F
.eh_frame:00000000000119DE                 db 0C3h
.eh_frame:00000000000119DF                 db 0C6h
.eh_frame:00000000000119E0                 db 0CCh
.eh_frame:00000000000119E1                 db 0CDh
.eh_frame:00000000000119E2                 db  42h ; B
.eh_frame:00000000000119E3                 db  0Eh
.eh_frame:00000000000119E4                 db  30h ; 0
.eh_frame:00000000000119E5                 db  83h
.eh_frame:00000000000119E6                 db    5
.eh_frame:00000000000119E7                 db  86h
.eh_frame:00000000000119E8                 db    4
.eh_frame:00000000000119E9                 db  8Ch
.eh_frame:00000000000119EA                 db    3
.eh_frame:00000000000119EB                 db  8Dh
.eh_frame:00000000000119EC                 db    2
.eh_frame:00000000000119ED                 db    0
.eh_frame:00000000000119EE                 db    0
.eh_frame:00000000000119EF                 db    0
.eh_frame:00000000000119F0                 db  1Ch
.eh_frame:00000000000119F1                 db    0
.eh_frame:00000000000119F2                 db    0
.eh_frame:00000000000119F3                 db    0
.eh_frame:00000000000119F4                 db 0CCh
.eh_frame:00000000000119F5                 db    5
.eh_frame:00000000000119F6                 db    0
.eh_frame:00000000000119F7                 db    0
.eh_frame:00000000000119F8                 db  78h ; x
.eh_frame:00000000000119F9                 db  46h ; F
.eh_frame:00000000000119FA                 db 0FFh
.eh_frame:00000000000119FB                 db 0FFh
.eh_frame:00000000000119FC                 db  56h ; V
.eh_frame:00000000000119FD                 db    0
.eh_frame:00000000000119FE                 db    0
.eh_frame:00000000000119FF                 db    0
.eh_frame:0000000000011A00                 db    0
.eh_frame:0000000000011A01                 db  44h ; D
.eh_frame:0000000000011A02                 db  0Eh
.eh_frame:0000000000011A03                 db  30h ; 0
.eh_frame:0000000000011A04                 db    2
.eh_frame:0000000000011A05                 db  4Ch ; L
.eh_frame:0000000000011A06                 db  0Ah
.eh_frame:0000000000011A07                 db  0Eh
.eh_frame:0000000000011A08                 db    8
.eh_frame:0000000000011A09                 db  41h ; A
.eh_frame:0000000000011A0A                 db  0Bh
.eh_frame:0000000000011A0B                 db    0
.eh_frame:0000000000011A0C                 db    0
.eh_frame:0000000000011A0D                 db    0
.eh_frame:0000000000011A0E                 db    0
.eh_frame:0000000000011A0F                 db    0
.eh_frame:0000000000011A10                 db  10h
.eh_frame:0000000000011A11                 db    0
.eh_frame:0000000000011A12                 db    0
.eh_frame:0000000000011A13                 db    0
.eh_frame:0000000000011A14                 db 0ECh
.eh_frame:0000000000011A15                 db    5
.eh_frame:0000000000011A16                 db    0
.eh_frame:0000000000011A17                 db    0
.eh_frame:0000000000011A18                 db 0B8h
.eh_frame:0000000000011A19                 db  46h ; F
.eh_frame:0000000000011A1A                 db 0FFh
.eh_frame:0000000000011A1B                 db 0FFh
.eh_frame:0000000000011A1C                 db  93h
.eh_frame:0000000000011A1D                 db    0
.eh_frame:0000000000011A1E                 db    0
.eh_frame:0000000000011A1F                 db    0
.eh_frame:0000000000011A20                 db    0
.eh_frame:0000000000011A21                 db    0
.eh_frame:0000000000011A22                 db    0
.eh_frame:0000000000011A23                 db    0
.eh_frame:0000000000011A24                 db  10h
.eh_frame:0000000000011A25                 db    0
.eh_frame:0000000000011A26                 db    0
.eh_frame:0000000000011A27                 db    0
.eh_frame:0000000000011A28                 db    0
.eh_frame:0000000000011A29                 db    6
.eh_frame:0000000000011A2A                 db    0
.eh_frame:0000000000011A2B                 db    0
.eh_frame:0000000000011A2C                 db  44h ; D
.eh_frame:0000000000011A2D                 db  47h ; G
.eh_frame:0000000000011A2E                 db 0FFh
.eh_frame:0000000000011A2F                 db 0FFh
.eh_frame:0000000000011A30                 db  10h
.eh_frame:0000000000011A31                 db    0
.eh_frame:0000000000011A32                 db    0
.eh_frame:0000000000011A33                 db    0
.eh_frame:0000000000011A34                 db    0
.eh_frame:0000000000011A35                 db    0
.eh_frame:0000000000011A36                 db    0
.eh_frame:0000000000011A37                 db    0
.eh_frame:0000000000011A38                 db  10h
.eh_frame:0000000000011A39                 db    0
.eh_frame:0000000000011A3A                 db    0
.eh_frame:0000000000011A3B                 db    0
.eh_frame:0000000000011A3C                 db  14h
.eh_frame:0000000000011A3D                 db    6
.eh_frame:0000000000011A3E                 db    0
.eh_frame:0000000000011A3F                 db    0
.eh_frame:0000000000011A40                 db  40h ; @
.eh_frame:0000000000011A41                 db  47h ; G
.eh_frame:0000000000011A42                 db 0FFh
.eh_frame:0000000000011A43                 db 0FFh
.eh_frame:0000000000011A44                 db    7
.eh_frame:0000000000011A45                 db    0
.eh_frame:0000000000011A46                 db    0
.eh_frame:0000000000011A47                 db    0
.eh_frame:0000000000011A48                 db    0
.eh_frame:0000000000011A49                 db    0
.eh_frame:0000000000011A4A                 db    0
.eh_frame:0000000000011A4B                 db    0
.eh_frame:0000000000011A4C                 db  18h
.eh_frame:0000000000011A4D                 db    0
.eh_frame:0000000000011A4E                 db    0
.eh_frame:0000000000011A4F                 db    0
.eh_frame:0000000000011A50                 db  28h ; (
.eh_frame:0000000000011A51                 db    6
.eh_frame:0000000000011A52                 db    0
.eh_frame:0000000000011A53                 db    0
.eh_frame:0000000000011A54                 db  3Ch ; <
.eh_frame:0000000000011A55                 db  47h ; G
.eh_frame:0000000000011A56                 db 0FFh
.eh_frame:0000000000011A57                 db 0FFh
.eh_frame:0000000000011A58                 db  22h ; "
.eh_frame:0000000000011A59                 db    0
.eh_frame:0000000000011A5A                 db    0
.eh_frame:0000000000011A5B                 db    0
.eh_frame:0000000000011A5C                 db    0
.eh_frame:0000000000011A5D                 db  41h ; A
.eh_frame:0000000000011A5E                 db  0Eh
.eh_frame:0000000000011A5F                 db  10h
.eh_frame:0000000000011A60                 db  83h
.eh_frame:0000000000011A61                 db    2
.eh_frame:0000000000011A62                 db  5Bh ; [
.eh_frame:0000000000011A63                 db  0Ah
.eh_frame:0000000000011A64                 db  0Eh
.eh_frame:0000000000011A65                 db    8
.eh_frame:0000000000011A66                 db  41h ; A
.eh_frame:0000000000011A67                 db  0Bh
.eh_frame:0000000000011A68                 db  5Ch ; \
.eh_frame:0000000000011A69                 db    0
.eh_frame:0000000000011A6A                 db    0
.eh_frame:0000000000011A6B                 db    0
.eh_frame:0000000000011A6C                 db  44h ; D
.eh_frame:0000000000011A6D                 db    6
.eh_frame:0000000000011A6E                 db    0
.eh_frame:0000000000011A6F                 db    0
.eh_frame:0000000000011A70                 db  50h ; P
.eh_frame:0000000000011A71                 db  47h ; G
.eh_frame:0000000000011A72                 db 0FFh
.eh_frame:0000000000011A73                 db 0FFh
.eh_frame:0000000000011A74                 db  1Eh
.eh_frame:0000000000011A75                 db    1
.eh_frame:0000000000011A76                 db    0
.eh_frame:0000000000011A77                 db    0
.eh_frame:0000000000011A78                 db    0
.eh_frame:0000000000011A79                 db  42h ; B
.eh_frame:0000000000011A7A                 db  0Eh
.eh_frame:0000000000011A7B                 db  10h
.eh_frame:0000000000011A7C                 db  8Eh
.eh_frame:0000000000011A7D                 db    2
.eh_frame:0000000000011A7E                 db  42h ; B
.eh_frame:0000000000011A7F                 db  0Eh
.eh_frame:0000000000011A80                 db  18h
.eh_frame:0000000000011A81                 db  8Dh
.eh_frame:0000000000011A82                 db    3
.eh_frame:0000000000011A83                 db  45h ; E
.eh_frame:0000000000011A84                 db  0Eh
.eh_frame:0000000000011A85                 db  20h
.eh_frame:0000000000011A86                 db  8Ch
.eh_frame:0000000000011A87                 db    4
.eh_frame:0000000000011A88                 db  41h ; A
.eh_frame:0000000000011A89                 db  0Eh
.eh_frame:0000000000011A8A                 db  28h ; (
.eh_frame:0000000000011A8B                 db  86h
.eh_frame:0000000000011A8C                 db    5
.eh_frame:0000000000011A8D                 db  44h ; D
.eh_frame:0000000000011A8E                 db  0Eh
.eh_frame:0000000000011A8F                 db  30h ; 0
.eh_frame:0000000000011A90                 db  83h
.eh_frame:0000000000011A91                 db    6
.eh_frame:0000000000011A92                 db    2
.eh_frame:0000000000011A93                 db 0A1h
.eh_frame:0000000000011A94                 db  0Ah
.eh_frame:0000000000011A95                 db  0Eh
.eh_frame:0000000000011A96                 db  28h ; (
.eh_frame:0000000000011A97                 db  44h ; D
.eh_frame:0000000000011A98                 db  0Eh
.eh_frame:0000000000011A99                 db  20h
.eh_frame:0000000000011A9A                 db  42h ; B
.eh_frame:0000000000011A9B                 db  0Eh
.eh_frame:0000000000011A9C                 db  18h
.eh_frame:0000000000011A9D                 db  42h ; B
.eh_frame:0000000000011A9E                 db  0Eh
.eh_frame:0000000000011A9F                 db  10h
.eh_frame:0000000000011AA0                 db  42h ; B
.eh_frame:0000000000011AA1                 db  0Eh
.eh_frame:0000000000011AA2                 db    8
.eh_frame:0000000000011AA3                 db  47h ; G
.eh_frame:0000000000011AA4                 db  0Bh
.eh_frame:0000000000011AA5                 db  71h ; q
.eh_frame:0000000000011AA6                 db  0Ah
.eh_frame:0000000000011AA7                 db  0Eh
.eh_frame:0000000000011AA8                 db  28h ; (
.eh_frame:0000000000011AA9                 db  41h ; A
.eh_frame:0000000000011AAA                 db  0Eh
.eh_frame:0000000000011AAB                 db  20h
.eh_frame:0000000000011AAC                 db  42h ; B
.eh_frame:0000000000011AAD                 db  0Eh
.eh_frame:0000000000011AAE                 db  18h
.eh_frame:0000000000011AAF                 db  42h ; B
.eh_frame:0000000000011AB0                 db  0Eh
.eh_frame:0000000000011AB1                 db  10h
.eh_frame:0000000000011AB2                 db  42h ; B
.eh_frame:0000000000011AB3                 db  0Eh
.eh_frame:0000000000011AB4                 db    8
.eh_frame:0000000000011AB5                 db  48h ; H
.eh_frame:0000000000011AB6                 db  0Bh
.eh_frame:0000000000011AB7                 db  53h ; S
.eh_frame:0000000000011AB8                 db  0Eh
.eh_frame:0000000000011AB9                 db  28h ; (
.eh_frame:0000000000011ABA                 db  44h ; D
.eh_frame:0000000000011ABB                 db  0Eh
.eh_frame:0000000000011ABC                 db  20h
.eh_frame:0000000000011ABD                 db  42h ; B
.eh_frame:0000000000011ABE                 db  0Eh
.eh_frame:0000000000011ABF                 db  18h
.eh_frame:0000000000011AC0                 db  42h ; B
.eh_frame:0000000000011AC1                 db  0Eh
.eh_frame:0000000000011AC2                 db  10h
.eh_frame:0000000000011AC3                 db  42h ; B
.eh_frame:0000000000011AC4                 db  0Eh
.eh_frame:0000000000011AC5                 db    8
.eh_frame:0000000000011AC6                 db    0
.eh_frame:0000000000011AC7                 db    0
.eh_frame:0000000000011AC8                 db  10h
.eh_frame:0000000000011AC9                 db    0
.eh_frame:0000000000011ACA                 db    0
.eh_frame:0000000000011ACB                 db    0
.eh_frame:0000000000011ACC                 db 0A4h
.eh_frame:0000000000011ACD                 db    6
.eh_frame:0000000000011ACE                 db    0
.eh_frame:0000000000011ACF                 db    0
.eh_frame:0000000000011AD0                 db  10h
.eh_frame:0000000000011AD1                 db  48h ; H
.eh_frame:0000000000011AD2                 db 0FFh
.eh_frame:0000000000011AD3                 db 0FFh
.eh_frame:0000000000011AD4                 db  77h ; w
.eh_frame:0000000000011AD5                 db    0
.eh_frame:0000000000011AD6                 db    0
.eh_frame:0000000000011AD7                 db    0
.eh_frame:0000000000011AD8                 db    0
.eh_frame:0000000000011AD9                 db    0
.eh_frame:0000000000011ADA                 db    0
.eh_frame:0000000000011ADB                 db    0
.eh_frame:0000000000011ADC                 db  5Ch ; \
.eh_frame:0000000000011ADD                 db    0
.eh_frame:0000000000011ADE                 db    0
.eh_frame:0000000000011ADF                 db    0
.eh_frame:0000000000011AE0                 db 0B8h
.eh_frame:0000000000011AE1                 db    6
.eh_frame:0000000000011AE2                 db    0
.eh_frame:0000000000011AE3                 db    0
.eh_frame:0000000000011AE4                 db  7Ch ; |
.eh_frame:0000000000011AE5                 db  48h ; H
.eh_frame:0000000000011AE6                 db 0FFh
.eh_frame:0000000000011AE7                 db 0FFh
.eh_frame:0000000000011AE8                 db  40h ; @
.eh_frame:0000000000011AE9                 db    1
.eh_frame:0000000000011AEA                 db    0
.eh_frame:0000000000011AEB                 db    0
.eh_frame:0000000000011AEC                 db    0
.eh_frame:0000000000011AED                 db  42h ; B
.eh_frame:0000000000011AEE                 db  0Eh
.eh_frame:0000000000011AEF                 db  10h
.eh_frame:0000000000011AF0                 db  8Fh
.eh_frame:0000000000011AF1                 db    2
.eh_frame:0000000000011AF2                 db  42h ; B
.eh_frame:0000000000011AF3                 db  0Eh
.eh_frame:0000000000011AF4                 db  18h
.eh_frame:0000000000011AF5                 db  8Eh
.eh_frame:0000000000011AF6                 db    3
.eh_frame:0000000000011AF7                 db  42h ; B
.eh_frame:0000000000011AF8                 db  0Eh
.eh_frame:0000000000011AF9                 db  20h
.eh_frame:0000000000011AFA                 db  8Dh
.eh_frame:0000000000011AFB                 db    4
.eh_frame:0000000000011AFC                 db  42h ; B
.eh_frame:0000000000011AFD                 db  0Eh
.eh_frame:0000000000011AFE                 db  28h ; (
.eh_frame:0000000000011AFF                 db  8Ch
.eh_frame:0000000000011B00                 db    5
.eh_frame:0000000000011B01                 db  41h ; A
.eh_frame:0000000000011B02                 db  0Eh
.eh_frame:0000000000011B03                 db  30h ; 0
.eh_frame:0000000000011B04                 db  86h
.eh_frame:0000000000011B05                 db    6
.eh_frame:0000000000011B06                 db  41h ; A
.eh_frame:0000000000011B07                 db  0Eh
.eh_frame:0000000000011B08                 db  38h ; 8
.eh_frame:0000000000011B09                 db  83h
.eh_frame:0000000000011B0A                 db    7
.eh_frame:0000000000011B0B                 db  44h ; D
.eh_frame:0000000000011B0C                 db  0Eh
.eh_frame:0000000000011B0D                 db  40h ; @
.eh_frame:0000000000011B0E                 db    2
.eh_frame:0000000000011B0F                 db 0EEh
.eh_frame:0000000000011B10                 db  0Ah
.eh_frame:0000000000011B11                 db  0Eh
.eh_frame:0000000000011B12                 db  38h ; 8
.eh_frame:0000000000011B13                 db  46h ; F
.eh_frame:0000000000011B14                 db  0Eh
.eh_frame:0000000000011B15                 db  30h ; 0
.eh_frame:0000000000011B16                 db  41h ; A
.eh_frame:0000000000011B17                 db  0Eh
.eh_frame:0000000000011B18                 db  28h ; (
.eh_frame:0000000000011B19                 db  42h ; B
.eh_frame:0000000000011B1A                 db  0Eh
.eh_frame:0000000000011B1B                 db  20h
.eh_frame:0000000000011B1C                 db  42h ; B
.eh_frame:0000000000011B1D                 db  0Eh
.eh_frame:0000000000011B1E                 db  18h
.eh_frame:0000000000011B1F                 db  42h ; B
.eh_frame:0000000000011B20                 db  0Eh
.eh_frame:0000000000011B21                 db  10h
.eh_frame:0000000000011B22                 db  42h ; B
.eh_frame:0000000000011B23                 db  0Eh
.eh_frame:0000000000011B24                 db    8
.eh_frame:0000000000011B25                 db  45h ; E
.eh_frame:0000000000011B26                 db  0Bh
.eh_frame:0000000000011B27                 db  63h ; c
.eh_frame:0000000000011B28                 db  0Eh
.eh_frame:0000000000011B29                 db  38h ; 8
.eh_frame:0000000000011B2A                 db  43h ; C
.eh_frame:0000000000011B2B                 db  0Eh
.eh_frame:0000000000011B2C                 db  30h ; 0
.eh_frame:0000000000011B2D                 db  41h ; A
.eh_frame:0000000000011B2E                 db  0Eh
.eh_frame:0000000000011B2F                 db  28h ; (
.eh_frame:0000000000011B30                 db  42h ; B
.eh_frame:0000000000011B31                 db  0Eh
.eh_frame:0000000000011B32                 db  20h
.eh_frame:0000000000011B33                 db  42h ; B
.eh_frame:0000000000011B34                 db  0Eh
.eh_frame:0000000000011B35                 db  18h
.eh_frame:0000000000011B36                 db  42h ; B
.eh_frame:0000000000011B37                 db  0Eh
.eh_frame:0000000000011B38                 db  10h
.eh_frame:0000000000011B39                 db  42h ; B
.eh_frame:0000000000011B3A                 db  0Eh
.eh_frame:0000000000011B3B                 db    8
.eh_frame:0000000000011B3C                 db  10h
.eh_frame:0000000000011B3D                 db    0
.eh_frame:0000000000011B3E                 db    0
.eh_frame:0000000000011B3F                 db    0
.eh_frame:0000000000011B40                 db  18h
.eh_frame:0000000000011B41                 db    7
.eh_frame:0000000000011B42                 db    0
.eh_frame:0000000000011B43                 db    0
.eh_frame:0000000000011B44                 db  5Ch ; \
.eh_frame:0000000000011B45                 db  49h ; I
.eh_frame:0000000000011B46                 db 0FFh
.eh_frame:0000000000011B47                 db 0FFh
.eh_frame:0000000000011B48                 db    5
.eh_frame:0000000000011B49                 db    0
.eh_frame:0000000000011B4A                 db    0
.eh_frame:0000000000011B4B                 db    0
.eh_frame:0000000000011B4C                 db    0
.eh_frame:0000000000011B4D                 db    0
.eh_frame:0000000000011B4E                 db    0
.eh_frame:0000000000011B4F                 db    0
.eh_frame:0000000000011B50                 db  10h
.eh_frame:0000000000011B51                 db    0
.eh_frame:0000000000011B52                 db    0
.eh_frame:0000000000011B53                 db    0
.eh_frame:0000000000011B54                 db  2Ch ; ,
.eh_frame:0000000000011B55                 db    7
.eh_frame:0000000000011B56                 db    0
.eh_frame:0000000000011B57                 db    0
.eh_frame:0000000000011B58                 db  58h ; X
.eh_frame:0000000000011B59                 db  49h ; I
.eh_frame:0000000000011B5A                 db 0FFh
.eh_frame:0000000000011B5B                 db 0FFh
.eh_frame:0000000000011B5C                 db    5
.eh_frame:0000000000011B5D                 db    0
.eh_frame:0000000000011B5E                 db    0
.eh_frame:0000000000011B5F                 db    0
.eh_frame:0000000000011B60                 db    0
.eh_frame:0000000000011B61                 db    0
.eh_frame:0000000000011B62                 db    0
.eh_frame:0000000000011B63                 db    0
.eh_frame:0000000000011B64                 db  10h
.eh_frame:0000000000011B65                 db    0
.eh_frame:0000000000011B66                 db    0
.eh_frame:0000000000011B67                 db    0
.eh_frame:0000000000011B68                 db  40h ; @
.eh_frame:0000000000011B69                 db    7
.eh_frame:0000000000011B6A                 db    0
.eh_frame:0000000000011B6B                 db    0
.eh_frame:0000000000011B6C                 db  54h ; T
.eh_frame:0000000000011B6D                 db  49h ; I
.eh_frame:0000000000011B6E                 db 0FFh
.eh_frame:0000000000011B6F                 db 0FFh
.eh_frame:0000000000011B70                 db    5
.eh_frame:0000000000011B71                 db    0
.eh_frame:0000000000011B72                 db    0
.eh_frame:0000000000011B73                 db    0
.eh_frame:0000000000011B74                 db    0
.eh_frame:0000000000011B75                 db    0
.eh_frame:0000000000011B76                 db    0
.eh_frame:0000000000011B77                 db    0
.eh_frame:0000000000011B78                 db  10h
.eh_frame:0000000000011B79                 db    0
.eh_frame:0000000000011B7A                 db    0
.eh_frame:0000000000011B7B                 db    0
.eh_frame:0000000000011B7C                 db  54h ; T
.eh_frame:0000000000011B7D                 db    7
.eh_frame:0000000000011B7E                 db    0
.eh_frame:0000000000011B7F                 db    0
.eh_frame:0000000000011B80                 db  50h ; P
.eh_frame:0000000000011B81                 db  49h ; I
.eh_frame:0000000000011B82                 db 0FFh
.eh_frame:0000000000011B83                 db 0FFh
.eh_frame:0000000000011B84                 db  49h ; I
.eh_frame:0000000000011B85                 db    0
.eh_frame:0000000000011B86                 db    0
.eh_frame:0000000000011B87                 db    0
.eh_frame:0000000000011B88                 db    0
.eh_frame:0000000000011B89                 db    0
.eh_frame:0000000000011B8A                 db    0
.eh_frame:0000000000011B8B                 db    0
.eh_frame:0000000000011B8C                 db  10h
.eh_frame:0000000000011B8D                 db    0
.eh_frame:0000000000011B8E                 db    0
.eh_frame:0000000000011B8F                 db    0
.eh_frame:0000000000011B90                 db  68h ; h
.eh_frame:0000000000011B91                 db    7
.eh_frame:0000000000011B92                 db    0
.eh_frame:0000000000011B93                 db    0
.eh_frame:0000000000011B94                 db  8Ch
.eh_frame:0000000000011B95                 db  49h ; I
.eh_frame:0000000000011B96                 db 0FFh
.eh_frame:0000000000011B97                 db 0FFh
.eh_frame:0000000000011B98                 db  58h ; X
.eh_frame:0000000000011B99                 db    0
.eh_frame:0000000000011B9A                 db    0
.eh_frame:0000000000011B9B                 db    0
.eh_frame:0000000000011B9C                 db    0
.eh_frame:0000000000011B9D                 db    0
.eh_frame:0000000000011B9E                 db    0
.eh_frame:0000000000011B9F                 db    0
.eh_frame:0000000000011BA0                 db  38h ; 8
.eh_frame:0000000000011BA1                 db    0
.eh_frame:0000000000011BA2                 db    0
.eh_frame:0000000000011BA3                 db    0
.eh_frame:0000000000011BA4                 db  7Ch ; |
.eh_frame:0000000000011BA5                 db    7
.eh_frame:0000000000011BA6                 db    0
.eh_frame:0000000000011BA7                 db    0
.eh_frame:0000000000011BA8                 db 0D8h
.eh_frame:0000000000011BA9                 db  49h ; I
.eh_frame:0000000000011BAA                 db 0FFh
.eh_frame:0000000000011BAB                 db 0FFh
.eh_frame:0000000000011BAC                 db  47h ; G
.eh_frame:0000000000011BAD                 db    1
.eh_frame:0000000000011BAE                 db    0
.eh_frame:0000000000011BAF                 db    0
.eh_frame:0000000000011BB0                 db    0
.eh_frame:0000000000011BB1                 db  42h ; B
.eh_frame:0000000000011BB2                 db  0Eh
.eh_frame:0000000000011BB3                 db  10h
.eh_frame:0000000000011BB4                 db  8Dh
.eh_frame:0000000000011BB5                 db    2
.eh_frame:0000000000011BB6                 db  42h ; B
.eh_frame:0000000000011BB7                 db  0Eh
.eh_frame:0000000000011BB8                 db  18h
.eh_frame:0000000000011BB9                 db  8Ch
.eh_frame:0000000000011BBA                 db    3
.eh_frame:0000000000011BBB                 db  44h ; D
.eh_frame:0000000000011BBC                 db  0Eh
.eh_frame:0000000000011BBD                 db  20h
.eh_frame:0000000000011BBE                 db  86h
.eh_frame:0000000000011BBF                 db    4
.eh_frame:0000000000011BC0                 db  41h ; A
.eh_frame:0000000000011BC1                 db  0Eh
.eh_frame:0000000000011BC2                 db  28h ; (
.eh_frame:0000000000011BC3                 db  83h
.eh_frame:0000000000011BC4                 db    5
.eh_frame:0000000000011BC5                 db  46h ; F
.eh_frame:0000000000011BC6                 db  0Eh
.eh_frame:0000000000011BC7                 db  30h ; 0
.eh_frame:0000000000011BC8                 db    2
.eh_frame:0000000000011BC9                 db 0CDh
.eh_frame:0000000000011BCA                 db  0Ah
.eh_frame:0000000000011BCB                 db  0Eh
.eh_frame:0000000000011BCC                 db  28h ; (
.eh_frame:0000000000011BCD                 db  47h ; G
.eh_frame:0000000000011BCE                 db  0Eh
.eh_frame:0000000000011BCF                 db  20h
.eh_frame:0000000000011BD0                 db  41h ; A
.eh_frame:0000000000011BD1                 db  0Eh
.eh_frame:0000000000011BD2                 db  18h
.eh_frame:0000000000011BD3                 db  42h ; B
.eh_frame:0000000000011BD4                 db  0Eh
.eh_frame:0000000000011BD5                 db  10h
.eh_frame:0000000000011BD6                 db  42h ; B
.eh_frame:0000000000011BD7                 db  0Eh
.eh_frame:0000000000011BD8                 db    8
.eh_frame:0000000000011BD9                 db  58h ; X
.eh_frame:0000000000011BDA                 db  0Bh
.eh_frame:0000000000011BDB                 db    0
.eh_frame:0000000000011BDC                 db  34h ; 4
.eh_frame:0000000000011BDD                 db    0
.eh_frame:0000000000011BDE                 db    0
.eh_frame:0000000000011BDF                 db    0
.eh_frame:0000000000011BE0                 db 0B8h
.eh_frame:0000000000011BE1                 db    7
.eh_frame:0000000000011BE2                 db    0
.eh_frame:0000000000011BE3                 db    0
.eh_frame:0000000000011BE4                 db 0ECh
.eh_frame:0000000000011BE5                 db  4Ah ; J
.eh_frame:0000000000011BE6                 db 0FFh
.eh_frame:0000000000011BE7                 db 0FFh
.eh_frame:0000000000011BE8                 db  5Bh ; [
.eh_frame:0000000000011BE9                 db    0
.eh_frame:0000000000011BEA                 db    0
.eh_frame:0000000000011BEB                 db    0
.eh_frame:0000000000011BEC                 db    0
.eh_frame:0000000000011BED                 db  42h ; B
.eh_frame:0000000000011BEE                 db  0Eh
.eh_frame:0000000000011BEF                 db  10h
.eh_frame:0000000000011BF0                 db  8Ch
.eh_frame:0000000000011BF1                 db    2
.eh_frame:0000000000011BF2                 db  41h ; A
.eh_frame:0000000000011BF3                 db  0Eh
.eh_frame:0000000000011BF4                 db  18h
.eh_frame:0000000000011BF5                 db  86h
.eh_frame:0000000000011BF6                 db    3
.eh_frame:0000000000011BF7                 db  44h ; D
.eh_frame:0000000000011BF8                 db  0Eh
.eh_frame:0000000000011BF9                 db  20h
.eh_frame:0000000000011BFA                 db  83h
.eh_frame:0000000000011BFB                 db    4
.eh_frame:0000000000011BFC                 db  79h ; y
.eh_frame:0000000000011BFD                 db  0Ah
.eh_frame:0000000000011BFE                 db  0Eh
.eh_frame:0000000000011BFF                 db  18h
.eh_frame:0000000000011C00                 db  44h ; D
.eh_frame:0000000000011C01                 db  0Eh
.eh_frame:0000000000011C02                 db  10h
.eh_frame:0000000000011C03                 db  42h ; B
.eh_frame:0000000000011C04                 db  0Eh
.eh_frame:0000000000011C05                 db    8
.eh_frame:0000000000011C06                 db  4Ah ; J
.eh_frame:0000000000011C07                 db  0Bh
.eh_frame:0000000000011C08                 db  44h ; D
.eh_frame:0000000000011C09                 db  0Eh
.eh_frame:0000000000011C0A                 db  18h
.eh_frame:0000000000011C0B                 db  41h ; A
.eh_frame:0000000000011C0C                 db  0Eh
.eh_frame:0000000000011C0D                 db  10h
.eh_frame:0000000000011C0E                 db  45h ; E
.eh_frame:0000000000011C0F                 db  0Eh
.eh_frame:0000000000011C10                 db    8
.eh_frame:0000000000011C11                 db    0
.eh_frame:0000000000011C12                 db    0
.eh_frame:0000000000011C13                 db    0
.eh_frame:0000000000011C14                 db  10h
.eh_frame:0000000000011C15                 db    0
.eh_frame:0000000000011C16                 db    0
.eh_frame:0000000000011C17                 db    0
.eh_frame:0000000000011C18                 db 0F0h
.eh_frame:0000000000011C19                 db    7
.eh_frame:0000000000011C1A                 db    0
.eh_frame:0000000000011C1B                 db    0
.eh_frame:0000000000011C1C                 db  14h
.eh_frame:0000000000011C1D                 db  4Bh ; K
.eh_frame:0000000000011C1E                 db 0FFh
.eh_frame:0000000000011C1F                 db 0FFh
.eh_frame:0000000000011C20                 db  41h ; A
.eh_frame:0000000000011C21                 db    0
.eh_frame:0000000000011C22                 db    0
.eh_frame:0000000000011C23                 db    0
.eh_frame:0000000000011C24                 db    0
.eh_frame:0000000000011C25                 db  7Ch ; |
.eh_frame:0000000000011C26                 db  0Eh
.eh_frame:0000000000011C27                 db  10h
.eh_frame:0000000000011C28                 db  30h ; 0
.eh_frame:0000000000011C29                 db    0
.eh_frame:0000000000011C2A                 db    0
.eh_frame:0000000000011C2B                 db    0
.eh_frame:0000000000011C2C                 db    4
.eh_frame:0000000000011C2D                 db    8
.eh_frame:0000000000011C2E                 db    0
.eh_frame:0000000000011C2F                 db    0
.eh_frame:0000000000011C30                 db  50h ; P
.eh_frame:0000000000011C31                 db  4Bh ; K
.eh_frame:0000000000011C32                 db 0FFh
.eh_frame:0000000000011C33                 db 0FFh
.eh_frame:0000000000011C34                 db  72h ; r
.eh_frame:0000000000011C35                 db    0
.eh_frame:0000000000011C36                 db    0
.eh_frame:0000000000011C37                 db    0
.eh_frame:0000000000011C38                 db    0
.eh_frame:0000000000011C39                 db  41h ; A
.eh_frame:0000000000011C3A                 db  0Eh
.eh_frame:0000000000011C3B                 db  10h
.eh_frame:0000000000011C3C                 db  86h
.eh_frame:0000000000011C3D                 db    2
.eh_frame:0000000000011C3E                 db  41h ; A
.eh_frame:0000000000011C3F                 db  0Eh
.eh_frame:0000000000011C40                 db  18h
.eh_frame:0000000000011C41                 db  83h
.eh_frame:0000000000011C42                 db    3
.eh_frame:0000000000011C43                 db  4Ah ; J
.eh_frame:0000000000011C44                 db  0Eh
.eh_frame:0000000000011C45                 db  20h
.eh_frame:0000000000011C46                 db    2
.eh_frame:0000000000011C47                 db  53h ; S
.eh_frame:0000000000011C48                 db  0Ah
.eh_frame:0000000000011C49                 db  0Eh
.eh_frame:0000000000011C4A                 db  18h
.eh_frame:0000000000011C4B                 db  41h ; A
.eh_frame:0000000000011C4C                 db  0Eh
.eh_frame:0000000000011C4D                 db  10h
.eh_frame:0000000000011C4E                 db  41h ; A
.eh_frame:0000000000011C4F                 db  0Eh
.eh_frame:0000000000011C50                 db    8
.eh_frame:0000000000011C51                 db  47h ; G
.eh_frame:0000000000011C52                 db  0Bh
.eh_frame:0000000000011C53                 db  47h ; G
.eh_frame:0000000000011C54                 db  0Eh
.eh_frame:0000000000011C55                 db  18h
.eh_frame:0000000000011C56                 db  41h ; A
.eh_frame:0000000000011C57                 db  0Eh
.eh_frame:0000000000011C58                 db  10h
.eh_frame:0000000000011C59                 db  41h ; A
.eh_frame:0000000000011C5A                 db  0Eh
.eh_frame:0000000000011C5B                 db    8
.eh_frame:0000000000011C5C                 db  10h
.eh_frame:0000000000011C5D                 db    0
.eh_frame:0000000000011C5E                 db    0
.eh_frame:0000000000011C5F                 db    0
.eh_frame:0000000000011C60                 db  38h ; 8
.eh_frame:0000000000011C61                 db    8
.eh_frame:0000000000011C62                 db    0
.eh_frame:0000000000011C63                 db    0
.eh_frame:0000000000011C64                 db  9Ch
.eh_frame:0000000000011C65                 db  4Bh ; K
.eh_frame:0000000000011C66                 db 0FFh
.eh_frame:0000000000011C67                 db 0FFh
.eh_frame:0000000000011C68                 db  65h ; e
.eh_frame:0000000000011C69                 db    0
.eh_frame:0000000000011C6A                 db    0
.eh_frame:0000000000011C6B                 db    0
.eh_frame:0000000000011C6C                 db    0
.eh_frame:0000000000011C6D                 db    0
.eh_frame:0000000000011C6E                 db    0
.eh_frame:0000000000011C6F                 db    0
.eh_frame:0000000000011C70                 db  48h ; H
.eh_frame:0000000000011C71                 db    0
.eh_frame:0000000000011C72                 db    0
.eh_frame:0000000000011C73                 db    0
.eh_frame:0000000000011C74                 db  4Ch ; L
.eh_frame:0000000000011C75                 db    8
.eh_frame:0000000000011C76                 db    0
.eh_frame:0000000000011C77                 db    0
.eh_frame:0000000000011C78                 db 0F8h
.eh_frame:0000000000011C79                 db  4Bh ; K
.eh_frame:0000000000011C7A                 db 0FFh
.eh_frame:0000000000011C7B                 db 0FFh
.eh_frame:0000000000011C7C                 db  6Ah ; j
.eh_frame:0000000000011C7D                 db    0
.eh_frame:0000000000011C7E                 db    0
.eh_frame:0000000000011C7F                 db    0
.eh_frame:0000000000011C80                 db    0
.eh_frame:0000000000011C81                 db  42h ; B
.eh_frame:0000000000011C82                 db  0Eh
.eh_frame:0000000000011C83                 db  10h
.eh_frame:0000000000011C84                 db  8Fh
.eh_frame:0000000000011C85                 db    2
.eh_frame:0000000000011C86                 db  42h ; B
.eh_frame:0000000000011C87                 db  0Eh
.eh_frame:0000000000011C88                 db  18h
.eh_frame:0000000000011C89                 db  8Eh
.eh_frame:0000000000011C8A                 db    3
.eh_frame:0000000000011C8B                 db  42h ; B
.eh_frame:0000000000011C8C                 db  0Eh
.eh_frame:0000000000011C8D                 db  20h
.eh_frame:0000000000011C8E                 db  8Dh
.eh_frame:0000000000011C8F                 db    4
.eh_frame:0000000000011C90                 db  42h ; B
.eh_frame:0000000000011C91                 db  0Eh
.eh_frame:0000000000011C92                 db  28h ; (
.eh_frame:0000000000011C93                 db  8Ch
.eh_frame:0000000000011C94                 db    5
.eh_frame:0000000000011C95                 db  41h ; A
.eh_frame:0000000000011C96                 db  0Eh
.eh_frame:0000000000011C97                 db  30h ; 0
.eh_frame:0000000000011C98                 db  86h
.eh_frame:0000000000011C99                 db    6
.eh_frame:0000000000011C9A                 db  41h ; A
.eh_frame:0000000000011C9B                 db  0Eh
.eh_frame:0000000000011C9C                 db  38h ; 8
.eh_frame:0000000000011C9D                 db  83h
.eh_frame:0000000000011C9E                 db    7
.eh_frame:0000000000011C9F                 db  44h ; D
.eh_frame:0000000000011CA0                 db  0Eh
.eh_frame:0000000000011CA1                 db  40h ; @
.eh_frame:0000000000011CA2                 db    2
.eh_frame:0000000000011CA3                 db  4Ah ; J
.eh_frame:0000000000011CA4                 db  0Ah
.eh_frame:0000000000011CA5                 db  0Eh
.eh_frame:0000000000011CA6                 db  38h ; 8
.eh_frame:0000000000011CA7                 db  44h ; D
.eh_frame:0000000000011CA8                 db  0Eh
.eh_frame:0000000000011CA9                 db  30h ; 0
.eh_frame:0000000000011CAA                 db  41h ; A
.eh_frame:0000000000011CAB                 db  0Eh
.eh_frame:0000000000011CAC                 db  28h ; (
.eh_frame:0000000000011CAD                 db  42h ; B
.eh_frame:0000000000011CAE                 db  0Eh
.eh_frame:0000000000011CAF                 db  20h
.eh_frame:0000000000011CB0                 db  42h ; B
.eh_frame:0000000000011CB1                 db  0Eh
.eh_frame:0000000000011CB2                 db  18h
.eh_frame:0000000000011CB3                 db  42h ; B
.eh_frame:0000000000011CB4                 db  0Eh
.eh_frame:0000000000011CB5                 db  10h
.eh_frame:0000000000011CB6                 db  42h ; B
.eh_frame:0000000000011CB7                 db  0Eh
.eh_frame:0000000000011CB8                 db    8
.eh_frame:0000000000011CB9                 db  41h ; A
.eh_frame:0000000000011CBA                 db  0Bh
.eh_frame:0000000000011CBB                 db    0
.eh_frame:0000000000011CBC                 db  10h
.eh_frame:0000000000011CBD                 db    0
.eh_frame:0000000000011CBE                 db    0
.eh_frame:0000000000011CBF                 db    0
.eh_frame:0000000000011CC0                 db  98h
.eh_frame:0000000000011CC1                 db    8
.eh_frame:0000000000011CC2                 db    0
.eh_frame:0000000000011CC3                 db    0
.eh_frame:0000000000011CC4                 db  1Ch
.eh_frame:0000000000011CC5                 db  4Ch ; L
.eh_frame:0000000000011CC6                 db 0FFh
.eh_frame:0000000000011CC7                 db 0FFh
.eh_frame:0000000000011CC8                 db  31h ; 1
.eh_frame:0000000000011CC9                 db    0
.eh_frame:0000000000011CCA                 db    0
.eh_frame:0000000000011CCB                 db    0
.eh_frame:0000000000011CCC                 db    0
.eh_frame:0000000000011CCD                 db    0
.eh_frame:0000000000011CCE                 db    0
.eh_frame:0000000000011CCF                 db    0
.eh_frame:0000000000011CD0                 db  10h
.eh_frame:0000000000011CD1                 db    0
.eh_frame:0000000000011CD2                 db    0
.eh_frame:0000000000011CD3                 db    0
.eh_frame:0000000000011CD4                 db 0ACh
.eh_frame:0000000000011CD5                 db    8
.eh_frame:0000000000011CD6                 db    0
.eh_frame:0000000000011CD7                 db    0
.eh_frame:0000000000011CD8                 db  48h ; H
.eh_frame:0000000000011CD9                 db  4Ch ; L
.eh_frame:0000000000011CDA                 db 0FFh
.eh_frame:0000000000011CDB                 db 0FFh
.eh_frame:0000000000011CDC                 db  20h
.eh_frame:0000000000011CDD                 db    0
.eh_frame:0000000000011CDE                 db    0
.eh_frame:0000000000011CDF                 db    0
.eh_frame:0000000000011CE0                 db    0
.eh_frame:0000000000011CE1                 db    0
.eh_frame:0000000000011CE2                 db    0
.eh_frame:0000000000011CE3                 db    0
.eh_frame:0000000000011CE4                 db  48h ; H
.eh_frame:0000000000011CE5                 db    0
.eh_frame:0000000000011CE6                 db    0
.eh_frame:0000000000011CE7                 db    0
.eh_frame:0000000000011CE8                 db 0C0h
.eh_frame:0000000000011CE9                 db    8
.eh_frame:0000000000011CEA                 db    0
.eh_frame:0000000000011CEB                 db    0
.eh_frame:0000000000011CEC                 db  54h ; T
.eh_frame:0000000000011CED                 db  4Ch ; L
.eh_frame:0000000000011CEE                 db 0FFh
.eh_frame:0000000000011CEF                 db 0FFh
.eh_frame:0000000000011CF0                 db 0B4h
.eh_frame:0000000000011CF1                 db    1
.eh_frame:0000000000011CF2                 db    0
.eh_frame:0000000000011CF3                 db    0
.eh_frame:0000000000011CF4                 db    0
.eh_frame:0000000000011CF5                 db  42h ; B
.eh_frame:0000000000011CF6                 db  0Eh
.eh_frame:0000000000011CF7                 db  10h
.eh_frame:0000000000011CF8                 db  8Fh
.eh_frame:0000000000011CF9                 db    2
.eh_frame:0000000000011CFA                 db  42h ; B
.eh_frame:0000000000011CFB                 db  0Eh
.eh_frame:0000000000011CFC                 db  18h
.eh_frame:0000000000011CFD                 db  8Eh
.eh_frame:0000000000011CFE                 db    3
.eh_frame:0000000000011CFF                 db  49h ; I
.eh_frame:0000000000011D00                 db  0Eh
.eh_frame:0000000000011D01                 db  20h
.eh_frame:0000000000011D02                 db  8Dh
.eh_frame:0000000000011D03                 db    4
.eh_frame:0000000000011D04                 db  42h ; B
.eh_frame:0000000000011D05                 db  0Eh
.eh_frame:0000000000011D06                 db  28h ; (
.eh_frame:0000000000011D07                 db  8Ch
.eh_frame:0000000000011D08                 db    5
.eh_frame:0000000000011D09                 db  44h ; D
.eh_frame:0000000000011D0A                 db  0Eh
.eh_frame:0000000000011D0B                 db  30h ; 0
.eh_frame:0000000000011D0C                 db  86h
.eh_frame:0000000000011D0D                 db    6
.eh_frame:0000000000011D0E                 db  41h ; A
.eh_frame:0000000000011D0F                 db  0Eh
.eh_frame:0000000000011D10                 db  38h ; 8
.eh_frame:0000000000011D11                 db  83h
.eh_frame:0000000000011D12                 db    7
.eh_frame:0000000000011D13                 db  52h ; R
.eh_frame:0000000000011D14                 db  0Eh
.eh_frame:0000000000011D15                 db  40h ; @
.eh_frame:0000000000011D16                 db    2
.eh_frame:0000000000011D17                 db 0D8h
.eh_frame:0000000000011D18                 db  0Ah
.eh_frame:0000000000011D19                 db  0Eh
.eh_frame:0000000000011D1A                 db  38h ; 8
.eh_frame:0000000000011D1B                 db  44h ; D
.eh_frame:0000000000011D1C                 db  0Eh
.eh_frame:0000000000011D1D                 db  30h ; 0
.eh_frame:0000000000011D1E                 db  41h ; A
.eh_frame:0000000000011D1F                 db  0Eh
.eh_frame:0000000000011D20                 db  28h ; (
.eh_frame:0000000000011D21                 db  42h ; B
.eh_frame:0000000000011D22                 db  0Eh
.eh_frame:0000000000011D23                 db  20h
.eh_frame:0000000000011D24                 db  42h ; B
.eh_frame:0000000000011D25                 db  0Eh
.eh_frame:0000000000011D26                 db  18h
.eh_frame:0000000000011D27                 db  42h ; B
.eh_frame:0000000000011D28                 db  0Eh
.eh_frame:0000000000011D29                 db  10h
.eh_frame:0000000000011D2A                 db  42h ; B
.eh_frame:0000000000011D2B                 db  0Eh
.eh_frame:0000000000011D2C                 db    8
.eh_frame:0000000000011D2D                 db  45h ; E
.eh_frame:0000000000011D2E                 db  0Bh
.eh_frame:0000000000011D2F                 db    0
.eh_frame:0000000000011D30                 db  28h ; (
.eh_frame:0000000000011D31                 db    0
.eh_frame:0000000000011D32                 db    0
.eh_frame:0000000000011D33                 db    0
.eh_frame:0000000000011D34                 db  0Ch
.eh_frame:0000000000011D35                 db    9
.eh_frame:0000000000011D36                 db    0
.eh_frame:0000000000011D37                 db    0
.eh_frame:0000000000011D38                 db 0C8h
.eh_frame:0000000000011D39                 db  4Dh ; M
.eh_frame:0000000000011D3A                 db 0FFh
.eh_frame:0000000000011D3B                 db 0FFh
.eh_frame:0000000000011D3C                 db  90h
.eh_frame:0000000000011D3D                 db    0
.eh_frame:0000000000011D3E                 db    0
.eh_frame:0000000000011D3F                 db    0
.eh_frame:0000000000011D40                 db    0
.eh_frame:0000000000011D41                 db  42h ; B
.eh_frame:0000000000011D42                 db  0Eh
.eh_frame:0000000000011D43                 db  10h
.eh_frame:0000000000011D44                 db  8Ch
.eh_frame:0000000000011D45                 db    2
.eh_frame:0000000000011D46                 db  41h ; A
.eh_frame:0000000000011D47                 db  0Eh
.eh_frame:0000000000011D48                 db  18h
.eh_frame:0000000000011D49                 db  86h
.eh_frame:0000000000011D4A                 db    3
.eh_frame:0000000000011D4B                 db  44h ; D
.eh_frame:0000000000011D4C                 db  0Eh
.eh_frame:0000000000011D4D                 db  20h
.eh_frame:0000000000011D4E                 db  83h
.eh_frame:0000000000011D4F                 db    4
.eh_frame:0000000000011D50                 db    2
.eh_frame:0000000000011D51                 db  85h
.eh_frame:0000000000011D52                 db  0Eh
.eh_frame:0000000000011D53                 db  18h
.eh_frame:0000000000011D54                 db  41h ; A
.eh_frame:0000000000011D55                 db  0Eh
.eh_frame:0000000000011D56                 db  10h
.eh_frame:0000000000011D57                 db  42h ; B
.eh_frame:0000000000011D58                 db  0Eh
.eh_frame:0000000000011D59                 db    8
.eh_frame:0000000000011D5A                 db    0
.eh_frame:0000000000011D5B                 db    0
.eh_frame:0000000000011D5C                 db  28h ; (
.eh_frame:0000000000011D5D                 db    0
.eh_frame:0000000000011D5E                 db    0
.eh_frame:0000000000011D5F                 db    0
.eh_frame:0000000000011D60                 db  38h ; 8
.eh_frame:0000000000011D61                 db    9
.eh_frame:0000000000011D62                 db    0
.eh_frame:0000000000011D63                 db    0
.eh_frame:0000000000011D64                 db  2Ch ; ,
.eh_frame:0000000000011D65                 db  4Eh ; N
.eh_frame:0000000000011D66                 db 0FFh
.eh_frame:0000000000011D67                 db 0FFh
.eh_frame:0000000000011D68                 db 0D6h
.eh_frame:0000000000011D69                 db    0
.eh_frame:0000000000011D6A                 db    0
.eh_frame:0000000000011D6B                 db    0
.eh_frame:0000000000011D6C                 db    0
.eh_frame:0000000000011D6D                 db  42h ; B
.eh_frame:0000000000011D6E                 db  0Eh
.eh_frame:0000000000011D6F                 db  10h
.eh_frame:0000000000011D70                 db  8Ch
.eh_frame:0000000000011D71                 db    2
.eh_frame:0000000000011D72                 db  41h ; A
.eh_frame:0000000000011D73                 db  0Eh
.eh_frame:0000000000011D74                 db  18h
.eh_frame:0000000000011D75                 db  86h
.eh_frame:0000000000011D76                 db    3
.eh_frame:0000000000011D77                 db  44h ; D
.eh_frame:0000000000011D78                 db  0Eh
.eh_frame:0000000000011D79                 db  20h
.eh_frame:0000000000011D7A                 db  83h
.eh_frame:0000000000011D7B                 db    4
.eh_frame:0000000000011D7C                 db    2
.eh_frame:0000000000011D7D                 db 0C4h
.eh_frame:0000000000011D7E                 db  0Eh
.eh_frame:0000000000011D7F                 db  18h
.eh_frame:0000000000011D80                 db  44h ; D
.eh_frame:0000000000011D81                 db  0Eh
.eh_frame:0000000000011D82                 db  10h
.eh_frame:0000000000011D83                 db  42h ; B
.eh_frame:0000000000011D84                 db  0Eh
.eh_frame:0000000000011D85                 db    8
.eh_frame:0000000000011D86                 db    0
.eh_frame:0000000000011D87                 db    0
.eh_frame:0000000000011D88                 db  34h ; 4
.eh_frame:0000000000011D89                 db    0
.eh_frame:0000000000011D8A                 db    0
.eh_frame:0000000000011D8B                 db    0
.eh_frame:0000000000011D8C                 db  64h ; d
.eh_frame:0000000000011D8D                 db    9
.eh_frame:0000000000011D8E                 db    0
.eh_frame:0000000000011D8F                 db    0
.eh_frame:0000000000011D90                 db 0E0h
.eh_frame:0000000000011D91                 db  4Eh ; N
.eh_frame:0000000000011D92                 db 0FFh
.eh_frame:0000000000011D93                 db 0FFh
.eh_frame:0000000000011D94                 db  3Eh ; >
.eh_frame:0000000000011D95                 db    2
.eh_frame:0000000000011D96                 db    0
.eh_frame:0000000000011D97                 db    0
.eh_frame:0000000000011D98                 db    0
.eh_frame:0000000000011D99                 db  42h ; B
.eh_frame:0000000000011D9A                 db  0Eh
.eh_frame:0000000000011D9B                 db  10h
.eh_frame:0000000000011D9C                 db  8Ch
.eh_frame:0000000000011D9D                 db    2
.eh_frame:0000000000011D9E                 db  41h ; A
.eh_frame:0000000000011D9F                 db  0Eh
.eh_frame:0000000000011DA0                 db  18h
.eh_frame:0000000000011DA1                 db  86h
.eh_frame:0000000000011DA2                 db    3
.eh_frame:0000000000011DA3                 db  44h ; D
.eh_frame:0000000000011DA4                 db  0Eh
.eh_frame:0000000000011DA5                 db  20h
.eh_frame:0000000000011DA6                 db  83h
.eh_frame:0000000000011DA7                 db    4
.eh_frame:0000000000011DA8                 db  44h ; D
.eh_frame:0000000000011DA9                 db  0Eh
.eh_frame:0000000000011DAA                 db  80h
.eh_frame:0000000000011DAB                 db    1
.eh_frame:0000000000011DAC                 db    3
.eh_frame:0000000000011DAD                 db  91h
.eh_frame:0000000000011DAE                 db    1
.eh_frame:0000000000011DAF                 db  0Ah
.eh_frame:0000000000011DB0                 db  0Eh
.eh_frame:0000000000011DB1                 db  20h
.eh_frame:0000000000011DB2                 db  41h ; A
.eh_frame:0000000000011DB3                 db  0Eh
.eh_frame:0000000000011DB4                 db  18h
.eh_frame:0000000000011DB5                 db  41h ; A
.eh_frame:0000000000011DB6                 db  0Eh
.eh_frame:0000000000011DB7                 db  10h
.eh_frame:0000000000011DB8                 db  42h ; B
.eh_frame:0000000000011DB9                 db  0Eh
.eh_frame:0000000000011DBA                 db    8
.eh_frame:0000000000011DBB                 db  48h ; H
.eh_frame:0000000000011DBC                 db  0Bh
.eh_frame:0000000000011DBD                 db    0
.eh_frame:0000000000011DBE                 db    0
.eh_frame:0000000000011DBF                 db    0
.eh_frame:0000000000011DC0                 db  38h ; 8
.eh_frame:0000000000011DC1                 db    0
.eh_frame:0000000000011DC2                 db    0
.eh_frame:0000000000011DC3                 db    0
.eh_frame:0000000000011DC4                 db  9Ch
.eh_frame:0000000000011DC5                 db    9
.eh_frame:0000000000011DC6                 db    0
.eh_frame:0000000000011DC7                 db    0
.eh_frame:0000000000011DC8                 db 0E8h
.eh_frame:0000000000011DC9                 db  50h ; P
.eh_frame:0000000000011DCA                 db 0FFh
.eh_frame:0000000000011DCB                 db 0FFh
.eh_frame:0000000000011DCC                 db  84h
.eh_frame:0000000000011DCD                 db    2
.eh_frame:0000000000011DCE                 db    0
.eh_frame:0000000000011DCF                 db    0
.eh_frame:0000000000011DD0                 db    0
.eh_frame:0000000000011DD1                 db  42h ; B
.eh_frame:0000000000011DD2                 db  0Eh
.eh_frame:0000000000011DD3                 db  10h
.eh_frame:0000000000011DD4                 db  8Dh
.eh_frame:0000000000011DD5                 db    2
.eh_frame:0000000000011DD6                 db  42h ; B
.eh_frame:0000000000011DD7                 db  0Eh
.eh_frame:0000000000011DD8                 db  18h
.eh_frame:0000000000011DD9                 db  8Ch
.eh_frame:0000000000011DDA                 db    3
.eh_frame:0000000000011DDB                 db  41h ; A
.eh_frame:0000000000011DDC                 db  0Eh
.eh_frame:0000000000011DDD                 db  20h
.eh_frame:0000000000011DDE                 db  86h
.eh_frame:0000000000011DDF                 db    4
.eh_frame:0000000000011DE0                 db  41h ; A
.eh_frame:0000000000011DE1                 db  0Eh
.eh_frame:0000000000011DE2                 db  28h ; (
.eh_frame:0000000000011DE3                 db  83h
.eh_frame:0000000000011DE4                 db    5
.eh_frame:0000000000011DE5                 db  44h ; D
.eh_frame:0000000000011DE6                 db  0Eh
.eh_frame:0000000000011DE7                 db  40h ; @
.eh_frame:0000000000011DE8                 db    2
.eh_frame:0000000000011DE9                 db  5Ah ; Z
.eh_frame:0000000000011DEA                 db  0Ah
.eh_frame:0000000000011DEB                 db  0Eh
.eh_frame:0000000000011DEC                 db  28h ; (
.eh_frame:0000000000011DED                 db  41h ; A
.eh_frame:0000000000011DEE                 db  0Eh
.eh_frame:0000000000011DEF                 db  20h
.eh_frame:0000000000011DF0                 db  41h ; A
.eh_frame:0000000000011DF1                 db  0Eh
.eh_frame:0000000000011DF2                 db  18h
.eh_frame:0000000000011DF3                 db  42h ; B
.eh_frame:0000000000011DF4                 db  0Eh
.eh_frame:0000000000011DF5                 db  10h
.eh_frame:0000000000011DF6                 db  42h ; B
.eh_frame:0000000000011DF7                 db  0Eh
.eh_frame:0000000000011DF8                 db    8
.eh_frame:0000000000011DF9                 db  46h ; F
.eh_frame:0000000000011DFA                 db  0Bh
.eh_frame:0000000000011DFB                 db    0
.eh_frame:0000000000011DFC                 db  20h
.eh_frame:0000000000011DFD                 db    0
.eh_frame:0000000000011DFE                 db    0
.eh_frame:0000000000011DFF                 db    0
.eh_frame:0000000000011E00                 db 0D8h
.eh_frame:0000000000011E01                 db    9
.eh_frame:0000000000011E02                 db    0
.eh_frame:0000000000011E03                 db    0
.eh_frame:0000000000011E04                 db  3Ch ; <
.eh_frame:0000000000011E05                 db  53h ; S
.eh_frame:0000000000011E06                 db 0FFh
.eh_frame:0000000000011E07                 db 0FFh
.eh_frame:0000000000011E08                 db  59h ; Y
.eh_frame:0000000000011E09                 db    0
.eh_frame:0000000000011E0A                 db    0
.eh_frame:0000000000011E0B                 db    0
.eh_frame:0000000000011E0C                 db    0
.eh_frame:0000000000011E0D                 db  41h ; A
.eh_frame:0000000000011E0E                 db  0Eh
.eh_frame:0000000000011E0F                 db  10h
.eh_frame:0000000000011E10                 db  83h
.eh_frame:0000000000011E11                 db    2
.eh_frame:0000000000011E12                 db  47h ; G
.eh_frame:0000000000011E13                 db  0Eh
.eh_frame:0000000000011E14                 db  20h
.eh_frame:0000000000011E15                 db  7Ch ; |
.eh_frame:0000000000011E16                 db  0Ah
.eh_frame:0000000000011E17                 db  0Eh
.eh_frame:0000000000011E18                 db  10h
.eh_frame:0000000000011E19                 db  41h ; A
.eh_frame:0000000000011E1A                 db  0Eh
.eh_frame:0000000000011E1B                 db    8
.eh_frame:0000000000011E1C                 db  4Bh ; K
.eh_frame:0000000000011E1D                 db  0Bh
.eh_frame:0000000000011E1E                 db    0
.eh_frame:0000000000011E1F                 db    0
.eh_frame:0000000000011E20                 db  34h ; 4
.eh_frame:0000000000011E21                 db    0
.eh_frame:0000000000011E22                 db    0
.eh_frame:0000000000011E23                 db    0
.eh_frame:0000000000011E24                 db 0FCh
.eh_frame:0000000000011E25                 db    9
.eh_frame:0000000000011E26                 db    0
.eh_frame:0000000000011E27                 db    0
.eh_frame:0000000000011E28                 db  78h ; x
.eh_frame:0000000000011E29                 db  53h ; S
.eh_frame:0000000000011E2A                 db 0FFh
.eh_frame:0000000000011E2B                 db 0FFh
.eh_frame:0000000000011E2C                 db    3
.eh_frame:0000000000011E2D                 db    2
.eh_frame:0000000000011E2E                 db    0
.eh_frame:0000000000011E2F                 db    0
.eh_frame:0000000000011E30                 db    0
.eh_frame:0000000000011E31                 db  42h ; B
.eh_frame:0000000000011E32                 db  0Eh
.eh_frame:0000000000011E33                 db  10h
.eh_frame:0000000000011E34                 db  8Ch
.eh_frame:0000000000011E35                 db    2
.eh_frame:0000000000011E36                 db  41h ; A
.eh_frame:0000000000011E37                 db  0Eh
.eh_frame:0000000000011E38                 db  18h
.eh_frame:0000000000011E39                 db  86h
.eh_frame:0000000000011E3A                 db    3
.eh_frame:0000000000011E3B                 db  46h ; F
.eh_frame:0000000000011E3C                 db  0Eh
.eh_frame:0000000000011E3D                 db  20h
.eh_frame:0000000000011E3E                 db  83h
.eh_frame:0000000000011E3F                 db    4
.eh_frame:0000000000011E40                 db  47h ; G
.eh_frame:0000000000011E41                 db  0Eh
.eh_frame:0000000000011E42                 db  30h ; 0
.eh_frame:0000000000011E43                 db    2
.eh_frame:0000000000011E44                 db  4Ah ; J
.eh_frame:0000000000011E45                 db  0Ah
.eh_frame:0000000000011E46                 db  0Eh
.eh_frame:0000000000011E47                 db  20h
.eh_frame:0000000000011E48                 db  41h ; A
.eh_frame:0000000000011E49                 db  0Eh
.eh_frame:0000000000011E4A                 db  18h
.eh_frame:0000000000011E4B                 db  41h ; A
.eh_frame:0000000000011E4C                 db  0Eh
.eh_frame:0000000000011E4D                 db  10h
.eh_frame:0000000000011E4E                 db  42h ; B
.eh_frame:0000000000011E4F                 db  0Eh
.eh_frame:0000000000011E50                 db    8
.eh_frame:0000000000011E51                 db  42h ; B
.eh_frame:0000000000011E52                 db  0Bh
.eh_frame:0000000000011E53                 db    0
.eh_frame:0000000000011E54                 db    0
.eh_frame:0000000000011E55                 db    0
.eh_frame:0000000000011E56                 db    0
.eh_frame:0000000000011E57                 db    0
.eh_frame:0000000000011E58                 db  24h ; $
.eh_frame:0000000000011E59                 db    0
.eh_frame:0000000000011E5A                 db    0
.eh_frame:0000000000011E5B                 db    0
.eh_frame:0000000000011E5C                 db  34h ; 4
.eh_frame:0000000000011E5D                 db  0Ah
.eh_frame:0000000000011E5E                 db    0
.eh_frame:0000000000011E5F                 db    0
.eh_frame:0000000000011E60                 db  50h ; P
.eh_frame:0000000000011E61                 db  55h ; U
.eh_frame:0000000000011E62                 db 0FFh
.eh_frame:0000000000011E63                 db 0FFh
.eh_frame:0000000000011E64                 db  27h ; '
.eh_frame:0000000000011E65                 db    0
.eh_frame:0000000000011E66                 db    0
.eh_frame:0000000000011E67                 db    0
.eh_frame:0000000000011E68                 db    0
.eh_frame:0000000000011E69                 db  41h ; A
.eh_frame:0000000000011E6A                 db  0Eh
.eh_frame:0000000000011E6B                 db  10h
.eh_frame:0000000000011E6C                 db  86h
.eh_frame:0000000000011E6D                 db    2
.eh_frame:0000000000011E6E                 db  41h ; A
.eh_frame:0000000000011E6F                 db  0Eh
.eh_frame:0000000000011E70                 db  18h
.eh_frame:0000000000011E71                 db  83h
.eh_frame:0000000000011E72                 db    3
.eh_frame:0000000000011E73                 db  4Ah ; J
.eh_frame:0000000000011E74                 db  0Eh
.eh_frame:0000000000011E75                 db  20h
.eh_frame:0000000000011E76                 db  52h ; R
.eh_frame:0000000000011E77                 db  0Eh
.eh_frame:0000000000011E78                 db  18h
.eh_frame:0000000000011E79                 db  44h ; D
.eh_frame:0000000000011E7A                 db  0Eh
.eh_frame:0000000000011E7B                 db  10h
.eh_frame:0000000000011E7C                 db  41h ; A
.eh_frame:0000000000011E7D                 db  0Eh
.eh_frame:0000000000011E7E                 db    8
.eh_frame:0000000000011E7F                 db    0
.eh_frame:0000000000011E80                 db  10h
.eh_frame:0000000000011E81                 db    0
.eh_frame:0000000000011E82                 db    0
.eh_frame:0000000000011E83                 db    0
.eh_frame:0000000000011E84                 db  5Ch ; \
.eh_frame:0000000000011E85                 db  0Ah
.eh_frame:0000000000011E86                 db    0
.eh_frame:0000000000011E87                 db    0
.eh_frame:0000000000011E88                 db  58h ; X
.eh_frame:0000000000011E89                 db  55h ; U
.eh_frame:0000000000011E8A                 db 0FFh
.eh_frame:0000000000011E8B                 db 0FFh
.eh_frame:0000000000011E8C                 db  0Dh
.eh_frame:0000000000011E8D                 db    0
.eh_frame:0000000000011E8E                 db    0
.eh_frame:0000000000011E8F                 db    0
.eh_frame:0000000000011E90                 db    0
.eh_frame:0000000000011E91                 db    0
.eh_frame:0000000000011E92                 db    0
.eh_frame:0000000000011E93                 db    0
.eh_frame:0000000000011E94                 db  14h
.eh_frame:0000000000011E95                 db    0
.eh_frame:0000000000011E96                 db    0
.eh_frame:0000000000011E97                 db    0
.eh_frame:0000000000011E98                 db  70h ; p
.eh_frame:0000000000011E99                 db  0Ah
.eh_frame:0000000000011E9A                 db    0
.eh_frame:0000000000011E9B                 db    0
.eh_frame:0000000000011E9C                 db  54h ; T
.eh_frame:0000000000011E9D                 db  55h ; U
.eh_frame:0000000000011E9E                 db 0FFh
.eh_frame:0000000000011E9F                 db 0FFh
.eh_frame:0000000000011EA0                 db  2Eh ; .
.eh_frame:0000000000011EA1                 db    0
.eh_frame:0000000000011EA2                 db    0
.eh_frame:0000000000011EA3                 db    0
.eh_frame:0000000000011EA4                 db    0
.eh_frame:0000000000011EA5                 db  5Eh ; ^
.eh_frame:0000000000011EA6                 db  0Eh
.eh_frame:0000000000011EA7                 db  10h
.eh_frame:0000000000011EA8                 db  4Fh ; O
.eh_frame:0000000000011EA9                 db  0Eh
.eh_frame:0000000000011EAA                 db    8
.eh_frame:0000000000011EAB                 db    0
.eh_frame:0000000000011EAC                 db  14h
.eh_frame:0000000000011EAD                 db    0
.eh_frame:0000000000011EAE                 db    0
.eh_frame:0000000000011EAF                 db    0
.eh_frame:0000000000011EB0                 db  88h
.eh_frame:0000000000011EB1                 db  0Ah
.eh_frame:0000000000011EB2                 db    0
.eh_frame:0000000000011EB3                 db    0
.eh_frame:0000000000011EB4                 db  6Ch ; l
.eh_frame:0000000000011EB5                 db  55h ; U
.eh_frame:0000000000011EB6                 db 0FFh
.eh_frame:0000000000011EB7                 db 0FFh
.eh_frame:0000000000011EB8                 db  33h ; 3
.eh_frame:0000000000011EB9                 db    0
.eh_frame:0000000000011EBA                 db    0
.eh_frame:0000000000011EBB                 db    0
.eh_frame:0000000000011EBC                 db    0
.eh_frame:0000000000011EBD                 db  5Eh ; ^
.eh_frame:0000000000011EBE                 db  0Eh
.eh_frame:0000000000011EBF                 db  10h
.eh_frame:0000000000011EC0                 db  54h ; T
.eh_frame:0000000000011EC1                 db  0Eh
.eh_frame:0000000000011EC2                 db    8
.eh_frame:0000000000011EC3                 db    0
.eh_frame:0000000000011EC4                 db  18h
.eh_frame:0000000000011EC5                 db    0
.eh_frame:0000000000011EC6                 db    0
.eh_frame:0000000000011EC7                 db    0
.eh_frame:0000000000011EC8                 db 0A0h
.eh_frame:0000000000011EC9                 db  0Ah
.eh_frame:0000000000011ECA                 db    0
.eh_frame:0000000000011ECB                 db    0
.eh_frame:0000000000011ECC                 db  94h
.eh_frame:0000000000011ECD                 db  55h ; U
.eh_frame:0000000000011ECE                 db 0FFh
.eh_frame:0000000000011ECF                 db 0FFh
.eh_frame:0000000000011ED0                 db  15h
.eh_frame:0000000000011ED1                 db    0
.eh_frame:0000000000011ED2                 db    0
.eh_frame:0000000000011ED3                 db    0
.eh_frame:0000000000011ED4                 db    0
.eh_frame:0000000000011ED5                 db  41h ; A
.eh_frame:0000000000011ED6                 db  0Eh
.eh_frame:0000000000011ED7                 db  10h
.eh_frame:0000000000011ED8                 db  83h
.eh_frame:0000000000011ED9                 db    2
.eh_frame:0000000000011EDA                 db  4Fh ; O
.eh_frame:0000000000011EDB                 db  0Eh
.eh_frame:0000000000011EDC                 db    8
.eh_frame:0000000000011EDD                 db    0
.eh_frame:0000000000011EDE                 db    0
.eh_frame:0000000000011EDF                 db    0
.eh_frame:0000000000011EE0                 db  10h
.eh_frame:0000000000011EE1                 db    0
.eh_frame:0000000000011EE2                 db    0
.eh_frame:0000000000011EE3                 db    0
.eh_frame:0000000000011EE4                 db 0BCh
.eh_frame:0000000000011EE5                 db  0Ah
.eh_frame:0000000000011EE6                 db    0
.eh_frame:0000000000011EE7                 db    0
.eh_frame:0000000000011EE8                 db  98h
.eh_frame:0000000000011EE9                 db  55h ; U
.eh_frame:0000000000011EEA                 db 0FFh
.eh_frame:0000000000011EEB                 db 0FFh
.eh_frame:0000000000011EEC                 db 0C7h
.eh_frame:0000000000011EED                 db    0
.eh_frame:0000000000011EEE                 db    0
.eh_frame:0000000000011EEF                 db    0
.eh_frame:0000000000011EF0                 db    0
.eh_frame:0000000000011EF1                 db    0
.eh_frame:0000000000011EF2                 db    0
.eh_frame:0000000000011EF3                 db    0
.eh_frame:0000000000011EF4                 db 0A4h
.eh_frame:0000000000011EF5                 db    0
.eh_frame:0000000000011EF6                 db    0
.eh_frame:0000000000011EF7                 db    0
.eh_frame:0000000000011EF8                 db 0D0h
.eh_frame:0000000000011EF9                 db  0Ah
.eh_frame:0000000000011EFA                 db    0
.eh_frame:0000000000011EFB                 db    0
.eh_frame:0000000000011EFC                 db  54h ; T
.eh_frame:0000000000011EFD                 db  56h ; V
.eh_frame:0000000000011EFE                 db 0FFh
.eh_frame:0000000000011EFF                 db 0FFh
.eh_frame:0000000000011F00                 db    7
.eh_frame:0000000000011F01                 db  0Ah
.eh_frame:0000000000011F02                 db    0
.eh_frame:0000000000011F03                 db    0
.eh_frame:0000000000011F04                 db    0
.eh_frame:0000000000011F05                 db  42h ; B
.eh_frame:0000000000011F06                 db  0Eh
.eh_frame:0000000000011F07                 db  10h
.eh_frame:0000000000011F08                 db  8Fh
.eh_frame:0000000000011F09                 db    2
.eh_frame:0000000000011F0A                 db  42h ; B
.eh_frame:0000000000011F0B                 db  0Eh
.eh_frame:0000000000011F0C                 db  18h
.eh_frame:0000000000011F0D                 db  8Eh
.eh_frame:0000000000011F0E                 db    3
.eh_frame:0000000000011F0F                 db  44h ; D
.eh_frame:0000000000011F10                 db  0Eh
.eh_frame:0000000000011F11                 db  20h
.eh_frame:0000000000011F12                 db  8Dh
.eh_frame:0000000000011F13                 db    4
.eh_frame:0000000000011F14                 db  42h ; B
.eh_frame:0000000000011F15                 db  0Eh
.eh_frame:0000000000011F16                 db  28h ; (
.eh_frame:0000000000011F17                 db  8Ch
.eh_frame:0000000000011F18                 db    5
.eh_frame:0000000000011F19                 db  44h ; D
.eh_frame:0000000000011F1A                 db  0Eh
.eh_frame:0000000000011F1B                 db  30h ; 0
.eh_frame:0000000000011F1C                 db  86h
.eh_frame:0000000000011F1D                 db    6
.eh_frame:0000000000011F1E                 db  41h ; A
.eh_frame:0000000000011F1F                 db  0Eh
.eh_frame:0000000000011F20                 db  38h ; 8
.eh_frame:0000000000011F21                 db  83h
.eh_frame:0000000000011F22                 db    7
.eh_frame:0000000000011F23                 db  54h ; T
.eh_frame:0000000000011F24                 db  0Eh
.eh_frame:0000000000011F25                 db 0D0h
.eh_frame:0000000000011F26                 db    1
.eh_frame:0000000000011F27                 db    3
.eh_frame:0000000000011F28                 db  7Eh ; ~
.eh_frame:0000000000011F29                 db    1
.eh_frame:0000000000011F2A                 db  0Eh
.eh_frame:0000000000011F2B                 db 0E0h
.eh_frame:0000000000011F2C                 db    1
.eh_frame:0000000000011F2D                 db  6Eh ; n
.eh_frame:0000000000011F2E                 db  0Eh
.eh_frame:0000000000011F2F                 db 0D8h
.eh_frame:0000000000011F30                 db    1
.eh_frame:0000000000011F31                 db  41h ; A
.eh_frame:0000000000011F32                 db  0Eh
.eh_frame:0000000000011F33                 db 0D0h
.eh_frame:0000000000011F34                 db    1
.eh_frame:0000000000011F35                 db    3
.eh_frame:0000000000011F36                 db  40h ; @
.eh_frame:0000000000011F37                 db    1
.eh_frame:0000000000011F38                 db  0Eh
.eh_frame:0000000000011F39                 db 0E0h
.eh_frame:0000000000011F3A                 db    1
.eh_frame:0000000000011F3B                 db  75h ; u
.eh_frame:0000000000011F3C                 db  0Eh
.eh_frame:0000000000011F3D                 db 0D8h
.eh_frame:0000000000011F3E                 db    1
.eh_frame:0000000000011F3F                 db  41h ; A
.eh_frame:0000000000011F40                 db  0Eh
.eh_frame:0000000000011F41                 db 0D0h
.eh_frame:0000000000011F42                 db    1
.eh_frame:0000000000011F43                 db    2
.eh_frame:0000000000011F44                 db 0EAh
.eh_frame:0000000000011F45                 db  0Ah
.eh_frame:0000000000011F46                 db  0Eh
.eh_frame:0000000000011F47                 db  38h ; 8
.eh_frame:0000000000011F48                 db  41h ; A
.eh_frame:0000000000011F49                 db  0Eh
.eh_frame:0000000000011F4A                 db  30h ; 0
.eh_frame:0000000000011F4B                 db  41h ; A
.eh_frame:0000000000011F4C                 db  0Eh
.eh_frame:0000000000011F4D                 db  28h ; (
.eh_frame:0000000000011F4E                 db  42h ; B
.eh_frame:0000000000011F4F                 db  0Eh
.eh_frame:0000000000011F50                 db  20h
.eh_frame:0000000000011F51                 db  42h ; B
.eh_frame:0000000000011F52                 db  0Eh
.eh_frame:0000000000011F53                 db  18h
.eh_frame:0000000000011F54                 db  42h ; B
.eh_frame:0000000000011F55                 db  0Eh
.eh_frame:0000000000011F56                 db  10h
.eh_frame:0000000000011F57                 db  42h ; B
.eh_frame:0000000000011F58                 db  0Eh
.eh_frame:0000000000011F59                 db    8
.eh_frame:0000000000011F5A                 db  46h ; F
.eh_frame:0000000000011F5B                 db  0Bh
.eh_frame:0000000000011F5C                 db    3
.eh_frame:0000000000011F5D                 db  2Ch ; ,
.eh_frame:0000000000011F5E                 db    1
.eh_frame:0000000000011F5F                 db  0Eh
.eh_frame:0000000000011F60                 db 0E0h
.eh_frame:0000000000011F61                 db    1
.eh_frame:0000000000011F62                 db  52h ; R
.eh_frame:0000000000011F63                 db  0Eh
.eh_frame:0000000000011F64                 db 0D8h
.eh_frame:0000000000011F65                 db    1
.eh_frame:0000000000011F66                 db  41h ; A
.eh_frame:0000000000011F67                 db  0Eh
.eh_frame:0000000000011F68                 db 0D0h
.eh_frame:0000000000011F69                 db    1
.eh_frame:0000000000011F6A                 db  55h ; U
.eh_frame:0000000000011F6B                 db  0Eh
.eh_frame:0000000000011F6C                 db 0E0h
.eh_frame:0000000000011F6D                 db    1
.eh_frame:0000000000011F6E                 db  4Dh ; M
.eh_frame:0000000000011F6F                 db  0Eh
.eh_frame:0000000000011F70                 db 0D8h
.eh_frame:0000000000011F71                 db    1
.eh_frame:0000000000011F72                 db  42h ; B
.eh_frame:0000000000011F73                 db  0Eh
.eh_frame:0000000000011F74                 db 0D0h
.eh_frame:0000000000011F75                 db    1
.eh_frame:0000000000011F76                 db    3
.eh_frame:0000000000011F77                 db  51h ; Q
.eh_frame:0000000000011F78                 db    1
.eh_frame:0000000000011F79                 db  0Eh
.eh_frame:0000000000011F7A                 db 0E0h
.eh_frame:0000000000011F7B                 db    1
.eh_frame:0000000000011F7C                 db  77h ; w
.eh_frame:0000000000011F7D                 db  0Eh
.eh_frame:0000000000011F7E                 db 0D8h
.eh_frame:0000000000011F7F                 db    1
.eh_frame:0000000000011F80                 db  41h ; A
.eh_frame:0000000000011F81                 db  0Eh
.eh_frame:0000000000011F82                 db 0D0h
.eh_frame:0000000000011F83                 db    1
.eh_frame:0000000000011F84                 db  5Dh ; ]
.eh_frame:0000000000011F85                 db  0Eh
.eh_frame:0000000000011F86                 db 0E0h
.eh_frame:0000000000011F87                 db    1
.eh_frame:0000000000011F88                 db  71h ; q
.eh_frame:0000000000011F89                 db  0Eh
.eh_frame:0000000000011F8A                 db 0D8h
.eh_frame:0000000000011F8B                 db    1
.eh_frame:0000000000011F8C                 db  45h ; E
.eh_frame:0000000000011F8D                 db  0Eh
.eh_frame:0000000000011F8E                 db 0D0h
.eh_frame:0000000000011F8F                 db    1
.eh_frame:0000000000011F90                 db  63h ; c
.eh_frame:0000000000011F91                 db  0Eh
.eh_frame:0000000000011F92                 db 0E0h
.eh_frame:0000000000011F93                 db    1
.eh_frame:0000000000011F94                 db  4Ch ; L
.eh_frame:0000000000011F95                 db  0Eh
.eh_frame:0000000000011F96                 db 0D8h
.eh_frame:0000000000011F97                 db    1
.eh_frame:0000000000011F98                 db  42h ; B
.eh_frame:0000000000011F99                 db  0Eh
.eh_frame:0000000000011F9A                 db 0D0h
.eh_frame:0000000000011F9B                 db    1
.eh_frame:0000000000011F9C                 db  38h ; 8
.eh_frame:0000000000011F9D                 db    0
.eh_frame:0000000000011F9E                 db    0
.eh_frame:0000000000011F9F                 db    0
.eh_frame:0000000000011FA0                 db  78h ; x
.eh_frame:0000000000011FA1                 db  0Bh
.eh_frame:0000000000011FA2                 db    0
.eh_frame:0000000000011FA3                 db    0
.eh_frame:0000000000011FA4                 db 0BCh
.eh_frame:0000000000011FA5                 db  5Fh ; _
.eh_frame:0000000000011FA6                 db 0FFh
.eh_frame:0000000000011FA7                 db 0FFh
.eh_frame:0000000000011FA8                 db 0E6h
.eh_frame:0000000000011FA9                 db    1
.eh_frame:0000000000011FAA                 db    0
.eh_frame:0000000000011FAB                 db    0
.eh_frame:0000000000011FAC                 db    0
.eh_frame:0000000000011FAD                 db  42h ; B
.eh_frame:0000000000011FAE                 db  0Eh
.eh_frame:0000000000011FAF                 db  10h
.eh_frame:0000000000011FB0                 db  8Dh
.eh_frame:0000000000011FB1                 db    2
.eh_frame:0000000000011FB2                 db  42h ; B
.eh_frame:0000000000011FB3                 db  0Eh
.eh_frame:0000000000011FB4                 db  18h
.eh_frame:0000000000011FB5                 db  8Ch
.eh_frame:0000000000011FB6                 db    3
.eh_frame:0000000000011FB7                 db  44h ; D
.eh_frame:0000000000011FB8                 db  0Eh
.eh_frame:0000000000011FB9                 db  20h
.eh_frame:0000000000011FBA                 db  86h
.eh_frame:0000000000011FBB                 db    4
.eh_frame:0000000000011FBC                 db  41h ; A
.eh_frame:0000000000011FBD                 db  0Eh
.eh_frame:0000000000011FBE                 db  28h ; (
.eh_frame:0000000000011FBF                 db  83h
.eh_frame:0000000000011FC0                 db    5
.eh_frame:0000000000011FC1                 db  4Ah ; J
.eh_frame:0000000000011FC2                 db  0Eh
.eh_frame:0000000000011FC3                 db  40h ; @
.eh_frame:0000000000011FC4                 db    2
.eh_frame:0000000000011FC5                 db  7Ah ; z
.eh_frame:0000000000011FC6                 db  0Ah
.eh_frame:0000000000011FC7                 db  0Eh
.eh_frame:0000000000011FC8                 db  28h ; (
.eh_frame:0000000000011FC9                 db  41h ; A
.eh_frame:0000000000011FCA                 db  0Eh
.eh_frame:0000000000011FCB                 db  20h
.eh_frame:0000000000011FCC                 db  41h ; A
.eh_frame:0000000000011FCD                 db  0Eh
.eh_frame:0000000000011FCE                 db  18h
.eh_frame:0000000000011FCF                 db  42h ; B
.eh_frame:0000000000011FD0                 db  0Eh
.eh_frame:0000000000011FD1                 db  10h
.eh_frame:0000000000011FD2                 db  42h ; B
.eh_frame:0000000000011FD3                 db  0Eh
.eh_frame:0000000000011FD4                 db    8
.eh_frame:0000000000011FD5                 db  45h ; E
.eh_frame:0000000000011FD6                 db  0Bh
.eh_frame:0000000000011FD7                 db    0
.eh_frame:0000000000011FD8                 db  14h
.eh_frame:0000000000011FD9                 db    0
.eh_frame:0000000000011FDA                 db    0
.eh_frame:0000000000011FDB                 db    0
.eh_frame:0000000000011FDC                 db 0B4h
.eh_frame:0000000000011FDD                 db  0Bh
.eh_frame:0000000000011FDE                 db    0
.eh_frame:0000000000011FDF                 db    0
.eh_frame:0000000000011FE0                 db  70h ; p
.eh_frame:0000000000011FE1                 db  61h ; a
.eh_frame:0000000000011FE2                 db 0FFh
.eh_frame:0000000000011FE3                 db 0FFh
.eh_frame:0000000000011FE4                 db  42h ; B
.eh_frame:0000000000011FE5                 db    0
.eh_frame:0000000000011FE6                 db    0
.eh_frame:0000000000011FE7                 db    0
.eh_frame:0000000000011FE8                 db    0
.eh_frame:0000000000011FE9                 db    0
.eh_frame:0000000000011FEA                 db    0
.eh_frame:0000000000011FEB                 db    0
.eh_frame:0000000000011FEC                 db    0
.eh_frame:0000000000011FED                 db    0
.eh_frame:0000000000011FEE                 db    0
.eh_frame:0000000000011FEF                 db    0
.eh_frame:0000000000011FF0                 db  48h ; H
.eh_frame:0000000000011FF1                 db    0
.eh_frame:0000000000011FF2                 db    0
.eh_frame:0000000000011FF3                 db    0
.eh_frame:0000000000011FF4                 db 0CCh
.eh_frame:0000000000011FF5                 db  0Bh
.eh_frame:0000000000011FF6                 db    0
.eh_frame:0000000000011FF7                 db    0
.eh_frame:0000000000011FF8                 db 0A8h
.eh_frame:0000000000011FF9                 db  61h ; a
.eh_frame:0000000000011FFA                 db 0FFh
.eh_frame:0000000000011FFB                 db 0FFh
.eh_frame:0000000000011FFC                 db 0C4h
.eh_frame:0000000000011FFD                 db    3
.eh_frame:0000000000011FFE                 db    0
.eh_frame:0000000000011FFF                 db    0
.eh_frame:0000000000012000                 db    0
.eh_frame:0000000000012001                 db  42h ; B
.eh_frame:0000000000012002                 db  0Eh
.eh_frame:0000000000012003                 db  10h
.eh_frame:0000000000012004                 db  8Fh
.eh_frame:0000000000012005                 db    2
.eh_frame:0000000000012006                 db  42h ; B
.eh_frame:0000000000012007                 db  0Eh
.eh_frame:0000000000012008                 db  18h
.eh_frame:0000000000012009                 db  8Eh
.eh_frame:000000000001200A                 db    3
.eh_frame:000000000001200B                 db  45h ; E
.eh_frame:000000000001200C                 db  0Eh
.eh_frame:000000000001200D                 db  20h
.eh_frame:000000000001200E                 db  8Dh
.eh_frame:000000000001200F                 db    4
.eh_frame:0000000000012010                 db  42h ; B
.eh_frame:0000000000012011                 db  0Eh
.eh_frame:0000000000012012                 db  28h ; (
.eh_frame:0000000000012013                 db  8Ch
.eh_frame:0000000000012014                 db    5
.eh_frame:0000000000012015                 db  44h ; D
.eh_frame:0000000000012016                 db  0Eh
.eh_frame:0000000000012017                 db  30h ; 0
.eh_frame:0000000000012018                 db  86h
.eh_frame:0000000000012019                 db    6
.eh_frame:000000000001201A                 db  41h ; A
.eh_frame:000000000001201B                 db  0Eh
.eh_frame:000000000001201C                 db  38h ; 8
.eh_frame:000000000001201D                 db  83h
.eh_frame:000000000001201E                 db    7
.eh_frame:000000000001201F                 db  4Ah ; J
.eh_frame:0000000000012020                 db  0Eh
.eh_frame:0000000000012021                 db  70h ; p
.eh_frame:0000000000012022                 db    3
.eh_frame:0000000000012023                 db  2Eh ; .
.eh_frame:0000000000012024                 db    1
.eh_frame:0000000000012025                 db  0Ah
.eh_frame:0000000000012026                 db  0Eh
.eh_frame:0000000000012027                 db  38h ; 8
.eh_frame:0000000000012028                 db  44h ; D
.eh_frame:0000000000012029                 db  0Eh
.eh_frame:000000000001202A                 db  30h ; 0
.eh_frame:000000000001202B                 db  41h ; A
.eh_frame:000000000001202C                 db  0Eh
.eh_frame:000000000001202D                 db  28h ; (
.eh_frame:000000000001202E                 db  42h ; B
.eh_frame:000000000001202F                 db  0Eh
.eh_frame:0000000000012030                 db  20h
.eh_frame:0000000000012031                 db  42h ; B
.eh_frame:0000000000012032                 db  0Eh
.eh_frame:0000000000012033                 db  18h
.eh_frame:0000000000012034                 db  42h ; B
.eh_frame:0000000000012035                 db  0Eh
.eh_frame:0000000000012036                 db  10h
.eh_frame:0000000000012037                 db  42h ; B
.eh_frame:0000000000012038                 db  0Eh
.eh_frame:0000000000012039                 db    8
.eh_frame:000000000001203A                 db  4Bh ; K
.eh_frame:000000000001203B                 db  0Bh
.eh_frame:000000000001203C                 db  48h ; H
.eh_frame:000000000001203D                 db    0
.eh_frame:000000000001203E                 db    0
.eh_frame:000000000001203F                 db    0
.eh_frame:0000000000012040                 db  18h
.eh_frame:0000000000012041                 db  0Ch
.eh_frame:0000000000012042                 db    0
.eh_frame:0000000000012043                 db    0
.eh_frame:0000000000012044                 db  2Ch ; ,
.eh_frame:0000000000012045                 db  65h ; e
.eh_frame:0000000000012046                 db 0FFh
.eh_frame:0000000000012047                 db 0FFh
.eh_frame:0000000000012048                 db  9Dh
.eh_frame:0000000000012049                 db    0
.eh_frame:000000000001204A                 db    0
.eh_frame:000000000001204B                 db    0
.eh_frame:000000000001204C                 db    0
.eh_frame:000000000001204D                 db  42h ; B
.eh_frame:000000000001204E                 db  0Eh
.eh_frame:000000000001204F                 db  10h
.eh_frame:0000000000012050                 db  8Fh
.eh_frame:0000000000012051                 db    2
.eh_frame:0000000000012052                 db  42h ; B
.eh_frame:0000000000012053                 db  0Eh
.eh_frame:0000000000012054                 db  18h
.eh_frame:0000000000012055                 db  8Eh
.eh_frame:0000000000012056                 db    3
.eh_frame:0000000000012057                 db  45h ; E
.eh_frame:0000000000012058                 db  0Eh
.eh_frame:0000000000012059                 db  20h
.eh_frame:000000000001205A                 db  8Dh
.eh_frame:000000000001205B                 db    4
.eh_frame:000000000001205C                 db  42h ; B
.eh_frame:000000000001205D                 db  0Eh
.eh_frame:000000000001205E                 db  28h ; (
.eh_frame:000000000001205F                 db  8Ch
.eh_frame:0000000000012060                 db    5
.eh_frame:0000000000012061                 db  44h ; D
.eh_frame:0000000000012062                 db  0Eh
.eh_frame:0000000000012063                 db  30h ; 0
.eh_frame:0000000000012064                 db  86h
.eh_frame:0000000000012065                 db    6
.eh_frame:0000000000012066                 db  41h ; A
.eh_frame:0000000000012067                 db  0Eh
.eh_frame:0000000000012068                 db  38h ; 8
.eh_frame:0000000000012069                 db  83h
.eh_frame:000000000001206A                 db    7
.eh_frame:000000000001206B                 db  47h ; G
.eh_frame:000000000001206C                 db  0Eh
.eh_frame:000000000001206D                 db  50h ; P
.eh_frame:000000000001206E                 db    2
.eh_frame:000000000001206F                 db  59h ; Y
.eh_frame:0000000000012070                 db  0Ah
.eh_frame:0000000000012071                 db  0Eh
.eh_frame:0000000000012072                 db  38h ; 8
.eh_frame:0000000000012073                 db  44h ; D
.eh_frame:0000000000012074                 db  0Eh
.eh_frame:0000000000012075                 db  30h ; 0
.eh_frame:0000000000012076                 db  41h ; A
.eh_frame:0000000000012077                 db  0Eh
.eh_frame:0000000000012078                 db  28h ; (
.eh_frame:0000000000012079                 db  42h ; B
.eh_frame:000000000001207A                 db  0Eh
.eh_frame:000000000001207B                 db  20h
.eh_frame:000000000001207C                 db  42h ; B
.eh_frame:000000000001207D                 db  0Eh
.eh_frame:000000000001207E                 db  18h
.eh_frame:000000000001207F                 db  42h ; B
.eh_frame:0000000000012080                 db  0Eh
.eh_frame:0000000000012081                 db  10h
.eh_frame:0000000000012082                 db  42h ; B
.eh_frame:0000000000012083                 db  0Eh
.eh_frame:0000000000012084                 db    8
.eh_frame:0000000000012085                 db  43h ; C
.eh_frame:0000000000012086                 db  0Bh
.eh_frame:0000000000012087                 db    0
.eh_frame:0000000000012088                 db  48h ; H
.eh_frame:0000000000012089                 db    0
.eh_frame:000000000001208A                 db    0
.eh_frame:000000000001208B                 db    0
.eh_frame:000000000001208C                 db  64h ; d
.eh_frame:000000000001208D                 db  0Ch
.eh_frame:000000000001208E                 db    0
.eh_frame:000000000001208F                 db    0
.eh_frame:0000000000012090                 db  80h
.eh_frame:0000000000012091                 db  65h ; e
.eh_frame:0000000000012092                 db 0FFh
.eh_frame:0000000000012093                 db 0FFh
.eh_frame:0000000000012094                 db 0BFh
.eh_frame:0000000000012095                 db    1
.eh_frame:0000000000012096                 db    0
.eh_frame:0000000000012097                 db    0
.eh_frame:0000000000012098                 db    0
.eh_frame:0000000000012099                 db  42h ; B
.eh_frame:000000000001209A                 db  0Eh
.eh_frame:000000000001209B                 db  10h
.eh_frame:000000000001209C                 db  8Fh
.eh_frame:000000000001209D                 db    2
.eh_frame:000000000001209E                 db  42h ; B
.eh_frame:000000000001209F                 db  0Eh
.eh_frame:00000000000120A0                 db  18h
.eh_frame:00000000000120A1                 db  8Eh
.eh_frame:00000000000120A2                 db    3
.eh_frame:00000000000120A3                 db  42h ; B
.eh_frame:00000000000120A4                 db  0Eh
.eh_frame:00000000000120A5                 db  20h
.eh_frame:00000000000120A6                 db  8Dh
.eh_frame:00000000000120A7                 db    4
.eh_frame:00000000000120A8                 db  42h ; B
.eh_frame:00000000000120A9                 db  0Eh
.eh_frame:00000000000120AA                 db  28h ; (
.eh_frame:00000000000120AB                 db  8Ch
.eh_frame:00000000000120AC                 db    5
.eh_frame:00000000000120AD                 db  45h ; E
.eh_frame:00000000000120AE                 db  0Eh
.eh_frame:00000000000120AF                 db  30h ; 0
.eh_frame:00000000000120B0                 db  86h
.eh_frame:00000000000120B1                 db    6
.eh_frame:00000000000120B2                 db  41h ; A
.eh_frame:00000000000120B3                 db  0Eh
.eh_frame:00000000000120B4                 db  38h ; 8
.eh_frame:00000000000120B5                 db  83h
.eh_frame:00000000000120B6                 db    7
.eh_frame:00000000000120B7                 db  47h ; G
.eh_frame:00000000000120B8                 db  0Eh
.eh_frame:00000000000120B9                 db  70h ; p
.eh_frame:00000000000120BA                 db    3
.eh_frame:00000000000120BB                 db  2Eh ; .
.eh_frame:00000000000120BC                 db    1
.eh_frame:00000000000120BD                 db  0Ah
.eh_frame:00000000000120BE                 db  0Eh
.eh_frame:00000000000120BF                 db  38h ; 8
.eh_frame:00000000000120C0                 db  41h ; A
.eh_frame:00000000000120C1                 db  0Eh
.eh_frame:00000000000120C2                 db  30h ; 0
.eh_frame:00000000000120C3                 db  41h ; A
.eh_frame:00000000000120C4                 db  0Eh
.eh_frame:00000000000120C5                 db  28h ; (
.eh_frame:00000000000120C6                 db  42h ; B
.eh_frame:00000000000120C7                 db  0Eh
.eh_frame:00000000000120C8                 db  20h
.eh_frame:00000000000120C9                 db  42h ; B
.eh_frame:00000000000120CA                 db  0Eh
.eh_frame:00000000000120CB                 db  18h
.eh_frame:00000000000120CC                 db  42h ; B
.eh_frame:00000000000120CD                 db  0Eh
.eh_frame:00000000000120CE                 db  10h
.eh_frame:00000000000120CF                 db  42h ; B
.eh_frame:00000000000120D0                 db  0Eh
.eh_frame:00000000000120D1                 db    8
.eh_frame:00000000000120D2                 db  43h ; C
.eh_frame:00000000000120D3                 db  0Bh
.eh_frame:00000000000120D4                 db  28h ; (
.eh_frame:00000000000120D5                 db    0
.eh_frame:00000000000120D6                 db    0
.eh_frame:00000000000120D7                 db    0
.eh_frame:00000000000120D8                 db 0B0h
.eh_frame:00000000000120D9                 db  0Ch
.eh_frame:00000000000120DA                 db    0
.eh_frame:00000000000120DB                 db    0
.eh_frame:00000000000120DC                 db 0F4h
.eh_frame:00000000000120DD                 db  66h ; f
.eh_frame:00000000000120DE                 db 0FFh
.eh_frame:00000000000120DF                 db 0FFh
.eh_frame:00000000000120E0                 db  23h ; #
.eh_frame:00000000000120E1                 db    0
.eh_frame:00000000000120E2                 db    0
.eh_frame:00000000000120E3                 db    0
.eh_frame:00000000000120E4                 db    0
.eh_frame:00000000000120E5                 db  41h ; A
.eh_frame:00000000000120E6                 db  0Eh
.eh_frame:00000000000120E7                 db  10h
.eh_frame:00000000000120E8                 db  86h
.eh_frame:00000000000120E9                 db    2
.eh_frame:00000000000120EA                 db  41h ; A
.eh_frame:00000000000120EB                 db  0Eh
.eh_frame:00000000000120EC                 db  18h
.eh_frame:00000000000120ED                 db  83h
.eh_frame:00000000000120EE                 db    3
.eh_frame:00000000000120EF                 db  49h ; I
.eh_frame:00000000000120F0                 db  0Eh
.eh_frame:00000000000120F1                 db  20h
.eh_frame:00000000000120F2                 db  49h ; I
.eh_frame:00000000000120F3                 db  0Eh
.eh_frame:00000000000120F4                 db  18h
.eh_frame:00000000000120F5                 db  46h ; F
.eh_frame:00000000000120F6                 db  0Eh
.eh_frame:00000000000120F7                 db  10h
.eh_frame:00000000000120F8                 db  41h ; A
.eh_frame:00000000000120F9                 db  0Eh
.eh_frame:00000000000120FA                 db    8
.eh_frame:00000000000120FB                 db    0
.eh_frame:00000000000120FC                 db    0
.eh_frame:00000000000120FD                 db    0
.eh_frame:00000000000120FE                 db    0
.eh_frame:00000000000120FF                 db    0
.eh_frame:0000000000012100                 db  1Ch
.eh_frame:0000000000012101                 db    0
.eh_frame:0000000000012102                 db    0
.eh_frame:0000000000012103                 db    0
.eh_frame:0000000000012104                 db 0DCh
.eh_frame:0000000000012105                 db  0Ch
.eh_frame:0000000000012106                 db    0
.eh_frame:0000000000012107                 db    0
.eh_frame:0000000000012108                 db 0F8h
.eh_frame:0000000000012109                 db  66h ; f
.eh_frame:000000000001210A                 db 0FFh
.eh_frame:000000000001210B                 db 0FFh
.eh_frame:000000000001210C                 db  9Fh
.eh_frame:000000000001210D                 db    0
.eh_frame:000000000001210E                 db    0
.eh_frame:000000000001210F                 db    0
.eh_frame:0000000000012110                 db    0
.eh_frame:0000000000012111                 db  44h ; D
.eh_frame:0000000000012112                 db  0Eh
.eh_frame:0000000000012113                 db  10h
.eh_frame:0000000000012114                 db  83h
.eh_frame:0000000000012115                 db    2
.eh_frame:0000000000012116                 db    2
.eh_frame:0000000000012117                 db  78h ; x
.eh_frame:0000000000012118                 db  0Ah
.eh_frame:0000000000012119                 db  0Eh
.eh_frame:000000000001211A                 db    8
.eh_frame:000000000001211B                 db  41h ; A
.eh_frame:000000000001211C                 db  0Bh
.eh_frame:000000000001211D                 db    0
.eh_frame:000000000001211E                 db    0
.eh_frame:000000000001211F                 db    0
.eh_frame:0000000000012120                 db  40h ; @
.eh_frame:0000000000012121                 db    0
.eh_frame:0000000000012122                 db    0
.eh_frame:0000000000012123                 db    0
.eh_frame:0000000000012124                 db 0FCh
.eh_frame:0000000000012125                 db  0Ch
.eh_frame:0000000000012126                 db    0
.eh_frame:0000000000012127                 db    0
.eh_frame:0000000000012128                 db  78h ; x
.eh_frame:0000000000012129                 db  67h ; g
.eh_frame:000000000001212A                 db 0FFh
.eh_frame:000000000001212B                 db 0FFh
.eh_frame:000000000001212C                 db 0E7h
.eh_frame:000000000001212D                 db    0
.eh_frame:000000000001212E                 db    0
.eh_frame:000000000001212F                 db    0
.eh_frame:0000000000012130                 db    0
.eh_frame:0000000000012131                 db  41h ; A
.eh_frame:0000000000012132                 db  0Eh
.eh_frame:0000000000012133                 db  10h
.eh_frame:0000000000012134                 db  86h
.eh_frame:0000000000012135                 db    2
.eh_frame:0000000000012136                 db  41h ; A
.eh_frame:0000000000012137                 db  0Eh
.eh_frame:0000000000012138                 db  18h
.eh_frame:0000000000012139                 db  83h
.eh_frame:000000000001213A                 db    3
.eh_frame:000000000001213B                 db  49h ; I
.eh_frame:000000000001213C                 db  0Eh
.eh_frame:000000000001213D                 db  20h
.eh_frame:000000000001213E                 db  6Eh ; n
.eh_frame:000000000001213F                 db  0Ah
.eh_frame:0000000000012140                 db  0Eh
.eh_frame:0000000000012141                 db  18h
.eh_frame:0000000000012142                 db  41h ; A
.eh_frame:0000000000012143                 db  0Eh
.eh_frame:0000000000012144                 db  10h
.eh_frame:0000000000012145                 db  41h ; A
.eh_frame:0000000000012146                 db  0Eh
.eh_frame:0000000000012147                 db    8
.eh_frame:0000000000012148                 db  45h ; E
.eh_frame:0000000000012149                 db  0Bh
.eh_frame:000000000001214A                 db    2
.eh_frame:000000000001214B                 db  4Ah ; J
.eh_frame:000000000001214C                 db  0Ah
.eh_frame:000000000001214D                 db  0Eh
.eh_frame:000000000001214E                 db  18h
.eh_frame:000000000001214F                 db  41h ; A
.eh_frame:0000000000012150                 db  0Eh
.eh_frame:0000000000012151                 db  10h
.eh_frame:0000000000012152                 db  41h ; A
.eh_frame:0000000000012153                 db  0Eh
.eh_frame:0000000000012154                 db    8
.eh_frame:0000000000012155                 db  44h ; D
.eh_frame:0000000000012156                 db  0Bh
.eh_frame:0000000000012157                 db    2
.eh_frame:0000000000012158                 db  54h ; T
.eh_frame:0000000000012159                 db  0Eh
.eh_frame:000000000001215A                 db  18h
.eh_frame:000000000001215B                 db  41h ; A
.eh_frame:000000000001215C                 db  0Eh
.eh_frame:000000000001215D                 db  10h
.eh_frame:000000000001215E                 db  41h ; A
.eh_frame:000000000001215F                 db  0Eh
.eh_frame:0000000000012160                 db    8
.eh_frame:0000000000012161                 db    0
.eh_frame:0000000000012162                 db    0
.eh_frame:0000000000012163                 db    0
.eh_frame:0000000000012164                 db  74h ; t
.eh_frame:0000000000012165                 db    0
.eh_frame:0000000000012166                 db    0
.eh_frame:0000000000012167                 db    0
.eh_frame:0000000000012168                 db  40h ; @
.eh_frame:0000000000012169                 db  0Dh
.eh_frame:000000000001216A                 db    0
.eh_frame:000000000001216B                 db    0
.eh_frame:000000000001216C                 db  24h ; $
.eh_frame:000000000001216D                 db  68h ; h
.eh_frame:000000000001216E                 db 0FFh
.eh_frame:000000000001216F                 db 0FFh
.eh_frame:0000000000012170                 db  34h ; 4
.eh_frame:0000000000012171                 db  12h
.eh_frame:0000000000012172                 db    0
.eh_frame:0000000000012173                 db    0
.eh_frame:0000000000012174                 db    0
.eh_frame:0000000000012175                 db  42h ; B
.eh_frame:0000000000012176                 db  0Eh
.eh_frame:0000000000012177                 db  10h
.eh_frame:0000000000012178                 db  8Fh
.eh_frame:0000000000012179                 db    2
.eh_frame:000000000001217A                 db  42h ; B
.eh_frame:000000000001217B                 db  0Eh
.eh_frame:000000000001217C                 db  18h
.eh_frame:000000000001217D                 db  8Eh
.eh_frame:000000000001217E                 db    3
.eh_frame:000000000001217F                 db  45h ; E
.eh_frame:0000000000012180                 db  0Eh
.eh_frame:0000000000012181                 db  20h
.eh_frame:0000000000012182                 db  8Dh
.eh_frame:0000000000012183                 db    4
.eh_frame:0000000000012184                 db  42h ; B
.eh_frame:0000000000012185                 db  0Eh
.eh_frame:0000000000012186                 db  28h ; (
.eh_frame:0000000000012187                 db  8Ch
.eh_frame:0000000000012188                 db    5
.eh_frame:0000000000012189                 db  44h ; D
.eh_frame:000000000001218A                 db  0Eh
.eh_frame:000000000001218B                 db  30h ; 0
.eh_frame:000000000001218C                 db  86h
.eh_frame:000000000001218D                 db    6
.eh_frame:000000000001218E                 db  41h ; A
.eh_frame:000000000001218F                 db  0Eh
.eh_frame:0000000000012190                 db  38h ; 8
.eh_frame:0000000000012191                 db  83h
.eh_frame:0000000000012192                 db    7
.eh_frame:0000000000012193                 db  53h ; S
.eh_frame:0000000000012194                 db  0Eh
.eh_frame:0000000000012195                 db 0F0h
.eh_frame:0000000000012196                 db    1
.eh_frame:0000000000012197                 db    3
.eh_frame:0000000000012198                 db  81h
.eh_frame:0000000000012199                 db  0Bh
.eh_frame:000000000001219A                 db  0Eh
.eh_frame:000000000001219B                 db 0F8h
.eh_frame:000000000001219C                 db    1
.eh_frame:000000000001219D                 db  4Ah ; J
.eh_frame:000000000001219E                 db  0Eh
.eh_frame:000000000001219F                 db  80h
.eh_frame:00000000000121A0                 db    2
.eh_frame:00000000000121A1                 db  44h ; D
.eh_frame:00000000000121A2                 db  0Eh
.eh_frame:00000000000121A3                 db  88h
.eh_frame:00000000000121A4                 db    2
.eh_frame:00000000000121A5                 db  45h ; E
.eh_frame:00000000000121A6                 db  0Eh
.eh_frame:00000000000121A7                 db  90h
.eh_frame:00000000000121A8                 db    2
.eh_frame:00000000000121A9                 db  5Fh ; _
.eh_frame:00000000000121AA                 db  0Eh
.eh_frame:00000000000121AB                 db 0F0h
.eh_frame:00000000000121AC                 db    1
.eh_frame:00000000000121AD                 db  64h ; d
.eh_frame:00000000000121AE                 db  0Ah
.eh_frame:00000000000121AF                 db  0Eh
.eh_frame:00000000000121B0                 db  38h ; 8
.eh_frame:00000000000121B1                 db  41h ; A
.eh_frame:00000000000121B2                 db  0Eh
.eh_frame:00000000000121B3                 db  30h ; 0
.eh_frame:00000000000121B4                 db  41h ; A
.eh_frame:00000000000121B5                 db  0Eh
.eh_frame:00000000000121B6                 db  28h ; (
.eh_frame:00000000000121B7                 db  42h ; B
.eh_frame:00000000000121B8                 db  0Eh
.eh_frame:00000000000121B9                 db  20h
.eh_frame:00000000000121BA                 db  42h ; B
.eh_frame:00000000000121BB                 db  0Eh
.eh_frame:00000000000121BC                 db  18h
.eh_frame:00000000000121BD                 db  42h ; B
.eh_frame:00000000000121BE                 db  0Eh
.eh_frame:00000000000121BF                 db  10h
.eh_frame:00000000000121C0                 db  42h ; B
.eh_frame:00000000000121C1                 db  0Eh
.eh_frame:00000000000121C2                 db    8
.eh_frame:00000000000121C3                 db  44h ; D
.eh_frame:00000000000121C4                 db  0Bh
.eh_frame:00000000000121C5                 db    3
.eh_frame:00000000000121C6                 db  99h
.eh_frame:00000000000121C7                 db    5
.eh_frame:00000000000121C8                 db  0Eh
.eh_frame:00000000000121C9                 db 0F8h
.eh_frame:00000000000121CA                 db    1
.eh_frame:00000000000121CB                 db  4Dh ; M
.eh_frame:00000000000121CC                 db  0Eh
.eh_frame:00000000000121CD                 db  80h
.eh_frame:00000000000121CE                 db    2
.eh_frame:00000000000121CF                 db  44h ; D
.eh_frame:00000000000121D0                 db  0Eh
.eh_frame:00000000000121D1                 db  88h
.eh_frame:00000000000121D2                 db    2
.eh_frame:00000000000121D3                 db  47h ; G
.eh_frame:00000000000121D4                 db  0Eh
.eh_frame:00000000000121D5                 db  90h
.eh_frame:00000000000121D6                 db    2
.eh_frame:00000000000121D7                 db  5Bh ; [
.eh_frame:00000000000121D8                 db  0Eh
.eh_frame:00000000000121D9                 db 0F0h
.eh_frame:00000000000121DA                 db    1
.eh_frame:00000000000121DB                 db    0
.eh_frame:00000000000121DC                 db  68h ; h
.eh_frame:00000000000121DD                 db    0
.eh_frame:00000000000121DE                 db    0
.eh_frame:00000000000121DF                 db    0
.eh_frame:00000000000121E0                 db 0B8h
.eh_frame:00000000000121E1                 db  0Dh
.eh_frame:00000000000121E2                 db    0
.eh_frame:00000000000121E3                 db    0
.eh_frame:00000000000121E4                 db 0ECh
.eh_frame:00000000000121E5                 db  79h ; y
.eh_frame:00000000000121E6                 db 0FFh
.eh_frame:00000000000121E7                 db 0FFh
.eh_frame:00000000000121E8                 db 0ABh
.eh_frame:00000000000121E9                 db    1
.eh_frame:00000000000121EA                 db    0
.eh_frame:00000000000121EB                 db    0
.eh_frame:00000000000121EC                 db    0
.eh_frame:00000000000121ED                 db  42h ; B
.eh_frame:00000000000121EE                 db  0Eh
.eh_frame:00000000000121EF                 db  10h
.eh_frame:00000000000121F0                 db  8Fh
.eh_frame:00000000000121F1                 db    2
.eh_frame:00000000000121F2                 db  42h ; B
.eh_frame:00000000000121F3                 db  0Eh
.eh_frame:00000000000121F4                 db  18h
.eh_frame:00000000000121F5                 db  8Eh
.eh_frame:00000000000121F6                 db    3
.eh_frame:00000000000121F7                 db  45h ; E
.eh_frame:00000000000121F8                 db  0Eh
.eh_frame:00000000000121F9                 db  20h
.eh_frame:00000000000121FA                 db  8Dh
.eh_frame:00000000000121FB                 db    4
.eh_frame:00000000000121FC                 db  42h ; B
.eh_frame:00000000000121FD                 db  0Eh
.eh_frame:00000000000121FE                 db  28h ; (
.eh_frame:00000000000121FF                 db  8Ch
.eh_frame:0000000000012200                 db    5
.eh_frame:0000000000012201                 db  44h ; D
.eh_frame:0000000000012202                 db  0Eh
.eh_frame:0000000000012203                 db  30h ; 0
.eh_frame:0000000000012204                 db  86h
.eh_frame:0000000000012205                 db    6
.eh_frame:0000000000012206                 db  41h ; A
.eh_frame:0000000000012207                 db  0Eh
.eh_frame:0000000000012208                 db  38h ; 8
.eh_frame:0000000000012209                 db  83h
.eh_frame:000000000001220A                 db    7
.eh_frame:000000000001220B                 db  47h ; G
.eh_frame:000000000001220C                 db  0Eh
.eh_frame:000000000001220D                 db  60h ; `
.eh_frame:000000000001220E                 db    2
.eh_frame:000000000001220F                 db  99h
.eh_frame:0000000000012210                 db  0Eh
.eh_frame:0000000000012211                 db  68h ; h
.eh_frame:0000000000012212                 db  5Fh ; _
.eh_frame:0000000000012213                 db  0Eh
.eh_frame:0000000000012214                 db  70h ; p
.eh_frame:0000000000012215                 db  46h ; F
.eh_frame:0000000000012216                 db  0Eh
.eh_frame:0000000000012217                 db  78h ; x
.eh_frame:0000000000012218                 db  42h ; B
.eh_frame:0000000000012219                 db  0Eh
.eh_frame:000000000001221A                 db  80h
.eh_frame:000000000001221B                 db    1
.eh_frame:000000000001221C                 db  59h ; Y
.eh_frame:000000000001221D                 db  0Eh
.eh_frame:000000000001221E                 db  60h ; `
.eh_frame:000000000001221F                 db    2
.eh_frame:0000000000012220                 db  40h ; @
.eh_frame:0000000000012221                 db  0Eh
.eh_frame:0000000000012222                 db  68h ; h
.eh_frame:0000000000012223                 db  4Bh ; K
.eh_frame:0000000000012224                 db  0Eh
.eh_frame:0000000000012225                 db  70h ; p
.eh_frame:0000000000012226                 db  43h ; C
.eh_frame:0000000000012227                 db  0Eh
.eh_frame:0000000000012228                 db  78h ; x
.eh_frame:0000000000012229                 db  45h ; E
.eh_frame:000000000001222A                 db  0Eh
.eh_frame:000000000001222B                 db  80h
.eh_frame:000000000001222C                 db    1
.eh_frame:000000000001222D                 db  5Eh ; ^
.eh_frame:000000000001222E                 db  0Eh
.eh_frame:000000000001222F                 db  60h ; `
.eh_frame:0000000000012230                 db  4Ch ; L
.eh_frame:0000000000012231                 db  0Ah
.eh_frame:0000000000012232                 db  0Eh
.eh_frame:0000000000012233                 db  38h ; 8
.eh_frame:0000000000012234                 db  44h ; D
.eh_frame:0000000000012235                 db  0Eh
.eh_frame:0000000000012236                 db  30h ; 0
.eh_frame:0000000000012237                 db  41h ; A
.eh_frame:0000000000012238                 db  0Eh
.eh_frame:0000000000012239                 db  28h ; (
.eh_frame:000000000001223A                 db  42h ; B
.eh_frame:000000000001223B                 db  0Eh
.eh_frame:000000000001223C                 db  20h
.eh_frame:000000000001223D                 db  42h ; B
.eh_frame:000000000001223E                 db  0Eh
.eh_frame:000000000001223F                 db  18h
.eh_frame:0000000000012240                 db  42h ; B
.eh_frame:0000000000012241                 db  0Eh
.eh_frame:0000000000012242                 db  10h
.eh_frame:0000000000012243                 db  42h ; B
.eh_frame:0000000000012244                 db  0Eh
.eh_frame:0000000000012245                 db    8
.eh_frame:0000000000012246                 db  46h ; F
.eh_frame:0000000000012247                 db  0Bh
.eh_frame:0000000000012248                 db  28h ; (
.eh_frame:0000000000012249                 db    0
.eh_frame:000000000001224A                 db    0
.eh_frame:000000000001224B                 db    0
.eh_frame:000000000001224C                 db  24h ; $
.eh_frame:000000000001224D                 db  0Eh
.eh_frame:000000000001224E                 db    0
.eh_frame:000000000001224F                 db    0
.eh_frame:0000000000012250                 db  30h ; 0
.eh_frame:0000000000012251                 db  7Bh ; {
.eh_frame:0000000000012252                 db 0FFh
.eh_frame:0000000000012253                 db 0FFh
.eh_frame:0000000000012254                 db  36h ; 6
.eh_frame:0000000000012255                 db    0
.eh_frame:0000000000012256                 db    0
.eh_frame:0000000000012257                 db    0
.eh_frame:0000000000012258                 db    0
.eh_frame:0000000000012259                 db  42h ; B
.eh_frame:000000000001225A                 db  0Eh
.eh_frame:000000000001225B                 db  10h
.eh_frame:000000000001225C                 db  8Ch
.eh_frame:000000000001225D                 db    2
.eh_frame:000000000001225E                 db  41h ; A
.eh_frame:000000000001225F                 db  0Eh
.eh_frame:0000000000012260                 db  18h
.eh_frame:0000000000012261                 db  86h
.eh_frame:0000000000012262                 db    3
.eh_frame:0000000000012263                 db  41h ; A
.eh_frame:0000000000012264                 db  0Eh
.eh_frame:0000000000012265                 db  20h
.eh_frame:0000000000012266                 db  83h
.eh_frame:0000000000012267                 db    4
.eh_frame:0000000000012268                 db  6Eh ; n
.eh_frame:0000000000012269                 db  0Eh
.eh_frame:000000000001226A                 db  18h
.eh_frame:000000000001226B                 db  41h ; A
.eh_frame:000000000001226C                 db  0Eh
.eh_frame:000000000001226D                 db  10h
.eh_frame:000000000001226E                 db  42h ; B
.eh_frame:000000000001226F                 db  0Eh
.eh_frame:0000000000012270                 db    8
.eh_frame:0000000000012271                 db    0
.eh_frame:0000000000012272                 db    0
.eh_frame:0000000000012273                 db    0
.eh_frame:0000000000012274                 db  10h
.eh_frame:0000000000012275                 db    0
.eh_frame:0000000000012276                 db    0
.eh_frame:0000000000012277                 db    0
.eh_frame:0000000000012278                 db  50h ; P
.eh_frame:0000000000012279                 db  0Eh
.eh_frame:000000000001227A                 db    0
.eh_frame:000000000001227B                 db    0
.eh_frame:000000000001227C                 db  44h ; D
.eh_frame:000000000001227D                 db  7Bh ; {
.eh_frame:000000000001227E                 db 0FFh
.eh_frame:000000000001227F                 db 0FFh
.eh_frame:0000000000012280                 db  11h
.eh_frame:0000000000012281                 db    0
.eh_frame:0000000000012282                 db    0
.eh_frame:0000000000012283                 db    0
.eh_frame:0000000000012284                 db    0
.eh_frame:0000000000012285                 db    0
.eh_frame:0000000000012286                 db    0
.eh_frame:0000000000012287                 db    0
.eh_frame:0000000000012288                 db  10h
.eh_frame:0000000000012289                 db    0
.eh_frame:000000000001228A                 db    0
.eh_frame:000000000001228B                 db    0
.eh_frame:000000000001228C                 db  64h ; d
.eh_frame:000000000001228D                 db  0Eh
.eh_frame:000000000001228E                 db    0
.eh_frame:000000000001228F                 db    0
.eh_frame:0000000000012290                 db  50h ; P
.eh_frame:0000000000012291                 db  7Bh ; {
.eh_frame:0000000000012292                 db 0FFh
.eh_frame:0000000000012293                 db 0FFh
.eh_frame:0000000000012294                 db  11h
.eh_frame:0000000000012295                 db    0
.eh_frame:0000000000012296                 db    0
.eh_frame:0000000000012297                 db    0
.eh_frame:0000000000012298                 db    0
.eh_frame:0000000000012299                 db    0
.eh_frame:000000000001229A                 db    0
.eh_frame:000000000001229B                 db    0
.eh_frame:000000000001229C                 db  10h
.eh_frame:000000000001229D                 db    0
.eh_frame:000000000001229E                 db    0
.eh_frame:000000000001229F                 db    0
.eh_frame:00000000000122A0                 db  78h ; x
.eh_frame:00000000000122A1                 db  0Eh
.eh_frame:00000000000122A2                 db    0
.eh_frame:00000000000122A3                 db    0
.eh_frame:00000000000122A4                 db  5Ch ; \
.eh_frame:00000000000122A5                 db  7Bh ; {
.eh_frame:00000000000122A6                 db 0FFh
.eh_frame:00000000000122A7                 db 0FFh
.eh_frame:00000000000122A8                 db  35h ; 5
.eh_frame:00000000000122A9                 db    0
.eh_frame:00000000000122AA                 db    0
.eh_frame:00000000000122AB                 db    0
.eh_frame:00000000000122AC                 db    0
.eh_frame:00000000000122AD                 db    0
.eh_frame:00000000000122AE                 db    0
.eh_frame:00000000000122AF                 db    0
.eh_frame:00000000000122B0                 db  10h
.eh_frame:00000000000122B1                 db    0
.eh_frame:00000000000122B2                 db    0
.eh_frame:00000000000122B3                 db    0
.eh_frame:00000000000122B4                 db  8Ch
.eh_frame:00000000000122B5                 db  0Eh
.eh_frame:00000000000122B6                 db    0
.eh_frame:00000000000122B7                 db    0
.eh_frame:00000000000122B8                 db  88h
.eh_frame:00000000000122B9                 db  7Bh ; {
.eh_frame:00000000000122BA                 db 0FFh
.eh_frame:00000000000122BB                 db 0FFh
.eh_frame:00000000000122BC                 db  15h
.eh_frame:00000000000122BD                 db    0
.eh_frame:00000000000122BE                 db    0
.eh_frame:00000000000122BF                 db    0
.eh_frame:00000000000122C0                 db    0
.eh_frame:00000000000122C1                 db    0
.eh_frame:00000000000122C2                 db    0
.eh_frame:00000000000122C3                 db    0
.eh_frame:00000000000122C4                 db  10h
.eh_frame:00000000000122C5                 db    0
.eh_frame:00000000000122C6                 db    0
.eh_frame:00000000000122C7                 db    0
.eh_frame:00000000000122C8                 db 0A0h
.eh_frame:00000000000122C9                 db  0Eh
.eh_frame:00000000000122CA                 db    0
.eh_frame:00000000000122CB                 db    0
.eh_frame:00000000000122CC                 db  94h
.eh_frame:00000000000122CD                 db  7Bh ; {
.eh_frame:00000000000122CE                 db 0FFh
.eh_frame:00000000000122CF                 db 0FFh
.eh_frame:00000000000122D0                 db  30h ; 0
.eh_frame:00000000000122D1                 db    0
.eh_frame:00000000000122D2                 db    0
.eh_frame:00000000000122D3                 db    0
.eh_frame:00000000000122D4                 db    0
.eh_frame:00000000000122D5                 db  6Bh ; k
.eh_frame:00000000000122D6                 db  0Eh
.eh_frame:00000000000122D7                 db  10h
.eh_frame:00000000000122D8                 db  50h ; P
.eh_frame:00000000000122D9                 db    0
.eh_frame:00000000000122DA                 db    0
.eh_frame:00000000000122DB                 db    0
.eh_frame:00000000000122DC                 db 0B4h
.eh_frame:00000000000122DD                 db  0Eh
.eh_frame:00000000000122DE                 db    0
.eh_frame:00000000000122DF                 db    0
.eh_frame:00000000000122E0                 db 0B0h
.eh_frame:00000000000122E1                 db  7Bh ; {
.eh_frame:00000000000122E2                 db 0FFh
.eh_frame:00000000000122E3                 db 0FFh
.eh_frame:00000000000122E4                 db  74h ; t
.eh_frame:00000000000122E5                 db    0
.eh_frame:00000000000122E6                 db    0
.eh_frame:00000000000122E7                 db    0
.eh_frame:00000000000122E8                 db    0
.eh_frame:00000000000122E9                 db  42h ; B
.eh_frame:00000000000122EA                 db  0Eh
.eh_frame:00000000000122EB                 db  10h
.eh_frame:00000000000122EC                 db  8Fh
.eh_frame:00000000000122ED                 db    2
.eh_frame:00000000000122EE                 db  42h ; B
.eh_frame:00000000000122EF                 db  0Eh
.eh_frame:00000000000122F0                 db  18h
.eh_frame:00000000000122F1                 db  8Eh
.eh_frame:00000000000122F2                 db    3
.eh_frame:00000000000122F3                 db  49h ; I
.eh_frame:00000000000122F4                 db  0Eh
.eh_frame:00000000000122F5                 db  20h
.eh_frame:00000000000122F6                 db  8Dh
.eh_frame:00000000000122F7                 db    4
.eh_frame:00000000000122F8                 db  42h ; B
.eh_frame:00000000000122F9                 db  0Eh
.eh_frame:00000000000122FA                 db  28h ; (
.eh_frame:00000000000122FB                 db  8Ch
.eh_frame:00000000000122FC                 db    5
.eh_frame:00000000000122FD                 db  44h ; D
.eh_frame:00000000000122FE                 db  0Eh
.eh_frame:00000000000122FF                 db  30h ; 0
.eh_frame:0000000000012300                 db  86h
.eh_frame:0000000000012301                 db    6
.eh_frame:0000000000012302                 db  41h ; A
.eh_frame:0000000000012303                 db  0Eh
.eh_frame:0000000000012304                 db  38h ; 8
.eh_frame:0000000000012305                 db  83h
.eh_frame:0000000000012306                 db    7
.eh_frame:0000000000012307                 db  4Dh ; M
.eh_frame:0000000000012308                 db  0Eh
.eh_frame:0000000000012309                 db  50h ; P
.eh_frame:000000000001230A                 db  5Fh ; _
.eh_frame:000000000001230B                 db  0Eh
.eh_frame:000000000001230C                 db  58h ; X
.eh_frame:000000000001230D                 db  47h ; G
.eh_frame:000000000001230E                 db  0Eh
.eh_frame:000000000001230F                 db  60h ; `
.eh_frame:0000000000012310                 db  46h ; F
.eh_frame:0000000000012311                 db  0Eh
.eh_frame:0000000000012312                 db  68h ; h
.eh_frame:0000000000012313                 db  44h ; D
.eh_frame:0000000000012314                 db  0Eh
.eh_frame:0000000000012315                 db  70h ; p
.eh_frame:0000000000012316                 db  58h ; X
.eh_frame:0000000000012317                 db  0Eh
.eh_frame:0000000000012318                 db  38h ; 8
.eh_frame:0000000000012319                 db  41h ; A
.eh_frame:000000000001231A                 db  0Eh
.eh_frame:000000000001231B                 db  30h ; 0
.eh_frame:000000000001231C                 db  41h ; A
.eh_frame:000000000001231D                 db  0Eh
.eh_frame:000000000001231E                 db  28h ; (
.eh_frame:000000000001231F                 db  42h ; B
.eh_frame:0000000000012320                 db  0Eh
.eh_frame:0000000000012321                 db  20h
.eh_frame:0000000000012322                 db  42h ; B
.eh_frame:0000000000012323                 db  0Eh
.eh_frame:0000000000012324                 db  18h
.eh_frame:0000000000012325                 db  42h ; B
.eh_frame:0000000000012326                 db  0Eh
.eh_frame:0000000000012327                 db  10h
.eh_frame:0000000000012328                 db  42h ; B
.eh_frame:0000000000012329                 db  0Eh
.eh_frame:000000000001232A                 db    8
.eh_frame:000000000001232B                 db    0
.eh_frame:000000000001232C                 db  68h ; h
.eh_frame:000000000001232D                 db    0
.eh_frame:000000000001232E                 db    0
.eh_frame:000000000001232F                 db    0
.eh_frame:0000000000012330                 db    8
.eh_frame:0000000000012331                 db  0Fh
.eh_frame:0000000000012332                 db    0
.eh_frame:0000000000012333                 db    0
.eh_frame:0000000000012334                 db 0DCh
.eh_frame:0000000000012335                 db  7Bh ; {
.eh_frame:0000000000012336                 db 0FFh
.eh_frame:0000000000012337                 db 0FFh
.eh_frame:0000000000012338                 db 0E3h
.eh_frame:0000000000012339                 db    0
.eh_frame:000000000001233A                 db    0
.eh_frame:000000000001233B                 db    0
.eh_frame:000000000001233C                 db    0
.eh_frame:000000000001233D                 db  42h ; B
.eh_frame:000000000001233E                 db  0Eh
.eh_frame:000000000001233F                 db  10h
.eh_frame:0000000000012340                 db  8Fh
.eh_frame:0000000000012341                 db    2
.eh_frame:0000000000012342                 db  42h ; B
.eh_frame:0000000000012343                 db  0Eh
.eh_frame:0000000000012344                 db  18h
.eh_frame:0000000000012345                 db  8Eh
.eh_frame:0000000000012346                 db    3
.eh_frame:0000000000012347                 db  49h ; I
.eh_frame:0000000000012348                 db  0Eh
.eh_frame:0000000000012349                 db  20h
.eh_frame:000000000001234A                 db  8Dh
.eh_frame:000000000001234B                 db    4
.eh_frame:000000000001234C                 db  42h ; B
.eh_frame:000000000001234D                 db  0Eh
.eh_frame:000000000001234E                 db  28h ; (
.eh_frame:000000000001234F                 db  8Ch
.eh_frame:0000000000012350                 db    5
.eh_frame:0000000000012351                 db  44h ; D
.eh_frame:0000000000012352                 db  0Eh
.eh_frame:0000000000012353                 db  30h ; 0
.eh_frame:0000000000012354                 db  86h
.eh_frame:0000000000012355                 db    6
.eh_frame:0000000000012356                 db  41h ; A
.eh_frame:0000000000012357                 db  0Eh
.eh_frame:0000000000012358                 db  38h ; 8
.eh_frame:0000000000012359                 db  83h
.eh_frame:000000000001235A                 db    7
.eh_frame:000000000001235B                 db  4Dh ; M
.eh_frame:000000000001235C                 db  0Eh
.eh_frame:000000000001235D                 db  70h ; p
.eh_frame:000000000001235E                 db  65h ; e
.eh_frame:000000000001235F                 db  0Eh
.eh_frame:0000000000012360                 db  78h ; x
.eh_frame:0000000000012361                 db  4Dh ; M
.eh_frame:0000000000012362                 db  0Eh
.eh_frame:0000000000012363                 db  80h
.eh_frame:0000000000012364                 db    1
.eh_frame:0000000000012365                 db  46h ; F
.eh_frame:0000000000012366                 db  0Eh
.eh_frame:0000000000012367                 db  88h
.eh_frame:0000000000012368                 db    1
.eh_frame:0000000000012369                 db  42h ; B
.eh_frame:000000000001236A                 db  0Eh
.eh_frame:000000000001236B                 db  90h
.eh_frame:000000000001236C                 db    1
.eh_frame:000000000001236D                 db  5Eh ; ^
.eh_frame:000000000001236E                 db  0Eh
.eh_frame:000000000001236F                 db  70h ; p
.eh_frame:0000000000012370                 db  56h ; V
.eh_frame:0000000000012371                 db  0Eh
.eh_frame:0000000000012372                 db  78h ; x
.eh_frame:0000000000012373                 db  43h ; C
.eh_frame:0000000000012374                 db  0Eh
.eh_frame:0000000000012375                 db  80h
.eh_frame:0000000000012376                 db    1
.eh_frame:0000000000012377                 db  43h ; C
.eh_frame:0000000000012378                 db  0Eh
.eh_frame:0000000000012379                 db  88h
.eh_frame:000000000001237A                 db    1
.eh_frame:000000000001237B                 db  56h ; V
.eh_frame:000000000001237C                 db  0Eh
.eh_frame:000000000001237D                 db  90h
.eh_frame:000000000001237E                 db    1
.eh_frame:000000000001237F                 db  52h ; R
.eh_frame:0000000000012380                 db  0Eh
.eh_frame:0000000000012381                 db  70h ; p
.eh_frame:0000000000012382                 db  5Bh ; [
.eh_frame:0000000000012383                 db  0Eh
.eh_frame:0000000000012384                 db  38h ; 8
.eh_frame:0000000000012385                 db  41h ; A
.eh_frame:0000000000012386                 db  0Eh
.eh_frame:0000000000012387                 db  30h ; 0
.eh_frame:0000000000012388                 db  41h ; A
.eh_frame:0000000000012389                 db  0Eh
.eh_frame:000000000001238A                 db  28h ; (
.eh_frame:000000000001238B                 db  42h ; B
.eh_frame:000000000001238C                 db  0Eh
.eh_frame:000000000001238D                 db  20h
.eh_frame:000000000001238E                 db  42h ; B
.eh_frame:000000000001238F                 db  0Eh
.eh_frame:0000000000012390                 db  18h
.eh_frame:0000000000012391                 db  42h ; B
.eh_frame:0000000000012392                 db  0Eh
.eh_frame:0000000000012393                 db  10h
.eh_frame:0000000000012394                 db  42h ; B
.eh_frame:0000000000012395                 db  0Eh
.eh_frame:0000000000012396                 db    8
.eh_frame:0000000000012397                 db    0
.eh_frame:0000000000012398                 db  10h
.eh_frame:0000000000012399                 db    0
.eh_frame:000000000001239A                 db    0
.eh_frame:000000000001239B                 db    0
.eh_frame:000000000001239C                 db  74h ; t
.eh_frame:000000000001239D                 db  0Fh
.eh_frame:000000000001239E                 db    0
.eh_frame:000000000001239F                 db    0
.eh_frame:00000000000123A0                 db  60h ; `
.eh_frame:00000000000123A1                 db  7Ch ; |
.eh_frame:00000000000123A2                 db 0FFh
.eh_frame:00000000000123A3                 db 0FFh
.eh_frame:00000000000123A4                 db  0Ah
.eh_frame:00000000000123A5                 db    0
.eh_frame:00000000000123A6                 db    0
.eh_frame:00000000000123A7                 db    0
.eh_frame:00000000000123A8                 db    0
.eh_frame:00000000000123A9                 db    0
.eh_frame:00000000000123AA                 db    0
.eh_frame:00000000000123AB                 db    0
.eh_frame:00000000000123AC                 db  28h ; (
.eh_frame:00000000000123AD                 db    0
.eh_frame:00000000000123AE                 db    0
.eh_frame:00000000000123AF                 db    0
.eh_frame:00000000000123B0                 db  88h
.eh_frame:00000000000123B1                 db  0Fh
.eh_frame:00000000000123B2                 db    0
.eh_frame:00000000000123B3                 db    0
.eh_frame:00000000000123B4                 db  5Ch ; \
.eh_frame:00000000000123B5                 db  7Ch ; |
.eh_frame:00000000000123B6                 db 0FFh
.eh_frame:00000000000123B7                 db 0FFh
.eh_frame:00000000000123B8                 db  93h
.eh_frame:00000000000123B9                 db    0
.eh_frame:00000000000123BA                 db    0
.eh_frame:00000000000123BB                 db    0
.eh_frame:00000000000123BC                 db    0
.eh_frame:00000000000123BD                 db  48h ; H
.eh_frame:00000000000123BE                 db  0Eh
.eh_frame:00000000000123BF                 db  10h
.eh_frame:00000000000123C0                 db  8Ch
.eh_frame:00000000000123C1                 db    2
.eh_frame:00000000000123C2                 db  48h ; H
.eh_frame:00000000000123C3                 db  0Eh
.eh_frame:00000000000123C4                 db  18h
.eh_frame:00000000000123C5                 db  86h
.eh_frame:00000000000123C6                 db    3
.eh_frame:00000000000123C7                 db  41h ; A
.eh_frame:00000000000123C8                 db  0Eh
.eh_frame:00000000000123C9                 db  20h
.eh_frame:00000000000123CA                 db  83h
.eh_frame:00000000000123CB                 db    4
.eh_frame:00000000000123CC                 db    2
.eh_frame:00000000000123CD                 db  74h ; t
.eh_frame:00000000000123CE                 db  0Eh
.eh_frame:00000000000123CF                 db  18h
.eh_frame:00000000000123D0                 db  4Bh ; K
.eh_frame:00000000000123D1                 db  0Eh
.eh_frame:00000000000123D2                 db  10h
.eh_frame:00000000000123D3                 db  42h ; B
.eh_frame:00000000000123D4                 db  0Eh
.eh_frame:00000000000123D5                 db    8
.eh_frame:00000000000123D6                 db    0
.eh_frame:00000000000123D7                 db    0
.eh_frame:00000000000123D8                 db  10h
.eh_frame:00000000000123D9                 db    0
.eh_frame:00000000000123DA                 db    0
.eh_frame:00000000000123DB                 db    0
.eh_frame:00000000000123DC                 db 0B4h
.eh_frame:00000000000123DD                 db  0Fh
.eh_frame:00000000000123DE                 db    0
.eh_frame:00000000000123DF                 db    0
.eh_frame:00000000000123E0                 db 0D0h
.eh_frame:00000000000123E1                 db  7Ch ; |
.eh_frame:00000000000123E2                 db 0FFh
.eh_frame:00000000000123E3                 db 0FFh
.eh_frame:00000000000123E4                 db  13h
.eh_frame:00000000000123E5                 db    0
.eh_frame:00000000000123E6                 db    0
.eh_frame:00000000000123E7                 db    0
.eh_frame:00000000000123E8                 db    0
.eh_frame:00000000000123E9                 db    0
.eh_frame:00000000000123EA                 db    0
.eh_frame:00000000000123EB                 db    0
.eh_frame:00000000000123EC                 db  10h
.eh_frame:00000000000123ED                 db    0
.eh_frame:00000000000123EE                 db    0
.eh_frame:00000000000123EF                 db    0
.eh_frame:00000000000123F0                 db 0C8h
.eh_frame:00000000000123F1                 db  0Fh
.eh_frame:00000000000123F2                 db    0
.eh_frame:00000000000123F3                 db    0
.eh_frame:00000000000123F4                 db 0DCh
.eh_frame:00000000000123F5                 db  7Ch ; |
.eh_frame:00000000000123F6                 db 0FFh
.eh_frame:00000000000123F7                 db 0FFh
.eh_frame:00000000000123F8                 db  0Ch
.eh_frame:00000000000123F9                 db    0
.eh_frame:00000000000123FA                 db    0
.eh_frame:00000000000123FB                 db    0
.eh_frame:00000000000123FC                 db    0
.eh_frame:00000000000123FD                 db    0
.eh_frame:00000000000123FE                 db    0
.eh_frame:00000000000123FF                 db    0
.eh_frame:0000000000012400                 db  10h
.eh_frame:0000000000012401                 db    0
.eh_frame:0000000000012402                 db    0
.eh_frame:0000000000012403                 db    0
.eh_frame:0000000000012404                 db 0DCh
.eh_frame:0000000000012405                 db  0Fh
.eh_frame:0000000000012406                 db    0
.eh_frame:0000000000012407                 db    0
.eh_frame:0000000000012408                 db 0D8h
.eh_frame:0000000000012409                 db  7Ch ; |
.eh_frame:000000000001240A                 db 0FFh
.eh_frame:000000000001240B                 db 0FFh
.eh_frame:000000000001240C                 db  18h
.eh_frame:000000000001240D                 db    0
.eh_frame:000000000001240E                 db    0
.eh_frame:000000000001240F                 db    0
.eh_frame:0000000000012410                 db    0
.eh_frame:0000000000012411                 db    0
.eh_frame:0000000000012412                 db    0
.eh_frame:0000000000012413                 db    0
.eh_frame:0000000000012414                 db  10h
.eh_frame:0000000000012415                 db    0
.eh_frame:0000000000012416                 db    0
.eh_frame:0000000000012417                 db    0
.eh_frame:0000000000012418                 db 0F0h
.eh_frame:0000000000012419                 db  0Fh
.eh_frame:000000000001241A                 db    0
.eh_frame:000000000001241B                 db    0
.eh_frame:000000000001241C                 db 0E4h
.eh_frame:000000000001241D                 db  7Ch ; |
.eh_frame:000000000001241E                 db 0FFh
.eh_frame:000000000001241F                 db 0FFh
.eh_frame:0000000000012420                 db  14h
.eh_frame:0000000000012421                 db    0
.eh_frame:0000000000012422                 db    0
.eh_frame:0000000000012423                 db    0
.eh_frame:0000000000012424                 db    0
.eh_frame:0000000000012425                 db    0
.eh_frame:0000000000012426                 db    0
.eh_frame:0000000000012427                 db    0
.eh_frame:0000000000012428                 db  18h
.eh_frame:0000000000012429                 db    0
.eh_frame:000000000001242A                 db    0
.eh_frame:000000000001242B                 db    0
.eh_frame:000000000001242C                 db    4
.eh_frame:000000000001242D                 db  10h
.eh_frame:000000000001242E                 db    0
.eh_frame:000000000001242F                 db    0
.eh_frame:0000000000012430                 db 0F0h
.eh_frame:0000000000012431                 db  7Ch ; |
.eh_frame:0000000000012432                 db 0FFh
.eh_frame:0000000000012433                 db 0FFh
.eh_frame:0000000000012434                 db  8Eh
.eh_frame:0000000000012435                 db    0
.eh_frame:0000000000012436                 db    0
.eh_frame:0000000000012437                 db    0
.eh_frame:0000000000012438                 db    0
.eh_frame:0000000000012439                 db  44h ; D
.eh_frame:000000000001243A                 db  0Eh
.eh_frame:000000000001243B                 db  50h ; P
.eh_frame:000000000001243C                 db    2
.eh_frame:000000000001243D                 db  7Fh ; 
.eh_frame:000000000001243E                 db  0Ah
.eh_frame:000000000001243F                 db  0Eh
.eh_frame:0000000000012440                 db    8
.eh_frame:0000000000012441                 db  41h ; A
.eh_frame:0000000000012442                 db  0Bh
.eh_frame:0000000000012443                 db    0
.eh_frame:0000000000012444                 db  18h
.eh_frame:0000000000012445                 db    0
.eh_frame:0000000000012446                 db    0
.eh_frame:0000000000012447                 db    0
.eh_frame:0000000000012448                 db  20h
.eh_frame:0000000000012449                 db  10h
.eh_frame:000000000001244A                 db    0
.eh_frame:000000000001244B                 db    0
.eh_frame:000000000001244C                 db  64h ; d
.eh_frame:000000000001244D                 db  7Dh ; }
.eh_frame:000000000001244E                 db 0FFh
.eh_frame:000000000001244F                 db 0FFh
.eh_frame:0000000000012450                 db  8Ah
.eh_frame:0000000000012451                 db    0
.eh_frame:0000000000012452                 db    0
.eh_frame:0000000000012453                 db    0
.eh_frame:0000000000012454                 db    0
.eh_frame:0000000000012455                 db  44h ; D
.eh_frame:0000000000012456                 db  0Eh
.eh_frame:0000000000012457                 db  50h ; P
.eh_frame:0000000000012458                 db    2
.eh_frame:0000000000012459                 db  7Bh ; {
.eh_frame:000000000001245A                 db  0Ah
.eh_frame:000000000001245B                 db  0Eh
.eh_frame:000000000001245C                 db    8
.eh_frame:000000000001245D                 db  41h ; A
.eh_frame:000000000001245E                 db  0Bh
.eh_frame:000000000001245F                 db    0
.eh_frame:0000000000012460                 db  10h
.eh_frame:0000000000012461                 db    0
.eh_frame:0000000000012462                 db    0
.eh_frame:0000000000012463                 db    0
.eh_frame:0000000000012464                 db  3Ch ; <
.eh_frame:0000000000012465                 db  10h
.eh_frame:0000000000012466                 db    0
.eh_frame:0000000000012467                 db    0
.eh_frame:0000000000012468                 db 0D8h
.eh_frame:0000000000012469                 db  7Dh ; }
.eh_frame:000000000001246A                 db 0FFh
.eh_frame:000000000001246B                 db 0FFh
.eh_frame:000000000001246C                 db  0Ch
.eh_frame:000000000001246D                 db    0
.eh_frame:000000000001246E                 db    0
.eh_frame:000000000001246F                 db    0
.eh_frame:0000000000012470                 db    0
.eh_frame:0000000000012471                 db    0
.eh_frame:0000000000012472                 db    0
.eh_frame:0000000000012473                 db    0
.eh_frame:0000000000012474                 db  10h
.eh_frame:0000000000012475                 db    0
.eh_frame:0000000000012476                 db    0
.eh_frame:0000000000012477                 db    0
.eh_frame:0000000000012478                 db  50h ; P
.eh_frame:0000000000012479                 db  10h
.eh_frame:000000000001247A                 db    0
.eh_frame:000000000001247B                 db    0
.eh_frame:000000000001247C                 db 0D4h
.eh_frame:000000000001247D                 db  7Dh ; }
.eh_frame:000000000001247E                 db 0FFh
.eh_frame:000000000001247F                 db 0FFh
.eh_frame:0000000000012480                 db  0Fh
.eh_frame:0000000000012481                 db    0
.eh_frame:0000000000012482                 db    0
.eh_frame:0000000000012483                 db    0
.eh_frame:0000000000012484                 db    0
.eh_frame:0000000000012485                 db    0
.eh_frame:0000000000012486                 db    0
.eh_frame:0000000000012487                 db    0
.eh_frame:0000000000012488                 db  18h
.eh_frame:0000000000012489                 db    0
.eh_frame:000000000001248A                 db    0
.eh_frame:000000000001248B                 db    0
.eh_frame:000000000001248C                 db  64h ; d
.eh_frame:000000000001248D                 db  10h
.eh_frame:000000000001248E                 db    0
.eh_frame:000000000001248F                 db    0
.eh_frame:0000000000012490                 db 0D0h
.eh_frame:0000000000012491                 db  7Dh ; }
.eh_frame:0000000000012492                 db 0FFh
.eh_frame:0000000000012493                 db 0FFh
.eh_frame:0000000000012494                 db  98h
.eh_frame:0000000000012495                 db    0
.eh_frame:0000000000012496                 db    0
.eh_frame:0000000000012497                 db    0
.eh_frame:0000000000012498                 db    0
.eh_frame:0000000000012499                 db  44h ; D
.eh_frame:000000000001249A                 db  0Eh
.eh_frame:000000000001249B                 db  50h ; P
.eh_frame:000000000001249C                 db    2
.eh_frame:000000000001249D                 db  8Eh
.eh_frame:000000000001249E                 db  0Ah
.eh_frame:000000000001249F                 db  0Eh
.eh_frame:00000000000124A0                 db    8
.eh_frame:00000000000124A1                 db  41h ; A
.eh_frame:00000000000124A2                 db  0Bh
.eh_frame:00000000000124A3                 db    0
.eh_frame:00000000000124A4                 db  10h
.eh_frame:00000000000124A5                 db    0
.eh_frame:00000000000124A6                 db    0
.eh_frame:00000000000124A7                 db    0
.eh_frame:00000000000124A8                 db  80h
.eh_frame:00000000000124A9                 db  10h
.eh_frame:00000000000124AA                 db    0
.eh_frame:00000000000124AB                 db    0
.eh_frame:00000000000124AC                 db  54h ; T
.eh_frame:00000000000124AD                 db  7Eh ; ~
.eh_frame:00000000000124AE                 db 0FFh
.eh_frame:00000000000124AF                 db 0FFh
.eh_frame:00000000000124B0                 db  10h
.eh_frame:00000000000124B1                 db    0
.eh_frame:00000000000124B2                 db    0
.eh_frame:00000000000124B3                 db    0
.eh_frame:00000000000124B4                 db    0
.eh_frame:00000000000124B5                 db    0
.eh_frame:00000000000124B6                 db    0
.eh_frame:00000000000124B7                 db    0
.eh_frame:00000000000124B8                 db  10h
.eh_frame:00000000000124B9                 db    0
.eh_frame:00000000000124BA                 db    0
.eh_frame:00000000000124BB                 db    0
.eh_frame:00000000000124BC                 db  94h
.eh_frame:00000000000124BD                 db  10h
.eh_frame:00000000000124BE                 db    0
.eh_frame:00000000000124BF                 db    0
.eh_frame:00000000000124C0                 db  50h ; P
.eh_frame:00000000000124C1                 db  7Eh ; ~
.eh_frame:00000000000124C2                 db 0FFh
.eh_frame:00000000000124C3                 db 0FFh
.eh_frame:00000000000124C4                 db  11h
.eh_frame:00000000000124C5                 db    0
.eh_frame:00000000000124C6                 db    0
.eh_frame:00000000000124C7                 db    0
.eh_frame:00000000000124C8                 db    0
.eh_frame:00000000000124C9                 db    0
.eh_frame:00000000000124CA                 db    0
.eh_frame:00000000000124CB                 db    0
.eh_frame:00000000000124CC                 db  10h
.eh_frame:00000000000124CD                 db    0
.eh_frame:00000000000124CE                 db    0
.eh_frame:00000000000124CF                 db    0
.eh_frame:00000000000124D0                 db 0A8h
.eh_frame:00000000000124D1                 db  10h
.eh_frame:00000000000124D2                 db    0
.eh_frame:00000000000124D3                 db    0
.eh_frame:00000000000124D4                 db  5Ch ; \
.eh_frame:00000000000124D5                 db  7Eh ; ~
.eh_frame:00000000000124D6                 db 0FFh
.eh_frame:00000000000124D7                 db 0FFh
.eh_frame:00000000000124D8                 db  0Ah
.eh_frame:00000000000124D9                 db    0
.eh_frame:00000000000124DA                 db    0
.eh_frame:00000000000124DB                 db    0
.eh_frame:00000000000124DC                 db    0
.eh_frame:00000000000124DD                 db    0
.eh_frame:00000000000124DE                 db    0
.eh_frame:00000000000124DF                 db    0
.eh_frame:00000000000124E0                 db  18h
.eh_frame:00000000000124E1                 db    0
.eh_frame:00000000000124E2                 db    0
.eh_frame:00000000000124E3                 db    0
.eh_frame:00000000000124E4                 db 0BCh
.eh_frame:00000000000124E5                 db  10h
.eh_frame:00000000000124E6                 db    0
.eh_frame:00000000000124E7                 db    0
.eh_frame:00000000000124E8                 db  58h ; X
.eh_frame:00000000000124E9                 db  7Eh ; ~
.eh_frame:00000000000124EA                 db 0FFh
.eh_frame:00000000000124EB                 db 0FFh
.eh_frame:00000000000124EC                 db  8Eh
.eh_frame:00000000000124ED                 db    0
.eh_frame:00000000000124EE                 db    0
.eh_frame:00000000000124EF                 db    0
.eh_frame:00000000000124F0                 db    0
.eh_frame:00000000000124F1                 db  44h ; D
.eh_frame:00000000000124F2                 db  0Eh
.eh_frame:00000000000124F3                 db  50h ; P
.eh_frame:00000000000124F4                 db    2
.eh_frame:00000000000124F5                 db  7Fh ; 
.eh_frame:00000000000124F6                 db  0Ah
.eh_frame:00000000000124F7                 db  0Eh
.eh_frame:00000000000124F8                 db    8
.eh_frame:00000000000124F9                 db  41h ; A
.eh_frame:00000000000124FA                 db  0Bh
.eh_frame:00000000000124FB                 db    0
.eh_frame:00000000000124FC                 db  18h
.eh_frame:00000000000124FD                 db    0
.eh_frame:00000000000124FE                 db    0
.eh_frame:00000000000124FF                 db    0
.eh_frame:0000000000012500                 db 0D8h
.eh_frame:0000000000012501                 db  10h
.eh_frame:0000000000012502                 db    0
.eh_frame:0000000000012503                 db    0
.eh_frame:0000000000012504                 db 0CCh
.eh_frame:0000000000012505                 db  7Eh ; ~
.eh_frame:0000000000012506                 db 0FFh
.eh_frame:0000000000012507                 db 0FFh
.eh_frame:0000000000012508                 db  91h
.eh_frame:0000000000012509                 db    0
.eh_frame:000000000001250A                 db    0
.eh_frame:000000000001250B                 db    0
.eh_frame:000000000001250C                 db    0
.eh_frame:000000000001250D                 db  44h ; D
.eh_frame:000000000001250E                 db  0Eh
.eh_frame:000000000001250F                 db  50h ; P
.eh_frame:0000000000012510                 db    2
.eh_frame:0000000000012511                 db  82h
.eh_frame:0000000000012512                 db  0Ah
.eh_frame:0000000000012513                 db  0Eh
.eh_frame:0000000000012514                 db    8
.eh_frame:0000000000012515                 db  41h ; A
.eh_frame:0000000000012516                 db  0Bh
.eh_frame:0000000000012517                 db    0
.eh_frame:0000000000012518                 db  10h
.eh_frame:0000000000012519                 db    0
.eh_frame:000000000001251A                 db    0
.eh_frame:000000000001251B                 db    0
.eh_frame:000000000001251C                 db 0F4h
.eh_frame:000000000001251D                 db  10h
.eh_frame:000000000001251E                 db    0
.eh_frame:000000000001251F                 db    0
.eh_frame:0000000000012520                 db  50h ; P
.eh_frame:0000000000012521                 db  7Fh ; 
.eh_frame:0000000000012522                 db 0FFh
.eh_frame:0000000000012523                 db 0FFh
.eh_frame:0000000000012524                 db  0Ch
.eh_frame:0000000000012525                 db    0
.eh_frame:0000000000012526                 db    0
.eh_frame:0000000000012527                 db    0
.eh_frame:0000000000012528                 db    0
.eh_frame:0000000000012529                 db    0
.eh_frame:000000000001252A                 db    0
.eh_frame:000000000001252B                 db    0
.eh_frame:000000000001252C                 db  10h
.eh_frame:000000000001252D                 db    0
.eh_frame:000000000001252E                 db    0
.eh_frame:000000000001252F                 db    0
.eh_frame:0000000000012530                 db    8
.eh_frame:0000000000012531                 db  11h
.eh_frame:0000000000012532                 db    0
.eh_frame:0000000000012533                 db    0
.eh_frame:0000000000012534                 db  4Ch ; L
.eh_frame:0000000000012535                 db  7Fh ; 
.eh_frame:0000000000012536                 db 0FFh
.eh_frame:0000000000012537                 db 0FFh
.eh_frame:0000000000012538                 db  17h
.eh_frame:0000000000012539                 db    0
.eh_frame:000000000001253A                 db    0
.eh_frame:000000000001253B                 db    0
.eh_frame:000000000001253C                 db    0
.eh_frame:000000000001253D                 db    0
.eh_frame:000000000001253E                 db    0
.eh_frame:000000000001253F                 db    0
.eh_frame:0000000000012540                 db  10h
.eh_frame:0000000000012541                 db    0
.eh_frame:0000000000012542                 db    0
.eh_frame:0000000000012543                 db    0
.eh_frame:0000000000012544                 db  1Ch
.eh_frame:0000000000012545                 db  11h
.eh_frame:0000000000012546                 db    0
.eh_frame:0000000000012547                 db    0
.eh_frame:0000000000012548                 db  58h ; X
.eh_frame:0000000000012549                 db  7Fh ; 
.eh_frame:000000000001254A                 db 0FFh
.eh_frame:000000000001254B                 db 0FFh
.eh_frame:000000000001254C                 db  13h
.eh_frame:000000000001254D                 db    0
.eh_frame:000000000001254E                 db    0
.eh_frame:000000000001254F                 db    0
.eh_frame:0000000000012550                 db    0
.eh_frame:0000000000012551                 db    0
.eh_frame:0000000000012552                 db    0
.eh_frame:0000000000012553                 db    0
.eh_frame:0000000000012554                 db  10h
.eh_frame:0000000000012555                 db    0
.eh_frame:0000000000012556                 db    0
.eh_frame:0000000000012557                 db    0
.eh_frame:0000000000012558                 db  30h ; 0
.eh_frame:0000000000012559                 db  11h
.eh_frame:000000000001255A                 db    0
.eh_frame:000000000001255B                 db    0
.eh_frame:000000000001255C                 db  64h ; d
.eh_frame:000000000001255D                 db  7Fh ; 
.eh_frame:000000000001255E                 db 0FFh
.eh_frame:000000000001255F                 db 0FFh
.eh_frame:0000000000012560                 db  0Ch
.eh_frame:0000000000012561                 db    0
.eh_frame:0000000000012562                 db    0
.eh_frame:0000000000012563                 db    0
.eh_frame:0000000000012564                 db    0
.eh_frame:0000000000012565                 db    0
.eh_frame:0000000000012566                 db    0
.eh_frame:0000000000012567                 db    0
.eh_frame:0000000000012568                 db  10h
.eh_frame:0000000000012569                 db    0
.eh_frame:000000000001256A                 db    0
.eh_frame:000000000001256B                 db    0
.eh_frame:000000000001256C                 db  44h ; D
.eh_frame:000000000001256D                 db  11h
.eh_frame:000000000001256E                 db    0
.eh_frame:000000000001256F                 db    0
.eh_frame:0000000000012570                 db  60h ; `
.eh_frame:0000000000012571                 db  7Fh ; 
.eh_frame:0000000000012572                 db 0FFh
.eh_frame:0000000000012573                 db 0FFh
.eh_frame:0000000000012574                 db  14h
.eh_frame:0000000000012575                 db    0
.eh_frame:0000000000012576                 db    0
.eh_frame:0000000000012577                 db    0
.eh_frame:0000000000012578                 db    0
.eh_frame:0000000000012579                 db    0
.eh_frame:000000000001257A                 db    0
.eh_frame:000000000001257B                 db    0
.eh_frame:000000000001257C                 db  10h
.eh_frame:000000000001257D                 db    0
.eh_frame:000000000001257E                 db    0
.eh_frame:000000000001257F                 db    0
.eh_frame:0000000000012580                 db  58h ; X
.eh_frame:0000000000012581                 db  11h
.eh_frame:0000000000012582                 db    0
.eh_frame:0000000000012583                 db    0
.eh_frame:0000000000012584                 db  6Ch ; l
.eh_frame:0000000000012585                 db  7Fh ; 
.eh_frame:0000000000012586                 db 0FFh
.eh_frame:0000000000012587                 db 0FFh
.eh_frame:0000000000012588                 db  13h
.eh_frame:0000000000012589                 db    0
.eh_frame:000000000001258A                 db    0
.eh_frame:000000000001258B                 db    0
.eh_frame:000000000001258C                 db    0
.eh_frame:000000000001258D                 db    0
.eh_frame:000000000001258E                 db    0
.eh_frame:000000000001258F                 db    0
.eh_frame:0000000000012590                 db  14h
.eh_frame:0000000000012591                 db    0
.eh_frame:0000000000012592                 db    0
.eh_frame:0000000000012593                 db    0
.eh_frame:0000000000012594                 db  6Ch ; l
.eh_frame:0000000000012595                 db  11h
.eh_frame:0000000000012596                 db    0
.eh_frame:0000000000012597                 db    0
.eh_frame:0000000000012598                 db  78h ; x
.eh_frame:0000000000012599                 db  7Fh ; 
.eh_frame:000000000001259A                 db 0FFh
.eh_frame:000000000001259B                 db 0FFh
.eh_frame:000000000001259C                 db  18h
.eh_frame:000000000001259D                 db    0
.eh_frame:000000000001259E                 db    0
.eh_frame:000000000001259F                 db    0
.eh_frame:00000000000125A0                 db    0
.eh_frame:00000000000125A1                 db    0
.eh_frame:00000000000125A2                 db    0
.eh_frame:00000000000125A3                 db    0
.eh_frame:00000000000125A4                 db    0
.eh_frame:00000000000125A5                 db    0
.eh_frame:00000000000125A6                 db    0
.eh_frame:00000000000125A7                 db    0
.eh_frame:00000000000125A8                 db  38h ; 8
.eh_frame:00000000000125A9                 db    0
.eh_frame:00000000000125AA                 db    0
.eh_frame:00000000000125AB                 db    0
.eh_frame:00000000000125AC                 db  84h
.eh_frame:00000000000125AD                 db  11h
.eh_frame:00000000000125AE                 db    0
.eh_frame:00000000000125AF                 db    0
.eh_frame:00000000000125B0                 db  80h
.eh_frame:00000000000125B1                 db  7Fh ; 
.eh_frame:00000000000125B2                 db 0FFh
.eh_frame:00000000000125B3                 db 0FFh
.eh_frame:00000000000125B4                 db  27h ; '
.eh_frame:00000000000125B5                 db    1
.eh_frame:00000000000125B6                 db    0
.eh_frame:00000000000125B7                 db    0
.eh_frame:00000000000125B8                 db    0
.eh_frame:00000000000125B9                 db  42h ; B
.eh_frame:00000000000125BA                 db  0Eh
.eh_frame:00000000000125BB                 db  10h
.eh_frame:00000000000125BC                 db  8Dh
.eh_frame:00000000000125BD                 db    2
.eh_frame:00000000000125BE                 db  42h ; B
.eh_frame:00000000000125BF                 db  0Eh
.eh_frame:00000000000125C0                 db  18h
.eh_frame:00000000000125C1                 db  8Ch
.eh_frame:00000000000125C2                 db    3
.eh_frame:00000000000125C3                 db  44h ; D
.eh_frame:00000000000125C4                 db  0Eh
.eh_frame:00000000000125C5                 db  20h
.eh_frame:00000000000125C6                 db  86h
.eh_frame:00000000000125C7                 db    4
.eh_frame:00000000000125C8                 db  41h ; A
.eh_frame:00000000000125C9                 db  0Eh
.eh_frame:00000000000125CA                 db  28h ; (
.eh_frame:00000000000125CB                 db  83h
.eh_frame:00000000000125CC                 db    5
.eh_frame:00000000000125CD                 db  4Fh ; O
.eh_frame:00000000000125CE                 db  0Eh
.eh_frame:00000000000125CF                 db 0E0h
.eh_frame:00000000000125D0                 db    2
.eh_frame:00000000000125D1                 db    2
.eh_frame:00000000000125D2                 db 0B5h
.eh_frame:00000000000125D3                 db  0Ah
.eh_frame:00000000000125D4                 db  0Eh
.eh_frame:00000000000125D5                 db  28h ; (
.eh_frame:00000000000125D6                 db  41h ; A
.eh_frame:00000000000125D7                 db  0Eh
.eh_frame:00000000000125D8                 db  20h
.eh_frame:00000000000125D9                 db  41h ; A
.eh_frame:00000000000125DA                 db  0Eh
.eh_frame:00000000000125DB                 db  18h
.eh_frame:00000000000125DC                 db  42h ; B
.eh_frame:00000000000125DD                 db  0Eh
.eh_frame:00000000000125DE                 db  10h
.eh_frame:00000000000125DF                 db  42h ; B
.eh_frame:00000000000125E0                 db  0Eh
.eh_frame:00000000000125E1                 db    8
.eh_frame:00000000000125E2                 db  45h ; E
.eh_frame:00000000000125E3                 db  0Bh
.eh_frame:00000000000125E4                 db  5Ch ; \
.eh_frame:00000000000125E5                 db    0
.eh_frame:00000000000125E6                 db    0
.eh_frame:00000000000125E7                 db    0
.eh_frame:00000000000125E8                 db 0C0h
.eh_frame:00000000000125E9                 db  11h
.eh_frame:00000000000125EA                 db    0
.eh_frame:00000000000125EB                 db    0
.eh_frame:00000000000125EC                 db  74h ; t
.eh_frame:00000000000125ED                 db  80h
.eh_frame:00000000000125EE                 db 0FFh
.eh_frame:00000000000125EF                 db 0FFh
.eh_frame:00000000000125F0                 db  92h
.eh_frame:00000000000125F1                 db    0
.eh_frame:00000000000125F2                 db    0
.eh_frame:00000000000125F3                 db    0
.eh_frame:00000000000125F4                 db    0
.eh_frame:00000000000125F5                 db  42h ; B
.eh_frame:00000000000125F6                 db  0Eh
.eh_frame:00000000000125F7                 db  10h
.eh_frame:00000000000125F8                 db  8Fh
.eh_frame:00000000000125F9                 db    2
.eh_frame:00000000000125FA                 db  42h ; B
.eh_frame:00000000000125FB                 db  0Eh
.eh_frame:00000000000125FC                 db  18h
.eh_frame:00000000000125FD                 db  8Eh
.eh_frame:00000000000125FE                 db    3
.eh_frame:00000000000125FF                 db  45h ; E
.eh_frame:0000000000012600                 db  0Eh
.eh_frame:0000000000012601                 db  20h
.eh_frame:0000000000012602                 db  8Dh
.eh_frame:0000000000012603                 db    4
.eh_frame:0000000000012604                 db  42h ; B
.eh_frame:0000000000012605                 db  0Eh
.eh_frame:0000000000012606                 db  28h ; (
.eh_frame:0000000000012607                 db  8Ch
.eh_frame:0000000000012608                 db    5
.eh_frame:0000000000012609                 db  41h ; A
.eh_frame:000000000001260A                 db  0Eh
.eh_frame:000000000001260B                 db  30h ; 0
.eh_frame:000000000001260C                 db  86h
.eh_frame:000000000001260D                 db    6
.eh_frame:000000000001260E                 db  41h ; A
.eh_frame:000000000001260F                 db  0Eh
.eh_frame:0000000000012610                 db  38h ; 8
.eh_frame:0000000000012611                 db  83h
.eh_frame:0000000000012612                 db    7
.eh_frame:0000000000012613                 db  4Ah ; J
.eh_frame:0000000000012614                 db  0Eh
.eh_frame:0000000000012615                 db  50h ; P
.eh_frame:0000000000012616                 db  76h ; v
.eh_frame:0000000000012617                 db  0Ah
.eh_frame:0000000000012618                 db  0Eh
.eh_frame:0000000000012619                 db  38h ; 8
.eh_frame:000000000001261A                 db  43h ; C
.eh_frame:000000000001261B                 db  0Eh
.eh_frame:000000000001261C                 db  30h ; 0
.eh_frame:000000000001261D                 db  41h ; A
.eh_frame:000000000001261E                 db  0Eh
.eh_frame:000000000001261F                 db  28h ; (
.eh_frame:0000000000012620                 db  42h ; B
.eh_frame:0000000000012621                 db  0Eh
.eh_frame:0000000000012622                 db  20h
.eh_frame:0000000000012623                 db  42h ; B
.eh_frame:0000000000012624                 db  0Eh
.eh_frame:0000000000012625                 db  18h
.eh_frame:0000000000012626                 db  42h ; B
.eh_frame:0000000000012627                 db  0Eh
.eh_frame:0000000000012628                 db  10h
.eh_frame:0000000000012629                 db  42h ; B
.eh_frame:000000000001262A                 db  0Eh
.eh_frame:000000000001262B                 db    8
.eh_frame:000000000001262C                 db  47h ; G
.eh_frame:000000000001262D                 db  0Bh
.eh_frame:000000000001262E                 db  5Ah ; Z
.eh_frame:000000000001262F                 db  0Eh
.eh_frame:0000000000012630                 db  38h ; 8
.eh_frame:0000000000012631                 db  4Ah ; J
.eh_frame:0000000000012632                 db  0Eh
.eh_frame:0000000000012633                 db  30h ; 0
.eh_frame:0000000000012634                 db  41h ; A
.eh_frame:0000000000012635                 db  0Eh
.eh_frame:0000000000012636                 db  28h ; (
.eh_frame:0000000000012637                 db  42h ; B
.eh_frame:0000000000012638                 db  0Eh
.eh_frame:0000000000012639                 db  20h
.eh_frame:000000000001263A                 db  42h ; B
.eh_frame:000000000001263B                 db  0Eh
.eh_frame:000000000001263C                 db  18h
.eh_frame:000000000001263D                 db  42h ; B
.eh_frame:000000000001263E                 db  0Eh
.eh_frame:000000000001263F                 db  10h
.eh_frame:0000000000012640                 db  42h ; B
.eh_frame:0000000000012641                 db  0Eh
.eh_frame:0000000000012642                 db    8
.eh_frame:0000000000012643                 db    0
.eh_frame:0000000000012644                 db  10h
.eh_frame:0000000000012645                 db    0
.eh_frame:0000000000012646                 db    0
.eh_frame:0000000000012647                 db    0
.eh_frame:0000000000012648                 db  20h
.eh_frame:0000000000012649                 db  12h
.eh_frame:000000000001264A                 db    0
.eh_frame:000000000001264B                 db    0
.eh_frame:000000000001264C                 db 0B4h
.eh_frame:000000000001264D                 db  80h
.eh_frame:000000000001264E                 db 0FFh
.eh_frame:000000000001264F                 db 0FFh
.eh_frame:0000000000012650                 db  12h
.eh_frame:0000000000012651                 db    0
.eh_frame:0000000000012652                 db    0
.eh_frame:0000000000012653                 db    0
.eh_frame:0000000000012654                 db    0
.eh_frame:0000000000012655                 db    0
.eh_frame:0000000000012656                 db    0
.eh_frame:0000000000012657                 db    0
.eh_frame:0000000000012658                 db  1Ch
.eh_frame:0000000000012659                 db    0
.eh_frame:000000000001265A                 db    0
.eh_frame:000000000001265B                 db    0
.eh_frame:000000000001265C                 db  34h ; 4
.eh_frame:000000000001265D                 db  12h
.eh_frame:000000000001265E                 db    0
.eh_frame:000000000001265F                 db    0
.eh_frame:0000000000012660                 db 0C0h
.eh_frame:0000000000012661                 db  80h
.eh_frame:0000000000012662                 db 0FFh
.eh_frame:0000000000012663                 db 0FFh
.eh_frame:0000000000012664                 db  4Ah ; J
.eh_frame:0000000000012665                 db    0
.eh_frame:0000000000012666                 db    0
.eh_frame:0000000000012667                 db    0
.eh_frame:0000000000012668                 db    0
.eh_frame:0000000000012669                 db  41h ; A
.eh_frame:000000000001266A                 db  0Eh
.eh_frame:000000000001266B                 db  10h
.eh_frame:000000000001266C                 db  83h
.eh_frame:000000000001266D                 db    2
.eh_frame:000000000001266E                 db  69h ; i
.eh_frame:000000000001266F                 db  0Ah
.eh_frame:0000000000012670                 db  0Eh
.eh_frame:0000000000012671                 db    8
.eh_frame:0000000000012672                 db  46h ; F
.eh_frame:0000000000012673                 db  0Bh
.eh_frame:0000000000012674                 db  59h ; Y
.eh_frame:0000000000012675                 db  0Eh
.eh_frame:0000000000012676                 db    8
.eh_frame:0000000000012677                 db    0
.eh_frame:0000000000012678                 db  10h
.eh_frame:0000000000012679                 db    0
.eh_frame:000000000001267A                 db    0
.eh_frame:000000000001267B                 db    0
.eh_frame:000000000001267C                 db  54h ; T
.eh_frame:000000000001267D                 db  12h
.eh_frame:000000000001267E                 db    0
.eh_frame:000000000001267F                 db    0
.eh_frame:0000000000012680                 db 0F0h
.eh_frame:0000000000012681                 db  80h
.eh_frame:0000000000012682                 db 0FFh
.eh_frame:0000000000012683                 db 0FFh
.eh_frame:0000000000012684                 db  19h
.eh_frame:0000000000012685                 db    0
.eh_frame:0000000000012686                 db    0
.eh_frame:0000000000012687                 db    0
.eh_frame:0000000000012688                 db    0
.eh_frame:0000000000012689                 db    0
.eh_frame:000000000001268A                 db    0
.eh_frame:000000000001268B                 db    0
.eh_frame:000000000001268C                 db  18h
.eh_frame:000000000001268D                 db    0
.eh_frame:000000000001268E                 db    0
.eh_frame:000000000001268F                 db    0
.eh_frame:0000000000012690                 db  68h ; h
.eh_frame:0000000000012691                 db  12h
.eh_frame:0000000000012692                 db    0
.eh_frame:0000000000012693                 db    0
.eh_frame:0000000000012694                 db 0FCh
.eh_frame:0000000000012695                 db  80h
.eh_frame:0000000000012696                 db 0FFh
.eh_frame:0000000000012697                 db 0FFh
.eh_frame:0000000000012698                 db  19h
.eh_frame:0000000000012699                 db    0
.eh_frame:000000000001269A                 db    0
.eh_frame:000000000001269B                 db    0
.eh_frame:000000000001269C                 db    0
.eh_frame:000000000001269D                 db  41h ; A
.eh_frame:000000000001269E                 db  0Eh
.eh_frame:000000000001269F                 db  10h
.eh_frame:00000000000126A0                 db  83h
.eh_frame:00000000000126A1                 db    2
.eh_frame:00000000000126A2                 db  53h ; S
.eh_frame:00000000000126A3                 db  0Eh
.eh_frame:00000000000126A4                 db    8
.eh_frame:00000000000126A5                 db    0
.eh_frame:00000000000126A6                 db    0
.eh_frame:00000000000126A7                 db    0
.eh_frame:00000000000126A8                 db  10h
.eh_frame:00000000000126A9                 db    1
.eh_frame:00000000000126AA                 db    0
.eh_frame:00000000000126AB                 db    0
.eh_frame:00000000000126AC                 db  84h
.eh_frame:00000000000126AD                 db  12h
.eh_frame:00000000000126AE                 db    0
.eh_frame:00000000000126AF                 db    0
.eh_frame:00000000000126B0                 db    0
.eh_frame:00000000000126B1                 db  81h
.eh_frame:00000000000126B2                 db 0FFh
.eh_frame:00000000000126B3                 db 0FFh
.eh_frame:00000000000126B4                 db  17h
.eh_frame:00000000000126B5                 db    4
.eh_frame:00000000000126B6                 db    0
.eh_frame:00000000000126B7                 db    0
.eh_frame:00000000000126B8                 db    0
.eh_frame:00000000000126B9                 db  42h ; B
.eh_frame:00000000000126BA                 db  0Eh
.eh_frame:00000000000126BB                 db  10h
.eh_frame:00000000000126BC                 db  8Fh
.eh_frame:00000000000126BD                 db    2
.eh_frame:00000000000126BE                 db  42h ; B
.eh_frame:00000000000126BF                 db  0Eh
.eh_frame:00000000000126C0                 db  18h
.eh_frame:00000000000126C1                 db  8Eh
.eh_frame:00000000000126C2                 db    3
.eh_frame:00000000000126C3                 db  42h ; B
.eh_frame:00000000000126C4                 db  0Eh
.eh_frame:00000000000126C5                 db  20h
.eh_frame:00000000000126C6                 db  8Dh
.eh_frame:00000000000126C7                 db    4
.eh_frame:00000000000126C8                 db  42h ; B
.eh_frame:00000000000126C9                 db  0Eh
.eh_frame:00000000000126CA                 db  28h ; (
.eh_frame:00000000000126CB                 db  8Ch
.eh_frame:00000000000126CC                 db    5
.eh_frame:00000000000126CD                 db  44h ; D
.eh_frame:00000000000126CE                 db  0Eh
.eh_frame:00000000000126CF                 db  30h ; 0
.eh_frame:00000000000126D0                 db  86h
.eh_frame:00000000000126D1                 db    6
.eh_frame:00000000000126D2                 db  41h ; A
.eh_frame:00000000000126D3                 db  0Eh
.eh_frame:00000000000126D4                 db  38h ; 8
.eh_frame:00000000000126D5                 db  83h
.eh_frame:00000000000126D6                 db    7
.eh_frame:00000000000126D7                 db  4Ah ; J
.eh_frame:00000000000126D8                 db  0Eh
.eh_frame:00000000000126D9                 db  60h ; `
.eh_frame:00000000000126DA                 db    2
.eh_frame:00000000000126DB                 db 0DDh
.eh_frame:00000000000126DC                 db  0Eh
.eh_frame:00000000000126DD                 db  68h ; h
.eh_frame:00000000000126DE                 db  57h ; W
.eh_frame:00000000000126DF                 db  0Eh
.eh_frame:00000000000126E0                 db  70h ; p
.eh_frame:00000000000126E1                 db  42h ; B
.eh_frame:00000000000126E2                 db  0Eh
.eh_frame:00000000000126E3                 db  78h ; x
.eh_frame:00000000000126E4                 db  42h ; B
.eh_frame:00000000000126E5                 db  0Eh
.eh_frame:00000000000126E6                 db  80h
.eh_frame:00000000000126E7                 db    1
.eh_frame:00000000000126E8                 db  42h ; B
.eh_frame:00000000000126E9                 db  0Eh
.eh_frame:00000000000126EA                 db  88h
.eh_frame:00000000000126EB                 db    1
.eh_frame:00000000000126EC                 db  42h ; B
.eh_frame:00000000000126ED                 db  0Eh
.eh_frame:00000000000126EE                 db  90h
.eh_frame:00000000000126EF                 db    1
.eh_frame:00000000000126F0                 db  53h ; S
.eh_frame:00000000000126F1                 db  0Eh
.eh_frame:00000000000126F2                 db  60h ; `
.eh_frame:00000000000126F3                 db  44h ; D
.eh_frame:00000000000126F4                 db  0Ah
.eh_frame:00000000000126F5                 db  0Eh
.eh_frame:00000000000126F6                 db  38h ; 8
.eh_frame:00000000000126F7                 db  41h ; A
.eh_frame:00000000000126F8                 db  0Eh
.eh_frame:00000000000126F9                 db  30h ; 0
.eh_frame:00000000000126FA                 db  41h ; A
.eh_frame:00000000000126FB                 db  0Eh
.eh_frame:00000000000126FC                 db  28h ; (
.eh_frame:00000000000126FD                 db  42h ; B
.eh_frame:00000000000126FE                 db  0Eh
.eh_frame:00000000000126FF                 db  20h
.eh_frame:0000000000012700                 db  42h ; B
.eh_frame:0000000000012701                 db  0Eh
.eh_frame:0000000000012702                 db  18h
.eh_frame:0000000000012703                 db  42h ; B
.eh_frame:0000000000012704                 db  0Eh
.eh_frame:0000000000012705                 db  10h
.eh_frame:0000000000012706                 db  42h ; B
.eh_frame:0000000000012707                 db  0Eh
.eh_frame:0000000000012708                 db    8
.eh_frame:0000000000012709                 db  44h ; D
.eh_frame:000000000001270A                 db  0Bh
.eh_frame:000000000001270B                 db    2
.eh_frame:000000000001270C                 db  78h ; x
.eh_frame:000000000001270D                 db  0Ah
.eh_frame:000000000001270E                 db  0Eh
.eh_frame:000000000001270F                 db  68h ; h
.eh_frame:0000000000012710                 db  48h ; H
.eh_frame:0000000000012711                 db  0Bh
.eh_frame:0000000000012712                 db  5Ah ; Z
.eh_frame:0000000000012713                 db  0Ah
.eh_frame:0000000000012714                 db  0Eh
.eh_frame:0000000000012715                 db  38h ; 8
.eh_frame:0000000000012716                 db  47h ; G
.eh_frame:0000000000012717                 db  0Eh
.eh_frame:0000000000012718                 db  30h ; 0
.eh_frame:0000000000012719                 db  41h ; A
.eh_frame:000000000001271A                 db  0Eh
.eh_frame:000000000001271B                 db  28h ; (
.eh_frame:000000000001271C                 db  42h ; B
.eh_frame:000000000001271D                 db  0Eh
.eh_frame:000000000001271E                 db  20h
.eh_frame:000000000001271F                 db  42h ; B
.eh_frame:0000000000012720                 db  0Eh
.eh_frame:0000000000012721                 db  18h
.eh_frame:0000000000012722                 db  42h ; B
.eh_frame:0000000000012723                 db  0Eh
.eh_frame:0000000000012724                 db  10h
.eh_frame:0000000000012725                 db  42h ; B
.eh_frame:0000000000012726                 db  0Eh
.eh_frame:0000000000012727                 db    8
.eh_frame:0000000000012728                 db  56h ; V
.eh_frame:0000000000012729                 db  0Bh
.eh_frame:000000000001272A                 db  5Eh ; ^
.eh_frame:000000000001272B                 db  0Ah
.eh_frame:000000000001272C                 db  0Eh
.eh_frame:000000000001272D                 db  38h ; 8
.eh_frame:000000000001272E                 db  52h ; R
.eh_frame:000000000001272F                 db  0Eh
.eh_frame:0000000000012730                 db  30h ; 0
.eh_frame:0000000000012731                 db  41h ; A
.eh_frame:0000000000012732                 db  0Eh
.eh_frame:0000000000012733                 db  28h ; (
.eh_frame:0000000000012734                 db  42h ; B
.eh_frame:0000000000012735                 db  0Eh
.eh_frame:0000000000012736                 db  20h
.eh_frame:0000000000012737                 db  42h ; B
.eh_frame:0000000000012738                 db  0Eh
.eh_frame:0000000000012739                 db  18h
.eh_frame:000000000001273A                 db  42h ; B
.eh_frame:000000000001273B                 db  0Eh
.eh_frame:000000000001273C                 db  10h
.eh_frame:000000000001273D                 db  42h ; B
.eh_frame:000000000001273E                 db  0Eh
.eh_frame:000000000001273F                 db    8
.eh_frame:0000000000012740                 db  4Fh ; O
.eh_frame:0000000000012741                 db  0Bh
.eh_frame:0000000000012742                 db  62h ; b
.eh_frame:0000000000012743                 db  0Ah
.eh_frame:0000000000012744                 db  0Eh
.eh_frame:0000000000012745                 db  38h ; 8
.eh_frame:0000000000012746                 db  50h ; P
.eh_frame:0000000000012747                 db  0Eh
.eh_frame:0000000000012748                 db  30h ; 0
.eh_frame:0000000000012749                 db  41h ; A
.eh_frame:000000000001274A                 db  0Eh
.eh_frame:000000000001274B                 db  28h ; (
.eh_frame:000000000001274C                 db  42h ; B
.eh_frame:000000000001274D                 db  0Eh
.eh_frame:000000000001274E                 db  20h
.eh_frame:000000000001274F                 db  42h ; B
.eh_frame:0000000000012750                 db  0Eh
.eh_frame:0000000000012751                 db  18h
.eh_frame:0000000000012752                 db  42h ; B
.eh_frame:0000000000012753                 db  0Eh
.eh_frame:0000000000012754                 db  10h
.eh_frame:0000000000012755                 db  42h ; B
.eh_frame:0000000000012756                 db  0Eh
.eh_frame:0000000000012757                 db    8
.eh_frame:0000000000012758                 db  55h ; U
.eh_frame:0000000000012759                 db  0Bh
.eh_frame:000000000001275A                 db  66h ; f
.eh_frame:000000000001275B                 db  0Eh
.eh_frame:000000000001275C                 db  68h ; h
.eh_frame:000000000001275D                 db  42h ; B
.eh_frame:000000000001275E                 db  0Eh
.eh_frame:000000000001275F                 db  70h ; p
.eh_frame:0000000000012760                 db  5Ch ; \
.eh_frame:0000000000012761                 db  0Eh
.eh_frame:0000000000012762                 db  68h ; h
.eh_frame:0000000000012763                 db  41h ; A
.eh_frame:0000000000012764                 db  0Eh
.eh_frame:0000000000012765                 db  60h ; `
.eh_frame:0000000000012766                 db  44h ; D
.eh_frame:0000000000012767                 db  0Ah
.eh_frame:0000000000012768                 db  0Eh
.eh_frame:0000000000012769                 db  38h ; 8
.eh_frame:000000000001276A                 db  41h ; A
.eh_frame:000000000001276B                 db  0Eh
.eh_frame:000000000001276C                 db  30h ; 0
.eh_frame:000000000001276D                 db  41h ; A
.eh_frame:000000000001276E                 db  0Eh
.eh_frame:000000000001276F                 db  28h ; (
.eh_frame:0000000000012770                 db  42h ; B
.eh_frame:0000000000012771                 db  0Eh
.eh_frame:0000000000012772                 db  20h
.eh_frame:0000000000012773                 db  42h ; B
.eh_frame:0000000000012774                 db  0Eh
.eh_frame:0000000000012775                 db  18h
.eh_frame:0000000000012776                 db  42h ; B
.eh_frame:0000000000012777                 db  0Eh
.eh_frame:0000000000012778                 db  10h
.eh_frame:0000000000012779                 db  42h ; B
.eh_frame:000000000001277A                 db  0Eh
.eh_frame:000000000001277B                 db    8
.eh_frame:000000000001277C                 db  45h ; E
.eh_frame:000000000001277D                 db  0Bh
.eh_frame:000000000001277E                 db  68h ; h
.eh_frame:000000000001277F                 db  0Ah
.eh_frame:0000000000012780                 db  0Eh
.eh_frame:0000000000012781                 db  68h ; h
.eh_frame:0000000000012782                 db  48h ; H
.eh_frame:0000000000012783                 db  0Bh
.eh_frame:0000000000012784                 db  72h ; r
.eh_frame:0000000000012785                 db  0Eh
.eh_frame:0000000000012786                 db  68h ; h
.eh_frame:0000000000012787                 db  45h ; E
.eh_frame:0000000000012788                 db  0Eh
.eh_frame:0000000000012789                 db  70h ; p
.eh_frame:000000000001278A                 db  42h ; B
.eh_frame:000000000001278B                 db  0Eh
.eh_frame:000000000001278C                 db  78h ; x
.eh_frame:000000000001278D                 db  42h ; B
.eh_frame:000000000001278E                 db  0Eh
.eh_frame:000000000001278F                 db  80h
.eh_frame:0000000000012790                 db    1
.eh_frame:0000000000012791                 db  5Eh ; ^
.eh_frame:0000000000012792                 db  0Eh
.eh_frame:0000000000012793                 db  60h ; `
.eh_frame:0000000000012794                 db  44h ; D
.eh_frame:0000000000012795                 db  0Ah
.eh_frame:0000000000012796                 db  0Eh
.eh_frame:0000000000012797                 db  38h ; 8
.eh_frame:0000000000012798                 db  41h ; A
.eh_frame:0000000000012799                 db  0Eh
.eh_frame:000000000001279A                 db  30h ; 0
.eh_frame:000000000001279B                 db  41h ; A
.eh_frame:000000000001279C                 db  0Eh
.eh_frame:000000000001279D                 db  28h ; (
.eh_frame:000000000001279E                 db  42h ; B
.eh_frame:000000000001279F                 db  0Eh
.eh_frame:00000000000127A0                 db  20h
.eh_frame:00000000000127A1                 db  42h ; B
.eh_frame:00000000000127A2                 db  0Eh
.eh_frame:00000000000127A3                 db  18h
.eh_frame:00000000000127A4                 db  42h ; B
.eh_frame:00000000000127A5                 db  0Eh
.eh_frame:00000000000127A6                 db  10h
.eh_frame:00000000000127A7                 db  42h ; B
.eh_frame:00000000000127A8                 db  0Eh
.eh_frame:00000000000127A9                 db    8
.eh_frame:00000000000127AA                 db  41h ; A
.eh_frame:00000000000127AB                 db  0Bh
.eh_frame:00000000000127AC                 db  79h ; y
.eh_frame:00000000000127AD                 db  0Ah
.eh_frame:00000000000127AE                 db  0Eh
.eh_frame:00000000000127AF                 db  68h ; h
.eh_frame:00000000000127B0                 db  42h ; B
.eh_frame:00000000000127B1                 db  0Eh
.eh_frame:00000000000127B2                 db  70h ; p
.eh_frame:00000000000127B3                 db  42h ; B
.eh_frame:00000000000127B4                 db  0Eh
.eh_frame:00000000000127B5                 db  78h ; x
.eh_frame:00000000000127B6                 db  42h ; B
.eh_frame:00000000000127B7                 db  0Eh
.eh_frame:00000000000127B8                 db  80h
.eh_frame:00000000000127B9                 db    1
.eh_frame:00000000000127BA                 db  51h ; Q
.eh_frame:00000000000127BB                 db  0Bh
.eh_frame:00000000000127BC                 db  10h
.eh_frame:00000000000127BD                 db    0
.eh_frame:00000000000127BE                 db    0
.eh_frame:00000000000127BF                 db    0
.eh_frame:00000000000127C0                 db  98h
.eh_frame:00000000000127C1                 db  13h
.eh_frame:00000000000127C2                 db    0
.eh_frame:00000000000127C3                 db    0
.eh_frame:00000000000127C4                 db  0Ch
.eh_frame:00000000000127C5                 db  84h
.eh_frame:00000000000127C6                 db 0FFh
.eh_frame:00000000000127C7                 db 0FFh
.eh_frame:00000000000127C8                 db  20h
.eh_frame:00000000000127C9                 db    0
.eh_frame:00000000000127CA                 db    0
.eh_frame:00000000000127CB                 db    0
.eh_frame:00000000000127CC                 db    0
.eh_frame:00000000000127CD                 db    0
.eh_frame:00000000000127CE                 db    0
.eh_frame:00000000000127CF                 db    0
.eh_frame:00000000000127D0                 db  18h
.eh_frame:00000000000127D1                 db    0
.eh_frame:00000000000127D2                 db    0
.eh_frame:00000000000127D3                 db    0
.eh_frame:00000000000127D4                 db 0ACh
.eh_frame:00000000000127D5                 db  13h
.eh_frame:00000000000127D6                 db    0
.eh_frame:00000000000127D7                 db    0
.eh_frame:00000000000127D8                 db  18h
.eh_frame:00000000000127D9                 db  84h
.eh_frame:00000000000127DA                 db 0FFh
.eh_frame:00000000000127DB                 db 0FFh
.eh_frame:00000000000127DC                 db  78h ; x
.eh_frame:00000000000127DD                 db    0
.eh_frame:00000000000127DE                 db    0
.eh_frame:00000000000127DF                 db    0
.eh_frame:00000000000127E0                 db    0
.eh_frame:00000000000127E1                 db  44h ; D
.eh_frame:00000000000127E2                 db  0Eh
.eh_frame:00000000000127E3                 db  70h ; p
.eh_frame:00000000000127E4                 db    2
.eh_frame:00000000000127E5                 db  60h ; `
.eh_frame:00000000000127E6                 db  0Ah
.eh_frame:00000000000127E7                 db  0Eh
.eh_frame:00000000000127E8                 db    8
.eh_frame:00000000000127E9                 db  41h ; A
.eh_frame:00000000000127EA                 db  0Bh
.eh_frame:00000000000127EB                 db    0
.eh_frame:00000000000127EC                 db  28h ; (
.eh_frame:00000000000127ED                 db    0
.eh_frame:00000000000127EE                 db    0
.eh_frame:00000000000127EF                 db    0
.eh_frame:00000000000127F0                 db 0C8h
.eh_frame:00000000000127F1                 db  13h
.eh_frame:00000000000127F2                 db    0
.eh_frame:00000000000127F3                 db    0
.eh_frame:00000000000127F4                 db  7Ch ; |
.eh_frame:00000000000127F5                 db  84h
.eh_frame:00000000000127F6                 db 0FFh
.eh_frame:00000000000127F7                 db 0FFh
.eh_frame:00000000000127F8                 db 0D5h
.eh_frame:00000000000127F9                 db    0
.eh_frame:00000000000127FA                 db    0
.eh_frame:00000000000127FB                 db    0
.eh_frame:00000000000127FC                 db    0
.eh_frame:00000000000127FD                 db  41h ; A
.eh_frame:00000000000127FE                 db  0Eh
.eh_frame:00000000000127FF                 db  10h
.eh_frame:0000000000012800                 db  86h
.eh_frame:0000000000012801                 db    2
.eh_frame:0000000000012802                 db  41h ; A
.eh_frame:0000000000012803                 db  0Eh
.eh_frame:0000000000012804                 db  18h
.eh_frame:0000000000012805                 db  83h
.eh_frame:0000000000012806                 db    3
.eh_frame:0000000000012807                 db  50h ; P
.eh_frame:0000000000012808                 db  0Eh
.eh_frame:0000000000012809                 db 0D0h
.eh_frame:000000000001280A                 db    1
.eh_frame:000000000001280B                 db    2
.eh_frame:000000000001280C                 db 0ABh
.eh_frame:000000000001280D                 db  0Ah
.eh_frame:000000000001280E                 db  0Eh
.eh_frame:000000000001280F                 db  18h
.eh_frame:0000000000012810                 db  41h ; A
.eh_frame:0000000000012811                 db  0Eh
.eh_frame:0000000000012812                 db  10h
.eh_frame:0000000000012813                 db  41h ; A
.eh_frame:0000000000012814                 db  0Eh
.eh_frame:0000000000012815                 db    8
.eh_frame:0000000000012816                 db  41h ; A
.eh_frame:0000000000012817                 db  0Bh
.eh_frame:0000000000012818                 db  1Ch
.eh_frame:0000000000012819                 db    0
.eh_frame:000000000001281A                 db    0
.eh_frame:000000000001281B                 db    0
.eh_frame:000000000001281C                 db 0F4h
.eh_frame:000000000001281D                 db  13h
.eh_frame:000000000001281E                 db    0
.eh_frame:000000000001281F                 db    0
.eh_frame:0000000000012820                 db  30h ; 0
.eh_frame:0000000000012821                 db  85h
.eh_frame:0000000000012822                 db 0FFh
.eh_frame:0000000000012823                 db 0FFh
.eh_frame:0000000000012824                 db  80h
.eh_frame:0000000000012825                 db    0
.eh_frame:0000000000012826                 db    0
.eh_frame:0000000000012827                 db    0
.eh_frame:0000000000012828                 db    0
.eh_frame:0000000000012829                 db  41h ; A
.eh_frame:000000000001282A                 db  0Eh
.eh_frame:000000000001282B                 db  10h
.eh_frame:000000000001282C                 db  83h
.eh_frame:000000000001282D                 db    2
.eh_frame:000000000001282E                 db    2
.eh_frame:000000000001282F                 db  7Ah ; z
.eh_frame:0000000000012830                 db  0Eh
.eh_frame:0000000000012831                 db    8
.eh_frame:0000000000012832                 db    0
.eh_frame:0000000000012833                 db    0
.eh_frame:0000000000012834                 db    0
.eh_frame:0000000000012835                 db    0
.eh_frame:0000000000012836                 db    0
.eh_frame:0000000000012837                 db    0
.eh_frame:0000000000012838                 db  18h
.eh_frame:0000000000012839                 db    0
.eh_frame:000000000001283A                 db    0
.eh_frame:000000000001283B                 db    0
.eh_frame:000000000001283C                 db  14h
.eh_frame:000000000001283D                 db  14h
.eh_frame:000000000001283E                 db    0
.eh_frame:000000000001283F                 db    0
.eh_frame:0000000000012840                 db  90h
.eh_frame:0000000000012841                 db  85h
.eh_frame:0000000000012842                 db 0FFh
.eh_frame:0000000000012843                 db 0FFh
.eh_frame:0000000000012844                 db  1Ah
.eh_frame:0000000000012845                 db    0
.eh_frame:0000000000012846                 db    0
.eh_frame:0000000000012847                 db    0
.eh_frame:0000000000012848                 db    0
.eh_frame:0000000000012849                 db  41h ; A
.eh_frame:000000000001284A                 db  0Eh
.eh_frame:000000000001284B                 db  10h
.eh_frame:000000000001284C                 db  83h
.eh_frame:000000000001284D                 db    2
.eh_frame:000000000001284E                 db  53h ; S
.eh_frame:000000000001284F                 db  0Ah
.eh_frame:0000000000012850                 db  0Eh
.eh_frame:0000000000012851                 db    8
.eh_frame:0000000000012852                 db  41h ; A
.eh_frame:0000000000012853                 db  0Bh
.eh_frame:0000000000012854                 db  10h
.eh_frame:0000000000012855                 db    0
.eh_frame:0000000000012856                 db    0
.eh_frame:0000000000012857                 db    0
.eh_frame:0000000000012858                 db  30h ; 0
.eh_frame:0000000000012859                 db  14h
.eh_frame:000000000001285A                 db    0
.eh_frame:000000000001285B                 db    0
.eh_frame:000000000001285C                 db  94h
.eh_frame:000000000001285D                 db  85h
.eh_frame:000000000001285E                 db 0FFh
.eh_frame:000000000001285F                 db 0FFh
.eh_frame:0000000000012860                 db  24h ; $
.eh_frame:0000000000012861                 db    0
.eh_frame:0000000000012862                 db    0
.eh_frame:0000000000012863                 db    0
.eh_frame:0000000000012864                 db    0
.eh_frame:0000000000012865                 db  5Fh ; _
.eh_frame:0000000000012866                 db  0Eh
.eh_frame:0000000000012867                 db  10h
.eh_frame:0000000000012868                 db  10h
.eh_frame:0000000000012869                 db    0
.eh_frame:000000000001286A                 db    0
.eh_frame:000000000001286B                 db    0
.eh_frame:000000000001286C                 db  44h ; D
.eh_frame:000000000001286D                 db  14h
.eh_frame:000000000001286E                 db    0
.eh_frame:000000000001286F                 db    0
.eh_frame:0000000000012870                 db 0B0h
.eh_frame:0000000000012871                 db  85h
.eh_frame:0000000000012872                 db 0FFh
.eh_frame:0000000000012873                 db 0FFh
.eh_frame:0000000000012874                 db    2
.eh_frame:0000000000012875                 db    0
.eh_frame:0000000000012876                 db    0
.eh_frame:0000000000012877                 db    0
.eh_frame:0000000000012878                 db    0
.eh_frame:0000000000012879                 db    0
.eh_frame:000000000001287A                 db    0
.eh_frame:000000000001287B                 db    0
.eh_frame:000000000001287C                 db  20h
.eh_frame:000000000001287D                 db    0
.eh_frame:000000000001287E                 db    0
.eh_frame:000000000001287F                 db    0
.eh_frame:0000000000012880                 db  58h ; X
.eh_frame:0000000000012881                 db  14h
.eh_frame:0000000000012882                 db    0
.eh_frame:0000000000012883                 db    0
.eh_frame:0000000000012884                 db 0ACh
.eh_frame:0000000000012885                 db  85h
.eh_frame:0000000000012886                 db 0FFh
.eh_frame:0000000000012887                 db 0FFh
.eh_frame:0000000000012888                 db  36h ; 6
.eh_frame:0000000000012889                 db    0
.eh_frame:000000000001288A                 db    0
.eh_frame:000000000001288B                 db    0
.eh_frame:000000000001288C                 db    0
.eh_frame:000000000001288D                 db  44h ; D
.eh_frame:000000000001288E                 db  0Eh
.eh_frame:000000000001288F                 db  10h
.eh_frame:0000000000012890                 db  83h
.eh_frame:0000000000012891                 db    2
.eh_frame:0000000000012892                 db  5Dh ; ]
.eh_frame:0000000000012893                 db  0Ah
.eh_frame:0000000000012894                 db  0Eh
.eh_frame:0000000000012895                 db    8
.eh_frame:0000000000012896                 db  47h ; G
.eh_frame:0000000000012897                 db  0Bh
.eh_frame:0000000000012898                 db  48h ; H
.eh_frame:0000000000012899                 db  0Ah
.eh_frame:000000000001289A                 db  0Eh
.eh_frame:000000000001289B                 db    8
.eh_frame:000000000001289C                 db  41h ; A
.eh_frame:000000000001289D                 db  0Bh
.eh_frame:000000000001289E                 db    0
.eh_frame:000000000001289F                 db    0
.eh_frame:00000000000128A0                 db  10h
.eh_frame:00000000000128A1                 db    0
.eh_frame:00000000000128A2                 db    0
.eh_frame:00000000000128A3                 db    0
.eh_frame:00000000000128A4                 db  7Ch ; |
.eh_frame:00000000000128A5                 db  14h
.eh_frame:00000000000128A6                 db    0
.eh_frame:00000000000128A7                 db    0
.eh_frame:00000000000128A8                 db 0C8h
.eh_frame:00000000000128A9                 db  85h
.eh_frame:00000000000128AA                 db 0FFh
.eh_frame:00000000000128AB                 db 0FFh
.eh_frame:00000000000128AC                 db  24h ; $
.eh_frame:00000000000128AD                 db    0
.eh_frame:00000000000128AE                 db    0
.eh_frame:00000000000128AF                 db    0
.eh_frame:00000000000128B0                 db    0
.eh_frame:00000000000128B1                 db  5Fh ; _
.eh_frame:00000000000128B2                 db  0Eh
.eh_frame:00000000000128B3                 db  10h
.eh_frame:00000000000128B4                 db  14h
.eh_frame:00000000000128B5                 db    0
.eh_frame:00000000000128B6                 db    0
.eh_frame:00000000000128B7                 db    0
.eh_frame:00000000000128B8                 db  90h
.eh_frame:00000000000128B9                 db  14h
.eh_frame:00000000000128BA                 db    0
.eh_frame:00000000000128BB                 db    0
.eh_frame:00000000000128BC                 db 0E4h
.eh_frame:00000000000128BD                 db  85h
.eh_frame:00000000000128BE                 db 0FFh
.eh_frame:00000000000128BF                 db 0FFh
.eh_frame:00000000000128C0                 db  82h
.eh_frame:00000000000128C1                 db    0
.eh_frame:00000000000128C2                 db    0
.eh_frame:00000000000128C3                 db    0
.eh_frame:00000000000128C4                 db    0
.eh_frame:00000000000128C5                 db    2
.eh_frame:00000000000128C6                 db  5Fh ; _
.eh_frame:00000000000128C7                 db  0Eh
.eh_frame:00000000000128C8                 db  10h
.eh_frame:00000000000128C9                 db  49h ; I
.eh_frame:00000000000128CA                 db  0Eh
.eh_frame:00000000000128CB                 db    8
.eh_frame:00000000000128CC                 db  14h
.eh_frame:00000000000128CD                 db    0
.eh_frame:00000000000128CE                 db    0
.eh_frame:00000000000128CF                 db    0
.eh_frame:00000000000128D0                 db 0A8h
.eh_frame:00000000000128D1                 db  14h
.eh_frame:00000000000128D2                 db    0
.eh_frame:00000000000128D3                 db    0
.eh_frame:00000000000128D4                 db  5Ch ; \
.eh_frame:00000000000128D5                 db  86h
.eh_frame:00000000000128D6                 db 0FFh
.eh_frame:00000000000128D7                 db 0FFh
.eh_frame:00000000000128D8                 db  4Ah ; J
.eh_frame:00000000000128D9                 db    0
.eh_frame:00000000000128DA                 db    0
.eh_frame:00000000000128DB                 db    0
.eh_frame:00000000000128DC                 db    0
.eh_frame:00000000000128DD                 db    2
.eh_frame:00000000000128DE                 db  45h ; E
.eh_frame:00000000000128DF                 db  0Eh
.eh_frame:00000000000128E0                 db  10h
.eh_frame:00000000000128E1                 db    0
.eh_frame:00000000000128E2                 db    0
.eh_frame:00000000000128E3                 db    0
.eh_frame:00000000000128E4                 db  18h
.eh_frame:00000000000128E5                 db    0
.eh_frame:00000000000128E6                 db    0
.eh_frame:00000000000128E7                 db    0
.eh_frame:00000000000128E8                 db 0C0h
.eh_frame:00000000000128E9                 db  14h
.eh_frame:00000000000128EA                 db    0
.eh_frame:00000000000128EB                 db    0
.eh_frame:00000000000128EC                 db  94h
.eh_frame:00000000000128ED                 db  86h
.eh_frame:00000000000128EE                 db 0FFh
.eh_frame:00000000000128EF                 db 0FFh
.eh_frame:00000000000128F0                 db  17h
.eh_frame:00000000000128F1                 db    0
.eh_frame:00000000000128F2                 db    0
.eh_frame:00000000000128F3                 db    0
.eh_frame:00000000000128F4                 db    0
.eh_frame:00000000000128F5                 db  41h ; A
.eh_frame:00000000000128F6                 db  0Eh
.eh_frame:00000000000128F7                 db  10h
.eh_frame:00000000000128F8                 db  83h
.eh_frame:00000000000128F9                 db    2
.eh_frame:00000000000128FA                 db  51h ; Q
.eh_frame:00000000000128FB                 db  0Eh
.eh_frame:00000000000128FC                 db    8
.eh_frame:00000000000128FD                 db    0
.eh_frame:00000000000128FE                 db    0
.eh_frame:00000000000128FF                 db    0
.eh_frame:0000000000012900                 db  18h
.eh_frame:0000000000012901                 db    0
.eh_frame:0000000000012902                 db    0
.eh_frame:0000000000012903                 db    0
.eh_frame:0000000000012904                 db 0DCh
.eh_frame:0000000000012905                 db  14h
.eh_frame:0000000000012906                 db    0
.eh_frame:0000000000012907                 db    0
.eh_frame:0000000000012908                 db  98h
.eh_frame:0000000000012909                 db  86h
.eh_frame:000000000001290A                 db 0FFh
.eh_frame:000000000001290B                 db 0FFh
.eh_frame:000000000001290C                 db  2Eh ; .
.eh_frame:000000000001290D                 db    0
.eh_frame:000000000001290E                 db    0
.eh_frame:000000000001290F                 db    0
.eh_frame:0000000000012910                 db    0
.eh_frame:0000000000012911                 db  47h ; G
.eh_frame:0000000000012912                 db  0Eh
.eh_frame:0000000000012913                 db  10h
.eh_frame:0000000000012914                 db  61h ; a
.eh_frame:0000000000012915                 db  0Ah
.eh_frame:0000000000012916                 db  0Eh
.eh_frame:0000000000012917                 db    8
.eh_frame:0000000000012918                 db  41h ; A
.eh_frame:0000000000012919                 db  0Bh
.eh_frame:000000000001291A                 db    0
.eh_frame:000000000001291B                 db    0
.eh_frame:000000000001291C                 db  24h ; $
.eh_frame:000000000001291D                 db    0
.eh_frame:000000000001291E                 db    0
.eh_frame:000000000001291F                 db    0
.eh_frame:0000000000012920                 db 0F8h
.eh_frame:0000000000012921                 db  14h
.eh_frame:0000000000012922                 db    0
.eh_frame:0000000000012923                 db    0
.eh_frame:0000000000012924                 db 0ACh
.eh_frame:0000000000012925                 db  86h
.eh_frame:0000000000012926                 db 0FFh
.eh_frame:0000000000012927                 db 0FFh
.eh_frame:0000000000012928                 db  28h ; (
.eh_frame:0000000000012929                 db    0
.eh_frame:000000000001292A                 db    0
.eh_frame:000000000001292B                 db    0
.eh_frame:000000000001292C                 db    0
.eh_frame:000000000001292D                 db  41h ; A
.eh_frame:000000000001292E                 db  0Eh
.eh_frame:000000000001292F                 db  10h
.eh_frame:0000000000012930                 db  86h
.eh_frame:0000000000012931                 db    2
.eh_frame:0000000000012932                 db  41h ; A
.eh_frame:0000000000012933                 db  0Eh
.eh_frame:0000000000012934                 db  18h
.eh_frame:0000000000012935                 db  83h
.eh_frame:0000000000012936                 db    3
.eh_frame:0000000000012937                 db  4Dh ; M
.eh_frame:0000000000012938                 db  0Eh
.eh_frame:0000000000012939                 db  20h
.eh_frame:000000000001293A                 db  49h ; I
.eh_frame:000000000001293B                 db  0Eh
.eh_frame:000000000001293C                 db  18h
.eh_frame:000000000001293D                 db  47h ; G
.eh_frame:000000000001293E                 db  0Eh
.eh_frame:000000000001293F                 db  10h
.eh_frame:0000000000012940                 db  41h ; A
.eh_frame:0000000000012941                 db  0Eh
.eh_frame:0000000000012942                 db    8
.eh_frame:0000000000012943                 db    0
.eh_frame:0000000000012944                 db  18h
.eh_frame:0000000000012945                 db    0
.eh_frame:0000000000012946                 db    0
.eh_frame:0000000000012947                 db    0
.eh_frame:0000000000012948                 db  20h
.eh_frame:0000000000012949                 db  15h
.eh_frame:000000000001294A                 db    0
.eh_frame:000000000001294B                 db    0
.eh_frame:000000000001294C                 db 0B4h
.eh_frame:000000000001294D                 db  86h
.eh_frame:000000000001294E                 db 0FFh
.eh_frame:000000000001294F                 db 0FFh
.eh_frame:0000000000012950                 db  13h
.eh_frame:0000000000012951                 db    0
.eh_frame:0000000000012952                 db    0
.eh_frame:0000000000012953                 db    0
.eh_frame:0000000000012954                 db    0
.eh_frame:0000000000012955                 db  41h ; A
.eh_frame:0000000000012956                 db  0Eh
.eh_frame:0000000000012957                 db  10h
.eh_frame:0000000000012958                 db  83h
.eh_frame:0000000000012959                 db    2
.eh_frame:000000000001295A                 db  50h ; P
.eh_frame:000000000001295B                 db  0Eh
.eh_frame:000000000001295C                 db    8
.eh_frame:000000000001295D                 db    0
.eh_frame:000000000001295E                 db    0
.eh_frame:000000000001295F                 db    0
.eh_frame:0000000000012960                 db  14h
.eh_frame:0000000000012961                 db    0
.eh_frame:0000000000012962                 db    0
.eh_frame:0000000000012963                 db    0
.eh_frame:0000000000012964                 db  3Ch ; <
.eh_frame:0000000000012965                 db  15h
.eh_frame:0000000000012966                 db    0
.eh_frame:0000000000012967                 db    0
.eh_frame:0000000000012968                 db 0B8h
.eh_frame:0000000000012969                 db  86h
.eh_frame:000000000001296A                 db 0FFh
.eh_frame:000000000001296B                 db 0FFh
.eh_frame:000000000001296C                 db  35h ; 5
.eh_frame:000000000001296D                 db    0
.eh_frame:000000000001296E                 db    0
.eh_frame:000000000001296F                 db    0
.eh_frame:0000000000012970                 db    0
.eh_frame:0000000000012971                 db  4Bh ; K
.eh_frame:0000000000012972                 db  0Eh
.eh_frame:0000000000012973                 db  10h
.eh_frame:0000000000012974                 db    0
.eh_frame:0000000000012975                 db    0
.eh_frame:0000000000012976                 db    0
.eh_frame:0000000000012977                 db    0
.eh_frame:0000000000012978                 db  1Ch
.eh_frame:0000000000012979                 db    0
.eh_frame:000000000001297A                 db    0
.eh_frame:000000000001297B                 db    0
.eh_frame:000000000001297C                 db  54h ; T
.eh_frame:000000000001297D                 db  15h
.eh_frame:000000000001297E                 db    0
.eh_frame:000000000001297F                 db    0
.eh_frame:0000000000012980                 db 0E0h
.eh_frame:0000000000012981                 db  86h
.eh_frame:0000000000012982                 db 0FFh
.eh_frame:0000000000012983                 db 0FFh
.eh_frame:0000000000012984                 db  2Fh ; /
.eh_frame:0000000000012985                 db    0
.eh_frame:0000000000012986                 db    0
.eh_frame:0000000000012987                 db    0
.eh_frame:0000000000012988                 db    0
.eh_frame:0000000000012989                 db  41h ; A
.eh_frame:000000000001298A                 db  0Eh
.eh_frame:000000000001298B                 db  10h
.eh_frame:000000000001298C                 db  83h
.eh_frame:000000000001298D                 db    2
.eh_frame:000000000001298E                 db  55h ; U
.eh_frame:000000000001298F                 db  0Ah
.eh_frame:0000000000012990                 db  0Eh
.eh_frame:0000000000012991                 db    8
.eh_frame:0000000000012992                 db  4Ah ; J
.eh_frame:0000000000012993                 db  0Bh
.eh_frame:0000000000012994                 db    0
.eh_frame:0000000000012995                 db    0
.eh_frame:0000000000012996                 db    0
.eh_frame:0000000000012997                 db    0
.eh_frame:0000000000012998                 db  24h ; $
.eh_frame:0000000000012999                 db    0
.eh_frame:000000000001299A                 db    0
.eh_frame:000000000001299B                 db    0
.eh_frame:000000000001299C                 db  74h ; t
.eh_frame:000000000001299D                 db  15h
.eh_frame:000000000001299E                 db    0
.eh_frame:000000000001299F                 db    0
.eh_frame:00000000000129A0                 db 0F0h
.eh_frame:00000000000129A1                 db  86h
.eh_frame:00000000000129A2                 db 0FFh
.eh_frame:00000000000129A3                 db 0FFh
.eh_frame:00000000000129A4                 db 0ACh
.eh_frame:00000000000129A5                 db    0
.eh_frame:00000000000129A6                 db    0
.eh_frame:00000000000129A7                 db    0
.eh_frame:00000000000129A8                 db    0
.eh_frame:00000000000129A9                 db  42h ; B
.eh_frame:00000000000129AA                 db  0Eh
.eh_frame:00000000000129AB                 db  10h
.eh_frame:00000000000129AC                 db  8Dh
.eh_frame:00000000000129AD                 db    2
.eh_frame:00000000000129AE                 db  42h ; B
.eh_frame:00000000000129AF                 db  0Eh
.eh_frame:00000000000129B0                 db  18h
.eh_frame:00000000000129B1                 db  8Ch
.eh_frame:00000000000129B2                 db    3
.eh_frame:00000000000129B3                 db  44h ; D
.eh_frame:00000000000129B4                 db  0Eh
.eh_frame:00000000000129B5                 db  20h
.eh_frame:00000000000129B6                 db  86h
.eh_frame:00000000000129B7                 db    4
.eh_frame:00000000000129B8                 db  41h ; A
.eh_frame:00000000000129B9                 db  0Eh
.eh_frame:00000000000129BA                 db  28h ; (
.eh_frame:00000000000129BB                 db  83h
.eh_frame:00000000000129BC                 db    5
.eh_frame:00000000000129BD                 db  47h ; G
.eh_frame:00000000000129BE                 db  0Eh
.eh_frame:00000000000129BF                 db  40h ; @
.eh_frame:00000000000129C0                 db  4Ch ; L
.eh_frame:00000000000129C1                 db    0
.eh_frame:00000000000129C2                 db    0
.eh_frame:00000000000129C3                 db    0
.eh_frame:00000000000129C4                 db  9Ch
.eh_frame:00000000000129C5                 db  15h
.eh_frame:00000000000129C6                 db    0
.eh_frame:00000000000129C7                 db    0
.eh_frame:00000000000129C8                 db  78h ; x
.eh_frame:00000000000129C9                 db  87h
.eh_frame:00000000000129CA                 db 0FFh
.eh_frame:00000000000129CB                 db 0FFh
.eh_frame:00000000000129CC                 db  1Ch
.eh_frame:00000000000129CD                 db    4
.eh_frame:00000000000129CE                 db    0
.eh_frame:00000000000129CF                 db    0
.eh_frame:00000000000129D0                 db    0
.eh_frame:00000000000129D1                 db  42h ; B
.eh_frame:00000000000129D2                 db  0Eh
.eh_frame:00000000000129D3                 db  10h
.eh_frame:00000000000129D4                 db  8Fh
.eh_frame:00000000000129D5                 db    2
.eh_frame:00000000000129D6                 db  42h ; B
.eh_frame:00000000000129D7                 db  0Eh
.eh_frame:00000000000129D8                 db  18h
.eh_frame:00000000000129D9                 db  8Eh
.eh_frame:00000000000129DA                 db    3
.eh_frame:00000000000129DB                 db  42h ; B
.eh_frame:00000000000129DC                 db  0Eh
.eh_frame:00000000000129DD                 db  20h
.eh_frame:00000000000129DE                 db  8Dh
.eh_frame:00000000000129DF                 db    4
.eh_frame:00000000000129E0                 db  42h ; B
.eh_frame:00000000000129E1                 db  0Eh
.eh_frame:00000000000129E2                 db  28h ; (
.eh_frame:00000000000129E3                 db  8Ch
.eh_frame:00000000000129E4                 db    5
.eh_frame:00000000000129E5                 db  41h ; A
.eh_frame:00000000000129E6                 db  0Eh
.eh_frame:00000000000129E7                 db  30h ; 0
.eh_frame:00000000000129E8                 db  86h
.eh_frame:00000000000129E9                 db    6
.eh_frame:00000000000129EA                 db  41h ; A
.eh_frame:00000000000129EB                 db  0Eh
.eh_frame:00000000000129EC                 db  38h ; 8
.eh_frame:00000000000129ED                 db  83h
.eh_frame:00000000000129EE                 db    7
.eh_frame:00000000000129EF                 db  44h ; D
.eh_frame:00000000000129F0                 db  0Eh
.eh_frame:00000000000129F1                 db  60h ; `
.eh_frame:00000000000129F2                 db    2
.eh_frame:00000000000129F3                 db 0E9h
.eh_frame:00000000000129F4                 db  0Ah
.eh_frame:00000000000129F5                 db  0Eh
.eh_frame:00000000000129F6                 db  38h ; 8
.eh_frame:00000000000129F7                 db  41h ; A
.eh_frame:00000000000129F8                 db  0Eh
.eh_frame:00000000000129F9                 db  30h ; 0
.eh_frame:00000000000129FA                 db  41h ; A
.eh_frame:00000000000129FB                 db  0Eh
.eh_frame:00000000000129FC                 db  28h ; (
.eh_frame:00000000000129FD                 db  42h ; B
.eh_frame:00000000000129FE                 db  0Eh
.eh_frame:00000000000129FF                 db  20h
.eh_frame:0000000000012A00                 db  42h ; B
.eh_frame:0000000000012A01                 db  0Eh
.eh_frame:0000000000012A02                 db  18h
.eh_frame:0000000000012A03                 db  42h ; B
.eh_frame:0000000000012A04                 db  0Eh
.eh_frame:0000000000012A05                 db  10h
.eh_frame:0000000000012A06                 db  42h ; B
.eh_frame:0000000000012A07                 db  0Eh
.eh_frame:0000000000012A08                 db    8
.eh_frame:0000000000012A09                 db  47h ; G
.eh_frame:0000000000012A0A                 db  0Bh
.eh_frame:0000000000012A0B                 db    0
.eh_frame:0000000000012A0C                 db    0
.eh_frame:0000000000012A0D                 db    0
.eh_frame:0000000000012A0E                 db    0
.eh_frame:0000000000012A0F                 db    0
.eh_frame:0000000000012A10                 db  1Ch
.eh_frame:0000000000012A11                 db    0
.eh_frame:0000000000012A12                 db    0
.eh_frame:0000000000012A13                 db    0
.eh_frame:0000000000012A14                 db 0ECh
.eh_frame:0000000000012A15                 db  15h
.eh_frame:0000000000012A16                 db    0
.eh_frame:0000000000012A17                 db    0
.eh_frame:0000000000012A18                 db  48h ; H
.eh_frame:0000000000012A19                 db  8Bh
.eh_frame:0000000000012A1A                 db 0FFh
.eh_frame:0000000000012A1B                 db 0FFh
.eh_frame:0000000000012A1C                 db 0B1h
.eh_frame:0000000000012A1D                 db    0
.eh_frame:0000000000012A1E                 db    0
.eh_frame:0000000000012A1F                 db    0
.eh_frame:0000000000012A20                 db    0
.eh_frame:0000000000012A21                 db  47h ; G
.eh_frame:0000000000012A22                 db  0Eh
.eh_frame:0000000000012A23                 db 0E0h
.eh_frame:0000000000012A24                 db    1
.eh_frame:0000000000012A25                 db    2
.eh_frame:0000000000012A26                 db 0A4h
.eh_frame:0000000000012A27                 db  0Ah
.eh_frame:0000000000012A28                 db  0Eh
.eh_frame:0000000000012A29                 db    8
.eh_frame:0000000000012A2A                 db  41h ; A
.eh_frame:0000000000012A2B                 db  0Bh
.eh_frame:0000000000012A2C                 db    0
.eh_frame:0000000000012A2D                 db    0
.eh_frame:0000000000012A2E                 db    0
.eh_frame:0000000000012A2F                 db    0
.eh_frame:0000000000012A30                 db  18h
.eh_frame:0000000000012A31                 db    0
.eh_frame:0000000000012A32                 db    0
.eh_frame:0000000000012A33                 db    0
.eh_frame:0000000000012A34                 db  0Ch
.eh_frame:0000000000012A35                 db  16h
.eh_frame:0000000000012A36                 db    0
.eh_frame:0000000000012A37                 db    0
.eh_frame:0000000000012A38                 db 0E8h
.eh_frame:0000000000012A39                 db  8Bh
.eh_frame:0000000000012A3A                 db 0FFh
.eh_frame:0000000000012A3B                 db 0FFh
.eh_frame:0000000000012A3C                 db  41h ; A
.eh_frame:0000000000012A3D                 db    0
.eh_frame:0000000000012A3E                 db    0
.eh_frame:0000000000012A3F                 db    0
.eh_frame:0000000000012A40                 db    0
.eh_frame:0000000000012A41                 db  4Ah ; J
.eh_frame:0000000000012A42                 db  0Eh
.eh_frame:0000000000012A43                 db  10h
.eh_frame:0000000000012A44                 db  4Dh ; M
.eh_frame:0000000000012A45                 db  0Eh
.eh_frame:0000000000012A46                 db    8
.eh_frame:0000000000012A47                 db  4Bh ; K
.eh_frame:0000000000012A48                 db  0Eh
.eh_frame:0000000000012A49                 db  10h
.eh_frame:0000000000012A4A                 db    0
.eh_frame:0000000000012A4B                 db    0
.eh_frame:0000000000012A4C                 db  28h ; (
.eh_frame:0000000000012A4D                 db    0
.eh_frame:0000000000012A4E                 db    0
.eh_frame:0000000000012A4F                 db    0
.eh_frame:0000000000012A50                 db  28h ; (
.eh_frame:0000000000012A51                 db  16h
.eh_frame:0000000000012A52                 db    0
.eh_frame:0000000000012A53                 db    0
.eh_frame:0000000000012A54                 db  1Ch
.eh_frame:0000000000012A55                 db  8Ch
.eh_frame:0000000000012A56                 db 0FFh
.eh_frame:0000000000012A57                 db 0FFh
.eh_frame:0000000000012A58                 db  37h ; 7
.eh_frame:0000000000012A59                 db    0
.eh_frame:0000000000012A5A                 db    0
.eh_frame:0000000000012A5B                 db    0
.eh_frame:0000000000012A5C                 db    0
.eh_frame:0000000000012A5D                 db  41h ; A
.eh_frame:0000000000012A5E                 db  0Eh
.eh_frame:0000000000012A5F                 db  10h
.eh_frame:0000000000012A60                 db  86h
.eh_frame:0000000000012A61                 db    2
.eh_frame:0000000000012A62                 db  41h ; A
.eh_frame:0000000000012A63                 db  0Eh
.eh_frame:0000000000012A64                 db  18h
.eh_frame:0000000000012A65                 db  83h
.eh_frame:0000000000012A66                 db    3
.eh_frame:0000000000012A67                 db  4Eh ; N
.eh_frame:0000000000012A68                 db  0Eh
.eh_frame:0000000000012A69                 db  20h
.eh_frame:0000000000012A6A                 db  5Dh ; ]
.eh_frame:0000000000012A6B                 db  0Ah
.eh_frame:0000000000012A6C                 db  0Eh
.eh_frame:0000000000012A6D                 db  18h
.eh_frame:0000000000012A6E                 db  41h ; A
.eh_frame:0000000000012A6F                 db  0Eh
.eh_frame:0000000000012A70                 db  10h
.eh_frame:0000000000012A71                 db  41h ; A
.eh_frame:0000000000012A72                 db  0Eh
.eh_frame:0000000000012A73                 db    8
.eh_frame:0000000000012A74                 db  41h ; A
.eh_frame:0000000000012A75                 db  0Bh
.eh_frame:0000000000012A76                 db    0
.eh_frame:0000000000012A77                 db    0
.eh_frame:0000000000012A78                 db  4Ch ; L
.eh_frame:0000000000012A79                 db    0
.eh_frame:0000000000012A7A                 db    0
.eh_frame:0000000000012A7B                 db    0
.eh_frame:0000000000012A7C                 db  54h ; T
.eh_frame:0000000000012A7D                 db  16h
.eh_frame:0000000000012A7E                 db    0
.eh_frame:0000000000012A7F                 db    0
.eh_frame:0000000000012A80                 db  30h ; 0
.eh_frame:0000000000012A81                 db  8Ch
.eh_frame:0000000000012A82                 db 0FFh
.eh_frame:0000000000012A83                 db 0FFh
.eh_frame:0000000000012A84                 db 0D2h
.eh_frame:0000000000012A85                 db    2
.eh_frame:0000000000012A86                 db    0
.eh_frame:0000000000012A87                 db    0
.eh_frame:0000000000012A88                 db    0
.eh_frame:0000000000012A89                 db  42h ; B
.eh_frame:0000000000012A8A                 db  0Eh
.eh_frame:0000000000012A8B                 db  10h
.eh_frame:0000000000012A8C                 db  8Fh
.eh_frame:0000000000012A8D                 db    2
.eh_frame:0000000000012A8E                 db  42h ; B
.eh_frame:0000000000012A8F                 db  0Eh
.eh_frame:0000000000012A90                 db  18h
.eh_frame:0000000000012A91                 db  8Eh
.eh_frame:0000000000012A92                 db    3
.eh_frame:0000000000012A93                 db  42h ; B
.eh_frame:0000000000012A94                 db  0Eh
.eh_frame:0000000000012A95                 db  20h
.eh_frame:0000000000012A96                 db  8Dh
.eh_frame:0000000000012A97                 db    4
.eh_frame:0000000000012A98                 db  42h ; B
.eh_frame:0000000000012A99                 db  0Eh
.eh_frame:0000000000012A9A                 db  28h ; (
.eh_frame:0000000000012A9B                 db  8Ch
.eh_frame:0000000000012A9C                 db    5
.eh_frame:0000000000012A9D                 db  41h ; A
.eh_frame:0000000000012A9E                 db  0Eh
.eh_frame:0000000000012A9F                 db  30h ; 0
.eh_frame:0000000000012AA0                 db  86h
.eh_frame:0000000000012AA1                 db    6
.eh_frame:0000000000012AA2                 db  41h ; A
.eh_frame:0000000000012AA3                 db  0Eh
.eh_frame:0000000000012AA4                 db  38h ; 8
.eh_frame:0000000000012AA5                 db  83h
.eh_frame:0000000000012AA6                 db    7
.eh_frame:0000000000012AA7                 db  47h ; G
.eh_frame:0000000000012AA8                 db  0Eh
.eh_frame:0000000000012AA9                 db  50h ; P
.eh_frame:0000000000012AAA                 db    2
.eh_frame:0000000000012AAB                 db  42h ; B
.eh_frame:0000000000012AAC                 db  0Ah
.eh_frame:0000000000012AAD                 db  0Eh
.eh_frame:0000000000012AAE                 db  38h ; 8
.eh_frame:0000000000012AAF                 db  41h ; A
.eh_frame:0000000000012AB0                 db  0Eh
.eh_frame:0000000000012AB1                 db  30h ; 0
.eh_frame:0000000000012AB2                 db  41h ; A
.eh_frame:0000000000012AB3                 db  0Eh
.eh_frame:0000000000012AB4                 db  28h ; (
.eh_frame:0000000000012AB5                 db  42h ; B
.eh_frame:0000000000012AB6                 db  0Eh
.eh_frame:0000000000012AB7                 db  20h
.eh_frame:0000000000012AB8                 db  42h ; B
.eh_frame:0000000000012AB9                 db  0Eh
.eh_frame:0000000000012ABA                 db  18h
.eh_frame:0000000000012ABB                 db  42h ; B
.eh_frame:0000000000012ABC                 db  0Eh
.eh_frame:0000000000012ABD                 db  10h
.eh_frame:0000000000012ABE                 db  42h ; B
.eh_frame:0000000000012ABF                 db  0Eh
.eh_frame:0000000000012AC0                 db    8
.eh_frame:0000000000012AC1                 db  43h ; C
.eh_frame:0000000000012AC2                 db  0Bh
.eh_frame:0000000000012AC3                 db    0
.eh_frame:0000000000012AC4                 db    0
.eh_frame:0000000000012AC5                 db    0
.eh_frame:0000000000012AC6                 db    0
.eh_frame:0000000000012AC7                 db    0
.eh_frame:0000000000012AC8                 db  34h ; 4
.eh_frame:0000000000012AC9                 db    0
.eh_frame:0000000000012ACA                 db    0
.eh_frame:0000000000012ACB                 db    0
.eh_frame:0000000000012ACC                 db 0A4h
.eh_frame:0000000000012ACD                 db  16h
.eh_frame:0000000000012ACE                 db    0
.eh_frame:0000000000012ACF                 db    0
.eh_frame:0000000000012AD0                 db 0C0h
.eh_frame:0000000000012AD1                 db  8Eh
.eh_frame:0000000000012AD2                 db 0FFh
.eh_frame:0000000000012AD3                 db 0FFh
.eh_frame:0000000000012AD4                 db  26h ; &
.eh_frame:0000000000012AD5                 db    1
.eh_frame:0000000000012AD6                 db    0
.eh_frame:0000000000012AD7                 db    0
.eh_frame:0000000000012AD8                 db    0
.eh_frame:0000000000012AD9                 db  42h ; B
.eh_frame:0000000000012ADA                 db  0Eh
.eh_frame:0000000000012ADB                 db  10h
.eh_frame:0000000000012ADC                 db  8Ch
.eh_frame:0000000000012ADD                 db    2
.eh_frame:0000000000012ADE                 db  41h ; A
.eh_frame:0000000000012ADF                 db  0Eh
.eh_frame:0000000000012AE0                 db  18h
.eh_frame:0000000000012AE1                 db  86h
.eh_frame:0000000000012AE2                 db    3
.eh_frame:0000000000012AE3                 db  44h ; D
.eh_frame:0000000000012AE4                 db  0Eh
.eh_frame:0000000000012AE5                 db  20h
.eh_frame:0000000000012AE6                 db  83h
.eh_frame:0000000000012AE7                 db    4
.eh_frame:0000000000012AE8                 db  4Ah ; J
.eh_frame:0000000000012AE9                 db  0Eh
.eh_frame:0000000000012AEA                 db 0B0h
.eh_frame:0000000000012AEB                 db    3
.eh_frame:0000000000012AEC                 db    2
.eh_frame:0000000000012AED                 db 0D4h
.eh_frame:0000000000012AEE                 db  0Ah
.eh_frame:0000000000012AEF                 db  0Eh
.eh_frame:0000000000012AF0                 db  20h
.eh_frame:0000000000012AF1                 db  41h ; A
.eh_frame:0000000000012AF2                 db  0Eh
.eh_frame:0000000000012AF3                 db  18h
.eh_frame:0000000000012AF4                 db  41h ; A
.eh_frame:0000000000012AF5                 db  0Eh
.eh_frame:0000000000012AF6                 db  10h
.eh_frame:0000000000012AF7                 db  42h ; B
.eh_frame:0000000000012AF8                 db  0Eh
.eh_frame:0000000000012AF9                 db    8
.eh_frame:0000000000012AFA                 db  47h ; G
.eh_frame:0000000000012AFB                 db  0Bh
.eh_frame:0000000000012AFC                 db    0
.eh_frame:0000000000012AFD                 db    0
.eh_frame:0000000000012AFE                 db    0
.eh_frame:0000000000012AFF                 db    0
.eh_frame:0000000000012B00                 db  3Ch ; <
.eh_frame:0000000000012B01                 db    0
.eh_frame:0000000000012B02                 db    0
.eh_frame:0000000000012B03                 db    0
.eh_frame:0000000000012B04                 db 0DCh
.eh_frame:0000000000012B05                 db  16h
.eh_frame:0000000000012B06                 db    0
.eh_frame:0000000000012B07                 db    0
.eh_frame:0000000000012B08                 db 0B8h
.eh_frame:0000000000012B09                 db  8Fh
.eh_frame:0000000000012B0A                 db 0FFh
.eh_frame:0000000000012B0B                 db 0FFh
.eh_frame:0000000000012B0C                 db  83h
.eh_frame:0000000000012B0D                 db    0
.eh_frame:0000000000012B0E                 db    0
.eh_frame:0000000000012B0F                 db    0
.eh_frame:0000000000012B10                 db    0
.eh_frame:0000000000012B11                 db  42h ; B
.eh_frame:0000000000012B12                 db  0Eh
.eh_frame:0000000000012B13                 db  10h
.eh_frame:0000000000012B14                 db  8Dh
.eh_frame:0000000000012B15                 db    2
.eh_frame:0000000000012B16                 db  42h ; B
.eh_frame:0000000000012B17                 db  0Eh
.eh_frame:0000000000012B18                 db  18h
.eh_frame:0000000000012B19                 db  8Ch
.eh_frame:0000000000012B1A                 db    3
.eh_frame:0000000000012B1B                 db  44h ; D
.eh_frame:0000000000012B1C                 db  0Eh
.eh_frame:0000000000012B1D                 db  20h
.eh_frame:0000000000012B1E                 db  86h
.eh_frame:0000000000012B1F                 db    4
.eh_frame:0000000000012B20                 db  41h ; A
.eh_frame:0000000000012B21                 db  0Eh
.eh_frame:0000000000012B22                 db  28h ; (
.eh_frame:0000000000012B23                 db  83h
.eh_frame:0000000000012B24                 db    5
.eh_frame:0000000000012B25                 db  4Ah ; J
.eh_frame:0000000000012B26                 db  0Eh
.eh_frame:0000000000012B27                 db  40h ; @
.eh_frame:0000000000012B28                 db    2
.eh_frame:0000000000012B29                 db  64h ; d
.eh_frame:0000000000012B2A                 db  0Ah
.eh_frame:0000000000012B2B                 db  0Eh
.eh_frame:0000000000012B2C                 db  28h ; (
.eh_frame:0000000000012B2D                 db  41h ; A
.eh_frame:0000000000012B2E                 db  0Eh
.eh_frame:0000000000012B2F                 db  20h
.eh_frame:0000000000012B30                 db  41h ; A
.eh_frame:0000000000012B31                 db  0Eh
.eh_frame:0000000000012B32                 db  18h
.eh_frame:0000000000012B33                 db  42h ; B
.eh_frame:0000000000012B34                 db  0Eh
.eh_frame:0000000000012B35                 db  10h
.eh_frame:0000000000012B36                 db  42h ; B
.eh_frame:0000000000012B37                 db  0Eh
.eh_frame:0000000000012B38                 db    8
.eh_frame:0000000000012B39                 db  41h ; A
.eh_frame:0000000000012B3A                 db  0Bh
.eh_frame:0000000000012B3B                 db    0
.eh_frame:0000000000012B3C                 db    0
.eh_frame:0000000000012B3D                 db    0
.eh_frame:0000000000012B3E                 db    0
.eh_frame:0000000000012B3F                 db    0
.eh_frame:0000000000012B40                 db  18h
.eh_frame:0000000000012B41                 db    0
.eh_frame:0000000000012B42                 db    0
.eh_frame:0000000000012B43                 db    0
.eh_frame:0000000000012B44                 db  1Ch
.eh_frame:0000000000012B45                 db  17h
.eh_frame:0000000000012B46                 db    0
.eh_frame:0000000000012B47                 db    0
.eh_frame:0000000000012B48                 db    8
.eh_frame:0000000000012B49                 db  90h
.eh_frame:0000000000012B4A                 db 0FFh
.eh_frame:0000000000012B4B                 db 0FFh
.eh_frame:0000000000012B4C                 db  82h
.eh_frame:0000000000012B4D                 db    0
.eh_frame:0000000000012B4E                 db    0
.eh_frame:0000000000012B4F                 db    0
.eh_frame:0000000000012B50                 db    0
.eh_frame:0000000000012B51                 db  41h ; A
.eh_frame:0000000000012B52                 db  0Eh
.eh_frame:0000000000012B53                 db  10h
.eh_frame:0000000000012B54                 db  83h
.eh_frame:0000000000012B55                 db    2
.eh_frame:0000000000012B56                 db    2
.eh_frame:0000000000012B57                 db  80h
.eh_frame:0000000000012B58                 db  0Eh
.eh_frame:0000000000012B59                 db    8
.eh_frame:0000000000012B5A                 db    0
.eh_frame:0000000000012B5B                 db    0
.eh_frame:0000000000012B5C                 db  18h
.eh_frame:0000000000012B5D                 db    0
.eh_frame:0000000000012B5E                 db    0
.eh_frame:0000000000012B5F                 db    0
.eh_frame:0000000000012B60                 db  38h ; 8
.eh_frame:0000000000012B61                 db  17h
.eh_frame:0000000000012B62                 db    0
.eh_frame:0000000000012B63                 db    0
.eh_frame:0000000000012B64                 db  7Ch ; |
.eh_frame:0000000000012B65                 db  90h
.eh_frame:0000000000012B66                 db 0FFh
.eh_frame:0000000000012B67                 db 0FFh
.eh_frame:0000000000012B68                 db  36h ; 6
.eh_frame:0000000000012B69                 db    0
.eh_frame:0000000000012B6A                 db    0
.eh_frame:0000000000012B6B                 db    0
.eh_frame:0000000000012B6C                 db    0
.eh_frame:0000000000012B6D                 db  41h ; A
.eh_frame:0000000000012B6E                 db  0Eh
.eh_frame:0000000000012B6F                 db  10h
.eh_frame:0000000000012B70                 db  83h
.eh_frame:0000000000012B71                 db    2
.eh_frame:0000000000012B72                 db  70h ; p
.eh_frame:0000000000012B73                 db  0Eh
.eh_frame:0000000000012B74                 db    8
.eh_frame:0000000000012B75                 db    0
.eh_frame:0000000000012B76                 db    0
.eh_frame:0000000000012B77                 db    0
.eh_frame:0000000000012B78                 db  74h ; t
.eh_frame:0000000000012B79                 db    0
.eh_frame:0000000000012B7A                 db    0
.eh_frame:0000000000012B7B                 db    0
.eh_frame:0000000000012B7C                 db  54h ; T
.eh_frame:0000000000012B7D                 db  17h
.eh_frame:0000000000012B7E                 db    0
.eh_frame:0000000000012B7F                 db    0
.eh_frame:0000000000012B80                 db 0A0h
.eh_frame:0000000000012B81                 db  90h
.eh_frame:0000000000012B82                 db 0FFh
.eh_frame:0000000000012B83                 db 0FFh
.eh_frame:0000000000012B84                 db  48h ; H
.eh_frame:0000000000012B85                 db    8
.eh_frame:0000000000012B86                 db    0
.eh_frame:0000000000012B87                 db    0
.eh_frame:0000000000012B88                 db    0
.eh_frame:0000000000012B89                 db  42h ; B
.eh_frame:0000000000012B8A                 db  0Eh
.eh_frame:0000000000012B8B                 db  10h
.eh_frame:0000000000012B8C                 db  8Fh
.eh_frame:0000000000012B8D                 db    2
.eh_frame:0000000000012B8E                 db  42h ; B
.eh_frame:0000000000012B8F                 db  0Eh
.eh_frame:0000000000012B90                 db  18h
.eh_frame:0000000000012B91                 db  8Eh
.eh_frame:0000000000012B92                 db    3
.eh_frame:0000000000012B93                 db  49h ; I
.eh_frame:0000000000012B94                 db  0Eh
.eh_frame:0000000000012B95                 db  20h
.eh_frame:0000000000012B96                 db  8Dh
.eh_frame:0000000000012B97                 db    4
.eh_frame:0000000000012B98                 db  42h ; B
.eh_frame:0000000000012B99                 db  0Eh
.eh_frame:0000000000012B9A                 db  28h ; (
.eh_frame:0000000000012B9B                 db  8Ch
.eh_frame:0000000000012B9C                 db    5
.eh_frame:0000000000012B9D                 db  48h ; H
.eh_frame:0000000000012B9E                 db  0Eh
.eh_frame:0000000000012B9F                 db  30h ; 0
.eh_frame:0000000000012BA0                 db  86h
.eh_frame:0000000000012BA1                 db    6
.eh_frame:0000000000012BA2                 db  41h ; A
.eh_frame:0000000000012BA3                 db  0Eh
.eh_frame:0000000000012BA4                 db  38h ; 8
.eh_frame:0000000000012BA5                 db  83h
.eh_frame:0000000000012BA6                 db    7
.eh_frame:0000000000012BA7                 db  44h ; D
.eh_frame:0000000000012BA8                 db  0Eh
.eh_frame:0000000000012BA9                 db 0A0h
.eh_frame:0000000000012BAA                 db    1
.eh_frame:0000000000012BAB                 db    2
.eh_frame:0000000000012BAC                 db  6Fh ; o
.eh_frame:0000000000012BAD                 db  0Eh
.eh_frame:0000000000012BAE                 db 0A8h
.eh_frame:0000000000012BAF                 db    1
.eh_frame:0000000000012BB0                 db  4Dh ; M
.eh_frame:0000000000012BB1                 db  0Eh
.eh_frame:0000000000012BB2                 db 0B0h
.eh_frame:0000000000012BB3                 db    1
.eh_frame:0000000000012BB4                 db  46h ; F
.eh_frame:0000000000012BB5                 db  0Eh
.eh_frame:0000000000012BB6                 db 0B8h
.eh_frame:0000000000012BB7                 db    1
.eh_frame:0000000000012BB8                 db  46h ; F
.eh_frame:0000000000012BB9                 db  0Eh
.eh_frame:0000000000012BBA                 db 0C0h
.eh_frame:0000000000012BBB                 db    1
.eh_frame:0000000000012BBC                 db  5Dh ; ]
.eh_frame:0000000000012BBD                 db  0Eh
.eh_frame:0000000000012BBE                 db 0A0h
.eh_frame:0000000000012BBF                 db    1
.eh_frame:0000000000012BC0                 db  75h ; u
.eh_frame:0000000000012BC1                 db  0Eh
.eh_frame:0000000000012BC2                 db 0A8h
.eh_frame:0000000000012BC3                 db    1
.eh_frame:0000000000012BC4                 db  41h ; A
.eh_frame:0000000000012BC5                 db  0Eh
.eh_frame:0000000000012BC6                 db 0B0h
.eh_frame:0000000000012BC7                 db    1
.eh_frame:0000000000012BC8                 db  62h ; b
.eh_frame:0000000000012BC9                 db  0Eh
.eh_frame:0000000000012BCA                 db 0A8h
.eh_frame:0000000000012BCB                 db    1
.eh_frame:0000000000012BCC                 db  41h ; A
.eh_frame:0000000000012BCD                 db  0Eh
.eh_frame:0000000000012BCE                 db 0A0h
.eh_frame:0000000000012BCF                 db    1
.eh_frame:0000000000012BD0                 db    3
.eh_frame:0000000000012BD1                 db 0DFh
.eh_frame:0000000000012BD2                 db    1
.eh_frame:0000000000012BD3                 db  0Ah
.eh_frame:0000000000012BD4                 db  0Eh
.eh_frame:0000000000012BD5                 db  38h ; 8
.eh_frame:0000000000012BD6                 db  41h ; A
.eh_frame:0000000000012BD7                 db  0Eh
.eh_frame:0000000000012BD8                 db  30h ; 0
.eh_frame:0000000000012BD9                 db  41h ; A
.eh_frame:0000000000012BDA                 db  0Eh
.eh_frame:0000000000012BDB                 db  28h ; (
.eh_frame:0000000000012BDC                 db  42h ; B
.eh_frame:0000000000012BDD                 db  0Eh
.eh_frame:0000000000012BDE                 db  20h
.eh_frame:0000000000012BDF                 db  42h ; B
.eh_frame:0000000000012BE0                 db  0Eh
.eh_frame:0000000000012BE1                 db  18h
.eh_frame:0000000000012BE2                 db  42h ; B
.eh_frame:0000000000012BE3                 db  0Eh
.eh_frame:0000000000012BE4                 db  10h
.eh_frame:0000000000012BE5                 db  42h ; B
.eh_frame:0000000000012BE6                 db  0Eh
.eh_frame:0000000000012BE7                 db    8
.eh_frame:0000000000012BE8                 db  45h ; E
.eh_frame:0000000000012BE9                 db  0Bh
.eh_frame:0000000000012BEA                 db    0
.eh_frame:0000000000012BEB                 db    0
.eh_frame:0000000000012BEC                 db    0
.eh_frame:0000000000012BED                 db    0
.eh_frame:0000000000012BEE                 db    0
.eh_frame:0000000000012BEF                 db    0
.eh_frame:0000000000012BF0                 db  24h ; $
.eh_frame:0000000000012BF1                 db    0
.eh_frame:0000000000012BF2                 db    0
.eh_frame:0000000000012BF3                 db    0
.eh_frame:0000000000012BF4                 db 0CCh
.eh_frame:0000000000012BF5                 db  17h
.eh_frame:0000000000012BF6                 db    0
.eh_frame:0000000000012BF7                 db    0
.eh_frame:0000000000012BF8                 db  78h ; x
.eh_frame:0000000000012BF9                 db  98h
.eh_frame:0000000000012BFA                 db 0FFh
.eh_frame:0000000000012BFB                 db 0FFh
.eh_frame:0000000000012BFC                 db  7Eh ; ~
.eh_frame:0000000000012BFD                 db    0
.eh_frame:0000000000012BFE                 db    0
.eh_frame:0000000000012BFF                 db    0
.eh_frame:0000000000012C00                 db    0
.eh_frame:0000000000012C01                 db  41h ; A
.eh_frame:0000000000012C02                 db  0Eh
.eh_frame:0000000000012C03                 db  10h
.eh_frame:0000000000012C04                 db  83h
.eh_frame:0000000000012C05                 db    2
.eh_frame:0000000000012C06                 db  4Ch ; L
.eh_frame:0000000000012C07                 db  0Eh
.eh_frame:0000000000012C08                 db  20h
.eh_frame:0000000000012C09                 db    2
.eh_frame:0000000000012C0A                 db  49h ; I
.eh_frame:0000000000012C0B                 db  0Ah
.eh_frame:0000000000012C0C                 db  0Eh
.eh_frame:0000000000012C0D                 db  10h
.eh_frame:0000000000012C0E                 db  41h ; A
.eh_frame:0000000000012C0F                 db  0Eh
.eh_frame:0000000000012C10                 db    8
.eh_frame:0000000000012C11                 db  41h ; A
.eh_frame:0000000000012C12                 db  0Bh
.eh_frame:0000000000012C13                 db    0
.eh_frame:0000000000012C14                 db    0
.eh_frame:0000000000012C15                 db    0
.eh_frame:0000000000012C16                 db    0
.eh_frame:0000000000012C17                 db    0
.eh_frame:0000000000012C18                 db  4Ch ; L
.eh_frame:0000000000012C19                 db    0
.eh_frame:0000000000012C1A                 db    0
.eh_frame:0000000000012C1B                 db    0
.eh_frame:0000000000012C1C                 db 0F4h
.eh_frame:0000000000012C1D                 db  17h
.eh_frame:0000000000012C1E                 db    0
.eh_frame:0000000000012C1F                 db    0
.eh_frame:0000000000012C20                 db 0D0h
.eh_frame:0000000000012C21                 db  98h
.eh_frame:0000000000012C22                 db 0FFh
.eh_frame:0000000000012C23                 db 0FFh
.eh_frame:0000000000012C24                 db 0EFh
.eh_frame:0000000000012C25                 db    0
.eh_frame:0000000000012C26                 db    0
.eh_frame:0000000000012C27                 db    0
.eh_frame:0000000000012C28                 db    0
.eh_frame:0000000000012C29                 db  42h ; B
.eh_frame:0000000000012C2A                 db  0Eh
.eh_frame:0000000000012C2B                 db  10h
.eh_frame:0000000000012C2C                 db  8Fh
.eh_frame:0000000000012C2D                 db    2
.eh_frame:0000000000012C2E                 db  42h ; B
.eh_frame:0000000000012C2F                 db  0Eh
.eh_frame:0000000000012C30                 db  18h
.eh_frame:0000000000012C31                 db  8Eh
.eh_frame:0000000000012C32                 db    3
.eh_frame:0000000000012C33                 db  47h ; G
.eh_frame:0000000000012C34                 db  0Eh
.eh_frame:0000000000012C35                 db  20h
.eh_frame:0000000000012C36                 db  8Dh
.eh_frame:0000000000012C37                 db    4
.eh_frame:0000000000012C38                 db  42h ; B
.eh_frame:0000000000012C39                 db  0Eh
.eh_frame:0000000000012C3A                 db  28h ; (
.eh_frame:0000000000012C3B                 db  8Ch
.eh_frame:0000000000012C3C                 db    5
.eh_frame:0000000000012C3D                 db  44h ; D
.eh_frame:0000000000012C3E                 db  0Eh
.eh_frame:0000000000012C3F                 db  30h ; 0
.eh_frame:0000000000012C40                 db  86h
.eh_frame:0000000000012C41                 db    6
.eh_frame:0000000000012C42                 db  41h ; A
.eh_frame:0000000000012C43                 db  0Eh
.eh_frame:0000000000012C44                 db  38h ; 8
.eh_frame:0000000000012C45                 db  83h
.eh_frame:0000000000012C46                 db    7
.eh_frame:0000000000012C47                 db  5Ch ; \
.eh_frame:0000000000012C48                 db  0Eh
.eh_frame:0000000000012C49                 db  40h ; @
.eh_frame:0000000000012C4A                 db    2
.eh_frame:0000000000012C4B                 db  61h ; a
.eh_frame:0000000000012C4C                 db  0Ah
.eh_frame:0000000000012C4D                 db  0Eh
.eh_frame:0000000000012C4E                 db  38h ; 8
.eh_frame:0000000000012C4F                 db  44h ; D
.eh_frame:0000000000012C50                 db  0Eh
.eh_frame:0000000000012C51                 db  30h ; 0
.eh_frame:0000000000012C52                 db  41h ; A
.eh_frame:0000000000012C53                 db  0Eh
.eh_frame:0000000000012C54                 db  28h ; (
.eh_frame:0000000000012C55                 db  42h ; B
.eh_frame:0000000000012C56                 db  0Eh
.eh_frame:0000000000012C57                 db  20h
.eh_frame:0000000000012C58                 db  42h ; B
.eh_frame:0000000000012C59                 db  0Eh
.eh_frame:0000000000012C5A                 db  18h
.eh_frame:0000000000012C5B                 db  42h ; B
.eh_frame:0000000000012C5C                 db  0Eh
.eh_frame:0000000000012C5D                 db  10h
.eh_frame:0000000000012C5E                 db  42h ; B
.eh_frame:0000000000012C5F                 db  0Eh
.eh_frame:0000000000012C60                 db    8
.eh_frame:0000000000012C61                 db  44h ; D
.eh_frame:0000000000012C62                 db  0Bh
.eh_frame:0000000000012C63                 db    0
.eh_frame:0000000000012C64                 db    0
.eh_frame:0000000000012C65                 db    0
.eh_frame:0000000000012C66                 db    0
.eh_frame:0000000000012C67                 db    0
.eh_frame:0000000000012C68                 db  10h
.eh_frame:0000000000012C69                 db    0
.eh_frame:0000000000012C6A                 db    0
.eh_frame:0000000000012C6B                 db    0
.eh_frame:0000000000012C6C                 db  44h ; D
.eh_frame:0000000000012C6D                 db  18h
.eh_frame:0000000000012C6E                 db    0
.eh_frame:0000000000012C6F                 db    0
.eh_frame:0000000000012C70                 db  70h ; p
.eh_frame:0000000000012C71                 db  99h
.eh_frame:0000000000012C72                 db 0FFh
.eh_frame:0000000000012C73                 db 0FFh
.eh_frame:0000000000012C74                 db  0Ah
.eh_frame:0000000000012C75                 db    0
.eh_frame:0000000000012C76                 db    0
.eh_frame:0000000000012C77                 db    0
.eh_frame:0000000000012C78                 db    0
.eh_frame:0000000000012C79                 db    0
.eh_frame:0000000000012C7A                 db    0
.eh_frame:0000000000012C7B                 db    0
.eh_frame:0000000000012C7C                 db  48h ; H
.eh_frame:0000000000012C7D                 db    0
.eh_frame:0000000000012C7E                 db    0
.eh_frame:0000000000012C7F                 db    0
.eh_frame:0000000000012C80                 db  58h ; X
.eh_frame:0000000000012C81                 db  18h
.eh_frame:0000000000012C82                 db    0
.eh_frame:0000000000012C83                 db    0
.eh_frame:0000000000012C84                 db  6Ch ; l
.eh_frame:0000000000012C85                 db  99h
.eh_frame:0000000000012C86                 db 0FFh
.eh_frame:0000000000012C87                 db 0FFh
.eh_frame:0000000000012C88                 db  16h
.eh_frame:0000000000012C89                 db    1
.eh_frame:0000000000012C8A                 db    0
.eh_frame:0000000000012C8B                 db    0
.eh_frame:0000000000012C8C                 db    0
.eh_frame:0000000000012C8D                 db  42h ; B
.eh_frame:0000000000012C8E                 db  0Eh
.eh_frame:0000000000012C8F                 db  10h
.eh_frame:0000000000012C90                 db  8Fh
.eh_frame:0000000000012C91                 db    2
.eh_frame:0000000000012C92                 db  42h ; B
.eh_frame:0000000000012C93                 db  0Eh
.eh_frame:0000000000012C94                 db  18h
.eh_frame:0000000000012C95                 db  8Eh
.eh_frame:0000000000012C96                 db    3
.eh_frame:0000000000012C97                 db  45h ; E
.eh_frame:0000000000012C98                 db  0Eh
.eh_frame:0000000000012C99                 db  20h
.eh_frame:0000000000012C9A                 db  8Dh
.eh_frame:0000000000012C9B                 db    4
.eh_frame:0000000000012C9C                 db  42h ; B
.eh_frame:0000000000012C9D                 db  0Eh
.eh_frame:0000000000012C9E                 db  28h ; (
.eh_frame:0000000000012C9F                 db  8Ch
.eh_frame:0000000000012CA0                 db    5
.eh_frame:0000000000012CA1                 db  44h ; D
.eh_frame:0000000000012CA2                 db  0Eh
.eh_frame:0000000000012CA3                 db  30h ; 0
.eh_frame:0000000000012CA4                 db  86h
.eh_frame:0000000000012CA5                 db    6
.eh_frame:0000000000012CA6                 db  41h ; A
.eh_frame:0000000000012CA7                 db  0Eh
.eh_frame:0000000000012CA8                 db  38h ; 8
.eh_frame:0000000000012CA9                 db  83h
.eh_frame:0000000000012CAA                 db    7
.eh_frame:0000000000012CAB                 db  47h ; G
.eh_frame:0000000000012CAC                 db  0Eh
.eh_frame:0000000000012CAD                 db  60h ; `
.eh_frame:0000000000012CAE                 db    2
.eh_frame:0000000000012CAF                 db 0DEh
.eh_frame:0000000000012CB0                 db  0Ah
.eh_frame:0000000000012CB1                 db  0Eh
.eh_frame:0000000000012CB2                 db  38h ; 8
.eh_frame:0000000000012CB3                 db  41h ; A
.eh_frame:0000000000012CB4                 db  0Eh
.eh_frame:0000000000012CB5                 db  30h ; 0
.eh_frame:0000000000012CB6                 db  41h ; A
.eh_frame:0000000000012CB7                 db  0Eh
.eh_frame:0000000000012CB8                 db  28h ; (
.eh_frame:0000000000012CB9                 db  42h ; B
.eh_frame:0000000000012CBA                 db  0Eh
.eh_frame:0000000000012CBB                 db  20h
.eh_frame:0000000000012CBC                 db  42h ; B
.eh_frame:0000000000012CBD                 db  0Eh
.eh_frame:0000000000012CBE                 db  18h
.eh_frame:0000000000012CBF                 db  42h ; B
.eh_frame:0000000000012CC0                 db  0Eh
.eh_frame:0000000000012CC1                 db  10h
.eh_frame:0000000000012CC2                 db  42h ; B
.eh_frame:0000000000012CC3                 db  0Eh
.eh_frame:0000000000012CC4                 db    8
.eh_frame:0000000000012CC5                 db  41h ; A
.eh_frame:0000000000012CC6                 db  0Bh
.eh_frame:0000000000012CC7                 db    0
.eh_frame:0000000000012CC8                 db  28h ; (
.eh_frame:0000000000012CC9                 db    0
.eh_frame:0000000000012CCA                 db    0
.eh_frame:0000000000012CCB                 db    0
.eh_frame:0000000000012CCC                 db 0A4h
.eh_frame:0000000000012CCD                 db  18h
.eh_frame:0000000000012CCE                 db    0
.eh_frame:0000000000012CCF                 db    0
.eh_frame:0000000000012CD0                 db  40h ; @
.eh_frame:0000000000012CD1                 db  9Ah
.eh_frame:0000000000012CD2                 db 0FFh
.eh_frame:0000000000012CD3                 db 0FFh
.eh_frame:0000000000012CD4                 db  73h ; s
.eh_frame:0000000000012CD5                 db    0
.eh_frame:0000000000012CD6                 db    0
.eh_frame:0000000000012CD7                 db    0
.eh_frame:0000000000012CD8                 db    0
.eh_frame:0000000000012CD9                 db  46h ; F
.eh_frame:0000000000012CDA                 db  0Eh
.eh_frame:0000000000012CDB                 db  10h
.eh_frame:0000000000012CDC                 db  8Ch
.eh_frame:0000000000012CDD                 db    2
.eh_frame:0000000000012CDE                 db  46h ; F
.eh_frame:0000000000012CDF                 db  0Eh
.eh_frame:0000000000012CE0                 db  18h
.eh_frame:0000000000012CE1                 db  86h
.eh_frame:0000000000012CE2                 db    3
.eh_frame:0000000000012CE3                 db  44h ; D
.eh_frame:0000000000012CE4                 db  0Eh
.eh_frame:0000000000012CE5                 db  20h
.eh_frame:0000000000012CE6                 db  83h
.eh_frame:0000000000012CE7                 db    4
.eh_frame:0000000000012CE8                 db  7Fh ; 
.eh_frame:0000000000012CE9                 db  0Ah
.eh_frame:0000000000012CEA                 db  0Eh
.eh_frame:0000000000012CEB                 db  18h
.eh_frame:0000000000012CEC                 db  41h ; A
.eh_frame:0000000000012CED                 db  0Eh
.eh_frame:0000000000012CEE                 db  10h
.eh_frame:0000000000012CEF                 db  42h ; B
.eh_frame:0000000000012CF0                 db  0Eh
.eh_frame:0000000000012CF1                 db    8
.eh_frame:0000000000012CF2                 db  4Eh ; N
.eh_frame:0000000000012CF3                 db  0Bh
.eh_frame:0000000000012CF4                 db  5Ch ; \
.eh_frame:0000000000012CF5                 db    0
.eh_frame:0000000000012CF6                 db    0
.eh_frame:0000000000012CF7                 db    0
.eh_frame:0000000000012CF8                 db 0D0h
.eh_frame:0000000000012CF9                 db  18h
.eh_frame:0000000000012CFA                 db    0
.eh_frame:0000000000012CFB                 db    0
.eh_frame:0000000000012CFC                 db  94h
.eh_frame:0000000000012CFD                 db  9Ah
.eh_frame:0000000000012CFE                 db 0FFh
.eh_frame:0000000000012CFF                 db 0FFh
.eh_frame:0000000000012D00                 db  20h
.eh_frame:0000000000012D01                 db    1
.eh_frame:0000000000012D02                 db    0
.eh_frame:0000000000012D03                 db    0
.eh_frame:0000000000012D04                 db    0
.eh_frame:0000000000012D05                 db  42h ; B
.eh_frame:0000000000012D06                 db  0Eh
.eh_frame:0000000000012D07                 db  10h
.eh_frame:0000000000012D08                 db  8Fh
.eh_frame:0000000000012D09                 db    2
.eh_frame:0000000000012D0A                 db  42h ; B
.eh_frame:0000000000012D0B                 db  0Eh
.eh_frame:0000000000012D0C                 db  18h
.eh_frame:0000000000012D0D                 db  8Eh
.eh_frame:0000000000012D0E                 db    3
.eh_frame:0000000000012D0F                 db  45h ; E
.eh_frame:0000000000012D10                 db  0Eh
.eh_frame:0000000000012D11                 db  20h
.eh_frame:0000000000012D12                 db  8Dh
.eh_frame:0000000000012D13                 db    4
.eh_frame:0000000000012D14                 db  42h ; B
.eh_frame:0000000000012D15                 db  0Eh
.eh_frame:0000000000012D16                 db  28h ; (
.eh_frame:0000000000012D17                 db  8Ch
.eh_frame:0000000000012D18                 db    5
.eh_frame:0000000000012D19                 db  43h ; C
.eh_frame:0000000000012D1A                 db  0Eh
.eh_frame:0000000000012D1B                 db  30h ; 0
.eh_frame:0000000000012D1C                 db  86h
.eh_frame:0000000000012D1D                 db    6
.eh_frame:0000000000012D1E                 db  41h ; A
.eh_frame:0000000000012D1F                 db  0Eh
.eh_frame:0000000000012D20                 db  38h ; 8
.eh_frame:0000000000012D21                 db  83h
.eh_frame:0000000000012D22                 db    7
.eh_frame:0000000000012D23                 db  56h ; V
.eh_frame:0000000000012D24                 db  0Eh
.eh_frame:0000000000012D25                 db  40h ; @
.eh_frame:0000000000012D26                 db    2
.eh_frame:0000000000012D27                 db 0D3h
.eh_frame:0000000000012D28                 db  0Ah
.eh_frame:0000000000012D29                 db  0Eh
.eh_frame:0000000000012D2A                 db  38h ; 8
.eh_frame:0000000000012D2B                 db  41h ; A
.eh_frame:0000000000012D2C                 db  0Eh
.eh_frame:0000000000012D2D                 db  30h ; 0
.eh_frame:0000000000012D2E                 db  41h ; A
.eh_frame:0000000000012D2F                 db  0Eh
.eh_frame:0000000000012D30                 db  28h ; (
.eh_frame:0000000000012D31                 db  42h ; B
.eh_frame:0000000000012D32                 db  0Eh
.eh_frame:0000000000012D33                 db  20h
.eh_frame:0000000000012D34                 db  42h ; B
.eh_frame:0000000000012D35                 db  0Eh
.eh_frame:0000000000012D36                 db  18h
.eh_frame:0000000000012D37                 db  42h ; B
.eh_frame:0000000000012D38                 db  0Eh
.eh_frame:0000000000012D39                 db  10h
.eh_frame:0000000000012D3A                 db  42h ; B
.eh_frame:0000000000012D3B                 db  0Eh
.eh_frame:0000000000012D3C                 db    8
.eh_frame:0000000000012D3D                 db  46h ; F
.eh_frame:0000000000012D3E                 db  0Bh
.eh_frame:0000000000012D3F                 db  44h ; D
.eh_frame:0000000000012D40                 db  0Eh
.eh_frame:0000000000012D41                 db  38h ; 8
.eh_frame:0000000000012D42                 db  46h ; F
.eh_frame:0000000000012D43                 db  0Eh
.eh_frame:0000000000012D44                 db  30h ; 0
.eh_frame:0000000000012D45                 db  41h ; A
.eh_frame:0000000000012D46                 db  0Eh
.eh_frame:0000000000012D47                 db  28h ; (
.eh_frame:0000000000012D48                 db  42h ; B
.eh_frame:0000000000012D49                 db  0Eh
.eh_frame:0000000000012D4A                 db  20h
.eh_frame:0000000000012D4B                 db  42h ; B
.eh_frame:0000000000012D4C                 db  0Eh
.eh_frame:0000000000012D4D                 db  18h
.eh_frame:0000000000012D4E                 db  42h ; B
.eh_frame:0000000000012D4F                 db  0Eh
.eh_frame:0000000000012D50                 db  10h
.eh_frame:0000000000012D51                 db  42h ; B
.eh_frame:0000000000012D52                 db  0Eh
.eh_frame:0000000000012D53                 db    8
.eh_frame:0000000000012D54                 db  48h ; H
.eh_frame:0000000000012D55                 db    0
.eh_frame:0000000000012D56                 db    0
.eh_frame:0000000000012D57                 db    0
.eh_frame:0000000000012D58                 db  30h ; 0
.eh_frame:0000000000012D59                 db  19h
.eh_frame:0000000000012D5A                 db    0
.eh_frame:0000000000012D5B                 db    0
.eh_frame:0000000000012D5C                 db  54h ; T
.eh_frame:0000000000012D5D                 db  9Bh
.eh_frame:0000000000012D5E                 db 0FFh
.eh_frame:0000000000012D5F                 db 0FFh
.eh_frame:0000000000012D60                 db  6Dh ; m
.eh_frame:0000000000012D61                 db    0
.eh_frame:0000000000012D62                 db    0
.eh_frame:0000000000012D63                 db    0
.eh_frame:0000000000012D64                 db    0
.eh_frame:0000000000012D65                 db  42h ; B
.eh_frame:0000000000012D66                 db  0Eh
.eh_frame:0000000000012D67                 db  10h
.eh_frame:0000000000012D68                 db  8Fh
.eh_frame:0000000000012D69                 db    2
.eh_frame:0000000000012D6A                 db  42h ; B
.eh_frame:0000000000012D6B                 db  0Eh
.eh_frame:0000000000012D6C                 db  18h
.eh_frame:0000000000012D6D                 db  8Eh
.eh_frame:0000000000012D6E                 db    3
.eh_frame:0000000000012D6F                 db  45h ; E
.eh_frame:0000000000012D70                 db  0Eh
.eh_frame:0000000000012D71                 db  20h
.eh_frame:0000000000012D72                 db  8Dh
.eh_frame:0000000000012D73                 db    4
.eh_frame:0000000000012D74                 db  42h ; B
.eh_frame:0000000000012D75                 db  0Eh
.eh_frame:0000000000012D76                 db  28h ; (
.eh_frame:0000000000012D77                 db  8Ch
.eh_frame:0000000000012D78                 db    5
.eh_frame:0000000000012D79                 db  44h ; D
.eh_frame:0000000000012D7A                 db  0Eh
.eh_frame:0000000000012D7B                 db  30h ; 0
.eh_frame:0000000000012D7C                 db  86h
.eh_frame:0000000000012D7D                 db    6
.eh_frame:0000000000012D7E                 db  41h ; A
.eh_frame:0000000000012D7F                 db  0Eh
.eh_frame:0000000000012D80                 db  38h ; 8
.eh_frame:0000000000012D81                 db  83h
.eh_frame:0000000000012D82                 db    7
.eh_frame:0000000000012D83                 db  50h ; P
.eh_frame:0000000000012D84                 db  0Eh
.eh_frame:0000000000012D85                 db  40h ; @
.eh_frame:0000000000012D86                 db  5Ah ; Z
.eh_frame:0000000000012D87                 db  0Ah
.eh_frame:0000000000012D88                 db  0Eh
.eh_frame:0000000000012D89                 db  38h ; 8
.eh_frame:0000000000012D8A                 db  41h ; A
.eh_frame:0000000000012D8B                 db  0Eh
.eh_frame:0000000000012D8C                 db  30h ; 0
.eh_frame:0000000000012D8D                 db  41h ; A
.eh_frame:0000000000012D8E                 db  0Eh
.eh_frame:0000000000012D8F                 db  28h ; (
.eh_frame:0000000000012D90                 db  42h ; B
.eh_frame:0000000000012D91                 db  0Eh
.eh_frame:0000000000012D92                 db  20h
.eh_frame:0000000000012D93                 db  42h ; B
.eh_frame:0000000000012D94                 db  0Eh
.eh_frame:0000000000012D95                 db  18h
.eh_frame:0000000000012D96                 db  42h ; B
.eh_frame:0000000000012D97                 db  0Eh
.eh_frame:0000000000012D98                 db  10h
.eh_frame:0000000000012D99                 db  42h ; B
.eh_frame:0000000000012D9A                 db  0Eh
.eh_frame:0000000000012D9B                 db    8
.eh_frame:0000000000012D9C                 db  41h ; A
.eh_frame:0000000000012D9D                 db  0Bh
.eh_frame:0000000000012D9E                 db    0
.eh_frame:0000000000012D9F                 db    0
.eh_frame:0000000000012DA0                 db  3Ch ; <
.eh_frame:0000000000012DA1                 db    0
.eh_frame:0000000000012DA2                 db    0
.eh_frame:0000000000012DA3                 db    0
.eh_frame:0000000000012DA4                 db  7Ch ; |
.eh_frame:0000000000012DA5                 db  19h
.eh_frame:0000000000012DA6                 db    0
.eh_frame:0000000000012DA7                 db    0
.eh_frame:0000000000012DA8                 db  78h ; x
.eh_frame:0000000000012DA9                 db  9Bh
.eh_frame:0000000000012DAA                 db 0FFh
.eh_frame:0000000000012DAB                 db 0FFh
.eh_frame:0000000000012DAC                 db  4Dh ; M
.eh_frame:0000000000012DAD                 db    0
.eh_frame:0000000000012DAE                 db    0
.eh_frame:0000000000012DAF                 db    0
.eh_frame:0000000000012DB0                 db    0
.eh_frame:0000000000012DB1                 db  42h ; B
.eh_frame:0000000000012DB2                 db  0Eh
.eh_frame:0000000000012DB3                 db  10h
.eh_frame:0000000000012DB4                 db  8Eh
.eh_frame:0000000000012DB5                 db    2
.eh_frame:0000000000012DB6                 db  42h ; B
.eh_frame:0000000000012DB7                 db  0Eh
.eh_frame:0000000000012DB8                 db  18h
.eh_frame:0000000000012DB9                 db  8Dh
.eh_frame:0000000000012DBA                 db    3
.eh_frame:0000000000012DBB                 db  42h ; B
.eh_frame:0000000000012DBC                 db  0Eh
.eh_frame:0000000000012DBD                 db  20h
.eh_frame:0000000000012DBE                 db  8Ch
.eh_frame:0000000000012DBF                 db    4
.eh_frame:0000000000012DC0                 db  41h ; A
.eh_frame:0000000000012DC1                 db  0Eh
.eh_frame:0000000000012DC2                 db  28h ; (
.eh_frame:0000000000012DC3                 db  86h
.eh_frame:0000000000012DC4                 db    5
.eh_frame:0000000000012DC5                 db  41h ; A
.eh_frame:0000000000012DC6                 db  0Eh
.eh_frame:0000000000012DC7                 db  30h ; 0
.eh_frame:0000000000012DC8                 db  83h
.eh_frame:0000000000012DC9                 db    6
.eh_frame:0000000000012DCA                 db  7Ah ; z
.eh_frame:0000000000012DCB                 db  0Eh
.eh_frame:0000000000012DCC                 db  28h ; (
.eh_frame:0000000000012DCD                 db  44h ; D
.eh_frame:0000000000012DCE                 db  0Eh
.eh_frame:0000000000012DCF                 db  20h
.eh_frame:0000000000012DD0                 db  42h ; B
.eh_frame:0000000000012DD1                 db  0Eh
.eh_frame:0000000000012DD2                 db  18h
.eh_frame:0000000000012DD3                 db  42h ; B
.eh_frame:0000000000012DD4                 db  0Eh
.eh_frame:0000000000012DD5                 db  10h
.eh_frame:0000000000012DD6                 db  42h ; B
.eh_frame:0000000000012DD7                 db  0Eh
.eh_frame:0000000000012DD8                 db    8
.eh_frame:0000000000012DD9                 db    0
.eh_frame:0000000000012DDA                 db    0
.eh_frame:0000000000012DDB                 db    0
.eh_frame:0000000000012DDC                 db    0
.eh_frame:0000000000012DDD                 db    0
.eh_frame:0000000000012DDE                 db    0
.eh_frame:0000000000012DDF                 db    0
.eh_frame:0000000000012DE0                 db  4Ch ; L
.eh_frame:0000000000012DE1                 db    0
.eh_frame:0000000000012DE2                 db    0
.eh_frame:0000000000012DE3                 db    0
.eh_frame:0000000000012DE4                 db 0BCh
.eh_frame:0000000000012DE5                 db  19h
.eh_frame:0000000000012DE6                 db    0
.eh_frame:0000000000012DE7                 db    0
.eh_frame:0000000000012DE8                 db  88h
.eh_frame:0000000000012DE9                 db  9Bh
.eh_frame:0000000000012DEA                 db 0FFh
.eh_frame:0000000000012DEB                 db 0FFh
.eh_frame:0000000000012DEC                 db  7Dh ; }
.eh_frame:0000000000012DED                 db    0
.eh_frame:0000000000012DEE                 db    0
.eh_frame:0000000000012DEF                 db    0
.eh_frame:0000000000012DF0                 db    0
.eh_frame:0000000000012DF1                 db  42h ; B
.eh_frame:0000000000012DF2                 db  0Eh
.eh_frame:0000000000012DF3                 db  10h
.eh_frame:0000000000012DF4                 db  8Ch
.eh_frame:0000000000012DF5                 db    2
.eh_frame:0000000000012DF6                 db  41h ; A
.eh_frame:0000000000012DF7                 db  0Eh
.eh_frame:0000000000012DF8                 db  18h
.eh_frame:0000000000012DF9                 db  86h
.eh_frame:0000000000012DFA                 db    3
.eh_frame:0000000000012DFB                 db  44h ; D
.eh_frame:0000000000012DFC                 db  0Eh
.eh_frame:0000000000012DFD                 db  20h
.eh_frame:0000000000012DFE                 db  83h
.eh_frame:0000000000012DFF                 db    4
.eh_frame:0000000000012E00                 db  69h ; i
.eh_frame:0000000000012E01                 db  0Ah
.eh_frame:0000000000012E02                 db  0Eh
.eh_frame:0000000000012E03                 db  18h
.eh_frame:0000000000012E04                 db  41h ; A
.eh_frame:0000000000012E05                 db  0Eh
.eh_frame:0000000000012E06                 db  10h
.eh_frame:0000000000012E07                 db  42h ; B
.eh_frame:0000000000012E08                 db  0Eh
.eh_frame:0000000000012E09                 db    8
.eh_frame:0000000000012E0A                 db  45h ; E
.eh_frame:0000000000012E0B                 db  0Bh
.eh_frame:0000000000012E0C                 db  55h ; U
.eh_frame:0000000000012E0D                 db  0Ah
.eh_frame:0000000000012E0E                 db  0Eh
.eh_frame:0000000000012E0F                 db  18h
.eh_frame:0000000000012E10                 db  41h ; A
.eh_frame:0000000000012E11                 db  0Eh
.eh_frame:0000000000012E12                 db  10h
.eh_frame:0000000000012E13                 db  42h ; B
.eh_frame:0000000000012E14                 db  0Eh
.eh_frame:0000000000012E15                 db    8
.eh_frame:0000000000012E16                 db  48h ; H
.eh_frame:0000000000012E17                 db  0Bh
.eh_frame:0000000000012E18                 db  41h ; A
.eh_frame:0000000000012E19                 db  0Ah
.eh_frame:0000000000012E1A                 db  0Eh
.eh_frame:0000000000012E1B                 db  18h
.eh_frame:0000000000012E1C                 db  46h ; F
.eh_frame:0000000000012E1D                 db  0Eh
.eh_frame:0000000000012E1E                 db  10h
.eh_frame:0000000000012E1F                 db  42h ; B
.eh_frame:0000000000012E20                 db  0Eh
.eh_frame:0000000000012E21                 db    8
.eh_frame:0000000000012E22                 db  47h ; G
.eh_frame:0000000000012E23                 db  0Bh
.eh_frame:0000000000012E24                 db  49h ; I
.eh_frame:0000000000012E25                 db  0Eh
.eh_frame:0000000000012E26                 db  18h
.eh_frame:0000000000012E27                 db  41h ; A
.eh_frame:0000000000012E28                 db  0Eh
.eh_frame:0000000000012E29                 db  10h
.eh_frame:0000000000012E2A                 db  42h ; B
.eh_frame:0000000000012E2B                 db  0Eh
.eh_frame:0000000000012E2C                 db    8
.eh_frame:0000000000012E2D                 db    0
.eh_frame:0000000000012E2E                 db    0
.eh_frame:0000000000012E2F                 db    0
.eh_frame:0000000000012E30                 db  1Ch
.eh_frame:0000000000012E31                 db    0
.eh_frame:0000000000012E32                 db    0
.eh_frame:0000000000012E33                 db    0
.eh_frame:0000000000012E34                 db  0Ch
.eh_frame:0000000000012E35                 db  1Ah
.eh_frame:0000000000012E36                 db    0
.eh_frame:0000000000012E37                 db    0
.eh_frame:0000000000012E38                 db 0B8h
.eh_frame:0000000000012E39                 db  9Bh
.eh_frame:0000000000012E3A                 db 0FFh
.eh_frame:0000000000012E3B                 db 0FFh
.eh_frame:0000000000012E3C                 db  6Eh ; n
.eh_frame:0000000000012E3D                 db    0
.eh_frame:0000000000012E3E                 db    0
.eh_frame:0000000000012E3F                 db    0
.eh_frame:0000000000012E40                 db    0
.eh_frame:0000000000012E41                 db  44h ; D
.eh_frame:0000000000012E42                 db  0Eh
.eh_frame:0000000000012E43                 db  60h ; `
.eh_frame:0000000000012E44                 db  7Fh ; 
.eh_frame:0000000000012E45                 db  0Ah
.eh_frame:0000000000012E46                 db  0Eh
.eh_frame:0000000000012E47                 db    8
.eh_frame:0000000000012E48                 db  45h ; E
.eh_frame:0000000000012E49                 db  0Bh
.eh_frame:0000000000012E4A                 db    0
.eh_frame:0000000000012E4B                 db    0
.eh_frame:0000000000012E4C                 db    0
.eh_frame:0000000000012E4D                 db    0
.eh_frame:0000000000012E4E                 db    0
.eh_frame:0000000000012E4F                 db    0
.eh_frame:0000000000012E50                 db  1Ch
.eh_frame:0000000000012E51                 db    0
.eh_frame:0000000000012E52                 db    0
.eh_frame:0000000000012E53                 db    0
.eh_frame:0000000000012E54                 db  2Ch ; ,
.eh_frame:0000000000012E55                 db  1Ah
.eh_frame:0000000000012E56                 db    0
.eh_frame:0000000000012E57                 db    0
.eh_frame:0000000000012E58                 db    8
.eh_frame:0000000000012E59                 db  9Ch
.eh_frame:0000000000012E5A                 db 0FFh
.eh_frame:0000000000012E5B                 db 0FFh
.eh_frame:0000000000012E5C                 db  60h ; `
.eh_frame:0000000000012E5D                 db    0
.eh_frame:0000000000012E5E                 db    0
.eh_frame:0000000000012E5F                 db    0
.eh_frame:0000000000012E60                 db    0
.eh_frame:0000000000012E61                 db  44h ; D
.eh_frame:0000000000012E62                 db  0Eh
.eh_frame:0000000000012E63                 db  10h
.eh_frame:0000000000012E64                 db  75h ; u
.eh_frame:0000000000012E65                 db  0Ah
.eh_frame:0000000000012E66                 db  0Eh
.eh_frame:0000000000012E67                 db    8
.eh_frame:0000000000012E68                 db  47h ; G
.eh_frame:0000000000012E69                 db  0Bh
.eh_frame:0000000000012E6A                 db  5Fh ; _
.eh_frame:0000000000012E6B                 db  0Eh
.eh_frame:0000000000012E6C                 db    8
.eh_frame:0000000000012E6D                 db    0
.eh_frame:0000000000012E6E                 db    0
.eh_frame:0000000000012E6F                 db    0
.eh_frame:0000000000012E70                 db  14h
.eh_frame:0000000000012E71                 db    0
.eh_frame:0000000000012E72                 db    0
.eh_frame:0000000000012E73                 db    0
.eh_frame:0000000000012E74                 db  4Ch ; L
.eh_frame:0000000000012E75                 db  1Ah
.eh_frame:0000000000012E76                 db    0
.eh_frame:0000000000012E77                 db    0
.eh_frame:0000000000012E78                 db  48h ; H
.eh_frame:0000000000012E79                 db  9Ch
.eh_frame:0000000000012E7A                 db 0FFh
.eh_frame:0000000000012E7B                 db 0FFh
.eh_frame:0000000000012E7C                 db  36h ; 6
.eh_frame:0000000000012E7D                 db    0
.eh_frame:0000000000012E7E                 db    0
.eh_frame:0000000000012E7F                 db    0
.eh_frame:0000000000012E80                 db    0
.eh_frame:0000000000012E81                 db    0
.eh_frame:0000000000012E82                 db    0
.eh_frame:0000000000012E83                 db    0
.eh_frame:0000000000012E84                 db    0
.eh_frame:0000000000012E85                 db    0
.eh_frame:0000000000012E86                 db    0
.eh_frame:0000000000012E87                 db    0
.eh_frame:0000000000012E88                 db  1Ch
.eh_frame:0000000000012E89                 db    0
.eh_frame:0000000000012E8A                 db    0
.eh_frame:0000000000012E8B                 db    0
.eh_frame:0000000000012E8C                 db  64h ; d
.eh_frame:0000000000012E8D                 db  1Ah
.eh_frame:0000000000012E8E                 db    0
.eh_frame:0000000000012E8F                 db    0
.eh_frame:0000000000012E90                 db  70h ; p
.eh_frame:0000000000012E91                 db  9Ch
.eh_frame:0000000000012E92                 db 0FFh
.eh_frame:0000000000012E93                 db 0FFh
.eh_frame:0000000000012E94                 db  3Ch ; <
.eh_frame:0000000000012E95                 db    0
.eh_frame:0000000000012E96                 db    0
.eh_frame:0000000000012E97                 db    0
.eh_frame:0000000000012E98                 db    0
.eh_frame:0000000000012E99                 db  44h ; D
.eh_frame:0000000000012E9A                 db  0Eh
.eh_frame:0000000000012E9B                 db  10h
.eh_frame:0000000000012E9C                 db  61h ; a
.eh_frame:0000000000012E9D                 db  0Ah
.eh_frame:0000000000012E9E                 db  0Eh
.eh_frame:0000000000012E9F                 db    8
.eh_frame:0000000000012EA0                 db  4Bh ; K
.eh_frame:0000000000012EA1                 db  0Bh
.eh_frame:0000000000012EA2                 db  4Bh ; K
.eh_frame:0000000000012EA3                 db  0Eh
.eh_frame:0000000000012EA4                 db    8
.eh_frame:0000000000012EA5                 db    0
.eh_frame:0000000000012EA6                 db    0
.eh_frame:0000000000012EA7                 db    0
.eh_frame:0000000000012EA8                 db  34h ; 4
.eh_frame:0000000000012EA9                 db    0
.eh_frame:0000000000012EAA                 db    0
.eh_frame:0000000000012EAB                 db    0
.eh_frame:0000000000012EAC                 db  84h
.eh_frame:0000000000012EAD                 db  1Ah
.eh_frame:0000000000012EAE                 db    0
.eh_frame:0000000000012EAF                 db    0
.eh_frame:0000000000012EB0                 db  90h
.eh_frame:0000000000012EB1                 db  9Ch
.eh_frame:0000000000012EB2                 db 0FFh
.eh_frame:0000000000012EB3                 db 0FFh
.eh_frame:0000000000012EB4                 db  3Fh ; ?
.eh_frame:0000000000012EB5                 db    0
.eh_frame:0000000000012EB6                 db    0
.eh_frame:0000000000012EB7                 db    0
.eh_frame:0000000000012EB8                 db    0
.eh_frame:0000000000012EB9                 db  42h ; B
.eh_frame:0000000000012EBA                 db  0Eh
.eh_frame:0000000000012EBB                 db  10h
.eh_frame:0000000000012EBC                 db  8Dh
.eh_frame:0000000000012EBD                 db    2
.eh_frame:0000000000012EBE                 db  42h ; B
.eh_frame:0000000000012EBF                 db  0Eh
.eh_frame:0000000000012EC0                 db  18h
.eh_frame:0000000000012EC1                 db  8Ch
.eh_frame:0000000000012EC2                 db    3
.eh_frame:0000000000012EC3                 db  41h ; A
.eh_frame:0000000000012EC4                 db  0Eh
.eh_frame:0000000000012EC5                 db  20h
.eh_frame:0000000000012EC6                 db  86h
.eh_frame:0000000000012EC7                 db    4
.eh_frame:0000000000012EC8                 db  41h ; A
.eh_frame:0000000000012EC9                 db  0Eh
.eh_frame:0000000000012ECA                 db  28h ; (
.eh_frame:0000000000012ECB                 db  83h
.eh_frame:0000000000012ECC                 db    5
.eh_frame:0000000000012ECD                 db  46h ; F
.eh_frame:0000000000012ECE                 db  0Eh
.eh_frame:0000000000012ECF                 db  30h ; 0
.eh_frame:0000000000012ED0                 db  6Ah ; j
.eh_frame:0000000000012ED1                 db  0Eh
.eh_frame:0000000000012ED2                 db  28h ; (
.eh_frame:0000000000012ED3                 db  43h ; C
.eh_frame:0000000000012ED4                 db  0Eh
.eh_frame:0000000000012ED5                 db  20h
.eh_frame:0000000000012ED6                 db  41h ; A
.eh_frame:0000000000012ED7                 db  0Eh
.eh_frame:0000000000012ED8                 db  18h
.eh_frame:0000000000012ED9                 db  42h ; B
.eh_frame:0000000000012EDA                 db  0Eh
.eh_frame:0000000000012EDB                 db  10h
.eh_frame:0000000000012EDC                 db  42h ; B
.eh_frame:0000000000012EDD                 db  0Eh
.eh_frame:0000000000012EDE                 db    8
.eh_frame:0000000000012EDF                 db    0
.eh_frame:0000000000012EE0                 db  34h ; 4
.eh_frame:0000000000012EE1                 db    0
.eh_frame:0000000000012EE2                 db    0
.eh_frame:0000000000012EE3                 db    0
.eh_frame:0000000000012EE4                 db 0BCh
.eh_frame:0000000000012EE5                 db  1Ah
.eh_frame:0000000000012EE6                 db    0
.eh_frame:0000000000012EE7                 db    0
.eh_frame:0000000000012EE8                 db  98h
.eh_frame:0000000000012EE9                 db  9Ch
.eh_frame:0000000000012EEA                 db 0FFh
.eh_frame:0000000000012EEB                 db 0FFh
.eh_frame:0000000000012EEC                 db  7Bh ; {
.eh_frame:0000000000012EED                 db    0
.eh_frame:0000000000012EEE                 db    0
.eh_frame:0000000000012EEF                 db    0
.eh_frame:0000000000012EF0                 db    0
.eh_frame:0000000000012EF1                 db  42h ; B
.eh_frame:0000000000012EF2                 db  0Eh
.eh_frame:0000000000012EF3                 db  10h
.eh_frame:0000000000012EF4                 db  8Ch
.eh_frame:0000000000012EF5                 db    2
.eh_frame:0000000000012EF6                 db  41h ; A
.eh_frame:0000000000012EF7                 db  0Eh
.eh_frame:0000000000012EF8                 db  18h
.eh_frame:0000000000012EF9                 db  86h
.eh_frame:0000000000012EFA                 db    3
.eh_frame:0000000000012EFB                 db  41h ; A
.eh_frame:0000000000012EFC                 db  0Eh
.eh_frame:0000000000012EFD                 db  20h
.eh_frame:0000000000012EFE                 db  83h
.eh_frame:0000000000012EFF                 db    4
.eh_frame:0000000000012F00                 db  7Dh ; }
.eh_frame:0000000000012F01                 db  0Ah
.eh_frame:0000000000012F02                 db  0Eh
.eh_frame:0000000000012F03                 db  18h
.eh_frame:0000000000012F04                 db  41h ; A
.eh_frame:0000000000012F05                 db  0Eh
.eh_frame:0000000000012F06                 db  10h
.eh_frame:0000000000012F07                 db  42h ; B
.eh_frame:0000000000012F08                 db  0Eh
.eh_frame:0000000000012F09                 db    8
.eh_frame:0000000000012F0A                 db  44h ; D
.eh_frame:0000000000012F0B                 db  0Bh
.eh_frame:0000000000012F0C                 db  60h ; `
.eh_frame:0000000000012F0D                 db  0Ah
.eh_frame:0000000000012F0E                 db  0Eh
.eh_frame:0000000000012F0F                 db  18h
.eh_frame:0000000000012F10                 db  41h ; A
.eh_frame:0000000000012F11                 db  0Eh
.eh_frame:0000000000012F12                 db  10h
.eh_frame:0000000000012F13                 db  42h ; B
.eh_frame:0000000000012F14                 db  0Eh
.eh_frame:0000000000012F15                 db    8
.eh_frame:0000000000012F16                 db  45h ; E
.eh_frame:0000000000012F17                 db  0Bh
.eh_frame:0000000000012F18                 db  1Ch
.eh_frame:0000000000012F19                 db    0
.eh_frame:0000000000012F1A                 db    0
.eh_frame:0000000000012F1B                 db    0
.eh_frame:0000000000012F1C                 db 0F4h
.eh_frame:0000000000012F1D                 db  1Ah
.eh_frame:0000000000012F1E                 db    0
.eh_frame:0000000000012F1F                 db    0
.eh_frame:0000000000012F20                 db 0E0h
.eh_frame:0000000000012F21                 db  9Ch
.eh_frame:0000000000012F22                 db 0FFh
.eh_frame:0000000000012F23                 db 0FFh
.eh_frame:0000000000012F24                 db  40h ; @
.eh_frame:0000000000012F25                 db    0
.eh_frame:0000000000012F26                 db    0
.eh_frame:0000000000012F27                 db    0
.eh_frame:0000000000012F28                 db    0
.eh_frame:0000000000012F29                 db  44h ; D
.eh_frame:0000000000012F2A                 db  0Eh
.eh_frame:0000000000012F2B                 db  10h
.eh_frame:0000000000012F2C                 db  83h
.eh_frame:0000000000012F2D                 db    2
.eh_frame:0000000000012F2E                 db  5Ah ; Z
.eh_frame:0000000000012F2F                 db  0Ah
.eh_frame:0000000000012F30                 db  0Eh
.eh_frame:0000000000012F31                 db    8
.eh_frame:0000000000012F32                 db  4Ah ; J
.eh_frame:0000000000012F33                 db  0Bh
.eh_frame:0000000000012F34                 db  53h ; S
.eh_frame:0000000000012F35                 db  0Eh
.eh_frame:0000000000012F36                 db    8
.eh_frame:0000000000012F37                 db    0
.eh_frame:0000000000012F38                 db  2Ch ; ,
.eh_frame:0000000000012F39                 db    0
.eh_frame:0000000000012F3A                 db    0
.eh_frame:0000000000012F3B                 db    0
.eh_frame:0000000000012F3C                 db  14h
.eh_frame:0000000000012F3D                 db  1Bh
.eh_frame:0000000000012F3E                 db    0
.eh_frame:0000000000012F3F                 db    0
.eh_frame:0000000000012F40                 db    0
.eh_frame:0000000000012F41                 db  9Dh
.eh_frame:0000000000012F42                 db 0FFh
.eh_frame:0000000000012F43                 db 0FFh
.eh_frame:0000000000012F44                 db  57h ; W
.eh_frame:0000000000012F45                 db    0
.eh_frame:0000000000012F46                 db    0
.eh_frame:0000000000012F47                 db    0
.eh_frame:0000000000012F48                 db    0
.eh_frame:0000000000012F49                 db  63h ; c
.eh_frame:0000000000012F4A                 db  0Eh
.eh_frame:0000000000012F4B                 db  10h
.eh_frame:0000000000012F4C                 db  8Ch
.eh_frame:0000000000012F4D                 db    2
.eh_frame:0000000000012F4E                 db  41h ; A
.eh_frame:0000000000012F4F                 db  0Eh
.eh_frame:0000000000012F50                 db  18h
.eh_frame:0000000000012F51                 db  86h
.eh_frame:0000000000012F52                 db    3
.eh_frame:0000000000012F53                 db  44h ; D
.eh_frame:0000000000012F54                 db  0Eh
.eh_frame:0000000000012F55                 db  20h
.eh_frame:0000000000012F56                 db  83h
.eh_frame:0000000000012F57                 db    4
.eh_frame:0000000000012F58                 db  6Bh ; k
.eh_frame:0000000000012F59                 db  0Eh
.eh_frame:0000000000012F5A                 db  18h
.eh_frame:0000000000012F5B                 db  41h ; A
.eh_frame:0000000000012F5C                 db  0Eh
.eh_frame:0000000000012F5D                 db  10h
.eh_frame:0000000000012F5E                 db  42h ; B
.eh_frame:0000000000012F5F                 db  0Eh
.eh_frame:0000000000012F60                 db    8
.eh_frame:0000000000012F61                 db    0
.eh_frame:0000000000012F62                 db    0
.eh_frame:0000000000012F63                 db    0
.eh_frame:0000000000012F64                 db    0
.eh_frame:0000000000012F65                 db    0
.eh_frame:0000000000012F66                 db    0
.eh_frame:0000000000012F67                 db    0
.eh_frame:0000000000012F68                 db  2Ch ; ,
.eh_frame:0000000000012F69                 db    0
.eh_frame:0000000000012F6A                 db    0
.eh_frame:0000000000012F6B                 db    0
.eh_frame:0000000000012F6C                 db  44h ; D
.eh_frame:0000000000012F6D                 db  1Bh
.eh_frame:0000000000012F6E                 db    0
.eh_frame:0000000000012F6F                 db    0
.eh_frame:0000000000012F70                 db  30h ; 0
.eh_frame:0000000000012F71                 db  9Dh
.eh_frame:0000000000012F72                 db 0FFh
.eh_frame:0000000000012F73                 db 0FFh
.eh_frame:0000000000012F74                 db  1Fh
.eh_frame:0000000000012F75                 db  11h
.eh_frame:0000000000012F76                 db    0
.eh_frame:0000000000012F77                 db    0
.eh_frame:0000000000012F78                 db    0
.eh_frame:0000000000012F79                 db  41h ; A
.eh_frame:0000000000012F7A                 db  0Eh
.eh_frame:0000000000012F7B                 db  10h
.eh_frame:0000000000012F7C                 db  86h
.eh_frame:0000000000012F7D                 db    2
.eh_frame:0000000000012F7E                 db  43h ; C
.eh_frame:0000000000012F7F                 db  0Dh
.eh_frame:0000000000012F80                 db    6
.eh_frame:0000000000012F81                 db  48h ; H
.eh_frame:0000000000012F82                 db  8Fh
.eh_frame:0000000000012F83                 db    3
.eh_frame:0000000000012F84                 db  8Eh
.eh_frame:0000000000012F85                 db    4
.eh_frame:0000000000012F86                 db  8Dh
.eh_frame:0000000000012F87                 db    5
.eh_frame:0000000000012F88                 db  8Ch
.eh_frame:0000000000012F89                 db    6
.eh_frame:0000000000012F8A                 db  48h ; H
.eh_frame:0000000000012F8B                 db  83h
.eh_frame:0000000000012F8C                 db    7
.eh_frame:0000000000012F8D                 db    3
.eh_frame:0000000000012F8E                 db 0EFh
.eh_frame:0000000000012F8F                 db    1
.eh_frame:0000000000012F90                 db  0Ah
.eh_frame:0000000000012F91                 db  0Ch
.eh_frame:0000000000012F92                 db    7
.eh_frame:0000000000012F93                 db    8
.eh_frame:0000000000012F94                 db  45h ; E
.eh_frame:0000000000012F95                 db  0Bh
.eh_frame:0000000000012F96                 db    0
.eh_frame:0000000000012F97                 db    0
.eh_frame:0000000000012F98                 db  14h
.eh_frame:0000000000012F99                 db    0
.eh_frame:0000000000012F9A                 db    0
.eh_frame:0000000000012F9B                 db    0
.eh_frame:0000000000012F9C                 db  74h ; t
.eh_frame:0000000000012F9D                 db  1Bh
.eh_frame:0000000000012F9E                 db    0
.eh_frame:0000000000012F9F                 db    0
.eh_frame:0000000000012FA0                 db  20h
.eh_frame:0000000000012FA1                 db 0AEh
.eh_frame:0000000000012FA2                 db 0FFh
.eh_frame:0000000000012FA3                 db 0FFh
.eh_frame:0000000000012FA4                 db  0Eh
.eh_frame:0000000000012FA5                 db    0
.eh_frame:0000000000012FA6                 db    0
.eh_frame:0000000000012FA7                 db    0
.eh_frame:0000000000012FA8                 db    0
.eh_frame:0000000000012FA9                 db    0
.eh_frame:0000000000012FAA                 db    0
.eh_frame:0000000000012FAB                 db    0
.eh_frame:0000000000012FAC                 db    0
.eh_frame:0000000000012FAD                 db    0
.eh_frame:0000000000012FAE                 db    0
.eh_frame:0000000000012FAF                 db    0
.eh_frame:0000000000012FB0                 db  34h ; 4
.eh_frame:0000000000012FB1                 db    0
.eh_frame:0000000000012FB2                 db    0
.eh_frame:0000000000012FB3                 db    0
.eh_frame:0000000000012FB4                 db  8Ch
.eh_frame:0000000000012FB5                 db  1Bh
.eh_frame:0000000000012FB6                 db    0
.eh_frame:0000000000012FB7                 db    0
.eh_frame:0000000000012FB8                 db  18h
.eh_frame:0000000000012FB9                 db 0AEh
.eh_frame:0000000000012FBA                 db 0FFh
.eh_frame:0000000000012FBB                 db 0FFh
.eh_frame:0000000000012FBC                 db  7Eh ; ~
.eh_frame:0000000000012FBD                 db    2
.eh_frame:0000000000012FBE                 db    0
.eh_frame:0000000000012FBF                 db    0
.eh_frame:0000000000012FC0                 db    0
.eh_frame:0000000000012FC1                 db  42h ; B
.eh_frame:0000000000012FC2                 db  0Eh
.eh_frame:0000000000012FC3                 db  10h
.eh_frame:0000000000012FC4                 db  8Ch
.eh_frame:0000000000012FC5                 db    2
.eh_frame:0000000000012FC6                 db  41h ; A
.eh_frame:0000000000012FC7                 db  0Eh
.eh_frame:0000000000012FC8                 db  18h
.eh_frame:0000000000012FC9                 db  86h
.eh_frame:0000000000012FCA                 db    3
.eh_frame:0000000000012FCB                 db  43h ; C
.eh_frame:0000000000012FCC                 db  0Eh
.eh_frame:0000000000012FCD                 db  20h
.eh_frame:0000000000012FCE                 db  83h
.eh_frame:0000000000012FCF                 db    4
.eh_frame:0000000000012FD0                 db  44h ; D
.eh_frame:0000000000012FD1                 db  0Eh
.eh_frame:0000000000012FD2                 db  70h ; p
.eh_frame:0000000000012FD3                 db    2
.eh_frame:0000000000012FD4                 db 0F0h
.eh_frame:0000000000012FD5                 db  0Ah
.eh_frame:0000000000012FD6                 db  0Eh
.eh_frame:0000000000012FD7                 db  20h
.eh_frame:0000000000012FD8                 db  41h ; A
.eh_frame:0000000000012FD9                 db  0Eh
.eh_frame:0000000000012FDA                 db  18h
.eh_frame:0000000000012FDB                 db  41h ; A
.eh_frame:0000000000012FDC                 db  0Eh
.eh_frame:0000000000012FDD                 db  10h
.eh_frame:0000000000012FDE                 db  42h ; B
.eh_frame:0000000000012FDF                 db  0Eh
.eh_frame:0000000000012FE0                 db    8
.eh_frame:0000000000012FE1                 db  42h ; B
.eh_frame:0000000000012FE2                 db  0Bh
.eh_frame:0000000000012FE3                 db    0
.eh_frame:0000000000012FE4                 db    0
.eh_frame:0000000000012FE5                 db    0
.eh_frame:0000000000012FE6                 db    0
.eh_frame:0000000000012FE7                 db    0
.eh_frame:0000000000012FE8                 db  14h
.eh_frame:0000000000012FE9                 db    0
.eh_frame:0000000000012FEA                 db    0
.eh_frame:0000000000012FEB                 db    0
.eh_frame:0000000000012FEC                 db 0C4h
.eh_frame:0000000000012FED                 db  1Bh
.eh_frame:0000000000012FEE                 db    0
.eh_frame:0000000000012FEF                 db    0
.eh_frame:0000000000012FF0                 db  60h ; `
.eh_frame:0000000000012FF1                 db 0B0h
.eh_frame:0000000000012FF2                 db 0FFh
.eh_frame:0000000000012FF3                 db 0FFh
.eh_frame:0000000000012FF4                 db 0FEh
.eh_frame:0000000000012FF5                 db    1
.eh_frame:0000000000012FF6                 db    0
.eh_frame:0000000000012FF7                 db    0
.eh_frame:0000000000012FF8                 db    0
.eh_frame:0000000000012FF9                 db    0
.eh_frame:0000000000012FFA                 db    0
.eh_frame:0000000000012FFB                 db    0
.eh_frame:0000000000012FFC                 db    0
.eh_frame:0000000000012FFD                 db    0
.eh_frame:0000000000012FFE                 db    0
.eh_frame:0000000000012FFF                 db    0
.eh_frame:0000000000013000                 db  4Ch ; L
.eh_frame:0000000000013001                 db    0
.eh_frame:0000000000013002                 db    0
.eh_frame:0000000000013003                 db    0
.eh_frame:0000000000013004                 db 0DCh
.eh_frame:0000000000013005                 db  1Bh
.eh_frame:0000000000013006                 db    0
.eh_frame:0000000000013007                 db    0
.eh_frame:0000000000013008                 db  48h ; H
.eh_frame:0000000000013009                 db 0B2h
.eh_frame:000000000001300A                 db 0FFh
.eh_frame:000000000001300B                 db 0FFh
.eh_frame:000000000001300C                 db 0ECh
.eh_frame:000000000001300D                 db  0Ch
.eh_frame:000000000001300E                 db    0
.eh_frame:000000000001300F                 db    0
.eh_frame:0000000000013010                 db    0
.eh_frame:0000000000013011                 db  42h ; B
.eh_frame:0000000000013012                 db  0Eh
.eh_frame:0000000000013013                 db  10h
.eh_frame:0000000000013014                 db  8Fh
.eh_frame:0000000000013015                 db    2
.eh_frame:0000000000013016                 db  42h ; B
.eh_frame:0000000000013017                 db  0Eh
.eh_frame:0000000000013018                 db  18h
.eh_frame:0000000000013019                 db  8Eh
.eh_frame:000000000001301A                 db    3
.eh_frame:000000000001301B                 db  46h ; F
.eh_frame:000000000001301C                 db  0Eh
.eh_frame:000000000001301D                 db  20h
.eh_frame:000000000001301E                 db  8Dh
.eh_frame:000000000001301F                 db    4
.eh_frame:0000000000013020                 db  42h ; B
.eh_frame:0000000000013021                 db  0Eh
.eh_frame:0000000000013022                 db  28h ; (
.eh_frame:0000000000013023                 db  8Ch
.eh_frame:0000000000013024                 db    5
.eh_frame:0000000000013025                 db  45h ; E
.eh_frame:0000000000013026                 db  0Eh
.eh_frame:0000000000013027                 db  30h ; 0
.eh_frame:0000000000013028                 db  86h
.eh_frame:0000000000013029                 db    6
.eh_frame:000000000001302A                 db  41h ; A
.eh_frame:000000000001302B                 db  0Eh
.eh_frame:000000000001302C                 db  38h ; 8
.eh_frame:000000000001302D                 db  83h
.eh_frame:000000000001302E                 db    7
.eh_frame:000000000001302F                 db  52h ; R
.eh_frame:0000000000013030                 db  0Eh
.eh_frame:0000000000013031                 db  90h
.eh_frame:0000000000013032                 db    1
.eh_frame:0000000000013033                 db    2
.eh_frame:0000000000013034                 db  82h
.eh_frame:0000000000013035                 db  0Ah
.eh_frame:0000000000013036                 db  0Eh
.eh_frame:0000000000013037                 db  38h ; 8
.eh_frame:0000000000013038                 db  41h ; A
.eh_frame:0000000000013039                 db  0Eh
.eh_frame:000000000001303A                 db  30h ; 0
.eh_frame:000000000001303B                 db  41h ; A
.eh_frame:000000000001303C                 db  0Eh
.eh_frame:000000000001303D                 db  28h ; (
.eh_frame:000000000001303E                 db  42h ; B
.eh_frame:000000000001303F                 db  0Eh
.eh_frame:0000000000013040                 db  20h
.eh_frame:0000000000013041                 db  42h ; B
.eh_frame:0000000000013042                 db  0Eh
.eh_frame:0000000000013043                 db  18h
.eh_frame:0000000000013044                 db  42h ; B
.eh_frame:0000000000013045                 db  0Eh
.eh_frame:0000000000013046                 db  10h
.eh_frame:0000000000013047                 db  42h ; B
.eh_frame:0000000000013048                 db  0Eh
.eh_frame:0000000000013049                 db    8
.eh_frame:000000000001304A                 db  48h ; H
.eh_frame:000000000001304B                 db  0Bh
.eh_frame:000000000001304C                 db    0
.eh_frame:000000000001304D                 db    0
.eh_frame:000000000001304E                 db    0
.eh_frame:000000000001304F                 db    0
.eh_frame:0000000000013050                 db  44h ; D
.eh_frame:0000000000013051                 db    0
.eh_frame:0000000000013052                 db    0
.eh_frame:0000000000013053                 db    0
.eh_frame:0000000000013054                 db  2Ch ; ,
.eh_frame:0000000000013055                 db  1Ch
.eh_frame:0000000000013056                 db    0
.eh_frame:0000000000013057                 db    0
.eh_frame:0000000000013058                 db 0E8h
.eh_frame:0000000000013059                 db 0BEh
.eh_frame:000000000001305A                 db 0FFh
.eh_frame:000000000001305B                 db 0FFh
.eh_frame:000000000001305C                 db  65h ; e
.eh_frame:000000000001305D                 db    0
.eh_frame:000000000001305E                 db    0
.eh_frame:000000000001305F                 db    0
.eh_frame:0000000000013060                 db    0
.eh_frame:0000000000013061                 db  42h ; B
.eh_frame:0000000000013062                 db  0Eh
.eh_frame:0000000000013063                 db  10h
.eh_frame:0000000000013064                 db  8Fh
.eh_frame:0000000000013065                 db    2
.eh_frame:0000000000013066                 db  42h ; B
.eh_frame:0000000000013067                 db  0Eh
.eh_frame:0000000000013068                 db  18h
.eh_frame:0000000000013069                 db  8Eh
.eh_frame:000000000001306A                 db    3
.eh_frame:000000000001306B                 db  45h ; E
.eh_frame:000000000001306C                 db  0Eh
.eh_frame:000000000001306D                 db  20h
.eh_frame:000000000001306E                 db  8Dh
.eh_frame:000000000001306F                 db    4
.eh_frame:0000000000013070                 db  42h ; B
.eh_frame:0000000000013071                 db  0Eh
.eh_frame:0000000000013072                 db  28h ; (
.eh_frame:0000000000013073                 db  8Ch
.eh_frame:0000000000013074                 db    5
.eh_frame:0000000000013075                 db  48h ; H
.eh_frame:0000000000013076                 db  0Eh
.eh_frame:0000000000013077                 db  30h ; 0
.eh_frame:0000000000013078                 db  86h
.eh_frame:0000000000013079                 db    6
.eh_frame:000000000001307A                 db  48h ; H
.eh_frame:000000000001307B                 db  0Eh
.eh_frame:000000000001307C                 db  38h ; 8
.eh_frame:000000000001307D                 db  83h
.eh_frame:000000000001307E                 db    7
.eh_frame:000000000001307F                 db  4Dh ; M
.eh_frame:0000000000013080                 db  0Eh
.eh_frame:0000000000013081                 db  40h ; @
.eh_frame:0000000000013082                 db  72h ; r
.eh_frame:0000000000013083                 db  0Eh
.eh_frame:0000000000013084                 db  38h ; 8
.eh_frame:0000000000013085                 db  41h ; A
.eh_frame:0000000000013086                 db  0Eh
.eh_frame:0000000000013087                 db  30h ; 0
.eh_frame:0000000000013088                 db  41h ; A
.eh_frame:0000000000013089                 db  0Eh
.eh_frame:000000000001308A                 db  28h ; (
.eh_frame:000000000001308B                 db  42h ; B
.eh_frame:000000000001308C                 db  0Eh
.eh_frame:000000000001308D                 db  20h
.eh_frame:000000000001308E                 db  42h ; B
.eh_frame:000000000001308F                 db  0Eh
.eh_frame:0000000000013090                 db  18h
.eh_frame:0000000000013091                 db  42h ; B
.eh_frame:0000000000013092                 db  0Eh
.eh_frame:0000000000013093                 db  10h
.eh_frame:0000000000013094                 db  42h ; B
.eh_frame:0000000000013095                 db  0Eh
.eh_frame:0000000000013096                 db    8
.eh_frame:0000000000013097                 db    0
.eh_frame:0000000000013098                 db  14h
.eh_frame:0000000000013099                 db    0
.eh_frame:000000000001309A                 db    0
.eh_frame:000000000001309B                 db    0
.eh_frame:000000000001309C                 db  74h ; t
.eh_frame:000000000001309D                 db  1Ch
.eh_frame:000000000001309E                 db    0
.eh_frame:000000000001309F                 db    0
.eh_frame:00000000000130A0                 db  10h
.eh_frame:00000000000130A1                 db 0BFh
.eh_frame:00000000000130A2                 db 0FFh
.eh_frame:00000000000130A3                 db 0FFh
.eh_frame:00000000000130A4                 db    2
.eh_frame:00000000000130A5                 db    0
.eh_frame:00000000000130A6                 db    0
.eh_frame:00000000000130A7                 db    0
.eh_frame:00000000000130A8                 db    0
.eh_frame:00000000000130A9                 db    0
.eh_frame:00000000000130AA                 db    0
.eh_frame:00000000000130AB                 db    0
.eh_frame:00000000000130AC                 db    0
.eh_frame:00000000000130AD                 db    0
.eh_frame:00000000000130AE                 db    0
.eh_frame:00000000000130AF                 db    0
.eh_frame:00000000000130B0                 db  10h
.eh_frame:00000000000130B1                 db    0
.eh_frame:00000000000130B2                 db    0
.eh_frame:00000000000130B3                 db    0
.eh_frame:00000000000130B4                 db  8Ch
.eh_frame:00000000000130B5                 db  1Ch
.eh_frame:00000000000130B6                 db    0
.eh_frame:00000000000130B7                 db    0
.eh_frame:00000000000130B8                 db    8
.eh_frame:00000000000130B9                 db 0BFh
.eh_frame:00000000000130BA                 db 0FFh
.eh_frame:00000000000130BB                 db 0FFh
.eh_frame:00000000000130BC                 db  0Eh
.eh_frame:00000000000130BD                 db    0
.eh_frame:00000000000130BE                 db    0
.eh_frame:00000000000130BF                 db    0
.eh_frame:00000000000130C0                 db    0
.eh_frame:00000000000130C1                 db    0
.eh_frame:00000000000130C2                 db    0
.eh_frame:00000000000130C3                 db    0
.eh_frame:00000000000130C4 __FRAME_END__   db    0
.eh_frame:00000000000130C5                 db    0
.eh_frame:00000000000130C6                 db    0
.eh_frame:00000000000130C7                 db    0
.eh_frame:00000000000130C7 _eh_frame       ends
.eh_frame:00000000000130C7
.init_array:0000000000213870 ; ELF Initialization Function Table
.init_array:0000000000213870 ; ===========================================================================
.init_array:0000000000213870
.init_array:0000000000213870 ; Segment type: Pure data
.init_array:0000000000213870 ; Segment permissions: Read/Write
.init_array:0000000000213870 _init_array     segment qword public 'DATA' use64
.init_array:0000000000213870                 assume cs:_init_array
.init_array:0000000000213870                 ;org 213870h
.init_array:0000000000213870 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000213870                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000213870                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000213870 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000213870
.fini_array:0000000000213878 ; ELF Termination Function Table
.fini_array:0000000000213878 ; ===========================================================================
.fini_array:0000000000213878
.fini_array:0000000000213878 ; Segment type: Pure data
.fini_array:0000000000213878 ; Segment permissions: Read/Write
.fini_array:0000000000213878 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000213878                 assume cs:_fini_array
.fini_array:0000000000213878                 ;org 213878h
.fini_array:0000000000213878 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000213878                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000213878 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000213878
.data.rel.ro:0000000000213880 ; ===========================================================================
.data.rel.ro:0000000000213880
.data.rel.ro:0000000000213880 ; Segment type: Pure data
.data.rel.ro:0000000000213880 ; Segment permissions: Read/Write
.data.rel.ro:0000000000213880 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000213880                 assume cs:_data_rel_ro
.data.rel.ro:0000000000213880                 ;org 213880h
.data.rel.ro:0000000000213880 ; struct option long_options
.data.rel.ro:0000000000213880 long_options    dq offset aAll          ; name
.data.rel.ro:0000000000213880                                         ; DATA XREF: main+D↑o
.data.rel.ro:0000000000213880                                         ; main+232↑o
.data.rel.ro:0000000000213880                 dd 0                    ; has_arg ; "all"
.data.rel.ro:0000000000213880                 db 4 dup(0)
.data.rel.ro:0000000000213880                 dq 0                    ; flag
.data.rel.ro:0000000000213880                 dd 61h                  ; val
.data.rel.ro:0000000000213880                 db 4 dup(0)
.data.rel.ro:00000000002138A0                 dq offset aBlockSize    ; "block-size"
.data.rel.ro:00000000002138A8                 db    1
.data.rel.ro:00000000002138A9                 db    0
.data.rel.ro:00000000002138AA                 db    0
.data.rel.ro:00000000002138AB                 db    0
.data.rel.ro:00000000002138AC                 db    0
.data.rel.ro:00000000002138AD                 db    0
.data.rel.ro:00000000002138AE                 db    0
.data.rel.ro:00000000002138AF                 db    0
.data.rel.ro:00000000002138B0                 db    0
.data.rel.ro:00000000002138B1                 db    0
.data.rel.ro:00000000002138B2                 db    0
.data.rel.ro:00000000002138B3                 db    0
.data.rel.ro:00000000002138B4                 db    0
.data.rel.ro:00000000002138B5                 db    0
.data.rel.ro:00000000002138B6                 db    0
.data.rel.ro:00000000002138B7                 db    0
.data.rel.ro:00000000002138B8                 db  42h ; B
.data.rel.ro:00000000002138B9                 db    0
.data.rel.ro:00000000002138BA                 db    0
.data.rel.ro:00000000002138BB                 db    0
.data.rel.ro:00000000002138BC                 db    0
.data.rel.ro:00000000002138BD                 db    0
.data.rel.ro:00000000002138BE                 db    0
.data.rel.ro:00000000002138BF                 db    0
.data.rel.ro:00000000002138C0                 dq offset aInodes       ; "inodes"
.data.rel.ro:00000000002138C8                 db    0
.data.rel.ro:00000000002138C9                 db    0
.data.rel.ro:00000000002138CA                 db    0
.data.rel.ro:00000000002138CB                 db    0
.data.rel.ro:00000000002138CC                 db    0
.data.rel.ro:00000000002138CD                 db    0
.data.rel.ro:00000000002138CE                 db    0
.data.rel.ro:00000000002138CF                 db    0
.data.rel.ro:00000000002138D0                 db    0
.data.rel.ro:00000000002138D1                 db    0
.data.rel.ro:00000000002138D2                 db    0
.data.rel.ro:00000000002138D3                 db    0
.data.rel.ro:00000000002138D4                 db    0
.data.rel.ro:00000000002138D5                 db    0
.data.rel.ro:00000000002138D6                 db    0
.data.rel.ro:00000000002138D7                 db    0
.data.rel.ro:00000000002138D8                 db  69h ; i
.data.rel.ro:00000000002138D9                 db    0
.data.rel.ro:00000000002138DA                 db    0
.data.rel.ro:00000000002138DB                 db    0
.data.rel.ro:00000000002138DC                 db    0
.data.rel.ro:00000000002138DD                 db    0
.data.rel.ro:00000000002138DE                 db    0
.data.rel.ro:00000000002138DF                 db    0
.data.rel.ro:00000000002138E0                 dq offset aHumanReadable ; "human-readable"
.data.rel.ro:00000000002138E8                 db    0
.data.rel.ro:00000000002138E9                 db    0
.data.rel.ro:00000000002138EA                 db    0
.data.rel.ro:00000000002138EB                 db    0
.data.rel.ro:00000000002138EC                 db    0
.data.rel.ro:00000000002138ED                 db    0
.data.rel.ro:00000000002138EE                 db    0
.data.rel.ro:00000000002138EF                 db    0
.data.rel.ro:00000000002138F0                 db    0
.data.rel.ro:00000000002138F1                 db    0
.data.rel.ro:00000000002138F2                 db    0
.data.rel.ro:00000000002138F3                 db    0
.data.rel.ro:00000000002138F4                 db    0
.data.rel.ro:00000000002138F5                 db    0
.data.rel.ro:00000000002138F6                 db    0
.data.rel.ro:00000000002138F7                 db    0
.data.rel.ro:00000000002138F8                 db  68h ; h
.data.rel.ro:00000000002138F9                 db    0
.data.rel.ro:00000000002138FA                 db    0
.data.rel.ro:00000000002138FB                 db    0
.data.rel.ro:00000000002138FC                 db    0
.data.rel.ro:00000000002138FD                 db    0
.data.rel.ro:00000000002138FE                 db    0
.data.rel.ro:00000000002138FF                 db    0
.data.rel.ro:0000000000213900                 dq offset aSi           ; "si"
.data.rel.ro:0000000000213908                 db    0
.data.rel.ro:0000000000213909                 db    0
.data.rel.ro:000000000021390A                 db    0
.data.rel.ro:000000000021390B                 db    0
.data.rel.ro:000000000021390C                 db    0
.data.rel.ro:000000000021390D                 db    0
.data.rel.ro:000000000021390E                 db    0
.data.rel.ro:000000000021390F                 db    0
.data.rel.ro:0000000000213910                 db    0
.data.rel.ro:0000000000213911                 db    0
.data.rel.ro:0000000000213912                 db    0
.data.rel.ro:0000000000213913                 db    0
.data.rel.ro:0000000000213914                 db    0
.data.rel.ro:0000000000213915                 db    0
.data.rel.ro:0000000000213916                 db    0
.data.rel.ro:0000000000213917                 db    0
.data.rel.ro:0000000000213918                 db  48h ; H
.data.rel.ro:0000000000213919                 db    0
.data.rel.ro:000000000021391A                 db    0
.data.rel.ro:000000000021391B                 db    0
.data.rel.ro:000000000021391C                 db    0
.data.rel.ro:000000000021391D                 db    0
.data.rel.ro:000000000021391E                 db    0
.data.rel.ro:000000000021391F                 db    0
.data.rel.ro:0000000000213920                 dq offset aLocal        ; "local"
.data.rel.ro:0000000000213928                 db    0
.data.rel.ro:0000000000213929                 db    0
.data.rel.ro:000000000021392A                 db    0
.data.rel.ro:000000000021392B                 db    0
.data.rel.ro:000000000021392C                 db    0
.data.rel.ro:000000000021392D                 db    0
.data.rel.ro:000000000021392E                 db    0
.data.rel.ro:000000000021392F                 db    0
.data.rel.ro:0000000000213930                 db    0
.data.rel.ro:0000000000213931                 db    0
.data.rel.ro:0000000000213932                 db    0
.data.rel.ro:0000000000213933                 db    0
.data.rel.ro:0000000000213934                 db    0
.data.rel.ro:0000000000213935                 db    0
.data.rel.ro:0000000000213936                 db    0
.data.rel.ro:0000000000213937                 db    0
.data.rel.ro:0000000000213938                 db  6Ch ; l
.data.rel.ro:0000000000213939                 db    0
.data.rel.ro:000000000021393A                 db    0
.data.rel.ro:000000000021393B                 db    0
.data.rel.ro:000000000021393C                 db    0
.data.rel.ro:000000000021393D                 db    0
.data.rel.ro:000000000021393E                 db    0
.data.rel.ro:000000000021393F                 db    0
.data.rel.ro:0000000000213940                 dq offset aOutput+2     ; "output"
.data.rel.ro:0000000000213948                 db    2
.data.rel.ro:0000000000213949                 db    0
.data.rel.ro:000000000021394A                 db    0
.data.rel.ro:000000000021394B                 db    0
.data.rel.ro:000000000021394C                 db    0
.data.rel.ro:000000000021394D                 db    0
.data.rel.ro:000000000021394E                 db    0
.data.rel.ro:000000000021394F                 db    0
.data.rel.ro:0000000000213950                 db    0
.data.rel.ro:0000000000213951                 db    0
.data.rel.ro:0000000000213952                 db    0
.data.rel.ro:0000000000213953                 db    0
.data.rel.ro:0000000000213954                 db    0
.data.rel.ro:0000000000213955                 db    0
.data.rel.ro:0000000000213956                 db    0
.data.rel.ro:0000000000213957                 db    0
.data.rel.ro:0000000000213958                 db  83h
.data.rel.ro:0000000000213959                 db    0
.data.rel.ro:000000000021395A                 db    0
.data.rel.ro:000000000021395B                 db    0
.data.rel.ro:000000000021395C                 db    0
.data.rel.ro:000000000021395D                 db    0
.data.rel.ro:000000000021395E                 db    0
.data.rel.ro:000000000021395F                 db    0
.data.rel.ro:0000000000213960                 dq offset aPortability  ; "portability"
.data.rel.ro:0000000000213968                 db    0
.data.rel.ro:0000000000213969                 db    0
.data.rel.ro:000000000021396A                 db    0
.data.rel.ro:000000000021396B                 db    0
.data.rel.ro:000000000021396C                 db    0
.data.rel.ro:000000000021396D                 db    0
.data.rel.ro:000000000021396E                 db    0
.data.rel.ro:000000000021396F                 db    0
.data.rel.ro:0000000000213970                 db    0
.data.rel.ro:0000000000213971                 db    0
.data.rel.ro:0000000000213972                 db    0
.data.rel.ro:0000000000213973                 db    0
.data.rel.ro:0000000000213974                 db    0
.data.rel.ro:0000000000213975                 db    0
.data.rel.ro:0000000000213976                 db    0
.data.rel.ro:0000000000213977                 db    0
.data.rel.ro:0000000000213978                 db  50h ; P
.data.rel.ro:0000000000213979                 db    0
.data.rel.ro:000000000021397A                 db    0
.data.rel.ro:000000000021397B                 db    0
.data.rel.ro:000000000021397C                 db    0
.data.rel.ro:000000000021397D                 db    0
.data.rel.ro:000000000021397E                 db    0
.data.rel.ro:000000000021397F                 db    0
.data.rel.ro:0000000000213980                 dq offset aPrintType    ; "print-type"
.data.rel.ro:0000000000213988                 db    0
.data.rel.ro:0000000000213989                 db    0
.data.rel.ro:000000000021398A                 db    0
.data.rel.ro:000000000021398B                 db    0
.data.rel.ro:000000000021398C                 db    0
.data.rel.ro:000000000021398D                 db    0
.data.rel.ro:000000000021398E                 db    0
.data.rel.ro:000000000021398F                 db    0
.data.rel.ro:0000000000213990                 db    0
.data.rel.ro:0000000000213991                 db    0
.data.rel.ro:0000000000213992                 db    0
.data.rel.ro:0000000000213993                 db    0
.data.rel.ro:0000000000213994                 db    0
.data.rel.ro:0000000000213995                 db    0
.data.rel.ro:0000000000213996                 db    0
.data.rel.ro:0000000000213997                 db    0
.data.rel.ro:0000000000213998                 db  54h ; T
.data.rel.ro:0000000000213999                 db    0
.data.rel.ro:000000000021399A                 db    0
.data.rel.ro:000000000021399B                 db    0
.data.rel.ro:000000000021399C                 db    0
.data.rel.ro:000000000021399D                 db    0
.data.rel.ro:000000000021399E                 db    0
.data.rel.ro:000000000021399F                 db    0
.data.rel.ro:00000000002139A0                 dq offset aNoSync+3     ; "sync"
.data.rel.ro:00000000002139A8                 db    0
.data.rel.ro:00000000002139A9                 db    0
.data.rel.ro:00000000002139AA                 db    0
.data.rel.ro:00000000002139AB                 db    0
.data.rel.ro:00000000002139AC                 db    0
.data.rel.ro:00000000002139AD                 db    0
.data.rel.ro:00000000002139AE                 db    0
.data.rel.ro:00000000002139AF                 db    0
.data.rel.ro:00000000002139B0                 db    0
.data.rel.ro:00000000002139B1                 db    0
.data.rel.ro:00000000002139B2                 db    0
.data.rel.ro:00000000002139B3                 db    0
.data.rel.ro:00000000002139B4                 db    0
.data.rel.ro:00000000002139B5                 db    0
.data.rel.ro:00000000002139B6                 db    0
.data.rel.ro:00000000002139B7                 db    0
.data.rel.ro:00000000002139B8                 db  81h
.data.rel.ro:00000000002139B9                 db    0
.data.rel.ro:00000000002139BA                 db    0
.data.rel.ro:00000000002139BB                 db    0
.data.rel.ro:00000000002139BC                 db    0
.data.rel.ro:00000000002139BD                 db    0
.data.rel.ro:00000000002139BE                 db    0
.data.rel.ro:00000000002139BF                 db    0
.data.rel.ro:00000000002139C0                 dq offset aNoSync       ; "no-sync"
.data.rel.ro:00000000002139C8                 db    0
.data.rel.ro:00000000002139C9                 db    0
.data.rel.ro:00000000002139CA                 db    0
.data.rel.ro:00000000002139CB                 db    0
.data.rel.ro:00000000002139CC                 db    0
.data.rel.ro:00000000002139CD                 db    0
.data.rel.ro:00000000002139CE                 db    0
.data.rel.ro:00000000002139CF                 db    0
.data.rel.ro:00000000002139D0                 db    0
.data.rel.ro:00000000002139D1                 db    0
.data.rel.ro:00000000002139D2                 db    0
.data.rel.ro:00000000002139D3                 db    0
.data.rel.ro:00000000002139D4                 db    0
.data.rel.ro:00000000002139D5                 db    0
.data.rel.ro:00000000002139D6                 db    0
.data.rel.ro:00000000002139D7                 db    0
.data.rel.ro:00000000002139D8                 db  80h
.data.rel.ro:00000000002139D9                 db    0
.data.rel.ro:00000000002139DA                 db    0
.data.rel.ro:00000000002139DB                 db    0
.data.rel.ro:00000000002139DC                 db    0
.data.rel.ro:00000000002139DD                 db    0
.data.rel.ro:00000000002139DE                 db    0
.data.rel.ro:00000000002139DF                 db    0
.data.rel.ro:00000000002139E0                 dq offset src           ; "total"
.data.rel.ro:00000000002139E8                 db    0
.data.rel.ro:00000000002139E9                 db    0
.data.rel.ro:00000000002139EA                 db    0
.data.rel.ro:00000000002139EB                 db    0
.data.rel.ro:00000000002139EC                 db    0
.data.rel.ro:00000000002139ED                 db    0
.data.rel.ro:00000000002139EE                 db    0
.data.rel.ro:00000000002139EF                 db    0
.data.rel.ro:00000000002139F0                 db    0
.data.rel.ro:00000000002139F1                 db    0
.data.rel.ro:00000000002139F2                 db    0
.data.rel.ro:00000000002139F3                 db    0
.data.rel.ro:00000000002139F4                 db    0
.data.rel.ro:00000000002139F5                 db    0
.data.rel.ro:00000000002139F6                 db    0
.data.rel.ro:00000000002139F7                 db    0
.data.rel.ro:00000000002139F8                 db  82h
.data.rel.ro:00000000002139F9                 db    0
.data.rel.ro:00000000002139FA                 db    0
.data.rel.ro:00000000002139FB                 db    0
.data.rel.ro:00000000002139FC                 db    0
.data.rel.ro:00000000002139FD                 db    0
.data.rel.ro:00000000002139FE                 db    0
.data.rel.ro:00000000002139FF                 db    0
.data.rel.ro:0000000000213A00                 dq offset aExcludeType+8 ; "type"
.data.rel.ro:0000000000213A08                 db    1
.data.rel.ro:0000000000213A09                 db    0
.data.rel.ro:0000000000213A0A                 db    0
.data.rel.ro:0000000000213A0B                 db    0
.data.rel.ro:0000000000213A0C                 db    0
.data.rel.ro:0000000000213A0D                 db    0
.data.rel.ro:0000000000213A0E                 db    0
.data.rel.ro:0000000000213A0F                 db    0
.data.rel.ro:0000000000213A10                 db    0
.data.rel.ro:0000000000213A11                 db    0
.data.rel.ro:0000000000213A12                 db    0
.data.rel.ro:0000000000213A13                 db    0
.data.rel.ro:0000000000213A14                 db    0
.data.rel.ro:0000000000213A15                 db    0
.data.rel.ro:0000000000213A16                 db    0
.data.rel.ro:0000000000213A17                 db    0
.data.rel.ro:0000000000213A18                 db  74h ; t
.data.rel.ro:0000000000213A19                 db    0
.data.rel.ro:0000000000213A1A                 db    0
.data.rel.ro:0000000000213A1B                 db    0
.data.rel.ro:0000000000213A1C                 db    0
.data.rel.ro:0000000000213A1D                 db    0
.data.rel.ro:0000000000213A1E                 db    0
.data.rel.ro:0000000000213A1F                 db    0
.data.rel.ro:0000000000213A20                 dq offset aExcludeType  ; "exclude-type"
.data.rel.ro:0000000000213A28                 db    1
.data.rel.ro:0000000000213A29                 db    0
.data.rel.ro:0000000000213A2A                 db    0
.data.rel.ro:0000000000213A2B                 db    0
.data.rel.ro:0000000000213A2C                 db    0
.data.rel.ro:0000000000213A2D                 db    0
.data.rel.ro:0000000000213A2E                 db    0
.data.rel.ro:0000000000213A2F                 db    0
.data.rel.ro:0000000000213A30                 db    0
.data.rel.ro:0000000000213A31                 db    0
.data.rel.ro:0000000000213A32                 db    0
.data.rel.ro:0000000000213A33                 db    0
.data.rel.ro:0000000000213A34                 db    0
.data.rel.ro:0000000000213A35                 db    0
.data.rel.ro:0000000000213A36                 db    0
.data.rel.ro:0000000000213A37                 db    0
.data.rel.ro:0000000000213A38                 db  78h ; x
.data.rel.ro:0000000000213A39                 db    0
.data.rel.ro:0000000000213A3A                 db    0
.data.rel.ro:0000000000213A3B                 db    0
.data.rel.ro:0000000000213A3C                 db    0
.data.rel.ro:0000000000213A3D                 db    0
.data.rel.ro:0000000000213A3E                 db    0
.data.rel.ro:0000000000213A3F                 db    0
.data.rel.ro:0000000000213A40                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000213A48                 db    0
.data.rel.ro:0000000000213A49                 db    0
.data.rel.ro:0000000000213A4A                 db    0
.data.rel.ro:0000000000213A4B                 db    0
.data.rel.ro:0000000000213A4C                 db    0
.data.rel.ro:0000000000213A4D                 db    0
.data.rel.ro:0000000000213A4E                 db    0
.data.rel.ro:0000000000213A4F                 db    0
.data.rel.ro:0000000000213A50                 db    0
.data.rel.ro:0000000000213A51                 db    0
.data.rel.ro:0000000000213A52                 db    0
.data.rel.ro:0000000000213A53                 db    0
.data.rel.ro:0000000000213A54                 db    0
.data.rel.ro:0000000000213A55                 db    0
.data.rel.ro:0000000000213A56                 db    0
.data.rel.ro:0000000000213A57                 db    0
.data.rel.ro:0000000000213A58                 db  7Eh ; ~
.data.rel.ro:0000000000213A59                 db 0FFh
.data.rel.ro:0000000000213A5A                 db 0FFh
.data.rel.ro:0000000000213A5B                 db 0FFh
.data.rel.ro:0000000000213A5C                 db    0
.data.rel.ro:0000000000213A5D                 db    0
.data.rel.ro:0000000000213A5E                 db    0
.data.rel.ro:0000000000213A5F                 db    0
.data.rel.ro:0000000000213A60                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000213A68                 db    0
.data.rel.ro:0000000000213A69                 db    0
.data.rel.ro:0000000000213A6A                 db    0
.data.rel.ro:0000000000213A6B                 db    0
.data.rel.ro:0000000000213A6C                 db    0
.data.rel.ro:0000000000213A6D                 db    0
.data.rel.ro:0000000000213A6E                 db    0
.data.rel.ro:0000000000213A6F                 db    0
.data.rel.ro:0000000000213A70                 db    0
.data.rel.ro:0000000000213A71                 db    0
.data.rel.ro:0000000000213A72                 db    0
.data.rel.ro:0000000000213A73                 db    0
.data.rel.ro:0000000000213A74                 db    0
.data.rel.ro:0000000000213A75                 db    0
.data.rel.ro:0000000000213A76                 db    0
.data.rel.ro:0000000000213A77                 db    0
.data.rel.ro:0000000000213A78                 db  7Dh ; }
.data.rel.ro:0000000000213A79                 db 0FFh
.data.rel.ro:0000000000213A7A                 db 0FFh
.data.rel.ro:0000000000213A7B                 db 0FFh
.data.rel.ro:0000000000213A7C                 db    0
.data.rel.ro:0000000000213A7D                 db    0
.data.rel.ro:0000000000213A7E                 db    0
.data.rel.ro:0000000000213A7F                 db    0
.data.rel.ro:0000000000213A80                 db    0
.data.rel.ro:0000000000213A81                 db    0
.data.rel.ro:0000000000213A82                 db    0
.data.rel.ro:0000000000213A83                 db    0
.data.rel.ro:0000000000213A84                 db    0
.data.rel.ro:0000000000213A85                 db    0
.data.rel.ro:0000000000213A86                 db    0
.data.rel.ro:0000000000213A87                 db    0
.data.rel.ro:0000000000213A88                 db    0
.data.rel.ro:0000000000213A89                 db    0
.data.rel.ro:0000000000213A8A                 db    0
.data.rel.ro:0000000000213A8B                 db    0
.data.rel.ro:0000000000213A8C                 db    0
.data.rel.ro:0000000000213A8D                 db    0
.data.rel.ro:0000000000213A8E                 db    0
.data.rel.ro:0000000000213A8F                 db    0
.data.rel.ro:0000000000213A90                 db    0
.data.rel.ro:0000000000213A91                 db    0
.data.rel.ro:0000000000213A92                 db    0
.data.rel.ro:0000000000213A93                 db    0
.data.rel.ro:0000000000213A94                 db    0
.data.rel.ro:0000000000213A95                 db    0
.data.rel.ro:0000000000213A96                 db    0
.data.rel.ro:0000000000213A97                 db    0
.data.rel.ro:0000000000213A98                 db    0
.data.rel.ro:0000000000213A99                 db    0
.data.rel.ro:0000000000213A9A                 db    0
.data.rel.ro:0000000000213A9B                 db    0
.data.rel.ro:0000000000213A9C                 db    0
.data.rel.ro:0000000000213A9D                 db    0
.data.rel.ro:0000000000213A9E                 db    0
.data.rel.ro:0000000000213A9F                 db    0
.data.rel.ro:0000000000213AA0 block_size_args dq offset aHumanReadable
.data.rel.ro:0000000000213AA0                                         ; DATA XREF: human_options+43↑o
.data.rel.ro:0000000000213AA0                                         ; "human-readable"
.data.rel.ro:0000000000213AA8                 dq offset aSi           ; "si"
.data.rel.ro:0000000000213AB0                 align 20h
.data.rel.ro:0000000000213AC0                 public quoting_style_args
.data.rel.ro:0000000000213AC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000213AC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000213AD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000213AD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000213AE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000213AE8                 dq offset aNSNNSNC+14h  ; "c"
.data.rel.ro:0000000000213AF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000213AF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000213B00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000213B08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000213B10                 db    0
.data.rel.ro:0000000000213B11                 db    0
.data.rel.ro:0000000000213B12                 db    0
.data.rel.ro:0000000000213B13                 db    0
.data.rel.ro:0000000000213B14                 db    0
.data.rel.ro:0000000000213B15                 db    0
.data.rel.ro:0000000000213B16                 db    0
.data.rel.ro:0000000000213B17                 db    0
.data.rel.ro:0000000000213B17 _data_rel_ro    ends
.data.rel.ro:0000000000213B17
LOAD:0000000000213B18 ; ELF Dynamic Information
LOAD:0000000000213B18 ; ===========================================================================
LOAD:0000000000213B18
LOAD:0000000000213B18 ; Segment type: Pure data
LOAD:0000000000213B18 ; Segment permissions: Read/Write
LOAD:0000000000213B18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000213B18                 assume cs:LOAD
LOAD:0000000000213B18                 ;org 213B18h
LOAD:0000000000213B18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000213B18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000213B18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000213B28                 Elf64_Dyn <0Ch, 2020h>  ; DT_INIT
LOAD:0000000000213B38                 Elf64_Dyn <0Dh, 0EFD0h> ; DT_FINI
LOAD:0000000000213B48                 Elf64_Dyn <19h, 213870h> ; DT_INIT_ARRAY
LOAD:0000000000213B58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000213B68                 Elf64_Dyn <1Ah, 213878h> ; DT_FINI_ARRAY
LOAD:0000000000213B78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000213B88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000213B98                 Elf64_Dyn <5, 0C40h>    ; DT_STRTAB
LOAD:0000000000213BA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000213BB8                 Elf64_Dyn <0Ah, 418h>   ; DT_STRSZ
LOAD:0000000000213BC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000213BD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000213BE8                 Elf64_Dyn <3, 213D08h>  ; DT_PLTGOT
LOAD:0000000000213BF8                 Elf64_Dyn <2, 810h>     ; DT_PLTRELSZ
LOAD:0000000000213C08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000213C18                 Elf64_Dyn <17h, 1810h>  ; DT_JMPREL
LOAD:0000000000213C28                 Elf64_Dyn <7, 1180h>    ; DT_RELA
LOAD:0000000000213C38                 Elf64_Dyn <8, 690h>     ; DT_RELASZ
LOAD:0000000000213C48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000213C58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000213C68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000213C78                 Elf64_Dyn <6FFFFFFEh, 1120h> ; DT_VERNEED
LOAD:0000000000213C88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000213C98                 Elf64_Dyn <6FFFFFF0h, 1058h> ; DT_VERSYM
LOAD:0000000000213CA8                 Elf64_Dyn <6FFFFFF9h, 3Bh> ; DT_RELACOUNT
LOAD:0000000000213CB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000213CC8                 db    0
LOAD:0000000000213CC9                 db    0
LOAD:0000000000213CCA                 db    0
LOAD:0000000000213CCB                 db    0
LOAD:0000000000213CCC                 db    0
LOAD:0000000000213CCD                 db    0
LOAD:0000000000213CCE                 db    0
LOAD:0000000000213CCF                 db    0
LOAD:0000000000213CD0                 db    0
LOAD:0000000000213CD1                 db    0
LOAD:0000000000213CD2                 db    0
LOAD:0000000000213CD3                 db    0
LOAD:0000000000213CD4                 db    0
LOAD:0000000000213CD5                 db    0
LOAD:0000000000213CD6                 db    0
LOAD:0000000000213CD7                 db    0
LOAD:0000000000213CD8                 db    0
LOAD:0000000000213CD9                 db    0
LOAD:0000000000213CDA                 db    0
LOAD:0000000000213CDB                 db    0
LOAD:0000000000213CDC                 db    0
LOAD:0000000000213CDD                 db    0
LOAD:0000000000213CDE                 db    0
LOAD:0000000000213CDF                 db    0
LOAD:0000000000213CE0                 db    0
LOAD:0000000000213CE1                 db    0
LOAD:0000000000213CE2                 db    0
LOAD:0000000000213CE3                 db    0
LOAD:0000000000213CE4                 db    0
LOAD:0000000000213CE5                 db    0
LOAD:0000000000213CE6                 db    0
LOAD:0000000000213CE7                 db    0
LOAD:0000000000213CE8                 db    0
LOAD:0000000000213CE9                 db    0
LOAD:0000000000213CEA                 db    0
LOAD:0000000000213CEB                 db    0
LOAD:0000000000213CEC                 db    0
LOAD:0000000000213CED                 db    0
LOAD:0000000000213CEE                 db    0
LOAD:0000000000213CEF                 db    0
LOAD:0000000000213CF0                 db    0
LOAD:0000000000213CF1                 db    0
LOAD:0000000000213CF2                 db    0
LOAD:0000000000213CF3                 db    0
LOAD:0000000000213CF4                 db    0
LOAD:0000000000213CF5                 db    0
LOAD:0000000000213CF6                 db    0
LOAD:0000000000213CF7                 db    0
LOAD:0000000000213CF8                 db    0
LOAD:0000000000213CF9                 db    0
LOAD:0000000000213CFA                 db    0
LOAD:0000000000213CFB                 db    0
LOAD:0000000000213CFC                 db    0
LOAD:0000000000213CFD                 db    0
LOAD:0000000000213CFE                 db    0
LOAD:0000000000213CFF                 db    0
LOAD:0000000000213D00                 db    0
LOAD:0000000000213D01                 db    0
LOAD:0000000000213D02                 db    0
LOAD:0000000000213D03                 db    0
LOAD:0000000000213D04                 db    0
LOAD:0000000000213D05                 db    0
LOAD:0000000000213D06                 db    0
LOAD:0000000000213D07                 db    0
LOAD:0000000000213D07 LOAD            ends
LOAD:0000000000213D07
.got:0000000000213D08 ; ===========================================================================
.got:0000000000213D08
.got:0000000000213D08 ; Segment type: Pure data
.got:0000000000213D08 ; Segment permissions: Read/Write
.got:0000000000213D08 _got            segment qword public 'DATA' use64
.got:0000000000213D08                 assume cs:_got
.got:0000000000213D08                 ;org 213D08h
.got:0000000000213D08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000213D10 qword_213D10    dq 0                    ; DATA XREF: sub_2040↑r
.got:0000000000213D18 qword_213D18    dq 0                    ; DATA XREF: sub_2040+6↑r
.got:0000000000213D20 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000213D28 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000213D28                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000213D30 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000213D38 endmntent_ptr   dq offset endmntent     ; DATA XREF: _endmntent↑r
.got:0000000000213D40 strverscmp_ptr  dq offset strverscmp    ; DATA XREF: _strverscmp↑r
.got:0000000000213D48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000213D50 __errno_location_ptr dq offset __errno_location
.got:0000000000213D50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000213D58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000213D60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000213D68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000213D70 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:0000000000213D78 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:0000000000213D80 wcswidth_ptr    dq offset wcswidth      ; DATA XREF: _wcswidth↑r
.got:0000000000213D88 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:0000000000213D90 mbstowcs_ptr    dq offset mbstowcs      ; DATA XREF: _mbstowcs↑r
.got:0000000000213D98 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:0000000000213DA0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000213DA8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000213DB0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000213DB8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000213DB8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000213DC0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000213DC8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000213DC8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000213DD0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000213DD8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000213DE0 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:0000000000213DE8 chdir_ptr       dq offset chdir         ; DATA XREF: _chdir↑r
.got:0000000000213DF0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000213DF0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000213DF8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000213E00 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000213E08 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000213E10 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:0000000000213E18 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000213E20 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000213E28 uname_ptr       dq offset uname         ; DATA XREF: _uname↑r
.got:0000000000213E30 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000213E38 __assert_fail_ptr dq offset __assert_fail
.got:0000000000213E38                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000213E40 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000213E40                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000213E48 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000213E50 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:0000000000213E58 canonicalize_file_name_ptr dq offset canonicalize_file_name
.got:0000000000213E58                                         ; DATA XREF: _canonicalize_file_name↑r
.got:0000000000213E60 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000213E68 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000213E70 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000213E78 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000213E80 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000213E80                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000213E88 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000213E90 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000213E98 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000213EA0 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:0000000000213EA8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000213EB0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000213EB8 statfs_ptr      dq offset statfs        ; DATA XREF: _statfs↑r
.got:0000000000213EC0 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000213EC8 sync_ptr        dq offset sync          ; DATA XREF: _sync↑r
.got:0000000000213ED0 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:0000000000213ED8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000213EE0 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000213EE8 getmntent_ptr   dq offset getmntent     ; DATA XREF: _getmntent↑r
.got:0000000000213EF0 setmntent_ptr   dq offset setmntent     ; DATA XREF: _setmntent↑r
.got:0000000000213EF8 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000213F00 sscanf_ptr      dq offset sscanf        ; DATA XREF: _sscanf↑r
.got:0000000000213F08 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000213F10 statvfs_ptr     dq offset statvfs       ; DATA XREF: _statvfs↑r
.got:0000000000213F18 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:0000000000213F20 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000213F28 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000213F30 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000213F38 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:0000000000213F40 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000213F48 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000213F50 memrchr_ptr     dq offset memrchr       ; DATA XREF: _memrchr↑r
.got:0000000000213F58 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000213F60 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000213F68 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000213F70 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000213F78 wcstombs_ptr    dq offset wcstombs      ; DATA XREF: _wcstombs↑r
.got:0000000000213F80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000213F88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000213F90 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000213F90                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000213F98 strdup_ptr      dq offset strdup        ; DATA XREF: _strdup↑r
.got:0000000000213FA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000213FA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000213FB0 hasmntopt_ptr   dq offset hasmntopt     ; DATA XREF: _hasmntopt↑r
.got:0000000000213FB8 strstr_ptr      dq offset strstr        ; DATA XREF: _strstr↑r
.got:0000000000213FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000213FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000213FC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000213FC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000213FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000213FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000213FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000213FD8                                         ; DATA XREF: start+24↑r
.got:0000000000213FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000213FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000213FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000213FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000213FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000213FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000213FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000213FF0 _got            ends
.got:0000000000213FF0
LOAD:0000000000213FF8 ; ===========================================================================
LOAD:0000000000213FF8
LOAD:0000000000213FF8 ; Segment type: Pure data
LOAD:0000000000213FF8 ; Segment permissions: Read/Write
LOAD:0000000000213FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000213FF8                 assume cs:LOAD
LOAD:0000000000213FF8                 ;org 213FF8h
LOAD:0000000000213FF8                 align 20h
LOAD:0000000000213FF8 LOAD            ends
LOAD:0000000000213FF8
.data:0000000000214000 ; ===========================================================================
.data:0000000000214000
.data:0000000000214000 ; Segment type: Pure data
.data:0000000000214000 ; Segment permissions: Read/Write
.data:0000000000214000 _data           segment align_32 public 'DATA' use64
.data:0000000000214000                 assume cs:_data
.data:0000000000214000                 ;org 214000h
.data:0000000000214000                 public __data_start ; weak
.data:0000000000214000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000214000                                         ; data_start
.data:0000000000214001                 db    0
.data:0000000000214002                 db    0
.data:0000000000214003                 db    0
.data:0000000000214004                 db    0
.data:0000000000214005                 db    0
.data:0000000000214006                 db    0
.data:0000000000214007                 db    0
.data:0000000000214008                 public __dso_handle
.data:0000000000214008 ; void *_dso_handle
.data:0000000000214008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000214008                                         ; atexit↑r ...
.data:0000000000214010 tty_out_8809    dd 0FFFFFFFFh           ; DATA XREF: replace_problematic_chars↑r
.data:0000000000214010                                         ; replace_problematic_chars+3A↑w
.data:0000000000214014                 align 20h
.data:0000000000214020 field_data      db    0                 ; DATA XREF: alloc_field+4D↑o
.data:0000000000214020                                         ; decode_output_arg+4↑o
.data:0000000000214021                 db    0
.data:0000000000214022                 db    0
.data:0000000000214023                 db    0
.data:0000000000214024                 db    0
.data:0000000000214025                 db    0
.data:0000000000214026                 db    0
.data:0000000000214027                 db    0
.data:0000000000214028 off_214028      dq offset aSource       ; DATA XREF: decode_output_arg:loc_5254↑o
.data:0000000000214028                                         ; "source"
.data:0000000000214030                 db    2
.data:0000000000214031                 db    0
.data:0000000000214032                 db    0
.data:0000000000214033                 db    0
.data:0000000000214034                 db    0
.data:0000000000214035                 db    0
.data:0000000000214036                 db    0
.data:0000000000214037                 db    0
.data:0000000000214038                 dq offset aFilesystem   ; "Filesystem"
.data:0000000000214040                 db  0Eh
.data:0000000000214041                 db    0
.data:0000000000214042                 db    0
.data:0000000000214043                 db    0
.data:0000000000214044                 db    0
.data:0000000000214045                 db    0
.data:0000000000214046                 db    0
.data:0000000000214047                 db    0
.data:0000000000214048                 db    0
.data:0000000000214049                 db    0
.data:000000000021404A                 db    0
.data:000000000021404B                 db    0
.data:000000000021404C byte_21404C     db 0                    ; DATA XREF: main+BF2↑r
.data:000000000021404D                 align 10h
.data:0000000000214050                 db    1
.data:0000000000214051                 db    0
.data:0000000000214052                 db    0
.data:0000000000214053                 db    0
.data:0000000000214054                 db    0
.data:0000000000214055                 db    0
.data:0000000000214056                 db    0
.data:0000000000214057                 db    0
.data:0000000000214058                 dq offset aFstype       ; "fstype"
.data:0000000000214060                 db    2
.data:0000000000214061                 db    0
.data:0000000000214062                 db    0
.data:0000000000214063                 db    0
.data:0000000000214064                 db    0
.data:0000000000214065                 db    0
.data:0000000000214066                 db    0
.data:0000000000214067                 db    0
.data:0000000000214068                 dq offset aType         ; "Type"
.data:0000000000214070                 db    4
.data:0000000000214071                 db    0
.data:0000000000214072                 db    0
.data:0000000000214073                 db    0
.data:0000000000214074                 db    0
.data:0000000000214075                 db    0
.data:0000000000214076                 db    0
.data:0000000000214077                 db    0
.data:0000000000214078                 db    0
.data:0000000000214079                 db    0
.data:000000000021407A                 db    0
.data:000000000021407B                 db    0
.data:000000000021407C byte_21407C     db 0                    ; DATA XREF: main+13BD↑r
.data:000000000021407D                 align 20h
.data:0000000000214080                 db    2
.data:0000000000214081                 db    0
.data:0000000000214082                 db    0
.data:0000000000214083                 db    0
.data:0000000000214084                 db    0
.data:0000000000214085                 db    0
.data:0000000000214086                 db    0
.data:0000000000214087                 db    0
.data:0000000000214088                 dq offset aBlockSize+6  ; "size"
.data:0000000000214090                 db    0
.data:0000000000214091                 db    0
.data:0000000000214092                 db    0
.data:0000000000214093                 db    0
.data:0000000000214094                 db    0
.data:0000000000214095                 db    0
.data:0000000000214096                 db    0
.data:0000000000214097                 db    0
.data:0000000000214098                 dq offset aBlocks       ; "blocks"
.data:00000000002140A0                 db    5
.data:00000000002140A1                 db    0
.data:00000000002140A2                 db    0
.data:00000000002140A3                 db    0
.data:00000000002140A4                 db    0
.data:00000000002140A5                 db    0
.data:00000000002140A6                 db    0
.data:00000000002140A7                 db    0
.data:00000000002140A8                 db    1
.data:00000000002140A9                 db    0
.data:00000000002140AA                 db    0
.data:00000000002140AB                 db    0
.data:00000000002140AC                 db    0
.data:00000000002140AD                 db    0
.data:00000000002140AE                 db    0
.data:00000000002140AF                 db    0
.data:00000000002140B0                 db    3
.data:00000000002140B1                 db    0
.data:00000000002140B2                 db    0
.data:00000000002140B3                 db    0
.data:00000000002140B4                 db    0
.data:00000000002140B5                 db    0
.data:00000000002140B6                 db    0
.data:00000000002140B7                 db    0
.data:00000000002140B8                 dq offset aIused+1      ; "used"
.data:00000000002140C0                 db    0
.data:00000000002140C1                 db    0
.data:00000000002140C2                 db    0
.data:00000000002140C3                 db    0
.data:00000000002140C4                 db    0
.data:00000000002140C5                 db    0
.data:00000000002140C6                 db    0
.data:00000000002140C7                 db    0
.data:00000000002140C8                 dq offset aIused_0+1    ; "Used"
.data:00000000002140D0                 db    5
.data:00000000002140D1                 db    0
.data:00000000002140D2                 db    0
.data:00000000002140D3                 db    0
.data:00000000002140D4                 db    0
.data:00000000002140D5                 db    0
.data:00000000002140D6                 db    0
.data:00000000002140D7                 db    0
.data:00000000002140D8                 db    1
.data:00000000002140D9                 db    0
.data:00000000002140DA                 db    0
.data:00000000002140DB                 db    0
.data:00000000002140DC                 db    0
.data:00000000002140DD                 db    0
.data:00000000002140DE                 db    0
.data:00000000002140DF                 db    0
.data:00000000002140E0                 db    4
.data:00000000002140E1                 db    0
.data:00000000002140E2                 db    0
.data:00000000002140E3                 db    0
.data:00000000002140E4                 db    0
.data:00000000002140E5                 db    0
.data:00000000002140E6                 db    0
.data:00000000002140E7                 db    0
.data:00000000002140E8                 dq offset aIavail+1     ; "avail"
.data:00000000002140F0                 db    0
.data:00000000002140F1                 db    0
.data:00000000002140F2                 db    0
.data:00000000002140F3                 db    0
.data:00000000002140F4                 db    0
.data:00000000002140F5                 db    0
.data:00000000002140F6                 db    0
.data:00000000002140F7                 db    0
.data:00000000002140F8                 dq offset aAvailable    ; "Available"
.data:0000000000214100                 db    5
.data:0000000000214101                 db    0
.data:0000000000214102                 db    0
.data:0000000000214103                 db    0
.data:0000000000214104                 db    0
.data:0000000000214105                 db    0
.data:0000000000214106                 db    0
.data:0000000000214107                 db    0
.data:0000000000214108                 db    1
.data:0000000000214109                 db    0
.data:000000000021410A                 db    0
.data:000000000021410B                 db    0
.data:000000000021410C                 db    0
.data:000000000021410D                 db    0
.data:000000000021410E                 db    0
.data:000000000021410F                 db    0
.data:0000000000214110                 db    5
.data:0000000000214111                 db    0
.data:0000000000214112                 db    0
.data:0000000000214113                 db    0
.data:0000000000214114                 db    0
.data:0000000000214115                 db    0
.data:0000000000214116                 db    0
.data:0000000000214117                 db    0
.data:0000000000214118                 dq offset aIpcent+1     ; "pcent"
.data:0000000000214120                 db    0
.data:0000000000214121                 db    0
.data:0000000000214122                 db    0
.data:0000000000214123                 db    0
.data:0000000000214124                 db    0
.data:0000000000214125                 db    0
.data:0000000000214126                 db    0
.data:0000000000214127                 db    0
.data:0000000000214128                 dq offset aIuse+1       ; "Use%"
.data:0000000000214130                 db    4
.data:0000000000214131                 db    0
.data:0000000000214132                 db    0
.data:0000000000214133                 db    0
.data:0000000000214134                 db    0
.data:0000000000214135                 db    0
.data:0000000000214136                 db    0
.data:0000000000214137                 db    0
.data:0000000000214138                 db    1
.data:0000000000214139                 db    0
.data:000000000021413A                 db    0
.data:000000000021413B                 db    0
.data:000000000021413C                 db    0
.data:000000000021413D                 db    0
.data:000000000021413E                 db    0
.data:000000000021413F                 db    0
.data:0000000000214140                 db    6
.data:0000000000214141                 db    0
.data:0000000000214142                 db    0
.data:0000000000214143                 db    0
.data:0000000000214144                 db    0
.data:0000000000214145                 db    0
.data:0000000000214146                 db    0
.data:0000000000214147                 db    0
.data:0000000000214148                 dq offset unk_F297
.data:0000000000214150                 db    1
.data:0000000000214151                 db    0
.data:0000000000214152                 db    0
.data:0000000000214153                 db    0
.data:0000000000214154                 db    0
.data:0000000000214155                 db    0
.data:0000000000214156                 db    0
.data:0000000000214157                 db    0
.data:0000000000214158                 dq offset aInodes_0     ; "Inodes"
.data:0000000000214160                 db    5
.data:0000000000214161                 db    0
.data:0000000000214162                 db    0
.data:0000000000214163                 db    0
.data:0000000000214164                 db    0
.data:0000000000214165                 db    0
.data:0000000000214166                 db    0
.data:0000000000214167                 db    0
.data:0000000000214168                 db    1
.data:0000000000214169                 db    0
.data:000000000021416A                 db    0
.data:000000000021416B                 db    0
.data:000000000021416C                 db    0
.data:000000000021416D                 db    0
.data:000000000021416E                 db    0
.data:000000000021416F                 db    0
.data:0000000000214170                 db    7
.data:0000000000214171                 db    0
.data:0000000000214172                 db    0
.data:0000000000214173                 db    0
.data:0000000000214174                 db    0
.data:0000000000214175                 db    0
.data:0000000000214176                 db    0
.data:0000000000214177                 db    0
.data:0000000000214178                 dq offset aIused        ; "iused"
.data:0000000000214180                 db    1
.data:0000000000214181                 db    0
.data:0000000000214182                 db    0
.data:0000000000214183                 db    0
.data:0000000000214184                 db    0
.data:0000000000214185                 db    0
.data:0000000000214186                 db    0
.data:0000000000214187                 db    0
.data:0000000000214188                 dq offset aIused_0      ; "IUsed"
.data:0000000000214190                 db    5
.data:0000000000214191                 db    0
.data:0000000000214192                 db    0
.data:0000000000214193                 db    0
.data:0000000000214194                 db    0
.data:0000000000214195                 db    0
.data:0000000000214196                 db    0
.data:0000000000214197                 db    0
.data:0000000000214198                 db    1
.data:0000000000214199                 db    0
.data:000000000021419A                 db    0
.data:000000000021419B                 db    0
.data:000000000021419C                 db    0
.data:000000000021419D                 db    0
.data:000000000021419E                 db    0
.data:000000000021419F                 db    0
.data:00000000002141A0                 db    8
.data:00000000002141A1                 db    0
.data:00000000002141A2                 db    0
.data:00000000002141A3                 db    0
.data:00000000002141A4                 db    0
.data:00000000002141A5                 db    0
.data:00000000002141A6                 db    0
.data:00000000002141A7                 db    0
.data:00000000002141A8                 dq offset aIavail       ; "iavail"
.data:00000000002141B0                 db    1
.data:00000000002141B1                 db    0
.data:00000000002141B2                 db    0
.data:00000000002141B3                 db    0
.data:00000000002141B4                 db    0
.data:00000000002141B5                 db    0
.data:00000000002141B6                 db    0
.data:00000000002141B7                 db    0
.data:00000000002141B8                 dq offset aIfree        ; "IFree"
.data:00000000002141C0                 db    5
.data:00000000002141C1                 db    0
.data:00000000002141C2                 db    0
.data:00000000002141C3                 db    0
.data:00000000002141C4                 db    0
.data:00000000002141C5                 db    0
.data:00000000002141C6                 db    0
.data:00000000002141C7                 db    0
.data:00000000002141C8                 db    1
.data:00000000002141C9                 db    0
.data:00000000002141CA                 db    0
.data:00000000002141CB                 db    0
.data:00000000002141CC                 db    0
.data:00000000002141CD                 db    0
.data:00000000002141CE                 db    0
.data:00000000002141CF                 db    0
.data:00000000002141D0                 db    9
.data:00000000002141D1                 db    0
.data:00000000002141D2                 db    0
.data:00000000002141D3                 db    0
.data:00000000002141D4                 db    0
.data:00000000002141D5                 db    0
.data:00000000002141D6                 db    0
.data:00000000002141D7                 db    0
.data:00000000002141D8                 dq offset aIpcent       ; "ipcent"
.data:00000000002141E0                 db    1
.data:00000000002141E1                 db    0
.data:00000000002141E2                 db    0
.data:00000000002141E3                 db    0
.data:00000000002141E4                 db    0
.data:00000000002141E5                 db    0
.data:00000000002141E6                 db    0
.data:00000000002141E7                 db    0
.data:00000000002141E8                 dq offset aIuse         ; "IUse%"
.data:00000000002141F0                 db    4
.data:00000000002141F1                 db    0
.data:00000000002141F2                 db    0
.data:00000000002141F3                 db    0
.data:00000000002141F4                 db    0
.data:00000000002141F5                 db    0
.data:00000000002141F6                 db    0
.data:00000000002141F7                 db    0
.data:00000000002141F8                 db    1
.data:00000000002141F9                 db    0
.data:00000000002141FA                 db    0
.data:00000000002141FB                 db    0
.data:00000000002141FC                 db    0
.data:00000000002141FD                 db    0
.data:00000000002141FE                 db    0
.data:00000000002141FF                 db    0
.data:0000000000214200                 db  0Ah
.data:0000000000214201                 db    0
.data:0000000000214202                 db    0
.data:0000000000214203                 db    0
.data:0000000000214204                 db    0
.data:0000000000214205                 db    0
.data:0000000000214206                 db    0
.data:0000000000214207                 db    0
.data:0000000000214208                 dq offset aTarget       ; "target"
.data:0000000000214210                 db    2
.data:0000000000214211                 db    0
.data:0000000000214212                 db    0
.data:0000000000214213                 db    0
.data:0000000000214214                 db    0
.data:0000000000214215                 db    0
.data:0000000000214216                 db    0
.data:0000000000214217                 db    0
.data:0000000000214218                 dq offset aMountedOn    ; "Mounted on"
.data:0000000000214220                 db    0
.data:0000000000214221                 db    0
.data:0000000000214222                 db    0
.data:0000000000214223                 db    0
.data:0000000000214224                 db    0
.data:0000000000214225                 db    0
.data:0000000000214226                 db    0
.data:0000000000214227                 db    0
.data:0000000000214228                 db    0
.data:0000000000214229                 db    0
.data:000000000021422A                 db    0
.data:000000000021422B                 db    0
.data:000000000021422C                 db    0
.data:000000000021422D                 db    0
.data:000000000021422E                 db    0
.data:000000000021422F                 db    0
.data:0000000000214230                 db  0Bh
.data:0000000000214231                 db    0
.data:0000000000214232                 db    0
.data:0000000000214233                 db    0
.data:0000000000214234                 db    0
.data:0000000000214235                 db    0
.data:0000000000214236                 db    0
.data:0000000000214237                 db    0
.data:0000000000214238                 dq offset aFile         ; "file"
.data:0000000000214240                 db    2
.data:0000000000214241                 db    0
.data:0000000000214242                 db    0
.data:0000000000214243                 db    0
.data:0000000000214244                 db    0
.data:0000000000214245                 db    0
.data:0000000000214246                 db    0
.data:0000000000214247                 db    0
.data:0000000000214248                 dq offset aFile_0       ; "File"
.data:0000000000214250                 align 20h
.data:0000000000214260                 public Version
.data:0000000000214260 Version         dq offset a831          ; DATA XREF: main+3DD↑r
.data:0000000000214260                                         ; "8.31"
.data:0000000000214268                 public exit_failure
.data:0000000000214268 ; int exit_failure
.data:0000000000214268 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5E22↑r
.data:0000000000214268                                         ; xalloc_die+17↑r ...
.data:000000000021426C                 align 20h
.data:0000000000214280                 public quote_quoting_options
.data:0000000000214280 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000214280                                         ; quote_mem↑o ...
.data:0000000000214281                 db    0
.data:0000000000214282                 db    0
.data:0000000000214283                 db    0
.data:0000000000214284                 db    0
.data:0000000000214285                 db    0
.data:0000000000214286                 db    0
.data:0000000000214287                 db    0
.data:0000000000214288                 db    0
.data:0000000000214289                 db    0
.data:000000000021428A                 db    0
.data:000000000021428B                 db    0
.data:000000000021428C                 db    0
.data:000000000021428D                 db    0
.data:000000000021428E                 db    0
.data:000000000021428F                 db    0
.data:0000000000214290                 db    0
.data:0000000000214291                 db    0
.data:0000000000214292                 db    0
.data:0000000000214293                 db    0
.data:0000000000214294                 db    0
.data:0000000000214295                 db    0
.data:0000000000214296                 db    0
.data:0000000000214297                 db    0
.data:0000000000214298                 db    0
.data:0000000000214299                 db    0
.data:000000000021429A                 db    0
.data:000000000021429B                 db    0
.data:000000000021429C                 db    0
.data:000000000021429D                 db    0
.data:000000000021429E                 db    0
.data:000000000021429F                 db    0
.data:00000000002142A0                 db    0
.data:00000000002142A1                 db    0
.data:00000000002142A2                 db    0
.data:00000000002142A3                 db    0
.data:00000000002142A4                 db    0
.data:00000000002142A5                 db    0
.data:00000000002142A6                 db    0
.data:00000000002142A7                 db    0
.data:00000000002142A8                 db    0
.data:00000000002142A9                 db    0
.data:00000000002142AA                 db    0
.data:00000000002142AB                 db    0
.data:00000000002142AC                 db    0
.data:00000000002142AD                 db    0
.data:00000000002142AE                 db    0
.data:00000000002142AF                 db    0
.data:00000000002142B0                 db    0
.data:00000000002142B1                 db    0
.data:00000000002142B2                 db    0
.data:00000000002142B3                 db    0
.data:00000000002142B4                 db    0
.data:00000000002142B5                 db    0
.data:00000000002142B6                 db    0
.data:00000000002142B7                 db    0
.data:00000000002142B8 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:00000000002142B8                                         ; quotearg_n_options:loc_9C4D↑r ...
.data:00000000002142BC                 align 20h
.data:00000000002142C0 ; void *slotvec
.data:00000000002142C0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:00000000002142C0                                         ; quotearg_n_options+76↑w ...
.data:00000000002142C8                 align 10h
.data:00000000002142D0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:00000000002142D0                                         ; quotearg_n_options+187↑r ...
.data:00000000002142D8 off_2142D8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002142E0 statvfs_works_cache_2531 dd 0FFFFFFFFh  ; DATA XREF: get_fs_usage+24↑r
.data:00000000002142E0                                         ; get_fs_usage:loc_BA00↑w ...
.data:00000000002142E4                 align 8
.data:00000000002142E8                 public argmatch_die
.data:00000000002142E8 argmatch_die    dq offset __argmatch_die
.data:00000000002142E8 _data           ends
.data:00000000002142E8
LOAD:00000000002142F0 ; ===========================================================================
LOAD:00000000002142F0
LOAD:00000000002142F0 ; Segment type: Pure data
LOAD:00000000002142F0 ; Segment permissions: Read/Write
LOAD:00000000002142F0 LOAD            segment byte public 'DATA' use64
LOAD:00000000002142F0                 assume cs:LOAD
LOAD:00000000002142F0                 ;org 2142F0h
LOAD:00000000002142F0                 public __bss_start
LOAD:00000000002142F0 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:00000000002142F0                                         ; deregister_tm_clones+8↑o ...
LOAD:00000000002142F0                                         ; Alternative name is '_edata'
LOAD:00000000002142F0                                         ; __TMC_END__
LOAD:00000000002142F0                                         ; _edata
LOAD:00000000002142F1                 db    ? ;
LOAD:00000000002142F2                 db    ? ;
LOAD:00000000002142F3                 db    ? ;
LOAD:00000000002142F4                 db    ? ;
LOAD:00000000002142F5                 db    ? ;
LOAD:00000000002142F6                 db    ? ;
LOAD:00000000002142F7                 db    ? ;
LOAD:00000000002142F8                 db    ? ;
LOAD:00000000002142F9                 db    ? ;
LOAD:00000000002142FA                 db    ? ;
LOAD:00000000002142FB                 db    ? ;
LOAD:00000000002142FC                 db    ? ;
LOAD:00000000002142FD                 db    ? ;
LOAD:00000000002142FE                 db    ? ;
LOAD:00000000002142FF                 db    ? ;
LOAD:00000000002142FF LOAD            ends
LOAD:00000000002142FF
.bss:0000000000214300 ; ===========================================================================
.bss:0000000000214300
.bss:0000000000214300 ; Segment type: Uninitialized
.bss:0000000000214300 ; Segment permissions: Read/Write
.bss:0000000000214300 _bss            segment align_32 public 'BSS' use64
.bss:0000000000214300                 assume cs:_bss
.bss:0000000000214300                 ;org 214300h
.bss:0000000000214300                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000214300                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:0000000000214300 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:0000000000214300                                         ; DATA XREF: LOAD:0000000000000B98↑o
.bss:0000000000214300                                         ; LOAD:0000000000000BE0↑o ...
.bss:0000000000214300                                         ; Alternative name is '__progname'
.bss:0000000000214300                                         ; Copy of shared data
.bss:0000000000214308                 public stdout@@GLIBC_2_2_5
.bss:0000000000214308 ; FILE *stdout
.bss:0000000000214308 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B80↑o
.bss:0000000000214308                                         ; main+3D6↑r ...
.bss:0000000000214308                                         ; Alternative name is 'stdout'
.bss:0000000000214308                                         ; Copy of shared data
.bss:0000000000214310                 public optind@@GLIBC_2_2_5
.bss:0000000000214310 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000C10↑o
.bss:0000000000214310                                         ; main:loc_2B01↑r ...
.bss:0000000000214310                                         ; Alternative name is 'optind'
.bss:0000000000214310                                         ; Copy of shared data
.bss:0000000000214314                 align 8
.bss:0000000000214318                 public optarg@@GLIBC_2_2_5
.bss:0000000000214318 ; char *optarg
.bss:0000000000214318 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000C28↑o
.bss:0000000000214318                                         ; main+202↑r ...
.bss:0000000000214318                                         ; Alternative name is 'optarg'
.bss:0000000000214318                                         ; Copy of shared data
.bss:0000000000214320                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000214320 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000214320                                         ; DATA XREF: LOAD:0000000000000BB0↑o
.bss:0000000000214320                                         ; LOAD:0000000000000BC8↑o ...
.bss:0000000000214320                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000214320                                         ; Copy of shared data
.bss:0000000000214328                 align 20h
.bss:0000000000214340                 public stderr@@GLIBC_2_2_5
.bss:0000000000214340 ; FILE *stderr
.bss:0000000000214340 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000BF8↑o
.bss:0000000000214340                                         ; usage+3D↑r ...
.bss:0000000000214340                                         ; Alternative name is 'stderr'
.bss:0000000000214340                                         ; Copy of shared data
.bss:0000000000214348 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000214348                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000214349                 align 20h
.bss:0000000000214360 nrows           dq ?                    ; DATA XREF: main:loc_31F1↑r
.bss:0000000000214360                                         ; alloc_table_row↑r ...
.bss:0000000000214368 table           dq ?                    ; DATA XREF: main+C4E↑r
.bss:0000000000214368                                         ; main+CDB↑r ...
.bss:0000000000214370 ncolumns        dq ?                    ; DATA XREF: main:loc_311E↑r
.bss:0000000000214370                                         ; main+C3E↑r ...
.bss:0000000000214378 columns         dq ?                    ; DATA XREF: main+C7C↑r
.bss:0000000000214378                                         ; get_header+37↑r ...
.bss:0000000000214380 header_mode     dd ?                    ; DATA XREF: main+25A↑r
.bss:0000000000214380                                         ; main+28A↑w ...
.bss:0000000000214384                 align 20h
.bss:00000000002143A0 ; __int64 grand_fsu
.bss:00000000002143A0 grand_fsu       dq ?                    ; DATA XREF: main+DB↑w
.bss:00000000002143A0                                         ; main+C07↑o
.bss:00000000002143A8 qword_2143A8    dq ?                    ; DATA XREF: get_dev+335↑w
.bss:00000000002143B0 qword_2143B0    dq ?                    ; DATA XREF: get_dev+346↑w
.bss:00000000002143B8 qword_2143B8    dq ?                    ; DATA XREF: get_dev+361↑r
.bss:00000000002143B8                                         ; get_dev+379↑w ...
.bss:00000000002143C0 byte_2143C0     db ?                    ; DATA XREF: get_dev+353↑r
.bss:00000000002143C0                                         ; get_dev:loc_4CF7↑r ...
.bss:00000000002143C1                 align 8
.bss:00000000002143C8 qword_2143C8    dq ?                    ; DATA XREF: get_dev+317↑w
.bss:00000000002143D0 qword_2143D0    dq ?                    ; DATA XREF: get_dev+324↑w
.bss:00000000002143D8 print_grand_total db ?                  ; DATA XREF: main+D4↑w
.bss:00000000002143D8                                         ; main:loc_2870↑w ...
.bss:00000000002143D9 print_type      db ?                    ; DATA XREF: main+BC↑w
.bss:00000000002143D9                                         ; main:loc_2836↑r ...
.bss:00000000002143DA                 align 20h
.bss:00000000002143E0 mount_list      dq ?                    ; DATA XREF: main+6C4↑w
.bss:00000000002143E0                                         ; main:loc_2E0A↑r ...
.bss:00000000002143E8 fs_exclude_list dq ?                    ; DATA XREF: main+99↑w
.bss:00000000002143E8                                         ; main+3A9↑r ...
.bss:00000000002143F0 fs_select_list  dq ?                    ; DATA XREF: main+8E↑w
.bss:00000000002143F0                                         ; main+427↑r ...
.bss:00000000002143F8 exit_status     dd ?                    ; DATA XREF: main+CA↑w
.bss:00000000002143F8                                         ; main+650↑w ...
.bss:00000000002143FC require_sync    db ?                    ; DATA XREF: main+156↑w
.bss:00000000002143FC                                         ; main:loc_2938↑w ...
.bss:00000000002143FD file_systems_processed db ?             ; DATA XREF: main+C3↑w
.bss:00000000002143FD                                         ; main:loc_319C↑r ...
.bss:00000000002143FE                 align 20h
.bss:0000000000214400 output_block_size dq ?                  ; DATA XREF: main+196↑w
.bss:0000000000214400                                         ; main+1D2↑w ...
.bss:0000000000214408 human_output_opts dd ?                  ; DATA XREF: main+B2↑w
.bss:0000000000214408                                         ; main+18C↑w ...
.bss:000000000021440C show_listed_fs  db ?                    ; DATA XREF: main+AB↑w
.bss:000000000021440C                                         ; main+7C3↑w ...
.bss:000000000021440D show_local_fs   db ?                    ; DATA XREF: main:loc_2928↑w
.bss:000000000021440D                                         ; main+10BC↑r ...
.bss:000000000021440E show_all_fs     db ?                    ; DATA XREF: main+A4↑w
.bss:000000000021440E                                         ; main:loc_2948↑w ...
.bss:000000000021440F                 align 10h
.bss:0000000000214410 ; void *devlist_table
.bss:0000000000214410 devlist_table   dq ?                    ; DATA XREF: main+1038↑w
.bss:0000000000214410                                         ; main+1082↑r ...
.bss:0000000000214418 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000214418                                         ; close_stdout+1B↑r
.bss:0000000000214419                 align 20h
.bss:0000000000214420 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000214420                                         ; close_stdout+56↑r
.bss:0000000000214428                 public program_name
.bss:0000000000214428 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000214428                                         ; set_program_name:loc_886D↑w
.bss:0000000000214430                 align 20h
.bss:0000000000214440 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000214440                                         ; quotearg_free+46↑o ...
.bss:0000000000214441                 db    ? ;
.bss:0000000000214442                 db    ? ;
.bss:0000000000214443                 db    ? ;
.bss:0000000000214444                 db    ? ;
.bss:0000000000214445                 db    ? ;
.bss:0000000000214446                 db    ? ;
.bss:0000000000214447                 db    ? ;
.bss:0000000000214448                 db    ? ;
.bss:0000000000214449                 db    ? ;
.bss:000000000021444A                 db    ? ;
.bss:000000000021444B                 db    ? ;
.bss:000000000021444C                 db    ? ;
.bss:000000000021444D                 db    ? ;
.bss:000000000021444E                 db    ? ;
.bss:000000000021444F                 db    ? ;
.bss:0000000000214450                 db    ? ;
.bss:0000000000214451                 db    ? ;
.bss:0000000000214452                 db    ? ;
.bss:0000000000214453                 db    ? ;
.bss:0000000000214454                 db    ? ;
.bss:0000000000214455                 db    ? ;
.bss:0000000000214456                 db    ? ;
.bss:0000000000214457                 db    ? ;
.bss:0000000000214458                 db    ? ;
.bss:0000000000214459                 db    ? ;
.bss:000000000021445A                 db    ? ;
.bss:000000000021445B                 db    ? ;
.bss:000000000021445C                 db    ? ;
.bss:000000000021445D                 db    ? ;
.bss:000000000021445E                 db    ? ;
.bss:000000000021445F                 db    ? ;
.bss:0000000000214460                 db    ? ;
.bss:0000000000214461                 db    ? ;
.bss:0000000000214462                 db    ? ;
.bss:0000000000214463                 db    ? ;
.bss:0000000000214464                 db    ? ;
.bss:0000000000214465                 db    ? ;
.bss:0000000000214466                 db    ? ;
.bss:0000000000214467                 db    ? ;
.bss:0000000000214468                 db    ? ;
.bss:0000000000214469                 db    ? ;
.bss:000000000021446A                 db    ? ;
.bss:000000000021446B                 db    ? ;
.bss:000000000021446C                 db    ? ;
.bss:000000000021446D                 db    ? ;
.bss:000000000021446E                 db    ? ;
.bss:000000000021446F                 db    ? ;
.bss:0000000000214470                 db    ? ;
.bss:0000000000214471                 db    ? ;
.bss:0000000000214472                 db    ? ;
.bss:0000000000214473                 db    ? ;
.bss:0000000000214474                 db    ? ;
.bss:0000000000214475                 db    ? ;
.bss:0000000000214476                 db    ? ;
.bss:0000000000214477                 db    ? ;
.bss:0000000000214478                 db    ? ;
.bss:0000000000214479                 db    ? ;
.bss:000000000021447A                 db    ? ;
.bss:000000000021447B                 db    ? ;
.bss:000000000021447C                 db    ? ;
.bss:000000000021447D                 db    ? ;
.bss:000000000021447E                 db    ? ;
.bss:000000000021447F                 db    ? ;
.bss:0000000000214480                 db    ? ;
.bss:0000000000214481                 db    ? ;
.bss:0000000000214482                 db    ? ;
.bss:0000000000214483                 db    ? ;
.bss:0000000000214484                 db    ? ;
.bss:0000000000214485                 db    ? ;
.bss:0000000000214486                 db    ? ;
.bss:0000000000214487                 db    ? ;
.bss:0000000000214488                 db    ? ;
.bss:0000000000214489                 db    ? ;
.bss:000000000021448A                 db    ? ;
.bss:000000000021448B                 db    ? ;
.bss:000000000021448C                 db    ? ;
.bss:000000000021448D                 db    ? ;
.bss:000000000021448E                 db    ? ;
.bss:000000000021448F                 db    ? ;
.bss:0000000000214490                 db    ? ;
.bss:0000000000214491                 db    ? ;
.bss:0000000000214492                 db    ? ;
.bss:0000000000214493                 db    ? ;
.bss:0000000000214494                 db    ? ;
.bss:0000000000214495                 db    ? ;
.bss:0000000000214496                 db    ? ;
.bss:0000000000214497                 db    ? ;
.bss:0000000000214498                 db    ? ;
.bss:0000000000214499                 db    ? ;
.bss:000000000021449A                 db    ? ;
.bss:000000000021449B                 db    ? ;
.bss:000000000021449C                 db    ? ;
.bss:000000000021449D                 db    ? ;
.bss:000000000021449E                 db    ? ;
.bss:000000000021449F                 db    ? ;
.bss:00000000002144A0                 db    ? ;
.bss:00000000002144A1                 db    ? ;
.bss:00000000002144A2                 db    ? ;
.bss:00000000002144A3                 db    ? ;
.bss:00000000002144A4                 db    ? ;
.bss:00000000002144A5                 db    ? ;
.bss:00000000002144A6                 db    ? ;
.bss:00000000002144A7                 db    ? ;
.bss:00000000002144A8                 db    ? ;
.bss:00000000002144A9                 db    ? ;
.bss:00000000002144AA                 db    ? ;
.bss:00000000002144AB                 db    ? ;
.bss:00000000002144AC                 db    ? ;
.bss:00000000002144AD                 db    ? ;
.bss:00000000002144AE                 db    ? ;
.bss:00000000002144AF                 db    ? ;
.bss:00000000002144B0                 db    ? ;
.bss:00000000002144B1                 db    ? ;
.bss:00000000002144B2                 db    ? ;
.bss:00000000002144B3                 db    ? ;
.bss:00000000002144B4                 db    ? ;
.bss:00000000002144B5                 db    ? ;
.bss:00000000002144B6                 db    ? ;
.bss:00000000002144B7                 db    ? ;
.bss:00000000002144B8                 db    ? ;
.bss:00000000002144B9                 db    ? ;
.bss:00000000002144BA                 db    ? ;
.bss:00000000002144BB                 db    ? ;
.bss:00000000002144BC                 db    ? ;
.bss:00000000002144BD                 db    ? ;
.bss:00000000002144BE                 db    ? ;
.bss:00000000002144BF                 db    ? ;
.bss:00000000002144C0                 db    ? ;
.bss:00000000002144C1                 db    ? ;
.bss:00000000002144C2                 db    ? ;
.bss:00000000002144C3                 db    ? ;
.bss:00000000002144C4                 db    ? ;
.bss:00000000002144C5                 db    ? ;
.bss:00000000002144C6                 db    ? ;
.bss:00000000002144C7                 db    ? ;
.bss:00000000002144C8                 db    ? ;
.bss:00000000002144C9                 db    ? ;
.bss:00000000002144CA                 db    ? ;
.bss:00000000002144CB                 db    ? ;
.bss:00000000002144CC                 db    ? ;
.bss:00000000002144CD                 db    ? ;
.bss:00000000002144CE                 db    ? ;
.bss:00000000002144CF                 db    ? ;
.bss:00000000002144D0                 db    ? ;
.bss:00000000002144D1                 db    ? ;
.bss:00000000002144D2                 db    ? ;
.bss:00000000002144D3                 db    ? ;
.bss:00000000002144D4                 db    ? ;
.bss:00000000002144D5                 db    ? ;
.bss:00000000002144D6                 db    ? ;
.bss:00000000002144D7                 db    ? ;
.bss:00000000002144D8                 db    ? ;
.bss:00000000002144D9                 db    ? ;
.bss:00000000002144DA                 db    ? ;
.bss:00000000002144DB                 db    ? ;
.bss:00000000002144DC                 db    ? ;
.bss:00000000002144DD                 db    ? ;
.bss:00000000002144DE                 db    ? ;
.bss:00000000002144DF                 db    ? ;
.bss:00000000002144E0                 db    ? ;
.bss:00000000002144E1                 db    ? ;
.bss:00000000002144E2                 db    ? ;
.bss:00000000002144E3                 db    ? ;
.bss:00000000002144E4                 db    ? ;
.bss:00000000002144E5                 db    ? ;
.bss:00000000002144E6                 db    ? ;
.bss:00000000002144E7                 db    ? ;
.bss:00000000002144E8                 db    ? ;
.bss:00000000002144E9                 db    ? ;
.bss:00000000002144EA                 db    ? ;
.bss:00000000002144EB                 db    ? ;
.bss:00000000002144EC                 db    ? ;
.bss:00000000002144ED                 db    ? ;
.bss:00000000002144EE                 db    ? ;
.bss:00000000002144EF                 db    ? ;
.bss:00000000002144F0                 db    ? ;
.bss:00000000002144F1                 db    ? ;
.bss:00000000002144F2                 db    ? ;
.bss:00000000002144F3                 db    ? ;
.bss:00000000002144F4                 db    ? ;
.bss:00000000002144F5                 db    ? ;
.bss:00000000002144F6                 db    ? ;
.bss:00000000002144F7                 db    ? ;
.bss:00000000002144F8                 db    ? ;
.bss:00000000002144F9                 db    ? ;
.bss:00000000002144FA                 db    ? ;
.bss:00000000002144FB                 db    ? ;
.bss:00000000002144FC                 db    ? ;
.bss:00000000002144FD                 db    ? ;
.bss:00000000002144FE                 db    ? ;
.bss:00000000002144FF                 db    ? ;
.bss:0000000000214500                 db    ? ;
.bss:0000000000214501                 db    ? ;
.bss:0000000000214502                 db    ? ;
.bss:0000000000214503                 db    ? ;
.bss:0000000000214504                 db    ? ;
.bss:0000000000214505                 db    ? ;
.bss:0000000000214506                 db    ? ;
.bss:0000000000214507                 db    ? ;
.bss:0000000000214508                 db    ? ;
.bss:0000000000214509                 db    ? ;
.bss:000000000021450A                 db    ? ;
.bss:000000000021450B                 db    ? ;
.bss:000000000021450C                 db    ? ;
.bss:000000000021450D                 db    ? ;
.bss:000000000021450E                 db    ? ;
.bss:000000000021450F                 db    ? ;
.bss:0000000000214510                 db    ? ;
.bss:0000000000214511                 db    ? ;
.bss:0000000000214512                 db    ? ;
.bss:0000000000214513                 db    ? ;
.bss:0000000000214514                 db    ? ;
.bss:0000000000214515                 db    ? ;
.bss:0000000000214516                 db    ? ;
.bss:0000000000214517                 db    ? ;
.bss:0000000000214518                 db    ? ;
.bss:0000000000214519                 db    ? ;
.bss:000000000021451A                 db    ? ;
.bss:000000000021451B                 db    ? ;
.bss:000000000021451C                 db    ? ;
.bss:000000000021451D                 db    ? ;
.bss:000000000021451E                 db    ? ;
.bss:000000000021451F                 db    ? ;
.bss:0000000000214520                 db    ? ;
.bss:0000000000214521                 db    ? ;
.bss:0000000000214522                 db    ? ;
.bss:0000000000214523                 db    ? ;
.bss:0000000000214524                 db    ? ;
.bss:0000000000214525                 db    ? ;
.bss:0000000000214526                 db    ? ;
.bss:0000000000214527                 db    ? ;
.bss:0000000000214528                 db    ? ;
.bss:0000000000214529                 db    ? ;
.bss:000000000021452A                 db    ? ;
.bss:000000000021452B                 db    ? ;
.bss:000000000021452C                 db    ? ;
.bss:000000000021452D                 db    ? ;
.bss:000000000021452E                 db    ? ;
.bss:000000000021452F                 db    ? ;
.bss:0000000000214530                 db    ? ;
.bss:0000000000214531                 db    ? ;
.bss:0000000000214532                 db    ? ;
.bss:0000000000214533                 db    ? ;
.bss:0000000000214534                 db    ? ;
.bss:0000000000214535                 db    ? ;
.bss:0000000000214536                 db    ? ;
.bss:0000000000214537                 db    ? ;
.bss:0000000000214538                 db    ? ;
.bss:0000000000214539                 db    ? ;
.bss:000000000021453A                 db    ? ;
.bss:000000000021453B                 db    ? ;
.bss:000000000021453C                 db    ? ;
.bss:000000000021453D                 db    ? ;
.bss:000000000021453E                 db    ? ;
.bss:000000000021453F                 db    ? ;
.bss:0000000000214540 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000214540                                         ; get_quoting_style↑o ...
.bss:0000000000214550 xmmword_214550  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000214550                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000214560 xmmword_214560  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000214560                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000214570 qword_214570    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000214570                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000214578 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000214578                                         ; rpl_fcntl:loc_DE5F↑w ...
.bss:000000000021457C                 align 20h
.bss:000000000021457C _bss            ends
.bss:000000000021457C
.prgend:0000000000214580 ; ===========================================================================
.prgend:0000000000214580
.prgend:0000000000214580 ; Segment type: Zero-length
.prgend:0000000000214580 _prgend         segment byte public '' use64
.prgend:0000000000214580 _end            label byte
.prgend:0000000000214580 _prgend         ends
.prgend:0000000000214580
extern:0000000000214588 ; ===========================================================================
extern:0000000000214588
extern:0000000000214588 ; Segment type: Externs
extern:0000000000214588 ; extern
extern:0000000000214588 ; char *getenv(const char *name)
extern:0000000000214588                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000214588                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000214590                 extrn __snprintf_chk:near
extern:0000000000214590                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000214590                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000214598 ; void free(void *ptr)
extern:0000000000214598                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000214598                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002145A0 ; int endmntent(FILE *stream)
extern:00000000002145A0                 extrn endmntent:near    ; CODE XREF: _endmntent↑j
extern:00000000002145A0                                         ; DATA XREF: .got:endmntent_ptr↑o
extern:00000000002145A8 ; int strverscmp(const char *s1, const char *s2)
extern:00000000002145A8                 extrn strverscmp:near   ; CODE XREF: _strverscmp↑j
extern:00000000002145A8                                         ; DATA XREF: .got:strverscmp_ptr↑o
extern:00000000002145B0 ; void __noreturn abort(void)
extern:00000000002145B0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002145B0                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002145B8 ; int *_errno_location(void)
extern:00000000002145B8                 extrn __errno_location:near
extern:00000000002145B8                                         ; CODE XREF: ___errno_location↑j
extern:00000000002145B8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002145C0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002145C0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002145C0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002145C8 ; void __noreturn exit(int status)
extern:00000000002145C8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002145C8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002145D0 ; size_t _fpending(FILE *fp)
extern:00000000002145D0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002145D0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002145D8 ; int isatty(int fd)
extern:00000000002145D8                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:00000000002145D8                                         ; DATA XREF: .got:isatty_ptr↑o
extern:00000000002145E0 ; int iswcntrl(wint_t wc)
extern:00000000002145E0                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:00000000002145E0                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:00000000002145E8 ; int wcswidth(const wchar_t *s, size_t n)
extern:00000000002145E8                 extrn wcswidth:near     ; CODE XREF: _wcswidth↑j
extern:00000000002145E8                                         ; DATA XREF: .got:wcswidth_ptr↑o
extern:00000000002145F0 ; struct lconv *localeconv(void)
extern:00000000002145F0                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:00000000002145F0                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:00000000002145F8 ; size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)
extern:00000000002145F8                 extrn mbstowcs:near     ; CODE XREF: _mbstowcs↑j
extern:00000000002145F8                                         ; DATA XREF: .got:mbstowcs_ptr↑o
extern:0000000000214600 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:0000000000214600                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:0000000000214600                                         ; DATA XREF: .got:readlink_ptr↑o
extern:0000000000214608 ; int fcntl(int fd, int cmd, ...)
extern:0000000000214608                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000214608                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000214610 ; char *textdomain(const char *domainname)
extern:0000000000214610                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000214610                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000214618 ; int fclose(FILE *stream)
extern:0000000000214618                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000214618                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000214620 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000214620                 extrn bindtextdomain:near
extern:0000000000214620                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000214620                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000214628 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000214628                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000214628                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000214630 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000214630                 extrn __ctype_get_mb_cur_max:near
extern:0000000000214630                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000214630                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000214638 ; size_t strlen(const char *s)
extern:0000000000214638                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000214638                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000214640 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000214640                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000214640                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:0000000000214648 ; int openat(int fd, const char *file, int oflag, ...)
extern:0000000000214648                 extrn openat:near       ; CODE XREF: _openat↑j
extern:0000000000214648                                         ; DATA XREF: .got:openat_ptr↑o
extern:0000000000214650 ; int chdir(const char *path)
extern:0000000000214650                 extrn chdir:near        ; CODE XREF: _chdir↑j
extern:0000000000214650                                         ; DATA XREF: .got:chdir_ptr↑o
extern:0000000000214658                 extrn __stack_chk_fail:near
extern:0000000000214658                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000214658                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000214660 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000214660                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000214660                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000214668 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000214668                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000214668                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000214670 ; char *strchr(const char *s, int c)
extern:0000000000214670                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000214670                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000214678 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:0000000000214678                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:0000000000214678                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:0000000000214680 ; int _overflow(_IO_FILE *, int)
extern:0000000000214680                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000214680                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000214688 ; char *strrchr(const char *s, int c)
extern:0000000000214688                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000214688                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000214690 ; int uname(struct utsname *name)
extern:0000000000214690                 extrn uname:near        ; CODE XREF: _uname↑j
extern:0000000000214690                                         ; DATA XREF: .got:uname_ptr↑o
extern:0000000000214698 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000214698                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000214698                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002146A0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002146A0                 extrn __assert_fail:near
extern:00000000002146A0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002146A0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002146A8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002146A8                 extrn __strtoul_internal:near
extern:00000000002146A8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002146A8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002146B0 ; void *memset(void *s, int c, size_t n)
extern:00000000002146B0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002146B0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002146B8 ; char *getcwd(char *buf, size_t size)
extern:00000000002146B8                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:00000000002146B8                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:00000000002146C0 ; char *canonicalize_file_name(const char *name)
extern:00000000002146C0                 extrn canonicalize_file_name:near
extern:00000000002146C0                                         ; CODE XREF: _canonicalize_file_name↑j
extern:00000000002146C0                                         ; DATA XREF: .got:canonicalize_file_name_ptr↑o
extern:00000000002146C8 ; int close(int fd)
extern:00000000002146C8                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002146C8                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002146D0 ; size_t strspn(const char *s, const char *accept)
extern:00000000002146D0                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:00000000002146D0                                         ; DATA XREF: .got:strspn_ptr↑o
extern:00000000002146D8 ; void *memchr(const void *s, int c, size_t n)
extern:00000000002146D8                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:00000000002146D8                                         ; DATA XREF: .got:memchr_ptr↑o
extern:00000000002146E0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002146E0                 extrn __libc_start_main:near
extern:00000000002146E0                                         ; CODE XREF: start+24↑p
extern:00000000002146E0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002146E8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002146E8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002146E8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002146F0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002146F0                 extrn fputs_unlocked:near
extern:00000000002146F0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002146F0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002146F8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002146F8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002146F8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000214700 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:0000000000214700                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:0000000000214700                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:0000000000214708 ; int strcmp(const char *s1, const char *s2)
extern:0000000000214708                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000214708                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000214710                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:0000000000214710                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:0000000000214718 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000214718                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000214718                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000214720 ; int fileno(FILE *stream)
extern:0000000000214720                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000214720                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000214728 ; int statfs(const char *file, struct statfs *buf)
extern:0000000000214728                 extrn statfs:near       ; CODE XREF: _statfs↑j
extern:0000000000214728                                         ; DATA XREF: .got:statfs_ptr↑o
extern:0000000000214730 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000214730                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000214730                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000214738 ; void sync(void)
extern:0000000000214738                 extrn sync:near         ; CODE XREF: _sync↑j
extern:0000000000214738                                         ; DATA XREF: .got:sync_ptr↑o
extern:0000000000214740 ; int wcwidth(wchar_t c)
extern:0000000000214740                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:0000000000214740                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:0000000000214748 ; void *malloc(size_t size)
extern:0000000000214748                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000214748                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000214750 ; int fflush(FILE *stream)
extern:0000000000214750                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000214750                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000214758 ; struct mntent *getmntent(FILE *stream)
extern:0000000000214758                 extrn getmntent:near    ; CODE XREF: _getmntent↑j
extern:0000000000214758                                         ; DATA XREF: .got:getmntent_ptr↑o
extern:0000000000214760 ; FILE *setmntent(const char *file, const char *mode)
extern:0000000000214760                 extrn setmntent:near    ; CODE XREF: _setmntent↑j
extern:0000000000214760                                         ; DATA XREF: .got:setmntent_ptr↑o
extern:0000000000214768 ; char *nl_langinfo(nl_item item)
extern:0000000000214768                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000214768                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000214770 ; int sscanf(const char *s, const char *format, ...)
extern:0000000000214770                 extrn sscanf:near       ; CODE XREF: _sscanf↑j
extern:0000000000214770                                         ; DATA XREF: .got:sscanf_ptr↑o
extern:0000000000214778 ; int _freading(FILE *fp)
extern:0000000000214778                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000214778                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000214780 ; int statvfs(const char *file, struct statvfs *buf)
extern:0000000000214780                 extrn statvfs:near      ; CODE XREF: _statvfs↑j
extern:0000000000214780                                         ; DATA XREF: .got:statvfs_ptr↑o
extern:0000000000214788 ; int fchdir(int fd)
extern:0000000000214788                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:0000000000214788                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:0000000000214790 ; void *realloc(void *ptr, size_t size)
extern:0000000000214790                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000214790                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000214798 ; char *setlocale(int category, const char *locale)
extern:0000000000214798                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000214798                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002147A0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002147A0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002147A8 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:00000000002147A8                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:00000000002147A8                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:00000000002147B0 ; void *memmove(void *dest, const void *src, size_t n)
extern:00000000002147B0                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:00000000002147B0                                         ; DATA XREF: .got:memmove_ptr↑o
extern:00000000002147B8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002147B8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002147B8                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002147C0 ; void *memrchr(const void *s, int c, size_t n)
extern:00000000002147C0                 extrn memrchr:near      ; CODE XREF: _memrchr↑j
extern:00000000002147C0                                         ; DATA XREF: .got:memrchr_ptr↑o
extern:00000000002147C8 ; int open(const char *file, int oflag, ...)
extern:00000000002147C8                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002147C8                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002147D0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002147D0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002147D0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002147D8 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002147D8                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002147D8                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002147E0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002147E0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002147E0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002147E8 ; size_t wcstombs(char *s, const wchar_t *pwcs, size_t n)
extern:00000000002147E8                 extrn wcstombs:near     ; CODE XREF: _wcstombs↑j
extern:00000000002147E8                                         ; DATA XREF: .got:wcstombs_ptr↑o
extern:00000000002147F0 ; void __noreturn exit(int status)
extern:00000000002147F0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002147F0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002147F8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002147F8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002147F8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000214800                 extrn __fprintf_chk:near
extern:0000000000214800                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000214800                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000214808 ; char *strdup(const char *s)
extern:0000000000214808                 extrn strdup:near       ; CODE XREF: _strdup↑j
extern:0000000000214808                                         ; DATA XREF: .got:strdup_ptr↑o
extern:0000000000214810 ; int mbsinit(const mbstate_t *ps)
extern:0000000000214810                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000214810                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000214818 ; int iswprint(wint_t wc)
extern:0000000000214818                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000214818                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000214820 ; char *hasmntopt(const struct mntent *mnt, const char *opt)
extern:0000000000214820                 extrn hasmntopt:near    ; CODE XREF: _hasmntopt↑j
extern:0000000000214820                                         ; DATA XREF: .got:hasmntopt_ptr↑o
extern:0000000000214828 ; int __fastcall __cxa_finalize(void *)
extern:0000000000214828                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000214828                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000214828                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000214830 ; char *strstr(const char *haystack, const char *needle)
extern:0000000000214830                 extrn strstr:near       ; CODE XREF: _strstr↑j
extern:0000000000214830                                         ; DATA XREF: .got:strstr_ptr↑o
extern:0000000000214838 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000214838                 extrn __ctype_b_loc:near
extern:0000000000214838                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000214838                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000214840                 extrn __sprintf_chk:near
extern:0000000000214840                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000214840                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000214848                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000214848                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000214850                 extrn __gmon_start__:near ; weak
extern:0000000000214850                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000214850                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000214858                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000214858                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000214858
extern:0000000000214858
extern:0000000000214858                 end start
