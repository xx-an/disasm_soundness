LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : F4C1434D6F02F5BC0E24A1E8C135DD259F437FD7931133AF90CDCCB7681CEEA9
LOAD:0000000000000000 ; Input MD5    : B637754A68157457935F14DF41D9DE9C
LOAD:0000000000000000 ; Input CRC32  : BE77F43C
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/mkfifo
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'mkfifo.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'selinux.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'modechange.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 247A0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 68A8h                ; Size in file image
LOAD:00000000000000D8                 dq 68A8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 6C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5B10h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5B10h                ; Physical address
LOAD:00000000000001B0                 dq 254h                 ; Size in file image
LOAD:00000000000001B8                 dq 254h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0FCh, 14h, 2Fh, 84h, 0F6h, 11h, 12h, 0B0h, 2, 57h, 0Eh ; Desc
LOAD:0000000000000284                 db 9Dh, 39h, 92h, 1Ah, 5Bh, 7, 0ECh, 0CFh, 5Eh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 31h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 31h, 32h, 37h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_838, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_838, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_838, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_838, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_838, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_838, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_838, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFclose - offset byte_838, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain - offset byte_838, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aDcgettext - offset byte_838, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_838, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrlen - offset byte_838, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStackChkFail - offset byte_838, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aGetoptLong - offset byte_838, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMbrtowc - offset byte_838, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrrchr - offset byte_838, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aLseek - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000490                            0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMemset - offset byte_838, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLibcStartMain - offset byte_838, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMemcmp - offset byte_838, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aFputsUnlocked - offset byte_838, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aCalloc - offset byte_838, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMkfifo - offset byte_838, 12h, 0, 0, \ ; "mkfifo"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGmonStart - offset byte_838, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aUmask - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:0000000000000550                            0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemcpy - offset byte_838, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFileno - offset byte_838, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aXstat - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMalloc - offset byte_838, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFflush - offset byte_838, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aNlLanginfo - offset byte_838, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFreading - offset byte_838, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aRealloc - offset byte_838, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aSetlocale - offset byte_838, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aPrintfChk - offset byte_838, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aChmod - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "chmod"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aError - offset byte_838, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aFseeko - offset byte_838, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aCxaAtexit - offset byte_838, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aExit+1 - offset byte_838, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFwrite - offset byte_838, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFprintfChk - offset byte_838, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aItmRegistertmc - offset byte_838, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMbsinit - offset byte_838, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aIswprint - offset byte_838, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaFinalize - offset byte_838, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aCtypeBLoc - offset byte_838, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aStdout - offset byte_838, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000778                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aProgname - offset byte_838, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000790                            offset __bss_start, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aProgramInvocat - offset byte_838, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007A8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aPrognameFull - offset byte_838, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007C0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_838, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007D8                            offset __bss_start, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aStderr - offset byte_838, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007F0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aOptind - offset byte_838, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000808                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000820                 Elf64_Sym <offset aOptarg - offset byte_838, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000820                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000838 ; ELF String Table
LOAD:0000000000000838 byte_838        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000838                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000839 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B48↓o
LOAD:0000000000000843 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:000000000000084A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000857 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000861 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000869 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000871 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000878 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000880 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:000000000000088A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000890 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008A1 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000008AA aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000008B2 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000008B8 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:00000000000008B8                                         ; LOAD:00000000000006B8↑o
LOAD:00000000000008BE aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008BE                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000008D6 aChmod          db 'chmod',0            ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000008DC aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008DC                                         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000008F3 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000008FA aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000901 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000908 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000919 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000920 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:000000000000092E aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000935 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000490↑o
LOAD:000000000000093B aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000942 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000949 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000950 aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000956 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:000000000000095E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:000000000000096A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000978 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:000000000000097F aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:000000000000098A aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000991 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000448↑o
LOAD:000000000000099D aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000009A4 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009AB aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000009B6 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000009B6                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009D4 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009E3 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000009EB aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000009EB                                         ; LOAD:00000000000003A0↑o
LOAD:00000000000009FA aMkfifo         db 'mkfifo',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A01 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A01                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000A13 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000A1A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A29 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A2E aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A39 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A49 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000A56 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B58↓o
LOAD:0000000000000A60 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B68↓o
LOAD:0000000000000A6C aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B78↓o
LOAD:0000000000000A77 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B88↓o
LOAD:0000000000000A81 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B98↓o
LOAD:0000000000000A8D aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A8D                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AA9 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000AB8 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000AB8                                         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AD2 ; ELF GNU Symbol Version Table
LOAD:0000000000000AD2                 dw 0
LOAD:0000000000000AD4                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000ADE                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AE8                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AEC                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AF0                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 2                    ; mkfifo@@GLIBC_2.2.5
LOAD:0000000000000B04                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B06                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:0000000000000B08                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B0A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B0C                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000B0E                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B10                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B12                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B14                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B16                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B18                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B1A                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B1C                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:0000000000000B1E                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B20                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B22                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B24                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B26                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B28                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B2A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B2C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B2E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B30                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B32                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B34                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B36                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B38                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B3A                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B3C                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B3E                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B40                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B42                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000B44                 dw 0
LOAD:0000000000000B46                 dw 0
LOAD:0000000000000B48 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B48                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_838, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B58                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_838, \ ; "GLIBC_2.3"
LOAD:0000000000000B58                                10h>
LOAD:0000000000000B68                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_838, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B68                                10h>
LOAD:0000000000000B78                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_838, \ ; "GLIBC_2.14"
LOAD:0000000000000B78                                10h>
LOAD:0000000000000B88                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_838, \ ; "GLIBC_2.4"
LOAD:0000000000000B88                                10h>
LOAD:0000000000000B98                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_838, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000BA8 ; ELF RELA Relocation Table
LOAD:0000000000000BA8                 Elf64_Rela <206B70h, 8, 1970h> ; R_X86_64_RELATIVE +1970h
LOAD:0000000000000BC0                 Elf64_Rela <206B78h, 8, 1930h> ; R_X86_64_RELATIVE +1930h
LOAD:0000000000000BD8                 Elf64_Rela <206B80h, 8, 4E4Ah> ; R_X86_64_RELATIVE +4E4Ah
LOAD:0000000000000BF0                 Elf64_Rela <206BA0h, 8, 4E12h> ; R_X86_64_RELATIVE +4E12h
LOAD:0000000000000C08                 Elf64_Rela <206BC0h, 8, 4E52h> ; R_X86_64_RELATIVE +4E52h
LOAD:0000000000000C20                 Elf64_Rela <206BE0h, 8, 4E57h> ; R_X86_64_RELATIVE +4E57h
LOAD:0000000000000C38                 Elf64_Rela <206C20h, 8, 52D1h> ; R_X86_64_RELATIVE +52D1h
LOAD:0000000000000C50                 Elf64_Rela <206C28h, 8, 52D9h> ; R_X86_64_RELATIVE +52D9h
LOAD:0000000000000C68                 Elf64_Rela <206C30h, 8, 52DFh> ; R_X86_64_RELATIVE +52DFh
LOAD:0000000000000C80                 Elf64_Rela <206C38h, 8, 52ECh> ; R_X86_64_RELATIVE +52ECh
LOAD:0000000000000C98                 Elf64_Rela <206C40h, 8, 52F9h> ; R_X86_64_RELATIVE +52F9h
LOAD:0000000000000CB0                 Elf64_Rela <206C48h, 8, 530Dh> ; R_X86_64_RELATIVE +530Dh
LOAD:0000000000000CC8                 Elf64_Rela <206C50h, 8, 530Fh> ; R_X86_64_RELATIVE +530Fh
LOAD:0000000000000CE0                 Elf64_Rela <206C58h, 8, 52F2h> ; R_X86_64_RELATIVE +52F2h
LOAD:0000000000000CF8                 Elf64_Rela <206C60h, 8, 4DDFh> ; R_X86_64_RELATIVE +4DDFh
LOAD:0000000000000D10                 Elf64_Rela <206C68h, 8, 5317h> ; R_X86_64_RELATIVE +5317h
LOAD:0000000000000D28                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D40                 Elf64_Rela <207010h, 8, 51DCh> ; R_X86_64_RELATIVE +51DCh
LOAD:0000000000000D58                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D70                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D88                 Elf64_Rela <206FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000DA0                 Elf64_Rela <206FE0h, 1400000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000DB8                 Elf64_Rela <206FE8h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DD0                 Elf64_Rela <206FF0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DE8                 Elf64_Rela <206FF8h, 2F00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E00                 Elf64_Rela <207080h, 3200000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E18                 Elf64_Rela <207088h, 3100000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E30                 Elf64_Rela <207090h, 3700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E48                 Elf64_Rela <207098h, 3800000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000E60                 Elf64_Rela <2070A0h, 3400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E78                 Elf64_Rela <2070C0h, 3600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E90 ; ELF JMPREL Relocation Table
LOAD:0000000000000E90                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000EA8                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000EC0                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000ED8                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EF0                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F08                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F20                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F38                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F50                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F68                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F80                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F98                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000FB0                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000FC8                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FE0                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FF8                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001010                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001028                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001040                 Elf64_Rela <206F10h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001058                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001070                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001088                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT mkfifo
LOAD:00000000000010A0                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:00000000000010B8                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000010D0                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000010E8                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001100                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001118                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001130                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001148                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001160                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001178                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001190                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000011A8                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:00000000000011C0                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000011D8                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000011F0                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001208                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001220                 Elf64_Rela <206FB0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001238                 Elf64_Rela <206FB8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001250                 Elf64_Rela <206FC0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001268                 Elf64_Rela <206FC8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001280                 Elf64_Rela <206FD0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001280 LOAD            ends
LOAD:0000000000001280
.init:0000000000001298 ; ===========================================================================
.init:0000000000001298
.init:0000000000001298 ; Segment type: Pure code
.init:0000000000001298 ; Segment permissions: Read/Execute
.init:0000000000001298 _init           segment dword public 'CODE' use64
.init:0000000000001298                 assume cs:_init
.init:0000000000001298                 ;org 1298h
.init:0000000000001298                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001298
.init:0000000000001298 ; =============== S U B R O U T I N E =======================================
.init:0000000000001298
.init:0000000000001298
.init:0000000000001298                 public _init_proc
.init:0000000000001298 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001298                 sub     rsp, 8          ; _init
.init:000000000000129C                 mov     rax, cs:__gmon_start___ptr
.init:00000000000012A3                 test    rax, rax
.init:00000000000012A6                 jz      short loc_12AA
.init:00000000000012A8                 call    rax ; __gmon_start__
.init:00000000000012AA
.init:00000000000012AA loc_12AA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000012AA                 add     rsp, 8
.init:00000000000012AE                 retn
.init:00000000000012AE _init_proc      endp
.init:00000000000012AE
.init:00000000000012AE _init           ends
.init:00000000000012AE
LOAD:00000000000012AF ; ===========================================================================
LOAD:00000000000012AF
LOAD:00000000000012AF ; Segment type: Pure code
LOAD:00000000000012AF ; Segment permissions: Read/Execute
LOAD:00000000000012AF LOAD            segment byte public 'CODE' use64
LOAD:00000000000012AF                 assume cs:LOAD
LOAD:00000000000012AF                 ;org 12AFh
LOAD:00000000000012AF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000012AF                 align 10h
LOAD:00000000000012AF LOAD            ends
LOAD:00000000000012AF
.plt:00000000000012B0 ; ===========================================================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Segment type: Pure code
.plt:00000000000012B0 ; Segment permissions: Read/Execute
.plt:00000000000012B0 _plt            segment para public 'CODE' use64
.plt:00000000000012B0                 assume cs:_plt
.plt:00000000000012B0                 ;org 12B0h
.plt:00000000000012B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0
.plt:00000000000012B0 sub_12B0        proc near               ; CODE XREF: .plt:00000000000012CB↓j
.plt:00000000000012B0                                         ; .plt:00000000000012DB↓j ...
.plt:00000000000012B0 ; __unwind {
.plt:00000000000012B0                 push    cs:qword_206E70
.plt:00000000000012B6                 jmp     cs:qword_206E78
.plt:00000000000012B6 sub_12B0        endp
.plt:00000000000012B6
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012BC                 align 20h
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; void free(void *ptr)
.plt:00000000000012C0 _free           proc near               ; CODE XREF: main+179↓p
.plt:00000000000012C0                                         ; mode_compile+B6↓p ...
.plt:00000000000012C0                 jmp     cs:free_ptr
.plt:00000000000012C0 _free           endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    0
.plt:00000000000012CB                 jmp     sub_12B0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: noreturn thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; void __noreturn abort(void)
.plt:00000000000012D0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000012D0                                         ; quotearg_buffer_restyled:def_25E1↓p ...
.plt:00000000000012D0                 jmp     cs:abort_ptr
.plt:00000000000012D0 _abort          endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    1
.plt:00000000000012DB                 jmp     sub_12B0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; int *__errno_location(void)
.plt:00000000000012E0 ___errno_location proc near             ; CODE XREF: main+210↓p
.plt:00000000000012E0                                         ; close_stdout+16↓p ...
.plt:00000000000012E0                 jmp     cs:__errno_location_ptr
.plt:00000000000012E0 ___errno_location endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    2
.plt:00000000000012EB                 jmp     sub_12B0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000012F0 _strncmp        proc near               ; CODE XREF: usage+274↓p
.plt:00000000000012F0                                         ; usage+335↓p
.plt:00000000000012F0                 jmp     cs:strncmp_ptr
.plt:00000000000012F0 _strncmp        endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    3
.plt:00000000000012FB                 jmp     sub_12B0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: noreturn thunk
.plt:0000000000001300
.plt:0000000000001300 ; void __noreturn _exit(int status)
.plt:0000000000001300 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001300                 jmp     cs:_exit_ptr
.plt:0000000000001300 __exit          endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    4
.plt:000000000000130B                 jmp     sub_12B0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; size_t __fpending(FILE *fp)
.plt:0000000000001310 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001310                 jmp     cs:__fpending_ptr
.plt:0000000000001310 ___fpending     endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    5
.plt:000000000000131B                 jmp     sub_12B0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; char *textdomain(const char *domainname)
.plt:0000000000001320 _textdomain     proc near               ; CODE XREF: main+50↓p
.plt:0000000000001320                 jmp     cs:textdomain_ptr
.plt:0000000000001320 _textdomain     endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    6
.plt:000000000000132B                 jmp     sub_12B0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; int fclose(FILE *stream)
.plt:0000000000001330 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001330                                         ; rpl_fclose+6B↓j
.plt:0000000000001330                 jmp     cs:fclose_ptr
.plt:0000000000001330 _fclose         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    7
.plt:000000000000133B                 jmp     sub_12B0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001340 _bindtextdomain proc near               ; CODE XREF: main+44↓p
.plt:0000000000001340                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001340 _bindtextdomain endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    8
.plt:000000000000134B                 jmp     sub_12B0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001350 _dcgettext      proc near               ; CODE XREF: main+10C↓p
.plt:0000000000001350                                         ; main+208↓p ...
.plt:0000000000001350                 jmp     cs:dcgettext_ptr
.plt:0000000000001350 _dcgettext      endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    9
.plt:000000000000135B                 jmp     sub_12B0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001360 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001360                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001360 ___ctype_get_mb_cur_max endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    0Ah
.plt:000000000000136B                 jmp     sub_12B0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; size_t strlen(const char *s)
.plt:0000000000001370 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001370                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001370                 jmp     cs:strlen_ptr
.plt:0000000000001370 _strlen         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    0Bh
.plt:000000000000137B                 jmp     sub_12B0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: noreturn thunk
.plt:0000000000001380
.plt:0000000000001380 ___stack_chk_fail proc near             ; CODE XREF: mode_create_from_ref:loc_2244↓p
.plt:0000000000001380                                         ; quotearg_buffer_restyled:loc_3743↓p ...
.plt:0000000000001380                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001380 ___stack_chk_fail endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    0Ch
.plt:000000000000138B                 jmp     sub_12B0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001390 _getopt_long    proc near               ; CODE XREF: main+73↓p
.plt:0000000000001390                 jmp     cs:getopt_long_ptr
.plt:0000000000001390 _getopt_long    endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    0Dh
.plt:000000000000139B                 jmp     sub_12B0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000013A0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000013A0                 jmp     cs:mbrtowc_ptr
.plt:00000000000013A0 _mbrtowc        endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    0Eh
.plt:00000000000013AB                 jmp     sub_12B0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; char *strrchr(const char *s, int c)
.plt:00000000000013B0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000013B0                 jmp     cs:strrchr_ptr
.plt:00000000000013B0 _strrchr        endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    0Fh
.plt:00000000000013BB                 jmp     sub_12B0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000013C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000013C0                                         ; rpl_fseeko+3B↓p
.plt:00000000000013C0                 jmp     cs:lseek_ptr
.plt:00000000000013C0 _lseek          endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    10h
.plt:00000000000013CB                 jmp     sub_12B0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000013D0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000013D0                                         ; xzalloc+12↓j
.plt:00000000000013D0                 jmp     cs:memset_ptr
.plt:00000000000013D0 _memset         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    11h
.plt:00000000000013DB                 jmp     sub_12B0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000013E0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000013E0                 jmp     cs:memcmp_ptr
.plt:00000000000013E0 _memcmp         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    12h
.plt:00000000000013EB                 jmp     sub_12B0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000013F0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000013F0                                         ; usage+C2↓p ...
.plt:00000000000013F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000013F0 _fputs_unlocked endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    13h
.plt:00000000000013FB                 jmp     sub_12B0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001400 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001400                 jmp     cs:calloc_ptr
.plt:0000000000001400 _calloc         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    14h
.plt:000000000000140B                 jmp     sub_12B0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int mkfifo(const char *path, __mode_t mode)
.plt:0000000000001410 _mkfifo         proc near               ; CODE XREF: main+1D9↓p
.plt:0000000000001410                 jmp     cs:mkfifo_ptr
.plt:0000000000001410 _mkfifo         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    15h
.plt:000000000000141B                 jmp     sub_12B0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; __mode_t umask(__mode_t mask)
.plt:0000000000001420 _umask          proc near               ; CODE XREF: main+14F↓p
.plt:0000000000001420                                         ; main+159↓p
.plt:0000000000001420                 jmp     cs:umask_ptr
.plt:0000000000001420 _umask          endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    16h
.plt:000000000000142B                 jmp     sub_12B0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001430 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001430                 jmp     cs:memcpy_ptr
.plt:0000000000001430 _memcpy         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    17h
.plt:000000000000143B                 jmp     sub_12B0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int fileno(FILE *stream)
.plt:0000000000001440 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001440                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001440                 jmp     cs:fileno_ptr
.plt:0000000000001440 _fileno         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    18h
.plt:000000000000144B                 jmp     sub_12B0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001450 ___xstat        proc near               ; CODE XREF: mode_create_from_ref+26↓p
.plt:0000000000001450                 jmp     cs:__xstat_ptr
.plt:0000000000001450 ___xstat        endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    19h
.plt:000000000000145B                 jmp     sub_12B0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; void *malloc(size_t size)
.plt:0000000000001460 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001460                 jmp     cs:malloc_ptr
.plt:0000000000001460 _malloc         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    1Ah
.plt:000000000000146B                 jmp     sub_12B0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fflush(FILE *stream)
.plt:0000000000001470 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001470                                         ; rpl_fflush+3B↓j
.plt:0000000000001470                 jmp     cs:fflush_ptr
.plt:0000000000001470 _fflush         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    1Bh
.plt:000000000000147B                 jmp     sub_12B0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; char *nl_langinfo(nl_item item)
.plt:0000000000001480 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001480                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001480 _nl_langinfo    endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    1Ch
.plt:000000000000148B                 jmp     sub_12B0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int __freading(FILE *fp)
.plt:0000000000001490 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001490                                         ; rpl_fflush+9↓p
.plt:0000000000001490                 jmp     cs:__freading_ptr
.plt:0000000000001490 ___freading     endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    1Dh
.plt:000000000000149B                 jmp     sub_12B0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000014A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000014A0                 jmp     cs:realloc_ptr
.plt:00000000000014A0 _realloc        endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    1Eh
.plt:00000000000014AB                 jmp     sub_12B0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000014B0 _setlocale      proc near               ; CODE XREF: main+31↓p
.plt:00000000000014B0                                         ; usage+25B↓p ...
.plt:00000000000014B0                 jmp     cs:setlocale_ptr
.plt:00000000000014B0 _setlocale      endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    1Fh
.plt:00000000000014BB                 jmp     sub_12B0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000014C0                                         ; usage+24F↓p ...
.plt:00000000000014C0                 jmp     cs:__printf_chk_ptr
.plt:00000000000014C0 ___printf_chk   endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    20h ; ' '
.plt:00000000000014CB                 jmp     sub_12B0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int chmod(const char *file, __mode_t mode)
.plt:00000000000014D0 _chmod          proc near               ; CODE XREF: main+1B0↓p
.plt:00000000000014D0                 jmp     cs:chmod_ptr
.plt:00000000000014D0 _chmod          endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    21h ; '!'
.plt:00000000000014DB                 jmp     sub_12B0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000014E0 _error          proc near               ; CODE XREF: main+11A↓p
.plt:00000000000014E0                                         ; main+227↓p ...
.plt:00000000000014E0                 jmp     cs:error_ptr
.plt:00000000000014E0 _error          endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    22h ; '"'
.plt:00000000000014EB                 jmp     sub_12B0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000014F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4C1A↓j
.plt:00000000000014F0                 jmp     cs:fseeko_ptr
.plt:00000000000014F0 _fseeko         endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    23h ; '#'
.plt:00000000000014FB                 jmp     sub_12B0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001500 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001500                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001500 ___cxa_atexit   endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    24h ; '$'
.plt:000000000000150B                 jmp     sub_12B0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: noreturn thunk
.plt:0000000000001510
.plt:0000000000001510 ; void __noreturn exit(int status)
.plt:0000000000001510 _exit           proc near               ; CODE XREF: main+E2↓p
.plt:0000000000001510                                         ; usage+58↓p
.plt:0000000000001510                 jmp     cs:exit_ptr
.plt:0000000000001510 _exit           endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    25h ; '%'
.plt:000000000000151B                 jmp     sub_12B0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001520 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001520                 jmp     cs:fwrite_ptr
.plt:0000000000001520 _fwrite         endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    26h ; '&'
.plt:000000000000152B                 jmp     sub_12B0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001530                                         ; version_etc_arn+37↓p ...
.plt:0000000000001530                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001530 ___fprintf_chk  endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    27h ; '''
.plt:000000000000153B                 jmp     sub_12B0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001540 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001540                 jmp     cs:mbsinit_ptr
.plt:0000000000001540 _mbsinit        endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    28h ; '('
.plt:000000000000154B                 jmp     sub_12B0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int iswprint(wint_t wc)
.plt:0000000000001550 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001550                 jmp     cs:iswprint_ptr
.plt:0000000000001550 _iswprint       endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    29h ; ')'
.plt:000000000000155B                 jmp     sub_12B0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001560 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001560                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001560 ___ctype_b_loc  endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    2Ah ; '*'
.plt:000000000000156B                 jmp     sub_12B0
.plt:000000000000156B ; } // starts at 12B0
.plt:000000000000156B _plt            ends
.plt:000000000000156B
.plt.got:0000000000001570 ; ===========================================================================
.plt.got:0000000000001570
.plt.got:0000000000001570 ; Segment type: Pure code
.plt.got:0000000000001570 ; Segment permissions: Read/Execute
.plt.got:0000000000001570 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001570                 assume cs:_plt_got
.plt.got:0000000000001570                 ;org 1570h
.plt.got:0000000000001570                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001570
.plt.got:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001570
.plt.got:0000000000001570 ; Attributes: thunk
.plt.got:0000000000001570
.plt.got:0000000000001570 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001570 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001570 ; __unwind {
.plt.got:0000000000001570                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001570 __cxa_finalize  endp
.plt.got:0000000000001570
.plt.got:0000000000001570 ; ---------------------------------------------------------------------------
.plt.got:0000000000001576                 align 8
.plt.got:0000000000001576 ; } // starts at 1570
.plt.got:0000000000001576 _plt_got        ends
.plt.got:0000000000001576
LOAD:0000000000001578 ; ===========================================================================
LOAD:0000000000001578
LOAD:0000000000001578 ; Segment type: Pure code
LOAD:0000000000001578 ; Segment permissions: Read/Execute
LOAD:0000000000001578 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001578                 assume cs:LOAD
LOAD:0000000000001578                 ;org 1578h
LOAD:0000000000001578                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001578                 align 20h
LOAD:0000000000001578 LOAD            ends
LOAD:0000000000001578
.text:0000000000001580 ; ===========================================================================
.text:0000000000001580
.text:0000000000001580 ; Segment type: Pure code
.text:0000000000001580 ; Segment permissions: Read/Execute
.text:0000000000001580 _text           segment para public 'CODE' use64
.text:0000000000001580                 assume cs:_text
.text:0000000000001580                 ;org 1580h
.text:0000000000001580                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001580
.text:0000000000001580 ; =============== S U B R O U T I N E =======================================
.text:0000000000001580
.text:0000000000001580
.text:0000000000001580 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001580                 public main
.text:0000000000001580 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001580 ; __unwind {
.text:0000000000001580                 push    r15
.text:0000000000001582                 push    r14
.text:0000000000001584                 push    r13
.text:0000000000001586                 push    r12
.text:0000000000001588                 lea     r13, longopts
.text:000000000000158F                 push    rbp
.text:0000000000001590                 push    rbx
.text:0000000000001591                 mov     ebp, edi
.text:0000000000001593                 mov     rbx, rsi
.text:0000000000001596                 xor     r12d, r12d
.text:0000000000001599                 sub     rsp, 8
.text:000000000000159D                 mov     rdi, [rsi]
.text:00000000000015A0                 call    set_program_name
.text:00000000000015A5                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000015AC                 mov     edi, 6          ; category
.text:00000000000015B1                 call    _setlocale
.text:00000000000015B6                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000015BD                 lea     rdi, domainname ; "coreutils"
.text:00000000000015C4                 call    _bindtextdomain
.text:00000000000015C9                 lea     rdi, domainname ; "coreutils"
.text:00000000000015D0                 call    _textdomain
.text:00000000000015D5                 lea     rdi, close_stdout
.text:00000000000015DC                 call    atexit
.text:00000000000015E1
.text:00000000000015E1 loc_15E1:                               ; CODE XREF: main+A3↓j
.text:00000000000015E1                                         ; main+F8↓j ...
.text:00000000000015E1                 lea     rdx, shortopts  ; "m:Z"
.text:00000000000015E8                 xor     r8d, r8d        ; longind
.text:00000000000015EB                 mov     rcx, r13        ; longopts
.text:00000000000015EE                 mov     rsi, rbx        ; argv
.text:00000000000015F1                 mov     edi, ebp        ; argc
.text:00000000000015F3                 call    _getopt_long
.text:00000000000015F8                 cmp     eax, 0FFFFFFFFh
.text:00000000000015FB                 jz      loc_16A4
.text:0000000000001601                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001606                 jz      loc_1819
.text:000000000000160C                 jle     short loc_1628
.text:000000000000160E                 cmp     eax, 5Ah ; 'Z'
.text:0000000000001611                 jz      short loc_1670
.text:0000000000001613                 cmp     eax, 6Dh ; 'm'
.text:0000000000001616                 jnz     loc_180F
.text:000000000000161C                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000001623                 jmp     short loc_15E1
.text:0000000000001623 ; ---------------------------------------------------------------------------
.text:0000000000001625                 align 8
.text:0000000000001628
.text:0000000000001628 loc_1628:                               ; CODE XREF: main+8C↑j
.text:0000000000001628                 cmp     eax, 0FFFFFF7Dh
.text:000000000000162D                 jnz     loc_180F
.text:0000000000001633                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000163A                 mov     rcx, cs:Version
.text:0000000000001641                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001648                 lea     rdx, unk_4DA1
.text:000000000000164F                 lea     rsi, aMkfifo_0  ; "mkfifo"
.text:0000000000001656                 xor     r9d, r9d
.text:0000000000001659                 xor     eax, eax
.text:000000000000165B                 call    version_etc
.text:0000000000001660                 xor     edi, edi        ; status
.text:0000000000001662                 call    _exit
.text:0000000000001662 ; ---------------------------------------------------------------------------
.text:0000000000001667                 align 10h
.text:0000000000001670
.text:0000000000001670 loc_1670:                               ; CODE XREF: main+91↑j
.text:0000000000001670                 cmp     cs:optarg@@GLIBC_2_2_5, 0
.text:0000000000001678                 jz      loc_15E1
.text:000000000000167E                 lea     rsi, msgid      ; "warning: ignoring --context; it require"...
.text:0000000000001685                 xor     edi, edi        ; domainname
.text:0000000000001687                 mov     edx, 5          ; category
.text:000000000000168C                 call    _dcgettext
.text:0000000000001691                 xor     esi, esi        ; errnum
.text:0000000000001693                 mov     rdx, rax        ; format
.text:0000000000001696                 xor     edi, edi        ; status
.text:0000000000001698                 xor     eax, eax
.text:000000000000169A                 call    _error
.text:000000000000169F                 jmp     loc_15E1
.text:00000000000016A4 ; ---------------------------------------------------------------------------
.text:00000000000016A4
.text:00000000000016A4 loc_16A4:                               ; CODE XREF: main+7B↑j
.text:00000000000016A4                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:00000000000016AA                 jz      loc_17EE
.text:00000000000016B0                 test    r12, r12
.text:00000000000016B3                 jz      loc_17E3
.text:00000000000016B9                 mov     rdi, r12
.text:00000000000016BC                 call    mode_compile
.text:00000000000016C1                 test    rax, rax
.text:00000000000016C4                 mov     r14, rax
.text:00000000000016C7                 jz      loc_1844
.text:00000000000016CD                 xor     edi, edi        ; mask
.text:00000000000016CF                 call    _umask
.text:00000000000016D4                 mov     r13d, eax
.text:00000000000016D7                 mov     edi, eax        ; mask
.text:00000000000016D9                 call    _umask
.text:00000000000016DE                 xor     r8d, r8d
.text:00000000000016E1                 mov     edx, r13d
.text:00000000000016E4                 xor     esi, esi
.text:00000000000016E6                 mov     rcx, r14
.text:00000000000016E9                 mov     edi, 1B6h
.text:00000000000016EE                 call    mode_adjust
.text:00000000000016F3                 mov     rdi, r14        ; ptr
.text:00000000000016F6                 mov     r13d, eax
.text:00000000000016F9                 call    _free
.text:00000000000016FE                 test    r13d, 0FFFFFE00h
.text:0000000000001705                 jnz     loc_1820
.text:000000000000170B
.text:000000000000170B loc_170B:                               ; CODE XREF: main+269↓j
.text:000000000000170B                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001711                 xor     r14d, r14d
.text:0000000000001714                 cmp     ebp, eax
.text:0000000000001716                 jg      short loc_1750
.text:0000000000001718                 jmp     loc_17AE
.text:000000000000171D ; ---------------------------------------------------------------------------
.text:000000000000171D
.text:000000000000171D loc_171D:                               ; CODE XREF: main+1E0↓j
.text:000000000000171D                 test    r12, r12
.text:0000000000001720                 jz      short loc_173D
.text:0000000000001722                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001729                 mov     esi, r13d       ; mode
.text:000000000000172C                 mov     rdi, [rbx+rax*8] ; file
.text:0000000000001730                 call    _chmod
.text:0000000000001735                 test    eax, eax
.text:0000000000001737                 jnz     loc_17BD
.text:000000000000173D
.text:000000000000173D loc_173D:                               ; CODE XREF: main+1A0↑j
.text:000000000000173D                                         ; main+22C↓j
.text:000000000000173D                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001743                 add     eax, 1
.text:0000000000001746                 cmp     eax, ebp
.text:0000000000001748                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:000000000000174E                 jge     short loc_17AE
.text:0000000000001750
.text:0000000000001750 loc_1750:                               ; CODE XREF: main+196↑j
.text:0000000000001750                 cdqe
.text:0000000000001752                 mov     esi, r13d       ; mode
.text:0000000000001755                 mov     rdi, [rbx+rax*8] ; path
.text:0000000000001759                 call    _mkfifo
.text:000000000000175E                 test    eax, eax
.text:0000000000001760                 jz      short loc_171D
.text:0000000000001762                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001769                 mov     edi, 4
.text:000000000000176E                 mov     rsi, [rbx+rax*8]
.text:0000000000001772                 call    quotearg_style
.text:0000000000001777                 lea     rsi, aCannotCreateFi ; "cannot create fifo %s"
.text:000000000000177E                 mov     r15, rax
.text:0000000000001781                 mov     edx, 5          ; category
.text:0000000000001786
.text:0000000000001786 loc_1786:                               ; CODE XREF: main+261↓j
.text:0000000000001786                 xor     edi, edi        ; domainname
.text:0000000000001788                 call    _dcgettext
.text:000000000000178D                 mov     r14, rax
.text:0000000000001790                 call    ___errno_location
.text:0000000000001795                 mov     esi, [rax]      ; errnum
.text:0000000000001797                 mov     rdx, r14        ; format
.text:000000000000179A                 mov     rcx, r15
.text:000000000000179D                 xor     edi, edi        ; status
.text:000000000000179F                 xor     eax, eax
.text:00000000000017A1                 mov     r14d, 1
.text:00000000000017A7                 call    _error
.text:00000000000017AC                 jmp     short loc_173D
.text:00000000000017AE ; ---------------------------------------------------------------------------
.text:00000000000017AE
.text:00000000000017AE loc_17AE:                               ; CODE XREF: main+198↑j
.text:00000000000017AE                                         ; main+1CE↑j
.text:00000000000017AE                 pop     rdx
.text:00000000000017AF                 mov     eax, r14d
.text:00000000000017B2                 pop     rbx
.text:00000000000017B3                 pop     rbp
.text:00000000000017B4                 pop     r12
.text:00000000000017B6                 pop     r13
.text:00000000000017B8                 pop     r14
.text:00000000000017BA                 pop     r15
.text:00000000000017BC                 retn
.text:00000000000017BD ; ---------------------------------------------------------------------------
.text:00000000000017BD
.text:00000000000017BD loc_17BD:                               ; CODE XREF: main+1B7↑j
.text:00000000000017BD                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000017C4                 mov     edi, 4
.text:00000000000017C9                 mov     rsi, [rbx+rax*8]
.text:00000000000017CD                 call    quotearg_style
.text:00000000000017D2                 mov     edx, 5
.text:00000000000017D7                 mov     r15, rax
.text:00000000000017DA                 lea     rsi, aCannotSetPermi ; "cannot set permissions of %s"
.text:00000000000017E1                 jmp     short loc_1786
.text:00000000000017E3 ; ---------------------------------------------------------------------------
.text:00000000000017E3
.text:00000000000017E3 loc_17E3:                               ; CODE XREF: main+133↑j
.text:00000000000017E3                 mov     r13d, 1B6h
.text:00000000000017E9                 jmp     loc_170B
.text:00000000000017EE ; ---------------------------------------------------------------------------
.text:00000000000017EE
.text:00000000000017EE loc_17EE:                               ; CODE XREF: main+12A↑j
.text:00000000000017EE                 lea     rsi, aMissingOperand ; "missing operand"
.text:00000000000017F5                 mov     edx, 5          ; category
.text:00000000000017FA                 xor     edi, edi        ; domainname
.text:00000000000017FC                 call    _dcgettext
.text:0000000000001801                 xor     esi, esi        ; errnum
.text:0000000000001803                 mov     rdx, rax        ; format
.text:0000000000001806                 xor     edi, edi        ; status
.text:0000000000001808                 xor     eax, eax
.text:000000000000180A                 call    _error
.text:000000000000180F
.text:000000000000180F loc_180F:                               ; CODE XREF: main+96↑j
.text:000000000000180F                                         ; main+AD↑j
.text:000000000000180F                 mov     edi, 1          ; status
.text:0000000000001814                 call    usage
.text:0000000000001819 ; ---------------------------------------------------------------------------
.text:0000000000001819
.text:0000000000001819 loc_1819:                               ; CODE XREF: main+86↑j
.text:0000000000001819                 xor     edi, edi        ; status
.text:000000000000181B                 call    usage
.text:0000000000001820 ; ---------------------------------------------------------------------------
.text:0000000000001820
.text:0000000000001820 loc_1820:                               ; CODE XREF: main+185↑j
.text:0000000000001820                 lea     rsi, aModeMustSpecif ; "mode must specify only file permission "...
.text:0000000000001827                 mov     edx, 5          ; category
.text:000000000000182C                 xor     edi, edi        ; domainname
.text:000000000000182E                 call    _dcgettext
.text:0000000000001833                 xor     esi, esi        ; errnum
.text:0000000000001835                 mov     rdx, rax        ; format
.text:0000000000001838                 mov     edi, 1          ; status
.text:000000000000183D                 xor     eax, eax
.text:000000000000183F                 call    _error
.text:0000000000001844
.text:0000000000001844 loc_1844:                               ; CODE XREF: main+147↑j
.text:0000000000001844                 lea     rsi, aInvalidMode ; "invalid mode"
.text:000000000000184B                 mov     edx, 5          ; category
.text:0000000000001850                 xor     edi, edi        ; domainname
.text:0000000000001852                 call    _dcgettext
.text:0000000000001857                 xor     esi, esi        ; errnum
.text:0000000000001859                 mov     rdx, rax        ; format
.text:000000000000185C                 mov     edi, 1          ; status
.text:0000000000001861                 xor     eax, eax
.text:0000000000001863                 call    _error
.text:0000000000001863 ; } // starts at 1580
.text:0000000000001868                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000001868 main            endp ; sp-analysis failed
.text:0000000000001868
.text:0000000000001870
.text:0000000000001870 ; =============== S U B R O U T I N E =======================================
.text:0000000000001870
.text:0000000000001870 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001870
.text:0000000000001870 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001870                 public start
.text:0000000000001870 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001870 ; __unwind {
.text:0000000000001870                 xor     ebp, ebp
.text:0000000000001872                 mov     r9, rdx         ; rtld_fini
.text:0000000000001875                 pop     rsi             ; argc
.text:0000000000001876                 mov     rdx, rsp        ; ubp_av
.text:0000000000001879                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000187D                 push    rax
.text:000000000000187E                 push    rsp             ; stack_end
.text:000000000000187F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001886                 lea     rcx, __libc_csu_init ; init
.text:000000000000188D                 lea     rdi, main       ; main
.text:0000000000001894                 call    cs:__libc_start_main_ptr
.text:000000000000189A                 hlt
.text:000000000000189A ; } // starts at 1870
.text:000000000000189A start           endp
.text:000000000000189A
.text:000000000000189A ; ---------------------------------------------------------------------------
.text:000000000000189B                 align 20h
.text:00000000000018A0
.text:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018A0
.text:00000000000018A0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000018A0
.text:00000000000018A0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1953↓p
.text:00000000000018A0                 lea     rdi, __bss_start
.text:00000000000018A7                 push    rbp
.text:00000000000018A8                 lea     rax, __bss_start
.text:00000000000018AF                 cmp     rax, rdi
.text:00000000000018B2                 mov     rbp, rsp
.text:00000000000018B5                 jz      short loc_18D0
.text:00000000000018B7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000018BE                 test    rax, rax
.text:00000000000018C1                 jz      short loc_18D0
.text:00000000000018C3                 pop     rbp
.text:00000000000018C4                 jmp     rax
.text:00000000000018C4 ; ---------------------------------------------------------------------------
.text:00000000000018C6                 align 10h
.text:00000000000018D0
.text:00000000000018D0 loc_18D0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000018D0                                         ; deregister_tm_clones+21↑j
.text:00000000000018D0                 pop     rbp
.text:00000000000018D1                 retn
.text:00000000000018D1 deregister_tm_clones endp
.text:00000000000018D1
.text:00000000000018D1 ; ---------------------------------------------------------------------------
.text:00000000000018D2                 align 20h
.text:00000000000018E0
.text:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018E0
.text:00000000000018E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000018E0
.text:00000000000018E0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000018E0                 lea     rdi, __bss_start
.text:00000000000018E7                 lea     rsi, __bss_start
.text:00000000000018EE                 push    rbp
.text:00000000000018EF                 sub     rsi, rdi
.text:00000000000018F2                 mov     rbp, rsp
.text:00000000000018F5                 sar     rsi, 3
.text:00000000000018F9                 mov     rax, rsi
.text:00000000000018FC                 shr     rax, 3Fh
.text:0000000000001900                 add     rsi, rax
.text:0000000000001903                 sar     rsi, 1
.text:0000000000001906                 jz      short loc_1920
.text:0000000000001908                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000190F                 test    rax, rax
.text:0000000000001912                 jz      short loc_1920
.text:0000000000001914                 pop     rbp
.text:0000000000001915                 jmp     rax
.text:0000000000001915 ; ---------------------------------------------------------------------------
.text:0000000000001917                 align 20h
.text:0000000000001920
.text:0000000000001920 loc_1920:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001920                                         ; register_tm_clones+32↑j
.text:0000000000001920                 pop     rbp
.text:0000000000001921                 retn
.text:0000000000001921 register_tm_clones endp
.text:0000000000001921
.text:0000000000001921 ; ---------------------------------------------------------------------------
.text:0000000000001922                 align 10h
.text:0000000000001930
.text:0000000000001930 ; =============== S U B R O U T I N E =======================================
.text:0000000000001930
.text:0000000000001930 ; Attributes: info_from_lumina
.text:0000000000001930
.text:0000000000001930 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001930                 cmp     cs:completed_7697, 0
.text:0000000000001937                 jnz     short locret_1968
.text:0000000000001939                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001941                 push    rbp
.text:0000000000001942                 mov     rbp, rsp
.text:0000000000001945                 jz      short loc_1953
.text:0000000000001947                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000194E                 call    __cxa_finalize
.text:0000000000001953
.text:0000000000001953 loc_1953:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001953                 call    deregister_tm_clones
.text:0000000000001958                 mov     cs:completed_7697, 1
.text:000000000000195F                 pop     rbp
.text:0000000000001960                 retn
.text:0000000000001960 ; ---------------------------------------------------------------------------
.text:0000000000001961                 align 8
.text:0000000000001968
.text:0000000000001968 locret_1968:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001968                 rep retn
.text:0000000000001968 __do_global_dtors_aux endp
.text:0000000000001968
.text:0000000000001968 ; ---------------------------------------------------------------------------
.text:000000000000196A                 align 10h
.text:0000000000001970
.text:0000000000001970 ; =============== S U B R O U T I N E =======================================
.text:0000000000001970
.text:0000000000001970 ; Attributes: bp-based frame
.text:0000000000001970
.text:0000000000001970 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001970                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001970                 push    rbp
.text:0000000000001971                 mov     rbp, rsp
.text:0000000000001974                 pop     rbp
.text:0000000000001975                 jmp     register_tm_clones
.text:0000000000001975 frame_dummy     endp
.text:0000000000001975
.text:0000000000001975 ; ---------------------------------------------------------------------------
.text:000000000000197A                 align 20h
.text:0000000000001980
.text:0000000000001980 ; =============== S U B R O U T I N E =======================================
.text:0000000000001980
.text:0000000000001980 ; Attributes: noreturn
.text:0000000000001980
.text:0000000000001980 ; void __fastcall __noreturn usage(int status)
.text:0000000000001980                 public usage
.text:0000000000001980 usage           proc near               ; CODE XREF: main+294↑p
.text:0000000000001980                                         ; main+29B↑p
.text:0000000000001980
.text:0000000000001980 var_A8          = qword ptr -0A8h
.text:0000000000001980 var_A0          = qword ptr -0A0h
.text:0000000000001980 var_98          = qword ptr -98h
.text:0000000000001980 var_90          = qword ptr -90h
.text:0000000000001980 var_88          = qword ptr -88h
.text:0000000000001980 var_80          = qword ptr -80h
.text:0000000000001980 var_78          = qword ptr -78h
.text:0000000000001980 var_70          = qword ptr -70h
.text:0000000000001980 var_68          = qword ptr -68h
.text:0000000000001980 var_60          = qword ptr -60h
.text:0000000000001980 var_58          = qword ptr -58h
.text:0000000000001980 var_50          = qword ptr -50h
.text:0000000000001980 var_48          = qword ptr -48h
.text:0000000000001980 var_40          = qword ptr -40h
.text:0000000000001980 var_30          = qword ptr -30h
.text:0000000000001980
.text:0000000000001980 ; __unwind {
.text:0000000000001980                 push    r13
.text:0000000000001982                 push    r12
.text:0000000000001984                 mov     edx, 5          ; category
.text:0000000000001989                 push    rbp
.text:000000000000198A                 push    rbx
.text:000000000000198B                 mov     ebp, edi
.text:000000000000198D                 sub     rsp, 88h
.text:0000000000001994                 mov     rbx, cs:program_name
.text:000000000000199B                 mov     rax, fs:28h
.text:00000000000019A4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000019A9                 xor     eax, eax
.text:00000000000019AB                 test    edi, edi
.text:00000000000019AD                 jz      short loc_19DD
.text:00000000000019AF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000019B6                 xor     edi, edi        ; domainname
.text:00000000000019B8                 call    _dcgettext
.text:00000000000019BD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000019C4                 mov     rdx, rax
.text:00000000000019C7                 mov     rcx, rbx
.text:00000000000019CA                 mov     esi, 1
.text:00000000000019CF                 xor     eax, eax
.text:00000000000019D1                 call    ___fprintf_chk
.text:00000000000019D6
.text:00000000000019D6 loc_19D6:                               ; CODE XREF: usage+2EE↓j
.text:00000000000019D6                 mov     edi, ebp        ; status
.text:00000000000019D8                 call    _exit
.text:00000000000019DD ; ---------------------------------------------------------------------------
.text:00000000000019DD
.text:00000000000019DD loc_19DD:                               ; CODE XREF: usage+2D↑j
.text:00000000000019DD                 lea     rsi, aUsageSOptionNa ; "Usage: %s [OPTION]... NAME...\n"
.text:00000000000019E4                 xor     edi, edi        ; domainname
.text:00000000000019E6                 call    _dcgettext
.text:00000000000019EB                 mov     rdx, rbx
.text:00000000000019EE                 mov     rsi, rax
.text:00000000000019F1                 mov     edi, 1
.text:00000000000019F6                 xor     eax, eax
.text:00000000000019F8                 call    ___printf_chk
.text:00000000000019FD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A04                 lea     rsi, aCreateNamedPip ; "Create named pipes (FIFOs) with the giv"...
.text:0000000000001A0B                 mov     edx, 5          ; category
.text:0000000000001A10                 xor     edi, edi        ; domainname
.text:0000000000001A12                 call    _dcgettext
.text:0000000000001A17                 mov     rsi, rbx        ; stream
.text:0000000000001A1A                 mov     rdi, rax        ; s
.text:0000000000001A1D                 call    _fputs_unlocked
.text:0000000000001A22                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A29                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001A30                 mov     edx, 5          ; category
.text:0000000000001A35                 xor     edi, edi        ; domainname
.text:0000000000001A37                 call    _dcgettext
.text:0000000000001A3C                 mov     rsi, rbx        ; stream
.text:0000000000001A3F                 mov     rdi, rax        ; s
.text:0000000000001A42                 call    _fputs_unlocked
.text:0000000000001A47                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A4E                 lea     rsi, aMModeModeSetFi ; "  -m, --mode=MODE    set file permissio"...
.text:0000000000001A55                 mov     edx, 5          ; category
.text:0000000000001A5A                 xor     edi, edi        ; domainname
.text:0000000000001A5C                 call    _dcgettext
.text:0000000000001A61                 mov     rsi, rbx        ; stream
.text:0000000000001A64                 mov     rdi, rax        ; s
.text:0000000000001A67                 call    _fputs_unlocked
.text:0000000000001A6C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A73                 lea     rsi, aZSetTheSelinux ; "  -Z                   set the SELinux "...
.text:0000000000001A7A                 mov     edx, 5          ; category
.text:0000000000001A7F                 xor     edi, edi        ; domainname
.text:0000000000001A81                 call    _dcgettext
.text:0000000000001A86                 mov     rsi, rbx        ; stream
.text:0000000000001A89                 mov     rdi, rax        ; s
.text:0000000000001A8C                 call    _fputs_unlocked
.text:0000000000001A91                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A98                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001A9F                 mov     edx, 5          ; category
.text:0000000000001AA4                 xor     edi, edi        ; domainname
.text:0000000000001AA6                 call    _dcgettext
.text:0000000000001AAB                 mov     rsi, rbx        ; stream
.text:0000000000001AAE                 mov     rdi, rax        ; s
.text:0000000000001AB1                 call    _fputs_unlocked
.text:0000000000001AB6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001ABD                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001AC4                 mov     edx, 5          ; category
.text:0000000000001AC9                 xor     edi, edi        ; domainname
.text:0000000000001ACB                 call    _dcgettext
.text:0000000000001AD0                 mov     rsi, rbx        ; stream
.text:0000000000001AD3                 mov     rdi, rax        ; s
.text:0000000000001AD6                 lea     rbx, aMkfifo_0  ; "mkfifo"
.text:0000000000001ADD                 call    _fputs_unlocked
.text:0000000000001AE2                 lea     rax, asc_4D2B   ; "["
.text:0000000000001AE9                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001AF0                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001AF9                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001B02                 mov     rdx, rsp
.text:0000000000001B05                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001B09                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001B10                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001B15                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001B1C                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001B21                 lea     rax, domainname ; "coreutils"
.text:0000000000001B28                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001B2D                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001B34                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001B39                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001B40                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001B45                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001B4A                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001B51                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001B56                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001B5D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001B62                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001B67                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001B6C                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001B71                 nop     dword ptr [rax+00000000h]
.text:0000000000001B78
.text:0000000000001B78 loc_1B78:                               ; CODE XREF: usage+215↓j
.text:0000000000001B78                 add     rdx, 10h
.text:0000000000001B7C                 mov     rdi, [rdx]
.text:0000000000001B7F                 test    rdi, rdi
.text:0000000000001B82                 jz      short loc_1B97
.text:0000000000001B84                 mov     ecx, 7
.text:0000000000001B89                 mov     rsi, rbx
.text:0000000000001B8C                 repe cmpsb
.text:0000000000001B8E                 setnbe  al
.text:0000000000001B91                 sbb     al, 0
.text:0000000000001B93                 test    al, al
.text:0000000000001B95                 jnz     short loc_1B78
.text:0000000000001B97
.text:0000000000001B97 loc_1B97:                               ; CODE XREF: usage+202↑j
.text:0000000000001B97                 mov     r12, [rdx+8]
.text:0000000000001B9B                 xor     edi, edi        ; domainname
.text:0000000000001B9D                 mov     edx, 5          ; category
.text:0000000000001BA2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001BA9                 test    r12, r12
.text:0000000000001BAC                 jz      loc_1C73
.text:0000000000001BB2                 call    _dcgettext
.text:0000000000001BB7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001BBE                 lea     rdx, unk_4DA1
.text:0000000000001BC5                 mov     rsi, rax
.text:0000000000001BC8                 mov     edi, 1
.text:0000000000001BCD                 xor     eax, eax
.text:0000000000001BCF                 call    ___printf_chk
.text:0000000000001BD4                 xor     esi, esi        ; locale
.text:0000000000001BD6                 mov     edi, 5          ; category
.text:0000000000001BDB                 call    _setlocale
.text:0000000000001BE0                 test    rax, rax
.text:0000000000001BE3                 jz      short loc_1C01
.text:0000000000001BE5                 lea     rsi, s2         ; "en_"
.text:0000000000001BEC                 mov     edx, 3          ; n
.text:0000000000001BF1                 mov     rdi, rax        ; s1
.text:0000000000001BF4                 call    _strncmp
.text:0000000000001BF9                 test    eax, eax
.text:0000000000001BFB                 jnz     loc_1D08
.text:0000000000001C01
.text:0000000000001C01 loc_1C01:                               ; CODE XREF: usage+263↑j
.text:0000000000001C01                                         ; usage+3AD↓j
.text:0000000000001C01                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001C08                 xor     edi, edi        ; domainname
.text:0000000000001C0A                 mov     edx, 5          ; category
.text:0000000000001C0F                 call    _dcgettext
.text:0000000000001C14                 lea     rcx, aMkfifo_0  ; "mkfifo"
.text:0000000000001C1B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C22                 mov     rsi, rax
.text:0000000000001C25                 mov     edi, 1
.text:0000000000001C2A                 xor     eax, eax
.text:0000000000001C2C                 call    ___printf_chk
.text:0000000000001C31                 cmp     r12, rbx
.text:0000000000001C34                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001C3B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001C42                 cmovz   rbx, rcx
.text:0000000000001C46
.text:0000000000001C46 loc_1C46:                               ; CODE XREF: usage+37C↓j
.text:0000000000001C46                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001C4D                 xor     edi, edi        ; domainname
.text:0000000000001C4F                 mov     edx, 5          ; category
.text:0000000000001C54                 call    _dcgettext
.text:0000000000001C59                 mov     rcx, rbx
.text:0000000000001C5C                 mov     rsi, rax
.text:0000000000001C5F                 mov     rdx, r12
.text:0000000000001C62                 mov     edi, 1
.text:0000000000001C67                 xor     eax, eax
.text:0000000000001C69                 call    ___printf_chk
.text:0000000000001C6E                 jmp     loc_19D6
.text:0000000000001C73 ; ---------------------------------------------------------------------------
.text:0000000000001C73
.text:0000000000001C73 loc_1C73:                               ; CODE XREF: usage+22C↑j
.text:0000000000001C73                 call    _dcgettext
.text:0000000000001C78                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C7F                 lea     rdx, unk_4DA1
.text:0000000000001C86                 mov     rsi, rax
.text:0000000000001C89                 mov     edi, 1
.text:0000000000001C8E                 xor     eax, eax
.text:0000000000001C90                 call    ___printf_chk
.text:0000000000001C95                 xor     esi, esi        ; locale
.text:0000000000001C97                 mov     edi, 5          ; category
.text:0000000000001C9C                 call    _setlocale
.text:0000000000001CA1                 test    rax, rax
.text:0000000000001CA4                 jz      short loc_1CBE
.text:0000000000001CA6                 lea     rsi, s2         ; "en_"
.text:0000000000001CAD                 mov     edx, 3          ; n
.text:0000000000001CB2                 mov     rdi, rax        ; s1
.text:0000000000001CB5                 call    _strncmp
.text:0000000000001CBA                 test    eax, eax
.text:0000000000001CBC                 jnz     short loc_1D01
.text:0000000000001CBE
.text:0000000000001CBE loc_1CBE:                               ; CODE XREF: usage+324↑j
.text:0000000000001CBE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001CC5                 mov     edx, 5          ; category
.text:0000000000001CCA                 xor     edi, edi        ; domainname
.text:0000000000001CCC                 lea     r12, aMkfifo_0  ; "mkfifo"
.text:0000000000001CD3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001CDA                 call    _dcgettext
.text:0000000000001CDF                 lea     rcx, aMkfifo_0  ; "mkfifo"
.text:0000000000001CE6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001CED                 mov     rsi, rax
.text:0000000000001CF0                 mov     edi, 1
.text:0000000000001CF5                 xor     eax, eax
.text:0000000000001CF7                 call    ___printf_chk
.text:0000000000001CFC                 jmp     loc_1C46
.text:0000000000001D01 ; ---------------------------------------------------------------------------
.text:0000000000001D01
.text:0000000000001D01 loc_1D01:                               ; CODE XREF: usage+33C↑j
.text:0000000000001D01                 lea     r12, aMkfifo_0  ; "mkfifo"
.text:0000000000001D08
.text:0000000000001D08 loc_1D08:                               ; CODE XREF: usage+27B↑j
.text:0000000000001D08                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D0F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001D16                 xor     edi, edi        ; domainname
.text:0000000000001D18                 mov     edx, 5          ; category
.text:0000000000001D1D                 call    _dcgettext
.text:0000000000001D22                 mov     rsi, r13        ; stream
.text:0000000000001D25                 mov     rdi, rax        ; s
.text:0000000000001D28                 call    _fputs_unlocked
.text:0000000000001D2D                 jmp     loc_1C01
.text:0000000000001D2D ; } // starts at 1980
.text:0000000000001D2D usage           endp
.text:0000000000001D2D
.text:0000000000001D2D ; ---------------------------------------------------------------------------
.text:0000000000001D32                 align 20h
.text:0000000000001D40
.text:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D40
.text:0000000000001D40
.text:0000000000001D40                 public close_stdout_set_file_name
.text:0000000000001D40 close_stdout_set_file_name proc near
.text:0000000000001D40 ; __unwind {
.text:0000000000001D40                 mov     cs:file_name, rdi
.text:0000000000001D47                 retn
.text:0000000000001D47 ; } // starts at 1D40
.text:0000000000001D47 close_stdout_set_file_name endp
.text:0000000000001D47
.text:0000000000001D47 ; ---------------------------------------------------------------------------
.text:0000000000001D48                 align 10h
.text:0000000000001D50
.text:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D50
.text:0000000000001D50
.text:0000000000001D50                 public close_stdout_set_ignore_EPIPE
.text:0000000000001D50 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001D50 ; __unwind {
.text:0000000000001D50                 mov     cs:ignore_EPIPE, dil
.text:0000000000001D57                 retn
.text:0000000000001D57 ; } // starts at 1D50
.text:0000000000001D57 close_stdout_set_ignore_EPIPE endp
.text:0000000000001D57
.text:0000000000001D57 ; ---------------------------------------------------------------------------
.text:0000000000001D58                 align 20h
.text:0000000000001D60
.text:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D60
.text:0000000000001D60 ; Attributes: info_from_lumina
.text:0000000000001D60
.text:0000000000001D60 ; void __cdecl close_stdout()
.text:0000000000001D60                 public close_stdout
.text:0000000000001D60 close_stdout    proc near               ; DATA XREF: main+55↑o
.text:0000000000001D60 ; __unwind {
.text:0000000000001D60                 push    rbp
.text:0000000000001D61                 push    rbx
.text:0000000000001D62                 sub     rsp, 8
.text:0000000000001D66                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D6D                 call    close_stream
.text:0000000000001D72                 test    eax, eax
.text:0000000000001D74                 jz      short loc_1D8C
.text:0000000000001D76                 call    ___errno_location
.text:0000000000001D7B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001D82                 mov     rbx, rax
.text:0000000000001D85                 jz      short loc_1DA3
.text:0000000000001D87                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001D8A                 jnz     short loc_1DA3
.text:0000000000001D8C
.text:0000000000001D8C loc_1D8C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001D8C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001D93                 call    close_stream
.text:0000000000001D98                 test    eax, eax
.text:0000000000001D9A                 jnz     short loc_1DE2
.text:0000000000001D9C                 add     rsp, 8
.text:0000000000001DA0                 pop     rbx
.text:0000000000001DA1                 pop     rbp
.text:0000000000001DA2                 retn
.text:0000000000001DA3 ; ---------------------------------------------------------------------------
.text:0000000000001DA3
.text:0000000000001DA3 loc_1DA3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001DA3                                         ; close_stdout+2A↑j
.text:0000000000001DA3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001DAA                 xor     edi, edi        ; domainname
.text:0000000000001DAC                 mov     edx, 5          ; category
.text:0000000000001DB1                 call    _dcgettext
.text:0000000000001DB6                 mov     rdi, cs:file_name
.text:0000000000001DBD                 mov     rbp, rax
.text:0000000000001DC0                 test    rdi, rdi
.text:0000000000001DC3                 jz      short loc_1DED
.text:0000000000001DC5                 call    quotearg_colon
.text:0000000000001DCA                 mov     esi, [rbx]      ; errnum
.text:0000000000001DCC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001DD3                 mov     rcx, rax
.text:0000000000001DD6                 mov     r8, rbp
.text:0000000000001DD9                 xor     edi, edi        ; status
.text:0000000000001DDB                 xor     eax, eax
.text:0000000000001DDD                 call    _error
.text:0000000000001DE2
.text:0000000000001DE2 loc_1DE2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001DE2                                         ; close_stdout+A2↓j
.text:0000000000001DE2                 mov     edi, cs:exit_failure ; status
.text:0000000000001DE8                 call    __exit
.text:0000000000001DED ; ---------------------------------------------------------------------------
.text:0000000000001DED
.text:0000000000001DED loc_1DED:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001DED                 mov     esi, [rbx]      ; errnum
.text:0000000000001DEF                 lea     rdx, format+4   ; format
.text:0000000000001DF6                 mov     rcx, rax
.text:0000000000001DF9                 xor     edi, edi        ; status
.text:0000000000001DFB                 xor     eax, eax
.text:0000000000001DFD                 call    _error
.text:0000000000001E02                 jmp     short loc_1DE2
.text:0000000000001E02 ; } // starts at 1D60
.text:0000000000001E02 close_stdout    endp
.text:0000000000001E02
.text:0000000000001E02 ; ---------------------------------------------------------------------------
.text:0000000000001E04                 align 10h
.text:0000000000001E10
.text:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E10
.text:0000000000001E10 ; Attributes: info_from_lumina
.text:0000000000001E10
.text:0000000000001E10                 public mode_compile
.text:0000000000001E10 mode_compile    proc near               ; CODE XREF: main+13C↑p
.text:0000000000001E10 ; __unwind {
.text:0000000000001E10                 push    rbp
.text:0000000000001E11                 push    rbx
.text:0000000000001E12                 mov     rbx, rdi
.text:0000000000001E15                 sub     rsp, 8
.text:0000000000001E19                 movsx   eax, byte ptr [rdi]
.text:0000000000001E1C                 lea     edx, [rax-30h]
.text:0000000000001E1F                 cmp     dl, 7
.text:0000000000001E22                 jbe     loc_1ED8
.text:0000000000001E28                 test    al, al
.text:0000000000001E2A                 mov     rcx, rdi
.text:0000000000001E2D                 mov     edi, 1
.text:0000000000001E32                 jz      short loc_1E5B
.text:0000000000001E34                 nop     dword ptr [rax+00h]
.text:0000000000001E38
.text:0000000000001E38 loc_1E38:                               ; CODE XREF: mode_compile+49↓j
.text:0000000000001E38                 mov     edx, eax
.text:0000000000001E3A                 and     edx, 0FFFFFFEFh
.text:0000000000001E3D                 cmp     dl, 2Dh ; '-'
.text:0000000000001E40                 setz    dl
.text:0000000000001E43                 cmp     al, 2Bh ; '+'
.text:0000000000001E45                 setz    al
.text:0000000000001E48                 add     rcx, 1
.text:0000000000001E4C                 or      eax, edx
.text:0000000000001E4E                 movzx   eax, al
.text:0000000000001E51                 add     rdi, rax
.text:0000000000001E54                 movzx   eax, byte ptr [rcx]
.text:0000000000001E57                 test    al, al
.text:0000000000001E59                 jnz     short loc_1E38
.text:0000000000001E5B
.text:0000000000001E5B loc_1E5B:                               ; CODE XREF: mode_compile+22↑j
.text:0000000000001E5B                 mov     edx, 10h
.text:0000000000001E60                 xor     ecx, ecx
.text:0000000000001E62                 mov     rax, rdx
.text:0000000000001E65                 mul     rdi
.text:0000000000001E68                 jo      loc_217F
.text:0000000000001E6E
.text:0000000000001E6E loc_1E6E:                               ; CODE XREF: mode_compile+374↓j
.text:0000000000001E6E                 test    rax, rax
.text:0000000000001E71                 js      loc_2189
.text:0000000000001E77                 test    rcx, rcx
.text:0000000000001E7A                 jnz     loc_2189
.text:0000000000001E80                 shl     rdi, 4
.text:0000000000001E84                 lea     rbp, jpt_2044
.text:0000000000001E8B                 call    xmalloc
.text:0000000000001E90                 xor     esi, esi
.text:0000000000001E92
.text:0000000000001E92 loc_1E92:                               ; CODE XREF: mode_compile+38D↓j
.text:0000000000001E92                 xor     r11d, r11d
.text:0000000000001E95
.text:0000000000001E95 loc_1E95:                               ; CODE XREF: mode_compile+2EA↓j
.text:0000000000001E95                 movzx   r9d, byte ptr [rbx]
.text:0000000000001E99                 cmp     r9b, 61h ; 'a'
.text:0000000000001E9D                 jz      loc_20F0
.text:0000000000001EA3                 jle     short loc_1F10
.text:0000000000001EA5                 cmp     r9b, 6Fh ; 'o'
.text:0000000000001EA9                 jz      loc_2120
.text:0000000000001EAF                 cmp     r9b, 75h ; 'u'
.text:0000000000001EB3                 jz      loc_2110
.text:0000000000001EB9                 cmp     r9b, 67h ; 'g'
.text:0000000000001EBD                 jz      loc_2100
.text:0000000000001EC3
.text:0000000000001EC3 loc_1EC3:                               ; CODE XREF: mode_compile+110↓j
.text:0000000000001EC3                                         ; mode_compile+1B8↓j ...
.text:0000000000001EC3                 mov     rdi, rax        ; ptr
.text:0000000000001EC6                 call    _free
.text:0000000000001ECB                 xor     eax, eax
.text:0000000000001ECD
.text:0000000000001ECD loc_1ECD:                               ; CODE XREF: mode_compile+3A4↓j
.text:0000000000001ECD                 add     rsp, 8
.text:0000000000001ED1                 pop     rbx
.text:0000000000001ED2                 pop     rbp
.text:0000000000001ED3                 retn
.text:0000000000001ED3 ; ---------------------------------------------------------------------------
.text:0000000000001ED4                 align 8
.text:0000000000001ED8
.text:0000000000001ED8 loc_1ED8:                               ; CODE XREF: mode_compile+12↑j
.text:0000000000001ED8                 mov     rdx, rdi
.text:0000000000001EDB                 xor     ebp, ebp
.text:0000000000001EDD                 jmp     short loc_1EEF
.text:0000000000001EDD ; ---------------------------------------------------------------------------
.text:0000000000001EDF                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 loc_1EE0:                               ; CODE XREF: mode_compile+ED↓j
.text:0000000000001EE0                 movsx   eax, byte ptr [rdx]
.text:0000000000001EE3                 lea     ecx, [rax-30h]
.text:0000000000001EE6                 cmp     cl, 7
.text:0000000000001EE9                 ja      loc_2130
.text:0000000000001EEF
.text:0000000000001EEF loc_1EEF:                               ; CODE XREF: mode_compile+CD↑j
.text:0000000000001EEF                 lea     ebp, [rax+rbp*8-30h]
.text:0000000000001EF3                 add     rdx, 1
.text:0000000000001EF7                 cmp     ebp, 0FFFh
.text:0000000000001EFD                 jbe     short loc_1EE0
.text:0000000000001EFF
.text:0000000000001EFF loc_1EFF:                               ; CODE XREF: mode_compile+322↓j
.text:0000000000001EFF                 add     rsp, 8
.text:0000000000001F03                 xor     eax, eax
.text:0000000000001F05                 pop     rbx
.text:0000000000001F06                 pop     rbp
.text:0000000000001F07                 retn
.text:0000000000001F07 ; ---------------------------------------------------------------------------
.text:0000000000001F08                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: mode_compile+93↑j
.text:0000000000001F10                 cmp     r9b, 2Dh ; '-'
.text:0000000000001F14                 jz      short loc_1F22
.text:0000000000001F16                 cmp     r9b, 3Dh ; '='
.text:0000000000001F1A                 jz      short loc_1F22
.text:0000000000001F1C                 cmp     r9b, 2Bh ; '+'
.text:0000000000001F20                 jnz     short loc_1EC3
.text:0000000000001F22
.text:0000000000001F22 loc_1F22:                               ; CODE XREF: mode_compile+104↑j
.text:0000000000001F22                                         ; mode_compile+10A↑j
.text:0000000000001F22                 lea     rdi, [rsi+1]
.text:0000000000001F26                 shl     rsi, 4
.text:0000000000001F2A                 add     rsi, rax
.text:0000000000001F2D                 jmp     short loc_1F94
.text:0000000000001F2D ; ---------------------------------------------------------------------------
.text:0000000000001F2F                 align 10h
.text:0000000000001F30
.text:0000000000001F30 loc_1F30:                               ; CODE XREF: mode_compile+195↓j
.text:0000000000001F30                 cmp     dl, 6Fh ; 'o'
.text:0000000000001F33                 lea     r8, [rbx+2]
.text:0000000000001F37                 jz      loc_20D0
.text:0000000000001F3D                 cmp     dl, 75h ; 'u'
.text:0000000000001F40                 mov     r10d, 1C0h
.text:0000000000001F46                 jnz     loc_2020
.text:0000000000001F4C
.text:0000000000001F4C loc_1F4C:                               ; CODE XREF: mode_compile+2C6↓j
.text:0000000000001F4C                                         ; mode_compile+2DA↓j
.text:0000000000001F4C                 mov     [rsi], r9b
.text:0000000000001F4F                 mov     byte ptr [rsi+1], 3
.text:0000000000001F53                 movzx   r9d, byte ptr [rbx+2]
.text:0000000000001F58                 mov     [rsi+4], r11d
.text:0000000000001F5C                 mov     rbx, r8
.text:0000000000001F5F                 mov     [rsi+8], r10d
.text:0000000000001F63
.text:0000000000001F63 loc_1F63:                               ; CODE XREF: mode_compile+26D↓j
.text:0000000000001F63                 mov     edx, r10d
.text:0000000000001F66                 and     edx, r11d
.text:0000000000001F69                 test    r11d, r11d
.text:0000000000001F6C                 cmovnz  r10d, edx
.text:0000000000001F70
.text:0000000000001F70 loc_1F70:                               ; CODE XREF: mode_compile+205↓j
.text:0000000000001F70                 mov     edx, r9d
.text:0000000000001F73                 mov     [rsi+0Ch], r10d
.text:0000000000001F77                 add     rsi, 10h
.text:0000000000001F7B                 and     edx, 0FFFFFFEFh
.text:0000000000001F7E                 lea     rcx, [rdi+1]
.text:0000000000001F82                 cmp     dl, 2Dh ; '-'
.text:0000000000001F85                 jz      short loc_1F91
.text:0000000000001F87                 cmp     r9b, 2Bh ; '+'
.text:0000000000001F8B                 jnz     loc_2190
.text:0000000000001F91
.text:0000000000001F91 loc_1F91:                               ; CODE XREF: mode_compile+175↑j
.text:0000000000001F91                 mov     rdi, rcx
.text:0000000000001F94
.text:0000000000001F94 loc_1F94:                               ; CODE XREF: mode_compile+11D↑j
.text:0000000000001F94                 movsx   edx, byte ptr [rbx+1]
.text:0000000000001F98                 lea     rcx, [rbx+1]
.text:0000000000001F9C                 cmp     dl, 67h ; 'g'
.text:0000000000001F9F                 jz      loc_20E0
.text:0000000000001FA5                 jg      short loc_1F30
.text:0000000000001FA7                 lea     r8d, [rdx-30h]
.text:0000000000001FAB                 cmp     r8b, 7
.text:0000000000001FAF                 ja      short loc_2020
.text:0000000000001FB1                 xor     r8d, r8d
.text:0000000000001FB4                 nop     dword ptr [rax+00h]
.text:0000000000001FB8
.text:0000000000001FB8 loc_1FB8:                               ; CODE XREF: mode_compile+1C9↓j
.text:0000000000001FB8                 lea     r8d, [rdx+r8*8-30h]
.text:0000000000001FBD                 add     rcx, 1
.text:0000000000001FC1                 cmp     r8d, 0FFFh
.text:0000000000001FC8                 ja      loc_1EC3
.text:0000000000001FCE                 movsx   edx, byte ptr [rcx]
.text:0000000000001FD1                 lea     r10d, [rdx-30h]
.text:0000000000001FD5                 cmp     r10b, 7
.text:0000000000001FD9                 jbe     short loc_1FB8
.text:0000000000001FDB                 test    r11d, r11d
.text:0000000000001FDE                 jnz     loc_1EC3
.text:0000000000001FE4                 test    dl, dl
.text:0000000000001FE6                 jz      short loc_1FF1
.text:0000000000001FE8                 cmp     dl, 2Ch ; ','
.text:0000000000001FEB                 jnz     loc_1EC3
.text:0000000000001FF1
.text:0000000000001FF1 loc_1FF1:                               ; CODE XREF: mode_compile+1D6↑j
.text:0000000000001FF1                 mov     [rsi], r9b
.text:0000000000001FF4                 mov     byte ptr [rsi+1], 1
.text:0000000000001FF8                 mov     r9d, edx
.text:0000000000001FFB                 mov     dword ptr [rsi+4], 0FFFh
.text:0000000000002002                 mov     [rsi+8], r8d
.text:0000000000002006                 mov     rbx, rcx
.text:0000000000002009                 mov     r11d, 0FFFh
.text:000000000000200F                 mov     r10d, 0FFFh
.text:0000000000002015                 jmp     loc_1F70
.text:0000000000002015 ; ---------------------------------------------------------------------------
.text:000000000000201A                 align 20h
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: mode_compile+136↑j
.text:0000000000002020                                         ; mode_compile+19F↑j
.text:0000000000002020                 lea     r8d, [rdx-58h]  ; switch 33 cases
.text:0000000000002024                 xor     r10d, r10d
.text:0000000000002027                 mov     ebx, 1
.text:000000000000202C                 cmp     r8b, 20h
.text:0000000000002030                 ja      short def_2044  ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:0000000000002032                 nop     word ptr [rax+rax+00h]
.text:0000000000002038
.text:0000000000002038 loc_2038:                               ; CODE XREF: mode_compile+257↓j
.text:0000000000002038                 movzx   r8d, r8b
.text:000000000000203C                 movsxd  r8, ss:(jpt_2044 - 51F4h)[rbp+r8*4]
.text:0000000000002041                 add     r8, rbp
.text:0000000000002044                 jmp     r8              ; switch jump
.text:0000000000002044 ; ---------------------------------------------------------------------------
.text:0000000000002047                 align 10h
.text:0000000000002050
.text:0000000000002050 loc_2050:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002050                                         ; DATA XREF: .rodata:jpt_2044↓o
.text:0000000000002050                 mov     ebx, 2          ; jumptable 00000000000CDF74 case 88
.text:0000000000002055                 nop     dword ptr [rax]
.text:0000000000002058
.text:0000000000002058 loc_2058:                               ; CODE XREF: mode_compile+27C↓j
.text:0000000000002058                                         ; mode_compile+284↓j ...
.text:0000000000002058                 add     rcx, 1
.text:000000000000205C                 movzx   edx, byte ptr [rcx]
.text:000000000000205F                 lea     r8d, [rdx-58h]
.text:0000000000002063                 cmp     r8b, 20h ; ' '
.text:0000000000002067                 jbe     short loc_2038
.text:0000000000002069
.text:0000000000002069 def_2044:                               ; CODE XREF: mode_compile+220↑j
.text:0000000000002069                                         ; mode_compile+234↑j
.text:0000000000002069                                         ; DATA XREF: ...
.text:0000000000002069                 mov     [rsi], r9b      ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:000000000000206C                 mov     [rsi+1], bl
.text:000000000000206F                 mov     r9d, edx
.text:0000000000002072                 mov     [rsi+4], r11d
.text:0000000000002076                 mov     [rsi+8], r10d
.text:000000000000207A                 mov     rbx, rcx
.text:000000000000207D                 jmp     loc_1F63
.text:000000000000207D ; ---------------------------------------------------------------------------
.text:0000000000002082                 align 8
.text:0000000000002088
.text:0000000000002088 loc_2088:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002088                                         ; DATA XREF: .rodata:jpt_2044↓o
.text:0000000000002088                 or      r10d, 49h       ; jumptable 00000000000CDF74 case 120
.text:000000000000208C                 jmp     short loc_2058
.text:000000000000208C ; ---------------------------------------------------------------------------
.text:000000000000208E                 align 10h
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000002090                                         ; DATA XREF: .rodata:jpt_2044↓o
.text:0000000000002090                 or      r10b, 92h       ; jumptable 00000000000CDF74 case 119
.text:0000000000002094                 jmp     short loc_2058
.text:0000000000002094 ; ---------------------------------------------------------------------------
.text:0000000000002096                 align 20h
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000020A0                                         ; DATA XREF: .rodata:jpt_2044↓o
.text:00000000000020A0                 or      r10d, 200h      ; jumptable 00000000000CDF74 case 116
.text:00000000000020A7                 jmp     short loc_2058
.text:00000000000020A7 ; ---------------------------------------------------------------------------
.text:00000000000020A9                 align 10h
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000020B0                                         ; DATA XREF: .rodata:jpt_2044↓o
.text:00000000000020B0                 or      r10d, 0C00h     ; jumptable 00000000000CDF74 case 115
.text:00000000000020B7                 jmp     short loc_2058
.text:00000000000020B7 ; ---------------------------------------------------------------------------
.text:00000000000020B9                 align 20h
.text:00000000000020C0
.text:00000000000020C0 loc_20C0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000020C0                                         ; DATA XREF: .rodata:jpt_2044↓o
.text:00000000000020C0                 or      r10d, 124h      ; jumptable 00000000000CDF74 case 114
.text:00000000000020C7                 jmp     short loc_2058
.text:00000000000020C7 ; ---------------------------------------------------------------------------
.text:00000000000020C9                 align 10h
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: mode_compile+127↑j
.text:00000000000020D0                 mov     r10d, 7
.text:00000000000020D6                 jmp     loc_1F4C
.text:00000000000020D6 ; ---------------------------------------------------------------------------
.text:00000000000020DB                 align 20h
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: mode_compile+18F↑j
.text:00000000000020E0                 lea     r8, [rbx+2]
.text:00000000000020E4                 mov     r10d, 38h ; '8'
.text:00000000000020EA                 jmp     loc_1F4C
.text:00000000000020EA ; ---------------------------------------------------------------------------
.text:00000000000020EF                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: mode_compile+8D↑j
.text:00000000000020F0                 mov     r11d, 0FFFh
.text:00000000000020F6
.text:00000000000020F6 loc_20F6:                               ; CODE XREF: mode_compile+2F7↓j
.text:00000000000020F6                                         ; mode_compile+307↓j ...
.text:00000000000020F6                 add     rbx, 1
.text:00000000000020FA                 jmp     loc_1E95
.text:00000000000020FA ; ---------------------------------------------------------------------------
.text:00000000000020FF                 align 20h
.text:0000000000002100
.text:0000000000002100 loc_2100:                               ; CODE XREF: mode_compile+AD↑j
.text:0000000000002100                 or      r11d, 438h
.text:0000000000002107                 jmp     short loc_20F6
.text:0000000000002107 ; ---------------------------------------------------------------------------
.text:0000000000002109                 align 10h
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: mode_compile+A3↑j
.text:0000000000002110                 or      r11d, 9C0h
.text:0000000000002117                 jmp     short loc_20F6
.text:0000000000002117 ; ---------------------------------------------------------------------------
.text:0000000000002119                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: mode_compile+99↑j
.text:0000000000002120                 or      r11d, 207h
.text:0000000000002127                 jmp     short loc_20F6
.text:0000000000002127 ; ---------------------------------------------------------------------------
.text:0000000000002129                 align 10h
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: mode_compile+D9↑j
.text:0000000000002130                 test    al, al
.text:0000000000002132                 jnz     loc_1EFF
.text:0000000000002138                 sub     rdx, rbx
.text:000000000000213B                 mov     ebx, ebp
.text:000000000000213D                 mov     eax, 0FFFh
.text:0000000000002142                 and     ebx, 0C00h
.text:0000000000002148                 mov     edi, 20h ; ' '
.text:000000000000214D                 or      ebx, 3FFh
.text:0000000000002153                 cmp     rdx, 5
.text:0000000000002157                 cmovge  ebx, eax
.text:000000000000215A                 call    xmalloc
.text:000000000000215F                 mov     edx, 13Dh
.text:0000000000002164                 mov     dword ptr [rax+4], 0FFFh
.text:000000000000216B                 mov     [rax+8], ebp
.text:000000000000216E                 mov     [rax], dx
.text:0000000000002171                 mov     [rax+0Ch], ebx
.text:0000000000002174                 mov     byte ptr [rax+11h], 0
.text:0000000000002178                 add     rsp, 8
.text:000000000000217C                 pop     rbx
.text:000000000000217D                 pop     rbp
.text:000000000000217E                 retn
.text:000000000000217F ; ---------------------------------------------------------------------------
.text:000000000000217F
.text:000000000000217F loc_217F:                               ; CODE XREF: mode_compile+58↑j
.text:000000000000217F                 mov     ecx, 1
.text:0000000000002184                 jmp     loc_1E6E
.text:0000000000002189 ; ---------------------------------------------------------------------------
.text:0000000000002189
.text:0000000000002189 loc_2189:                               ; CODE XREF: mode_compile+61↑j
.text:0000000000002189                                         ; mode_compile+6A↑j
.text:0000000000002189                 call    xalloc_die
.text:0000000000002189 ; ---------------------------------------------------------------------------
.text:000000000000218E                 align 10h
.text:0000000000002190
.text:0000000000002190 loc_2190:                               ; CODE XREF: mode_compile+17B↑j
.text:0000000000002190                 cmp     r9b, 2Ch ; ','
.text:0000000000002194                 jnz     short loc_21A2
.text:0000000000002196                 add     rbx, 1
.text:000000000000219A                 mov     rsi, rdi
.text:000000000000219D                 jmp     loc_1E92
.text:00000000000021A2 ; ---------------------------------------------------------------------------
.text:00000000000021A2
.text:00000000000021A2 loc_21A2:                               ; CODE XREF: mode_compile+384↑j
.text:00000000000021A2                 test    r9b, r9b
.text:00000000000021A5                 jnz     loc_1EC3
.text:00000000000021AB                 shl     rdi, 4
.text:00000000000021AF                 mov     byte ptr [rax+rdi+1], 0
.text:00000000000021B4                 jmp     loc_1ECD
.text:00000000000021B4 ; } // starts at 1E10
.text:00000000000021B4 mode_compile    endp
.text:00000000000021B4
.text:00000000000021B4 ; ---------------------------------------------------------------------------
.text:00000000000021B9                 align 20h
.text:00000000000021C0
.text:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021C0
.text:00000000000021C0
.text:00000000000021C0 ; __int64 __fastcall mode_create_from_ref(char *filename)
.text:00000000000021C0                 public mode_create_from_ref
.text:00000000000021C0 mode_create_from_ref proc near
.text:00000000000021C0
.text:00000000000021C0 var_90          = dword ptr -90h
.text:00000000000021C0 var_10          = qword ptr -10h
.text:00000000000021C0
.text:00000000000021C0 ; __unwind {
.text:00000000000021C0                 push    rbx
.text:00000000000021C1                 mov     rsi, rdi        ; filename
.text:00000000000021C4                 mov     edi, 1          ; ver
.text:00000000000021C9                 sub     rsp, 0A0h
.text:00000000000021D0                 mov     rdx, rsp        ; stat_buf
.text:00000000000021D3                 mov     rax, fs:28h
.text:00000000000021DC                 mov     [rsp+0A8h+var_10], rax
.text:00000000000021E4                 xor     eax, eax
.text:00000000000021E6                 call    ___xstat
.text:00000000000021EB                 test    eax, eax
.text:00000000000021ED                 jnz     short loc_2240
.text:00000000000021EF                 mov     ebx, [rsp+0A8h+var_90]
.text:00000000000021F3                 mov     edi, 20h ; ' '
.text:00000000000021F8                 call    xmalloc
.text:00000000000021FD                 mov     edx, 13Dh
.text:0000000000002202                 mov     dword ptr [rax+4], 0FFFh
.text:0000000000002209                 mov     dword ptr [rax+0Ch], 0FFFh
.text:0000000000002210                 mov     [rax], dx
.text:0000000000002213                 mov     [rax+8], ebx
.text:0000000000002216                 mov     byte ptr [rax+11h], 0
.text:000000000000221A
.text:000000000000221A loc_221A:                               ; CODE XREF: mode_create_from_ref+82↓j
.text:000000000000221A                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000002222                 xor     rcx, fs:28h
.text:000000000000222B                 jnz     short loc_2244
.text:000000000000222D                 add     rsp, 0A0h
.text:0000000000002234                 pop     rbx
.text:0000000000002235                 retn
.text:0000000000002235 ; ---------------------------------------------------------------------------
.text:0000000000002236                 align 20h
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: mode_create_from_ref+2D↑j
.text:0000000000002240                 xor     eax, eax
.text:0000000000002242                 jmp     short loc_221A
.text:0000000000002244 ; ---------------------------------------------------------------------------
.text:0000000000002244
.text:0000000000002244 loc_2244:                               ; CODE XREF: mode_create_from_ref+6B↑j
.text:0000000000002244                 call    ___stack_chk_fail
.text:0000000000002244 ; } // starts at 21C0
.text:0000000000002244 mode_create_from_ref endp
.text:0000000000002244
.text:0000000000002244 ; ---------------------------------------------------------------------------
.text:0000000000002249                 align 10h
.text:0000000000002250
.text:0000000000002250 ; =============== S U B R O U T I N E =======================================
.text:0000000000002250
.text:0000000000002250
.text:0000000000002250                 public mode_adjust
.text:0000000000002250 mode_adjust     proc near               ; CODE XREF: main+16E↑p
.text:0000000000002250 ; __unwind {
.text:0000000000002250                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000002255                 mov     eax, edi
.text:0000000000002257                 and     eax, 0FFFh
.text:000000000000225C                 test    r10b, r10b
.text:000000000000225F                 jz      loc_23B0
.text:0000000000002265                 cmp     sil, 1
.text:0000000000002269                 push    r12
.text:000000000000226B                 push    rbp
.text:000000000000226C                 push    rbx
.text:000000000000226D                 sbb     ebx, ebx
.text:000000000000226F                 movzx   ebp, sil
.text:0000000000002273                 not     ebx
.text:0000000000002275                 xor     r11d, r11d
.text:0000000000002278                 and     ebx, 0C00h
.text:000000000000227E                 jmp     short loc_22BA
.text:0000000000002280 ; ---------------------------------------------------------------------------
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: mode_adjust+D4↓j
.text:0000000000002280                 mov     edi, r9d
.text:0000000000002283                 or      edi, edx
.text:0000000000002285                 not     edi
.text:0000000000002287                 and     esi, edi
.text:0000000000002289                 cmp     r12b, 2Dh ; '-'
.text:000000000000228D                 jz      loc_23A0
.text:0000000000002293                 cmp     r12b, 3Dh ; '='
.text:0000000000002297                 jz      loc_234B
.text:000000000000229D
.text:000000000000229D loc_229D:                               ; CODE XREF: mode_adjust+EA↓j
.text:000000000000229D                 cmp     r12b, 2Bh ; '+'
.text:00000000000022A1                 jnz     short loc_22A8
.text:00000000000022A3                 or      r11d, esi
.text:00000000000022A6                 or      eax, esi
.text:00000000000022A8
.text:00000000000022A8 loc_22A8:                               ; CODE XREF: mode_adjust+51↑j
.text:00000000000022A8                                         ; mode_adjust+157↓j
.text:00000000000022A8                 add     rcx, 10h
.text:00000000000022AC                 movzx   r10d, byte ptr [rcx+1]
.text:00000000000022B1                 test    r10b, r10b
.text:00000000000022B4                 jz      loc_236C
.text:00000000000022BA
.text:00000000000022BA loc_22BA:                               ; CODE XREF: mode_adjust+2E↑j
.text:00000000000022BA                                         ; mode_adjust+116↓j
.text:00000000000022BA                 mov     r9d, [rcx+0Ch]
.text:00000000000022BE                 mov     edi, [rcx+4]
.text:00000000000022C1                 mov     esi, [rcx+8]
.text:00000000000022C4                 not     r9d
.text:00000000000022C7                 and     r9d, ebx
.text:00000000000022CA                 cmp     r10b, 2
.text:00000000000022CE                 jz      loc_2380
.text:00000000000022D4                 cmp     r10b, 3
.text:00000000000022D8                 jnz     short loc_2318
.text:00000000000022DA                 and     esi, eax
.text:00000000000022DC                 mov     r10d, esi
.text:00000000000022DF                 and     r10d, 124h
.text:00000000000022E6                 cmp     r10d, 1
.text:00000000000022EA                 sbb     r10d, r10d
.text:00000000000022ED                 not     r10d
.text:00000000000022F0                 and     r10d, 124h
.text:00000000000022F7                 mov     r12d, r10d
.text:00000000000022FA                 or      r12b, 92h
.text:00000000000022FE                 test    sil, 92h
.text:0000000000002302                 cmovnz  r10d, r12d
.text:0000000000002306                 mov     r12d, r10d
.text:0000000000002309                 or      r12d, 49h
.text:000000000000230D                 test    sil, 49h
.text:0000000000002311                 cmovnz  r10d, r12d
.text:0000000000002315                 or      esi, r10d
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: mode_adjust+88↑j
.text:0000000000002318                                         ; mode_adjust+145↓j
.text:0000000000002318                 mov     r10d, r9d
.text:000000000000231B                 test    edi, edi
.text:000000000000231D                 movzx   r12d, byte ptr [rcx]
.text:0000000000002321                 not     r10d
.text:0000000000002324                 jz      loc_2280
.text:000000000000232A                 and     r10d, edi
.text:000000000000232D                 and     esi, r10d
.text:0000000000002330                 cmp     r12b, 2Dh ; '-'
.text:0000000000002334                 jz      short loc_23A0
.text:0000000000002336                 cmp     r12b, 3Dh ; '='
.text:000000000000233A                 jnz     loc_229D
.text:0000000000002340                 not     edi
.text:0000000000002342                 or      r9d, edi
.text:0000000000002345                 mov     r10d, r9d
.text:0000000000002348                 not     r10d
.text:000000000000234B
.text:000000000000234B loc_234B:                               ; CODE XREF: mode_adjust+47↑j
.text:000000000000234B                 and     r10d, 0FFFh
.text:0000000000002352                 add     rcx, 10h
.text:0000000000002356                 and     eax, r9d
.text:0000000000002359                 or      r11d, r10d
.text:000000000000235C                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000002361                 or      eax, esi
.text:0000000000002363                 test    r10b, r10b
.text:0000000000002366                 jnz     loc_22BA
.text:000000000000236C
.text:000000000000236C loc_236C:                               ; CODE XREF: mode_adjust+64↑j
.text:000000000000236C                 test    r8, r8
.text:000000000000236F                 jz      short loc_2374
.text:0000000000002371                 mov     [r8], r11d
.text:0000000000002374
.text:0000000000002374 loc_2374:                               ; CODE XREF: mode_adjust+11F↑j
.text:0000000000002374                 pop     rbx
.text:0000000000002375                 pop     rbp
.text:0000000000002376                 pop     r12
.text:0000000000002378                 retn
.text:0000000000002378 ; ---------------------------------------------------------------------------
.text:0000000000002379                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: mode_adjust+7E↑j
.text:0000000000002380                 mov     r12d, eax
.text:0000000000002383                 mov     r10d, esi
.text:0000000000002386                 and     r12d, 49h
.text:000000000000238A                 or      r10d, 49h
.text:000000000000238E                 or      r12d, ebp
.text:0000000000002391                 cmovnz  esi, r10d
.text:0000000000002395                 jmp     short loc_2318
.text:0000000000002395 ; ---------------------------------------------------------------------------
.text:0000000000002397                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: mode_adjust+3D↑j
.text:00000000000023A0                                         ; mode_adjust+E4↑j
.text:00000000000023A0                 or      r11d, esi
.text:00000000000023A3                 not     esi
.text:00000000000023A5                 and     eax, esi
.text:00000000000023A7                 jmp     loc_22A8
.text:00000000000023A7 ; ---------------------------------------------------------------------------
.text:00000000000023AC                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: mode_adjust+F↑j
.text:00000000000023B0                 xor     r11d, r11d
.text:00000000000023B3                 test    r8, r8
.text:00000000000023B6                 jz      short locret_23BB
.text:00000000000023B8                 mov     [r8], r11d
.text:00000000000023BB
.text:00000000000023BB locret_23BB:                            ; CODE XREF: mode_adjust+166↑j
.text:00000000000023BB                 rep retn
.text:00000000000023BB ; } // starts at 2250
.text:00000000000023BB mode_adjust     endp
.text:00000000000023BB
.text:00000000000023BB ; ---------------------------------------------------------------------------
.text:00000000000023BD                 align 20h
.text:00000000000023C0
.text:00000000000023C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023C0
.text:00000000000023C0
.text:00000000000023C0                 public set_program_name
.text:00000000000023C0 set_program_name proc near              ; CODE XREF: main+20↑p
.text:00000000000023C0 ; __unwind {
.text:00000000000023C0                 test    rdi, rdi
.text:00000000000023C3                 push    rbx
.text:00000000000023C4                 jz      short loc_243D
.text:00000000000023C6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000023CB                 mov     rbx, rdi
.text:00000000000023CE                 call    _strrchr
.text:00000000000023D3                 test    rax, rax
.text:00000000000023D6                 jz      short loc_242D
.text:00000000000023D8                 lea     r8, [rax+1]
.text:00000000000023DC                 mov     rdx, r8
.text:00000000000023DF                 sub     rdx, rbx
.text:00000000000023E2                 cmp     rdx, 6
.text:00000000000023E6                 jle     short loc_242D
.text:00000000000023E8                 lea     rsi, [rax-6]
.text:00000000000023EC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000023F3                 mov     ecx, 7
.text:00000000000023F8                 repe cmpsb
.text:00000000000023FA                 setnbe  dl
.text:00000000000023FD                 sbb     dl, 0
.text:0000000000002400                 test    dl, dl
.text:0000000000002402                 jnz     short loc_242D
.text:0000000000002404                 lea     rdi, aLt        ; "lt-"
.text:000000000000240B                 mov     ecx, 3
.text:0000000000002410                 mov     rsi, r8
.text:0000000000002413                 mov     rbx, r8
.text:0000000000002416                 repe cmpsb
.text:0000000000002418                 setnbe  dl
.text:000000000000241B                 sbb     dl, 0
.text:000000000000241E                 test    dl, dl
.text:0000000000002420                 jnz     short loc_242D
.text:0000000000002422                 lea     rbx, [rax+4]
.text:0000000000002426                 mov     cs:__bss_start, rbx
.text:000000000000242D
.text:000000000000242D loc_242D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000242D                                         ; set_program_name+26↑j ...
.text:000000000000242D                 mov     cs:program_name, rbx
.text:0000000000002434                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000243B                 pop     rbx
.text:000000000000243C                 retn
.text:000000000000243D ; ---------------------------------------------------------------------------
.text:000000000000243D
.text:000000000000243D loc_243D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000243D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002444                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000244B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002450                 mov     esi, 1          ; size
.text:0000000000002455                 call    _fwrite
.text:000000000000245A                 call    _abort
.text:000000000000245A ; } // starts at 23C0
.text:000000000000245A set_program_name endp
.text:000000000000245A
.text:000000000000245A ; ---------------------------------------------------------------------------
.text:000000000000245F                 align 20h
.text:0000000000002460
.text:0000000000002460 ; =============== S U B R O U T I N E =======================================
.text:0000000000002460
.text:0000000000002460 ; Attributes: info_from_lumina
.text:0000000000002460
.text:0000000000002460 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002460 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002460                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002460 ; __unwind {
.text:0000000000002460                 push    rbp
.text:0000000000002461                 push    rbx
.text:0000000000002462                 mov     rbp, rdi
.text:0000000000002465                 mov     ebx, esi
.text:0000000000002467                 sub     rsp, 8
.text:000000000000246B                 call    locale_charset
.text:0000000000002470                 movzx   edx, byte ptr [rax]
.text:0000000000002473                 and     edx, 0FFFFFFDFh
.text:0000000000002476                 cmp     dl, 55h ; 'U'
.text:0000000000002479                 jz      short loc_24F0
.text:000000000000247B                 cmp     dl, 47h ; 'G'
.text:000000000000247E                 jz      short loc_24A0
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002480                                         ; gettext_quote+50↓j ...
.text:0000000000002480                 lea     rax, unk_52CB
.text:0000000000002487                 lea     rdx, asc_52CD   ; "'"
.text:000000000000248E                 cmp     ebx, 9
.text:0000000000002491                 cmovnz  rax, rdx
.text:0000000000002495                 add     rsp, 8
.text:0000000000002499                 pop     rbx
.text:000000000000249A                 pop     rbp
.text:000000000000249B                 retn
.text:000000000000249B ; ---------------------------------------------------------------------------
.text:000000000000249C                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000024A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000024A4                 and     edx, 0FFFFFFDFh
.text:00000000000024A7                 cmp     dl, 42h ; 'B'
.text:00000000000024AA                 jnz     short loc_2480
.text:00000000000024AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000024B0                 jnz     short loc_2480
.text:00000000000024B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000024B6                 jnz     short loc_2480
.text:00000000000024B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000024BC                 jnz     short loc_2480
.text:00000000000024BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000024C2                 jnz     short loc_2480
.text:00000000000024C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000024C8                 jnz     short loc_2480
.text:00000000000024CA                 cmp     byte ptr [rax+7], 0
.text:00000000000024CE                 jnz     short loc_2480
.text:00000000000024D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000024D4                 lea     rax, unk_52C4
.text:00000000000024DB                 lea     rdx, unk_52C8
.text:00000000000024E2                 cmovnz  rax, rdx
.text:00000000000024E6                 add     rsp, 8
.text:00000000000024EA                 pop     rbx
.text:00000000000024EB                 pop     rbp
.text:00000000000024EC                 retn
.text:00000000000024EC ; ---------------------------------------------------------------------------
.text:00000000000024ED                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000024F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000024F4                 and     edx, 0FFFFFFDFh
.text:00000000000024F7                 cmp     dl, 54h ; 'T'
.text:00000000000024FA                 jnz     short loc_2480
.text:00000000000024FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002500                 and     edx, 0FFFFFFDFh
.text:0000000000002503                 cmp     dl, 46h ; 'F'
.text:0000000000002506                 jnz     loc_2480
.text:000000000000250C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002510                 jnz     loc_2480
.text:0000000000002516                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000251A                 jnz     loc_2480
.text:0000000000002520                 cmp     byte ptr [rax+5], 0
.text:0000000000002524                 jnz     loc_2480
.text:000000000000252A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000252E                 lea     rax, unk_52BC
.text:0000000000002535                 lea     rdx, unk_52C0
.text:000000000000253C                 cmovnz  rax, rdx
.text:0000000000002540                 add     rsp, 8
.text:0000000000002544                 pop     rbx
.text:0000000000002545                 pop     rbp
.text:0000000000002546                 retn
.text:0000000000002546 ; } // starts at 2460
.text:0000000000002546 gettext_quote   endp
.text:0000000000002546
.text:0000000000002546 ; ---------------------------------------------------------------------------
.text:0000000000002547                 align 10h
.text:0000000000002550
.text:0000000000002550 ; =============== S U B R O U T I N E =======================================
.text:0000000000002550
.text:0000000000002550 ; Attributes: info_from_lumina
.text:0000000000002550
.text:0000000000002550 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002550 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002550                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002550
.text:0000000000002550 var_E0          = dword ptr -0E0h
.text:0000000000002550 var_DB          = byte ptr -0DBh
.text:0000000000002550 var_DA          = byte ptr -0DAh
.text:0000000000002550 var_D9          = byte ptr -0D9h
.text:0000000000002550 s               = qword ptr -0D8h
.text:0000000000002550 n               = qword ptr -0D0h
.text:0000000000002550 var_C8          = qword ptr -0C8h
.text:0000000000002550 ps              = qword ptr -0C0h
.text:0000000000002550 var_B8          = qword ptr -0B8h
.text:0000000000002550 var_B0          = qword ptr -0B0h
.text:0000000000002550 var_A8          = qword ptr -0A8h
.text:0000000000002550 s2              = qword ptr -0A0h
.text:0000000000002550 var_98          = qword ptr -98h
.text:0000000000002550 var_90          = qword ptr -90h
.text:0000000000002550 var_88          = qword ptr -88h
.text:0000000000002550 var_80          = qword ptr -80h
.text:0000000000002550 var_78          = qword ptr -78h
.text:0000000000002550 var_70          = dword ptr -70h
.text:0000000000002550 var_6C          = byte ptr -6Ch
.text:0000000000002550 var_6B          = byte ptr -6Bh
.text:0000000000002550 var_6A          = byte ptr -6Ah
.text:0000000000002550 var_69          = byte ptr -69h
.text:0000000000002550 var_68          = qword ptr -68h
.text:0000000000002550 var_60          = qword ptr -60h
.text:0000000000002550 wc              = dword ptr -4Ch
.text:0000000000002550 var_48          = qword ptr -48h
.text:0000000000002550 var_40          = qword ptr -40h
.text:0000000000002550 arg_0           = qword ptr  8
.text:0000000000002550 arg_8           = qword ptr  10h
.text:0000000000002550 arg_10          = qword ptr  18h
.text:0000000000002550
.text:0000000000002550 ; __unwind {
.text:0000000000002550                 push    r15
.text:0000000000002552                 push    r14
.text:0000000000002554                 mov     r15d, r8d
.text:0000000000002557                 push    r13
.text:0000000000002559                 push    r12
.text:000000000000255B                 mov     r14, rdi
.text:000000000000255E                 push    rbp
.text:000000000000255F                 push    rbx
.text:0000000000002560                 mov     ebx, r9d
.text:0000000000002563                 mov     r13, rsi
.text:0000000000002566                 mov     rbp, rcx
.text:0000000000002569                 and     ebx, 2
.text:000000000000256C                 sub     rsp, 0B8h
.text:0000000000002573                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000257B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002580                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002585                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000258A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000258F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002597                 mov     [rsp+0E8h+var_80], rax
.text:000000000000259C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000025A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000025A9                 mov     rax, fs:28h
.text:00000000000025B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000025BA                 xor     eax, eax
.text:00000000000025BC                 call    ___ctype_get_mb_cur_max
.text:00000000000025C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000025C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000025CA                 ja      def_25E1        ; jumptable 00000000000121F1 default case
.text:00000000000025D0                 lea     rcx, jpt_25E1
.text:00000000000025D7                 mov     edx, r15d
.text:00000000000025DA                 movsxd  rax, ds:(jpt_25E1 - 5320h)[rcx+rdx*4]
.text:00000000000025DE                 add     rax, rcx
.text:00000000000025E1                 jmp     rax             ; switch jump
.text:00000000000025E3 ; ---------------------------------------------------------------------------
.text:00000000000025E3
.text:00000000000025E3 loc_25E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000025E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000025E3                                         ; DATA XREF: ...
.text:00000000000025E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000025E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000025ED                 xor     r12d, r12d
.text:00000000000025F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000025F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000025FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002603
.text:0000000000002603 loc_2603:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002603                 lea     rax, asc_52CD   ; "'"
.text:000000000000260A                 mov     [rsp+0E8h+n], 1
.text:0000000000002613                 xor     r15d, r15d
.text:0000000000002616                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000261E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002623
.text:0000000000002623 loc_2623:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002623                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002623                 xor     r11d, r11d
.text:0000000000002626                 mov     rax, rbp
.text:0000000000002629                 mov     r8d, r12d
.text:000000000000262C                 mov     rbp, r11
.text:000000000000262F                 mov     r11, rax
.text:0000000000002632                 nop     word ptr [rax+rax+00h]
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002638                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002638                 cmp     r11, rbp
.text:000000000000263B                 setnz   r12b
.text:000000000000263F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002643                 jnz     short loc_2652
.text:0000000000002645                 mov     rax, [rsp+0E8h+s]
.text:000000000000264A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000264E                 setnz   r12b
.text:0000000000002652
.text:0000000000002652 loc_2652:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002652                 test    r12b, r12b
.text:0000000000002655                 jz      loc_2CB0
.text:000000000000265B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002660                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002665                 lea     r9, [rdi+rbp]
.text:0000000000002669                 setnz   al
.text:000000000000266C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002670                 mov     r10d, eax
.text:0000000000002673                 jz      loc_2720
.text:0000000000002679                 mov     rax, [rsp+0E8h+n]
.text:000000000000267E                 test    rax, rax
.text:0000000000002681                 jz      loc_2AB0
.text:0000000000002687                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000268B                 lea     rbx, [rbp+rax+0]
.text:0000000000002690                 jnz     short loc_26C0
.text:0000000000002692                 cmp     rax, 1
.text:0000000000002696                 jbe     short loc_26C0
.text:0000000000002698                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000269D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000026A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000026A7                 call    _strlen
.text:00000000000026AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000026B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000026B8                 mov     r11, rax
.text:00000000000026BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000026C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000026C0                 cmp     rbx, r11
.text:00000000000026C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000026C8                 ja      loc_2C80
.text:00000000000026CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000026D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000026D8                 mov     rdi, r9         ; s1
.text:00000000000026DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000026E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000026E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000026EA                 call    _memcmp
.text:00000000000026EF                 test    eax, eax
.text:00000000000026F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000026F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000026FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002701                 jnz     loc_2C80
.text:0000000000002707                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000270C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002712                 jnz     loc_3695
.text:0000000000002718                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002720                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002720                 movzx   ebx, byte ptr [r9]
.text:0000000000002724                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002727                 ja      def_273E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000272D                 lea     rcx, jpt_273E
.text:0000000000002734                 movzx   edx, bl
.text:0000000000002737                 movsxd  rax, ds:(jpt_273E - 534Ch)[rcx+rdx*4]
.text:000000000000273B                 add     rax, rcx
.text:000000000000273E                 jmp     rax             ; switch jump
.text:0000000000002740 ; ---------------------------------------------------------------------------
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002740                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002740                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002743
.text:0000000000002743 loc_2743:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002743                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002743                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002747                 setnz   al
.text:000000000000274A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000274E                 jnz     short loc_275C
.text:0000000000002750                 mov     rax, [rsp+0E8h+s]
.text:0000000000002755                 cmp     byte ptr [rax+1], 0
.text:0000000000002759                 setnz   al
.text:000000000000275C
.text:000000000000275C loc_275C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000275C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002761                 setz    dl
.text:0000000000002764                 test    al, al
.text:0000000000002766                 jz      loc_29B8
.text:000000000000276C
.text:000000000000276C loc_276C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000276C                 xor     r12d, r12d
.text:000000000000276F                 xor     eax, eax
.text:0000000000002771                 nop     dword ptr [rax+00000000h]
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002778                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002778                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000277D                 jnz     loc_2892
.text:0000000000002783                 test    dl, dl
.text:0000000000002785                 jnz     loc_2892
.text:000000000000278B
.text:000000000000278B loc_278B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000278B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002790                 test    rsi, rsi
.text:0000000000002793                 jz      short loc_27A9
.text:0000000000002795                 mov     edx, ebx
.text:0000000000002797                 shr     dl, 5
.text:000000000000279A                 movzx   edx, dl
.text:000000000000279D                 mov     edx, [rsi+rdx*4]
.text:00000000000027A0                 bt      edx, ebx
.text:00000000000027A3                 jb      loc_28F3
.text:00000000000027A9
.text:00000000000027A9 loc_27A9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000027A9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000027A9                 test    r10b, r10b
.text:00000000000027AC                 jnz     loc_28F3
.text:00000000000027B2                 xor     eax, 1
.text:00000000000027B5                 add     rbp, 1
.text:00000000000027B9                 and     eax, r8d
.text:00000000000027BC
.text:00000000000027BC loc_27BC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000027BC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000027BC                 test    al, al
.text:00000000000027BE                 jz      short loc_27E0
.text:00000000000027C0                 cmp     r13, r15
.text:00000000000027C3                 jbe     short loc_27CA
.text:00000000000027C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000027CA
.text:00000000000027CA loc_27CA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000027CA                 lea     rax, [r15+1]
.text:00000000000027CE                 cmp     r13, rax
.text:00000000000027D1                 jbe     short loc_27D9
.text:00000000000027D3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000027D9
.text:00000000000027D9 loc_27D9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000027D9                 add     r15, 2
.text:00000000000027DD                 xor     r8d, r8d
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000027E0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000027E0                 cmp     r15, r13
.text:00000000000027E3                 jnb     short loc_27E9
.text:00000000000027E5                 mov     [r14+r15], bl
.text:00000000000027E9
.text:00000000000027E9 loc_27E9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000027E9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000027EE                 add     r15, 1
.text:00000000000027F2                 mov     eax, 0
.text:00000000000027F7                 test    r12b, r12b
.text:00000000000027FA                 cmovz   edi, eax
.text:00000000000027FD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002802                 jmp     loc_2638
.text:0000000000002802 ; ---------------------------------------------------------------------------
.text:0000000000002807                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002810                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002810                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002813
.text:0000000000002813 loc_2813:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002813                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002813                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002817                 cmp     eax, 2
.text:000000000000281A                 jz      loc_2DD8
.text:0000000000002820                 cmp     eax, 5
.text:0000000000002823                 jz      loc_2D98
.text:0000000000002829                 cmp     eax, 2
.text:000000000000282C                 mov     ebx, 3Fh ; '?'
.text:0000000000002831                 setz    dl
.text:0000000000002834                 xor     r12d, r12d
.text:0000000000002837                 xor     eax, eax
.text:0000000000002839                 jmp     loc_2778
.text:0000000000002839 ; ---------------------------------------------------------------------------
.text:000000000000283E                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002840                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002840                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002843
.text:0000000000002843 loc_2843:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002843                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002843                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002848                 jz      loc_2D50
.text:000000000000284E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002853                 xor     edx, edx
.text:0000000000002855                 xor     eax, eax
.text:0000000000002857                 mov     ebx, 27h ; '''
.text:000000000000285C                 jmp     loc_2778
.text:000000000000285C ; ---------------------------------------------------------------------------
.text:0000000000002861                 align 8
.text:0000000000002868
.text:0000000000002868 loc_2868:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002868                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002868                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000286D                 mov     ebx, 74h ; 't'
.text:0000000000002872
.text:0000000000002872 loc_2872:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002872                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002872                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002877                 setz    al
.text:000000000000287A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000287E                 jnz     loc_29CE
.text:0000000000002884
.text:0000000000002884 loc_2884:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002884                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002884                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002889                 jnz     short loc_28F0
.text:000000000000288B
.text:000000000000288B loc_288B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000288B                 mov     ebx, edx
.text:000000000000288D                 xor     r12d, r12d
.text:0000000000002890                 xor     eax, eax
.text:0000000000002892
.text:0000000000002892 loc_2892:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002892                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002892                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002897                 jnz     loc_278B
.text:000000000000289D                 jmp     loc_27A9
.text:000000000000289D ; ---------------------------------------------------------------------------
.text:00000000000028A2                 align 8
.text:00000000000028A8
.text:00000000000028A8 loc_28A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000028A8                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000028A8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000028AD                 mov     ebx, 62h ; 'b'
.text:00000000000028B2                 jmp     short loc_2884
.text:00000000000028B2 ; ---------------------------------------------------------------------------
.text:00000000000028B4                 align 8
.text:00000000000028B8
.text:00000000000028B8 loc_28B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000028B8                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000028B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000028BD                 jz      loc_2C90
.text:00000000000028C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000028C8                 jz      loc_2AE0
.text:00000000000028CE
.text:00000000000028CE loc_28CE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000028CE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028D3                 jz      loc_2AE0
.text:00000000000028D9                 cmp     [rsp+0E8h+n], 0
.text:00000000000028DF                 jnz     loc_2C9B
.text:00000000000028E5                 mov     ebx, 5Ch ; '\'
.text:00000000000028EA                 nop     word ptr [rax+rax+00h]
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000028F0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000028F0                 xor     r12d, r12d
.text:00000000000028F3
.text:00000000000028F3 loc_28F3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000028F3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000028F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028F8                 setz    dl
.text:00000000000028FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002900                 mov     eax, edx
.text:0000000000002902                 jnz     loc_3158
.text:0000000000002908                 mov     eax, r8d
.text:000000000000290B                 xor     eax, 1
.text:000000000000290E                 and     al, dl
.text:0000000000002910                 jz      short loc_2941
.text:0000000000002912                 cmp     r13, r15
.text:0000000000002915                 jbe     short loc_291C
.text:0000000000002917                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000291C
.text:000000000000291C loc_291C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000291C                 lea     rdx, [r15+1]
.text:0000000000002920                 cmp     r13, rdx
.text:0000000000002923                 jbe     short loc_292B
.text:0000000000002925                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000292B
.text:000000000000292B loc_292B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000292B                 lea     rdx, [r15+2]
.text:000000000000292F                 cmp     r13, rdx
.text:0000000000002932                 jbe     short loc_293A
.text:0000000000002934                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000293A
.text:000000000000293A loc_293A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000293A                 add     r15, 3
.text:000000000000293E                 mov     r8d, eax
.text:0000000000002941
.text:0000000000002941 loc_2941:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002941                 cmp     r13, r15
.text:0000000000002944                 jbe     short loc_294B
.text:0000000000002946                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000294B
.text:000000000000294B loc_294B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000294B                 add     r15, 1
.text:000000000000294F                 add     rbp, 1
.text:0000000000002953                 jmp     loc_27E0
.text:0000000000002953 ; ---------------------------------------------------------------------------
.text:0000000000002958                 align 20h
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002960                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002960                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002965                 jnz     loc_2B33
.text:000000000000296B                 xor     edx, edx
.text:000000000000296D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002972                 jz      loc_288B
.text:0000000000002978                 add     rbp, 1
.text:000000000000297C                 jmp     loc_2638
.text:000000000000297C ; ---------------------------------------------------------------------------
.text:0000000000002981                 align 8
.text:0000000000002988
.text:0000000000002988 loc_2988:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002988                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002988                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000298D                 setz    dl
.text:0000000000002990                 xor     eax, eax
.text:0000000000002992                 jmp     loc_2778
.text:0000000000002992 ; ---------------------------------------------------------------------------
.text:0000000000002997                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029A0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000029A5                 mov     ebx, 61h ; 'a'
.text:00000000000029AA                 jmp     loc_2884
.text:00000000000029AA ; ---------------------------------------------------------------------------
.text:00000000000029AF                 align 10h
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029B0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000029B5                 setz    dl
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000029B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000029B8                 test    rbp, rbp
.text:00000000000029BB                 jnz     loc_276C
.text:00000000000029C1
.text:00000000000029C1 loc_29C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000029C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000029C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000029C6                 and     al, dl
.text:00000000000029C8                 jz      loc_2778
.text:00000000000029CE
.text:00000000000029CE loc_29CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000029CE                 mov     rbp, r11
.text:00000000000029D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000029D9                 jmp     loc_30D9
.text:00000000000029D9 ; ---------------------------------------------------------------------------
.text:00000000000029DE                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029E0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000029E5                 setz    dl
.text:00000000000029E8                 xor     r12d, r12d
.text:00000000000029EB                 jmp     short loc_29C1
.text:00000000000029EB ; ---------------------------------------------------------------------------
.text:00000000000029ED                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029F0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000029F5                 mov     ebx, 20h ; ' '
.text:00000000000029FA                 setz    dl
.text:00000000000029FD                 jmp     short loc_29C1
.text:00000000000029FD ; ---------------------------------------------------------------------------
.text:00000000000029FF                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A00                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A00                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002A05                 mov     ebx, 72h ; 'r'
.text:0000000000002A0A                 jmp     loc_2872
.text:0000000000002A0A ; ---------------------------------------------------------------------------
.text:0000000000002A0F                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A10                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A10                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002A15                 mov     ebx, 66h ; 'f'
.text:0000000000002A1A                 jmp     loc_2884
.text:0000000000002A1A ; ---------------------------------------------------------------------------
.text:0000000000002A1F                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A20                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A20                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002A25                 mov     ebx, 76h ; 'v'
.text:0000000000002A2A                 jmp     loc_2884
.text:0000000000002A2A ; ---------------------------------------------------------------------------
.text:0000000000002A2F                 align 10h
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A30                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A30                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002A35                 mov     ebx, 6Eh ; 'n'
.text:0000000000002A3A                 jmp     loc_2872
.text:0000000000002A3A ; ---------------------------------------------------------------------------
.text:0000000000002A3F                 align 20h
.text:0000000000002A40
.text:0000000000002A40 def_2ACA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002A40                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002A40                                         ; DATA XREF: ...
.text:0000000000002A40                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002A43                 nop     dword ptr [rax+rax+00h]
.text:0000000000002A48
.text:0000000000002A48 def_273E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002A48                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002A48                                         ; DATA XREF: ...
.text:0000000000002A48                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002A4E                 jnz     loc_2DF8
.text:0000000000002A54                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002A59                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002A5E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002A63                 call    ___ctype_b_loc
.text:0000000000002A68                 mov     rcx, [rax]
.text:0000000000002A6B                 movzx   edx, bl
.text:0000000000002A6E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002A74                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002A7A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002A7F                 mov     edi, 1
.text:0000000000002A84                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002A88                 and     ax, 4000h
.text:0000000000002A8C                 setnz   r12b
.text:0000000000002A90                 setz    al
.text:0000000000002A93                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002A97
.text:0000000000002A97 loc_2A97:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002A97                 test    al, al
.text:0000000000002A99                 jnz     loc_3431
.text:0000000000002A9F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002AA4                 setz    dl
.text:0000000000002AA7                 jmp     loc_2778
.text:0000000000002AA7 ; ---------------------------------------------------------------------------
.text:0000000000002AAC                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002AB0                 movzx   ebx, byte ptr [r9]
.text:0000000000002AB4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002AB7                 ja      short def_2ACA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002AB9                 lea     rcx, jpt_2ACA
.text:0000000000002AC0                 movzx   edx, bl
.text:0000000000002AC3                 movsxd  rax, ds:(jpt_2ACA - 5548h)[rcx+rdx*4]
.text:0000000000002AC7                 add     rax, rcx
.text:0000000000002ACA                 jmp     rax             ; switch jump
.text:0000000000002ACA ; ---------------------------------------------------------------------------
.text:0000000000002ACC                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002AD0                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002AD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002AD3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002AD8                 jnz     loc_28CE
.text:0000000000002ADE                 xchg    ax, ax
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002AE0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002AE0                 mov     edx, 5Ch ; '\'
.text:0000000000002AE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002AEA                 jmp     loc_2884
.text:0000000000002AEA ; ---------------------------------------------------------------------------
.text:0000000000002AEF                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002AF0                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002AF0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002AF5                 xor     r10d, r10d
.text:0000000000002AF8                 mov     ebx, 66h ; 'f'
.text:0000000000002AFD                 jmp     loc_2884
.text:0000000000002AFD ; ---------------------------------------------------------------------------
.text:0000000000002B02                 align 8
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002B08                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002B08                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002B0D                 xor     r10d, r10d
.text:0000000000002B10                 mov     ebx, 6Eh ; 'n'
.text:0000000000002B15                 jmp     loc_2872
.text:0000000000002B15 ; ---------------------------------------------------------------------------
.text:0000000000002B1A                 align 20h
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002B20                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002B20                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002B25                 jmp     loc_28F0
.text:0000000000002B25 ; ---------------------------------------------------------------------------
.text:0000000000002B2A                 align 10h
.text:0000000000002B30
.text:0000000000002B30 loc_2B30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002B30                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002B30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002B33
.text:0000000000002B33 loc_2B33:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002B33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B38                 setz    dl
.text:0000000000002B3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B40                 jnz     loc_36DA
.text:0000000000002B46                 mov     eax, r8d
.text:0000000000002B49                 mov     rcx, r15
.text:0000000000002B4C                 xor     eax, 1
.text:0000000000002B4F                 and     al, dl
.text:0000000000002B51                 jz      short loc_2B80
.text:0000000000002B53                 cmp     r13, r15
.text:0000000000002B56                 jbe     short loc_2B5D
.text:0000000000002B58                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B5D
.text:0000000000002B5D loc_2B5D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002B5D                 lea     rcx, [r15+1]
.text:0000000000002B61                 cmp     r13, rcx
.text:0000000000002B64                 jbe     short loc_2B6C
.text:0000000000002B66                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002B6C
.text:0000000000002B6C loc_2B6C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000002B6C                 lea     rcx, [r15+2]
.text:0000000000002B70                 cmp     r13, rcx
.text:0000000000002B73                 ja      loc_31A9
.text:0000000000002B79
.text:0000000000002B79 loc_2B79:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002B79                 lea     rcx, [r15+3]
.text:0000000000002B7D                 mov     r8d, eax
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002B80                 cmp     r13, rcx
.text:0000000000002B83                 jbe     short loc_2B8A
.text:0000000000002B85                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000002B8A
.text:0000000000002B8A loc_2B8A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000002B8A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B8F                 lea     r15, [rcx+1]
.text:0000000000002B93                 jz      loc_3199
.text:0000000000002B99                 lea     rax, [rbp+1]
.text:0000000000002B9D                 cmp     rax, r11
.text:0000000000002BA0                 jnb     short loc_2BBB
.text:0000000000002BA2                 mov     rax, [rsp+0E8h+s]
.text:0000000000002BA7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000002BAC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002BB0                 sub     eax, 30h ; '0'
.text:0000000000002BB3                 cmp     al, 9
.text:0000000000002BB5                 jbe     loc_33E9
.text:0000000000002BBB
.text:0000000000002BBB loc_2BBB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000002BBB                 mov     eax, r12d
.text:0000000000002BBE                 mov     ebx, 30h ; '0'
.text:0000000000002BC3                 xor     r12d, r12d
.text:0000000000002BC6                 jmp     loc_2778
.text:0000000000002BC6 ; ---------------------------------------------------------------------------
.text:0000000000002BCB                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002BD0                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002BD0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002BD5                 mov     r12d, r10d
.text:0000000000002BD8                 setz    dl
.text:0000000000002BDB                 xor     r10d, r10d
.text:0000000000002BDE                 xor     eax, eax
.text:0000000000002BE0                 jmp     loc_2778
.text:0000000000002BE0 ; ---------------------------------------------------------------------------
.text:0000000000002BE5                 align 8
.text:0000000000002BE8
.text:0000000000002BE8 loc_2BE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002BE8                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002BE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002BED                 setz    dl
.text:0000000000002BF0                 xor     r10d, r10d
.text:0000000000002BF3                 jmp     loc_29B8
.text:0000000000002BF3 ; ---------------------------------------------------------------------------
.text:0000000000002BF8                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C00                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002C05                 setz    dl
.text:0000000000002C08                 xor     r10d, r10d
.text:0000000000002C0B                 xor     r12d, r12d
.text:0000000000002C0E                 jmp     loc_29C1
.text:0000000000002C0E ; ---------------------------------------------------------------------------
.text:0000000000002C13                 align 8
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C18                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002C1D                 mov     r12d, r10d
.text:0000000000002C20                 mov     ebx, 20h ; ' '
.text:0000000000002C25                 setz    dl
.text:0000000000002C28                 xor     r10d, r10d
.text:0000000000002C2B                 jmp     loc_29C1
.text:0000000000002C30 ; ---------------------------------------------------------------------------
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C30                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C30                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002C35                 xor     r10d, r10d
.text:0000000000002C38                 mov     ebx, 72h ; 'r'
.text:0000000000002C3D                 jmp     loc_2872
.text:0000000000002C3D ; ---------------------------------------------------------------------------
.text:0000000000002C42                 align 8
.text:0000000000002C48
.text:0000000000002C48 loc_2C48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C48                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C48                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002C4D                 jmp     loc_28F0
.text:0000000000002C4D ; ---------------------------------------------------------------------------
.text:0000000000002C52                 align 8
.text:0000000000002C58
.text:0000000000002C58 loc_2C58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C58                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C58                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002C5D                 xor     r10d, r10d
.text:0000000000002C60                 mov     ebx, 74h ; 't'
.text:0000000000002C65                 jmp     loc_2872
.text:0000000000002C65 ; ---------------------------------------------------------------------------
.text:0000000000002C6A                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C70                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C70                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002C75                 jmp     loc_28F0
.text:0000000000002C75 ; ---------------------------------------------------------------------------
.text:0000000000002C7A                 align 20h
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002C80                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002C80                 xor     r10d, r10d
.text:0000000000002C83                 jmp     loc_2720
.text:0000000000002C83 ; ---------------------------------------------------------------------------
.text:0000000000002C88                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002C90                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002C95                 jnz     loc_3600
.text:0000000000002C9B
.text:0000000000002C9B loc_2C9B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002C9B                 add     rbp, 1
.text:0000000000002C9F                 mov     eax, r8d
.text:0000000000002CA2                 xor     r12d, r12d
.text:0000000000002CA5                 mov     ebx, 5Ch ; '\'
.text:0000000000002CAA                 jmp     loc_27BC
.text:0000000000002CAA ; ---------------------------------------------------------------------------
.text:0000000000002CAF                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002CB0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CB5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002CBA                 mov     r12d, r8d
.text:0000000000002CBD                 mov     rbp, r11
.text:0000000000002CC0                 setz    dl
.text:0000000000002CC3                 mov     eax, ebx
.text:0000000000002CC5                 test    r15, r15
.text:0000000000002CC8                 setz    cl
.text:0000000000002CCB                 and     eax, edx
.text:0000000000002CCD                 and     al, cl
.text:0000000000002CCF                 jnz     loc_3736
.text:0000000000002CD5                 mov     eax, ebx
.text:0000000000002CD7                 xor     eax, 1
.text:0000000000002CDA                 and     dl, al
.text:0000000000002CDC                 jz      loc_364C
.text:0000000000002CE2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002CE7                 jz      loc_364A
.text:0000000000002CED                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002CF2                 jnz     loc_36ED
.text:0000000000002CF8                 test    r13, r13
.text:0000000000002CFB                 setz    al
.text:0000000000002CFE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002D04                 setnz   dl
.text:0000000000002D07                 and     al, dl
.text:0000000000002D09                 jz      loc_372C
.text:0000000000002D0F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002D14
.text:0000000000002D14 loc_2D14:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002D14                 lea     rbx, asc_52CD   ; "'"
.text:0000000000002D1B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002D1F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D27                 mov     r15d, 1
.text:0000000000002D2D                 mov     [rsp+0E8h+n], 1
.text:0000000000002D36                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D3B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002D40                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002D44                 jmp     loc_2623
.text:0000000000002D44 ; ---------------------------------------------------------------------------
.text:0000000000002D49                 align 10h
.text:0000000000002D50
.text:0000000000002D50 loc_2D50:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002D50                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D55                 jnz     loc_3600
.text:0000000000002D5B                 test    r13, r13
.text:0000000000002D5E                 jz      loc_3160
.text:0000000000002D64                 xor     edx, edx
.text:0000000000002D66                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002D6C                 jnz     loc_3160
.text:0000000000002D72
.text:0000000000002D72 loc_2D72:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002D72                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002D72                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002D77                 add     r15, 3
.text:0000000000002D7B                 xor     eax, eax
.text:0000000000002D7D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002D82                 xor     r8d, r8d
.text:0000000000002D85                 mov     r13, rdx
.text:0000000000002D88                 mov     ebx, 27h ; '''
.text:0000000000002D8D                 jmp     loc_27A9
.text:0000000000002D8D ; ---------------------------------------------------------------------------
.text:0000000000002D92                 align 8
.text:0000000000002D98
.text:0000000000002D98 loc_2D98:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002D98                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002D9D                 jz      short loc_2DC0
.text:0000000000002D9F                 lea     rcx, [rbp+2]
.text:0000000000002DA3                 cmp     rcx, r11
.text:0000000000002DA6                 jnb     short loc_2DC0
.text:0000000000002DA8                 mov     rax, [rsp+0E8h+s]
.text:0000000000002DAD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002DB2                 jz      loc_3542
.text:0000000000002DB8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002DC0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002DC0                 xor     edx, edx
.text:0000000000002DC2                 xor     r12d, r12d
.text:0000000000002DC5                 xor     eax, eax
.text:0000000000002DC7                 mov     ebx, 3Fh ; '?'
.text:0000000000002DCC                 jmp     loc_2778
.text:0000000000002DCC ; ---------------------------------------------------------------------------
.text:0000000000002DD1                 align 8
.text:0000000000002DD8
.text:0000000000002DD8 loc_2DD8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002DD8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DDD                 jnz     loc_3600
.text:0000000000002DE3                 xor     r12d, r12d
.text:0000000000002DE6                 xor     eax, eax
.text:0000000000002DE8                 mov     ebx, 3Fh ; '?'
.text:0000000000002DED                 jmp     loc_27A9
.text:0000000000002DED ; ---------------------------------------------------------------------------
.text:0000000000002DF2                 align 8
.text:0000000000002DF8
.text:0000000000002DF8 loc_2DF8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002DF8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002E00                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E04                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002E10                 mov     [rsp+0E8h+ps], rax
.text:0000000000002E15                 jnz     short loc_2E44
.text:0000000000002E17                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002E1C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002E21                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002E26                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002E2B                 call    _strlen
.text:0000000000002E30                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002E36                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002E3C                 mov     r11, rax
.text:0000000000002E3F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002E44
.text:0000000000002E44 loc_2E44:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002E44                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002E4C                 xor     ecx, ecx
.text:0000000000002E4E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002E52                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002E57                 mov     rbx, rcx
.text:0000000000002E5A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002E62                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002E67                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002E6C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002E74                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002E79                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002E7E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002E83
.text:0000000000002E83 loc_2E83:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002E83                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E88                 lea     r14, [rbp+rbx+0]
.text:0000000000002E8D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002E92                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002E97                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002E9C                 lea     r13, [rax+r14]
.text:0000000000002EA0                 sub     rdx, r14
.text:0000000000002EA3                 mov     rsi, r13
.text:0000000000002EA6                 call    rpl_mbrtowc
.text:0000000000002EAB                 test    rax, rax
.text:0000000000002EAE                 mov     r15, rax
.text:0000000000002EB1                 jz      short loc_2F01
.text:0000000000002EB3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002EB7                 jz      loc_34D5
.text:0000000000002EBD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002EC1                 jz      loc_3461
.text:0000000000002EC7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002ECC                 setz    al
.text:0000000000002ECF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002ED3                 jnz     loc_3070
.text:0000000000002ED9
.text:0000000000002ED9 loc_2ED9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002ED9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002ED9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002EE0                 call    _iswprint
.text:0000000000002EE5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002EEA                 test    eax, eax
.text:0000000000002EEC                 mov     eax, 0
.text:0000000000002EF1                 cmovz   r12d, eax
.text:0000000000002EF5                 add     rbx, r15
.text:0000000000002EF8                 call    _mbsinit
.text:0000000000002EFD                 test    eax, eax
.text:0000000000002EFF                 jz      short loc_2E83
.text:0000000000002F01
.text:0000000000002F01 loc_2F01:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002F01                 mov     edx, r12d
.text:0000000000002F04                 mov     rdi, rbx
.text:0000000000002F07                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002F0D                 xor     edx, 1
.text:0000000000002F10                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002F15                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002F1B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002F1F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002F27                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002F2C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002F31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002F36
.text:0000000000002F36 loc_2F36:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002F36                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002F36                 cmp     rdi, 1
.text:0000000000002F3A                 jbe     loc_353B
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002F40                 mov     rcx, rdi
.text:0000000000002F43                 xor     esi, esi
.text:0000000000002F45                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002F4B                 add     rcx, rbp
.text:0000000000002F4E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002F53                 jmp     loc_300E
.text:0000000000002F53 ; ---------------------------------------------------------------------------
.text:0000000000002F58                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002F60                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F65                 setz    al
.text:0000000000002F68                 test    r9b, r9b
.text:0000000000002F6B                 jnz     loc_3420
.text:0000000000002F71                 mov     esi, r8d
.text:0000000000002F74                 xor     esi, 1
.text:0000000000002F77                 and     al, sil
.text:0000000000002F7A                 jz      short loc_2FAB
.text:0000000000002F7C                 cmp     r13, r15
.text:0000000000002F7F                 jbe     short loc_2F86
.text:0000000000002F81                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002F86
.text:0000000000002F86 loc_2F86:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002F86                 lea     rsi, [r15+1]
.text:0000000000002F8A                 cmp     r13, rsi
.text:0000000000002F8D                 jbe     short loc_2F95
.text:0000000000002F8F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002F95
.text:0000000000002F95 loc_2F95:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002F95                 lea     rsi, [r15+2]
.text:0000000000002F99                 cmp     r13, rsi
.text:0000000000002F9C                 jbe     short loc_2FA4
.text:0000000000002F9E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002FA4
.text:0000000000002FA4 loc_2FA4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002FA4                 add     r15, 3
.text:0000000000002FA8                 mov     r8d, eax
.text:0000000000002FAB
.text:0000000000002FAB loc_2FAB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002FAB                 cmp     r13, r15
.text:0000000000002FAE                 jbe     short loc_2FB5
.text:0000000000002FB0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002FB5
.text:0000000000002FB5 loc_2FB5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002FB5                 lea     rax, [r15+1]
.text:0000000000002FB9                 cmp     r13, rax
.text:0000000000002FBC                 jbe     short loc_2FCB
.text:0000000000002FBE                 mov     eax, ebx
.text:0000000000002FC0                 shr     al, 6
.text:0000000000002FC3                 add     eax, 30h ; '0'
.text:0000000000002FC6                 mov     [r14+r15+1], al
.text:0000000000002FCB
.text:0000000000002FCB loc_2FCB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002FCB                 lea     rax, [r15+2]
.text:0000000000002FCF                 cmp     r13, rax
.text:0000000000002FD2                 jbe     short loc_2FE4
.text:0000000000002FD4                 mov     eax, ebx
.text:0000000000002FD6                 shr     al, 3
.text:0000000000002FD9                 and     eax, 7
.text:0000000000002FDC                 add     eax, 30h ; '0'
.text:0000000000002FDF                 mov     [r14+r15+2], al
.text:0000000000002FE4
.text:0000000000002FE4 loc_2FE4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002FE4                 and     ebx, 7
.text:0000000000002FE7                 add     rbp, 1
.text:0000000000002FEB                 add     r15, 3
.text:0000000000002FEF                 add     ebx, 30h ; '0'
.text:0000000000002FF2                 cmp     rbp, rcx
.text:0000000000002FF5                 jnb     loc_27E0
.text:0000000000002FFB                 mov     esi, edx
.text:0000000000002FFD
.text:0000000000002FFD loc_2FFD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002FFD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002FFD                 cmp     r13, r15
.text:0000000000003000                 jbe     short loc_3006
.text:0000000000003002                 mov     [r14+r15], bl
.text:0000000000003006
.text:0000000000003006 loc_3006:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003006                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000300A                 add     r15, 1
.text:000000000000300E
.text:000000000000300E loc_300E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000300E                 test    dl, dl
.text:0000000000003010                 jnz     loc_2F60
.text:0000000000003016                 mov     eax, esi
.text:0000000000003018                 xor     eax, 1
.text:000000000000301B                 and     eax, r8d
.text:000000000000301E                 test    r10b, r10b
.text:0000000000003021                 jz      short loc_3031
.text:0000000000003023                 cmp     r13, r15
.text:0000000000003026                 jbe     short loc_302D
.text:0000000000003028                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000302D                 add     r15, 1
.text:0000000000003031
.text:0000000000003031 loc_3031:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003031                 add     rbp, 1
.text:0000000000003035                 cmp     rbp, rcx
.text:0000000000003038                 jnb     loc_27BC
.text:000000000000303E                 test    al, al
.text:0000000000003040                 jz      loc_343E
.text:0000000000003046                 cmp     r13, r15
.text:0000000000003049                 jbe     short loc_3050
.text:000000000000304B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003050                 lea     rax, [r15+1]
.text:0000000000003054                 cmp     r13, rax
.text:0000000000003057                 jbe     short loc_305F
.text:0000000000003059                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000305F
.text:000000000000305F loc_305F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000305F                 add     r15, 2
.text:0000000000003063                 xor     r10d, r10d
.text:0000000000003066                 xor     r8d, r8d
.text:0000000000003069                 jmp     short loc_2FFD
.text:0000000000003069 ; ---------------------------------------------------------------------------
.text:000000000000306B                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003070                 cmp     r15, 1
.text:0000000000003074                 jz      loc_2ED9
.text:000000000000307A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000307F                 lea     rcx, [rdi+r15]
.text:0000000000003083                 lea     rdx, [rdi+r14+1]
.text:0000000000003088                 lea     r8, [rcx+r14]
.text:000000000000308C                 jmp     short loc_309D
.text:000000000000308C ; ---------------------------------------------------------------------------
.text:000000000000308E                 align 10h
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003090                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003090                 add     rdx, 1
.text:0000000000003094                 cmp     r8, rdx
.text:0000000000003097                 jz      loc_2ED9
.text:000000000000309D
.text:000000000000309D loc_309D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000309D                 movzx   ecx, byte ptr [rdx]
.text:00000000000030A0                 sub     ecx, 5Bh ; '['
.text:00000000000030A3                 cmp     cl, 21h ; '!'
.text:00000000000030A6                 ja      short loc_3090
.text:00000000000030A8                 mov     esi, 1
.text:00000000000030AD                 shl     rsi, cl
.text:00000000000030B0                 mov     rcx, rsi
.text:00000000000030B3                 mov     rsi, 20000002Bh
.text:00000000000030BD                 test    rcx, rsi
.text:00000000000030C0                 jz      short loc_3090
.text:00000000000030C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000030C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000030D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030D9
.text:00000000000030D9 loc_30D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000030D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000030D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000030DE                 jz      short loc_30F0
.text:00000000000030E0                 test    al, al
.text:00000000000030E2                 mov     eax, 4
.text:00000000000030E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000030EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000030F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000030F0                 sub     rsp, 8
.text:00000000000030F4                 mov     rcx, rbp
.text:00000000000030F7                 mov     rsi, r13
.text:00000000000030FA                 push    [rsp+0F0h+var_88]
.text:00000000000030FE                 push    [rsp+0F8h+var_80]
.text:0000000000003102                 mov     rdi, r14
.text:0000000000003105                 push    0
.text:0000000000003107                 mov     r9d, [rsp+108h+var_70]
.text:000000000000310F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003114                 mov     rdx, [rsp+108h+s]
.text:0000000000003119                 and     r9d, 0FFFFFFFDh
.text:000000000000311D                 call    quotearg_buffer_restyled
.text:0000000000003122                 add     rsp, 20h
.text:0000000000003126                 mov     r15, rax
.text:0000000000003129
.text:0000000000003129 loc_3129:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003129                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003129                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003131                 xor     rbx, fs:28h
.text:000000000000313A                 mov     rax, r15
.text:000000000000313D                 jnz     loc_3743
.text:0000000000003143                 add     rsp, 0B8h
.text:000000000000314A                 pop     rbx
.text:000000000000314B                 pop     rbp
.text:000000000000314C                 pop     r12
.text:000000000000314E                 pop     r13
.text:0000000000003150                 pop     r14
.text:0000000000003152                 pop     r15
.text:0000000000003154                 retn
.text:0000000000003154 ; ---------------------------------------------------------------------------
.text:0000000000003155                 align 8
.text:0000000000003158
.text:0000000000003158 loc_3158:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003158                 mov     rbp, r11
.text:000000000000315B                 jmp     loc_30D9
.text:0000000000003160 ; ---------------------------------------------------------------------------
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003160                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003160                 cmp     r13, r15
.text:0000000000003163                 jbe     short loc_316A
.text:0000000000003165                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000316A
.text:000000000000316A loc_316A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000316A                 lea     rax, [r15+1]
.text:000000000000316E                 cmp     r13, rax
.text:0000000000003171                 jbe     short loc_3179
.text:0000000000003173                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003179
.text:0000000000003179 loc_3179:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003179                 lea     rax, [r15+2]
.text:000000000000317D                 cmp     r13, rax
.text:0000000000003180                 jbe     loc_3772
.text:0000000000003186                 mov     rdx, r13
.text:0000000000003189                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000318F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003194                 jmp     loc_2D72
.text:0000000000003199 ; ---------------------------------------------------------------------------
.text:0000000000003199
.text:0000000000003199 loc_3199:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003199                 mov     eax, r12d
.text:000000000000319C                 mov     ebx, 30h ; '0'
.text:00000000000031A1                 xor     r12d, r12d
.text:00000000000031A4                 jmp     loc_27A9
.text:00000000000031A9 ; ---------------------------------------------------------------------------
.text:00000000000031A9
.text:00000000000031A9 loc_31A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000031A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000031AF                 jmp     loc_2B79
.text:00000000000031B4 ; ---------------------------------------------------------------------------
.text:00000000000031B4
.text:00000000000031B4 loc_31B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031B4                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000031B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000031B6                 jnz     loc_25E3        ; jumptable 00000000000121F1 case 1
.text:00000000000031BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031C1
.text:00000000000031C1 loc_31C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000031C1                 test    r13, r13
.text:00000000000031C4                 jnz     loc_375A
.text:00000000000031CA                 lea     rax, asc_52CD   ; "'"
.text:00000000000031D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000031DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031E4                 xor     r12d, r12d
.text:00000000000031E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000031EC                 mov     [rsp+0E8h+n], 1
.text:00000000000031F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000031FA                 mov     r15d, 1
.text:0000000000003200                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003208                 jmp     loc_2623
.text:0000000000003208 ; ---------------------------------------------------------------------------
.text:000000000000320D                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003210                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:0000000000003210                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003212                 jnz     loc_360D
.text:0000000000003218                 test    r13, r13
.text:000000000000321B                 jz      loc_3446
.text:0000000000003221                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003225                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000322A                 xor     r12d, r12d
.text:000000000000322D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003232                 mov     [rsp+0E8h+var_98], 0
.text:000000000000323B
.text:000000000000323B loc_323B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000323B                 lea     rax, unk_52CB
.text:0000000000003242                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003247                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000324C                 mov     [rsp+0E8h+n], 1
.text:0000000000003255                 mov     r15d, 1
.text:000000000000325B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003260                 jmp     loc_2623
.text:0000000000003265 ; ---------------------------------------------------------------------------
.text:0000000000003265
.text:0000000000003265 loc_3265:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003265                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:0000000000003265                 lea     rax, unk_52CB   ; jumptable 00000000000121F1 case 6
.text:000000000000326C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003271                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003276                 xor     r12d, r12d
.text:0000000000003279                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003282                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003287                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000328C                 mov     [rsp+0E8h+n], 1
.text:0000000000003295                 xor     r15d, r15d
.text:0000000000003298                 mov     [rsp+0E8h+s2], rax
.text:000000000000329D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000032A5                 jmp     loc_2623
.text:00000000000032AA ; ---------------------------------------------------------------------------
.text:00000000000032AA
.text:00000000000032AA loc_32AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000032AA                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000032AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000032AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000032B4                 xor     r12d, r12d
.text:00000000000032B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000032C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000032C5                 xor     r15d, r15d
.text:00000000000032C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000032CD                 mov     [rsp+0E8h+n], 0
.text:00000000000032D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000032DF                 jmp     loc_2623
.text:00000000000032E4 ; ---------------------------------------------------------------------------
.text:00000000000032E4
.text:00000000000032E4 loc_32E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000032E4                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000032E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000032E9                 jz      short loc_3341
.text:00000000000032EB                 lea     rsi, asc_52CF   ; "`"
.text:00000000000032F2                 xor     edi, edi        ; domainname
.text:00000000000032F4                 mov     edx, 5          ; category
.text:00000000000032F9                 call    _dcgettext
.text:00000000000032FE                 mov     rcx, rax
.text:0000000000003301                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003306                 lea     rax, asc_52CF   ; "`"
.text:000000000000330D                 cmp     rcx, rax
.text:0000000000003310                 jz      loc_36AE
.text:0000000000003316
.text:0000000000003316 loc_3316:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003316                 lea     rsi, asc_52CD   ; "'"
.text:000000000000331D                 xor     edi, edi        ; domainname
.text:000000000000331F                 mov     edx, 5          ; category
.text:0000000000003324                 call    _dcgettext
.text:0000000000003329                 mov     rcx, rax
.text:000000000000332C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003331                 lea     rax, asc_52CD   ; "'"
.text:0000000000003338                 cmp     rcx, rax
.text:000000000000333B                 jz      loc_36C4
.text:0000000000003341
.text:0000000000003341 loc_3341:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003341                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003341                 xor     r15d, r15d
.text:0000000000003344                 test    ebx, ebx
.text:0000000000003346                 jz      loc_350D
.text:000000000000334C
.text:000000000000334C loc_334C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000334C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000334C                 test    ebx, ebx
.text:000000000000334E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003353                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003358                 xor     r12d, r12d
.text:000000000000335B                 mov     rdi, rbx        ; s
.text:000000000000335E                 call    _strlen
.text:0000000000003363                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003368                 mov     [rsp+0E8h+n], rax
.text:000000000000336D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003372                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003377                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003380                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003385                 jmp     loc_2623
.text:000000000000338A ; ---------------------------------------------------------------------------
.text:000000000000338A
.text:000000000000338A loc_338A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000338A                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:000000000000338A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000338F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003394                 xor     r12d, r12d
.text:0000000000003397                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000033A5                 xor     r15d, r15d
.text:00000000000033A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033AD                 mov     [rsp+0E8h+n], 0
.text:00000000000033B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000033BF                 jmp     loc_2623
.text:00000000000033C4 ; ---------------------------------------------------------------------------
.text:00000000000033C4
.text:00000000000033C4 loc_33C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000033C4                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000033C4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000033C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033CE                 xor     r12d, r12d
.text:00000000000033D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000033E4                 jmp     loc_2603
.text:00000000000033E9 ; ---------------------------------------------------------------------------
.text:00000000000033E9
.text:00000000000033E9 loc_33E9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000033E9                 cmp     r13, r15
.text:00000000000033EC                 jbe     short loc_33F3
.text:00000000000033EE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000033F3
.text:00000000000033F3 loc_33F3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000033F3                 lea     rax, [rcx+2]
.text:00000000000033F7                 cmp     r13, rax
.text:00000000000033FA                 jbe     short loc_3402
.text:00000000000033FC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003402
.text:0000000000003402 loc_3402:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003402                 mov     eax, r12d
.text:0000000000003405                 lea     r15, [rcx+3]
.text:0000000000003409                 xor     r12d, r12d
.text:000000000000340C                 mov     ebx, 30h ; '0'
.text:0000000000003411                 jmp     loc_2778
.text:0000000000003411 ; ---------------------------------------------------------------------------
.text:0000000000003416                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003420                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003425                 mov     rbp, r11
.text:0000000000003428                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000342C                 jmp     loc_30D9
.text:0000000000003431 ; ---------------------------------------------------------------------------
.text:0000000000003431
.text:0000000000003431 loc_3431:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003431                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003436                 xor     r12d, r12d
.text:0000000000003439                 jmp     loc_2F40
.text:000000000000343E ; ---------------------------------------------------------------------------
.text:000000000000343E
.text:000000000000343E loc_343E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000343E                 xor     r10d, r10d
.text:0000000000003441                 jmp     loc_2FFD
.text:0000000000003446 ; ---------------------------------------------------------------------------
.text:0000000000003446
.text:0000000000003446 loc_3446:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003446                 mov     [rsp+0E8h+var_98], 0
.text:000000000000344F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003454                 xor     r12d, r12d
.text:0000000000003457                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000345C                 jmp     loc_323B
.text:0000000000003461 ; ---------------------------------------------------------------------------
.text:0000000000003461
.text:0000000000003461 loc_3461:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003461                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003466                 mov     rsi, r14
.text:0000000000003469                 mov     rcx, r13
.text:000000000000346C                 mov     rax, rbx
.text:000000000000346F                 mov     rdi, rbx
.text:0000000000003472                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003478                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000347D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003485                 cmp     rsi, r11
.text:0000000000003488                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000348E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003496                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000349B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000034A0                 jnb     short loc_34C8
.text:00000000000034A2                 cmp     byte ptr [rcx], 0
.text:00000000000034A5                 jnz     short loc_34B7
.text:00000000000034A7                 jmp     short loc_34C8
.text:00000000000034A7 ; ---------------------------------------------------------------------------
.text:00000000000034A9                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000034B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000034B5                 jz      short loc_34C5
.text:00000000000034B7
.text:00000000000034B7 loc_34B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000034B7                 add     rax, 1
.text:00000000000034BB                 lea     rdx, [rbp+rax+0]
.text:00000000000034C0                 cmp     r11, rdx
.text:00000000000034C3                 ja      short loc_34B0
.text:00000000000034C5
.text:00000000000034C5 loc_34C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000034C5                 mov     rdi, rax
.text:00000000000034C8
.text:00000000000034C8 loc_34C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000034C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000034C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000034CD                 xor     r12d, r12d
.text:00000000000034D0                 jmp     loc_2F36
.text:00000000000034D5 ; ---------------------------------------------------------------------------
.text:00000000000034D5
.text:00000000000034D5 loc_34D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000034D5                 mov     rdi, rbx
.text:00000000000034D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000034DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000034E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000034E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000034F1                 xor     r12d, r12d
.text:00000000000034F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000034F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000034FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003503                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003508                 jmp     loc_2F36
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:000000000000350D
.text:000000000000350D loc_350D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000350D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003512                 movzx   eax, byte ptr [rdx]
.text:0000000000003515                 test    al, al
.text:0000000000003517                 jz      loc_334C
.text:000000000000351D                 nop     dword ptr [rax]
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003520                 cmp     r13, r15
.text:0000000000003523                 jbe     short loc_3529
.text:0000000000003525                 mov     [r14+r15], al
.text:0000000000003529
.text:0000000000003529 loc_3529:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003529                 add     r15, 1
.text:000000000000352D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003532                 test    al, al
.text:0000000000003534                 jnz     short loc_3520
.text:0000000000003536                 jmp     loc_334C
.text:000000000000353B ; ---------------------------------------------------------------------------
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000353B                 mov     eax, edx
.text:000000000000353D                 jmp     loc_2A97
.text:0000000000003542 ; ---------------------------------------------------------------------------
.text:0000000000003542
.text:0000000000003542 loc_3542:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003542                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003546                 cmp     bl, 3Eh ; '>'
.text:0000000000003549                 ja      loc_2DC0
.text:000000000000354F                 mov     rax, 7000A38200000000h
.text:0000000000003559                 bt      rax, rbx
.text:000000000000355D                 jnb     loc_2DC0
.text:0000000000003563                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003568                 jnz     loc_3752
.text:000000000000356E                 cmp     r13, r15
.text:0000000000003571                 jbe     short loc_3578
.text:0000000000003573                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003578
.text:0000000000003578 loc_3578:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003578                 lea     rax, [r15+1]
.text:000000000000357C                 cmp     r13, rax
.text:000000000000357F                 jbe     short loc_3587
.text:0000000000003581                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003587
.text:0000000000003587 loc_3587:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003587                 lea     rax, [r15+2]
.text:000000000000358B                 cmp     r13, rax
.text:000000000000358E                 jbe     short loc_3596
.text:0000000000003590                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003596
.text:0000000000003596 loc_3596:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003596                 lea     rax, [r15+3]
.text:000000000000359A                 cmp     r13, rax
.text:000000000000359D                 jbe     short loc_35A5
.text:000000000000359F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000035A5
.text:00000000000035A5 loc_35A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000035A5                 add     r15, 4
.text:00000000000035A9                 xor     edx, edx
.text:00000000000035AB                 xor     r12d, r12d
.text:00000000000035AE                 xor     eax, eax
.text:00000000000035B0                 mov     rbp, rcx
.text:00000000000035B3                 jmp     loc_2778
.text:00000000000035B8 ; ---------------------------------------------------------------------------
.text:00000000000035B8
.text:00000000000035B8 loc_35B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035B8                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000035B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000035BA                 jz      loc_3748
.text:00000000000035C0                 lea     rax, asc_52CD   ; "'"
.text:00000000000035C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000035CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035D1                 xor     r12d, r12d
.text:00000000000035D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000035E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000035E7                 mov     [rsp+0E8h+n], 1
.text:00000000000035F0                 xor     r15d, r15d
.text:00000000000035F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000035F8                 jmp     loc_2623
.text:00000000000035F8 ; ---------------------------------------------------------------------------
.text:00000000000035FD                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003600                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003600                 mov     rbp, r11
.text:0000000000003603                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003608                 jmp     loc_30D9
.text:000000000000360D ; ---------------------------------------------------------------------------
.text:000000000000360D
.text:000000000000360D loc_360D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000360D                 lea     rax, unk_52CB
.text:0000000000003614                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003619                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000361E                 xor     r12d, r12d
.text:0000000000003621                 mov     [rsp+0E8h+var_98], 0
.text:000000000000362A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000362F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003634                 mov     [rsp+0E8h+n], 1
.text:000000000000363D                 xor     r15d, r15d
.text:0000000000003640                 mov     [rsp+0E8h+s2], rax
.text:0000000000003645                 jmp     loc_2623
.text:000000000000364A ; ---------------------------------------------------------------------------
.text:000000000000364A
.text:000000000000364A loc_364A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000364A                 mov     eax, edx
.text:000000000000364C
.text:000000000000364C loc_364C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000364C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000364C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003651                 test    rbx, rbx
.text:0000000000003654                 jz      short loc_3682
.text:0000000000003656                 test    al, al
.text:0000000000003658                 jz      short loc_3682
.text:000000000000365A                 movzx   ecx, byte ptr [rbx]
.text:000000000000365D                 mov     rax, rbx
.text:0000000000003660                 test    cl, cl
.text:0000000000003662                 jz      short loc_3682
.text:0000000000003664                 mov     rdx, r15
.text:0000000000003667                 sub     rax, r15
.text:000000000000366A
.text:000000000000366A loc_366A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000366A                 cmp     r13, rdx
.text:000000000000366D                 jbe     short loc_3673
.text:000000000000366F                 mov     [r14+rdx], cl
.text:0000000000003673
.text:0000000000003673 loc_3673:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003673                 add     rdx, 1
.text:0000000000003677                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000367B                 test    cl, cl
.text:000000000000367D                 jnz     short loc_366A
.text:000000000000367F                 mov     r15, rdx
.text:0000000000003682
.text:0000000000003682 loc_3682:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003682                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003682                 cmp     r13, r15
.text:0000000000003685                 jbe     loc_3129
.text:000000000000368B                 mov     byte ptr [r14+r15], 0
.text:0000000000003690                 jmp     loc_3129
.text:0000000000003695 ; ---------------------------------------------------------------------------
.text:0000000000003695
.text:0000000000003695 loc_3695:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003695                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000369A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000369F                 mov     rbp, r11
.text:00000000000036A2                 setz    al
.text:00000000000036A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000036A9                 jmp     loc_30D9
.text:00000000000036AE ; ---------------------------------------------------------------------------
.text:00000000000036AE
.text:00000000000036AE loc_36AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000036AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000036B2                 mov     rdi, rcx
.text:00000000000036B5                 call    gettext_quote
.text:00000000000036BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000036BF                 jmp     loc_3316
.text:00000000000036C4 ; ---------------------------------------------------------------------------
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000036C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000036C8                 mov     rdi, rcx
.text:00000000000036CB                 call    gettext_quote
.text:00000000000036D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000036D5                 jmp     loc_3341
.text:00000000000036DA ; ---------------------------------------------------------------------------
.text:00000000000036DA
.text:00000000000036DA loc_36DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000036DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000036DF                 mov     rbp, r11
.text:00000000000036E2                 mov     eax, edx
.text:00000000000036E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000036E8                 jmp     loc_30D9
.text:00000000000036ED ; ---------------------------------------------------------------------------
.text:00000000000036ED
.text:00000000000036ED loc_36ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000036ED                 sub     rsp, 8
.text:00000000000036F1                 mov     r8d, 5
.text:00000000000036F7                 mov     rcx, r11
.text:00000000000036FA                 push    [rsp+0F0h+var_88]
.text:00000000000036FE                 push    [rsp+0F8h+var_80]
.text:0000000000003702                 mov     rdi, r14
.text:0000000000003705                 push    [rsp+100h+var_C8]
.text:0000000000003709                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003711                 mov     rdx, [rsp+108h+s]
.text:0000000000003716                 mov     rsi, [rsp+108h+var_98]
.text:000000000000371B                 call    quotearg_buffer_restyled
.text:0000000000003720                 add     rsp, 20h
.text:0000000000003724                 mov     r15, rax
.text:0000000000003727                 jmp     loc_3129
.text:000000000000372C ; ---------------------------------------------------------------------------
.text:000000000000372C
.text:000000000000372C loc_372C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000372C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003731                 jmp     loc_364C
.text:0000000000003736 ; ---------------------------------------------------------------------------
.text:0000000000003736
.text:0000000000003736 loc_3736:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003736                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000373E                 jmp     loc_30D9
.text:0000000000003743 ; ---------------------------------------------------------------------------
.text:0000000000003743
.text:0000000000003743 loc_3743:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003743                 call    ___stack_chk_fail
.text:0000000000003748 ; ---------------------------------------------------------------------------
.text:0000000000003748
.text:0000000000003748 loc_3748:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003748                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000374D                 jmp     loc_31C1
.text:0000000000003752 ; ---------------------------------------------------------------------------
.text:0000000000003752
.text:0000000000003752 loc_3752:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003752                 mov     rbp, r11
.text:0000000000003755                 jmp     loc_30F0
.text:000000000000375A ; ---------------------------------------------------------------------------
.text:000000000000375A
.text:000000000000375A loc_375A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000375A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000375F                 xor     eax, eax
.text:0000000000003761                 xor     r12d, r12d
.text:0000000000003764                 mov     [rsp+0E8h+var_98], 0
.text:000000000000376D                 jmp     loc_2D14
.text:0000000000003772 ; ---------------------------------------------------------------------------
.text:0000000000003772
.text:0000000000003772 loc_3772:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003772                 mov     rdx, r13
.text:0000000000003775                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000377A                 jmp     loc_2D72
.text:000000000000377F ; ---------------------------------------------------------------------------
.text:000000000000377F
.text:000000000000377F def_25E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000377F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000377F ; } // starts at 2550
.text:000000000000377F quotearg_buffer_restyled endp
.text:000000000000377F
.text:000000000000377F ; ---------------------------------------------------------------------------
.text:0000000000003784                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790
.text:0000000000003790 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003790                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003790
.text:0000000000003790 var_50          = qword ptr -50h
.text:0000000000003790 var_48          = qword ptr -48h
.text:0000000000003790 var_40          = dword ptr -40h
.text:0000000000003790 var_3C          = dword ptr -3Ch
.text:0000000000003790
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 push    r15
.text:0000000000003792                 push    r14
.text:0000000000003794                 movsxd  r15, edi
.text:0000000000003797                 push    r13
.text:0000000000003799                 push    r12
.text:000000000000379B                 mov     r14, rdx
.text:000000000000379E                 push    rbp
.text:000000000000379F                 push    rbx
.text:00000000000037A0                 mov     rbp, rcx
.text:00000000000037A3                 sub     rsp, 28h
.text:00000000000037A7                 mov     [rsp+58h+var_50], rsi
.text:00000000000037AC                 call    ___errno_location
.text:00000000000037B1                 mov     r13, rax
.text:00000000000037B4                 mov     eax, [rax]
.text:00000000000037B6                 test    r15d, r15d
.text:00000000000037B9                 mov     rbx, cs:slotvec
.text:00000000000037C0                 mov     [rsp+58h+var_40], eax
.text:00000000000037C4                 js      loc_3931
.text:00000000000037CA                 cmp     cs:nslots, r15d
.text:00000000000037D1                 jg      short loc_3835
.text:00000000000037D3                 cmp     r15d, 7FFFFFFFh
.text:00000000000037DA                 jz      loc_3936
.text:00000000000037E0                 lea     r12d, [r15+1]
.text:00000000000037E4                 lea     rax, slotvec0
.text:00000000000037EB                 movsxd  rsi, r12d
.text:00000000000037EE                 shl     rsi, 4
.text:00000000000037F2                 cmp     rbx, rax
.text:00000000000037F5                 jz      loc_3910
.text:00000000000037FB                 mov     rdi, rbx
.text:00000000000037FE                 call    xrealloc
.text:0000000000003803                 mov     rbx, rax
.text:0000000000003806                 mov     cs:slotvec, rax
.text:000000000000380D
.text:000000000000380D loc_380D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000380D                 movsxd  rdi, cs:nslots
.text:0000000000003814                 mov     edx, r12d
.text:0000000000003817                 xor     esi, esi        ; c
.text:0000000000003819                 sub     edx, edi
.text:000000000000381B                 shl     rdi, 4
.text:000000000000381F                 movsxd  rdx, edx
.text:0000000000003822                 add     rdi, rbx        ; s
.text:0000000000003825                 shl     rdx, 4          ; n
.text:0000000000003829                 call    _memset
.text:000000000000382E                 mov     cs:nslots, r12d
.text:0000000000003835
.text:0000000000003835 loc_3835:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003835                 mov     eax, [rbp+4]
.text:0000000000003838                 shl     r15, 4
.text:000000000000383C                 sub     rsp, 8
.text:0000000000003840                 add     rbx, r15
.text:0000000000003843                 lea     r15, [rbp+8]
.text:0000000000003847                 mov     r8d, [rbp+0]
.text:000000000000384B                 mov     r11, [rbx]
.text:000000000000384E                 mov     r12, [rbx+8]
.text:0000000000003852                 mov     rcx, r14
.text:0000000000003855                 or      eax, 1
.text:0000000000003858                 mov     [rsp+60h+var_3C], eax
.text:000000000000385C                 push    qword ptr [rbp+30h]
.text:000000000000385F                 mov     r9d, eax
.text:0000000000003862                 push    qword ptr [rbp+28h]
.text:0000000000003865                 push    r15
.text:0000000000003867                 mov     rsi, r11
.text:000000000000386A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000386F                 mov     rdi, r12
.text:0000000000003872                 mov     [rsp+78h+var_48], r11
.text:0000000000003877                 call    quotearg_buffer_restyled
.text:000000000000387C                 add     rsp, 20h
.text:0000000000003880                 mov     r11, [rsp+58h+var_48]
.text:0000000000003885                 cmp     r11, rax
.text:0000000000003888                 ja      short loc_38F1
.text:000000000000388A                 lea     rsi, [rax+1]
.text:000000000000388E                 lea     rax, slot0
.text:0000000000003895                 cmp     r12, rax
.text:0000000000003898                 mov     [rbx], rsi
.text:000000000000389B                 jz      short loc_38AF
.text:000000000000389D                 mov     rdi, r12        ; ptr
.text:00000000000038A0                 mov     [rsp+58h+var_48], rsi
.text:00000000000038A5                 call    _free
.text:00000000000038AA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000038AF
.text:00000000000038AF loc_38AF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000038AF                 mov     rdi, rsi
.text:00000000000038B2                 mov     [rsp+58h+var_48], rsi
.text:00000000000038B7                 call    xmalloc
.text:00000000000038BC                 sub     rsp, 8
.text:00000000000038C0                 mov     [rbx+8], rax
.text:00000000000038C4                 mov     r8d, [rbp+0]
.text:00000000000038C8                 push    qword ptr [rbp+30h]
.text:00000000000038CB                 push    qword ptr [rbp+28h]
.text:00000000000038CE                 mov     rcx, r14
.text:00000000000038D1                 push    r15
.text:00000000000038D3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000038D8                 mov     rdi, rax
.text:00000000000038DB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000038E0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000038E5                 mov     r12, rax
.text:00000000000038E8                 call    quotearg_buffer_restyled
.text:00000000000038ED                 add     rsp, 20h
.text:00000000000038F1
.text:00000000000038F1 loc_38F1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000038F1                 mov     eax, [rsp+58h+var_40]
.text:00000000000038F5                 mov     [r13+0], eax
.text:00000000000038F9                 add     rsp, 28h
.text:00000000000038FD                 mov     rax, r12
.text:0000000000003900                 pop     rbx
.text:0000000000003901                 pop     rbp
.text:0000000000003902                 pop     r12
.text:0000000000003904                 pop     r13
.text:0000000000003906                 pop     r14
.text:0000000000003908                 pop     r15
.text:000000000000390A                 retn
.text:000000000000390A ; ---------------------------------------------------------------------------
.text:000000000000390B                 align 10h
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003910                 xor     edi, edi
.text:0000000000003912                 call    xrealloc
.text:0000000000003917                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000391F                 mov     rbx, rax
.text:0000000000003922                 mov     cs:slotvec, rax
.text:0000000000003929                 movups  xmmword ptr [rax], xmm0
.text:000000000000392C                 jmp     loc_380D
.text:0000000000003931 ; ---------------------------------------------------------------------------
.text:0000000000003931
.text:0000000000003931 loc_3931:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003931                 call    _abort
.text:0000000000003936 ; ---------------------------------------------------------------------------
.text:0000000000003936
.text:0000000000003936 loc_3936:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003936                 call    xalloc_die
.text:0000000000003936 ; } // starts at 3790
.text:0000000000003936 quotearg_n_options endp
.text:0000000000003936
.text:0000000000003936 ; ---------------------------------------------------------------------------
.text:000000000000393B                 align 20h
.text:0000000000003940
.text:0000000000003940 ; =============== S U B R O U T I N E =======================================
.text:0000000000003940
.text:0000000000003940 ; Attributes: info_from_lumina
.text:0000000000003940
.text:0000000000003940 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003940                 public clone_quoting_options
.text:0000000000003940 clone_quoting_options proc near
.text:0000000000003940 ; __unwind {
.text:0000000000003940                 push    r12
.text:0000000000003942                 push    rbp
.text:0000000000003943                 push    rbx
.text:0000000000003944                 mov     rbx, rdi
.text:0000000000003947                 call    ___errno_location
.text:000000000000394C                 mov     r12d, [rax]
.text:000000000000394F                 mov     rbp, rax
.text:0000000000003952                 lea     rax, default_quoting_options
.text:0000000000003959                 test    rbx, rbx
.text:000000000000395C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003961                 cmovz   rbx, rax
.text:0000000000003965                 mov     rdi, rbx        ; src
.text:0000000000003968                 call    xmemdup
.text:000000000000396D                 mov     [rbp+0], r12d
.text:0000000000003971                 pop     rbx
.text:0000000000003972                 pop     rbp
.text:0000000000003973                 pop     r12
.text:0000000000003975                 retn
.text:0000000000003975 ; } // starts at 3940
.text:0000000000003975 clone_quoting_options endp
.text:0000000000003975
.text:0000000000003975 ; ---------------------------------------------------------------------------
.text:0000000000003976                 align 20h
.text:0000000000003980
.text:0000000000003980 ; =============== S U B R O U T I N E =======================================
.text:0000000000003980
.text:0000000000003980
.text:0000000000003980                 public get_quoting_style
.text:0000000000003980 get_quoting_style proc near
.text:0000000000003980 ; __unwind {
.text:0000000000003980                 lea     rax, default_quoting_options
.text:0000000000003987                 test    rdi, rdi
.text:000000000000398A                 cmovz   rdi, rax
.text:000000000000398E                 mov     eax, [rdi]
.text:0000000000003990                 retn
.text:0000000000003990 ; } // starts at 3980
.text:0000000000003990 get_quoting_style endp
.text:0000000000003990
.text:0000000000003990 ; ---------------------------------------------------------------------------
.text:0000000000003991                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0
.text:00000000000039A0                 public set_quoting_style
.text:00000000000039A0 set_quoting_style proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 lea     rax, default_quoting_options
.text:00000000000039A7                 test    rdi, rdi
.text:00000000000039AA                 cmovz   rdi, rax
.text:00000000000039AE                 mov     [rdi], esi
.text:00000000000039B0                 retn
.text:00000000000039B0 ; } // starts at 39A0
.text:00000000000039B0 set_quoting_style endp
.text:00000000000039B0
.text:00000000000039B0 ; ---------------------------------------------------------------------------
.text:00000000000039B1                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0 ; Attributes: info_from_lumina
.text:00000000000039C0
.text:00000000000039C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000039C0                 public set_char_quoting
.text:00000000000039C0 set_char_quoting proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 lea     rax, default_quoting_options
.text:00000000000039C7                 test    rdi, rdi
.text:00000000000039CA                 mov     ecx, esi
.text:00000000000039CC                 cmovz   rdi, rax
.text:00000000000039D0                 mov     eax, esi
.text:00000000000039D2                 and     ecx, 1Fh
.text:00000000000039D5                 shr     al, 5
.text:00000000000039D8                 movzx   eax, al
.text:00000000000039DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000039E0                 mov     esi, [rdi]
.text:00000000000039E2                 mov     eax, esi
.text:00000000000039E4                 shr     eax, cl
.text:00000000000039E6                 xor     edx, eax
.text:00000000000039E8                 and     eax, 1
.text:00000000000039EB                 and     edx, 1
.text:00000000000039EE                 shl     edx, cl
.text:00000000000039F0                 xor     edx, esi
.text:00000000000039F2                 mov     [rdi], edx
.text:00000000000039F4                 retn
.text:00000000000039F4 ; } // starts at 39C0
.text:00000000000039F4 set_char_quoting endp
.text:00000000000039F4
.text:00000000000039F4 ; ---------------------------------------------------------------------------
.text:00000000000039F5                 align 20h
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00
.text:0000000000003A00                 public set_quoting_flags
.text:0000000000003A00 set_quoting_flags proc near
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 lea     rax, default_quoting_options
.text:0000000000003A07                 test    rdi, rdi
.text:0000000000003A0A                 cmovz   rdi, rax
.text:0000000000003A0E                 mov     eax, [rdi+4]
.text:0000000000003A11                 mov     [rdi+4], esi
.text:0000000000003A14                 retn
.text:0000000000003A14 ; } // starts at 3A00
.text:0000000000003A14 set_quoting_flags endp
.text:0000000000003A14
.text:0000000000003A14 ; ---------------------------------------------------------------------------
.text:0000000000003A15                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20 ; Attributes: info_from_lumina
.text:0000000000003A20
.text:0000000000003A20 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003A20                 public set_custom_quoting
.text:0000000000003A20 set_custom_quoting proc near
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 lea     rax, default_quoting_options
.text:0000000000003A27                 test    rdi, rdi
.text:0000000000003A2A                 cmovz   rdi, rax
.text:0000000000003A2E                 test    rsi, rsi
.text:0000000000003A31                 mov     dword ptr [rdi], 0Ah
.text:0000000000003A37                 jz      short loc_3A47
.text:0000000000003A39                 test    rdx, rdx
.text:0000000000003A3C                 jz      short loc_3A47
.text:0000000000003A3E                 mov     [rdi+28h], rsi
.text:0000000000003A42                 mov     [rdi+30h], rdx
.text:0000000000003A46                 retn
.text:0000000000003A47 ; ---------------------------------------------------------------------------
.text:0000000000003A47
.text:0000000000003A47 loc_3A47:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003A47                                         ; set_custom_quoting+1C↑j
.text:0000000000003A47                 sub     rsp, 8
.text:0000000000003A4B                 call    _abort
.text:0000000000003A4B ; } // starts at 3A20
.text:0000000000003A4B set_custom_quoting endp
.text:0000000000003A4B
.text:0000000000003A50
.text:0000000000003A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A50
.text:0000000000003A50 ; Attributes: info_from_lumina
.text:0000000000003A50
.text:0000000000003A50 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003A50                 public quotearg_buffer
.text:0000000000003A50 quotearg_buffer proc near
.text:0000000000003A50
.text:0000000000003A50 var_40          = qword ptr -40h
.text:0000000000003A50
.text:0000000000003A50 ; __unwind {
.text:0000000000003A50                 push    r15
.text:0000000000003A52                 push    r14
.text:0000000000003A54                 lea     rax, default_quoting_options
.text:0000000000003A5B                 push    r13
.text:0000000000003A5D                 push    r12
.text:0000000000003A5F                 mov     r13, rdi
.text:0000000000003A62                 push    rbp
.text:0000000000003A63                 push    rbx
.text:0000000000003A64                 mov     rbx, r8
.text:0000000000003A67                 mov     r14, rsi
.text:0000000000003A6A                 mov     r15, rdx
.text:0000000000003A6D                 sub     rsp, 18h
.text:0000000000003A71                 test    r8, r8
.text:0000000000003A74                 cmovz   rbx, rax
.text:0000000000003A78                 mov     [rsp+48h+var_40], rcx
.text:0000000000003A7D                 call    ___errno_location
.text:0000000000003A82                 mov     r12d, [rax]
.text:0000000000003A85                 mov     rbp, rax
.text:0000000000003A88                 lea     rax, [rbx+8]
.text:0000000000003A8C                 sub     rsp, 8
.text:0000000000003A90                 mov     r9d, [rbx+4]
.text:0000000000003A94                 push    qword ptr [rbx+30h]
.text:0000000000003A97                 mov     r8d, [rbx]
.text:0000000000003A9A                 push    qword ptr [rbx+28h]
.text:0000000000003A9D                 mov     rdx, r15
.text:0000000000003AA0                 push    rax
.text:0000000000003AA1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003AA6                 mov     rsi, r14
.text:0000000000003AA9                 mov     rdi, r13
.text:0000000000003AAC                 call    quotearg_buffer_restyled
.text:0000000000003AB1                 mov     [rbp+0], r12d
.text:0000000000003AB5                 add     rsp, 38h
.text:0000000000003AB9                 pop     rbx
.text:0000000000003ABA                 pop     rbp
.text:0000000000003ABB                 pop     r12
.text:0000000000003ABD                 pop     r13
.text:0000000000003ABF                 pop     r14
.text:0000000000003AC1                 pop     r15
.text:0000000000003AC3                 retn
.text:0000000000003AC3 ; } // starts at 3A50
.text:0000000000003AC3 quotearg_buffer endp
.text:0000000000003AC3
.text:0000000000003AC3 ; ---------------------------------------------------------------------------
.text:0000000000003AC4                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0 ; Attributes: info_from_lumina
.text:0000000000003AD0
.text:0000000000003AD0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003AD0                 public quotearg_alloc_mem
.text:0000000000003AD0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003AD0
.text:0000000000003AD0 var_5C          = dword ptr -5Ch
.text:0000000000003AD0 var_58          = qword ptr -58h
.text:0000000000003AD0 var_50          = qword ptr -50h
.text:0000000000003AD0 var_48          = qword ptr -48h
.text:0000000000003AD0 var_40          = qword ptr -40h
.text:0000000000003AD0
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 push    r15
.text:0000000000003AD2                 push    r14
.text:0000000000003AD4                 lea     rax, default_quoting_options
.text:0000000000003ADB                 push    r13
.text:0000000000003ADD                 push    r12
.text:0000000000003ADF                 mov     r12, rdx
.text:0000000000003AE2                 push    rbp
.text:0000000000003AE3                 push    rbx
.text:0000000000003AE4                 mov     rbx, rcx
.text:0000000000003AE7                 mov     r14, rdi
.text:0000000000003AEA                 mov     r15, rsi
.text:0000000000003AED                 sub     rsp, 38h
.text:0000000000003AF1                 test    rcx, rcx
.text:0000000000003AF4                 cmovz   rbx, rax
.text:0000000000003AF8                 xor     ebp, ebp
.text:0000000000003AFA                 call    ___errno_location
.text:0000000000003AFF                 test    r12, r12
.text:0000000000003B02                 mov     r13, rax
.text:0000000000003B05                 mov     eax, [rax]
.text:0000000000003B07                 setz    bpl
.text:0000000000003B0B                 or      ebp, [rbx+4]
.text:0000000000003B0E                 lea     r10, [rbx+8]
.text:0000000000003B12                 sub     rsp, 8
.text:0000000000003B16                 mov     r8d, [rbx]
.text:0000000000003B19                 mov     rcx, r15
.text:0000000000003B1C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003B20                 push    qword ptr [rbx+30h]
.text:0000000000003B23                 mov     rdx, r14
.text:0000000000003B26                 push    qword ptr [rbx+28h]
.text:0000000000003B29                 push    r10
.text:0000000000003B2B                 xor     esi, esi
.text:0000000000003B2D                 mov     r9d, ebp
.text:0000000000003B30                 xor     edi, edi
.text:0000000000003B32                 mov     [rsp+88h+var_48], r10
.text:0000000000003B37                 call    quotearg_buffer_restyled
.text:0000000000003B3C                 lea     rsi, [rax+1]
.text:0000000000003B40                 mov     [rsp+88h+var_40], rax
.text:0000000000003B45                 add     rsp, 20h
.text:0000000000003B49                 mov     rdi, rsi
.text:0000000000003B4C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003B51                 call    xmalloc
.text:0000000000003B56                 mov     [rsp+68h+var_58], rax
.text:0000000000003B5B                 sub     rsp, 8
.text:0000000000003B5F                 push    qword ptr [rbx+30h]
.text:0000000000003B62                 push    qword ptr [rbx+28h]
.text:0000000000003B65                 mov     r10, [rsp+80h+var_48]
.text:0000000000003B6A                 mov     r9d, ebp
.text:0000000000003B6D                 mov     r8d, [rbx]
.text:0000000000003B70                 mov     rcx, r15
.text:0000000000003B73                 mov     rdx, r14
.text:0000000000003B76                 mov     rdi, rax
.text:0000000000003B79                 push    r10
.text:0000000000003B7B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003B80                 call    quotearg_buffer_restyled
.text:0000000000003B85                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003B89                 add     rsp, 20h
.text:0000000000003B8D                 test    r12, r12
.text:0000000000003B90                 mov     [r13+0], eax
.text:0000000000003B94                 jz      short loc_3B9F
.text:0000000000003B96                 mov     r11, [rsp+68h+var_40]
.text:0000000000003B9B                 mov     [r12], r11
.text:0000000000003B9F
.text:0000000000003B9F loc_3B9F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000003B9F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003BA4                 add     rsp, 38h
.text:0000000000003BA8                 pop     rbx
.text:0000000000003BA9                 pop     rbp
.text:0000000000003BAA                 pop     r12
.text:0000000000003BAC                 pop     r13
.text:0000000000003BAE                 pop     r14
.text:0000000000003BB0                 pop     r15
.text:0000000000003BB2                 retn
.text:0000000000003BB2 ; } // starts at 3AD0
.text:0000000000003BB2 quotearg_alloc_mem endp
.text:0000000000003BB2
.text:0000000000003BB2 ; ---------------------------------------------------------------------------
.text:0000000000003BB3                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0
.text:0000000000003BC0                 public quotearg_alloc
.text:0000000000003BC0 quotearg_alloc  proc near
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 mov     rcx, rdx
.text:0000000000003BC3                 xor     edx, edx
.text:0000000000003BC5                 jmp     quotearg_alloc_mem
.text:0000000000003BC5 ; } // starts at 3BC0
.text:0000000000003BC5 quotearg_alloc  endp
.text:0000000000003BC5
.text:0000000000003BC5 ; ---------------------------------------------------------------------------
.text:0000000000003BCA                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0 ; Attributes: info_from_lumina
.text:0000000000003BD0
.text:0000000000003BD0 ; void __cdecl quotearg_free()
.text:0000000000003BD0                 public quotearg_free
.text:0000000000003BD0 quotearg_free   proc near
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 mov     eax, cs:nslots
.text:0000000000003BD6                 push    r12
.text:0000000000003BD8                 mov     r12, cs:slotvec
.text:0000000000003BDF                 push    rbp
.text:0000000000003BE0                 push    rbx
.text:0000000000003BE1                 cmp     eax, 1
.text:0000000000003BE4                 jle     short loc_3C11
.text:0000000000003BE6                 sub     eax, 2
.text:0000000000003BE9                 lea     rbx, [r12+18h]
.text:0000000000003BEE                 shl     rax, 4
.text:0000000000003BF2                 lea     rbp, [r12+rax+28h]
.text:0000000000003BF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003C00                 mov     rdi, [rbx]      ; ptr
.text:0000000000003C03                 add     rbx, 10h
.text:0000000000003C07                 call    _free
.text:0000000000003C0C                 cmp     rbx, rbp
.text:0000000000003C0F                 jnz     short loc_3C00
.text:0000000000003C11
.text:0000000000003C11 loc_3C11:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003C11                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003C16                 lea     rbx, slot0
.text:0000000000003C1D                 cmp     rdi, rbx
.text:0000000000003C20                 jz      short loc_3C39
.text:0000000000003C22                 call    _free
.text:0000000000003C27                 mov     cs:slotvec0, 100h
.text:0000000000003C32                 mov     cs:off_207078, rbx
.text:0000000000003C39
.text:0000000000003C39 loc_3C39:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003C39                 lea     rbx, slotvec0
.text:0000000000003C40                 cmp     r12, rbx
.text:0000000000003C43                 jz      short loc_3C54
.text:0000000000003C45                 mov     rdi, r12        ; ptr
.text:0000000000003C48                 call    _free
.text:0000000000003C4D                 mov     cs:slotvec, rbx
.text:0000000000003C54
.text:0000000000003C54 loc_3C54:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003C54                 pop     rbx
.text:0000000000003C55                 mov     cs:nslots, 1
.text:0000000000003C5F                 pop     rbp
.text:0000000000003C60                 pop     r12
.text:0000000000003C62                 retn
.text:0000000000003C62 ; } // starts at 3BD0
.text:0000000000003C62 quotearg_free   endp
.text:0000000000003C62
.text:0000000000003C62 ; ---------------------------------------------------------------------------
.text:0000000000003C63                 align 10h
.text:0000000000003C70
.text:0000000000003C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C70
.text:0000000000003C70
.text:0000000000003C70                 public quotearg_n
.text:0000000000003C70 quotearg_n      proc near
.text:0000000000003C70 ; __unwind {
.text:0000000000003C70                 lea     rcx, default_quoting_options
.text:0000000000003C77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C7E                 jmp     quotearg_n_options
.text:0000000000003C7E ; } // starts at 3C70
.text:0000000000003C7E quotearg_n      endp
.text:0000000000003C7E
.text:0000000000003C7E ; ---------------------------------------------------------------------------
.text:0000000000003C83                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90                 public quotearg_n_mem
.text:0000000000003C90 quotearg_n_mem  proc near
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 lea     rcx, default_quoting_options
.text:0000000000003C97                 jmp     quotearg_n_options
.text:0000000000003C97 ; } // starts at 3C90
.text:0000000000003C97 quotearg_n_mem  endp
.text:0000000000003C97
.text:0000000000003C97 ; ---------------------------------------------------------------------------
.text:0000000000003C9C                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public quotearg
.text:0000000000003CA0 quotearg        proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 lea     rcx, default_quoting_options
.text:0000000000003CA7                 mov     rsi, rdi
.text:0000000000003CAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CB1                 xor     edi, edi
.text:0000000000003CB3                 jmp     quotearg_n_options
.text:0000000000003CB3 ; } // starts at 3CA0
.text:0000000000003CB3 quotearg        endp
.text:0000000000003CB3
.text:0000000000003CB3 ; ---------------------------------------------------------------------------
.text:0000000000003CB8                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0                 public quotearg_mem
.text:0000000000003CC0 quotearg_mem    proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 lea     rcx, default_quoting_options
.text:0000000000003CC7                 mov     rdx, rsi
.text:0000000000003CCA                 mov     rsi, rdi
.text:0000000000003CCD                 xor     edi, edi
.text:0000000000003CCF                 jmp     quotearg_n_options
.text:0000000000003CCF ; } // starts at 3CC0
.text:0000000000003CCF quotearg_mem    endp
.text:0000000000003CCF
.text:0000000000003CCF ; ---------------------------------------------------------------------------
.text:0000000000003CD4                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0 ; Attributes: info_from_lumina
.text:0000000000003CE0
.text:0000000000003CE0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003CE0                 public quotearg_n_style
.text:0000000000003CE0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003CE0
.text:0000000000003CE0 var_48          = dword ptr -48h
.text:0000000000003CE0 var_44          = qword ptr -44h
.text:0000000000003CE0 var_3C          = qword ptr -3Ch
.text:0000000000003CE0 var_34          = qword ptr -34h
.text:0000000000003CE0 var_2C          = qword ptr -2Ch
.text:0000000000003CE0 var_24          = qword ptr -24h
.text:0000000000003CE0 var_1C          = qword ptr -1Ch
.text:0000000000003CE0 var_14          = dword ptr -14h
.text:0000000000003CE0 var_10          = qword ptr -10h
.text:0000000000003CE0
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 sub     rsp, 48h
.text:0000000000003CE4                 mov     rax, rdx
.text:0000000000003CE7                 mov     rdx, fs:28h
.text:0000000000003CF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003CF5                 xor     edx, edx
.text:0000000000003CF7                 cmp     esi, 0Ah
.text:0000000000003CFA                 jz      short loc_3D64
.text:0000000000003CFC                 mov     [rsp+48h+var_48], esi
.text:0000000000003CFF                 mov     rcx, rsp
.text:0000000000003D02                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D09                 mov     rsi, rax
.text:0000000000003D0C                 mov     [rsp+48h+var_44], 0
.text:0000000000003D15                 mov     [rsp+48h+var_3C], 0
.text:0000000000003D1E                 mov     [rsp+48h+var_34], 0
.text:0000000000003D27                 mov     [rsp+48h+var_2C], 0
.text:0000000000003D30                 mov     [rsp+48h+var_24], 0
.text:0000000000003D39                 mov     [rsp+48h+var_1C], 0
.text:0000000000003D42                 mov     [rsp+48h+var_14], 0
.text:0000000000003D4A                 call    quotearg_n_options
.text:0000000000003D4F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003D54                 xor     rcx, fs:28h
.text:0000000000003D5D                 jnz     short loc_3D69
.text:0000000000003D5F                 add     rsp, 48h
.text:0000000000003D63                 retn
.text:0000000000003D64 ; ---------------------------------------------------------------------------
.text:0000000000003D64
.text:0000000000003D64 loc_3D64:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003D64                 call    _abort
.text:0000000000003D69 ; ---------------------------------------------------------------------------
.text:0000000000003D69
.text:0000000000003D69 loc_3D69:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003D69                 call    ___stack_chk_fail
.text:0000000000003D69 ; } // starts at 3CE0
.text:0000000000003D69 quotearg_n_style endp
.text:0000000000003D69
.text:0000000000003D69 ; ---------------------------------------------------------------------------
.text:0000000000003D6E                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70 ; Attributes: info_from_lumina
.text:0000000000003D70
.text:0000000000003D70 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003D70                 public quotearg_n_style_mem
.text:0000000000003D70 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003D70
.text:0000000000003D70 var_48          = dword ptr -48h
.text:0000000000003D70 var_44          = qword ptr -44h
.text:0000000000003D70 var_3C          = qword ptr -3Ch
.text:0000000000003D70 var_34          = qword ptr -34h
.text:0000000000003D70 var_2C          = qword ptr -2Ch
.text:0000000000003D70 var_24          = qword ptr -24h
.text:0000000000003D70 var_1C          = qword ptr -1Ch
.text:0000000000003D70 var_14          = dword ptr -14h
.text:0000000000003D70 var_10          = qword ptr -10h
.text:0000000000003D70
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 sub     rsp, 48h
.text:0000000000003D74                 mov     rax, rdx
.text:0000000000003D77                 mov     rdx, rcx
.text:0000000000003D7A                 mov     rcx, fs:28h
.text:0000000000003D83                 mov     [rsp+48h+var_10], rcx
.text:0000000000003D88                 xor     ecx, ecx
.text:0000000000003D8A                 cmp     esi, 0Ah
.text:0000000000003D8D                 jz      short loc_3DF0
.text:0000000000003D8F                 mov     [rsp+48h+var_48], esi
.text:0000000000003D92                 mov     rcx, rsp
.text:0000000000003D95                 mov     rsi, rax
.text:0000000000003D98                 mov     [rsp+48h+var_44], 0
.text:0000000000003DA1                 mov     [rsp+48h+var_3C], 0
.text:0000000000003DAA                 mov     [rsp+48h+var_34], 0
.text:0000000000003DB3                 mov     [rsp+48h+var_2C], 0
.text:0000000000003DBC                 mov     [rsp+48h+var_24], 0
.text:0000000000003DC5                 mov     [rsp+48h+var_1C], 0
.text:0000000000003DCE                 mov     [rsp+48h+var_14], 0
.text:0000000000003DD6                 call    quotearg_n_options
.text:0000000000003DDB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003DE0                 xor     rdx, fs:28h
.text:0000000000003DE9                 jnz     short loc_3DF5
.text:0000000000003DEB                 add     rsp, 48h
.text:0000000000003DEF                 retn
.text:0000000000003DF0 ; ---------------------------------------------------------------------------
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003DF0                 call    _abort
.text:0000000000003DF5 ; ---------------------------------------------------------------------------
.text:0000000000003DF5
.text:0000000000003DF5 loc_3DF5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003DF5                 call    ___stack_chk_fail
.text:0000000000003DF5 ; } // starts at 3D70
.text:0000000000003DF5 quotearg_n_style_mem endp
.text:0000000000003DF5
.text:0000000000003DF5 ; ---------------------------------------------------------------------------
.text:0000000000003DFA                 align 20h
.text:0000000000003E00
.text:0000000000003E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E00
.text:0000000000003E00
.text:0000000000003E00                 public quotearg_style
.text:0000000000003E00 quotearg_style  proc near               ; CODE XREF: main+1F2↑p
.text:0000000000003E00                                         ; main+24D↑p
.text:0000000000003E00 ; __unwind {
.text:0000000000003E00                 mov     rdx, rsi
.text:0000000000003E03                 mov     esi, edi
.text:0000000000003E05                 xor     edi, edi
.text:0000000000003E07                 jmp     quotearg_n_style
.text:0000000000003E07 ; } // starts at 3E00
.text:0000000000003E07 quotearg_style  endp
.text:0000000000003E07
.text:0000000000003E07 ; ---------------------------------------------------------------------------
.text:0000000000003E0C                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10
.text:0000000000003E10                 public quotearg_style_mem
.text:0000000000003E10 quotearg_style_mem proc near
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 mov     rcx, rdx
.text:0000000000003E13                 mov     rdx, rsi
.text:0000000000003E16                 mov     esi, edi
.text:0000000000003E18                 xor     edi, edi
.text:0000000000003E1A                 jmp     quotearg_n_style_mem
.text:0000000000003E1A ; } // starts at 3E10
.text:0000000000003E1A quotearg_style_mem endp
.text:0000000000003E1A
.text:0000000000003E1A ; ---------------------------------------------------------------------------
.text:0000000000003E1F                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20 ; Attributes: info_from_lumina
.text:0000000000003E20
.text:0000000000003E20 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003E20                 public quotearg_char_mem
.text:0000000000003E20 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003E20                                         ; quotearg_colon+C↓j ...
.text:0000000000003E20
.text:0000000000003E20 var_48          = xmmword ptr -48h
.text:0000000000003E20 var_38          = xmmword ptr -38h
.text:0000000000003E20 var_28          = xmmword ptr -28h
.text:0000000000003E20 var_18          = qword ptr -18h
.text:0000000000003E20 var_10          = qword ptr -10h
.text:0000000000003E20
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 sub     rsp, 48h
.text:0000000000003E24                 mov     ecx, edx
.text:0000000000003E26                 mov     rax, fs:28h
.text:0000000000003E2F                 mov     [rsp+48h+var_10], rax
.text:0000000000003E34                 xor     eax, eax
.text:0000000000003E36                 mov     rax, cs:qword_207230
.text:0000000000003E3D                 mov     r8, rsp
.text:0000000000003E40                 and     ecx, 1Fh
.text:0000000000003E43                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003E4B                 mov     [rsp+48h+var_18], rax
.text:0000000000003E50                 mov     eax, edx
.text:0000000000003E52                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003E56                 shr     al, 5
.text:0000000000003E59                 movzx   eax, al
.text:0000000000003E5C                 lea     r9, [r8+rax*4+8]
.text:0000000000003E61                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003E69                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003E6E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003E76                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003E7B                 mov     edx, [r9]
.text:0000000000003E7E                 mov     eax, edx
.text:0000000000003E80                 shr     eax, cl
.text:0000000000003E82                 not     eax
.text:0000000000003E84                 and     eax, 1
.text:0000000000003E87                 shl     eax, cl
.text:0000000000003E89                 mov     rcx, r8
.text:0000000000003E8C                 xor     eax, edx
.text:0000000000003E8E                 mov     rdx, rsi
.text:0000000000003E91                 mov     rsi, rdi
.text:0000000000003E94                 mov     [r9], eax
.text:0000000000003E97                 xor     edi, edi
.text:0000000000003E99                 call    quotearg_n_options
.text:0000000000003E9E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003EA3                 xor     rsi, fs:28h
.text:0000000000003EAC                 jnz     short loc_3EB3
.text:0000000000003EAE                 add     rsp, 48h
.text:0000000000003EB2                 retn
.text:0000000000003EB3 ; ---------------------------------------------------------------------------
.text:0000000000003EB3
.text:0000000000003EB3 loc_3EB3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003EB3                 call    ___stack_chk_fail
.text:0000000000003EB3 ; } // starts at 3E20
.text:0000000000003EB3 quotearg_char_mem endp
.text:0000000000003EB3
.text:0000000000003EB3 ; ---------------------------------------------------------------------------
.text:0000000000003EB8                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public quotearg_char
.text:0000000000003EC0 quotearg_char   proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 movsx   edx, sil
.text:0000000000003EC4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003ECB                 jmp     quotearg_char_mem
.text:0000000000003ECB ; } // starts at 3EC0
.text:0000000000003ECB quotearg_char   endp
.text:0000000000003ECB
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0
.text:0000000000003ED0                 public quotearg_colon
.text:0000000000003ED0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 mov     edx, 3Ah ; ':'
.text:0000000000003ED5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EDC                 jmp     quotearg_char_mem
.text:0000000000003EDC ; } // starts at 3ED0
.text:0000000000003EDC quotearg_colon  endp
.text:0000000000003EDC
.text:0000000000003EDC ; ---------------------------------------------------------------------------
.text:0000000000003EE1                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0
.text:0000000000003EF0                 public quotearg_colon_mem
.text:0000000000003EF0 quotearg_colon_mem proc near
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 mov     edx, 3Ah ; ':'
.text:0000000000003EF5                 jmp     quotearg_char_mem
.text:0000000000003EF5 ; } // starts at 3EF0
.text:0000000000003EF5 quotearg_colon_mem endp
.text:0000000000003EF5
.text:0000000000003EF5 ; ---------------------------------------------------------------------------
.text:0000000000003EFA                 align 20h
.text:0000000000003F00
.text:0000000000003F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F00
.text:0000000000003F00 ; Attributes: info_from_lumina
.text:0000000000003F00
.text:0000000000003F00 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003F00                 public quotearg_n_style_colon
.text:0000000000003F00 quotearg_n_style_colon proc near
.text:0000000000003F00
.text:0000000000003F00 var_48          = dword ptr -48h
.text:0000000000003F00 var_44          = qword ptr -44h
.text:0000000000003F00 var_3C          = qword ptr -3Ch
.text:0000000000003F00 var_34          = qword ptr -34h
.text:0000000000003F00 var_2C          = qword ptr -2Ch
.text:0000000000003F00 var_24          = qword ptr -24h
.text:0000000000003F00 var_1C          = qword ptr -1Ch
.text:0000000000003F00 var_14          = dword ptr -14h
.text:0000000000003F00 var_10          = qword ptr -10h
.text:0000000000003F00
.text:0000000000003F00 ; __unwind {
.text:0000000000003F00                 sub     rsp, 48h
.text:0000000000003F04                 mov     rax, rdx
.text:0000000000003F07                 mov     rdx, fs:28h
.text:0000000000003F10                 mov     [rsp+48h+var_10], rdx
.text:0000000000003F15                 xor     edx, edx
.text:0000000000003F17                 cmp     esi, 0Ah
.text:0000000000003F1A                 jz      short loc_3F84
.text:0000000000003F1C                 mov     [rsp+48h+var_48], esi
.text:0000000000003F1F                 mov     rcx, rsp
.text:0000000000003F22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F29                 mov     rsi, rax
.text:0000000000003F2C                 mov     [rsp+48h+var_44], 0
.text:0000000000003F35                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003F3E                 mov     [rsp+48h+var_34], 0
.text:0000000000003F47                 mov     [rsp+48h+var_2C], 0
.text:0000000000003F50                 mov     [rsp+48h+var_24], 0
.text:0000000000003F59                 mov     [rsp+48h+var_1C], 0
.text:0000000000003F62                 mov     [rsp+48h+var_14], 0
.text:0000000000003F6A                 call    quotearg_n_options
.text:0000000000003F6F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003F74                 xor     rcx, fs:28h
.text:0000000000003F7D                 jnz     short loc_3F89
.text:0000000000003F7F                 add     rsp, 48h
.text:0000000000003F83                 retn
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003F84                 call    _abort
.text:0000000000003F89 ; ---------------------------------------------------------------------------
.text:0000000000003F89
.text:0000000000003F89 loc_3F89:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003F89                 call    ___stack_chk_fail
.text:0000000000003F89 ; } // starts at 3F00
.text:0000000000003F89 quotearg_n_style_colon endp
.text:0000000000003F89
.text:0000000000003F89 ; ---------------------------------------------------------------------------
.text:0000000000003F8E                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90 ; Attributes: info_from_lumina
.text:0000000000003F90
.text:0000000000003F90 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003F90                 public quotearg_n_custom_mem
.text:0000000000003F90 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003F90                                         ; quotearg_custom+12↓j ...
.text:0000000000003F90
.text:0000000000003F90 var_48          = xmmword ptr -48h
.text:0000000000003F90 var_38          = xmmword ptr -38h
.text:0000000000003F90 var_28          = xmmword ptr -28h
.text:0000000000003F90 var_18          = qword ptr -18h
.text:0000000000003F90 var_10          = qword ptr -10h
.text:0000000000003F90
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 sub     rsp, 48h
.text:0000000000003F94                 mov     r9, rcx
.text:0000000000003F97                 mov     rcx, cs:qword_207230
.text:0000000000003F9E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003FA6                 mov     rax, fs:28h
.text:0000000000003FAF                 mov     [rsp+48h+var_10], rax
.text:0000000000003FB4                 xor     eax, eax
.text:0000000000003FB6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003FBA                 test    rsi, rsi
.text:0000000000003FBD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003FC2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003FC9                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003FD1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003FD6                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003FDE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003FE3                 jz      short loc_4017
.text:0000000000003FE5                 test    rdx, rdx
.text:0000000000003FE8                 jz      short loc_4017
.text:0000000000003FEA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003FEF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003FF4                 mov     rcx, rsp
.text:0000000000003FF7                 mov     rdx, r8
.text:0000000000003FFA                 mov     rsi, r9
.text:0000000000003FFD                 call    quotearg_n_options
.text:0000000000004002                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004007                 xor     rdi, fs:28h
.text:0000000000004010                 jnz     short loc_401C
.text:0000000000004012                 add     rsp, 48h
.text:0000000000004016                 retn
.text:0000000000004017 ; ---------------------------------------------------------------------------
.text:0000000000004017
.text:0000000000004017 loc_4017:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004017                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004017                 call    _abort
.text:000000000000401C ; ---------------------------------------------------------------------------
.text:000000000000401C
.text:000000000000401C loc_401C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000401C                 call    ___stack_chk_fail
.text:000000000000401C ; } // starts at 3F90
.text:000000000000401C quotearg_n_custom_mem endp
.text:000000000000401C
.text:000000000000401C ; ---------------------------------------------------------------------------
.text:0000000000004021                 align 10h
.text:0000000000004030
.text:0000000000004030 ; =============== S U B R O U T I N E =======================================
.text:0000000000004030
.text:0000000000004030
.text:0000000000004030                 public quotearg_n_custom
.text:0000000000004030 quotearg_n_custom proc near
.text:0000000000004030 ; __unwind {
.text:0000000000004030                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004037                 jmp     quotearg_n_custom_mem
.text:0000000000004037 ; } // starts at 4030
.text:0000000000004037 quotearg_n_custom endp
.text:0000000000004037
.text:0000000000004037 ; ---------------------------------------------------------------------------
.text:000000000000403C                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040
.text:0000000000004040                 public quotearg_custom
.text:0000000000004040 quotearg_custom proc near
.text:0000000000004040 ; __unwind {
.text:0000000000004040                 mov     rcx, rdx
.text:0000000000004043                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000404A                 mov     rdx, rsi
.text:000000000000404D                 mov     rsi, rdi
.text:0000000000004050                 xor     edi, edi
.text:0000000000004052                 jmp     quotearg_n_custom_mem
.text:0000000000004052 ; } // starts at 4040
.text:0000000000004052 quotearg_custom endp
.text:0000000000004052
.text:0000000000004052 ; ---------------------------------------------------------------------------
.text:0000000000004057                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060
.text:0000000000004060                 public quotearg_custom_mem
.text:0000000000004060 quotearg_custom_mem proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 mov     r8, rcx
.text:0000000000004063                 mov     rcx, rdx
.text:0000000000004066                 mov     rdx, rsi
.text:0000000000004069                 mov     rsi, rdi
.text:000000000000406C                 xor     edi, edi
.text:000000000000406E                 jmp     quotearg_n_custom_mem
.text:000000000000406E ; } // starts at 4060
.text:000000000000406E quotearg_custom_mem endp
.text:000000000000406E
.text:000000000000406E ; ---------------------------------------------------------------------------
.text:0000000000004073                 align 20h
.text:0000000000004080
.text:0000000000004080 ; =============== S U B R O U T I N E =======================================
.text:0000000000004080
.text:0000000000004080
.text:0000000000004080                 public quote_n_mem
.text:0000000000004080 quote_n_mem     proc near
.text:0000000000004080 ; __unwind {
.text:0000000000004080                 lea     rcx, quote_quoting_options
.text:0000000000004087                 jmp     quotearg_n_options
.text:0000000000004087 ; } // starts at 4080
.text:0000000000004087 quote_n_mem     endp
.text:0000000000004087
.text:0000000000004087 ; ---------------------------------------------------------------------------
.text:000000000000408C                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090
.text:0000000000004090                 public quote_mem
.text:0000000000004090 quote_mem       proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 lea     rcx, quote_quoting_options
.text:0000000000004097                 mov     rdx, rsi
.text:000000000000409A                 mov     rsi, rdi
.text:000000000000409D                 xor     edi, edi
.text:000000000000409F                 jmp     quotearg_n_options
.text:000000000000409F ; } // starts at 4090
.text:000000000000409F quote_mem       endp
.text:000000000000409F
.text:000000000000409F ; ---------------------------------------------------------------------------
.text:00000000000040A4                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0
.text:00000000000040B0                 public quote_n
.text:00000000000040B0 quote_n         proc near
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 lea     rcx, quote_quoting_options
.text:00000000000040B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000040BE                 jmp     quotearg_n_options
.text:00000000000040BE ; } // starts at 40B0
.text:00000000000040BE quote_n         endp
.text:00000000000040BE
.text:00000000000040BE ; ---------------------------------------------------------------------------
.text:00000000000040C3                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0
.text:00000000000040D0                 public quote
.text:00000000000040D0 quote           proc near
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 lea     rcx, quote_quoting_options
.text:00000000000040D7                 mov     rsi, rdi
.text:00000000000040DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000040E1                 xor     edi, edi
.text:00000000000040E3                 jmp     quotearg_n_options
.text:00000000000040E3 ; } // starts at 40D0
.text:00000000000040E3 quote           endp
.text:00000000000040E3
.text:00000000000040E3 ; ---------------------------------------------------------------------------
.text:00000000000040E8                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0
.text:00000000000040F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000040F0                 public version_etc_arn
.text:00000000000040F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_452B↓j
.text:00000000000040F0                                         ; version_etc_va:loc_457B↓p ...
.text:00000000000040F0
.text:00000000000040F0 var_58          = qword ptr -58h
.text:00000000000040F0 var_50          = qword ptr -50h
.text:00000000000040F0 var_48          = qword ptr -48h
.text:00000000000040F0 var_40          = qword ptr -40h
.text:00000000000040F0
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    r15
.text:00000000000040F2                 push    r14
.text:00000000000040F4                 push    r13
.text:00000000000040F6                 push    r12
.text:00000000000040F8                 mov     r12, r9
.text:00000000000040FB                 push    rbp
.text:00000000000040FC                 push    rbx
.text:00000000000040FD                 mov     rbp, rdi
.text:0000000000004100                 mov     rbx, r8
.text:0000000000004103                 sub     rsp, 28h
.text:0000000000004107                 test    rsi, rsi
.text:000000000000410A                 jz      loc_4228
.text:0000000000004110                 mov     r8, rdx
.text:0000000000004113                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000411A                 mov     r9, rcx
.text:000000000000411D                 xor     eax, eax
.text:000000000000411F                 mov     rcx, rsi
.text:0000000000004122                 mov     esi, 1
.text:0000000000004127                 call    ___fprintf_chk
.text:000000000000412C
.text:000000000000412C loc_412C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000412C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004133                 xor     edi, edi        ; domainname
.text:0000000000004135                 mov     edx, 5          ; category
.text:000000000000413A                 call    _dcgettext
.text:000000000000413F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004146                 mov     rcx, rax
.text:0000000000004149                 mov     r8d, 7E3h
.text:000000000000414F                 mov     esi, 1
.text:0000000000004154                 mov     rdi, rbp
.text:0000000000004157                 xor     eax, eax
.text:0000000000004159                 call    ___fprintf_chk
.text:000000000000415E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004165                 xor     edi, edi        ; domainname
.text:0000000000004167                 mov     edx, 5          ; category
.text:000000000000416C                 call    _dcgettext
.text:0000000000004171                 mov     rsi, rbp        ; stream
.text:0000000000004174                 mov     rdi, rax        ; s
.text:0000000000004177                 call    _fputs_unlocked
.text:000000000000417C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004180                 ja      def_4194        ; jumptable 0000000000004194 default case
.text:0000000000004186                 lea     rdx, jpt_4194
.text:000000000000418D                 movsxd  rax, ds:(jpt_4194 - 5A88h)[rdx+r12*4]
.text:0000000000004191                 add     rax, rdx
.text:0000000000004194                 jmp     rax             ; switch jump
.text:0000000000004194 ; ---------------------------------------------------------------------------
.text:0000000000004196                 align 20h
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041A0                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000041A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004194 case 8
.text:00000000000041A4                 mov     rax, [rbx+10h]
.text:00000000000041A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000041AF                 mov     r8, [rbx+8]
.text:00000000000041B3                 mov     edx, 5          ; category
.text:00000000000041B8                 xor     edi, edi        ; domainname
.text:00000000000041BA                 mov     r13, [rbx+30h]
.text:00000000000041BE                 mov     r12, [rbx+28h]
.text:00000000000041C2                 mov     [rsp+58h+var_48], r9
.text:00000000000041C7                 mov     r15, [rbx+20h]
.text:00000000000041CB                 mov     r14, [rbx+18h]
.text:00000000000041CF                 mov     [rsp+58h+var_58], rax
.text:00000000000041D3                 mov     [rsp+58h+var_50], r8
.text:00000000000041D8                 mov     rbx, [rbx]
.text:00000000000041DB                 call    _dcgettext
.text:00000000000041E0                 sub     rsp, 8
.text:00000000000041E4
.text:00000000000041E4 loc_41E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000041E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000041E9                 mov     rdx, rax
.text:00000000000041EC                 mov     rcx, rbx
.text:00000000000041EF                 mov     esi, 1
.text:00000000000041F4                 mov     rdi, rbp
.text:00000000000041F7                 xor     eax, eax
.text:00000000000041F9                 push    r9
.text:00000000000041FB                 push    r13
.text:00000000000041FD                 push    r12
.text:00000000000041FF                 push    r15
.text:0000000000004201                 push    r14
.text:0000000000004203                 mov     r9, [rsp+88h+var_58]
.text:0000000000004208                 mov     r8, [rsp+88h+var_50]
.text:000000000000420D                 call    ___fprintf_chk
.text:0000000000004212                 add     rsp, 30h
.text:0000000000004216
.text:0000000000004216 loc_4216:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004216                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004216                 add     rsp, 28h        ; jumptable 0000000000004194 case 0
.text:000000000000421A                 pop     rbx
.text:000000000000421B                 pop     rbp
.text:000000000000421C                 pop     r12
.text:000000000000421E                 pop     r13
.text:0000000000004220                 pop     r14
.text:0000000000004222                 pop     r15
.text:0000000000004224                 retn
.text:0000000000004224 ; ---------------------------------------------------------------------------
.text:0000000000004225                 align 8
.text:0000000000004228
.text:0000000000004228 loc_4228:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004228                 mov     r8, rcx
.text:000000000000422B                 mov     rcx, rdx
.text:000000000000422E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004235                 mov     esi, 1
.text:000000000000423A                 xor     eax, eax
.text:000000000000423C                 call    ___fprintf_chk
.text:0000000000004241                 jmp     loc_412C
.text:0000000000004241 ; ---------------------------------------------------------------------------
.text:0000000000004246                 align 10h
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004250                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004250                 mov     r10, [rbx+40h]  ; jumptable 0000000000004194 case 9
.text:0000000000004254                 mov     r9, [rbx+38h]
.text:0000000000004258                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000425F                 mov     rax, [rbx+10h]
.text:0000000000004263                 mov     r8, [rbx+8]
.text:0000000000004267                 mov     edx, 5          ; category
.text:000000000000426C                 mov     r13, [rbx+30h]
.text:0000000000004270                 mov     r12, [rbx+28h]
.text:0000000000004274                 mov     r15, [rbx+20h]
.text:0000000000004278                 mov     r14, [rbx+18h]
.text:000000000000427C                 mov     rbx, [rbx]
.text:000000000000427F                 mov     [rsp+58h+var_40], r10
.text:0000000000004284                 mov     [rsp+58h+var_48], r9
.text:0000000000004289                 mov     [rsp+58h+var_58], rax
.text:000000000000428D                 mov     [rsp+58h+var_50], r8
.text:0000000000004292
.text:0000000000004292 loc_4292:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004292                 xor     edi, edi        ; domainname
.text:0000000000004294                 call    _dcgettext
.text:0000000000004299                 mov     r10, [rsp+58h+var_40]
.text:000000000000429E                 push    r10
.text:00000000000042A0                 jmp     loc_41E4
.text:00000000000042A0 ; ---------------------------------------------------------------------------
.text:00000000000042A5                 align 8
.text:00000000000042A8
.text:00000000000042A8 loc_42A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000042A8                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000042A8                 mov     rbx, [rbx]      ; jumptable 0000000000004194 case 1
.text:00000000000042AB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000042B2                 mov     edx, 5          ; category
.text:00000000000042B7                 xor     edi, edi        ; domainname
.text:00000000000042B9                 call    _dcgettext
.text:00000000000042BE                 add     rsp, 28h
.text:00000000000042C2                 mov     rcx, rbx
.text:00000000000042C5                 mov     rdi, rbp
.text:00000000000042C8                 pop     rbx
.text:00000000000042C9                 pop     rbp
.text:00000000000042CA                 pop     r12
.text:00000000000042CC                 pop     r13
.text:00000000000042CE                 pop     r14
.text:00000000000042D0                 pop     r15
.text:00000000000042D2                 mov     rdx, rax
.text:00000000000042D5                 mov     esi, 1
.text:00000000000042DA                 xor     eax, eax
.text:00000000000042DC                 jmp     ___fprintf_chk
.text:00000000000042DC ; ---------------------------------------------------------------------------
.text:00000000000042E1                 align 8
.text:00000000000042E8
.text:00000000000042E8 loc_42E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000042E8                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000042E8                 mov     r12, [rbx+8]    ; jumptable 0000000000004194 case 2
.text:00000000000042EC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000042F3                 mov     rbx, [rbx]
.text:00000000000042F6                 mov     edx, 5          ; category
.text:00000000000042FB                 xor     edi, edi        ; domainname
.text:00000000000042FD                 call    _dcgettext
.text:0000000000004302                 add     rsp, 28h
.text:0000000000004306                 mov     r8, r12
.text:0000000000004309                 mov     rcx, rbx
.text:000000000000430C                 mov     rdi, rbp
.text:000000000000430F                 mov     rdx, rax
.text:0000000000004312                 mov     esi, 1
.text:0000000000004317                 pop     rbx
.text:0000000000004318                 pop     rbp
.text:0000000000004319                 pop     r12
.text:000000000000431B                 pop     r13
.text:000000000000431D                 pop     r14
.text:000000000000431F                 pop     r15
.text:0000000000004321                 xor     eax, eax
.text:0000000000004323                 jmp     ___fprintf_chk
.text:0000000000004323 ; ---------------------------------------------------------------------------
.text:0000000000004328                 align 10h
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004330                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004330                 mov     r13, [rbx+10h]  ; jumptable 0000000000004194 case 3
.text:0000000000004334                 mov     r12, [rbx+8]
.text:0000000000004338                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000433F                 mov     rbx, [rbx]
.text:0000000000004342                 mov     edx, 5          ; category
.text:0000000000004347                 xor     edi, edi        ; domainname
.text:0000000000004349                 call    _dcgettext
.text:000000000000434E                 add     rsp, 28h
.text:0000000000004352                 mov     r9, r13
.text:0000000000004355                 mov     r8, r12
.text:0000000000004358                 mov     rcx, rbx
.text:000000000000435B                 mov     rdi, rbp
.text:000000000000435E                 mov     rdx, rax
.text:0000000000004361                 pop     rbx
.text:0000000000004362                 pop     rbp
.text:0000000000004363                 pop     r12
.text:0000000000004365                 pop     r13
.text:0000000000004367                 pop     r14
.text:0000000000004369                 pop     r15
.text:000000000000436B                 mov     esi, 1
.text:0000000000004370                 xor     eax, eax
.text:0000000000004372                 jmp     ___fprintf_chk
.text:0000000000004372 ; ---------------------------------------------------------------------------
.text:0000000000004377                 align 20h
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004380                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004380                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004194 case 4
.text:0000000000004387                 mov     edx, 5          ; category
.text:000000000000438C                 xor     edi, edi        ; domainname
.text:000000000000438E                 mov     r14, [rbx+18h]
.text:0000000000004392                 mov     r13, [rbx+10h]
.text:0000000000004396                 mov     r12, [rbx+8]
.text:000000000000439A                 mov     rbx, [rbx]
.text:000000000000439D                 call    _dcgettext
.text:00000000000043A2                 sub     rsp, 8
.text:00000000000043A6
.text:00000000000043A6 loc_43A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000043A6                 push    r14
.text:00000000000043A8                 mov     rdx, rax
.text:00000000000043AB                 mov     r9, r13
.text:00000000000043AE                 mov     r8, r12
.text:00000000000043B1                 mov     rcx, rbx
.text:00000000000043B4                 mov     rdi, rbp
.text:00000000000043B7                 mov     esi, 1
.text:00000000000043BC                 xor     eax, eax
.text:00000000000043BE                 call    ___fprintf_chk
.text:00000000000043C3                 pop     rax
.text:00000000000043C4                 pop     rdx
.text:00000000000043C5                 add     rsp, 28h
.text:00000000000043C9                 pop     rbx
.text:00000000000043CA                 pop     rbp
.text:00000000000043CB                 pop     r12
.text:00000000000043CD                 pop     r13
.text:00000000000043CF                 pop     r14
.text:00000000000043D1                 pop     r15
.text:00000000000043D3                 retn
.text:00000000000043D3 ; ---------------------------------------------------------------------------
.text:00000000000043D4                 align 8
.text:00000000000043D8
.text:00000000000043D8 loc_43D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000043D8                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000043D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004194 case 5
.text:00000000000043DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000043E3                 mov     edx, 5          ; category
.text:00000000000043E8                 xor     edi, edi        ; domainname
.text:00000000000043EA                 mov     r14, [rbx+18h]
.text:00000000000043EE                 mov     r13, [rbx+10h]
.text:00000000000043F2                 mov     r12, [rbx+8]
.text:00000000000043F6                 mov     rbx, [rbx]
.text:00000000000043F9                 call    _dcgettext
.text:00000000000043FE                 push    r15
.text:0000000000004400                 jmp     short loc_43A6
.text:0000000000004400 ; ---------------------------------------------------------------------------
.text:0000000000004402                 align 8
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004408                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004408                 mov     r8, [rbx+8]     ; jumptable 0000000000004194 case 6
.text:000000000000440C                 mov     r12, [rbx+28h]
.text:0000000000004410                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004417                 mov     r15, [rbx+20h]
.text:000000000000441B                 mov     r14, [rbx+18h]
.text:000000000000441F                 mov     edx, 5          ; category
.text:0000000000004424                 mov     r13, [rbx+10h]
.text:0000000000004428                 xor     edi, edi        ; domainname
.text:000000000000442A                 mov     rbx, [rbx]
.text:000000000000442D                 mov     [rsp+58h+var_58], r8
.text:0000000000004431                 call    _dcgettext
.text:0000000000004436                 sub     rsp, 8
.text:000000000000443A                 mov     r9, r13
.text:000000000000443D                 push    r12
.text:000000000000443F                 push    r15
.text:0000000000004441                 push    r14
.text:0000000000004443
.text:0000000000004443 loc_4443:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004443                 mov     r8, [rsp+78h+var_58]
.text:0000000000004448                 mov     rcx, rbx
.text:000000000000444B                 mov     rdx, rax
.text:000000000000444E                 mov     rdi, rbp
.text:0000000000004451                 mov     esi, 1
.text:0000000000004456                 xor     eax, eax
.text:0000000000004458                 call    ___fprintf_chk
.text:000000000000445D                 add     rsp, 20h
.text:0000000000004461                 add     rsp, 28h
.text:0000000000004465                 pop     rbx
.text:0000000000004466                 pop     rbp
.text:0000000000004467                 pop     r12
.text:0000000000004469                 pop     r13
.text:000000000000446B                 pop     r14
.text:000000000000446D                 pop     r15
.text:000000000000446F                 retn
.text:0000000000004470 ; ---------------------------------------------------------------------------
.text:0000000000004470
.text:0000000000004470 loc_4470:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004470                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004470                 mov     r9, [rbx+10h]   ; jumptable 0000000000004194 case 7
.text:0000000000004474                 mov     r13, [rbx+30h]
.text:0000000000004478                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000447F                 mov     r12, [rbx+28h]
.text:0000000000004483                 mov     r15, [rbx+20h]
.text:0000000000004487                 mov     edx, 5          ; category
.text:000000000000448C                 mov     r14, [rbx+18h]
.text:0000000000004490                 mov     r8, [rbx+8]
.text:0000000000004494                 xor     edi, edi        ; domainname
.text:0000000000004496                 mov     [rsp+58h+var_50], r9
.text:000000000000449B                 mov     rbx, [rbx]
.text:000000000000449E                 mov     [rsp+58h+var_58], r8
.text:00000000000044A2                 call    _dcgettext
.text:00000000000044A7                 push    r13
.text:00000000000044A9                 push    r12
.text:00000000000044AB                 push    r15
.text:00000000000044AD                 push    r14
.text:00000000000044AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000044B4                 jmp     short loc_4443
.text:00000000000044B4 ; ---------------------------------------------------------------------------
.text:00000000000044B6                 align 20h
.text:00000000000044C0
.text:00000000000044C0 def_4194:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000044C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004194 default case
.text:00000000000044C4                 mov     r9, [rbx+38h]
.text:00000000000044C8                 mov     edx, 5
.text:00000000000044CD                 mov     rax, [rbx+10h]
.text:00000000000044D1                 mov     r8, [rbx+8]
.text:00000000000044D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000044DC                 mov     r13, [rbx+30h]
.text:00000000000044E0                 mov     r12, [rbx+28h]
.text:00000000000044E4                 mov     r15, [rbx+20h]
.text:00000000000044E8                 mov     r14, [rbx+18h]
.text:00000000000044EC                 mov     [rsp+58h+var_40], r10
.text:00000000000044F1                 mov     [rsp+58h+var_48], r9
.text:00000000000044F6                 mov     [rsp+58h+var_58], rax
.text:00000000000044FA                 mov     [rsp+58h+var_50], r8
.text:00000000000044FF                 mov     rbx, [rbx]
.text:0000000000004502                 jmp     loc_4292
.text:0000000000004502 ; } // starts at 40F0
.text:0000000000004502 version_etc_arn endp
.text:0000000000004502
.text:0000000000004502 ; ---------------------------------------------------------------------------
.text:0000000000004507                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004510                 public version_etc_ar
.text:0000000000004510 version_etc_ar  proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 xor     r9d, r9d
.text:0000000000004513                 cmp     qword ptr [r8], 0
.text:0000000000004517                 jz      short loc_452B
.text:0000000000004519                 nop     dword ptr [rax+00000000h]
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004520                 add     r9, 1
.text:0000000000004524                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004529                 jnz     short loc_4520
.text:000000000000452B
.text:000000000000452B loc_452B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000452B                 jmp     version_etc_arn
.text:000000000000452B ; } // starts at 4510
.text:000000000000452B version_etc_ar  endp
.text:000000000000452B
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530 ; Attributes: info_from_lumina
.text:0000000000004530
.text:0000000000004530 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004530                 public version_etc_va
.text:0000000000004530 version_etc_va  proc near
.text:0000000000004530
.text:0000000000004530 authtab         = qword ptr -68h
.text:0000000000004530 var_10          = qword ptr -10h
.text:0000000000004530
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 sub     rsp, 68h
.text:0000000000004534                 mov     r10, r8
.text:0000000000004537                 xor     r9d, r9d
.text:000000000000453A                 mov     rax, fs:28h
.text:0000000000004543                 mov     [rsp+68h+var_10], rax
.text:0000000000004548                 xor     eax, eax
.text:000000000000454A                 mov     r8, rsp
.text:000000000000454D                 nop     dword ptr [rax]
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004550                 mov     eax, [r10]
.text:0000000000004553                 cmp     eax, 2Fh ; '/'
.text:0000000000004556                 ja      short loc_459A
.text:0000000000004558                 mov     r11d, eax
.text:000000000000455B                 add     r11, [r10+10h]
.text:000000000000455F                 add     eax, 8
.text:0000000000004562                 mov     [r10], eax
.text:0000000000004565
.text:0000000000004565 loc_4565:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004565                 mov     rax, [r11]
.text:0000000000004568                 test    rax, rax
.text:000000000000456B                 mov     [r8+r9*8], rax
.text:000000000000456F                 jz      short loc_457B
.text:0000000000004571                 add     r9, 1
.text:0000000000004575                 cmp     r9, 0Ah
.text:0000000000004579                 jnz     short loc_4550
.text:000000000000457B
.text:000000000000457B loc_457B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000457B                 call    version_etc_arn
.text:0000000000004580                 mov     rax, [rsp+68h+var_10]
.text:0000000000004585                 xor     rax, fs:28h
.text:000000000000458E                 jnz     short loc_4595
.text:0000000000004590                 add     rsp, 68h
.text:0000000000004594                 retn
.text:0000000000004595 ; ---------------------------------------------------------------------------
.text:0000000000004595
.text:0000000000004595 loc_4595:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004595                 call    ___stack_chk_fail
.text:000000000000459A ; ---------------------------------------------------------------------------
.text:000000000000459A
.text:000000000000459A loc_459A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000459A                 mov     r11, [r10+8]
.text:000000000000459E                 lea     rax, [r11+8]
.text:00000000000045A2                 mov     [r10+8], rax
.text:00000000000045A6                 jmp     short loc_4565
.text:00000000000045A6 ; } // starts at 4530
.text:00000000000045A6 version_etc_va  endp
.text:00000000000045A6
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045A8                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0 ; Attributes: info_from_lumina
.text:00000000000045B0
.text:00000000000045B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000045B0                 public version_etc
.text:00000000000045B0 version_etc     proc near               ; CODE XREF: main+DB↑p
.text:00000000000045B0
.text:00000000000045B0 var_C0          = dword ptr -0C0h
.text:00000000000045B0 var_B8          = qword ptr -0B8h
.text:00000000000045B0 var_B0          = qword ptr -0B0h
.text:00000000000045B0 var_A8          = byte ptr -0A8h
.text:00000000000045B0 var_50          = qword ptr -50h
.text:00000000000045B0 var_48          = byte ptr -48h
.text:00000000000045B0 var_28          = qword ptr -28h
.text:00000000000045B0 var_20          = qword ptr -20h
.text:00000000000045B0 arg_0           = byte ptr  8
.text:00000000000045B0
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    rbp
.text:00000000000045B1                 push    rbx
.text:00000000000045B2                 mov     r10d, 20h ; ' '
.text:00000000000045B8                 xor     r11d, r11d
.text:00000000000045BB                 sub     rsp, 0B8h
.text:00000000000045C2                 mov     rax, fs:28h
.text:00000000000045CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000045D0                 xor     eax, eax
.text:00000000000045D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000045DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000045E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000045EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000045EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000045F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000045FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004604                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000460C                 xor     r9d, r9d
.text:000000000000460F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004614                 mov     rbp, rax
.text:0000000000004617                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004620                 cmp     r10d, 2Fh ; '/'
.text:0000000000004624                 ja      short loc_467C
.text:0000000000004626                 mov     eax, r10d
.text:0000000000004629                 mov     r11d, 1
.text:000000000000462F                 add     r10d, 8
.text:0000000000004633                 add     rax, rbp
.text:0000000000004636
.text:0000000000004636 loc_4636:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004636                 mov     rax, [rax]
.text:0000000000004639                 test    rax, rax
.text:000000000000463C                 mov     [r8+r9*8], rax
.text:0000000000004640                 jz      short loc_464C
.text:0000000000004642                 add     r9, 1
.text:0000000000004646                 cmp     r9, 0Ah
.text:000000000000464A                 jnz     short loc_4620
.text:000000000000464C
.text:000000000000464C loc_464C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000464C                 test    r11b, r11b
.text:000000000000464F                 jnz     short loc_4675
.text:0000000000004651
.text:0000000000004651 loc_4651:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004651                 call    version_etc_arn
.text:0000000000004656                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000465B                 xor     rax, fs:28h
.text:0000000000004664                 jnz     short loc_4670
.text:0000000000004666                 add     rsp, 0B8h
.text:000000000000466D                 pop     rbx
.text:000000000000466E                 pop     rbp
.text:000000000000466F                 retn
.text:0000000000004670 ; ---------------------------------------------------------------------------
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004670                 call    ___stack_chk_fail
.text:0000000000004675 ; ---------------------------------------------------------------------------
.text:0000000000004675
.text:0000000000004675 loc_4675:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004675                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000467A                 jmp     short loc_4651
.text:000000000000467C ; ---------------------------------------------------------------------------
.text:000000000000467C
.text:000000000000467C loc_467C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000467C                 mov     rax, rbx
.text:000000000000467F                 add     rbx, 8
.text:0000000000004683                 jmp     short loc_4636
.text:0000000000004683 ; } // starts at 45B0
.text:0000000000004683 version_etc     endp
.text:0000000000004683
.text:0000000000004683 ; ---------------------------------------------------------------------------
.text:0000000000004685                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690 ; Attributes: info_from_lumina
.text:0000000000004690
.text:0000000000004690 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004690                 public emit_bug_reporting_address
.text:0000000000004690 emit_bug_reporting_address proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 push    rbx
.text:0000000000004691                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004698                 mov     edx, 5          ; category
.text:000000000000469D                 xor     edi, edi        ; domainname
.text:000000000000469F                 call    _dcgettext
.text:00000000000046A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000046AB                 mov     rsi, rax
.text:00000000000046AE                 mov     edi, 1
.text:00000000000046B3                 xor     eax, eax
.text:00000000000046B5                 call    ___printf_chk
.text:00000000000046BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000046C1                 mov     edx, 5          ; category
.text:00000000000046C6                 xor     edi, edi        ; domainname
.text:00000000000046C8                 call    _dcgettext
.text:00000000000046CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000046D4                 lea     rdx, unk_4DA1
.text:00000000000046DB                 mov     rsi, rax
.text:00000000000046DE                 mov     edi, 1
.text:00000000000046E3                 xor     eax, eax
.text:00000000000046E5                 call    ___printf_chk
.text:00000000000046EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000046F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000046F8                 xor     edi, edi        ; domainname
.text:00000000000046FA                 mov     edx, 5          ; category
.text:00000000000046FF                 call    _dcgettext
.text:0000000000004704                 mov     rsi, rbx        ; stream
.text:0000000000004707                 mov     rdi, rax        ; s
.text:000000000000470A                 pop     rbx
.text:000000000000470B                 jmp     _fputs_unlocked
.text:000000000000470B ; } // starts at 4690
.text:000000000000470B emit_bug_reporting_address endp
.text:000000000000470B
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710
.text:0000000000004710                 public xmalloc
.text:0000000000004710 xmalloc         proc near               ; CODE XREF: mode_compile+7B↑p
.text:0000000000004710                                         ; mode_compile+34A↑p ...
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 push    rbx
.text:0000000000004711                 mov     rbx, rdi
.text:0000000000004714                 call    _malloc
.text:0000000000004719                 test    rax, rax
.text:000000000000471C                 jnz     short loc_4723
.text:000000000000471E                 test    rbx, rbx
.text:0000000000004721                 jnz     short loc_4725
.text:0000000000004723
.text:0000000000004723 loc_4723:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004723                 pop     rbx
.text:0000000000004724                 retn
.text:0000000000004725 ; ---------------------------------------------------------------------------
.text:0000000000004725
.text:0000000000004725 loc_4725:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004725                 call    xalloc_die
.text:0000000000004725 ; } // starts at 4710
.text:0000000000004725 xmalloc         endp
.text:0000000000004725
.text:0000000000004725 ; ---------------------------------------------------------------------------
.text:000000000000472A                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730 ; Attributes: info_from_lumina
.text:0000000000004730
.text:0000000000004730 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004730                 public xnmalloc
.text:0000000000004730 xnmalloc        proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 mov     rax, rdi
.text:0000000000004733                 mul     rsi
.text:0000000000004736                 mov     rdi, rax
.text:0000000000004739                 seto    al
.text:000000000000473C                 test    rdi, rdi
.text:000000000000473F                 js      short loc_474B
.text:0000000000004741                 movzx   eax, al
.text:0000000000004744                 test    rax, rax
.text:0000000000004747                 jnz     short loc_474B
.text:0000000000004749                 jmp     short xmalloc
.text:000000000000474B ; ---------------------------------------------------------------------------
.text:000000000000474B
.text:000000000000474B loc_474B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000474B                                         ; xnmalloc+17↑j
.text:000000000000474B                 sub     rsp, 8
.text:000000000000474F                 call    xalloc_die
.text:000000000000474F ; } // starts at 4730
.text:000000000000474F xnmalloc        endp
.text:000000000000474F
.text:000000000000474F ; ---------------------------------------------------------------------------
.text:0000000000004754                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760
.text:0000000000004760                 public xcharalloc
.text:0000000000004760 xcharalloc      proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 jmp     short xmalloc
.text:0000000000004760 ; } // starts at 4760
.text:0000000000004760 xcharalloc      endp
.text:0000000000004760
.text:0000000000004760 ; ---------------------------------------------------------------------------
.text:0000000000004762                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770 ; Attributes: info_from_lumina
.text:0000000000004770
.text:0000000000004770 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004770                 public xrealloc
.text:0000000000004770 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004770                                         ; quotearg_n_options+182↑p ...
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 test    rsi, rsi
.text:0000000000004773                 push    rbx
.text:0000000000004774                 mov     rbx, rsi
.text:0000000000004777                 jnz     short loc_477E
.text:0000000000004779                 test    rdi, rdi
.text:000000000000477C                 jnz     short loc_4798
.text:000000000000477E
.text:000000000000477E loc_477E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000477E                 mov     rsi, rbx        ; size
.text:0000000000004781                 call    _realloc
.text:0000000000004786                 test    rax, rax
.text:0000000000004789                 jnz     short loc_4790
.text:000000000000478B                 test    rbx, rbx
.text:000000000000478E                 jnz     short loc_47A1
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004790                 pop     rbx
.text:0000000000004791                 retn
.text:0000000000004791 ; ---------------------------------------------------------------------------
.text:0000000000004792                 align 8
.text:0000000000004798
.text:0000000000004798 loc_4798:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004798                 call    _free
.text:000000000000479D                 xor     eax, eax
.text:000000000000479F                 pop     rbx
.text:00000000000047A0                 retn
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A1
.text:00000000000047A1 loc_47A1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000047A1                 call    xalloc_die
.text:00000000000047A1 ; } // starts at 4770
.text:00000000000047A1 xrealloc        endp
.text:00000000000047A1
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A6                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000047B0                 public xnrealloc
.text:00000000000047B0 xnrealloc       proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 mov     rax, rsi
.text:00000000000047B3                 mul     rdx
.text:00000000000047B6                 mov     rsi, rax
.text:00000000000047B9                 seto    al
.text:00000000000047BC                 test    rsi, rsi
.text:00000000000047BF                 js      short loc_47CB
.text:00000000000047C1                 movzx   eax, al
.text:00000000000047C4                 test    rax, rax
.text:00000000000047C7                 jnz     short loc_47CB
.text:00000000000047C9                 jmp     short xrealloc
.text:00000000000047CB ; ---------------------------------------------------------------------------
.text:00000000000047CB
.text:00000000000047CB loc_47CB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000047CB                                         ; xnrealloc+17↑j
.text:00000000000047CB                 sub     rsp, 8
.text:00000000000047CF                 call    xalloc_die
.text:00000000000047CF ; } // starts at 47B0
.text:00000000000047CF xnrealloc       endp
.text:00000000000047CF
.text:00000000000047CF ; ---------------------------------------------------------------------------
.text:00000000000047D4                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0 ; Attributes: info_from_lumina
.text:00000000000047E0
.text:00000000000047E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000047E0                 public x2nrealloc
.text:00000000000047E0 x2nrealloc      proc near
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 test    rdi, rdi
.text:00000000000047E3                 mov     r9, rdx
.text:00000000000047E6                 mov     rcx, [rsi]
.text:00000000000047E9                 jz      short loc_4820
.text:00000000000047EB                 xor     edx, edx
.text:00000000000047ED                 mov     rax, 5555555555555554h
.text:00000000000047F7                 div     r9
.text:00000000000047FA                 cmp     rax, rcx
.text:00000000000047FD                 jbe     short loc_483B
.text:00000000000047FF                 mov     rax, rcx
.text:0000000000004802                 shr     rax, 1
.text:0000000000004805                 lea     rcx, [rax+rcx+1]
.text:000000000000480A
.text:000000000000480A loc_480A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000480A                 mov     [rsi], rcx
.text:000000000000480D                 imul    rcx, r9
.text:0000000000004811                 mov     rsi, rcx
.text:0000000000004814                 jmp     xrealloc
.text:0000000000004814 ; ---------------------------------------------------------------------------
.text:0000000000004819                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004820                 test    rcx, rcx
.text:0000000000004823                 jz      short loc_4848
.text:0000000000004825
.text:0000000000004825 loc_4825:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004825                 mov     rax, rcx
.text:0000000000004828                 mul     r9
.text:000000000000482B                 seto    dl
.text:000000000000482E                 test    rax, rax
.text:0000000000004831                 movzx   edx, dl
.text:0000000000004834                 js      short loc_483B
.text:0000000000004836                 test    rdx, rdx
.text:0000000000004839                 jz      short loc_480A
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000483B                                         ; x2nrealloc+54↑j
.text:000000000000483B                 sub     rsp, 8
.text:000000000000483F                 call    xalloc_die
.text:000000000000483F ; ---------------------------------------------------------------------------
.text:0000000000004844                 align 8
.text:0000000000004848
.text:0000000000004848 loc_4848:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004848                 xor     edx, edx
.text:000000000000484A                 mov     eax, 80h
.text:000000000000484F                 xor     r8d, r8d
.text:0000000000004852                 div     r9
.text:0000000000004855                 test    rax, rax
.text:0000000000004858                 setz    r8b
.text:000000000000485C                 lea     rcx, [r8+rax]
.text:0000000000004860                 jmp     short loc_4825
.text:0000000000004860 ; } // starts at 47E0
.text:0000000000004860 x2nrealloc      endp
.text:0000000000004860
.text:0000000000004860 ; ---------------------------------------------------------------------------
.text:0000000000004862                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870 ; Attributes: info_from_lumina
.text:0000000000004870
.text:0000000000004870 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004870                 public x2realloc
.text:0000000000004870 x2realloc       proc near
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 test    rdi, rdi
.text:0000000000004873                 mov     rax, [rsi]
.text:0000000000004876                 jz      short loc_48A0
.text:0000000000004878                 mov     rdx, 5555555555555553h
.text:0000000000004882                 cmp     rax, rdx
.text:0000000000004885                 ja      short loc_48B1
.text:0000000000004887                 mov     rdx, rax
.text:000000000000488A                 shr     rdx, 1
.text:000000000000488D                 lea     rax, [rdx+rax+1]
.text:0000000000004892
.text:0000000000004892 loc_4892:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004892                 mov     [rsi], rax
.text:0000000000004895                 mov     rsi, rax
.text:0000000000004898                 jmp     xrealloc
.text:0000000000004898 ; ---------------------------------------------------------------------------
.text:000000000000489D                 align 20h
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000048A0                 test    rax, rax
.text:00000000000048A3                 mov     edx, 80h
.text:00000000000048A8                 cmovz   rax, rdx
.text:00000000000048AC                 test    rax, rax
.text:00000000000048AF                 jns     short loc_4892
.text:00000000000048B1
.text:00000000000048B1 loc_48B1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000048B1                 sub     rsp, 8
.text:00000000000048B5                 call    xalloc_die
.text:00000000000048B5 ; } // starts at 4870
.text:00000000000048B5 x2realloc       endp
.text:00000000000048B5
.text:00000000000048B5 ; ---------------------------------------------------------------------------
.text:00000000000048BA                 align 20h
.text:00000000000048C0
.text:00000000000048C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048C0
.text:00000000000048C0
.text:00000000000048C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000048C0                 public xzalloc
.text:00000000000048C0 xzalloc         proc near
.text:00000000000048C0 ; __unwind {
.text:00000000000048C0                 push    rbx
.text:00000000000048C1                 mov     rbx, rdi
.text:00000000000048C4                 call    xmalloc
.text:00000000000048C9                 mov     rdx, rbx        ; n
.text:00000000000048CC                 xor     esi, esi        ; c
.text:00000000000048CE                 mov     rdi, rax        ; s
.text:00000000000048D1                 pop     rbx
.text:00000000000048D2                 jmp     _memset
.text:00000000000048D2 ; } // starts at 48C0
.text:00000000000048D2 xzalloc         endp
.text:00000000000048D2
.text:00000000000048D2 ; ---------------------------------------------------------------------------
.text:00000000000048D7                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0 ; Attributes: info_from_lumina
.text:00000000000048E0
.text:00000000000048E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000048E0                 public xcalloc
.text:00000000000048E0 xcalloc         proc near
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 mov     rax, rdi
.text:00000000000048E3                 sub     rsp, 8
.text:00000000000048E7                 mul     rsi
.text:00000000000048EA                 seto    dl
.text:00000000000048ED                 test    rax, rax
.text:00000000000048F0                 js      short loc_4909
.text:00000000000048F2                 movzx   edx, dl
.text:00000000000048F5                 test    rdx, rdx
.text:00000000000048F8                 jnz     short loc_4909
.text:00000000000048FA                 call    _calloc
.text:00000000000048FF                 test    rax, rax
.text:0000000000004902                 jz      short loc_4909
.text:0000000000004904                 add     rsp, 8
.text:0000000000004908                 retn
.text:0000000000004909 ; ---------------------------------------------------------------------------
.text:0000000000004909
.text:0000000000004909 loc_4909:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004909                                         ; xcalloc+18↑j ...
.text:0000000000004909                 call    xalloc_die
.text:0000000000004909 ; } // starts at 48E0
.text:0000000000004909 xcalloc         endp
.text:0000000000004909
.text:0000000000004909 ; ---------------------------------------------------------------------------
.text:000000000000490E                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910 ; Attributes: info_from_lumina
.text:0000000000004910
.text:0000000000004910 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004910                 public xmemdup
.text:0000000000004910 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004910                                         ; xstrdup+11↓j
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 push    rbp
.text:0000000000004911                 push    rbx
.text:0000000000004912                 mov     rbp, rdi
.text:0000000000004915                 mov     rdi, rsi
.text:0000000000004918                 mov     rbx, rsi
.text:000000000000491B                 sub     rsp, 8
.text:000000000000491F                 call    xmalloc
.text:0000000000004924                 add     rsp, 8
.text:0000000000004928                 mov     rdx, rbx        ; n
.text:000000000000492B                 mov     rsi, rbp        ; src
.text:000000000000492E                 pop     rbx
.text:000000000000492F                 pop     rbp
.text:0000000000004930                 mov     rdi, rax        ; dest
.text:0000000000004933                 jmp     _memcpy
.text:0000000000004933 ; } // starts at 4910
.text:0000000000004933 xmemdup         endp
.text:0000000000004933
.text:0000000000004933 ; ---------------------------------------------------------------------------
.text:0000000000004938                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940
.text:0000000000004940 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004940                 public xstrdup
.text:0000000000004940 xstrdup         proc near
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    rbx
.text:0000000000004941                 mov     rbx, rdi
.text:0000000000004944                 call    _strlen
.text:0000000000004949                 mov     rdi, rbx        ; src
.text:000000000000494C                 lea     rsi, [rax+1]    ; n
.text:0000000000004950                 pop     rbx
.text:0000000000004951                 jmp     short xmemdup
.text:0000000000004951 ; } // starts at 4940
.text:0000000000004951 xstrdup         endp
.text:0000000000004951
.text:0000000000004951 ; ---------------------------------------------------------------------------
.text:0000000000004953                 align 20h
.text:0000000000004960
.text:0000000000004960 ; =============== S U B R O U T I N E =======================================
.text:0000000000004960
.text:0000000000004960 ; Attributes: noreturn info_from_lumina
.text:0000000000004960
.text:0000000000004960 ; void __cdecl xalloc_die()
.text:0000000000004960                 public xalloc_die
.text:0000000000004960 xalloc_die      proc near               ; CODE XREF: mode_compile:loc_2189↑p
.text:0000000000004960                                         ; quotearg_n_options:loc_3936↑p ...
.text:0000000000004960 ; __unwind {
.text:0000000000004960                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004967                 sub     rsp, 8
.text:000000000000496B                 mov     edx, 5          ; category
.text:0000000000004970                 xor     edi, edi        ; domainname
.text:0000000000004972                 call    _dcgettext
.text:0000000000004977                 mov     edi, cs:exit_failure ; status
.text:000000000000497D                 lea     rdx, format+4   ; format
.text:0000000000004984                 mov     rcx, rax
.text:0000000000004987                 xor     esi, esi        ; errnum
.text:0000000000004989                 xor     eax, eax
.text:000000000000498B                 call    _error
.text:0000000000004990                 call    _abort
.text:0000000000004990 ; } // starts at 4960
.text:0000000000004990 xalloc_die      endp
.text:0000000000004990
.text:0000000000004990 ; ---------------------------------------------------------------------------
.text:0000000000004995                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0 ; Attributes: info_from_lumina
.text:00000000000049A0
.text:00000000000049A0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000049A0                 public rpl_mbrtowc
.text:00000000000049A0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000049A0
.text:00000000000049A0 pwc             = dword ptr -34h
.text:00000000000049A0 var_30          = qword ptr -30h
.text:00000000000049A0
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 push    r13
.text:00000000000049A2                 push    r12
.text:00000000000049A4                 mov     r13, rsi
.text:00000000000049A7                 push    rbp
.text:00000000000049A8                 push    rbx
.text:00000000000049A9                 mov     rbx, rdi
.text:00000000000049AC                 mov     r12, rdx
.text:00000000000049AF                 sub     rsp, 18h
.text:00000000000049B3                 mov     rax, fs:28h
.text:00000000000049BC                 mov     [rsp+38h+var_30], rax
.text:00000000000049C1                 xor     eax, eax
.text:00000000000049C3                 lea     rax, [rsp+38h+pwc]
.text:00000000000049C8                 test    rdi, rdi
.text:00000000000049CB                 cmovz   rbx, rax
.text:00000000000049CF                 mov     rdi, rbx        ; pwc
.text:00000000000049D2                 call    _mbrtowc
.text:00000000000049D7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000049DB                 mov     rbp, rax
.text:00000000000049DE                 jbe     short loc_4A00
.text:00000000000049E0                 test    r12, r12
.text:00000000000049E3                 jz      short loc_4A00
.text:00000000000049E5                 xor     edi, edi
.text:00000000000049E7                 call    hard_locale
.text:00000000000049EC                 test    al, al
.text:00000000000049EE                 jnz     short loc_4A00
.text:00000000000049F0                 movzx   eax, byte ptr [r13+0]
.text:00000000000049F5                 mov     ebp, 1
.text:00000000000049FA                 mov     [rbx], eax
.text:00000000000049FC                 nop     dword ptr [rax+00h]
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004A00                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004A00                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004A05                 xor     rdx, fs:28h
.text:0000000000004A0E                 mov     rax, rbp
.text:0000000000004A11                 jnz     short loc_4A1E
.text:0000000000004A13                 add     rsp, 18h
.text:0000000000004A17                 pop     rbx
.text:0000000000004A18                 pop     rbp
.text:0000000000004A19                 pop     r12
.text:0000000000004A1B                 pop     r13
.text:0000000000004A1D                 retn
.text:0000000000004A1E ; ---------------------------------------------------------------------------
.text:0000000000004A1E
.text:0000000000004A1E loc_4A1E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000004A1E                 call    ___stack_chk_fail
.text:0000000000004A1E ; } // starts at 49A0
.text:0000000000004A1E rpl_mbrtowc     endp
.text:0000000000004A1E
.text:0000000000004A1E ; ---------------------------------------------------------------------------
.text:0000000000004A23                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30 ; Attributes: info_from_lumina
.text:0000000000004A30
.text:0000000000004A30 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004A30                 public close_stream
.text:0000000000004A30 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004A30                                         ; close_stdout+33↑p
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 push    r12
.text:0000000000004A32                 push    rbp
.text:0000000000004A33                 mov     rbp, rdi
.text:0000000000004A36                 push    rbx
.text:0000000000004A37                 call    ___fpending
.text:0000000000004A3C                 mov     ebx, [rbp+0]
.text:0000000000004A3F                 mov     rdi, rbp        ; stream
.text:0000000000004A42                 mov     r12, rax
.text:0000000000004A45                 call    rpl_fclose
.text:0000000000004A4A                 and     ebx, 20h
.text:0000000000004A4D                 test    ebx, ebx
.text:0000000000004A4F                 jnz     short loc_4A68
.text:0000000000004A51                 test    eax, eax
.text:0000000000004A53                 jz      short loc_4A5F
.text:0000000000004A55                 test    r12, r12
.text:0000000000004A58                 mov     eax, 0FFFFFFFFh
.text:0000000000004A5D                 jz      short loc_4A98
.text:0000000000004A5F
.text:0000000000004A5F loc_4A5F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004A5F                 pop     rbx
.text:0000000000004A60                 pop     rbp
.text:0000000000004A61                 pop     r12
.text:0000000000004A63                 retn
.text:0000000000004A63 ; ---------------------------------------------------------------------------
.text:0000000000004A64                 align 8
.text:0000000000004A68
.text:0000000000004A68 loc_4A68:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004A68                 test    eax, eax
.text:0000000000004A6A                 jnz     short loc_4A88
.text:0000000000004A6C                 call    ___errno_location
.text:0000000000004A71                 mov     dword ptr [rax], 0
.text:0000000000004A77                 mov     eax, 0FFFFFFFFh
.text:0000000000004A7C                 pop     rbx
.text:0000000000004A7D                 pop     rbp
.text:0000000000004A7E                 pop     r12
.text:0000000000004A80                 retn
.text:0000000000004A80 ; ---------------------------------------------------------------------------
.text:0000000000004A81                 align 8
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004A88                 pop     rbx
.text:0000000000004A89                 mov     eax, 0FFFFFFFFh
.text:0000000000004A8E                 pop     rbp
.text:0000000000004A8F                 pop     r12
.text:0000000000004A91                 retn
.text:0000000000004A91 ; ---------------------------------------------------------------------------
.text:0000000000004A92                 align 8
.text:0000000000004A98
.text:0000000000004A98 loc_4A98:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004A98                 call    ___errno_location
.text:0000000000004A9D                 cmp     dword ptr [rax], 9
.text:0000000000004AA0                 pop     rbx
.text:0000000000004AA1                 pop     rbp
.text:0000000000004AA2                 pop     r12
.text:0000000000004AA4                 setnz   al
.text:0000000000004AA7                 movzx   eax, al
.text:0000000000004AAA                 neg     eax
.text:0000000000004AAC                 retn
.text:0000000000004AAC ; } // starts at 4A30
.text:0000000000004AAC close_stream    endp
.text:0000000000004AAC
.text:0000000000004AAC ; ---------------------------------------------------------------------------
.text:0000000000004AAD                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0
.text:0000000000004AB0                 public hard_locale
.text:0000000000004AB0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 sub     rsp, 8
.text:0000000000004AB4                 xor     esi, esi        ; locale
.text:0000000000004AB6                 call    _setlocale
.text:0000000000004ABB                 mov     rdx, rax
.text:0000000000004ABE                 mov     eax, 1
.text:0000000000004AC3                 test    rdx, rdx
.text:0000000000004AC6                 jz      short loc_4AE5
.text:0000000000004AC8                 lea     rdi, aC         ; "C"
.text:0000000000004ACF                 mov     ecx, 2
.text:0000000000004AD4                 mov     rsi, rdx
.text:0000000000004AD7                 repe cmpsb
.text:0000000000004AD9                 setnbe  cl
.text:0000000000004ADC                 sbb     cl, 0
.text:0000000000004ADF                 xor     eax, eax
.text:0000000000004AE1                 test    cl, cl
.text:0000000000004AE3                 jnz     short loc_4AF0
.text:0000000000004AE5
.text:0000000000004AE5 loc_4AE5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004AE5                 add     rsp, 8
.text:0000000000004AE9                 retn
.text:0000000000004AE9 ; ---------------------------------------------------------------------------
.text:0000000000004AEA                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004AF0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004AF7                 mov     ecx, 6
.text:0000000000004AFC                 mov     rsi, rdx
.text:0000000000004AFF                 repe cmpsb
.text:0000000000004B01                 setnbe  al
.text:0000000000004B04                 sbb     al, 0
.text:0000000000004B06                 test    al, al
.text:0000000000004B08                 setnz   al
.text:0000000000004B0B                 add     rsp, 8
.text:0000000000004B0F                 retn
.text:0000000000004B0F ; } // starts at 4AB0
.text:0000000000004B0F hard_locale     endp
.text:0000000000004B0F
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10
.text:0000000000004B10                 public locale_charset
.text:0000000000004B10 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 sub     rsp, 8
.text:0000000000004B14                 mov     edi, 0Eh        ; item
.text:0000000000004B19                 call    _nl_langinfo
.text:0000000000004B1E                 test    rax, rax
.text:0000000000004B21                 jz      short loc_4B40
.text:0000000000004B23                 cmp     byte ptr [rax], 0
.text:0000000000004B26                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004B2D                 cmovz   rax, rdx
.text:0000000000004B31                 add     rsp, 8
.text:0000000000004B35                 retn
.text:0000000000004B35 ; ---------------------------------------------------------------------------
.text:0000000000004B36                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004B40                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004B47                 add     rsp, 8
.text:0000000000004B4B                 retn
.text:0000000000004B4B ; } // starts at 4B10
.text:0000000000004B4B locale_charset  endp
.text:0000000000004B4B
.text:0000000000004B4B ; ---------------------------------------------------------------------------
.text:0000000000004B4C                 align 10h
.text:0000000000004B50
.text:0000000000004B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B50
.text:0000000000004B50 ; Attributes: info_from_lumina
.text:0000000000004B50
.text:0000000000004B50 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004B50                 public rpl_fclose
.text:0000000000004B50 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004B50 ; __unwind {
.text:0000000000004B50                 push    r12
.text:0000000000004B52                 push    rbp
.text:0000000000004B53                 push    rbx
.text:0000000000004B54                 mov     rbx, rdi
.text:0000000000004B57                 call    _fileno
.text:0000000000004B5C                 test    eax, eax
.text:0000000000004B5E                 mov     rdi, rbx        ; fp
.text:0000000000004B61                 js      short loc_4BB7
.text:0000000000004B63                 call    ___freading
.text:0000000000004B68                 test    eax, eax
.text:0000000000004B6A                 jnz     short loc_4B98
.text:0000000000004B6C
.text:0000000000004B6C loc_4B6C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004B6C                 mov     rdi, rbx        ; stream
.text:0000000000004B6F                 call    rpl_fflush
.text:0000000000004B74                 test    eax, eax
.text:0000000000004B76                 jz      short loc_4BB4
.text:0000000000004B78                 call    ___errno_location
.text:0000000000004B7D                 mov     r12d, [rax]
.text:0000000000004B80                 mov     rdi, rbx        ; stream
.text:0000000000004B83                 mov     rbp, rax
.text:0000000000004B86                 call    _fclose
.text:0000000000004B8B                 test    r12d, r12d
.text:0000000000004B8E                 jnz     short loc_4BC0
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004B90                 pop     rbx
.text:0000000000004B91                 pop     rbp
.text:0000000000004B92                 pop     r12
.text:0000000000004B94                 retn
.text:0000000000004B94 ; ---------------------------------------------------------------------------
.text:0000000000004B95                 align 8
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004B98                 mov     rdi, rbx        ; stream
.text:0000000000004B9B                 call    _fileno
.text:0000000000004BA0                 xor     esi, esi        ; offset
.text:0000000000004BA2                 mov     edx, 1          ; whence
.text:0000000000004BA7                 mov     edi, eax        ; fd
.text:0000000000004BA9                 call    _lseek
.text:0000000000004BAE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004BB2                 jnz     short loc_4B6C
.text:0000000000004BB4
.text:0000000000004BB4 loc_4BB4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004BB4                 mov     rdi, rbx        ; stream
.text:0000000000004BB7
.text:0000000000004BB7 loc_4BB7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004BB7                 pop     rbx
.text:0000000000004BB8                 pop     rbp
.text:0000000000004BB9                 pop     r12
.text:0000000000004BBB                 jmp     _fclose
.text:0000000000004BC0 ; ---------------------------------------------------------------------------
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004BC0                 mov     [rbp+0], r12d
.text:0000000000004BC4                 mov     eax, 0FFFFFFFFh
.text:0000000000004BC9                 jmp     short loc_4B90
.text:0000000000004BC9 ; } // starts at 4B50
.text:0000000000004BC9 rpl_fclose      endp
.text:0000000000004BC9
.text:0000000000004BC9 ; ---------------------------------------------------------------------------
.text:0000000000004BCB                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004BD0                 public rpl_fflush
.text:0000000000004BD0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 test    rdi, rdi
.text:0000000000004BD3                 push    rbx
.text:0000000000004BD4                 mov     rbx, rdi
.text:0000000000004BD7                 jz      short loc_4BEA
.text:0000000000004BD9                 call    ___freading
.text:0000000000004BDE                 test    eax, eax
.text:0000000000004BE0                 jz      short loc_4BEA
.text:0000000000004BE2                 test    dword ptr [rbx], 100h
.text:0000000000004BE8                 jnz     short loc_4BF8
.text:0000000000004BEA
.text:0000000000004BEA loc_4BEA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004BEA                                         ; rpl_fflush+10↑j
.text:0000000000004BEA                 mov     rdi, rbx        ; stream
.text:0000000000004BED                 pop     rbx
.text:0000000000004BEE                 jmp     _fflush
.text:0000000000004BEE ; ---------------------------------------------------------------------------
.text:0000000000004BF3                 align 8
.text:0000000000004BF8
.text:0000000000004BF8 loc_4BF8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004BF8                 mov     rdi, rbx
.text:0000000000004BFB                 mov     edx, 1
.text:0000000000004C00                 xor     esi, esi
.text:0000000000004C02                 call    rpl_fseeko
.text:0000000000004C07                 mov     rdi, rbx        ; stream
.text:0000000000004C0A                 pop     rbx
.text:0000000000004C0B                 jmp     _fflush
.text:0000000000004C0B ; } // starts at 4BD0
.text:0000000000004C0B rpl_fflush      endp
.text:0000000000004C0B
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004C10                 public rpl_fseeko
.text:0000000000004C10 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 mov     rax, [rdi+8]
.text:0000000000004C14                 cmp     [rdi+10h], rax
.text:0000000000004C18                 jz      short loc_4C20
.text:0000000000004C1A
.text:0000000000004C1A loc_4C1A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004C1A                                         ; rpl_fseeko+1F↓j
.text:0000000000004C1A                 jmp     _fseeko
.text:0000000000004C1A ; ---------------------------------------------------------------------------
.text:0000000000004C1F                 align 20h
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004C20                 mov     rax, [rdi+20h]
.text:0000000000004C24                 cmp     [rdi+28h], rax
.text:0000000000004C28                 jnz     short loc_4C1A
.text:0000000000004C2A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004C2F                 jnz     short loc_4C1A
.text:0000000000004C31                 push    r12
.text:0000000000004C33                 push    rbp
.text:0000000000004C34                 mov     r12d, edx
.text:0000000000004C37                 push    rbx
.text:0000000000004C38                 mov     rbp, rsi
.text:0000000000004C3B                 mov     rbx, rdi
.text:0000000000004C3E                 call    _fileno
.text:0000000000004C43                 mov     edx, r12d       ; whence
.text:0000000000004C46                 mov     rsi, rbp        ; offset
.text:0000000000004C49                 mov     edi, eax        ; fd
.text:0000000000004C4B                 call    _lseek
.text:0000000000004C50                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C54                 jz      short loc_4C62
.text:0000000000004C56                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004C59                 mov     [rbx+90h], rax
.text:0000000000004C60                 xor     eax, eax
.text:0000000000004C62
.text:0000000000004C62 loc_4C62:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004C62                 pop     rbx
.text:0000000000004C63                 pop     rbp
.text:0000000000004C64                 pop     r12
.text:0000000000004C66                 retn
.text:0000000000004C66 ; } // starts at 4C10
.text:0000000000004C66 rpl_fseeko      endp
.text:0000000000004C66
.text:0000000000004C66 ; ---------------------------------------------------------------------------
.text:0000000000004C67                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70 ; Attributes: info_from_lumina
.text:0000000000004C70
.text:0000000000004C70 ; void _libc_csu_init(void)
.text:0000000000004C70                 public __libc_csu_init
.text:0000000000004C70 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 push    r15
.text:0000000000004C72                 push    r14
.text:0000000000004C74                 mov     r15, rdx
.text:0000000000004C77                 push    r13
.text:0000000000004C79                 push    r12
.text:0000000000004C7B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004C82                 push    rbp
.text:0000000000004C83                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004C8A                 push    rbx
.text:0000000000004C8B                 mov     r13d, edi
.text:0000000000004C8E                 mov     r14, rsi
.text:0000000000004C91                 sub     rbp, r12
.text:0000000000004C94                 sub     rsp, 8
.text:0000000000004C98                 sar     rbp, 3
.text:0000000000004C9C                 call    _init_proc
.text:0000000000004CA1                 test    rbp, rbp
.text:0000000000004CA4                 jz      short loc_4CC6
.text:0000000000004CA6                 xor     ebx, ebx
.text:0000000000004CA8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004CB0                 mov     rdx, r15
.text:0000000000004CB3                 mov     rsi, r14
.text:0000000000004CB6                 mov     edi, r13d
.text:0000000000004CB9                 call    ds:(__frame_dummy_init_array_entry - 206B70h)[r12+rbx*8]
.text:0000000000004CBD                 add     rbx, 1
.text:0000000000004CC1                 cmp     rbp, rbx
.text:0000000000004CC4                 jnz     short loc_4CB0
.text:0000000000004CC6
.text:0000000000004CC6 loc_4CC6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004CC6                 add     rsp, 8
.text:0000000000004CCA                 pop     rbx
.text:0000000000004CCB                 pop     rbp
.text:0000000000004CCC                 pop     r12
.text:0000000000004CCE                 pop     r13
.text:0000000000004CD0                 pop     r14
.text:0000000000004CD2                 pop     r15
.text:0000000000004CD4                 retn
.text:0000000000004CD4 ; } // starts at 4C70
.text:0000000000004CD4 __libc_csu_init endp
.text:0000000000004CD4
.text:0000000000004CD4 ; ---------------------------------------------------------------------------
.text:0000000000004CD5                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CE0
.text:0000000000004CE0
.text:0000000000004CE0 ; void _libc_csu_fini(void)
.text:0000000000004CE0                 public __libc_csu_fini
.text:0000000000004CE0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004CE0 ; __unwind {
.text:0000000000004CE0                 rep retn
.text:0000000000004CE0 ; } // starts at 4CE0
.text:0000000000004CE0 __libc_csu_fini endp
.text:0000000000004CE0
.text:0000000000004CE0 ; ---------------------------------------------------------------------------
.text:0000000000004CE2                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0
.text:0000000000004CF0 atexit          proc near               ; CODE XREF: main+5C↑p
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004CF7                 xor     esi, esi        ; obj
.text:0000000000004CF9                 jmp     ___cxa_atexit
.text:0000000000004CF9 ; } // starts at 4CF0
.text:0000000000004CF9 atexit          endp
.text:0000000000004CF9
.text:0000000000004CF9 _text           ends
.text:0000000000004CF9
LOAD:0000000000004CFE ; ===========================================================================
LOAD:0000000000004CFE
LOAD:0000000000004CFE ; Segment type: Pure code
LOAD:0000000000004CFE ; Segment permissions: Read/Execute
LOAD:0000000000004CFE LOAD            segment byte public 'CODE' use64
LOAD:0000000000004CFE                 assume cs:LOAD
LOAD:0000000000004CFE                 ;org 4CFEh
LOAD:0000000000004CFE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004CFE                 align 20h
LOAD:0000000000004CFE LOAD            ends
LOAD:0000000000004CFE
.fini:0000000000004D00 ; ===========================================================================
.fini:0000000000004D00
.fini:0000000000004D00 ; Segment type: Pure code
.fini:0000000000004D00 ; Segment permissions: Read/Execute
.fini:0000000000004D00 _fini           segment dword public 'CODE' use64
.fini:0000000000004D00                 assume cs:_fini
.fini:0000000000004D00                 ;org 4D00h
.fini:0000000000004D00                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004D00
.fini:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004D00
.fini:0000000000004D00
.fini:0000000000004D00                 public _term_proc
.fini:0000000000004D00 _term_proc      proc near
.fini:0000000000004D00                 sub     rsp, 8          ; _fini
.fini:0000000000004D04                 add     rsp, 8
.fini:0000000000004D08                 retn
.fini:0000000000004D08 _term_proc      endp
.fini:0000000000004D08
.fini:0000000000004D08 _fini           ends
.fini:0000000000004D08
LOAD:0000000000004D09 ; ===========================================================================
LOAD:0000000000004D09
LOAD:0000000000004D09 ; Segment type: Pure code
LOAD:0000000000004D09 ; Segment permissions: Read/Execute
LOAD:0000000000004D09 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004D09                 assume cs:LOAD
LOAD:0000000000004D09                 ;org 4D09h
LOAD:0000000000004D09                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004D09                 align 20h
LOAD:0000000000004D09 LOAD            ends
LOAD:0000000000004D09
.rodata:0000000000004D20 ; ===========================================================================
.rodata:0000000000004D20
.rodata:0000000000004D20 ; Segment type: Pure data
.rodata:0000000000004D20 ; Segment permissions: Read
.rodata:0000000000004D20 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004D20                 assume cs:_rodata
.rodata:0000000000004D20                 ;org 4D20h
.rodata:0000000000004D20                 public _IO_stdin_used
.rodata:0000000000004D20 _IO_stdin_used  db    1
.rodata:0000000000004D21                 db    0
.rodata:0000000000004D22                 db    2
.rodata:0000000000004D23                 db    0
.rodata:0000000000004D24 aMkfifo_0       db 'mkfifo',0           ; DATA XREF: main+CF↑o
.rodata:0000000000004D24                                         ; usage+156↑o ...
.rodata:0000000000004D2B asc_4D2B        db '[',0                ; DATA XREF: usage+162↑o
.rodata:0000000000004D2D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+189↑o
.rodata:0000000000004D3D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004D3D                                         ; DATA XREF: usage+1B9↑o
.rodata:0000000000004D3D                                         ; usage+2B4↑o ...
.rodata:0000000000004D53 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CA↑o
.rodata:0000000000004D5D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1D6↑o
.rodata:0000000000004D6C aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+169↑o
.rodata:0000000000004D76 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+195↑o
.rodata:0000000000004D80 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1AD↑o
.rodata:0000000000004D8A ; const char aSOnlineHelpS[]
.rodata:0000000000004D8A aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+222↑o
.rodata:0000000000004D8A                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004DA1 unk_4DA1        db  47h ; G             ; DATA XREF: main+C8↑o
.rodata:0000000000004DA1                                         ; usage+23E↑o ...
.rodata:0000000000004DA2                 db  4Eh ; N
.rodata:0000000000004DA3                 db  55h ; U
.rodata:0000000000004DA4                 db  20h
.rodata:0000000000004DA5 ; const char domainname[]
.rodata:0000000000004DA5 domainname      db 'coreutils',0        ; DATA XREF: main+3D↑o
.rodata:0000000000004DA5                                         ; main+49↑o ...
.rodata:0000000000004DAF ; const char s2[]
.rodata:0000000000004DAF s2              db 'en_',0              ; DATA XREF: usage+265↑o
.rodata:0000000000004DAF                                         ; usage+326↑o
.rodata:0000000000004DB3 ; const char aFullDocumentat[]
.rodata:0000000000004DB3 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004DB3                                         ; DATA XREF: usage:loc_1C01↑o
.rodata:0000000000004DB3                                         ; usage:loc_1CBE↑o
.rodata:0000000000004DCE ; const char dirname[]
.rodata:0000000000004DCE dirname         db '/usr/local/share/locale',0
.rodata:0000000000004DCE                                         ; DATA XREF: main+36↑o
.rodata:0000000000004DE6 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+C1↑o
.rodata:0000000000004DF6 ; const char shortopts[]
.rodata:0000000000004DF6 shortopts       db 'm:Z',0              ; DATA XREF: main:loc_15E1↑o
.rodata:0000000000004DFA ; const char aMissingOperand[]
.rodata:0000000000004DFA aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_17EE↑o
.rodata:0000000000004E0A ; const char aInvalidMode[]
.rodata:0000000000004E0A aInvalidMode    db 'invalid mode',0     ; DATA XREF: main:loc_1844↑o
.rodata:0000000000004E0A                                         ; .data.rel.ro:0000000000206BA0↓o
.rodata:0000000000004E17 ; const char aCannotCreateFi[]
.rodata:0000000000004E17 aCannotCreateFi db 'cannot create fifo %s',0
.rodata:0000000000004E17                                         ; DATA XREF: main+1F7↑o
.rodata:0000000000004E2D aCannotSetPermi db 'cannot set permissions of %s',0
.rodata:0000000000004E2D                                         ; DATA XREF: main+25A↑o
.rodata:0000000000004E4A aContext        db 'context',0          ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000004E52 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:0000000000004E57 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004E5F                 align 20h
.rodata:0000000000004E60 ; const char aTrySHelpForMor[]
.rodata:0000000000004E60 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004E60                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004E87                 align 8
.rodata:0000000000004E88 ; const char aUsageSOptionNa[]
.rodata:0000000000004E88 aUsageSOptionNa db 'Usage: %s [OPTION]... NAME...',0Ah,0
.rodata:0000000000004E88                                         ; DATA XREF: usage:loc_19DD↑o
.rodata:0000000000004EA7                 align 8
.rodata:0000000000004EA8 ; const char aCreateNamedPip[]
.rodata:0000000000004EA8 aCreateNamedPip db 'Create named pipes (FIFOs) with the given NAMEs.',0Ah,0
.rodata:0000000000004EA8                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004EDA                 align 20h
.rodata:0000000000004EE0 ; const char aMandatoryArgum[]
.rodata:0000000000004EE0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000004EE0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000004EE0                 db 'ns too.',0Ah,0
.rodata:0000000000004F2B                 align 10h
.rodata:0000000000004F30 ; const char aMModeModeSetFi[]
.rodata:0000000000004F30 aMModeModeSetFi db '  -m, --mode=MODE    set file permission bits to MODE, not a=rw -'
.rodata:0000000000004F30                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000004F30                 db ' umask',0Ah,0
.rodata:0000000000004F79                 align 20h
.rodata:0000000000004F80 ; const char aZSetTheSelinux[]
.rodata:0000000000004F80 aZSetTheSelinux db '  -Z                   set the SELinux security context to defaul'
.rodata:0000000000004F80                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000004F80                 db 't type',0Ah
.rodata:0000000000004F80                 db '      --context[=CTX]  like -Z, or if CTX is specified then set t'
.rodata:0000000000004F80                 db 'he SELinux',0Ah
.rodata:0000000000004F80                 db '                         or SMACK security context to CTX',0Ah,0
.rodata:000000000000504F                 align 10h
.rodata:0000000000005050 ; const char aHelpDisplayThi[]
.rodata:0000000000005050 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005050                                         ; DATA XREF: usage+118↑o
.rodata:000000000000507D                 align 20h
.rodata:0000000000005080 ; const char aVersionOutputV[]
.rodata:0000000000005080 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005080                                         ; DATA XREF: usage+13D↑o
.rodata:00000000000050B6                 align 8
.rodata:00000000000050B8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000050B8                                         ; DATA XREF: usage+237↑o
.rodata:00000000000050B8                                         ; usage+29B↑o ...
.rodata:00000000000050E0 ; const char aReportAnyTrans[]
.rodata:00000000000050E0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000050E0                                         ; DATA XREF: usage+38F↑o
.rodata:00000000000050E0                 db 'am/>',0Ah,0
.rodata:0000000000005127                 align 8
.rodata:0000000000005128 ; const char aOrAvailableLoc[]
.rodata:0000000000005128 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005128                                         ; DATA XREF: usage:loc_1C46↑o
.rodata:000000000000515B                 align 20h
.rodata:0000000000005160 ; const char msgid[]
.rodata:0000000000005160 msgid           db 'warning: ignoring --context; it requires an SELinux/SMACK-enabled'
.rodata:0000000000005160                                         ; DATA XREF: main+FE↑o
.rodata:0000000000005160                 db ' kernel',0
.rodata:00000000000051A9                 align 10h
.rodata:00000000000051B0 ; const char aModeMustSpecif[]
.rodata:00000000000051B0 aModeMustSpecif db 'mode must specify only file permission bits',0
.rodata:00000000000051B0                                         ; DATA XREF: main:loc_1820↑o
.rodata:00000000000051DC a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000051E1 ; const char aWriteError[]
.rodata:00000000000051E1 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1DA3↑o
.rodata:00000000000051ED ; const char format[]
.rodata:00000000000051ED format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000051ED                                         ; close_stdout+8F↑o ...
.rodata:00000000000051F4 jpt_2044        dd offset loc_2050 - 51F4h
.rodata:00000000000051F4                                         ; DATA XREF: mode_compile+74↑o
.rodata:00000000000051F4                                         ; mode_compile+22C↑r
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h ; jump table for switch statement
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset loc_20C0 - 51F4h
.rodata:00000000000051F4                 dd offset loc_20B0 - 51F4h
.rodata:00000000000051F4                 dd offset loc_20A0 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset def_2044 - 51F4h
.rodata:00000000000051F4                 dd offset loc_2090 - 51F4h
.rodata:00000000000051F4                 dd offset loc_2088 - 51F4h
.rodata:0000000000005278 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005278                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000052B0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000052B8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000052BC unk_52BC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000052BD                 db  80h
.rodata:00000000000052BE                 db  98h
.rodata:00000000000052BF                 db    0
.rodata:00000000000052C0 unk_52C0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000052C1                 db  80h
.rodata:00000000000052C2                 db  99h
.rodata:00000000000052C3                 db    0
.rodata:00000000000052C4 unk_52C4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000052C5                 db    7
.rodata:00000000000052C6                 db  65h ; e
.rodata:00000000000052C7                 db    0
.rodata:00000000000052C8 unk_52C8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000052C9                 db 0AFh
.rodata:00000000000052CA                 db    0
.rodata:00000000000052CB unk_52CB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2480↑o
.rodata:00000000000052CB                                         ; quotearg_buffer_restyled:loc_323B↑o ...
.rodata:00000000000052CC                 db    0
.rodata:00000000000052CD ; const char asc_52CD[2]
.rodata:00000000000052CD asc_52CD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000052CD                                         ; quotearg_buffer_restyled:loc_2603↑o ...
.rodata:00000000000052CF ; const char asc_52CF[2]
.rodata:00000000000052CF asc_52CF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000052CF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000052D1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000052D9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:00000000000052DF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:00000000000052EC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:00000000000052EC                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:00000000000052F9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000052F9                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:000000000000530D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:000000000000530F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000005317 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:000000000000531F                 align 20h
.rodata:0000000000005320 jpt_25E1        dd offset loc_338A - 5320h
.rodata:0000000000005320                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005320                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005320                 dd offset loc_25E3 - 5320h ; jump table for switch statement
.rodata:0000000000005320                 dd offset loc_35B8 - 5320h
.rodata:0000000000005320                 dd offset loc_33C4 - 5320h
.rodata:0000000000005320                 dd offset loc_31B4 - 5320h
.rodata:0000000000005320                 dd offset loc_3210 - 5320h
.rodata:0000000000005320                 dd offset loc_3265 - 5320h
.rodata:0000000000005320                 dd offset loc_32AA - 5320h
.rodata:0000000000005320                 dd offset loc_32E4 - 5320h
.rodata:0000000000005320                 dd offset loc_32E4 - 5320h
.rodata:0000000000005320                 dd offset loc_32E4 - 5320h
.rodata:000000000000534C jpt_273E        dd offset loc_2960 - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000534C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch ; jump table for switch statement
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset loc_29A0 - 534Ch, offset loc_28A8 - 534Ch
.rodata:000000000000534C                 dd offset loc_2868 - 534Ch, offset loc_2A30 - 534Ch, offset loc_2A20 - 534Ch
.rodata:000000000000534C                 dd offset loc_2A10 - 534Ch, offset loc_2A00 - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset def_273E - 534Ch
.rodata:000000000000534C                 dd offset def_273E - 534Ch, offset def_273E - 534Ch, offset loc_29F0 - 534Ch
.rodata:000000000000534C                 dd offset loc_29E0 - 534Ch, offset loc_29E0 - 534Ch, offset loc_29B0 - 534Ch
.rodata:000000000000534C                 dd offset loc_29E0 - 534Ch, offset loc_2988 - 534Ch, offset loc_29E0 - 534Ch
.rodata:000000000000534C                 dd offset loc_2843 - 534Ch, offset loc_29E0 - 534Ch, offset loc_29E0 - 534Ch
.rodata:000000000000534C                 dd offset loc_29E0 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_29E0 - 534Ch
.rodata:000000000000534C                 dd offset loc_29E0 - 534Ch, offset loc_29E0 - 534Ch, offset loc_29E0 - 534Ch
.rodata:000000000000534C                 dd offset loc_2813 - 534Ch, offset def_273E - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_29E0 - 534Ch, offset loc_28B8 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_29E0 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_29E0 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2988 - 534Ch, offset loc_2988 - 534Ch, offset loc_2988 - 534Ch
.rodata:000000000000534C                 dd offset loc_2743 - 534Ch, offset loc_29E0 - 534Ch, offset loc_2743 - 534Ch
.rodata:000000000000534C                 dd offset loc_29B0 - 534Ch
.rodata:0000000000005548 jpt_2ACA        dd offset loc_2B30 - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005548                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h ; jump table for switch statement
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset loc_2B20 - 5548h, offset loc_2C70 - 5548h
.rodata:0000000000005548                 dd offset loc_2C58 - 5548h, offset loc_2B08 - 5548h, offset loc_2C48 - 5548h
.rodata:0000000000005548                 dd offset loc_2AF0 - 5548h, offset loc_2C30 - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset def_2ACA - 5548h
.rodata:0000000000005548                 dd offset def_2ACA - 5548h, offset def_2ACA - 5548h, offset loc_2C18 - 5548h
.rodata:0000000000005548                 dd offset loc_2C00 - 5548h, offset loc_2C00 - 5548h, offset loc_2BE8 - 5548h
.rodata:0000000000005548                 dd offset loc_2C00 - 5548h, offset loc_2BD0 - 5548h, offset loc_2C00 - 5548h
.rodata:0000000000005548                 dd offset loc_2840 - 5548h, offset loc_2C00 - 5548h, offset loc_2C00 - 5548h
.rodata:0000000000005548                 dd offset loc_2C00 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2C00 - 5548h
.rodata:0000000000005548                 dd offset loc_2C00 - 5548h, offset loc_2C00 - 5548h, offset loc_2C00 - 5548h
.rodata:0000000000005548                 dd offset loc_2810 - 5548h, offset def_2ACA - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2C00 - 5548h, offset loc_2AD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2C00 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2C00 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h, offset loc_2BD0 - 5548h
.rodata:0000000000005548                 dd offset loc_2740 - 5548h, offset loc_2C00 - 5548h, offset loc_2740 - 5548h
.rodata:0000000000005548                 dd offset loc_2BE8 - 5548h
.rodata:0000000000005744                 align 20h
.rodata:0000000000005760                 public quoting_style_vals
.rodata:0000000000005760 quoting_style_vals db    0
.rodata:0000000000005761                 db    0
.rodata:0000000000005762                 db    0
.rodata:0000000000005763                 db    0
.rodata:0000000000005764                 db    1
.rodata:0000000000005765                 db    0
.rodata:0000000000005766                 db    0
.rodata:0000000000005767                 db    0
.rodata:0000000000005768                 db    2
.rodata:0000000000005769                 db    0
.rodata:000000000000576A                 db    0
.rodata:000000000000576B                 db    0
.rodata:000000000000576C                 db    3
.rodata:000000000000576D                 db    0
.rodata:000000000000576E                 db    0
.rodata:000000000000576F                 db    0
.rodata:0000000000005770                 db    4
.rodata:0000000000005771                 db    0
.rodata:0000000000005772                 db    0
.rodata:0000000000005773                 db    0
.rodata:0000000000005774                 db    5
.rodata:0000000000005775                 db    0
.rodata:0000000000005776                 db    0
.rodata:0000000000005777                 db    0
.rodata:0000000000005778                 db    6
.rodata:0000000000005779                 db    0
.rodata:000000000000577A                 db    0
.rodata:000000000000577B                 db    0
.rodata:000000000000577C                 db    7
.rodata:000000000000577D                 db    0
.rodata:000000000000577E                 db    0
.rodata:000000000000577F                 db    0
.rodata:0000000000005780                 db    8
.rodata:0000000000005781                 db    0
.rodata:0000000000005782                 db    0
.rodata:0000000000005783                 db    0
.rodata:0000000000005784                 db    9
.rodata:0000000000005785                 db    0
.rodata:0000000000005786                 db    0
.rodata:0000000000005787                 db    0
.rodata:0000000000005788 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005794 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000579B ; const char aC_0[]
.rodata:000000000000579B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_412C↑o
.rodata:000000000000579F ; const char aWrittenByS[]
.rodata:000000000000579F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000579F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000057AF ; const char aWrittenBySAndS[]
.rodata:00000000000057AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000057AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000057C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000057C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000057C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000057E2 ; const char aReportBugsToS[]
.rodata:00000000000057E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000057E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000057F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000057F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000580D ; const char aSHomePageS[]
.rodata:000000000000580D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000580D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005821                 align 8
.rodata:0000000000005828 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005828 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005828                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005828                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005828                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005828                 db '.',0Ah
.rodata:0000000000005828                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005828                 db 0Ah,0
.rodata:00000000000058F4                 align 8
.rodata:00000000000058F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000058F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000058F8                                         ; DATA XREF: version_etc_arn:loc_4380↑o
.rodata:00000000000058F8                 db 'and %s.',0Ah,0
.rodata:0000000000005918 ; const char aWrittenBySSSSA[]
.rodata:0000000000005918 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005918                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005918                 db '%s, and %s.',0Ah,0
.rodata:000000000000593C                 align 20h
.rodata:0000000000005940 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005940 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005940                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005940                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005968 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005968 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005968                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005968                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005994                 align 8
.rodata:0000000000005998 ; const char aWrittenBySSSSS[]
.rodata:0000000000005998 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005998                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005998                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005998                 db 'and %s.',0Ah,0
.rodata:00000000000059C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000059C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000059C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000059C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000059C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000059FC                 align 20h
.rodata:0000000000005A00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005A00                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005A00                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005A00                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005A3C                 align 20h
.rodata:0000000000005A40 ; const char aGeneralHelpUsi[]
.rodata:0000000000005A40 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005A40                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005A40                 db 0
.rodata:0000000000005A81                 align 8
.rodata:0000000000005A88 jpt_4194        dd offset loc_4216 - 5A88h
.rodata:0000000000005A88                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005A88                                         ; version_etc_arn+9D↑r
.rodata:0000000000005A88                 dd offset loc_42A8 - 5A88h ; jump table for switch statement
.rodata:0000000000005A88                 dd offset loc_42E8 - 5A88h
.rodata:0000000000005A88                 dd offset loc_4330 - 5A88h
.rodata:0000000000005A88                 dd offset loc_4380 - 5A88h
.rodata:0000000000005A88                 dd offset loc_43D8 - 5A88h
.rodata:0000000000005A88                 dd offset loc_4408 - 5A88h
.rodata:0000000000005A88                 dd offset loc_4470 - 5A88h
.rodata:0000000000005A88                 dd offset loc_41A0 - 5A88h
.rodata:0000000000005A88                 dd offset loc_4250 - 5A88h
.rodata:0000000000005AB0                 align 20h
.rodata:0000000000005AC0                 public version_etc_copyright
.rodata:0000000000005AC0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005AC0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005AEF ; const char aMemoryExhauste[]
.rodata:0000000000005AEF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005B00 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005B02 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4AF0↑o
.rodata:0000000000005B08 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005B08                                         ; locale_charset:loc_4B40↑o
.rodata:0000000000005B08 _rodata         ends
.rodata:0000000000005B08
LOAD:0000000000005B0E ; ===========================================================================
LOAD:0000000000005B0E
LOAD:0000000000005B0E ; Segment type: Pure code
LOAD:0000000000005B0E ; Segment permissions: Read/Execute
LOAD:0000000000005B0E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005B0E                 assume cs:LOAD
LOAD:0000000000005B0E                 ;org 5B0Eh
LOAD:0000000000005B0E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005B0E                 align 10h
LOAD:0000000000005B0E LOAD            ends
LOAD:0000000000005B0E
.eh_frame_hdr:0000000000005B10 ; ===========================================================================
.eh_frame_hdr:0000000000005B10
.eh_frame_hdr:0000000000005B10 ; Segment type: Pure data
.eh_frame_hdr:0000000000005B10 ; Segment permissions: Read
.eh_frame_hdr:0000000000005B10 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005B10                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005B10                 ;org 5B10h
.eh_frame_hdr:0000000000005B10 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005B11                 db  1Bh
.eh_frame_hdr:0000000000005B12                 db    3
.eh_frame_hdr:0000000000005B13                 db  3Bh ; ;
.eh_frame_hdr:0000000000005B14                 db  54h ; T
.eh_frame_hdr:0000000000005B15                 db    2
.eh_frame_hdr:0000000000005B16                 db    0
.eh_frame_hdr:0000000000005B17                 db    0
.eh_frame_hdr:0000000000005B18                 db  49h ; I
.eh_frame_hdr:0000000000005B19                 db    0
.eh_frame_hdr:0000000000005B1A                 db    0
.eh_frame_hdr:0000000000005B1B                 db    0
.eh_frame_hdr:0000000000005B1C                 db 0A0h
.eh_frame_hdr:0000000000005B1D                 db 0B7h
.eh_frame_hdr:0000000000005B1E                 db 0FFh
.eh_frame_hdr:0000000000005B1F                 db 0FFh
.eh_frame_hdr:0000000000005B20                 db 0A0h
.eh_frame_hdr:0000000000005B21                 db    2
.eh_frame_hdr:0000000000005B22                 db    0
.eh_frame_hdr:0000000000005B23                 db    0
.eh_frame_hdr:0000000000005B24                 db  60h ; `
.eh_frame_hdr:0000000000005B25                 db 0BAh
.eh_frame_hdr:0000000000005B26                 db 0FFh
.eh_frame_hdr:0000000000005B27                 db 0FFh
.eh_frame_hdr:0000000000005B28                 db 0C8h
.eh_frame_hdr:0000000000005B29                 db    2
.eh_frame_hdr:0000000000005B2A                 db    0
.eh_frame_hdr:0000000000005B2B                 db    0
.eh_frame_hdr:0000000000005B2C                 db  70h ; p
.eh_frame_hdr:0000000000005B2D                 db 0BAh
.eh_frame_hdr:0000000000005B2E                 db 0FFh
.eh_frame_hdr:0000000000005B2F                 db 0FFh
.eh_frame_hdr:0000000000005B30                 db  0Ch
.eh_frame_hdr:0000000000005B31                 db    3
.eh_frame_hdr:0000000000005B32                 db    0
.eh_frame_hdr:0000000000005B33                 db    0
.eh_frame_hdr:0000000000005B34                 db  60h ; `
.eh_frame_hdr:0000000000005B35                 db 0BDh
.eh_frame_hdr:0000000000005B36                 db 0FFh
.eh_frame_hdr:0000000000005B37                 db 0FFh
.eh_frame_hdr:0000000000005B38                 db  70h ; p
.eh_frame_hdr:0000000000005B39                 db    2
.eh_frame_hdr:0000000000005B3A                 db    0
.eh_frame_hdr:0000000000005B3B                 db    0
.eh_frame_hdr:0000000000005B3C                 db  70h ; p
.eh_frame_hdr:0000000000005B3D                 db 0BEh
.eh_frame_hdr:0000000000005B3E                 db 0FFh
.eh_frame_hdr:0000000000005B3F                 db 0FFh
.eh_frame_hdr:0000000000005B40                 db 0E0h
.eh_frame_hdr:0000000000005B41                 db    2
.eh_frame_hdr:0000000000005B42                 db    0
.eh_frame_hdr:0000000000005B43                 db    0
.eh_frame_hdr:0000000000005B44                 db  30h ; 0
.eh_frame_hdr:0000000000005B45                 db 0C2h
.eh_frame_hdr:0000000000005B46                 db 0FFh
.eh_frame_hdr:0000000000005B47                 db 0FFh
.eh_frame_hdr:0000000000005B48                 db  58h ; X
.eh_frame_hdr:0000000000005B49                 db    3
.eh_frame_hdr:0000000000005B4A                 db    0
.eh_frame_hdr:0000000000005B4B                 db    0
.eh_frame_hdr:0000000000005B4C                 db  40h ; @
.eh_frame_hdr:0000000000005B4D                 db 0C2h
.eh_frame_hdr:0000000000005B4E                 db 0FFh
.eh_frame_hdr:0000000000005B4F                 db 0FFh
.eh_frame_hdr:0000000000005B50                 db  6Ch ; l
.eh_frame_hdr:0000000000005B51                 db    3
.eh_frame_hdr:0000000000005B52                 db    0
.eh_frame_hdr:0000000000005B53                 db    0
.eh_frame_hdr:0000000000005B54                 db  50h ; P
.eh_frame_hdr:0000000000005B55                 db 0C2h
.eh_frame_hdr:0000000000005B56                 db 0FFh
.eh_frame_hdr:0000000000005B57                 db 0FFh
.eh_frame_hdr:0000000000005B58                 db  80h
.eh_frame_hdr:0000000000005B59                 db    3
.eh_frame_hdr:0000000000005B5A                 db    0
.eh_frame_hdr:0000000000005B5B                 db    0
.eh_frame_hdr:0000000000005B5C                 db    0
.eh_frame_hdr:0000000000005B5D                 db 0C3h
.eh_frame_hdr:0000000000005B5E                 db 0FFh
.eh_frame_hdr:0000000000005B5F                 db 0FFh
.eh_frame_hdr:0000000000005B60                 db 0B0h
.eh_frame_hdr:0000000000005B61                 db    3
.eh_frame_hdr:0000000000005B62                 db    0
.eh_frame_hdr:0000000000005B63                 db    0
.eh_frame_hdr:0000000000005B64                 db 0B0h
.eh_frame_hdr:0000000000005B65                 db 0C6h
.eh_frame_hdr:0000000000005B66                 db 0FFh
.eh_frame_hdr:0000000000005B67                 db 0FFh
.eh_frame_hdr:0000000000005B68                 db 0F8h
.eh_frame_hdr:0000000000005B69                 db    3
.eh_frame_hdr:0000000000005B6A                 db    0
.eh_frame_hdr:0000000000005B6B                 db    0
.eh_frame_hdr:0000000000005B6C                 db  40h ; @
.eh_frame_hdr:0000000000005B6D                 db 0C7h
.eh_frame_hdr:0000000000005B6E                 db 0FFh
.eh_frame_hdr:0000000000005B6F                 db 0FFh
.eh_frame_hdr:0000000000005B70                 db  1Ch
.eh_frame_hdr:0000000000005B71                 db    4
.eh_frame_hdr:0000000000005B72                 db    0
.eh_frame_hdr:0000000000005B73                 db    0
.eh_frame_hdr:0000000000005B74                 db 0B0h
.eh_frame_hdr:0000000000005B75                 db 0C8h
.eh_frame_hdr:0000000000005B76                 db 0FFh
.eh_frame_hdr:0000000000005B77                 db 0FFh
.eh_frame_hdr:0000000000005B78                 db  50h ; P
.eh_frame_hdr:0000000000005B79                 db    4
.eh_frame_hdr:0000000000005B7A                 db    0
.eh_frame_hdr:0000000000005B7B                 db    0
.eh_frame_hdr:0000000000005B7C                 db  50h ; P
.eh_frame_hdr:0000000000005B7D                 db 0C9h
.eh_frame_hdr:0000000000005B7E                 db 0FFh
.eh_frame_hdr:0000000000005B7F                 db 0FFh
.eh_frame_hdr:0000000000005B80                 db  70h ; p
.eh_frame_hdr:0000000000005B81                 db    4
.eh_frame_hdr:0000000000005B82                 db    0
.eh_frame_hdr:0000000000005B83                 db    0
.eh_frame_hdr:0000000000005B84                 db  40h ; @
.eh_frame_hdr:0000000000005B85                 db 0CAh
.eh_frame_hdr:0000000000005B86                 db 0FFh
.eh_frame_hdr:0000000000005B87                 db 0FFh
.eh_frame_hdr:0000000000005B88                 db 0B4h
.eh_frame_hdr:0000000000005B89                 db    4
.eh_frame_hdr:0000000000005B8A                 db    0
.eh_frame_hdr:0000000000005B8B                 db    0
.eh_frame_hdr:0000000000005B8C                 db  80h
.eh_frame_hdr:0000000000005B8D                 db 0DCh
.eh_frame_hdr:0000000000005B8E                 db 0FFh
.eh_frame_hdr:0000000000005B8F                 db 0FFh
.eh_frame_hdr:0000000000005B90                 db  2Ch ; ,
.eh_frame_hdr:0000000000005B91                 db    5
.eh_frame_hdr:0000000000005B92                 db    0
.eh_frame_hdr:0000000000005B93                 db    0
.eh_frame_hdr:0000000000005B94                 db  30h ; 0
.eh_frame_hdr:0000000000005B95                 db 0DEh
.eh_frame_hdr:0000000000005B96                 db 0FFh
.eh_frame_hdr:0000000000005B97                 db 0FFh
.eh_frame_hdr:0000000000005B98                 db  98h
.eh_frame_hdr:0000000000005B99                 db    5
.eh_frame_hdr:0000000000005B9A                 db    0
.eh_frame_hdr:0000000000005B9B                 db    0
.eh_frame_hdr:0000000000005B9C                 db  70h ; p
.eh_frame_hdr:0000000000005B9D                 db 0DEh
.eh_frame_hdr:0000000000005B9E                 db 0FFh
.eh_frame_hdr:0000000000005B9F                 db 0FFh
.eh_frame_hdr:0000000000005BA0                 db 0C4h
.eh_frame_hdr:0000000000005BA1                 db    5
.eh_frame_hdr:0000000000005BA2                 db    0
.eh_frame_hdr:0000000000005BA3                 db    0
.eh_frame_hdr:0000000000005BA4                 db  90h
.eh_frame_hdr:0000000000005BA5                 db 0DEh
.eh_frame_hdr:0000000000005BA6                 db 0FFh
.eh_frame_hdr:0000000000005BA7                 db 0FFh
.eh_frame_hdr:0000000000005BA8                 db 0D8h
.eh_frame_hdr:0000000000005BA9                 db    5
.eh_frame_hdr:0000000000005BAA                 db    0
.eh_frame_hdr:0000000000005BAB                 db    0
.eh_frame_hdr:0000000000005BAC                 db 0B0h
.eh_frame_hdr:0000000000005BAD                 db 0DEh
.eh_frame_hdr:0000000000005BAE                 db 0FFh
.eh_frame_hdr:0000000000005BAF                 db 0FFh
.eh_frame_hdr:0000000000005BB0                 db 0ECh
.eh_frame_hdr:0000000000005BB1                 db    5
.eh_frame_hdr:0000000000005BB2                 db    0
.eh_frame_hdr:0000000000005BB3                 db    0
.eh_frame_hdr:0000000000005BB4                 db 0F0h
.eh_frame_hdr:0000000000005BB5                 db 0DEh
.eh_frame_hdr:0000000000005BB6                 db 0FFh
.eh_frame_hdr:0000000000005BB7                 db 0FFh
.eh_frame_hdr:0000000000005BB8                 db    0
.eh_frame_hdr:0000000000005BB9                 db    6
.eh_frame_hdr:0000000000005BBA                 db    0
.eh_frame_hdr:0000000000005BBB                 db    0
.eh_frame_hdr:0000000000005BBC                 db  10h
.eh_frame_hdr:0000000000005BBD                 db 0DFh
.eh_frame_hdr:0000000000005BBE                 db 0FFh
.eh_frame_hdr:0000000000005BBF                 db 0FFh
.eh_frame_hdr:0000000000005BC0                 db  14h
.eh_frame_hdr:0000000000005BC1                 db    6
.eh_frame_hdr:0000000000005BC2                 db    0
.eh_frame_hdr:0000000000005BC3                 db    0
.eh_frame_hdr:0000000000005BC4                 db  40h ; @
.eh_frame_hdr:0000000000005BC5                 db 0DFh
.eh_frame_hdr:0000000000005BC6                 db 0FFh
.eh_frame_hdr:0000000000005BC7                 db 0FFh
.eh_frame_hdr:0000000000005BC8                 db  28h ; (
.eh_frame_hdr:0000000000005BC9                 db    6
.eh_frame_hdr:0000000000005BCA                 db    0
.eh_frame_hdr:0000000000005BCB                 db    0
.eh_frame_hdr:0000000000005BCC                 db 0C0h
.eh_frame_hdr:0000000000005BCD                 db 0DFh
.eh_frame_hdr:0000000000005BCE                 db 0FFh
.eh_frame_hdr:0000000000005BCF                 db 0FFh
.eh_frame_hdr:0000000000005BD0                 db  7Ch ; |
.eh_frame_hdr:0000000000005BD1                 db    6
.eh_frame_hdr:0000000000005BD2                 db    0
.eh_frame_hdr:0000000000005BD3                 db    0
.eh_frame_hdr:0000000000005BD4                 db 0B0h
.eh_frame_hdr:0000000000005BD5                 db 0E0h
.eh_frame_hdr:0000000000005BD6                 db 0FFh
.eh_frame_hdr:0000000000005BD7                 db 0FFh
.eh_frame_hdr:0000000000005BD8                 db 0E8h
.eh_frame_hdr:0000000000005BD9                 db    6
.eh_frame_hdr:0000000000005BDA                 db    0
.eh_frame_hdr:0000000000005BDB                 db    0
.eh_frame_hdr:0000000000005BDC                 db 0C0h
.eh_frame_hdr:0000000000005BDD                 db 0E0h
.eh_frame_hdr:0000000000005BDE                 db 0FFh
.eh_frame_hdr:0000000000005BDF                 db 0FFh
.eh_frame_hdr:0000000000005BE0                 db 0FCh
.eh_frame_hdr:0000000000005BE1                 db    6
.eh_frame_hdr:0000000000005BE2                 db    0
.eh_frame_hdr:0000000000005BE3                 db    0
.eh_frame_hdr:0000000000005BE4                 db  60h ; `
.eh_frame_hdr:0000000000005BE5                 db 0E1h
.eh_frame_hdr:0000000000005BE6                 db 0FFh
.eh_frame_hdr:0000000000005BE7                 db 0FFh
.eh_frame_hdr:0000000000005BE8                 db  28h ; (
.eh_frame_hdr:0000000000005BE9                 db    7
.eh_frame_hdr:0000000000005BEA                 db    0
.eh_frame_hdr:0000000000005BEB                 db    0
.eh_frame_hdr:0000000000005BEC                 db  80h
.eh_frame_hdr:0000000000005BED                 db 0E1h
.eh_frame_hdr:0000000000005BEE                 db 0FFh
.eh_frame_hdr:0000000000005BEF                 db 0FFh
.eh_frame_hdr:0000000000005BF0                 db  3Ch ; <
.eh_frame_hdr:0000000000005BF1                 db    7
.eh_frame_hdr:0000000000005BF2                 db    0
.eh_frame_hdr:0000000000005BF3                 db    0
.eh_frame_hdr:0000000000005BF4                 db  90h
.eh_frame_hdr:0000000000005BF5                 db 0E1h
.eh_frame_hdr:0000000000005BF6                 db 0FFh
.eh_frame_hdr:0000000000005BF7                 db 0FFh
.eh_frame_hdr:0000000000005BF8                 db  50h ; P
.eh_frame_hdr:0000000000005BF9                 db    7
.eh_frame_hdr:0000000000005BFA                 db    0
.eh_frame_hdr:0000000000005BFB                 db    0
.eh_frame_hdr:0000000000005BFC                 db 0B0h
.eh_frame_hdr:0000000000005BFD                 db 0E1h
.eh_frame_hdr:0000000000005BFE                 db 0FFh
.eh_frame_hdr:0000000000005BFF                 db 0FFh
.eh_frame_hdr:0000000000005C00                 db  64h ; d
.eh_frame_hdr:0000000000005C01                 db    7
.eh_frame_hdr:0000000000005C02                 db    0
.eh_frame_hdr:0000000000005C03                 db    0
.eh_frame_hdr:0000000000005C04                 db 0D0h
.eh_frame_hdr:0000000000005C05                 db 0E1h
.eh_frame_hdr:0000000000005C06                 db 0FFh
.eh_frame_hdr:0000000000005C07                 db 0FFh
.eh_frame_hdr:0000000000005C08                 db  78h ; x
.eh_frame_hdr:0000000000005C09                 db    7
.eh_frame_hdr:0000000000005C0A                 db    0
.eh_frame_hdr:0000000000005C0B                 db    0
.eh_frame_hdr:0000000000005C0C                 db  60h ; `
.eh_frame_hdr:0000000000005C0D                 db 0E2h
.eh_frame_hdr:0000000000005C0E                 db 0FFh
.eh_frame_hdr:0000000000005C0F                 db 0FFh
.eh_frame_hdr:0000000000005C10                 db  94h
.eh_frame_hdr:0000000000005C11                 db    7
.eh_frame_hdr:0000000000005C12                 db    0
.eh_frame_hdr:0000000000005C13                 db    0
.eh_frame_hdr:0000000000005C14                 db 0F0h
.eh_frame_hdr:0000000000005C15                 db 0E2h
.eh_frame_hdr:0000000000005C16                 db 0FFh
.eh_frame_hdr:0000000000005C17                 db 0FFh
.eh_frame_hdr:0000000000005C18                 db 0B0h
.eh_frame_hdr:0000000000005C19                 db    7
.eh_frame_hdr:0000000000005C1A                 db    0
.eh_frame_hdr:0000000000005C1B                 db    0
.eh_frame_hdr:0000000000005C1C                 db    0
.eh_frame_hdr:0000000000005C1D                 db 0E3h
.eh_frame_hdr:0000000000005C1E                 db 0FFh
.eh_frame_hdr:0000000000005C1F                 db 0FFh
.eh_frame_hdr:0000000000005C20                 db 0C4h
.eh_frame_hdr:0000000000005C21                 db    7
.eh_frame_hdr:0000000000005C22                 db    0
.eh_frame_hdr:0000000000005C23                 db    0
.eh_frame_hdr:0000000000005C24                 db  10h
.eh_frame_hdr:0000000000005C25                 db 0E3h
.eh_frame_hdr:0000000000005C26                 db 0FFh
.eh_frame_hdr:0000000000005C27                 db 0FFh
.eh_frame_hdr:0000000000005C28                 db 0D8h
.eh_frame_hdr:0000000000005C29                 db    7
.eh_frame_hdr:0000000000005C2A                 db    0
.eh_frame_hdr:0000000000005C2B                 db    0
.eh_frame_hdr:0000000000005C2C                 db 0B0h
.eh_frame_hdr:0000000000005C2D                 db 0E3h
.eh_frame_hdr:0000000000005C2E                 db 0FFh
.eh_frame_hdr:0000000000005C2F                 db 0FFh
.eh_frame_hdr:0000000000005C30                 db 0F4h
.eh_frame_hdr:0000000000005C31                 db    7
.eh_frame_hdr:0000000000005C32                 db    0
.eh_frame_hdr:0000000000005C33                 db    0
.eh_frame_hdr:0000000000005C34                 db 0C0h
.eh_frame_hdr:0000000000005C35                 db 0E3h
.eh_frame_hdr:0000000000005C36                 db 0FFh
.eh_frame_hdr:0000000000005C37                 db 0FFh
.eh_frame_hdr:0000000000005C38                 db    8
.eh_frame_hdr:0000000000005C39                 db    8
.eh_frame_hdr:0000000000005C3A                 db    0
.eh_frame_hdr:0000000000005C3B                 db    0
.eh_frame_hdr:0000000000005C3C                 db 0E0h
.eh_frame_hdr:0000000000005C3D                 db 0E3h
.eh_frame_hdr:0000000000005C3E                 db 0FFh
.eh_frame_hdr:0000000000005C3F                 db 0FFh
.eh_frame_hdr:0000000000005C40                 db  1Ch
.eh_frame_hdr:0000000000005C41                 db    8
.eh_frame_hdr:0000000000005C42                 db    0
.eh_frame_hdr:0000000000005C43                 db    0
.eh_frame_hdr:0000000000005C44                 db 0F0h
.eh_frame_hdr:0000000000005C45                 db 0E3h
.eh_frame_hdr:0000000000005C46                 db 0FFh
.eh_frame_hdr:0000000000005C47                 db 0FFh
.eh_frame_hdr:0000000000005C48                 db  30h ; 0
.eh_frame_hdr:0000000000005C49                 db    8
.eh_frame_hdr:0000000000005C4A                 db    0
.eh_frame_hdr:0000000000005C4B                 db    0
.eh_frame_hdr:0000000000005C4C                 db  80h
.eh_frame_hdr:0000000000005C4D                 db 0E4h
.eh_frame_hdr:0000000000005C4E                 db 0FFh
.eh_frame_hdr:0000000000005C4F                 db 0FFh
.eh_frame_hdr:0000000000005C50                 db  4Ch ; L
.eh_frame_hdr:0000000000005C51                 db    8
.eh_frame_hdr:0000000000005C52                 db    0
.eh_frame_hdr:0000000000005C53                 db    0
.eh_frame_hdr:0000000000005C54                 db  20h
.eh_frame_hdr:0000000000005C55                 db 0E5h
.eh_frame_hdr:0000000000005C56                 db 0FFh
.eh_frame_hdr:0000000000005C57                 db 0FFh
.eh_frame_hdr:0000000000005C58                 db  68h ; h
.eh_frame_hdr:0000000000005C59                 db    8
.eh_frame_hdr:0000000000005C5A                 db    0
.eh_frame_hdr:0000000000005C5B                 db    0
.eh_frame_hdr:0000000000005C5C                 db  30h ; 0
.eh_frame_hdr:0000000000005C5D                 db 0E5h
.eh_frame_hdr:0000000000005C5E                 db 0FFh
.eh_frame_hdr:0000000000005C5F                 db 0FFh
.eh_frame_hdr:0000000000005C60                 db  7Ch ; |
.eh_frame_hdr:0000000000005C61                 db    8
.eh_frame_hdr:0000000000005C62                 db    0
.eh_frame_hdr:0000000000005C63                 db    0
.eh_frame_hdr:0000000000005C64                 db  50h ; P
.eh_frame_hdr:0000000000005C65                 db 0E5h
.eh_frame_hdr:0000000000005C66                 db 0FFh
.eh_frame_hdr:0000000000005C67                 db 0FFh
.eh_frame_hdr:0000000000005C68                 db  90h
.eh_frame_hdr:0000000000005C69                 db    8
.eh_frame_hdr:0000000000005C6A                 db    0
.eh_frame_hdr:0000000000005C6B                 db    0
.eh_frame_hdr:0000000000005C6C                 db  70h ; p
.eh_frame_hdr:0000000000005C6D                 db 0E5h
.eh_frame_hdr:0000000000005C6E                 db 0FFh
.eh_frame_hdr:0000000000005C6F                 db 0FFh
.eh_frame_hdr:0000000000005C70                 db 0A4h
.eh_frame_hdr:0000000000005C71                 db    8
.eh_frame_hdr:0000000000005C72                 db    0
.eh_frame_hdr:0000000000005C73                 db    0
.eh_frame_hdr:0000000000005C74                 db  80h
.eh_frame_hdr:0000000000005C75                 db 0E5h
.eh_frame_hdr:0000000000005C76                 db 0FFh
.eh_frame_hdr:0000000000005C77                 db 0FFh
.eh_frame_hdr:0000000000005C78                 db 0B8h
.eh_frame_hdr:0000000000005C79                 db    8
.eh_frame_hdr:0000000000005C7A                 db    0
.eh_frame_hdr:0000000000005C7B                 db    0
.eh_frame_hdr:0000000000005C7C                 db 0A0h
.eh_frame_hdr:0000000000005C7D                 db 0E5h
.eh_frame_hdr:0000000000005C7E                 db 0FFh
.eh_frame_hdr:0000000000005C7F                 db 0FFh
.eh_frame_hdr:0000000000005C80                 db 0CCh
.eh_frame_hdr:0000000000005C81                 db    8
.eh_frame_hdr:0000000000005C82                 db    0
.eh_frame_hdr:0000000000005C83                 db    0
.eh_frame_hdr:0000000000005C84                 db 0C0h
.eh_frame_hdr:0000000000005C85                 db 0E5h
.eh_frame_hdr:0000000000005C86                 db 0FFh
.eh_frame_hdr:0000000000005C87                 db 0FFh
.eh_frame_hdr:0000000000005C88                 db 0E0h
.eh_frame_hdr:0000000000005C89                 db    8
.eh_frame_hdr:0000000000005C8A                 db    0
.eh_frame_hdr:0000000000005C8B                 db    0
.eh_frame_hdr:0000000000005C8C                 db 0E0h
.eh_frame_hdr:0000000000005C8D                 db 0E5h
.eh_frame_hdr:0000000000005C8E                 db 0FFh
.eh_frame_hdr:0000000000005C8F                 db 0FFh
.eh_frame_hdr:0000000000005C90                 db 0F8h
.eh_frame_hdr:0000000000005C91                 db    8
.eh_frame_hdr:0000000000005C92                 db    0
.eh_frame_hdr:0000000000005C93                 db    0
.eh_frame_hdr:0000000000005C94                 db    0
.eh_frame_hdr:0000000000005C95                 db 0EAh
.eh_frame_hdr:0000000000005C96                 db 0FFh
.eh_frame_hdr:0000000000005C97                 db 0FFh
.eh_frame_hdr:0000000000005C98                 db  0Ch
.eh_frame_hdr:0000000000005C99                 db  0Ah
.eh_frame_hdr:0000000000005C9A                 db    0
.eh_frame_hdr:0000000000005C9B                 db    0
.eh_frame_hdr:0000000000005C9C                 db  20h
.eh_frame_hdr:0000000000005C9D                 db 0EAh
.eh_frame_hdr:0000000000005C9E                 db 0FFh
.eh_frame_hdr:0000000000005C9F                 db 0FFh
.eh_frame_hdr:0000000000005CA0                 db  20h
.eh_frame_hdr:0000000000005CA1                 db  0Ah
.eh_frame_hdr:0000000000005CA2                 db    0
.eh_frame_hdr:0000000000005CA3                 db    0
.eh_frame_hdr:0000000000005CA4                 db 0A0h
.eh_frame_hdr:0000000000005CA5                 db 0EAh
.eh_frame_hdr:0000000000005CA6                 db 0FFh
.eh_frame_hdr:0000000000005CA7                 db 0FFh
.eh_frame_hdr:0000000000005CA8                 db  3Ch ; <
.eh_frame_hdr:0000000000005CA9                 db  0Ah
.eh_frame_hdr:0000000000005CAA                 db    0
.eh_frame_hdr:0000000000005CAB                 db    0
.eh_frame_hdr:0000000000005CAC                 db  80h
.eh_frame_hdr:0000000000005CAD                 db 0EBh
.eh_frame_hdr:0000000000005CAE                 db 0FFh
.eh_frame_hdr:0000000000005CAF                 db 0FFh
.eh_frame_hdr:0000000000005CB0                 db  68h ; h
.eh_frame_hdr:0000000000005CB1                 db  0Ah
.eh_frame_hdr:0000000000005CB2                 db    0
.eh_frame_hdr:0000000000005CB3                 db    0
.eh_frame_hdr:0000000000005CB4                 db    0
.eh_frame_hdr:0000000000005CB5                 db 0ECh
.eh_frame_hdr:0000000000005CB6                 db 0FFh
.eh_frame_hdr:0000000000005CB7                 db 0FFh
.eh_frame_hdr:0000000000005CB8                 db  88h
.eh_frame_hdr:0000000000005CB9                 db  0Ah
.eh_frame_hdr:0000000000005CBA                 db    0
.eh_frame_hdr:0000000000005CBB                 db    0
.eh_frame_hdr:0000000000005CBC                 db  20h
.eh_frame_hdr:0000000000005CBD                 db 0ECh
.eh_frame_hdr:0000000000005CBE                 db 0FFh
.eh_frame_hdr:0000000000005CBF                 db 0FFh
.eh_frame_hdr:0000000000005CC0                 db 0A4h
.eh_frame_hdr:0000000000005CC1                 db  0Ah
.eh_frame_hdr:0000000000005CC2                 db    0
.eh_frame_hdr:0000000000005CC3                 db    0
.eh_frame_hdr:0000000000005CC4                 db  50h ; P
.eh_frame_hdr:0000000000005CC5                 db 0ECh
.eh_frame_hdr:0000000000005CC6                 db 0FFh
.eh_frame_hdr:0000000000005CC7                 db 0FFh
.eh_frame_hdr:0000000000005CC8                 db 0B8h
.eh_frame_hdr:0000000000005CC9                 db  0Ah
.eh_frame_hdr:0000000000005CCA                 db    0
.eh_frame_hdr:0000000000005CCB                 db    0
.eh_frame_hdr:0000000000005CCC                 db  60h ; `
.eh_frame_hdr:0000000000005CCD                 db 0ECh
.eh_frame_hdr:0000000000005CCE                 db 0FFh
.eh_frame_hdr:0000000000005CCF                 db 0FFh
.eh_frame_hdr:0000000000005CD0                 db 0CCh
.eh_frame_hdr:0000000000005CD1                 db  0Ah
.eh_frame_hdr:0000000000005CD2                 db    0
.eh_frame_hdr:0000000000005CD3                 db    0
.eh_frame_hdr:0000000000005CD4                 db 0A0h
.eh_frame_hdr:0000000000005CD5                 db 0ECh
.eh_frame_hdr:0000000000005CD6                 db 0FFh
.eh_frame_hdr:0000000000005CD7                 db 0FFh
.eh_frame_hdr:0000000000005CD8                 db 0F0h
.eh_frame_hdr:0000000000005CD9                 db  0Ah
.eh_frame_hdr:0000000000005CDA                 db    0
.eh_frame_hdr:0000000000005CDB                 db    0
.eh_frame_hdr:0000000000005CDC                 db 0D0h
.eh_frame_hdr:0000000000005CDD                 db 0ECh
.eh_frame_hdr:0000000000005CDE                 db 0FFh
.eh_frame_hdr:0000000000005CDF                 db 0FFh
.eh_frame_hdr:0000000000005CE0                 db    4
.eh_frame_hdr:0000000000005CE1                 db  0Bh
.eh_frame_hdr:0000000000005CE2                 db    0
.eh_frame_hdr:0000000000005CE3                 db    0
.eh_frame_hdr:0000000000005CE4                 db  60h ; `
.eh_frame_hdr:0000000000005CE5                 db 0EDh
.eh_frame_hdr:0000000000005CE6                 db 0FFh
.eh_frame_hdr:0000000000005CE7                 db 0FFh
.eh_frame_hdr:0000000000005CE8                 db  1Ch
.eh_frame_hdr:0000000000005CE9                 db  0Bh
.eh_frame_hdr:0000000000005CEA                 db    0
.eh_frame_hdr:0000000000005CEB                 db    0
.eh_frame_hdr:0000000000005CEC                 db 0B0h
.eh_frame_hdr:0000000000005CED                 db 0EDh
.eh_frame_hdr:0000000000005CEE                 db 0FFh
.eh_frame_hdr:0000000000005CEF                 db 0FFh
.eh_frame_hdr:0000000000005CF0                 db  34h ; 4
.eh_frame_hdr:0000000000005CF1                 db  0Bh
.eh_frame_hdr:0000000000005CF2                 db    0
.eh_frame_hdr:0000000000005CF3                 db    0
.eh_frame_hdr:0000000000005CF4                 db 0D0h
.eh_frame_hdr:0000000000005CF5                 db 0EDh
.eh_frame_hdr:0000000000005CF6                 db 0FFh
.eh_frame_hdr:0000000000005CF7                 db 0FFh
.eh_frame_hdr:0000000000005CF8                 db  50h ; P
.eh_frame_hdr:0000000000005CF9                 db  0Bh
.eh_frame_hdr:0000000000005CFA                 db    0
.eh_frame_hdr:0000000000005CFB                 db    0
.eh_frame_hdr:0000000000005CFC                 db    0
.eh_frame_hdr:0000000000005CFD                 db 0EEh
.eh_frame_hdr:0000000000005CFE                 db 0FFh
.eh_frame_hdr:0000000000005CFF                 db 0FFh
.eh_frame_hdr:0000000000005D00                 db  6Ch ; l
.eh_frame_hdr:0000000000005D01                 db  0Bh
.eh_frame_hdr:0000000000005D02                 db    0
.eh_frame_hdr:0000000000005D03                 db    0
.eh_frame_hdr:0000000000005D04                 db  30h ; 0
.eh_frame_hdr:0000000000005D05                 db 0EEh
.eh_frame_hdr:0000000000005D06                 db 0FFh
.eh_frame_hdr:0000000000005D07                 db 0FFh
.eh_frame_hdr:0000000000005D08                 db  94h
.eh_frame_hdr:0000000000005D09                 db  0Bh
.eh_frame_hdr:0000000000005D0A                 db    0
.eh_frame_hdr:0000000000005D0B                 db    0
.eh_frame_hdr:0000000000005D0C                 db  50h ; P
.eh_frame_hdr:0000000000005D0D                 db 0EEh
.eh_frame_hdr:0000000000005D0E                 db 0FFh
.eh_frame_hdr:0000000000005D0F                 db 0FFh
.eh_frame_hdr:0000000000005D10                 db 0B0h
.eh_frame_hdr:0000000000005D11                 db  0Bh
.eh_frame_hdr:0000000000005D12                 db    0
.eh_frame_hdr:0000000000005D13                 db    0
.eh_frame_hdr:0000000000005D14                 db  90h
.eh_frame_hdr:0000000000005D15                 db 0EEh
.eh_frame_hdr:0000000000005D16                 db 0FFh
.eh_frame_hdr:0000000000005D17                 db 0FFh
.eh_frame_hdr:0000000000005D18                 db 0C8h
.eh_frame_hdr:0000000000005D19                 db  0Bh
.eh_frame_hdr:0000000000005D1A                 db    0
.eh_frame_hdr:0000000000005D1B                 db    0
.eh_frame_hdr:0000000000005D1C                 db  20h
.eh_frame_hdr:0000000000005D1D                 db 0EFh
.eh_frame_hdr:0000000000005D1E                 db 0FFh
.eh_frame_hdr:0000000000005D1F                 db 0FFh
.eh_frame_hdr:0000000000005D20                 db    8
.eh_frame_hdr:0000000000005D21                 db  0Ch
.eh_frame_hdr:0000000000005D22                 db    0
.eh_frame_hdr:0000000000005D23                 db    0
.eh_frame_hdr:0000000000005D24                 db 0A0h
.eh_frame_hdr:0000000000005D25                 db 0EFh
.eh_frame_hdr:0000000000005D26                 db 0FFh
.eh_frame_hdr:0000000000005D27                 db 0FFh
.eh_frame_hdr:0000000000005D28                 db  58h ; X
.eh_frame_hdr:0000000000005D29                 db  0Ch
.eh_frame_hdr:0000000000005D2A                 db    0
.eh_frame_hdr:0000000000005D2B                 db    0
.eh_frame_hdr:0000000000005D2C                 db    0
.eh_frame_hdr:0000000000005D2D                 db 0F0h
.eh_frame_hdr:0000000000005D2E                 db 0FFh
.eh_frame_hdr:0000000000005D2F                 db 0FFh
.eh_frame_hdr:0000000000005D30                 db  78h ; x
.eh_frame_hdr:0000000000005D31                 db  0Ch
.eh_frame_hdr:0000000000005D32                 db    0
.eh_frame_hdr:0000000000005D33                 db    0
.eh_frame_hdr:0000000000005D34                 db  40h ; @
.eh_frame_hdr:0000000000005D35                 db 0F0h
.eh_frame_hdr:0000000000005D36                 db 0FFh
.eh_frame_hdr:0000000000005D37                 db 0FFh
.eh_frame_hdr:0000000000005D38                 db  98h
.eh_frame_hdr:0000000000005D39                 db  0Ch
.eh_frame_hdr:0000000000005D3A                 db    0
.eh_frame_hdr:0000000000005D3B                 db    0
.eh_frame_hdr:0000000000005D3C                 db 0C0h
.eh_frame_hdr:0000000000005D3D                 db 0F0h
.eh_frame_hdr:0000000000005D3E                 db 0FFh
.eh_frame_hdr:0000000000005D3F                 db 0FFh
.eh_frame_hdr:0000000000005D40                 db 0D0h
.eh_frame_hdr:0000000000005D41                 db  0Ch
.eh_frame_hdr:0000000000005D42                 db    0
.eh_frame_hdr:0000000000005D43                 db    0
.eh_frame_hdr:0000000000005D44                 db    0
.eh_frame_hdr:0000000000005D45                 db 0F1h
.eh_frame_hdr:0000000000005D46                 db 0FFh
.eh_frame_hdr:0000000000005D47                 db 0FFh
.eh_frame_hdr:0000000000005D48                 db 0F0h
.eh_frame_hdr:0000000000005D49                 db  0Ch
.eh_frame_hdr:0000000000005D4A                 db    0
.eh_frame_hdr:0000000000005D4B                 db    0
.eh_frame_hdr:0000000000005D4C                 db  60h ; `
.eh_frame_hdr:0000000000005D4D                 db 0F1h
.eh_frame_hdr:0000000000005D4E                 db 0FFh
.eh_frame_hdr:0000000000005D4F                 db 0FFh
.eh_frame_hdr:0000000000005D50                 db  20h
.eh_frame_hdr:0000000000005D51                 db  0Dh
.eh_frame_hdr:0000000000005D52                 db    0
.eh_frame_hdr:0000000000005D53                 db    0
.eh_frame_hdr:0000000000005D54                 db 0D0h
.eh_frame_hdr:0000000000005D55                 db 0F1h
.eh_frame_hdr:0000000000005D56                 db 0FFh
.eh_frame_hdr:0000000000005D57                 db 0FFh
.eh_frame_hdr:0000000000005D58                 db  68h ; h
.eh_frame_hdr:0000000000005D59                 db  0Dh
.eh_frame_hdr:0000000000005D5A                 db    0
.eh_frame_hdr:0000000000005D5B                 db    0
.eh_frame_hdr:0000000000005D5C                 db 0E0h
.eh_frame_hdr:0000000000005D5D                 db 0F1h
.eh_frame_hdr:0000000000005D5E                 db 0FFh
.eh_frame_hdr:0000000000005D5F                 db 0FFh
.eh_frame_hdr:0000000000005D60                 db  80h
.eh_frame_hdr:0000000000005D61                 db  0Dh
.eh_frame_hdr:0000000000005D62                 db    0
.eh_frame_hdr:0000000000005D63                 db    0
.eh_frame_hdr:0000000000005D63 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005D63
LOAD:0000000000005D64 ; ===========================================================================
LOAD:0000000000005D64
LOAD:0000000000005D64 ; Segment type: Pure code
LOAD:0000000000005D64 ; Segment permissions: Read/Execute
LOAD:0000000000005D64 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005D64                 assume cs:LOAD
LOAD:0000000000005D64                 ;org 5D64h
LOAD:0000000000005D64                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005D64                 align 8
LOAD:0000000000005D64 LOAD            ends
LOAD:0000000000005D64
.eh_frame:0000000000005D68 ; ===========================================================================
.eh_frame:0000000000005D68
.eh_frame:0000000000005D68 ; Segment type: Pure data
.eh_frame:0000000000005D68 ; Segment permissions: Read
.eh_frame:0000000000005D68 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005D68                 assume cs:_eh_frame
.eh_frame:0000000000005D68                 ;org 5D68h
.eh_frame:0000000000005D68                 db  14h
.eh_frame:0000000000005D69                 db    0
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db    0
.eh_frame:0000000000005D6D                 db    0
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db    1
.eh_frame:0000000000005D71                 db  7Ah ; z
.eh_frame:0000000000005D72                 db  52h ; R
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db    1
.eh_frame:0000000000005D75                 db  78h ; x
.eh_frame:0000000000005D76                 db  10h
.eh_frame:0000000000005D77                 db    1
.eh_frame:0000000000005D78                 db  1Bh
.eh_frame:0000000000005D79                 db  0Ch
.eh_frame:0000000000005D7A                 db    7
.eh_frame:0000000000005D7B                 db    8
.eh_frame:0000000000005D7C                 db  90h
.eh_frame:0000000000005D7D                 db    1
.eh_frame:0000000000005D7E                 db    7
.eh_frame:0000000000005D7F                 db  10h
.eh_frame:0000000000005D80                 db  14h
.eh_frame:0000000000005D81                 db    0
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db  1Ch
.eh_frame:0000000000005D85                 db    0
.eh_frame:0000000000005D86                 db    0
.eh_frame:0000000000005D87                 db    0
.eh_frame:0000000000005D88                 db 0E8h
.eh_frame:0000000000005D89                 db 0BAh
.eh_frame:0000000000005D8A                 db 0FFh
.eh_frame:0000000000005D8B                 db 0FFh
.eh_frame:0000000000005D8C                 db  2Bh ; +
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db    0
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db    0
.eh_frame:0000000000005D95                 db    0
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db  14h
.eh_frame:0000000000005D99                 db    0
.eh_frame:0000000000005D9A                 db    0
.eh_frame:0000000000005D9B                 db    0
.eh_frame:0000000000005D9C                 db    0
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db    1
.eh_frame:0000000000005DA1                 db  7Ah ; z
.eh_frame:0000000000005DA2                 db  52h ; R
.eh_frame:0000000000005DA3                 db    0
.eh_frame:0000000000005DA4                 db    1
.eh_frame:0000000000005DA5                 db  78h ; x
.eh_frame:0000000000005DA6                 db  10h
.eh_frame:0000000000005DA7                 db    1
.eh_frame:0000000000005DA8                 db  1Bh
.eh_frame:0000000000005DA9                 db  0Ch
.eh_frame:0000000000005DAA                 db    7
.eh_frame:0000000000005DAB                 db    8
.eh_frame:0000000000005DAC                 db  90h
.eh_frame:0000000000005DAD                 db    1
.eh_frame:0000000000005DAE                 db    0
.eh_frame:0000000000005DAF                 db    0
.eh_frame:0000000000005DB0                 db  24h ; $
.eh_frame:0000000000005DB1                 db    0
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db  1Ch
.eh_frame:0000000000005DB5                 db    0
.eh_frame:0000000000005DB6                 db    0
.eh_frame:0000000000005DB7                 db    0
.eh_frame:0000000000005DB8                 db 0F8h
.eh_frame:0000000000005DB9                 db 0B4h
.eh_frame:0000000000005DBA                 db 0FFh
.eh_frame:0000000000005DBB                 db 0FFh
.eh_frame:0000000000005DBC                 db 0C0h
.eh_frame:0000000000005DBD                 db    2
.eh_frame:0000000000005DBE                 db    0
.eh_frame:0000000000005DBF                 db    0
.eh_frame:0000000000005DC0                 db    0
.eh_frame:0000000000005DC1                 db  0Eh
.eh_frame:0000000000005DC2                 db  10h
.eh_frame:0000000000005DC3                 db  46h ; F
.eh_frame:0000000000005DC4                 db  0Eh
.eh_frame:0000000000005DC5                 db  18h
.eh_frame:0000000000005DC6                 db  4Ah ; J
.eh_frame:0000000000005DC7                 db  0Fh
.eh_frame:0000000000005DC8                 db  0Bh
.eh_frame:0000000000005DC9                 db  77h ; w
.eh_frame:0000000000005DCA                 db    8
.eh_frame:0000000000005DCB                 db  80h
.eh_frame:0000000000005DCC                 db    0
.eh_frame:0000000000005DCD                 db  3Fh ; ?
.eh_frame:0000000000005DCE                 db  1Ah
.eh_frame:0000000000005DCF                 db  3Bh ; ;
.eh_frame:0000000000005DD0                 db  2Ah ; *
.eh_frame:0000000000005DD1                 db  33h ; 3
.eh_frame:0000000000005DD2                 db  24h ; $
.eh_frame:0000000000005DD3                 db  22h ; "
.eh_frame:0000000000005DD4                 db    0
.eh_frame:0000000000005DD5                 db    0
.eh_frame:0000000000005DD6                 db    0
.eh_frame:0000000000005DD7                 db    0
.eh_frame:0000000000005DD8                 db  14h
.eh_frame:0000000000005DD9                 db    0
.eh_frame:0000000000005DDA                 db    0
.eh_frame:0000000000005DDB                 db    0
.eh_frame:0000000000005DDC                 db  44h ; D
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db  90h
.eh_frame:0000000000005DE1                 db 0B7h
.eh_frame:0000000000005DE2                 db 0FFh
.eh_frame:0000000000005DE3                 db 0FFh
.eh_frame:0000000000005DE4                 db    8
.eh_frame:0000000000005DE5                 db    0
.eh_frame:0000000000005DE6                 db    0
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db    0
.eh_frame:0000000000005DE9                 db    0
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db    0
.eh_frame:0000000000005DED                 db    0
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db  28h ; (
.eh_frame:0000000000005DF1                 db    0
.eh_frame:0000000000005DF2                 db    0
.eh_frame:0000000000005DF3                 db    0
.eh_frame:0000000000005DF4                 db  5Ch ; \
.eh_frame:0000000000005DF5                 db    0
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db  88h
.eh_frame:0000000000005DF9                 db 0BBh
.eh_frame:0000000000005DFA                 db 0FFh
.eh_frame:0000000000005DFB                 db 0FFh
.eh_frame:0000000000005DFC                 db 0B2h
.eh_frame:0000000000005DFD                 db    3
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db    0
.eh_frame:0000000000005E01                 db  42h ; B
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db  10h
.eh_frame:0000000000005E04                 db  8Dh
.eh_frame:0000000000005E05                 db    2
.eh_frame:0000000000005E06                 db  42h ; B
.eh_frame:0000000000005E07                 db  0Eh
.eh_frame:0000000000005E08                 db  18h
.eh_frame:0000000000005E09                 db  8Ch
.eh_frame:0000000000005E0A                 db    3
.eh_frame:0000000000005E0B                 db  46h ; F
.eh_frame:0000000000005E0C                 db  0Eh
.eh_frame:0000000000005E0D                 db  20h
.eh_frame:0000000000005E0E                 db  86h
.eh_frame:0000000000005E0F                 db    4
.eh_frame:0000000000005E10                 db  41h ; A
.eh_frame:0000000000005E11                 db  0Eh
.eh_frame:0000000000005E12                 db  28h ; (
.eh_frame:0000000000005E13                 db  83h
.eh_frame:0000000000005E14                 db    5
.eh_frame:0000000000005E15                 db  49h ; I
.eh_frame:0000000000005E16                 db  0Eh
.eh_frame:0000000000005E17                 db 0B0h
.eh_frame:0000000000005E18                 db    1
.eh_frame:0000000000005E19                 db    0
.eh_frame:0000000000005E1A                 db    0
.eh_frame:0000000000005E1B                 db    0
.eh_frame:0000000000005E1C                 db  48h ; H
.eh_frame:0000000000005E1D                 db    0
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db  88h
.eh_frame:0000000000005E21                 db    0
.eh_frame:0000000000005E22                 db    0
.eh_frame:0000000000005E23                 db    0
.eh_frame:0000000000005E24                 db  5Ch ; \
.eh_frame:0000000000005E25                 db 0B7h
.eh_frame:0000000000005E26                 db 0FFh
.eh_frame:0000000000005E27                 db 0FFh
.eh_frame:0000000000005E28                 db 0E8h
.eh_frame:0000000000005E29                 db    2
.eh_frame:0000000000005E2A                 db    0
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db    0
.eh_frame:0000000000005E2D                 db  42h ; B
.eh_frame:0000000000005E2E                 db  0Eh
.eh_frame:0000000000005E2F                 db  10h
.eh_frame:0000000000005E30                 db  8Fh
.eh_frame:0000000000005E31                 db    2
.eh_frame:0000000000005E32                 db  42h ; B
.eh_frame:0000000000005E33                 db  0Eh
.eh_frame:0000000000005E34                 db  18h
.eh_frame:0000000000005E35                 db  8Eh
.eh_frame:0000000000005E36                 db    3
.eh_frame:0000000000005E37                 db  42h ; B
.eh_frame:0000000000005E38                 db  0Eh
.eh_frame:0000000000005E39                 db  20h
.eh_frame:0000000000005E3A                 db  8Dh
.eh_frame:0000000000005E3B                 db    4
.eh_frame:0000000000005E3C                 db  42h ; B
.eh_frame:0000000000005E3D                 db  0Eh
.eh_frame:0000000000005E3E                 db  28h ; (
.eh_frame:0000000000005E3F                 db  8Ch
.eh_frame:0000000000005E40                 db    5
.eh_frame:0000000000005E41                 db  48h ; H
.eh_frame:0000000000005E42                 db  0Eh
.eh_frame:0000000000005E43                 db  30h ; 0
.eh_frame:0000000000005E44                 db  86h
.eh_frame:0000000000005E45                 db    6
.eh_frame:0000000000005E46                 db  41h ; A
.eh_frame:0000000000005E47                 db  0Eh
.eh_frame:0000000000005E48                 db  38h ; 8
.eh_frame:0000000000005E49                 db  83h
.eh_frame:0000000000005E4A                 db    7
.eh_frame:0000000000005E4B                 db  4Ch ; L
.eh_frame:0000000000005E4C                 db  0Eh
.eh_frame:0000000000005E4D                 db  40h ; @
.eh_frame:0000000000005E4E                 db    3
.eh_frame:0000000000005E4F                 db  12h
.eh_frame:0000000000005E50                 db    2
.eh_frame:0000000000005E51                 db  0Ah
.eh_frame:0000000000005E52                 db  0Eh
.eh_frame:0000000000005E53                 db  38h ; 8
.eh_frame:0000000000005E54                 db  44h ; D
.eh_frame:0000000000005E55                 db  0Eh
.eh_frame:0000000000005E56                 db  30h ; 0
.eh_frame:0000000000005E57                 db  41h ; A
.eh_frame:0000000000005E58                 db  0Eh
.eh_frame:0000000000005E59                 db  28h ; (
.eh_frame:0000000000005E5A                 db  42h ; B
.eh_frame:0000000000005E5B                 db  0Eh
.eh_frame:0000000000005E5C                 db  20h
.eh_frame:0000000000005E5D                 db  42h ; B
.eh_frame:0000000000005E5E                 db  0Eh
.eh_frame:0000000000005E5F                 db  18h
.eh_frame:0000000000005E60                 db  42h ; B
.eh_frame:0000000000005E61                 db  0Eh
.eh_frame:0000000000005E62                 db  10h
.eh_frame:0000000000005E63                 db  42h ; B
.eh_frame:0000000000005E64                 db  0Eh
.eh_frame:0000000000005E65                 db    8
.eh_frame:0000000000005E66                 db  41h ; A
.eh_frame:0000000000005E67                 db  0Bh
.eh_frame:0000000000005E68                 db  10h
.eh_frame:0000000000005E69                 db    0
.eh_frame:0000000000005E6A                 db    0
.eh_frame:0000000000005E6B                 db    0
.eh_frame:0000000000005E6C                 db 0D4h
.eh_frame:0000000000005E6D                 db    0
.eh_frame:0000000000005E6E                 db    0
.eh_frame:0000000000005E6F                 db    0
.eh_frame:0000000000005E70                 db 0D0h
.eh_frame:0000000000005E71                 db 0BEh
.eh_frame:0000000000005E72                 db 0FFh
.eh_frame:0000000000005E73                 db 0FFh
.eh_frame:0000000000005E74                 db    8
.eh_frame:0000000000005E75                 db    0
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db    0
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db  10h
.eh_frame:0000000000005E7D                 db    0
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db 0E8h
.eh_frame:0000000000005E81                 db    0
.eh_frame:0000000000005E82                 db    0
.eh_frame:0000000000005E83                 db    0
.eh_frame:0000000000005E84                 db 0CCh
.eh_frame:0000000000005E85                 db 0BEh
.eh_frame:0000000000005E86                 db 0FFh
.eh_frame:0000000000005E87                 db 0FFh
.eh_frame:0000000000005E88                 db    8
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db    0
.eh_frame:0000000000005E8D                 db    0
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db  2Ch ; ,
.eh_frame:0000000000005E91                 db    0
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db 0FCh
.eh_frame:0000000000005E95                 db    0
.eh_frame:0000000000005E96                 db    0
.eh_frame:0000000000005E97                 db    0
.eh_frame:0000000000005E98                 db 0C8h
.eh_frame:0000000000005E99                 db 0BEh
.eh_frame:0000000000005E9A                 db 0FFh
.eh_frame:0000000000005E9B                 db 0FFh
.eh_frame:0000000000005E9C                 db 0A4h
.eh_frame:0000000000005E9D                 db    0
.eh_frame:0000000000005E9E                 db    0
.eh_frame:0000000000005E9F                 db    0
.eh_frame:0000000000005EA0                 db    0
.eh_frame:0000000000005EA1                 db  41h ; A
.eh_frame:0000000000005EA2                 db  0Eh
.eh_frame:0000000000005EA3                 db  10h
.eh_frame:0000000000005EA4                 db  86h
.eh_frame:0000000000005EA5                 db    2
.eh_frame:0000000000005EA6                 db  41h ; A
.eh_frame:0000000000005EA7                 db  0Eh
.eh_frame:0000000000005EA8                 db  18h
.eh_frame:0000000000005EA9                 db  83h
.eh_frame:0000000000005EAA                 db    3
.eh_frame:0000000000005EAB                 db  44h ; D
.eh_frame:0000000000005EAC                 db  0Eh
.eh_frame:0000000000005EAD                 db  20h
.eh_frame:0000000000005EAE                 db  7Ah ; z
.eh_frame:0000000000005EAF                 db  0Ah
.eh_frame:0000000000005EB0                 db  0Eh
.eh_frame:0000000000005EB1                 db  18h
.eh_frame:0000000000005EB2                 db  41h ; A
.eh_frame:0000000000005EB3                 db  0Eh
.eh_frame:0000000000005EB4                 db  10h
.eh_frame:0000000000005EB5                 db  41h ; A
.eh_frame:0000000000005EB6                 db  0Eh
.eh_frame:0000000000005EB7                 db    8
.eh_frame:0000000000005EB8                 db  41h ; A
.eh_frame:0000000000005EB9                 db  0Bh
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db    0
.eh_frame:0000000000005EBD                 db    0
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db  44h ; D
.eh_frame:0000000000005EC1                 db    0
.eh_frame:0000000000005EC2                 db    0
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db  2Ch ; ,
.eh_frame:0000000000005EC5                 db    1
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db  48h ; H
.eh_frame:0000000000005EC9                 db 0BFh
.eh_frame:0000000000005ECA                 db 0FFh
.eh_frame:0000000000005ECB                 db 0FFh
.eh_frame:0000000000005ECC                 db 0A9h
.eh_frame:0000000000005ECD                 db    3
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db    0
.eh_frame:0000000000005ED1                 db  41h ; A
.eh_frame:0000000000005ED2                 db  0Eh
.eh_frame:0000000000005ED3                 db  10h
.eh_frame:0000000000005ED4                 db  86h
.eh_frame:0000000000005ED5                 db    2
.eh_frame:0000000000005ED6                 db  41h ; A
.eh_frame:0000000000005ED7                 db  0Eh
.eh_frame:0000000000005ED8                 db  18h
.eh_frame:0000000000005ED9                 db  83h
.eh_frame:0000000000005EDA                 db    3
.eh_frame:0000000000005EDB                 db  47h ; G
.eh_frame:0000000000005EDC                 db  0Eh
.eh_frame:0000000000005EDD                 db  20h
.eh_frame:0000000000005EDE                 db    2
.eh_frame:0000000000005EDF                 db 0B8h
.eh_frame:0000000000005EE0                 db  0Ah
.eh_frame:0000000000005EE1                 db  0Eh
.eh_frame:0000000000005EE2                 db  18h
.eh_frame:0000000000005EE3                 db  41h ; A
.eh_frame:0000000000005EE4                 db  0Eh
.eh_frame:0000000000005EE5                 db  10h
.eh_frame:0000000000005EE6                 db  41h ; A
.eh_frame:0000000000005EE7                 db  0Eh
.eh_frame:0000000000005EE8                 db    8
.eh_frame:0000000000005EE9                 db  45h ; E
.eh_frame:0000000000005EEA                 db  0Bh
.eh_frame:0000000000005EEB                 db  6Bh ; k
.eh_frame:0000000000005EEC                 db  0Ah
.eh_frame:0000000000005EED                 db  0Eh
.eh_frame:0000000000005EEE                 db  18h
.eh_frame:0000000000005EEF                 db  43h ; C
.eh_frame:0000000000005EF0                 db  0Eh
.eh_frame:0000000000005EF1                 db  10h
.eh_frame:0000000000005EF2                 db  41h ; A
.eh_frame:0000000000005EF3                 db  0Eh
.eh_frame:0000000000005EF4                 db    8
.eh_frame:0000000000005EF5                 db  49h ; I
.eh_frame:0000000000005EF6                 db  0Bh
.eh_frame:0000000000005EF7                 db    3
.eh_frame:0000000000005EF8                 db  6Ch ; l
.eh_frame:0000000000005EF9                 db    2
.eh_frame:0000000000005EFA                 db  0Ah
.eh_frame:0000000000005EFB                 db  0Eh
.eh_frame:0000000000005EFC                 db  18h
.eh_frame:0000000000005EFD                 db  41h ; A
.eh_frame:0000000000005EFE                 db  0Eh
.eh_frame:0000000000005EFF                 db  10h
.eh_frame:0000000000005F00                 db  41h ; A
.eh_frame:0000000000005F01                 db  0Eh
.eh_frame:0000000000005F02                 db    8
.eh_frame:0000000000005F03                 db  41h ; A
.eh_frame:0000000000005F04                 db  0Bh
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  20h
.eh_frame:0000000000005F09                 db    0
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db  74h ; t
.eh_frame:0000000000005F0D                 db    1
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db 0B0h
.eh_frame:0000000000005F11                 db 0C2h
.eh_frame:0000000000005F12                 db 0FFh
.eh_frame:0000000000005F13                 db 0FFh
.eh_frame:0000000000005F14                 db  89h
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db    0
.eh_frame:0000000000005F19                 db  41h ; A
.eh_frame:0000000000005F1A                 db  0Eh
.eh_frame:0000000000005F1B                 db  10h
.eh_frame:0000000000005F1C                 db  83h
.eh_frame:0000000000005F1D                 db    2
.eh_frame:0000000000005F1E                 db  4Fh ; O
.eh_frame:0000000000005F1F                 db  0Eh
.eh_frame:0000000000005F20                 db 0B0h
.eh_frame:0000000000005F21                 db    1
.eh_frame:0000000000005F22                 db    2
.eh_frame:0000000000005F23                 db  64h ; d
.eh_frame:0000000000005F24                 db  0Ah
.eh_frame:0000000000005F25                 db  0Eh
.eh_frame:0000000000005F26                 db  10h
.eh_frame:0000000000005F27                 db  41h ; A
.eh_frame:0000000000005F28                 db  0Eh
.eh_frame:0000000000005F29                 db    8
.eh_frame:0000000000005F2A                 db  4Bh ; K
.eh_frame:0000000000005F2B                 db  0Bh
.eh_frame:0000000000005F2C                 db  30h ; 0
.eh_frame:0000000000005F2D                 db    0
.eh_frame:0000000000005F2E                 db    0
.eh_frame:0000000000005F2F                 db    0
.eh_frame:0000000000005F30                 db  98h
.eh_frame:0000000000005F31                 db    1
.eh_frame:0000000000005F32                 db    0
.eh_frame:0000000000005F33                 db    0
.eh_frame:0000000000005F34                 db  1Ch
.eh_frame:0000000000005F35                 db 0C3h
.eh_frame:0000000000005F36                 db 0FFh
.eh_frame:0000000000005F37                 db 0FFh
.eh_frame:0000000000005F38                 db  6Dh ; m
.eh_frame:0000000000005F39                 db    1
.eh_frame:0000000000005F3A                 db    0
.eh_frame:0000000000005F3B                 db    0
.eh_frame:0000000000005F3C                 db    0
.eh_frame:0000000000005F3D                 db  5Bh ; [
.eh_frame:0000000000005F3E                 db  0Eh
.eh_frame:0000000000005F3F                 db  10h
.eh_frame:0000000000005F40                 db  8Ch
.eh_frame:0000000000005F41                 db    2
.eh_frame:0000000000005F42                 db  41h ; A
.eh_frame:0000000000005F43                 db  0Eh
.eh_frame:0000000000005F44                 db  18h
.eh_frame:0000000000005F45                 db  86h
.eh_frame:0000000000005F46                 db    3
.eh_frame:0000000000005F47                 db  41h ; A
.eh_frame:0000000000005F48                 db  0Eh
.eh_frame:0000000000005F49                 db  20h
.eh_frame:0000000000005F4A                 db  83h
.eh_frame:0000000000005F4B                 db    4
.eh_frame:0000000000005F4C                 db    3
.eh_frame:0000000000005F4D                 db    8
.eh_frame:0000000000005F4E                 db    1
.eh_frame:0000000000005F4F                 db  0Ah
.eh_frame:0000000000005F50                 db  0Eh
.eh_frame:0000000000005F51                 db  18h
.eh_frame:0000000000005F52                 db  41h ; A
.eh_frame:0000000000005F53                 db  0Eh
.eh_frame:0000000000005F54                 db  10h
.eh_frame:0000000000005F55                 db  42h ; B
.eh_frame:0000000000005F56                 db  0Eh
.eh_frame:0000000000005F57                 db    8
.eh_frame:0000000000005F58                 db  48h ; H
.eh_frame:0000000000005F59                 db  0Bh
.eh_frame:0000000000005F5A                 db  70h ; p
.eh_frame:0000000000005F5B                 db  0Eh
.eh_frame:0000000000005F5C                 db    8
.eh_frame:0000000000005F5D                 db 0C3h
.eh_frame:0000000000005F5E                 db 0C6h
.eh_frame:0000000000005F5F                 db 0CCh
.eh_frame:0000000000005F60                 db  1Ch
.eh_frame:0000000000005F61                 db    0
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db 0CCh
.eh_frame:0000000000005F65                 db    1
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db  58h ; X
.eh_frame:0000000000005F69                 db 0C4h
.eh_frame:0000000000005F6A                 db 0FFh
.eh_frame:0000000000005F6B                 db 0FFh
.eh_frame:0000000000005F6C                 db  9Fh
.eh_frame:0000000000005F6D                 db    0
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db    0
.eh_frame:0000000000005F71                 db  44h ; D
.eh_frame:0000000000005F72                 db  0Eh
.eh_frame:0000000000005F73                 db  10h
.eh_frame:0000000000005F74                 db  83h
.eh_frame:0000000000005F75                 db    2
.eh_frame:0000000000005F76                 db    2
.eh_frame:0000000000005F77                 db  78h ; x
.eh_frame:0000000000005F78                 db  0Ah
.eh_frame:0000000000005F79                 db  0Eh
.eh_frame:0000000000005F7A                 db    8
.eh_frame:0000000000005F7B                 db  41h ; A
.eh_frame:0000000000005F7C                 db  0Bh
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db  40h ; @
.eh_frame:0000000000005F81                 db    0
.eh_frame:0000000000005F82                 db    0
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db 0ECh
.eh_frame:0000000000005F85                 db    1
.eh_frame:0000000000005F86                 db    0
.eh_frame:0000000000005F87                 db    0
.eh_frame:0000000000005F88                 db 0D8h
.eh_frame:0000000000005F89                 db 0C4h
.eh_frame:0000000000005F8A                 db 0FFh
.eh_frame:0000000000005F8B                 db 0FFh
.eh_frame:0000000000005F8C                 db 0E7h
.eh_frame:0000000000005F8D                 db    0
.eh_frame:0000000000005F8E                 db    0
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db    0
.eh_frame:0000000000005F91                 db  41h ; A
.eh_frame:0000000000005F92                 db  0Eh
.eh_frame:0000000000005F93                 db  10h
.eh_frame:0000000000005F94                 db  86h
.eh_frame:0000000000005F95                 db    2
.eh_frame:0000000000005F96                 db  41h ; A
.eh_frame:0000000000005F97                 db  0Eh
.eh_frame:0000000000005F98                 db  18h
.eh_frame:0000000000005F99                 db  83h
.eh_frame:0000000000005F9A                 db    3
.eh_frame:0000000000005F9B                 db  49h ; I
.eh_frame:0000000000005F9C                 db  0Eh
.eh_frame:0000000000005F9D                 db  20h
.eh_frame:0000000000005F9E                 db  6Eh ; n
.eh_frame:0000000000005F9F                 db  0Ah
.eh_frame:0000000000005FA0                 db  0Eh
.eh_frame:0000000000005FA1                 db  18h
.eh_frame:0000000000005FA2                 db  41h ; A
.eh_frame:0000000000005FA3                 db  0Eh
.eh_frame:0000000000005FA4                 db  10h
.eh_frame:0000000000005FA5                 db  41h ; A
.eh_frame:0000000000005FA6                 db  0Eh
.eh_frame:0000000000005FA7                 db    8
.eh_frame:0000000000005FA8                 db  45h ; E
.eh_frame:0000000000005FA9                 db  0Bh
.eh_frame:0000000000005FAA                 db    2
.eh_frame:0000000000005FAB                 db  4Ah ; J
.eh_frame:0000000000005FAC                 db  0Ah
.eh_frame:0000000000005FAD                 db  0Eh
.eh_frame:0000000000005FAE                 db  18h
.eh_frame:0000000000005FAF                 db  41h ; A
.eh_frame:0000000000005FB0                 db  0Eh
.eh_frame:0000000000005FB1                 db  10h
.eh_frame:0000000000005FB2                 db  41h ; A
.eh_frame:0000000000005FB3                 db  0Eh
.eh_frame:0000000000005FB4                 db    8
.eh_frame:0000000000005FB5                 db  44h ; D
.eh_frame:0000000000005FB6                 db  0Bh
.eh_frame:0000000000005FB7                 db    2
.eh_frame:0000000000005FB8                 db  54h ; T
.eh_frame:0000000000005FB9                 db  0Eh
.eh_frame:0000000000005FBA                 db  18h
.eh_frame:0000000000005FBB                 db  41h ; A
.eh_frame:0000000000005FBC                 db  0Eh
.eh_frame:0000000000005FBD                 db  10h
.eh_frame:0000000000005FBE                 db  41h ; A
.eh_frame:0000000000005FBF                 db  0Eh
.eh_frame:0000000000005FC0                 db    8
.eh_frame:0000000000005FC1                 db    0
.eh_frame:0000000000005FC2                 db    0
.eh_frame:0000000000005FC3                 db    0
.eh_frame:0000000000005FC4                 db  74h ; t
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db  30h ; 0
.eh_frame:0000000000005FC9                 db    2
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db  84h
.eh_frame:0000000000005FCD                 db 0C5h
.eh_frame:0000000000005FCE                 db 0FFh
.eh_frame:0000000000005FCF                 db 0FFh
.eh_frame:0000000000005FD0                 db  34h ; 4
.eh_frame:0000000000005FD1                 db  12h
.eh_frame:0000000000005FD2                 db    0
.eh_frame:0000000000005FD3                 db    0
.eh_frame:0000000000005FD4                 db    0
.eh_frame:0000000000005FD5                 db  42h ; B
.eh_frame:0000000000005FD6                 db  0Eh
.eh_frame:0000000000005FD7                 db  10h
.eh_frame:0000000000005FD8                 db  8Fh
.eh_frame:0000000000005FD9                 db    2
.eh_frame:0000000000005FDA                 db  42h ; B
.eh_frame:0000000000005FDB                 db  0Eh
.eh_frame:0000000000005FDC                 db  18h
.eh_frame:0000000000005FDD                 db  8Eh
.eh_frame:0000000000005FDE                 db    3
.eh_frame:0000000000005FDF                 db  45h ; E
.eh_frame:0000000000005FE0                 db  0Eh
.eh_frame:0000000000005FE1                 db  20h
.eh_frame:0000000000005FE2                 db  8Dh
.eh_frame:0000000000005FE3                 db    4
.eh_frame:0000000000005FE4                 db  42h ; B
.eh_frame:0000000000005FE5                 db  0Eh
.eh_frame:0000000000005FE6                 db  28h ; (
.eh_frame:0000000000005FE7                 db  8Ch
.eh_frame:0000000000005FE8                 db    5
.eh_frame:0000000000005FE9                 db  44h ; D
.eh_frame:0000000000005FEA                 db  0Eh
.eh_frame:0000000000005FEB                 db  30h ; 0
.eh_frame:0000000000005FEC                 db  86h
.eh_frame:0000000000005FED                 db    6
.eh_frame:0000000000005FEE                 db  41h ; A
.eh_frame:0000000000005FEF                 db  0Eh
.eh_frame:0000000000005FF0                 db  38h ; 8
.eh_frame:0000000000005FF1                 db  83h
.eh_frame:0000000000005FF2                 db    7
.eh_frame:0000000000005FF3                 db  53h ; S
.eh_frame:0000000000005FF4                 db  0Eh
.eh_frame:0000000000005FF5                 db 0F0h
.eh_frame:0000000000005FF6                 db    1
.eh_frame:0000000000005FF7                 db    3
.eh_frame:0000000000005FF8                 db  81h
.eh_frame:0000000000005FF9                 db  0Bh
.eh_frame:0000000000005FFA                 db  0Eh
.eh_frame:0000000000005FFB                 db 0F8h
.eh_frame:0000000000005FFC                 db    1
.eh_frame:0000000000005FFD                 db  4Ah ; J
.eh_frame:0000000000005FFE                 db  0Eh
.eh_frame:0000000000005FFF                 db  80h
.eh_frame:0000000000006000                 db    2
.eh_frame:0000000000006001                 db  44h ; D
.eh_frame:0000000000006002                 db  0Eh
.eh_frame:0000000000006003                 db  88h
.eh_frame:0000000000006004                 db    2
.eh_frame:0000000000006005                 db  45h ; E
.eh_frame:0000000000006006                 db  0Eh
.eh_frame:0000000000006007                 db  90h
.eh_frame:0000000000006008                 db    2
.eh_frame:0000000000006009                 db  5Fh ; _
.eh_frame:000000000000600A                 db  0Eh
.eh_frame:000000000000600B                 db 0F0h
.eh_frame:000000000000600C                 db    1
.eh_frame:000000000000600D                 db  64h ; d
.eh_frame:000000000000600E                 db  0Ah
.eh_frame:000000000000600F                 db  0Eh
.eh_frame:0000000000006010                 db  38h ; 8
.eh_frame:0000000000006011                 db  41h ; A
.eh_frame:0000000000006012                 db  0Eh
.eh_frame:0000000000006013                 db  30h ; 0
.eh_frame:0000000000006014                 db  41h ; A
.eh_frame:0000000000006015                 db  0Eh
.eh_frame:0000000000006016                 db  28h ; (
.eh_frame:0000000000006017                 db  42h ; B
.eh_frame:0000000000006018                 db  0Eh
.eh_frame:0000000000006019                 db  20h
.eh_frame:000000000000601A                 db  42h ; B
.eh_frame:000000000000601B                 db  0Eh
.eh_frame:000000000000601C                 db  18h
.eh_frame:000000000000601D                 db  42h ; B
.eh_frame:000000000000601E                 db  0Eh
.eh_frame:000000000000601F                 db  10h
.eh_frame:0000000000006020                 db  42h ; B
.eh_frame:0000000000006021                 db  0Eh
.eh_frame:0000000000006022                 db    8
.eh_frame:0000000000006023                 db  44h ; D
.eh_frame:0000000000006024                 db  0Bh
.eh_frame:0000000000006025                 db    3
.eh_frame:0000000000006026                 db  99h
.eh_frame:0000000000006027                 db    5
.eh_frame:0000000000006028                 db  0Eh
.eh_frame:0000000000006029                 db 0F8h
.eh_frame:000000000000602A                 db    1
.eh_frame:000000000000602B                 db  4Dh ; M
.eh_frame:000000000000602C                 db  0Eh
.eh_frame:000000000000602D                 db  80h
.eh_frame:000000000000602E                 db    2
.eh_frame:000000000000602F                 db  44h ; D
.eh_frame:0000000000006030                 db  0Eh
.eh_frame:0000000000006031                 db  88h
.eh_frame:0000000000006032                 db    2
.eh_frame:0000000000006033                 db  47h ; G
.eh_frame:0000000000006034                 db  0Eh
.eh_frame:0000000000006035                 db  90h
.eh_frame:0000000000006036                 db    2
.eh_frame:0000000000006037                 db  5Bh ; [
.eh_frame:0000000000006038                 db  0Eh
.eh_frame:0000000000006039                 db 0F0h
.eh_frame:000000000000603A                 db    1
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db  68h ; h
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db 0A8h
.eh_frame:0000000000006041                 db    2
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db  4Ch ; L
.eh_frame:0000000000006045                 db 0D7h
.eh_frame:0000000000006046                 db 0FFh
.eh_frame:0000000000006047                 db 0FFh
.eh_frame:0000000000006048                 db 0ABh
.eh_frame:0000000000006049                 db    1
.eh_frame:000000000000604A                 db    0
.eh_frame:000000000000604B                 db    0
.eh_frame:000000000000604C                 db    0
.eh_frame:000000000000604D                 db  42h ; B
.eh_frame:000000000000604E                 db  0Eh
.eh_frame:000000000000604F                 db  10h
.eh_frame:0000000000006050                 db  8Fh
.eh_frame:0000000000006051                 db    2
.eh_frame:0000000000006052                 db  42h ; B
.eh_frame:0000000000006053                 db  0Eh
.eh_frame:0000000000006054                 db  18h
.eh_frame:0000000000006055                 db  8Eh
.eh_frame:0000000000006056                 db    3
.eh_frame:0000000000006057                 db  45h ; E
.eh_frame:0000000000006058                 db  0Eh
.eh_frame:0000000000006059                 db  20h
.eh_frame:000000000000605A                 db  8Dh
.eh_frame:000000000000605B                 db    4
.eh_frame:000000000000605C                 db  42h ; B
.eh_frame:000000000000605D                 db  0Eh
.eh_frame:000000000000605E                 db  28h ; (
.eh_frame:000000000000605F                 db  8Ch
.eh_frame:0000000000006060                 db    5
.eh_frame:0000000000006061                 db  44h ; D
.eh_frame:0000000000006062                 db  0Eh
.eh_frame:0000000000006063                 db  30h ; 0
.eh_frame:0000000000006064                 db  86h
.eh_frame:0000000000006065                 db    6
.eh_frame:0000000000006066                 db  41h ; A
.eh_frame:0000000000006067                 db  0Eh
.eh_frame:0000000000006068                 db  38h ; 8
.eh_frame:0000000000006069                 db  83h
.eh_frame:000000000000606A                 db    7
.eh_frame:000000000000606B                 db  47h ; G
.eh_frame:000000000000606C                 db  0Eh
.eh_frame:000000000000606D                 db  60h ; `
.eh_frame:000000000000606E                 db    2
.eh_frame:000000000000606F                 db  99h
.eh_frame:0000000000006070                 db  0Eh
.eh_frame:0000000000006071                 db  68h ; h
.eh_frame:0000000000006072                 db  5Fh ; _
.eh_frame:0000000000006073                 db  0Eh
.eh_frame:0000000000006074                 db  70h ; p
.eh_frame:0000000000006075                 db  46h ; F
.eh_frame:0000000000006076                 db  0Eh
.eh_frame:0000000000006077                 db  78h ; x
.eh_frame:0000000000006078                 db  42h ; B
.eh_frame:0000000000006079                 db  0Eh
.eh_frame:000000000000607A                 db  80h
.eh_frame:000000000000607B                 db    1
.eh_frame:000000000000607C                 db  59h ; Y
.eh_frame:000000000000607D                 db  0Eh
.eh_frame:000000000000607E                 db  60h ; `
.eh_frame:000000000000607F                 db    2
.eh_frame:0000000000006080                 db  40h ; @
.eh_frame:0000000000006081                 db  0Eh
.eh_frame:0000000000006082                 db  68h ; h
.eh_frame:0000000000006083                 db  4Bh ; K
.eh_frame:0000000000006084                 db  0Eh
.eh_frame:0000000000006085                 db  70h ; p
.eh_frame:0000000000006086                 db  43h ; C
.eh_frame:0000000000006087                 db  0Eh
.eh_frame:0000000000006088                 db  78h ; x
.eh_frame:0000000000006089                 db  45h ; E
.eh_frame:000000000000608A                 db  0Eh
.eh_frame:000000000000608B                 db  80h
.eh_frame:000000000000608C                 db    1
.eh_frame:000000000000608D                 db  5Eh ; ^
.eh_frame:000000000000608E                 db  0Eh
.eh_frame:000000000000608F                 db  60h ; `
.eh_frame:0000000000006090                 db  4Ch ; L
.eh_frame:0000000000006091                 db  0Ah
.eh_frame:0000000000006092                 db  0Eh
.eh_frame:0000000000006093                 db  38h ; 8
.eh_frame:0000000000006094                 db  44h ; D
.eh_frame:0000000000006095                 db  0Eh
.eh_frame:0000000000006096                 db  30h ; 0
.eh_frame:0000000000006097                 db  41h ; A
.eh_frame:0000000000006098                 db  0Eh
.eh_frame:0000000000006099                 db  28h ; (
.eh_frame:000000000000609A                 db  42h ; B
.eh_frame:000000000000609B                 db  0Eh
.eh_frame:000000000000609C                 db  20h
.eh_frame:000000000000609D                 db  42h ; B
.eh_frame:000000000000609E                 db  0Eh
.eh_frame:000000000000609F                 db  18h
.eh_frame:00000000000060A0                 db  42h ; B
.eh_frame:00000000000060A1                 db  0Eh
.eh_frame:00000000000060A2                 db  10h
.eh_frame:00000000000060A3                 db  42h ; B
.eh_frame:00000000000060A4                 db  0Eh
.eh_frame:00000000000060A5                 db    8
.eh_frame:00000000000060A6                 db  46h ; F
.eh_frame:00000000000060A7                 db  0Bh
.eh_frame:00000000000060A8                 db  28h ; (
.eh_frame:00000000000060A9                 db    0
.eh_frame:00000000000060AA                 db    0
.eh_frame:00000000000060AB                 db    0
.eh_frame:00000000000060AC                 db  14h
.eh_frame:00000000000060AD                 db    3
.eh_frame:00000000000060AE                 db    0
.eh_frame:00000000000060AF                 db    0
.eh_frame:00000000000060B0                 db  90h
.eh_frame:00000000000060B1                 db 0D8h
.eh_frame:00000000000060B2                 db 0FFh
.eh_frame:00000000000060B3                 db 0FFh
.eh_frame:00000000000060B4                 db  36h ; 6
.eh_frame:00000000000060B5                 db    0
.eh_frame:00000000000060B6                 db    0
.eh_frame:00000000000060B7                 db    0
.eh_frame:00000000000060B8                 db    0
.eh_frame:00000000000060B9                 db  42h ; B
.eh_frame:00000000000060BA                 db  0Eh
.eh_frame:00000000000060BB                 db  10h
.eh_frame:00000000000060BC                 db  8Ch
.eh_frame:00000000000060BD                 db    2
.eh_frame:00000000000060BE                 db  41h ; A
.eh_frame:00000000000060BF                 db  0Eh
.eh_frame:00000000000060C0                 db  18h
.eh_frame:00000000000060C1                 db  86h
.eh_frame:00000000000060C2                 db    3
.eh_frame:00000000000060C3                 db  41h ; A
.eh_frame:00000000000060C4                 db  0Eh
.eh_frame:00000000000060C5                 db  20h
.eh_frame:00000000000060C6                 db  83h
.eh_frame:00000000000060C7                 db    4
.eh_frame:00000000000060C8                 db  6Eh ; n
.eh_frame:00000000000060C9                 db  0Eh
.eh_frame:00000000000060CA                 db  18h
.eh_frame:00000000000060CB                 db  41h ; A
.eh_frame:00000000000060CC                 db  0Eh
.eh_frame:00000000000060CD                 db  10h
.eh_frame:00000000000060CE                 db  42h ; B
.eh_frame:00000000000060CF                 db  0Eh
.eh_frame:00000000000060D0                 db    8
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db  10h
.eh_frame:00000000000060D5                 db    0
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db  40h ; @
.eh_frame:00000000000060D9                 db    3
.eh_frame:00000000000060DA                 db    0
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db 0A4h
.eh_frame:00000000000060DD                 db 0D8h
.eh_frame:00000000000060DE                 db 0FFh
.eh_frame:00000000000060DF                 db 0FFh
.eh_frame:00000000000060E0                 db  11h
.eh_frame:00000000000060E1                 db    0
.eh_frame:00000000000060E2                 db    0
.eh_frame:00000000000060E3                 db    0
.eh_frame:00000000000060E4                 db    0
.eh_frame:00000000000060E5                 db    0
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db  10h
.eh_frame:00000000000060E9                 db    0
.eh_frame:00000000000060EA                 db    0
.eh_frame:00000000000060EB                 db    0
.eh_frame:00000000000060EC                 db  54h ; T
.eh_frame:00000000000060ED                 db    3
.eh_frame:00000000000060EE                 db    0
.eh_frame:00000000000060EF                 db    0
.eh_frame:00000000000060F0                 db 0B0h
.eh_frame:00000000000060F1                 db 0D8h
.eh_frame:00000000000060F2                 db 0FFh
.eh_frame:00000000000060F3                 db 0FFh
.eh_frame:00000000000060F4                 db  11h
.eh_frame:00000000000060F5                 db    0
.eh_frame:00000000000060F6                 db    0
.eh_frame:00000000000060F7                 db    0
.eh_frame:00000000000060F8                 db    0
.eh_frame:00000000000060F9                 db    0
.eh_frame:00000000000060FA                 db    0
.eh_frame:00000000000060FB                 db    0
.eh_frame:00000000000060FC                 db  10h
.eh_frame:00000000000060FD                 db    0
.eh_frame:00000000000060FE                 db    0
.eh_frame:00000000000060FF                 db    0
.eh_frame:0000000000006100                 db  68h ; h
.eh_frame:0000000000006101                 db    3
.eh_frame:0000000000006102                 db    0
.eh_frame:0000000000006103                 db    0
.eh_frame:0000000000006104                 db 0BCh
.eh_frame:0000000000006105                 db 0D8h
.eh_frame:0000000000006106                 db 0FFh
.eh_frame:0000000000006107                 db 0FFh
.eh_frame:0000000000006108                 db  35h ; 5
.eh_frame:0000000000006109                 db    0
.eh_frame:000000000000610A                 db    0
.eh_frame:000000000000610B                 db    0
.eh_frame:000000000000610C                 db    0
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db  10h
.eh_frame:0000000000006111                 db    0
.eh_frame:0000000000006112                 db    0
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db  7Ch ; |
.eh_frame:0000000000006115                 db    3
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db 0E8h
.eh_frame:0000000000006119                 db 0D8h
.eh_frame:000000000000611A                 db 0FFh
.eh_frame:000000000000611B                 db 0FFh
.eh_frame:000000000000611C                 db  15h
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db    0
.eh_frame:0000000000006121                 db    0
.eh_frame:0000000000006122                 db    0
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db  10h
.eh_frame:0000000000006125                 db    0
.eh_frame:0000000000006126                 db    0
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db  90h
.eh_frame:0000000000006129                 db    3
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db 0F4h
.eh_frame:000000000000612D                 db 0D8h
.eh_frame:000000000000612E                 db 0FFh
.eh_frame:000000000000612F                 db 0FFh
.eh_frame:0000000000006130                 db  30h ; 0
.eh_frame:0000000000006131                 db    0
.eh_frame:0000000000006132                 db    0
.eh_frame:0000000000006133                 db    0
.eh_frame:0000000000006134                 db    0
.eh_frame:0000000000006135                 db  6Bh ; k
.eh_frame:0000000000006136                 db  0Eh
.eh_frame:0000000000006137                 db  10h
.eh_frame:0000000000006138                 db  50h ; P
.eh_frame:0000000000006139                 db    0
.eh_frame:000000000000613A                 db    0
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db 0A4h
.eh_frame:000000000000613D                 db    3
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db  10h
.eh_frame:0000000000006141                 db 0D9h
.eh_frame:0000000000006142                 db 0FFh
.eh_frame:0000000000006143                 db 0FFh
.eh_frame:0000000000006144                 db  74h ; t
.eh_frame:0000000000006145                 db    0
.eh_frame:0000000000006146                 db    0
.eh_frame:0000000000006147                 db    0
.eh_frame:0000000000006148                 db    0
.eh_frame:0000000000006149                 db  42h ; B
.eh_frame:000000000000614A                 db  0Eh
.eh_frame:000000000000614B                 db  10h
.eh_frame:000000000000614C                 db  8Fh
.eh_frame:000000000000614D                 db    2
.eh_frame:000000000000614E                 db  42h ; B
.eh_frame:000000000000614F                 db  0Eh
.eh_frame:0000000000006150                 db  18h
.eh_frame:0000000000006151                 db  8Eh
.eh_frame:0000000000006152                 db    3
.eh_frame:0000000000006153                 db  49h ; I
.eh_frame:0000000000006154                 db  0Eh
.eh_frame:0000000000006155                 db  20h
.eh_frame:0000000000006156                 db  8Dh
.eh_frame:0000000000006157                 db    4
.eh_frame:0000000000006158                 db  42h ; B
.eh_frame:0000000000006159                 db  0Eh
.eh_frame:000000000000615A                 db  28h ; (
.eh_frame:000000000000615B                 db  8Ch
.eh_frame:000000000000615C                 db    5
.eh_frame:000000000000615D                 db  44h ; D
.eh_frame:000000000000615E                 db  0Eh
.eh_frame:000000000000615F                 db  30h ; 0
.eh_frame:0000000000006160                 db  86h
.eh_frame:0000000000006161                 db    6
.eh_frame:0000000000006162                 db  41h ; A
.eh_frame:0000000000006163                 db  0Eh
.eh_frame:0000000000006164                 db  38h ; 8
.eh_frame:0000000000006165                 db  83h
.eh_frame:0000000000006166                 db    7
.eh_frame:0000000000006167                 db  4Dh ; M
.eh_frame:0000000000006168                 db  0Eh
.eh_frame:0000000000006169                 db  50h ; P
.eh_frame:000000000000616A                 db  5Fh ; _
.eh_frame:000000000000616B                 db  0Eh
.eh_frame:000000000000616C                 db  58h ; X
.eh_frame:000000000000616D                 db  47h ; G
.eh_frame:000000000000616E                 db  0Eh
.eh_frame:000000000000616F                 db  60h ; `
.eh_frame:0000000000006170                 db  46h ; F
.eh_frame:0000000000006171                 db  0Eh
.eh_frame:0000000000006172                 db  68h ; h
.eh_frame:0000000000006173                 db  44h ; D
.eh_frame:0000000000006174                 db  0Eh
.eh_frame:0000000000006175                 db  70h ; p
.eh_frame:0000000000006176                 db  58h ; X
.eh_frame:0000000000006177                 db  0Eh
.eh_frame:0000000000006178                 db  38h ; 8
.eh_frame:0000000000006179                 db  41h ; A
.eh_frame:000000000000617A                 db  0Eh
.eh_frame:000000000000617B                 db  30h ; 0
.eh_frame:000000000000617C                 db  41h ; A
.eh_frame:000000000000617D                 db  0Eh
.eh_frame:000000000000617E                 db  28h ; (
.eh_frame:000000000000617F                 db  42h ; B
.eh_frame:0000000000006180                 db  0Eh
.eh_frame:0000000000006181                 db  20h
.eh_frame:0000000000006182                 db  42h ; B
.eh_frame:0000000000006183                 db  0Eh
.eh_frame:0000000000006184                 db  18h
.eh_frame:0000000000006185                 db  42h ; B
.eh_frame:0000000000006186                 db  0Eh
.eh_frame:0000000000006187                 db  10h
.eh_frame:0000000000006188                 db  42h ; B
.eh_frame:0000000000006189                 db  0Eh
.eh_frame:000000000000618A                 db    8
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db  68h ; h
.eh_frame:000000000000618D                 db    0
.eh_frame:000000000000618E                 db    0
.eh_frame:000000000000618F                 db    0
.eh_frame:0000000000006190                 db 0F8h
.eh_frame:0000000000006191                 db    3
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db  3Ch ; <
.eh_frame:0000000000006195                 db 0D9h
.eh_frame:0000000000006196                 db 0FFh
.eh_frame:0000000000006197                 db 0FFh
.eh_frame:0000000000006198                 db 0E3h
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db    0
.eh_frame:000000000000619D                 db  42h ; B
.eh_frame:000000000000619E                 db  0Eh
.eh_frame:000000000000619F                 db  10h
.eh_frame:00000000000061A0                 db  8Fh
.eh_frame:00000000000061A1                 db    2
.eh_frame:00000000000061A2                 db  42h ; B
.eh_frame:00000000000061A3                 db  0Eh
.eh_frame:00000000000061A4                 db  18h
.eh_frame:00000000000061A5                 db  8Eh
.eh_frame:00000000000061A6                 db    3
.eh_frame:00000000000061A7                 db  49h ; I
.eh_frame:00000000000061A8                 db  0Eh
.eh_frame:00000000000061A9                 db  20h
.eh_frame:00000000000061AA                 db  8Dh
.eh_frame:00000000000061AB                 db    4
.eh_frame:00000000000061AC                 db  42h ; B
.eh_frame:00000000000061AD                 db  0Eh
.eh_frame:00000000000061AE                 db  28h ; (
.eh_frame:00000000000061AF                 db  8Ch
.eh_frame:00000000000061B0                 db    5
.eh_frame:00000000000061B1                 db  44h ; D
.eh_frame:00000000000061B2                 db  0Eh
.eh_frame:00000000000061B3                 db  30h ; 0
.eh_frame:00000000000061B4                 db  86h
.eh_frame:00000000000061B5                 db    6
.eh_frame:00000000000061B6                 db  41h ; A
.eh_frame:00000000000061B7                 db  0Eh
.eh_frame:00000000000061B8                 db  38h ; 8
.eh_frame:00000000000061B9                 db  83h
.eh_frame:00000000000061BA                 db    7
.eh_frame:00000000000061BB                 db  4Dh ; M
.eh_frame:00000000000061BC                 db  0Eh
.eh_frame:00000000000061BD                 db  70h ; p
.eh_frame:00000000000061BE                 db  65h ; e
.eh_frame:00000000000061BF                 db  0Eh
.eh_frame:00000000000061C0                 db  78h ; x
.eh_frame:00000000000061C1                 db  4Dh ; M
.eh_frame:00000000000061C2                 db  0Eh
.eh_frame:00000000000061C3                 db  80h
.eh_frame:00000000000061C4                 db    1
.eh_frame:00000000000061C5                 db  46h ; F
.eh_frame:00000000000061C6                 db  0Eh
.eh_frame:00000000000061C7                 db  88h
.eh_frame:00000000000061C8                 db    1
.eh_frame:00000000000061C9                 db  42h ; B
.eh_frame:00000000000061CA                 db  0Eh
.eh_frame:00000000000061CB                 db  90h
.eh_frame:00000000000061CC                 db    1
.eh_frame:00000000000061CD                 db  5Eh ; ^
.eh_frame:00000000000061CE                 db  0Eh
.eh_frame:00000000000061CF                 db  70h ; p
.eh_frame:00000000000061D0                 db  56h ; V
.eh_frame:00000000000061D1                 db  0Eh
.eh_frame:00000000000061D2                 db  78h ; x
.eh_frame:00000000000061D3                 db  43h ; C
.eh_frame:00000000000061D4                 db  0Eh
.eh_frame:00000000000061D5                 db  80h
.eh_frame:00000000000061D6                 db    1
.eh_frame:00000000000061D7                 db  43h ; C
.eh_frame:00000000000061D8                 db  0Eh
.eh_frame:00000000000061D9                 db  88h
.eh_frame:00000000000061DA                 db    1
.eh_frame:00000000000061DB                 db  56h ; V
.eh_frame:00000000000061DC                 db  0Eh
.eh_frame:00000000000061DD                 db  90h
.eh_frame:00000000000061DE                 db    1
.eh_frame:00000000000061DF                 db  52h ; R
.eh_frame:00000000000061E0                 db  0Eh
.eh_frame:00000000000061E1                 db  70h ; p
.eh_frame:00000000000061E2                 db  5Bh ; [
.eh_frame:00000000000061E3                 db  0Eh
.eh_frame:00000000000061E4                 db  38h ; 8
.eh_frame:00000000000061E5                 db  41h ; A
.eh_frame:00000000000061E6                 db  0Eh
.eh_frame:00000000000061E7                 db  30h ; 0
.eh_frame:00000000000061E8                 db  41h ; A
.eh_frame:00000000000061E9                 db  0Eh
.eh_frame:00000000000061EA                 db  28h ; (
.eh_frame:00000000000061EB                 db  42h ; B
.eh_frame:00000000000061EC                 db  0Eh
.eh_frame:00000000000061ED                 db  20h
.eh_frame:00000000000061EE                 db  42h ; B
.eh_frame:00000000000061EF                 db  0Eh
.eh_frame:00000000000061F0                 db  18h
.eh_frame:00000000000061F1                 db  42h ; B
.eh_frame:00000000000061F2                 db  0Eh
.eh_frame:00000000000061F3                 db  10h
.eh_frame:00000000000061F4                 db  42h ; B
.eh_frame:00000000000061F5                 db  0Eh
.eh_frame:00000000000061F6                 db    8
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  10h
.eh_frame:00000000000061F9                 db    0
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db  64h ; d
.eh_frame:00000000000061FD                 db    4
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db 0C0h
.eh_frame:0000000000006201                 db 0D9h
.eh_frame:0000000000006202                 db 0FFh
.eh_frame:0000000000006203                 db 0FFh
.eh_frame:0000000000006204                 db  0Ah
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db    0
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C                 db  28h ; (
.eh_frame:000000000000620D                 db    0
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db  78h ; x
.eh_frame:0000000000006211                 db    4
.eh_frame:0000000000006212                 db    0
.eh_frame:0000000000006213                 db    0
.eh_frame:0000000000006214                 db 0BCh
.eh_frame:0000000000006215                 db 0D9h
.eh_frame:0000000000006216                 db 0FFh
.eh_frame:0000000000006217                 db 0FFh
.eh_frame:0000000000006218                 db  93h
.eh_frame:0000000000006219                 db    0
.eh_frame:000000000000621A                 db    0
.eh_frame:000000000000621B                 db    0
.eh_frame:000000000000621C                 db    0
.eh_frame:000000000000621D                 db  48h ; H
.eh_frame:000000000000621E                 db  0Eh
.eh_frame:000000000000621F                 db  10h
.eh_frame:0000000000006220                 db  8Ch
.eh_frame:0000000000006221                 db    2
.eh_frame:0000000000006222                 db  48h ; H
.eh_frame:0000000000006223                 db  0Eh
.eh_frame:0000000000006224                 db  18h
.eh_frame:0000000000006225                 db  86h
.eh_frame:0000000000006226                 db    3
.eh_frame:0000000000006227                 db  41h ; A
.eh_frame:0000000000006228                 db  0Eh
.eh_frame:0000000000006229                 db  20h
.eh_frame:000000000000622A                 db  83h
.eh_frame:000000000000622B                 db    4
.eh_frame:000000000000622C                 db    2
.eh_frame:000000000000622D                 db  74h ; t
.eh_frame:000000000000622E                 db  0Eh
.eh_frame:000000000000622F                 db  18h
.eh_frame:0000000000006230                 db  4Bh ; K
.eh_frame:0000000000006231                 db  0Eh
.eh_frame:0000000000006232                 db  10h
.eh_frame:0000000000006233                 db  42h ; B
.eh_frame:0000000000006234                 db  0Eh
.eh_frame:0000000000006235                 db    8
.eh_frame:0000000000006236                 db    0
.eh_frame:0000000000006237                 db    0
.eh_frame:0000000000006238                 db  10h
.eh_frame:0000000000006239                 db    0
.eh_frame:000000000000623A                 db    0
.eh_frame:000000000000623B                 db    0
.eh_frame:000000000000623C                 db 0A4h
.eh_frame:000000000000623D                 db    4
.eh_frame:000000000000623E                 db    0
.eh_frame:000000000000623F                 db    0
.eh_frame:0000000000006240                 db  30h ; 0
.eh_frame:0000000000006241                 db 0DAh
.eh_frame:0000000000006242                 db 0FFh
.eh_frame:0000000000006243                 db 0FFh
.eh_frame:0000000000006244                 db  13h
.eh_frame:0000000000006245                 db    0
.eh_frame:0000000000006246                 db    0
.eh_frame:0000000000006247                 db    0
.eh_frame:0000000000006248                 db    0
.eh_frame:0000000000006249                 db    0
.eh_frame:000000000000624A                 db    0
.eh_frame:000000000000624B                 db    0
.eh_frame:000000000000624C                 db  10h
.eh_frame:000000000000624D                 db    0
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db 0B8h
.eh_frame:0000000000006251                 db    4
.eh_frame:0000000000006252                 db    0
.eh_frame:0000000000006253                 db    0
.eh_frame:0000000000006254                 db  3Ch ; <
.eh_frame:0000000000006255                 db 0DAh
.eh_frame:0000000000006256                 db 0FFh
.eh_frame:0000000000006257                 db 0FFh
.eh_frame:0000000000006258                 db  0Ch
.eh_frame:0000000000006259                 db    0
.eh_frame:000000000000625A                 db    0
.eh_frame:000000000000625B                 db    0
.eh_frame:000000000000625C                 db    0
.eh_frame:000000000000625D                 db    0
.eh_frame:000000000000625E                 db    0
.eh_frame:000000000000625F                 db    0
.eh_frame:0000000000006260                 db  10h
.eh_frame:0000000000006261                 db    0
.eh_frame:0000000000006262                 db    0
.eh_frame:0000000000006263                 db    0
.eh_frame:0000000000006264                 db 0CCh
.eh_frame:0000000000006265                 db    4
.eh_frame:0000000000006266                 db    0
.eh_frame:0000000000006267                 db    0
.eh_frame:0000000000006268                 db  38h ; 8
.eh_frame:0000000000006269                 db 0DAh
.eh_frame:000000000000626A                 db 0FFh
.eh_frame:000000000000626B                 db 0FFh
.eh_frame:000000000000626C                 db  18h
.eh_frame:000000000000626D                 db    0
.eh_frame:000000000000626E                 db    0
.eh_frame:000000000000626F                 db    0
.eh_frame:0000000000006270                 db    0
.eh_frame:0000000000006271                 db    0
.eh_frame:0000000000006272                 db    0
.eh_frame:0000000000006273                 db    0
.eh_frame:0000000000006274                 db  10h
.eh_frame:0000000000006275                 db    0
.eh_frame:0000000000006276                 db    0
.eh_frame:0000000000006277                 db    0
.eh_frame:0000000000006278                 db 0E0h
.eh_frame:0000000000006279                 db    4
.eh_frame:000000000000627A                 db    0
.eh_frame:000000000000627B                 db    0
.eh_frame:000000000000627C                 db  44h ; D
.eh_frame:000000000000627D                 db 0DAh
.eh_frame:000000000000627E                 db 0FFh
.eh_frame:000000000000627F                 db 0FFh
.eh_frame:0000000000006280                 db  14h
.eh_frame:0000000000006281                 db    0
.eh_frame:0000000000006282                 db    0
.eh_frame:0000000000006283                 db    0
.eh_frame:0000000000006284                 db    0
.eh_frame:0000000000006285                 db    0
.eh_frame:0000000000006286                 db    0
.eh_frame:0000000000006287                 db    0
.eh_frame:0000000000006288                 db  18h
.eh_frame:0000000000006289                 db    0
.eh_frame:000000000000628A                 db    0
.eh_frame:000000000000628B                 db    0
.eh_frame:000000000000628C                 db 0F4h
.eh_frame:000000000000628D                 db    4
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db  50h ; P
.eh_frame:0000000000006291                 db 0DAh
.eh_frame:0000000000006292                 db 0FFh
.eh_frame:0000000000006293                 db 0FFh
.eh_frame:0000000000006294                 db  8Eh
.eh_frame:0000000000006295                 db    0
.eh_frame:0000000000006296                 db    0
.eh_frame:0000000000006297                 db    0
.eh_frame:0000000000006298                 db    0
.eh_frame:0000000000006299                 db  44h ; D
.eh_frame:000000000000629A                 db  0Eh
.eh_frame:000000000000629B                 db  50h ; P
.eh_frame:000000000000629C                 db    2
.eh_frame:000000000000629D                 db  7Fh ; 
.eh_frame:000000000000629E                 db  0Ah
.eh_frame:000000000000629F                 db  0Eh
.eh_frame:00000000000062A0                 db    8
.eh_frame:00000000000062A1                 db  41h ; A
.eh_frame:00000000000062A2                 db  0Bh
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db  18h
.eh_frame:00000000000062A5                 db    0
.eh_frame:00000000000062A6                 db    0
.eh_frame:00000000000062A7                 db    0
.eh_frame:00000000000062A8                 db  10h
.eh_frame:00000000000062A9                 db    5
.eh_frame:00000000000062AA                 db    0
.eh_frame:00000000000062AB                 db    0
.eh_frame:00000000000062AC                 db 0C4h
.eh_frame:00000000000062AD                 db 0DAh
.eh_frame:00000000000062AE                 db 0FFh
.eh_frame:00000000000062AF                 db 0FFh
.eh_frame:00000000000062B0                 db  8Ah
.eh_frame:00000000000062B1                 db    0
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db    0
.eh_frame:00000000000062B5                 db  44h ; D
.eh_frame:00000000000062B6                 db  0Eh
.eh_frame:00000000000062B7                 db  50h ; P
.eh_frame:00000000000062B8                 db    2
.eh_frame:00000000000062B9                 db  7Bh ; {
.eh_frame:00000000000062BA                 db  0Ah
.eh_frame:00000000000062BB                 db  0Eh
.eh_frame:00000000000062BC                 db    8
.eh_frame:00000000000062BD                 db  41h ; A
.eh_frame:00000000000062BE                 db  0Bh
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db  10h
.eh_frame:00000000000062C1                 db    0
.eh_frame:00000000000062C2                 db    0
.eh_frame:00000000000062C3                 db    0
.eh_frame:00000000000062C4                 db  2Ch ; ,
.eh_frame:00000000000062C5                 db    5
.eh_frame:00000000000062C6                 db    0
.eh_frame:00000000000062C7                 db    0
.eh_frame:00000000000062C8                 db  38h ; 8
.eh_frame:00000000000062C9                 db 0DBh
.eh_frame:00000000000062CA                 db 0FFh
.eh_frame:00000000000062CB                 db 0FFh
.eh_frame:00000000000062CC                 db  0Ch
.eh_frame:00000000000062CD                 db    0
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db    0
.eh_frame:00000000000062D1                 db    0
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db  10h
.eh_frame:00000000000062D5                 db    0
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db  40h ; @
.eh_frame:00000000000062D9                 db    5
.eh_frame:00000000000062DA                 db    0
.eh_frame:00000000000062DB                 db    0
.eh_frame:00000000000062DC                 db  34h ; 4
.eh_frame:00000000000062DD                 db 0DBh
.eh_frame:00000000000062DE                 db 0FFh
.eh_frame:00000000000062DF                 db 0FFh
.eh_frame:00000000000062E0                 db  0Fh
.eh_frame:00000000000062E1                 db    0
.eh_frame:00000000000062E2                 db    0
.eh_frame:00000000000062E3                 db    0
.eh_frame:00000000000062E4                 db    0
.eh_frame:00000000000062E5                 db    0
.eh_frame:00000000000062E6                 db    0
.eh_frame:00000000000062E7                 db    0
.eh_frame:00000000000062E8                 db  18h
.eh_frame:00000000000062E9                 db    0
.eh_frame:00000000000062EA                 db    0
.eh_frame:00000000000062EB                 db    0
.eh_frame:00000000000062EC                 db  54h ; T
.eh_frame:00000000000062ED                 db    5
.eh_frame:00000000000062EE                 db    0
.eh_frame:00000000000062EF                 db    0
.eh_frame:00000000000062F0                 db  30h ; 0
.eh_frame:00000000000062F1                 db 0DBh
.eh_frame:00000000000062F2                 db 0FFh
.eh_frame:00000000000062F3                 db 0FFh
.eh_frame:00000000000062F4                 db  98h
.eh_frame:00000000000062F5                 db    0
.eh_frame:00000000000062F6                 db    0
.eh_frame:00000000000062F7                 db    0
.eh_frame:00000000000062F8                 db    0
.eh_frame:00000000000062F9                 db  44h ; D
.eh_frame:00000000000062FA                 db  0Eh
.eh_frame:00000000000062FB                 db  50h ; P
.eh_frame:00000000000062FC                 db    2
.eh_frame:00000000000062FD                 db  8Eh
.eh_frame:00000000000062FE                 db  0Ah
.eh_frame:00000000000062FF                 db  0Eh
.eh_frame:0000000000006300                 db    8
.eh_frame:0000000000006301                 db  41h ; A
.eh_frame:0000000000006302                 db  0Bh
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db  10h
.eh_frame:0000000000006305                 db    0
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db  70h ; p
.eh_frame:0000000000006309                 db    5
.eh_frame:000000000000630A                 db    0
.eh_frame:000000000000630B                 db    0
.eh_frame:000000000000630C                 db 0B4h
.eh_frame:000000000000630D                 db 0DBh
.eh_frame:000000000000630E                 db 0FFh
.eh_frame:000000000000630F                 db 0FFh
.eh_frame:0000000000006310                 db  10h
.eh_frame:0000000000006311                 db    0
.eh_frame:0000000000006312                 db    0
.eh_frame:0000000000006313                 db    0
.eh_frame:0000000000006314                 db    0
.eh_frame:0000000000006315                 db    0
.eh_frame:0000000000006316                 db    0
.eh_frame:0000000000006317                 db    0
.eh_frame:0000000000006318                 db  10h
.eh_frame:0000000000006319                 db    0
.eh_frame:000000000000631A                 db    0
.eh_frame:000000000000631B                 db    0
.eh_frame:000000000000631C                 db  84h
.eh_frame:000000000000631D                 db    5
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db 0B0h
.eh_frame:0000000000006321                 db 0DBh
.eh_frame:0000000000006322                 db 0FFh
.eh_frame:0000000000006323                 db 0FFh
.eh_frame:0000000000006324                 db  11h
.eh_frame:0000000000006325                 db    0
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db    0
.eh_frame:0000000000006329                 db    0
.eh_frame:000000000000632A                 db    0
.eh_frame:000000000000632B                 db    0
.eh_frame:000000000000632C                 db  10h
.eh_frame:000000000000632D                 db    0
.eh_frame:000000000000632E                 db    0
.eh_frame:000000000000632F                 db    0
.eh_frame:0000000000006330                 db  98h
.eh_frame:0000000000006331                 db    5
.eh_frame:0000000000006332                 db    0
.eh_frame:0000000000006333                 db    0
.eh_frame:0000000000006334                 db 0BCh
.eh_frame:0000000000006335                 db 0DBh
.eh_frame:0000000000006336                 db 0FFh
.eh_frame:0000000000006337                 db 0FFh
.eh_frame:0000000000006338                 db  0Ah
.eh_frame:0000000000006339                 db    0
.eh_frame:000000000000633A                 db    0
.eh_frame:000000000000633B                 db    0
.eh_frame:000000000000633C                 db    0
.eh_frame:000000000000633D                 db    0
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db  18h
.eh_frame:0000000000006341                 db    0
.eh_frame:0000000000006342                 db    0
.eh_frame:0000000000006343                 db    0
.eh_frame:0000000000006344                 db 0ACh
.eh_frame:0000000000006345                 db    5
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db 0B8h
.eh_frame:0000000000006349                 db 0DBh
.eh_frame:000000000000634A                 db 0FFh
.eh_frame:000000000000634B                 db 0FFh
.eh_frame:000000000000634C                 db  8Eh
.eh_frame:000000000000634D                 db    0
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db    0
.eh_frame:0000000000006351                 db  44h ; D
.eh_frame:0000000000006352                 db  0Eh
.eh_frame:0000000000006353                 db  50h ; P
.eh_frame:0000000000006354                 db    2
.eh_frame:0000000000006355                 db  7Fh ; 
.eh_frame:0000000000006356                 db  0Ah
.eh_frame:0000000000006357                 db  0Eh
.eh_frame:0000000000006358                 db    8
.eh_frame:0000000000006359                 db  41h ; A
.eh_frame:000000000000635A                 db  0Bh
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db  18h
.eh_frame:000000000000635D                 db    0
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db 0C8h
.eh_frame:0000000000006361                 db    5
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db  2Ch ; ,
.eh_frame:0000000000006365                 db 0DCh
.eh_frame:0000000000006366                 db 0FFh
.eh_frame:0000000000006367                 db 0FFh
.eh_frame:0000000000006368                 db  91h
.eh_frame:0000000000006369                 db    0
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db    0
.eh_frame:000000000000636D                 db  44h ; D
.eh_frame:000000000000636E                 db  0Eh
.eh_frame:000000000000636F                 db  50h ; P
.eh_frame:0000000000006370                 db    2
.eh_frame:0000000000006371                 db  82h
.eh_frame:0000000000006372                 db  0Ah
.eh_frame:0000000000006373                 db  0Eh
.eh_frame:0000000000006374                 db    8
.eh_frame:0000000000006375                 db  41h ; A
.eh_frame:0000000000006376                 db  0Bh
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db  10h
.eh_frame:0000000000006379                 db    0
.eh_frame:000000000000637A                 db    0
.eh_frame:000000000000637B                 db    0
.eh_frame:000000000000637C                 db 0E4h
.eh_frame:000000000000637D                 db    5
.eh_frame:000000000000637E                 db    0
.eh_frame:000000000000637F                 db    0
.eh_frame:0000000000006380                 db 0B0h
.eh_frame:0000000000006381                 db 0DCh
.eh_frame:0000000000006382                 db 0FFh
.eh_frame:0000000000006383                 db 0FFh
.eh_frame:0000000000006384                 db  0Ch
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db    0
.eh_frame:0000000000006389                 db    0
.eh_frame:000000000000638A                 db    0
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db  10h
.eh_frame:000000000000638D                 db    0
.eh_frame:000000000000638E                 db    0
.eh_frame:000000000000638F                 db    0
.eh_frame:0000000000006390                 db 0F8h
.eh_frame:0000000000006391                 db    5
.eh_frame:0000000000006392                 db    0
.eh_frame:0000000000006393                 db    0
.eh_frame:0000000000006394                 db 0ACh
.eh_frame:0000000000006395                 db 0DCh
.eh_frame:0000000000006396                 db 0FFh
.eh_frame:0000000000006397                 db 0FFh
.eh_frame:0000000000006398                 db  17h
.eh_frame:0000000000006399                 db    0
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db    0
.eh_frame:000000000000639D                 db    0
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  10h
.eh_frame:00000000000063A1                 db    0
.eh_frame:00000000000063A2                 db    0
.eh_frame:00000000000063A3                 db    0
.eh_frame:00000000000063A4                 db  0Ch
.eh_frame:00000000000063A5                 db    6
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db 0B8h
.eh_frame:00000000000063A9                 db 0DCh
.eh_frame:00000000000063AA                 db 0FFh
.eh_frame:00000000000063AB                 db 0FFh
.eh_frame:00000000000063AC                 db  13h
.eh_frame:00000000000063AD                 db    0
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db    0
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db  10h
.eh_frame:00000000000063B5                 db    0
.eh_frame:00000000000063B6                 db    0
.eh_frame:00000000000063B7                 db    0
.eh_frame:00000000000063B8                 db  20h
.eh_frame:00000000000063B9                 db    6
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db 0C4h
.eh_frame:00000000000063BD                 db 0DCh
.eh_frame:00000000000063BE                 db 0FFh
.eh_frame:00000000000063BF                 db 0FFh
.eh_frame:00000000000063C0                 db  0Ch
.eh_frame:00000000000063C1                 db    0
.eh_frame:00000000000063C2                 db    0
.eh_frame:00000000000063C3                 db    0
.eh_frame:00000000000063C4                 db    0
.eh_frame:00000000000063C5                 db    0
.eh_frame:00000000000063C6                 db    0
.eh_frame:00000000000063C7                 db    0
.eh_frame:00000000000063C8                 db  10h
.eh_frame:00000000000063C9                 db    0
.eh_frame:00000000000063CA                 db    0
.eh_frame:00000000000063CB                 db    0
.eh_frame:00000000000063CC                 db  34h ; 4
.eh_frame:00000000000063CD                 db    6
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063D0                 db 0C0h
.eh_frame:00000000000063D1                 db 0DCh
.eh_frame:00000000000063D2                 db 0FFh
.eh_frame:00000000000063D3                 db 0FFh
.eh_frame:00000000000063D4                 db  14h
.eh_frame:00000000000063D5                 db    0
.eh_frame:00000000000063D6                 db    0
.eh_frame:00000000000063D7                 db    0
.eh_frame:00000000000063D8                 db    0
.eh_frame:00000000000063D9                 db    0
.eh_frame:00000000000063DA                 db    0
.eh_frame:00000000000063DB                 db    0
.eh_frame:00000000000063DC                 db  10h
.eh_frame:00000000000063DD                 db    0
.eh_frame:00000000000063DE                 db    0
.eh_frame:00000000000063DF                 db    0
.eh_frame:00000000000063E0                 db  48h ; H
.eh_frame:00000000000063E1                 db    6
.eh_frame:00000000000063E2                 db    0
.eh_frame:00000000000063E3                 db    0
.eh_frame:00000000000063E4                 db 0CCh
.eh_frame:00000000000063E5                 db 0DCh
.eh_frame:00000000000063E6                 db 0FFh
.eh_frame:00000000000063E7                 db 0FFh
.eh_frame:00000000000063E8                 db  13h
.eh_frame:00000000000063E9                 db    0
.eh_frame:00000000000063EA                 db    0
.eh_frame:00000000000063EB                 db    0
.eh_frame:00000000000063EC                 db    0
.eh_frame:00000000000063ED                 db    0
.eh_frame:00000000000063EE                 db    0
.eh_frame:00000000000063EF                 db    0
.eh_frame:00000000000063F0                 db  14h
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db  5Ch ; \
.eh_frame:00000000000063F5                 db    6
.eh_frame:00000000000063F6                 db    0
.eh_frame:00000000000063F7                 db    0
.eh_frame:00000000000063F8                 db 0D8h
.eh_frame:00000000000063F9                 db 0DCh
.eh_frame:00000000000063FA                 db 0FFh
.eh_frame:00000000000063FB                 db 0FFh
.eh_frame:00000000000063FC                 db  18h
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db    0
.eh_frame:0000000000006401                 db    0
.eh_frame:0000000000006402                 db    0
.eh_frame:0000000000006403                 db    0
.eh_frame:0000000000006404                 db    0
.eh_frame:0000000000006405                 db    0
.eh_frame:0000000000006406                 db    0
.eh_frame:0000000000006407                 db    0
.eh_frame:0000000000006408                 db  10h
.eh_frame:0000000000006409                 db    1
.eh_frame:000000000000640A                 db    0
.eh_frame:000000000000640B                 db    0
.eh_frame:000000000000640C                 db  74h ; t
.eh_frame:000000000000640D                 db    6
.eh_frame:000000000000640E                 db    0
.eh_frame:000000000000640F                 db    0
.eh_frame:0000000000006410                 db 0E0h
.eh_frame:0000000000006411                 db 0DCh
.eh_frame:0000000000006412                 db 0FFh
.eh_frame:0000000000006413                 db 0FFh
.eh_frame:0000000000006414                 db  17h
.eh_frame:0000000000006415                 db    4
.eh_frame:0000000000006416                 db    0
.eh_frame:0000000000006417                 db    0
.eh_frame:0000000000006418                 db    0
.eh_frame:0000000000006419                 db  42h ; B
.eh_frame:000000000000641A                 db  0Eh
.eh_frame:000000000000641B                 db  10h
.eh_frame:000000000000641C                 db  8Fh
.eh_frame:000000000000641D                 db    2
.eh_frame:000000000000641E                 db  42h ; B
.eh_frame:000000000000641F                 db  0Eh
.eh_frame:0000000000006420                 db  18h
.eh_frame:0000000000006421                 db  8Eh
.eh_frame:0000000000006422                 db    3
.eh_frame:0000000000006423                 db  42h ; B
.eh_frame:0000000000006424                 db  0Eh
.eh_frame:0000000000006425                 db  20h
.eh_frame:0000000000006426                 db  8Dh
.eh_frame:0000000000006427                 db    4
.eh_frame:0000000000006428                 db  42h ; B
.eh_frame:0000000000006429                 db  0Eh
.eh_frame:000000000000642A                 db  28h ; (
.eh_frame:000000000000642B                 db  8Ch
.eh_frame:000000000000642C                 db    5
.eh_frame:000000000000642D                 db  44h ; D
.eh_frame:000000000000642E                 db  0Eh
.eh_frame:000000000000642F                 db  30h ; 0
.eh_frame:0000000000006430                 db  86h
.eh_frame:0000000000006431                 db    6
.eh_frame:0000000000006432                 db  41h ; A
.eh_frame:0000000000006433                 db  0Eh
.eh_frame:0000000000006434                 db  38h ; 8
.eh_frame:0000000000006435                 db  83h
.eh_frame:0000000000006436                 db    7
.eh_frame:0000000000006437                 db  4Ah ; J
.eh_frame:0000000000006438                 db  0Eh
.eh_frame:0000000000006439                 db  60h ; `
.eh_frame:000000000000643A                 db    2
.eh_frame:000000000000643B                 db 0DDh
.eh_frame:000000000000643C                 db  0Eh
.eh_frame:000000000000643D                 db  68h ; h
.eh_frame:000000000000643E                 db  57h ; W
.eh_frame:000000000000643F                 db  0Eh
.eh_frame:0000000000006440                 db  70h ; p
.eh_frame:0000000000006441                 db  42h ; B
.eh_frame:0000000000006442                 db  0Eh
.eh_frame:0000000000006443                 db  78h ; x
.eh_frame:0000000000006444                 db  42h ; B
.eh_frame:0000000000006445                 db  0Eh
.eh_frame:0000000000006446                 db  80h
.eh_frame:0000000000006447                 db    1
.eh_frame:0000000000006448                 db  42h ; B
.eh_frame:0000000000006449                 db  0Eh
.eh_frame:000000000000644A                 db  88h
.eh_frame:000000000000644B                 db    1
.eh_frame:000000000000644C                 db  42h ; B
.eh_frame:000000000000644D                 db  0Eh
.eh_frame:000000000000644E                 db  90h
.eh_frame:000000000000644F                 db    1
.eh_frame:0000000000006450                 db  53h ; S
.eh_frame:0000000000006451                 db  0Eh
.eh_frame:0000000000006452                 db  60h ; `
.eh_frame:0000000000006453                 db  44h ; D
.eh_frame:0000000000006454                 db  0Ah
.eh_frame:0000000000006455                 db  0Eh
.eh_frame:0000000000006456                 db  38h ; 8
.eh_frame:0000000000006457                 db  41h ; A
.eh_frame:0000000000006458                 db  0Eh
.eh_frame:0000000000006459                 db  30h ; 0
.eh_frame:000000000000645A                 db  41h ; A
.eh_frame:000000000000645B                 db  0Eh
.eh_frame:000000000000645C                 db  28h ; (
.eh_frame:000000000000645D                 db  42h ; B
.eh_frame:000000000000645E                 db  0Eh
.eh_frame:000000000000645F                 db  20h
.eh_frame:0000000000006460                 db  42h ; B
.eh_frame:0000000000006461                 db  0Eh
.eh_frame:0000000000006462                 db  18h
.eh_frame:0000000000006463                 db  42h ; B
.eh_frame:0000000000006464                 db  0Eh
.eh_frame:0000000000006465                 db  10h
.eh_frame:0000000000006466                 db  42h ; B
.eh_frame:0000000000006467                 db  0Eh
.eh_frame:0000000000006468                 db    8
.eh_frame:0000000000006469                 db  44h ; D
.eh_frame:000000000000646A                 db  0Bh
.eh_frame:000000000000646B                 db    2
.eh_frame:000000000000646C                 db  78h ; x
.eh_frame:000000000000646D                 db  0Ah
.eh_frame:000000000000646E                 db  0Eh
.eh_frame:000000000000646F                 db  68h ; h
.eh_frame:0000000000006470                 db  48h ; H
.eh_frame:0000000000006471                 db  0Bh
.eh_frame:0000000000006472                 db  5Ah ; Z
.eh_frame:0000000000006473                 db  0Ah
.eh_frame:0000000000006474                 db  0Eh
.eh_frame:0000000000006475                 db  38h ; 8
.eh_frame:0000000000006476                 db  47h ; G
.eh_frame:0000000000006477                 db  0Eh
.eh_frame:0000000000006478                 db  30h ; 0
.eh_frame:0000000000006479                 db  41h ; A
.eh_frame:000000000000647A                 db  0Eh
.eh_frame:000000000000647B                 db  28h ; (
.eh_frame:000000000000647C                 db  42h ; B
.eh_frame:000000000000647D                 db  0Eh
.eh_frame:000000000000647E                 db  20h
.eh_frame:000000000000647F                 db  42h ; B
.eh_frame:0000000000006480                 db  0Eh
.eh_frame:0000000000006481                 db  18h
.eh_frame:0000000000006482                 db  42h ; B
.eh_frame:0000000000006483                 db  0Eh
.eh_frame:0000000000006484                 db  10h
.eh_frame:0000000000006485                 db  42h ; B
.eh_frame:0000000000006486                 db  0Eh
.eh_frame:0000000000006487                 db    8
.eh_frame:0000000000006488                 db  56h ; V
.eh_frame:0000000000006489                 db  0Bh
.eh_frame:000000000000648A                 db  5Eh ; ^
.eh_frame:000000000000648B                 db  0Ah
.eh_frame:000000000000648C                 db  0Eh
.eh_frame:000000000000648D                 db  38h ; 8
.eh_frame:000000000000648E                 db  52h ; R
.eh_frame:000000000000648F                 db  0Eh
.eh_frame:0000000000006490                 db  30h ; 0
.eh_frame:0000000000006491                 db  41h ; A
.eh_frame:0000000000006492                 db  0Eh
.eh_frame:0000000000006493                 db  28h ; (
.eh_frame:0000000000006494                 db  42h ; B
.eh_frame:0000000000006495                 db  0Eh
.eh_frame:0000000000006496                 db  20h
.eh_frame:0000000000006497                 db  42h ; B
.eh_frame:0000000000006498                 db  0Eh
.eh_frame:0000000000006499                 db  18h
.eh_frame:000000000000649A                 db  42h ; B
.eh_frame:000000000000649B                 db  0Eh
.eh_frame:000000000000649C                 db  10h
.eh_frame:000000000000649D                 db  42h ; B
.eh_frame:000000000000649E                 db  0Eh
.eh_frame:000000000000649F                 db    8
.eh_frame:00000000000064A0                 db  4Fh ; O
.eh_frame:00000000000064A1                 db  0Bh
.eh_frame:00000000000064A2                 db  62h ; b
.eh_frame:00000000000064A3                 db  0Ah
.eh_frame:00000000000064A4                 db  0Eh
.eh_frame:00000000000064A5                 db  38h ; 8
.eh_frame:00000000000064A6                 db  50h ; P
.eh_frame:00000000000064A7                 db  0Eh
.eh_frame:00000000000064A8                 db  30h ; 0
.eh_frame:00000000000064A9                 db  41h ; A
.eh_frame:00000000000064AA                 db  0Eh
.eh_frame:00000000000064AB                 db  28h ; (
.eh_frame:00000000000064AC                 db  42h ; B
.eh_frame:00000000000064AD                 db  0Eh
.eh_frame:00000000000064AE                 db  20h
.eh_frame:00000000000064AF                 db  42h ; B
.eh_frame:00000000000064B0                 db  0Eh
.eh_frame:00000000000064B1                 db  18h
.eh_frame:00000000000064B2                 db  42h ; B
.eh_frame:00000000000064B3                 db  0Eh
.eh_frame:00000000000064B4                 db  10h
.eh_frame:00000000000064B5                 db  42h ; B
.eh_frame:00000000000064B6                 db  0Eh
.eh_frame:00000000000064B7                 db    8
.eh_frame:00000000000064B8                 db  55h ; U
.eh_frame:00000000000064B9                 db  0Bh
.eh_frame:00000000000064BA                 db  66h ; f
.eh_frame:00000000000064BB                 db  0Eh
.eh_frame:00000000000064BC                 db  68h ; h
.eh_frame:00000000000064BD                 db  42h ; B
.eh_frame:00000000000064BE                 db  0Eh
.eh_frame:00000000000064BF                 db  70h ; p
.eh_frame:00000000000064C0                 db  5Ch ; \
.eh_frame:00000000000064C1                 db  0Eh
.eh_frame:00000000000064C2                 db  68h ; h
.eh_frame:00000000000064C3                 db  41h ; A
.eh_frame:00000000000064C4                 db  0Eh
.eh_frame:00000000000064C5                 db  60h ; `
.eh_frame:00000000000064C6                 db  44h ; D
.eh_frame:00000000000064C7                 db  0Ah
.eh_frame:00000000000064C8                 db  0Eh
.eh_frame:00000000000064C9                 db  38h ; 8
.eh_frame:00000000000064CA                 db  41h ; A
.eh_frame:00000000000064CB                 db  0Eh
.eh_frame:00000000000064CC                 db  30h ; 0
.eh_frame:00000000000064CD                 db  41h ; A
.eh_frame:00000000000064CE                 db  0Eh
.eh_frame:00000000000064CF                 db  28h ; (
.eh_frame:00000000000064D0                 db  42h ; B
.eh_frame:00000000000064D1                 db  0Eh
.eh_frame:00000000000064D2                 db  20h
.eh_frame:00000000000064D3                 db  42h ; B
.eh_frame:00000000000064D4                 db  0Eh
.eh_frame:00000000000064D5                 db  18h
.eh_frame:00000000000064D6                 db  42h ; B
.eh_frame:00000000000064D7                 db  0Eh
.eh_frame:00000000000064D8                 db  10h
.eh_frame:00000000000064D9                 db  42h ; B
.eh_frame:00000000000064DA                 db  0Eh
.eh_frame:00000000000064DB                 db    8
.eh_frame:00000000000064DC                 db  45h ; E
.eh_frame:00000000000064DD                 db  0Bh
.eh_frame:00000000000064DE                 db  68h ; h
.eh_frame:00000000000064DF                 db  0Ah
.eh_frame:00000000000064E0                 db  0Eh
.eh_frame:00000000000064E1                 db  68h ; h
.eh_frame:00000000000064E2                 db  48h ; H
.eh_frame:00000000000064E3                 db  0Bh
.eh_frame:00000000000064E4                 db  72h ; r
.eh_frame:00000000000064E5                 db  0Eh
.eh_frame:00000000000064E6                 db  68h ; h
.eh_frame:00000000000064E7                 db  45h ; E
.eh_frame:00000000000064E8                 db  0Eh
.eh_frame:00000000000064E9                 db  70h ; p
.eh_frame:00000000000064EA                 db  42h ; B
.eh_frame:00000000000064EB                 db  0Eh
.eh_frame:00000000000064EC                 db  78h ; x
.eh_frame:00000000000064ED                 db  42h ; B
.eh_frame:00000000000064EE                 db  0Eh
.eh_frame:00000000000064EF                 db  80h
.eh_frame:00000000000064F0                 db    1
.eh_frame:00000000000064F1                 db  5Eh ; ^
.eh_frame:00000000000064F2                 db  0Eh
.eh_frame:00000000000064F3                 db  60h ; `
.eh_frame:00000000000064F4                 db  44h ; D
.eh_frame:00000000000064F5                 db  0Ah
.eh_frame:00000000000064F6                 db  0Eh
.eh_frame:00000000000064F7                 db  38h ; 8
.eh_frame:00000000000064F8                 db  41h ; A
.eh_frame:00000000000064F9                 db  0Eh
.eh_frame:00000000000064FA                 db  30h ; 0
.eh_frame:00000000000064FB                 db  41h ; A
.eh_frame:00000000000064FC                 db  0Eh
.eh_frame:00000000000064FD                 db  28h ; (
.eh_frame:00000000000064FE                 db  42h ; B
.eh_frame:00000000000064FF                 db  0Eh
.eh_frame:0000000000006500                 db  20h
.eh_frame:0000000000006501                 db  42h ; B
.eh_frame:0000000000006502                 db  0Eh
.eh_frame:0000000000006503                 db  18h
.eh_frame:0000000000006504                 db  42h ; B
.eh_frame:0000000000006505                 db  0Eh
.eh_frame:0000000000006506                 db  10h
.eh_frame:0000000000006507                 db  42h ; B
.eh_frame:0000000000006508                 db  0Eh
.eh_frame:0000000000006509                 db    8
.eh_frame:000000000000650A                 db  41h ; A
.eh_frame:000000000000650B                 db  0Bh
.eh_frame:000000000000650C                 db  79h ; y
.eh_frame:000000000000650D                 db  0Ah
.eh_frame:000000000000650E                 db  0Eh
.eh_frame:000000000000650F                 db  68h ; h
.eh_frame:0000000000006510                 db  42h ; B
.eh_frame:0000000000006511                 db  0Eh
.eh_frame:0000000000006512                 db  70h ; p
.eh_frame:0000000000006513                 db  42h ; B
.eh_frame:0000000000006514                 db  0Eh
.eh_frame:0000000000006515                 db  78h ; x
.eh_frame:0000000000006516                 db  42h ; B
.eh_frame:0000000000006517                 db  0Eh
.eh_frame:0000000000006518                 db  80h
.eh_frame:0000000000006519                 db    1
.eh_frame:000000000000651A                 db  51h ; Q
.eh_frame:000000000000651B                 db  0Bh
.eh_frame:000000000000651C                 db  10h
.eh_frame:000000000000651D                 db    0
.eh_frame:000000000000651E                 db    0
.eh_frame:000000000000651F                 db    0
.eh_frame:0000000000006520                 db  88h
.eh_frame:0000000000006521                 db    7
.eh_frame:0000000000006522                 db    0
.eh_frame:0000000000006523                 db    0
.eh_frame:0000000000006524                 db 0ECh
.eh_frame:0000000000006525                 db 0DFh
.eh_frame:0000000000006526                 db 0FFh
.eh_frame:0000000000006527                 db 0FFh
.eh_frame:0000000000006528                 db  20h
.eh_frame:0000000000006529                 db    0
.eh_frame:000000000000652A                 db    0
.eh_frame:000000000000652B                 db    0
.eh_frame:000000000000652C                 db    0
.eh_frame:000000000000652D                 db    0
.eh_frame:000000000000652E                 db    0
.eh_frame:000000000000652F                 db    0
.eh_frame:0000000000006530                 db  18h
.eh_frame:0000000000006531                 db    0
.eh_frame:0000000000006532                 db    0
.eh_frame:0000000000006533                 db    0
.eh_frame:0000000000006534                 db  9Ch
.eh_frame:0000000000006535                 db    7
.eh_frame:0000000000006536                 db    0
.eh_frame:0000000000006537                 db    0
.eh_frame:0000000000006538                 db 0F8h
.eh_frame:0000000000006539                 db 0DFh
.eh_frame:000000000000653A                 db 0FFh
.eh_frame:000000000000653B                 db 0FFh
.eh_frame:000000000000653C                 db  78h ; x
.eh_frame:000000000000653D                 db    0
.eh_frame:000000000000653E                 db    0
.eh_frame:000000000000653F                 db    0
.eh_frame:0000000000006540                 db    0
.eh_frame:0000000000006541                 db  44h ; D
.eh_frame:0000000000006542                 db  0Eh
.eh_frame:0000000000006543                 db  70h ; p
.eh_frame:0000000000006544                 db    2
.eh_frame:0000000000006545                 db  60h ; `
.eh_frame:0000000000006546                 db  0Ah
.eh_frame:0000000000006547                 db  0Eh
.eh_frame:0000000000006548                 db    8
.eh_frame:0000000000006549                 db  41h ; A
.eh_frame:000000000000654A                 db  0Bh
.eh_frame:000000000000654B                 db    0
.eh_frame:000000000000654C                 db  28h ; (
.eh_frame:000000000000654D                 db    0
.eh_frame:000000000000654E                 db    0
.eh_frame:000000000000654F                 db    0
.eh_frame:0000000000006550                 db 0B8h
.eh_frame:0000000000006551                 db    7
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db  5Ch ; \
.eh_frame:0000000000006555                 db 0E0h
.eh_frame:0000000000006556                 db 0FFh
.eh_frame:0000000000006557                 db 0FFh
.eh_frame:0000000000006558                 db 0D5h
.eh_frame:0000000000006559                 db    0
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db    0
.eh_frame:000000000000655D                 db  41h ; A
.eh_frame:000000000000655E                 db  0Eh
.eh_frame:000000000000655F                 db  10h
.eh_frame:0000000000006560                 db  86h
.eh_frame:0000000000006561                 db    2
.eh_frame:0000000000006562                 db  41h ; A
.eh_frame:0000000000006563                 db  0Eh
.eh_frame:0000000000006564                 db  18h
.eh_frame:0000000000006565                 db  83h
.eh_frame:0000000000006566                 db    3
.eh_frame:0000000000006567                 db  50h ; P
.eh_frame:0000000000006568                 db  0Eh
.eh_frame:0000000000006569                 db 0D0h
.eh_frame:000000000000656A                 db    1
.eh_frame:000000000000656B                 db    2
.eh_frame:000000000000656C                 db 0ABh
.eh_frame:000000000000656D                 db  0Ah
.eh_frame:000000000000656E                 db  0Eh
.eh_frame:000000000000656F                 db  18h
.eh_frame:0000000000006570                 db  41h ; A
.eh_frame:0000000000006571                 db  0Eh
.eh_frame:0000000000006572                 db  10h
.eh_frame:0000000000006573                 db  41h ; A
.eh_frame:0000000000006574                 db  0Eh
.eh_frame:0000000000006575                 db    8
.eh_frame:0000000000006576                 db  41h ; A
.eh_frame:0000000000006577                 db  0Bh
.eh_frame:0000000000006578                 db  1Ch
.eh_frame:0000000000006579                 db    0
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db 0E4h
.eh_frame:000000000000657D                 db    7
.eh_frame:000000000000657E                 db    0
.eh_frame:000000000000657F                 db    0
.eh_frame:0000000000006580                 db  10h
.eh_frame:0000000000006581                 db 0E1h
.eh_frame:0000000000006582                 db 0FFh
.eh_frame:0000000000006583                 db 0FFh
.eh_frame:0000000000006584                 db  80h
.eh_frame:0000000000006585                 db    0
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db    0
.eh_frame:0000000000006589                 db  41h ; A
.eh_frame:000000000000658A                 db  0Eh
.eh_frame:000000000000658B                 db  10h
.eh_frame:000000000000658C                 db  83h
.eh_frame:000000000000658D                 db    2
.eh_frame:000000000000658E                 db    2
.eh_frame:000000000000658F                 db  7Ah ; z
.eh_frame:0000000000006590                 db  0Eh
.eh_frame:0000000000006591                 db    8
.eh_frame:0000000000006592                 db    0
.eh_frame:0000000000006593                 db    0
.eh_frame:0000000000006594                 db    0
.eh_frame:0000000000006595                 db    0
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db  18h
.eh_frame:0000000000006599                 db    0
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db    4
.eh_frame:000000000000659D                 db    8
.eh_frame:000000000000659E                 db    0
.eh_frame:000000000000659F                 db    0
.eh_frame:00000000000065A0                 db  70h ; p
.eh_frame:00000000000065A1                 db 0E1h
.eh_frame:00000000000065A2                 db 0FFh
.eh_frame:00000000000065A3                 db 0FFh
.eh_frame:00000000000065A4                 db  1Ah
.eh_frame:00000000000065A5                 db    0
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db    0
.eh_frame:00000000000065A9                 db  41h ; A
.eh_frame:00000000000065AA                 db  0Eh
.eh_frame:00000000000065AB                 db  10h
.eh_frame:00000000000065AC                 db  83h
.eh_frame:00000000000065AD                 db    2
.eh_frame:00000000000065AE                 db  53h ; S
.eh_frame:00000000000065AF                 db  0Ah
.eh_frame:00000000000065B0                 db  0Eh
.eh_frame:00000000000065B1                 db    8
.eh_frame:00000000000065B2                 db  41h ; A
.eh_frame:00000000000065B3                 db  0Bh
.eh_frame:00000000000065B4                 db  10h
.eh_frame:00000000000065B5                 db    0
.eh_frame:00000000000065B6                 db    0
.eh_frame:00000000000065B7                 db    0
.eh_frame:00000000000065B8                 db  20h
.eh_frame:00000000000065B9                 db    8
.eh_frame:00000000000065BA                 db    0
.eh_frame:00000000000065BB                 db    0
.eh_frame:00000000000065BC                 db  74h ; t
.eh_frame:00000000000065BD                 db 0E1h
.eh_frame:00000000000065BE                 db 0FFh
.eh_frame:00000000000065BF                 db 0FFh
.eh_frame:00000000000065C0                 db  24h ; $
.eh_frame:00000000000065C1                 db    0
.eh_frame:00000000000065C2                 db    0
.eh_frame:00000000000065C3                 db    0
.eh_frame:00000000000065C4                 db    0
.eh_frame:00000000000065C5                 db  5Fh ; _
.eh_frame:00000000000065C6                 db  0Eh
.eh_frame:00000000000065C7                 db  10h
.eh_frame:00000000000065C8                 db  10h
.eh_frame:00000000000065C9                 db    0
.eh_frame:00000000000065CA                 db    0
.eh_frame:00000000000065CB                 db    0
.eh_frame:00000000000065CC                 db  34h ; 4
.eh_frame:00000000000065CD                 db    8
.eh_frame:00000000000065CE                 db    0
.eh_frame:00000000000065CF                 db    0
.eh_frame:00000000000065D0                 db  90h
.eh_frame:00000000000065D1                 db 0E1h
.eh_frame:00000000000065D2                 db 0FFh
.eh_frame:00000000000065D3                 db 0FFh
.eh_frame:00000000000065D4                 db    2
.eh_frame:00000000000065D5                 db    0
.eh_frame:00000000000065D6                 db    0
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db    0
.eh_frame:00000000000065D9                 db    0
.eh_frame:00000000000065DA                 db    0
.eh_frame:00000000000065DB                 db    0
.eh_frame:00000000000065DC                 db  20h
.eh_frame:00000000000065DD                 db    0
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db  48h ; H
.eh_frame:00000000000065E1                 db    8
.eh_frame:00000000000065E2                 db    0
.eh_frame:00000000000065E3                 db    0
.eh_frame:00000000000065E4                 db  8Ch
.eh_frame:00000000000065E5                 db 0E1h
.eh_frame:00000000000065E6                 db 0FFh
.eh_frame:00000000000065E7                 db 0FFh
.eh_frame:00000000000065E8                 db  36h ; 6
.eh_frame:00000000000065E9                 db    0
.eh_frame:00000000000065EA                 db    0
.eh_frame:00000000000065EB                 db    0
.eh_frame:00000000000065EC                 db    0
.eh_frame:00000000000065ED                 db  44h ; D
.eh_frame:00000000000065EE                 db  0Eh
.eh_frame:00000000000065EF                 db  10h
.eh_frame:00000000000065F0                 db  83h
.eh_frame:00000000000065F1                 db    2
.eh_frame:00000000000065F2                 db  5Dh ; ]
.eh_frame:00000000000065F3                 db  0Ah
.eh_frame:00000000000065F4                 db  0Eh
.eh_frame:00000000000065F5                 db    8
.eh_frame:00000000000065F6                 db  47h ; G
.eh_frame:00000000000065F7                 db  0Bh
.eh_frame:00000000000065F8                 db  48h ; H
.eh_frame:00000000000065F9                 db  0Ah
.eh_frame:00000000000065FA                 db  0Eh
.eh_frame:00000000000065FB                 db    8
.eh_frame:00000000000065FC                 db  41h ; A
.eh_frame:00000000000065FD                 db  0Bh
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db  10h
.eh_frame:0000000000006601                 db    0
.eh_frame:0000000000006602                 db    0
.eh_frame:0000000000006603                 db    0
.eh_frame:0000000000006604                 db  6Ch ; l
.eh_frame:0000000000006605                 db    8
.eh_frame:0000000000006606                 db    0
.eh_frame:0000000000006607                 db    0
.eh_frame:0000000000006608                 db 0A8h
.eh_frame:0000000000006609                 db 0E1h
.eh_frame:000000000000660A                 db 0FFh
.eh_frame:000000000000660B                 db 0FFh
.eh_frame:000000000000660C                 db  24h ; $
.eh_frame:000000000000660D                 db    0
.eh_frame:000000000000660E                 db    0
.eh_frame:000000000000660F                 db    0
.eh_frame:0000000000006610                 db    0
.eh_frame:0000000000006611                 db  5Fh ; _
.eh_frame:0000000000006612                 db  0Eh
.eh_frame:0000000000006613                 db  10h
.eh_frame:0000000000006614                 db  14h
.eh_frame:0000000000006615                 db    0
.eh_frame:0000000000006616                 db    0
.eh_frame:0000000000006617                 db    0
.eh_frame:0000000000006618                 db  80h
.eh_frame:0000000000006619                 db    8
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db 0C4h
.eh_frame:000000000000661D                 db 0E1h
.eh_frame:000000000000661E                 db 0FFh
.eh_frame:000000000000661F                 db 0FFh
.eh_frame:0000000000006620                 db  82h
.eh_frame:0000000000006621                 db    0
.eh_frame:0000000000006622                 db    0
.eh_frame:0000000000006623                 db    0
.eh_frame:0000000000006624                 db    0
.eh_frame:0000000000006625                 db    2
.eh_frame:0000000000006626                 db  5Fh ; _
.eh_frame:0000000000006627                 db  0Eh
.eh_frame:0000000000006628                 db  10h
.eh_frame:0000000000006629                 db  49h ; I
.eh_frame:000000000000662A                 db  0Eh
.eh_frame:000000000000662B                 db    8
.eh_frame:000000000000662C                 db  14h
.eh_frame:000000000000662D                 db    0
.eh_frame:000000000000662E                 db    0
.eh_frame:000000000000662F                 db    0
.eh_frame:0000000000006630                 db  98h
.eh_frame:0000000000006631                 db    8
.eh_frame:0000000000006632                 db    0
.eh_frame:0000000000006633                 db    0
.eh_frame:0000000000006634                 db  3Ch ; <
.eh_frame:0000000000006635                 db 0E2h
.eh_frame:0000000000006636                 db 0FFh
.eh_frame:0000000000006637                 db 0FFh
.eh_frame:0000000000006638                 db  4Ah ; J
.eh_frame:0000000000006639                 db    0
.eh_frame:000000000000663A                 db    0
.eh_frame:000000000000663B                 db    0
.eh_frame:000000000000663C                 db    0
.eh_frame:000000000000663D                 db    2
.eh_frame:000000000000663E                 db  45h ; E
.eh_frame:000000000000663F                 db  0Eh
.eh_frame:0000000000006640                 db  10h
.eh_frame:0000000000006641                 db    0
.eh_frame:0000000000006642                 db    0
.eh_frame:0000000000006643                 db    0
.eh_frame:0000000000006644                 db  18h
.eh_frame:0000000000006645                 db    0
.eh_frame:0000000000006646                 db    0
.eh_frame:0000000000006647                 db    0
.eh_frame:0000000000006648                 db 0B0h
.eh_frame:0000000000006649                 db    8
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db  74h ; t
.eh_frame:000000000000664D                 db 0E2h
.eh_frame:000000000000664E                 db 0FFh
.eh_frame:000000000000664F                 db 0FFh
.eh_frame:0000000000006650                 db  17h
.eh_frame:0000000000006651                 db    0
.eh_frame:0000000000006652                 db    0
.eh_frame:0000000000006653                 db    0
.eh_frame:0000000000006654                 db    0
.eh_frame:0000000000006655                 db  41h ; A
.eh_frame:0000000000006656                 db  0Eh
.eh_frame:0000000000006657                 db  10h
.eh_frame:0000000000006658                 db  83h
.eh_frame:0000000000006659                 db    2
.eh_frame:000000000000665A                 db  51h ; Q
.eh_frame:000000000000665B                 db  0Eh
.eh_frame:000000000000665C                 db    8
.eh_frame:000000000000665D                 db    0
.eh_frame:000000000000665E                 db    0
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db  18h
.eh_frame:0000000000006661                 db    0
.eh_frame:0000000000006662                 db    0
.eh_frame:0000000000006663                 db    0
.eh_frame:0000000000006664                 db 0CCh
.eh_frame:0000000000006665                 db    8
.eh_frame:0000000000006666                 db    0
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db  78h ; x
.eh_frame:0000000000006669                 db 0E2h
.eh_frame:000000000000666A                 db 0FFh
.eh_frame:000000000000666B                 db 0FFh
.eh_frame:000000000000666C                 db  2Eh ; .
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db    0
.eh_frame:0000000000006671                 db  47h ; G
.eh_frame:0000000000006672                 db  0Eh
.eh_frame:0000000000006673                 db  10h
.eh_frame:0000000000006674                 db  61h ; a
.eh_frame:0000000000006675                 db  0Ah
.eh_frame:0000000000006676                 db  0Eh
.eh_frame:0000000000006677                 db    8
.eh_frame:0000000000006678                 db  41h ; A
.eh_frame:0000000000006679                 db  0Bh
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db  24h ; $
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db 0E8h
.eh_frame:0000000000006681                 db    8
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db  8Ch
.eh_frame:0000000000006685                 db 0E2h
.eh_frame:0000000000006686                 db 0FFh
.eh_frame:0000000000006687                 db 0FFh
.eh_frame:0000000000006688                 db  28h ; (
.eh_frame:0000000000006689                 db    0
.eh_frame:000000000000668A                 db    0
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db    0
.eh_frame:000000000000668D                 db  41h ; A
.eh_frame:000000000000668E                 db  0Eh
.eh_frame:000000000000668F                 db  10h
.eh_frame:0000000000006690                 db  86h
.eh_frame:0000000000006691                 db    2
.eh_frame:0000000000006692                 db  41h ; A
.eh_frame:0000000000006693                 db  0Eh
.eh_frame:0000000000006694                 db  18h
.eh_frame:0000000000006695                 db  83h
.eh_frame:0000000000006696                 db    3
.eh_frame:0000000000006697                 db  4Dh ; M
.eh_frame:0000000000006698                 db  0Eh
.eh_frame:0000000000006699                 db  20h
.eh_frame:000000000000669A                 db  49h ; I
.eh_frame:000000000000669B                 db  0Eh
.eh_frame:000000000000669C                 db  18h
.eh_frame:000000000000669D                 db  47h ; G
.eh_frame:000000000000669E                 db  0Eh
.eh_frame:000000000000669F                 db  10h
.eh_frame:00000000000066A0                 db  41h ; A
.eh_frame:00000000000066A1                 db  0Eh
.eh_frame:00000000000066A2                 db    8
.eh_frame:00000000000066A3                 db    0
.eh_frame:00000000000066A4                 db  18h
.eh_frame:00000000000066A5                 db    0
.eh_frame:00000000000066A6                 db    0
.eh_frame:00000000000066A7                 db    0
.eh_frame:00000000000066A8                 db  10h
.eh_frame:00000000000066A9                 db    9
.eh_frame:00000000000066AA                 db    0
.eh_frame:00000000000066AB                 db    0
.eh_frame:00000000000066AC                 db  94h
.eh_frame:00000000000066AD                 db 0E2h
.eh_frame:00000000000066AE                 db 0FFh
.eh_frame:00000000000066AF                 db 0FFh
.eh_frame:00000000000066B0                 db  13h
.eh_frame:00000000000066B1                 db    0
.eh_frame:00000000000066B2                 db    0
.eh_frame:00000000000066B3                 db    0
.eh_frame:00000000000066B4                 db    0
.eh_frame:00000000000066B5                 db  41h ; A
.eh_frame:00000000000066B6                 db  0Eh
.eh_frame:00000000000066B7                 db  10h
.eh_frame:00000000000066B8                 db  83h
.eh_frame:00000000000066B9                 db    2
.eh_frame:00000000000066BA                 db  50h ; P
.eh_frame:00000000000066BB                 db  0Eh
.eh_frame:00000000000066BC                 db    8
.eh_frame:00000000000066BD                 db    0
.eh_frame:00000000000066BE                 db    0
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db  14h
.eh_frame:00000000000066C1                 db    0
.eh_frame:00000000000066C2                 db    0
.eh_frame:00000000000066C3                 db    0
.eh_frame:00000000000066C4                 db  2Ch ; ,
.eh_frame:00000000000066C5                 db    9
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db  98h
.eh_frame:00000000000066C9                 db 0E2h
.eh_frame:00000000000066CA                 db 0FFh
.eh_frame:00000000000066CB                 db 0FFh
.eh_frame:00000000000066CC                 db  35h ; 5
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db    0
.eh_frame:00000000000066D1                 db  4Bh ; K
.eh_frame:00000000000066D2                 db  0Eh
.eh_frame:00000000000066D3                 db  10h
.eh_frame:00000000000066D4                 db    0
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db  3Ch ; <
.eh_frame:00000000000066D9                 db    0
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db  44h ; D
.eh_frame:00000000000066DD                 db    9
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db 0C0h
.eh_frame:00000000000066E1                 db 0E2h
.eh_frame:00000000000066E2                 db 0FFh
.eh_frame:00000000000066E3                 db 0FFh
.eh_frame:00000000000066E4                 db  83h
.eh_frame:00000000000066E5                 db    0
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db    0
.eh_frame:00000000000066E9                 db  42h ; B
.eh_frame:00000000000066EA                 db  0Eh
.eh_frame:00000000000066EB                 db  10h
.eh_frame:00000000000066EC                 db  8Dh
.eh_frame:00000000000066ED                 db    2
.eh_frame:00000000000066EE                 db  42h ; B
.eh_frame:00000000000066EF                 db  0Eh
.eh_frame:00000000000066F0                 db  18h
.eh_frame:00000000000066F1                 db  8Ch
.eh_frame:00000000000066F2                 db    3
.eh_frame:00000000000066F3                 db  44h ; D
.eh_frame:00000000000066F4                 db  0Eh
.eh_frame:00000000000066F5                 db  20h
.eh_frame:00000000000066F6                 db  86h
.eh_frame:00000000000066F7                 db    4
.eh_frame:00000000000066F8                 db  41h ; A
.eh_frame:00000000000066F9                 db  0Eh
.eh_frame:00000000000066FA                 db  28h ; (
.eh_frame:00000000000066FB                 db  83h
.eh_frame:00000000000066FC                 db    5
.eh_frame:00000000000066FD                 db  4Ah ; J
.eh_frame:00000000000066FE                 db  0Eh
.eh_frame:00000000000066FF                 db  40h ; @
.eh_frame:0000000000006700                 db    2
.eh_frame:0000000000006701                 db  64h ; d
.eh_frame:0000000000006702                 db  0Ah
.eh_frame:0000000000006703                 db  0Eh
.eh_frame:0000000000006704                 db  28h ; (
.eh_frame:0000000000006705                 db  41h ; A
.eh_frame:0000000000006706                 db  0Eh
.eh_frame:0000000000006707                 db  20h
.eh_frame:0000000000006708                 db  41h ; A
.eh_frame:0000000000006709                 db  0Eh
.eh_frame:000000000000670A                 db  18h
.eh_frame:000000000000670B                 db  42h ; B
.eh_frame:000000000000670C                 db  0Eh
.eh_frame:000000000000670D                 db  10h
.eh_frame:000000000000670E                 db  42h ; B
.eh_frame:000000000000670F                 db  0Eh
.eh_frame:0000000000006710                 db    8
.eh_frame:0000000000006711                 db  41h ; A
.eh_frame:0000000000006712                 db  0Bh
.eh_frame:0000000000006713                 db    0
.eh_frame:0000000000006714                 db    0
.eh_frame:0000000000006715                 db    0
.eh_frame:0000000000006716                 db    0
.eh_frame:0000000000006717                 db    0
.eh_frame:0000000000006718                 db  4Ch ; L
.eh_frame:0000000000006719                 db    0
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db  84h
.eh_frame:000000000000671D                 db    9
.eh_frame:000000000000671E                 db    0
.eh_frame:000000000000671F                 db    0
.eh_frame:0000000000006720                 db  10h
.eh_frame:0000000000006721                 db 0E3h
.eh_frame:0000000000006722                 db 0FFh
.eh_frame:0000000000006723                 db 0FFh
.eh_frame:0000000000006724                 db  7Dh ; }
.eh_frame:0000000000006725                 db    0
.eh_frame:0000000000006726                 db    0
.eh_frame:0000000000006727                 db    0
.eh_frame:0000000000006728                 db    0
.eh_frame:0000000000006729                 db  42h ; B
.eh_frame:000000000000672A                 db  0Eh
.eh_frame:000000000000672B                 db  10h
.eh_frame:000000000000672C                 db  8Ch
.eh_frame:000000000000672D                 db    2
.eh_frame:000000000000672E                 db  41h ; A
.eh_frame:000000000000672F                 db  0Eh
.eh_frame:0000000000006730                 db  18h
.eh_frame:0000000000006731                 db  86h
.eh_frame:0000000000006732                 db    3
.eh_frame:0000000000006733                 db  44h ; D
.eh_frame:0000000000006734                 db  0Eh
.eh_frame:0000000000006735                 db  20h
.eh_frame:0000000000006736                 db  83h
.eh_frame:0000000000006737                 db    4
.eh_frame:0000000000006738                 db  69h ; i
.eh_frame:0000000000006739                 db  0Ah
.eh_frame:000000000000673A                 db  0Eh
.eh_frame:000000000000673B                 db  18h
.eh_frame:000000000000673C                 db  41h ; A
.eh_frame:000000000000673D                 db  0Eh
.eh_frame:000000000000673E                 db  10h
.eh_frame:000000000000673F                 db  42h ; B
.eh_frame:0000000000006740                 db  0Eh
.eh_frame:0000000000006741                 db    8
.eh_frame:0000000000006742                 db  45h ; E
.eh_frame:0000000000006743                 db  0Bh
.eh_frame:0000000000006744                 db  55h ; U
.eh_frame:0000000000006745                 db  0Ah
.eh_frame:0000000000006746                 db  0Eh
.eh_frame:0000000000006747                 db  18h
.eh_frame:0000000000006748                 db  41h ; A
.eh_frame:0000000000006749                 db  0Eh
.eh_frame:000000000000674A                 db  10h
.eh_frame:000000000000674B                 db  42h ; B
.eh_frame:000000000000674C                 db  0Eh
.eh_frame:000000000000674D                 db    8
.eh_frame:000000000000674E                 db  48h ; H
.eh_frame:000000000000674F                 db  0Bh
.eh_frame:0000000000006750                 db  41h ; A
.eh_frame:0000000000006751                 db  0Ah
.eh_frame:0000000000006752                 db  0Eh
.eh_frame:0000000000006753                 db  18h
.eh_frame:0000000000006754                 db  46h ; F
.eh_frame:0000000000006755                 db  0Eh
.eh_frame:0000000000006756                 db  10h
.eh_frame:0000000000006757                 db  42h ; B
.eh_frame:0000000000006758                 db  0Eh
.eh_frame:0000000000006759                 db    8
.eh_frame:000000000000675A                 db  47h ; G
.eh_frame:000000000000675B                 db  0Bh
.eh_frame:000000000000675C                 db  49h ; I
.eh_frame:000000000000675D                 db  0Eh
.eh_frame:000000000000675E                 db  18h
.eh_frame:000000000000675F                 db  41h ; A
.eh_frame:0000000000006760                 db  0Eh
.eh_frame:0000000000006761                 db  10h
.eh_frame:0000000000006762                 db  42h ; B
.eh_frame:0000000000006763                 db  0Eh
.eh_frame:0000000000006764                 db    8
.eh_frame:0000000000006765                 db    0
.eh_frame:0000000000006766                 db    0
.eh_frame:0000000000006767                 db    0
.eh_frame:0000000000006768                 db  1Ch
.eh_frame:0000000000006769                 db    0
.eh_frame:000000000000676A                 db    0
.eh_frame:000000000000676B                 db    0
.eh_frame:000000000000676C                 db 0D4h
.eh_frame:000000000000676D                 db    9
.eh_frame:000000000000676E                 db    0
.eh_frame:000000000000676F                 db    0
.eh_frame:0000000000006770                 db  40h ; @
.eh_frame:0000000000006771                 db 0E3h
.eh_frame:0000000000006772                 db 0FFh
.eh_frame:0000000000006773                 db 0FFh
.eh_frame:0000000000006774                 db  60h ; `
.eh_frame:0000000000006775                 db    0
.eh_frame:0000000000006776                 db    0
.eh_frame:0000000000006777                 db    0
.eh_frame:0000000000006778                 db    0
.eh_frame:0000000000006779                 db  44h ; D
.eh_frame:000000000000677A                 db  0Eh
.eh_frame:000000000000677B                 db  10h
.eh_frame:000000000000677C                 db  75h ; u
.eh_frame:000000000000677D                 db  0Ah
.eh_frame:000000000000677E                 db  0Eh
.eh_frame:000000000000677F                 db    8
.eh_frame:0000000000006780                 db  47h ; G
.eh_frame:0000000000006781                 db  0Bh
.eh_frame:0000000000006782                 db  5Fh ; _
.eh_frame:0000000000006783                 db  0Eh
.eh_frame:0000000000006784                 db    8
.eh_frame:0000000000006785                 db    0
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db  1Ch
.eh_frame:0000000000006789                 db    0
.eh_frame:000000000000678A                 db    0
.eh_frame:000000000000678B                 db    0
.eh_frame:000000000000678C                 db 0F4h
.eh_frame:000000000000678D                 db    9
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db  80h
.eh_frame:0000000000006791                 db 0E3h
.eh_frame:0000000000006792                 db 0FFh
.eh_frame:0000000000006793                 db 0FFh
.eh_frame:0000000000006794                 db  3Ch ; <
.eh_frame:0000000000006795                 db    0
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db    0
.eh_frame:0000000000006799                 db  44h ; D
.eh_frame:000000000000679A                 db  0Eh
.eh_frame:000000000000679B                 db  10h
.eh_frame:000000000000679C                 db  61h ; a
.eh_frame:000000000000679D                 db  0Ah
.eh_frame:000000000000679E                 db  0Eh
.eh_frame:000000000000679F                 db    8
.eh_frame:00000000000067A0                 db  4Bh ; K
.eh_frame:00000000000067A1                 db  0Bh
.eh_frame:00000000000067A2                 db  4Bh ; K
.eh_frame:00000000000067A3                 db  0Eh
.eh_frame:00000000000067A4                 db    8
.eh_frame:00000000000067A5                 db    0
.eh_frame:00000000000067A6                 db    0
.eh_frame:00000000000067A7                 db    0
.eh_frame:00000000000067A8                 db  34h ; 4
.eh_frame:00000000000067A9                 db    0
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db  14h
.eh_frame:00000000000067AD                 db  0Ah
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db 0A0h
.eh_frame:00000000000067B1                 db 0E3h
.eh_frame:00000000000067B2                 db 0FFh
.eh_frame:00000000000067B3                 db 0FFh
.eh_frame:00000000000067B4                 db  7Bh ; {
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db    0
.eh_frame:00000000000067B9                 db  42h ; B
.eh_frame:00000000000067BA                 db  0Eh
.eh_frame:00000000000067BB                 db  10h
.eh_frame:00000000000067BC                 db  8Ch
.eh_frame:00000000000067BD                 db    2
.eh_frame:00000000000067BE                 db  41h ; A
.eh_frame:00000000000067BF                 db  0Eh
.eh_frame:00000000000067C0                 db  18h
.eh_frame:00000000000067C1                 db  86h
.eh_frame:00000000000067C2                 db    3
.eh_frame:00000000000067C3                 db  41h ; A
.eh_frame:00000000000067C4                 db  0Eh
.eh_frame:00000000000067C5                 db  20h
.eh_frame:00000000000067C6                 db  83h
.eh_frame:00000000000067C7                 db    4
.eh_frame:00000000000067C8                 db  7Dh ; }
.eh_frame:00000000000067C9                 db  0Ah
.eh_frame:00000000000067CA                 db  0Eh
.eh_frame:00000000000067CB                 db  18h
.eh_frame:00000000000067CC                 db  41h ; A
.eh_frame:00000000000067CD                 db  0Eh
.eh_frame:00000000000067CE                 db  10h
.eh_frame:00000000000067CF                 db  42h ; B
.eh_frame:00000000000067D0                 db  0Eh
.eh_frame:00000000000067D1                 db    8
.eh_frame:00000000000067D2                 db  44h ; D
.eh_frame:00000000000067D3                 db  0Bh
.eh_frame:00000000000067D4                 db  60h ; `
.eh_frame:00000000000067D5                 db  0Ah
.eh_frame:00000000000067D6                 db  0Eh
.eh_frame:00000000000067D7                 db  18h
.eh_frame:00000000000067D8                 db  41h ; A
.eh_frame:00000000000067D9                 db  0Eh
.eh_frame:00000000000067DA                 db  10h
.eh_frame:00000000000067DB                 db  42h ; B
.eh_frame:00000000000067DC                 db  0Eh
.eh_frame:00000000000067DD                 db    8
.eh_frame:00000000000067DE                 db  45h ; E
.eh_frame:00000000000067DF                 db  0Bh
.eh_frame:00000000000067E0                 db  1Ch
.eh_frame:00000000000067E1                 db    0
.eh_frame:00000000000067E2                 db    0
.eh_frame:00000000000067E3                 db    0
.eh_frame:00000000000067E4                 db  4Ch ; L
.eh_frame:00000000000067E5                 db  0Ah
.eh_frame:00000000000067E6                 db    0
.eh_frame:00000000000067E7                 db    0
.eh_frame:00000000000067E8                 db 0E8h
.eh_frame:00000000000067E9                 db 0E3h
.eh_frame:00000000000067EA                 db 0FFh
.eh_frame:00000000000067EB                 db 0FFh
.eh_frame:00000000000067EC                 db  40h ; @
.eh_frame:00000000000067ED                 db    0
.eh_frame:00000000000067EE                 db    0
.eh_frame:00000000000067EF                 db    0
.eh_frame:00000000000067F0                 db    0
.eh_frame:00000000000067F1                 db  44h ; D
.eh_frame:00000000000067F2                 db  0Eh
.eh_frame:00000000000067F3                 db  10h
.eh_frame:00000000000067F4                 db  83h
.eh_frame:00000000000067F5                 db    2
.eh_frame:00000000000067F6                 db  5Ah ; Z
.eh_frame:00000000000067F7                 db  0Ah
.eh_frame:00000000000067F8                 db  0Eh
.eh_frame:00000000000067F9                 db    8
.eh_frame:00000000000067FA                 db  4Ah ; J
.eh_frame:00000000000067FB                 db  0Bh
.eh_frame:00000000000067FC                 db  53h ; S
.eh_frame:00000000000067FD                 db  0Eh
.eh_frame:00000000000067FE                 db    8
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db  2Ch ; ,
.eh_frame:0000000000006801                 db    0
.eh_frame:0000000000006802                 db    0
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db  6Ch ; l
.eh_frame:0000000000006805                 db  0Ah
.eh_frame:0000000000006806                 db    0
.eh_frame:0000000000006807                 db    0
.eh_frame:0000000000006808                 db    8
.eh_frame:0000000000006809                 db 0E4h
.eh_frame:000000000000680A                 db 0FFh
.eh_frame:000000000000680B                 db 0FFh
.eh_frame:000000000000680C                 db  57h ; W
.eh_frame:000000000000680D                 db    0
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db    0
.eh_frame:0000000000006811                 db  63h ; c
.eh_frame:0000000000006812                 db  0Eh
.eh_frame:0000000000006813                 db  10h
.eh_frame:0000000000006814                 db  8Ch
.eh_frame:0000000000006815                 db    2
.eh_frame:0000000000006816                 db  41h ; A
.eh_frame:0000000000006817                 db  0Eh
.eh_frame:0000000000006818                 db  18h
.eh_frame:0000000000006819                 db  86h
.eh_frame:000000000000681A                 db    3
.eh_frame:000000000000681B                 db  44h ; D
.eh_frame:000000000000681C                 db  0Eh
.eh_frame:000000000000681D                 db  20h
.eh_frame:000000000000681E                 db  83h
.eh_frame:000000000000681F                 db    4
.eh_frame:0000000000006820                 db  6Bh ; k
.eh_frame:0000000000006821                 db  0Eh
.eh_frame:0000000000006822                 db  18h
.eh_frame:0000000000006823                 db  41h ; A
.eh_frame:0000000000006824                 db  0Eh
.eh_frame:0000000000006825                 db  10h
.eh_frame:0000000000006826                 db  42h ; B
.eh_frame:0000000000006827                 db  0Eh
.eh_frame:0000000000006828                 db    8
.eh_frame:0000000000006829                 db    0
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db    0
.eh_frame:000000000000682D                 db    0
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db  44h ; D
.eh_frame:0000000000006831                 db    0
.eh_frame:0000000000006832                 db    0
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db  9Ch
.eh_frame:0000000000006835                 db  0Ah
.eh_frame:0000000000006836                 db    0
.eh_frame:0000000000006837                 db    0
.eh_frame:0000000000006838                 db  38h ; 8
.eh_frame:0000000000006839                 db 0E4h
.eh_frame:000000000000683A                 db 0FFh
.eh_frame:000000000000683B                 db 0FFh
.eh_frame:000000000000683C                 db  65h ; e
.eh_frame:000000000000683D                 db    0
.eh_frame:000000000000683E                 db    0
.eh_frame:000000000000683F                 db    0
.eh_frame:0000000000006840                 db    0
.eh_frame:0000000000006841                 db  42h ; B
.eh_frame:0000000000006842                 db  0Eh
.eh_frame:0000000000006843                 db  10h
.eh_frame:0000000000006844                 db  8Fh
.eh_frame:0000000000006845                 db    2
.eh_frame:0000000000006846                 db  42h ; B
.eh_frame:0000000000006847                 db  0Eh
.eh_frame:0000000000006848                 db  18h
.eh_frame:0000000000006849                 db  8Eh
.eh_frame:000000000000684A                 db    3
.eh_frame:000000000000684B                 db  45h ; E
.eh_frame:000000000000684C                 db  0Eh
.eh_frame:000000000000684D                 db  20h
.eh_frame:000000000000684E                 db  8Dh
.eh_frame:000000000000684F                 db    4
.eh_frame:0000000000006850                 db  42h ; B
.eh_frame:0000000000006851                 db  0Eh
.eh_frame:0000000000006852                 db  28h ; (
.eh_frame:0000000000006853                 db  8Ch
.eh_frame:0000000000006854                 db    5
.eh_frame:0000000000006855                 db  48h ; H
.eh_frame:0000000000006856                 db  0Eh
.eh_frame:0000000000006857                 db  30h ; 0
.eh_frame:0000000000006858                 db  86h
.eh_frame:0000000000006859                 db    6
.eh_frame:000000000000685A                 db  48h ; H
.eh_frame:000000000000685B                 db  0Eh
.eh_frame:000000000000685C                 db  38h ; 8
.eh_frame:000000000000685D                 db  83h
.eh_frame:000000000000685E                 db    7
.eh_frame:000000000000685F                 db  4Dh ; M
.eh_frame:0000000000006860                 db  0Eh
.eh_frame:0000000000006861                 db  40h ; @
.eh_frame:0000000000006862                 db  72h ; r
.eh_frame:0000000000006863                 db  0Eh
.eh_frame:0000000000006864                 db  38h ; 8
.eh_frame:0000000000006865                 db  41h ; A
.eh_frame:0000000000006866                 db  0Eh
.eh_frame:0000000000006867                 db  30h ; 0
.eh_frame:0000000000006868                 db  41h ; A
.eh_frame:0000000000006869                 db  0Eh
.eh_frame:000000000000686A                 db  28h ; (
.eh_frame:000000000000686B                 db  42h ; B
.eh_frame:000000000000686C                 db  0Eh
.eh_frame:000000000000686D                 db  20h
.eh_frame:000000000000686E                 db  42h ; B
.eh_frame:000000000000686F                 db  0Eh
.eh_frame:0000000000006870                 db  18h
.eh_frame:0000000000006871                 db  42h ; B
.eh_frame:0000000000006872                 db  0Eh
.eh_frame:0000000000006873                 db  10h
.eh_frame:0000000000006874                 db  42h ; B
.eh_frame:0000000000006875                 db  0Eh
.eh_frame:0000000000006876                 db    8
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db  14h
.eh_frame:0000000000006879                 db    0
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db 0E4h
.eh_frame:000000000000687D                 db  0Ah
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db  60h ; `
.eh_frame:0000000000006881                 db 0E4h
.eh_frame:0000000000006882                 db 0FFh
.eh_frame:0000000000006883                 db 0FFh
.eh_frame:0000000000006884                 db    2
.eh_frame:0000000000006885                 db    0
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db    0
.eh_frame:0000000000006889                 db    0
.eh_frame:000000000000688A                 db    0
.eh_frame:000000000000688B                 db    0
.eh_frame:000000000000688C                 db    0
.eh_frame:000000000000688D                 db    0
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db  10h
.eh_frame:0000000000006891                 db    0
.eh_frame:0000000000006892                 db    0
.eh_frame:0000000000006893                 db    0
.eh_frame:0000000000006894                 db 0FCh
.eh_frame:0000000000006895                 db  0Ah
.eh_frame:0000000000006896                 db    0
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db  58h ; X
.eh_frame:0000000000006899                 db 0E4h
.eh_frame:000000000000689A                 db 0FFh
.eh_frame:000000000000689B                 db 0FFh
.eh_frame:000000000000689C                 db  0Eh
.eh_frame:000000000000689D                 db    0
.eh_frame:000000000000689E                 db    0
.eh_frame:000000000000689F                 db    0
.eh_frame:00000000000068A0                 db    0
.eh_frame:00000000000068A1                 db    0
.eh_frame:00000000000068A2                 db    0
.eh_frame:00000000000068A3                 db    0
.eh_frame:00000000000068A4 __FRAME_END__   db    0
.eh_frame:00000000000068A5                 db    0
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A7 _eh_frame       ends
.eh_frame:00000000000068A7
.init_array:0000000000206B70 ; ELF Initialization Function Table
.init_array:0000000000206B70 ; ===========================================================================
.init_array:0000000000206B70
.init_array:0000000000206B70 ; Segment type: Pure data
.init_array:0000000000206B70 ; Segment permissions: Read/Write
.init_array:0000000000206B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B70                 assume cs:_init_array
.init_array:0000000000206B70                 ;org 206B70h
.init_array:0000000000206B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B70
.fini_array:0000000000206B78 ; ELF Termination Function Table
.fini_array:0000000000206B78 ; ===========================================================================
.fini_array:0000000000206B78
.fini_array:0000000000206B78 ; Segment type: Pure data
.fini_array:0000000000206B78 ; Segment permissions: Read/Write
.fini_array:0000000000206B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B78                 assume cs:_fini_array
.fini_array:0000000000206B78                 ;org 206B78h
.fini_array:0000000000206B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B78
.data.rel.ro:0000000000206B80 ; ===========================================================================
.data.rel.ro:0000000000206B80
.data.rel.ro:0000000000206B80 ; Segment type: Pure data
.data.rel.ro:0000000000206B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B80                 ;org 206B80h
.data.rel.ro:0000000000206B80 ; struct option longopts
.data.rel.ro:0000000000206B80 longopts        dq offset aContext      ; name
.data.rel.ro:0000000000206B80                                         ; DATA XREF: main+8↑o
.data.rel.ro:0000000000206B80                 dd 2                    ; has_arg ; "context"
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq 0                    ; flag
.data.rel.ro:0000000000206B80                 dd 5Ah                  ; val
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq offset aInvalidMode+8 ; "mode"
.data.rel.ro:0000000000206BA8                 db    1
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  6Dh ; m
.data.rel.ro:0000000000206BB9                 db    0
.data.rel.ro:0000000000206BBA                 db    0
.data.rel.ro:0000000000206BBB                 db    0
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1298h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4D00h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206B70h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206B78h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 838h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 29Ah>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 408h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E90h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0BA8h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2E8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B48h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0AD2h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 14h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_12B0↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_12B0+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EC8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206ED8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F00 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F08 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F10 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F20 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F28 mkfifo_ptr      dq offset mkfifo        ; DATA XREF: _mkfifo↑r
.got:0000000000206F30 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:0000000000206F38 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F40 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F48 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000206F50 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F58 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F60 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F68 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F70 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F78 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F80 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F88 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:0000000000206F90 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FE0                                         ; DATA XREF: start+24↑r
.got:0000000000206FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF8 _got            ends
.got:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+BA↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1DE2↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_380D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000790↑o
.bss:0000000000207080                                         ; LOAD:00000000000007D8↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000778↑o
.bss:0000000000207088                                         ; main+B3↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000808↑o
.bss:0000000000207090                                         ; main:loc_16A4↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public optarg@@GLIBC_2_2_5
.bss:0000000000207098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000207098                                         ; main+9C↑r ...
.bss:0000000000207098                                         ; Alternative name is 'optarg'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002070A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002070A0                                         ; DATA XREF: LOAD:00000000000007A8↑o
.bss:00000000002070A0                                         ; LOAD:00000000000007C0↑o ...
.bss:00000000002070A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_242D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; char *textdomain(const char *domainname)
extern:0000000000207270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207278 ; int fclose(FILE *stream)
extern:0000000000207278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207280                 extrn bindtextdomain:near
extern:0000000000207280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207298 ; size_t strlen(const char *s)
extern:0000000000207298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; char *strrchr(const char *s, int c)
extern:00000000002072B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D0                 extrn __libc_start_main:near
extern:00000000002072D0                                         ; CODE XREF: start+24↑p
extern:00000000002072D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E0                 extrn fputs_unlocked:near
extern:00000000002072E0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072E8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072E8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072E8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F0 ; int mkfifo(const char *path, __mode_t mode)
extern:00000000002072F0                 extrn mkfifo:near       ; CODE XREF: _mkfifo↑j
extern:00000000002072F0                                         ; DATA XREF: .got:mkfifo_ptr↑o
extern:00000000002072F8 ; __mode_t umask(__mode_t mask)
extern:00000000002072F8                 extrn umask:near        ; CODE XREF: _umask↑j
extern:00000000002072F8                                         ; DATA XREF: .got:umask_ptr↑o
extern:0000000000207300 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207300                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207300                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207308 ; int fileno(FILE *stream)
extern:0000000000207308                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207308                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207310 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000207310                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000207310                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000207318 ; void *malloc(size_t size)
extern:0000000000207318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207320 ; int fflush(FILE *stream)
extern:0000000000207320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207328 ; char *nl_langinfo(nl_item item)
extern:0000000000207328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207330 ; int _freading(FILE *fp)
extern:0000000000207330                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207330                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207338 ; void *realloc(void *ptr, size_t size)
extern:0000000000207338                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207338                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207340 ; char *setlocale(int category, const char *locale)
extern:0000000000207340                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207340                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207348                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207348                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207350 ; int chmod(const char *file, __mode_t mode)
extern:0000000000207350                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:0000000000207350                                         ; DATA XREF: .got:chmod_ptr↑o
extern:0000000000207358 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207358                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207358                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207360 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207360                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207360                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207368 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207368                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207368                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207370 ; void __noreturn exit(int status)
extern:0000000000207370                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207370                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207378 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207378                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207378                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207380                 extrn __fprintf_chk:near
extern:0000000000207380                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207380                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207388 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207388                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207388                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207390 ; int iswprint(wint_t wc)
extern:0000000000207390                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207390                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207398 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207398                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207398                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207398                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002073A0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002073A0                 extrn __ctype_b_loc:near
extern:00000000002073A0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002073A0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073A8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073A8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073B0                 extrn __gmon_start__:near ; weak
extern:00000000002073B0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073B0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073B8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073B8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073B8
extern:00000000002073B8
extern:00000000002073B8                 end start
