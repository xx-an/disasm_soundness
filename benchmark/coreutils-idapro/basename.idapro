LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : E5CCC0C4BF590EB561C26C2D02CECBE2CAE61A24DCC72079854B32D1D783309F
LOAD:0000000000000000 ; Input MD5    : 68EDC9DAE0526D880465205E11CB15AF
LOAD:0000000000000000 ; Input CRC32  : 8AFC148C
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/basename
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'basename.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'basename.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'stripslash.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrndup.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 23178h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 63D0h                ; Size in file image
LOAD:00000000000000D8                 dq 63D0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 530h                 ; Size in file image
LOAD:0000000000000110                 dq 6E8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 55D0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 55D0h                ; Physical address
LOAD:00000000000001B0                 dq 26Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 26Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B50h              ; Physical address
LOAD:0000000000000220                 dq 4B0h                 ; Size in file image
LOAD:0000000000000228                 dq 4B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9Ah, 46h, 0A7h, 0F6h, 36h, 6Fh, 0C7h, 52h, 0CAh, 41h ; Desc
LOAD:0000000000000284                 db 26h, 0DFh, 84h, 4Fh, 0E1h, 8, 0DCh, 96h, 89h, 51h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Fh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Fh, 30h, 35h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_808, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_808, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_808, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_808, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_808, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_808, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_808, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_808, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFclose - offset byte_808, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain - offset byte_808, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aDcgettext - offset byte_808, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_808, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrlen - offset byte_808, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStackChkFail - offset byte_808, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aGetoptLong - offset byte_808, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMbrtowc - offset byte_808, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aOverflow - offset byte_808, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrrchr - offset byte_808, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aLseek - offset byte_808, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMemset - offset byte_808, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrndup - offset byte_808, 12h, 0, 0, \ ; "strndup"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLibcStartMain - offset byte_808, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemcmp - offset byte_808, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFputsUnlocked - offset byte_808, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aCalloc - offset byte_808, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aGmonStart - offset byte_808, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemcpy - offset byte_808, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFileno - offset byte_808, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMalloc - offset byte_808, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFflush - offset byte_808, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aNlLanginfo - offset byte_808, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFreading - offset byte_808, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aRealloc - offset byte_808, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aSetlocale - offset byte_808, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aPrintfChk - offset byte_808, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aError - offset byte_808, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000640                            0>
LOAD:0000000000000658                 Elf64_Sym <offset aFseeko - offset byte_808, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aCxaAtexit - offset byte_808, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aExit+1 - offset byte_808, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFwrite - offset byte_808, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFprintfChk - offset byte_808, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aItmRegistertmc - offset byte_808, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMbsinit - offset byte_808, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aIswprint - offset byte_808, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaFinalize - offset byte_808, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aCtypeBLoc - offset byte_808, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aStdout - offset byte_808, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000748                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000760                 Elf64_Sym <offset aProgname - offset byte_808, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000760                            offset __bss_start, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aProgramInvocat - offset byte_808, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000778                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aPrognameFull - offset byte_808, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000790                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_808, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007A8                            offset __bss_start, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aStderr - offset byte_808, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007C0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aOptind - offset byte_808, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007D8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000007F0                 Elf64_Sym <offset aOptarg - offset byte_808, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000007F0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000808 ; ELF String Table
LOAD:0000000000000808 byte_808        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000808                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000809 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B08↓o
LOAD:0000000000000813 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:000000000000081A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000827 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000831 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000839 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000841 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000848 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000850 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:000000000000085A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000860 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000871 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:000000000000087A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000882 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000888 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000888                                         ; LOAD:0000000000000688↑o
LOAD:000000000000088E aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000088E                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000008A6 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008A6                                         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000008BD aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000008C4 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008CB aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008D2 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008E3 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000008EA aStrndup        db 'strndup',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000008F2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000900 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000907 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:000000000000090D aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000914 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:000000000000091B aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000922 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:000000000000092A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000936 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000944 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:000000000000094B aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000956 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:000000000000095D aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000969 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000970 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000977 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000982 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000982                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000009A0 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000009AF aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000009AF                                         ; LOAD:00000000000003A0↑o
LOAD:00000000000009BE aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009BE                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009D0 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009D7 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009E2 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000009F1 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009F6 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A01 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A11 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A1E aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B18↓o
LOAD:0000000000000A28 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B28↓o
LOAD:0000000000000A34 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B38↓o
LOAD:0000000000000A3F aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B48↓o
LOAD:0000000000000A49 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B58↓o
LOAD:0000000000000A55 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A55                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A71 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A80 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A80                                         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000A9A ; ELF GNU Symbol Version Table
LOAD:0000000000000A9A                 dw 0
LOAD:0000000000000A9C                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000AA6                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AAE                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AB8                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; strndup@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AD0                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AD2                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AE2                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AE8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AEA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AEC                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AEE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AF0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AF4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AF8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B04                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B06                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000B08 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B08                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_808, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B18                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_808, \ ; "GLIBC_2.3"
LOAD:0000000000000B18                                10h>
LOAD:0000000000000B28                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_808, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B28                                10h>
LOAD:0000000000000B38                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_808, \ ; "GLIBC_2.14"
LOAD:0000000000000B38                                10h>
LOAD:0000000000000B48                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_808, \ ; "GLIBC_2.4"
LOAD:0000000000000B48                                10h>
LOAD:0000000000000B58                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_808, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B68 ; ELF RELA Relocation Table
LOAD:0000000000000B68                 Elf64_Rela <206B50h, 8, 17F0h> ; R_X86_64_RELATIVE +17F0h
LOAD:0000000000000B80                 Elf64_Rela <206B58h, 8, 17B0h> ; R_X86_64_RELATIVE +17B0h
LOAD:0000000000000B98                 Elf64_Rela <206B60h, 8, 493Fh> ; R_X86_64_RELATIVE +493Fh
LOAD:0000000000000BB0                 Elf64_Rela <206B80h, 8, 4948h> ; R_X86_64_RELATIVE +4948h
LOAD:0000000000000BC8                 Elf64_Rela <206BA0h, 8, 494Fh> ; R_X86_64_RELATIVE +494Fh
LOAD:0000000000000BE0                 Elf64_Rela <206BC0h, 8, 4954h> ; R_X86_64_RELATIVE +4954h
LOAD:0000000000000BF8                 Elf64_Rela <206BE0h, 8, 4959h> ; R_X86_64_RELATIVE +4959h
LOAD:0000000000000C10                 Elf64_Rela <206C20h, 8, 4D91h> ; R_X86_64_RELATIVE +4D91h
LOAD:0000000000000C28                 Elf64_Rela <206C28h, 8, 4D99h> ; R_X86_64_RELATIVE +4D99h
LOAD:0000000000000C40                 Elf64_Rela <206C30h, 8, 4D9Fh> ; R_X86_64_RELATIVE +4D9Fh
LOAD:0000000000000C58                 Elf64_Rela <206C38h, 8, 4DACh> ; R_X86_64_RELATIVE +4DACh
LOAD:0000000000000C70                 Elf64_Rela <206C40h, 8, 4DB9h> ; R_X86_64_RELATIVE +4DB9h
LOAD:0000000000000C88                 Elf64_Rela <206C48h, 8, 4DCDh> ; R_X86_64_RELATIVE +4DCDh
LOAD:0000000000000CA0                 Elf64_Rela <206C50h, 8, 4DCFh> ; R_X86_64_RELATIVE +4DCFh
LOAD:0000000000000CB8                 Elf64_Rela <206C58h, 8, 4DB2h> ; R_X86_64_RELATIVE +4DB2h
LOAD:0000000000000CD0                 Elf64_Rela <206C60h, 8, 4901h> ; R_X86_64_RELATIVE +4901h
LOAD:0000000000000CE8                 Elf64_Rela <206C68h, 8, 4DD7h> ; R_X86_64_RELATIVE +4DD7h
LOAD:0000000000000D00                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D18                 Elf64_Rela <207010h, 8, 4D1Bh> ; R_X86_64_RELATIVE +4D1Bh
LOAD:0000000000000D30                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D48                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D60                 Elf64_Rela <206FC8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D78                 Elf64_Rela <206FD0h, 1600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D90                 Elf64_Rela <206FD8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DA8                 Elf64_Rela <206FE0h, 2A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DC0                 Elf64_Rela <206FE8h, 2D00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DD8                 Elf64_Rela <207080h, 3000000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DF0                 Elf64_Rela <207088h, 2F00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E08                 Elf64_Rela <207090h, 3500000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E20                 Elf64_Rela <207098h, 3600000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000E38                 Elf64_Rela <2070A0h, 3200000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E50                 Elf64_Rela <2070C0h, 3400000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E68 ; ELF JMPREL Relocation Table
LOAD:0000000000000E68                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E80                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E98                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EB0                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EC8                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000EE0                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EF8                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F10                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F28                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F40                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F58                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F70                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F88                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000FA0                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FB8                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FD0                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000000FE8                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001000                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001018                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001030                 Elf64_Rela <206F18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strndup
LOAD:0000000000001048                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001060                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001078                 Elf64_Rela <206F30h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001090                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000010A8                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000010C0                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000010D8                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000010F0                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001108                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001120                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001138                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001150                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001168                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001180                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001198                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000011B0                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000011C8                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000011E0                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011F8                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001210                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001228                 Elf64_Rela <206FC0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001228 LOAD            ends
LOAD:0000000000001228
.init:0000000000001240 ; ===========================================================================
.init:0000000000001240
.init:0000000000001240 ; Segment type: Pure code
.init:0000000000001240 ; Segment permissions: Read/Execute
.init:0000000000001240 _init           segment dword public 'CODE' use64
.init:0000000000001240                 assume cs:_init
.init:0000000000001240                 ;org 1240h
.init:0000000000001240                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001240
.init:0000000000001240 ; =============== S U B R O U T I N E =======================================
.init:0000000000001240
.init:0000000000001240
.init:0000000000001240                 public _init_proc
.init:0000000000001240 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001240                 sub     rsp, 8          ; _init
.init:0000000000001244                 mov     rax, cs:__gmon_start___ptr
.init:000000000000124B                 test    rax, rax
.init:000000000000124E                 jz      short loc_1252
.init:0000000000001250                 call    rax ; __gmon_start__
.init:0000000000001252
.init:0000000000001252 loc_1252:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001252                 add     rsp, 8
.init:0000000000001256                 retn
.init:0000000000001256 _init_proc      endp
.init:0000000000001256
.init:0000000000001256 _init           ends
.init:0000000000001256
LOAD:0000000000001257 ; ===========================================================================
LOAD:0000000000001257
LOAD:0000000000001257 ; Segment type: Pure code
LOAD:0000000000001257 ; Segment permissions: Read/Execute
LOAD:0000000000001257 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001257                 assume cs:LOAD
LOAD:0000000000001257                 ;org 1257h
LOAD:0000000000001257                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001257                 align 20h
LOAD:0000000000001257 LOAD            ends
LOAD:0000000000001257
.plt:0000000000001260 ; ===========================================================================
.plt:0000000000001260
.plt:0000000000001260 ; Segment type: Pure code
.plt:0000000000001260 ; Segment permissions: Read/Execute
.plt:0000000000001260 _plt            segment para public 'CODE' use64
.plt:0000000000001260                 assume cs:_plt
.plt:0000000000001260                 ;org 1260h
.plt:0000000000001260                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260
.plt:0000000000001260 sub_1260        proc near               ; CODE XREF: .plt:000000000000127B↓j
.plt:0000000000001260                                         ; .plt:000000000000128B↓j ...
.plt:0000000000001260 ; __unwind {
.plt:0000000000001260                 push    cs:qword_206E70
.plt:0000000000001266                 jmp     cs:qword_206E78
.plt:0000000000001266 sub_1260        endp
.plt:0000000000001266
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:000000000000126C                 align 10h
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; void free(void *ptr)
.plt:0000000000001270 _free           proc near               ; CODE XREF: perform_basename+6C↓j
.plt:0000000000001270                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001270                 jmp     cs:free_ptr
.plt:0000000000001270 _free           endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    0
.plt:000000000000127B                 jmp     sub_1260
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: noreturn thunk
.plt:0000000000001280
.plt:0000000000001280 ; void __noreturn abort(void)
.plt:0000000000001280 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001280                                         ; quotearg_buffer_restyled:def_20E1↓p ...
.plt:0000000000001280                 jmp     cs:abort_ptr
.plt:0000000000001280 _abort          endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    1
.plt:000000000000128B                 jmp     sub_1260
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; int *__errno_location(void)
.plt:0000000000001290 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001290                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001290                 jmp     cs:__errno_location_ptr
.plt:0000000000001290 ___errno_location endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    2
.plt:000000000000129B                 jmp     sub_1260
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000012A0 _strncmp        proc near               ; CODE XREF: usage+284↓p
.plt:00000000000012A0                                         ; usage+345↓p
.plt:00000000000012A0                 jmp     cs:strncmp_ptr
.plt:00000000000012A0 _strncmp        endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    3
.plt:00000000000012AB                 jmp     sub_1260
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: noreturn thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; void __noreturn _exit(int status)
.plt:00000000000012B0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000012B0                 jmp     cs:_exit_ptr
.plt:00000000000012B0 __exit          endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    4
.plt:00000000000012BB                 jmp     sub_1260
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; size_t __fpending(FILE *fp)
.plt:00000000000012C0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000012C0                 jmp     cs:__fpending_ptr
.plt:00000000000012C0 ___fpending     endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    5
.plt:00000000000012CB                 jmp     sub_1260
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; char *textdomain(const char *domainname)
.plt:00000000000012D0 _textdomain     proc near               ; CODE XREF: main+49↓p
.plt:00000000000012D0                 jmp     cs:textdomain_ptr
.plt:00000000000012D0 _textdomain     endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    6
.plt:00000000000012DB                 jmp     sub_1260
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; int fclose(FILE *stream)
.plt:00000000000012E0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012E0                                         ; rpl_fclose+6B↓j
.plt:00000000000012E0                 jmp     cs:fclose_ptr
.plt:00000000000012E0 _fclose         endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    7
.plt:00000000000012EB                 jmp     sub_1260
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000012F0 _bindtextdomain proc near               ; CODE XREF: main+3D↓p
.plt:00000000000012F0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000012F0 _bindtextdomain endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    8
.plt:00000000000012FB                 jmp     sub_1260
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001300 _dcgettext      proc near               ; CODE XREF: main+187↓p
.plt:0000000000001300                                         ; main+1BF↓p ...
.plt:0000000000001300                 jmp     cs:dcgettext_ptr
.plt:0000000000001300 _dcgettext      endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    9
.plt:000000000000130B                 jmp     sub_1260
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001310 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001310                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001310 ___ctype_get_mb_cur_max endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Ah
.plt:000000000000131B                 jmp     sub_1260
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; size_t strlen(const char *s)
.plt:0000000000001320 _strlen         proc near               ; CODE XREF: perform_basename+7B↓p
.plt:0000000000001320                                         ; perform_basename+88↓p ...
.plt:0000000000001320                 jmp     cs:strlen_ptr
.plt:0000000000001320 _strlen         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0Bh
.plt:000000000000132B                 jmp     sub_1260
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: noreturn thunk
.plt:0000000000001330
.plt:0000000000001330 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_3243↓p
.plt:0000000000001330                                         ; quotearg_n_style:loc_3869↓p ...
.plt:0000000000001330                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001330 ___stack_chk_fail endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    0Ch
.plt:000000000000133B                 jmp     sub_1260
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001340 _getopt_long    proc near               ; CODE XREF: main+70↓p
.plt:0000000000001340                 jmp     cs:getopt_long_ptr
.plt:0000000000001340 _getopt_long    endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    0Dh
.plt:000000000000134B                 jmp     sub_1260
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001350 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001350                 jmp     cs:mbrtowc_ptr
.plt:0000000000001350 _mbrtowc        endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    0Eh
.plt:000000000000135B                 jmp     sub_1260
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001360 ___overflow     proc near               ; CODE XREF: perform_basename:loc_18C8↓p
.plt:0000000000001360                 jmp     cs:__overflow_ptr
.plt:0000000000001360 ___overflow     endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    0Fh
.plt:000000000000136B                 jmp     sub_1260
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; char *strrchr(const char *s, int c)
.plt:0000000000001370 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001370                 jmp     cs:strrchr_ptr
.plt:0000000000001370 _strrchr        endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    10h
.plt:000000000000137B                 jmp     sub_1260
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001380 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001380                                         ; rpl_fseeko+3B↓p
.plt:0000000000001380                 jmp     cs:lseek_ptr
.plt:0000000000001380 _lseek          endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    11h
.plt:000000000000138B                 jmp     sub_1260
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001390 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001390                                         ; xzalloc+12↓j
.plt:0000000000001390                 jmp     cs:memset_ptr
.plt:0000000000001390 _memset         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    12h
.plt:000000000000139B                 jmp     sub_1260
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; char *strndup(const char *string, size_t n)
.plt:00000000000013A0 _strndup        proc near               ; CODE XREF: xstrndup+4↓p
.plt:00000000000013A0                 jmp     cs:strndup_ptr
.plt:00000000000013A0 _strndup        endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    13h
.plt:00000000000013AB                 jmp     sub_1260
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000013B0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000013B0                 jmp     cs:memcmp_ptr
.plt:00000000000013B0 _memcmp         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    14h
.plt:00000000000013BB                 jmp     sub_1260
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000013C0 _fputs_unlocked proc near               ; CODE XREF: perform_basename+35↓p
.plt:00000000000013C0                                         ; usage+A0↓p ...
.plt:00000000000013C0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000013C0 _fputs_unlocked endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    15h
.plt:00000000000013CB                 jmp     sub_1260
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000013D0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000013D0                 jmp     cs:calloc_ptr
.plt:00000000000013D0 _calloc         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    16h
.plt:00000000000013DB                 jmp     sub_1260
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000013E0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000013E0                 jmp     cs:memcpy_ptr
.plt:00000000000013E0 _memcpy         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    17h
.plt:00000000000013EB                 jmp     sub_1260
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int fileno(FILE *stream)
.plt:00000000000013F0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000013F0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000013F0                 jmp     cs:fileno_ptr
.plt:00000000000013F0 _fileno         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    18h
.plt:00000000000013FB                 jmp     sub_1260
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void *malloc(size_t size)
.plt:0000000000001400 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001400                 jmp     cs:malloc_ptr
.plt:0000000000001400 _malloc         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    19h
.plt:000000000000140B                 jmp     sub_1260
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int fflush(FILE *stream)
.plt:0000000000001410 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001410                                         ; rpl_fflush+3B↓j
.plt:0000000000001410                 jmp     cs:fflush_ptr
.plt:0000000000001410 _fflush         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Ah
.plt:000000000000141B                 jmp     sub_1260
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *nl_langinfo(nl_item item)
.plt:0000000000001420 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001420                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001420 _nl_langinfo    endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1Bh
.plt:000000000000142B                 jmp     sub_1260
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int __freading(FILE *fp)
.plt:0000000000001430 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001430                                         ; rpl_fflush+9↓p
.plt:0000000000001430                 jmp     cs:__freading_ptr
.plt:0000000000001430 ___freading     endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    1Ch
.plt:000000000000143B                 jmp     sub_1260
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001440 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001440                 jmp     cs:realloc_ptr
.plt:0000000000001440 _realloc        endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    1Dh
.plt:000000000000144B                 jmp     sub_1260
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *setlocale(int category, const char *locale)
.plt:0000000000001450 _setlocale      proc near               ; CODE XREF: main+2A↓p
.plt:0000000000001450                                         ; usage+26B↓p ...
.plt:0000000000001450                 jmp     cs:setlocale_ptr
.plt:0000000000001450 _setlocale      endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    1Eh
.plt:000000000000145B                 jmp     sub_1260
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001460                                         ; usage+170↓p ...
.plt:0000000000001460                 jmp     cs:__printf_chk_ptr
.plt:0000000000001460 ___printf_chk   endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    1Fh
.plt:000000000000146B                 jmp     sub_1260
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001470 _error          proc near               ; CODE XREF: main+195↓p
.plt:0000000000001470                                         ; main+1D0↓p ...
.plt:0000000000001470                 jmp     cs:error_ptr
.plt:0000000000001470 _error          endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    20h ; ' '
.plt:000000000000147B                 jmp     sub_1260
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001480 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_473A↓j
.plt:0000000000001480                 jmp     cs:fseeko_ptr
.plt:0000000000001480 _fseeko         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    21h ; '!'
.plt:000000000000148B                 jmp     sub_1260
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001490 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001490                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001490 ___cxa_atexit   endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    22h ; '"'
.plt:000000000000149B                 jmp     sub_1260
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: noreturn thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void __noreturn exit(int status)
.plt:00000000000014A0 _exit           proc near               ; CODE XREF: main+DA↓p
.plt:00000000000014A0                                         ; usage+58↓p
.plt:00000000000014A0                 jmp     cs:exit_ptr
.plt:00000000000014A0 _exit           endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    23h ; '#'
.plt:00000000000014AB                 jmp     sub_1260
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000014B0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000014B0                 jmp     cs:fwrite_ptr
.plt:00000000000014B0 _fwrite         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    24h ; '$'
.plt:00000000000014BB                 jmp     sub_1260
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000014C0                                         ; version_etc_arn+37↓p ...
.plt:00000000000014C0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000014C0 ___fprintf_chk  endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    25h ; '%'
.plt:00000000000014CB                 jmp     sub_1260
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000014D0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000014D0                 jmp     cs:mbsinit_ptr
.plt:00000000000014D0 _mbsinit        endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    26h ; '&'
.plt:00000000000014DB                 jmp     sub_1260
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int iswprint(wint_t wc)
.plt:00000000000014E0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000014E0                 jmp     cs:iswprint_ptr
.plt:00000000000014E0 _iswprint       endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    27h ; '''
.plt:00000000000014EB                 jmp     sub_1260
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000014F0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000014F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000014F0 ___ctype_b_loc  endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    28h ; '('
.plt:00000000000014FB                 jmp     sub_1260
.plt:00000000000014FB ; } // starts at 1260
.plt:00000000000014FB _plt            ends
.plt:00000000000014FB
.plt.got:0000000000001500 ; ===========================================================================
.plt.got:0000000000001500
.plt.got:0000000000001500 ; Segment type: Pure code
.plt.got:0000000000001500 ; Segment permissions: Read/Execute
.plt.got:0000000000001500 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001500                 assume cs:_plt_got
.plt.got:0000000000001500                 ;org 1500h
.plt.got:0000000000001500                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001500
.plt.got:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001500
.plt.got:0000000000001500 ; Attributes: thunk
.plt.got:0000000000001500
.plt.got:0000000000001500 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001500 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001500 ; __unwind {
.plt.got:0000000000001500                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001500 __cxa_finalize  endp
.plt.got:0000000000001500
.plt.got:0000000000001500 ; ---------------------------------------------------------------------------
.plt.got:0000000000001506                 align 8
.plt.got:0000000000001506 ; } // starts at 1500
.plt.got:0000000000001506 _plt_got        ends
.plt.got:0000000000001506
LOAD:0000000000001508 ; ===========================================================================
LOAD:0000000000001508
LOAD:0000000000001508 ; Segment type: Pure code
LOAD:0000000000001508 ; Segment permissions: Read/Execute
LOAD:0000000000001508 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001508                 assume cs:LOAD
LOAD:0000000000001508                 ;org 1508h
LOAD:0000000000001508                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001508                 align 10h
LOAD:0000000000001508 LOAD            ends
LOAD:0000000000001508
.text:0000000000001510 ; ===========================================================================
.text:0000000000001510
.text:0000000000001510 ; Segment type: Pure code
.text:0000000000001510 ; Segment permissions: Read/Execute
.text:0000000000001510 _text           segment para public 'CODE' use64
.text:0000000000001510                 assume cs:_text
.text:0000000000001510                 ;org 1510h
.text:0000000000001510                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001510
.text:0000000000001510 ; =============== S U B R O U T I N E =======================================
.text:0000000000001510
.text:0000000000001510
.text:0000000000001510 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001510                 public main
.text:0000000000001510 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001510 ; __unwind {
.text:0000000000001510                 push    r14
.text:0000000000001512                 push    r13
.text:0000000000001514                 xor     r14d, r14d
.text:0000000000001517                 push    r12
.text:0000000000001519                 push    rbp
.text:000000000000151A                 mov     ebp, edi
.text:000000000000151C                 push    rbx
.text:000000000000151D                 mov     rdi, [rsi]
.text:0000000000001520                 mov     rbx, rsi
.text:0000000000001523                 xor     r13d, r13d
.text:0000000000001526                 xor     r12d, r12d
.text:0000000000001529                 call    set_program_name
.text:000000000000152E                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001535                 mov     edi, 6          ; category
.text:000000000000153A                 call    _setlocale
.text:000000000000153F                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001546                 lea     rdi, domainname ; "coreutils"
.text:000000000000154D                 call    _bindtextdomain
.text:0000000000001552                 lea     rdi, domainname ; "coreutils"
.text:0000000000001559                 call    _textdomain
.text:000000000000155E                 lea     rdi, close_stdout
.text:0000000000001565                 call    atexit
.text:000000000000156A
.text:000000000000156A loc_156A:                               ; CODE XREF: main+99↓j
.text:000000000000156A                                         ; main+E6↓j ...
.text:000000000000156A                 lea     rcx, longopts   ; longopts
.text:0000000000001571                 lea     rdx, shortopts  ; "+as:z"
.text:0000000000001578                 xor     r8d, r8d        ; longind
.text:000000000000157B                 mov     rsi, rbx        ; argv
.text:000000000000157E                 mov     edi, ebp        ; argc
.text:0000000000001580                 call    _getopt_long
.text:0000000000001585                 cmp     eax, 0FFFFFFFFh
.text:0000000000001588                 jz      loc_1612
.text:000000000000158E                 cmp     eax, 61h ; 'a'
.text:0000000000001591                 jz      short loc_15F0
.text:0000000000001593                 jle     short loc_15B0
.text:0000000000001595                 cmp     eax, 73h ; 's'
.text:0000000000001598                 jz      short loc_1600
.text:000000000000159A                 cmp     eax, 7Ah ; 'z'
.text:000000000000159D                 jnz     loc_16AA
.text:00000000000015A3                 mov     r13d, 1
.text:00000000000015A9                 jmp     short loc_156A
.text:00000000000015A9 ; ---------------------------------------------------------------------------
.text:00000000000015AB                 align 10h
.text:00000000000015B0
.text:00000000000015B0 loc_15B0:                               ; CODE XREF: main+83↑j
.text:00000000000015B0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000015B5                 jnz     loc_167B
.text:00000000000015BB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000015C2                 mov     rcx, cs:Version
.text:00000000000015C9                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000015D0                 lea     rdx, unk_48C3
.text:00000000000015D7                 lea     rsi, aBasename  ; "basename"
.text:00000000000015DE                 xor     r9d, r9d
.text:00000000000015E1                 xor     eax, eax
.text:00000000000015E3                 call    version_etc
.text:00000000000015E8                 xor     edi, edi        ; status
.text:00000000000015EA                 call    _exit
.text:00000000000015EA ; ---------------------------------------------------------------------------
.text:00000000000015EF                 align 10h
.text:00000000000015F0
.text:00000000000015F0 loc_15F0:                               ; CODE XREF: main+81↑j
.text:00000000000015F0                 mov     r12d, 1
.text:00000000000015F6                 jmp     loc_156A
.text:00000000000015F6 ; ---------------------------------------------------------------------------
.text:00000000000015FB                 align 20h
.text:0000000000001600
.text:0000000000001600 loc_1600:                               ; CODE XREF: main+88↑j
.text:0000000000001600                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:0000000000001607                 mov     r12d, 1
.text:000000000000160D                 jmp     loc_156A
.text:0000000000001612 ; ---------------------------------------------------------------------------
.text:0000000000001612
.text:0000000000001612 loc_1612:                               ; CODE XREF: main+78↑j
.text:0000000000001612                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001618                 cmp     eax, ebp
.text:000000000000161A                 jge     short loc_1689
.text:000000000000161C                 test    r12b, r12b
.text:000000000000161F                 jnz     short loc_164E
.text:0000000000001621                 movsxd  rcx, eax
.text:0000000000001624                 add     eax, 2
.text:0000000000001627                 cmp     eax, ebp
.text:0000000000001629                 jl      loc_16B4
.text:000000000000162F                 movzx   edx, r13b
.text:0000000000001633                 mov     esi, 0
.text:0000000000001638                 jz      short loc_1674
.text:000000000000163A
.text:000000000000163A loc_163A:                               ; CODE XREF: main+169↓j
.text:000000000000163A                 mov     rdi, [rbx+rcx*8]
.text:000000000000163E                 call    perform_basename
.text:0000000000001643
.text:0000000000001643 loc_1643:                               ; CODE XREF: main+162↓j
.text:0000000000001643                 pop     rbx
.text:0000000000001644                 xor     eax, eax
.text:0000000000001646                 pop     rbp
.text:0000000000001647                 pop     r12
.text:0000000000001649                 pop     r13
.text:000000000000164B                 pop     r14
.text:000000000000164D                 retn
.text:000000000000164E ; ---------------------------------------------------------------------------
.text:000000000000164E
.text:000000000000164E loc_164E:                               ; CODE XREF: main+10F↑j
.text:000000000000164E                                         ; main+160↓j
.text:000000000000164E                 cdqe
.text:0000000000001650                 mov     edx, r13d
.text:0000000000001653                 mov     rsi, r14
.text:0000000000001656                 mov     rdi, [rbx+rax*8]
.text:000000000000165A                 call    perform_basename
.text:000000000000165F                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001665                 add     eax, 1
.text:0000000000001668                 cmp     eax, ebp
.text:000000000000166A                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001670                 jl      short loc_164E
.text:0000000000001672                 jmp     short loc_1643
.text:0000000000001674 ; ---------------------------------------------------------------------------
.text:0000000000001674
.text:0000000000001674 loc_1674:                               ; CODE XREF: main+128↑j
.text:0000000000001674                 mov     rsi, [rbx+rcx*8+8]
.text:0000000000001679                 jmp     short loc_163A
.text:000000000000167B ; ---------------------------------------------------------------------------
.text:000000000000167B
.text:000000000000167B loc_167B:                               ; CODE XREF: main+A5↑j
.text:000000000000167B                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001680                 jnz     short loc_16AA
.text:0000000000001682                 xor     edi, edi        ; status
.text:0000000000001684                 call    usage
.text:0000000000001689 ; ---------------------------------------------------------------------------
.text:0000000000001689
.text:0000000000001689 loc_1689:                               ; CODE XREF: main+10A↑j
.text:0000000000001689                 lea     rsi, msgid      ; "missing operand"
.text:0000000000001690                 mov     edx, 5          ; category
.text:0000000000001695                 xor     edi, edi        ; domainname
.text:0000000000001697                 call    _dcgettext
.text:000000000000169C                 xor     esi, esi        ; errnum
.text:000000000000169E                 mov     rdx, rax        ; format
.text:00000000000016A1                 xor     edi, edi        ; status
.text:00000000000016A3                 xor     eax, eax
.text:00000000000016A5                 call    _error
.text:00000000000016AA
.text:00000000000016AA loc_16AA:                               ; CODE XREF: main+8D↑j
.text:00000000000016AA                                         ; main+170↑j
.text:00000000000016AA                 mov     edi, 1          ; status
.text:00000000000016AF                 call    usage
.text:00000000000016B4 ; ---------------------------------------------------------------------------
.text:00000000000016B4
.text:00000000000016B4 loc_16B4:                               ; CODE XREF: main+119↑j
.text:00000000000016B4                 mov     rdi, [rbx+rcx*8+10h]
.text:00000000000016B9                 call    quote
.text:00000000000016BE                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000016C5                 mov     rbx, rax
.text:00000000000016C8                 mov     edx, 5          ; category
.text:00000000000016CD                 xor     edi, edi        ; domainname
.text:00000000000016CF                 call    _dcgettext
.text:00000000000016D4                 xor     edi, edi        ; status
.text:00000000000016D6                 mov     rdx, rax        ; format
.text:00000000000016D9                 mov     rcx, rbx
.text:00000000000016DC                 xor     esi, esi        ; errnum
.text:00000000000016DE                 xor     eax, eax
.text:00000000000016E0                 call    _error
.text:00000000000016E5                 mov     edi, 1          ; status
.text:00000000000016EA                 call    usage
.text:00000000000016EA ; } // starts at 1510
.text:00000000000016EA main            endp
.text:00000000000016EA
.text:00000000000016EA ; ---------------------------------------------------------------------------
.text:00000000000016EF                 align 10h
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000016F0
.text:00000000000016F0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000016F0                 public start
.text:00000000000016F0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000016F0 ; __unwind {
.text:00000000000016F0                 xor     ebp, ebp
.text:00000000000016F2                 mov     r9, rdx         ; rtld_fini
.text:00000000000016F5                 pop     rsi             ; argc
.text:00000000000016F6                 mov     rdx, rsp        ; ubp_av
.text:00000000000016F9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000016FD                 push    rax
.text:00000000000016FE                 push    rsp             ; stack_end
.text:00000000000016FF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001706                 lea     rcx, __libc_csu_init ; init
.text:000000000000170D                 lea     rdi, main       ; main
.text:0000000000001714                 call    cs:__libc_start_main_ptr
.text:000000000000171A                 hlt
.text:000000000000171A ; } // starts at 16F0
.text:000000000000171A start           endp
.text:000000000000171A
.text:000000000000171A ; ---------------------------------------------------------------------------
.text:000000000000171B                 align 20h
.text:0000000000001720
.text:0000000000001720 ; =============== S U B R O U T I N E =======================================
.text:0000000000001720
.text:0000000000001720 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001720
.text:0000000000001720 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_17D3↓p
.text:0000000000001720                 lea     rdi, __bss_start
.text:0000000000001727                 push    rbp
.text:0000000000001728                 lea     rax, __bss_start
.text:000000000000172F                 cmp     rax, rdi
.text:0000000000001732                 mov     rbp, rsp
.text:0000000000001735                 jz      short loc_1750
.text:0000000000001737                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000173E                 test    rax, rax
.text:0000000000001741                 jz      short loc_1750
.text:0000000000001743                 pop     rbp
.text:0000000000001744                 jmp     rax
.text:0000000000001744 ; ---------------------------------------------------------------------------
.text:0000000000001746                 align 10h
.text:0000000000001750
.text:0000000000001750 loc_1750:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001750                                         ; deregister_tm_clones+21↑j
.text:0000000000001750                 pop     rbp
.text:0000000000001751                 retn
.text:0000000000001751 deregister_tm_clones endp
.text:0000000000001751
.text:0000000000001751 ; ---------------------------------------------------------------------------
.text:0000000000001752                 align 20h
.text:0000000000001760
.text:0000000000001760 ; =============== S U B R O U T I N E =======================================
.text:0000000000001760
.text:0000000000001760 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001760
.text:0000000000001760 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001760                 lea     rdi, __bss_start
.text:0000000000001767                 lea     rsi, __bss_start
.text:000000000000176E                 push    rbp
.text:000000000000176F                 sub     rsi, rdi
.text:0000000000001772                 mov     rbp, rsp
.text:0000000000001775                 sar     rsi, 3
.text:0000000000001779                 mov     rax, rsi
.text:000000000000177C                 shr     rax, 3Fh
.text:0000000000001780                 add     rsi, rax
.text:0000000000001783                 sar     rsi, 1
.text:0000000000001786                 jz      short loc_17A0
.text:0000000000001788                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000178F                 test    rax, rax
.text:0000000000001792                 jz      short loc_17A0
.text:0000000000001794                 pop     rbp
.text:0000000000001795                 jmp     rax
.text:0000000000001795 ; ---------------------------------------------------------------------------
.text:0000000000001797                 align 20h
.text:00000000000017A0
.text:00000000000017A0 loc_17A0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000017A0                                         ; register_tm_clones+32↑j
.text:00000000000017A0                 pop     rbp
.text:00000000000017A1                 retn
.text:00000000000017A1 register_tm_clones endp
.text:00000000000017A1
.text:00000000000017A1 ; ---------------------------------------------------------------------------
.text:00000000000017A2                 align 10h
.text:00000000000017B0
.text:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017B0
.text:00000000000017B0 ; Attributes: info_from_lumina
.text:00000000000017B0
.text:00000000000017B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000017B0                 cmp     cs:completed_7697, 0
.text:00000000000017B7                 jnz     short locret_17E8
.text:00000000000017B9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000017C1                 push    rbp
.text:00000000000017C2                 mov     rbp, rsp
.text:00000000000017C5                 jz      short loc_17D3
.text:00000000000017C7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000017CE                 call    __cxa_finalize
.text:00000000000017D3
.text:00000000000017D3 loc_17D3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000017D3                 call    deregister_tm_clones
.text:00000000000017D8                 mov     cs:completed_7697, 1
.text:00000000000017DF                 pop     rbp
.text:00000000000017E0                 retn
.text:00000000000017E0 ; ---------------------------------------------------------------------------
.text:00000000000017E1                 align 8
.text:00000000000017E8
.text:00000000000017E8 locret_17E8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000017E8                 rep retn
.text:00000000000017E8 __do_global_dtors_aux endp
.text:00000000000017E8
.text:00000000000017E8 ; ---------------------------------------------------------------------------
.text:00000000000017EA                 align 10h
.text:00000000000017F0
.text:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017F0
.text:00000000000017F0 ; Attributes: bp-based frame
.text:00000000000017F0
.text:00000000000017F0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000017F0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000017F0                 push    rbp
.text:00000000000017F1                 mov     rbp, rsp
.text:00000000000017F4                 pop     rbp
.text:00000000000017F5                 jmp     register_tm_clones
.text:00000000000017F5 frame_dummy     endp
.text:00000000000017F5
.text:00000000000017F5 ; ---------------------------------------------------------------------------
.text:00000000000017FA                 align 20h
.text:0000000000001800
.text:0000000000001800 ; =============== S U B R O U T I N E =======================================
.text:0000000000001800
.text:0000000000001800
.text:0000000000001800 perform_basename proc near              ; CODE XREF: main+12E↑p
.text:0000000000001800                                         ; main+14A↑p
.text:0000000000001800 ; __unwind {
.text:0000000000001800                 push    r13
.text:0000000000001802                 push    r12
.text:0000000000001804                 mov     r13, rsi
.text:0000000000001807                 push    rbp
.text:0000000000001808                 push    rbx
.text:0000000000001809                 mov     r12d, edx
.text:000000000000180C                 sub     rsp, 8
.text:0000000000001810                 call    base_name
.text:0000000000001815                 mov     rdi, rax
.text:0000000000001818                 mov     rbp, rax
.text:000000000000181B                 call    strip_trailing_slashes
.text:0000000000001820                 test    r13, r13
.text:0000000000001823                 jz      short loc_182B
.text:0000000000001825                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000001829                 jnz     short loc_1878
.text:000000000000182B
.text:000000000000182B loc_182B:                               ; CODE XREF: perform_basename+23↑j
.text:000000000000182B                                         ; perform_basename+A9↓j ...
.text:000000000000182B                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001832                 mov     rdi, rbp        ; s
.text:0000000000001835                 call    _fputs_unlocked
.text:000000000000183A                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001841                 cmp     r12b, 1
.text:0000000000001845                 sbb     esi, esi
.text:0000000000001847                 and     esi, 0Ah        ; int
.text:000000000000184A                 mov     rax, [rdi+28h]
.text:000000000000184E                 cmp     rax, [rdi+30h]
.text:0000000000001852                 jnb     short loc_18C8
.text:0000000000001854                 lea     rdx, [rax+1]
.text:0000000000001858                 mov     [rdi+28h], rdx
.text:000000000000185C                 mov     [rax], sil
.text:000000000000185F
.text:000000000000185F loc_185F:                               ; CODE XREF: perform_basename+CD↓j
.text:000000000000185F                 add     rsp, 8
.text:0000000000001863                 mov     rdi, rbp        ; ptr
.text:0000000000001866                 pop     rbx
.text:0000000000001867                 pop     rbp
.text:0000000000001868                 pop     r12
.text:000000000000186A                 pop     r13
.text:000000000000186C                 jmp     _free
.text:000000000000186C ; ---------------------------------------------------------------------------
.text:0000000000001871                 align 8
.text:0000000000001878
.text:0000000000001878 loc_1878:                               ; CODE XREF: perform_basename+29↑j
.text:0000000000001878                 mov     rdi, rbp        ; s
.text:000000000000187B                 call    _strlen
.text:0000000000001880                 mov     rdi, r13        ; s
.text:0000000000001883                 lea     rbx, [rbp+rax+0]
.text:0000000000001888                 call    _strlen
.text:000000000000188D                 add     rax, r13
.text:0000000000001890
.text:0000000000001890 loc_1890:                               ; CODE XREF: perform_basename+A7↓j
.text:0000000000001890                 cmp     rbp, rbx
.text:0000000000001893                 jnb     short loc_18B0
.text:0000000000001895                 cmp     r13, rax
.text:0000000000001898                 jnb     short loc_18B0
.text:000000000000189A                 sub     rax, 1
.text:000000000000189E                 sub     rbx, 1
.text:00000000000018A2                 movzx   ecx, byte ptr [rax]
.text:00000000000018A5                 cmp     [rbx], cl
.text:00000000000018A7                 jz      short loc_1890
.text:00000000000018A9                 jmp     short loc_182B
.text:00000000000018A9 ; ---------------------------------------------------------------------------
.text:00000000000018AB                 align 10h
.text:00000000000018B0
.text:00000000000018B0 loc_18B0:                               ; CODE XREF: perform_basename+93↑j
.text:00000000000018B0                                         ; perform_basename+98↑j
.text:00000000000018B0                 cmp     rbp, rbx
.text:00000000000018B3                 jnb     loc_182B
.text:00000000000018B9                 mov     byte ptr [rbx], 0
.text:00000000000018BC                 jmp     loc_182B
.text:00000000000018BC ; ---------------------------------------------------------------------------
.text:00000000000018C1                 align 8
.text:00000000000018C8
.text:00000000000018C8 loc_18C8:                               ; CODE XREF: perform_basename+52↑j
.text:00000000000018C8                 call    ___overflow
.text:00000000000018CD                 jmp     short loc_185F
.text:00000000000018CD ; } // starts at 1800
.text:00000000000018CD perform_basename endp
.text:00000000000018CD
.text:00000000000018CD ; ---------------------------------------------------------------------------
.text:00000000000018CF                 align 10h
.text:00000000000018D0
.text:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018D0
.text:00000000000018D0 ; Attributes: noreturn
.text:00000000000018D0
.text:00000000000018D0 ; void __fastcall __noreturn usage(int status)
.text:00000000000018D0                 public usage
.text:00000000000018D0 usage           proc near               ; CODE XREF: main+174↑p
.text:00000000000018D0                                         ; main+19F↑p ...
.text:00000000000018D0
.text:00000000000018D0 var_A8          = qword ptr -0A8h
.text:00000000000018D0 var_A0          = qword ptr -0A0h
.text:00000000000018D0 var_98          = qword ptr -98h
.text:00000000000018D0 var_90          = qword ptr -90h
.text:00000000000018D0 var_88          = qword ptr -88h
.text:00000000000018D0 var_80          = qword ptr -80h
.text:00000000000018D0 var_78          = qword ptr -78h
.text:00000000000018D0 var_70          = qword ptr -70h
.text:00000000000018D0 var_68          = qword ptr -68h
.text:00000000000018D0 var_60          = qword ptr -60h
.text:00000000000018D0 var_58          = qword ptr -58h
.text:00000000000018D0 var_50          = qword ptr -50h
.text:00000000000018D0 var_48          = qword ptr -48h
.text:00000000000018D0 var_40          = qword ptr -40h
.text:00000000000018D0 var_30          = qword ptr -30h
.text:00000000000018D0
.text:00000000000018D0 ; __unwind {
.text:00000000000018D0                 push    r13
.text:00000000000018D2                 push    r12
.text:00000000000018D4                 mov     edx, 5          ; category
.text:00000000000018D9                 push    rbp
.text:00000000000018DA                 push    rbx
.text:00000000000018DB                 mov     ebp, edi
.text:00000000000018DD                 sub     rsp, 88h
.text:00000000000018E4                 mov     rbx, cs:program_name
.text:00000000000018EB                 mov     rax, fs:28h
.text:00000000000018F4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000018F9                 xor     eax, eax
.text:00000000000018FB                 test    edi, edi
.text:00000000000018FD                 jz      short loc_192D
.text:00000000000018FF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001906                 xor     edi, edi        ; domainname
.text:0000000000001908                 call    _dcgettext
.text:000000000000190D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001914                 mov     rdx, rax
.text:0000000000001917                 mov     rcx, rbx
.text:000000000000191A                 mov     esi, 1
.text:000000000000191F                 xor     eax, eax
.text:0000000000001921                 call    ___fprintf_chk
.text:0000000000001926
.text:0000000000001926 loc_1926:                               ; CODE XREF: usage+2FE↓j
.text:0000000000001926                 mov     edi, ebp        ; status
.text:0000000000001928                 call    _exit
.text:000000000000192D ; ---------------------------------------------------------------------------
.text:000000000000192D
.text:000000000000192D loc_192D:                               ; CODE XREF: usage+2D↑j
.text:000000000000192D                 lea     rsi, aUsageSNameSuff ; "Usage: %s NAME [SUFFIX]\n  or:  %s OPTI"...
.text:0000000000001934                 xor     edi, edi        ; domainname
.text:0000000000001936                 call    _dcgettext
.text:000000000000193B                 mov     rcx, rbx
.text:000000000000193E                 mov     rdx, rbx
.text:0000000000001941                 mov     rsi, rax
.text:0000000000001944                 mov     edi, 1
.text:0000000000001949                 xor     eax, eax
.text:000000000000194B                 call    ___printf_chk
.text:0000000000001950                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001957                 lea     rsi, aPrintNameWithA ; "Print NAME with any leading directory c"...
.text:000000000000195E                 mov     edx, 5          ; category
.text:0000000000001963                 xor     edi, edi        ; domainname
.text:0000000000001965                 call    _dcgettext
.text:000000000000196A                 mov     rsi, rbx        ; stream
.text:000000000000196D                 mov     rdi, rax        ; s
.text:0000000000001970                 call    _fputs_unlocked
.text:0000000000001975                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000197C                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001983                 mov     edx, 5          ; category
.text:0000000000001988                 xor     edi, edi        ; domainname
.text:000000000000198A                 call    _dcgettext
.text:000000000000198F                 mov     rsi, rbx        ; stream
.text:0000000000001992                 mov     rdi, rax        ; s
.text:0000000000001995                 call    _fputs_unlocked
.text:000000000000199A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000019A1                 lea     rsi, aAMultipleSuppo ; "  -a, --multiple       support multiple"...
.text:00000000000019A8                 mov     edx, 5          ; category
.text:00000000000019AD                 xor     edi, edi        ; domainname
.text:00000000000019AF                 call    _dcgettext
.text:00000000000019B4                 mov     rsi, rbx        ; stream
.text:00000000000019B7                 mov     rdi, rax        ; s
.text:00000000000019BA                 call    _fputs_unlocked
.text:00000000000019BF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000019C6                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000019CD                 mov     edx, 5          ; category
.text:00000000000019D2                 xor     edi, edi        ; domainname
.text:00000000000019D4                 call    _dcgettext
.text:00000000000019D9                 mov     rsi, rbx        ; stream
.text:00000000000019DC                 mov     rdi, rax        ; s
.text:00000000000019DF                 call    _fputs_unlocked
.text:00000000000019E4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000019EB                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000019F2                 mov     edx, 5          ; category
.text:00000000000019F7                 xor     edi, edi        ; domainname
.text:00000000000019F9                 call    _dcgettext
.text:00000000000019FE                 mov     rsi, rbx        ; stream
.text:0000000000001A01                 mov     rdi, rax        ; s
.text:0000000000001A04                 call    _fputs_unlocked
.text:0000000000001A09                 mov     rbx, cs:program_name
.text:0000000000001A10                 lea     rsi, aExamplesSUsrBi ; "\nExamples:\n  %s /usr/bin/sort        "...
.text:0000000000001A17                 mov     edx, 5          ; category
.text:0000000000001A1C                 xor     edi, edi        ; domainname
.text:0000000000001A1E                 call    _dcgettext
.text:0000000000001A23                 mov     rcx, rbx
.text:0000000000001A26                 mov     rdx, rbx
.text:0000000000001A29                 mov     r9, rbx
.text:0000000000001A2C                 mov     r8, rbx
.text:0000000000001A2F                 mov     rsi, rax
.text:0000000000001A32                 mov     edi, 1
.text:0000000000001A37                 xor     eax, eax
.text:0000000000001A39                 lea     rbx, aBasename  ; "basename"
.text:0000000000001A40                 call    ___printf_chk
.text:0000000000001A45                 lea     rax, asc_484D   ; "["
.text:0000000000001A4C                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001A53                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001A5C                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001A65                 mov     rdx, rsp
.text:0000000000001A68                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001A6C                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001A73                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001A78                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001A7F                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001A84                 lea     rax, domainname ; "coreutils"
.text:0000000000001A8B                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001A90                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001A97                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001A9C                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001AA3                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001AA8                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001AAD                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001AB4                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001AB9                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001AC0                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001AC5                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001ACA                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001ACF                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001AD4                 nop     dword ptr [rax+00h]
.text:0000000000001AD8
.text:0000000000001AD8 loc_1AD8:                               ; CODE XREF: usage+225↓j
.text:0000000000001AD8                 add     rdx, 10h
.text:0000000000001ADC                 mov     rdi, [rdx]
.text:0000000000001ADF                 test    rdi, rdi
.text:0000000000001AE2                 jz      short loc_1AF7
.text:0000000000001AE4                 mov     ecx, 9
.text:0000000000001AE9                 mov     rsi, rbx
.text:0000000000001AEC                 repe cmpsb
.text:0000000000001AEE                 setnbe  al
.text:0000000000001AF1                 sbb     al, 0
.text:0000000000001AF3                 test    al, al
.text:0000000000001AF5                 jnz     short loc_1AD8
.text:0000000000001AF7
.text:0000000000001AF7 loc_1AF7:                               ; CODE XREF: usage+212↑j
.text:0000000000001AF7                 mov     r12, [rdx+8]
.text:0000000000001AFB                 xor     edi, edi        ; domainname
.text:0000000000001AFD                 mov     edx, 5          ; category
.text:0000000000001B02                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001B09                 test    r12, r12
.text:0000000000001B0C                 jz      loc_1BD3
.text:0000000000001B12                 call    _dcgettext
.text:0000000000001B17                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B1E                 lea     rdx, unk_48C3
.text:0000000000001B25                 mov     rsi, rax
.text:0000000000001B28                 mov     edi, 1
.text:0000000000001B2D                 xor     eax, eax
.text:0000000000001B2F                 call    ___printf_chk
.text:0000000000001B34                 xor     esi, esi        ; locale
.text:0000000000001B36                 mov     edi, 5          ; category
.text:0000000000001B3B                 call    _setlocale
.text:0000000000001B40                 test    rax, rax
.text:0000000000001B43                 jz      short loc_1B61
.text:0000000000001B45                 lea     rsi, s2         ; "en_"
.text:0000000000001B4C                 mov     edx, 3          ; n
.text:0000000000001B51                 mov     rdi, rax        ; s1
.text:0000000000001B54                 call    _strncmp
.text:0000000000001B59                 test    eax, eax
.text:0000000000001B5B                 jnz     loc_1C68
.text:0000000000001B61
.text:0000000000001B61 loc_1B61:                               ; CODE XREF: usage+273↑j
.text:0000000000001B61                                         ; usage+3BD↓j
.text:0000000000001B61                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001B68                 xor     edi, edi        ; domainname
.text:0000000000001B6A                 mov     edx, 5          ; category
.text:0000000000001B6F                 call    _dcgettext
.text:0000000000001B74                 lea     rcx, aBasename  ; "basename"
.text:0000000000001B7B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B82                 mov     rsi, rax
.text:0000000000001B85                 mov     edi, 1
.text:0000000000001B8A                 xor     eax, eax
.text:0000000000001B8C                 call    ___printf_chk
.text:0000000000001B91                 cmp     r12, rbx
.text:0000000000001B94                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001B9B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001BA2                 cmovz   rbx, rcx
.text:0000000000001BA6
.text:0000000000001BA6 loc_1BA6:                               ; CODE XREF: usage+38C↓j
.text:0000000000001BA6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001BAD                 xor     edi, edi        ; domainname
.text:0000000000001BAF                 mov     edx, 5          ; category
.text:0000000000001BB4                 call    _dcgettext
.text:0000000000001BB9                 mov     rcx, rbx
.text:0000000000001BBC                 mov     rsi, rax
.text:0000000000001BBF                 mov     rdx, r12
.text:0000000000001BC2                 mov     edi, 1
.text:0000000000001BC7                 xor     eax, eax
.text:0000000000001BC9                 call    ___printf_chk
.text:0000000000001BCE                 jmp     loc_1926
.text:0000000000001BD3 ; ---------------------------------------------------------------------------
.text:0000000000001BD3
.text:0000000000001BD3 loc_1BD3:                               ; CODE XREF: usage+23C↑j
.text:0000000000001BD3                 call    _dcgettext
.text:0000000000001BD8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001BDF                 lea     rdx, unk_48C3
.text:0000000000001BE6                 mov     rsi, rax
.text:0000000000001BE9                 mov     edi, 1
.text:0000000000001BEE                 xor     eax, eax
.text:0000000000001BF0                 call    ___printf_chk
.text:0000000000001BF5                 xor     esi, esi        ; locale
.text:0000000000001BF7                 mov     edi, 5          ; category
.text:0000000000001BFC                 call    _setlocale
.text:0000000000001C01                 test    rax, rax
.text:0000000000001C04                 jz      short loc_1C1E
.text:0000000000001C06                 lea     rsi, s2         ; "en_"
.text:0000000000001C0D                 mov     edx, 3          ; n
.text:0000000000001C12                 mov     rdi, rax        ; s1
.text:0000000000001C15                 call    _strncmp
.text:0000000000001C1A                 test    eax, eax
.text:0000000000001C1C                 jnz     short loc_1C61
.text:0000000000001C1E
.text:0000000000001C1E loc_1C1E:                               ; CODE XREF: usage+334↑j
.text:0000000000001C1E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001C25                 mov     edx, 5          ; category
.text:0000000000001C2A                 xor     edi, edi        ; domainname
.text:0000000000001C2C                 lea     r12, aBasename  ; "basename"
.text:0000000000001C33                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001C3A                 call    _dcgettext
.text:0000000000001C3F                 lea     rcx, aBasename  ; "basename"
.text:0000000000001C46                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C4D                 mov     rsi, rax
.text:0000000000001C50                 mov     edi, 1
.text:0000000000001C55                 xor     eax, eax
.text:0000000000001C57                 call    ___printf_chk
.text:0000000000001C5C                 jmp     loc_1BA6
.text:0000000000001C61 ; ---------------------------------------------------------------------------
.text:0000000000001C61
.text:0000000000001C61 loc_1C61:                               ; CODE XREF: usage+34C↑j
.text:0000000000001C61                 lea     r12, aBasename  ; "basename"
.text:0000000000001C68
.text:0000000000001C68 loc_1C68:                               ; CODE XREF: usage+28B↑j
.text:0000000000001C68                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C6F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001C76                 xor     edi, edi        ; domainname
.text:0000000000001C78                 mov     edx, 5          ; category
.text:0000000000001C7D                 call    _dcgettext
.text:0000000000001C82                 mov     rsi, r13        ; stream
.text:0000000000001C85                 mov     rdi, rax        ; s
.text:0000000000001C88                 call    _fputs_unlocked
.text:0000000000001C8D                 jmp     loc_1B61
.text:0000000000001C8D ; } // starts at 18D0
.text:0000000000001C8D usage           endp
.text:0000000000001C8D
.text:0000000000001C8D ; ---------------------------------------------------------------------------
.text:0000000000001C92                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CA0
.text:0000000000001CA0
.text:0000000000001CA0                 public close_stdout_set_file_name
.text:0000000000001CA0 close_stdout_set_file_name proc near
.text:0000000000001CA0 ; __unwind {
.text:0000000000001CA0                 mov     cs:file_name, rdi
.text:0000000000001CA7                 retn
.text:0000000000001CA7 ; } // starts at 1CA0
.text:0000000000001CA7 close_stdout_set_file_name endp
.text:0000000000001CA7
.text:0000000000001CA7 ; ---------------------------------------------------------------------------
.text:0000000000001CA8                 align 10h
.text:0000000000001CB0
.text:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CB0
.text:0000000000001CB0
.text:0000000000001CB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000001CB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001CB0 ; __unwind {
.text:0000000000001CB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000001CB7                 retn
.text:0000000000001CB7 ; } // starts at 1CB0
.text:0000000000001CB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000001CB7
.text:0000000000001CB7 ; ---------------------------------------------------------------------------
.text:0000000000001CB8                 align 20h
.text:0000000000001CC0
.text:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CC0
.text:0000000000001CC0 ; Attributes: info_from_lumina
.text:0000000000001CC0
.text:0000000000001CC0 ; void __cdecl close_stdout()
.text:0000000000001CC0                 public close_stdout
.text:0000000000001CC0 close_stdout    proc near               ; DATA XREF: main+4E↑o
.text:0000000000001CC0 ; __unwind {
.text:0000000000001CC0                 push    rbp
.text:0000000000001CC1                 push    rbx
.text:0000000000001CC2                 sub     rsp, 8
.text:0000000000001CC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001CCD                 call    close_stream
.text:0000000000001CD2                 test    eax, eax
.text:0000000000001CD4                 jz      short loc_1CEC
.text:0000000000001CD6                 call    ___errno_location
.text:0000000000001CDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001CE2                 mov     rbx, rax
.text:0000000000001CE5                 jz      short loc_1D03
.text:0000000000001CE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001CEA                 jnz     short loc_1D03
.text:0000000000001CEC
.text:0000000000001CEC loc_1CEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001CEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001CF3                 call    close_stream
.text:0000000000001CF8                 test    eax, eax
.text:0000000000001CFA                 jnz     short loc_1D42
.text:0000000000001CFC                 add     rsp, 8
.text:0000000000001D00                 pop     rbx
.text:0000000000001D01                 pop     rbp
.text:0000000000001D02                 retn
.text:0000000000001D03 ; ---------------------------------------------------------------------------
.text:0000000000001D03
.text:0000000000001D03 loc_1D03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001D03                                         ; close_stdout+2A↑j
.text:0000000000001D03                 lea     rsi, aWriteError ; "write error"
.text:0000000000001D0A                 xor     edi, edi        ; domainname
.text:0000000000001D0C                 mov     edx, 5          ; category
.text:0000000000001D11                 call    _dcgettext
.text:0000000000001D16                 mov     rdi, cs:file_name
.text:0000000000001D1D                 mov     rbp, rax
.text:0000000000001D20                 test    rdi, rdi
.text:0000000000001D23                 jz      short loc_1D4D
.text:0000000000001D25                 call    quotearg_colon
.text:0000000000001D2A                 mov     esi, [rbx]      ; errnum
.text:0000000000001D2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001D33                 mov     rcx, rax
.text:0000000000001D36                 mov     r8, rbp
.text:0000000000001D39                 xor     edi, edi        ; status
.text:0000000000001D3B                 xor     eax, eax
.text:0000000000001D3D                 call    _error
.text:0000000000001D42
.text:0000000000001D42 loc_1D42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001D42                                         ; close_stdout+A2↓j
.text:0000000000001D42                 mov     edi, cs:exit_failure ; status
.text:0000000000001D48                 call    __exit
.text:0000000000001D4D ; ---------------------------------------------------------------------------
.text:0000000000001D4D
.text:0000000000001D4D loc_1D4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001D4D                 mov     esi, [rbx]      ; errnum
.text:0000000000001D4F                 lea     rdx, format+4   ; format
.text:0000000000001D56                 mov     rcx, rax
.text:0000000000001D59                 xor     edi, edi        ; status
.text:0000000000001D5B                 xor     eax, eax
.text:0000000000001D5D                 call    _error
.text:0000000000001D62                 jmp     short loc_1D42
.text:0000000000001D62 ; } // starts at 1CC0
.text:0000000000001D62 close_stdout    endp
.text:0000000000001D62
.text:0000000000001D62 ; ---------------------------------------------------------------------------
.text:0000000000001D64                 align 10h
.text:0000000000001D70
.text:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D70
.text:0000000000001D70
.text:0000000000001D70                 public base_name
.text:0000000000001D70 base_name       proc near               ; CODE XREF: perform_basename+10↑p
.text:0000000000001D70 ; __unwind {
.text:0000000000001D70                 push    rbp
.text:0000000000001D71                 push    rbx
.text:0000000000001D72                 mov     rbp, rdi
.text:0000000000001D75                 sub     rsp, 8
.text:0000000000001D79                 call    last_component
.text:0000000000001D7E                 cmp     byte ptr [rax], 0
.text:0000000000001D81                 jz      short loc_1DB0
.text:0000000000001D83                 mov     rbx, rax
.text:0000000000001D86                 mov     rdi, rax
.text:0000000000001D89                 call    base_len
.text:0000000000001D8E                 xor     edx, edx
.text:0000000000001D90                 cmp     byte ptr [rbx+rax], 2Fh ; '/'
.text:0000000000001D94                 mov     rdi, rbx
.text:0000000000001D97                 setz    dl
.text:0000000000001D9A                 add     rsp, 8
.text:0000000000001D9E                 pop     rbx
.text:0000000000001D9F                 pop     rbp
.text:0000000000001DA0                 add     rax, rdx
.text:0000000000001DA3                 mov     rsi, rax
.text:0000000000001DA6                 jmp     xstrndup
.text:0000000000001DA6 ; ---------------------------------------------------------------------------
.text:0000000000001DAB                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 loc_1DB0:                               ; CODE XREF: base_name+11↑j
.text:0000000000001DB0                 mov     rdi, rbp
.text:0000000000001DB3                 call    base_len
.text:0000000000001DB8                 add     rsp, 8
.text:0000000000001DBC                 mov     rdi, rbp
.text:0000000000001DBF                 mov     rsi, rax
.text:0000000000001DC2                 pop     rbx
.text:0000000000001DC3                 pop     rbp
.text:0000000000001DC4                 jmp     xstrndup
.text:0000000000001DC4 ; } // starts at 1D70
.text:0000000000001DC4 base_name       endp
.text:0000000000001DC4
.text:0000000000001DC4 ; ---------------------------------------------------------------------------
.text:0000000000001DC9                 align 10h
.text:0000000000001DD0
.text:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DD0
.text:0000000000001DD0 ; Attributes: info_from_lumina
.text:0000000000001DD0
.text:0000000000001DD0 ; char *__fastcall last_component(const char *name)
.text:0000000000001DD0                 public last_component
.text:0000000000001DD0 last_component  proc near               ; CODE XREF: base_name+9↑p
.text:0000000000001DD0                                         ; strip_trailing_slashes+9↓p
.text:0000000000001DD0 ; __unwind {
.text:0000000000001DD0                 movzx   edx, byte ptr [rdi]
.text:0000000000001DD3                 mov     rax, rdi
.text:0000000000001DD6                 cmp     dl, 2Fh ; '/'
.text:0000000000001DD9                 jnz     short loc_1DEC
.text:0000000000001DDB                 nop     dword ptr [rax+rax+00h]
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: last_component+1A↓j
.text:0000000000001DE0                 add     rax, 1
.text:0000000000001DE4                 movzx   edx, byte ptr [rax]
.text:0000000000001DE7                 cmp     dl, 2Fh ; '/'
.text:0000000000001DEA                 jz      short loc_1DE0
.text:0000000000001DEC
.text:0000000000001DEC loc_1DEC:                               ; CODE XREF: last_component+9↑j
.text:0000000000001DEC                 test    dl, dl
.text:0000000000001DEE                 jz      short locret_1E2A
.text:0000000000001DF0                 mov     rcx, rax
.text:0000000000001DF3                 xor     esi, esi
.text:0000000000001DF5                 jmp     short loc_1E15
.text:0000000000001DF5 ; ---------------------------------------------------------------------------
.text:0000000000001DF7                 align 20h
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: last_component+48↓j
.text:0000000000001E00                 test    sil, sil
.text:0000000000001E03                 jz      short loc_1E0A
.text:0000000000001E05                 mov     rax, rcx
.text:0000000000001E08                 xor     esi, esi
.text:0000000000001E0A
.text:0000000000001E0A loc_1E0A:                               ; CODE XREF: last_component+33↑j
.text:0000000000001E0A                 add     rcx, 1
.text:0000000000001E0E                 movzx   edx, byte ptr [rcx]
.text:0000000000001E11                 test    dl, dl
.text:0000000000001E13                 jz      short locret_1E2A
.text:0000000000001E15
.text:0000000000001E15 loc_1E15:                               ; CODE XREF: last_component+25↑j
.text:0000000000001E15                                         ; last_component+58↓j
.text:0000000000001E15                 cmp     dl, 2Fh ; '/'
.text:0000000000001E18                 jnz     short loc_1E00
.text:0000000000001E1A                 add     rcx, 1
.text:0000000000001E1E                 movzx   edx, byte ptr [rcx]
.text:0000000000001E21                 mov     esi, 1
.text:0000000000001E26                 test    dl, dl
.text:0000000000001E28                 jnz     short loc_1E15
.text:0000000000001E2A
.text:0000000000001E2A locret_1E2A:                            ; CODE XREF: last_component+1E↑j
.text:0000000000001E2A                                         ; last_component+43↑j
.text:0000000000001E2A                 rep retn
.text:0000000000001E2A ; } // starts at 1DD0
.text:0000000000001E2A last_component  endp
.text:0000000000001E2A
.text:0000000000001E2A ; ---------------------------------------------------------------------------
.text:0000000000001E2C                 align 10h
.text:0000000000001E30
.text:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E30
.text:0000000000001E30 ; Attributes: info_from_lumina
.text:0000000000001E30
.text:0000000000001E30 ; size_t __fastcall base_len(const char *name)
.text:0000000000001E30                 public base_len
.text:0000000000001E30 base_len        proc near               ; CODE XREF: base_name+19↑p
.text:0000000000001E30                                         ; base_name+43↑p ...
.text:0000000000001E30 ; __unwind {
.text:0000000000001E30                 push    rbx
.text:0000000000001E31                 mov     rbx, rdi
.text:0000000000001E34                 call    _strlen
.text:0000000000001E39                 cmp     rax, 1
.text:0000000000001E3D                 jbe     short loc_1E4A
.text:0000000000001E3F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000001E44                 lea     rdx, [rax-1]
.text:0000000000001E48                 jz      short loc_1E58
.text:0000000000001E4A
.text:0000000000001E4A loc_1E4A:                               ; CODE XREF: base_len+D↑j
.text:0000000000001E4A                 pop     rbx
.text:0000000000001E4B                 retn
.text:0000000000001E4B ; ---------------------------------------------------------------------------
.text:0000000000001E4C                 align 10h
.text:0000000000001E50
.text:0000000000001E50 loc_1E50:                               ; CODE XREF: base_len+37↓j
.text:0000000000001E50                 mov     rdx, rax
.text:0000000000001E53                 nop     dword ptr [rax+rax+00h]
.text:0000000000001E58
.text:0000000000001E58 loc_1E58:                               ; CODE XREF: base_len+18↑j
.text:0000000000001E58                 cmp     rdx, 1
.text:0000000000001E5C                 jz      short loc_1E70
.text:0000000000001E5E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000001E63                 lea     rax, [rdx-1]
.text:0000000000001E67                 jz      short loc_1E50
.text:0000000000001E69                 mov     rax, rdx
.text:0000000000001E6C                 pop     rbx
.text:0000000000001E6D                 retn
.text:0000000000001E6D ; ---------------------------------------------------------------------------
.text:0000000000001E6E                 align 10h
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: base_len+2C↑j
.text:0000000000001E70                 mov     eax, 1
.text:0000000000001E75                 pop     rbx
.text:0000000000001E76                 retn
.text:0000000000001E76 ; } // starts at 1E30
.text:0000000000001E76 base_len        endp
.text:0000000000001E76
.text:0000000000001E76 ; ---------------------------------------------------------------------------
.text:0000000000001E77                 align 20h
.text:0000000000001E80
.text:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E80
.text:0000000000001E80
.text:0000000000001E80                 public strip_trailing_slashes
.text:0000000000001E80 strip_trailing_slashes proc near        ; CODE XREF: perform_basename+1B↑p
.text:0000000000001E80 ; __unwind {
.text:0000000000001E80                 push    rbp
.text:0000000000001E81                 push    rbx
.text:0000000000001E82                 mov     rbp, rdi
.text:0000000000001E85                 sub     rsp, 8
.text:0000000000001E89                 call    last_component
.text:0000000000001E8E                 cmp     byte ptr [rax], 0
.text:0000000000001E91                 mov     rbx, rax
.text:0000000000001E94                 cmovz   rbx, rbp
.text:0000000000001E98                 mov     rdi, rbx
.text:0000000000001E9B                 call    base_len
.text:0000000000001EA0                 add     rbx, rax
.text:0000000000001EA3                 cmp     byte ptr [rbx], 0
.text:0000000000001EA6                 mov     byte ptr [rbx], 0
.text:0000000000001EA9                 setnz   al
.text:0000000000001EAC                 add     rsp, 8
.text:0000000000001EB0                 pop     rbx
.text:0000000000001EB1                 pop     rbp
.text:0000000000001EB2                 retn
.text:0000000000001EB2 ; } // starts at 1E80
.text:0000000000001EB2 strip_trailing_slashes endp
.text:0000000000001EB2
.text:0000000000001EB2 ; ---------------------------------------------------------------------------
.text:0000000000001EB3                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EC0
.text:0000000000001EC0
.text:0000000000001EC0                 public set_program_name
.text:0000000000001EC0 set_program_name proc near              ; CODE XREF: main+19↑p
.text:0000000000001EC0 ; __unwind {
.text:0000000000001EC0                 test    rdi, rdi
.text:0000000000001EC3                 push    rbx
.text:0000000000001EC4                 jz      short loc_1F3D
.text:0000000000001EC6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001ECB                 mov     rbx, rdi
.text:0000000000001ECE                 call    _strrchr
.text:0000000000001ED3                 test    rax, rax
.text:0000000000001ED6                 jz      short loc_1F2D
.text:0000000000001ED8                 lea     r8, [rax+1]
.text:0000000000001EDC                 mov     rdx, r8
.text:0000000000001EDF                 sub     rdx, rbx
.text:0000000000001EE2                 cmp     rdx, 6
.text:0000000000001EE6                 jle     short loc_1F2D
.text:0000000000001EE8                 lea     rsi, [rax-6]
.text:0000000000001EEC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001EF3                 mov     ecx, 7
.text:0000000000001EF8                 repe cmpsb
.text:0000000000001EFA                 setnbe  dl
.text:0000000000001EFD                 sbb     dl, 0
.text:0000000000001F00                 test    dl, dl
.text:0000000000001F02                 jnz     short loc_1F2D
.text:0000000000001F04                 lea     rdi, aLt        ; "lt-"
.text:0000000000001F0B                 mov     ecx, 3
.text:0000000000001F10                 mov     rsi, r8
.text:0000000000001F13                 mov     rbx, r8
.text:0000000000001F16                 repe cmpsb
.text:0000000000001F18                 setnbe  dl
.text:0000000000001F1B                 sbb     dl, 0
.text:0000000000001F1E                 test    dl, dl
.text:0000000000001F20                 jnz     short loc_1F2D
.text:0000000000001F22                 lea     rbx, [rax+4]
.text:0000000000001F26                 mov     cs:__bss_start, rbx
.text:0000000000001F2D
.text:0000000000001F2D loc_1F2D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001F2D                                         ; set_program_name+26↑j ...
.text:0000000000001F2D                 mov     cs:program_name, rbx
.text:0000000000001F34                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001F3B                 pop     rbx
.text:0000000000001F3C                 retn
.text:0000000000001F3D ; ---------------------------------------------------------------------------
.text:0000000000001F3D
.text:0000000000001F3D loc_1F3D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001F3D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001F44                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001F4B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001F50                 mov     esi, 1          ; size
.text:0000000000001F55                 call    _fwrite
.text:0000000000001F5A                 call    _abort
.text:0000000000001F5A ; } // starts at 1EC0
.text:0000000000001F5A set_program_name endp
.text:0000000000001F5A
.text:0000000000001F5A ; ---------------------------------------------------------------------------
.text:0000000000001F5F                 align 20h
.text:0000000000001F60
.text:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F60
.text:0000000000001F60 ; Attributes: info_from_lumina
.text:0000000000001F60
.text:0000000000001F60 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001F60 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001F60                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001F60 ; __unwind {
.text:0000000000001F60                 push    rbp
.text:0000000000001F61                 push    rbx
.text:0000000000001F62                 mov     rbp, rdi
.text:0000000000001F65                 mov     ebx, esi
.text:0000000000001F67                 sub     rsp, 8
.text:0000000000001F6B                 call    locale_charset
.text:0000000000001F70                 movzx   edx, byte ptr [rax]
.text:0000000000001F73                 and     edx, 0FFFFFFDFh
.text:0000000000001F76                 cmp     dl, 55h ; 'U'
.text:0000000000001F79                 jz      short loc_1FF0
.text:0000000000001F7B                 cmp     dl, 47h ; 'G'
.text:0000000000001F7E                 jz      short loc_1FA0
.text:0000000000001F80
.text:0000000000001F80 loc_1F80:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001F80                                         ; gettext_quote+50↓j ...
.text:0000000000001F80                 lea     rax, unk_4D8B
.text:0000000000001F87                 lea     rdx, asc_4D8D   ; "'"
.text:0000000000001F8E                 cmp     ebx, 9
.text:0000000000001F91                 cmovnz  rax, rdx
.text:0000000000001F95                 add     rsp, 8
.text:0000000000001F99                 pop     rbx
.text:0000000000001F9A                 pop     rbp
.text:0000000000001F9B                 retn
.text:0000000000001F9B ; ---------------------------------------------------------------------------
.text:0000000000001F9C                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001FA0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001FA4                 and     edx, 0FFFFFFDFh
.text:0000000000001FA7                 cmp     dl, 42h ; 'B'
.text:0000000000001FAA                 jnz     short loc_1F80
.text:0000000000001FAC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001FB0                 jnz     short loc_1F80
.text:0000000000001FB2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001FB6                 jnz     short loc_1F80
.text:0000000000001FB8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001FBC                 jnz     short loc_1F80
.text:0000000000001FBE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001FC2                 jnz     short loc_1F80
.text:0000000000001FC4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001FC8                 jnz     short loc_1F80
.text:0000000000001FCA                 cmp     byte ptr [rax+7], 0
.text:0000000000001FCE                 jnz     short loc_1F80
.text:0000000000001FD0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001FD4                 lea     rax, unk_4D84
.text:0000000000001FDB                 lea     rdx, unk_4D88
.text:0000000000001FE2                 cmovnz  rax, rdx
.text:0000000000001FE6                 add     rsp, 8
.text:0000000000001FEA                 pop     rbx
.text:0000000000001FEB                 pop     rbp
.text:0000000000001FEC                 retn
.text:0000000000001FEC ; ---------------------------------------------------------------------------
.text:0000000000001FED                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001FF0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001FF4                 and     edx, 0FFFFFFDFh
.text:0000000000001FF7                 cmp     dl, 54h ; 'T'
.text:0000000000001FFA                 jnz     short loc_1F80
.text:0000000000001FFC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002000                 and     edx, 0FFFFFFDFh
.text:0000000000002003                 cmp     dl, 46h ; 'F'
.text:0000000000002006                 jnz     loc_1F80
.text:000000000000200C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002010                 jnz     loc_1F80
.text:0000000000002016                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000201A                 jnz     loc_1F80
.text:0000000000002020                 cmp     byte ptr [rax+5], 0
.text:0000000000002024                 jnz     loc_1F80
.text:000000000000202A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000202E                 lea     rax, unk_4D7C
.text:0000000000002035                 lea     rdx, unk_4D80
.text:000000000000203C                 cmovnz  rax, rdx
.text:0000000000002040                 add     rsp, 8
.text:0000000000002044                 pop     rbx
.text:0000000000002045                 pop     rbp
.text:0000000000002046                 retn
.text:0000000000002046 ; } // starts at 1F60
.text:0000000000002046 gettext_quote   endp
.text:0000000000002046
.text:0000000000002046 ; ---------------------------------------------------------------------------
.text:0000000000002047                 align 10h
.text:0000000000002050
.text:0000000000002050 ; =============== S U B R O U T I N E =======================================
.text:0000000000002050
.text:0000000000002050 ; Attributes: info_from_lumina
.text:0000000000002050
.text:0000000000002050 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002050 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002050                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002050
.text:0000000000002050 var_E0          = dword ptr -0E0h
.text:0000000000002050 var_DB          = byte ptr -0DBh
.text:0000000000002050 var_DA          = byte ptr -0DAh
.text:0000000000002050 var_D9          = byte ptr -0D9h
.text:0000000000002050 s               = qword ptr -0D8h
.text:0000000000002050 n               = qword ptr -0D0h
.text:0000000000002050 var_C8          = qword ptr -0C8h
.text:0000000000002050 ps              = qword ptr -0C0h
.text:0000000000002050 var_B8          = qword ptr -0B8h
.text:0000000000002050 var_B0          = qword ptr -0B0h
.text:0000000000002050 var_A8          = qword ptr -0A8h
.text:0000000000002050 s2              = qword ptr -0A0h
.text:0000000000002050 var_98          = qword ptr -98h
.text:0000000000002050 var_90          = qword ptr -90h
.text:0000000000002050 var_88          = qword ptr -88h
.text:0000000000002050 var_80          = qword ptr -80h
.text:0000000000002050 var_78          = qword ptr -78h
.text:0000000000002050 var_70          = dword ptr -70h
.text:0000000000002050 var_6C          = byte ptr -6Ch
.text:0000000000002050 var_6B          = byte ptr -6Bh
.text:0000000000002050 var_6A          = byte ptr -6Ah
.text:0000000000002050 var_69          = byte ptr -69h
.text:0000000000002050 var_68          = qword ptr -68h
.text:0000000000002050 var_60          = qword ptr -60h
.text:0000000000002050 wc              = dword ptr -4Ch
.text:0000000000002050 var_48          = qword ptr -48h
.text:0000000000002050 var_40          = qword ptr -40h
.text:0000000000002050 arg_0           = qword ptr  8
.text:0000000000002050 arg_8           = qword ptr  10h
.text:0000000000002050 arg_10          = qword ptr  18h
.text:0000000000002050
.text:0000000000002050 ; __unwind {
.text:0000000000002050                 push    r15
.text:0000000000002052                 push    r14
.text:0000000000002054                 mov     r15d, r8d
.text:0000000000002057                 push    r13
.text:0000000000002059                 push    r12
.text:000000000000205B                 mov     r14, rdi
.text:000000000000205E                 push    rbp
.text:000000000000205F                 push    rbx
.text:0000000000002060                 mov     ebx, r9d
.text:0000000000002063                 mov     r13, rsi
.text:0000000000002066                 mov     rbp, rcx
.text:0000000000002069                 and     ebx, 2
.text:000000000000206C                 sub     rsp, 0B8h
.text:0000000000002073                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000207B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002080                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002085                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000208A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000208F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002097                 mov     [rsp+0E8h+var_80], rax
.text:000000000000209C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000020A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000020A9                 mov     rax, fs:28h
.text:00000000000020B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000020BA                 xor     eax, eax
.text:00000000000020BC                 call    ___ctype_get_mb_cur_max
.text:00000000000020C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000020C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000020CA                 ja      def_20E1        ; jumptable 00000000000121F1 default case
.text:00000000000020D0                 lea     rcx, jpt_20E1
.text:00000000000020D7                 mov     edx, r15d
.text:00000000000020DA                 movsxd  rax, ds:(jpt_20E1 - 4DE0h)[rcx+rdx*4]
.text:00000000000020DE                 add     rax, rcx
.text:00000000000020E1                 jmp     rax             ; switch jump
.text:00000000000020E3 ; ---------------------------------------------------------------------------
.text:00000000000020E3
.text:00000000000020E3 loc_20E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000020E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000020E3                                         ; DATA XREF: ...
.text:00000000000020E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000020E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000020ED                 xor     r12d, r12d
.text:00000000000020F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000020F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000020FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002103
.text:0000000000002103 loc_2103:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002103                 lea     rax, asc_4D8D   ; "'"
.text:000000000000210A                 mov     [rsp+0E8h+n], 1
.text:0000000000002113                 xor     r15d, r15d
.text:0000000000002116                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000211E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002123
.text:0000000000002123 loc_2123:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002123                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002123                 xor     r11d, r11d
.text:0000000000002126                 mov     rax, rbp
.text:0000000000002129                 mov     r8d, r12d
.text:000000000000212C                 mov     rbp, r11
.text:000000000000212F                 mov     r11, rax
.text:0000000000002132                 nop     word ptr [rax+rax+00h]
.text:0000000000002138
.text:0000000000002138 loc_2138:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002138                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002138                 cmp     r11, rbp
.text:000000000000213B                 setnz   r12b
.text:000000000000213F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002143                 jnz     short loc_2152
.text:0000000000002145                 mov     rax, [rsp+0E8h+s]
.text:000000000000214A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000214E                 setnz   r12b
.text:0000000000002152
.text:0000000000002152 loc_2152:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002152                 test    r12b, r12b
.text:0000000000002155                 jz      loc_27B0
.text:000000000000215B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002160                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002165                 lea     r9, [rdi+rbp]
.text:0000000000002169                 setnz   al
.text:000000000000216C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002170                 mov     r10d, eax
.text:0000000000002173                 jz      loc_2220
.text:0000000000002179                 mov     rax, [rsp+0E8h+n]
.text:000000000000217E                 test    rax, rax
.text:0000000000002181                 jz      loc_25B0
.text:0000000000002187                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000218B                 lea     rbx, [rbp+rax+0]
.text:0000000000002190                 jnz     short loc_21C0
.text:0000000000002192                 cmp     rax, 1
.text:0000000000002196                 jbe     short loc_21C0
.text:0000000000002198                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000219D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000021A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000021A7                 call    _strlen
.text:00000000000021AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000021B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000021B8                 mov     r11, rax
.text:00000000000021BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000021C0
.text:00000000000021C0 loc_21C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000021C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000021C0                 cmp     rbx, r11
.text:00000000000021C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000021C8                 ja      loc_2780
.text:00000000000021CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000021D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000021D8                 mov     rdi, r9         ; s1
.text:00000000000021DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000021E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000021E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000021EA                 call    _memcmp
.text:00000000000021EF                 test    eax, eax
.text:00000000000021F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000021F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000021FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002201                 jnz     loc_2780
.text:0000000000002207                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000220C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002212                 jnz     loc_3195
.text:0000000000002218                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002220                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002220                 movzx   ebx, byte ptr [r9]
.text:0000000000002224                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002227                 ja      def_223E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000222D                 lea     rcx, jpt_223E
.text:0000000000002234                 movzx   edx, bl
.text:0000000000002237                 movsxd  rax, ds:(jpt_223E - 4E0Ch)[rcx+rdx*4]
.text:000000000000223B                 add     rax, rcx
.text:000000000000223E                 jmp     rax             ; switch jump
.text:0000000000002240 ; ---------------------------------------------------------------------------
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002240                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002240                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002243
.text:0000000000002243 loc_2243:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002243                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002243                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002247                 setnz   al
.text:000000000000224A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000224E                 jnz     short loc_225C
.text:0000000000002250                 mov     rax, [rsp+0E8h+s]
.text:0000000000002255                 cmp     byte ptr [rax+1], 0
.text:0000000000002259                 setnz   al
.text:000000000000225C
.text:000000000000225C loc_225C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000225C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002261                 setz    dl
.text:0000000000002264                 test    al, al
.text:0000000000002266                 jz      loc_24B8
.text:000000000000226C
.text:000000000000226C loc_226C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000226C                 xor     r12d, r12d
.text:000000000000226F                 xor     eax, eax
.text:0000000000002271                 nop     dword ptr [rax+00000000h]
.text:0000000000002278
.text:0000000000002278 loc_2278:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002278                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002278                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000227D                 jnz     loc_2392
.text:0000000000002283                 test    dl, dl
.text:0000000000002285                 jnz     loc_2392
.text:000000000000228B
.text:000000000000228B loc_228B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000228B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002290                 test    rsi, rsi
.text:0000000000002293                 jz      short loc_22A9
.text:0000000000002295                 mov     edx, ebx
.text:0000000000002297                 shr     dl, 5
.text:000000000000229A                 movzx   edx, dl
.text:000000000000229D                 mov     edx, [rsi+rdx*4]
.text:00000000000022A0                 bt      edx, ebx
.text:00000000000022A3                 jb      loc_23F3
.text:00000000000022A9
.text:00000000000022A9 loc_22A9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000022A9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000022A9                 test    r10b, r10b
.text:00000000000022AC                 jnz     loc_23F3
.text:00000000000022B2                 xor     eax, 1
.text:00000000000022B5                 add     rbp, 1
.text:00000000000022B9                 and     eax, r8d
.text:00000000000022BC
.text:00000000000022BC loc_22BC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000022BC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000022BC                 test    al, al
.text:00000000000022BE                 jz      short loc_22E0
.text:00000000000022C0                 cmp     r13, r15
.text:00000000000022C3                 jbe     short loc_22CA
.text:00000000000022C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000022CA
.text:00000000000022CA loc_22CA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000022CA                 lea     rax, [r15+1]
.text:00000000000022CE                 cmp     r13, rax
.text:00000000000022D1                 jbe     short loc_22D9
.text:00000000000022D3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000022D9
.text:00000000000022D9 loc_22D9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000022D9                 add     r15, 2
.text:00000000000022DD                 xor     r8d, r8d
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000022E0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000022E0                 cmp     r15, r13
.text:00000000000022E3                 jnb     short loc_22E9
.text:00000000000022E5                 mov     [r14+r15], bl
.text:00000000000022E9
.text:00000000000022E9 loc_22E9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000022E9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000022EE                 add     r15, 1
.text:00000000000022F2                 mov     eax, 0
.text:00000000000022F7                 test    r12b, r12b
.text:00000000000022FA                 cmovz   edi, eax
.text:00000000000022FD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002302                 jmp     loc_2138
.text:0000000000002302 ; ---------------------------------------------------------------------------
.text:0000000000002307                 align 10h
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002310                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002310                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002313
.text:0000000000002313 loc_2313:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002313                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002313                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002317                 cmp     eax, 2
.text:000000000000231A                 jz      loc_28D8
.text:0000000000002320                 cmp     eax, 5
.text:0000000000002323                 jz      loc_2898
.text:0000000000002329                 cmp     eax, 2
.text:000000000000232C                 mov     ebx, 3Fh ; '?'
.text:0000000000002331                 setz    dl
.text:0000000000002334                 xor     r12d, r12d
.text:0000000000002337                 xor     eax, eax
.text:0000000000002339                 jmp     loc_2278
.text:0000000000002339 ; ---------------------------------------------------------------------------
.text:000000000000233E                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002340                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002343
.text:0000000000002343 loc_2343:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002343                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002343                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002348                 jz      loc_2850
.text:000000000000234E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002353                 xor     edx, edx
.text:0000000000002355                 xor     eax, eax
.text:0000000000002357                 mov     ebx, 27h ; '''
.text:000000000000235C                 jmp     loc_2278
.text:000000000000235C ; ---------------------------------------------------------------------------
.text:0000000000002361                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002368                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002368                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000236D                 mov     ebx, 74h ; 't'
.text:0000000000002372
.text:0000000000002372 loc_2372:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002372                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002372                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002377                 setz    al
.text:000000000000237A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000237E                 jnz     loc_24CE
.text:0000000000002384
.text:0000000000002384 loc_2384:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002384                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002384                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002389                 jnz     short loc_23F0
.text:000000000000238B
.text:000000000000238B loc_238B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000238B                 mov     ebx, edx
.text:000000000000238D                 xor     r12d, r12d
.text:0000000000002390                 xor     eax, eax
.text:0000000000002392
.text:0000000000002392 loc_2392:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002392                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002392                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002397                 jnz     loc_228B
.text:000000000000239D                 jmp     loc_22A9
.text:000000000000239D ; ---------------------------------------------------------------------------
.text:00000000000023A2                 align 8
.text:00000000000023A8
.text:00000000000023A8 loc_23A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023A8                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:00000000000023A8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000023AD                 mov     ebx, 62h ; 'b'
.text:00000000000023B2                 jmp     short loc_2384
.text:00000000000023B2 ; ---------------------------------------------------------------------------
.text:00000000000023B4                 align 8
.text:00000000000023B8
.text:00000000000023B8 loc_23B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023B8                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:00000000000023B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000023BD                 jz      loc_2790
.text:00000000000023C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000023C8                 jz      loc_25E0
.text:00000000000023CE
.text:00000000000023CE loc_23CE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000023CE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000023D3                 jz      loc_25E0
.text:00000000000023D9                 cmp     [rsp+0E8h+n], 0
.text:00000000000023DF                 jnz     loc_279B
.text:00000000000023E5                 mov     ebx, 5Ch ; '\'
.text:00000000000023EA                 nop     word ptr [rax+rax+00h]
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000023F0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000023F0                 xor     r12d, r12d
.text:00000000000023F3
.text:00000000000023F3 loc_23F3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000023F3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000023F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023F8                 setz    dl
.text:00000000000023FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002400                 mov     eax, edx
.text:0000000000002402                 jnz     loc_2C58
.text:0000000000002408                 mov     eax, r8d
.text:000000000000240B                 xor     eax, 1
.text:000000000000240E                 and     al, dl
.text:0000000000002410                 jz      short loc_2441
.text:0000000000002412                 cmp     r13, r15
.text:0000000000002415                 jbe     short loc_241C
.text:0000000000002417                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000241C
.text:000000000000241C loc_241C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000241C                 lea     rdx, [r15+1]
.text:0000000000002420                 cmp     r13, rdx
.text:0000000000002423                 jbe     short loc_242B
.text:0000000000002425                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000242B
.text:000000000000242B loc_242B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000242B                 lea     rdx, [r15+2]
.text:000000000000242F                 cmp     r13, rdx
.text:0000000000002432                 jbe     short loc_243A
.text:0000000000002434                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000243A
.text:000000000000243A loc_243A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000243A                 add     r15, 3
.text:000000000000243E                 mov     r8d, eax
.text:0000000000002441
.text:0000000000002441 loc_2441:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002441                 cmp     r13, r15
.text:0000000000002444                 jbe     short loc_244B
.text:0000000000002446                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000244B
.text:000000000000244B loc_244B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000244B                 add     r15, 1
.text:000000000000244F                 add     rbp, 1
.text:0000000000002453                 jmp     loc_22E0
.text:0000000000002453 ; ---------------------------------------------------------------------------
.text:0000000000002458                 align 20h
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002460                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002460                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002465                 jnz     loc_2633
.text:000000000000246B                 xor     edx, edx
.text:000000000000246D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002472                 jz      loc_238B
.text:0000000000002478                 add     rbp, 1
.text:000000000000247C                 jmp     loc_2138
.text:000000000000247C ; ---------------------------------------------------------------------------
.text:0000000000002481                 align 8
.text:0000000000002488
.text:0000000000002488 loc_2488:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002488                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002488                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000248D                 setz    dl
.text:0000000000002490                 xor     eax, eax
.text:0000000000002492                 jmp     loc_2278
.text:0000000000002492 ; ---------------------------------------------------------------------------
.text:0000000000002497                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024A0                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:00000000000024A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000024A5                 mov     ebx, 61h ; 'a'
.text:00000000000024AA                 jmp     loc_2384
.text:00000000000024AA ; ---------------------------------------------------------------------------
.text:00000000000024AF                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024B0                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:00000000000024B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000024B5                 setz    dl
.text:00000000000024B8
.text:00000000000024B8 loc_24B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000024B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000024B8                 test    rbp, rbp
.text:00000000000024BB                 jnz     loc_226C
.text:00000000000024C1
.text:00000000000024C1 loc_24C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000024C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000024C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000024C6                 and     al, dl
.text:00000000000024C8                 jz      loc_2278
.text:00000000000024CE
.text:00000000000024CE loc_24CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000024CE                 mov     rbp, r11
.text:00000000000024D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000024D9                 jmp     loc_2BD9
.text:00000000000024D9 ; ---------------------------------------------------------------------------
.text:00000000000024DE                 align 20h
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024E0                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:00000000000024E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000024E5                 setz    dl
.text:00000000000024E8                 xor     r12d, r12d
.text:00000000000024EB                 jmp     short loc_24C1
.text:00000000000024EB ; ---------------------------------------------------------------------------
.text:00000000000024ED                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024F0                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:00000000000024F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000024F5                 mov     ebx, 20h ; ' '
.text:00000000000024FA                 setz    dl
.text:00000000000024FD                 jmp     short loc_24C1
.text:00000000000024FD ; ---------------------------------------------------------------------------
.text:00000000000024FF                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002500                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002500                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002505                 mov     ebx, 72h ; 'r'
.text:000000000000250A                 jmp     loc_2372
.text:000000000000250A ; ---------------------------------------------------------------------------
.text:000000000000250F                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002510                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002515                 mov     ebx, 66h ; 'f'
.text:000000000000251A                 jmp     loc_2384
.text:000000000000251A ; ---------------------------------------------------------------------------
.text:000000000000251F                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002520                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002520                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002525                 mov     ebx, 76h ; 'v'
.text:000000000000252A                 jmp     loc_2384
.text:000000000000252A ; ---------------------------------------------------------------------------
.text:000000000000252F                 align 10h
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002530                                         ; DATA XREF: .rodata:jpt_223E↓o
.text:0000000000002530                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002535                 mov     ebx, 6Eh ; 'n'
.text:000000000000253A                 jmp     loc_2372
.text:000000000000253A ; ---------------------------------------------------------------------------
.text:000000000000253F                 align 20h
.text:0000000000002540
.text:0000000000002540 def_25CA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002540                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002540                                         ; DATA XREF: ...
.text:0000000000002540                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002543                 nop     dword ptr [rax+rax+00h]
.text:0000000000002548
.text:0000000000002548 def_223E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002548                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002548                                         ; DATA XREF: ...
.text:0000000000002548                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000254E                 jnz     loc_28F8
.text:0000000000002554                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002559                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000255E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002563                 call    ___ctype_b_loc
.text:0000000000002568                 mov     rcx, [rax]
.text:000000000000256B                 movzx   edx, bl
.text:000000000000256E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002574                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000257A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000257F                 mov     edi, 1
.text:0000000000002584                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002588                 and     ax, 4000h
.text:000000000000258C                 setnz   r12b
.text:0000000000002590                 setz    al
.text:0000000000002593                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002597
.text:0000000000002597 loc_2597:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002597                 test    al, al
.text:0000000000002599                 jnz     loc_2F31
.text:000000000000259F                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000025A4                 setz    dl
.text:00000000000025A7                 jmp     loc_2278
.text:00000000000025A7 ; ---------------------------------------------------------------------------
.text:00000000000025AC                 align 10h
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000025B0                 movzx   ebx, byte ptr [r9]
.text:00000000000025B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000025B7                 ja      short def_25CA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000025B9                 lea     rcx, jpt_25CA
.text:00000000000025C0                 movzx   edx, bl
.text:00000000000025C3                 movsxd  rax, ds:(jpt_25CA - 5008h)[rcx+rdx*4]
.text:00000000000025C7                 add     rax, rcx
.text:00000000000025CA                 jmp     rax             ; switch jump
.text:00000000000025CA ; ---------------------------------------------------------------------------
.text:00000000000025CC                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:00000000000025D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000025D3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000025D8                 jnz     loc_23CE
.text:00000000000025DE                 xchg    ax, ax
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000025E0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000025E0                 mov     edx, 5Ch ; '\'
.text:00000000000025E5                 mov     ebx, 5Ch ; '\'
.text:00000000000025EA                 jmp     loc_2384
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EF                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025F0                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:00000000000025F0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000025F5                 xor     r10d, r10d
.text:00000000000025F8                 mov     ebx, 66h ; 'f'
.text:00000000000025FD                 jmp     loc_2384
.text:00000000000025FD ; ---------------------------------------------------------------------------
.text:0000000000002602                 align 8
.text:0000000000002608
.text:0000000000002608 loc_2608:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002608                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002608                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000260D                 xor     r10d, r10d
.text:0000000000002610                 mov     ebx, 6Eh ; 'n'
.text:0000000000002615                 jmp     loc_2372
.text:0000000000002615 ; ---------------------------------------------------------------------------
.text:000000000000261A                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002620                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002620                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002625                 jmp     loc_23F0
.text:0000000000002625 ; ---------------------------------------------------------------------------
.text:000000000000262A                 align 10h
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002630                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002630                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002633
.text:0000000000002633 loc_2633:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002633                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002638                 setz    dl
.text:000000000000263B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002640                 jnz     loc_31DA
.text:0000000000002646                 mov     eax, r8d
.text:0000000000002649                 mov     rcx, r15
.text:000000000000264C                 xor     eax, 1
.text:000000000000264F                 and     al, dl
.text:0000000000002651                 jz      short loc_2680
.text:0000000000002653                 cmp     r13, r15
.text:0000000000002656                 jbe     short loc_265D
.text:0000000000002658                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000265D
.text:000000000000265D loc_265D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000265D                 lea     rcx, [r15+1]
.text:0000000000002661                 cmp     r13, rcx
.text:0000000000002664                 jbe     short loc_266C
.text:0000000000002666                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000266C
.text:000000000000266C loc_266C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000266C                 lea     rcx, [r15+2]
.text:0000000000002670                 cmp     r13, rcx
.text:0000000000002673                 ja      loc_2CA9
.text:0000000000002679
.text:0000000000002679 loc_2679:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002679                 lea     rcx, [r15+3]
.text:000000000000267D                 mov     r8d, eax
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002680                 cmp     r13, rcx
.text:0000000000002683                 jbe     short loc_268A
.text:0000000000002685                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000268A
.text:000000000000268A loc_268A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000268A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000268F                 lea     r15, [rcx+1]
.text:0000000000002693                 jz      loc_2C99
.text:0000000000002699                 lea     rax, [rbp+1]
.text:000000000000269D                 cmp     rax, r11
.text:00000000000026A0                 jnb     short loc_26BB
.text:00000000000026A2                 mov     rax, [rsp+0E8h+s]
.text:00000000000026A7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000026AC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000026B0                 sub     eax, 30h ; '0'
.text:00000000000026B3                 cmp     al, 9
.text:00000000000026B5                 jbe     loc_2EE9
.text:00000000000026BB
.text:00000000000026BB loc_26BB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000026BB                 mov     eax, r12d
.text:00000000000026BE                 mov     ebx, 30h ; '0'
.text:00000000000026C3                 xor     r12d, r12d
.text:00000000000026C6                 jmp     loc_2278
.text:00000000000026C6 ; ---------------------------------------------------------------------------
.text:00000000000026CB                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026D0                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:00000000000026D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000026D5                 mov     r12d, r10d
.text:00000000000026D8                 setz    dl
.text:00000000000026DB                 xor     r10d, r10d
.text:00000000000026DE                 xor     eax, eax
.text:00000000000026E0                 jmp     loc_2278
.text:00000000000026E0 ; ---------------------------------------------------------------------------
.text:00000000000026E5                 align 8
.text:00000000000026E8
.text:00000000000026E8 loc_26E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026E8                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:00000000000026E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000026ED                 setz    dl
.text:00000000000026F0                 xor     r10d, r10d
.text:00000000000026F3                 jmp     loc_24B8
.text:00000000000026F3 ; ---------------------------------------------------------------------------
.text:00000000000026F8                 align 20h
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002700                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002700                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002705                 setz    dl
.text:0000000000002708                 xor     r10d, r10d
.text:000000000000270B                 xor     r12d, r12d
.text:000000000000270E                 jmp     loc_24C1
.text:000000000000270E ; ---------------------------------------------------------------------------
.text:0000000000002713                 align 8
.text:0000000000002718
.text:0000000000002718 loc_2718:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002718                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002718                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000271D                 mov     r12d, r10d
.text:0000000000002720                 mov     ebx, 20h ; ' '
.text:0000000000002725                 setz    dl
.text:0000000000002728                 xor     r10d, r10d
.text:000000000000272B                 jmp     loc_24C1
.text:0000000000002730 ; ---------------------------------------------------------------------------
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002730                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002730                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002735                 xor     r10d, r10d
.text:0000000000002738                 mov     ebx, 72h ; 'r'
.text:000000000000273D                 jmp     loc_2372
.text:000000000000273D ; ---------------------------------------------------------------------------
.text:0000000000002742                 align 8
.text:0000000000002748
.text:0000000000002748 loc_2748:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002748                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002748                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000274D                 jmp     loc_23F0
.text:000000000000274D ; ---------------------------------------------------------------------------
.text:0000000000002752                 align 8
.text:0000000000002758
.text:0000000000002758 loc_2758:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002758                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002758                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000275D                 xor     r10d, r10d
.text:0000000000002760                 mov     ebx, 74h ; 't'
.text:0000000000002765                 jmp     loc_2372
.text:0000000000002765 ; ---------------------------------------------------------------------------
.text:000000000000276A                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002770                                         ; DATA XREF: .rodata:jpt_25CA↓o
.text:0000000000002770                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002775                 jmp     loc_23F0
.text:0000000000002775 ; ---------------------------------------------------------------------------
.text:000000000000277A                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002780                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002780                 xor     r10d, r10d
.text:0000000000002783                 jmp     loc_2220
.text:0000000000002783 ; ---------------------------------------------------------------------------
.text:0000000000002788                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002790                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002795                 jnz     loc_3100
.text:000000000000279B
.text:000000000000279B loc_279B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000279B                 add     rbp, 1
.text:000000000000279F                 mov     eax, r8d
.text:00000000000027A2                 xor     r12d, r12d
.text:00000000000027A5                 mov     ebx, 5Ch ; '\'
.text:00000000000027AA                 jmp     loc_22BC
.text:00000000000027AA ; ---------------------------------------------------------------------------
.text:00000000000027AF                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000027B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027B5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000027BA                 mov     r12d, r8d
.text:00000000000027BD                 mov     rbp, r11
.text:00000000000027C0                 setz    dl
.text:00000000000027C3                 mov     eax, ebx
.text:00000000000027C5                 test    r15, r15
.text:00000000000027C8                 setz    cl
.text:00000000000027CB                 and     eax, edx
.text:00000000000027CD                 and     al, cl
.text:00000000000027CF                 jnz     loc_3236
.text:00000000000027D5                 mov     eax, ebx
.text:00000000000027D7                 xor     eax, 1
.text:00000000000027DA                 and     dl, al
.text:00000000000027DC                 jz      loc_314C
.text:00000000000027E2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000027E7                 jz      loc_314A
.text:00000000000027ED                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000027F2                 jnz     loc_31ED
.text:00000000000027F8                 test    r13, r13
.text:00000000000027FB                 setz    al
.text:00000000000027FE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002804                 setnz   dl
.text:0000000000002807                 and     al, dl
.text:0000000000002809                 jz      loc_322C
.text:000000000000280F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002814
.text:0000000000002814 loc_2814:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002814                 lea     rbx, asc_4D8D   ; "'"
.text:000000000000281B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000281F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002827                 mov     r15d, 1
.text:000000000000282D                 mov     [rsp+0E8h+n], 1
.text:0000000000002836                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000283B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002840                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002844                 jmp     loc_2123
.text:0000000000002844 ; ---------------------------------------------------------------------------
.text:0000000000002849                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002850                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002855                 jnz     loc_3100
.text:000000000000285B                 test    r13, r13
.text:000000000000285E                 jz      loc_2C60
.text:0000000000002864                 xor     edx, edx
.text:0000000000002866                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000286C                 jnz     loc_2C60
.text:0000000000002872
.text:0000000000002872 loc_2872:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002872                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002872                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002877                 add     r15, 3
.text:000000000000287B                 xor     eax, eax
.text:000000000000287D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002882                 xor     r8d, r8d
.text:0000000000002885                 mov     r13, rdx
.text:0000000000002888                 mov     ebx, 27h ; '''
.text:000000000000288D                 jmp     loc_22A9
.text:000000000000288D ; ---------------------------------------------------------------------------
.text:0000000000002892                 align 8
.text:0000000000002898
.text:0000000000002898 loc_2898:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002898                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000289D                 jz      short loc_28C0
.text:000000000000289F                 lea     rcx, [rbp+2]
.text:00000000000028A3                 cmp     rcx, r11
.text:00000000000028A6                 jnb     short loc_28C0
.text:00000000000028A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000028AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000028B2                 jz      loc_3042
.text:00000000000028B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000028C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000028C0                 xor     edx, edx
.text:00000000000028C2                 xor     r12d, r12d
.text:00000000000028C5                 xor     eax, eax
.text:00000000000028C7                 mov     ebx, 3Fh ; '?'
.text:00000000000028CC                 jmp     loc_2278
.text:00000000000028CC ; ---------------------------------------------------------------------------
.text:00000000000028D1                 align 8
.text:00000000000028D8
.text:00000000000028D8 loc_28D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000028D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028DD                 jnz     loc_3100
.text:00000000000028E3                 xor     r12d, r12d
.text:00000000000028E6                 xor     eax, eax
.text:00000000000028E8                 mov     ebx, 3Fh ; '?'
.text:00000000000028ED                 jmp     loc_22A9
.text:00000000000028ED ; ---------------------------------------------------------------------------
.text:00000000000028F2                 align 8
.text:00000000000028F8
.text:00000000000028F8 loc_28F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000028F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002900                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002904                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002910                 mov     [rsp+0E8h+ps], rax
.text:0000000000002915                 jnz     short loc_2944
.text:0000000000002917                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000291C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002921                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002926                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000292B                 call    _strlen
.text:0000000000002930                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002936                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000293C                 mov     r11, rax
.text:000000000000293F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002944
.text:0000000000002944 loc_2944:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002944                 lea     rax, [rsp+0E8h+wc]
.text:000000000000294C                 xor     ecx, ecx
.text:000000000000294E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002952                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002957                 mov     rbx, rcx
.text:000000000000295A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002962                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002967                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000296C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002974                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002979                 mov     [rsp+0E8h+var_78], r13
.text:000000000000297E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002983
.text:0000000000002983 loc_2983:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002983                 mov     rax, [rsp+0E8h+s]
.text:0000000000002988                 lea     r14, [rbp+rbx+0]
.text:000000000000298D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002992                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002997                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000299C                 lea     r13, [rax+r14]
.text:00000000000029A0                 sub     rdx, r14
.text:00000000000029A3                 mov     rsi, r13
.text:00000000000029A6                 call    rpl_mbrtowc
.text:00000000000029AB                 test    rax, rax
.text:00000000000029AE                 mov     r15, rax
.text:00000000000029B1                 jz      short loc_2A01
.text:00000000000029B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000029B7                 jz      loc_2FD5
.text:00000000000029BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000029C1                 jz      loc_2F61
.text:00000000000029C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000029CC                 setz    al
.text:00000000000029CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000029D3                 jnz     loc_2B70
.text:00000000000029D9
.text:00000000000029D9 loc_29D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000029D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000029D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000029E0                 call    _iswprint
.text:00000000000029E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000029EA                 test    eax, eax
.text:00000000000029EC                 mov     eax, 0
.text:00000000000029F1                 cmovz   r12d, eax
.text:00000000000029F5                 add     rbx, r15
.text:00000000000029F8                 call    _mbsinit
.text:00000000000029FD                 test    eax, eax
.text:00000000000029FF                 jz      short loc_2983
.text:0000000000002A01
.text:0000000000002A01 loc_2A01:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002A01                 mov     edx, r12d
.text:0000000000002A04                 mov     rdi, rbx
.text:0000000000002A07                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002A0D                 xor     edx, 1
.text:0000000000002A10                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002A15                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002A1B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002A1F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002A27                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A2C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002A36
.text:0000000000002A36 loc_2A36:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002A36                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002A36                 cmp     rdi, 1
.text:0000000000002A3A                 jbe     loc_303B
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002A40                 mov     rcx, rdi
.text:0000000000002A43                 xor     esi, esi
.text:0000000000002A45                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002A4B                 add     rcx, rbp
.text:0000000000002A4E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002A53                 jmp     loc_2B0E
.text:0000000000002A53 ; ---------------------------------------------------------------------------
.text:0000000000002A58                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002A60                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A65                 setz    al
.text:0000000000002A68                 test    r9b, r9b
.text:0000000000002A6B                 jnz     loc_2F20
.text:0000000000002A71                 mov     esi, r8d
.text:0000000000002A74                 xor     esi, 1
.text:0000000000002A77                 and     al, sil
.text:0000000000002A7A                 jz      short loc_2AAB
.text:0000000000002A7C                 cmp     r13, r15
.text:0000000000002A7F                 jbe     short loc_2A86
.text:0000000000002A81                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002A86
.text:0000000000002A86 loc_2A86:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002A86                 lea     rsi, [r15+1]
.text:0000000000002A8A                 cmp     r13, rsi
.text:0000000000002A8D                 jbe     short loc_2A95
.text:0000000000002A8F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002A95
.text:0000000000002A95 loc_2A95:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002A95                 lea     rsi, [r15+2]
.text:0000000000002A99                 cmp     r13, rsi
.text:0000000000002A9C                 jbe     short loc_2AA4
.text:0000000000002A9E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002AA4
.text:0000000000002AA4 loc_2AA4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002AA4                 add     r15, 3
.text:0000000000002AA8                 mov     r8d, eax
.text:0000000000002AAB
.text:0000000000002AAB loc_2AAB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002AAB                 cmp     r13, r15
.text:0000000000002AAE                 jbe     short loc_2AB5
.text:0000000000002AB0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002AB5
.text:0000000000002AB5 loc_2AB5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002AB5                 lea     rax, [r15+1]
.text:0000000000002AB9                 cmp     r13, rax
.text:0000000000002ABC                 jbe     short loc_2ACB
.text:0000000000002ABE                 mov     eax, ebx
.text:0000000000002AC0                 shr     al, 6
.text:0000000000002AC3                 add     eax, 30h ; '0'
.text:0000000000002AC6                 mov     [r14+r15+1], al
.text:0000000000002ACB
.text:0000000000002ACB loc_2ACB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002ACB                 lea     rax, [r15+2]
.text:0000000000002ACF                 cmp     r13, rax
.text:0000000000002AD2                 jbe     short loc_2AE4
.text:0000000000002AD4                 mov     eax, ebx
.text:0000000000002AD6                 shr     al, 3
.text:0000000000002AD9                 and     eax, 7
.text:0000000000002ADC                 add     eax, 30h ; '0'
.text:0000000000002ADF                 mov     [r14+r15+2], al
.text:0000000000002AE4
.text:0000000000002AE4 loc_2AE4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002AE4                 and     ebx, 7
.text:0000000000002AE7                 add     rbp, 1
.text:0000000000002AEB                 add     r15, 3
.text:0000000000002AEF                 add     ebx, 30h ; '0'
.text:0000000000002AF2                 cmp     rbp, rcx
.text:0000000000002AF5                 jnb     loc_22E0
.text:0000000000002AFB                 mov     esi, edx
.text:0000000000002AFD
.text:0000000000002AFD loc_2AFD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002AFD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002AFD                 cmp     r13, r15
.text:0000000000002B00                 jbe     short loc_2B06
.text:0000000000002B02                 mov     [r14+r15], bl
.text:0000000000002B06
.text:0000000000002B06 loc_2B06:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002B06                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002B0A                 add     r15, 1
.text:0000000000002B0E
.text:0000000000002B0E loc_2B0E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002B0E                 test    dl, dl
.text:0000000000002B10                 jnz     loc_2A60
.text:0000000000002B16                 mov     eax, esi
.text:0000000000002B18                 xor     eax, 1
.text:0000000000002B1B                 and     eax, r8d
.text:0000000000002B1E                 test    r10b, r10b
.text:0000000000002B21                 jz      short loc_2B31
.text:0000000000002B23                 cmp     r13, r15
.text:0000000000002B26                 jbe     short loc_2B2D
.text:0000000000002B28                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002B2D
.text:0000000000002B2D loc_2B2D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002B2D                 add     r15, 1
.text:0000000000002B31
.text:0000000000002B31 loc_2B31:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002B31                 add     rbp, 1
.text:0000000000002B35                 cmp     rbp, rcx
.text:0000000000002B38                 jnb     loc_22BC
.text:0000000000002B3E                 test    al, al
.text:0000000000002B40                 jz      loc_2F3E
.text:0000000000002B46                 cmp     r13, r15
.text:0000000000002B49                 jbe     short loc_2B50
.text:0000000000002B4B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002B50                 lea     rax, [r15+1]
.text:0000000000002B54                 cmp     r13, rax
.text:0000000000002B57                 jbe     short loc_2B5F
.text:0000000000002B59                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002B5F
.text:0000000000002B5F loc_2B5F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002B5F                 add     r15, 2
.text:0000000000002B63                 xor     r10d, r10d
.text:0000000000002B66                 xor     r8d, r8d
.text:0000000000002B69                 jmp     short loc_2AFD
.text:0000000000002B69 ; ---------------------------------------------------------------------------
.text:0000000000002B6B                 align 10h
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002B70                 cmp     r15, 1
.text:0000000000002B74                 jz      loc_29D9
.text:0000000000002B7A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002B7F                 lea     rcx, [rdi+r15]
.text:0000000000002B83                 lea     rdx, [rdi+r14+1]
.text:0000000000002B88                 lea     r8, [rcx+r14]
.text:0000000000002B8C                 jmp     short loc_2B9D
.text:0000000000002B8C ; ---------------------------------------------------------------------------
.text:0000000000002B8E                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002B90                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002B90                 add     rdx, 1
.text:0000000000002B94                 cmp     r8, rdx
.text:0000000000002B97                 jz      loc_29D9
.text:0000000000002B9D
.text:0000000000002B9D loc_2B9D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002B9D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002BA0                 sub     ecx, 5Bh ; '['
.text:0000000000002BA3                 cmp     cl, 21h ; '!'
.text:0000000000002BA6                 ja      short loc_2B90
.text:0000000000002BA8                 mov     esi, 1
.text:0000000000002BAD                 shl     rsi, cl
.text:0000000000002BB0                 mov     rcx, rsi
.text:0000000000002BB3                 mov     rsi, 20000002Bh
.text:0000000000002BBD                 test    rcx, rsi
.text:0000000000002BC0                 jz      short loc_2B90
.text:0000000000002BC2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002BC7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002BCC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002BD1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002BD9
.text:0000000000002BD9 loc_2BD9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002BD9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002BD9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002BDE                 jz      short loc_2BF0
.text:0000000000002BE0                 test    al, al
.text:0000000000002BE2                 mov     eax, 4
.text:0000000000002BE7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002BEC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002BF0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002BF0                 sub     rsp, 8
.text:0000000000002BF4                 mov     rcx, rbp
.text:0000000000002BF7                 mov     rsi, r13
.text:0000000000002BFA                 push    [rsp+0F0h+var_88]
.text:0000000000002BFE                 push    [rsp+0F8h+var_80]
.text:0000000000002C02                 mov     rdi, r14
.text:0000000000002C05                 push    0
.text:0000000000002C07                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002C0F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002C14                 mov     rdx, [rsp+108h+s]
.text:0000000000002C19                 and     r9d, 0FFFFFFFDh
.text:0000000000002C1D                 call    quotearg_buffer_restyled
.text:0000000000002C22                 add     rsp, 20h
.text:0000000000002C26                 mov     r15, rax
.text:0000000000002C29
.text:0000000000002C29 loc_2C29:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002C29                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002C29                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002C31                 xor     rbx, fs:28h
.text:0000000000002C3A                 mov     rax, r15
.text:0000000000002C3D                 jnz     loc_3243
.text:0000000000002C43                 add     rsp, 0B8h
.text:0000000000002C4A                 pop     rbx
.text:0000000000002C4B                 pop     rbp
.text:0000000000002C4C                 pop     r12
.text:0000000000002C4E                 pop     r13
.text:0000000000002C50                 pop     r14
.text:0000000000002C52                 pop     r15
.text:0000000000002C54                 retn
.text:0000000000002C54 ; ---------------------------------------------------------------------------
.text:0000000000002C55                 align 8
.text:0000000000002C58
.text:0000000000002C58 loc_2C58:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002C58                 mov     rbp, r11
.text:0000000000002C5B                 jmp     loc_2BD9
.text:0000000000002C60 ; ---------------------------------------------------------------------------
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002C60                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002C60                 cmp     r13, r15
.text:0000000000002C63                 jbe     short loc_2C6A
.text:0000000000002C65                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C6A
.text:0000000000002C6A loc_2C6A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002C6A                 lea     rax, [r15+1]
.text:0000000000002C6E                 cmp     r13, rax
.text:0000000000002C71                 jbe     short loc_2C79
.text:0000000000002C73                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002C79
.text:0000000000002C79 loc_2C79:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002C79                 lea     rax, [r15+2]
.text:0000000000002C7D                 cmp     r13, rax
.text:0000000000002C80                 jbe     loc_3272
.text:0000000000002C86                 mov     rdx, r13
.text:0000000000002C89                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002C8F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002C94                 jmp     loc_2872
.text:0000000000002C99 ; ---------------------------------------------------------------------------
.text:0000000000002C99
.text:0000000000002C99 loc_2C99:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002C99                 mov     eax, r12d
.text:0000000000002C9C                 mov     ebx, 30h ; '0'
.text:0000000000002CA1                 xor     r12d, r12d
.text:0000000000002CA4                 jmp     loc_22A9
.text:0000000000002CA9 ; ---------------------------------------------------------------------------
.text:0000000000002CA9
.text:0000000000002CA9 loc_2CA9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002CA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002CAF                 jmp     loc_2679
.text:0000000000002CB4 ; ---------------------------------------------------------------------------
.text:0000000000002CB4
.text:0000000000002CB4 loc_2CB4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CB4                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002CB4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002CB6                 jnz     loc_20E3        ; jumptable 00000000000121F1 case 1
.text:0000000000002CBC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CC1
.text:0000000000002CC1 loc_2CC1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002CC1                 test    r13, r13
.text:0000000000002CC4                 jnz     loc_325A
.text:0000000000002CCA                 lea     rax, asc_4D8D   ; "'"
.text:0000000000002CD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CDA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002CDF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CE4                 xor     r12d, r12d
.text:0000000000002CE7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002CEC                 mov     [rsp+0E8h+n], 1
.text:0000000000002CF5                 mov     [rsp+0E8h+s2], rax
.text:0000000000002CFA                 mov     r15d, 1
.text:0000000000002D00                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D08                 jmp     loc_2123
.text:0000000000002D08 ; ---------------------------------------------------------------------------
.text:0000000000002D0D                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D10                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002D10                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002D12                 jnz     loc_310D
.text:0000000000002D18                 test    r13, r13
.text:0000000000002D1B                 jz      loc_2F46
.text:0000000000002D21                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002D25                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D2A                 xor     r12d, r12d
.text:0000000000002D2D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D32                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D3B
.text:0000000000002D3B loc_2D3B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002D3B                 lea     rax, unk_4D8B
.text:0000000000002D42                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D4C                 mov     [rsp+0E8h+n], 1
.text:0000000000002D55                 mov     r15d, 1
.text:0000000000002D5B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D60                 jmp     loc_2123
.text:0000000000002D65 ; ---------------------------------------------------------------------------
.text:0000000000002D65
.text:0000000000002D65 loc_2D65:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D65                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002D65                 lea     rax, unk_4D8B   ; jumptable 00000000000121F1 case 6
.text:0000000000002D6C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D71                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D76                 xor     r12d, r12d
.text:0000000000002D79                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D82                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002D87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D8C                 mov     [rsp+0E8h+n], 1
.text:0000000000002D95                 xor     r15d, r15d
.text:0000000000002D98                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D9D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002DA5                 jmp     loc_2123
.text:0000000000002DAA ; ---------------------------------------------------------------------------
.text:0000000000002DAA
.text:0000000000002DAA loc_2DAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DAA                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002DAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002DAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DB4                 xor     r12d, r12d
.text:0000000000002DB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DC5                 xor     r15d, r15d
.text:0000000000002DC8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DCD                 mov     [rsp+0E8h+n], 0
.text:0000000000002DD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002DDF                 jmp     loc_2123
.text:0000000000002DE4 ; ---------------------------------------------------------------------------
.text:0000000000002DE4
.text:0000000000002DE4 loc_2DE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DE4                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002DE4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002DE9                 jz      short loc_2E41
.text:0000000000002DEB                 lea     rsi, asc_4D8F   ; "`"
.text:0000000000002DF2                 xor     edi, edi        ; domainname
.text:0000000000002DF4                 mov     edx, 5          ; category
.text:0000000000002DF9                 call    _dcgettext
.text:0000000000002DFE                 mov     rcx, rax
.text:0000000000002E01                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002E06                 lea     rax, asc_4D8F   ; "`"
.text:0000000000002E0D                 cmp     rcx, rax
.text:0000000000002E10                 jz      loc_31AE
.text:0000000000002E16
.text:0000000000002E16 loc_2E16:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002E16                 lea     rsi, asc_4D8D   ; "'"
.text:0000000000002E1D                 xor     edi, edi        ; domainname
.text:0000000000002E1F                 mov     edx, 5          ; category
.text:0000000000002E24                 call    _dcgettext
.text:0000000000002E29                 mov     rcx, rax
.text:0000000000002E2C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002E31                 lea     rax, asc_4D8D   ; "'"
.text:0000000000002E38                 cmp     rcx, rax
.text:0000000000002E3B                 jz      loc_31C4
.text:0000000000002E41
.text:0000000000002E41 loc_2E41:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002E41                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002E41                 xor     r15d, r15d
.text:0000000000002E44                 test    ebx, ebx
.text:0000000000002E46                 jz      loc_300D
.text:0000000000002E4C
.text:0000000000002E4C loc_2E4C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002E4C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002E4C                 test    ebx, ebx
.text:0000000000002E4E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002E53                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002E58                 xor     r12d, r12d
.text:0000000000002E5B                 mov     rdi, rbx        ; s
.text:0000000000002E5E                 call    _strlen
.text:0000000000002E63                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002E68                 mov     [rsp+0E8h+n], rax
.text:0000000000002E6D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E72                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E80                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E85                 jmp     loc_2123
.text:0000000000002E8A ; ---------------------------------------------------------------------------
.text:0000000000002E8A
.text:0000000000002E8A loc_2E8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E8A                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002E8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002E8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E94                 xor     r12d, r12d
.text:0000000000002E97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EA5                 xor     r15d, r15d
.text:0000000000002EA8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002EAD                 mov     [rsp+0E8h+n], 0
.text:0000000000002EB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002EBF                 jmp     loc_2123
.text:0000000000002EC4 ; ---------------------------------------------------------------------------
.text:0000000000002EC4
.text:0000000000002EC4 loc_2EC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EC4                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:0000000000002EC4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002EC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002ECE                 xor     r12d, r12d
.text:0000000000002ED1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EDA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002EDF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EE4                 jmp     loc_2103
.text:0000000000002EE9 ; ---------------------------------------------------------------------------
.text:0000000000002EE9
.text:0000000000002EE9 loc_2EE9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002EE9                 cmp     r13, r15
.text:0000000000002EEC                 jbe     short loc_2EF3
.text:0000000000002EEE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002EF3
.text:0000000000002EF3 loc_2EF3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002EF3                 lea     rax, [rcx+2]
.text:0000000000002EF7                 cmp     r13, rax
.text:0000000000002EFA                 jbe     short loc_2F02
.text:0000000000002EFC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002F02
.text:0000000000002F02 loc_2F02:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002F02                 mov     eax, r12d
.text:0000000000002F05                 lea     r15, [rcx+3]
.text:0000000000002F09                 xor     r12d, r12d
.text:0000000000002F0C                 mov     ebx, 30h ; '0'
.text:0000000000002F11                 jmp     loc_2278
.text:0000000000002F11 ; ---------------------------------------------------------------------------
.text:0000000000002F16                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002F20                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002F25                 mov     rbp, r11
.text:0000000000002F28                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002F2C                 jmp     loc_2BD9
.text:0000000000002F31 ; ---------------------------------------------------------------------------
.text:0000000000002F31
.text:0000000000002F31 loc_2F31:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002F31                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002F36                 xor     r12d, r12d
.text:0000000000002F39                 jmp     loc_2A40
.text:0000000000002F3E ; ---------------------------------------------------------------------------
.text:0000000000002F3E
.text:0000000000002F3E loc_2F3E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002F3E                 xor     r10d, r10d
.text:0000000000002F41                 jmp     loc_2AFD
.text:0000000000002F46 ; ---------------------------------------------------------------------------
.text:0000000000002F46
.text:0000000000002F46 loc_2F46:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002F46                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F4F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F54                 xor     r12d, r12d
.text:0000000000002F57                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F5C                 jmp     loc_2D3B
.text:0000000000002F61 ; ---------------------------------------------------------------------------
.text:0000000000002F61
.text:0000000000002F61 loc_2F61:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002F61                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002F66                 mov     rsi, r14
.text:0000000000002F69                 mov     rcx, r13
.text:0000000000002F6C                 mov     rax, rbx
.text:0000000000002F6F                 mov     rdi, rbx
.text:0000000000002F72                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002F78                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002F7D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002F85                 cmp     rsi, r11
.text:0000000000002F88                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002F8E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002F96                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002F9B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002FA0                 jnb     short loc_2FC8
.text:0000000000002FA2                 cmp     byte ptr [rcx], 0
.text:0000000000002FA5                 jnz     short loc_2FB7
.text:0000000000002FA7                 jmp     short loc_2FC8
.text:0000000000002FA7 ; ---------------------------------------------------------------------------
.text:0000000000002FA9                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002FB0                 cmp     byte ptr [r9+rax], 0
.text:0000000000002FB5                 jz      short loc_2FC5
.text:0000000000002FB7
.text:0000000000002FB7 loc_2FB7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002FB7                 add     rax, 1
.text:0000000000002FBB                 lea     rdx, [rbp+rax+0]
.text:0000000000002FC0                 cmp     r11, rdx
.text:0000000000002FC3                 ja      short loc_2FB0
.text:0000000000002FC5
.text:0000000000002FC5 loc_2FC5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002FC5                 mov     rdi, rax
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002FC8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002FC8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002FCD                 xor     r12d, r12d
.text:0000000000002FD0                 jmp     loc_2A36
.text:0000000000002FD5 ; ---------------------------------------------------------------------------
.text:0000000000002FD5
.text:0000000000002FD5 loc_2FD5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002FD5                 mov     rdi, rbx
.text:0000000000002FD8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002FDE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002FE3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002FE9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002FF1                 xor     r12d, r12d
.text:0000000000002FF4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002FF9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002FFE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003003                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003008                 jmp     loc_2A36
.text:000000000000300D ; ---------------------------------------------------------------------------
.text:000000000000300D
.text:000000000000300D loc_300D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000300D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003012                 movzx   eax, byte ptr [rdx]
.text:0000000000003015                 test    al, al
.text:0000000000003017                 jz      loc_2E4C
.text:000000000000301D                 nop     dword ptr [rax]
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003020                 cmp     r13, r15
.text:0000000000003023                 jbe     short loc_3029
.text:0000000000003025                 mov     [r14+r15], al
.text:0000000000003029
.text:0000000000003029 loc_3029:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003029                 add     r15, 1
.text:000000000000302D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003032                 test    al, al
.text:0000000000003034                 jnz     short loc_3020
.text:0000000000003036                 jmp     loc_2E4C
.text:000000000000303B ; ---------------------------------------------------------------------------
.text:000000000000303B
.text:000000000000303B loc_303B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000303B                 mov     eax, edx
.text:000000000000303D                 jmp     loc_2597
.text:0000000000003042 ; ---------------------------------------------------------------------------
.text:0000000000003042
.text:0000000000003042 loc_3042:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003042                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003046                 cmp     bl, 3Eh ; '>'
.text:0000000000003049                 ja      loc_28C0
.text:000000000000304F                 mov     rax, 7000A38200000000h
.text:0000000000003059                 bt      rax, rbx
.text:000000000000305D                 jnb     loc_28C0
.text:0000000000003063                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003068                 jnz     loc_3252
.text:000000000000306E                 cmp     r13, r15
.text:0000000000003071                 jbe     short loc_3078
.text:0000000000003073                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003078                 lea     rax, [r15+1]
.text:000000000000307C                 cmp     r13, rax
.text:000000000000307F                 jbe     short loc_3087
.text:0000000000003081                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003087
.text:0000000000003087 loc_3087:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003087                 lea     rax, [r15+2]
.text:000000000000308B                 cmp     r13, rax
.text:000000000000308E                 jbe     short loc_3096
.text:0000000000003090                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003096
.text:0000000000003096 loc_3096:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003096                 lea     rax, [r15+3]
.text:000000000000309A                 cmp     r13, rax
.text:000000000000309D                 jbe     short loc_30A5
.text:000000000000309F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000030A5
.text:00000000000030A5 loc_30A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000030A5                 add     r15, 4
.text:00000000000030A9                 xor     edx, edx
.text:00000000000030AB                 xor     r12d, r12d
.text:00000000000030AE                 xor     eax, eax
.text:00000000000030B0                 mov     rbp, rcx
.text:00000000000030B3                 jmp     loc_2278
.text:00000000000030B8 ; ---------------------------------------------------------------------------
.text:00000000000030B8
.text:00000000000030B8 loc_30B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030B8                                         ; DATA XREF: .rodata:jpt_20E1↓o
.text:00000000000030B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000030BA                 jz      loc_3248
.text:00000000000030C0                 lea     rax, asc_4D8D   ; "'"
.text:00000000000030C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000030CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030D1                 xor     r12d, r12d
.text:00000000000030D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000030E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000030E7                 mov     [rsp+0E8h+n], 1
.text:00000000000030F0                 xor     r15d, r15d
.text:00000000000030F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000030F8                 jmp     loc_2123
.text:00000000000030F8 ; ---------------------------------------------------------------------------
.text:00000000000030FD                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003100                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003100                 mov     rbp, r11
.text:0000000000003103                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003108                 jmp     loc_2BD9
.text:000000000000310D ; ---------------------------------------------------------------------------
.text:000000000000310D
.text:000000000000310D loc_310D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000310D                 lea     rax, unk_4D8B
.text:0000000000003114                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003119                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000311E                 xor     r12d, r12d
.text:0000000000003121                 mov     [rsp+0E8h+var_98], 0
.text:000000000000312A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000312F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003134                 mov     [rsp+0E8h+n], 1
.text:000000000000313D                 xor     r15d, r15d
.text:0000000000003140                 mov     [rsp+0E8h+s2], rax
.text:0000000000003145                 jmp     loc_2123
.text:000000000000314A ; ---------------------------------------------------------------------------
.text:000000000000314A
.text:000000000000314A loc_314A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000314A                 mov     eax, edx
.text:000000000000314C
.text:000000000000314C loc_314C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000314C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000314C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003151                 test    rbx, rbx
.text:0000000000003154                 jz      short loc_3182
.text:0000000000003156                 test    al, al
.text:0000000000003158                 jz      short loc_3182
.text:000000000000315A                 movzx   ecx, byte ptr [rbx]
.text:000000000000315D                 mov     rax, rbx
.text:0000000000003160                 test    cl, cl
.text:0000000000003162                 jz      short loc_3182
.text:0000000000003164                 mov     rdx, r15
.text:0000000000003167                 sub     rax, r15
.text:000000000000316A
.text:000000000000316A loc_316A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000316A                 cmp     r13, rdx
.text:000000000000316D                 jbe     short loc_3173
.text:000000000000316F                 mov     [r14+rdx], cl
.text:0000000000003173
.text:0000000000003173 loc_3173:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003173                 add     rdx, 1
.text:0000000000003177                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000317B                 test    cl, cl
.text:000000000000317D                 jnz     short loc_316A
.text:000000000000317F                 mov     r15, rdx
.text:0000000000003182
.text:0000000000003182 loc_3182:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003182                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003182                 cmp     r13, r15
.text:0000000000003185                 jbe     loc_2C29
.text:000000000000318B                 mov     byte ptr [r14+r15], 0
.text:0000000000003190                 jmp     loc_2C29
.text:0000000000003195 ; ---------------------------------------------------------------------------
.text:0000000000003195
.text:0000000000003195 loc_3195:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003195                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000319A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000319F                 mov     rbp, r11
.text:00000000000031A2                 setz    al
.text:00000000000031A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000031A9                 jmp     loc_2BD9
.text:00000000000031AE ; ---------------------------------------------------------------------------
.text:00000000000031AE
.text:00000000000031AE loc_31AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000031AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000031B2                 mov     rdi, rcx
.text:00000000000031B5                 call    gettext_quote
.text:00000000000031BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000031BF                 jmp     loc_2E16
.text:00000000000031C4 ; ---------------------------------------------------------------------------
.text:00000000000031C4
.text:00000000000031C4 loc_31C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000031C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000031C8                 mov     rdi, rcx
.text:00000000000031CB                 call    gettext_quote
.text:00000000000031D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000031D5                 jmp     loc_2E41
.text:00000000000031DA ; ---------------------------------------------------------------------------
.text:00000000000031DA
.text:00000000000031DA loc_31DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000031DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000031DF                 mov     rbp, r11
.text:00000000000031E2                 mov     eax, edx
.text:00000000000031E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000031E8                 jmp     loc_2BD9
.text:00000000000031ED ; ---------------------------------------------------------------------------
.text:00000000000031ED
.text:00000000000031ED loc_31ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000031ED                 sub     rsp, 8
.text:00000000000031F1                 mov     r8d, 5
.text:00000000000031F7                 mov     rcx, r11
.text:00000000000031FA                 push    [rsp+0F0h+var_88]
.text:00000000000031FE                 push    [rsp+0F8h+var_80]
.text:0000000000003202                 mov     rdi, r14
.text:0000000000003205                 push    [rsp+100h+var_C8]
.text:0000000000003209                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003211                 mov     rdx, [rsp+108h+s]
.text:0000000000003216                 mov     rsi, [rsp+108h+var_98]
.text:000000000000321B                 call    quotearg_buffer_restyled
.text:0000000000003220                 add     rsp, 20h
.text:0000000000003224                 mov     r15, rax
.text:0000000000003227                 jmp     loc_2C29
.text:000000000000322C ; ---------------------------------------------------------------------------
.text:000000000000322C
.text:000000000000322C loc_322C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000322C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003231                 jmp     loc_314C
.text:0000000000003236 ; ---------------------------------------------------------------------------
.text:0000000000003236
.text:0000000000003236 loc_3236:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003236                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000323E                 jmp     loc_2BD9
.text:0000000000003243 ; ---------------------------------------------------------------------------
.text:0000000000003243
.text:0000000000003243 loc_3243:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003243                 call    ___stack_chk_fail
.text:0000000000003248 ; ---------------------------------------------------------------------------
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003248                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000324D                 jmp     loc_2CC1
.text:0000000000003252 ; ---------------------------------------------------------------------------
.text:0000000000003252
.text:0000000000003252 loc_3252:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003252                 mov     rbp, r11
.text:0000000000003255                 jmp     loc_2BF0
.text:000000000000325A ; ---------------------------------------------------------------------------
.text:000000000000325A
.text:000000000000325A loc_325A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000325A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000325F                 xor     eax, eax
.text:0000000000003261                 xor     r12d, r12d
.text:0000000000003264                 mov     [rsp+0E8h+var_98], 0
.text:000000000000326D                 jmp     loc_2814
.text:0000000000003272 ; ---------------------------------------------------------------------------
.text:0000000000003272
.text:0000000000003272 loc_3272:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003272                 mov     rdx, r13
.text:0000000000003275                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000327A                 jmp     loc_2872
.text:000000000000327F ; ---------------------------------------------------------------------------
.text:000000000000327F
.text:000000000000327F def_20E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000327F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000327F ; } // starts at 2050
.text:000000000000327F quotearg_buffer_restyled endp
.text:000000000000327F
.text:000000000000327F ; ---------------------------------------------------------------------------
.text:0000000000003284                 align 10h
.text:0000000000003290
.text:0000000000003290 ; =============== S U B R O U T I N E =======================================
.text:0000000000003290
.text:0000000000003290
.text:0000000000003290 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003290                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003290
.text:0000000000003290 var_50          = qword ptr -50h
.text:0000000000003290 var_48          = qword ptr -48h
.text:0000000000003290 var_40          = dword ptr -40h
.text:0000000000003290 var_3C          = dword ptr -3Ch
.text:0000000000003290
.text:0000000000003290 ; __unwind {
.text:0000000000003290                 push    r15
.text:0000000000003292                 push    r14
.text:0000000000003294                 movsxd  r15, edi
.text:0000000000003297                 push    r13
.text:0000000000003299                 push    r12
.text:000000000000329B                 mov     r14, rdx
.text:000000000000329E                 push    rbp
.text:000000000000329F                 push    rbx
.text:00000000000032A0                 mov     rbp, rcx
.text:00000000000032A3                 sub     rsp, 28h
.text:00000000000032A7                 mov     [rsp+58h+var_50], rsi
.text:00000000000032AC                 call    ___errno_location
.text:00000000000032B1                 mov     r13, rax
.text:00000000000032B4                 mov     eax, [rax]
.text:00000000000032B6                 test    r15d, r15d
.text:00000000000032B9                 mov     rbx, cs:slotvec
.text:00000000000032C0                 mov     [rsp+58h+var_40], eax
.text:00000000000032C4                 js      loc_3431
.text:00000000000032CA                 cmp     cs:nslots, r15d
.text:00000000000032D1                 jg      short loc_3335
.text:00000000000032D3                 cmp     r15d, 7FFFFFFFh
.text:00000000000032DA                 jz      loc_3436
.text:00000000000032E0                 lea     r12d, [r15+1]
.text:00000000000032E4                 lea     rax, slotvec0
.text:00000000000032EB                 movsxd  rsi, r12d
.text:00000000000032EE                 shl     rsi, 4
.text:00000000000032F2                 cmp     rbx, rax
.text:00000000000032F5                 jz      loc_3410
.text:00000000000032FB                 mov     rdi, rbx
.text:00000000000032FE                 call    xrealloc
.text:0000000000003303                 mov     rbx, rax
.text:0000000000003306                 mov     cs:slotvec, rax
.text:000000000000330D
.text:000000000000330D loc_330D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000330D                 movsxd  rdi, cs:nslots
.text:0000000000003314                 mov     edx, r12d
.text:0000000000003317                 xor     esi, esi        ; c
.text:0000000000003319                 sub     edx, edi
.text:000000000000331B                 shl     rdi, 4
.text:000000000000331F                 movsxd  rdx, edx
.text:0000000000003322                 add     rdi, rbx        ; s
.text:0000000000003325                 shl     rdx, 4          ; n
.text:0000000000003329                 call    _memset
.text:000000000000332E                 mov     cs:nslots, r12d
.text:0000000000003335
.text:0000000000003335 loc_3335:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003335                 mov     eax, [rbp+4]
.text:0000000000003338                 shl     r15, 4
.text:000000000000333C                 sub     rsp, 8
.text:0000000000003340                 add     rbx, r15
.text:0000000000003343                 lea     r15, [rbp+8]
.text:0000000000003347                 mov     r8d, [rbp+0]
.text:000000000000334B                 mov     r11, [rbx]
.text:000000000000334E                 mov     r12, [rbx+8]
.text:0000000000003352                 mov     rcx, r14
.text:0000000000003355                 or      eax, 1
.text:0000000000003358                 mov     [rsp+60h+var_3C], eax
.text:000000000000335C                 push    qword ptr [rbp+30h]
.text:000000000000335F                 mov     r9d, eax
.text:0000000000003362                 push    qword ptr [rbp+28h]
.text:0000000000003365                 push    r15
.text:0000000000003367                 mov     rsi, r11
.text:000000000000336A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000336F                 mov     rdi, r12
.text:0000000000003372                 mov     [rsp+78h+var_48], r11
.text:0000000000003377                 call    quotearg_buffer_restyled
.text:000000000000337C                 add     rsp, 20h
.text:0000000000003380                 mov     r11, [rsp+58h+var_48]
.text:0000000000003385                 cmp     r11, rax
.text:0000000000003388                 ja      short loc_33F1
.text:000000000000338A                 lea     rsi, [rax+1]
.text:000000000000338E                 lea     rax, slot0
.text:0000000000003395                 cmp     r12, rax
.text:0000000000003398                 mov     [rbx], rsi
.text:000000000000339B                 jz      short loc_33AF
.text:000000000000339D                 mov     rdi, r12        ; ptr
.text:00000000000033A0                 mov     [rsp+58h+var_48], rsi
.text:00000000000033A5                 call    _free
.text:00000000000033AA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000033AF
.text:00000000000033AF loc_33AF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000033AF                 mov     rdi, rsi
.text:00000000000033B2                 mov     [rsp+58h+var_48], rsi
.text:00000000000033B7                 call    xmalloc
.text:00000000000033BC                 sub     rsp, 8
.text:00000000000033C0                 mov     [rbx+8], rax
.text:00000000000033C4                 mov     r8d, [rbp+0]
.text:00000000000033C8                 push    qword ptr [rbp+30h]
.text:00000000000033CB                 push    qword ptr [rbp+28h]
.text:00000000000033CE                 mov     rcx, r14
.text:00000000000033D1                 push    r15
.text:00000000000033D3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000033D8                 mov     rdi, rax
.text:00000000000033DB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000033E0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000033E5                 mov     r12, rax
.text:00000000000033E8                 call    quotearg_buffer_restyled
.text:00000000000033ED                 add     rsp, 20h
.text:00000000000033F1
.text:00000000000033F1 loc_33F1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000033F1                 mov     eax, [rsp+58h+var_40]
.text:00000000000033F5                 mov     [r13+0], eax
.text:00000000000033F9                 add     rsp, 28h
.text:00000000000033FD                 mov     rax, r12
.text:0000000000003400                 pop     rbx
.text:0000000000003401                 pop     rbp
.text:0000000000003402                 pop     r12
.text:0000000000003404                 pop     r13
.text:0000000000003406                 pop     r14
.text:0000000000003408                 pop     r15
.text:000000000000340A                 retn
.text:000000000000340A ; ---------------------------------------------------------------------------
.text:000000000000340B                 align 10h
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003410                 xor     edi, edi
.text:0000000000003412                 call    xrealloc
.text:0000000000003417                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000341F                 mov     rbx, rax
.text:0000000000003422                 mov     cs:slotvec, rax
.text:0000000000003429                 movups  xmmword ptr [rax], xmm0
.text:000000000000342C                 jmp     loc_330D
.text:0000000000003431 ; ---------------------------------------------------------------------------
.text:0000000000003431
.text:0000000000003431 loc_3431:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003431                 call    _abort
.text:0000000000003436 ; ---------------------------------------------------------------------------
.text:0000000000003436
.text:0000000000003436 loc_3436:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003436                 call    xalloc_die
.text:0000000000003436 ; } // starts at 3290
.text:0000000000003436 quotearg_n_options endp
.text:0000000000003436
.text:0000000000003436 ; ---------------------------------------------------------------------------
.text:000000000000343B                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440 ; Attributes: info_from_lumina
.text:0000000000003440
.text:0000000000003440 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003440                 public clone_quoting_options
.text:0000000000003440 clone_quoting_options proc near
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 push    r12
.text:0000000000003442                 push    rbp
.text:0000000000003443                 push    rbx
.text:0000000000003444                 mov     rbx, rdi
.text:0000000000003447                 call    ___errno_location
.text:000000000000344C                 mov     r12d, [rax]
.text:000000000000344F                 mov     rbp, rax
.text:0000000000003452                 lea     rax, default_quoting_options
.text:0000000000003459                 test    rbx, rbx
.text:000000000000345C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003461                 cmovz   rbx, rax
.text:0000000000003465                 mov     rdi, rbx        ; src
.text:0000000000003468                 call    xmemdup
.text:000000000000346D                 mov     [rbp+0], r12d
.text:0000000000003471                 pop     rbx
.text:0000000000003472                 pop     rbp
.text:0000000000003473                 pop     r12
.text:0000000000003475                 retn
.text:0000000000003475 ; } // starts at 3440
.text:0000000000003475 clone_quoting_options endp
.text:0000000000003475
.text:0000000000003475 ; ---------------------------------------------------------------------------
.text:0000000000003476                 align 20h
.text:0000000000003480
.text:0000000000003480 ; =============== S U B R O U T I N E =======================================
.text:0000000000003480
.text:0000000000003480
.text:0000000000003480                 public get_quoting_style
.text:0000000000003480 get_quoting_style proc near
.text:0000000000003480 ; __unwind {
.text:0000000000003480                 lea     rax, default_quoting_options
.text:0000000000003487                 test    rdi, rdi
.text:000000000000348A                 cmovz   rdi, rax
.text:000000000000348E                 mov     eax, [rdi]
.text:0000000000003490                 retn
.text:0000000000003490 ; } // starts at 3480
.text:0000000000003490 get_quoting_style endp
.text:0000000000003490
.text:0000000000003490 ; ---------------------------------------------------------------------------
.text:0000000000003491                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0
.text:00000000000034A0                 public set_quoting_style
.text:00000000000034A0 set_quoting_style proc near
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 lea     rax, default_quoting_options
.text:00000000000034A7                 test    rdi, rdi
.text:00000000000034AA                 cmovz   rdi, rax
.text:00000000000034AE                 mov     [rdi], esi
.text:00000000000034B0                 retn
.text:00000000000034B0 ; } // starts at 34A0
.text:00000000000034B0 set_quoting_style endp
.text:00000000000034B0
.text:00000000000034B0 ; ---------------------------------------------------------------------------
.text:00000000000034B1                 align 20h
.text:00000000000034C0
.text:00000000000034C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034C0
.text:00000000000034C0 ; Attributes: info_from_lumina
.text:00000000000034C0
.text:00000000000034C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000034C0                 public set_char_quoting
.text:00000000000034C0 set_char_quoting proc near
.text:00000000000034C0 ; __unwind {
.text:00000000000034C0                 lea     rax, default_quoting_options
.text:00000000000034C7                 test    rdi, rdi
.text:00000000000034CA                 mov     ecx, esi
.text:00000000000034CC                 cmovz   rdi, rax
.text:00000000000034D0                 mov     eax, esi
.text:00000000000034D2                 and     ecx, 1Fh
.text:00000000000034D5                 shr     al, 5
.text:00000000000034D8                 movzx   eax, al
.text:00000000000034DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000034E0                 mov     esi, [rdi]
.text:00000000000034E2                 mov     eax, esi
.text:00000000000034E4                 shr     eax, cl
.text:00000000000034E6                 xor     edx, eax
.text:00000000000034E8                 and     eax, 1
.text:00000000000034EB                 and     edx, 1
.text:00000000000034EE                 shl     edx, cl
.text:00000000000034F0                 xor     edx, esi
.text:00000000000034F2                 mov     [rdi], edx
.text:00000000000034F4                 retn
.text:00000000000034F4 ; } // starts at 34C0
.text:00000000000034F4 set_char_quoting endp
.text:00000000000034F4
.text:00000000000034F4 ; ---------------------------------------------------------------------------
.text:00000000000034F5                 align 20h
.text:0000000000003500
.text:0000000000003500 ; =============== S U B R O U T I N E =======================================
.text:0000000000003500
.text:0000000000003500
.text:0000000000003500                 public set_quoting_flags
.text:0000000000003500 set_quoting_flags proc near
.text:0000000000003500 ; __unwind {
.text:0000000000003500                 lea     rax, default_quoting_options
.text:0000000000003507                 test    rdi, rdi
.text:000000000000350A                 cmovz   rdi, rax
.text:000000000000350E                 mov     eax, [rdi+4]
.text:0000000000003511                 mov     [rdi+4], esi
.text:0000000000003514                 retn
.text:0000000000003514 ; } // starts at 3500
.text:0000000000003514 set_quoting_flags endp
.text:0000000000003514
.text:0000000000003514 ; ---------------------------------------------------------------------------
.text:0000000000003515                 align 20h
.text:0000000000003520
.text:0000000000003520 ; =============== S U B R O U T I N E =======================================
.text:0000000000003520
.text:0000000000003520 ; Attributes: info_from_lumina
.text:0000000000003520
.text:0000000000003520 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003520                 public set_custom_quoting
.text:0000000000003520 set_custom_quoting proc near
.text:0000000000003520 ; __unwind {
.text:0000000000003520                 lea     rax, default_quoting_options
.text:0000000000003527                 test    rdi, rdi
.text:000000000000352A                 cmovz   rdi, rax
.text:000000000000352E                 test    rsi, rsi
.text:0000000000003531                 mov     dword ptr [rdi], 0Ah
.text:0000000000003537                 jz      short loc_3547
.text:0000000000003539                 test    rdx, rdx
.text:000000000000353C                 jz      short loc_3547
.text:000000000000353E                 mov     [rdi+28h], rsi
.text:0000000000003542                 mov     [rdi+30h], rdx
.text:0000000000003546                 retn
.text:0000000000003547 ; ---------------------------------------------------------------------------
.text:0000000000003547
.text:0000000000003547 loc_3547:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003547                                         ; set_custom_quoting+1C↑j
.text:0000000000003547                 sub     rsp, 8
.text:000000000000354B                 call    _abort
.text:000000000000354B ; } // starts at 3520
.text:000000000000354B set_custom_quoting endp
.text:000000000000354B
.text:0000000000003550
.text:0000000000003550 ; =============== S U B R O U T I N E =======================================
.text:0000000000003550
.text:0000000000003550 ; Attributes: info_from_lumina
.text:0000000000003550
.text:0000000000003550 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003550                 public quotearg_buffer
.text:0000000000003550 quotearg_buffer proc near
.text:0000000000003550
.text:0000000000003550 var_40          = qword ptr -40h
.text:0000000000003550
.text:0000000000003550 ; __unwind {
.text:0000000000003550                 push    r15
.text:0000000000003552                 push    r14
.text:0000000000003554                 lea     rax, default_quoting_options
.text:000000000000355B                 push    r13
.text:000000000000355D                 push    r12
.text:000000000000355F                 mov     r13, rdi
.text:0000000000003562                 push    rbp
.text:0000000000003563                 push    rbx
.text:0000000000003564                 mov     rbx, r8
.text:0000000000003567                 mov     r14, rsi
.text:000000000000356A                 mov     r15, rdx
.text:000000000000356D                 sub     rsp, 18h
.text:0000000000003571                 test    r8, r8
.text:0000000000003574                 cmovz   rbx, rax
.text:0000000000003578                 mov     [rsp+48h+var_40], rcx
.text:000000000000357D                 call    ___errno_location
.text:0000000000003582                 mov     r12d, [rax]
.text:0000000000003585                 mov     rbp, rax
.text:0000000000003588                 lea     rax, [rbx+8]
.text:000000000000358C                 sub     rsp, 8
.text:0000000000003590                 mov     r9d, [rbx+4]
.text:0000000000003594                 push    qword ptr [rbx+30h]
.text:0000000000003597                 mov     r8d, [rbx]
.text:000000000000359A                 push    qword ptr [rbx+28h]
.text:000000000000359D                 mov     rdx, r15
.text:00000000000035A0                 push    rax
.text:00000000000035A1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000035A6                 mov     rsi, r14
.text:00000000000035A9                 mov     rdi, r13
.text:00000000000035AC                 call    quotearg_buffer_restyled
.text:00000000000035B1                 mov     [rbp+0], r12d
.text:00000000000035B5                 add     rsp, 38h
.text:00000000000035B9                 pop     rbx
.text:00000000000035BA                 pop     rbp
.text:00000000000035BB                 pop     r12
.text:00000000000035BD                 pop     r13
.text:00000000000035BF                 pop     r14
.text:00000000000035C1                 pop     r15
.text:00000000000035C3                 retn
.text:00000000000035C3 ; } // starts at 3550
.text:00000000000035C3 quotearg_buffer endp
.text:00000000000035C3
.text:00000000000035C3 ; ---------------------------------------------------------------------------
.text:00000000000035C4                 align 10h
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0 ; Attributes: info_from_lumina
.text:00000000000035D0
.text:00000000000035D0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000035D0                 public quotearg_alloc_mem
.text:00000000000035D0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000035D0
.text:00000000000035D0 var_5C          = dword ptr -5Ch
.text:00000000000035D0 var_58          = qword ptr -58h
.text:00000000000035D0 var_50          = qword ptr -50h
.text:00000000000035D0 var_48          = qword ptr -48h
.text:00000000000035D0 var_40          = qword ptr -40h
.text:00000000000035D0
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 push    r15
.text:00000000000035D2                 push    r14
.text:00000000000035D4                 lea     rax, default_quoting_options
.text:00000000000035DB                 push    r13
.text:00000000000035DD                 push    r12
.text:00000000000035DF                 mov     r12, rdx
.text:00000000000035E2                 push    rbp
.text:00000000000035E3                 push    rbx
.text:00000000000035E4                 mov     rbx, rcx
.text:00000000000035E7                 mov     r14, rdi
.text:00000000000035EA                 mov     r15, rsi
.text:00000000000035ED                 sub     rsp, 38h
.text:00000000000035F1                 test    rcx, rcx
.text:00000000000035F4                 cmovz   rbx, rax
.text:00000000000035F8                 xor     ebp, ebp
.text:00000000000035FA                 call    ___errno_location
.text:00000000000035FF                 test    r12, r12
.text:0000000000003602                 mov     r13, rax
.text:0000000000003605                 mov     eax, [rax]
.text:0000000000003607                 setz    bpl
.text:000000000000360B                 or      ebp, [rbx+4]
.text:000000000000360E                 lea     r10, [rbx+8]
.text:0000000000003612                 sub     rsp, 8
.text:0000000000003616                 mov     r8d, [rbx]
.text:0000000000003619                 mov     rcx, r15
.text:000000000000361C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003620                 push    qword ptr [rbx+30h]
.text:0000000000003623                 mov     rdx, r14
.text:0000000000003626                 push    qword ptr [rbx+28h]
.text:0000000000003629                 push    r10
.text:000000000000362B                 xor     esi, esi
.text:000000000000362D                 mov     r9d, ebp
.text:0000000000003630                 xor     edi, edi
.text:0000000000003632                 mov     [rsp+88h+var_48], r10
.text:0000000000003637                 call    quotearg_buffer_restyled
.text:000000000000363C                 lea     rsi, [rax+1]
.text:0000000000003640                 mov     [rsp+88h+var_40], rax
.text:0000000000003645                 add     rsp, 20h
.text:0000000000003649                 mov     rdi, rsi
.text:000000000000364C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003651                 call    xmalloc
.text:0000000000003656                 mov     [rsp+68h+var_58], rax
.text:000000000000365B                 sub     rsp, 8
.text:000000000000365F                 push    qword ptr [rbx+30h]
.text:0000000000003662                 push    qword ptr [rbx+28h]
.text:0000000000003665                 mov     r10, [rsp+80h+var_48]
.text:000000000000366A                 mov     r9d, ebp
.text:000000000000366D                 mov     r8d, [rbx]
.text:0000000000003670                 mov     rcx, r15
.text:0000000000003673                 mov     rdx, r14
.text:0000000000003676                 mov     rdi, rax
.text:0000000000003679                 push    r10
.text:000000000000367B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003680                 call    quotearg_buffer_restyled
.text:0000000000003685                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003689                 add     rsp, 20h
.text:000000000000368D                 test    r12, r12
.text:0000000000003690                 mov     [r13+0], eax
.text:0000000000003694                 jz      short loc_369F
.text:0000000000003696                 mov     r11, [rsp+68h+var_40]
.text:000000000000369B                 mov     [r12], r11
.text:000000000000369F
.text:000000000000369F loc_369F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000369F                 mov     rax, [rsp+68h+var_58]
.text:00000000000036A4                 add     rsp, 38h
.text:00000000000036A8                 pop     rbx
.text:00000000000036A9                 pop     rbp
.text:00000000000036AA                 pop     r12
.text:00000000000036AC                 pop     r13
.text:00000000000036AE                 pop     r14
.text:00000000000036B0                 pop     r15
.text:00000000000036B2                 retn
.text:00000000000036B2 ; } // starts at 35D0
.text:00000000000036B2 quotearg_alloc_mem endp
.text:00000000000036B2
.text:00000000000036B2 ; ---------------------------------------------------------------------------
.text:00000000000036B3                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0
.text:00000000000036C0                 public quotearg_alloc
.text:00000000000036C0 quotearg_alloc  proc near
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 mov     rcx, rdx
.text:00000000000036C3                 xor     edx, edx
.text:00000000000036C5                 jmp     quotearg_alloc_mem
.text:00000000000036C5 ; } // starts at 36C0
.text:00000000000036C5 quotearg_alloc  endp
.text:00000000000036C5
.text:00000000000036C5 ; ---------------------------------------------------------------------------
.text:00000000000036CA                 align 10h
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0 ; Attributes: info_from_lumina
.text:00000000000036D0
.text:00000000000036D0 ; void __cdecl quotearg_free()
.text:00000000000036D0                 public quotearg_free
.text:00000000000036D0 quotearg_free   proc near
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 mov     eax, cs:nslots
.text:00000000000036D6                 push    r12
.text:00000000000036D8                 mov     r12, cs:slotvec
.text:00000000000036DF                 push    rbp
.text:00000000000036E0                 push    rbx
.text:00000000000036E1                 cmp     eax, 1
.text:00000000000036E4                 jle     short loc_3711
.text:00000000000036E6                 sub     eax, 2
.text:00000000000036E9                 lea     rbx, [r12+18h]
.text:00000000000036EE                 shl     rax, 4
.text:00000000000036F2                 lea     rbp, [r12+rax+28h]
.text:00000000000036F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003700                 mov     rdi, [rbx]      ; ptr
.text:0000000000003703                 add     rbx, 10h
.text:0000000000003707                 call    _free
.text:000000000000370C                 cmp     rbx, rbp
.text:000000000000370F                 jnz     short loc_3700
.text:0000000000003711
.text:0000000000003711 loc_3711:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003711                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003716                 lea     rbx, slot0
.text:000000000000371D                 cmp     rdi, rbx
.text:0000000000003720                 jz      short loc_3739
.text:0000000000003722                 call    _free
.text:0000000000003727                 mov     cs:slotvec0, 100h
.text:0000000000003732                 mov     cs:off_207078, rbx
.text:0000000000003739
.text:0000000000003739 loc_3739:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003739                 lea     rbx, slotvec0
.text:0000000000003740                 cmp     r12, rbx
.text:0000000000003743                 jz      short loc_3754
.text:0000000000003745                 mov     rdi, r12        ; ptr
.text:0000000000003748                 call    _free
.text:000000000000374D                 mov     cs:slotvec, rbx
.text:0000000000003754
.text:0000000000003754 loc_3754:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003754                 pop     rbx
.text:0000000000003755                 mov     cs:nslots, 1
.text:000000000000375F                 pop     rbp
.text:0000000000003760                 pop     r12
.text:0000000000003762                 retn
.text:0000000000003762 ; } // starts at 36D0
.text:0000000000003762 quotearg_free   endp
.text:0000000000003762
.text:0000000000003762 ; ---------------------------------------------------------------------------
.text:0000000000003763                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770
.text:0000000000003770                 public quotearg_n
.text:0000000000003770 quotearg_n      proc near
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 lea     rcx, default_quoting_options
.text:0000000000003777                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000377E                 jmp     quotearg_n_options
.text:000000000000377E ; } // starts at 3770
.text:000000000000377E quotearg_n      endp
.text:000000000000377E
.text:000000000000377E ; ---------------------------------------------------------------------------
.text:0000000000003783                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790
.text:0000000000003790                 public quotearg_n_mem
.text:0000000000003790 quotearg_n_mem  proc near
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 lea     rcx, default_quoting_options
.text:0000000000003797                 jmp     quotearg_n_options
.text:0000000000003797 ; } // starts at 3790
.text:0000000000003797 quotearg_n_mem  endp
.text:0000000000003797
.text:0000000000003797 ; ---------------------------------------------------------------------------
.text:000000000000379C                 align 20h
.text:00000000000037A0
.text:00000000000037A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037A0
.text:00000000000037A0
.text:00000000000037A0                 public quotearg
.text:00000000000037A0 quotearg        proc near
.text:00000000000037A0 ; __unwind {
.text:00000000000037A0                 lea     rcx, default_quoting_options
.text:00000000000037A7                 mov     rsi, rdi
.text:00000000000037AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000037B1                 xor     edi, edi
.text:00000000000037B3                 jmp     quotearg_n_options
.text:00000000000037B3 ; } // starts at 37A0
.text:00000000000037B3 quotearg        endp
.text:00000000000037B3
.text:00000000000037B3 ; ---------------------------------------------------------------------------
.text:00000000000037B8                 align 20h
.text:00000000000037C0
.text:00000000000037C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037C0
.text:00000000000037C0
.text:00000000000037C0                 public quotearg_mem
.text:00000000000037C0 quotearg_mem    proc near
.text:00000000000037C0 ; __unwind {
.text:00000000000037C0                 lea     rcx, default_quoting_options
.text:00000000000037C7                 mov     rdx, rsi
.text:00000000000037CA                 mov     rsi, rdi
.text:00000000000037CD                 xor     edi, edi
.text:00000000000037CF                 jmp     quotearg_n_options
.text:00000000000037CF ; } // starts at 37C0
.text:00000000000037CF quotearg_mem    endp
.text:00000000000037CF
.text:00000000000037CF ; ---------------------------------------------------------------------------
.text:00000000000037D4                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0 ; Attributes: info_from_lumina
.text:00000000000037E0
.text:00000000000037E0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000037E0                 public quotearg_n_style
.text:00000000000037E0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000037E0
.text:00000000000037E0 var_48          = dword ptr -48h
.text:00000000000037E0 var_44          = qword ptr -44h
.text:00000000000037E0 var_3C          = qword ptr -3Ch
.text:00000000000037E0 var_34          = qword ptr -34h
.text:00000000000037E0 var_2C          = qword ptr -2Ch
.text:00000000000037E0 var_24          = qword ptr -24h
.text:00000000000037E0 var_1C          = qword ptr -1Ch
.text:00000000000037E0 var_14          = dword ptr -14h
.text:00000000000037E0 var_10          = qword ptr -10h
.text:00000000000037E0
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 sub     rsp, 48h
.text:00000000000037E4                 mov     rax, rdx
.text:00000000000037E7                 mov     rdx, fs:28h
.text:00000000000037F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000037F5                 xor     edx, edx
.text:00000000000037F7                 cmp     esi, 0Ah
.text:00000000000037FA                 jz      short loc_3864
.text:00000000000037FC                 mov     [rsp+48h+var_48], esi
.text:00000000000037FF                 mov     rcx, rsp
.text:0000000000003802                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003809                 mov     rsi, rax
.text:000000000000380C                 mov     [rsp+48h+var_44], 0
.text:0000000000003815                 mov     [rsp+48h+var_3C], 0
.text:000000000000381E                 mov     [rsp+48h+var_34], 0
.text:0000000000003827                 mov     [rsp+48h+var_2C], 0
.text:0000000000003830                 mov     [rsp+48h+var_24], 0
.text:0000000000003839                 mov     [rsp+48h+var_1C], 0
.text:0000000000003842                 mov     [rsp+48h+var_14], 0
.text:000000000000384A                 call    quotearg_n_options
.text:000000000000384F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003854                 xor     rcx, fs:28h
.text:000000000000385D                 jnz     short loc_3869
.text:000000000000385F                 add     rsp, 48h
.text:0000000000003863                 retn
.text:0000000000003864 ; ---------------------------------------------------------------------------
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003864                 call    _abort
.text:0000000000003869 ; ---------------------------------------------------------------------------
.text:0000000000003869
.text:0000000000003869 loc_3869:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003869                 call    ___stack_chk_fail
.text:0000000000003869 ; } // starts at 37E0
.text:0000000000003869 quotearg_n_style endp
.text:0000000000003869
.text:0000000000003869 ; ---------------------------------------------------------------------------
.text:000000000000386E                 align 10h
.text:0000000000003870
.text:0000000000003870 ; =============== S U B R O U T I N E =======================================
.text:0000000000003870
.text:0000000000003870 ; Attributes: info_from_lumina
.text:0000000000003870
.text:0000000000003870 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003870                 public quotearg_n_style_mem
.text:0000000000003870 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003870
.text:0000000000003870 var_48          = dword ptr -48h
.text:0000000000003870 var_44          = qword ptr -44h
.text:0000000000003870 var_3C          = qword ptr -3Ch
.text:0000000000003870 var_34          = qword ptr -34h
.text:0000000000003870 var_2C          = qword ptr -2Ch
.text:0000000000003870 var_24          = qword ptr -24h
.text:0000000000003870 var_1C          = qword ptr -1Ch
.text:0000000000003870 var_14          = dword ptr -14h
.text:0000000000003870 var_10          = qword ptr -10h
.text:0000000000003870
.text:0000000000003870 ; __unwind {
.text:0000000000003870                 sub     rsp, 48h
.text:0000000000003874                 mov     rax, rdx
.text:0000000000003877                 mov     rdx, rcx
.text:000000000000387A                 mov     rcx, fs:28h
.text:0000000000003883                 mov     [rsp+48h+var_10], rcx
.text:0000000000003888                 xor     ecx, ecx
.text:000000000000388A                 cmp     esi, 0Ah
.text:000000000000388D                 jz      short loc_38F0
.text:000000000000388F                 mov     [rsp+48h+var_48], esi
.text:0000000000003892                 mov     rcx, rsp
.text:0000000000003895                 mov     rsi, rax
.text:0000000000003898                 mov     [rsp+48h+var_44], 0
.text:00000000000038A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000038AA                 mov     [rsp+48h+var_34], 0
.text:00000000000038B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000038BC                 mov     [rsp+48h+var_24], 0
.text:00000000000038C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000038CE                 mov     [rsp+48h+var_14], 0
.text:00000000000038D6                 call    quotearg_n_options
.text:00000000000038DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000038E0                 xor     rdx, fs:28h
.text:00000000000038E9                 jnz     short loc_38F5
.text:00000000000038EB                 add     rsp, 48h
.text:00000000000038EF                 retn
.text:00000000000038F0 ; ---------------------------------------------------------------------------
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000038F0                 call    _abort
.text:00000000000038F5 ; ---------------------------------------------------------------------------
.text:00000000000038F5
.text:00000000000038F5 loc_38F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000038F5                 call    ___stack_chk_fail
.text:00000000000038F5 ; } // starts at 3870
.text:00000000000038F5 quotearg_n_style_mem endp
.text:00000000000038F5
.text:00000000000038F5 ; ---------------------------------------------------------------------------
.text:00000000000038FA                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900
.text:0000000000003900                 public quotearg_style
.text:0000000000003900 quotearg_style  proc near
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 mov     rdx, rsi
.text:0000000000003903                 mov     esi, edi
.text:0000000000003905                 xor     edi, edi
.text:0000000000003907                 jmp     quotearg_n_style
.text:0000000000003907 ; } // starts at 3900
.text:0000000000003907 quotearg_style  endp
.text:0000000000003907
.text:0000000000003907 ; ---------------------------------------------------------------------------
.text:000000000000390C                 align 10h
.text:0000000000003910
.text:0000000000003910 ; =============== S U B R O U T I N E =======================================
.text:0000000000003910
.text:0000000000003910
.text:0000000000003910                 public quotearg_style_mem
.text:0000000000003910 quotearg_style_mem proc near
.text:0000000000003910 ; __unwind {
.text:0000000000003910                 mov     rcx, rdx
.text:0000000000003913                 mov     rdx, rsi
.text:0000000000003916                 mov     esi, edi
.text:0000000000003918                 xor     edi, edi
.text:000000000000391A                 jmp     quotearg_n_style_mem
.text:000000000000391A ; } // starts at 3910
.text:000000000000391A quotearg_style_mem endp
.text:000000000000391A
.text:000000000000391A ; ---------------------------------------------------------------------------
.text:000000000000391F                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920 ; Attributes: info_from_lumina
.text:0000000000003920
.text:0000000000003920 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003920                 public quotearg_char_mem
.text:0000000000003920 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003920                                         ; quotearg_colon+C↓j ...
.text:0000000000003920
.text:0000000000003920 var_48          = xmmword ptr -48h
.text:0000000000003920 var_38          = xmmword ptr -38h
.text:0000000000003920 var_28          = xmmword ptr -28h
.text:0000000000003920 var_18          = qword ptr -18h
.text:0000000000003920 var_10          = qword ptr -10h
.text:0000000000003920
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 sub     rsp, 48h
.text:0000000000003924                 mov     ecx, edx
.text:0000000000003926                 mov     rax, fs:28h
.text:000000000000392F                 mov     [rsp+48h+var_10], rax
.text:0000000000003934                 xor     eax, eax
.text:0000000000003936                 mov     rax, cs:qword_207230
.text:000000000000393D                 mov     r8, rsp
.text:0000000000003940                 and     ecx, 1Fh
.text:0000000000003943                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000394B                 mov     [rsp+48h+var_18], rax
.text:0000000000003950                 mov     eax, edx
.text:0000000000003952                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003956                 shr     al, 5
.text:0000000000003959                 movzx   eax, al
.text:000000000000395C                 lea     r9, [r8+rax*4+8]
.text:0000000000003961                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003969                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000396E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003976                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000397B                 mov     edx, [r9]
.text:000000000000397E                 mov     eax, edx
.text:0000000000003980                 shr     eax, cl
.text:0000000000003982                 not     eax
.text:0000000000003984                 and     eax, 1
.text:0000000000003987                 shl     eax, cl
.text:0000000000003989                 mov     rcx, r8
.text:000000000000398C                 xor     eax, edx
.text:000000000000398E                 mov     rdx, rsi
.text:0000000000003991                 mov     rsi, rdi
.text:0000000000003994                 mov     [r9], eax
.text:0000000000003997                 xor     edi, edi
.text:0000000000003999                 call    quotearg_n_options
.text:000000000000399E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000039A3                 xor     rsi, fs:28h
.text:00000000000039AC                 jnz     short loc_39B3
.text:00000000000039AE                 add     rsp, 48h
.text:00000000000039B2                 retn
.text:00000000000039B3 ; ---------------------------------------------------------------------------
.text:00000000000039B3
.text:00000000000039B3 loc_39B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000039B3                 call    ___stack_chk_fail
.text:00000000000039B3 ; } // starts at 3920
.text:00000000000039B3 quotearg_char_mem endp
.text:00000000000039B3
.text:00000000000039B3 ; ---------------------------------------------------------------------------
.text:00000000000039B8                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0
.text:00000000000039C0                 public quotearg_char
.text:00000000000039C0 quotearg_char   proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 movsx   edx, sil
.text:00000000000039C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000039CB                 jmp     quotearg_char_mem
.text:00000000000039CB ; } // starts at 39C0
.text:00000000000039CB quotearg_char   endp
.text:00000000000039CB
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0
.text:00000000000039D0                 public quotearg_colon
.text:00000000000039D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 mov     edx, 3Ah ; ':'
.text:00000000000039D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000039DC                 jmp     quotearg_char_mem
.text:00000000000039DC ; } // starts at 39D0
.text:00000000000039DC quotearg_colon  endp
.text:00000000000039DC
.text:00000000000039DC ; ---------------------------------------------------------------------------
.text:00000000000039E1                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0                 public quotearg_colon_mem
.text:00000000000039F0 quotearg_colon_mem proc near
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 mov     edx, 3Ah ; ':'
.text:00000000000039F5                 jmp     quotearg_char_mem
.text:00000000000039F5 ; } // starts at 39F0
.text:00000000000039F5 quotearg_colon_mem endp
.text:00000000000039F5
.text:00000000000039F5 ; ---------------------------------------------------------------------------
.text:00000000000039FA                 align 20h
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00 ; Attributes: info_from_lumina
.text:0000000000003A00
.text:0000000000003A00 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003A00                 public quotearg_n_style_colon
.text:0000000000003A00 quotearg_n_style_colon proc near
.text:0000000000003A00
.text:0000000000003A00 var_48          = dword ptr -48h
.text:0000000000003A00 var_44          = qword ptr -44h
.text:0000000000003A00 var_3C          = qword ptr -3Ch
.text:0000000000003A00 var_34          = qword ptr -34h
.text:0000000000003A00 var_2C          = qword ptr -2Ch
.text:0000000000003A00 var_24          = qword ptr -24h
.text:0000000000003A00 var_1C          = qword ptr -1Ch
.text:0000000000003A00 var_14          = dword ptr -14h
.text:0000000000003A00 var_10          = qword ptr -10h
.text:0000000000003A00
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 sub     rsp, 48h
.text:0000000000003A04                 mov     rax, rdx
.text:0000000000003A07                 mov     rdx, fs:28h
.text:0000000000003A10                 mov     [rsp+48h+var_10], rdx
.text:0000000000003A15                 xor     edx, edx
.text:0000000000003A17                 cmp     esi, 0Ah
.text:0000000000003A1A                 jz      short loc_3A84
.text:0000000000003A1C                 mov     [rsp+48h+var_48], esi
.text:0000000000003A1F                 mov     rcx, rsp
.text:0000000000003A22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A29                 mov     rsi, rax
.text:0000000000003A2C                 mov     [rsp+48h+var_44], 0
.text:0000000000003A35                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003A3E                 mov     [rsp+48h+var_34], 0
.text:0000000000003A47                 mov     [rsp+48h+var_2C], 0
.text:0000000000003A50                 mov     [rsp+48h+var_24], 0
.text:0000000000003A59                 mov     [rsp+48h+var_1C], 0
.text:0000000000003A62                 mov     [rsp+48h+var_14], 0
.text:0000000000003A6A                 call    quotearg_n_options
.text:0000000000003A6F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003A74                 xor     rcx, fs:28h
.text:0000000000003A7D                 jnz     short loc_3A89
.text:0000000000003A7F                 add     rsp, 48h
.text:0000000000003A83                 retn
.text:0000000000003A84 ; ---------------------------------------------------------------------------
.text:0000000000003A84
.text:0000000000003A84 loc_3A84:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003A84                 call    _abort
.text:0000000000003A89 ; ---------------------------------------------------------------------------
.text:0000000000003A89
.text:0000000000003A89 loc_3A89:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003A89                 call    ___stack_chk_fail
.text:0000000000003A89 ; } // starts at 3A00
.text:0000000000003A89 quotearg_n_style_colon endp
.text:0000000000003A89
.text:0000000000003A89 ; ---------------------------------------------------------------------------
.text:0000000000003A8E                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90 ; Attributes: info_from_lumina
.text:0000000000003A90
.text:0000000000003A90 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003A90                 public quotearg_n_custom_mem
.text:0000000000003A90 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003A90                                         ; quotearg_custom+12↓j ...
.text:0000000000003A90
.text:0000000000003A90 var_48          = xmmword ptr -48h
.text:0000000000003A90 var_38          = xmmword ptr -38h
.text:0000000000003A90 var_28          = xmmword ptr -28h
.text:0000000000003A90 var_18          = qword ptr -18h
.text:0000000000003A90 var_10          = qword ptr -10h
.text:0000000000003A90
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 sub     rsp, 48h
.text:0000000000003A94                 mov     r9, rcx
.text:0000000000003A97                 mov     rcx, cs:qword_207230
.text:0000000000003A9E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003AA6                 mov     rax, fs:28h
.text:0000000000003AAF                 mov     [rsp+48h+var_10], rax
.text:0000000000003AB4                 xor     eax, eax
.text:0000000000003AB6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003ABA                 test    rsi, rsi
.text:0000000000003ABD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003AC2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003AC9                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003AD1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003AD6                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003ADE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003AE3                 jz      short loc_3B17
.text:0000000000003AE5                 test    rdx, rdx
.text:0000000000003AE8                 jz      short loc_3B17
.text:0000000000003AEA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003AEF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003AF4                 mov     rcx, rsp
.text:0000000000003AF7                 mov     rdx, r8
.text:0000000000003AFA                 mov     rsi, r9
.text:0000000000003AFD                 call    quotearg_n_options
.text:0000000000003B02                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003B07                 xor     rdi, fs:28h
.text:0000000000003B10                 jnz     short loc_3B1C
.text:0000000000003B12                 add     rsp, 48h
.text:0000000000003B16                 retn
.text:0000000000003B17 ; ---------------------------------------------------------------------------
.text:0000000000003B17
.text:0000000000003B17 loc_3B17:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003B17                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003B17                 call    _abort
.text:0000000000003B1C ; ---------------------------------------------------------------------------
.text:0000000000003B1C
.text:0000000000003B1C loc_3B1C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003B1C                 call    ___stack_chk_fail
.text:0000000000003B1C ; } // starts at 3A90
.text:0000000000003B1C quotearg_n_custom_mem endp
.text:0000000000003B1C
.text:0000000000003B1C ; ---------------------------------------------------------------------------
.text:0000000000003B21                 align 10h
.text:0000000000003B30
.text:0000000000003B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B30
.text:0000000000003B30
.text:0000000000003B30                 public quotearg_n_custom
.text:0000000000003B30 quotearg_n_custom proc near
.text:0000000000003B30 ; __unwind {
.text:0000000000003B30                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B37                 jmp     quotearg_n_custom_mem
.text:0000000000003B37 ; } // starts at 3B30
.text:0000000000003B37 quotearg_n_custom endp
.text:0000000000003B37
.text:0000000000003B37 ; ---------------------------------------------------------------------------
.text:0000000000003B3C                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40
.text:0000000000003B40                 public quotearg_custom
.text:0000000000003B40 quotearg_custom proc near
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 mov     rcx, rdx
.text:0000000000003B43                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B4A                 mov     rdx, rsi
.text:0000000000003B4D                 mov     rsi, rdi
.text:0000000000003B50                 xor     edi, edi
.text:0000000000003B52                 jmp     quotearg_n_custom_mem
.text:0000000000003B52 ; } // starts at 3B40
.text:0000000000003B52 quotearg_custom endp
.text:0000000000003B52
.text:0000000000003B52 ; ---------------------------------------------------------------------------
.text:0000000000003B57                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60
.text:0000000000003B60                 public quotearg_custom_mem
.text:0000000000003B60 quotearg_custom_mem proc near
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 mov     r8, rcx
.text:0000000000003B63                 mov     rcx, rdx
.text:0000000000003B66                 mov     rdx, rsi
.text:0000000000003B69                 mov     rsi, rdi
.text:0000000000003B6C                 xor     edi, edi
.text:0000000000003B6E                 jmp     quotearg_n_custom_mem
.text:0000000000003B6E ; } // starts at 3B60
.text:0000000000003B6E quotearg_custom_mem endp
.text:0000000000003B6E
.text:0000000000003B6E ; ---------------------------------------------------------------------------
.text:0000000000003B73                 align 20h
.text:0000000000003B80
.text:0000000000003B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B80
.text:0000000000003B80
.text:0000000000003B80                 public quote_n_mem
.text:0000000000003B80 quote_n_mem     proc near
.text:0000000000003B80 ; __unwind {
.text:0000000000003B80                 lea     rcx, quote_quoting_options
.text:0000000000003B87                 jmp     quotearg_n_options
.text:0000000000003B87 ; } // starts at 3B80
.text:0000000000003B87 quote_n_mem     endp
.text:0000000000003B87
.text:0000000000003B87 ; ---------------------------------------------------------------------------
.text:0000000000003B8C                 align 10h
.text:0000000000003B90
.text:0000000000003B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B90
.text:0000000000003B90
.text:0000000000003B90                 public quote_mem
.text:0000000000003B90 quote_mem       proc near
.text:0000000000003B90 ; __unwind {
.text:0000000000003B90                 lea     rcx, quote_quoting_options
.text:0000000000003B97                 mov     rdx, rsi
.text:0000000000003B9A                 mov     rsi, rdi
.text:0000000000003B9D                 xor     edi, edi
.text:0000000000003B9F                 jmp     quotearg_n_options
.text:0000000000003B9F ; } // starts at 3B90
.text:0000000000003B9F quote_mem       endp
.text:0000000000003B9F
.text:0000000000003B9F ; ---------------------------------------------------------------------------
.text:0000000000003BA4                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BB0
.text:0000000000003BB0
.text:0000000000003BB0                 public quote_n
.text:0000000000003BB0 quote_n         proc near
.text:0000000000003BB0 ; __unwind {
.text:0000000000003BB0                 lea     rcx, quote_quoting_options
.text:0000000000003BB7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BBE                 jmp     quotearg_n_options
.text:0000000000003BBE ; } // starts at 3BB0
.text:0000000000003BBE quote_n         endp
.text:0000000000003BBE
.text:0000000000003BBE ; ---------------------------------------------------------------------------
.text:0000000000003BC3                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0
.text:0000000000003BD0                 public quote
.text:0000000000003BD0 quote           proc near               ; CODE XREF: main+1A9↑p
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 lea     rcx, quote_quoting_options
.text:0000000000003BD7                 mov     rsi, rdi
.text:0000000000003BDA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BE1                 xor     edi, edi
.text:0000000000003BE3                 jmp     quotearg_n_options
.text:0000000000003BE3 ; } // starts at 3BD0
.text:0000000000003BE3 quote           endp
.text:0000000000003BE3
.text:0000000000003BE3 ; ---------------------------------------------------------------------------
.text:0000000000003BE8                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0
.text:0000000000003BF0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003BF0                 public version_etc_arn
.text:0000000000003BF0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_402B↓j
.text:0000000000003BF0                                         ; version_etc_va:loc_407B↓p ...
.text:0000000000003BF0
.text:0000000000003BF0 var_58          = qword ptr -58h
.text:0000000000003BF0 var_50          = qword ptr -50h
.text:0000000000003BF0 var_48          = qword ptr -48h
.text:0000000000003BF0 var_40          = qword ptr -40h
.text:0000000000003BF0
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 push    r15
.text:0000000000003BF2                 push    r14
.text:0000000000003BF4                 push    r13
.text:0000000000003BF6                 push    r12
.text:0000000000003BF8                 mov     r12, r9
.text:0000000000003BFB                 push    rbp
.text:0000000000003BFC                 push    rbx
.text:0000000000003BFD                 mov     rbp, rdi
.text:0000000000003C00                 mov     rbx, r8
.text:0000000000003C03                 sub     rsp, 28h
.text:0000000000003C07                 test    rsi, rsi
.text:0000000000003C0A                 jz      loc_3D28
.text:0000000000003C10                 mov     r8, rdx
.text:0000000000003C13                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003C1A                 mov     r9, rcx
.text:0000000000003C1D                 xor     eax, eax
.text:0000000000003C1F                 mov     rcx, rsi
.text:0000000000003C22                 mov     esi, 1
.text:0000000000003C27                 call    ___fprintf_chk
.text:0000000000003C2C
.text:0000000000003C2C loc_3C2C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003C2C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003C33                 xor     edi, edi        ; domainname
.text:0000000000003C35                 mov     edx, 5          ; category
.text:0000000000003C3A                 call    _dcgettext
.text:0000000000003C3F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003C46                 mov     rcx, rax
.text:0000000000003C49                 mov     r8d, 7E3h
.text:0000000000003C4F                 mov     esi, 1
.text:0000000000003C54                 mov     rdi, rbp
.text:0000000000003C57                 xor     eax, eax
.text:0000000000003C59                 call    ___fprintf_chk
.text:0000000000003C5E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003C65                 xor     edi, edi        ; domainname
.text:0000000000003C67                 mov     edx, 5          ; category
.text:0000000000003C6C                 call    _dcgettext
.text:0000000000003C71                 mov     rsi, rbp        ; stream
.text:0000000000003C74                 mov     rdi, rax        ; s
.text:0000000000003C77                 call    _fputs_unlocked
.text:0000000000003C7C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003C80                 ja      def_3C94        ; jumptable 0000000000003C94 default case
.text:0000000000003C86                 lea     rdx, jpt_3C94
.text:0000000000003C8D                 movsxd  rax, ds:(jpt_3C94 - 5548h)[rdx+r12*4]
.text:0000000000003C91                 add     rax, rdx
.text:0000000000003C94                 jmp     rax             ; switch jump
.text:0000000000003C94 ; ---------------------------------------------------------------------------
.text:0000000000003C96                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CA0                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003CA0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003C94 case 8
.text:0000000000003CA4                 mov     rax, [rbx+10h]
.text:0000000000003CA8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003CAF                 mov     r8, [rbx+8]
.text:0000000000003CB3                 mov     edx, 5          ; category
.text:0000000000003CB8                 xor     edi, edi        ; domainname
.text:0000000000003CBA                 mov     r13, [rbx+30h]
.text:0000000000003CBE                 mov     r12, [rbx+28h]
.text:0000000000003CC2                 mov     [rsp+58h+var_48], r9
.text:0000000000003CC7                 mov     r15, [rbx+20h]
.text:0000000000003CCB                 mov     r14, [rbx+18h]
.text:0000000000003CCF                 mov     [rsp+58h+var_58], rax
.text:0000000000003CD3                 mov     [rsp+58h+var_50], r8
.text:0000000000003CD8                 mov     rbx, [rbx]
.text:0000000000003CDB                 call    _dcgettext
.text:0000000000003CE0                 sub     rsp, 8
.text:0000000000003CE4
.text:0000000000003CE4 loc_3CE4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003CE4                 mov     r9, [rsp+60h+var_48]
.text:0000000000003CE9                 mov     rdx, rax
.text:0000000000003CEC                 mov     rcx, rbx
.text:0000000000003CEF                 mov     esi, 1
.text:0000000000003CF4                 mov     rdi, rbp
.text:0000000000003CF7                 xor     eax, eax
.text:0000000000003CF9                 push    r9
.text:0000000000003CFB                 push    r13
.text:0000000000003CFD                 push    r12
.text:0000000000003CFF                 push    r15
.text:0000000000003D01                 push    r14
.text:0000000000003D03                 mov     r9, [rsp+88h+var_58]
.text:0000000000003D08                 mov     r8, [rsp+88h+var_50]
.text:0000000000003D0D                 call    ___fprintf_chk
.text:0000000000003D12                 add     rsp, 30h
.text:0000000000003D16
.text:0000000000003D16 loc_3D16:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D16                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003D16                 add     rsp, 28h        ; jumptable 0000000000003C94 case 0
.text:0000000000003D1A                 pop     rbx
.text:0000000000003D1B                 pop     rbp
.text:0000000000003D1C                 pop     r12
.text:0000000000003D1E                 pop     r13
.text:0000000000003D20                 pop     r14
.text:0000000000003D22                 pop     r15
.text:0000000000003D24                 retn
.text:0000000000003D24 ; ---------------------------------------------------------------------------
.text:0000000000003D25                 align 8
.text:0000000000003D28
.text:0000000000003D28 loc_3D28:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003D28                 mov     r8, rcx
.text:0000000000003D2B                 mov     rcx, rdx
.text:0000000000003D2E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003D35                 mov     esi, 1
.text:0000000000003D3A                 xor     eax, eax
.text:0000000000003D3C                 call    ___fprintf_chk
.text:0000000000003D41                 jmp     loc_3C2C
.text:0000000000003D41 ; ---------------------------------------------------------------------------
.text:0000000000003D46                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D50                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003D50                 mov     r10, [rbx+40h]  ; jumptable 0000000000003C94 case 9
.text:0000000000003D54                 mov     r9, [rbx+38h]
.text:0000000000003D58                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003D5F                 mov     rax, [rbx+10h]
.text:0000000000003D63                 mov     r8, [rbx+8]
.text:0000000000003D67                 mov     edx, 5          ; category
.text:0000000000003D6C                 mov     r13, [rbx+30h]
.text:0000000000003D70                 mov     r12, [rbx+28h]
.text:0000000000003D74                 mov     r15, [rbx+20h]
.text:0000000000003D78                 mov     r14, [rbx+18h]
.text:0000000000003D7C                 mov     rbx, [rbx]
.text:0000000000003D7F                 mov     [rsp+58h+var_40], r10
.text:0000000000003D84                 mov     [rsp+58h+var_48], r9
.text:0000000000003D89                 mov     [rsp+58h+var_58], rax
.text:0000000000003D8D                 mov     [rsp+58h+var_50], r8
.text:0000000000003D92
.text:0000000000003D92 loc_3D92:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003D92                 xor     edi, edi        ; domainname
.text:0000000000003D94                 call    _dcgettext
.text:0000000000003D99                 mov     r10, [rsp+58h+var_40]
.text:0000000000003D9E                 push    r10
.text:0000000000003DA0                 jmp     loc_3CE4
.text:0000000000003DA0 ; ---------------------------------------------------------------------------
.text:0000000000003DA5                 align 8
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DA8                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003DA8                 mov     rbx, [rbx]      ; jumptable 0000000000003C94 case 1
.text:0000000000003DAB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003DB2                 mov     edx, 5          ; category
.text:0000000000003DB7                 xor     edi, edi        ; domainname
.text:0000000000003DB9                 call    _dcgettext
.text:0000000000003DBE                 add     rsp, 28h
.text:0000000000003DC2                 mov     rcx, rbx
.text:0000000000003DC5                 mov     rdi, rbp
.text:0000000000003DC8                 pop     rbx
.text:0000000000003DC9                 pop     rbp
.text:0000000000003DCA                 pop     r12
.text:0000000000003DCC                 pop     r13
.text:0000000000003DCE                 pop     r14
.text:0000000000003DD0                 pop     r15
.text:0000000000003DD2                 mov     rdx, rax
.text:0000000000003DD5                 mov     esi, 1
.text:0000000000003DDA                 xor     eax, eax
.text:0000000000003DDC                 jmp     ___fprintf_chk
.text:0000000000003DDC ; ---------------------------------------------------------------------------
.text:0000000000003DE1                 align 8
.text:0000000000003DE8
.text:0000000000003DE8 loc_3DE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DE8                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003DE8                 mov     r12, [rbx+8]    ; jumptable 0000000000003C94 case 2
.text:0000000000003DEC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003DF3                 mov     rbx, [rbx]
.text:0000000000003DF6                 mov     edx, 5          ; category
.text:0000000000003DFB                 xor     edi, edi        ; domainname
.text:0000000000003DFD                 call    _dcgettext
.text:0000000000003E02                 add     rsp, 28h
.text:0000000000003E06                 mov     r8, r12
.text:0000000000003E09                 mov     rcx, rbx
.text:0000000000003E0C                 mov     rdi, rbp
.text:0000000000003E0F                 mov     rdx, rax
.text:0000000000003E12                 mov     esi, 1
.text:0000000000003E17                 pop     rbx
.text:0000000000003E18                 pop     rbp
.text:0000000000003E19                 pop     r12
.text:0000000000003E1B                 pop     r13
.text:0000000000003E1D                 pop     r14
.text:0000000000003E1F                 pop     r15
.text:0000000000003E21                 xor     eax, eax
.text:0000000000003E23                 jmp     ___fprintf_chk
.text:0000000000003E23 ; ---------------------------------------------------------------------------
.text:0000000000003E28                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E30                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003E30                 mov     r13, [rbx+10h]  ; jumptable 0000000000003C94 case 3
.text:0000000000003E34                 mov     r12, [rbx+8]
.text:0000000000003E38                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003E3F                 mov     rbx, [rbx]
.text:0000000000003E42                 mov     edx, 5          ; category
.text:0000000000003E47                 xor     edi, edi        ; domainname
.text:0000000000003E49                 call    _dcgettext
.text:0000000000003E4E                 add     rsp, 28h
.text:0000000000003E52                 mov     r9, r13
.text:0000000000003E55                 mov     r8, r12
.text:0000000000003E58                 mov     rcx, rbx
.text:0000000000003E5B                 mov     rdi, rbp
.text:0000000000003E5E                 mov     rdx, rax
.text:0000000000003E61                 pop     rbx
.text:0000000000003E62                 pop     rbp
.text:0000000000003E63                 pop     r12
.text:0000000000003E65                 pop     r13
.text:0000000000003E67                 pop     r14
.text:0000000000003E69                 pop     r15
.text:0000000000003E6B                 mov     esi, 1
.text:0000000000003E70                 xor     eax, eax
.text:0000000000003E72                 jmp     ___fprintf_chk
.text:0000000000003E72 ; ---------------------------------------------------------------------------
.text:0000000000003E77                 align 20h
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E80                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003E80                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003C94 case 4
.text:0000000000003E87                 mov     edx, 5          ; category
.text:0000000000003E8C                 xor     edi, edi        ; domainname
.text:0000000000003E8E                 mov     r14, [rbx+18h]
.text:0000000000003E92                 mov     r13, [rbx+10h]
.text:0000000000003E96                 mov     r12, [rbx+8]
.text:0000000000003E9A                 mov     rbx, [rbx]
.text:0000000000003E9D                 call    _dcgettext
.text:0000000000003EA2                 sub     rsp, 8
.text:0000000000003EA6
.text:0000000000003EA6 loc_3EA6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003EA6                 push    r14
.text:0000000000003EA8                 mov     rdx, rax
.text:0000000000003EAB                 mov     r9, r13
.text:0000000000003EAE                 mov     r8, r12
.text:0000000000003EB1                 mov     rcx, rbx
.text:0000000000003EB4                 mov     rdi, rbp
.text:0000000000003EB7                 mov     esi, 1
.text:0000000000003EBC                 xor     eax, eax
.text:0000000000003EBE                 call    ___fprintf_chk
.text:0000000000003EC3                 pop     rax
.text:0000000000003EC4                 pop     rdx
.text:0000000000003EC5                 add     rsp, 28h
.text:0000000000003EC9                 pop     rbx
.text:0000000000003ECA                 pop     rbp
.text:0000000000003ECB                 pop     r12
.text:0000000000003ECD                 pop     r13
.text:0000000000003ECF                 pop     r14
.text:0000000000003ED1                 pop     r15
.text:0000000000003ED3                 retn
.text:0000000000003ED3 ; ---------------------------------------------------------------------------
.text:0000000000003ED4                 align 8
.text:0000000000003ED8
.text:0000000000003ED8 loc_3ED8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003ED8                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003ED8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003C94 case 5
.text:0000000000003EDC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003EE3                 mov     edx, 5          ; category
.text:0000000000003EE8                 xor     edi, edi        ; domainname
.text:0000000000003EEA                 mov     r14, [rbx+18h]
.text:0000000000003EEE                 mov     r13, [rbx+10h]
.text:0000000000003EF2                 mov     r12, [rbx+8]
.text:0000000000003EF6                 mov     rbx, [rbx]
.text:0000000000003EF9                 call    _dcgettext
.text:0000000000003EFE                 push    r15
.text:0000000000003F00                 jmp     short loc_3EA6
.text:0000000000003F00 ; ---------------------------------------------------------------------------
.text:0000000000003F02                 align 8
.text:0000000000003F08
.text:0000000000003F08 loc_3F08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F08                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003F08                 mov     r8, [rbx+8]     ; jumptable 0000000000003C94 case 6
.text:0000000000003F0C                 mov     r12, [rbx+28h]
.text:0000000000003F10                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003F17                 mov     r15, [rbx+20h]
.text:0000000000003F1B                 mov     r14, [rbx+18h]
.text:0000000000003F1F                 mov     edx, 5          ; category
.text:0000000000003F24                 mov     r13, [rbx+10h]
.text:0000000000003F28                 xor     edi, edi        ; domainname
.text:0000000000003F2A                 mov     rbx, [rbx]
.text:0000000000003F2D                 mov     [rsp+58h+var_58], r8
.text:0000000000003F31                 call    _dcgettext
.text:0000000000003F36                 sub     rsp, 8
.text:0000000000003F3A                 mov     r9, r13
.text:0000000000003F3D                 push    r12
.text:0000000000003F3F                 push    r15
.text:0000000000003F41                 push    r14
.text:0000000000003F43
.text:0000000000003F43 loc_3F43:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003F43                 mov     r8, [rsp+78h+var_58]
.text:0000000000003F48                 mov     rcx, rbx
.text:0000000000003F4B                 mov     rdx, rax
.text:0000000000003F4E                 mov     rdi, rbp
.text:0000000000003F51                 mov     esi, 1
.text:0000000000003F56                 xor     eax, eax
.text:0000000000003F58                 call    ___fprintf_chk
.text:0000000000003F5D                 add     rsp, 20h
.text:0000000000003F61                 add     rsp, 28h
.text:0000000000003F65                 pop     rbx
.text:0000000000003F66                 pop     rbp
.text:0000000000003F67                 pop     r12
.text:0000000000003F69                 pop     r13
.text:0000000000003F6B                 pop     r14
.text:0000000000003F6D                 pop     r15
.text:0000000000003F6F                 retn
.text:0000000000003F70 ; ---------------------------------------------------------------------------
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F70                                         ; DATA XREF: .rodata:jpt_3C94↓o
.text:0000000000003F70                 mov     r9, [rbx+10h]   ; jumptable 0000000000003C94 case 7
.text:0000000000003F74                 mov     r13, [rbx+30h]
.text:0000000000003F78                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003F7F                 mov     r12, [rbx+28h]
.text:0000000000003F83                 mov     r15, [rbx+20h]
.text:0000000000003F87                 mov     edx, 5          ; category
.text:0000000000003F8C                 mov     r14, [rbx+18h]
.text:0000000000003F90                 mov     r8, [rbx+8]
.text:0000000000003F94                 xor     edi, edi        ; domainname
.text:0000000000003F96                 mov     [rsp+58h+var_50], r9
.text:0000000000003F9B                 mov     rbx, [rbx]
.text:0000000000003F9E                 mov     [rsp+58h+var_58], r8
.text:0000000000003FA2                 call    _dcgettext
.text:0000000000003FA7                 push    r13
.text:0000000000003FA9                 push    r12
.text:0000000000003FAB                 push    r15
.text:0000000000003FAD                 push    r14
.text:0000000000003FAF                 mov     r9, [rsp+78h+var_50]
.text:0000000000003FB4                 jmp     short loc_3F43
.text:0000000000003FB4 ; ---------------------------------------------------------------------------
.text:0000000000003FB6                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 def_3C94:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003FC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003C94 default case
.text:0000000000003FC4                 mov     r9, [rbx+38h]
.text:0000000000003FC8                 mov     edx, 5
.text:0000000000003FCD                 mov     rax, [rbx+10h]
.text:0000000000003FD1                 mov     r8, [rbx+8]
.text:0000000000003FD5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003FDC                 mov     r13, [rbx+30h]
.text:0000000000003FE0                 mov     r12, [rbx+28h]
.text:0000000000003FE4                 mov     r15, [rbx+20h]
.text:0000000000003FE8                 mov     r14, [rbx+18h]
.text:0000000000003FEC                 mov     [rsp+58h+var_40], r10
.text:0000000000003FF1                 mov     [rsp+58h+var_48], r9
.text:0000000000003FF6                 mov     [rsp+58h+var_58], rax
.text:0000000000003FFA                 mov     [rsp+58h+var_50], r8
.text:0000000000003FFF                 mov     rbx, [rbx]
.text:0000000000004002                 jmp     loc_3D92
.text:0000000000004002 ; } // starts at 3BF0
.text:0000000000004002 version_etc_arn endp
.text:0000000000004002
.text:0000000000004002 ; ---------------------------------------------------------------------------
.text:0000000000004007                 align 10h
.text:0000000000004010
.text:0000000000004010 ; =============== S U B R O U T I N E =======================================
.text:0000000000004010
.text:0000000000004010 ; Attributes: info_from_lumina
.text:0000000000004010
.text:0000000000004010 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004010                 public version_etc_ar
.text:0000000000004010 version_etc_ar  proc near
.text:0000000000004010 ; __unwind {
.text:0000000000004010                 xor     r9d, r9d
.text:0000000000004013                 cmp     qword ptr [r8], 0
.text:0000000000004017                 jz      short loc_402B
.text:0000000000004019                 nop     dword ptr [rax+00000000h]
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004020                 add     r9, 1
.text:0000000000004024                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004029                 jnz     short loc_4020
.text:000000000000402B
.text:000000000000402B loc_402B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000402B                 jmp     version_etc_arn
.text:000000000000402B ; } // starts at 4010
.text:000000000000402B version_etc_ar  endp
.text:000000000000402B
.text:0000000000004030
.text:0000000000004030 ; =============== S U B R O U T I N E =======================================
.text:0000000000004030
.text:0000000000004030 ; Attributes: info_from_lumina
.text:0000000000004030
.text:0000000000004030 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004030                 public version_etc_va
.text:0000000000004030 version_etc_va  proc near
.text:0000000000004030
.text:0000000000004030 authtab         = qword ptr -68h
.text:0000000000004030 var_10          = qword ptr -10h
.text:0000000000004030
.text:0000000000004030 ; __unwind {
.text:0000000000004030                 sub     rsp, 68h
.text:0000000000004034                 mov     r10, r8
.text:0000000000004037                 xor     r9d, r9d
.text:000000000000403A                 mov     rax, fs:28h
.text:0000000000004043                 mov     [rsp+68h+var_10], rax
.text:0000000000004048                 xor     eax, eax
.text:000000000000404A                 mov     r8, rsp
.text:000000000000404D                 nop     dword ptr [rax]
.text:0000000000004050
.text:0000000000004050 loc_4050:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004050                 mov     eax, [r10]
.text:0000000000004053                 cmp     eax, 2Fh ; '/'
.text:0000000000004056                 ja      short loc_409A
.text:0000000000004058                 mov     r11d, eax
.text:000000000000405B                 add     r11, [r10+10h]
.text:000000000000405F                 add     eax, 8
.text:0000000000004062                 mov     [r10], eax
.text:0000000000004065
.text:0000000000004065 loc_4065:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004065                 mov     rax, [r11]
.text:0000000000004068                 test    rax, rax
.text:000000000000406B                 mov     [r8+r9*8], rax
.text:000000000000406F                 jz      short loc_407B
.text:0000000000004071                 add     r9, 1
.text:0000000000004075                 cmp     r9, 0Ah
.text:0000000000004079                 jnz     short loc_4050
.text:000000000000407B
.text:000000000000407B loc_407B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000407B                 call    version_etc_arn
.text:0000000000004080                 mov     rax, [rsp+68h+var_10]
.text:0000000000004085                 xor     rax, fs:28h
.text:000000000000408E                 jnz     short loc_4095
.text:0000000000004090                 add     rsp, 68h
.text:0000000000004094                 retn
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:0000000000004095
.text:0000000000004095 loc_4095:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004095                 call    ___stack_chk_fail
.text:000000000000409A ; ---------------------------------------------------------------------------
.text:000000000000409A
.text:000000000000409A loc_409A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000409A                 mov     r11, [r10+8]
.text:000000000000409E                 lea     rax, [r11+8]
.text:00000000000040A2                 mov     [r10+8], rax
.text:00000000000040A6                 jmp     short loc_4065
.text:00000000000040A6 ; } // starts at 4030
.text:00000000000040A6 version_etc_va  endp
.text:00000000000040A6
.text:00000000000040A6 ; ---------------------------------------------------------------------------
.text:00000000000040A8                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0 ; Attributes: info_from_lumina
.text:00000000000040B0
.text:00000000000040B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000040B0                 public version_etc
.text:00000000000040B0 version_etc     proc near               ; CODE XREF: main+D3↑p
.text:00000000000040B0
.text:00000000000040B0 var_C0          = dword ptr -0C0h
.text:00000000000040B0 var_B8          = qword ptr -0B8h
.text:00000000000040B0 var_B0          = qword ptr -0B0h
.text:00000000000040B0 var_A8          = byte ptr -0A8h
.text:00000000000040B0 var_50          = qword ptr -50h
.text:00000000000040B0 var_48          = byte ptr -48h
.text:00000000000040B0 var_28          = qword ptr -28h
.text:00000000000040B0 var_20          = qword ptr -20h
.text:00000000000040B0 arg_0           = byte ptr  8
.text:00000000000040B0
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 push    rbp
.text:00000000000040B1                 push    rbx
.text:00000000000040B2                 mov     r10d, 20h ; ' '
.text:00000000000040B8                 xor     r11d, r11d
.text:00000000000040BB                 sub     rsp, 0B8h
.text:00000000000040C2                 mov     rax, fs:28h
.text:00000000000040CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000040D0                 xor     eax, eax
.text:00000000000040D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000040DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000040E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000040EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000040EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000040F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000040FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004104                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000410C                 xor     r9d, r9d
.text:000000000000410F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004114                 mov     rbp, rax
.text:0000000000004117                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004120                 cmp     r10d, 2Fh ; '/'
.text:0000000000004124                 ja      short loc_417C
.text:0000000000004126                 mov     eax, r10d
.text:0000000000004129                 mov     r11d, 1
.text:000000000000412F                 add     r10d, 8
.text:0000000000004133                 add     rax, rbp
.text:0000000000004136
.text:0000000000004136 loc_4136:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004136                 mov     rax, [rax]
.text:0000000000004139                 test    rax, rax
.text:000000000000413C                 mov     [r8+r9*8], rax
.text:0000000000004140                 jz      short loc_414C
.text:0000000000004142                 add     r9, 1
.text:0000000000004146                 cmp     r9, 0Ah
.text:000000000000414A                 jnz     short loc_4120
.text:000000000000414C
.text:000000000000414C loc_414C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000414C                 test    r11b, r11b
.text:000000000000414F                 jnz     short loc_4175
.text:0000000000004151
.text:0000000000004151 loc_4151:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004151                 call    version_etc_arn
.text:0000000000004156                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000415B                 xor     rax, fs:28h
.text:0000000000004164                 jnz     short loc_4170
.text:0000000000004166                 add     rsp, 0B8h
.text:000000000000416D                 pop     rbx
.text:000000000000416E                 pop     rbp
.text:000000000000416F                 retn
.text:0000000000004170 ; ---------------------------------------------------------------------------
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004170                 call    ___stack_chk_fail
.text:0000000000004175 ; ---------------------------------------------------------------------------
.text:0000000000004175
.text:0000000000004175 loc_4175:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004175                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000417A                 jmp     short loc_4151
.text:000000000000417C ; ---------------------------------------------------------------------------
.text:000000000000417C
.text:000000000000417C loc_417C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000417C                 mov     rax, rbx
.text:000000000000417F                 add     rbx, 8
.text:0000000000004183                 jmp     short loc_4136
.text:0000000000004183 ; } // starts at 40B0
.text:0000000000004183 version_etc     endp
.text:0000000000004183
.text:0000000000004183 ; ---------------------------------------------------------------------------
.text:0000000000004185                 align 10h
.text:0000000000004190
.text:0000000000004190 ; =============== S U B R O U T I N E =======================================
.text:0000000000004190
.text:0000000000004190 ; Attributes: info_from_lumina
.text:0000000000004190
.text:0000000000004190 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004190                 public emit_bug_reporting_address
.text:0000000000004190 emit_bug_reporting_address proc near
.text:0000000000004190 ; __unwind {
.text:0000000000004190                 push    rbx
.text:0000000000004191                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004198                 mov     edx, 5          ; category
.text:000000000000419D                 xor     edi, edi        ; domainname
.text:000000000000419F                 call    _dcgettext
.text:00000000000041A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000041AB                 mov     rsi, rax
.text:00000000000041AE                 mov     edi, 1
.text:00000000000041B3                 xor     eax, eax
.text:00000000000041B5                 call    ___printf_chk
.text:00000000000041BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000041C1                 mov     edx, 5          ; category
.text:00000000000041C6                 xor     edi, edi        ; domainname
.text:00000000000041C8                 call    _dcgettext
.text:00000000000041CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000041D4                 lea     rdx, unk_48C3
.text:00000000000041DB                 mov     rsi, rax
.text:00000000000041DE                 mov     edi, 1
.text:00000000000041E3                 xor     eax, eax
.text:00000000000041E5                 call    ___printf_chk
.text:00000000000041EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000041F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000041F8                 xor     edi, edi        ; domainname
.text:00000000000041FA                 mov     edx, 5          ; category
.text:00000000000041FF                 call    _dcgettext
.text:0000000000004204                 mov     rsi, rbx        ; stream
.text:0000000000004207                 mov     rdi, rax        ; s
.text:000000000000420A                 pop     rbx
.text:000000000000420B                 jmp     _fputs_unlocked
.text:000000000000420B ; } // starts at 4190
.text:000000000000420B emit_bug_reporting_address endp
.text:000000000000420B
.text:0000000000004210
.text:0000000000004210 ; =============== S U B R O U T I N E =======================================
.text:0000000000004210
.text:0000000000004210
.text:0000000000004210                 public xmalloc
.text:0000000000004210 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004210                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004210 ; __unwind {
.text:0000000000004210                 push    rbx
.text:0000000000004211                 mov     rbx, rdi
.text:0000000000004214                 call    _malloc
.text:0000000000004219                 test    rax, rax
.text:000000000000421C                 jnz     short loc_4223
.text:000000000000421E                 test    rbx, rbx
.text:0000000000004221                 jnz     short loc_4225
.text:0000000000004223
.text:0000000000004223 loc_4223:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004223                 pop     rbx
.text:0000000000004224                 retn
.text:0000000000004225 ; ---------------------------------------------------------------------------
.text:0000000000004225
.text:0000000000004225 loc_4225:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004225                 call    xalloc_die
.text:0000000000004225 ; } // starts at 4210
.text:0000000000004225 xmalloc         endp
.text:0000000000004225
.text:0000000000004225 ; ---------------------------------------------------------------------------
.text:000000000000422A                 align 10h
.text:0000000000004230
.text:0000000000004230 ; =============== S U B R O U T I N E =======================================
.text:0000000000004230
.text:0000000000004230 ; Attributes: info_from_lumina
.text:0000000000004230
.text:0000000000004230 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004230                 public xnmalloc
.text:0000000000004230 xnmalloc        proc near
.text:0000000000004230 ; __unwind {
.text:0000000000004230                 mov     rax, rdi
.text:0000000000004233                 mul     rsi
.text:0000000000004236                 mov     rdi, rax
.text:0000000000004239                 seto    al
.text:000000000000423C                 test    rdi, rdi
.text:000000000000423F                 js      short loc_424B
.text:0000000000004241                 movzx   eax, al
.text:0000000000004244                 test    rax, rax
.text:0000000000004247                 jnz     short loc_424B
.text:0000000000004249                 jmp     short xmalloc
.text:000000000000424B ; ---------------------------------------------------------------------------
.text:000000000000424B
.text:000000000000424B loc_424B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000424B                                         ; xnmalloc+17↑j
.text:000000000000424B                 sub     rsp, 8
.text:000000000000424F                 call    xalloc_die
.text:000000000000424F ; } // starts at 4230
.text:000000000000424F xnmalloc        endp
.text:000000000000424F
.text:000000000000424F ; ---------------------------------------------------------------------------
.text:0000000000004254                 align 20h
.text:0000000000004260
.text:0000000000004260 ; =============== S U B R O U T I N E =======================================
.text:0000000000004260
.text:0000000000004260
.text:0000000000004260                 public xcharalloc
.text:0000000000004260 xcharalloc      proc near
.text:0000000000004260 ; __unwind {
.text:0000000000004260                 jmp     short xmalloc
.text:0000000000004260 ; } // starts at 4260
.text:0000000000004260 xcharalloc      endp
.text:0000000000004260
.text:0000000000004260 ; ---------------------------------------------------------------------------
.text:0000000000004262                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270 ; Attributes: info_from_lumina
.text:0000000000004270
.text:0000000000004270 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004270                 public xrealloc
.text:0000000000004270 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004270                                         ; quotearg_n_options+182↑p ...
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 test    rsi, rsi
.text:0000000000004273                 push    rbx
.text:0000000000004274                 mov     rbx, rsi
.text:0000000000004277                 jnz     short loc_427E
.text:0000000000004279                 test    rdi, rdi
.text:000000000000427C                 jnz     short loc_4298
.text:000000000000427E
.text:000000000000427E loc_427E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000427E                 mov     rsi, rbx        ; size
.text:0000000000004281                 call    _realloc
.text:0000000000004286                 test    rax, rax
.text:0000000000004289                 jnz     short loc_4290
.text:000000000000428B                 test    rbx, rbx
.text:000000000000428E                 jnz     short loc_42A1
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004290                 pop     rbx
.text:0000000000004291                 retn
.text:0000000000004291 ; ---------------------------------------------------------------------------
.text:0000000000004292                 align 8
.text:0000000000004298
.text:0000000000004298 loc_4298:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004298                 call    _free
.text:000000000000429D                 xor     eax, eax
.text:000000000000429F                 pop     rbx
.text:00000000000042A0                 retn
.text:00000000000042A1 ; ---------------------------------------------------------------------------
.text:00000000000042A1
.text:00000000000042A1 loc_42A1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000042A1                 call    xalloc_die
.text:00000000000042A1 ; } // starts at 4270
.text:00000000000042A1 xrealloc        endp
.text:00000000000042A1
.text:00000000000042A1 ; ---------------------------------------------------------------------------
.text:00000000000042A6                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0 ; Attributes: info_from_lumina
.text:00000000000042B0
.text:00000000000042B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000042B0                 public xnrealloc
.text:00000000000042B0 xnrealloc       proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 mov     rax, rsi
.text:00000000000042B3                 mul     rdx
.text:00000000000042B6                 mov     rsi, rax
.text:00000000000042B9                 seto    al
.text:00000000000042BC                 test    rsi, rsi
.text:00000000000042BF                 js      short loc_42CB
.text:00000000000042C1                 movzx   eax, al
.text:00000000000042C4                 test    rax, rax
.text:00000000000042C7                 jnz     short loc_42CB
.text:00000000000042C9                 jmp     short xrealloc
.text:00000000000042CB ; ---------------------------------------------------------------------------
.text:00000000000042CB
.text:00000000000042CB loc_42CB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000042CB                                         ; xnrealloc+17↑j
.text:00000000000042CB                 sub     rsp, 8
.text:00000000000042CF                 call    xalloc_die
.text:00000000000042CF ; } // starts at 42B0
.text:00000000000042CF xnrealloc       endp
.text:00000000000042CF
.text:00000000000042CF ; ---------------------------------------------------------------------------
.text:00000000000042D4                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000042E0                 public x2nrealloc
.text:00000000000042E0 x2nrealloc      proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 test    rdi, rdi
.text:00000000000042E3                 mov     r9, rdx
.text:00000000000042E6                 mov     rcx, [rsi]
.text:00000000000042E9                 jz      short loc_4320
.text:00000000000042EB                 xor     edx, edx
.text:00000000000042ED                 mov     rax, 5555555555555554h
.text:00000000000042F7                 div     r9
.text:00000000000042FA                 cmp     rax, rcx
.text:00000000000042FD                 jbe     short loc_433B
.text:00000000000042FF                 mov     rax, rcx
.text:0000000000004302                 shr     rax, 1
.text:0000000000004305                 lea     rcx, [rax+rcx+1]
.text:000000000000430A
.text:000000000000430A loc_430A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000430A                 mov     [rsi], rcx
.text:000000000000430D                 imul    rcx, r9
.text:0000000000004311                 mov     rsi, rcx
.text:0000000000004314                 jmp     xrealloc
.text:0000000000004314 ; ---------------------------------------------------------------------------
.text:0000000000004319                 align 20h
.text:0000000000004320
.text:0000000000004320 loc_4320:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004320                 test    rcx, rcx
.text:0000000000004323                 jz      short loc_4348
.text:0000000000004325
.text:0000000000004325 loc_4325:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004325                 mov     rax, rcx
.text:0000000000004328                 mul     r9
.text:000000000000432B                 seto    dl
.text:000000000000432E                 test    rax, rax
.text:0000000000004331                 movzx   edx, dl
.text:0000000000004334                 js      short loc_433B
.text:0000000000004336                 test    rdx, rdx
.text:0000000000004339                 jz      short loc_430A
.text:000000000000433B
.text:000000000000433B loc_433B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000433B                                         ; x2nrealloc+54↑j
.text:000000000000433B                 sub     rsp, 8
.text:000000000000433F                 call    xalloc_die
.text:000000000000433F ; ---------------------------------------------------------------------------
.text:0000000000004344                 align 8
.text:0000000000004348
.text:0000000000004348 loc_4348:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004348                 xor     edx, edx
.text:000000000000434A                 mov     eax, 80h
.text:000000000000434F                 xor     r8d, r8d
.text:0000000000004352                 div     r9
.text:0000000000004355                 test    rax, rax
.text:0000000000004358                 setz    r8b
.text:000000000000435C                 lea     rcx, [r8+rax]
.text:0000000000004360                 jmp     short loc_4325
.text:0000000000004360 ; } // starts at 42E0
.text:0000000000004360 x2nrealloc      endp
.text:0000000000004360
.text:0000000000004360 ; ---------------------------------------------------------------------------
.text:0000000000004362                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370 ; Attributes: info_from_lumina
.text:0000000000004370
.text:0000000000004370 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004370                 public x2realloc
.text:0000000000004370 x2realloc       proc near
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 test    rdi, rdi
.text:0000000000004373                 mov     rax, [rsi]
.text:0000000000004376                 jz      short loc_43A0
.text:0000000000004378                 mov     rdx, 5555555555555553h
.text:0000000000004382                 cmp     rax, rdx
.text:0000000000004385                 ja      short loc_43B1
.text:0000000000004387                 mov     rdx, rax
.text:000000000000438A                 shr     rdx, 1
.text:000000000000438D                 lea     rax, [rdx+rax+1]
.text:0000000000004392
.text:0000000000004392 loc_4392:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004392                 mov     [rsi], rax
.text:0000000000004395                 mov     rsi, rax
.text:0000000000004398                 jmp     xrealloc
.text:0000000000004398 ; ---------------------------------------------------------------------------
.text:000000000000439D                 align 20h
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000043A0                 test    rax, rax
.text:00000000000043A3                 mov     edx, 80h
.text:00000000000043A8                 cmovz   rax, rdx
.text:00000000000043AC                 test    rax, rax
.text:00000000000043AF                 jns     short loc_4392
.text:00000000000043B1
.text:00000000000043B1 loc_43B1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000043B1                 sub     rsp, 8
.text:00000000000043B5                 call    xalloc_die
.text:00000000000043B5 ; } // starts at 4370
.text:00000000000043B5 x2realloc       endp
.text:00000000000043B5
.text:00000000000043B5 ; ---------------------------------------------------------------------------
.text:00000000000043BA                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000043C0                 public xzalloc
.text:00000000000043C0 xzalloc         proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 push    rbx
.text:00000000000043C1                 mov     rbx, rdi
.text:00000000000043C4                 call    xmalloc
.text:00000000000043C9                 mov     rdx, rbx        ; n
.text:00000000000043CC                 xor     esi, esi        ; c
.text:00000000000043CE                 mov     rdi, rax        ; s
.text:00000000000043D1                 pop     rbx
.text:00000000000043D2                 jmp     _memset
.text:00000000000043D2 ; } // starts at 43C0
.text:00000000000043D2 xzalloc         endp
.text:00000000000043D2
.text:00000000000043D2 ; ---------------------------------------------------------------------------
.text:00000000000043D7                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000043E0                 public xcalloc
.text:00000000000043E0 xcalloc         proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 mov     rax, rdi
.text:00000000000043E3                 sub     rsp, 8
.text:00000000000043E7                 mul     rsi
.text:00000000000043EA                 seto    dl
.text:00000000000043ED                 test    rax, rax
.text:00000000000043F0                 js      short loc_4409
.text:00000000000043F2                 movzx   edx, dl
.text:00000000000043F5                 test    rdx, rdx
.text:00000000000043F8                 jnz     short loc_4409
.text:00000000000043FA                 call    _calloc
.text:00000000000043FF                 test    rax, rax
.text:0000000000004402                 jz      short loc_4409
.text:0000000000004404                 add     rsp, 8
.text:0000000000004408                 retn
.text:0000000000004409 ; ---------------------------------------------------------------------------
.text:0000000000004409
.text:0000000000004409 loc_4409:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004409                                         ; xcalloc+18↑j ...
.text:0000000000004409                 call    xalloc_die
.text:0000000000004409 ; } // starts at 43E0
.text:0000000000004409 xcalloc         endp
.text:0000000000004409
.text:0000000000004409 ; ---------------------------------------------------------------------------
.text:000000000000440E                 align 10h
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410 ; Attributes: info_from_lumina
.text:0000000000004410
.text:0000000000004410 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004410                 public xmemdup
.text:0000000000004410 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004410                                         ; xstrdup+11↓j
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 push    rbp
.text:0000000000004411                 push    rbx
.text:0000000000004412                 mov     rbp, rdi
.text:0000000000004415                 mov     rdi, rsi
.text:0000000000004418                 mov     rbx, rsi
.text:000000000000441B                 sub     rsp, 8
.text:000000000000441F                 call    xmalloc
.text:0000000000004424                 add     rsp, 8
.text:0000000000004428                 mov     rdx, rbx        ; n
.text:000000000000442B                 mov     rsi, rbp        ; src
.text:000000000000442E                 pop     rbx
.text:000000000000442F                 pop     rbp
.text:0000000000004430                 mov     rdi, rax        ; dest
.text:0000000000004433                 jmp     _memcpy
.text:0000000000004433 ; } // starts at 4410
.text:0000000000004433 xmemdup         endp
.text:0000000000004433
.text:0000000000004433 ; ---------------------------------------------------------------------------
.text:0000000000004438                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440
.text:0000000000004440 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004440                 public xstrdup
.text:0000000000004440 xstrdup         proc near
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 push    rbx
.text:0000000000004441                 mov     rbx, rdi
.text:0000000000004444                 call    _strlen
.text:0000000000004449                 mov     rdi, rbx        ; src
.text:000000000000444C                 lea     rsi, [rax+1]    ; n
.text:0000000000004450                 pop     rbx
.text:0000000000004451                 jmp     short xmemdup
.text:0000000000004451 ; } // starts at 4440
.text:0000000000004451 xstrdup         endp
.text:0000000000004451
.text:0000000000004451 ; ---------------------------------------------------------------------------
.text:0000000000004453                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: noreturn info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; void __cdecl xalloc_die()
.text:0000000000004460                 public xalloc_die
.text:0000000000004460 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3436↑p
.text:0000000000004460                                         ; xmalloc:loc_4225↑p ...
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004467                 sub     rsp, 8
.text:000000000000446B                 mov     edx, 5          ; category
.text:0000000000004470                 xor     edi, edi        ; domainname
.text:0000000000004472                 call    _dcgettext
.text:0000000000004477                 mov     edi, cs:exit_failure ; status
.text:000000000000447D                 lea     rdx, format+4   ; format
.text:0000000000004484                 mov     rcx, rax
.text:0000000000004487                 xor     esi, esi        ; errnum
.text:0000000000004489                 xor     eax, eax
.text:000000000000448B                 call    _error
.text:0000000000004490                 call    _abort
.text:0000000000004490 ; } // starts at 4460
.text:0000000000004490 xalloc_die      endp
.text:0000000000004490
.text:0000000000004490 ; ---------------------------------------------------------------------------
.text:0000000000004495                 align 20h
.text:00000000000044A0
.text:00000000000044A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044A0
.text:00000000000044A0
.text:00000000000044A0                 public xstrndup
.text:00000000000044A0 xstrndup        proc near               ; CODE XREF: base_name+36↑j
.text:00000000000044A0                                         ; base_name+54↑j
.text:00000000000044A0 ; __unwind {
.text:00000000000044A0                 sub     rsp, 8
.text:00000000000044A4                 call    _strndup
.text:00000000000044A9                 test    rax, rax
.text:00000000000044AC                 jz      short loc_44B3
.text:00000000000044AE                 add     rsp, 8
.text:00000000000044B2                 retn
.text:00000000000044B3 ; ---------------------------------------------------------------------------
.text:00000000000044B3
.text:00000000000044B3 loc_44B3:                               ; CODE XREF: xstrndup+C↑j
.text:00000000000044B3                 call    xalloc_die
.text:00000000000044B3 ; } // starts at 44A0
.text:00000000000044B3 xstrndup        endp
.text:00000000000044B3
.text:00000000000044B3 ; ---------------------------------------------------------------------------
.text:00000000000044B8                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0 ; Attributes: info_from_lumina
.text:00000000000044C0
.text:00000000000044C0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000044C0                 public rpl_mbrtowc
.text:00000000000044C0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000044C0
.text:00000000000044C0 pwc             = dword ptr -34h
.text:00000000000044C0 var_30          = qword ptr -30h
.text:00000000000044C0
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 push    r13
.text:00000000000044C2                 push    r12
.text:00000000000044C4                 mov     r13, rsi
.text:00000000000044C7                 push    rbp
.text:00000000000044C8                 push    rbx
.text:00000000000044C9                 mov     rbx, rdi
.text:00000000000044CC                 mov     r12, rdx
.text:00000000000044CF                 sub     rsp, 18h
.text:00000000000044D3                 mov     rax, fs:28h
.text:00000000000044DC                 mov     [rsp+38h+var_30], rax
.text:00000000000044E1                 xor     eax, eax
.text:00000000000044E3                 lea     rax, [rsp+38h+pwc]
.text:00000000000044E8                 test    rdi, rdi
.text:00000000000044EB                 cmovz   rbx, rax
.text:00000000000044EF                 mov     rdi, rbx        ; pwc
.text:00000000000044F2                 call    _mbrtowc
.text:00000000000044F7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000044FB                 mov     rbp, rax
.text:00000000000044FE                 jbe     short loc_4520
.text:0000000000004500                 test    r12, r12
.text:0000000000004503                 jz      short loc_4520
.text:0000000000004505                 xor     edi, edi
.text:0000000000004507                 call    hard_locale
.text:000000000000450C                 test    al, al
.text:000000000000450E                 jnz     short loc_4520
.text:0000000000004510                 movzx   eax, byte ptr [r13+0]
.text:0000000000004515                 mov     ebp, 1
.text:000000000000451A                 mov     [rbx], eax
.text:000000000000451C                 nop     dword ptr [rax+00h]
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004520                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004520                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004525                 xor     rdx, fs:28h
.text:000000000000452E                 mov     rax, rbp
.text:0000000000004531                 jnz     short loc_453E
.text:0000000000004533                 add     rsp, 18h
.text:0000000000004537                 pop     rbx
.text:0000000000004538                 pop     rbp
.text:0000000000004539                 pop     r12
.text:000000000000453B                 pop     r13
.text:000000000000453D                 retn
.text:000000000000453E ; ---------------------------------------------------------------------------
.text:000000000000453E
.text:000000000000453E loc_453E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000453E                 call    ___stack_chk_fail
.text:000000000000453E ; } // starts at 44C0
.text:000000000000453E rpl_mbrtowc     endp
.text:000000000000453E
.text:000000000000453E ; ---------------------------------------------------------------------------
.text:0000000000004543                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550 ; Attributes: info_from_lumina
.text:0000000000004550
.text:0000000000004550 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004550                 public close_stream
.text:0000000000004550 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004550                                         ; close_stdout+33↑p
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 push    r12
.text:0000000000004552                 push    rbp
.text:0000000000004553                 mov     rbp, rdi
.text:0000000000004556                 push    rbx
.text:0000000000004557                 call    ___fpending
.text:000000000000455C                 mov     ebx, [rbp+0]
.text:000000000000455F                 mov     rdi, rbp        ; stream
.text:0000000000004562                 mov     r12, rax
.text:0000000000004565                 call    rpl_fclose
.text:000000000000456A                 and     ebx, 20h
.text:000000000000456D                 test    ebx, ebx
.text:000000000000456F                 jnz     short loc_4588
.text:0000000000004571                 test    eax, eax
.text:0000000000004573                 jz      short loc_457F
.text:0000000000004575                 test    r12, r12
.text:0000000000004578                 mov     eax, 0FFFFFFFFh
.text:000000000000457D                 jz      short loc_45B8
.text:000000000000457F
.text:000000000000457F loc_457F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000457F                 pop     rbx
.text:0000000000004580                 pop     rbp
.text:0000000000004581                 pop     r12
.text:0000000000004583                 retn
.text:0000000000004583 ; ---------------------------------------------------------------------------
.text:0000000000004584                 align 8
.text:0000000000004588
.text:0000000000004588 loc_4588:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004588                 test    eax, eax
.text:000000000000458A                 jnz     short loc_45A8
.text:000000000000458C                 call    ___errno_location
.text:0000000000004591                 mov     dword ptr [rax], 0
.text:0000000000004597                 mov     eax, 0FFFFFFFFh
.text:000000000000459C                 pop     rbx
.text:000000000000459D                 pop     rbp
.text:000000000000459E                 pop     r12
.text:00000000000045A0                 retn
.text:00000000000045A0 ; ---------------------------------------------------------------------------
.text:00000000000045A1                 align 8
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000045A8                 pop     rbx
.text:00000000000045A9                 mov     eax, 0FFFFFFFFh
.text:00000000000045AE                 pop     rbp
.text:00000000000045AF                 pop     r12
.text:00000000000045B1                 retn
.text:00000000000045B1 ; ---------------------------------------------------------------------------
.text:00000000000045B2                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000045B8                 call    ___errno_location
.text:00000000000045BD                 cmp     dword ptr [rax], 9
.text:00000000000045C0                 pop     rbx
.text:00000000000045C1                 pop     rbp
.text:00000000000045C2                 pop     r12
.text:00000000000045C4                 setnz   al
.text:00000000000045C7                 movzx   eax, al
.text:00000000000045CA                 neg     eax
.text:00000000000045CC                 retn
.text:00000000000045CC ; } // starts at 4550
.text:00000000000045CC close_stream    endp
.text:00000000000045CC
.text:00000000000045CC ; ---------------------------------------------------------------------------
.text:00000000000045CD                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0
.text:00000000000045D0                 public hard_locale
.text:00000000000045D0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 sub     rsp, 8
.text:00000000000045D4                 xor     esi, esi        ; locale
.text:00000000000045D6                 call    _setlocale
.text:00000000000045DB                 mov     rdx, rax
.text:00000000000045DE                 mov     eax, 1
.text:00000000000045E3                 test    rdx, rdx
.text:00000000000045E6                 jz      short loc_4605
.text:00000000000045E8                 lea     rdi, aC         ; "C"
.text:00000000000045EF                 mov     ecx, 2
.text:00000000000045F4                 mov     rsi, rdx
.text:00000000000045F7                 repe cmpsb
.text:00000000000045F9                 setnbe  cl
.text:00000000000045FC                 sbb     cl, 0
.text:00000000000045FF                 xor     eax, eax
.text:0000000000004601                 test    cl, cl
.text:0000000000004603                 jnz     short loc_4610
.text:0000000000004605
.text:0000000000004605 loc_4605:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004605                 add     rsp, 8
.text:0000000000004609                 retn
.text:0000000000004609 ; ---------------------------------------------------------------------------
.text:000000000000460A                 align 10h
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004610                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004617                 mov     ecx, 6
.text:000000000000461C                 mov     rsi, rdx
.text:000000000000461F                 repe cmpsb
.text:0000000000004621                 setnbe  al
.text:0000000000004624                 sbb     al, 0
.text:0000000000004626                 test    al, al
.text:0000000000004628                 setnz   al
.text:000000000000462B                 add     rsp, 8
.text:000000000000462F                 retn
.text:000000000000462F ; } // starts at 45D0
.text:000000000000462F hard_locale     endp
.text:000000000000462F
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630
.text:0000000000004630                 public locale_charset
.text:0000000000004630 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 sub     rsp, 8
.text:0000000000004634                 mov     edi, 0Eh        ; item
.text:0000000000004639                 call    _nl_langinfo
.text:000000000000463E                 test    rax, rax
.text:0000000000004641                 jz      short loc_4660
.text:0000000000004643                 cmp     byte ptr [rax], 0
.text:0000000000004646                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000464D                 cmovz   rax, rdx
.text:0000000000004651                 add     rsp, 8
.text:0000000000004655                 retn
.text:0000000000004655 ; ---------------------------------------------------------------------------
.text:0000000000004656                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004660                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004667                 add     rsp, 8
.text:000000000000466B                 retn
.text:000000000000466B ; } // starts at 4630
.text:000000000000466B locale_charset  endp
.text:000000000000466B
.text:000000000000466B ; ---------------------------------------------------------------------------
.text:000000000000466C                 align 10h
.text:0000000000004670
.text:0000000000004670 ; =============== S U B R O U T I N E =======================================
.text:0000000000004670
.text:0000000000004670 ; Attributes: info_from_lumina
.text:0000000000004670
.text:0000000000004670 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004670                 public rpl_fclose
.text:0000000000004670 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004670 ; __unwind {
.text:0000000000004670                 push    r12
.text:0000000000004672                 push    rbp
.text:0000000000004673                 push    rbx
.text:0000000000004674                 mov     rbx, rdi
.text:0000000000004677                 call    _fileno
.text:000000000000467C                 test    eax, eax
.text:000000000000467E                 mov     rdi, rbx        ; fp
.text:0000000000004681                 js      short loc_46D7
.text:0000000000004683                 call    ___freading
.text:0000000000004688                 test    eax, eax
.text:000000000000468A                 jnz     short loc_46B8
.text:000000000000468C
.text:000000000000468C loc_468C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000468C                 mov     rdi, rbx        ; stream
.text:000000000000468F                 call    rpl_fflush
.text:0000000000004694                 test    eax, eax
.text:0000000000004696                 jz      short loc_46D4
.text:0000000000004698                 call    ___errno_location
.text:000000000000469D                 mov     r12d, [rax]
.text:00000000000046A0                 mov     rdi, rbx        ; stream
.text:00000000000046A3                 mov     rbp, rax
.text:00000000000046A6                 call    _fclose
.text:00000000000046AB                 test    r12d, r12d
.text:00000000000046AE                 jnz     short loc_46E0
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000046B0                 pop     rbx
.text:00000000000046B1                 pop     rbp
.text:00000000000046B2                 pop     r12
.text:00000000000046B4                 retn
.text:00000000000046B4 ; ---------------------------------------------------------------------------
.text:00000000000046B5                 align 8
.text:00000000000046B8
.text:00000000000046B8 loc_46B8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000046B8                 mov     rdi, rbx        ; stream
.text:00000000000046BB                 call    _fileno
.text:00000000000046C0                 xor     esi, esi        ; offset
.text:00000000000046C2                 mov     edx, 1          ; whence
.text:00000000000046C7                 mov     edi, eax        ; fd
.text:00000000000046C9                 call    _lseek
.text:00000000000046CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000046D2                 jnz     short loc_468C
.text:00000000000046D4
.text:00000000000046D4 loc_46D4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000046D4                 mov     rdi, rbx        ; stream
.text:00000000000046D7
.text:00000000000046D7 loc_46D7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000046D7                 pop     rbx
.text:00000000000046D8                 pop     rbp
.text:00000000000046D9                 pop     r12
.text:00000000000046DB                 jmp     _fclose
.text:00000000000046E0 ; ---------------------------------------------------------------------------
.text:00000000000046E0
.text:00000000000046E0 loc_46E0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000046E0                 mov     [rbp+0], r12d
.text:00000000000046E4                 mov     eax, 0FFFFFFFFh
.text:00000000000046E9                 jmp     short loc_46B0
.text:00000000000046E9 ; } // starts at 4670
.text:00000000000046E9 rpl_fclose      endp
.text:00000000000046E9
.text:00000000000046E9 ; ---------------------------------------------------------------------------
.text:00000000000046EB                 align 10h
.text:00000000000046F0
.text:00000000000046F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046F0
.text:00000000000046F0 ; Attributes: info_from_lumina
.text:00000000000046F0
.text:00000000000046F0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000046F0                 public rpl_fflush
.text:00000000000046F0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000046F0 ; __unwind {
.text:00000000000046F0                 test    rdi, rdi
.text:00000000000046F3                 push    rbx
.text:00000000000046F4                 mov     rbx, rdi
.text:00000000000046F7                 jz      short loc_470A
.text:00000000000046F9                 call    ___freading
.text:00000000000046FE                 test    eax, eax
.text:0000000000004700                 jz      short loc_470A
.text:0000000000004702                 test    dword ptr [rbx], 100h
.text:0000000000004708                 jnz     short loc_4718
.text:000000000000470A
.text:000000000000470A loc_470A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000470A                                         ; rpl_fflush+10↑j
.text:000000000000470A                 mov     rdi, rbx        ; stream
.text:000000000000470D                 pop     rbx
.text:000000000000470E                 jmp     _fflush
.text:000000000000470E ; ---------------------------------------------------------------------------
.text:0000000000004713                 align 8
.text:0000000000004718
.text:0000000000004718 loc_4718:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004718                 mov     rdi, rbx
.text:000000000000471B                 mov     edx, 1
.text:0000000000004720                 xor     esi, esi
.text:0000000000004722                 call    rpl_fseeko
.text:0000000000004727                 mov     rdi, rbx        ; stream
.text:000000000000472A                 pop     rbx
.text:000000000000472B                 jmp     _fflush
.text:000000000000472B ; } // starts at 46F0
.text:000000000000472B rpl_fflush      endp
.text:000000000000472B
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730 ; Attributes: info_from_lumina
.text:0000000000004730
.text:0000000000004730 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004730                 public rpl_fseeko
.text:0000000000004730 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 mov     rax, [rdi+8]
.text:0000000000004734                 cmp     [rdi+10h], rax
.text:0000000000004738                 jz      short loc_4740
.text:000000000000473A
.text:000000000000473A loc_473A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000473A                                         ; rpl_fseeko+1F↓j
.text:000000000000473A                 jmp     _fseeko
.text:000000000000473A ; ---------------------------------------------------------------------------
.text:000000000000473F                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004740                 mov     rax, [rdi+20h]
.text:0000000000004744                 cmp     [rdi+28h], rax
.text:0000000000004748                 jnz     short loc_473A
.text:000000000000474A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000474F                 jnz     short loc_473A
.text:0000000000004751                 push    r12
.text:0000000000004753                 push    rbp
.text:0000000000004754                 mov     r12d, edx
.text:0000000000004757                 push    rbx
.text:0000000000004758                 mov     rbp, rsi
.text:000000000000475B                 mov     rbx, rdi
.text:000000000000475E                 call    _fileno
.text:0000000000004763                 mov     edx, r12d       ; whence
.text:0000000000004766                 mov     rsi, rbp        ; offset
.text:0000000000004769                 mov     edi, eax        ; fd
.text:000000000000476B                 call    _lseek
.text:0000000000004770                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004774                 jz      short loc_4782
.text:0000000000004776                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004779                 mov     [rbx+90h], rax
.text:0000000000004780                 xor     eax, eax
.text:0000000000004782
.text:0000000000004782 loc_4782:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004782                 pop     rbx
.text:0000000000004783                 pop     rbp
.text:0000000000004784                 pop     r12
.text:0000000000004786                 retn
.text:0000000000004786 ; } // starts at 4730
.text:0000000000004786 rpl_fseeko      endp
.text:0000000000004786
.text:0000000000004786 ; ---------------------------------------------------------------------------
.text:0000000000004787                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; void _libc_csu_init(void)
.text:0000000000004790                 public __libc_csu_init
.text:0000000000004790 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 push    r15
.text:0000000000004792                 push    r14
.text:0000000000004794                 mov     r15, rdx
.text:0000000000004797                 push    r13
.text:0000000000004799                 push    r12
.text:000000000000479B                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000047A2                 push    rbp
.text:00000000000047A3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000047AA                 push    rbx
.text:00000000000047AB                 mov     r13d, edi
.text:00000000000047AE                 mov     r14, rsi
.text:00000000000047B1                 sub     rbp, r12
.text:00000000000047B4                 sub     rsp, 8
.text:00000000000047B8                 sar     rbp, 3
.text:00000000000047BC                 call    _init_proc
.text:00000000000047C1                 test    rbp, rbp
.text:00000000000047C4                 jz      short loc_47E6
.text:00000000000047C6                 xor     ebx, ebx
.text:00000000000047C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000047D0                 mov     rdx, r15
.text:00000000000047D3                 mov     rsi, r14
.text:00000000000047D6                 mov     edi, r13d
.text:00000000000047D9                 call    ds:(__frame_dummy_init_array_entry - 206B50h)[r12+rbx*8]
.text:00000000000047DD                 add     rbx, 1
.text:00000000000047E1                 cmp     rbp, rbx
.text:00000000000047E4                 jnz     short loc_47D0
.text:00000000000047E6
.text:00000000000047E6 loc_47E6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000047E6                 add     rsp, 8
.text:00000000000047EA                 pop     rbx
.text:00000000000047EB                 pop     rbp
.text:00000000000047EC                 pop     r12
.text:00000000000047EE                 pop     r13
.text:00000000000047F0                 pop     r14
.text:00000000000047F2                 pop     r15
.text:00000000000047F4                 retn
.text:00000000000047F4 ; } // starts at 4790
.text:00000000000047F4 __libc_csu_init endp
.text:00000000000047F4
.text:00000000000047F4 ; ---------------------------------------------------------------------------
.text:00000000000047F5                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800
.text:0000000000004800 ; void _libc_csu_fini(void)
.text:0000000000004800                 public __libc_csu_fini
.text:0000000000004800 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 rep retn
.text:0000000000004800 ; } // starts at 4800
.text:0000000000004800 __libc_csu_fini endp
.text:0000000000004800
.text:0000000000004800 ; ---------------------------------------------------------------------------
.text:0000000000004802                 align 10h
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810
.text:0000000000004810 atexit          proc near               ; CODE XREF: main+55↑p
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004817                 xor     esi, esi        ; obj
.text:0000000000004819                 jmp     ___cxa_atexit
.text:0000000000004819 ; } // starts at 4810
.text:0000000000004819 atexit          endp
.text:0000000000004819
.text:0000000000004819 _text           ends
.text:0000000000004819
LOAD:000000000000481E ; ===========================================================================
LOAD:000000000000481E
LOAD:000000000000481E ; Segment type: Pure code
LOAD:000000000000481E ; Segment permissions: Read/Execute
LOAD:000000000000481E LOAD            segment byte public 'CODE' use64
LOAD:000000000000481E                 assume cs:LOAD
LOAD:000000000000481E                 ;org 481Eh
LOAD:000000000000481E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000481E                 align 20h
LOAD:000000000000481E LOAD            ends
LOAD:000000000000481E
.fini:0000000000004820 ; ===========================================================================
.fini:0000000000004820
.fini:0000000000004820 ; Segment type: Pure code
.fini:0000000000004820 ; Segment permissions: Read/Execute
.fini:0000000000004820 _fini           segment dword public 'CODE' use64
.fini:0000000000004820                 assume cs:_fini
.fini:0000000000004820                 ;org 4820h
.fini:0000000000004820                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004820
.fini:0000000000004820 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004820
.fini:0000000000004820
.fini:0000000000004820                 public _term_proc
.fini:0000000000004820 _term_proc      proc near
.fini:0000000000004820                 sub     rsp, 8          ; _fini
.fini:0000000000004824                 add     rsp, 8
.fini:0000000000004828                 retn
.fini:0000000000004828 _term_proc      endp
.fini:0000000000004828
.fini:0000000000004828 _fini           ends
.fini:0000000000004828
LOAD:0000000000004829 ; ===========================================================================
LOAD:0000000000004829
LOAD:0000000000004829 ; Segment type: Pure code
LOAD:0000000000004829 ; Segment permissions: Read/Execute
LOAD:0000000000004829 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004829                 assume cs:LOAD
LOAD:0000000000004829                 ;org 4829h
LOAD:0000000000004829                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004829                 align 20h
LOAD:0000000000004829 LOAD            ends
LOAD:0000000000004829
.rodata:0000000000004840 ; ===========================================================================
.rodata:0000000000004840
.rodata:0000000000004840 ; Segment type: Pure data
.rodata:0000000000004840 ; Segment permissions: Read
.rodata:0000000000004840 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004840                 assume cs:_rodata
.rodata:0000000000004840                 ;org 4840h
.rodata:0000000000004840                 public _IO_stdin_used
.rodata:0000000000004840 _IO_stdin_used  db    1
.rodata:0000000000004841                 db    0
.rodata:0000000000004842                 db    2
.rodata:0000000000004843                 db    0
.rodata:0000000000004844 aBasename       db 'basename',0         ; DATA XREF: main+C7↑o
.rodata:0000000000004844                                         ; usage+169↑o ...
.rodata:000000000000484D asc_484D        db '[',0                ; DATA XREF: usage+175↑o
.rodata:000000000000484F aTestInvocation db 'test invocation',0  ; DATA XREF: usage+19C↑o
.rodata:000000000000485F aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000485F                                         ; DATA XREF: usage+1CC↑o
.rodata:000000000000485F                                         ; usage+2C4↑o ...
.rodata:0000000000004875 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1DD↑o
.rodata:000000000000487F aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1E9↑o
.rodata:000000000000488E aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+17C↑o
.rodata:0000000000004898 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1A8↑o
.rodata:00000000000048A2 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1C0↑o
.rodata:00000000000048AC ; const char aSOnlineHelpS[]
.rodata:00000000000048AC aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+232↑o
.rodata:00000000000048AC                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000048C3 unk_48C3        db  47h ; G             ; DATA XREF: main+C0↑o
.rodata:00000000000048C3                                         ; usage+24E↑o ...
.rodata:00000000000048C4                 db  4Eh ; N
.rodata:00000000000048C5                 db  55h ; U
.rodata:00000000000048C6                 db  20h
.rodata:00000000000048C7 ; const char domainname[]
.rodata:00000000000048C7 domainname      db 'coreutils',0        ; DATA XREF: main+36↑o
.rodata:00000000000048C7                                         ; main+42↑o ...
.rodata:00000000000048D1 ; const char s2[]
.rodata:00000000000048D1 s2              db 'en_',0              ; DATA XREF: usage+275↑o
.rodata:00000000000048D1                                         ; usage+336↑o
.rodata:00000000000048D5 ; const char aFullDocumentat[]
.rodata:00000000000048D5 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000048D5                                         ; DATA XREF: usage:loc_1B61↑o
.rodata:00000000000048D5                                         ; usage:loc_1C1E↑o
.rodata:00000000000048F0 ; const char dirname[]
.rodata:00000000000048F0 dirname         db '/usr/local/share/locale',0
.rodata:00000000000048F0                                         ; DATA XREF: main+2F↑o
.rodata:0000000000004908 ; const char shortopts[]
.rodata:0000000000004908 shortopts       db '+as:z',0            ; DATA XREF: main+61↑o
.rodata:000000000000490E aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+B9↑o
.rodata:000000000000491E ; const char msgid[]
.rodata:000000000000491E msgid           db 'missing operand',0  ; DATA XREF: main:loc_1689↑o
.rodata:000000000000492E ; const char aExtraOperandS[]
.rodata:000000000000492E aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+1AE↑o
.rodata:000000000000493F aMultiple       db 'multiple',0         ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000004948 aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:0000000000206B80↓o
.rodata:000000000000494F aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:0000000000004954 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:0000000000004959 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004961                 align 8
.rodata:0000000000004968 ; const char aTrySHelpForMor[]
.rodata:0000000000004968 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004968                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000498F                 align 10h
.rodata:0000000000004990 ; const char aUsageSNameSuff[]
.rodata:0000000000004990 aUsageSNameSuff db 'Usage: %s NAME [SUFFIX]',0Ah
.rodata:0000000000004990                                         ; DATA XREF: usage:loc_192D↑o
.rodata:0000000000004990                 db '  or:  %s OPTION... NAME...',0Ah,0
.rodata:00000000000049C5                 align 8
.rodata:00000000000049C8 ; const char aPrintNameWithA[]
.rodata:00000000000049C8 aPrintNameWithA db 'Print NAME with any leading directory components removed.',0Ah
.rodata:00000000000049C8                                         ; DATA XREF: usage+87↑o
.rodata:00000000000049C8                 db 'If specified, also remove a trailing SUFFIX.',0Ah,0
.rodata:0000000000004A30 ; const char aMandatoryArgum[]
.rodata:0000000000004A30 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:0000000000004A30                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000004A30                 db 'ns too.',0Ah,0
.rodata:0000000000004A7B                 align 20h
.rodata:0000000000004A80 ; const char aAMultipleSuppo[]
.rodata:0000000000004A80 aAMultipleSuppo db '  -a, --multiple       support multiple arguments and treat each '
.rodata:0000000000004A80                                         ; DATA XREF: usage+D1↑o
.rodata:0000000000004A80                 db 'as a NAME',0Ah
.rodata:0000000000004A80                 db '  -s, --suffix=SUFFIX  remove a trailing SUFFIX; implies -a',0Ah
.rodata:0000000000004A80                 db '  -z, --zero           end each output line with NUL, not newline'
.rodata:0000000000004A80                 db 0Ah,0
.rodata:0000000000004B4A                 align 10h
.rodata:0000000000004B50 ; const char aHelpDisplayThi[]
.rodata:0000000000004B50 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004B50                                         ; DATA XREF: usage+F6↑o
.rodata:0000000000004B7D                 align 20h
.rodata:0000000000004B80 ; const char aVersionOutputV[]
.rodata:0000000000004B80 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004B80                                         ; DATA XREF: usage+11B↑o
.rodata:0000000000004BB6                 align 8
.rodata:0000000000004BB8 ; const char aExamplesSUsrBi[]
.rodata:0000000000004BB8 aExamplesSUsrBi db 0Ah                  ; DATA XREF: usage+140↑o
.rodata:0000000000004BB8                 db 'Examples:',0Ah
.rodata:0000000000004BB8                 db '  %s /usr/bin/sort          -> "sort"',0Ah
.rodata:0000000000004BB8                 db '  %s include/stdio.h .h     -> "stdio"',0Ah
.rodata:0000000000004BB8                 db '  %s -s .h include/stdio.h  -> "stdio"',0Ah
.rodata:0000000000004BB8                 db '  %s -a any/str1 any/str2   -> "str1" followed by "str2"',0Ah,0
.rodata:0000000000004C71                 align 8
.rodata:0000000000004C78 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004C78                                         ; DATA XREF: usage+247↑o
.rodata:0000000000004C78                                         ; usage+2AB↑o ...
.rodata:0000000000004CA0 ; const char aReportAnyTrans[]
.rodata:0000000000004CA0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004CA0                                         ; DATA XREF: usage+39F↑o
.rodata:0000000000004CA0                 db 'am/>',0Ah,0
.rodata:0000000000004CE7                 align 8
.rodata:0000000000004CE8 ; const char aOrAvailableLoc[]
.rodata:0000000000004CE8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004CE8                                         ; DATA XREF: usage:loc_1BA6↑o
.rodata:0000000000004D1B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004D20 ; const char aWriteError[]
.rodata:0000000000004D20 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1D03↑o
.rodata:0000000000004D2C ; const char format[]
.rodata:0000000000004D2C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004D2C                                         ; close_stdout+8F↑o ...
.rodata:0000000000004D33                 align 8
.rodata:0000000000004D38 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004D38                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004D70 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004D78 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004D7C unk_4D7C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004D7D                 db  80h
.rodata:0000000000004D7E                 db  98h
.rodata:0000000000004D7F                 db    0
.rodata:0000000000004D80 unk_4D80        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004D81                 db  80h
.rodata:0000000000004D82                 db  99h
.rodata:0000000000004D83                 db    0
.rodata:0000000000004D84 unk_4D84        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004D85                 db    7
.rodata:0000000000004D86                 db  65h ; e
.rodata:0000000000004D87                 db    0
.rodata:0000000000004D88 unk_4D88        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004D89                 db 0AFh
.rodata:0000000000004D8A                 db    0
.rodata:0000000000004D8B unk_4D8B        db  22h ; "             ; DATA XREF: gettext_quote:loc_1F80↑o
.rodata:0000000000004D8B                                         ; quotearg_buffer_restyled:loc_2D3B↑o ...
.rodata:0000000000004D8C                 db    0
.rodata:0000000000004D8D ; const char asc_4D8D[2]
.rodata:0000000000004D8D asc_4D8D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004D8D                                         ; quotearg_buffer_restyled:loc_2103↑o ...
.rodata:0000000000004D8F ; const char asc_4D8F[2]
.rodata:0000000000004D8F asc_4D8F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004D8F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004D91 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004D99 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004D9F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004DAC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004DAC                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004DB9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004DB9                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004DCD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004DCF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004DD7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004DDF                 align 20h
.rodata:0000000000004DE0 jpt_20E1        dd offset loc_2E8A - 4DE0h
.rodata:0000000000004DE0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004DE0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004DE0                 dd offset loc_20E3 - 4DE0h ; jump table for switch statement
.rodata:0000000000004DE0                 dd offset loc_30B8 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2EC4 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2CB4 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2D10 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2D65 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2DAA - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2DE4 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2DE4 - 4DE0h
.rodata:0000000000004DE0                 dd offset loc_2DE4 - 4DE0h
.rodata:0000000000004E0C jpt_223E        dd offset loc_2460 - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004E0C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch ; jump table for switch statement
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset loc_24A0 - 4E0Ch, offset loc_23A8 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2368 - 4E0Ch, offset loc_2530 - 4E0Ch, offset loc_2520 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2510 - 4E0Ch, offset loc_2500 - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset def_223E - 4E0Ch
.rodata:0000000000004E0C                 dd offset def_223E - 4E0Ch, offset def_223E - 4E0Ch, offset loc_24F0 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_24E0 - 4E0Ch, offset loc_24E0 - 4E0Ch, offset loc_24B0 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_24E0 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_24E0 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2343 - 4E0Ch, offset loc_24E0 - 4E0Ch, offset loc_24E0 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_24E0 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_24E0 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_24E0 - 4E0Ch, offset loc_24E0 - 4E0Ch, offset loc_24E0 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2313 - 4E0Ch, offset def_223E - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_24E0 - 4E0Ch, offset loc_23B8 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_24E0 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_24E0 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch, offset loc_2488 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_2243 - 4E0Ch, offset loc_24E0 - 4E0Ch, offset loc_2243 - 4E0Ch
.rodata:0000000000004E0C                 dd offset loc_24B0 - 4E0Ch
.rodata:0000000000005008 jpt_25CA        dd offset loc_2630 - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005008                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h ; jump table for switch statement
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset loc_2620 - 5008h, offset loc_2770 - 5008h
.rodata:0000000000005008                 dd offset loc_2758 - 5008h, offset loc_2608 - 5008h, offset loc_2748 - 5008h
.rodata:0000000000005008                 dd offset loc_25F0 - 5008h, offset loc_2730 - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset def_25CA - 5008h
.rodata:0000000000005008                 dd offset def_25CA - 5008h, offset def_25CA - 5008h, offset loc_2718 - 5008h
.rodata:0000000000005008                 dd offset loc_2700 - 5008h, offset loc_2700 - 5008h, offset loc_26E8 - 5008h
.rodata:0000000000005008                 dd offset loc_2700 - 5008h, offset loc_26D0 - 5008h, offset loc_2700 - 5008h
.rodata:0000000000005008                 dd offset loc_2340 - 5008h, offset loc_2700 - 5008h, offset loc_2700 - 5008h
.rodata:0000000000005008                 dd offset loc_2700 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_2700 - 5008h
.rodata:0000000000005008                 dd offset loc_2700 - 5008h, offset loc_2700 - 5008h, offset loc_2700 - 5008h
.rodata:0000000000005008                 dd offset loc_2310 - 5008h, offset def_25CA - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_2700 - 5008h, offset loc_25D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_2700 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_2700 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_26D0 - 5008h, offset loc_26D0 - 5008h, offset loc_26D0 - 5008h
.rodata:0000000000005008                 dd offset loc_2240 - 5008h, offset loc_2700 - 5008h, offset loc_2240 - 5008h
.rodata:0000000000005008                 dd offset loc_26E8 - 5008h
.rodata:0000000000005204                 align 20h
.rodata:0000000000005220                 public quoting_style_vals
.rodata:0000000000005220 quoting_style_vals db    0
.rodata:0000000000005221                 db    0
.rodata:0000000000005222                 db    0
.rodata:0000000000005223                 db    0
.rodata:0000000000005224                 db    1
.rodata:0000000000005225                 db    0
.rodata:0000000000005226                 db    0
.rodata:0000000000005227                 db    0
.rodata:0000000000005228                 db    2
.rodata:0000000000005229                 db    0
.rodata:000000000000522A                 db    0
.rodata:000000000000522B                 db    0
.rodata:000000000000522C                 db    3
.rodata:000000000000522D                 db    0
.rodata:000000000000522E                 db    0
.rodata:000000000000522F                 db    0
.rodata:0000000000005230                 db    4
.rodata:0000000000005231                 db    0
.rodata:0000000000005232                 db    0
.rodata:0000000000005233                 db    0
.rodata:0000000000005234                 db    5
.rodata:0000000000005235                 db    0
.rodata:0000000000005236                 db    0
.rodata:0000000000005237                 db    0
.rodata:0000000000005238                 db    6
.rodata:0000000000005239                 db    0
.rodata:000000000000523A                 db    0
.rodata:000000000000523B                 db    0
.rodata:000000000000523C                 db    7
.rodata:000000000000523D                 db    0
.rodata:000000000000523E                 db    0
.rodata:000000000000523F                 db    0
.rodata:0000000000005240                 db    8
.rodata:0000000000005241                 db    0
.rodata:0000000000005242                 db    0
.rodata:0000000000005243                 db    0
.rodata:0000000000005244                 db    9
.rodata:0000000000005245                 db    0
.rodata:0000000000005246                 db    0
.rodata:0000000000005247                 db    0
.rodata:0000000000005248 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005254 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000525B ; const char aC_0[]
.rodata:000000000000525B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3C2C↑o
.rodata:000000000000525F ; const char aWrittenByS[]
.rodata:000000000000525F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000525F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000526F ; const char aWrittenBySAndS[]
.rodata:000000000000526F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000526F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005286 ; const char aWrittenBySSAnd[]
.rodata:0000000000005286 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005286                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000052A2 ; const char aReportBugsToS[]
.rodata:00000000000052A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000052A2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000052B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000052B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000052CD ; const char aSHomePageS[]
.rodata:00000000000052CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000052CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000052E1                 align 8
.rodata:00000000000052E8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000052E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000052E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000052E8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000052E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000052E8                 db '.',0Ah
.rodata:00000000000052E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000052E8                 db 0Ah,0
.rodata:00000000000053B4                 align 8
.rodata:00000000000053B8 ; const char aWrittenBySSSAn[]
.rodata:00000000000053B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000053B8                                         ; DATA XREF: version_etc_arn:loc_3E80↑o
.rodata:00000000000053B8                 db 'and %s.',0Ah,0
.rodata:00000000000053D8 ; const char aWrittenBySSSSA[]
.rodata:00000000000053D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000053D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000053D8                 db '%s, and %s.',0Ah,0
.rodata:00000000000053FC                 align 20h
.rodata:0000000000005400 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005400 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005400                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005400                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005428 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005428 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005428                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005428                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005454                 align 8
.rodata:0000000000005458 ; const char aWrittenBySSSSS[]
.rodata:0000000000005458 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005458                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005458                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005458                 db 'and %s.',0Ah,0
.rodata:0000000000005488 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005488 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005488                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005488                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005488                 db '%s, and %s.',0Ah,0
.rodata:00000000000054BC                 align 20h
.rodata:00000000000054C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000054C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000054C0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000054C0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000054FC                 align 20h
.rodata:0000000000005500 ; const char aGeneralHelpUsi[]
.rodata:0000000000005500 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005500                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005500                 db 0
.rodata:0000000000005541                 align 8
.rodata:0000000000005548 jpt_3C94        dd offset loc_3D16 - 5548h
.rodata:0000000000005548                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005548                                         ; version_etc_arn+9D↑r
.rodata:0000000000005548                 dd offset loc_3DA8 - 5548h ; jump table for switch statement
.rodata:0000000000005548                 dd offset loc_3DE8 - 5548h
.rodata:0000000000005548                 dd offset loc_3E30 - 5548h
.rodata:0000000000005548                 dd offset loc_3E80 - 5548h
.rodata:0000000000005548                 dd offset loc_3ED8 - 5548h
.rodata:0000000000005548                 dd offset loc_3F08 - 5548h
.rodata:0000000000005548                 dd offset loc_3F70 - 5548h
.rodata:0000000000005548                 dd offset loc_3CA0 - 5548h
.rodata:0000000000005548                 dd offset loc_3D50 - 5548h
.rodata:0000000000005570                 align 20h
.rodata:0000000000005580                 public version_etc_copyright
.rodata:0000000000005580 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005580                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000055AF ; const char aMemoryExhauste[]
.rodata:00000000000055AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000055C0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000055C2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4610↑o
.rodata:00000000000055C8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000055C8                                         ; locale_charset:loc_4660↑o
.rodata:00000000000055C8 _rodata         ends
.rodata:00000000000055C8
LOAD:00000000000055CE ; ===========================================================================
LOAD:00000000000055CE
LOAD:00000000000055CE ; Segment type: Pure code
LOAD:00000000000055CE ; Segment permissions: Read/Execute
LOAD:00000000000055CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000055CE                 assume cs:LOAD
LOAD:00000000000055CE                 ;org 55CEh
LOAD:00000000000055CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000055CE                 align 10h
LOAD:00000000000055CE LOAD            ends
LOAD:00000000000055CE
.eh_frame_hdr:00000000000055D0 ; ===========================================================================
.eh_frame_hdr:00000000000055D0
.eh_frame_hdr:00000000000055D0 ; Segment type: Pure data
.eh_frame_hdr:00000000000055D0 ; Segment permissions: Read
.eh_frame_hdr:00000000000055D0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000055D0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000055D0                 ;org 55D0h
.eh_frame_hdr:00000000000055D0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000055D1                 db  1Bh
.eh_frame_hdr:00000000000055D2                 db    3
.eh_frame_hdr:00000000000055D3                 db  3Bh ; ;
.eh_frame_hdr:00000000000055D4                 db  6Ch ; l
.eh_frame_hdr:00000000000055D5                 db    2
.eh_frame_hdr:00000000000055D6                 db    0
.eh_frame_hdr:00000000000055D7                 db    0
.eh_frame_hdr:00000000000055D8                 db  4Ch ; L
.eh_frame_hdr:00000000000055D9                 db    0
.eh_frame_hdr:00000000000055DA                 db    0
.eh_frame_hdr:00000000000055DB                 db    0
.eh_frame_hdr:00000000000055DC                 db  90h
.eh_frame_hdr:00000000000055DD                 db 0BCh
.eh_frame_hdr:00000000000055DE                 db 0FFh
.eh_frame_hdr:00000000000055DF                 db 0FFh
.eh_frame_hdr:00000000000055E0                 db 0B8h
.eh_frame_hdr:00000000000055E1                 db    2
.eh_frame_hdr:00000000000055E2                 db    0
.eh_frame_hdr:00000000000055E3                 db    0
.eh_frame_hdr:00000000000055E4                 db  30h ; 0
.eh_frame_hdr:00000000000055E5                 db 0BFh
.eh_frame_hdr:00000000000055E6                 db 0FFh
.eh_frame_hdr:00000000000055E7                 db 0FFh
.eh_frame_hdr:00000000000055E8                 db 0E0h
.eh_frame_hdr:00000000000055E9                 db    2
.eh_frame_hdr:00000000000055EA                 db    0
.eh_frame_hdr:00000000000055EB                 db    0
.eh_frame_hdr:00000000000055EC                 db  40h ; @
.eh_frame_hdr:00000000000055ED                 db 0BFh
.eh_frame_hdr:00000000000055EE                 db 0FFh
.eh_frame_hdr:00000000000055EF                 db 0FFh
.eh_frame_hdr:00000000000055F0                 db  60h ; `
.eh_frame_hdr:00000000000055F1                 db    3
.eh_frame_hdr:00000000000055F2                 db    0
.eh_frame_hdr:00000000000055F3                 db    0
.eh_frame_hdr:00000000000055F4                 db  20h
.eh_frame_hdr:00000000000055F5                 db 0C1h
.eh_frame_hdr:00000000000055F6                 db 0FFh
.eh_frame_hdr:00000000000055F7                 db 0FFh
.eh_frame_hdr:00000000000055F8                 db  88h
.eh_frame_hdr:00000000000055F9                 db    2
.eh_frame_hdr:00000000000055FA                 db    0
.eh_frame_hdr:00000000000055FB                 db    0
.eh_frame_hdr:00000000000055FC                 db  30h ; 0
.eh_frame_hdr:00000000000055FD                 db 0C2h
.eh_frame_hdr:00000000000055FE                 db 0FFh
.eh_frame_hdr:00000000000055FF                 db 0FFh
.eh_frame_hdr:0000000000005600                 db 0F8h
.eh_frame_hdr:0000000000005601                 db    2
.eh_frame_hdr:0000000000005602                 db    0
.eh_frame_hdr:0000000000005603                 db    0
.eh_frame_hdr:0000000000005604                 db    0
.eh_frame_hdr:0000000000005605                 db 0C3h
.eh_frame_hdr:0000000000005606                 db 0FFh
.eh_frame_hdr:0000000000005607                 db 0FFh
.eh_frame_hdr:0000000000005608                 db  34h ; 4
.eh_frame_hdr:0000000000005609                 db    3
.eh_frame_hdr:000000000000560A                 db    0
.eh_frame_hdr:000000000000560B                 db    0
.eh_frame_hdr:000000000000560C                 db 0D0h
.eh_frame_hdr:000000000000560D                 db 0C6h
.eh_frame_hdr:000000000000560E                 db 0FFh
.eh_frame_hdr:000000000000560F                 db 0FFh
.eh_frame_hdr:0000000000005610                 db 0A0h
.eh_frame_hdr:0000000000005611                 db    3
.eh_frame_hdr:0000000000005612                 db    0
.eh_frame_hdr:0000000000005613                 db    0
.eh_frame_hdr:0000000000005614                 db 0E0h
.eh_frame_hdr:0000000000005615                 db 0C6h
.eh_frame_hdr:0000000000005616                 db 0FFh
.eh_frame_hdr:0000000000005617                 db 0FFh
.eh_frame_hdr:0000000000005618                 db 0B4h
.eh_frame_hdr:0000000000005619                 db    3
.eh_frame_hdr:000000000000561A                 db    0
.eh_frame_hdr:000000000000561B                 db    0
.eh_frame_hdr:000000000000561C                 db 0F0h
.eh_frame_hdr:000000000000561D                 db 0C6h
.eh_frame_hdr:000000000000561E                 db 0FFh
.eh_frame_hdr:000000000000561F                 db 0FFh
.eh_frame_hdr:0000000000005620                 db 0C8h
.eh_frame_hdr:0000000000005621                 db    3
.eh_frame_hdr:0000000000005622                 db    0
.eh_frame_hdr:0000000000005623                 db    0
.eh_frame_hdr:0000000000005624                 db 0A0h
.eh_frame_hdr:0000000000005625                 db 0C7h
.eh_frame_hdr:0000000000005626                 db 0FFh
.eh_frame_hdr:0000000000005627                 db 0FFh
.eh_frame_hdr:0000000000005628                 db 0F8h
.eh_frame_hdr:0000000000005629                 db    3
.eh_frame_hdr:000000000000562A                 db    0
.eh_frame_hdr:000000000000562B                 db    0
.eh_frame_hdr:000000000000562C                 db    0
.eh_frame_hdr:000000000000562D                 db 0C8h
.eh_frame_hdr:000000000000562E                 db 0FFh
.eh_frame_hdr:000000000000562F                 db 0FFh
.eh_frame_hdr:0000000000005630                 db  30h ; 0
.eh_frame_hdr:0000000000005631                 db    4
.eh_frame_hdr:0000000000005632                 db    0
.eh_frame_hdr:0000000000005633                 db    0
.eh_frame_hdr:0000000000005634                 db  60h ; `
.eh_frame_hdr:0000000000005635                 db 0C8h
.eh_frame_hdr:0000000000005636                 db 0FFh
.eh_frame_hdr:0000000000005637                 db 0FFh
.eh_frame_hdr:0000000000005638                 db  44h ; D
.eh_frame_hdr:0000000000005639                 db    4
.eh_frame_hdr:000000000000563A                 db    0
.eh_frame_hdr:000000000000563B                 db    0
.eh_frame_hdr:000000000000563C                 db 0B0h
.eh_frame_hdr:000000000000563D                 db 0C8h
.eh_frame_hdr:000000000000563E                 db 0FFh
.eh_frame_hdr:000000000000563F                 db 0FFh
.eh_frame_hdr:0000000000005640                 db  70h ; p
.eh_frame_hdr:0000000000005641                 db    4
.eh_frame_hdr:0000000000005642                 db    0
.eh_frame_hdr:0000000000005643                 db    0
.eh_frame_hdr:0000000000005644                 db 0F0h
.eh_frame_hdr:0000000000005645                 db 0C8h
.eh_frame_hdr:0000000000005646                 db 0FFh
.eh_frame_hdr:0000000000005647                 db 0FFh
.eh_frame_hdr:0000000000005648                 db  98h
.eh_frame_hdr:0000000000005649                 db    4
.eh_frame_hdr:000000000000564A                 db    0
.eh_frame_hdr:000000000000564B                 db    0
.eh_frame_hdr:000000000000564C                 db  90h
.eh_frame_hdr:000000000000564D                 db 0C9h
.eh_frame_hdr:000000000000564E                 db 0FFh
.eh_frame_hdr:000000000000564F                 db 0FFh
.eh_frame_hdr:0000000000005650                 db 0B8h
.eh_frame_hdr:0000000000005651                 db    4
.eh_frame_hdr:0000000000005652                 db    0
.eh_frame_hdr:0000000000005653                 db    0
.eh_frame_hdr:0000000000005654                 db  80h
.eh_frame_hdr:0000000000005655                 db 0CAh
.eh_frame_hdr:0000000000005656                 db 0FFh
.eh_frame_hdr:0000000000005657                 db 0FFh
.eh_frame_hdr:0000000000005658                 db 0FCh
.eh_frame_hdr:0000000000005659                 db    4
.eh_frame_hdr:000000000000565A                 db    0
.eh_frame_hdr:000000000000565B                 db    0
.eh_frame_hdr:000000000000565C                 db 0C0h
.eh_frame_hdr:000000000000565D                 db 0DCh
.eh_frame_hdr:000000000000565E                 db 0FFh
.eh_frame_hdr:000000000000565F                 db 0FFh
.eh_frame_hdr:0000000000005660                 db  74h ; t
.eh_frame_hdr:0000000000005661                 db    5
.eh_frame_hdr:0000000000005662                 db    0
.eh_frame_hdr:0000000000005663                 db    0
.eh_frame_hdr:0000000000005664                 db  70h ; p
.eh_frame_hdr:0000000000005665                 db 0DEh
.eh_frame_hdr:0000000000005666                 db 0FFh
.eh_frame_hdr:0000000000005667                 db 0FFh
.eh_frame_hdr:0000000000005668                 db 0E0h
.eh_frame_hdr:0000000000005669                 db    5
.eh_frame_hdr:000000000000566A                 db    0
.eh_frame_hdr:000000000000566B                 db    0
.eh_frame_hdr:000000000000566C                 db 0B0h
.eh_frame_hdr:000000000000566D                 db 0DEh
.eh_frame_hdr:000000000000566E                 db 0FFh
.eh_frame_hdr:000000000000566F                 db 0FFh
.eh_frame_hdr:0000000000005670                 db  0Ch
.eh_frame_hdr:0000000000005671                 db    6
.eh_frame_hdr:0000000000005672                 db    0
.eh_frame_hdr:0000000000005673                 db    0
.eh_frame_hdr:0000000000005674                 db 0D0h
.eh_frame_hdr:0000000000005675                 db 0DEh
.eh_frame_hdr:0000000000005676                 db 0FFh
.eh_frame_hdr:0000000000005677                 db 0FFh
.eh_frame_hdr:0000000000005678                 db  20h
.eh_frame_hdr:0000000000005679                 db    6
.eh_frame_hdr:000000000000567A                 db    0
.eh_frame_hdr:000000000000567B                 db    0
.eh_frame_hdr:000000000000567C                 db 0F0h
.eh_frame_hdr:000000000000567D                 db 0DEh
.eh_frame_hdr:000000000000567E                 db 0FFh
.eh_frame_hdr:000000000000567F                 db 0FFh
.eh_frame_hdr:0000000000005680                 db  34h ; 4
.eh_frame_hdr:0000000000005681                 db    6
.eh_frame_hdr:0000000000005682                 db    0
.eh_frame_hdr:0000000000005683                 db    0
.eh_frame_hdr:0000000000005684                 db  30h ; 0
.eh_frame_hdr:0000000000005685                 db 0DFh
.eh_frame_hdr:0000000000005686                 db 0FFh
.eh_frame_hdr:0000000000005687                 db 0FFh
.eh_frame_hdr:0000000000005688                 db  48h ; H
.eh_frame_hdr:0000000000005689                 db    6
.eh_frame_hdr:000000000000568A                 db    0
.eh_frame_hdr:000000000000568B                 db    0
.eh_frame_hdr:000000000000568C                 db  50h ; P
.eh_frame_hdr:000000000000568D                 db 0DFh
.eh_frame_hdr:000000000000568E                 db 0FFh
.eh_frame_hdr:000000000000568F                 db 0FFh
.eh_frame_hdr:0000000000005690                 db  5Ch ; \
.eh_frame_hdr:0000000000005691                 db    6
.eh_frame_hdr:0000000000005692                 db    0
.eh_frame_hdr:0000000000005693                 db    0
.eh_frame_hdr:0000000000005694                 db  80h
.eh_frame_hdr:0000000000005695                 db 0DFh
.eh_frame_hdr:0000000000005696                 db 0FFh
.eh_frame_hdr:0000000000005697                 db 0FFh
.eh_frame_hdr:0000000000005698                 db  70h ; p
.eh_frame_hdr:0000000000005699                 db    6
.eh_frame_hdr:000000000000569A                 db    0
.eh_frame_hdr:000000000000569B                 db    0
.eh_frame_hdr:000000000000569C                 db    0
.eh_frame_hdr:000000000000569D                 db 0E0h
.eh_frame_hdr:000000000000569E                 db 0FFh
.eh_frame_hdr:000000000000569F                 db 0FFh
.eh_frame_hdr:00000000000056A0                 db 0C4h
.eh_frame_hdr:00000000000056A1                 db    6
.eh_frame_hdr:00000000000056A2                 db    0
.eh_frame_hdr:00000000000056A3                 db    0
.eh_frame_hdr:00000000000056A4                 db 0F0h
.eh_frame_hdr:00000000000056A5                 db 0E0h
.eh_frame_hdr:00000000000056A6                 db 0FFh
.eh_frame_hdr:00000000000056A7                 db 0FFh
.eh_frame_hdr:00000000000056A8                 db  30h ; 0
.eh_frame_hdr:00000000000056A9                 db    7
.eh_frame_hdr:00000000000056AA                 db    0
.eh_frame_hdr:00000000000056AB                 db    0
.eh_frame_hdr:00000000000056AC                 db    0
.eh_frame_hdr:00000000000056AD                 db 0E1h
.eh_frame_hdr:00000000000056AE                 db 0FFh
.eh_frame_hdr:00000000000056AF                 db 0FFh
.eh_frame_hdr:00000000000056B0                 db  44h ; D
.eh_frame_hdr:00000000000056B1                 db    7
.eh_frame_hdr:00000000000056B2                 db    0
.eh_frame_hdr:00000000000056B3                 db    0
.eh_frame_hdr:00000000000056B4                 db 0A0h
.eh_frame_hdr:00000000000056B5                 db 0E1h
.eh_frame_hdr:00000000000056B6                 db 0FFh
.eh_frame_hdr:00000000000056B7                 db 0FFh
.eh_frame_hdr:00000000000056B8                 db  70h ; p
.eh_frame_hdr:00000000000056B9                 db    7
.eh_frame_hdr:00000000000056BA                 db    0
.eh_frame_hdr:00000000000056BB                 db    0
.eh_frame_hdr:00000000000056BC                 db 0C0h
.eh_frame_hdr:00000000000056BD                 db 0E1h
.eh_frame_hdr:00000000000056BE                 db 0FFh
.eh_frame_hdr:00000000000056BF                 db 0FFh
.eh_frame_hdr:00000000000056C0                 db  84h
.eh_frame_hdr:00000000000056C1                 db    7
.eh_frame_hdr:00000000000056C2                 db    0
.eh_frame_hdr:00000000000056C3                 db    0
.eh_frame_hdr:00000000000056C4                 db 0D0h
.eh_frame_hdr:00000000000056C5                 db 0E1h
.eh_frame_hdr:00000000000056C6                 db 0FFh
.eh_frame_hdr:00000000000056C7                 db 0FFh
.eh_frame_hdr:00000000000056C8                 db  98h
.eh_frame_hdr:00000000000056C9                 db    7
.eh_frame_hdr:00000000000056CA                 db    0
.eh_frame_hdr:00000000000056CB                 db    0
.eh_frame_hdr:00000000000056CC                 db 0F0h
.eh_frame_hdr:00000000000056CD                 db 0E1h
.eh_frame_hdr:00000000000056CE                 db 0FFh
.eh_frame_hdr:00000000000056CF                 db 0FFh
.eh_frame_hdr:00000000000056D0                 db 0ACh
.eh_frame_hdr:00000000000056D1                 db    7
.eh_frame_hdr:00000000000056D2                 db    0
.eh_frame_hdr:00000000000056D3                 db    0
.eh_frame_hdr:00000000000056D4                 db  10h
.eh_frame_hdr:00000000000056D5                 db 0E2h
.eh_frame_hdr:00000000000056D6                 db 0FFh
.eh_frame_hdr:00000000000056D7                 db 0FFh
.eh_frame_hdr:00000000000056D8                 db 0C0h
.eh_frame_hdr:00000000000056D9                 db    7
.eh_frame_hdr:00000000000056DA                 db    0
.eh_frame_hdr:00000000000056DB                 db    0
.eh_frame_hdr:00000000000056DC                 db 0A0h
.eh_frame_hdr:00000000000056DD                 db 0E2h
.eh_frame_hdr:00000000000056DE                 db 0FFh
.eh_frame_hdr:00000000000056DF                 db 0FFh
.eh_frame_hdr:00000000000056E0                 db 0DCh
.eh_frame_hdr:00000000000056E1                 db    7
.eh_frame_hdr:00000000000056E2                 db    0
.eh_frame_hdr:00000000000056E3                 db    0
.eh_frame_hdr:00000000000056E4                 db  30h ; 0
.eh_frame_hdr:00000000000056E5                 db 0E3h
.eh_frame_hdr:00000000000056E6                 db 0FFh
.eh_frame_hdr:00000000000056E7                 db 0FFh
.eh_frame_hdr:00000000000056E8                 db 0F8h
.eh_frame_hdr:00000000000056E9                 db    7
.eh_frame_hdr:00000000000056EA                 db    0
.eh_frame_hdr:00000000000056EB                 db    0
.eh_frame_hdr:00000000000056EC                 db  40h ; @
.eh_frame_hdr:00000000000056ED                 db 0E3h
.eh_frame_hdr:00000000000056EE                 db 0FFh
.eh_frame_hdr:00000000000056EF                 db 0FFh
.eh_frame_hdr:00000000000056F0                 db  0Ch
.eh_frame_hdr:00000000000056F1                 db    8
.eh_frame_hdr:00000000000056F2                 db    0
.eh_frame_hdr:00000000000056F3                 db    0
.eh_frame_hdr:00000000000056F4                 db  50h ; P
.eh_frame_hdr:00000000000056F5                 db 0E3h
.eh_frame_hdr:00000000000056F6                 db 0FFh
.eh_frame_hdr:00000000000056F7                 db 0FFh
.eh_frame_hdr:00000000000056F8                 db  20h
.eh_frame_hdr:00000000000056F9                 db    8
.eh_frame_hdr:00000000000056FA                 db    0
.eh_frame_hdr:00000000000056FB                 db    0
.eh_frame_hdr:00000000000056FC                 db 0F0h
.eh_frame_hdr:00000000000056FD                 db 0E3h
.eh_frame_hdr:00000000000056FE                 db 0FFh
.eh_frame_hdr:00000000000056FF                 db 0FFh
.eh_frame_hdr:0000000000005700                 db  3Ch ; <
.eh_frame_hdr:0000000000005701                 db    8
.eh_frame_hdr:0000000000005702                 db    0
.eh_frame_hdr:0000000000005703                 db    0
.eh_frame_hdr:0000000000005704                 db    0
.eh_frame_hdr:0000000000005705                 db 0E4h
.eh_frame_hdr:0000000000005706                 db 0FFh
.eh_frame_hdr:0000000000005707                 db 0FFh
.eh_frame_hdr:0000000000005708                 db  50h ; P
.eh_frame_hdr:0000000000005709                 db    8
.eh_frame_hdr:000000000000570A                 db    0
.eh_frame_hdr:000000000000570B                 db    0
.eh_frame_hdr:000000000000570C                 db  20h
.eh_frame_hdr:000000000000570D                 db 0E4h
.eh_frame_hdr:000000000000570E                 db 0FFh
.eh_frame_hdr:000000000000570F                 db 0FFh
.eh_frame_hdr:0000000000005710                 db  64h ; d
.eh_frame_hdr:0000000000005711                 db    8
.eh_frame_hdr:0000000000005712                 db    0
.eh_frame_hdr:0000000000005713                 db    0
.eh_frame_hdr:0000000000005714                 db  30h ; 0
.eh_frame_hdr:0000000000005715                 db 0E4h
.eh_frame_hdr:0000000000005716                 db 0FFh
.eh_frame_hdr:0000000000005717                 db 0FFh
.eh_frame_hdr:0000000000005718                 db  78h ; x
.eh_frame_hdr:0000000000005719                 db    8
.eh_frame_hdr:000000000000571A                 db    0
.eh_frame_hdr:000000000000571B                 db    0
.eh_frame_hdr:000000000000571C                 db 0C0h
.eh_frame_hdr:000000000000571D                 db 0E4h
.eh_frame_hdr:000000000000571E                 db 0FFh
.eh_frame_hdr:000000000000571F                 db 0FFh
.eh_frame_hdr:0000000000005720                 db  94h
.eh_frame_hdr:0000000000005721                 db    8
.eh_frame_hdr:0000000000005722                 db    0
.eh_frame_hdr:0000000000005723                 db    0
.eh_frame_hdr:0000000000005724                 db  60h ; `
.eh_frame_hdr:0000000000005725                 db 0E5h
.eh_frame_hdr:0000000000005726                 db 0FFh
.eh_frame_hdr:0000000000005727                 db 0FFh
.eh_frame_hdr:0000000000005728                 db 0B0h
.eh_frame_hdr:0000000000005729                 db    8
.eh_frame_hdr:000000000000572A                 db    0
.eh_frame_hdr:000000000000572B                 db    0
.eh_frame_hdr:000000000000572C                 db  70h ; p
.eh_frame_hdr:000000000000572D                 db 0E5h
.eh_frame_hdr:000000000000572E                 db 0FFh
.eh_frame_hdr:000000000000572F                 db 0FFh
.eh_frame_hdr:0000000000005730                 db 0C4h
.eh_frame_hdr:0000000000005731                 db    8
.eh_frame_hdr:0000000000005732                 db    0
.eh_frame_hdr:0000000000005733                 db    0
.eh_frame_hdr:0000000000005734                 db  90h
.eh_frame_hdr:0000000000005735                 db 0E5h
.eh_frame_hdr:0000000000005736                 db 0FFh
.eh_frame_hdr:0000000000005737                 db 0FFh
.eh_frame_hdr:0000000000005738                 db 0D8h
.eh_frame_hdr:0000000000005739                 db    8
.eh_frame_hdr:000000000000573A                 db    0
.eh_frame_hdr:000000000000573B                 db    0
.eh_frame_hdr:000000000000573C                 db 0B0h
.eh_frame_hdr:000000000000573D                 db 0E5h
.eh_frame_hdr:000000000000573E                 db 0FFh
.eh_frame_hdr:000000000000573F                 db 0FFh
.eh_frame_hdr:0000000000005740                 db 0ECh
.eh_frame_hdr:0000000000005741                 db    8
.eh_frame_hdr:0000000000005742                 db    0
.eh_frame_hdr:0000000000005743                 db    0
.eh_frame_hdr:0000000000005744                 db 0C0h
.eh_frame_hdr:0000000000005745                 db 0E5h
.eh_frame_hdr:0000000000005746                 db 0FFh
.eh_frame_hdr:0000000000005747                 db 0FFh
.eh_frame_hdr:0000000000005748                 db    0
.eh_frame_hdr:0000000000005749                 db    9
.eh_frame_hdr:000000000000574A                 db    0
.eh_frame_hdr:000000000000574B                 db    0
.eh_frame_hdr:000000000000574C                 db 0E0h
.eh_frame_hdr:000000000000574D                 db 0E5h
.eh_frame_hdr:000000000000574E                 db 0FFh
.eh_frame_hdr:000000000000574F                 db 0FFh
.eh_frame_hdr:0000000000005750                 db  14h
.eh_frame_hdr:0000000000005751                 db    9
.eh_frame_hdr:0000000000005752                 db    0
.eh_frame_hdr:0000000000005753                 db    0
.eh_frame_hdr:0000000000005754                 db    0
.eh_frame_hdr:0000000000005755                 db 0E6h
.eh_frame_hdr:0000000000005756                 db 0FFh
.eh_frame_hdr:0000000000005757                 db 0FFh
.eh_frame_hdr:0000000000005758                 db  28h ; (
.eh_frame_hdr:0000000000005759                 db    9
.eh_frame_hdr:000000000000575A                 db    0
.eh_frame_hdr:000000000000575B                 db    0
.eh_frame_hdr:000000000000575C                 db  20h
.eh_frame_hdr:000000000000575D                 db 0E6h
.eh_frame_hdr:000000000000575E                 db 0FFh
.eh_frame_hdr:000000000000575F                 db 0FFh
.eh_frame_hdr:0000000000005760                 db  40h ; @
.eh_frame_hdr:0000000000005761                 db    9
.eh_frame_hdr:0000000000005762                 db    0
.eh_frame_hdr:0000000000005763                 db    0
.eh_frame_hdr:0000000000005764                 db  40h ; @
.eh_frame_hdr:0000000000005765                 db 0EAh
.eh_frame_hdr:0000000000005766                 db 0FFh
.eh_frame_hdr:0000000000005767                 db 0FFh
.eh_frame_hdr:0000000000005768                 db  54h ; T
.eh_frame_hdr:0000000000005769                 db  0Ah
.eh_frame_hdr:000000000000576A                 db    0
.eh_frame_hdr:000000000000576B                 db    0
.eh_frame_hdr:000000000000576C                 db  60h ; `
.eh_frame_hdr:000000000000576D                 db 0EAh
.eh_frame_hdr:000000000000576E                 db 0FFh
.eh_frame_hdr:000000000000576F                 db 0FFh
.eh_frame_hdr:0000000000005770                 db  68h ; h
.eh_frame_hdr:0000000000005771                 db  0Ah
.eh_frame_hdr:0000000000005772                 db    0
.eh_frame_hdr:0000000000005773                 db    0
.eh_frame_hdr:0000000000005774                 db 0E0h
.eh_frame_hdr:0000000000005775                 db 0EAh
.eh_frame_hdr:0000000000005776                 db 0FFh
.eh_frame_hdr:0000000000005777                 db 0FFh
.eh_frame_hdr:0000000000005778                 db  84h
.eh_frame_hdr:0000000000005779                 db  0Ah
.eh_frame_hdr:000000000000577A                 db    0
.eh_frame_hdr:000000000000577B                 db    0
.eh_frame_hdr:000000000000577C                 db 0C0h
.eh_frame_hdr:000000000000577D                 db 0EBh
.eh_frame_hdr:000000000000577E                 db 0FFh
.eh_frame_hdr:000000000000577F                 db 0FFh
.eh_frame_hdr:0000000000005780                 db 0B0h
.eh_frame_hdr:0000000000005781                 db  0Ah
.eh_frame_hdr:0000000000005782                 db    0
.eh_frame_hdr:0000000000005783                 db    0
.eh_frame_hdr:0000000000005784                 db  40h ; @
.eh_frame_hdr:0000000000005785                 db 0ECh
.eh_frame_hdr:0000000000005786                 db 0FFh
.eh_frame_hdr:0000000000005787                 db 0FFh
.eh_frame_hdr:0000000000005788                 db 0D0h
.eh_frame_hdr:0000000000005789                 db  0Ah
.eh_frame_hdr:000000000000578A                 db    0
.eh_frame_hdr:000000000000578B                 db    0
.eh_frame_hdr:000000000000578C                 db  60h ; `
.eh_frame_hdr:000000000000578D                 db 0ECh
.eh_frame_hdr:000000000000578E                 db 0FFh
.eh_frame_hdr:000000000000578F                 db 0FFh
.eh_frame_hdr:0000000000005790                 db 0ECh
.eh_frame_hdr:0000000000005791                 db  0Ah
.eh_frame_hdr:0000000000005792                 db    0
.eh_frame_hdr:0000000000005793                 db    0
.eh_frame_hdr:0000000000005794                 db  90h
.eh_frame_hdr:0000000000005795                 db 0ECh
.eh_frame_hdr:0000000000005796                 db 0FFh
.eh_frame_hdr:0000000000005797                 db 0FFh
.eh_frame_hdr:0000000000005798                 db    0
.eh_frame_hdr:0000000000005799                 db  0Bh
.eh_frame_hdr:000000000000579A                 db    0
.eh_frame_hdr:000000000000579B                 db    0
.eh_frame_hdr:000000000000579C                 db 0A0h
.eh_frame_hdr:000000000000579D                 db 0ECh
.eh_frame_hdr:000000000000579E                 db 0FFh
.eh_frame_hdr:000000000000579F                 db 0FFh
.eh_frame_hdr:00000000000057A0                 db  14h
.eh_frame_hdr:00000000000057A1                 db  0Bh
.eh_frame_hdr:00000000000057A2                 db    0
.eh_frame_hdr:00000000000057A3                 db    0
.eh_frame_hdr:00000000000057A4                 db 0E0h
.eh_frame_hdr:00000000000057A5                 db 0ECh
.eh_frame_hdr:00000000000057A6                 db 0FFh
.eh_frame_hdr:00000000000057A7                 db 0FFh
.eh_frame_hdr:00000000000057A8                 db  38h ; 8
.eh_frame_hdr:00000000000057A9                 db  0Bh
.eh_frame_hdr:00000000000057AA                 db    0
.eh_frame_hdr:00000000000057AB                 db    0
.eh_frame_hdr:00000000000057AC                 db  10h
.eh_frame_hdr:00000000000057AD                 db 0EDh
.eh_frame_hdr:00000000000057AE                 db 0FFh
.eh_frame_hdr:00000000000057AF                 db 0FFh
.eh_frame_hdr:00000000000057B0                 db  4Ch ; L
.eh_frame_hdr:00000000000057B1                 db  0Bh
.eh_frame_hdr:00000000000057B2                 db    0
.eh_frame_hdr:00000000000057B3                 db    0
.eh_frame_hdr:00000000000057B4                 db 0A0h
.eh_frame_hdr:00000000000057B5                 db 0EDh
.eh_frame_hdr:00000000000057B6                 db 0FFh
.eh_frame_hdr:00000000000057B7                 db 0FFh
.eh_frame_hdr:00000000000057B8                 db  64h ; d
.eh_frame_hdr:00000000000057B9                 db  0Bh
.eh_frame_hdr:00000000000057BA                 db    0
.eh_frame_hdr:00000000000057BB                 db    0
.eh_frame_hdr:00000000000057BC                 db 0F0h
.eh_frame_hdr:00000000000057BD                 db 0EDh
.eh_frame_hdr:00000000000057BE                 db 0FFh
.eh_frame_hdr:00000000000057BF                 db 0FFh
.eh_frame_hdr:00000000000057C0                 db  7Ch ; |
.eh_frame_hdr:00000000000057C1                 db  0Bh
.eh_frame_hdr:00000000000057C2                 db    0
.eh_frame_hdr:00000000000057C3                 db    0
.eh_frame_hdr:00000000000057C4                 db  10h
.eh_frame_hdr:00000000000057C5                 db 0EEh
.eh_frame_hdr:00000000000057C6                 db 0FFh
.eh_frame_hdr:00000000000057C7                 db 0FFh
.eh_frame_hdr:00000000000057C8                 db  98h
.eh_frame_hdr:00000000000057C9                 db  0Bh
.eh_frame_hdr:00000000000057CA                 db    0
.eh_frame_hdr:00000000000057CB                 db    0
.eh_frame_hdr:00000000000057CC                 db  40h ; @
.eh_frame_hdr:00000000000057CD                 db 0EEh
.eh_frame_hdr:00000000000057CE                 db 0FFh
.eh_frame_hdr:00000000000057CF                 db 0FFh
.eh_frame_hdr:00000000000057D0                 db 0B4h
.eh_frame_hdr:00000000000057D1                 db  0Bh
.eh_frame_hdr:00000000000057D2                 db    0
.eh_frame_hdr:00000000000057D3                 db    0
.eh_frame_hdr:00000000000057D4                 db  70h ; p
.eh_frame_hdr:00000000000057D5                 db 0EEh
.eh_frame_hdr:00000000000057D6                 db 0FFh
.eh_frame_hdr:00000000000057D7                 db 0FFh
.eh_frame_hdr:00000000000057D8                 db 0DCh
.eh_frame_hdr:00000000000057D9                 db  0Bh
.eh_frame_hdr:00000000000057DA                 db    0
.eh_frame_hdr:00000000000057DB                 db    0
.eh_frame_hdr:00000000000057DC                 db  90h
.eh_frame_hdr:00000000000057DD                 db 0EEh
.eh_frame_hdr:00000000000057DE                 db 0FFh
.eh_frame_hdr:00000000000057DF                 db 0FFh
.eh_frame_hdr:00000000000057E0                 db 0F8h
.eh_frame_hdr:00000000000057E1                 db  0Bh
.eh_frame_hdr:00000000000057E2                 db    0
.eh_frame_hdr:00000000000057E3                 db    0
.eh_frame_hdr:00000000000057E4                 db 0D0h
.eh_frame_hdr:00000000000057E5                 db 0EEh
.eh_frame_hdr:00000000000057E6                 db 0FFh
.eh_frame_hdr:00000000000057E7                 db 0FFh
.eh_frame_hdr:00000000000057E8                 db  10h
.eh_frame_hdr:00000000000057E9                 db  0Ch
.eh_frame_hdr:00000000000057EA                 db    0
.eh_frame_hdr:00000000000057EB                 db    0
.eh_frame_hdr:00000000000057EC                 db 0F0h
.eh_frame_hdr:00000000000057ED                 db 0EEh
.eh_frame_hdr:00000000000057EE                 db 0FFh
.eh_frame_hdr:00000000000057EF                 db 0FFh
.eh_frame_hdr:00000000000057F0                 db  30h ; 0
.eh_frame_hdr:00000000000057F1                 db  0Ch
.eh_frame_hdr:00000000000057F2                 db    0
.eh_frame_hdr:00000000000057F3                 db    0
.eh_frame_hdr:00000000000057F4                 db  80h
.eh_frame_hdr:00000000000057F5                 db 0EFh
.eh_frame_hdr:00000000000057F6                 db 0FFh
.eh_frame_hdr:00000000000057F7                 db 0FFh
.eh_frame_hdr:00000000000057F8                 db  70h ; p
.eh_frame_hdr:00000000000057F9                 db  0Ch
.eh_frame_hdr:00000000000057FA                 db    0
.eh_frame_hdr:00000000000057FB                 db    0
.eh_frame_hdr:00000000000057FC                 db    0
.eh_frame_hdr:00000000000057FD                 db 0F0h
.eh_frame_hdr:00000000000057FE                 db 0FFh
.eh_frame_hdr:00000000000057FF                 db 0FFh
.eh_frame_hdr:0000000000005800                 db 0C0h
.eh_frame_hdr:0000000000005801                 db  0Ch
.eh_frame_hdr:0000000000005802                 db    0
.eh_frame_hdr:0000000000005803                 db    0
.eh_frame_hdr:0000000000005804                 db  60h ; `
.eh_frame_hdr:0000000000005805                 db 0F0h
.eh_frame_hdr:0000000000005806                 db 0FFh
.eh_frame_hdr:0000000000005807                 db 0FFh
.eh_frame_hdr:0000000000005808                 db 0E0h
.eh_frame_hdr:0000000000005809                 db  0Ch
.eh_frame_hdr:000000000000580A                 db    0
.eh_frame_hdr:000000000000580B                 db    0
.eh_frame_hdr:000000000000580C                 db 0A0h
.eh_frame_hdr:000000000000580D                 db 0F0h
.eh_frame_hdr:000000000000580E                 db 0FFh
.eh_frame_hdr:000000000000580F                 db 0FFh
.eh_frame_hdr:0000000000005810                 db    0
.eh_frame_hdr:0000000000005811                 db  0Dh
.eh_frame_hdr:0000000000005812                 db    0
.eh_frame_hdr:0000000000005813                 db    0
.eh_frame_hdr:0000000000005814                 db  20h
.eh_frame_hdr:0000000000005815                 db 0F1h
.eh_frame_hdr:0000000000005816                 db 0FFh
.eh_frame_hdr:0000000000005817                 db 0FFh
.eh_frame_hdr:0000000000005818                 db  38h ; 8
.eh_frame_hdr:0000000000005819                 db  0Dh
.eh_frame_hdr:000000000000581A                 db    0
.eh_frame_hdr:000000000000581B                 db    0
.eh_frame_hdr:000000000000581C                 db  60h ; `
.eh_frame_hdr:000000000000581D                 db 0F1h
.eh_frame_hdr:000000000000581E                 db 0FFh
.eh_frame_hdr:000000000000581F                 db 0FFh
.eh_frame_hdr:0000000000005820                 db  58h ; X
.eh_frame_hdr:0000000000005821                 db  0Dh
.eh_frame_hdr:0000000000005822                 db    0
.eh_frame_hdr:0000000000005823                 db    0
.eh_frame_hdr:0000000000005824                 db 0C0h
.eh_frame_hdr:0000000000005825                 db 0F1h
.eh_frame_hdr:0000000000005826                 db 0FFh
.eh_frame_hdr:0000000000005827                 db 0FFh
.eh_frame_hdr:0000000000005828                 db  88h
.eh_frame_hdr:0000000000005829                 db  0Dh
.eh_frame_hdr:000000000000582A                 db    0
.eh_frame_hdr:000000000000582B                 db    0
.eh_frame_hdr:000000000000582C                 db  30h ; 0
.eh_frame_hdr:000000000000582D                 db 0F2h
.eh_frame_hdr:000000000000582E                 db 0FFh
.eh_frame_hdr:000000000000582F                 db 0FFh
.eh_frame_hdr:0000000000005830                 db 0D0h
.eh_frame_hdr:0000000000005831                 db  0Dh
.eh_frame_hdr:0000000000005832                 db    0
.eh_frame_hdr:0000000000005833                 db    0
.eh_frame_hdr:0000000000005834                 db  40h ; @
.eh_frame_hdr:0000000000005835                 db 0F2h
.eh_frame_hdr:0000000000005836                 db 0FFh
.eh_frame_hdr:0000000000005837                 db 0FFh
.eh_frame_hdr:0000000000005838                 db 0E8h
.eh_frame_hdr:0000000000005839                 db  0Dh
.eh_frame_hdr:000000000000583A                 db    0
.eh_frame_hdr:000000000000583B                 db    0
.eh_frame_hdr:000000000000583B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000583B
LOAD:000000000000583C ; ===========================================================================
LOAD:000000000000583C
LOAD:000000000000583C ; Segment type: Pure code
LOAD:000000000000583C ; Segment permissions: Read/Execute
LOAD:000000000000583C LOAD            segment byte public 'CODE' use64
LOAD:000000000000583C                 assume cs:LOAD
LOAD:000000000000583C                 ;org 583Ch
LOAD:000000000000583C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000583C                 align 20h
LOAD:000000000000583C LOAD            ends
LOAD:000000000000583C
.eh_frame:0000000000005840 ; ===========================================================================
.eh_frame:0000000000005840
.eh_frame:0000000000005840 ; Segment type: Pure data
.eh_frame:0000000000005840 ; Segment permissions: Read
.eh_frame:0000000000005840 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005840                 assume cs:_eh_frame
.eh_frame:0000000000005840                 ;org 5840h
.eh_frame:0000000000005840                 db  14h
.eh_frame:0000000000005841                 db    0
.eh_frame:0000000000005842                 db    0
.eh_frame:0000000000005843                 db    0
.eh_frame:0000000000005844                 db    0
.eh_frame:0000000000005845                 db    0
.eh_frame:0000000000005846                 db    0
.eh_frame:0000000000005847                 db    0
.eh_frame:0000000000005848                 db    1
.eh_frame:0000000000005849                 db  7Ah ; z
.eh_frame:000000000000584A                 db  52h ; R
.eh_frame:000000000000584B                 db    0
.eh_frame:000000000000584C                 db    1
.eh_frame:000000000000584D                 db  78h ; x
.eh_frame:000000000000584E                 db  10h
.eh_frame:000000000000584F                 db    1
.eh_frame:0000000000005850                 db  1Bh
.eh_frame:0000000000005851                 db  0Ch
.eh_frame:0000000000005852                 db    7
.eh_frame:0000000000005853                 db    8
.eh_frame:0000000000005854                 db  90h
.eh_frame:0000000000005855                 db    1
.eh_frame:0000000000005856                 db    7
.eh_frame:0000000000005857                 db  10h
.eh_frame:0000000000005858                 db  14h
.eh_frame:0000000000005859                 db    0
.eh_frame:000000000000585A                 db    0
.eh_frame:000000000000585B                 db    0
.eh_frame:000000000000585C                 db  1Ch
.eh_frame:000000000000585D                 db    0
.eh_frame:000000000000585E                 db    0
.eh_frame:000000000000585F                 db    0
.eh_frame:0000000000005860                 db  90h
.eh_frame:0000000000005861                 db 0BEh
.eh_frame:0000000000005862                 db 0FFh
.eh_frame:0000000000005863                 db 0FFh
.eh_frame:0000000000005864                 db  2Bh ; +
.eh_frame:0000000000005865                 db    0
.eh_frame:0000000000005866                 db    0
.eh_frame:0000000000005867                 db    0
.eh_frame:0000000000005868                 db    0
.eh_frame:0000000000005869                 db    0
.eh_frame:000000000000586A                 db    0
.eh_frame:000000000000586B                 db    0
.eh_frame:000000000000586C                 db    0
.eh_frame:000000000000586D                 db    0
.eh_frame:000000000000586E                 db    0
.eh_frame:000000000000586F                 db    0
.eh_frame:0000000000005870                 db  14h
.eh_frame:0000000000005871                 db    0
.eh_frame:0000000000005872                 db    0
.eh_frame:0000000000005873                 db    0
.eh_frame:0000000000005874                 db    0
.eh_frame:0000000000005875                 db    0
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db    1
.eh_frame:0000000000005879                 db  7Ah ; z
.eh_frame:000000000000587A                 db  52h ; R
.eh_frame:000000000000587B                 db    0
.eh_frame:000000000000587C                 db    1
.eh_frame:000000000000587D                 db  78h ; x
.eh_frame:000000000000587E                 db  10h
.eh_frame:000000000000587F                 db    1
.eh_frame:0000000000005880                 db  1Bh
.eh_frame:0000000000005881                 db  0Ch
.eh_frame:0000000000005882                 db    7
.eh_frame:0000000000005883                 db    8
.eh_frame:0000000000005884                 db  90h
.eh_frame:0000000000005885                 db    1
.eh_frame:0000000000005886                 db    0
.eh_frame:0000000000005887                 db    0
.eh_frame:0000000000005888                 db  24h ; $
.eh_frame:0000000000005889                 db    0
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db  1Ch
.eh_frame:000000000000588D                 db    0
.eh_frame:000000000000588E                 db    0
.eh_frame:000000000000588F                 db    0
.eh_frame:0000000000005890                 db 0D0h
.eh_frame:0000000000005891                 db 0B9h
.eh_frame:0000000000005892                 db 0FFh
.eh_frame:0000000000005893                 db 0FFh
.eh_frame:0000000000005894                 db 0A0h
.eh_frame:0000000000005895                 db    2
.eh_frame:0000000000005896                 db    0
.eh_frame:0000000000005897                 db    0
.eh_frame:0000000000005898                 db    0
.eh_frame:0000000000005899                 db  0Eh
.eh_frame:000000000000589A                 db  10h
.eh_frame:000000000000589B                 db  46h ; F
.eh_frame:000000000000589C                 db  0Eh
.eh_frame:000000000000589D                 db  18h
.eh_frame:000000000000589E                 db  4Ah ; J
.eh_frame:000000000000589F                 db  0Fh
.eh_frame:00000000000058A0                 db  0Bh
.eh_frame:00000000000058A1                 db  77h ; w
.eh_frame:00000000000058A2                 db    8
.eh_frame:00000000000058A3                 db  80h
.eh_frame:00000000000058A4                 db    0
.eh_frame:00000000000058A5                 db  3Fh ; ?
.eh_frame:00000000000058A6                 db  1Ah
.eh_frame:00000000000058A7                 db  3Bh ; ;
.eh_frame:00000000000058A8                 db  2Ah ; *
.eh_frame:00000000000058A9                 db  33h ; 3
.eh_frame:00000000000058AA                 db  24h ; $
.eh_frame:00000000000058AB                 db  22h ; "
.eh_frame:00000000000058AC                 db    0
.eh_frame:00000000000058AD                 db    0
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db  14h
.eh_frame:00000000000058B1                 db    0
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db  44h ; D
.eh_frame:00000000000058B5                 db    0
.eh_frame:00000000000058B6                 db    0
.eh_frame:00000000000058B7                 db    0
.eh_frame:00000000000058B8                 db  48h ; H
.eh_frame:00000000000058B9                 db 0BCh
.eh_frame:00000000000058BA                 db 0FFh
.eh_frame:00000000000058BB                 db 0FFh
.eh_frame:00000000000058BC                 db    8
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db    0
.eh_frame:00000000000058C1                 db    0
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db    0
.eh_frame:00000000000058C5                 db    0
.eh_frame:00000000000058C6                 db    0
.eh_frame:00000000000058C7                 db    0
.eh_frame:00000000000058C8                 db  38h ; 8
.eh_frame:00000000000058C9                 db    0
.eh_frame:00000000000058CA                 db    0
.eh_frame:00000000000058CB                 db    0
.eh_frame:00000000000058CC                 db  5Ch ; \
.eh_frame:00000000000058CD                 db    0
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db  30h ; 0
.eh_frame:00000000000058D1                 db 0BFh
.eh_frame:00000000000058D2                 db 0FFh
.eh_frame:00000000000058D3                 db 0FFh
.eh_frame:00000000000058D4                 db 0CFh
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db    0
.eh_frame:00000000000058D9                 db  42h ; B
.eh_frame:00000000000058DA                 db  0Eh
.eh_frame:00000000000058DB                 db  10h
.eh_frame:00000000000058DC                 db  8Dh
.eh_frame:00000000000058DD                 db    2
.eh_frame:00000000000058DE                 db  42h ; B
.eh_frame:00000000000058DF                 db  0Eh
.eh_frame:00000000000058E0                 db  18h
.eh_frame:00000000000058E1                 db  8Ch
.eh_frame:00000000000058E2                 db    3
.eh_frame:00000000000058E3                 db  44h ; D
.eh_frame:00000000000058E4                 db  0Eh
.eh_frame:00000000000058E5                 db  20h
.eh_frame:00000000000058E6                 db  86h
.eh_frame:00000000000058E7                 db    4
.eh_frame:00000000000058E8                 db  41h ; A
.eh_frame:00000000000058E9                 db  0Eh
.eh_frame:00000000000058EA                 db  28h ; (
.eh_frame:00000000000058EB                 db  83h
.eh_frame:00000000000058EC                 db    5
.eh_frame:00000000000058ED                 db  47h ; G
.eh_frame:00000000000058EE                 db  0Eh
.eh_frame:00000000000058EF                 db  30h ; 0
.eh_frame:00000000000058F0                 db    2
.eh_frame:00000000000058F1                 db  53h ; S
.eh_frame:00000000000058F2                 db  0Ah
.eh_frame:00000000000058F3                 db  0Eh
.eh_frame:00000000000058F4                 db  28h ; (
.eh_frame:00000000000058F5                 db  44h ; D
.eh_frame:00000000000058F6                 db  0Eh
.eh_frame:00000000000058F7                 db  20h
.eh_frame:00000000000058F8                 db  41h ; A
.eh_frame:00000000000058F9                 db  0Eh
.eh_frame:00000000000058FA                 db  18h
.eh_frame:00000000000058FB                 db  42h ; B
.eh_frame:00000000000058FC                 db  0Eh
.eh_frame:00000000000058FD                 db  10h
.eh_frame:00000000000058FE                 db  42h ; B
.eh_frame:00000000000058FF                 db  0Eh
.eh_frame:0000000000005900                 db    8
.eh_frame:0000000000005901                 db  4Ch ; L
.eh_frame:0000000000005902                 db  0Bh
.eh_frame:0000000000005903                 db    0
.eh_frame:0000000000005904                 db  28h ; (
.eh_frame:0000000000005905                 db    0
.eh_frame:0000000000005906                 db    0
.eh_frame:0000000000005907                 db    0
.eh_frame:0000000000005908                 db  98h
.eh_frame:0000000000005909                 db    0
.eh_frame:000000000000590A                 db    0
.eh_frame:000000000000590B                 db    0
.eh_frame:000000000000590C                 db 0C4h
.eh_frame:000000000000590D                 db 0BFh
.eh_frame:000000000000590E                 db 0FFh
.eh_frame:000000000000590F                 db 0FFh
.eh_frame:0000000000005910                 db 0C2h
.eh_frame:0000000000005911                 db    3
.eh_frame:0000000000005912                 db    0
.eh_frame:0000000000005913                 db    0
.eh_frame:0000000000005914                 db    0
.eh_frame:0000000000005915                 db  42h ; B
.eh_frame:0000000000005916                 db  0Eh
.eh_frame:0000000000005917                 db  10h
.eh_frame:0000000000005918                 db  8Dh
.eh_frame:0000000000005919                 db    2
.eh_frame:000000000000591A                 db  42h ; B
.eh_frame:000000000000591B                 db  0Eh
.eh_frame:000000000000591C                 db  18h
.eh_frame:000000000000591D                 db  8Ch
.eh_frame:000000000000591E                 db    3
.eh_frame:000000000000591F                 db  46h ; F
.eh_frame:0000000000005920                 db  0Eh
.eh_frame:0000000000005921                 db  20h
.eh_frame:0000000000005922                 db  86h
.eh_frame:0000000000005923                 db    4
.eh_frame:0000000000005924                 db  41h ; A
.eh_frame:0000000000005925                 db  0Eh
.eh_frame:0000000000005926                 db  28h ; (
.eh_frame:0000000000005927                 db  83h
.eh_frame:0000000000005928                 db    5
.eh_frame:0000000000005929                 db  49h ; I
.eh_frame:000000000000592A                 db  0Eh
.eh_frame:000000000000592B                 db 0B0h
.eh_frame:000000000000592C                 db    1
.eh_frame:000000000000592D                 db    0
.eh_frame:000000000000592E                 db    0
.eh_frame:000000000000592F                 db    0
.eh_frame:0000000000005930                 db  3Ch ; <
.eh_frame:0000000000005931                 db    0
.eh_frame:0000000000005932                 db    0
.eh_frame:0000000000005933                 db    0
.eh_frame:0000000000005934                 db 0C4h
.eh_frame:0000000000005935                 db    0
.eh_frame:0000000000005936                 db    0
.eh_frame:0000000000005937                 db    0
.eh_frame:0000000000005938                 db 0D8h
.eh_frame:0000000000005939                 db 0BBh
.eh_frame:000000000000593A                 db 0FFh
.eh_frame:000000000000593B                 db 0FFh
.eh_frame:000000000000593C                 db 0DFh
.eh_frame:000000000000593D                 db    1
.eh_frame:000000000000593E                 db    0
.eh_frame:000000000000593F                 db    0
.eh_frame:0000000000005940                 db    0
.eh_frame:0000000000005941                 db  42h ; B
.eh_frame:0000000000005942                 db  0Eh
.eh_frame:0000000000005943                 db  10h
.eh_frame:0000000000005944                 db  8Eh
.eh_frame:0000000000005945                 db    2
.eh_frame:0000000000005946                 db  42h ; B
.eh_frame:0000000000005947                 db  0Eh
.eh_frame:0000000000005948                 db  18h
.eh_frame:0000000000005949                 db  8Dh
.eh_frame:000000000000594A                 db    3
.eh_frame:000000000000594B                 db  45h ; E
.eh_frame:000000000000594C                 db  0Eh
.eh_frame:000000000000594D                 db  20h
.eh_frame:000000000000594E                 db  8Ch
.eh_frame:000000000000594F                 db    4
.eh_frame:0000000000005950                 db  41h ; A
.eh_frame:0000000000005951                 db  0Eh
.eh_frame:0000000000005952                 db  28h ; (
.eh_frame:0000000000005953                 db  86h
.eh_frame:0000000000005954                 db    5
.eh_frame:0000000000005955                 db  43h ; C
.eh_frame:0000000000005956                 db  0Eh
.eh_frame:0000000000005957                 db  30h ; 0
.eh_frame:0000000000005958                 db  83h
.eh_frame:0000000000005959                 db    6
.eh_frame:000000000000595A                 db    3
.eh_frame:000000000000595B                 db  27h ; '
.eh_frame:000000000000595C                 db    1
.eh_frame:000000000000595D                 db  0Ah
.eh_frame:000000000000595E                 db  0Eh
.eh_frame:000000000000595F                 db  28h ; (
.eh_frame:0000000000005960                 db  43h ; C
.eh_frame:0000000000005961                 db  0Eh
.eh_frame:0000000000005962                 db  20h
.eh_frame:0000000000005963                 db  42h ; B
.eh_frame:0000000000005964                 db  0Eh
.eh_frame:0000000000005965                 db  18h
.eh_frame:0000000000005966                 db  42h ; B
.eh_frame:0000000000005967                 db  0Eh
.eh_frame:0000000000005968                 db  10h
.eh_frame:0000000000005969                 db  42h ; B
.eh_frame:000000000000596A                 db  0Eh
.eh_frame:000000000000596B                 db    8
.eh_frame:000000000000596C                 db  41h ; A
.eh_frame:000000000000596D                 db  0Bh
.eh_frame:000000000000596E                 db    0
.eh_frame:000000000000596F                 db    0
.eh_frame:0000000000005970                 db  10h
.eh_frame:0000000000005971                 db    0
.eh_frame:0000000000005972                 db    0
.eh_frame:0000000000005973                 db    0
.eh_frame:0000000000005974                 db    4
.eh_frame:0000000000005975                 db    1
.eh_frame:0000000000005976                 db    0
.eh_frame:0000000000005977                 db    0
.eh_frame:0000000000005978                 db  28h ; (
.eh_frame:0000000000005979                 db 0C3h
.eh_frame:000000000000597A                 db 0FFh
.eh_frame:000000000000597B                 db 0FFh
.eh_frame:000000000000597C                 db    8
.eh_frame:000000000000597D                 db    0
.eh_frame:000000000000597E                 db    0
.eh_frame:000000000000597F                 db    0
.eh_frame:0000000000005980                 db    0
.eh_frame:0000000000005981                 db    0
.eh_frame:0000000000005982                 db    0
.eh_frame:0000000000005983                 db    0
.eh_frame:0000000000005984                 db  10h
.eh_frame:0000000000005985                 db    0
.eh_frame:0000000000005986                 db    0
.eh_frame:0000000000005987                 db    0
.eh_frame:0000000000005988                 db  18h
.eh_frame:0000000000005989                 db    1
.eh_frame:000000000000598A                 db    0
.eh_frame:000000000000598B                 db    0
.eh_frame:000000000000598C                 db  24h ; $
.eh_frame:000000000000598D                 db 0C3h
.eh_frame:000000000000598E                 db 0FFh
.eh_frame:000000000000598F                 db 0FFh
.eh_frame:0000000000005990                 db    8
.eh_frame:0000000000005991                 db    0
.eh_frame:0000000000005992                 db    0
.eh_frame:0000000000005993                 db    0
.eh_frame:0000000000005994                 db    0
.eh_frame:0000000000005995                 db    0
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db  2Ch ; ,
.eh_frame:0000000000005999                 db    0
.eh_frame:000000000000599A                 db    0
.eh_frame:000000000000599B                 db    0
.eh_frame:000000000000599C                 db  2Ch ; ,
.eh_frame:000000000000599D                 db    1
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db  20h
.eh_frame:00000000000059A1                 db 0C3h
.eh_frame:00000000000059A2                 db 0FFh
.eh_frame:00000000000059A3                 db 0FFh
.eh_frame:00000000000059A4                 db 0A4h
.eh_frame:00000000000059A5                 db    0
.eh_frame:00000000000059A6                 db    0
.eh_frame:00000000000059A7                 db    0
.eh_frame:00000000000059A8                 db    0
.eh_frame:00000000000059A9                 db  41h ; A
.eh_frame:00000000000059AA                 db  0Eh
.eh_frame:00000000000059AB                 db  10h
.eh_frame:00000000000059AC                 db  86h
.eh_frame:00000000000059AD                 db    2
.eh_frame:00000000000059AE                 db  41h ; A
.eh_frame:00000000000059AF                 db  0Eh
.eh_frame:00000000000059B0                 db  18h
.eh_frame:00000000000059B1                 db  83h
.eh_frame:00000000000059B2                 db    3
.eh_frame:00000000000059B3                 db  44h ; D
.eh_frame:00000000000059B4                 db  0Eh
.eh_frame:00000000000059B5                 db  20h
.eh_frame:00000000000059B6                 db  7Ah ; z
.eh_frame:00000000000059B7                 db  0Ah
.eh_frame:00000000000059B8                 db  0Eh
.eh_frame:00000000000059B9                 db  18h
.eh_frame:00000000000059BA                 db  41h ; A
.eh_frame:00000000000059BB                 db  0Eh
.eh_frame:00000000000059BC                 db  10h
.eh_frame:00000000000059BD                 db  41h ; A
.eh_frame:00000000000059BE                 db  0Eh
.eh_frame:00000000000059BF                 db    8
.eh_frame:00000000000059C0                 db  41h ; A
.eh_frame:00000000000059C1                 db  0Bh
.eh_frame:00000000000059C2                 db    0
.eh_frame:00000000000059C3                 db    0
.eh_frame:00000000000059C4                 db    0
.eh_frame:00000000000059C5                 db    0
.eh_frame:00000000000059C6                 db    0
.eh_frame:00000000000059C7                 db    0
.eh_frame:00000000000059C8                 db  34h ; 4
.eh_frame:00000000000059C9                 db    0
.eh_frame:00000000000059CA                 db    0
.eh_frame:00000000000059CB                 db    0
.eh_frame:00000000000059CC                 db  5Ch ; \
.eh_frame:00000000000059CD                 db    1
.eh_frame:00000000000059CE                 db    0
.eh_frame:00000000000059CF                 db    0
.eh_frame:00000000000059D0                 db 0A0h
.eh_frame:00000000000059D1                 db 0C3h
.eh_frame:00000000000059D2                 db 0FFh
.eh_frame:00000000000059D3                 db 0FFh
.eh_frame:00000000000059D4                 db  59h ; Y
.eh_frame:00000000000059D5                 db    0
.eh_frame:00000000000059D6                 db    0
.eh_frame:00000000000059D7                 db    0
.eh_frame:00000000000059D8                 db    0
.eh_frame:00000000000059D9                 db  41h ; A
.eh_frame:00000000000059DA                 db  0Eh
.eh_frame:00000000000059DB                 db  10h
.eh_frame:00000000000059DC                 db  86h
.eh_frame:00000000000059DD                 db    2
.eh_frame:00000000000059DE                 db  41h ; A
.eh_frame:00000000000059DF                 db  0Eh
.eh_frame:00000000000059E0                 db  18h
.eh_frame:00000000000059E1                 db  83h
.eh_frame:00000000000059E2                 db    3
.eh_frame:00000000000059E3                 db  47h ; G
.eh_frame:00000000000059E4                 db  0Eh
.eh_frame:00000000000059E5                 db  20h
.eh_frame:00000000000059E6                 db  65h ; e
.eh_frame:00000000000059E7                 db  0Ah
.eh_frame:00000000000059E8                 db  0Eh
.eh_frame:00000000000059E9                 db  18h
.eh_frame:00000000000059EA                 db  41h ; A
.eh_frame:00000000000059EB                 db  0Eh
.eh_frame:00000000000059EC                 db  10h
.eh_frame:00000000000059ED                 db  41h ; A
.eh_frame:00000000000059EE                 db  0Eh
.eh_frame:00000000000059EF                 db    8
.eh_frame:00000000000059F0                 db  50h ; P
.eh_frame:00000000000059F1                 db  0Bh
.eh_frame:00000000000059F2                 db  4Ch ; L
.eh_frame:00000000000059F3                 db  0Eh
.eh_frame:00000000000059F4                 db  18h
.eh_frame:00000000000059F5                 db  47h ; G
.eh_frame:00000000000059F6                 db  0Eh
.eh_frame:00000000000059F7                 db  10h
.eh_frame:00000000000059F8                 db  41h ; A
.eh_frame:00000000000059F9                 db  0Eh
.eh_frame:00000000000059FA                 db    8
.eh_frame:00000000000059FB                 db    0
.eh_frame:00000000000059FC                 db    0
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db  10h
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db  94h
.eh_frame:0000000000005A05                 db    1
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db 0C8h
.eh_frame:0000000000005A09                 db 0C3h
.eh_frame:0000000000005A0A                 db 0FFh
.eh_frame:0000000000005A0B                 db 0FFh
.eh_frame:0000000000005A0C                 db  5Ch ; \
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db    0
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db  28h ; (
.eh_frame:0000000000005A15                 db    0
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db 0A8h
.eh_frame:0000000000005A19                 db    1
.eh_frame:0000000000005A1A                 db    0
.eh_frame:0000000000005A1B                 db    0
.eh_frame:0000000000005A1C                 db  14h
.eh_frame:0000000000005A1D                 db 0C4h
.eh_frame:0000000000005A1E                 db 0FFh
.eh_frame:0000000000005A1F                 db 0FFh
.eh_frame:0000000000005A20                 db  47h ; G
.eh_frame:0000000000005A21                 db    0
.eh_frame:0000000000005A22                 db    0
.eh_frame:0000000000005A23                 db    0
.eh_frame:0000000000005A24                 db    0
.eh_frame:0000000000005A25                 db  41h ; A
.eh_frame:0000000000005A26                 db  0Eh
.eh_frame:0000000000005A27                 db  10h
.eh_frame:0000000000005A28                 db  83h
.eh_frame:0000000000005A29                 db    2
.eh_frame:0000000000005A2A                 db  5Ah ; Z
.eh_frame:0000000000005A2B                 db  0Ah
.eh_frame:0000000000005A2C                 db  0Eh
.eh_frame:0000000000005A2D                 db    8
.eh_frame:0000000000005A2E                 db  45h ; E
.eh_frame:0000000000005A2F                 db  0Bh
.eh_frame:0000000000005A30                 db  5Dh ; ]
.eh_frame:0000000000005A31                 db  0Ah
.eh_frame:0000000000005A32                 db  0Eh
.eh_frame:0000000000005A33                 db    8
.eh_frame:0000000000005A34                 db  43h ; C
.eh_frame:0000000000005A35                 db  0Bh
.eh_frame:0000000000005A36                 db  46h ; F
.eh_frame:0000000000005A37                 db  0Eh
.eh_frame:0000000000005A38                 db    8
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db    0
.eh_frame:0000000000005A3D                 db    0
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db  24h ; $
.eh_frame:0000000000005A41                 db    0
.eh_frame:0000000000005A42                 db    0
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db 0D4h
.eh_frame:0000000000005A45                 db    1
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db  38h ; 8
.eh_frame:0000000000005A49                 db 0C4h
.eh_frame:0000000000005A4A                 db 0FFh
.eh_frame:0000000000005A4B                 db 0FFh
.eh_frame:0000000000005A4C                 db  33h ; 3
.eh_frame:0000000000005A4D                 db    0
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db    0
.eh_frame:0000000000005A51                 db  41h ; A
.eh_frame:0000000000005A52                 db  0Eh
.eh_frame:0000000000005A53                 db  10h
.eh_frame:0000000000005A54                 db  86h
.eh_frame:0000000000005A55                 db    2
.eh_frame:0000000000005A56                 db  41h ; A
.eh_frame:0000000000005A57                 db  0Eh
.eh_frame:0000000000005A58                 db  18h
.eh_frame:0000000000005A59                 db  83h
.eh_frame:0000000000005A5A                 db    3
.eh_frame:0000000000005A5B                 db  47h ; G
.eh_frame:0000000000005A5C                 db  0Eh
.eh_frame:0000000000005A5D                 db  20h
.eh_frame:0000000000005A5E                 db  67h ; g
.eh_frame:0000000000005A5F                 db  0Eh
.eh_frame:0000000000005A60                 db  18h
.eh_frame:0000000000005A61                 db  41h ; A
.eh_frame:0000000000005A62                 db  0Eh
.eh_frame:0000000000005A63                 db  10h
.eh_frame:0000000000005A64                 db  41h ; A
.eh_frame:0000000000005A65                 db  0Eh
.eh_frame:0000000000005A66                 db    8
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  1Ch
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db 0FCh
.eh_frame:0000000000005A6D                 db    1
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db  50h ; P
.eh_frame:0000000000005A71                 db 0C4h
.eh_frame:0000000000005A72                 db 0FFh
.eh_frame:0000000000005A73                 db 0FFh
.eh_frame:0000000000005A74                 db  9Fh
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db    0
.eh_frame:0000000000005A79                 db  44h ; D
.eh_frame:0000000000005A7A                 db  0Eh
.eh_frame:0000000000005A7B                 db  10h
.eh_frame:0000000000005A7C                 db  83h
.eh_frame:0000000000005A7D                 db    2
.eh_frame:0000000000005A7E                 db    2
.eh_frame:0000000000005A7F                 db  78h ; x
.eh_frame:0000000000005A80                 db  0Ah
.eh_frame:0000000000005A81                 db  0Eh
.eh_frame:0000000000005A82                 db    8
.eh_frame:0000000000005A83                 db  41h ; A
.eh_frame:0000000000005A84                 db  0Bh
.eh_frame:0000000000005A85                 db    0
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db  40h ; @
.eh_frame:0000000000005A89                 db    0
.eh_frame:0000000000005A8A                 db    0
.eh_frame:0000000000005A8B                 db    0
.eh_frame:0000000000005A8C                 db  1Ch
.eh_frame:0000000000005A8D                 db    2
.eh_frame:0000000000005A8E                 db    0
.eh_frame:0000000000005A8F                 db    0
.eh_frame:0000000000005A90                 db 0D0h
.eh_frame:0000000000005A91                 db 0C4h
.eh_frame:0000000000005A92                 db 0FFh
.eh_frame:0000000000005A93                 db 0FFh
.eh_frame:0000000000005A94                 db 0E7h
.eh_frame:0000000000005A95                 db    0
.eh_frame:0000000000005A96                 db    0
.eh_frame:0000000000005A97                 db    0
.eh_frame:0000000000005A98                 db    0
.eh_frame:0000000000005A99                 db  41h ; A
.eh_frame:0000000000005A9A                 db  0Eh
.eh_frame:0000000000005A9B                 db  10h
.eh_frame:0000000000005A9C                 db  86h
.eh_frame:0000000000005A9D                 db    2
.eh_frame:0000000000005A9E                 db  41h ; A
.eh_frame:0000000000005A9F                 db  0Eh
.eh_frame:0000000000005AA0                 db  18h
.eh_frame:0000000000005AA1                 db  83h
.eh_frame:0000000000005AA2                 db    3
.eh_frame:0000000000005AA3                 db  49h ; I
.eh_frame:0000000000005AA4                 db  0Eh
.eh_frame:0000000000005AA5                 db  20h
.eh_frame:0000000000005AA6                 db  6Eh ; n
.eh_frame:0000000000005AA7                 db  0Ah
.eh_frame:0000000000005AA8                 db  0Eh
.eh_frame:0000000000005AA9                 db  18h
.eh_frame:0000000000005AAA                 db  41h ; A
.eh_frame:0000000000005AAB                 db  0Eh
.eh_frame:0000000000005AAC                 db  10h
.eh_frame:0000000000005AAD                 db  41h ; A
.eh_frame:0000000000005AAE                 db  0Eh
.eh_frame:0000000000005AAF                 db    8
.eh_frame:0000000000005AB0                 db  45h ; E
.eh_frame:0000000000005AB1                 db  0Bh
.eh_frame:0000000000005AB2                 db    2
.eh_frame:0000000000005AB3                 db  4Ah ; J
.eh_frame:0000000000005AB4                 db  0Ah
.eh_frame:0000000000005AB5                 db  0Eh
.eh_frame:0000000000005AB6                 db  18h
.eh_frame:0000000000005AB7                 db  41h ; A
.eh_frame:0000000000005AB8                 db  0Eh
.eh_frame:0000000000005AB9                 db  10h
.eh_frame:0000000000005ABA                 db  41h ; A
.eh_frame:0000000000005ABB                 db  0Eh
.eh_frame:0000000000005ABC                 db    8
.eh_frame:0000000000005ABD                 db  44h ; D
.eh_frame:0000000000005ABE                 db  0Bh
.eh_frame:0000000000005ABF                 db    2
.eh_frame:0000000000005AC0                 db  54h ; T
.eh_frame:0000000000005AC1                 db  0Eh
.eh_frame:0000000000005AC2                 db  18h
.eh_frame:0000000000005AC3                 db  41h ; A
.eh_frame:0000000000005AC4                 db  0Eh
.eh_frame:0000000000005AC5                 db  10h
.eh_frame:0000000000005AC6                 db  41h ; A
.eh_frame:0000000000005AC7                 db  0Eh
.eh_frame:0000000000005AC8                 db    8
.eh_frame:0000000000005AC9                 db    0
.eh_frame:0000000000005ACA                 db    0
.eh_frame:0000000000005ACB                 db    0
.eh_frame:0000000000005ACC                 db  74h ; t
.eh_frame:0000000000005ACD                 db    0
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db  60h ; `
.eh_frame:0000000000005AD1                 db    2
.eh_frame:0000000000005AD2                 db    0
.eh_frame:0000000000005AD3                 db    0
.eh_frame:0000000000005AD4                 db  7Ch ; |
.eh_frame:0000000000005AD5                 db 0C5h
.eh_frame:0000000000005AD6                 db 0FFh
.eh_frame:0000000000005AD7                 db 0FFh
.eh_frame:0000000000005AD8                 db  34h ; 4
.eh_frame:0000000000005AD9                 db  12h
.eh_frame:0000000000005ADA                 db    0
.eh_frame:0000000000005ADB                 db    0
.eh_frame:0000000000005ADC                 db    0
.eh_frame:0000000000005ADD                 db  42h ; B
.eh_frame:0000000000005ADE                 db  0Eh
.eh_frame:0000000000005ADF                 db  10h
.eh_frame:0000000000005AE0                 db  8Fh
.eh_frame:0000000000005AE1                 db    2
.eh_frame:0000000000005AE2                 db  42h ; B
.eh_frame:0000000000005AE3                 db  0Eh
.eh_frame:0000000000005AE4                 db  18h
.eh_frame:0000000000005AE5                 db  8Eh
.eh_frame:0000000000005AE6                 db    3
.eh_frame:0000000000005AE7                 db  45h ; E
.eh_frame:0000000000005AE8                 db  0Eh
.eh_frame:0000000000005AE9                 db  20h
.eh_frame:0000000000005AEA                 db  8Dh
.eh_frame:0000000000005AEB                 db    4
.eh_frame:0000000000005AEC                 db  42h ; B
.eh_frame:0000000000005AED                 db  0Eh
.eh_frame:0000000000005AEE                 db  28h ; (
.eh_frame:0000000000005AEF                 db  8Ch
.eh_frame:0000000000005AF0                 db    5
.eh_frame:0000000000005AF1                 db  44h ; D
.eh_frame:0000000000005AF2                 db  0Eh
.eh_frame:0000000000005AF3                 db  30h ; 0
.eh_frame:0000000000005AF4                 db  86h
.eh_frame:0000000000005AF5                 db    6
.eh_frame:0000000000005AF6                 db  41h ; A
.eh_frame:0000000000005AF7                 db  0Eh
.eh_frame:0000000000005AF8                 db  38h ; 8
.eh_frame:0000000000005AF9                 db  83h
.eh_frame:0000000000005AFA                 db    7
.eh_frame:0000000000005AFB                 db  53h ; S
.eh_frame:0000000000005AFC                 db  0Eh
.eh_frame:0000000000005AFD                 db 0F0h
.eh_frame:0000000000005AFE                 db    1
.eh_frame:0000000000005AFF                 db    3
.eh_frame:0000000000005B00                 db  81h
.eh_frame:0000000000005B01                 db  0Bh
.eh_frame:0000000000005B02                 db  0Eh
.eh_frame:0000000000005B03                 db 0F8h
.eh_frame:0000000000005B04                 db    1
.eh_frame:0000000000005B05                 db  4Ah ; J
.eh_frame:0000000000005B06                 db  0Eh
.eh_frame:0000000000005B07                 db  80h
.eh_frame:0000000000005B08                 db    2
.eh_frame:0000000000005B09                 db  44h ; D
.eh_frame:0000000000005B0A                 db  0Eh
.eh_frame:0000000000005B0B                 db  88h
.eh_frame:0000000000005B0C                 db    2
.eh_frame:0000000000005B0D                 db  45h ; E
.eh_frame:0000000000005B0E                 db  0Eh
.eh_frame:0000000000005B0F                 db  90h
.eh_frame:0000000000005B10                 db    2
.eh_frame:0000000000005B11                 db  5Fh ; _
.eh_frame:0000000000005B12                 db  0Eh
.eh_frame:0000000000005B13                 db 0F0h
.eh_frame:0000000000005B14                 db    1
.eh_frame:0000000000005B15                 db  64h ; d
.eh_frame:0000000000005B16                 db  0Ah
.eh_frame:0000000000005B17                 db  0Eh
.eh_frame:0000000000005B18                 db  38h ; 8
.eh_frame:0000000000005B19                 db  41h ; A
.eh_frame:0000000000005B1A                 db  0Eh
.eh_frame:0000000000005B1B                 db  30h ; 0
.eh_frame:0000000000005B1C                 db  41h ; A
.eh_frame:0000000000005B1D                 db  0Eh
.eh_frame:0000000000005B1E                 db  28h ; (
.eh_frame:0000000000005B1F                 db  42h ; B
.eh_frame:0000000000005B20                 db  0Eh
.eh_frame:0000000000005B21                 db  20h
.eh_frame:0000000000005B22                 db  42h ; B
.eh_frame:0000000000005B23                 db  0Eh
.eh_frame:0000000000005B24                 db  18h
.eh_frame:0000000000005B25                 db  42h ; B
.eh_frame:0000000000005B26                 db  0Eh
.eh_frame:0000000000005B27                 db  10h
.eh_frame:0000000000005B28                 db  42h ; B
.eh_frame:0000000000005B29                 db  0Eh
.eh_frame:0000000000005B2A                 db    8
.eh_frame:0000000000005B2B                 db  44h ; D
.eh_frame:0000000000005B2C                 db  0Bh
.eh_frame:0000000000005B2D                 db    3
.eh_frame:0000000000005B2E                 db  99h
.eh_frame:0000000000005B2F                 db    5
.eh_frame:0000000000005B30                 db  0Eh
.eh_frame:0000000000005B31                 db 0F8h
.eh_frame:0000000000005B32                 db    1
.eh_frame:0000000000005B33                 db  4Dh ; M
.eh_frame:0000000000005B34                 db  0Eh
.eh_frame:0000000000005B35                 db  80h
.eh_frame:0000000000005B36                 db    2
.eh_frame:0000000000005B37                 db  44h ; D
.eh_frame:0000000000005B38                 db  0Eh
.eh_frame:0000000000005B39                 db  88h
.eh_frame:0000000000005B3A                 db    2
.eh_frame:0000000000005B3B                 db  47h ; G
.eh_frame:0000000000005B3C                 db  0Eh
.eh_frame:0000000000005B3D                 db  90h
.eh_frame:0000000000005B3E                 db    2
.eh_frame:0000000000005B3F                 db  5Bh ; [
.eh_frame:0000000000005B40                 db  0Eh
.eh_frame:0000000000005B41                 db 0F0h
.eh_frame:0000000000005B42                 db    1
.eh_frame:0000000000005B43                 db    0
.eh_frame:0000000000005B44                 db  68h ; h
.eh_frame:0000000000005B45                 db    0
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db 0D8h
.eh_frame:0000000000005B49                 db    2
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db  44h ; D
.eh_frame:0000000000005B4D                 db 0D7h
.eh_frame:0000000000005B4E                 db 0FFh
.eh_frame:0000000000005B4F                 db 0FFh
.eh_frame:0000000000005B50                 db 0ABh
.eh_frame:0000000000005B51                 db    1
.eh_frame:0000000000005B52                 db    0
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db    0
.eh_frame:0000000000005B55                 db  42h ; B
.eh_frame:0000000000005B56                 db  0Eh
.eh_frame:0000000000005B57                 db  10h
.eh_frame:0000000000005B58                 db  8Fh
.eh_frame:0000000000005B59                 db    2
.eh_frame:0000000000005B5A                 db  42h ; B
.eh_frame:0000000000005B5B                 db  0Eh
.eh_frame:0000000000005B5C                 db  18h
.eh_frame:0000000000005B5D                 db  8Eh
.eh_frame:0000000000005B5E                 db    3
.eh_frame:0000000000005B5F                 db  45h ; E
.eh_frame:0000000000005B60                 db  0Eh
.eh_frame:0000000000005B61                 db  20h
.eh_frame:0000000000005B62                 db  8Dh
.eh_frame:0000000000005B63                 db    4
.eh_frame:0000000000005B64                 db  42h ; B
.eh_frame:0000000000005B65                 db  0Eh
.eh_frame:0000000000005B66                 db  28h ; (
.eh_frame:0000000000005B67                 db  8Ch
.eh_frame:0000000000005B68                 db    5
.eh_frame:0000000000005B69                 db  44h ; D
.eh_frame:0000000000005B6A                 db  0Eh
.eh_frame:0000000000005B6B                 db  30h ; 0
.eh_frame:0000000000005B6C                 db  86h
.eh_frame:0000000000005B6D                 db    6
.eh_frame:0000000000005B6E                 db  41h ; A
.eh_frame:0000000000005B6F                 db  0Eh
.eh_frame:0000000000005B70                 db  38h ; 8
.eh_frame:0000000000005B71                 db  83h
.eh_frame:0000000000005B72                 db    7
.eh_frame:0000000000005B73                 db  47h ; G
.eh_frame:0000000000005B74                 db  0Eh
.eh_frame:0000000000005B75                 db  60h ; `
.eh_frame:0000000000005B76                 db    2
.eh_frame:0000000000005B77                 db  99h
.eh_frame:0000000000005B78                 db  0Eh
.eh_frame:0000000000005B79                 db  68h ; h
.eh_frame:0000000000005B7A                 db  5Fh ; _
.eh_frame:0000000000005B7B                 db  0Eh
.eh_frame:0000000000005B7C                 db  70h ; p
.eh_frame:0000000000005B7D                 db  46h ; F
.eh_frame:0000000000005B7E                 db  0Eh
.eh_frame:0000000000005B7F                 db  78h ; x
.eh_frame:0000000000005B80                 db  42h ; B
.eh_frame:0000000000005B81                 db  0Eh
.eh_frame:0000000000005B82                 db  80h
.eh_frame:0000000000005B83                 db    1
.eh_frame:0000000000005B84                 db  59h ; Y
.eh_frame:0000000000005B85                 db  0Eh
.eh_frame:0000000000005B86                 db  60h ; `
.eh_frame:0000000000005B87                 db    2
.eh_frame:0000000000005B88                 db  40h ; @
.eh_frame:0000000000005B89                 db  0Eh
.eh_frame:0000000000005B8A                 db  68h ; h
.eh_frame:0000000000005B8B                 db  4Bh ; K
.eh_frame:0000000000005B8C                 db  0Eh
.eh_frame:0000000000005B8D                 db  70h ; p
.eh_frame:0000000000005B8E                 db  43h ; C
.eh_frame:0000000000005B8F                 db  0Eh
.eh_frame:0000000000005B90                 db  78h ; x
.eh_frame:0000000000005B91                 db  45h ; E
.eh_frame:0000000000005B92                 db  0Eh
.eh_frame:0000000000005B93                 db  80h
.eh_frame:0000000000005B94                 db    1
.eh_frame:0000000000005B95                 db  5Eh ; ^
.eh_frame:0000000000005B96                 db  0Eh
.eh_frame:0000000000005B97                 db  60h ; `
.eh_frame:0000000000005B98                 db  4Ch ; L
.eh_frame:0000000000005B99                 db  0Ah
.eh_frame:0000000000005B9A                 db  0Eh
.eh_frame:0000000000005B9B                 db  38h ; 8
.eh_frame:0000000000005B9C                 db  44h ; D
.eh_frame:0000000000005B9D                 db  0Eh
.eh_frame:0000000000005B9E                 db  30h ; 0
.eh_frame:0000000000005B9F                 db  41h ; A
.eh_frame:0000000000005BA0                 db  0Eh
.eh_frame:0000000000005BA1                 db  28h ; (
.eh_frame:0000000000005BA2                 db  42h ; B
.eh_frame:0000000000005BA3                 db  0Eh
.eh_frame:0000000000005BA4                 db  20h
.eh_frame:0000000000005BA5                 db  42h ; B
.eh_frame:0000000000005BA6                 db  0Eh
.eh_frame:0000000000005BA7                 db  18h
.eh_frame:0000000000005BA8                 db  42h ; B
.eh_frame:0000000000005BA9                 db  0Eh
.eh_frame:0000000000005BAA                 db  10h
.eh_frame:0000000000005BAB                 db  42h ; B
.eh_frame:0000000000005BAC                 db  0Eh
.eh_frame:0000000000005BAD                 db    8
.eh_frame:0000000000005BAE                 db  46h ; F
.eh_frame:0000000000005BAF                 db  0Bh
.eh_frame:0000000000005BB0                 db  28h ; (
.eh_frame:0000000000005BB1                 db    0
.eh_frame:0000000000005BB2                 db    0
.eh_frame:0000000000005BB3                 db    0
.eh_frame:0000000000005BB4                 db  44h ; D
.eh_frame:0000000000005BB5                 db    3
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db  88h
.eh_frame:0000000000005BB9                 db 0D8h
.eh_frame:0000000000005BBA                 db 0FFh
.eh_frame:0000000000005BBB                 db 0FFh
.eh_frame:0000000000005BBC                 db  36h ; 6
.eh_frame:0000000000005BBD                 db    0
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db    0
.eh_frame:0000000000005BC1                 db  42h ; B
.eh_frame:0000000000005BC2                 db  0Eh
.eh_frame:0000000000005BC3                 db  10h
.eh_frame:0000000000005BC4                 db  8Ch
.eh_frame:0000000000005BC5                 db    2
.eh_frame:0000000000005BC6                 db  41h ; A
.eh_frame:0000000000005BC7                 db  0Eh
.eh_frame:0000000000005BC8                 db  18h
.eh_frame:0000000000005BC9                 db  86h
.eh_frame:0000000000005BCA                 db    3
.eh_frame:0000000000005BCB                 db  41h ; A
.eh_frame:0000000000005BCC                 db  0Eh
.eh_frame:0000000000005BCD                 db  20h
.eh_frame:0000000000005BCE                 db  83h
.eh_frame:0000000000005BCF                 db    4
.eh_frame:0000000000005BD0                 db  6Eh ; n
.eh_frame:0000000000005BD1                 db  0Eh
.eh_frame:0000000000005BD2                 db  18h
.eh_frame:0000000000005BD3                 db  41h ; A
.eh_frame:0000000000005BD4                 db  0Eh
.eh_frame:0000000000005BD5                 db  10h
.eh_frame:0000000000005BD6                 db  42h ; B
.eh_frame:0000000000005BD7                 db  0Eh
.eh_frame:0000000000005BD8                 db    8
.eh_frame:0000000000005BD9                 db    0
.eh_frame:0000000000005BDA                 db    0
.eh_frame:0000000000005BDB                 db    0
.eh_frame:0000000000005BDC                 db  10h
.eh_frame:0000000000005BDD                 db    0
.eh_frame:0000000000005BDE                 db    0
.eh_frame:0000000000005BDF                 db    0
.eh_frame:0000000000005BE0                 db  70h ; p
.eh_frame:0000000000005BE1                 db    3
.eh_frame:0000000000005BE2                 db    0
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db  9Ch
.eh_frame:0000000000005BE5                 db 0D8h
.eh_frame:0000000000005BE6                 db 0FFh
.eh_frame:0000000000005BE7                 db 0FFh
.eh_frame:0000000000005BE8                 db  11h
.eh_frame:0000000000005BE9                 db    0
.eh_frame:0000000000005BEA                 db    0
.eh_frame:0000000000005BEB                 db    0
.eh_frame:0000000000005BEC                 db    0
.eh_frame:0000000000005BED                 db    0
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db  10h
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db  84h
.eh_frame:0000000000005BF5                 db    3
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db 0A8h
.eh_frame:0000000000005BF9                 db 0D8h
.eh_frame:0000000000005BFA                 db 0FFh
.eh_frame:0000000000005BFB                 db 0FFh
.eh_frame:0000000000005BFC                 db  11h
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db    0
.eh_frame:0000000000005C01                 db    0
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db  10h
.eh_frame:0000000000005C05                 db    0
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db  98h
.eh_frame:0000000000005C09                 db    3
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db 0B4h
.eh_frame:0000000000005C0D                 db 0D8h
.eh_frame:0000000000005C0E                 db 0FFh
.eh_frame:0000000000005C0F                 db 0FFh
.eh_frame:0000000000005C10                 db  35h ; 5
.eh_frame:0000000000005C11                 db    0
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db    0
.eh_frame:0000000000005C15                 db    0
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db  10h
.eh_frame:0000000000005C19                 db    0
.eh_frame:0000000000005C1A                 db    0
.eh_frame:0000000000005C1B                 db    0
.eh_frame:0000000000005C1C                 db 0ACh
.eh_frame:0000000000005C1D                 db    3
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db 0E0h
.eh_frame:0000000000005C21                 db 0D8h
.eh_frame:0000000000005C22                 db 0FFh
.eh_frame:0000000000005C23                 db 0FFh
.eh_frame:0000000000005C24                 db  15h
.eh_frame:0000000000005C25                 db    0
.eh_frame:0000000000005C26                 db    0
.eh_frame:0000000000005C27                 db    0
.eh_frame:0000000000005C28                 db    0
.eh_frame:0000000000005C29                 db    0
.eh_frame:0000000000005C2A                 db    0
.eh_frame:0000000000005C2B                 db    0
.eh_frame:0000000000005C2C                 db  10h
.eh_frame:0000000000005C2D                 db    0
.eh_frame:0000000000005C2E                 db    0
.eh_frame:0000000000005C2F                 db    0
.eh_frame:0000000000005C30                 db 0C0h
.eh_frame:0000000000005C31                 db    3
.eh_frame:0000000000005C32                 db    0
.eh_frame:0000000000005C33                 db    0
.eh_frame:0000000000005C34                 db 0ECh
.eh_frame:0000000000005C35                 db 0D8h
.eh_frame:0000000000005C36                 db 0FFh
.eh_frame:0000000000005C37                 db 0FFh
.eh_frame:0000000000005C38                 db  30h ; 0
.eh_frame:0000000000005C39                 db    0
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db    0
.eh_frame:0000000000005C3D                 db  6Bh ; k
.eh_frame:0000000000005C3E                 db  0Eh
.eh_frame:0000000000005C3F                 db  10h
.eh_frame:0000000000005C40                 db  50h ; P
.eh_frame:0000000000005C41                 db    0
.eh_frame:0000000000005C42                 db    0
.eh_frame:0000000000005C43                 db    0
.eh_frame:0000000000005C44                 db 0D4h
.eh_frame:0000000000005C45                 db    3
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db    8
.eh_frame:0000000000005C49                 db 0D9h
.eh_frame:0000000000005C4A                 db 0FFh
.eh_frame:0000000000005C4B                 db 0FFh
.eh_frame:0000000000005C4C                 db  74h ; t
.eh_frame:0000000000005C4D                 db    0
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db    0
.eh_frame:0000000000005C51                 db  42h ; B
.eh_frame:0000000000005C52                 db  0Eh
.eh_frame:0000000000005C53                 db  10h
.eh_frame:0000000000005C54                 db  8Fh
.eh_frame:0000000000005C55                 db    2
.eh_frame:0000000000005C56                 db  42h ; B
.eh_frame:0000000000005C57                 db  0Eh
.eh_frame:0000000000005C58                 db  18h
.eh_frame:0000000000005C59                 db  8Eh
.eh_frame:0000000000005C5A                 db    3
.eh_frame:0000000000005C5B                 db  49h ; I
.eh_frame:0000000000005C5C                 db  0Eh
.eh_frame:0000000000005C5D                 db  20h
.eh_frame:0000000000005C5E                 db  8Dh
.eh_frame:0000000000005C5F                 db    4
.eh_frame:0000000000005C60                 db  42h ; B
.eh_frame:0000000000005C61                 db  0Eh
.eh_frame:0000000000005C62                 db  28h ; (
.eh_frame:0000000000005C63                 db  8Ch
.eh_frame:0000000000005C64                 db    5
.eh_frame:0000000000005C65                 db  44h ; D
.eh_frame:0000000000005C66                 db  0Eh
.eh_frame:0000000000005C67                 db  30h ; 0
.eh_frame:0000000000005C68                 db  86h
.eh_frame:0000000000005C69                 db    6
.eh_frame:0000000000005C6A                 db  41h ; A
.eh_frame:0000000000005C6B                 db  0Eh
.eh_frame:0000000000005C6C                 db  38h ; 8
.eh_frame:0000000000005C6D                 db  83h
.eh_frame:0000000000005C6E                 db    7
.eh_frame:0000000000005C6F                 db  4Dh ; M
.eh_frame:0000000000005C70                 db  0Eh
.eh_frame:0000000000005C71                 db  50h ; P
.eh_frame:0000000000005C72                 db  5Fh ; _
.eh_frame:0000000000005C73                 db  0Eh
.eh_frame:0000000000005C74                 db  58h ; X
.eh_frame:0000000000005C75                 db  47h ; G
.eh_frame:0000000000005C76                 db  0Eh
.eh_frame:0000000000005C77                 db  60h ; `
.eh_frame:0000000000005C78                 db  46h ; F
.eh_frame:0000000000005C79                 db  0Eh
.eh_frame:0000000000005C7A                 db  68h ; h
.eh_frame:0000000000005C7B                 db  44h ; D
.eh_frame:0000000000005C7C                 db  0Eh
.eh_frame:0000000000005C7D                 db  70h ; p
.eh_frame:0000000000005C7E                 db  58h ; X
.eh_frame:0000000000005C7F                 db  0Eh
.eh_frame:0000000000005C80                 db  38h ; 8
.eh_frame:0000000000005C81                 db  41h ; A
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  30h ; 0
.eh_frame:0000000000005C84                 db  41h ; A
.eh_frame:0000000000005C85                 db  0Eh
.eh_frame:0000000000005C86                 db  28h ; (
.eh_frame:0000000000005C87                 db  42h ; B
.eh_frame:0000000000005C88                 db  0Eh
.eh_frame:0000000000005C89                 db  20h
.eh_frame:0000000000005C8A                 db  42h ; B
.eh_frame:0000000000005C8B                 db  0Eh
.eh_frame:0000000000005C8C                 db  18h
.eh_frame:0000000000005C8D                 db  42h ; B
.eh_frame:0000000000005C8E                 db  0Eh
.eh_frame:0000000000005C8F                 db  10h
.eh_frame:0000000000005C90                 db  42h ; B
.eh_frame:0000000000005C91                 db  0Eh
.eh_frame:0000000000005C92                 db    8
.eh_frame:0000000000005C93                 db    0
.eh_frame:0000000000005C94                 db  68h ; h
.eh_frame:0000000000005C95                 db    0
.eh_frame:0000000000005C96                 db    0
.eh_frame:0000000000005C97                 db    0
.eh_frame:0000000000005C98                 db  28h ; (
.eh_frame:0000000000005C99                 db    4
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db  34h ; 4
.eh_frame:0000000000005C9D                 db 0D9h
.eh_frame:0000000000005C9E                 db 0FFh
.eh_frame:0000000000005C9F                 db 0FFh
.eh_frame:0000000000005CA0                 db 0E3h
.eh_frame:0000000000005CA1                 db    0
.eh_frame:0000000000005CA2                 db    0
.eh_frame:0000000000005CA3                 db    0
.eh_frame:0000000000005CA4                 db    0
.eh_frame:0000000000005CA5                 db  42h ; B
.eh_frame:0000000000005CA6                 db  0Eh
.eh_frame:0000000000005CA7                 db  10h
.eh_frame:0000000000005CA8                 db  8Fh
.eh_frame:0000000000005CA9                 db    2
.eh_frame:0000000000005CAA                 db  42h ; B
.eh_frame:0000000000005CAB                 db  0Eh
.eh_frame:0000000000005CAC                 db  18h
.eh_frame:0000000000005CAD                 db  8Eh
.eh_frame:0000000000005CAE                 db    3
.eh_frame:0000000000005CAF                 db  49h ; I
.eh_frame:0000000000005CB0                 db  0Eh
.eh_frame:0000000000005CB1                 db  20h
.eh_frame:0000000000005CB2                 db  8Dh
.eh_frame:0000000000005CB3                 db    4
.eh_frame:0000000000005CB4                 db  42h ; B
.eh_frame:0000000000005CB5                 db  0Eh
.eh_frame:0000000000005CB6                 db  28h ; (
.eh_frame:0000000000005CB7                 db  8Ch
.eh_frame:0000000000005CB8                 db    5
.eh_frame:0000000000005CB9                 db  44h ; D
.eh_frame:0000000000005CBA                 db  0Eh
.eh_frame:0000000000005CBB                 db  30h ; 0
.eh_frame:0000000000005CBC                 db  86h
.eh_frame:0000000000005CBD                 db    6
.eh_frame:0000000000005CBE                 db  41h ; A
.eh_frame:0000000000005CBF                 db  0Eh
.eh_frame:0000000000005CC0                 db  38h ; 8
.eh_frame:0000000000005CC1                 db  83h
.eh_frame:0000000000005CC2                 db    7
.eh_frame:0000000000005CC3                 db  4Dh ; M
.eh_frame:0000000000005CC4                 db  0Eh
.eh_frame:0000000000005CC5                 db  70h ; p
.eh_frame:0000000000005CC6                 db  65h ; e
.eh_frame:0000000000005CC7                 db  0Eh
.eh_frame:0000000000005CC8                 db  78h ; x
.eh_frame:0000000000005CC9                 db  4Dh ; M
.eh_frame:0000000000005CCA                 db  0Eh
.eh_frame:0000000000005CCB                 db  80h
.eh_frame:0000000000005CCC                 db    1
.eh_frame:0000000000005CCD                 db  46h ; F
.eh_frame:0000000000005CCE                 db  0Eh
.eh_frame:0000000000005CCF                 db  88h
.eh_frame:0000000000005CD0                 db    1
.eh_frame:0000000000005CD1                 db  42h ; B
.eh_frame:0000000000005CD2                 db  0Eh
.eh_frame:0000000000005CD3                 db  90h
.eh_frame:0000000000005CD4                 db    1
.eh_frame:0000000000005CD5                 db  5Eh ; ^
.eh_frame:0000000000005CD6                 db  0Eh
.eh_frame:0000000000005CD7                 db  70h ; p
.eh_frame:0000000000005CD8                 db  56h ; V
.eh_frame:0000000000005CD9                 db  0Eh
.eh_frame:0000000000005CDA                 db  78h ; x
.eh_frame:0000000000005CDB                 db  43h ; C
.eh_frame:0000000000005CDC                 db  0Eh
.eh_frame:0000000000005CDD                 db  80h
.eh_frame:0000000000005CDE                 db    1
.eh_frame:0000000000005CDF                 db  43h ; C
.eh_frame:0000000000005CE0                 db  0Eh
.eh_frame:0000000000005CE1                 db  88h
.eh_frame:0000000000005CE2                 db    1
.eh_frame:0000000000005CE3                 db  56h ; V
.eh_frame:0000000000005CE4                 db  0Eh
.eh_frame:0000000000005CE5                 db  90h
.eh_frame:0000000000005CE6                 db    1
.eh_frame:0000000000005CE7                 db  52h ; R
.eh_frame:0000000000005CE8                 db  0Eh
.eh_frame:0000000000005CE9                 db  70h ; p
.eh_frame:0000000000005CEA                 db  5Bh ; [
.eh_frame:0000000000005CEB                 db  0Eh
.eh_frame:0000000000005CEC                 db  38h ; 8
.eh_frame:0000000000005CED                 db  41h ; A
.eh_frame:0000000000005CEE                 db  0Eh
.eh_frame:0000000000005CEF                 db  30h ; 0
.eh_frame:0000000000005CF0                 db  41h ; A
.eh_frame:0000000000005CF1                 db  0Eh
.eh_frame:0000000000005CF2                 db  28h ; (
.eh_frame:0000000000005CF3                 db  42h ; B
.eh_frame:0000000000005CF4                 db  0Eh
.eh_frame:0000000000005CF5                 db  20h
.eh_frame:0000000000005CF6                 db  42h ; B
.eh_frame:0000000000005CF7                 db  0Eh
.eh_frame:0000000000005CF8                 db  18h
.eh_frame:0000000000005CF9                 db  42h ; B
.eh_frame:0000000000005CFA                 db  0Eh
.eh_frame:0000000000005CFB                 db  10h
.eh_frame:0000000000005CFC                 db  42h ; B
.eh_frame:0000000000005CFD                 db  0Eh
.eh_frame:0000000000005CFE                 db    8
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db  10h
.eh_frame:0000000000005D01                 db    0
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db  94h
.eh_frame:0000000000005D05                 db    4
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db 0B8h
.eh_frame:0000000000005D09                 db 0D9h
.eh_frame:0000000000005D0A                 db 0FFh
.eh_frame:0000000000005D0B                 db 0FFh
.eh_frame:0000000000005D0C                 db  0Ah
.eh_frame:0000000000005D0D                 db    0
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db    0
.eh_frame:0000000000005D11                 db    0
.eh_frame:0000000000005D12                 db    0
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db  28h ; (
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db 0A8h
.eh_frame:0000000000005D19                 db    4
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db 0B4h
.eh_frame:0000000000005D1D                 db 0D9h
.eh_frame:0000000000005D1E                 db 0FFh
.eh_frame:0000000000005D1F                 db 0FFh
.eh_frame:0000000000005D20                 db  93h
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db    0
.eh_frame:0000000000005D25                 db  48h ; H
.eh_frame:0000000000005D26                 db  0Eh
.eh_frame:0000000000005D27                 db  10h
.eh_frame:0000000000005D28                 db  8Ch
.eh_frame:0000000000005D29                 db    2
.eh_frame:0000000000005D2A                 db  48h ; H
.eh_frame:0000000000005D2B                 db  0Eh
.eh_frame:0000000000005D2C                 db  18h
.eh_frame:0000000000005D2D                 db  86h
.eh_frame:0000000000005D2E                 db    3
.eh_frame:0000000000005D2F                 db  41h ; A
.eh_frame:0000000000005D30                 db  0Eh
.eh_frame:0000000000005D31                 db  20h
.eh_frame:0000000000005D32                 db  83h
.eh_frame:0000000000005D33                 db    4
.eh_frame:0000000000005D34                 db    2
.eh_frame:0000000000005D35                 db  74h ; t
.eh_frame:0000000000005D36                 db  0Eh
.eh_frame:0000000000005D37                 db  18h
.eh_frame:0000000000005D38                 db  4Bh ; K
.eh_frame:0000000000005D39                 db  0Eh
.eh_frame:0000000000005D3A                 db  10h
.eh_frame:0000000000005D3B                 db  42h ; B
.eh_frame:0000000000005D3C                 db  0Eh
.eh_frame:0000000000005D3D                 db    8
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db  10h
.eh_frame:0000000000005D41                 db    0
.eh_frame:0000000000005D42                 db    0
.eh_frame:0000000000005D43                 db    0
.eh_frame:0000000000005D44                 db 0D4h
.eh_frame:0000000000005D45                 db    4
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db  28h ; (
.eh_frame:0000000000005D49                 db 0DAh
.eh_frame:0000000000005D4A                 db 0FFh
.eh_frame:0000000000005D4B                 db 0FFh
.eh_frame:0000000000005D4C                 db  13h
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db    0
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db  10h
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db 0E8h
.eh_frame:0000000000005D59                 db    4
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db  34h ; 4
.eh_frame:0000000000005D5D                 db 0DAh
.eh_frame:0000000000005D5E                 db 0FFh
.eh_frame:0000000000005D5F                 db 0FFh
.eh_frame:0000000000005D60                 db  0Ch
.eh_frame:0000000000005D61                 db    0
.eh_frame:0000000000005D62                 db    0
.eh_frame:0000000000005D63                 db    0
.eh_frame:0000000000005D64                 db    0
.eh_frame:0000000000005D65                 db    0
.eh_frame:0000000000005D66                 db    0
.eh_frame:0000000000005D67                 db    0
.eh_frame:0000000000005D68                 db  10h
.eh_frame:0000000000005D69                 db    0
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db 0FCh
.eh_frame:0000000000005D6D                 db    4
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db  30h ; 0
.eh_frame:0000000000005D71                 db 0DAh
.eh_frame:0000000000005D72                 db 0FFh
.eh_frame:0000000000005D73                 db 0FFh
.eh_frame:0000000000005D74                 db  18h
.eh_frame:0000000000005D75                 db    0
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db    0
.eh_frame:0000000000005D79                 db    0
.eh_frame:0000000000005D7A                 db    0
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db  10h
.eh_frame:0000000000005D7D                 db    0
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db  10h
.eh_frame:0000000000005D81                 db    5
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db  3Ch ; <
.eh_frame:0000000000005D85                 db 0DAh
.eh_frame:0000000000005D86                 db 0FFh
.eh_frame:0000000000005D87                 db 0FFh
.eh_frame:0000000000005D88                 db  14h
.eh_frame:0000000000005D89                 db    0
.eh_frame:0000000000005D8A                 db    0
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db    0
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  18h
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db  24h ; $
.eh_frame:0000000000005D95                 db    5
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db  48h ; H
.eh_frame:0000000000005D99                 db 0DAh
.eh_frame:0000000000005D9A                 db 0FFh
.eh_frame:0000000000005D9B                 db 0FFh
.eh_frame:0000000000005D9C                 db  8Eh
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db    0
.eh_frame:0000000000005DA1                 db  44h ; D
.eh_frame:0000000000005DA2                 db  0Eh
.eh_frame:0000000000005DA3                 db  50h ; P
.eh_frame:0000000000005DA4                 db    2
.eh_frame:0000000000005DA5                 db  7Fh ; 
.eh_frame:0000000000005DA6                 db  0Ah
.eh_frame:0000000000005DA7                 db  0Eh
.eh_frame:0000000000005DA8                 db    8
.eh_frame:0000000000005DA9                 db  41h ; A
.eh_frame:0000000000005DAA                 db  0Bh
.eh_frame:0000000000005DAB                 db    0
.eh_frame:0000000000005DAC                 db  18h
.eh_frame:0000000000005DAD                 db    0
.eh_frame:0000000000005DAE                 db    0
.eh_frame:0000000000005DAF                 db    0
.eh_frame:0000000000005DB0                 db  40h ; @
.eh_frame:0000000000005DB1                 db    5
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db 0BCh
.eh_frame:0000000000005DB5                 db 0DAh
.eh_frame:0000000000005DB6                 db 0FFh
.eh_frame:0000000000005DB7                 db 0FFh
.eh_frame:0000000000005DB8                 db  8Ah
.eh_frame:0000000000005DB9                 db    0
.eh_frame:0000000000005DBA                 db    0
.eh_frame:0000000000005DBB                 db    0
.eh_frame:0000000000005DBC                 db    0
.eh_frame:0000000000005DBD                 db  44h ; D
.eh_frame:0000000000005DBE                 db  0Eh
.eh_frame:0000000000005DBF                 db  50h ; P
.eh_frame:0000000000005DC0                 db    2
.eh_frame:0000000000005DC1                 db  7Bh ; {
.eh_frame:0000000000005DC2                 db  0Ah
.eh_frame:0000000000005DC3                 db  0Eh
.eh_frame:0000000000005DC4                 db    8
.eh_frame:0000000000005DC5                 db  41h ; A
.eh_frame:0000000000005DC6                 db  0Bh
.eh_frame:0000000000005DC7                 db    0
.eh_frame:0000000000005DC8                 db  10h
.eh_frame:0000000000005DC9                 db    0
.eh_frame:0000000000005DCA                 db    0
.eh_frame:0000000000005DCB                 db    0
.eh_frame:0000000000005DCC                 db  5Ch ; \
.eh_frame:0000000000005DCD                 db    5
.eh_frame:0000000000005DCE                 db    0
.eh_frame:0000000000005DCF                 db    0
.eh_frame:0000000000005DD0                 db  30h ; 0
.eh_frame:0000000000005DD1                 db 0DBh
.eh_frame:0000000000005DD2                 db 0FFh
.eh_frame:0000000000005DD3                 db 0FFh
.eh_frame:0000000000005DD4                 db  0Ch
.eh_frame:0000000000005DD5                 db    0
.eh_frame:0000000000005DD6                 db    0
.eh_frame:0000000000005DD7                 db    0
.eh_frame:0000000000005DD8                 db    0
.eh_frame:0000000000005DD9                 db    0
.eh_frame:0000000000005DDA                 db    0
.eh_frame:0000000000005DDB                 db    0
.eh_frame:0000000000005DDC                 db  10h
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db  70h ; p
.eh_frame:0000000000005DE1                 db    5
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db  2Ch ; ,
.eh_frame:0000000000005DE5                 db 0DBh
.eh_frame:0000000000005DE6                 db 0FFh
.eh_frame:0000000000005DE7                 db 0FFh
.eh_frame:0000000000005DE8                 db  0Fh
.eh_frame:0000000000005DE9                 db    0
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db    0
.eh_frame:0000000000005DED                 db    0
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db  18h
.eh_frame:0000000000005DF1                 db    0
.eh_frame:0000000000005DF2                 db    0
.eh_frame:0000000000005DF3                 db    0
.eh_frame:0000000000005DF4                 db  84h
.eh_frame:0000000000005DF5                 db    5
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db  28h ; (
.eh_frame:0000000000005DF9                 db 0DBh
.eh_frame:0000000000005DFA                 db 0FFh
.eh_frame:0000000000005DFB                 db 0FFh
.eh_frame:0000000000005DFC                 db  98h
.eh_frame:0000000000005DFD                 db    0
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db    0
.eh_frame:0000000000005E01                 db  44h ; D
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db  50h ; P
.eh_frame:0000000000005E04                 db    2
.eh_frame:0000000000005E05                 db  8Eh
.eh_frame:0000000000005E06                 db  0Ah
.eh_frame:0000000000005E07                 db  0Eh
.eh_frame:0000000000005E08                 db    8
.eh_frame:0000000000005E09                 db  41h ; A
.eh_frame:0000000000005E0A                 db  0Bh
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db  10h
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db 0A0h
.eh_frame:0000000000005E11                 db    5
.eh_frame:0000000000005E12                 db    0
.eh_frame:0000000000005E13                 db    0
.eh_frame:0000000000005E14                 db 0ACh
.eh_frame:0000000000005E15                 db 0DBh
.eh_frame:0000000000005E16                 db 0FFh
.eh_frame:0000000000005E17                 db 0FFh
.eh_frame:0000000000005E18                 db  10h
.eh_frame:0000000000005E19                 db    0
.eh_frame:0000000000005E1A                 db    0
.eh_frame:0000000000005E1B                 db    0
.eh_frame:0000000000005E1C                 db    0
.eh_frame:0000000000005E1D                 db    0
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db  10h
.eh_frame:0000000000005E21                 db    0
.eh_frame:0000000000005E22                 db    0
.eh_frame:0000000000005E23                 db    0
.eh_frame:0000000000005E24                 db 0B4h
.eh_frame:0000000000005E25                 db    5
.eh_frame:0000000000005E26                 db    0
.eh_frame:0000000000005E27                 db    0
.eh_frame:0000000000005E28                 db 0A8h
.eh_frame:0000000000005E29                 db 0DBh
.eh_frame:0000000000005E2A                 db 0FFh
.eh_frame:0000000000005E2B                 db 0FFh
.eh_frame:0000000000005E2C                 db  11h
.eh_frame:0000000000005E2D                 db    0
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db    0
.eh_frame:0000000000005E31                 db    0
.eh_frame:0000000000005E32                 db    0
.eh_frame:0000000000005E33                 db    0
.eh_frame:0000000000005E34                 db  10h
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db 0C8h
.eh_frame:0000000000005E39                 db    5
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db 0B4h
.eh_frame:0000000000005E3D                 db 0DBh
.eh_frame:0000000000005E3E                 db 0FFh
.eh_frame:0000000000005E3F                 db 0FFh
.eh_frame:0000000000005E40                 db  0Ah
.eh_frame:0000000000005E41                 db    0
.eh_frame:0000000000005E42                 db    0
.eh_frame:0000000000005E43                 db    0
.eh_frame:0000000000005E44                 db    0
.eh_frame:0000000000005E45                 db    0
.eh_frame:0000000000005E46                 db    0
.eh_frame:0000000000005E47                 db    0
.eh_frame:0000000000005E48                 db  18h
.eh_frame:0000000000005E49                 db    0
.eh_frame:0000000000005E4A                 db    0
.eh_frame:0000000000005E4B                 db    0
.eh_frame:0000000000005E4C                 db 0DCh
.eh_frame:0000000000005E4D                 db    5
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db 0B0h
.eh_frame:0000000000005E51                 db 0DBh
.eh_frame:0000000000005E52                 db 0FFh
.eh_frame:0000000000005E53                 db 0FFh
.eh_frame:0000000000005E54                 db  8Eh
.eh_frame:0000000000005E55                 db    0
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db    0
.eh_frame:0000000000005E59                 db  44h ; D
.eh_frame:0000000000005E5A                 db  0Eh
.eh_frame:0000000000005E5B                 db  50h ; P
.eh_frame:0000000000005E5C                 db    2
.eh_frame:0000000000005E5D                 db  7Fh ; 
.eh_frame:0000000000005E5E                 db  0Ah
.eh_frame:0000000000005E5F                 db  0Eh
.eh_frame:0000000000005E60                 db    8
.eh_frame:0000000000005E61                 db  41h ; A
.eh_frame:0000000000005E62                 db  0Bh
.eh_frame:0000000000005E63                 db    0
.eh_frame:0000000000005E64                 db  18h
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db 0F8h
.eh_frame:0000000000005E69                 db    5
.eh_frame:0000000000005E6A                 db    0
.eh_frame:0000000000005E6B                 db    0
.eh_frame:0000000000005E6C                 db  24h ; $
.eh_frame:0000000000005E6D                 db 0DCh
.eh_frame:0000000000005E6E                 db 0FFh
.eh_frame:0000000000005E6F                 db 0FFh
.eh_frame:0000000000005E70                 db  91h
.eh_frame:0000000000005E71                 db    0
.eh_frame:0000000000005E72                 db    0
.eh_frame:0000000000005E73                 db    0
.eh_frame:0000000000005E74                 db    0
.eh_frame:0000000000005E75                 db  44h ; D
.eh_frame:0000000000005E76                 db  0Eh
.eh_frame:0000000000005E77                 db  50h ; P
.eh_frame:0000000000005E78                 db    2
.eh_frame:0000000000005E79                 db  82h
.eh_frame:0000000000005E7A                 db  0Ah
.eh_frame:0000000000005E7B                 db  0Eh
.eh_frame:0000000000005E7C                 db    8
.eh_frame:0000000000005E7D                 db  41h ; A
.eh_frame:0000000000005E7E                 db  0Bh
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db  10h
.eh_frame:0000000000005E81                 db    0
.eh_frame:0000000000005E82                 db    0
.eh_frame:0000000000005E83                 db    0
.eh_frame:0000000000005E84                 db  14h
.eh_frame:0000000000005E85                 db    6
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db 0A8h
.eh_frame:0000000000005E89                 db 0DCh
.eh_frame:0000000000005E8A                 db 0FFh
.eh_frame:0000000000005E8B                 db 0FFh
.eh_frame:0000000000005E8C                 db  0Ch
.eh_frame:0000000000005E8D                 db    0
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db    0
.eh_frame:0000000000005E91                 db    0
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db  10h
.eh_frame:0000000000005E95                 db    0
.eh_frame:0000000000005E96                 db    0
.eh_frame:0000000000005E97                 db    0
.eh_frame:0000000000005E98                 db  28h ; (
.eh_frame:0000000000005E99                 db    6
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db 0A4h
.eh_frame:0000000000005E9D                 db 0DCh
.eh_frame:0000000000005E9E                 db 0FFh
.eh_frame:0000000000005E9F                 db 0FFh
.eh_frame:0000000000005EA0                 db  17h
.eh_frame:0000000000005EA1                 db    0
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db    0
.eh_frame:0000000000005EA5                 db    0
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db  10h
.eh_frame:0000000000005EA9                 db    0
.eh_frame:0000000000005EAA                 db    0
.eh_frame:0000000000005EAB                 db    0
.eh_frame:0000000000005EAC                 db  3Ch ; <
.eh_frame:0000000000005EAD                 db    6
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db 0B0h
.eh_frame:0000000000005EB1                 db 0DCh
.eh_frame:0000000000005EB2                 db 0FFh
.eh_frame:0000000000005EB3                 db 0FFh
.eh_frame:0000000000005EB4                 db  13h
.eh_frame:0000000000005EB5                 db    0
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db    0
.eh_frame:0000000000005EB9                 db    0
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db  10h
.eh_frame:0000000000005EBD                 db    0
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db  50h ; P
.eh_frame:0000000000005EC1                 db    6
.eh_frame:0000000000005EC2                 db    0
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db 0BCh
.eh_frame:0000000000005EC5                 db 0DCh
.eh_frame:0000000000005EC6                 db 0FFh
.eh_frame:0000000000005EC7                 db 0FFh
.eh_frame:0000000000005EC8                 db  0Ch
.eh_frame:0000000000005EC9                 db    0
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db    0
.eh_frame:0000000000005ECD                 db    0
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db  10h
.eh_frame:0000000000005ED1                 db    0
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db  64h ; d
.eh_frame:0000000000005ED5                 db    6
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db 0B8h
.eh_frame:0000000000005ED9                 db 0DCh
.eh_frame:0000000000005EDA                 db 0FFh
.eh_frame:0000000000005EDB                 db 0FFh
.eh_frame:0000000000005EDC                 db  14h
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db    0
.eh_frame:0000000000005EE1                 db    0
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db  10h
.eh_frame:0000000000005EE5                 db    0
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db  78h ; x
.eh_frame:0000000000005EE9                 db    6
.eh_frame:0000000000005EEA                 db    0
.eh_frame:0000000000005EEB                 db    0
.eh_frame:0000000000005EEC                 db 0C4h
.eh_frame:0000000000005EED                 db 0DCh
.eh_frame:0000000000005EEE                 db 0FFh
.eh_frame:0000000000005EEF                 db 0FFh
.eh_frame:0000000000005EF0                 db  13h
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db    0
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db  14h
.eh_frame:0000000000005EF9                 db    0
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db  8Ch
.eh_frame:0000000000005EFD                 db    6
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db 0D0h
.eh_frame:0000000000005F01                 db 0DCh
.eh_frame:0000000000005F02                 db 0FFh
.eh_frame:0000000000005F03                 db 0FFh
.eh_frame:0000000000005F04                 db  18h
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db    0
.eh_frame:0000000000005F09                 db    0
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db    0
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db  10h
.eh_frame:0000000000005F11                 db    1
.eh_frame:0000000000005F12                 db    0
.eh_frame:0000000000005F13                 db    0
.eh_frame:0000000000005F14                 db 0A4h
.eh_frame:0000000000005F15                 db    6
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db 0D8h
.eh_frame:0000000000005F19                 db 0DCh
.eh_frame:0000000000005F1A                 db 0FFh
.eh_frame:0000000000005F1B                 db 0FFh
.eh_frame:0000000000005F1C                 db  17h
.eh_frame:0000000000005F1D                 db    4
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db    0
.eh_frame:0000000000005F21                 db  42h ; B
.eh_frame:0000000000005F22                 db  0Eh
.eh_frame:0000000000005F23                 db  10h
.eh_frame:0000000000005F24                 db  8Fh
.eh_frame:0000000000005F25                 db    2
.eh_frame:0000000000005F26                 db  42h ; B
.eh_frame:0000000000005F27                 db  0Eh
.eh_frame:0000000000005F28                 db  18h
.eh_frame:0000000000005F29                 db  8Eh
.eh_frame:0000000000005F2A                 db    3
.eh_frame:0000000000005F2B                 db  42h ; B
.eh_frame:0000000000005F2C                 db  0Eh
.eh_frame:0000000000005F2D                 db  20h
.eh_frame:0000000000005F2E                 db  8Dh
.eh_frame:0000000000005F2F                 db    4
.eh_frame:0000000000005F30                 db  42h ; B
.eh_frame:0000000000005F31                 db  0Eh
.eh_frame:0000000000005F32                 db  28h ; (
.eh_frame:0000000000005F33                 db  8Ch
.eh_frame:0000000000005F34                 db    5
.eh_frame:0000000000005F35                 db  44h ; D
.eh_frame:0000000000005F36                 db  0Eh
.eh_frame:0000000000005F37                 db  30h ; 0
.eh_frame:0000000000005F38                 db  86h
.eh_frame:0000000000005F39                 db    6
.eh_frame:0000000000005F3A                 db  41h ; A
.eh_frame:0000000000005F3B                 db  0Eh
.eh_frame:0000000000005F3C                 db  38h ; 8
.eh_frame:0000000000005F3D                 db  83h
.eh_frame:0000000000005F3E                 db    7
.eh_frame:0000000000005F3F                 db  4Ah ; J
.eh_frame:0000000000005F40                 db  0Eh
.eh_frame:0000000000005F41                 db  60h ; `
.eh_frame:0000000000005F42                 db    2
.eh_frame:0000000000005F43                 db 0DDh
.eh_frame:0000000000005F44                 db  0Eh
.eh_frame:0000000000005F45                 db  68h ; h
.eh_frame:0000000000005F46                 db  57h ; W
.eh_frame:0000000000005F47                 db  0Eh
.eh_frame:0000000000005F48                 db  70h ; p
.eh_frame:0000000000005F49                 db  42h ; B
.eh_frame:0000000000005F4A                 db  0Eh
.eh_frame:0000000000005F4B                 db  78h ; x
.eh_frame:0000000000005F4C                 db  42h ; B
.eh_frame:0000000000005F4D                 db  0Eh
.eh_frame:0000000000005F4E                 db  80h
.eh_frame:0000000000005F4F                 db    1
.eh_frame:0000000000005F50                 db  42h ; B
.eh_frame:0000000000005F51                 db  0Eh
.eh_frame:0000000000005F52                 db  88h
.eh_frame:0000000000005F53                 db    1
.eh_frame:0000000000005F54                 db  42h ; B
.eh_frame:0000000000005F55                 db  0Eh
.eh_frame:0000000000005F56                 db  90h
.eh_frame:0000000000005F57                 db    1
.eh_frame:0000000000005F58                 db  53h ; S
.eh_frame:0000000000005F59                 db  0Eh
.eh_frame:0000000000005F5A                 db  60h ; `
.eh_frame:0000000000005F5B                 db  44h ; D
.eh_frame:0000000000005F5C                 db  0Ah
.eh_frame:0000000000005F5D                 db  0Eh
.eh_frame:0000000000005F5E                 db  38h ; 8
.eh_frame:0000000000005F5F                 db  41h ; A
.eh_frame:0000000000005F60                 db  0Eh
.eh_frame:0000000000005F61                 db  30h ; 0
.eh_frame:0000000000005F62                 db  41h ; A
.eh_frame:0000000000005F63                 db  0Eh
.eh_frame:0000000000005F64                 db  28h ; (
.eh_frame:0000000000005F65                 db  42h ; B
.eh_frame:0000000000005F66                 db  0Eh
.eh_frame:0000000000005F67                 db  20h
.eh_frame:0000000000005F68                 db  42h ; B
.eh_frame:0000000000005F69                 db  0Eh
.eh_frame:0000000000005F6A                 db  18h
.eh_frame:0000000000005F6B                 db  42h ; B
.eh_frame:0000000000005F6C                 db  0Eh
.eh_frame:0000000000005F6D                 db  10h
.eh_frame:0000000000005F6E                 db  42h ; B
.eh_frame:0000000000005F6F                 db  0Eh
.eh_frame:0000000000005F70                 db    8
.eh_frame:0000000000005F71                 db  44h ; D
.eh_frame:0000000000005F72                 db  0Bh
.eh_frame:0000000000005F73                 db    2
.eh_frame:0000000000005F74                 db  78h ; x
.eh_frame:0000000000005F75                 db  0Ah
.eh_frame:0000000000005F76                 db  0Eh
.eh_frame:0000000000005F77                 db  68h ; h
.eh_frame:0000000000005F78                 db  48h ; H
.eh_frame:0000000000005F79                 db  0Bh
.eh_frame:0000000000005F7A                 db  5Ah ; Z
.eh_frame:0000000000005F7B                 db  0Ah
.eh_frame:0000000000005F7C                 db  0Eh
.eh_frame:0000000000005F7D                 db  38h ; 8
.eh_frame:0000000000005F7E                 db  47h ; G
.eh_frame:0000000000005F7F                 db  0Eh
.eh_frame:0000000000005F80                 db  30h ; 0
.eh_frame:0000000000005F81                 db  41h ; A
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  28h ; (
.eh_frame:0000000000005F84                 db  42h ; B
.eh_frame:0000000000005F85                 db  0Eh
.eh_frame:0000000000005F86                 db  20h
.eh_frame:0000000000005F87                 db  42h ; B
.eh_frame:0000000000005F88                 db  0Eh
.eh_frame:0000000000005F89                 db  18h
.eh_frame:0000000000005F8A                 db  42h ; B
.eh_frame:0000000000005F8B                 db  0Eh
.eh_frame:0000000000005F8C                 db  10h
.eh_frame:0000000000005F8D                 db  42h ; B
.eh_frame:0000000000005F8E                 db  0Eh
.eh_frame:0000000000005F8F                 db    8
.eh_frame:0000000000005F90                 db  56h ; V
.eh_frame:0000000000005F91                 db  0Bh
.eh_frame:0000000000005F92                 db  5Eh ; ^
.eh_frame:0000000000005F93                 db  0Ah
.eh_frame:0000000000005F94                 db  0Eh
.eh_frame:0000000000005F95                 db  38h ; 8
.eh_frame:0000000000005F96                 db  52h ; R
.eh_frame:0000000000005F97                 db  0Eh
.eh_frame:0000000000005F98                 db  30h ; 0
.eh_frame:0000000000005F99                 db  41h ; A
.eh_frame:0000000000005F9A                 db  0Eh
.eh_frame:0000000000005F9B                 db  28h ; (
.eh_frame:0000000000005F9C                 db  42h ; B
.eh_frame:0000000000005F9D                 db  0Eh
.eh_frame:0000000000005F9E                 db  20h
.eh_frame:0000000000005F9F                 db  42h ; B
.eh_frame:0000000000005FA0                 db  0Eh
.eh_frame:0000000000005FA1                 db  18h
.eh_frame:0000000000005FA2                 db  42h ; B
.eh_frame:0000000000005FA3                 db  0Eh
.eh_frame:0000000000005FA4                 db  10h
.eh_frame:0000000000005FA5                 db  42h ; B
.eh_frame:0000000000005FA6                 db  0Eh
.eh_frame:0000000000005FA7                 db    8
.eh_frame:0000000000005FA8                 db  4Fh ; O
.eh_frame:0000000000005FA9                 db  0Bh
.eh_frame:0000000000005FAA                 db  62h ; b
.eh_frame:0000000000005FAB                 db  0Ah
.eh_frame:0000000000005FAC                 db  0Eh
.eh_frame:0000000000005FAD                 db  38h ; 8
.eh_frame:0000000000005FAE                 db  50h ; P
.eh_frame:0000000000005FAF                 db  0Eh
.eh_frame:0000000000005FB0                 db  30h ; 0
.eh_frame:0000000000005FB1                 db  41h ; A
.eh_frame:0000000000005FB2                 db  0Eh
.eh_frame:0000000000005FB3                 db  28h ; (
.eh_frame:0000000000005FB4                 db  42h ; B
.eh_frame:0000000000005FB5                 db  0Eh
.eh_frame:0000000000005FB6                 db  20h
.eh_frame:0000000000005FB7                 db  42h ; B
.eh_frame:0000000000005FB8                 db  0Eh
.eh_frame:0000000000005FB9                 db  18h
.eh_frame:0000000000005FBA                 db  42h ; B
.eh_frame:0000000000005FBB                 db  0Eh
.eh_frame:0000000000005FBC                 db  10h
.eh_frame:0000000000005FBD                 db  42h ; B
.eh_frame:0000000000005FBE                 db  0Eh
.eh_frame:0000000000005FBF                 db    8
.eh_frame:0000000000005FC0                 db  55h ; U
.eh_frame:0000000000005FC1                 db  0Bh
.eh_frame:0000000000005FC2                 db  66h ; f
.eh_frame:0000000000005FC3                 db  0Eh
.eh_frame:0000000000005FC4                 db  68h ; h
.eh_frame:0000000000005FC5                 db  42h ; B
.eh_frame:0000000000005FC6                 db  0Eh
.eh_frame:0000000000005FC7                 db  70h ; p
.eh_frame:0000000000005FC8                 db  5Ch ; \
.eh_frame:0000000000005FC9                 db  0Eh
.eh_frame:0000000000005FCA                 db  68h ; h
.eh_frame:0000000000005FCB                 db  41h ; A
.eh_frame:0000000000005FCC                 db  0Eh
.eh_frame:0000000000005FCD                 db  60h ; `
.eh_frame:0000000000005FCE                 db  44h ; D
.eh_frame:0000000000005FCF                 db  0Ah
.eh_frame:0000000000005FD0                 db  0Eh
.eh_frame:0000000000005FD1                 db  38h ; 8
.eh_frame:0000000000005FD2                 db  41h ; A
.eh_frame:0000000000005FD3                 db  0Eh
.eh_frame:0000000000005FD4                 db  30h ; 0
.eh_frame:0000000000005FD5                 db  41h ; A
.eh_frame:0000000000005FD6                 db  0Eh
.eh_frame:0000000000005FD7                 db  28h ; (
.eh_frame:0000000000005FD8                 db  42h ; B
.eh_frame:0000000000005FD9                 db  0Eh
.eh_frame:0000000000005FDA                 db  20h
.eh_frame:0000000000005FDB                 db  42h ; B
.eh_frame:0000000000005FDC                 db  0Eh
.eh_frame:0000000000005FDD                 db  18h
.eh_frame:0000000000005FDE                 db  42h ; B
.eh_frame:0000000000005FDF                 db  0Eh
.eh_frame:0000000000005FE0                 db  10h
.eh_frame:0000000000005FE1                 db  42h ; B
.eh_frame:0000000000005FE2                 db  0Eh
.eh_frame:0000000000005FE3                 db    8
.eh_frame:0000000000005FE4                 db  45h ; E
.eh_frame:0000000000005FE5                 db  0Bh
.eh_frame:0000000000005FE6                 db  68h ; h
.eh_frame:0000000000005FE7                 db  0Ah
.eh_frame:0000000000005FE8                 db  0Eh
.eh_frame:0000000000005FE9                 db  68h ; h
.eh_frame:0000000000005FEA                 db  48h ; H
.eh_frame:0000000000005FEB                 db  0Bh
.eh_frame:0000000000005FEC                 db  72h ; r
.eh_frame:0000000000005FED                 db  0Eh
.eh_frame:0000000000005FEE                 db  68h ; h
.eh_frame:0000000000005FEF                 db  45h ; E
.eh_frame:0000000000005FF0                 db  0Eh
.eh_frame:0000000000005FF1                 db  70h ; p
.eh_frame:0000000000005FF2                 db  42h ; B
.eh_frame:0000000000005FF3                 db  0Eh
.eh_frame:0000000000005FF4                 db  78h ; x
.eh_frame:0000000000005FF5                 db  42h ; B
.eh_frame:0000000000005FF6                 db  0Eh
.eh_frame:0000000000005FF7                 db  80h
.eh_frame:0000000000005FF8                 db    1
.eh_frame:0000000000005FF9                 db  5Eh ; ^
.eh_frame:0000000000005FFA                 db  0Eh
.eh_frame:0000000000005FFB                 db  60h ; `
.eh_frame:0000000000005FFC                 db  44h ; D
.eh_frame:0000000000005FFD                 db  0Ah
.eh_frame:0000000000005FFE                 db  0Eh
.eh_frame:0000000000005FFF                 db  38h ; 8
.eh_frame:0000000000006000                 db  41h ; A
.eh_frame:0000000000006001                 db  0Eh
.eh_frame:0000000000006002                 db  30h ; 0
.eh_frame:0000000000006003                 db  41h ; A
.eh_frame:0000000000006004                 db  0Eh
.eh_frame:0000000000006005                 db  28h ; (
.eh_frame:0000000000006006                 db  42h ; B
.eh_frame:0000000000006007                 db  0Eh
.eh_frame:0000000000006008                 db  20h
.eh_frame:0000000000006009                 db  42h ; B
.eh_frame:000000000000600A                 db  0Eh
.eh_frame:000000000000600B                 db  18h
.eh_frame:000000000000600C                 db  42h ; B
.eh_frame:000000000000600D                 db  0Eh
.eh_frame:000000000000600E                 db  10h
.eh_frame:000000000000600F                 db  42h ; B
.eh_frame:0000000000006010                 db  0Eh
.eh_frame:0000000000006011                 db    8
.eh_frame:0000000000006012                 db  41h ; A
.eh_frame:0000000000006013                 db  0Bh
.eh_frame:0000000000006014                 db  79h ; y
.eh_frame:0000000000006015                 db  0Ah
.eh_frame:0000000000006016                 db  0Eh
.eh_frame:0000000000006017                 db  68h ; h
.eh_frame:0000000000006018                 db  42h ; B
.eh_frame:0000000000006019                 db  0Eh
.eh_frame:000000000000601A                 db  70h ; p
.eh_frame:000000000000601B                 db  42h ; B
.eh_frame:000000000000601C                 db  0Eh
.eh_frame:000000000000601D                 db  78h ; x
.eh_frame:000000000000601E                 db  42h ; B
.eh_frame:000000000000601F                 db  0Eh
.eh_frame:0000000000006020                 db  80h
.eh_frame:0000000000006021                 db    1
.eh_frame:0000000000006022                 db  51h ; Q
.eh_frame:0000000000006023                 db  0Bh
.eh_frame:0000000000006024                 db  10h
.eh_frame:0000000000006025                 db    0
.eh_frame:0000000000006026                 db    0
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db 0B8h
.eh_frame:0000000000006029                 db    7
.eh_frame:000000000000602A                 db    0
.eh_frame:000000000000602B                 db    0
.eh_frame:000000000000602C                 db 0E4h
.eh_frame:000000000000602D                 db 0DFh
.eh_frame:000000000000602E                 db 0FFh
.eh_frame:000000000000602F                 db 0FFh
.eh_frame:0000000000006030                 db  20h
.eh_frame:0000000000006031                 db    0
.eh_frame:0000000000006032                 db    0
.eh_frame:0000000000006033                 db    0
.eh_frame:0000000000006034                 db    0
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db  18h
.eh_frame:0000000000006039                 db    0
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db 0CCh
.eh_frame:000000000000603D                 db    7
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db 0F0h
.eh_frame:0000000000006041                 db 0DFh
.eh_frame:0000000000006042                 db 0FFh
.eh_frame:0000000000006043                 db 0FFh
.eh_frame:0000000000006044                 db  78h ; x
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db    0
.eh_frame:0000000000006049                 db  44h ; D
.eh_frame:000000000000604A                 db  0Eh
.eh_frame:000000000000604B                 db  70h ; p
.eh_frame:000000000000604C                 db    2
.eh_frame:000000000000604D                 db  60h ; `
.eh_frame:000000000000604E                 db  0Ah
.eh_frame:000000000000604F                 db  0Eh
.eh_frame:0000000000006050                 db    8
.eh_frame:0000000000006051                 db  41h ; A
.eh_frame:0000000000006052                 db  0Bh
.eh_frame:0000000000006053                 db    0
.eh_frame:0000000000006054                 db  28h ; (
.eh_frame:0000000000006055                 db    0
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db 0E8h
.eh_frame:0000000000006059                 db    7
.eh_frame:000000000000605A                 db    0
.eh_frame:000000000000605B                 db    0
.eh_frame:000000000000605C                 db  54h ; T
.eh_frame:000000000000605D                 db 0E0h
.eh_frame:000000000000605E                 db 0FFh
.eh_frame:000000000000605F                 db 0FFh
.eh_frame:0000000000006060                 db 0D5h
.eh_frame:0000000000006061                 db    0
.eh_frame:0000000000006062                 db    0
.eh_frame:0000000000006063                 db    0
.eh_frame:0000000000006064                 db    0
.eh_frame:0000000000006065                 db  41h ; A
.eh_frame:0000000000006066                 db  0Eh
.eh_frame:0000000000006067                 db  10h
.eh_frame:0000000000006068                 db  86h
.eh_frame:0000000000006069                 db    2
.eh_frame:000000000000606A                 db  41h ; A
.eh_frame:000000000000606B                 db  0Eh
.eh_frame:000000000000606C                 db  18h
.eh_frame:000000000000606D                 db  83h
.eh_frame:000000000000606E                 db    3
.eh_frame:000000000000606F                 db  50h ; P
.eh_frame:0000000000006070                 db  0Eh
.eh_frame:0000000000006071                 db 0D0h
.eh_frame:0000000000006072                 db    1
.eh_frame:0000000000006073                 db    2
.eh_frame:0000000000006074                 db 0ABh
.eh_frame:0000000000006075                 db  0Ah
.eh_frame:0000000000006076                 db  0Eh
.eh_frame:0000000000006077                 db  18h
.eh_frame:0000000000006078                 db  41h ; A
.eh_frame:0000000000006079                 db  0Eh
.eh_frame:000000000000607A                 db  10h
.eh_frame:000000000000607B                 db  41h ; A
.eh_frame:000000000000607C                 db  0Eh
.eh_frame:000000000000607D                 db    8
.eh_frame:000000000000607E                 db  41h ; A
.eh_frame:000000000000607F                 db  0Bh
.eh_frame:0000000000006080                 db  1Ch
.eh_frame:0000000000006081                 db    0
.eh_frame:0000000000006082                 db    0
.eh_frame:0000000000006083                 db    0
.eh_frame:0000000000006084                 db  14h
.eh_frame:0000000000006085                 db    8
.eh_frame:0000000000006086                 db    0
.eh_frame:0000000000006087                 db    0
.eh_frame:0000000000006088                 db    8
.eh_frame:0000000000006089                 db 0E1h
.eh_frame:000000000000608A                 db 0FFh
.eh_frame:000000000000608B                 db 0FFh
.eh_frame:000000000000608C                 db  80h
.eh_frame:000000000000608D                 db    0
.eh_frame:000000000000608E                 db    0
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db    0
.eh_frame:0000000000006091                 db  41h ; A
.eh_frame:0000000000006092                 db  0Eh
.eh_frame:0000000000006093                 db  10h
.eh_frame:0000000000006094                 db  83h
.eh_frame:0000000000006095                 db    2
.eh_frame:0000000000006096                 db    2
.eh_frame:0000000000006097                 db  7Ah ; z
.eh_frame:0000000000006098                 db  0Eh
.eh_frame:0000000000006099                 db    8
.eh_frame:000000000000609A                 db    0
.eh_frame:000000000000609B                 db    0
.eh_frame:000000000000609C                 db    0
.eh_frame:000000000000609D                 db    0
.eh_frame:000000000000609E                 db    0
.eh_frame:000000000000609F                 db    0
.eh_frame:00000000000060A0                 db  18h
.eh_frame:00000000000060A1                 db    0
.eh_frame:00000000000060A2                 db    0
.eh_frame:00000000000060A3                 db    0
.eh_frame:00000000000060A4                 db  34h ; 4
.eh_frame:00000000000060A5                 db    8
.eh_frame:00000000000060A6                 db    0
.eh_frame:00000000000060A7                 db    0
.eh_frame:00000000000060A8                 db  68h ; h
.eh_frame:00000000000060A9                 db 0E1h
.eh_frame:00000000000060AA                 db 0FFh
.eh_frame:00000000000060AB                 db 0FFh
.eh_frame:00000000000060AC                 db  1Ah
.eh_frame:00000000000060AD                 db    0
.eh_frame:00000000000060AE                 db    0
.eh_frame:00000000000060AF                 db    0
.eh_frame:00000000000060B0                 db    0
.eh_frame:00000000000060B1                 db  41h ; A
.eh_frame:00000000000060B2                 db  0Eh
.eh_frame:00000000000060B3                 db  10h
.eh_frame:00000000000060B4                 db  83h
.eh_frame:00000000000060B5                 db    2
.eh_frame:00000000000060B6                 db  53h ; S
.eh_frame:00000000000060B7                 db  0Ah
.eh_frame:00000000000060B8                 db  0Eh
.eh_frame:00000000000060B9                 db    8
.eh_frame:00000000000060BA                 db  41h ; A
.eh_frame:00000000000060BB                 db  0Bh
.eh_frame:00000000000060BC                 db  10h
.eh_frame:00000000000060BD                 db    0
.eh_frame:00000000000060BE                 db    0
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db  50h ; P
.eh_frame:00000000000060C1                 db    8
.eh_frame:00000000000060C2                 db    0
.eh_frame:00000000000060C3                 db    0
.eh_frame:00000000000060C4                 db  6Ch ; l
.eh_frame:00000000000060C5                 db 0E1h
.eh_frame:00000000000060C6                 db 0FFh
.eh_frame:00000000000060C7                 db 0FFh
.eh_frame:00000000000060C8                 db  24h ; $
.eh_frame:00000000000060C9                 db    0
.eh_frame:00000000000060CA                 db    0
.eh_frame:00000000000060CB                 db    0
.eh_frame:00000000000060CC                 db    0
.eh_frame:00000000000060CD                 db  5Fh ; _
.eh_frame:00000000000060CE                 db  0Eh
.eh_frame:00000000000060CF                 db  10h
.eh_frame:00000000000060D0                 db  10h
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db  64h ; d
.eh_frame:00000000000060D5                 db    8
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db  88h
.eh_frame:00000000000060D9                 db 0E1h
.eh_frame:00000000000060DA                 db 0FFh
.eh_frame:00000000000060DB                 db 0FFh
.eh_frame:00000000000060DC                 db    2
.eh_frame:00000000000060DD                 db    0
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db    0
.eh_frame:00000000000060E1                 db    0
.eh_frame:00000000000060E2                 db    0
.eh_frame:00000000000060E3                 db    0
.eh_frame:00000000000060E4                 db  20h
.eh_frame:00000000000060E5                 db    0
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db  78h ; x
.eh_frame:00000000000060E9                 db    8
.eh_frame:00000000000060EA                 db    0
.eh_frame:00000000000060EB                 db    0
.eh_frame:00000000000060EC                 db  84h
.eh_frame:00000000000060ED                 db 0E1h
.eh_frame:00000000000060EE                 db 0FFh
.eh_frame:00000000000060EF                 db 0FFh
.eh_frame:00000000000060F0                 db  36h ; 6
.eh_frame:00000000000060F1                 db    0
.eh_frame:00000000000060F2                 db    0
.eh_frame:00000000000060F3                 db    0
.eh_frame:00000000000060F4                 db    0
.eh_frame:00000000000060F5                 db  44h ; D
.eh_frame:00000000000060F6                 db  0Eh
.eh_frame:00000000000060F7                 db  10h
.eh_frame:00000000000060F8                 db  83h
.eh_frame:00000000000060F9                 db    2
.eh_frame:00000000000060FA                 db  5Dh ; ]
.eh_frame:00000000000060FB                 db  0Ah
.eh_frame:00000000000060FC                 db  0Eh
.eh_frame:00000000000060FD                 db    8
.eh_frame:00000000000060FE                 db  47h ; G
.eh_frame:00000000000060FF                 db  0Bh
.eh_frame:0000000000006100                 db  48h ; H
.eh_frame:0000000000006101                 db  0Ah
.eh_frame:0000000000006102                 db  0Eh
.eh_frame:0000000000006103                 db    8
.eh_frame:0000000000006104                 db  41h ; A
.eh_frame:0000000000006105                 db  0Bh
.eh_frame:0000000000006106                 db    0
.eh_frame:0000000000006107                 db    0
.eh_frame:0000000000006108                 db  10h
.eh_frame:0000000000006109                 db    0
.eh_frame:000000000000610A                 db    0
.eh_frame:000000000000610B                 db    0
.eh_frame:000000000000610C                 db  9Ch
.eh_frame:000000000000610D                 db    8
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db 0A0h
.eh_frame:0000000000006111                 db 0E1h
.eh_frame:0000000000006112                 db 0FFh
.eh_frame:0000000000006113                 db 0FFh
.eh_frame:0000000000006114                 db  24h ; $
.eh_frame:0000000000006115                 db    0
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db    0
.eh_frame:0000000000006119                 db  5Fh ; _
.eh_frame:000000000000611A                 db  0Eh
.eh_frame:000000000000611B                 db  10h
.eh_frame:000000000000611C                 db  14h
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db 0B0h
.eh_frame:0000000000006121                 db    8
.eh_frame:0000000000006122                 db    0
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db 0BCh
.eh_frame:0000000000006125                 db 0E1h
.eh_frame:0000000000006126                 db 0FFh
.eh_frame:0000000000006127                 db 0FFh
.eh_frame:0000000000006128                 db  82h
.eh_frame:0000000000006129                 db    0
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db    0
.eh_frame:000000000000612D                 db    2
.eh_frame:000000000000612E                 db  5Fh ; _
.eh_frame:000000000000612F                 db  0Eh
.eh_frame:0000000000006130                 db  10h
.eh_frame:0000000000006131                 db  49h ; I
.eh_frame:0000000000006132                 db  0Eh
.eh_frame:0000000000006133                 db    8
.eh_frame:0000000000006134                 db  14h
.eh_frame:0000000000006135                 db    0
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db 0C8h
.eh_frame:0000000000006139                 db    8
.eh_frame:000000000000613A                 db    0
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db  34h ; 4
.eh_frame:000000000000613D                 db 0E2h
.eh_frame:000000000000613E                 db 0FFh
.eh_frame:000000000000613F                 db 0FFh
.eh_frame:0000000000006140                 db  4Ah ; J
.eh_frame:0000000000006141                 db    0
.eh_frame:0000000000006142                 db    0
.eh_frame:0000000000006143                 db    0
.eh_frame:0000000000006144                 db    0
.eh_frame:0000000000006145                 db    2
.eh_frame:0000000000006146                 db  45h ; E
.eh_frame:0000000000006147                 db  0Eh
.eh_frame:0000000000006148                 db  10h
.eh_frame:0000000000006149                 db    0
.eh_frame:000000000000614A                 db    0
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db  18h
.eh_frame:000000000000614D                 db    0
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db 0E0h
.eh_frame:0000000000006151                 db    8
.eh_frame:0000000000006152                 db    0
.eh_frame:0000000000006153                 db    0
.eh_frame:0000000000006154                 db  6Ch ; l
.eh_frame:0000000000006155                 db 0E2h
.eh_frame:0000000000006156                 db 0FFh
.eh_frame:0000000000006157                 db 0FFh
.eh_frame:0000000000006158                 db  17h
.eh_frame:0000000000006159                 db    0
.eh_frame:000000000000615A                 db    0
.eh_frame:000000000000615B                 db    0
.eh_frame:000000000000615C                 db    0
.eh_frame:000000000000615D                 db  41h ; A
.eh_frame:000000000000615E                 db  0Eh
.eh_frame:000000000000615F                 db  10h
.eh_frame:0000000000006160                 db  83h
.eh_frame:0000000000006161                 db    2
.eh_frame:0000000000006162                 db  51h ; Q
.eh_frame:0000000000006163                 db  0Eh
.eh_frame:0000000000006164                 db    8
.eh_frame:0000000000006165                 db    0
.eh_frame:0000000000006166                 db    0
.eh_frame:0000000000006167                 db    0
.eh_frame:0000000000006168                 db  18h
.eh_frame:0000000000006169                 db    0
.eh_frame:000000000000616A                 db    0
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db 0FCh
.eh_frame:000000000000616D                 db    8
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db  70h ; p
.eh_frame:0000000000006171                 db 0E2h
.eh_frame:0000000000006172                 db 0FFh
.eh_frame:0000000000006173                 db 0FFh
.eh_frame:0000000000006174                 db  2Eh ; .
.eh_frame:0000000000006175                 db    0
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db    0
.eh_frame:0000000000006179                 db  47h ; G
.eh_frame:000000000000617A                 db  0Eh
.eh_frame:000000000000617B                 db  10h
.eh_frame:000000000000617C                 db  61h ; a
.eh_frame:000000000000617D                 db  0Ah
.eh_frame:000000000000617E                 db  0Eh
.eh_frame:000000000000617F                 db    8
.eh_frame:0000000000006180                 db  41h ; A
.eh_frame:0000000000006181                 db  0Bh
.eh_frame:0000000000006182                 db    0
.eh_frame:0000000000006183                 db    0
.eh_frame:0000000000006184                 db  24h ; $
.eh_frame:0000000000006185                 db    0
.eh_frame:0000000000006186                 db    0
.eh_frame:0000000000006187                 db    0
.eh_frame:0000000000006188                 db  18h
.eh_frame:0000000000006189                 db    9
.eh_frame:000000000000618A                 db    0
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db  84h
.eh_frame:000000000000618D                 db 0E2h
.eh_frame:000000000000618E                 db 0FFh
.eh_frame:000000000000618F                 db 0FFh
.eh_frame:0000000000006190                 db  28h ; (
.eh_frame:0000000000006191                 db    0
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db    0
.eh_frame:0000000000006195                 db  41h ; A
.eh_frame:0000000000006196                 db  0Eh
.eh_frame:0000000000006197                 db  10h
.eh_frame:0000000000006198                 db  86h
.eh_frame:0000000000006199                 db    2
.eh_frame:000000000000619A                 db  41h ; A
.eh_frame:000000000000619B                 db  0Eh
.eh_frame:000000000000619C                 db  18h
.eh_frame:000000000000619D                 db  83h
.eh_frame:000000000000619E                 db    3
.eh_frame:000000000000619F                 db  4Dh ; M
.eh_frame:00000000000061A0                 db  0Eh
.eh_frame:00000000000061A1                 db  20h
.eh_frame:00000000000061A2                 db  49h ; I
.eh_frame:00000000000061A3                 db  0Eh
.eh_frame:00000000000061A4                 db  18h
.eh_frame:00000000000061A5                 db  47h ; G
.eh_frame:00000000000061A6                 db  0Eh
.eh_frame:00000000000061A7                 db  10h
.eh_frame:00000000000061A8                 db  41h ; A
.eh_frame:00000000000061A9                 db  0Eh
.eh_frame:00000000000061AA                 db    8
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db  18h
.eh_frame:00000000000061AD                 db    0
.eh_frame:00000000000061AE                 db    0
.eh_frame:00000000000061AF                 db    0
.eh_frame:00000000000061B0                 db  40h ; @
.eh_frame:00000000000061B1                 db    9
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db  8Ch
.eh_frame:00000000000061B5                 db 0E2h
.eh_frame:00000000000061B6                 db 0FFh
.eh_frame:00000000000061B7                 db 0FFh
.eh_frame:00000000000061B8                 db  13h
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db    0
.eh_frame:00000000000061BD                 db  41h ; A
.eh_frame:00000000000061BE                 db  0Eh
.eh_frame:00000000000061BF                 db  10h
.eh_frame:00000000000061C0                 db  83h
.eh_frame:00000000000061C1                 db    2
.eh_frame:00000000000061C2                 db  50h ; P
.eh_frame:00000000000061C3                 db  0Eh
.eh_frame:00000000000061C4                 db    8
.eh_frame:00000000000061C5                 db    0
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db  14h
.eh_frame:00000000000061C9                 db    0
.eh_frame:00000000000061CA                 db    0
.eh_frame:00000000000061CB                 db    0
.eh_frame:00000000000061CC                 db  5Ch ; \
.eh_frame:00000000000061CD                 db    9
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db  90h
.eh_frame:00000000000061D1                 db 0E2h
.eh_frame:00000000000061D2                 db 0FFh
.eh_frame:00000000000061D3                 db 0FFh
.eh_frame:00000000000061D4                 db  35h ; 5
.eh_frame:00000000000061D5                 db    0
.eh_frame:00000000000061D6                 db    0
.eh_frame:00000000000061D7                 db    0
.eh_frame:00000000000061D8                 db    0
.eh_frame:00000000000061D9                 db  4Bh ; K
.eh_frame:00000000000061DA                 db  0Eh
.eh_frame:00000000000061DB                 db  10h
.eh_frame:00000000000061DC                 db    0
.eh_frame:00000000000061DD                 db    0
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db  1Ch
.eh_frame:00000000000061E1                 db    0
.eh_frame:00000000000061E2                 db    0
.eh_frame:00000000000061E3                 db    0
.eh_frame:00000000000061E4                 db  74h ; t
.eh_frame:00000000000061E5                 db    9
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db 0B8h
.eh_frame:00000000000061E9                 db 0E2h
.eh_frame:00000000000061EA                 db 0FFh
.eh_frame:00000000000061EB                 db 0FFh
.eh_frame:00000000000061EC                 db  18h
.eh_frame:00000000000061ED                 db    0
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db    0
.eh_frame:00000000000061F1                 db  44h ; D
.eh_frame:00000000000061F2                 db  0Eh
.eh_frame:00000000000061F3                 db  10h
.eh_frame:00000000000061F4                 db  4Eh ; N
.eh_frame:00000000000061F5                 db  0Ah
.eh_frame:00000000000061F6                 db  0Eh
.eh_frame:00000000000061F7                 db    8
.eh_frame:00000000000061F8                 db  41h ; A
.eh_frame:00000000000061F9                 db  0Bh
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db    0
.eh_frame:00000000000061FD                 db    0
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db  3Ch ; <
.eh_frame:0000000000006201                 db    0
.eh_frame:0000000000006202                 db    0
.eh_frame:0000000000006203                 db    0
.eh_frame:0000000000006204                 db  94h
.eh_frame:0000000000006205                 db    9
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db 0B8h
.eh_frame:0000000000006209                 db 0E2h
.eh_frame:000000000000620A                 db 0FFh
.eh_frame:000000000000620B                 db 0FFh
.eh_frame:000000000000620C                 db  83h
.eh_frame:000000000000620D                 db    0
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db    0
.eh_frame:0000000000006211                 db  42h ; B
.eh_frame:0000000000006212                 db  0Eh
.eh_frame:0000000000006213                 db  10h
.eh_frame:0000000000006214                 db  8Dh
.eh_frame:0000000000006215                 db    2
.eh_frame:0000000000006216                 db  42h ; B
.eh_frame:0000000000006217                 db  0Eh
.eh_frame:0000000000006218                 db  18h
.eh_frame:0000000000006219                 db  8Ch
.eh_frame:000000000000621A                 db    3
.eh_frame:000000000000621B                 db  44h ; D
.eh_frame:000000000000621C                 db  0Eh
.eh_frame:000000000000621D                 db  20h
.eh_frame:000000000000621E                 db  86h
.eh_frame:000000000000621F                 db    4
.eh_frame:0000000000006220                 db  41h ; A
.eh_frame:0000000000006221                 db  0Eh
.eh_frame:0000000000006222                 db  28h ; (
.eh_frame:0000000000006223                 db  83h
.eh_frame:0000000000006224                 db    5
.eh_frame:0000000000006225                 db  4Ah ; J
.eh_frame:0000000000006226                 db  0Eh
.eh_frame:0000000000006227                 db  40h ; @
.eh_frame:0000000000006228                 db    2
.eh_frame:0000000000006229                 db  64h ; d
.eh_frame:000000000000622A                 db  0Ah
.eh_frame:000000000000622B                 db  0Eh
.eh_frame:000000000000622C                 db  28h ; (
.eh_frame:000000000000622D                 db  41h ; A
.eh_frame:000000000000622E                 db  0Eh
.eh_frame:000000000000622F                 db  20h
.eh_frame:0000000000006230                 db  41h ; A
.eh_frame:0000000000006231                 db  0Eh
.eh_frame:0000000000006232                 db  18h
.eh_frame:0000000000006233                 db  42h ; B
.eh_frame:0000000000006234                 db  0Eh
.eh_frame:0000000000006235                 db  10h
.eh_frame:0000000000006236                 db  42h ; B
.eh_frame:0000000000006237                 db  0Eh
.eh_frame:0000000000006238                 db    8
.eh_frame:0000000000006239                 db  41h ; A
.eh_frame:000000000000623A                 db  0Bh
.eh_frame:000000000000623B                 db    0
.eh_frame:000000000000623C                 db    0
.eh_frame:000000000000623D                 db    0
.eh_frame:000000000000623E                 db    0
.eh_frame:000000000000623F                 db    0
.eh_frame:0000000000006240                 db  4Ch ; L
.eh_frame:0000000000006241                 db    0
.eh_frame:0000000000006242                 db    0
.eh_frame:0000000000006243                 db    0
.eh_frame:0000000000006244                 db 0D4h
.eh_frame:0000000000006245                 db    9
.eh_frame:0000000000006246                 db    0
.eh_frame:0000000000006247                 db    0
.eh_frame:0000000000006248                 db    8
.eh_frame:0000000000006249                 db 0E3h
.eh_frame:000000000000624A                 db 0FFh
.eh_frame:000000000000624B                 db 0FFh
.eh_frame:000000000000624C                 db  7Dh ; }
.eh_frame:000000000000624D                 db    0
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db    0
.eh_frame:0000000000006251                 db  42h ; B
.eh_frame:0000000000006252                 db  0Eh
.eh_frame:0000000000006253                 db  10h
.eh_frame:0000000000006254                 db  8Ch
.eh_frame:0000000000006255                 db    2
.eh_frame:0000000000006256                 db  41h ; A
.eh_frame:0000000000006257                 db  0Eh
.eh_frame:0000000000006258                 db  18h
.eh_frame:0000000000006259                 db  86h
.eh_frame:000000000000625A                 db    3
.eh_frame:000000000000625B                 db  44h ; D
.eh_frame:000000000000625C                 db  0Eh
.eh_frame:000000000000625D                 db  20h
.eh_frame:000000000000625E                 db  83h
.eh_frame:000000000000625F                 db    4
.eh_frame:0000000000006260                 db  69h ; i
.eh_frame:0000000000006261                 db  0Ah
.eh_frame:0000000000006262                 db  0Eh
.eh_frame:0000000000006263                 db  18h
.eh_frame:0000000000006264                 db  41h ; A
.eh_frame:0000000000006265                 db  0Eh
.eh_frame:0000000000006266                 db  10h
.eh_frame:0000000000006267                 db  42h ; B
.eh_frame:0000000000006268                 db  0Eh
.eh_frame:0000000000006269                 db    8
.eh_frame:000000000000626A                 db  45h ; E
.eh_frame:000000000000626B                 db  0Bh
.eh_frame:000000000000626C                 db  55h ; U
.eh_frame:000000000000626D                 db  0Ah
.eh_frame:000000000000626E                 db  0Eh
.eh_frame:000000000000626F                 db  18h
.eh_frame:0000000000006270                 db  41h ; A
.eh_frame:0000000000006271                 db  0Eh
.eh_frame:0000000000006272                 db  10h
.eh_frame:0000000000006273                 db  42h ; B
.eh_frame:0000000000006274                 db  0Eh
.eh_frame:0000000000006275                 db    8
.eh_frame:0000000000006276                 db  48h ; H
.eh_frame:0000000000006277                 db  0Bh
.eh_frame:0000000000006278                 db  41h ; A
.eh_frame:0000000000006279                 db  0Ah
.eh_frame:000000000000627A                 db  0Eh
.eh_frame:000000000000627B                 db  18h
.eh_frame:000000000000627C                 db  46h ; F
.eh_frame:000000000000627D                 db  0Eh
.eh_frame:000000000000627E                 db  10h
.eh_frame:000000000000627F                 db  42h ; B
.eh_frame:0000000000006280                 db  0Eh
.eh_frame:0000000000006281                 db    8
.eh_frame:0000000000006282                 db  47h ; G
.eh_frame:0000000000006283                 db  0Bh
.eh_frame:0000000000006284                 db  49h ; I
.eh_frame:0000000000006285                 db  0Eh
.eh_frame:0000000000006286                 db  18h
.eh_frame:0000000000006287                 db  41h ; A
.eh_frame:0000000000006288                 db  0Eh
.eh_frame:0000000000006289                 db  10h
.eh_frame:000000000000628A                 db  42h ; B
.eh_frame:000000000000628B                 db  0Eh
.eh_frame:000000000000628C                 db    8
.eh_frame:000000000000628D                 db    0
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db  1Ch
.eh_frame:0000000000006291                 db    0
.eh_frame:0000000000006292                 db    0
.eh_frame:0000000000006293                 db    0
.eh_frame:0000000000006294                 db  24h ; $
.eh_frame:0000000000006295                 db  0Ah
.eh_frame:0000000000006296                 db    0
.eh_frame:0000000000006297                 db    0
.eh_frame:0000000000006298                 db  38h ; 8
.eh_frame:0000000000006299                 db 0E3h
.eh_frame:000000000000629A                 db 0FFh
.eh_frame:000000000000629B                 db 0FFh
.eh_frame:000000000000629C                 db  60h ; `
.eh_frame:000000000000629D                 db    0
.eh_frame:000000000000629E                 db    0
.eh_frame:000000000000629F                 db    0
.eh_frame:00000000000062A0                 db    0
.eh_frame:00000000000062A1                 db  44h ; D
.eh_frame:00000000000062A2                 db  0Eh
.eh_frame:00000000000062A3                 db  10h
.eh_frame:00000000000062A4                 db  75h ; u
.eh_frame:00000000000062A5                 db  0Ah
.eh_frame:00000000000062A6                 db  0Eh
.eh_frame:00000000000062A7                 db    8
.eh_frame:00000000000062A8                 db  47h ; G
.eh_frame:00000000000062A9                 db  0Bh
.eh_frame:00000000000062AA                 db  5Fh ; _
.eh_frame:00000000000062AB                 db  0Eh
.eh_frame:00000000000062AC                 db    8
.eh_frame:00000000000062AD                 db    0
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db  1Ch
.eh_frame:00000000000062B1                 db    0
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db  44h ; D
.eh_frame:00000000000062B5                 db  0Ah
.eh_frame:00000000000062B6                 db    0
.eh_frame:00000000000062B7                 db    0
.eh_frame:00000000000062B8                 db  78h ; x
.eh_frame:00000000000062B9                 db 0E3h
.eh_frame:00000000000062BA                 db 0FFh
.eh_frame:00000000000062BB                 db 0FFh
.eh_frame:00000000000062BC                 db  3Ch ; <
.eh_frame:00000000000062BD                 db    0
.eh_frame:00000000000062BE                 db    0
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db    0
.eh_frame:00000000000062C1                 db  44h ; D
.eh_frame:00000000000062C2                 db  0Eh
.eh_frame:00000000000062C3                 db  10h
.eh_frame:00000000000062C4                 db  61h ; a
.eh_frame:00000000000062C5                 db  0Ah
.eh_frame:00000000000062C6                 db  0Eh
.eh_frame:00000000000062C7                 db    8
.eh_frame:00000000000062C8                 db  4Bh ; K
.eh_frame:00000000000062C9                 db  0Bh
.eh_frame:00000000000062CA                 db  4Bh ; K
.eh_frame:00000000000062CB                 db  0Eh
.eh_frame:00000000000062CC                 db    8
.eh_frame:00000000000062CD                 db    0
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db  34h ; 4
.eh_frame:00000000000062D1                 db    0
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db  64h ; d
.eh_frame:00000000000062D5                 db  0Ah
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db  98h
.eh_frame:00000000000062D9                 db 0E3h
.eh_frame:00000000000062DA                 db 0FFh
.eh_frame:00000000000062DB                 db 0FFh
.eh_frame:00000000000062DC                 db  7Bh ; {
.eh_frame:00000000000062DD                 db    0
.eh_frame:00000000000062DE                 db    0
.eh_frame:00000000000062DF                 db    0
.eh_frame:00000000000062E0                 db    0
.eh_frame:00000000000062E1                 db  42h ; B
.eh_frame:00000000000062E2                 db  0Eh
.eh_frame:00000000000062E3                 db  10h
.eh_frame:00000000000062E4                 db  8Ch
.eh_frame:00000000000062E5                 db    2
.eh_frame:00000000000062E6                 db  41h ; A
.eh_frame:00000000000062E7                 db  0Eh
.eh_frame:00000000000062E8                 db  18h
.eh_frame:00000000000062E9                 db  86h
.eh_frame:00000000000062EA                 db    3
.eh_frame:00000000000062EB                 db  41h ; A
.eh_frame:00000000000062EC                 db  0Eh
.eh_frame:00000000000062ED                 db  20h
.eh_frame:00000000000062EE                 db  83h
.eh_frame:00000000000062EF                 db    4
.eh_frame:00000000000062F0                 db  7Dh ; }
.eh_frame:00000000000062F1                 db  0Ah
.eh_frame:00000000000062F2                 db  0Eh
.eh_frame:00000000000062F3                 db  18h
.eh_frame:00000000000062F4                 db  41h ; A
.eh_frame:00000000000062F5                 db  0Eh
.eh_frame:00000000000062F6                 db  10h
.eh_frame:00000000000062F7                 db  42h ; B
.eh_frame:00000000000062F8                 db  0Eh
.eh_frame:00000000000062F9                 db    8
.eh_frame:00000000000062FA                 db  44h ; D
.eh_frame:00000000000062FB                 db  0Bh
.eh_frame:00000000000062FC                 db  60h ; `
.eh_frame:00000000000062FD                 db  0Ah
.eh_frame:00000000000062FE                 db  0Eh
.eh_frame:00000000000062FF                 db  18h
.eh_frame:0000000000006300                 db  41h ; A
.eh_frame:0000000000006301                 db  0Eh
.eh_frame:0000000000006302                 db  10h
.eh_frame:0000000000006303                 db  42h ; B
.eh_frame:0000000000006304                 db  0Eh
.eh_frame:0000000000006305                 db    8
.eh_frame:0000000000006306                 db  45h ; E
.eh_frame:0000000000006307                 db  0Bh
.eh_frame:0000000000006308                 db  1Ch
.eh_frame:0000000000006309                 db    0
.eh_frame:000000000000630A                 db    0
.eh_frame:000000000000630B                 db    0
.eh_frame:000000000000630C                 db  9Ch
.eh_frame:000000000000630D                 db  0Ah
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db 0E0h
.eh_frame:0000000000006311                 db 0E3h
.eh_frame:0000000000006312                 db 0FFh
.eh_frame:0000000000006313                 db 0FFh
.eh_frame:0000000000006314                 db  40h ; @
.eh_frame:0000000000006315                 db    0
.eh_frame:0000000000006316                 db    0
.eh_frame:0000000000006317                 db    0
.eh_frame:0000000000006318                 db    0
.eh_frame:0000000000006319                 db  44h ; D
.eh_frame:000000000000631A                 db  0Eh
.eh_frame:000000000000631B                 db  10h
.eh_frame:000000000000631C                 db  83h
.eh_frame:000000000000631D                 db    2
.eh_frame:000000000000631E                 db  5Ah ; Z
.eh_frame:000000000000631F                 db  0Ah
.eh_frame:0000000000006320                 db  0Eh
.eh_frame:0000000000006321                 db    8
.eh_frame:0000000000006322                 db  4Ah ; J
.eh_frame:0000000000006323                 db  0Bh
.eh_frame:0000000000006324                 db  53h ; S
.eh_frame:0000000000006325                 db  0Eh
.eh_frame:0000000000006326                 db    8
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db  2Ch ; ,
.eh_frame:0000000000006329                 db    0
.eh_frame:000000000000632A                 db    0
.eh_frame:000000000000632B                 db    0
.eh_frame:000000000000632C                 db 0BCh
.eh_frame:000000000000632D                 db  0Ah
.eh_frame:000000000000632E                 db    0
.eh_frame:000000000000632F                 db    0
.eh_frame:0000000000006330                 db    0
.eh_frame:0000000000006331                 db 0E4h
.eh_frame:0000000000006332                 db 0FFh
.eh_frame:0000000000006333                 db 0FFh
.eh_frame:0000000000006334                 db  57h ; W
.eh_frame:0000000000006335                 db    0
.eh_frame:0000000000006336                 db    0
.eh_frame:0000000000006337                 db    0
.eh_frame:0000000000006338                 db    0
.eh_frame:0000000000006339                 db  63h ; c
.eh_frame:000000000000633A                 db  0Eh
.eh_frame:000000000000633B                 db  10h
.eh_frame:000000000000633C                 db  8Ch
.eh_frame:000000000000633D                 db    2
.eh_frame:000000000000633E                 db  41h ; A
.eh_frame:000000000000633F                 db  0Eh
.eh_frame:0000000000006340                 db  18h
.eh_frame:0000000000006341                 db  86h
.eh_frame:0000000000006342                 db    3
.eh_frame:0000000000006343                 db  44h ; D
.eh_frame:0000000000006344                 db  0Eh
.eh_frame:0000000000006345                 db  20h
.eh_frame:0000000000006346                 db  83h
.eh_frame:0000000000006347                 db    4
.eh_frame:0000000000006348                 db  6Bh ; k
.eh_frame:0000000000006349                 db  0Eh
.eh_frame:000000000000634A                 db  18h
.eh_frame:000000000000634B                 db  41h ; A
.eh_frame:000000000000634C                 db  0Eh
.eh_frame:000000000000634D                 db  10h
.eh_frame:000000000000634E                 db  42h ; B
.eh_frame:000000000000634F                 db  0Eh
.eh_frame:0000000000006350                 db    8
.eh_frame:0000000000006351                 db    0
.eh_frame:0000000000006352                 db    0
.eh_frame:0000000000006353                 db    0
.eh_frame:0000000000006354                 db    0
.eh_frame:0000000000006355                 db    0
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db  44h ; D
.eh_frame:0000000000006359                 db    0
.eh_frame:000000000000635A                 db    0
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db 0ECh
.eh_frame:000000000000635D                 db  0Ah
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db  30h ; 0
.eh_frame:0000000000006361                 db 0E4h
.eh_frame:0000000000006362                 db 0FFh
.eh_frame:0000000000006363                 db 0FFh
.eh_frame:0000000000006364                 db  65h ; e
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db    0
.eh_frame:0000000000006369                 db  42h ; B
.eh_frame:000000000000636A                 db  0Eh
.eh_frame:000000000000636B                 db  10h
.eh_frame:000000000000636C                 db  8Fh
.eh_frame:000000000000636D                 db    2
.eh_frame:000000000000636E                 db  42h ; B
.eh_frame:000000000000636F                 db  0Eh
.eh_frame:0000000000006370                 db  18h
.eh_frame:0000000000006371                 db  8Eh
.eh_frame:0000000000006372                 db    3
.eh_frame:0000000000006373                 db  45h ; E
.eh_frame:0000000000006374                 db  0Eh
.eh_frame:0000000000006375                 db  20h
.eh_frame:0000000000006376                 db  8Dh
.eh_frame:0000000000006377                 db    4
.eh_frame:0000000000006378                 db  42h ; B
.eh_frame:0000000000006379                 db  0Eh
.eh_frame:000000000000637A                 db  28h ; (
.eh_frame:000000000000637B                 db  8Ch
.eh_frame:000000000000637C                 db    5
.eh_frame:000000000000637D                 db  48h ; H
.eh_frame:000000000000637E                 db  0Eh
.eh_frame:000000000000637F                 db  30h ; 0
.eh_frame:0000000000006380                 db  86h
.eh_frame:0000000000006381                 db    6
.eh_frame:0000000000006382                 db  48h ; H
.eh_frame:0000000000006383                 db  0Eh
.eh_frame:0000000000006384                 db  38h ; 8
.eh_frame:0000000000006385                 db  83h
.eh_frame:0000000000006386                 db    7
.eh_frame:0000000000006387                 db  4Dh ; M
.eh_frame:0000000000006388                 db  0Eh
.eh_frame:0000000000006389                 db  40h ; @
.eh_frame:000000000000638A                 db  72h ; r
.eh_frame:000000000000638B                 db  0Eh
.eh_frame:000000000000638C                 db  38h ; 8
.eh_frame:000000000000638D                 db  41h ; A
.eh_frame:000000000000638E                 db  0Eh
.eh_frame:000000000000638F                 db  30h ; 0
.eh_frame:0000000000006390                 db  41h ; A
.eh_frame:0000000000006391                 db  0Eh
.eh_frame:0000000000006392                 db  28h ; (
.eh_frame:0000000000006393                 db  42h ; B
.eh_frame:0000000000006394                 db  0Eh
.eh_frame:0000000000006395                 db  20h
.eh_frame:0000000000006396                 db  42h ; B
.eh_frame:0000000000006397                 db  0Eh
.eh_frame:0000000000006398                 db  18h
.eh_frame:0000000000006399                 db  42h ; B
.eh_frame:000000000000639A                 db  0Eh
.eh_frame:000000000000639B                 db  10h
.eh_frame:000000000000639C                 db  42h ; B
.eh_frame:000000000000639D                 db  0Eh
.eh_frame:000000000000639E                 db    8
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  14h
.eh_frame:00000000000063A1                 db    0
.eh_frame:00000000000063A2                 db    0
.eh_frame:00000000000063A3                 db    0
.eh_frame:00000000000063A4                 db  34h ; 4
.eh_frame:00000000000063A5                 db  0Bh
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db  58h ; X
.eh_frame:00000000000063A9                 db 0E4h
.eh_frame:00000000000063AA                 db 0FFh
.eh_frame:00000000000063AB                 db 0FFh
.eh_frame:00000000000063AC                 db    2
.eh_frame:00000000000063AD                 db    0
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db    0
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db    0
.eh_frame:00000000000063B5                 db    0
.eh_frame:00000000000063B6                 db    0
.eh_frame:00000000000063B7                 db    0
.eh_frame:00000000000063B8                 db  10h
.eh_frame:00000000000063B9                 db    0
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db  4Ch ; L
.eh_frame:00000000000063BD                 db  0Bh
.eh_frame:00000000000063BE                 db    0
.eh_frame:00000000000063BF                 db    0
.eh_frame:00000000000063C0                 db  50h ; P
.eh_frame:00000000000063C1                 db 0E4h
.eh_frame:00000000000063C2                 db 0FFh
.eh_frame:00000000000063C3                 db 0FFh
.eh_frame:00000000000063C4                 db  0Eh
.eh_frame:00000000000063C5                 db    0
.eh_frame:00000000000063C6                 db    0
.eh_frame:00000000000063C7                 db    0
.eh_frame:00000000000063C8                 db    0
.eh_frame:00000000000063C9                 db    0
.eh_frame:00000000000063CA                 db    0
.eh_frame:00000000000063CB                 db    0
.eh_frame:00000000000063CC __FRAME_END__   db    0
.eh_frame:00000000000063CD                 db    0
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063CF _eh_frame       ends
.eh_frame:00000000000063CF
.init_array:0000000000206B50 ; ELF Initialization Function Table
.init_array:0000000000206B50 ; ===========================================================================
.init_array:0000000000206B50
.init_array:0000000000206B50 ; Segment type: Pure data
.init_array:0000000000206B50 ; Segment permissions: Read/Write
.init_array:0000000000206B50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B50                 assume cs:_init_array
.init_array:0000000000206B50                 ;org 206B50h
.init_array:0000000000206B50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B50
.fini_array:0000000000206B58 ; ELF Termination Function Table
.fini_array:0000000000206B58 ; ===========================================================================
.fini_array:0000000000206B58
.fini_array:0000000000206B58 ; Segment type: Pure data
.fini_array:0000000000206B58 ; Segment permissions: Read/Write
.fini_array:0000000000206B58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B58                 assume cs:_fini_array
.fini_array:0000000000206B58                 ;org 206B58h
.fini_array:0000000000206B58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B58
.data.rel.ro:0000000000206B60 ; ===========================================================================
.data.rel.ro:0000000000206B60
.data.rel.ro:0000000000206B60 ; Segment type: Pure data
.data.rel.ro:0000000000206B60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B60                 ;org 206B60h
.data.rel.ro:0000000000206B60 ; struct option longopts
.data.rel.ro:0000000000206B60 longopts        dq offset aMultiple     ; name
.data.rel.ro:0000000000206B60                                         ; DATA XREF: main:loc_156A↑o
.data.rel.ro:0000000000206B60                 dd 0                    ; has_arg ; "multiple"
.data.rel.ro:0000000000206B60                 db 4 dup(0)
.data.rel.ro:0000000000206B60                 dq 0                    ; flag
.data.rel.ro:0000000000206B60                 dd 61h                  ; val
.data.rel.ro:0000000000206B60                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq offset aSuffix       ; "suffix"
.data.rel.ro:0000000000206B88                 db    1
.data.rel.ro:0000000000206B89                 db    0
.data.rel.ro:0000000000206B8A                 db    0
.data.rel.ro:0000000000206B8B                 db    0
.data.rel.ro:0000000000206B8C                 db    0
.data.rel.ro:0000000000206B8D                 db    0
.data.rel.ro:0000000000206B8E                 db    0
.data.rel.ro:0000000000206B8F                 db    0
.data.rel.ro:0000000000206B90                 db    0
.data.rel.ro:0000000000206B91                 db    0
.data.rel.ro:0000000000206B92                 db    0
.data.rel.ro:0000000000206B93                 db    0
.data.rel.ro:0000000000206B94                 db    0
.data.rel.ro:0000000000206B95                 db    0
.data.rel.ro:0000000000206B96                 db    0
.data.rel.ro:0000000000206B97                 db    0
.data.rel.ro:0000000000206B98                 db  73h ; s
.data.rel.ro:0000000000206B99                 db    0
.data.rel.ro:0000000000206B9A                 db    0
.data.rel.ro:0000000000206B9B                 db    0
.data.rel.ro:0000000000206B9C                 db    0
.data.rel.ro:0000000000206B9D                 db    0
.data.rel.ro:0000000000206B9E                 db    0
.data.rel.ro:0000000000206B9F                 db    0
.data.rel.ro:0000000000206BA0                 dq offset aZero         ; "zero"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  7Ah ; z
.data.rel.ro:0000000000206BB9                 db    0
.data.rel.ro:0000000000206BBA                 db    0
.data.rel.ro:0000000000206BBB                 db    0
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 1240h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4820h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206B50h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206B58h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 808h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 292h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3D8h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E68h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B68h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 300h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B08h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A9Ah> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1260↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1260+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EC8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206ED8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 strndup_ptr     dq offset strndup       ; DATA XREF: _strndup↑r
.got:0000000000206F20 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F28 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F28                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F30 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F38 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F40 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F48 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F50 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F58 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F60 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F68 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F70 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F78 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD0                                         ; DATA XREF: start+24↑r
.got:0000000000206FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE8 _got            ends
.got:0000000000206FE8
LOAD:0000000000206FF0 ; ===========================================================================
LOAD:0000000000206FF0
LOAD:0000000000206FF0 ; Segment type: Pure data
LOAD:0000000000206FF0 ; Segment permissions: Read/Write
LOAD:0000000000206FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF0                 assume cs:LOAD
LOAD:0000000000206FF0                 ;org 206FF0h
LOAD:0000000000206FF0                 align 20h
LOAD:0000000000206FF0 LOAD            ends
LOAD:0000000000206FF0
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+B2↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1D42↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_330D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000760↑o
.bss:0000000000207080                                         ; LOAD:00000000000007A8↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000748↑o
.bss:0000000000207088                                         ; main+AB↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000207090                                         ; main:loc_1612↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public optarg@@GLIBC_2_2_5
.bss:0000000000207098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000207098                                         ; main:loc_1600↑r
.bss:0000000000207098                                         ; Alternative name is 'optarg'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002070A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002070A0                                         ; DATA XREF: LOAD:0000000000000778↑o
.bss:00000000002070A0                                         ; LOAD:0000000000000790↑o ...
.bss:00000000002070A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007C0↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; usage+139↑r ...
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; char *textdomain(const char *domainname)
extern:0000000000207270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207278 ; int fclose(FILE *stream)
extern:0000000000207278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207280                 extrn bindtextdomain:near
extern:0000000000207280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207298 ; size_t strlen(const char *s)
extern:0000000000207298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; int _overflow(_IO_FILE *, int)
extern:00000000002072B8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002072B8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002072C0 ; char *strrchr(const char *s, int c)
extern:00000000002072C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D8 ; char *strndup(const char *string, size_t n)
extern:00000000002072D8                 extrn strndup:near      ; CODE XREF: _strndup↑j
extern:00000000002072D8                                         ; DATA XREF: .got:strndup_ptr↑o
extern:00000000002072E0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072E0                 extrn __libc_start_main:near
extern:00000000002072E0                                         ; CODE XREF: start+24↑p
extern:00000000002072E0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072F0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072F0                 extrn fputs_unlocked:near
extern:00000000002072F0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072F0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000207300 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207300                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207300                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207308 ; int fileno(FILE *stream)
extern:0000000000207308                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207308                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207310 ; void *malloc(size_t size)
extern:0000000000207310                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207310                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207318 ; int fflush(FILE *stream)
extern:0000000000207318                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207318                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207320 ; char *nl_langinfo(nl_item item)
extern:0000000000207320                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207320                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207328 ; int _freading(FILE *fp)
extern:0000000000207328                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207328                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207330 ; void *realloc(void *ptr, size_t size)
extern:0000000000207330                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207330                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207338 ; char *setlocale(int category, const char *locale)
extern:0000000000207338                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207338                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207340                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207340                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207348 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207348                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207348                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207350 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207350                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207350                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207358 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207358                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207358                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207360 ; void __noreturn exit(int status)
extern:0000000000207360                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207360                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207368 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207368                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207368                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207370                 extrn __fprintf_chk:near
extern:0000000000207370                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207370                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207378 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207378                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207378                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207380 ; int iswprint(wint_t wc)
extern:0000000000207380                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207380                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207388 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207388                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207388                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207388                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207390 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207390                 extrn __ctype_b_loc:near
extern:0000000000207390                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207390                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207398                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207398                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073A0                 extrn __gmon_start__:near ; weak
extern:00000000002073A0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073A0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A8
extern:00000000002073A8
extern:00000000002073A8                 end start
