LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 328C13A2D032E768A5AFF896FDB7F048336509D58FEF6C18416CF37E30BD89BA
LOAD:0000000000000000 ; Input MD5    : F402A75D05C31C3ADD5E5174537917C7
LOAD:0000000000000000 ; Input CRC32  : 4DF558A0
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/chown
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'chown.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'chown-core.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'userspec.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 49FD8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0E358h               ; Size in file image
LOAD:00000000000000D8                 dq 0E358h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0E970h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20E970h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 710h                 ; Size in file image
LOAD:0000000000000110                 dq 8D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0EB98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20EB98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0C628h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0C628h               ; Physical address
LOAD:00000000000001B0                 dq 4B4h                 ; Size in file image
LOAD:00000000000001B8                 dq 4B4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0E970h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20E970h              ; Physical address
LOAD:0000000000000220                 dq 690h                 ; Size in file image
LOAD:0000000000000228                 dq 690h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 8Ah, 0F1h, 13h, 6Bh, 28h, 2Bh, 0EDh, 45h, 84h, 7Eh ; Desc
LOAD:0000000000000284                 db 34h, 0E8h, 84h, 15h, 53h, 0F3h, 0B8h, 53h, 0B4h, 0F4h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Bh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Bh, 4Ch, 51h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aEndgrent - offset byte_AA8, 12h, 0, 0, \ ; "endgrent"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_AA8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_AA8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_AA8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_AA8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_AA8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrcpy - offset byte_AA8, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_AA8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aQsort - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFcntl - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_AA8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFclose - offset byte_AA8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aGetpwuid - offset byte_AA8, 12h, 0, 0, \ ; "getpwuid"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain - offset byte_AA8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStpcpy - offset byte_AA8, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aDcgettext - offset byte_AA8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_AA8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrlen - offset byte_AA8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLxstat - offset byte_AA8, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOpenat - offset byte_AA8, 12h, 0, 0, \ ; "openat"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStackChkFail - offset byte_AA8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetoptLong - offset byte_AA8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMbrtowc - offset byte_AA8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrchr - offset byte_AA8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aGetgrgid - offset byte_AA8, 12h, 0, 0, \ ; "getgrgid"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFxstatat - offset byte_AA8, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrrchr - offset byte_AA8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLseek - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aAssertFail - offset byte_AA8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemset - offset byte_AA8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFclose+1 - offset byte_AA8, 12h, 0, 0, \ ; "close"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aOpenat2 - offset byte_AA8, 12h, 0, 0, \ ; "__openat_2"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aClosedir - offset byte_AA8, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aLibcStartMain - offset byte_AA8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemcmp - offset byte_AA8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFputsUnlocked - offset byte_AA8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aCalloc - offset byte_AA8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aDirfd - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGetpwnam - offset byte_AA8, 12h, 0, 0, \ ; "getpwnam"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aGmonStart - offset byte_AA8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMemcpy - offset byte_AA8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aGetgrnam - offset byte_AA8, 12h, 0, 0, \ ; "getgrnam"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFileno - offset byte_AA8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aXstat - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000718                            0>
LOAD:0000000000000730                 Elf64_Sym <offset aReaddir - offset byte_AA8, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMalloc - offset byte_AA8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFflush - offset byte_AA8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aNlLanginfo - offset byte_AA8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFxstat - offset byte_AA8, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aEndpwent - offset byte_AA8, 12h, 0, 0, \ ; "endpwent"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFreading - offset byte_AA8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFchdir - offset byte_AA8, 12h, 0, 0, \ ; "fchdir"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aRealloc - offset byte_AA8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aSetlocale - offset byte_AA8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aPrintfChk - offset byte_AA8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aMemmove - offset byte_AA8, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aError - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000850                            0>
LOAD:0000000000000868                 Elf64_Sym <offset aOpen - offset byte_AA8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:0000000000000868                            0>
LOAD:0000000000000880                 Elf64_Sym <offset aFseeko - offset byte_AA8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aFchown - offset byte_AA8, 12h, 0, 0, \ ; "fchown"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFdopendir - offset byte_AA8, 12h, 0, 0, \ ; "fdopendir"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aStrtoul - offset byte_AA8, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFstatfs - offset byte_AA8, 12h, 0, 0, \ ; "fstatfs"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aCxaAtexit - offset byte_AA8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFchownat - offset byte_AA8, 12h, 0, 0, \ ; "fchownat"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aExit+1 - offset byte_AA8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aFwrite - offset byte_AA8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFprintfChk - offset byte_AA8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aItmRegistertmc - offset byte_AA8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aMbsinit - offset byte_AA8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aIswprint - offset byte_AA8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aCxaFinalize - offset byte_AA8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_AA8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aStdout - offset byte_AA8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aProgname - offset byte_AA8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A00                            offset __bss_start, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aProgramInvocat - offset byte_AA8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A18                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aPrognameFull - offset byte_AA8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A30                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_AA8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A48                            offset __bss_start, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aStderr - offset byte_AA8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A60                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aOptind - offset byte_AA8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A78                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A90                 Elf64_Sym <offset aOptarg - offset byte_AA8, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A90                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8 ; ELF String Table
LOAD:0000000000000AA8 byte_AA8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AA8                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000AA9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000EC8↓o
LOAD:0000000000000AB3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000ABA aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AC1 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000ACE aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000AD6 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AE0 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000AE8 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AF0 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000AF7 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AFF aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000B09 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B12 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000B1B aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000B22 aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B2B aError          db 'error',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B31 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000B42 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B4B aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B54 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B5C aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B64 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000B6A aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B6A                                         ; LOAD:0000000000000928↑o
LOAD:0000000000000B70 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B70                                         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000B88 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B96 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B96                                         ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000BAD aEndpwent       db 'endpwent',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BB6 aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000BBF aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000BC6 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000BCD aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BD4 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000BE5 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000BEC aEndgrent       db 'endgrent',0         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000BF5 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C03 aGetgrnam       db 'getgrnam',0         ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000C0C aFchown         db 'fchown',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000C13 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C1A aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000C20 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C27 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000C27                                         ; LOAD:00000000000005E0↑o
LOAD:0000000000000C2E aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000C36 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C3D aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000C47 aOpenat2        db '__openat_2',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C52 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000C5A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C66 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000C74 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000C7B aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C86 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000C8D aFchownat       db 'fchownat',0         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C96 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000CA2 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000CAB aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000CB2 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000CB9 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000CC4 aOpen           db 'open',0             ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000CC9 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000CD0 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000CD0                                         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000CEE aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000CF4 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000D03 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000D09 aOpenat         db 'openat',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000D10 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000D18 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000D20 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000D20                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000D2F aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000D3A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D3A                                         ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000D4C aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D52 aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000D59 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000D60 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000D6F aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000D74 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000D7F aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000D8F aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000D9C aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000ED8↓o
LOAD:0000000000000DA6 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000EE8↓o
LOAD:0000000000000DB2 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000EF8↓o
LOAD:0000000000000DBD aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000F08↓o
LOAD:0000000000000DC7 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F18↓o
LOAD:0000000000000DD1 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000F28↓o
LOAD:0000000000000DDD aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000DDD                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000DF9 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000E08 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000E08                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000E22 ; ELF GNU Symbol Version Table
LOAD:0000000000000E22                 dw 0
LOAD:0000000000000E24                 dw 2                    ; endgrent@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E28                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E2A                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E2C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E2E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000E30                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000E32                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000E34                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000E36                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000E38                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000E3A                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000E3C                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 2                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000000E40                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000E44                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E46                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E48                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E4A                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000E4C                 dw 3                    ; openat@@GLIBC_2.4
LOAD:0000000000000E4E                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E50                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000E56                 dw 2                    ; getgrgid@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000E5A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E62                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 4                    ; __openat_2@@GLIBC_2.7
LOAD:0000000000000E66                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E6A                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 2                    ; getpwnam@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E76                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E78                 dw 2                    ; getgrnam@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000E7E                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E84                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E86                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000E88                 dw 2                    ; endpwent@@GLIBC_2.2.5
LOAD:0000000000000E8A                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E8C                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000E8E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E92                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000E94                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000E96                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000E98                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 2                    ; fchown@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 3                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000000EA0                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000EA2                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000000EA4                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000EA6                 dw 3                    ; fchownat@@GLIBC_2.4
LOAD:0000000000000EA8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000EAA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000EAE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000EB0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000EB6                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000EB8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000EBA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000EBE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000EC0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000EC4                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000EC8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000EC8                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_AA8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000ED8                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_AA8, \ ; "GLIBC_2.3"
LOAD:0000000000000ED8                                10h>
LOAD:0000000000000EE8                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_AA8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000EE8                                10h>
LOAD:0000000000000EF8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_AA8, \ ; "GLIBC_2.14"
LOAD:0000000000000EF8                                10h>
LOAD:0000000000000F08                 Elf64_Vernaux <0D696917h, 0, 4, offset aGlibc27 - offset byte_AA8, \ ; "GLIBC_2.7"
LOAD:0000000000000F08                                10h>
LOAD:0000000000000F18                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_AA8, \ ; "GLIBC_2.4"
LOAD:0000000000000F18                                10h>
LOAD:0000000000000F28                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_AA8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000F38 ; ELF RELA Relocation Table
LOAD:0000000000000F38                 Elf64_Rela <20E970h, 8, 2480h> ; R_X86_64_RELATIVE +2480h
LOAD:0000000000000F50                 Elf64_Rela <20E978h, 8, 2440h> ; R_X86_64_RELATIVE +2440h
LOAD:0000000000000F68                 Elf64_Rela <20E980h, 8, 0AB7Bh> ; R_X86_64_RELATIVE +0AB7Bh
LOAD:0000000000000F80                 Elf64_Rela <20E9A0h, 8, 0AB85h> ; R_X86_64_RELATIVE +0AB85h
LOAD:0000000000000F98                 Elf64_Rela <20E9C0h, 8, 0AB95h> ; R_X86_64_RELATIVE +0AB95h
LOAD:0000000000000FB0                 Elf64_Rela <20E9E0h, 8, 0AB8Dh> ; R_X86_64_RELATIVE +0AB8Dh
LOAD:0000000000000FC8                 Elf64_Rela <20EA00h, 8, 0AB92h> ; R_X86_64_RELATIVE +0AB92h
LOAD:0000000000000FE0                 Elf64_Rela <20EA20h, 8, 0ABA1h> ; R_X86_64_RELATIVE +0ABA1h
LOAD:0000000000000FF8                 Elf64_Rela <20EA40h, 8, 0ABA4h> ; R_X86_64_RELATIVE +0ABA4h
LOAD:0000000000001010                 Elf64_Rela <20EA60h, 8, 0ABB2h> ; R_X86_64_RELATIVE +0ABB2h
LOAD:0000000000001028                 Elf64_Rela <20EA80h, 8, 0ABB8h> ; R_X86_64_RELATIVE +0ABB8h
LOAD:0000000000001040                 Elf64_Rela <20EAA0h, 8, 0AB97h> ; R_X86_64_RELATIVE +0AB97h
LOAD:0000000000001058                 Elf64_Rela <20EAC0h, 8, 0ABBFh> ; R_X86_64_RELATIVE +0ABBFh
LOAD:0000000000001070                 Elf64_Rela <20EAE0h, 8, 0ABC7h> ; R_X86_64_RELATIVE +0ABC7h
LOAD:0000000000001088                 Elf64_Rela <20EB00h, 8, 0ABCCh> ; R_X86_64_RELATIVE +0ABCCh
LOAD:00000000000010A0                 Elf64_Rela <20EB40h, 8, 0BB01h> ; R_X86_64_RELATIVE +0BB01h
LOAD:00000000000010B8                 Elf64_Rela <20EB48h, 8, 0BB09h> ; R_X86_64_RELATIVE +0BB09h
LOAD:00000000000010D0                 Elf64_Rela <20EB50h, 8, 0BB0Fh> ; R_X86_64_RELATIVE +0BB0Fh
LOAD:00000000000010E8                 Elf64_Rela <20EB58h, 8, 0BB1Ch> ; R_X86_64_RELATIVE +0BB1Ch
LOAD:0000000000001100                 Elf64_Rela <20EB60h, 8, 0BB29h> ; R_X86_64_RELATIVE +0BB29h
LOAD:0000000000001118                 Elf64_Rela <20EB68h, 8, 0C37Bh> ; R_X86_64_RELATIVE +0C37Bh
LOAD:0000000000001130                 Elf64_Rela <20EB70h, 8, 0BB3Dh> ; R_X86_64_RELATIVE +0BB3Dh
LOAD:0000000000001148                 Elf64_Rela <20EB78h, 8, 0BB22h> ; R_X86_64_RELATIVE +0BB22h
LOAD:0000000000001160                 Elf64_Rela <20EB80h, 8, 0AB1Eh> ; R_X86_64_RELATIVE +0AB1Eh
LOAD:0000000000001178                 Elf64_Rela <20EB88h, 8, 0BB45h> ; R_X86_64_RELATIVE +0BB45h
LOAD:0000000000001190                 Elf64_Rela <20F008h, 8, 20F008h> ; R_X86_64_RELATIVE +20F008h
LOAD:00000000000011A8                 Elf64_Rela <20F010h, 8, 0BA94h> ; R_X86_64_RELATIVE +0BA94h
LOAD:00000000000011C0                 Elf64_Rela <20F060h, 8, 20F070h> ; R_X86_64_RELATIVE +20F070h
LOAD:00000000000011D8                 Elf64_Rela <20F078h, 8, 20F100h> ; R_X86_64_RELATIVE +20F100h
LOAD:00000000000011F0                 Elf64_Rela <20EFC0h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001208                 Elf64_Rela <20EFC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001220                 Elf64_Rela <20EFD0h, 2300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001238                 Elf64_Rela <20EFD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001250                 Elf64_Rela <20EFE0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001268                 Elf64_Rela <20EFE8h, 4900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001280                 Elf64_Rela <20F080h, 4C00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001298                 Elf64_Rela <20F088h, 4B00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000012B0                 Elf64_Rela <20F090h, 5100000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000012C8                 Elf64_Rela <20F098h, 5200000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000012E0                 Elf64_Rela <20F0A0h, 4E00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000012F8                 Elf64_Rela <20F0C0h, 5000000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001310 ; ELF JMPREL Relocation Table
LOAD:0000000000001310                 Elf64_Rela <20EDA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT endgrent
LOAD:0000000000001328                 Elf64_Rela <20EDA8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001340                 Elf64_Rela <20EDB0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001358                 Elf64_Rela <20EDB8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001370                 Elf64_Rela <20EDC0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001388                 Elf64_Rela <20EDC8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000013A0                 Elf64_Rela <20EDD0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000013B8                 Elf64_Rela <20EDD8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:00000000000013D0                 Elf64_Rela <20EDE0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000013E8                 Elf64_Rela <20EDE8h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001400                 Elf64_Rela <20EDF0h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001418                 Elf64_Rela <20EDF8h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:0000000000001430                 Elf64_Rela <20EE00h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001448                 Elf64_Rela <20EE08h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001460                 Elf64_Rela <20EE10h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001478                 Elf64_Rela <20EE18h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001490                 Elf64_Rela <20EE20h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000014A8                 Elf64_Rela <20EE28h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000014C0                 Elf64_Rela <20EE30h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:00000000000014D8                 Elf64_Rela <20EE38h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000014F0                 Elf64_Rela <20EE40h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001508                 Elf64_Rela <20EE48h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001520                 Elf64_Rela <20EE50h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001538                 Elf64_Rela <20EE58h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:0000000000001550                 Elf64_Rela <20EE60h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001568                 Elf64_Rela <20EE68h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001580                 Elf64_Rela <20EE70h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001598                 Elf64_Rela <20EE78h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000015B0                 Elf64_Rela <20EE80h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000015C8                 Elf64_Rela <20EE88h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000015E0                 Elf64_Rela <20EE90h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __openat_2
LOAD:00000000000015F8                 Elf64_Rela <20EE98h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001610                 Elf64_Rela <20EEA0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001628                 Elf64_Rela <20EEA8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001640                 Elf64_Rela <20EEB0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001658                 Elf64_Rela <20EEB8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000001670                 Elf64_Rela <20EEC0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:0000000000001688                 Elf64_Rela <20EEC8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000016A0                 Elf64_Rela <20EED0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT getgrnam
LOAD:00000000000016B8                 Elf64_Rela <20EED8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000016D0                 Elf64_Rela <20EEE0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:00000000000016E8                 Elf64_Rela <20EEE8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001700                 Elf64_Rela <20EEF0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001718                 Elf64_Rela <20EEF8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001730                 Elf64_Rela <20EF00h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001748                 Elf64_Rela <20EF08h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001760                 Elf64_Rela <20EF10h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT endpwent
LOAD:0000000000001778                 Elf64_Rela <20EF18h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001790                 Elf64_Rela <20EF20h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:00000000000017A8                 Elf64_Rela <20EF28h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000017C0                 Elf64_Rela <20EF30h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000017D8                 Elf64_Rela <20EF38h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000017F0                 Elf64_Rela <20EF40h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001808                 Elf64_Rela <20EF48h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001820                 Elf64_Rela <20EF50h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001838                 Elf64_Rela <20EF58h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001850                 Elf64_Rela <20EF60h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fchown
LOAD:0000000000001868                 Elf64_Rela <20EF68h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:0000000000001880                 Elf64_Rela <20EF70h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001898                 Elf64_Rela <20EF78h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:00000000000018B0                 Elf64_Rela <20EF80h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000018C8                 Elf64_Rela <20EF88h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fchownat
LOAD:00000000000018E0                 Elf64_Rela <20EF90h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000018F8                 Elf64_Rela <20EF98h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001910                 Elf64_Rela <20EFA0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001928                 Elf64_Rela <20EFA8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001940                 Elf64_Rela <20EFB0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001958                 Elf64_Rela <20EFB8h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001958 LOAD            ends
LOAD:0000000000001958
.init:0000000000001970 ; ===========================================================================
.init:0000000000001970
.init:0000000000001970 ; Segment type: Pure code
.init:0000000000001970 ; Segment permissions: Read/Execute
.init:0000000000001970 _init           segment dword public 'CODE' use64
.init:0000000000001970                 assume cs:_init
.init:0000000000001970                 ;org 1970h
.init:0000000000001970                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001970
.init:0000000000001970 ; =============== S U B R O U T I N E =======================================
.init:0000000000001970
.init:0000000000001970
.init:0000000000001970                 public _init_proc
.init:0000000000001970 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001970                 sub     rsp, 8          ; _init
.init:0000000000001974                 mov     rax, cs:__gmon_start___ptr
.init:000000000000197B                 test    rax, rax
.init:000000000000197E                 jz      short loc_1982
.init:0000000000001980                 call    rax ; __gmon_start__
.init:0000000000001982
.init:0000000000001982 loc_1982:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001982                 add     rsp, 8
.init:0000000000001986                 retn
.init:0000000000001986 _init_proc      endp
.init:0000000000001986
.init:0000000000001986 _init           ends
.init:0000000000001986
LOAD:0000000000001987 ; ===========================================================================
LOAD:0000000000001987
LOAD:0000000000001987 ; Segment type: Pure code
LOAD:0000000000001987 ; Segment permissions: Read/Execute
LOAD:0000000000001987 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001987                 assume cs:LOAD
LOAD:0000000000001987                 ;org 1987h
LOAD:0000000000001987                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001987                 align 10h
LOAD:0000000000001987 LOAD            ends
LOAD:0000000000001987
.plt:0000000000001990 ; ===========================================================================
.plt:0000000000001990
.plt:0000000000001990 ; Segment type: Pure code
.plt:0000000000001990 ; Segment permissions: Read/Execute
.plt:0000000000001990 _plt            segment para public 'CODE' use64
.plt:0000000000001990                 assume cs:_plt
.plt:0000000000001990                 ;org 1990h
.plt:0000000000001990                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990
.plt:0000000000001990 sub_1990        proc near               ; CODE XREF: .plt:00000000000019AB↓j
.plt:0000000000001990                                         ; .plt:00000000000019BB↓j ...
.plt:0000000000001990 ; __unwind {
.plt:0000000000001990                 push    cs:qword_20ED90
.plt:0000000000001996                 jmp     cs:qword_20ED98
.plt:0000000000001996 sub_1990        endp
.plt:0000000000001996
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:000000000000199C                 align 20h
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; void endgrent(void)
.plt:00000000000019A0 _endgrent       proc near               ; CODE XREF: parse_with_separator:loc_5937↓p
.plt:00000000000019A0                                         ; parse_with_separator:loc_5AB1↓p ...
.plt:00000000000019A0                 jmp     cs:endgrent_ptr
.plt:00000000000019A0 _endgrent       endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    0
.plt:00000000000019AB                 jmp     sub_1990
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: noreturn thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; void __noreturn abort(void)
.plt:00000000000019B0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000019B0                                         ; quotearg_buffer_restyled:def_3CE1↓p ...
.plt:00000000000019B0                 jmp     cs:abort_ptr
.plt:00000000000019B0 _abort          endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    1
.plt:00000000000019BB                 jmp     sub_1990
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int *__errno_location(void)
.plt:00000000000019C0 ___errno_location proc near             ; CODE XREF: main+45F↓p
.plt:00000000000019C0                                         ; main+517↓p ...
.plt:00000000000019C0                 jmp     cs:__errno_location_ptr
.plt:00000000000019C0 ___errno_location endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    2
.plt:00000000000019CB                 jmp     sub_1990
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000019D0 _strncmp        proc near               ; CODE XREF: usage+384↓p
.plt:00000000000019D0                                         ; usage+445↓p
.plt:00000000000019D0                 jmp     cs:strncmp_ptr
.plt:00000000000019D0 _strncmp        endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    3
.plt:00000000000019DB                 jmp     sub_1990
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: noreturn thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; void __noreturn _exit(int status)
.plt:00000000000019E0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000019E0                 jmp     cs:_exit_ptr
.plt:00000000000019E0 __exit          endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    4
.plt:00000000000019EB                 jmp     sub_1990
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000019F0 _strcpy         proc near               ; CODE XREF: user_group_str+46↓p
.plt:00000000000019F0                 jmp     cs:strcpy_ptr
.plt:00000000000019F0 _strcpy         endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    5
.plt:00000000000019FB                 jmp     sub_1990
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; size_t __fpending(FILE *fp)
.plt:0000000000001A00 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001A00                 jmp     cs:__fpending_ptr
.plt:0000000000001A00 ___fpending     endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    6
.plt:0000000000001A0B                 jmp     sub_1990
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000001A10 _qsort          proc near               ; CODE XREF: fts_sort+7C↓p
.plt:0000000000001A10                 jmp     cs:qsort_ptr
.plt:0000000000001A10 _qsort          endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    7
.plt:0000000000001A1B                 jmp     sub_1990
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001A20 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001A20                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001A20                 jmp     cs:fcntl_ptr
.plt:0000000000001A20 _fcntl          endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    8
.plt:0000000000001A2B                 jmp     sub_1990
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; char *textdomain(const char *domainname)
.plt:0000000000001A30 _textdomain     proc near               ; CODE XREF: main+91↓p
.plt:0000000000001A30                 jmp     cs:textdomain_ptr
.plt:0000000000001A30 _textdomain     endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    9
.plt:0000000000001A3B                 jmp     sub_1990
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int fclose(FILE *stream)
.plt:0000000000001A40 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A40                                         ; rpl_fclose+6B↓j
.plt:0000000000001A40                 jmp     cs:fclose_ptr
.plt:0000000000001A40 _fclose         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    0Ah
.plt:0000000000001A4B                 jmp     sub_1990
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; struct passwd *getpwuid(__uid_t uid)
.plt:0000000000001A50 _getpwuid       proc near               ; CODE XREF: uid_to_name+17↓p
.plt:0000000000001A50                 jmp     cs:getpwuid_ptr
.plt:0000000000001A50 _getpwuid       endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    0Bh
.plt:0000000000001A5B                 jmp     sub_1990
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A60 _bindtextdomain proc near               ; CODE XREF: main+85↓p
.plt:0000000000001A60                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A60 _bindtextdomain endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    0Ch
.plt:0000000000001A6B                 jmp     sub_1990
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000001A70 _stpcpy         proc near               ; CODE XREF: user_group_str+37↓p
.plt:0000000000001A70                 jmp     cs:stpcpy_ptr
.plt:0000000000001A70 _stpcpy         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    0Dh
.plt:0000000000001A7B                 jmp     sub_1990
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001A80 _dcgettext      proc near               ; CODE XREF: main+457↓p
.plt:0000000000001A80                                         ; main+4D6↓p ...
.plt:0000000000001A80                 jmp     cs:dcgettext_ptr
.plt:0000000000001A80 _dcgettext      endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    0Eh
.plt:0000000000001A8B                 jmp     sub_1990
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001A90 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001A90                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001A90 ___ctype_get_mb_cur_max endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    0Fh
.plt:0000000000001A9B                 jmp     sub_1990
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; size_t strlen(const char *s)
.plt:0000000000001AA0 _strlen         proc near               ; CODE XREF: user_group_str+14↓p
.plt:0000000000001AA0                                         ; user_group_str+1F↓p ...
.plt:0000000000001AA0                 jmp     cs:strlen_ptr
.plt:0000000000001AA0 _strlen         endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    10h
.plt:0000000000001AAB                 jmp     sub_1990
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001AB0 ___lxstat       proc near               ; CODE XREF: get_root_dev_ino+2D↓p
.plt:0000000000001AB0                                         ; fts_stat+15C↓p
.plt:0000000000001AB0                 jmp     cs:__lxstat_ptr
.plt:0000000000001AB0 ___lxstat       endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    11h
.plt:0000000000001ABB                 jmp     sub_1990
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000001AC0 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000001AC0                 jmp     cs:openat_ptr
.plt:0000000000001AC0 _openat         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    12h
.plt:0000000000001ACB                 jmp     sub_1990
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: noreturn thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_22DC↓p
.plt:0000000000001AD0                                         ; gid_to_name:loc_2A7F↓p ...
.plt:0000000000001AD0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001AD0 ___stack_chk_fail endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    13h
.plt:0000000000001ADB                 jmp     sub_1990
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001AE0 _getopt_long    proc near               ; CODE XREF: main+D6↓p
.plt:0000000000001AE0                 jmp     cs:getopt_long_ptr
.plt:0000000000001AE0 _getopt_long    endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    14h
.plt:0000000000001AEB                 jmp     sub_1990
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001AF0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001AF0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001AF0 _mbrtowc        endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    15h
.plt:0000000000001AFB                 jmp     sub_1990
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; char *strchr(const char *s, int c)
.plt:0000000000001B00 _strchr         proc near               ; CODE XREF: parse_user_spec+2B↓p
.plt:0000000000001B00                                         ; parse_user_spec+64↓p ...
.plt:0000000000001B00                 jmp     cs:strchr_ptr
.plt:0000000000001B00 _strchr         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    16h
.plt:0000000000001B0B                 jmp     sub_1990
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000001B10 _getgrgid       proc near               ; CODE XREF: gid_to_name+17↓p
.plt:0000000000001B10                                         ; parse_with_separator+2DF↓p
.plt:0000000000001B10                 jmp     cs:getgrgid_ptr
.plt:0000000000001B10 _getgrgid       endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    17h
.plt:0000000000001B1B                 jmp     sub_1990
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001B20 ___fxstatat     proc near               ; CODE XREF: change_file_owner+302↓p
.plt:0000000000001B20                                         ; fts_stat+9E↓p
.plt:0000000000001B20                 jmp     cs:__fxstatat_ptr
.plt:0000000000001B20 ___fxstatat     endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    18h
.plt:0000000000001B2B                 jmp     sub_1990
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; char *strrchr(const char *s, int c)
.plt:0000000000001B30 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001B30                                         ; rpl_fts_read+2F6↓p
.plt:0000000000001B30                 jmp     cs:strrchr_ptr
.plt:0000000000001B30 _strrchr        endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    19h
.plt:0000000000001B3B                 jmp     sub_1990
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001B40 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001B40                                         ; rpl_fseeko+3B↓p
.plt:0000000000001B40                 jmp     cs:lseek_ptr
.plt:0000000000001B40 _lseek          endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    1Ah
.plt:0000000000001B4B                 jmp     sub_1990
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: noreturn thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001B50 ___assert_fail  proc near               ; CODE XREF: xfts_open+4A↓p
.plt:0000000000001B50                                         ; xstrtoul+39F↓p ...
.plt:0000000000001B50                 jmp     cs:__assert_fail_ptr
.plt:0000000000001B50 ___assert_fail  endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    1Bh
.plt:0000000000001B5B                 jmp     sub_1990
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001B60 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001B60                                         ; xzalloc+12↓j
.plt:0000000000001B60                 jmp     cs:memset_ptr
.plt:0000000000001B60 _memset         endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    1Ch
.plt:0000000000001B6B                 jmp     sub_1990
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int close(int fd)
.plt:0000000000001B70 _close          proc near               ; CODE XREF: change_file_owner+84C↓p
.plt:0000000000001B70                                         ; change_file_owner+AD8↓p ...
.plt:0000000000001B70                 jmp     cs:close_ptr
.plt:0000000000001B70 _close          endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1Dh
.plt:0000000000001B7B                 jmp     sub_1990
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ___openat_2     proc near               ; CODE XREF: change_file_owner+624↓p
.plt:0000000000001B80                                         ; change_file_owner+C56↓p
.plt:0000000000001B80                 jmp     cs:__openat_2_ptr
.plt:0000000000001B80 ___openat_2     endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    1Eh
.plt:0000000000001B8B                 jmp     sub_1990
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; int closedir(DIR *dirp)
.plt:0000000000001B90 _closedir       proc near               ; CODE XREF: fts_lfree+1D↓p
.plt:0000000000001B90                                         ; fts_build+544↓p ...
.plt:0000000000001B90                 jmp     cs:closedir_ptr
.plt:0000000000001B90 _closedir       endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    1Fh
.plt:0000000000001B9B                 jmp     sub_1990
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001BA0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001BA0                 jmp     cs:memcmp_ptr
.plt:0000000000001BA0 _memcmp         endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    20h ; ' '
.plt:0000000000001BAB                 jmp     sub_1990
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001BB0 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001BB0                                         ; usage+C5↓p ...
.plt:0000000000001BB0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001BB0 _fputs_unlocked endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    21h ; '!'
.plt:0000000000001BBB                 jmp     sub_1990
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001BC0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001BC0                                         ; rpl_fts_open+48↓p ...
.plt:0000000000001BC0                 jmp     cs:calloc_ptr
.plt:0000000000001BC0 _calloc         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    22h ; '"'
.plt:0000000000001BCB                 jmp     sub_1990
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int dirfd(DIR *dirp)
.plt:0000000000001BD0 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:0000000000001BD0                 jmp     cs:dirfd_ptr
.plt:0000000000001BD0 _dirfd          endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    23h ; '#'
.plt:0000000000001BDB                 jmp     sub_1990
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; struct passwd *getpwnam(const char *name)
.plt:0000000000001BE0 _getpwnam       proc near               ; CODE XREF: parse_with_separator+196↓p
.plt:0000000000001BE0                 jmp     cs:getpwnam_ptr
.plt:0000000000001BE0 _getpwnam       endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    24h ; '$'
.plt:0000000000001BEB                 jmp     sub_1990
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001BF0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001BF0                                         ; fts_alloc+38↓p
.plt:0000000000001BF0                 jmp     cs:memcpy_ptr
.plt:0000000000001BF0 _memcpy         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    25h ; '%'
.plt:0000000000001BFB                 jmp     sub_1990
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; struct group *getgrnam(const char *name)
.plt:0000000000001C00 _getgrnam       proc near               ; CODE XREF: parse_with_separator+B5↓p
.plt:0000000000001C00                 jmp     cs:getgrnam_ptr
.plt:0000000000001C00 _getgrnam       endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    26h ; '&'
.plt:0000000000001C0B                 jmp     sub_1990
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int fileno(FILE *stream)
.plt:0000000000001C10 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001C10                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001C10                 jmp     cs:fileno_ptr
.plt:0000000000001C10 _fileno         endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    27h ; '''
.plt:0000000000001C1B                 jmp     sub_1990
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001C20 ___xstat        proc near               ; CODE XREF: main+314↓p
.plt:0000000000001C20                                         ; fts_stat+28↓p
.plt:0000000000001C20                 jmp     cs:__xstat_ptr
.plt:0000000000001C20 ___xstat        endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    28h ; '('
.plt:0000000000001C2B                 jmp     sub_1990
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000001C30 _readdir        proc near               ; CODE XREF: fts_build+1F2↓p
.plt:0000000000001C30                 jmp     cs:readdir_ptr
.plt:0000000000001C30 _readdir        endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    29h ; ')'
.plt:0000000000001C3B                 jmp     sub_1990
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; void *malloc(size_t size)
.plt:0000000000001C40 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001C40                                         ; fts_alloc+1E↓p ...
.plt:0000000000001C40                 jmp     cs:malloc_ptr
.plt:0000000000001C40 _malloc         endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    2Ah ; '*'
.plt:0000000000001C4B                 jmp     sub_1990
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int fflush(FILE *stream)
.plt:0000000000001C50 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001C50                                         ; rpl_fflush+3B↓j
.plt:0000000000001C50                 jmp     cs:fflush_ptr
.plt:0000000000001C50 _fflush         endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    2Bh ; '+'
.plt:0000000000001C5B                 jmp     sub_1990
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; char *nl_langinfo(nl_item item)
.plt:0000000000001C60 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001C60                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001C60 _nl_langinfo    endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    2Ch ; ','
.plt:0000000000001C6B                 jmp     sub_1990
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001C70 ___fxstat       proc near               ; CODE XREF: change_file_owner+806↓p
.plt:0000000000001C70                                         ; fts_safe_changedir+BD↓p
.plt:0000000000001C70                 jmp     cs:__fxstat_ptr
.plt:0000000000001C70 ___fxstat       endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2Dh ; '-'
.plt:0000000000001C7B                 jmp     sub_1990
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; void endpwent(void)
.plt:0000000000001C80 _endpwent       proc near               ; CODE XREF: parse_with_separator:loc_5A2F↓p
.plt:0000000000001C80                                         ; parse_with_separator+1EB↓p ...
.plt:0000000000001C80                 jmp     cs:endpwent_ptr
.plt:0000000000001C80 _endpwent       endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    2Eh ; '.'
.plt:0000000000001C8B                 jmp     sub_1990
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; int __freading(FILE *fp)
.plt:0000000000001C90 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001C90                                         ; rpl_fflush+9↓p
.plt:0000000000001C90                 jmp     cs:__freading_ptr
.plt:0000000000001C90 ___freading     endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    2Fh ; '/'
.plt:0000000000001C9B                 jmp     sub_1990
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int fchdir(int fd)
.plt:0000000000001CA0 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000001CA0                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000001CA0                 jmp     cs:fchdir_ptr
.plt:0000000000001CA0 _fchdir         endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    30h ; '0'
.plt:0000000000001CAB                 jmp     sub_1990
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001CB0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001CB0                                         ; fts_sort+40↓p ...
.plt:0000000000001CB0                 jmp     cs:realloc_ptr
.plt:0000000000001CB0 _realloc        endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    31h ; '1'
.plt:0000000000001CBB                 jmp     sub_1990
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001CC0 _setlocale      proc near               ; CODE XREF: main+72↓p
.plt:0000000000001CC0                                         ; usage+36B↓p ...
.plt:0000000000001CC0                 jmp     cs:setlocale_ptr
.plt:0000000000001CC0 _setlocale      endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    32h ; '2'
.plt:0000000000001CCB                 jmp     sub_1990
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001CD0                                         ; usage+269↓p ...
.plt:0000000000001CD0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001CD0 ___printf_chk   endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    33h ; '3'
.plt:0000000000001CDB                 jmp     sub_1990
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001CE0 _memmove        proc near               ; CODE XREF: fts_build+3B5↓p
.plt:0000000000001CE0                                         ; rpl_fts_read+2E9↓p ...
.plt:0000000000001CE0                 jmp     cs:memmove_ptr
.plt:0000000000001CE0 _memmove        endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    34h ; '4'
.plt:0000000000001CEB                 jmp     sub_1990
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001CF0 _error          proc near               ; CODE XREF: main+262↓p
.plt:0000000000001CF0                                         ; main+473↓p ...
.plt:0000000000001CF0                 jmp     cs:error_ptr
.plt:0000000000001CF0 _error          endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    35h ; '5'
.plt:0000000000001CFB                 jmp     sub_1990
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; int open(const char *file, int oflag, ...)
.plt:0000000000001D00 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001D00                 jmp     cs:open_ptr
.plt:0000000000001D00 _open           endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    36h ; '6'
.plt:0000000000001D0B                 jmp     sub_1990
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001D10 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_A94A↓j
.plt:0000000000001D10                 jmp     cs:fseeko_ptr
.plt:0000000000001D10 _fseeko         endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    37h ; '7'
.plt:0000000000001D1B                 jmp     sub_1990
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int fchown(int fd, __uid_t owner, __gid_t group)
.plt:0000000000001D20 _fchown         proc near               ; CODE XREF: change_file_owner+D0A↓p
.plt:0000000000001D20                 jmp     cs:fchown_ptr
.plt:0000000000001D20 _fchown         endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    38h ; '8'
.plt:0000000000001D2B                 jmp     sub_1990
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; DIR *fdopendir(int fd)
.plt:0000000000001D30 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000001D30                 jmp     cs:fdopendir_ptr
.plt:0000000000001D30 _fdopendir      endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    39h ; '9'
.plt:0000000000001D3B                 jmp     sub_1990
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001D40 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001D40                 jmp     cs:strtoul_ptr
.plt:0000000000001D40 _strtoul        endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    3Ah ; ':'
.plt:0000000000001D4B                 jmp     sub_1990
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000001D50 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000001D50                 jmp     cs:fstatfs_ptr
.plt:0000000000001D50 _fstatfs        endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    3Bh ; ';'
.plt:0000000000001D5B                 jmp     sub_1990
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001D60 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001D60                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001D60 ___cxa_atexit   endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    3Ch ; '<'
.plt:0000000000001D6B                 jmp     sub_1990
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; int fchownat(int fd, const char *file, __uid_t owner, __gid_t group, int flag)
.plt:0000000000001D70 _fchownat       proc near               ; CODE XREF: change_file_owner+14B↓p
.plt:0000000000001D70                                         ; change_file_owner+691↓p
.plt:0000000000001D70                 jmp     cs:fchownat_ptr
.plt:0000000000001D70 _fchownat       endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    3Dh ; '='
.plt:0000000000001D7B                 jmp     sub_1990
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: noreturn thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; void __noreturn exit(int status)
.plt:0000000000001D80 _exit           proc near               ; CODE XREF: main+1DC↓p
.plt:0000000000001D80                                         ; usage+58↓p
.plt:0000000000001D80                 jmp     cs:exit_ptr
.plt:0000000000001D80 _exit           endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    3Eh ; '>'
.plt:0000000000001D8B                 jmp     sub_1990
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001D90 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001D90                 jmp     cs:fwrite_ptr
.plt:0000000000001D90 _fwrite         endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    3Fh ; '?'
.plt:0000000000001D9B                 jmp     sub_1990
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001DA0                                         ; version_etc_arn+37↓p ...
.plt:0000000000001DA0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001DA0 ___fprintf_chk  endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    40h ; '@'
.plt:0000000000001DAB                 jmp     sub_1990
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001DB0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001DB0                 jmp     cs:mbsinit_ptr
.plt:0000000000001DB0 _mbsinit        endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    41h ; 'A'
.plt:0000000000001DBB                 jmp     sub_1990
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; int iswprint(wint_t wc)
.plt:0000000000001DC0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001DC0                 jmp     cs:iswprint_ptr
.plt:0000000000001DC0 _iswprint       endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    42h ; 'B'
.plt:0000000000001DCB                 jmp     sub_1990
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001DD0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001DD0                                         ; xstrtoul+55↓p
.plt:0000000000001DD0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001DD0 ___ctype_b_loc  endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    43h ; 'C'
.plt:0000000000001DDB                 jmp     sub_1990
.plt:0000000000001DDB ; } // starts at 1990
.plt:0000000000001DDB _plt            ends
.plt:0000000000001DDB
.plt.got:0000000000001DE0 ; ===========================================================================
.plt.got:0000000000001DE0
.plt.got:0000000000001DE0 ; Segment type: Pure code
.plt.got:0000000000001DE0 ; Segment permissions: Read/Execute
.plt.got:0000000000001DE0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001DE0                 assume cs:_plt_got
.plt.got:0000000000001DE0                 ;org 1DE0h
.plt.got:0000000000001DE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001DE0
.plt.got:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DE0
.plt.got:0000000000001DE0 ; Attributes: thunk
.plt.got:0000000000001DE0
.plt.got:0000000000001DE0 ; void free(void *ptr)
.plt.got:0000000000001DE0 free            proc near               ; CODE XREF: chopt_free+8↓p
.plt.got:0000000000001DE0                                         ; chopt_free+12↓j ...
.plt.got:0000000000001DE0 ; __unwind {
.plt.got:0000000000001DE0                 jmp     cs:free_ptr
.plt.got:0000000000001DE0 free            endp
.plt.got:0000000000001DE0
.plt.got:0000000000001DE0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DE6                 align 8
.plt.got:0000000000001DE8
.plt.got:0000000000001DE8 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DE8
.plt.got:0000000000001DE8 ; Attributes: thunk
.plt.got:0000000000001DE8
.plt.got:0000000000001DE8 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001DE8 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001DE8                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001DE8 __cxa_finalize  endp
.plt.got:0000000000001DE8
.plt.got:0000000000001DE8 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DEE                 align 10h
.plt.got:0000000000001DEE ; } // starts at 1DE0
.plt.got:0000000000001DEE _plt_got        ends
.plt.got:0000000000001DEE
.text:0000000000001DF0 ; ===========================================================================
.text:0000000000001DF0
.text:0000000000001DF0 ; Segment type: Pure code
.text:0000000000001DF0 ; Segment permissions: Read/Execute
.text:0000000000001DF0 _text           segment para public 'CODE' use64
.text:0000000000001DF0                 assume cs:_text
.text:0000000000001DF0                 ;org 1DF0h
.text:0000000000001DF0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001DF0
.text:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DF0
.text:0000000000001DF0
.text:0000000000001DF0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001DF0                 public main
.text:0000000000001DF0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001DF0
.text:0000000000001DF0 var_128         = qword ptr -128h
.text:0000000000001DF0 var_120         = qword ptr -120h
.text:0000000000001DF0 var_118         = dword ptr -118h
.text:0000000000001DF0 var_114         = dword ptr -114h
.text:0000000000001DF0 var_110         = dword ptr -110h
.text:0000000000001DF0 var_10C         = dword ptr -10Ch
.text:0000000000001DF0 var_108         = dword ptr -108h
.text:0000000000001DF0 var_104         = byte ptr -104h
.text:0000000000001DF0 var_100         = qword ptr -100h
.text:0000000000001DF0 var_F8          = byte ptr -0F8h
.text:0000000000001DF0 var_F7          = byte ptr -0F7h
.text:0000000000001DF0 var_F0          = qword ptr -0F0h
.text:0000000000001DF0 var_E8          = qword ptr -0E8h
.text:0000000000001DF0 stat_buf        = stat ptr -0D8h
.text:0000000000001DF0 var_40          = qword ptr -40h
.text:0000000000001DF0
.text:0000000000001DF0 ; __unwind {
.text:0000000000001DF0                 push    r15
.text:0000000000001DF2                 push    r14
.text:0000000000001DF4                 xor     r14d, r14d
.text:0000000000001DF7                 push    r13
.text:0000000000001DF9                 push    r12
.text:0000000000001DFB                 mov     r13d, 0FFFFFFFFh
.text:0000000000001E01                 push    rbp
.text:0000000000001E02                 push    rbx
.text:0000000000001E03                 movsxd  rbp, edi
.text:0000000000001E06                 mov     rbx, rsi
.text:0000000000001E09                 mov     r12d, 10h
.text:0000000000001E0F                 sub     rsp, 0F8h
.text:0000000000001E16                 mov     rdi, [rsi]
.text:0000000000001E19                 mov     rax, fs:28h
.text:0000000000001E22                 mov     [rsp+128h+var_40], rax
.text:0000000000001E2A                 xor     eax, eax
.text:0000000000001E2C                 mov     [rsp+128h+var_118], 0FFFFFFFFh
.text:0000000000001E34                 mov     [rsp+128h+var_114], 0FFFFFFFFh
.text:0000000000001E3C                 lea     r15, [rsp+128h+var_108]
.text:0000000000001E41                 mov     [rsp+128h+var_110], 0FFFFFFFFh
.text:0000000000001E49                 mov     [rsp+128h+var_10C], 0FFFFFFFFh
.text:0000000000001E51                 call    set_program_name
.text:0000000000001E56                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001E5D                 mov     edi, 6          ; category
.text:0000000000001E62                 call    _setlocale
.text:0000000000001E67                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001E6E                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E75                 call    _bindtextdomain
.text:0000000000001E7A                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E81                 call    _textdomain
.text:0000000000001E86                 lea     rdi, close_stdout
.text:0000000000001E8D                 call    atexit
.text:0000000000001E92                 mov     rdi, r15
.text:0000000000001E95                 call    chopt_init
.text:0000000000001E9A                 lea     rax, [rsp+128h+var_10C]
.text:0000000000001E9F                 mov     [rsp+128h+var_128], rax
.text:0000000000001EA3                 lea     rax, [rsp+128h+var_110]
.text:0000000000001EA8                 mov     [rsp+128h+var_120], rax
.text:0000000000001EAD                 nop     dword ptr [rax]
.text:0000000000001EB0
.text:0000000000001EB0 loc_1EB0:                               ; CODE XREF: main+123↓j
.text:0000000000001EB0                                         ; main+150↓j ...
.text:0000000000001EB0                 lea     rcx, long_options ; longopts
.text:0000000000001EB7                 lea     rdx, shortopts  ; "HLPRcfhv"
.text:0000000000001EBE                 xor     r8d, r8d        ; longind
.text:0000000000001EC1                 mov     rsi, rbx        ; argv
.text:0000000000001EC4                 mov     edi, ebp        ; argc
.text:0000000000001EC6                 call    _getopt_long
.text:0000000000001ECB                 cmp     eax, 0FFFFFFFFh
.text:0000000000001ECE                 jz      loc_20BB
.text:0000000000001ED4                 cmp     eax, 66h ; 'f'
.text:0000000000001ED7                 jz      loc_2090
.text:0000000000001EDD                 jle     short loc_1F18
.text:0000000000001EDF                 cmp     eax, 81h
.text:0000000000001EE4                 jz      loc_2008
.text:0000000000001EEA                 jg      short loc_1F48
.text:0000000000001EEC                 cmp     eax, 76h ; 'v'
.text:0000000000001EEF                 jz      loc_2070
.text:0000000000001EF5                 cmp     eax, 80h
.text:0000000000001EFA                 jz      loc_2060
.text:0000000000001F00                 cmp     eax, 68h ; 'h'
.text:0000000000001F03                 jz      short loc_1F10
.text:0000000000001F05
.text:0000000000001F05 loc_1F05:                               ; CODE XREF: main+148↓j
.text:0000000000001F05                                         ; main+16E↓j ...
.text:0000000000001F05                 mov     edi, 1          ; status
.text:0000000000001F0A                 call    usage
.text:0000000000001F0A ; ---------------------------------------------------------------------------
.text:0000000000001F0F                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: main+113↑j
.text:0000000000001F10                 xor     r13d, r13d
.text:0000000000001F13                 jmp     short loc_1EB0
.text:0000000000001F13 ; ---------------------------------------------------------------------------
.text:0000000000001F15                 align 8
.text:0000000000001F18
.text:0000000000001F18 loc_1F18:                               ; CODE XREF: main+ED↑j
.text:0000000000001F18                 cmp     eax, 4Ch ; 'L'
.text:0000000000001F1B                 jz      loc_2080
.text:0000000000001F21                 jle     short loc_1F78
.text:0000000000001F23                 cmp     eax, 52h ; 'R'
.text:0000000000001F26                 jz      loc_1FE8
.text:0000000000001F2C                 cmp     eax, 63h ; 'c'
.text:0000000000001F2F                 jz      loc_1FF8
.text:0000000000001F35                 cmp     eax, 50h ; 'P'
.text:0000000000001F38                 jnz     short loc_1F05
.text:0000000000001F3A                 mov     r12d, 10h
.text:0000000000001F40                 jmp     loc_1EB0
.text:0000000000001F40 ; ---------------------------------------------------------------------------
.text:0000000000001F45                 align 8
.text:0000000000001F48
.text:0000000000001F48 loc_1F48:                               ; CODE XREF: main+FA↑j
.text:0000000000001F48                 cmp     eax, 83h
.text:0000000000001F4D                 jz      loc_20B0
.text:0000000000001F53                 jl      loc_20A0
.text:0000000000001F59                 cmp     eax, 84h
.text:0000000000001F5E                 jnz     short loc_1F05
.text:0000000000001F60                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F67                 mov     cs:reference_file, rax
.text:0000000000001F6E                 jmp     loc_1EB0
.text:0000000000001F6E ; ---------------------------------------------------------------------------
.text:0000000000001F73                 align 8
.text:0000000000001F78
.text:0000000000001F78 loc_1F78:                               ; CODE XREF: main+131↑j
.text:0000000000001F78                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F7D                 jz      loc_2286
.text:0000000000001F83                 cmp     eax, 48h ; 'H'
.text:0000000000001F86                 jz      short loc_1FD8
.text:0000000000001F88                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001F8D                 jnz     loc_1F05
.text:0000000000001F93                 sub     rsp, 8
.text:0000000000001F97                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F9E                 mov     rcx, cs:Version
.text:0000000000001FA5                 push    0
.text:0000000000001FA7                 lea     r9, aJimMeyering ; "Jim Meyering"
.text:0000000000001FAE                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001FB5                 lea     rdx, unk_AAE0
.text:0000000000001FBC                 lea     rsi, aChown     ; "chown"
.text:0000000000001FC3                 xor     eax, eax
.text:0000000000001FC5                 call    version_etc
.text:0000000000001FCA                 xor     edi, edi        ; status
.text:0000000000001FCC                 call    _exit
.text:0000000000001FCC ; ---------------------------------------------------------------------------
.text:0000000000001FD1                 align 8
.text:0000000000001FD8
.text:0000000000001FD8 loc_1FD8:                               ; CODE XREF: main+196↑j
.text:0000000000001FD8                 mov     r12d, 11h
.text:0000000000001FDE                 jmp     loc_1EB0
.text:0000000000001FDE ; ---------------------------------------------------------------------------
.text:0000000000001FE3                 align 8
.text:0000000000001FE8
.text:0000000000001FE8 loc_1FE8:                               ; CODE XREF: main+136↑j
.text:0000000000001FE8                 mov     [rsp+128h+var_104], 1
.text:0000000000001FED                 jmp     loc_1EB0
.text:0000000000001FED ; ---------------------------------------------------------------------------
.text:0000000000001FF2                 align 8
.text:0000000000001FF8
.text:0000000000001FF8 loc_1FF8:                               ; CODE XREF: main+13F↑j
.text:0000000000001FF8                 mov     [rsp+128h+var_108], 1
.text:0000000000002000                 jmp     loc_1EB0
.text:0000000000002000 ; ---------------------------------------------------------------------------
.text:0000000000002005                 align 8
.text:0000000000002008
.text:0000000000002008 loc_2008:                               ; CODE XREF: main+F4↑j
.text:0000000000002008                 mov     rdx, [rsp+128h+var_128]
.text:000000000000200C                 mov     rsi, [rsp+128h+var_120]
.text:0000000000002011                 xor     r8d, r8d
.text:0000000000002014                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; s
.text:000000000000201B                 xor     ecx, ecx
.text:000000000000201D                 call    parse_user_spec
.text:0000000000002022                 test    rax, rax
.text:0000000000002025                 jz      loc_1EB0
.text:000000000000202B                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002032                 mov     [rsp+128h+var_128], rax
.text:0000000000002036                 call    quote
.text:000000000000203B                 mov     rcx, [rsp+128h+var_128]
.text:000000000000203F                 lea     rdx, format     ; "%s: %s"
.text:0000000000002046                 mov     r8, rax
.text:0000000000002049                 xor     esi, esi        ; errnum
.text:000000000000204B                 mov     edi, 1          ; status
.text:0000000000002050                 xor     eax, eax
.text:0000000000002052                 call    _error
.text:0000000000002057                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: main+10A↑j
.text:0000000000002060                 mov     r13d, 1
.text:0000000000002066                 jmp     loc_1EB0
.text:0000000000002066 ; ---------------------------------------------------------------------------
.text:000000000000206B                 align 10h
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: main+FF↑j
.text:0000000000002070                 mov     [rsp+128h+var_108], 0
.text:0000000000002078                 jmp     loc_1EB0
.text:0000000000002078 ; ---------------------------------------------------------------------------
.text:000000000000207D                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: main+12B↑j
.text:0000000000002080                 mov     r12d, 2
.text:0000000000002086                 jmp     loc_1EB0
.text:0000000000002086 ; ---------------------------------------------------------------------------
.text:000000000000208B                 align 10h
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: main+E7↑j
.text:0000000000002090                 mov     [rsp+128h+var_F7], 1
.text:0000000000002095                 jmp     loc_1EB0
.text:0000000000002095 ; ---------------------------------------------------------------------------
.text:000000000000209A                 align 20h
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: main+163↑j
.text:00000000000020A0                 xor     r14d, r14d
.text:00000000000020A3                 jmp     loc_1EB0
.text:00000000000020A3 ; ---------------------------------------------------------------------------
.text:00000000000020A8                 align 10h
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: main+15D↑j
.text:00000000000020B0                 mov     r14d, 1
.text:00000000000020B6                 jmp     loc_1EB0
.text:00000000000020BB ; ---------------------------------------------------------------------------
.text:00000000000020BB
.text:00000000000020BB loc_20BB:                               ; CODE XREF: main+DE↑j
.text:00000000000020BB                 cmp     [rsp+128h+var_104], 0
.text:00000000000020C0                 jnz     loc_21AB
.text:00000000000020C6                 mov     r12d, 10h
.text:00000000000020CC
.text:00000000000020CC loc_20CC:                               ; CODE XREF: main+3BF↓j
.text:00000000000020CC                                         ; main+3D2↓j
.text:00000000000020CC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000020D3                 test    r13d, r13d
.text:00000000000020D6                 mov     r13, cs:reference_file
.text:00000000000020DD                 mov     edx, ebp
.text:00000000000020DF                 setnz   [rsp+128h+var_F8]
.text:00000000000020E4                 sub     edx, eax
.text:00000000000020E6                 test    r13, r13
.text:00000000000020E9                 jz      loc_21C7
.text:00000000000020EF                 test    edx, edx
.text:00000000000020F1                 jle     loc_2320
.text:00000000000020F7                 lea     rdx, [rsp+128h+stat_buf] ; stat_buf
.text:00000000000020FC                 mov     rsi, r13        ; filename
.text:00000000000020FF                 mov     edi, 1          ; ver
.text:0000000000002104                 call    ___xstat
.text:0000000000002109                 test    eax, eax
.text:000000000000210B                 jnz     loc_22E1
.text:0000000000002111                 mov     edi, [rsp+128h+stat_buf.st_uid]
.text:0000000000002115                 mov     eax, [rsp+128h+stat_buf.st_gid]
.text:0000000000002119                 mov     [rsp+128h+var_118], edi
.text:000000000000211D                 mov     [rsp+128h+var_114], eax
.text:0000000000002121                 call    uid_to_name
.text:0000000000002126                 mov     edi, [rsp+128h+stat_buf.st_gid]
.text:000000000000212A                 mov     [rsp+128h+var_F0], rax
.text:000000000000212F                 call    gid_to_name
.text:0000000000002134                 mov     [rsp+128h+var_E8], rax
.text:0000000000002139
.text:0000000000002139 loc_2139:                               ; CODE XREF: main+416↓j
.text:0000000000002139                 cmp     [rsp+128h+var_104], 0
.text:000000000000213E                 jz      short loc_2149
.text:0000000000002140                 test    r14b, r14b
.text:0000000000002143                 jnz     loc_220B
.text:0000000000002149
.text:0000000000002149 loc_2149:                               ; CODE XREF: main+34E↑j
.text:0000000000002149                                         ; main+42F↓j
.text:0000000000002149                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002150                 sub     rsp, 8
.text:0000000000002154                 mov     esi, r12d
.text:0000000000002157                 push    r15
.text:0000000000002159                 mov     r9d, [rsp+138h+var_10C]
.text:000000000000215E                 or      esi, 400h
.text:0000000000002164                 mov     r8d, [rsp+138h+var_110]
.text:0000000000002169                 mov     ecx, [rsp+138h+var_114]
.text:000000000000216D                 mov     edx, [rsp+138h+var_118]
.text:0000000000002171                 lea     rdi, [rbx+rax*8]
.text:0000000000002175                 call    chown_files
.text:000000000000217A                 pop     rdx
.text:000000000000217B                 pop     rcx
.text:000000000000217C                 xor     eax, 1
.text:000000000000217F                 movzx   eax, al
.text:0000000000002182                 mov     rbx, [rsp+128h+var_40]
.text:000000000000218A                 xor     rbx, fs:28h
.text:0000000000002193                 jnz     loc_22DC
.text:0000000000002199                 add     rsp, 0F8h
.text:00000000000021A0                 pop     rbx
.text:00000000000021A1                 pop     rbp
.text:00000000000021A2                 pop     r12
.text:00000000000021A4                 pop     r13
.text:00000000000021A6                 pop     r14
.text:00000000000021A8                 pop     r15
.text:00000000000021AA                 retn
.text:00000000000021AB ; ---------------------------------------------------------------------------
.text:00000000000021AB
.text:00000000000021AB loc_21AB:                               ; CODE XREF: main+2D0↑j
.text:00000000000021AB                 cmp     r12d, 10h
.text:00000000000021AF                 jnz     loc_20CC
.text:00000000000021B5                 sub     r13d, 1
.text:00000000000021B9                 jz      loc_22B8
.text:00000000000021BF                 xor     r13d, r13d
.text:00000000000021C2                 jmp     loc_20CC
.text:00000000000021C7 ; ---------------------------------------------------------------------------
.text:00000000000021C7
.text:00000000000021C7 loc_21C7:                               ; CODE XREF: main+2F9↑j
.text:00000000000021C7                 sub     edx, 1
.text:00000000000021CA                 jle     loc_2320
.text:00000000000021D0                 mov     rdi, [rbx+rax*8] ; s
.text:00000000000021D4                 lea     rcx, [r15+18h]
.text:00000000000021D8                 lea     rdx, [rsp+128h+var_114]
.text:00000000000021DD                 lea     rsi, [rsp+128h+var_118]
.text:00000000000021E2                 lea     r8, [r15+20h]
.text:00000000000021E6                 call    parse_user_spec
.text:00000000000021EB                 test    rax, rax
.text:00000000000021EE                 mov     rbp, rax
.text:00000000000021F1                 jnz     loc_228D
.text:00000000000021F7                 cmp     [rsp+128h+var_F0], 0
.text:00000000000021FD                 jz      short loc_2268
.text:00000000000021FF
.text:00000000000021FF loc_21FF:                               ; CODE XREF: main+47E↓j
.text:00000000000021FF                                         ; main+491↓j
.text:00000000000021FF                 add     cs:optind@@GLIBC_2_2_5, 1
.text:0000000000002206                 jmp     loc_2139
.text:000000000000220B ; ---------------------------------------------------------------------------
.text:000000000000220B
.text:000000000000220B loc_220B:                               ; CODE XREF: main+353↑j
.text:000000000000220B                 lea     rdi, dev_ino_buf_7022
.text:0000000000002212                 call    get_root_dev_ino
.text:0000000000002217                 test    rax, rax
.text:000000000000221A                 mov     [rsp+128h+var_100], rax
.text:000000000000221F                 jnz     loc_2149
.text:0000000000002225                 lea     rsi, aLibs+6    ; "/"
.text:000000000000222C                 mov     edi, 4
.text:0000000000002231                 call    quotearg_style
.text:0000000000002236                 lea     rsi, msgid      ; "failed to get attributes of %s"
.text:000000000000223D                 mov     edx, 5          ; category
.text:0000000000002242                 xor     edi, edi        ; domainname
.text:0000000000002244                 mov     rbp, rax
.text:0000000000002247                 call    _dcgettext
.text:000000000000224C                 mov     rbx, rax
.text:000000000000224F                 call    ___errno_location
.text:0000000000002254                 mov     esi, [rax]      ; errnum
.text:0000000000002256                 mov     rcx, rbp
.text:0000000000002259                 mov     rdx, rbx        ; format
.text:000000000000225C                 mov     edi, 1          ; status
.text:0000000000002261                 xor     eax, eax
.text:0000000000002263                 call    _error
.text:0000000000002268
.text:0000000000002268 loc_2268:                               ; CODE XREF: main+40D↑j
.text:0000000000002268                 cmp     [rsp+128h+var_E8], 0
.text:000000000000226E                 jz      short loc_21FF
.text:0000000000002270                 lea     rdi, aWrittenBySSAnd+1Bh ; src
.text:0000000000002277                 call    xstrdup
.text:000000000000227C                 mov     [rsp+128h+var_F0], rax
.text:0000000000002281                 jmp     loc_21FF
.text:0000000000002286 ; ---------------------------------------------------------------------------
.text:0000000000002286
.text:0000000000002286 loc_2286:                               ; CODE XREF: main+18D↑j
.text:0000000000002286                 xor     edi, edi        ; status
.text:0000000000002288                 call    usage
.text:000000000000228D ; ---------------------------------------------------------------------------
.text:000000000000228D
.text:000000000000228D loc_228D:                               ; CODE XREF: main+401↑j
.text:000000000000228D                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002294                 mov     rdi, [rbx+rax*8]
.text:0000000000002298                 call    quote
.text:000000000000229D                 lea     rdx, format     ; "%s: %s"
.text:00000000000022A4                 mov     r8, rax
.text:00000000000022A7                 mov     rcx, rbp
.text:00000000000022AA                 xor     esi, esi        ; errnum
.text:00000000000022AC                 mov     edi, 1          ; status
.text:00000000000022B1                 xor     eax, eax
.text:00000000000022B3                 call    _error
.text:00000000000022B8
.text:00000000000022B8 loc_22B8:                               ; CODE XREF: main+3C9↑j
.text:00000000000022B8                 lea     rsi, aRDereferenceRe ; "-R --dereference requires either -H or "...
.text:00000000000022BF                 mov     edx, 5          ; category
.text:00000000000022C4                 xor     edi, edi        ; domainname
.text:00000000000022C6                 call    _dcgettext
.text:00000000000022CB                 xor     esi, esi        ; errnum
.text:00000000000022CD                 mov     rdx, rax        ; format
.text:00000000000022D0                 mov     edi, 1          ; status
.text:00000000000022D5                 xor     eax, eax
.text:00000000000022D7                 call    _error
.text:00000000000022DC
.text:00000000000022DC loc_22DC:                               ; CODE XREF: main+3A3↑j
.text:00000000000022DC                 call    ___stack_chk_fail
.text:00000000000022E1 ; ---------------------------------------------------------------------------
.text:00000000000022E1
.text:00000000000022E1 loc_22E1:                               ; CODE XREF: main+31B↑j
.text:00000000000022E1                 mov     rsi, r13
.text:00000000000022E4                 mov     edi, 4
.text:00000000000022E9                 call    quotearg_style
.text:00000000000022EE                 lea     rsi, msgid      ; "failed to get attributes of %s"
.text:00000000000022F5                 mov     edx, 5          ; category
.text:00000000000022FA                 xor     edi, edi        ; domainname
.text:00000000000022FC                 mov     rbp, rax
.text:00000000000022FF                 call    _dcgettext
.text:0000000000002304                 mov     rbx, rax
.text:0000000000002307                 call    ___errno_location
.text:000000000000230C                 mov     esi, [rax]      ; errnum
.text:000000000000230E                 mov     rcx, rbp
.text:0000000000002311                 mov     rdx, rbx        ; format
.text:0000000000002314                 mov     edi, 1          ; status
.text:0000000000002319                 xor     eax, eax
.text:000000000000231B                 call    _error
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: main+301↑j
.text:0000000000002320                                         ; main+3DA↑j
.text:0000000000002320                 cmp     eax, ebp
.text:0000000000002322                 jl      short loc_234A
.text:0000000000002324                 lea     rsi, aMissingOperand ; "missing operand"
.text:000000000000232B                 xor     edi, edi        ; domainname
.text:000000000000232D                 mov     edx, 5          ; category
.text:0000000000002332                 call    _dcgettext
.text:0000000000002337                 xor     esi, esi        ; errnum
.text:0000000000002339                 mov     rdx, rax        ; format
.text:000000000000233C                 xor     edi, edi        ; status
.text:000000000000233E                 xor     eax, eax
.text:0000000000002340                 call    _error
.text:0000000000002345                 jmp     loc_1F05
.text:000000000000234A ; ---------------------------------------------------------------------------
.text:000000000000234A
.text:000000000000234A loc_234A:                               ; CODE XREF: main+532↑j
.text:000000000000234A                 mov     rdi, [rbx+rbp*8-8]
.text:000000000000234F                 call    quote
.text:0000000000002354                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:000000000000235B                 mov     rbx, rax
.text:000000000000235E                 xor     edi, edi        ; domainname
.text:0000000000002360                 mov     edx, 5          ; category
.text:0000000000002365                 call    _dcgettext
.text:000000000000236A                 mov     rcx, rbx
.text:000000000000236D                 mov     rdx, rax        ; format
.text:0000000000002370                 xor     esi, esi        ; errnum
.text:0000000000002372                 xor     edi, edi        ; status
.text:0000000000002374                 xor     eax, eax
.text:0000000000002376                 call    _error
.text:000000000000237B                 jmp     loc_1F05
.text:000000000000237B ; } // starts at 1DF0
.text:000000000000237B main            endp
.text:000000000000237B
.text:0000000000002380
.text:0000000000002380 ; =============== S U B R O U T I N E =======================================
.text:0000000000002380
.text:0000000000002380 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002380
.text:0000000000002380 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002380                 public start
.text:0000000000002380 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002380 ; __unwind {
.text:0000000000002380                 xor     ebp, ebp
.text:0000000000002382                 mov     r9, rdx         ; rtld_fini
.text:0000000000002385                 pop     rsi             ; argc
.text:0000000000002386                 mov     rdx, rsp        ; ubp_av
.text:0000000000002389                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000238D                 push    rax
.text:000000000000238E                 push    rsp             ; stack_end
.text:000000000000238F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002396                 lea     rcx, __libc_csu_init ; init
.text:000000000000239D                 lea     rdi, main       ; main
.text:00000000000023A4                 call    cs:__libc_start_main_ptr
.text:00000000000023AA                 hlt
.text:00000000000023AA ; } // starts at 2380
.text:00000000000023AA start           endp
.text:00000000000023AA
.text:00000000000023AA ; ---------------------------------------------------------------------------
.text:00000000000023AB                 align 10h
.text:00000000000023B0
.text:00000000000023B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023B0
.text:00000000000023B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000023B0
.text:00000000000023B0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2463↓p
.text:00000000000023B0                 lea     rdi, __bss_start
.text:00000000000023B7                 push    rbp
.text:00000000000023B8                 lea     rax, __bss_start
.text:00000000000023BF                 cmp     rax, rdi
.text:00000000000023C2                 mov     rbp, rsp
.text:00000000000023C5                 jz      short loc_23E0
.text:00000000000023C7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000023CE                 test    rax, rax
.text:00000000000023D1                 jz      short loc_23E0
.text:00000000000023D3                 pop     rbp
.text:00000000000023D4                 jmp     rax
.text:00000000000023D4 ; ---------------------------------------------------------------------------
.text:00000000000023D6                 align 20h
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000023E0                                         ; deregister_tm_clones+21↑j
.text:00000000000023E0                 pop     rbp
.text:00000000000023E1                 retn
.text:00000000000023E1 deregister_tm_clones endp
.text:00000000000023E1
.text:00000000000023E1 ; ---------------------------------------------------------------------------
.text:00000000000023E2                 align 10h
.text:00000000000023F0
.text:00000000000023F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023F0
.text:00000000000023F0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000023F0
.text:00000000000023F0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000023F0                 lea     rdi, __bss_start
.text:00000000000023F7                 lea     rsi, __bss_start
.text:00000000000023FE                 push    rbp
.text:00000000000023FF                 sub     rsi, rdi
.text:0000000000002402                 mov     rbp, rsp
.text:0000000000002405                 sar     rsi, 3
.text:0000000000002409                 mov     rax, rsi
.text:000000000000240C                 shr     rax, 3Fh
.text:0000000000002410                 add     rsi, rax
.text:0000000000002413                 sar     rsi, 1
.text:0000000000002416                 jz      short loc_2430
.text:0000000000002418                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000241F                 test    rax, rax
.text:0000000000002422                 jz      short loc_2430
.text:0000000000002424                 pop     rbp
.text:0000000000002425                 jmp     rax
.text:0000000000002425 ; ---------------------------------------------------------------------------
.text:0000000000002427                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002430                                         ; register_tm_clones+32↑j
.text:0000000000002430                 pop     rbp
.text:0000000000002431                 retn
.text:0000000000002431 register_tm_clones endp
.text:0000000000002431
.text:0000000000002431 ; ---------------------------------------------------------------------------
.text:0000000000002432                 align 20h
.text:0000000000002440
.text:0000000000002440 ; =============== S U B R O U T I N E =======================================
.text:0000000000002440
.text:0000000000002440 ; Attributes: info_from_lumina
.text:0000000000002440
.text:0000000000002440 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002440                 cmp     cs:completed_7697, 0
.text:0000000000002447                 jnz     short locret_2478
.text:0000000000002449                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002451                 push    rbp
.text:0000000000002452                 mov     rbp, rsp
.text:0000000000002455                 jz      short loc_2463
.text:0000000000002457                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000245E                 call    __cxa_finalize
.text:0000000000002463
.text:0000000000002463 loc_2463:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002463                 call    deregister_tm_clones
.text:0000000000002468                 mov     cs:completed_7697, 1
.text:000000000000246F                 pop     rbp
.text:0000000000002470                 retn
.text:0000000000002470 ; ---------------------------------------------------------------------------
.text:0000000000002471                 align 8
.text:0000000000002478
.text:0000000000002478 locret_2478:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002478                 rep retn
.text:0000000000002478 __do_global_dtors_aux endp
.text:0000000000002478
.text:0000000000002478 ; ---------------------------------------------------------------------------
.text:000000000000247A                 align 20h
.text:0000000000002480
.text:0000000000002480 ; =============== S U B R O U T I N E =======================================
.text:0000000000002480
.text:0000000000002480 ; Attributes: bp-based frame
.text:0000000000002480
.text:0000000000002480 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002480                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002480                 push    rbp
.text:0000000000002481                 mov     rbp, rsp
.text:0000000000002484                 pop     rbp
.text:0000000000002485                 jmp     register_tm_clones
.text:0000000000002485 frame_dummy     endp
.text:0000000000002485
.text:0000000000002485 ; ---------------------------------------------------------------------------
.text:000000000000248A                 align 10h
.text:0000000000002490
.text:0000000000002490 ; =============== S U B R O U T I N E =======================================
.text:0000000000002490
.text:0000000000002490 ; Attributes: noreturn
.text:0000000000002490
.text:0000000000002490 ; void __fastcall __noreturn usage(int status)
.text:0000000000002490                 public usage
.text:0000000000002490 usage           proc near               ; CODE XREF: main+11A↑p
.text:0000000000002490                                         ; main+498↑p
.text:0000000000002490
.text:0000000000002490 var_A8          = qword ptr -0A8h
.text:0000000000002490 var_A0          = qword ptr -0A0h
.text:0000000000002490 var_98          = qword ptr -98h
.text:0000000000002490 var_90          = qword ptr -90h
.text:0000000000002490 var_88          = qword ptr -88h
.text:0000000000002490 var_80          = qword ptr -80h
.text:0000000000002490 var_78          = qword ptr -78h
.text:0000000000002490 var_70          = qword ptr -70h
.text:0000000000002490 var_68          = qword ptr -68h
.text:0000000000002490 var_60          = qword ptr -60h
.text:0000000000002490 var_58          = qword ptr -58h
.text:0000000000002490 var_50          = qword ptr -50h
.text:0000000000002490 var_48          = qword ptr -48h
.text:0000000000002490 var_40          = qword ptr -40h
.text:0000000000002490 var_30          = qword ptr -30h
.text:0000000000002490
.text:0000000000002490 ; __unwind {
.text:0000000000002490                 push    r13
.text:0000000000002492                 push    r12
.text:0000000000002494                 mov     edx, 5          ; category
.text:0000000000002499                 push    rbp
.text:000000000000249A                 push    rbx
.text:000000000000249B                 mov     ebp, edi
.text:000000000000249D                 sub     rsp, 88h
.text:00000000000024A4                 mov     rbx, cs:program_name
.text:00000000000024AB                 mov     rax, fs:28h
.text:00000000000024B4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000024B9                 xor     eax, eax
.text:00000000000024BB                 test    edi, edi
.text:00000000000024BD                 jz      short loc_24ED
.text:00000000000024BF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000024C6                 xor     edi, edi        ; domainname
.text:00000000000024C8                 call    _dcgettext
.text:00000000000024CD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000024D4                 mov     rdx, rax
.text:00000000000024D7                 mov     rcx, rbx
.text:00000000000024DA                 mov     esi, 1
.text:00000000000024DF                 xor     eax, eax
.text:00000000000024E1                 call    ___fprintf_chk
.text:00000000000024E6
.text:00000000000024E6 loc_24E6:                               ; CODE XREF: usage+3FE↓j
.text:00000000000024E6                 mov     edi, ebp        ; status
.text:00000000000024E8                 call    _exit
.text:00000000000024ED ; ---------------------------------------------------------------------------
.text:00000000000024ED
.text:00000000000024ED loc_24ED:                               ; CODE XREF: usage+2D↑j
.text:00000000000024ED                 lea     rsi, aUsageSOptionOw ; "Usage: %s [OPTION]... [OWNER][:[GROUP]]"...
.text:00000000000024F4                 xor     edi, edi        ; domainname
.text:00000000000024F6                 call    _dcgettext
.text:00000000000024FB                 mov     rcx, rbx
.text:00000000000024FE                 mov     rdx, rbx
.text:0000000000002501                 mov     rsi, rax
.text:0000000000002504                 mov     edi, 1
.text:0000000000002509                 xor     eax, eax
.text:000000000000250B                 call    ___printf_chk
.text:0000000000002510                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002517                 lea     rsi, aChangeTheOwner ; "Change the owner and/or group of each F"...
.text:000000000000251E                 mov     edx, 5          ; category
.text:0000000000002523                 xor     edi, edi        ; domainname
.text:0000000000002525                 call    _dcgettext
.text:000000000000252A                 mov     rsi, rbx        ; stream
.text:000000000000252D                 mov     rdi, rax        ; s
.text:0000000000002530                 call    _fputs_unlocked
.text:0000000000002535                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000253C                 lea     rsi, aCChangesLikeVe ; "  -c, --changes          like verbose b"...
.text:0000000000002543                 mov     edx, 5          ; category
.text:0000000000002548                 xor     edi, edi        ; domainname
.text:000000000000254A                 call    _dcgettext
.text:000000000000254F                 mov     rsi, rbx        ; stream
.text:0000000000002552                 mov     rdi, rax        ; s
.text:0000000000002555                 call    _fputs_unlocked
.text:000000000000255A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002561                 lea     rsi, aDereferenceAff ; "      --dereference      affect the ref"...
.text:0000000000002568                 mov     edx, 5          ; category
.text:000000000000256D                 xor     edi, edi        ; domainname
.text:000000000000256F                 call    _dcgettext
.text:0000000000002574                 mov     rsi, rbx        ; stream
.text:0000000000002577                 mov     rdi, rax        ; s
.text:000000000000257A                 call    _fputs_unlocked
.text:000000000000257F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002586                 lea     rsi, aUsefulOnlyOnSy ; "                         (useful only o"...
.text:000000000000258D                 mov     edx, 5          ; category
.text:0000000000002592                 xor     edi, edi        ; domainname
.text:0000000000002594                 call    _dcgettext
.text:0000000000002599                 mov     rsi, rbx        ; stream
.text:000000000000259C                 mov     rdi, rax        ; s
.text:000000000000259F                 call    _fputs_unlocked
.text:00000000000025A4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000025AB                 lea     rsi, aFromCurrentOwn ; "      --from=CURRENT_OWNER:CURRENT_GROU"...
.text:00000000000025B2                 mov     edx, 5          ; category
.text:00000000000025B7                 xor     edi, edi        ; domainname
.text:00000000000025B9                 call    _dcgettext
.text:00000000000025BE                 mov     rsi, rbx        ; stream
.text:00000000000025C1                 mov     rdi, rax        ; s
.text:00000000000025C4                 call    _fputs_unlocked
.text:00000000000025C9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000025D0                 lea     rsi, aNoPreserveRoot ; "      --no-preserve-root  do not treat "...
.text:00000000000025D7                 mov     edx, 5          ; category
.text:00000000000025DC                 xor     edi, edi        ; domainname
.text:00000000000025DE                 call    _dcgettext
.text:00000000000025E3                 mov     rsi, rbx        ; stream
.text:00000000000025E6                 mov     rdi, rax        ; s
.text:00000000000025E9                 call    _fputs_unlocked
.text:00000000000025EE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000025F5                 lea     rsi, aReferenceRfile ; "      --reference=RFILE  use RFILE's ow"...
.text:00000000000025FC                 mov     edx, 5          ; category
.text:0000000000002601                 xor     edi, edi        ; domainname
.text:0000000000002603                 call    _dcgettext
.text:0000000000002608                 mov     rsi, rbx        ; stream
.text:000000000000260B                 mov     rdi, rax        ; s
.text:000000000000260E                 call    _fputs_unlocked
.text:0000000000002613                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000261A                 lea     rsi, aRRecursiveOper ; "  -R, --recursive        operate on fil"...
.text:0000000000002621                 mov     edx, 5          ; category
.text:0000000000002626                 xor     edi, edi        ; domainname
.text:0000000000002628                 call    _dcgettext
.text:000000000000262D                 mov     rsi, rbx        ; stream
.text:0000000000002630                 mov     rdi, rax        ; s
.text:0000000000002633                 call    _fputs_unlocked
.text:0000000000002638                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000263F                 lea     rsi, aTheFollowingOp ; "\nThe following options modify how a hi"...
.text:0000000000002646                 mov     edx, 5          ; category
.text:000000000000264B                 xor     edi, edi        ; domainname
.text:000000000000264D                 call    _dcgettext
.text:0000000000002652                 mov     rsi, rbx        ; stream
.text:0000000000002655                 mov     rdi, rax        ; s
.text:0000000000002658                 call    _fputs_unlocked
.text:000000000000265D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002664                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000266B                 mov     edx, 5          ; category
.text:0000000000002670                 xor     edi, edi        ; domainname
.text:0000000000002672                 call    _dcgettext
.text:0000000000002677                 mov     rsi, rbx        ; stream
.text:000000000000267A                 mov     rdi, rax        ; s
.text:000000000000267D                 call    _fputs_unlocked
.text:0000000000002682                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002689                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002690                 mov     edx, 5          ; category
.text:0000000000002695                 xor     edi, edi        ; domainname
.text:0000000000002697                 call    _dcgettext
.text:000000000000269C                 mov     rsi, rbx        ; stream
.text:000000000000269F                 mov     rdi, rax        ; s
.text:00000000000026A2                 call    _fputs_unlocked
.text:00000000000026A7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000026AE                 lea     rsi, aOwnerIsUnchang ; "\nOwner is unchanged if missing.  Group"...
.text:00000000000026B5                 mov     edx, 5          ; category
.text:00000000000026BA                 xor     edi, edi        ; domainname
.text:00000000000026BC                 call    _dcgettext
.text:00000000000026C1                 mov     rsi, rbx        ; stream
.text:00000000000026C4                 mov     rdi, rax        ; s
.text:00000000000026C7                 call    _fputs_unlocked
.text:00000000000026CC                 mov     rbx, cs:program_name
.text:00000000000026D3                 lea     rsi, aExamplesSRootU ; "\nExamples:\n  %s root /u        Change"...
.text:00000000000026DA                 mov     edx, 5          ; category
.text:00000000000026DF                 xor     edi, edi        ; domainname
.text:00000000000026E1                 call    _dcgettext
.text:00000000000026E6                 mov     rcx, rbx
.text:00000000000026E9                 mov     rdx, rbx
.text:00000000000026EC                 mov     r8, rbx
.text:00000000000026EF                 mov     rsi, rax
.text:00000000000026F2                 mov     edi, 1
.text:00000000000026F7                 xor     eax, eax
.text:00000000000026F9                 call    ___printf_chk
.text:00000000000026FE                 lea     rax, asc_AA6A   ; "["
.text:0000000000002705                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000270C                 lea     rbx, aChown     ; "chown"
.text:0000000000002713                 mov     [rsp+0A8h+var_48], 0
.text:000000000000271C                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002725                 mov     rdx, rsp
.text:0000000000002728                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000272C                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002733                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002738                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000273F                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002744                 lea     rax, domainname ; "coreutils"
.text:000000000000274B                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002750                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002757                 mov     [rsp+0A8h+var_98], rax
.text:000000000000275C                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002763                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002768                 mov     [rsp+0A8h+var_90], rax
.text:000000000000276D                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002774                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002779                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002780                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002785                 mov     [rsp+0A8h+var_70], rax
.text:000000000000278A                 mov     [rsp+0A8h+var_60], rax
.text:000000000000278F                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002794                 nop     dword ptr [rax+00h]
.text:0000000000002798
.text:0000000000002798 loc_2798:                               ; CODE XREF: usage+325↓j
.text:0000000000002798                 add     rdx, 10h
.text:000000000000279C                 mov     rdi, [rdx]
.text:000000000000279F                 test    rdi, rdi
.text:00000000000027A2                 jz      short loc_27B7
.text:00000000000027A4                 mov     ecx, 6
.text:00000000000027A9                 mov     rsi, rbx
.text:00000000000027AC                 repe cmpsb
.text:00000000000027AE                 setnbe  al
.text:00000000000027B1                 sbb     al, 0
.text:00000000000027B3                 test    al, al
.text:00000000000027B5                 jnz     short loc_2798
.text:00000000000027B7
.text:00000000000027B7 loc_27B7:                               ; CODE XREF: usage+312↑j
.text:00000000000027B7                 mov     r12, [rdx+8]
.text:00000000000027BB                 xor     edi, edi        ; domainname
.text:00000000000027BD                 mov     edx, 5          ; category
.text:00000000000027C2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000027C9                 test    r12, r12
.text:00000000000027CC                 jz      loc_2893
.text:00000000000027D2                 call    _dcgettext
.text:00000000000027D7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000027DE                 lea     rdx, unk_AAE0
.text:00000000000027E5                 mov     rsi, rax
.text:00000000000027E8                 mov     edi, 1
.text:00000000000027ED                 xor     eax, eax
.text:00000000000027EF                 call    ___printf_chk
.text:00000000000027F4                 xor     esi, esi        ; locale
.text:00000000000027F6                 mov     edi, 5          ; category
.text:00000000000027FB                 call    _setlocale
.text:0000000000002800                 test    rax, rax
.text:0000000000002803                 jz      short loc_2821
.text:0000000000002805                 lea     rsi, s2         ; "en_"
.text:000000000000280C                 mov     edx, 3          ; n
.text:0000000000002811                 mov     rdi, rax        ; s1
.text:0000000000002814                 call    _strncmp
.text:0000000000002819                 test    eax, eax
.text:000000000000281B                 jnz     loc_2928
.text:0000000000002821
.text:0000000000002821 loc_2821:                               ; CODE XREF: usage+373↑j
.text:0000000000002821                                         ; usage+4BD↓j
.text:0000000000002821                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002828                 xor     edi, edi        ; domainname
.text:000000000000282A                 mov     edx, 5          ; category
.text:000000000000282F                 call    _dcgettext
.text:0000000000002834                 lea     rcx, aChown     ; "chown"
.text:000000000000283B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002842                 mov     rsi, rax
.text:0000000000002845                 mov     edi, 1
.text:000000000000284A                 xor     eax, eax
.text:000000000000284C                 call    ___printf_chk
.text:0000000000002851                 cmp     r12, rbx
.text:0000000000002854                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000285B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002862                 cmovz   rbx, rcx
.text:0000000000002866
.text:0000000000002866 loc_2866:                               ; CODE XREF: usage+48C↓j
.text:0000000000002866                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000286D                 xor     edi, edi        ; domainname
.text:000000000000286F                 mov     edx, 5          ; category
.text:0000000000002874                 call    _dcgettext
.text:0000000000002879                 mov     rcx, rbx
.text:000000000000287C                 mov     rsi, rax
.text:000000000000287F                 mov     rdx, r12
.text:0000000000002882                 mov     edi, 1
.text:0000000000002887                 xor     eax, eax
.text:0000000000002889                 call    ___printf_chk
.text:000000000000288E                 jmp     loc_24E6
.text:0000000000002893 ; ---------------------------------------------------------------------------
.text:0000000000002893
.text:0000000000002893 loc_2893:                               ; CODE XREF: usage+33C↑j
.text:0000000000002893                 call    _dcgettext
.text:0000000000002898                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000289F                 lea     rdx, unk_AAE0
.text:00000000000028A6                 mov     rsi, rax
.text:00000000000028A9                 mov     edi, 1
.text:00000000000028AE                 xor     eax, eax
.text:00000000000028B0                 call    ___printf_chk
.text:00000000000028B5                 xor     esi, esi        ; locale
.text:00000000000028B7                 mov     edi, 5          ; category
.text:00000000000028BC                 call    _setlocale
.text:00000000000028C1                 test    rax, rax
.text:00000000000028C4                 jz      short loc_28DE
.text:00000000000028C6                 lea     rsi, s2         ; "en_"
.text:00000000000028CD                 mov     edx, 3          ; n
.text:00000000000028D2                 mov     rdi, rax        ; s1
.text:00000000000028D5                 call    _strncmp
.text:00000000000028DA                 test    eax, eax
.text:00000000000028DC                 jnz     short loc_2921
.text:00000000000028DE
.text:00000000000028DE loc_28DE:                               ; CODE XREF: usage+434↑j
.text:00000000000028DE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000028E5                 mov     edx, 5          ; category
.text:00000000000028EA                 xor     edi, edi        ; domainname
.text:00000000000028EC                 lea     r12, aChown     ; "chown"
.text:00000000000028F3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000028FA                 call    _dcgettext
.text:00000000000028FF                 lea     rcx, aChown     ; "chown"
.text:0000000000002906                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000290D                 mov     rsi, rax
.text:0000000000002910                 mov     edi, 1
.text:0000000000002915                 xor     eax, eax
.text:0000000000002917                 call    ___printf_chk
.text:000000000000291C                 jmp     loc_2866
.text:0000000000002921 ; ---------------------------------------------------------------------------
.text:0000000000002921
.text:0000000000002921 loc_2921:                               ; CODE XREF: usage+44C↑j
.text:0000000000002921                 lea     r12, aChown     ; "chown"
.text:0000000000002928
.text:0000000000002928 loc_2928:                               ; CODE XREF: usage+38B↑j
.text:0000000000002928                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000292F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002936                 xor     edi, edi        ; domainname
.text:0000000000002938                 mov     edx, 5          ; category
.text:000000000000293D                 call    _dcgettext
.text:0000000000002942                 mov     rsi, r13        ; stream
.text:0000000000002945                 mov     rdi, rax        ; s
.text:0000000000002948                 call    _fputs_unlocked
.text:000000000000294D                 jmp     loc_2821
.text:000000000000294D ; } // starts at 2490
.text:000000000000294D usage           endp
.text:000000000000294D
.text:000000000000294D ; ---------------------------------------------------------------------------
.text:0000000000002952                 align 20h
.text:0000000000002960
.text:0000000000002960 ; =============== S U B R O U T I N E =======================================
.text:0000000000002960
.text:0000000000002960
.text:0000000000002960 ; __int64 __fastcall user_group_str(char *src, void *)
.text:0000000000002960 user_group_str  proc near               ; CODE XREF: change_file_owner+1C3↓p
.text:0000000000002960                                         ; change_file_owner+1E7↓p ...
.text:0000000000002960 ; __unwind {
.text:0000000000002960                 test    rdi, rdi
.text:0000000000002963                 push    r12
.text:0000000000002965                 push    rbp
.text:0000000000002966                 push    rbx
.text:0000000000002967                 jz      short loc_29B8
.text:0000000000002969                 test    rsi, rsi
.text:000000000000296C                 jz      short loc_29C0
.text:000000000000296E                 mov     rbx, rsi
.text:0000000000002971                 mov     rbp, rdi
.text:0000000000002974                 call    _strlen
.text:0000000000002979                 mov     rdi, rbx        ; s
.text:000000000000297C                 mov     r12, rax
.text:000000000000297F                 call    _strlen
.text:0000000000002984                 lea     rdi, [r12+rax+2]
.text:0000000000002989                 call    xmalloc
.text:000000000000298E                 mov     rsi, rbp        ; src
.text:0000000000002991                 mov     rdi, rax        ; dest
.text:0000000000002994                 mov     r12, rax
.text:0000000000002997                 call    _stpcpy
.text:000000000000299C                 lea     rdi, [rax+1]    ; dest
.text:00000000000029A0                 mov     byte ptr [rax], 3Ah ; ':'
.text:00000000000029A3                 mov     rsi, rbx        ; src
.text:00000000000029A6                 call    _strcpy
.text:00000000000029AB
.text:00000000000029AB loc_29AB:                               ; CODE XREF: user_group_str+73↓j
.text:00000000000029AB                 mov     rax, r12
.text:00000000000029AE                 pop     rbx
.text:00000000000029AF                 pop     rbp
.text:00000000000029B0                 pop     r12
.text:00000000000029B2                 retn
.text:00000000000029B2 ; ---------------------------------------------------------------------------
.text:00000000000029B3                 align 8
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: user_group_str+7↑j
.text:00000000000029B8                 test    rsi, rsi
.text:00000000000029BB                 jz      short loc_29D0
.text:00000000000029BD                 mov     rdi, rsi        ; src
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: user_group_str+C↑j
.text:00000000000029C0                 pop     rbx
.text:00000000000029C1                 pop     rbp
.text:00000000000029C2                 pop     r12
.text:00000000000029C4                 jmp     xstrdup
.text:00000000000029C4 ; ---------------------------------------------------------------------------
.text:00000000000029C9                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: user_group_str+5B↑j
.text:00000000000029D0                 xor     r12d, r12d
.text:00000000000029D3                 jmp     short loc_29AB
.text:00000000000029D3 ; } // starts at 2960
.text:00000000000029D3 user_group_str  endp
.text:00000000000029D3
.text:00000000000029D3 ; ---------------------------------------------------------------------------
.text:00000000000029D5                 align 20h
.text:00000000000029E0
.text:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029E0
.text:00000000000029E0
.text:00000000000029E0                 public chopt_init
.text:00000000000029E0 chopt_init      proc near               ; CODE XREF: main+A5↑p
.text:00000000000029E0 ; __unwind {
.text:00000000000029E0                 mov     dword ptr [rdi], 2
.text:00000000000029E6                 mov     qword ptr [rdi+8], 0
.text:00000000000029EE                 mov     byte ptr [rdi+10h], 1
.text:00000000000029F2                 mov     byte ptr [rdi+4], 0
.text:00000000000029F6                 mov     byte ptr [rdi+11h], 0
.text:00000000000029FA                 mov     qword ptr [rdi+18h], 0
.text:0000000000002A02                 mov     qword ptr [rdi+20h], 0
.text:0000000000002A0A                 retn
.text:0000000000002A0A ; } // starts at 29E0
.text:0000000000002A0A chopt_init      endp
.text:0000000000002A0A
.text:0000000000002A0A ; ---------------------------------------------------------------------------
.text:0000000000002A0B                 align 10h
.text:0000000000002A10
.text:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A10
.text:0000000000002A10
.text:0000000000002A10                 public chopt_free
.text:0000000000002A10 chopt_free      proc near
.text:0000000000002A10 ; __unwind {
.text:0000000000002A10                 push    rbx
.text:0000000000002A11                 mov     rbx, rdi
.text:0000000000002A14                 mov     rdi, [rdi+18h]  ; ptr
.text:0000000000002A18                 call    free
.text:0000000000002A1D                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000002A21                 pop     rbx
.text:0000000000002A22                 jmp     free
.text:0000000000002A22 ; } // starts at 2A10
.text:0000000000002A22 chopt_free      endp
.text:0000000000002A22
.text:0000000000002A22 ; ---------------------------------------------------------------------------
.text:0000000000002A27                 align 10h
.text:0000000000002A30
.text:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A30
.text:0000000000002A30
.text:0000000000002A30                 public gid_to_name
.text:0000000000002A30 gid_to_name     proc near               ; CODE XREF: main+33F↑p
.text:0000000000002A30                                         ; change_file_owner+1AD↓p ...
.text:0000000000002A30
.text:0000000000002A30 var_10          = qword ptr -10h
.text:0000000000002A30
.text:0000000000002A30 ; __unwind {
.text:0000000000002A30                 push    rbx
.text:0000000000002A31                 mov     ebx, edi
.text:0000000000002A33                 sub     rsp, 20h
.text:0000000000002A37                 mov     rax, fs:28h
.text:0000000000002A40                 mov     [rsp+28h+var_10], rax
.text:0000000000002A45                 xor     eax, eax
.text:0000000000002A47                 call    _getgrgid
.text:0000000000002A4C                 test    rax, rax
.text:0000000000002A4F                 jz      short loc_2A70
.text:0000000000002A51                 mov     rdi, [rax]      ; src
.text:0000000000002A54
.text:0000000000002A54 loc_2A54:                               ; CODE XREF: gid_to_name+4D↓j
.text:0000000000002A54                 call    xstrdup
.text:0000000000002A59                 mov     rdx, [rsp+28h+var_10]
.text:0000000000002A5E                 xor     rdx, fs:28h
.text:0000000000002A67                 jnz     short loc_2A7F
.text:0000000000002A69                 add     rsp, 20h
.text:0000000000002A6D                 pop     rbx
.text:0000000000002A6E                 retn
.text:0000000000002A6E ; ---------------------------------------------------------------------------
.text:0000000000002A6F                 align 10h
.text:0000000000002A70
.text:0000000000002A70 loc_2A70:                               ; CODE XREF: gid_to_name+1F↑j
.text:0000000000002A70                 mov     edi, ebx
.text:0000000000002A72                 mov     rsi, rsp
.text:0000000000002A75                 call    umaxtostr
.text:0000000000002A7A                 mov     rdi, rax
.text:0000000000002A7D                 jmp     short loc_2A54
.text:0000000000002A7F ; ---------------------------------------------------------------------------
.text:0000000000002A7F
.text:0000000000002A7F loc_2A7F:                               ; CODE XREF: gid_to_name+37↑j
.text:0000000000002A7F                 call    ___stack_chk_fail
.text:0000000000002A7F ; } // starts at 2A30
.text:0000000000002A7F gid_to_name     endp
.text:0000000000002A7F
.text:0000000000002A7F ; ---------------------------------------------------------------------------
.text:0000000000002A84                 align 10h
.text:0000000000002A90
.text:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A90
.text:0000000000002A90
.text:0000000000002A90                 public uid_to_name
.text:0000000000002A90 uid_to_name     proc near               ; CODE XREF: main+331↑p
.text:0000000000002A90                                         ; change_file_owner+19F↓p ...
.text:0000000000002A90
.text:0000000000002A90 var_10          = qword ptr -10h
.text:0000000000002A90
.text:0000000000002A90 ; __unwind {
.text:0000000000002A90                 push    rbx
.text:0000000000002A91                 mov     ebx, edi
.text:0000000000002A93                 sub     rsp, 20h
.text:0000000000002A97                 mov     rax, fs:28h
.text:0000000000002AA0                 mov     [rsp+28h+var_10], rax
.text:0000000000002AA5                 xor     eax, eax
.text:0000000000002AA7                 call    _getpwuid
.text:0000000000002AAC                 test    rax, rax
.text:0000000000002AAF                 jz      short loc_2AD0
.text:0000000000002AB1                 mov     rdi, [rax]      ; src
.text:0000000000002AB4
.text:0000000000002AB4 loc_2AB4:                               ; CODE XREF: uid_to_name+4D↓j
.text:0000000000002AB4                 call    xstrdup
.text:0000000000002AB9                 mov     rdx, [rsp+28h+var_10]
.text:0000000000002ABE                 xor     rdx, fs:28h
.text:0000000000002AC7                 jnz     short loc_2ADF
.text:0000000000002AC9                 add     rsp, 20h
.text:0000000000002ACD                 pop     rbx
.text:0000000000002ACE                 retn
.text:0000000000002ACE ; ---------------------------------------------------------------------------
.text:0000000000002ACF                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: uid_to_name+1F↑j
.text:0000000000002AD0                 mov     edi, ebx
.text:0000000000002AD2                 mov     rsi, rsp
.text:0000000000002AD5                 call    umaxtostr
.text:0000000000002ADA                 mov     rdi, rax
.text:0000000000002ADD                 jmp     short loc_2AB4
.text:0000000000002ADF ; ---------------------------------------------------------------------------
.text:0000000000002ADF
.text:0000000000002ADF loc_2ADF:                               ; CODE XREF: uid_to_name+37↑j
.text:0000000000002ADF                 call    ___stack_chk_fail
.text:0000000000002ADF ; } // starts at 2A90
.text:0000000000002ADF uid_to_name     endp
.text:0000000000002ADF
.text:0000000000002ADF ; ---------------------------------------------------------------------------
.text:0000000000002AE4                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AF0
.text:0000000000002AF0
.text:0000000000002AF0 change_file_owner proc near             ; CODE XREF: chown_files+69↓p
.text:0000000000002AF0
.text:0000000000002AF0 var_1A8         = qword ptr -1A8h
.text:0000000000002AF0 var_1A0         = qword ptr -1A0h
.text:0000000000002AF0 owner           = dword ptr -198h
.text:0000000000002AF0 group           = dword ptr -190h
.text:0000000000002AF0 ptr             = qword ptr -188h
.text:0000000000002AF0 fd              = dword ptr -17Ch
.text:0000000000002AF0 var_178         = qword ptr -178h
.text:0000000000002AF0 var_170         = qword ptr -170h
.text:0000000000002AF0 stat_buf        = stat ptr -168h
.text:0000000000002AF0 var_D8          = stat ptr -0D8h
.text:0000000000002AF0 var_40          = qword ptr -40h
.text:0000000000002AF0 arg_0           = qword ptr  8
.text:0000000000002AF0
.text:0000000000002AF0 ; __unwind {
.text:0000000000002AF0                 push    r15
.text:0000000000002AF2                 push    r14
.text:0000000000002AF4                 push    r13
.text:0000000000002AF6                 push    r12
.text:0000000000002AF8                 mov     r12d, r8d
.text:0000000000002AFB                 push    rbp
.text:0000000000002AFC                 push    rbx
.text:0000000000002AFD                 mov     rbp, rsi
.text:0000000000002B00                 sub     rsp, 178h
.text:0000000000002B07                 movzx   r14d, word ptr [rsi+70h]
.text:0000000000002B0C                 mov     rax, fs:28h
.text:0000000000002B15                 mov     [rsp+1A8h+var_40], rax
.text:0000000000002B1D                 xor     eax, eax
.text:0000000000002B1F                 mov     rax, [rsi+38h]
.text:0000000000002B23                 mov     [rsp+1A8h+var_1A8], rdi
.text:0000000000002B27                 mov     [rsp+1A8h+owner], edx
.text:0000000000002B2B                 mov     [rsp+1A8h+group], ecx
.text:0000000000002B2F                 cmp     r14w, 0Ah       ; switch 11 cases
.text:0000000000002B34                 mov     rbx, [rsp+1A8h+arg_0]
.text:0000000000002B3C                 mov     [rsp+1A8h+var_1A0], rax
.text:0000000000002B41                 ja      short def_2B55  ; jumptable 0000000000002B55 default case, cases 0,3,5,8,9
.text:0000000000002B43                 lea     rcx, jpt_2B55
.text:0000000000002B4A                 movzx   edx, r14w
.text:0000000000002B4E                 movsxd  rax, ds:(jpt_2B55 - 0BA68h)[rcx+rdx*4]
.text:0000000000002B52                 add     rax, rcx
.text:0000000000002B55                 jmp     rax             ; switch jump
.text:0000000000002B55 ; ---------------------------------------------------------------------------
.text:0000000000002B57                 align 20h
.text:0000000000002B60
.text:0000000000002B60 loc_2B60:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002B60                                         ; DATA XREF: .rodata:jpt_2B55↓o
.text:0000000000002B60                 mov     rdi, [rsp+1A8h+var_1A8] ; jumptable 0000000000002B55 case 2
.text:0000000000002B64                 mov     dword ptr [rsp+1A8h+ptr], r9d
.text:0000000000002B69                 call    cycle_warning_required
.text:0000000000002B6E                 test    al, al
.text:0000000000002B70                 mov     r9d, dword ptr [rsp+1A8h+ptr]
.text:0000000000002B75                 jnz     loc_3358
.text:0000000000002B7B
.text:0000000000002B7B def_2B55:                               ; CODE XREF: change_file_owner+51↑j
.text:0000000000002B7B                                         ; change_file_owner+65↑j ...
.text:0000000000002B7B                 cmp     r12d, 0FFFFFFFFh ; jumptable 0000000000002B55 default case, cases 0,3,5,8,9
.text:0000000000002B7F                 mov     r11, [rbp+30h]
.text:0000000000002B83                 movzx   ecx, byte ptr [rbx+10h]
.text:0000000000002B87                 setz    dl
.text:0000000000002B8A                 cmp     r9d, 0FFFFFFFFh
.text:0000000000002B8E                 lea     r13, [rbp+78h]
.text:0000000000002B92                 setz    al
.text:0000000000002B95                 and     dl, al
.text:0000000000002B97                 mov     r15d, edx
.text:0000000000002B9A                 jz      short loc_2BB0
.text:0000000000002B9C                 cmp     dword ptr [rbx], 2
.text:0000000000002B9F                 jnz     short loc_2BB0
.text:0000000000002BA1                 cmp     qword ptr [rbx+8], 0
.text:0000000000002BA6                 jz      loc_3420
.text:0000000000002BAC                 nop     dword ptr [rax+00h]
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: change_file_owner+AA↑j
.text:0000000000002BB0                                         ; change_file_owner+AF↑j
.text:0000000000002BB0                 test    cl, cl
.text:0000000000002BB2                 jnz     loc_2DB8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: change_file_owner+2D8↓j
.text:0000000000002BB8                                         ; change_file_owner+31E↓j
.text:0000000000002BB8                 mov     eax, r14d
.text:0000000000002BBB                 and     eax, 0FFFFFFFDh
.text:0000000000002BBE                 cmp     ax, 4
.text:0000000000002BC2                 setz    al
.text:0000000000002BC5                 sub     r14d, 1
.text:0000000000002BC9                 cmp     r14w, 1
.text:0000000000002BCE                 setbe   dl
.text:0000000000002BD1                 or      eax, edx
.text:0000000000002BD3                 cmp     r12d, 0FFFFFFFFh
.text:0000000000002BD7                 jz      loc_2D88
.text:0000000000002BDD                 cmp     [r13+1Ch], r12d
.text:0000000000002BE1                 jz      loc_2D88
.text:0000000000002BE7                 test    al, al
.text:0000000000002BE9                 jz      loc_3626
.text:0000000000002BEF                 mov     rdx, [rbx+8]
.text:0000000000002BF3                 test    rdx, rdx
.text:0000000000002BF6                 jz      loc_382F
.text:0000000000002BFC                 xor     ecx, ecx
.text:0000000000002BFE
.text:0000000000002BFE loc_2BFE:                               ; CODE XREF: change_file_owner+2BE↓j
.text:0000000000002BFE                 mov     rax, [rdx]
.text:0000000000002C01                 cmp     [r13+8], rax
.text:0000000000002C05                 jz      loc_3038
.text:0000000000002C0B
.text:0000000000002C0B loc_2C0B:                               ; CODE XREF: change_file_owner+2AB↓j
.text:0000000000002C0B                                         ; change_file_owner+2B8↓j ...
.text:0000000000002C0B                 test    cl, cl
.text:0000000000002C0D                 jz      loc_382F
.text:0000000000002C13
.text:0000000000002C13 loc_2C13:                               ; CODE XREF: change_file_owner+522↓j
.text:0000000000002C13                                         ; change_file_owner+52F↓j ...
.text:0000000000002C13                 movzx   ecx, byte ptr [rbx+10h]
.text:0000000000002C17
.text:0000000000002C17 loc_2C17:                               ; CODE XREF: change_file_owner+94D↓j
.text:0000000000002C17                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000002C1B                 test    cl, cl
.text:0000000000002C1D                 mov     r14d, [rax+2Ch]
.text:0000000000002C21                 jnz     loc_30D0
.text:0000000000002C27
.text:0000000000002C27 loc_2C27:                               ; CODE XREF: change_file_owner+95B↓j
.text:0000000000002C27                 mov     ecx, [rsp+1A8h+group] ; group
.text:0000000000002C2B                 mov     edx, [rsp+1A8h+owner] ; owner
.text:0000000000002C2F                 mov     r8d, 100h       ; flag
.text:0000000000002C35                 mov     rsi, r11        ; file
.text:0000000000002C38                 mov     edi, r14d       ; fd
.text:0000000000002C3B                 call    _fchownat
.text:0000000000002C40                 test    eax, eax
.text:0000000000002C42                 setz    r15b
.text:0000000000002C46                 jz      short loc_2C56
.text:0000000000002C48                 call    ___errno_location
.text:0000000000002C4D                 cmp     dword ptr [rax], 5Fh ; '_'
.text:0000000000002C50                 jz      loc_34A8
.text:0000000000002C56
.text:0000000000002C56 loc_2C56:                               ; CODE XREF: change_file_owner+156↑j
.text:0000000000002C56                                         ; change_file_owner+69C↓j
.text:0000000000002C56                 test    r15b, r15b
.text:0000000000002C59                 jnz     loc_3198
.text:0000000000002C5F
.text:0000000000002C5F loc_2C5F:                               ; CODE XREF: change_file_owner+658↓j
.text:0000000000002C5F                                         ; change_file_owner+AE0↓j ...
.text:0000000000002C5F                 movzx   r15d, byte ptr [rbx+11h]
.text:0000000000002C64                 test    r15b, r15b
.text:0000000000002C67                 jz      loc_3278
.text:0000000000002C6D
.text:0000000000002C6D loc_2C6D:                               ; CODE XREF: change_file_owner+A90↓j
.text:0000000000002C6D                 mov     eax, [rbx]
.text:0000000000002C6F                 xor     r15d, r15d
.text:0000000000002C72                 cmp     eax, 2
.text:0000000000002C75                 jz      loc_2D62
.text:0000000000002C7B
.text:0000000000002C7B loc_2C7B:                               ; CODE XREF: change_file_owner+7D6↓j
.text:0000000000002C7B                                         ; change_file_owner+85A↓j
.text:0000000000002C7B                 test    eax, eax
.text:0000000000002C7D                 jnz     loc_2D62
.text:0000000000002C83                 mov     [rsp+1A8h+fd], 3
.text:0000000000002C8B
.text:0000000000002C8B loc_2C8B:                               ; CODE XREF: change_file_owner+6CE↓j
.text:0000000000002C8B                                         ; change_file_owner+6F3↓j ...
.text:0000000000002C8B                 mov     edi, [r13+1Ch]
.text:0000000000002C8F                 call    uid_to_name
.text:0000000000002C94                 mov     edi, [r13+20h]
.text:0000000000002C98                 mov     qword ptr [rsp+1A8h+owner], rax
.text:0000000000002C9D                 call    gid_to_name
.text:0000000000002CA2                 mov     r12, [rbx+20h]
.text:0000000000002CA6                 mov     r14, [rbx+18h]
.text:0000000000002CAA                 mov     r13, rax
.text:0000000000002CAD
.text:0000000000002CAD loc_2CAD:                               ; CODE XREF: change_file_owner+443↓j
.text:0000000000002CAD                 mov     rsi, r12        ; void *
.text:0000000000002CB0                 mov     rdi, r14        ; src
.text:0000000000002CB3                 call    user_group_str
.text:0000000000002CB8                 test    r12, r12
.text:0000000000002CBB                 mov     esi, 0
.text:0000000000002CC0                 mov     qword ptr [rsp+1A8h+group], rax
.text:0000000000002CC5                 cmovnz  rsi, r13        ; void *
.text:0000000000002CC9                 test    r14, r14
.text:0000000000002CCC                 jz      loc_3230
.text:0000000000002CD2                 mov     rdi, qword ptr [rsp+1A8h+owner] ; src
.text:0000000000002CD7                 call    user_group_str
.text:0000000000002CDC                 mov     [rsp+1A8h+ptr], rax
.text:0000000000002CE1                 mov     eax, [rsp+1A8h+fd]
.text:0000000000002CE5                 cmp     eax, 3
.text:0000000000002CE8                 jz      loc_3200
.text:0000000000002CEE                 cmp     eax, 4
.text:0000000000002CF1                 jnz     loc_3450
.text:0000000000002CF7                 lea     rsi, aOwnershipOfSRe ; "ownership of %s retained as %s\n"
.text:0000000000002CFE                 mov     edx, 5          ; category
.text:0000000000002D03                 xor     edi, edi        ; domainname
.text:0000000000002D05                 call    _dcgettext
.text:0000000000002D0A                 mov     r12, rax
.text:0000000000002D0D                 nop     dword ptr [rax]
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: change_file_owner+73B↓j
.text:0000000000002D10                                         ; change_file_owner+77D↓j ...
.text:0000000000002D10                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002D15                 mov     edi, 4
.text:0000000000002D1A                 call    quotearg_style
.text:0000000000002D1F                 mov     r14, [rsp+1A8h+ptr]
.text:0000000000002D24                 mov     r8, qword ptr [rsp+1A8h+group]
.text:0000000000002D29                 mov     rdx, rax
.text:0000000000002D2C                 mov     rsi, r12
.text:0000000000002D2F                 mov     edi, 1
.text:0000000000002D34                 xor     eax, eax
.text:0000000000002D36                 mov     rcx, r14
.text:0000000000002D39                 call    ___printf_chk
.text:0000000000002D3E                 mov     rdi, r14        ; ptr
.text:0000000000002D41                 call    free
.text:0000000000002D46                 mov     rdi, qword ptr [rsp+1A8h+group] ; ptr
.text:0000000000002D4B                 call    free
.text:0000000000002D50
.text:0000000000002D50 loc_2D50:                               ; CODE XREF: change_file_owner+A22↓j
.text:0000000000002D50                 mov     rdi, qword ptr [rsp+1A8h+owner] ; ptr
.text:0000000000002D55                 call    free
.text:0000000000002D5A                 mov     rdi, r13        ; ptr
.text:0000000000002D5D                 call    free
.text:0000000000002D62
.text:0000000000002D62 loc_2D62:                               ; CODE XREF: change_file_owner+185↑j
.text:0000000000002D62                                         ; change_file_owner+18D↑j ...
.text:0000000000002D62                 cmp     byte ptr [rbx+4], 0
.text:0000000000002D66                 jnz     loc_2FE0
.text:0000000000002D6C                 mov     rdi, [rsp+1A8h+var_1A8]
.text:0000000000002D70                 mov     edx, 4
.text:0000000000002D75                 mov     rsi, rbp
.text:0000000000002D78                 call    rpl_fts_set
.text:0000000000002D7D                 jmp     loc_2FE0
.text:0000000000002D7D ; ---------------------------------------------------------------------------
.text:0000000000002D82                 align 8
.text:0000000000002D88
.text:0000000000002D88 loc_2D88:                               ; CODE XREF: change_file_owner+E7↑j
.text:0000000000002D88                                         ; change_file_owner+F1↑j
.text:0000000000002D88                 cmp     r9d, 0FFFFFFFFh
.text:0000000000002D8C                 jz      loc_3010
.text:0000000000002D92                 cmp     [r13+20h], r9d
.text:0000000000002D96                 setz    cl
.text:0000000000002D99                 test    al, al
.text:0000000000002D9B                 jz      loc_2C0B
.text:0000000000002DA1                 mov     rdx, [rbx+8]
.text:0000000000002DA5                 test    rdx, rdx
.text:0000000000002DA8                 jz      loc_2C0B
.text:0000000000002DAE                 jmp     loc_2BFE
.text:0000000000002DAE ; ---------------------------------------------------------------------------
.text:0000000000002DB3                 align 8
.text:0000000000002DB8
.text:0000000000002DB8 loc_2DB8:                               ; CODE XREF: change_file_owner+C2↑j
.text:0000000000002DB8                                         ; change_file_owner+932↓j
.text:0000000000002DB8                 mov     eax, [rbp+90h]
.text:0000000000002DBE                 and     eax, 0F000h
.text:0000000000002DC3                 cmp     eax, 0A000h
.text:0000000000002DC8                 jnz     loc_2BB8
.text:0000000000002DCE                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000002DD2                 lea     r13, [rsp+1A8h+stat_buf]
.text:0000000000002DD7                 xor     r8d, r8d        ; flag
.text:0000000000002DDA                 mov     rdx, r11        ; filename
.text:0000000000002DDD                 mov     edi, 1          ; ver
.text:0000000000002DE2                 mov     [rsp+1A8h+fd], r9d
.text:0000000000002DE7                 mov     rcx, r13        ; stat_buf
.text:0000000000002DEA                 mov     [rsp+1A8h+ptr], r11
.text:0000000000002DEF                 mov     esi, [rax+2Ch]  ; fildes
.text:0000000000002DF2                 call    ___fxstatat
.text:0000000000002DF7                 test    eax, eax
.text:0000000000002DF9                 jnz     loc_3578
.text:0000000000002DFF                 movzx   r14d, word ptr [rbp+70h]
.text:0000000000002E04                 mov     r11, [rsp+1A8h+ptr]
.text:0000000000002E09                 mov     r9d, [rsp+1A8h+fd]
.text:0000000000002E0E                 jmp     loc_2BB8
.text:0000000000002E0E ; ---------------------------------------------------------------------------
.text:0000000000002E13                 align 8
.text:0000000000002E18
.text:0000000000002E18 loc_2E18:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002E18                                         ; DATA XREF: .rodata:jpt_2B55↓o
.text:0000000000002E18                 movzx   r15d, byte ptr [rbx+4] ; jumptable 0000000000002B55 case 1
.text:0000000000002E1D                 test    r15b, r15b
.text:0000000000002E20                 jz      def_2B55        ; jumptable 0000000000002B55 default case, cases 0,3,5,8,9
.text:0000000000002E26                 mov     rax, [rbx+8]
.text:0000000000002E2A                 test    rax, rax
.text:0000000000002E2D                 jz      loc_2FE0
.text:0000000000002E33                 mov     rbx, [rax]
.text:0000000000002E36                 cmp     [rsi+80h], rbx
.text:0000000000002E3D                 jnz     loc_2FE0
.text:0000000000002E43                 mov     rax, [rax+8]
.text:0000000000002E47                 cmp     [rsi+78h], rax
.text:0000000000002E4B                 jnz     loc_2FE0
.text:0000000000002E51                 lea     rdx, aLibs+6    ; "/"
.text:0000000000002E58                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002E5D                 mov     ecx, 2
.text:0000000000002E62                 mov     rdi, rdx
.text:0000000000002E65                 repe cmpsb
.text:0000000000002E67                 setnbe  al
.text:0000000000002E6A                 sbb     al, 0
.text:0000000000002E6C                 test    al, al
.text:0000000000002E6E                 jnz     loc_3780
.text:0000000000002E74                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002E79                 mov     edi, 4
.text:0000000000002E7E                 call    quotearg_style
.text:0000000000002E83                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0000000000002E8A                 mov     rbx, rax
.text:0000000000002E8D                 mov     edx, 5          ; category
.text:0000000000002E92                 xor     edi, edi        ; domainname
.text:0000000000002E94                 call    _dcgettext
.text:0000000000002E99                 mov     rcx, rbx
.text:0000000000002E9C                 mov     rdx, rax        ; format
.text:0000000000002E9F                 xor     esi, esi        ; errnum
.text:0000000000002EA1                 xor     edi, edi        ; status
.text:0000000000002EA3                 xor     eax, eax
.text:0000000000002EA5                 call    _error
.text:0000000000002EAA
.text:0000000000002EAA loc_2EAA:                               ; CODE XREF: change_file_owner+CDD↓j
.text:0000000000002EAA                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:0000000000002EB1                 mov     edx, 5          ; category
.text:0000000000002EB6                 xor     edi, edi        ; domainname
.text:0000000000002EB8                 xor     r15d, r15d
.text:0000000000002EBB                 call    _dcgettext
.text:0000000000002EC0                 xor     esi, esi        ; errnum
.text:0000000000002EC2                 mov     rdx, rax        ; format
.text:0000000000002EC5                 xor     edi, edi        ; status
.text:0000000000002EC7                 xor     eax, eax
.text:0000000000002EC9                 call    _error
.text:0000000000002ECE                 mov     rbx, [rsp+1A8h+var_1A8]
.text:0000000000002ED2                 mov     edx, 4
.text:0000000000002ED7                 mov     rsi, rbp
.text:0000000000002EDA                 mov     rdi, rbx
.text:0000000000002EDD                 call    rpl_fts_set
.text:0000000000002EE2                 mov     rdi, rbx
.text:0000000000002EE5                 call    rpl_fts_read
.text:0000000000002EEA                 jmp     loc_2FE0
.text:0000000000002EEA ; ---------------------------------------------------------------------------
.text:0000000000002EEF                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002EF0                                         ; DATA XREF: .rodata:jpt_2B55↓o
.text:0000000000002EF0                 movzx   r15d, byte ptr [rbx+11h] ; jumptable 0000000000002B55 case 4
.text:0000000000002EF5                 test    r15b, r15b
.text:0000000000002EF8                 jz      loc_3470
.text:0000000000002EFE
.text:0000000000002EFE loc_2EFE:                               ; CODE XREF: change_file_owner+458↓j
.text:0000000000002EFE                                         ; change_file_owner+4AA↓j
.text:0000000000002EFE                 mov     eax, [rbx]
.text:0000000000002F00                 xor     r15d, r15d
.text:0000000000002F03                 cmp     eax, 2
.text:0000000000002F06                 jz      loc_2D62
.text:0000000000002F0C
.text:0000000000002F0C loc_2F0C:                               ; CODE XREF: change_file_owner+486↓j
.text:0000000000002F0C                 test    eax, eax
.text:0000000000002F0E                 jnz     loc_2D62
.text:0000000000002F14                 xor     r15d, r15d
.text:0000000000002F17                 mov     [rsp+1A8h+fd], 3
.text:0000000000002F1F
.text:0000000000002F1F loc_2F1F:                               ; CODE XREF: change_file_owner+D6B↓j
.text:0000000000002F1F                 mov     r12, [rbx+20h]
.text:0000000000002F23                 mov     r14, [rbx+18h]
.text:0000000000002F27                 xor     r13d, r13d
.text:0000000000002F2A                 mov     qword ptr [rsp+1A8h+owner], 0
.text:0000000000002F33                 jmp     loc_2CAD
.text:0000000000002F33 ; ---------------------------------------------------------------------------
.text:0000000000002F38                 align 20h
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002F40                                         ; DATA XREF: .rodata:jpt_2B55↓o
.text:0000000000002F40                 movzx   r15d, byte ptr [rbx+11h] ; jumptable 0000000000002B55 case 7
.text:0000000000002F45                 test    r15b, r15b
.text:0000000000002F48                 jnz     short loc_2EFE
.text:0000000000002F4A                 mov     rdx, [rsp+1A8h+var_1A0]
.text:0000000000002F4F                 mov     esi, 3
.text:0000000000002F54                 xor     edi, edi
.text:0000000000002F56                 call    quotearg_n_style_colon
.text:0000000000002F5B                 mov     esi, [rbp+40h]  ; errnum
.text:0000000000002F5E                 lea     rdx, format+4   ; format
.text:0000000000002F65                 mov     rcx, rax
.text:0000000000002F68
.text:0000000000002F68 loc_2F68:                               ; CODE XREF: change_file_owner+4DE↓j
.text:0000000000002F68                 xor     eax, eax
.text:0000000000002F6A                 xor     edi, edi        ; status
.text:0000000000002F6C                 call    _error
.text:0000000000002F71                 mov     eax, [rbx]
.text:0000000000002F73                 cmp     eax, 2
.text:0000000000002F76                 jnz     short loc_2F0C
.text:0000000000002F78                 jmp     loc_2D62
.text:0000000000002F78 ; ---------------------------------------------------------------------------
.text:0000000000002F7D                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002F80                                         ; DATA XREF: .rodata:jpt_2B55↓o
.text:0000000000002F80                 cmp     qword ptr [rsi+58h], 0 ; jumptable 0000000000002B55 case 10
.text:0000000000002F85                 jnz     short loc_2F92
.text:0000000000002F87                 cmp     qword ptr [rsi+20h], 0
.text:0000000000002F8C                 jz      loc_3558
.text:0000000000002F92
.text:0000000000002F92 loc_2F92:                               ; CODE XREF: change_file_owner+495↑j
.text:0000000000002F92                 movzx   r15d, byte ptr [rbx+11h]
.text:0000000000002F97                 test    r15b, r15b
.text:0000000000002F9A                 jnz     loc_2EFE
.text:0000000000002FA0                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000002FA5                 mov     edi, 4
.text:0000000000002FAA                 call    quotearg_style
.text:0000000000002FAF                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:0000000000002FB6                 mov     r12, rax
.text:0000000000002FB9                 mov     edx, 5          ; category
.text:0000000000002FBE
.text:0000000000002FBE loc_2FBE:                               ; CODE XREF: change_file_owner+99E↓j
.text:0000000000002FBE                 xor     edi, edi        ; domainname
.text:0000000000002FC0                 call    _dcgettext
.text:0000000000002FC5                 mov     esi, [rbp+40h]
.text:0000000000002FC8                 mov     rcx, r12
.text:0000000000002FCB                 mov     rdx, rax
.text:0000000000002FCE                 jmp     short loc_2F68
.text:0000000000002FD0 ; ---------------------------------------------------------------------------
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: change_file_owner+65↑j
.text:0000000000002FD0                                         ; DATA XREF: .rodata:jpt_2B55↓o
.text:0000000000002FD0                 cmp     byte ptr [rbx+4], 0 ; jumptable 0000000000002B55 case 6
.text:0000000000002FD4                 jnz     def_2B55        ; jumptable 0000000000002B55 default case, cases 0,3,5,8,9
.text:0000000000002FDA
.text:0000000000002FDA loc_2FDA:                               ; CODE XREF: change_file_owner+A7E↓j
.text:0000000000002FDA                 mov     r15d, 1
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: change_file_owner+276↑j
.text:0000000000002FE0                                         ; change_file_owner+28D↑j ...
.text:0000000000002FE0                 mov     rbx, [rsp+1A8h+var_40]
.text:0000000000002FE8                 xor     rbx, fs:28h
.text:0000000000002FF1                 mov     eax, r15d
.text:0000000000002FF4                 jnz     loc_382A
.text:0000000000002FFA                 add     rsp, 178h
.text:0000000000003001                 pop     rbx
.text:0000000000003002                 pop     rbp
.text:0000000000003003                 pop     r12
.text:0000000000003005                 pop     r13
.text:0000000000003007                 pop     r14
.text:0000000000003009                 pop     r15
.text:000000000000300B                 retn
.text:000000000000300B ; ---------------------------------------------------------------------------
.text:000000000000300C                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: change_file_owner+29C↑j
.text:0000000000003010                 test    al, al
.text:0000000000003012                 jz      loc_2C13
.text:0000000000003018                 mov     rdx, [rbx+8]
.text:000000000000301C                 test    rdx, rdx
.text:000000000000301F                 jz      loc_2C13
.text:0000000000003025                 mov     rdi, [rdx]
.text:0000000000003028                 cmp     [r13+8], rdi
.text:000000000000302C                 jnz     loc_2C13
.text:0000000000003032                 mov     ecx, eax
.text:0000000000003034                 nop     dword ptr [rax+00h]
.text:0000000000003038
.text:0000000000003038 loc_3038:                               ; CODE XREF: change_file_owner+115↑j
.text:0000000000003038                 mov     rax, [rdx+8]
.text:000000000000303C                 cmp     [r13+0], rax
.text:0000000000003040                 jnz     loc_2C0B
.text:0000000000003046                 lea     rdx, aLibs+6    ; "/"
.text:000000000000304D                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000003052                 mov     ecx, 2
.text:0000000000003057                 mov     rdi, rdx
.text:000000000000305A                 repe cmpsb
.text:000000000000305C                 setnbe  al
.text:000000000000305F                 sbb     al, 0
.text:0000000000003061                 test    al, al
.text:0000000000003063                 jnz     loc_3648
.text:0000000000003069                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000306E                 mov     edi, 4
.text:0000000000003073                 call    quotearg_style
.text:0000000000003078                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:000000000000307F                 mov     rbx, rax
.text:0000000000003082                 mov     edx, 5          ; category
.text:0000000000003087                 xor     edi, edi        ; domainname
.text:0000000000003089                 call    _dcgettext
.text:000000000000308E                 mov     rcx, rbx
.text:0000000000003091                 mov     rdx, rax        ; format
.text:0000000000003094                 xor     esi, esi        ; errnum
.text:0000000000003096                 xor     edi, edi        ; status
.text:0000000000003098                 xor     eax, eax
.text:000000000000309A                 call    _error
.text:000000000000309F
.text:000000000000309F loc_309F:                               ; CODE XREF: change_file_owner+BA5↓j
.text:000000000000309F                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00000000000030A6                 mov     edx, 5          ; category
.text:00000000000030AB                 xor     edi, edi        ; domainname
.text:00000000000030AD                 xor     r15d, r15d
.text:00000000000030B0                 call    _dcgettext
.text:00000000000030B5                 xor     esi, esi        ; errnum
.text:00000000000030B7                 mov     rdx, rax        ; format
.text:00000000000030BA                 xor     edi, edi        ; status
.text:00000000000030BC                 xor     eax, eax
.text:00000000000030BE                 call    _error
.text:00000000000030C3                 jmp     loc_2FE0
.text:00000000000030C3 ; ---------------------------------------------------------------------------
.text:00000000000030C8                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: change_file_owner+131↑j
.text:00000000000030D0                 test    r15b, r15b
.text:00000000000030D3                 jnz     loc_3170
.text:00000000000030D9                 mov     eax, [r13+18h]
.text:00000000000030DD                 and     eax, 0F000h
.text:00000000000030E2                 cmp     eax, 8000h
.text:00000000000030E7                 jz      loc_3498
.text:00000000000030ED                 cmp     eax, 4000h
.text:00000000000030F2                 mov     dword ptr [rsp+1A8h+ptr], 10900h
.text:00000000000030FA                 jnz     short loc_3170
.text:00000000000030FC
.text:00000000000030FC loc_30FC:                               ; CODE XREF: change_file_owner+9B0↓j
.text:00000000000030FC                 mov     edx, dword ptr [rsp+1A8h+ptr]
.text:0000000000003100                 mov     rsi, r11
.text:0000000000003103                 mov     edi, r14d
.text:0000000000003106                 mov     dword ptr [rsp+1A8h+var_178], r9d
.text:000000000000310B                 mov     byte ptr [rsp+1A8h+fd], cl
.text:000000000000310F                 mov     [rsp+1A8h+var_170], r11
.text:0000000000003114                 call    ___openat_2
.text:0000000000003119                 test    eax, eax
.text:000000000000311B                 mov     r8d, eax
.text:000000000000311E                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:0000000000003123                 mov     r9d, dword ptr [rsp+1A8h+var_178]
.text:0000000000003128                 jns     loc_32D8
.text:000000000000312E                 call    ___errno_location
.text:0000000000003133                 cmp     dword ptr [rax], 0Dh
.text:0000000000003136                 mov     r10, rax
.text:0000000000003139                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:000000000000313E                 mov     r9d, dword ptr [rsp+1A8h+var_178]
.text:0000000000003143                 mov     r11, [rsp+1A8h+var_170]
.text:0000000000003148                 jnz     loc_2C5F
.text:000000000000314E                 mov     eax, [r13+18h]
.text:0000000000003152                 and     eax, 0F000h
.text:0000000000003157                 cmp     eax, 8000h
.text:000000000000315C                 jz      loc_3726
.text:0000000000003162
.text:0000000000003162 loc_3162:                               ; CODE XREF: change_file_owner+C7E↓j
.text:0000000000003162                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000003166                 mov     r14d, [rax+2Ch]
.text:000000000000316A                 nop     word ptr [rax+rax+00h]
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: change_file_owner+5E3↑j
.text:0000000000003170                                         ; change_file_owner+60A↑j
.text:0000000000003170                 mov     ecx, [rsp+1A8h+group] ; group
.text:0000000000003174                 mov     edx, [rsp+1A8h+owner] ; owner
.text:0000000000003178                 xor     r8d, r8d        ; flag
.text:000000000000317B                 mov     rsi, r11        ; file
.text:000000000000317E                 mov     edi, r14d       ; fd
.text:0000000000003181                 call    _fchownat
.text:0000000000003186                 test    eax, eax
.text:0000000000003188                 setz    r15b
.text:000000000000318C                 jmp     loc_2C56
.text:000000000000318C ; ---------------------------------------------------------------------------
.text:0000000000003191                 align 8
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: change_file_owner+169↑j
.text:0000000000003198                 mov     eax, [rbx]
.text:000000000000319A                 cmp     eax, 2
.text:000000000000319D                 jz      loc_2D62
.text:00000000000031A3
.text:00000000000031A3 loc_31A3:                               ; CODE XREF: change_file_owner+C09↓j
.text:00000000000031A3                 mov     esi, [rsp+1A8h+owner]
.text:00000000000031A7                 cmp     esi, 0FFFFFFFFh
.text:00000000000031AA                 jz      short loc_31C4
.text:00000000000031AC                 cmp     [r13+1Ch], esi
.text:00000000000031B0                 mov     r15d, 1
.text:00000000000031B6                 mov     [rsp+1A8h+fd], 2
.text:00000000000031BE                 jnz     loc_2C8B
.text:00000000000031C4
.text:00000000000031C4 loc_31C4:                               ; CODE XREF: change_file_owner+6BA↑j
.text:00000000000031C4                 mov     esi, [rsp+1A8h+group]
.text:00000000000031C8                 cmp     esi, 0FFFFFFFFh
.text:00000000000031CB                 jz      loc_33F0
.text:00000000000031D1                 cmp     [r13+20h], esi
.text:00000000000031D5                 mov     r15d, 1
.text:00000000000031DB                 mov     [rsp+1A8h+fd], 2
.text:00000000000031E3                 jnz     loc_2C8B
.text:00000000000031E9                 test    eax, eax
.text:00000000000031EB                 jnz     loc_2D62
.text:00000000000031F1
.text:00000000000031F1 loc_31F1:                               ; CODE XREF: change_file_owner+90E↓j
.text:00000000000031F1                 mov     [rsp+1A8h+fd], 4
.text:00000000000031F9                 jmp     loc_2C8B
.text:00000000000031F9 ; ---------------------------------------------------------------------------
.text:00000000000031FE                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: change_file_owner+1F8↑j
.text:0000000000003200                                         ; change_file_owner+753↓j
.text:0000000000003200                 cmp     [rsp+1A8h+ptr], 0
.text:0000000000003206                 mov     edx, 5          ; category
.text:000000000000320B                 jz      loc_3520
.text:0000000000003211                 test    r14, r14
.text:0000000000003214                 jz      loc_33C8
.text:000000000000321A                 lea     rsi, aFailedToChange ; "failed to change ownership of %s from %"...
.text:0000000000003221                 xor     edi, edi        ; domainname
.text:0000000000003223                 call    _dcgettext
.text:0000000000003228                 mov     r12, rax
.text:000000000000322B                 jmp     loc_2D10
.text:0000000000003230 ; ---------------------------------------------------------------------------
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: change_file_owner+1DC↑j
.text:0000000000003230                 xor     edi, edi        ; src
.text:0000000000003232                 call    user_group_str
.text:0000000000003237                 mov     [rsp+1A8h+ptr], rax
.text:000000000000323C                 mov     eax, [rsp+1A8h+fd]
.text:0000000000003240                 cmp     eax, 3
.text:0000000000003243                 jz      short loc_3200
.text:0000000000003245                 cmp     eax, 4
.text:0000000000003248                 jnz     loc_33A0
.text:000000000000324E                 test    r12, r12
.text:0000000000003251                 mov     edx, 5          ; category
.text:0000000000003256                 jz      loc_35D8
.text:000000000000325C                 lea     rsi, aGroupOfSRetain ; "group of %s retained as %s\n"
.text:0000000000003263                 xor     edi, edi        ; domainname
.text:0000000000003265                 call    _dcgettext
.text:000000000000326A                 mov     r12, rax
.text:000000000000326D                 jmp     loc_2D10
.text:000000000000326D ; ---------------------------------------------------------------------------
.text:0000000000003272                 align 8
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: change_file_owner+177↑j
.text:0000000000003278                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000327D                 mov     edi, 4
.text:0000000000003282                 call    quotearg_style
.text:0000000000003287                 cmp     [rsp+1A8h+owner], 0FFFFFFFFh
.text:000000000000328C                 mov     r14, rax
.text:000000000000328F                 mov     edx, 5          ; category
.text:0000000000003294                 jz      loc_3408
.text:000000000000329A                 lea     rsi, aChangingOwners ; "changing ownership of %s"
.text:00000000000032A1                 xor     edi, edi        ; domainname
.text:00000000000032A3                 call    _dcgettext
.text:00000000000032A8                 mov     r12, rax
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: change_file_owner+929↓j
.text:00000000000032AB                 call    ___errno_location
.text:00000000000032B0                 mov     esi, [rax]      ; errnum
.text:00000000000032B2                 xor     edi, edi        ; status
.text:00000000000032B4                 xor     eax, eax
.text:00000000000032B6                 mov     rcx, r14
.text:00000000000032B9                 mov     rdx, r12        ; format
.text:00000000000032BC                 call    _error
.text:00000000000032C1                 mov     eax, [rbx]
.text:00000000000032C3                 cmp     eax, 2
.text:00000000000032C6                 jnz     loc_2C7B
.text:00000000000032CC                 jmp     loc_2D62
.text:00000000000032CC ; ---------------------------------------------------------------------------
.text:00000000000032D1                 align 8
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: change_file_owner+638↑j
.text:00000000000032D8                                         ; change_file_owner+C74↓j
.text:00000000000032D8                 lea     rdx, [rsp+1A8h+var_D8] ; stat_buf
.text:00000000000032E0                 mov     esi, r8d        ; fildes
.text:00000000000032E3                 mov     edi, 1          ; ver
.text:00000000000032E8                 mov     dword ptr [rsp+1A8h+ptr], r8d
.text:00000000000032ED                 mov     dword ptr [rsp+1A8h+var_178], r9d
.text:00000000000032F2                 mov     byte ptr [rsp+1A8h+fd], cl
.text:00000000000032F6                 call    ___fxstat
.text:00000000000032FB                 test    eax, eax
.text:00000000000032FD                 mov     r8d, dword ptr [rsp+1A8h+ptr]
.text:0000000000003302                 jnz     loc_35B0
.text:0000000000003308                 mov     rax, [rsp+1A8h+var_D8.st_ino]
.text:0000000000003310                 cmp     [r13+8], rax
.text:0000000000003314                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:0000000000003319                 mov     r9d, dword ptr [rsp+1A8h+var_178]
.text:000000000000331E                 jz      loc_36A0
.text:0000000000003324
.text:0000000000003324 loc_3324:                               ; CODE XREF: change_file_owner+BBC↓j
.text:0000000000003324                 mov     [rsp+1A8h+owner], r8d
.text:0000000000003329                 call    ___errno_location
.text:000000000000332E                 mov     r8d, [rsp+1A8h+owner]
.text:0000000000003333                 mov     r12, rax
.text:0000000000003336                 mov     r14d, [rax]
.text:0000000000003339                 mov     edi, r8d        ; fd
.text:000000000000333C                 call    _close
.text:0000000000003341                 mov     eax, [rbx]
.text:0000000000003343                 mov     [r12], r14d
.text:0000000000003347                 cmp     eax, 2
.text:000000000000334A                 jnz     loc_2C7B
.text:0000000000003350                 jmp     loc_2D62
.text:0000000000003350 ; ---------------------------------------------------------------------------
.text:0000000000003355                 align 8
.text:0000000000003358
.text:0000000000003358 loc_3358:                               ; CODE XREF: change_file_owner+85↑j
.text:0000000000003358                 mov     rdx, [rsp+1A8h+var_1A0]
.text:000000000000335D                 mov     esi, 3
.text:0000000000003362                 xor     edi, edi
.text:0000000000003364                 xor     r15d, r15d
.text:0000000000003367                 call    quotearg_n_style_colon
.text:000000000000336C                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:0000000000003373                 mov     rbx, rax
.text:0000000000003376                 mov     edx, 5          ; category
.text:000000000000337B                 xor     edi, edi        ; domainname
.text:000000000000337D                 call    _dcgettext
.text:0000000000003382                 mov     rcx, rbx
.text:0000000000003385                 mov     rdx, rax        ; format
.text:0000000000003388                 xor     esi, esi        ; errnum
.text:000000000000338A                 xor     edi, edi        ; status
.text:000000000000338C                 xor     eax, eax
.text:000000000000338E                 call    _error
.text:0000000000003393                 jmp     loc_2FE0
.text:0000000000003393 ; ---------------------------------------------------------------------------
.text:0000000000003398                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: change_file_owner+758↑j
.text:00000000000033A0                 test    r12, r12
.text:00000000000033A3                 mov     edx, 5          ; category
.text:00000000000033A8                 jz      loc_3610
.text:00000000000033AE                 lea     rsi, aChangedGroupOf ; "changed group of %s from %s to %s\n"
.text:00000000000033B5                 xor     edi, edi        ; domainname
.text:00000000000033B7                 call    _dcgettext
.text:00000000000033BC                 mov     r12, rax
.text:00000000000033BF                 jmp     loc_2D10
.text:00000000000033BF ; ---------------------------------------------------------------------------
.text:00000000000033C4                 align 8
.text:00000000000033C8
.text:00000000000033C8 loc_33C8:                               ; CODE XREF: change_file_owner+724↑j
.text:00000000000033C8                 test    r12, r12
.text:00000000000033CB                 jz      loc_3710
.text:00000000000033D1                 lea     rsi, aFailedToChange_0 ; "failed to change group of %s from %s to"...
.text:00000000000033D8                 xor     edi, edi        ; domainname
.text:00000000000033DA                 call    _dcgettext
.text:00000000000033DF                 mov     r12, rax
.text:00000000000033E2                 jmp     loc_2D10
.text:00000000000033E2 ; ---------------------------------------------------------------------------
.text:00000000000033E7                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: change_file_owner+6DB↑j
.text:00000000000033F0                 test    eax, eax
.text:00000000000033F2                 jnz     loc_3638
.text:00000000000033F8                 mov     r15d, 1
.text:00000000000033FE                 jmp     loc_31F1
.text:00000000000033FE ; ---------------------------------------------------------------------------
.text:0000000000003403                 align 8
.text:0000000000003408
.text:0000000000003408 loc_3408:                               ; CODE XREF: change_file_owner+7A4↑j
.text:0000000000003408                 lea     rsi, aChangingGroupO ; "changing group of %s"
.text:000000000000340F
.text:000000000000340F loc_340F:                               ; CODE XREF: change_file_owner+AB4↓j
.text:000000000000340F                 xor     edi, edi        ; domainname
.text:0000000000003411                 call    _dcgettext
.text:0000000000003416                 mov     r12, rax
.text:0000000000003419                 jmp     loc_32AB
.text:0000000000003419 ; ---------------------------------------------------------------------------
.text:000000000000341E                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: change_file_owner+B6↑j
.text:0000000000003420                 test    cl, cl
.text:0000000000003422                 jnz     loc_2DB8
.text:0000000000003428                 mov     eax, r14d
.text:000000000000342B                 and     eax, 0FFFFFFFDh
.text:000000000000342E                 cmp     ax, 4
.text:0000000000003432                 jz      short loc_3443
.text:0000000000003434                 sub     r14d, 1
.text:0000000000003438                 cmp     r14w, 1
.text:000000000000343D                 ja      loc_2C17
.text:0000000000003443
.text:0000000000003443 loc_3443:                               ; CODE XREF: change_file_owner+942↑j
.text:0000000000003443                 mov     rax, [rsp+1A8h+var_1A8]
.text:0000000000003447                 mov     r14d, [rax+2Ch]
.text:000000000000344B                 jmp     loc_2C27
.text:0000000000003450 ; ---------------------------------------------------------------------------
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: change_file_owner+201↑j
.text:0000000000003450                 lea     rsi, aChangedOwnersh ; "changed ownership of %s from %s to %s\n"
.text:0000000000003457                 mov     edx, 5          ; category
.text:000000000000345C                 xor     edi, edi        ; domainname
.text:000000000000345E                 call    _dcgettext
.text:0000000000003463                 mov     r12, rax
.text:0000000000003466                 jmp     loc_2D10
.text:0000000000003466 ; ---------------------------------------------------------------------------
.text:000000000000346B                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: change_file_owner+408↑j
.text:0000000000003470                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000003475                 mov     edi, 4
.text:000000000000347A                 call    quotearg_style
.text:000000000000347F                 mov     edx, 5
.text:0000000000003484                 mov     r12, rax
.text:0000000000003487                 lea     rsi, aCannotReadDire ; "cannot read directory %s"
.text:000000000000348E                 jmp     loc_2FBE
.text:000000000000348E ; ---------------------------------------------------------------------------
.text:0000000000003493                 align 8
.text:0000000000003498
.text:0000000000003498 loc_3498:                               ; CODE XREF: change_file_owner+5F7↑j
.text:0000000000003498                 mov     dword ptr [rsp+1A8h+ptr], 900h
.text:00000000000034A0                 jmp     loc_30FC
.text:00000000000034A0 ; ---------------------------------------------------------------------------
.text:00000000000034A5                 align 8
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: change_file_owner+160↑j
.text:00000000000034A8                 mov     eax, [rbx]
.text:00000000000034AA                 mov     r15d, 1
.text:00000000000034B0                 cmp     eax, 2
.text:00000000000034B3                 jz      loc_2D62
.text:00000000000034B9                 test    eax, eax
.text:00000000000034BB                 jnz     loc_2D62
.text:00000000000034C1                 mov     edi, [r13+1Ch]
.text:00000000000034C5                 call    uid_to_name
.text:00000000000034CA                 mov     edi, [r13+20h]
.text:00000000000034CE                 mov     qword ptr [rsp+1A8h+owner], rax
.text:00000000000034D3                 call    gid_to_name
.text:00000000000034D8                 mov     rsi, [rsp+1A8h+var_1A0]
.text:00000000000034DD                 mov     edi, 4
.text:00000000000034E2                 mov     r13, rax
.text:00000000000034E5                 call    quotearg_style
.text:00000000000034EA                 lea     rsi, aNeitherSymboli ; "neither symbolic link %s nor referent h"...
.text:00000000000034F1                 mov     r12, rax
.text:00000000000034F4                 xor     edi, edi        ; domainname
.text:00000000000034F6                 mov     edx, 5          ; category
.text:00000000000034FB                 call    _dcgettext
.text:0000000000003500                 mov     rdx, r12
.text:0000000000003503                 mov     rsi, rax
.text:0000000000003506                 mov     edi, 1
.text:000000000000350B                 xor     eax, eax
.text:000000000000350D                 call    ___printf_chk
.text:0000000000003512                 jmp     loc_2D50
.text:0000000000003512 ; ---------------------------------------------------------------------------
.text:0000000000003517                 align 20h
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: change_file_owner+71B↑j
.text:0000000000003520                 test    r14, r14
.text:0000000000003523                 lea     rsi, aFailedToChange_1 ; "failed to change ownership of %s to %s"...
.text:000000000000352A                 jz      loc_35F0
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: change_file_owner+B0A↓j
.text:0000000000003530                                         ; change_file_owner+B17↓j
.text:0000000000003530                 xor     edi, edi        ; domainname
.text:0000000000003532                 call    _dcgettext
.text:0000000000003537                 mov     r12, rax
.text:000000000000353A                 mov     rax, qword ptr [rsp+1A8h+group]
.text:000000000000353F                 mov     qword ptr [rsp+1A8h+group], 0
.text:0000000000003548                 mov     [rsp+1A8h+ptr], rax
.text:000000000000354D                 jmp     loc_2D10
.text:000000000000354D ; ---------------------------------------------------------------------------
.text:0000000000003552                 align 8
.text:0000000000003558
.text:0000000000003558 loc_3558:                               ; CODE XREF: change_file_owner+49C↑j
.text:0000000000003558                 mov     rdi, [rsp+1A8h+var_1A8]
.text:000000000000355C                 mov     qword ptr [rsi+20h], 1
.text:0000000000003564                 mov     edx, 1
.text:0000000000003569                 call    rpl_fts_set
.text:000000000000356E                 jmp     loc_2FDA
.text:000000000000356E ; ---------------------------------------------------------------------------
.text:0000000000003573                 align 8
.text:0000000000003578
.text:0000000000003578 loc_3578:                               ; CODE XREF: change_file_owner+309↑j
.text:0000000000003578                 movzx   r15d, byte ptr [rbx+11h]
.text:000000000000357D                 test    r15b, r15b
.text:0000000000003580                 jnz     loc_2C6D
.text:0000000000003586                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000358B                 mov     edi, 4
.text:0000000000003590                 call    quotearg_style
.text:0000000000003595                 mov     edx, 5
.text:000000000000359A                 mov     r14, rax
.text:000000000000359D                 lea     rsi, aCannotDerefere ; "cannot dereference %s"
.text:00000000000035A4                 jmp     loc_340F
.text:00000000000035A4 ; ---------------------------------------------------------------------------
.text:00000000000035A9                 align 10h
.text:00000000000035B0
.text:00000000000035B0 loc_35B0:                               ; CODE XREF: change_file_owner+812↑j
.text:00000000000035B0                                         ; change_file_owner+D1B↓j
.text:00000000000035B0                 mov     [rsp+1A8h+group], r8d
.text:00000000000035B5                 call    ___errno_location
.text:00000000000035BA                 mov     r8d, [rsp+1A8h+group]
.text:00000000000035BF                 mov     r12d, [rax]
.text:00000000000035C2                 mov     r14, rax
.text:00000000000035C5                 mov     edi, r8d        ; fd
.text:00000000000035C8                 call    _close
.text:00000000000035CD                 mov     [r14], r12d
.text:00000000000035D0                 jmp     loc_2C5F
.text:00000000000035D0 ; ---------------------------------------------------------------------------
.text:00000000000035D5                 align 8
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: change_file_owner+766↑j
.text:00000000000035D8                 lea     rsi, aOwnershipOfSRe_0 ; "ownership of %s retained\n"
.text:00000000000035DF                 xor     edi, edi        ; domainname
.text:00000000000035E1                 call    _dcgettext
.text:00000000000035E6                 mov     r12, rax
.text:00000000000035E9                 jmp     loc_2D10
.text:00000000000035E9 ; ---------------------------------------------------------------------------
.text:00000000000035EE                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: change_file_owner+A3A↑j
.text:00000000000035F0                 test    r12, r12
.text:00000000000035F3                 lea     rsi, aFailedToChange_2 ; "failed to change group of %s to %s\n"
.text:00000000000035FA                 jnz     loc_3530
.text:0000000000003600                 lea     rsi, aFailedToChange_3 ; "failed to change ownership of %s\n"
.text:0000000000003607                 jmp     loc_3530
.text:0000000000003607 ; ---------------------------------------------------------------------------
.text:000000000000360C                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: change_file_owner+8B8↑j
.text:0000000000003610                 lea     rsi, aNoChangeToOwne ; "no change to ownership of %s\n"
.text:0000000000003617                 xor     edi, edi        ; domainname
.text:0000000000003619                 call    _dcgettext
.text:000000000000361E                 mov     r12, rax
.text:0000000000003621                 jmp     loc_2D10
.text:0000000000003626 ; ---------------------------------------------------------------------------
.text:0000000000003626
.text:0000000000003626 loc_3626:                               ; CODE XREF: change_file_owner+F9↑j
.text:0000000000003626                 mov     eax, [rbx]
.text:0000000000003628                 cmp     eax, 2
.text:000000000000362B                 jz      short loc_3638
.text:000000000000362D                 test    eax, eax
.text:000000000000362F                 jz      loc_3848
.text:0000000000003635                 nop     dword ptr [rax]
.text:0000000000003638
.text:0000000000003638 loc_3638:                               ; CODE XREF: change_file_owner+902↑j
.text:0000000000003638                                         ; change_file_owner+B3B↑j
.text:0000000000003638                 mov     r15d, 1
.text:000000000000363E                 jmp     loc_2D62
.text:000000000000363E ; ---------------------------------------------------------------------------
.text:0000000000003643                 align 8
.text:0000000000003648
.text:0000000000003648 loc_3648:                               ; CODE XREF: change_file_owner+573↑j
.text:0000000000003648                 mov     esi, 4
.text:000000000000364D                 mov     edi, 1
.text:0000000000003652                 call    quotearg_n_style
.text:0000000000003657                 mov     rdx, [rsp+1A8h+var_1A0]
.text:000000000000365C                 xor     edi, edi
.text:000000000000365E                 mov     esi, 4
.text:0000000000003663                 mov     rbp, rax
.text:0000000000003666                 call    quotearg_n_style
.text:000000000000366B                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:0000000000003672                 mov     rbx, rax
.text:0000000000003675                 xor     edi, edi        ; domainname
.text:0000000000003677                 mov     edx, 5          ; category
.text:000000000000367C                 call    _dcgettext
.text:0000000000003681                 mov     r8, rbp
.text:0000000000003684                 mov     rdx, rax        ; format
.text:0000000000003687                 mov     rcx, rbx
.text:000000000000368A                 xor     esi, esi        ; errnum
.text:000000000000368C                 xor     edi, edi        ; status
.text:000000000000368E                 xor     eax, eax
.text:0000000000003690                 call    _error
.text:0000000000003695                 jmp     loc_309F
.text:0000000000003695 ; ---------------------------------------------------------------------------
.text:000000000000369A                 align 20h
.text:00000000000036A0
.text:00000000000036A0 loc_36A0:                               ; CODE XREF: change_file_owner+82E↑j
.text:00000000000036A0                 mov     rax, [rsp+1A8h+var_D8.st_dev]
.text:00000000000036A8                 cmp     [r13+0], rax
.text:00000000000036AC                 jnz     loc_3324
.text:00000000000036B2                 cmp     r12d, 0FFFFFFFFh
.text:00000000000036B6                 jz      loc_37D8
.text:00000000000036BC                 cmp     r12d, [rsp+1A8h+var_D8.st_uid]
.text:00000000000036C4                 jz      loc_37D2
.text:00000000000036CA
.text:00000000000036CA loc_36CA:                               ; CODE XREF: change_file_owner+CF0↓j
.text:00000000000036CA                 mov     [rsp+1A8h+fd], r8d
.text:00000000000036CF                 mov     byte ptr [rsp+1A8h+ptr], cl
.text:00000000000036D3                 call    ___errno_location
.text:00000000000036D8                 mov     r8d, [rsp+1A8h+fd]
.text:00000000000036DD                 mov     r14d, [rax]
.text:00000000000036E0                 mov     r12, rax
.text:00000000000036E3                 mov     edi, r8d        ; fd
.text:00000000000036E6                 call    _close
.text:00000000000036EB                 mov     [r12], r14d
.text:00000000000036EF
.text:00000000000036EF loc_36EF:                               ; CODE XREF: change_file_owner+D35↓j
.text:00000000000036EF                 mov     eax, [rbx]
.text:00000000000036F1                 movzx   ecx, byte ptr [rsp+1A8h+ptr]
.text:00000000000036F6                 cmp     eax, 2
.text:00000000000036F9                 jnz     loc_31A3
.text:00000000000036FF                 mov     r15d, ecx
.text:0000000000003702                 jmp     loc_2D62
.text:0000000000003702 ; ---------------------------------------------------------------------------
.text:0000000000003707                 align 10h
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: change_file_owner+8DB↑j
.text:0000000000003710                 lea     rsi, aFailedToChange_3 ; "failed to change ownership of %s\n"
.text:0000000000003717                 xor     edi, edi        ; domainname
.text:0000000000003719                 call    _dcgettext
.text:000000000000371E                 mov     r12, rax
.text:0000000000003721                 jmp     loc_2D10
.text:0000000000003726 ; ---------------------------------------------------------------------------
.text:0000000000003726
.text:0000000000003726 loc_3726:                               ; CODE XREF: change_file_owner+66C↑j
.text:0000000000003726                 mov     edx, dword ptr [rsp+1A8h+ptr]
.text:000000000000372A                 mov     rsi, r11
.text:000000000000372D                 mov     edi, r14d
.text:0000000000003730                 mov     dword ptr [rsp+1A8h+var_170], r9d
.text:0000000000003735                 mov     [rsp+1A8h+var_178], r10
.text:000000000000373A                 mov     byte ptr [rsp+1A8h+fd], cl
.text:000000000000373E                 mov     [rsp+1A8h+ptr], r11
.text:0000000000003743                 or      edx, 1
.text:0000000000003746                 call    ___openat_2
.text:000000000000374B                 test    eax, eax
.text:000000000000374D                 mov     r8d, eax
.text:0000000000003750                 mov     r11, [rsp+1A8h+ptr]
.text:0000000000003755                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:000000000000375A                 mov     r10, [rsp+1A8h+var_178]
.text:000000000000375F                 mov     r9d, dword ptr [rsp+1A8h+var_170]
.text:0000000000003764                 jns     loc_32D8
.text:000000000000376A                 cmp     dword ptr [r10], 0Dh
.text:000000000000376E                 jz      loc_3162
.text:0000000000003774                 jmp     loc_2C5F
.text:0000000000003774 ; ---------------------------------------------------------------------------
.text:0000000000003779                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: change_file_owner+37E↑j
.text:0000000000003780                 mov     esi, 4
.text:0000000000003785                 mov     edi, 1
.text:000000000000378A                 call    quotearg_n_style
.text:000000000000378F                 mov     rdx, [rsp+1A8h+var_1A0]
.text:0000000000003794                 xor     edi, edi
.text:0000000000003796                 mov     esi, 4
.text:000000000000379B                 mov     r12, rax
.text:000000000000379E                 call    quotearg_n_style
.text:00000000000037A3                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00000000000037AA                 mov     rbx, rax
.text:00000000000037AD                 xor     edi, edi        ; domainname
.text:00000000000037AF                 mov     edx, 5          ; category
.text:00000000000037B4                 call    _dcgettext
.text:00000000000037B9                 mov     r8, r12
.text:00000000000037BC                 mov     rdx, rax        ; format
.text:00000000000037BF                 mov     rcx, rbx
.text:00000000000037C2                 xor     esi, esi        ; errnum
.text:00000000000037C4                 xor     edi, edi        ; status
.text:00000000000037C6                 xor     eax, eax
.text:00000000000037C8                 call    _error
.text:00000000000037CD                 jmp     loc_2EAA
.text:00000000000037D2 ; ---------------------------------------------------------------------------
.text:00000000000037D2
.text:00000000000037D2 loc_37D2:                               ; CODE XREF: change_file_owner+BD4↑j
.text:00000000000037D2                 cmp     r9d, 0FFFFFFFFh
.text:00000000000037D6                 jz      short loc_37E6
.text:00000000000037D8
.text:00000000000037D8 loc_37D8:                               ; CODE XREF: change_file_owner+BC6↑j
.text:00000000000037D8                 cmp     r9d, [rsp+1A8h+var_D8.st_gid]
.text:00000000000037E0                 jnz     loc_36CA
.text:00000000000037E6
.text:00000000000037E6 loc_37E6:                               ; CODE XREF: change_file_owner+CE6↑j
.text:00000000000037E6                 mov     edx, [rsp+1A8h+group] ; group
.text:00000000000037EA                 mov     esi, [rsp+1A8h+owner] ; owner
.text:00000000000037EE                 mov     edi, r8d        ; fd
.text:00000000000037F1                 mov     byte ptr [rsp+1A8h+fd], cl
.text:00000000000037F5                 mov     dword ptr [rsp+1A8h+ptr], r8d
.text:00000000000037FA                 call    _fchown
.text:00000000000037FF                 test    eax, eax
.text:0000000000003801                 mov     r8d, dword ptr [rsp+1A8h+ptr]
.text:0000000000003806                 movzx   ecx, byte ptr [rsp+1A8h+fd]
.text:000000000000380B                 jnz     loc_35B0
.text:0000000000003811                 mov     edi, r8d        ; fd
.text:0000000000003814                 mov     byte ptr [rsp+1A8h+ptr], cl
.text:0000000000003818                 call    _close
.text:000000000000381D                 test    eax, eax
.text:000000000000381F                 jnz     loc_2C5F
.text:0000000000003825                 jmp     loc_36EF
.text:000000000000382A ; ---------------------------------------------------------------------------
.text:000000000000382A
.text:000000000000382A loc_382A:                               ; CODE XREF: change_file_owner+504↑j
.text:000000000000382A                 call    ___stack_chk_fail
.text:000000000000382F ; ---------------------------------------------------------------------------
.text:000000000000382F
.text:000000000000382F loc_382F:                               ; CODE XREF: change_file_owner+106↑j
.text:000000000000382F                                         ; change_file_owner+11D↑j
.text:000000000000382F                 mov     eax, [rbx]
.text:0000000000003831                 mov     r15d, 1
.text:0000000000003837                 cmp     eax, 2
.text:000000000000383A                 jz      loc_2D62
.text:0000000000003840                 test    eax, eax
.text:0000000000003842                 jnz     loc_2D62
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: change_file_owner+B3F↑j
.text:0000000000003848                 test    r13, r13
.text:000000000000384B                 jnz     short loc_3860
.text:000000000000384D                 mov     r15d, 1
.text:0000000000003853                 mov     [rsp+1A8h+fd], 4
.text:000000000000385B                 jmp     loc_2F1F
.text:0000000000003860 ; ---------------------------------------------------------------------------
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: change_file_owner+D5B↑j
.text:0000000000003860                 mov     [rsp+1A8h+fd], 4
.text:0000000000003868                 mov     r15d, 1
.text:000000000000386E                 jmp     loc_2C8B
.text:000000000000386E ; } // starts at 2AF0
.text:000000000000386E change_file_owner endp
.text:000000000000386E
.text:000000000000386E ; ---------------------------------------------------------------------------
.text:0000000000003873                 align 20h
.text:0000000000003880
.text:0000000000003880 ; =============== S U B R O U T I N E =======================================
.text:0000000000003880
.text:0000000000003880
.text:0000000000003880                 public chown_files
.text:0000000000003880 chown_files     proc near               ; CODE XREF: main+385↑p
.text:0000000000003880
.text:0000000000003880 var_3C          = dword ptr -3Ch
.text:0000000000003880 arg_0           = qword ptr  8
.text:0000000000003880
.text:0000000000003880 ; __unwind {
.text:0000000000003880                 push    r15
.text:0000000000003882                 push    r14
.text:0000000000003884                 mov     r15d, ecx
.text:0000000000003887                 push    r13
.text:0000000000003889                 push    r12
.text:000000000000388B                 mov     r13d, r8d
.text:000000000000388E                 push    rbp
.text:000000000000388F                 push    rbx
.text:0000000000003890                 mov     r14d, r9d
.text:0000000000003893                 sub     rsp, 18h
.text:0000000000003897                 cmp     r8d, 0FFFFFFFFh
.text:000000000000389B                 mov     [rsp+48h+var_3C], edx
.text:000000000000389F                 mov     r12, [rsp+48h+arg_0]
.text:00000000000038A4                 jnz     short loc_38B8
.text:00000000000038A6                 cmp     r9d, 0FFFFFFFFh
.text:00000000000038AA                 jnz     short loc_38B8
.text:00000000000038AC                 cmp     byte ptr [r12+10h], 0
.text:00000000000038B2                 jz      loc_3960
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: chown_files+24↑j
.text:00000000000038B8                                         ; chown_files+2A↑j ...
.text:00000000000038B8                 xor     edx, edx
.text:00000000000038BA                 mov     ebx, 1
.text:00000000000038BF                 call    xfts_open
.text:00000000000038C4                 mov     rbp, rax
.text:00000000000038C7                 jmp     short loc_38F2
.text:00000000000038C7 ; ---------------------------------------------------------------------------
.text:00000000000038C9                 align 10h
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: chown_files+7D↓j
.text:00000000000038D0                 sub     rsp, 8
.text:00000000000038D4                 mov     r9d, r14d
.text:00000000000038D7                 mov     r8d, r13d
.text:00000000000038DA                 push    r12
.text:00000000000038DC                 mov     edx, [rsp+58h+var_3C]
.text:00000000000038E0                 mov     ecx, r15d
.text:00000000000038E3                 mov     rsi, rax
.text:00000000000038E6                 mov     rdi, rbp
.text:00000000000038E9                 call    change_file_owner
.text:00000000000038EE                 and     ebx, eax
.text:00000000000038F0                 pop     rax
.text:00000000000038F1                 pop     rdx
.text:00000000000038F2
.text:00000000000038F2 loc_38F2:                               ; CODE XREF: chown_files+47↑j
.text:00000000000038F2                 mov     rdi, rbp
.text:00000000000038F5                 call    rpl_fts_read
.text:00000000000038FA                 test    rax, rax
.text:00000000000038FD                 jnz     short loc_38D0
.text:00000000000038FF                 call    ___errno_location
.text:0000000000003904                 mov     ecx, [rax]
.text:0000000000003906                 mov     r13, rax
.text:0000000000003909                 test    ecx, ecx
.text:000000000000390B                 jz      short loc_3919
.text:000000000000390D                 movzx   ebx, byte ptr [r12+11h]
.text:0000000000003913                 test    bl, bl
.text:0000000000003915                 jz      short loc_3978
.text:0000000000003917                 xor     ebx, ebx
.text:0000000000003919
.text:0000000000003919 loc_3919:                               ; CODE XREF: chown_files+8B↑j
.text:0000000000003919                                         ; chown_files+11B↓j
.text:0000000000003919                 mov     rdi, rbp        ; ptr
.text:000000000000391C                 call    rpl_fts_close
.text:0000000000003921                 test    eax, eax
.text:0000000000003923                 jz      short loc_394A
.text:0000000000003925                 lea     rsi, aFtsCloseFailed ; "fts_close failed"
.text:000000000000392C                 mov     edx, 5          ; category
.text:0000000000003931                 xor     edi, edi        ; domainname
.text:0000000000003933                 xor     ebx, ebx
.text:0000000000003935                 call    _dcgettext
.text:000000000000393A                 mov     esi, [r13+0]    ; errnum
.text:000000000000393E                 mov     rdx, rax        ; format
.text:0000000000003941                 xor     edi, edi        ; status
.text:0000000000003943                 xor     eax, eax
.text:0000000000003945                 call    _error
.text:000000000000394A
.text:000000000000394A loc_394A:                               ; CODE XREF: chown_files+A3↑j
.text:000000000000394A                 add     rsp, 18h
.text:000000000000394E                 mov     eax, ebx
.text:0000000000003950                 pop     rbx
.text:0000000000003951                 pop     rbp
.text:0000000000003952                 pop     r12
.text:0000000000003954                 pop     r13
.text:0000000000003956                 pop     r14
.text:0000000000003958                 pop     r15
.text:000000000000395A                 retn
.text:000000000000395A ; ---------------------------------------------------------------------------
.text:000000000000395B                 align 20h
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: chown_files+32↑j
.text:0000000000003960                 mov     eax, esi
.text:0000000000003962                 or      eax, 8
.text:0000000000003965                 cmp     dword ptr [r12], 2
.text:000000000000396A                 cmovz   esi, eax
.text:000000000000396D                 jmp     loc_38B8
.text:000000000000396D ; ---------------------------------------------------------------------------
.text:0000000000003972                 align 8
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: chown_files+95↑j
.text:0000000000003978                 lea     rsi, aFtsReadFailed ; "fts_read failed"
.text:000000000000397F                 xor     edi, edi        ; domainname
.text:0000000000003981                 mov     edx, 5          ; category
.text:0000000000003986                 call    _dcgettext
.text:000000000000398B                 mov     esi, [r13+0]    ; errnum
.text:000000000000398F                 mov     rdx, rax        ; format
.text:0000000000003992                 xor     edi, edi        ; status
.text:0000000000003994                 xor     eax, eax
.text:0000000000003996                 call    _error
.text:000000000000399B                 jmp     loc_3919
.text:000000000000399B ; } // starts at 3880
.text:000000000000399B chown_files     endp
.text:000000000000399B
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0
.text:00000000000039A0                 public close_stdout_set_file_name
.text:00000000000039A0 close_stdout_set_file_name proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 mov     cs:file_name, rdi
.text:00000000000039A7                 retn
.text:00000000000039A7 ; } // starts at 39A0
.text:00000000000039A7 close_stdout_set_file_name endp
.text:00000000000039A7
.text:00000000000039A7 ; ---------------------------------------------------------------------------
.text:00000000000039A8                 align 10h
.text:00000000000039B0
.text:00000000000039B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039B0
.text:00000000000039B0
.text:00000000000039B0                 public close_stdout_set_ignore_EPIPE
.text:00000000000039B0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000039B0 ; __unwind {
.text:00000000000039B0                 mov     cs:ignore_EPIPE, dil
.text:00000000000039B7                 retn
.text:00000000000039B7 ; } // starts at 39B0
.text:00000000000039B7 close_stdout_set_ignore_EPIPE endp
.text:00000000000039B7
.text:00000000000039B7 ; ---------------------------------------------------------------------------
.text:00000000000039B8                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0 ; Attributes: info_from_lumina
.text:00000000000039C0
.text:00000000000039C0 ; void __cdecl close_stdout()
.text:00000000000039C0                 public close_stdout
.text:00000000000039C0 close_stdout    proc near               ; DATA XREF: main+96↑o
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 push    rbp
.text:00000000000039C1                 push    rbx
.text:00000000000039C2                 sub     rsp, 8
.text:00000000000039C6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000039CD                 call    close_stream
.text:00000000000039D2                 test    eax, eax
.text:00000000000039D4                 jz      short loc_39EC
.text:00000000000039D6                 call    ___errno_location
.text:00000000000039DB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000039E2                 mov     rbx, rax
.text:00000000000039E5                 jz      short loc_3A03
.text:00000000000039E7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000039EA                 jnz     short loc_3A03
.text:00000000000039EC
.text:00000000000039EC loc_39EC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000039EC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000039F3                 call    close_stream
.text:00000000000039F8                 test    eax, eax
.text:00000000000039FA                 jnz     short loc_3A42
.text:00000000000039FC                 add     rsp, 8
.text:0000000000003A00                 pop     rbx
.text:0000000000003A01                 pop     rbp
.text:0000000000003A02                 retn
.text:0000000000003A03 ; ---------------------------------------------------------------------------
.text:0000000000003A03
.text:0000000000003A03 loc_3A03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003A03                                         ; close_stdout+2A↑j
.text:0000000000003A03                 lea     rsi, aWriteError ; "write error"
.text:0000000000003A0A                 xor     edi, edi        ; domainname
.text:0000000000003A0C                 mov     edx, 5          ; category
.text:0000000000003A11                 call    _dcgettext
.text:0000000000003A16                 mov     rdi, cs:file_name
.text:0000000000003A1D                 mov     rbp, rax
.text:0000000000003A20                 test    rdi, rdi
.text:0000000000003A23                 jz      short loc_3A4D
.text:0000000000003A25                 call    quotearg_colon
.text:0000000000003A2A                 mov     esi, [rbx]      ; errnum
.text:0000000000003A2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003A33                 mov     rcx, rax
.text:0000000000003A36                 mov     r8, rbp
.text:0000000000003A39                 xor     edi, edi        ; status
.text:0000000000003A3B                 xor     eax, eax
.text:0000000000003A3D                 call    _error
.text:0000000000003A42
.text:0000000000003A42 loc_3A42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003A42                                         ; close_stdout+A2↓j
.text:0000000000003A42                 mov     edi, cs:exit_failure ; status
.text:0000000000003A48                 call    __exit
.text:0000000000003A4D ; ---------------------------------------------------------------------------
.text:0000000000003A4D
.text:0000000000003A4D loc_3A4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003A4D                 mov     esi, [rbx]      ; errnum
.text:0000000000003A4F                 lea     rdx, format+4   ; format
.text:0000000000003A56                 mov     rcx, rax
.text:0000000000003A59                 xor     edi, edi        ; status
.text:0000000000003A5B                 xor     eax, eax
.text:0000000000003A5D                 call    _error
.text:0000000000003A62                 jmp     short loc_3A42
.text:0000000000003A62 ; } // starts at 39C0
.text:0000000000003A62 close_stdout    endp
.text:0000000000003A62
.text:0000000000003A62 ; ---------------------------------------------------------------------------
.text:0000000000003A64                 align 10h
.text:0000000000003A70
.text:0000000000003A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A70
.text:0000000000003A70 ; Attributes: info_from_lumina
.text:0000000000003A70
.text:0000000000003A70 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000003A70                 public umaxtostr
.text:0000000000003A70 umaxtostr       proc near               ; CODE XREF: gid_to_name+45↑p
.text:0000000000003A70                                         ; uid_to_name+45↑p ...
.text:0000000000003A70 ; __unwind {
.text:0000000000003A70                 lea     rcx, [rsi+14h]
.text:0000000000003A74                 mov     byte ptr [rsi+14h], 0
.text:0000000000003A78                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000003A82                 nop     word ptr [rax+rax+00h]
.text:0000000000003A88
.text:0000000000003A88 loc_3A88:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000003A88                 mov     rax, rdi
.text:0000000000003A8B                 sub     rcx, 1
.text:0000000000003A8F                 mul     rsi
.text:0000000000003A92                 shr     rdx, 3
.text:0000000000003A96                 lea     rax, [rdx+rdx*4]
.text:0000000000003A9A                 add     rax, rax
.text:0000000000003A9D                 sub     rdi, rax
.text:0000000000003AA0                 add     edi, 30h ; '0'
.text:0000000000003AA3                 test    rdx, rdx
.text:0000000000003AA6                 mov     [rcx], dil
.text:0000000000003AA9                 mov     rdi, rdx
.text:0000000000003AAC                 jnz     short loc_3A88
.text:0000000000003AAE                 mov     rax, rcx
.text:0000000000003AB1                 retn
.text:0000000000003AB1 ; } // starts at 3A70
.text:0000000000003AB1 umaxtostr       endp
.text:0000000000003AB1
.text:0000000000003AB1 ; ---------------------------------------------------------------------------
.text:0000000000003AB2                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0
.text:0000000000003AC0                 public set_program_name
.text:0000000000003AC0 set_program_name proc near              ; CODE XREF: main+61↑p
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 test    rdi, rdi
.text:0000000000003AC3                 push    rbx
.text:0000000000003AC4                 jz      short loc_3B3D
.text:0000000000003AC6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000003ACB                 mov     rbx, rdi
.text:0000000000003ACE                 call    _strrchr
.text:0000000000003AD3                 test    rax, rax
.text:0000000000003AD6                 jz      short loc_3B2D
.text:0000000000003AD8                 lea     r8, [rax+1]
.text:0000000000003ADC                 mov     rdx, r8
.text:0000000000003ADF                 sub     rdx, rbx
.text:0000000000003AE2                 cmp     rdx, 6
.text:0000000000003AE6                 jle     short loc_3B2D
.text:0000000000003AE8                 lea     rsi, [rax-6]
.text:0000000000003AEC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003AF3                 mov     ecx, 7
.text:0000000000003AF8                 repe cmpsb
.text:0000000000003AFA                 setnbe  dl
.text:0000000000003AFD                 sbb     dl, 0
.text:0000000000003B00                 test    dl, dl
.text:0000000000003B02                 jnz     short loc_3B2D
.text:0000000000003B04                 lea     rdi, aLt        ; "lt-"
.text:0000000000003B0B                 mov     ecx, 3
.text:0000000000003B10                 mov     rsi, r8
.text:0000000000003B13                 mov     rbx, r8
.text:0000000000003B16                 repe cmpsb
.text:0000000000003B18                 setnbe  dl
.text:0000000000003B1B                 sbb     dl, 0
.text:0000000000003B1E                 test    dl, dl
.text:0000000000003B20                 jnz     short loc_3B2D
.text:0000000000003B22                 lea     rbx, [rax+4]
.text:0000000000003B26                 mov     cs:__bss_start, rbx
.text:0000000000003B2D
.text:0000000000003B2D loc_3B2D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000003B2D                                         ; set_program_name+26↑j ...
.text:0000000000003B2D                 mov     cs:program_name, rbx
.text:0000000000003B34                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000003B3B                 pop     rbx
.text:0000000000003B3C                 retn
.text:0000000000003B3D ; ---------------------------------------------------------------------------
.text:0000000000003B3D
.text:0000000000003B3D loc_3B3D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000003B3D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003B44                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000003B4B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003B50                 mov     esi, 1          ; size
.text:0000000000003B55                 call    _fwrite
.text:0000000000003B5A                 call    _abort
.text:0000000000003B5A ; } // starts at 3AC0
.text:0000000000003B5A set_program_name endp
.text:0000000000003B5A
.text:0000000000003B5A ; ---------------------------------------------------------------------------
.text:0000000000003B5F                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60 ; Attributes: info_from_lumina
.text:0000000000003B60
.text:0000000000003B60 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003B60 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003B60                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 push    rbp
.text:0000000000003B61                 push    rbx
.text:0000000000003B62                 mov     rbp, rdi
.text:0000000000003B65                 mov     ebx, esi
.text:0000000000003B67                 sub     rsp, 8
.text:0000000000003B6B                 call    locale_charset
.text:0000000000003B70                 movzx   edx, byte ptr [rax]
.text:0000000000003B73                 and     edx, 0FFFFFFDFh
.text:0000000000003B76                 cmp     dl, 55h ; 'U'
.text:0000000000003B79                 jz      short loc_3BF0
.text:0000000000003B7B                 cmp     dl, 47h ; 'G'
.text:0000000000003B7E                 jz      short loc_3BA0
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003B80                                         ; gettext_quote+50↓j ...
.text:0000000000003B80                 lea     rax, unk_BAFB
.text:0000000000003B87                 lea     rdx, asc_BAFD   ; "'"
.text:0000000000003B8E                 cmp     ebx, 9
.text:0000000000003B91                 cmovnz  rax, rdx
.text:0000000000003B95                 add     rsp, 8
.text:0000000000003B99                 pop     rbx
.text:0000000000003B9A                 pop     rbp
.text:0000000000003B9B                 retn
.text:0000000000003B9B ; ---------------------------------------------------------------------------
.text:0000000000003B9C                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003BA0                 movzx   edx, byte ptr [rax+1]
.text:0000000000003BA4                 and     edx, 0FFFFFFDFh
.text:0000000000003BA7                 cmp     dl, 42h ; 'B'
.text:0000000000003BAA                 jnz     short loc_3B80
.text:0000000000003BAC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003BB0                 jnz     short loc_3B80
.text:0000000000003BB2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003BB6                 jnz     short loc_3B80
.text:0000000000003BB8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000003BBC                 jnz     short loc_3B80
.text:0000000000003BBE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003BC2                 jnz     short loc_3B80
.text:0000000000003BC4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003BC8                 jnz     short loc_3B80
.text:0000000000003BCA                 cmp     byte ptr [rax+7], 0
.text:0000000000003BCE                 jnz     short loc_3B80
.text:0000000000003BD0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003BD4                 lea     rax, unk_BAF4
.text:0000000000003BDB                 lea     rdx, unk_BAF8
.text:0000000000003BE2                 cmovnz  rax, rdx
.text:0000000000003BE6                 add     rsp, 8
.text:0000000000003BEA                 pop     rbx
.text:0000000000003BEB                 pop     rbp
.text:0000000000003BEC                 retn
.text:0000000000003BEC ; ---------------------------------------------------------------------------
.text:0000000000003BED                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003BF0                 movzx   edx, byte ptr [rax+1]
.text:0000000000003BF4                 and     edx, 0FFFFFFDFh
.text:0000000000003BF7                 cmp     dl, 54h ; 'T'
.text:0000000000003BFA                 jnz     short loc_3B80
.text:0000000000003BFC                 movzx   edx, byte ptr [rax+2]
.text:0000000000003C00                 and     edx, 0FFFFFFDFh
.text:0000000000003C03                 cmp     dl, 46h ; 'F'
.text:0000000000003C06                 jnz     loc_3B80
.text:0000000000003C0C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003C10                 jnz     loc_3B80
.text:0000000000003C16                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000003C1A                 jnz     loc_3B80
.text:0000000000003C20                 cmp     byte ptr [rax+5], 0
.text:0000000000003C24                 jnz     loc_3B80
.text:0000000000003C2A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003C2E                 lea     rax, unk_BAEC
.text:0000000000003C35                 lea     rdx, unk_BAF0
.text:0000000000003C3C                 cmovnz  rax, rdx
.text:0000000000003C40                 add     rsp, 8
.text:0000000000003C44                 pop     rbx
.text:0000000000003C45                 pop     rbp
.text:0000000000003C46                 retn
.text:0000000000003C46 ; } // starts at 3B60
.text:0000000000003C46 gettext_quote   endp
.text:0000000000003C46
.text:0000000000003C46 ; ---------------------------------------------------------------------------
.text:0000000000003C47                 align 10h
.text:0000000000003C50
.text:0000000000003C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C50
.text:0000000000003C50 ; Attributes: info_from_lumina
.text:0000000000003C50
.text:0000000000003C50 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003C50 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003C50                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003C50
.text:0000000000003C50 var_E0          = dword ptr -0E0h
.text:0000000000003C50 var_DB          = byte ptr -0DBh
.text:0000000000003C50 var_DA          = byte ptr -0DAh
.text:0000000000003C50 var_D9          = byte ptr -0D9h
.text:0000000000003C50 s               = qword ptr -0D8h
.text:0000000000003C50 n               = qword ptr -0D0h
.text:0000000000003C50 var_C8          = qword ptr -0C8h
.text:0000000000003C50 ps              = qword ptr -0C0h
.text:0000000000003C50 var_B8          = qword ptr -0B8h
.text:0000000000003C50 var_B0          = qword ptr -0B0h
.text:0000000000003C50 var_A8          = qword ptr -0A8h
.text:0000000000003C50 s2              = qword ptr -0A0h
.text:0000000000003C50 var_98          = qword ptr -98h
.text:0000000000003C50 var_90          = qword ptr -90h
.text:0000000000003C50 var_88          = qword ptr -88h
.text:0000000000003C50 var_80          = qword ptr -80h
.text:0000000000003C50 var_78          = qword ptr -78h
.text:0000000000003C50 var_70          = dword ptr -70h
.text:0000000000003C50 var_6C          = byte ptr -6Ch
.text:0000000000003C50 var_6B          = byte ptr -6Bh
.text:0000000000003C50 var_6A          = byte ptr -6Ah
.text:0000000000003C50 var_69          = byte ptr -69h
.text:0000000000003C50 var_68          = qword ptr -68h
.text:0000000000003C50 var_60          = qword ptr -60h
.text:0000000000003C50 wc              = dword ptr -4Ch
.text:0000000000003C50 var_48          = qword ptr -48h
.text:0000000000003C50 var_40          = qword ptr -40h
.text:0000000000003C50 arg_0           = qword ptr  8
.text:0000000000003C50 arg_8           = qword ptr  10h
.text:0000000000003C50 arg_10          = qword ptr  18h
.text:0000000000003C50
.text:0000000000003C50 ; __unwind {
.text:0000000000003C50                 push    r15
.text:0000000000003C52                 push    r14
.text:0000000000003C54                 mov     r15d, r8d
.text:0000000000003C57                 push    r13
.text:0000000000003C59                 push    r12
.text:0000000000003C5B                 mov     r14, rdi
.text:0000000000003C5E                 push    rbp
.text:0000000000003C5F                 push    rbx
.text:0000000000003C60                 mov     ebx, r9d
.text:0000000000003C63                 mov     r13, rsi
.text:0000000000003C66                 mov     rbp, rcx
.text:0000000000003C69                 and     ebx, 2
.text:0000000000003C6C                 sub     rsp, 0B8h
.text:0000000000003C73                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000003C7B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003C80                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003C85                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000003C8A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000003C8F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003C97                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003C9C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003CA4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003CA9                 mov     rax, fs:28h
.text:0000000000003CB2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000003CBA                 xor     eax, eax
.text:0000000000003CBC                 call    ___ctype_get_mb_cur_max
.text:0000000000003CC1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003CC5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000003CCA                 ja      def_3CE1        ; jumptable 00000000000121F1 default case
.text:0000000000003CD0                 lea     rcx, jpt_3CE1
.text:0000000000003CD7                 mov     edx, r15d
.text:0000000000003CDA                 movsxd  rax, ds:(jpt_3CE1 - 0BB60h)[rcx+rdx*4]
.text:0000000000003CDE                 add     rax, rcx
.text:0000000000003CE1                 jmp     rax             ; switch jump
.text:0000000000003CE3 ; ---------------------------------------------------------------------------
.text:0000000000003CE3
.text:0000000000003CE3 loc_3CE3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CE3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003CE3                                         ; DATA XREF: ...
.text:0000000000003CE3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003CE8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CED                 xor     r12d, r12d
.text:0000000000003CF0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CF9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CFE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003D03
.text:0000000000003D03 loc_3D03:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003D03                 lea     rax, asc_BAFD   ; "'"
.text:0000000000003D0A                 mov     [rsp+0E8h+n], 1
.text:0000000000003D13                 xor     r15d, r15d
.text:0000000000003D16                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003D1E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D23
.text:0000000000003D23 loc_3D23:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003D23                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003D23                 xor     r11d, r11d
.text:0000000000003D26                 mov     rax, rbp
.text:0000000000003D29                 mov     r8d, r12d
.text:0000000000003D2C                 mov     rbp, r11
.text:0000000000003D2F                 mov     r11, rax
.text:0000000000003D32                 nop     word ptr [rax+rax+00h]
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003D38                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003D38                 cmp     r11, rbp
.text:0000000000003D3B                 setnz   r12b
.text:0000000000003D3F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D43                 jnz     short loc_3D52
.text:0000000000003D45                 mov     rax, [rsp+0E8h+s]
.text:0000000000003D4A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000003D4E                 setnz   r12b
.text:0000000000003D52
.text:0000000000003D52 loc_3D52:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003D52                 test    r12b, r12b
.text:0000000000003D55                 jz      loc_43B0
.text:0000000000003D5B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D60                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003D65                 lea     r9, [rdi+rbp]
.text:0000000000003D69                 setnz   al
.text:0000000000003D6C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003D70                 mov     r10d, eax
.text:0000000000003D73                 jz      loc_3E20
.text:0000000000003D79                 mov     rax, [rsp+0E8h+n]
.text:0000000000003D7E                 test    rax, rax
.text:0000000000003D81                 jz      loc_41B0
.text:0000000000003D87                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D8B                 lea     rbx, [rbp+rax+0]
.text:0000000000003D90                 jnz     short loc_3DC0
.text:0000000000003D92                 cmp     rax, 1
.text:0000000000003D96                 jbe     short loc_3DC0
.text:0000000000003D98                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003D9D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003DA2                 mov     [rsp+0E8h+ps], r9
.text:0000000000003DA7                 call    _strlen
.text:0000000000003DAC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003DB2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003DB8                 mov     r11, rax
.text:0000000000003DBB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003DC0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003DC0                 cmp     rbx, r11
.text:0000000000003DC3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003DC8                 ja      loc_4380
.text:0000000000003DCE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003DD3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003DD8                 mov     rdi, r9         ; s1
.text:0000000000003DDB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003DE0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003DE5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003DEA                 call    _memcmp
.text:0000000000003DEF                 test    eax, eax
.text:0000000000003DF1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003DF6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003DFC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003E01                 jnz     loc_4380
.text:0000000000003E07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003E12                 jnz     loc_4D95
.text:0000000000003E18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003E20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003E20                 movzx   ebx, byte ptr [r9]
.text:0000000000003E24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003E27                 ja      def_3E3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003E2D                 lea     rcx, jpt_3E3E
.text:0000000000003E34                 movzx   edx, bl
.text:0000000000003E37                 movsxd  rax, ds:(jpt_3E3E - 0BB8Ch)[rcx+rdx*4]
.text:0000000000003E3B                 add     rax, rcx
.text:0000000000003E3E                 jmp     rax             ; switch jump
.text:0000000000003E40 ; ---------------------------------------------------------------------------
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003E40                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000003E40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003E43
.text:0000000000003E43 loc_3E43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E43                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000003E43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003E47                 setnz   al
.text:0000000000003E4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E4E                 jnz     short loc_3E5C
.text:0000000000003E50                 mov     rax, [rsp+0E8h+s]
.text:0000000000003E55                 cmp     byte ptr [rax+1], 0
.text:0000000000003E59                 setnz   al
.text:0000000000003E5C
.text:0000000000003E5C loc_3E5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003E5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E61                 setz    dl
.text:0000000000003E64                 test    al, al
.text:0000000000003E66                 jz      loc_40B8
.text:0000000000003E6C
.text:0000000000003E6C loc_3E6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003E6C                 xor     r12d, r12d
.text:0000000000003E6F                 xor     eax, eax
.text:0000000000003E71                 nop     dword ptr [rax+00000000h]
.text:0000000000003E78
.text:0000000000003E78 loc_3E78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003E78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003E78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003E7D                 jnz     loc_3F92
.text:0000000000003E83                 test    dl, dl
.text:0000000000003E85                 jnz     loc_3F92
.text:0000000000003E8B
.text:0000000000003E8B loc_3E8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003E8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003E90                 test    rsi, rsi
.text:0000000000003E93                 jz      short loc_3EA9
.text:0000000000003E95                 mov     edx, ebx
.text:0000000000003E97                 shr     dl, 5
.text:0000000000003E9A                 movzx   edx, dl
.text:0000000000003E9D                 mov     edx, [rsi+rdx*4]
.text:0000000000003EA0                 bt      edx, ebx
.text:0000000000003EA3                 jb      loc_3FF3
.text:0000000000003EA9
.text:0000000000003EA9 loc_3EA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003EA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003EA9                 test    r10b, r10b
.text:0000000000003EAC                 jnz     loc_3FF3
.text:0000000000003EB2                 xor     eax, 1
.text:0000000000003EB5                 add     rbp, 1
.text:0000000000003EB9                 and     eax, r8d
.text:0000000000003EBC
.text:0000000000003EBC loc_3EBC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003EBC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003EBC                 test    al, al
.text:0000000000003EBE                 jz      short loc_3EE0
.text:0000000000003EC0                 cmp     r13, r15
.text:0000000000003EC3                 jbe     short loc_3ECA
.text:0000000000003EC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003ECA
.text:0000000000003ECA loc_3ECA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003ECA                 lea     rax, [r15+1]
.text:0000000000003ECE                 cmp     r13, rax
.text:0000000000003ED1                 jbe     short loc_3ED9
.text:0000000000003ED3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003ED9
.text:0000000000003ED9 loc_3ED9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003ED9                 add     r15, 2
.text:0000000000003EDD                 xor     r8d, r8d
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003EE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003EE0                 cmp     r15, r13
.text:0000000000003EE3                 jnb     short loc_3EE9
.text:0000000000003EE5                 mov     [r14+r15], bl
.text:0000000000003EE9
.text:0000000000003EE9 loc_3EE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003EE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003EEE                 add     r15, 1
.text:0000000000003EF2                 mov     eax, 0
.text:0000000000003EF7                 test    r12b, r12b
.text:0000000000003EFA                 cmovz   edi, eax
.text:0000000000003EFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003F02                 jmp     loc_3D38
.text:0000000000003F02 ; ---------------------------------------------------------------------------
.text:0000000000003F07                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003F10                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000003F10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003F13
.text:0000000000003F13 loc_3F13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F13                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000003F13                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003F17                 cmp     eax, 2
.text:0000000000003F1A                 jz      loc_44D8
.text:0000000000003F20                 cmp     eax, 5
.text:0000000000003F23                 jz      loc_4498
.text:0000000000003F29                 cmp     eax, 2
.text:0000000000003F2C                 mov     ebx, 3Fh ; '?'
.text:0000000000003F31                 setz    dl
.text:0000000000003F34                 xor     r12d, r12d
.text:0000000000003F37                 xor     eax, eax
.text:0000000000003F39                 jmp     loc_3E78
.text:0000000000003F39 ; ---------------------------------------------------------------------------
.text:0000000000003F3E                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003F40                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000003F40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003F43
.text:0000000000003F43 loc_3F43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F43                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000003F43                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003F48                 jz      loc_4450
.text:0000000000003F4E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003F53                 xor     edx, edx
.text:0000000000003F55                 xor     eax, eax
.text:0000000000003F57                 mov     ebx, 27h ; '''
.text:0000000000003F5C                 jmp     loc_3E78
.text:0000000000003F5C ; ---------------------------------------------------------------------------
.text:0000000000003F61                 align 8
.text:0000000000003F68
.text:0000000000003F68 loc_3F68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F68                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000003F68                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003F6D                 mov     ebx, 74h ; 't'
.text:0000000000003F72
.text:0000000000003F72 loc_3F72:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003F72                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003F72                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F77                 setz    al
.text:0000000000003F7A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003F7E                 jnz     loc_40CE
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003F84                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003F84                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003F89                 jnz     short loc_3FF0
.text:0000000000003F8B
.text:0000000000003F8B loc_3F8B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003F8B                 mov     ebx, edx
.text:0000000000003F8D                 xor     r12d, r12d
.text:0000000000003F90                 xor     eax, eax
.text:0000000000003F92
.text:0000000000003F92 loc_3F92:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003F92                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003F92                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F97                 jnz     loc_3E8B
.text:0000000000003F9D                 jmp     loc_3EA9
.text:0000000000003F9D ; ---------------------------------------------------------------------------
.text:0000000000003FA2                 align 8
.text:0000000000003FA8
.text:0000000000003FA8 loc_3FA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003FA8                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000003FA8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003FAD                 mov     ebx, 62h ; 'b'
.text:0000000000003FB2                 jmp     short loc_3F84
.text:0000000000003FB2 ; ---------------------------------------------------------------------------
.text:0000000000003FB4                 align 8
.text:0000000000003FB8
.text:0000000000003FB8 loc_3FB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003FB8                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000003FB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003FBD                 jz      loc_4390
.text:0000000000003FC3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003FC8                 jz      loc_41E0
.text:0000000000003FCE
.text:0000000000003FCE loc_3FCE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003FCE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003FD3                 jz      loc_41E0
.text:0000000000003FD9                 cmp     [rsp+0E8h+n], 0
.text:0000000000003FDF                 jnz     loc_439B
.text:0000000000003FE5                 mov     ebx, 5Ch ; '\'
.text:0000000000003FEA                 nop     word ptr [rax+rax+00h]
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003FF0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003FF0                 xor     r12d, r12d
.text:0000000000003FF3
.text:0000000000003FF3 loc_3FF3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003FF3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003FF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003FF8                 setz    dl
.text:0000000000003FFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004000                 mov     eax, edx
.text:0000000000004002                 jnz     loc_4858
.text:0000000000004008                 mov     eax, r8d
.text:000000000000400B                 xor     eax, 1
.text:000000000000400E                 and     al, dl
.text:0000000000004010                 jz      short loc_4041
.text:0000000000004012                 cmp     r13, r15
.text:0000000000004015                 jbe     short loc_401C
.text:0000000000004017                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000401C
.text:000000000000401C loc_401C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000401C                 lea     rdx, [r15+1]
.text:0000000000004020                 cmp     r13, rdx
.text:0000000000004023                 jbe     short loc_402B
.text:0000000000004025                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000402B
.text:000000000000402B loc_402B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000402B                 lea     rdx, [r15+2]
.text:000000000000402F                 cmp     r13, rdx
.text:0000000000004032                 jbe     short loc_403A
.text:0000000000004034                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000403A
.text:000000000000403A loc_403A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000403A                 add     r15, 3
.text:000000000000403E                 mov     r8d, eax
.text:0000000000004041
.text:0000000000004041 loc_4041:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004041                 cmp     r13, r15
.text:0000000000004044                 jbe     short loc_404B
.text:0000000000004046                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000404B
.text:000000000000404B loc_404B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000404B                 add     r15, 1
.text:000000000000404F                 add     rbp, 1
.text:0000000000004053                 jmp     loc_3EE0
.text:0000000000004053 ; ---------------------------------------------------------------------------
.text:0000000000004058                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004060                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000004060                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004065                 jnz     loc_4233
.text:000000000000406B                 xor     edx, edx
.text:000000000000406D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004072                 jz      loc_3F8B
.text:0000000000004078                 add     rbp, 1
.text:000000000000407C                 jmp     loc_3D38
.text:000000000000407C ; ---------------------------------------------------------------------------
.text:0000000000004081                 align 8
.text:0000000000004088
.text:0000000000004088 loc_4088:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004088                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000004088                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000408D                 setz    dl
.text:0000000000004090                 xor     eax, eax
.text:0000000000004092                 jmp     loc_3E78
.text:0000000000004092 ; ---------------------------------------------------------------------------
.text:0000000000004097                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000040A0                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:00000000000040A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000040A5                 mov     ebx, 61h ; 'a'
.text:00000000000040AA                 jmp     loc_3F84
.text:00000000000040AA ; ---------------------------------------------------------------------------
.text:00000000000040AF                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000040B0                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:00000000000040B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000040B5                 setz    dl
.text:00000000000040B8
.text:00000000000040B8 loc_40B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000040B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000040B8                 test    rbp, rbp
.text:00000000000040BB                 jnz     loc_3E6C
.text:00000000000040C1
.text:00000000000040C1 loc_40C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000040C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000040C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000040C6                 and     al, dl
.text:00000000000040C8                 jz      loc_3E78
.text:00000000000040CE
.text:00000000000040CE loc_40CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000040CE                 mov     rbp, r11
.text:00000000000040D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000040D9                 jmp     loc_47D9
.text:00000000000040D9 ; ---------------------------------------------------------------------------
.text:00000000000040DE                 align 20h
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000040E0                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:00000000000040E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000040E5                 setz    dl
.text:00000000000040E8                 xor     r12d, r12d
.text:00000000000040EB                 jmp     short loc_40C1
.text:00000000000040EB ; ---------------------------------------------------------------------------
.text:00000000000040ED                 align 10h
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000040F0                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:00000000000040F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000040F5                 mov     ebx, 20h ; ' '
.text:00000000000040FA                 setz    dl
.text:00000000000040FD                 jmp     short loc_40C1
.text:00000000000040FD ; ---------------------------------------------------------------------------
.text:00000000000040FF                 align 20h
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004100                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000004100                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004105                 mov     ebx, 72h ; 'r'
.text:000000000000410A                 jmp     loc_3F72
.text:000000000000410A ; ---------------------------------------------------------------------------
.text:000000000000410F                 align 10h
.text:0000000000004110
.text:0000000000004110 loc_4110:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004110                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000004110                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004115                 mov     ebx, 66h ; 'f'
.text:000000000000411A                 jmp     loc_3F84
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411F                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004120                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000004120                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004125                 mov     ebx, 76h ; 'v'
.text:000000000000412A                 jmp     loc_3F84
.text:000000000000412A ; ---------------------------------------------------------------------------
.text:000000000000412F                 align 10h
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004130                                         ; DATA XREF: .rodata:jpt_3E3E↓o
.text:0000000000004130                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004135                 mov     ebx, 6Eh ; 'n'
.text:000000000000413A                 jmp     loc_3F72
.text:000000000000413A ; ---------------------------------------------------------------------------
.text:000000000000413F                 align 20h
.text:0000000000004140
.text:0000000000004140 def_41CA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004140                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004140                                         ; DATA XREF: ...
.text:0000000000004140                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004143                 nop     dword ptr [rax+rax+00h]
.text:0000000000004148
.text:0000000000004148 def_3E3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004148                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004148                                         ; DATA XREF: ...
.text:0000000000004148                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000414E                 jnz     loc_44F8
.text:0000000000004154                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004159                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000415E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004163                 call    ___ctype_b_loc
.text:0000000000004168                 mov     rcx, [rax]
.text:000000000000416B                 movzx   edx, bl
.text:000000000000416E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004174                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000417A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000417F                 mov     edi, 1
.text:0000000000004184                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004188                 and     ax, 4000h
.text:000000000000418C                 setnz   r12b
.text:0000000000004190                 setz    al
.text:0000000000004193                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004197
.text:0000000000004197 loc_4197:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004197                 test    al, al
.text:0000000000004199                 jnz     loc_4B31
.text:000000000000419F                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000041A4                 setz    dl
.text:00000000000041A7                 jmp     loc_3E78
.text:00000000000041A7 ; ---------------------------------------------------------------------------
.text:00000000000041AC                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000041B0                 movzx   ebx, byte ptr [r9]
.text:00000000000041B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000041B7                 ja      short def_41CA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000041B9                 lea     rcx, jpt_41CA
.text:00000000000041C0                 movzx   edx, bl
.text:00000000000041C3                 movsxd  rax, ds:(jpt_41CA - 0BD88h)[rcx+rdx*4]
.text:00000000000041C7                 add     rax, rcx
.text:00000000000041CA                 jmp     rax             ; switch jump
.text:00000000000041CA ; ---------------------------------------------------------------------------
.text:00000000000041CC                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041D0                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:00000000000041D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000041D3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000041D8                 jnz     loc_3FCE
.text:00000000000041DE                 xchg    ax, ax
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000041E0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000041E0                 mov     edx, 5Ch ; '\'
.text:00000000000041E5                 mov     ebx, 5Ch ; '\'
.text:00000000000041EA                 jmp     loc_3F84
.text:00000000000041EA ; ---------------------------------------------------------------------------
.text:00000000000041EF                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041F0                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:00000000000041F0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000041F5                 xor     r10d, r10d
.text:00000000000041F8                 mov     ebx, 66h ; 'f'
.text:00000000000041FD                 jmp     loc_3F84
.text:00000000000041FD ; ---------------------------------------------------------------------------
.text:0000000000004202                 align 8
.text:0000000000004208
.text:0000000000004208 loc_4208:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004208                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004208                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000420D                 xor     r10d, r10d
.text:0000000000004210                 mov     ebx, 6Eh ; 'n'
.text:0000000000004215                 jmp     loc_3F72
.text:0000000000004215 ; ---------------------------------------------------------------------------
.text:000000000000421A                 align 20h
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004220                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004220                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004225                 jmp     loc_3FF0
.text:0000000000004225 ; ---------------------------------------------------------------------------
.text:000000000000422A                 align 10h
.text:0000000000004230
.text:0000000000004230 loc_4230:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004230                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004230                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004233
.text:0000000000004233 loc_4233:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004233                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004238                 setz    dl
.text:000000000000423B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004240                 jnz     loc_4DDA
.text:0000000000004246                 mov     eax, r8d
.text:0000000000004249                 mov     rcx, r15
.text:000000000000424C                 xor     eax, 1
.text:000000000000424F                 and     al, dl
.text:0000000000004251                 jz      short loc_4280
.text:0000000000004253                 cmp     r13, r15
.text:0000000000004256                 jbe     short loc_425D
.text:0000000000004258                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000425D
.text:000000000000425D loc_425D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000425D                 lea     rcx, [r15+1]
.text:0000000000004261                 cmp     r13, rcx
.text:0000000000004264                 jbe     short loc_426C
.text:0000000000004266                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000426C
.text:000000000000426C loc_426C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000426C                 lea     rcx, [r15+2]
.text:0000000000004270                 cmp     r13, rcx
.text:0000000000004273                 ja      loc_48A9
.text:0000000000004279
.text:0000000000004279 loc_4279:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004279                 lea     rcx, [r15+3]
.text:000000000000427D                 mov     r8d, eax
.text:0000000000004280
.text:0000000000004280 loc_4280:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004280                 cmp     r13, rcx
.text:0000000000004283                 jbe     short loc_428A
.text:0000000000004285                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000428A
.text:000000000000428A loc_428A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000428A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000428F                 lea     r15, [rcx+1]
.text:0000000000004293                 jz      loc_4899
.text:0000000000004299                 lea     rax, [rbp+1]
.text:000000000000429D                 cmp     rax, r11
.text:00000000000042A0                 jnb     short loc_42BB
.text:00000000000042A2                 mov     rax, [rsp+0E8h+s]
.text:00000000000042A7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000042AC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000042B0                 sub     eax, 30h ; '0'
.text:00000000000042B3                 cmp     al, 9
.text:00000000000042B5                 jbe     loc_4AE9
.text:00000000000042BB
.text:00000000000042BB loc_42BB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000042BB                 mov     eax, r12d
.text:00000000000042BE                 mov     ebx, 30h ; '0'
.text:00000000000042C3                 xor     r12d, r12d
.text:00000000000042C6                 jmp     loc_3E78
.text:00000000000042C6 ; ---------------------------------------------------------------------------
.text:00000000000042CB                 align 10h
.text:00000000000042D0
.text:00000000000042D0 loc_42D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000042D0                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:00000000000042D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000042D5                 mov     r12d, r10d
.text:00000000000042D8                 setz    dl
.text:00000000000042DB                 xor     r10d, r10d
.text:00000000000042DE                 xor     eax, eax
.text:00000000000042E0                 jmp     loc_3E78
.text:00000000000042E0 ; ---------------------------------------------------------------------------
.text:00000000000042E5                 align 8
.text:00000000000042E8
.text:00000000000042E8 loc_42E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000042E8                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:00000000000042E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000042ED                 setz    dl
.text:00000000000042F0                 xor     r10d, r10d
.text:00000000000042F3                 jmp     loc_40B8
.text:00000000000042F3 ; ---------------------------------------------------------------------------
.text:00000000000042F8                 align 20h
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004300                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004300                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004305                 setz    dl
.text:0000000000004308                 xor     r10d, r10d
.text:000000000000430B                 xor     r12d, r12d
.text:000000000000430E                 jmp     loc_40C1
.text:000000000000430E ; ---------------------------------------------------------------------------
.text:0000000000004313                 align 8
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004318                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004318                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000431D                 mov     r12d, r10d
.text:0000000000004320                 mov     ebx, 20h ; ' '
.text:0000000000004325                 setz    dl
.text:0000000000004328                 xor     r10d, r10d
.text:000000000000432B                 jmp     loc_40C1
.text:0000000000004330 ; ---------------------------------------------------------------------------
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004330                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004330                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004335                 xor     r10d, r10d
.text:0000000000004338                 mov     ebx, 72h ; 'r'
.text:000000000000433D                 jmp     loc_3F72
.text:000000000000433D ; ---------------------------------------------------------------------------
.text:0000000000004342                 align 8
.text:0000000000004348
.text:0000000000004348 loc_4348:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004348                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004348                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000434D                 jmp     loc_3FF0
.text:000000000000434D ; ---------------------------------------------------------------------------
.text:0000000000004352                 align 8
.text:0000000000004358
.text:0000000000004358 loc_4358:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004358                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004358                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000435D                 xor     r10d, r10d
.text:0000000000004360                 mov     ebx, 74h ; 't'
.text:0000000000004365                 jmp     loc_3F72
.text:0000000000004365 ; ---------------------------------------------------------------------------
.text:000000000000436A                 align 10h
.text:0000000000004370
.text:0000000000004370 loc_4370:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004370                                         ; DATA XREF: .rodata:jpt_41CA↓o
.text:0000000000004370                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004375                 jmp     loc_3FF0
.text:0000000000004375 ; ---------------------------------------------------------------------------
.text:000000000000437A                 align 20h
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004380                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004380                 xor     r10d, r10d
.text:0000000000004383                 jmp     loc_3E20
.text:0000000000004383 ; ---------------------------------------------------------------------------
.text:0000000000004388                 align 10h
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004390                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004395                 jnz     loc_4D00
.text:000000000000439B
.text:000000000000439B loc_439B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000439B                 add     rbp, 1
.text:000000000000439F                 mov     eax, r8d
.text:00000000000043A2                 xor     r12d, r12d
.text:00000000000043A5                 mov     ebx, 5Ch ; '\'
.text:00000000000043AA                 jmp     loc_3EBC
.text:00000000000043AA ; ---------------------------------------------------------------------------
.text:00000000000043AF                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000043B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000043B5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000043BA                 mov     r12d, r8d
.text:00000000000043BD                 mov     rbp, r11
.text:00000000000043C0                 setz    dl
.text:00000000000043C3                 mov     eax, ebx
.text:00000000000043C5                 test    r15, r15
.text:00000000000043C8                 setz    cl
.text:00000000000043CB                 and     eax, edx
.text:00000000000043CD                 and     al, cl
.text:00000000000043CF                 jnz     loc_4E36
.text:00000000000043D5                 mov     eax, ebx
.text:00000000000043D7                 xor     eax, 1
.text:00000000000043DA                 and     dl, al
.text:00000000000043DC                 jz      loc_4D4C
.text:00000000000043E2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000043E7                 jz      loc_4D4A
.text:00000000000043ED                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000043F2                 jnz     loc_4DED
.text:00000000000043F8                 test    r13, r13
.text:00000000000043FB                 setz    al
.text:00000000000043FE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004404                 setnz   dl
.text:0000000000004407                 and     al, dl
.text:0000000000004409                 jz      loc_4E2C
.text:000000000000440F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004414
.text:0000000000004414 loc_4414:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004414                 lea     rbx, asc_BAFD   ; "'"
.text:000000000000441B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000441F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004427                 mov     r15d, 1
.text:000000000000442D                 mov     [rsp+0E8h+n], 1
.text:0000000000004436                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000443B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004440                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004444                 jmp     loc_3D23
.text:0000000000004444 ; ---------------------------------------------------------------------------
.text:0000000000004449                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004450                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004455                 jnz     loc_4D00
.text:000000000000445B                 test    r13, r13
.text:000000000000445E                 jz      loc_4860
.text:0000000000004464                 xor     edx, edx
.text:0000000000004466                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000446C                 jnz     loc_4860
.text:0000000000004472
.text:0000000000004472 loc_4472:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004472                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004472                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004477                 add     r15, 3
.text:000000000000447B                 xor     eax, eax
.text:000000000000447D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004482                 xor     r8d, r8d
.text:0000000000004485                 mov     r13, rdx
.text:0000000000004488                 mov     ebx, 27h ; '''
.text:000000000000448D                 jmp     loc_3EA9
.text:000000000000448D ; ---------------------------------------------------------------------------
.text:0000000000004492                 align 8
.text:0000000000004498
.text:0000000000004498 loc_4498:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004498                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000449D                 jz      short loc_44C0
.text:000000000000449F                 lea     rcx, [rbp+2]
.text:00000000000044A3                 cmp     rcx, r11
.text:00000000000044A6                 jnb     short loc_44C0
.text:00000000000044A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000044AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000044B2                 jz      loc_4C42
.text:00000000000044B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000044C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000044C0                 xor     edx, edx
.text:00000000000044C2                 xor     r12d, r12d
.text:00000000000044C5                 xor     eax, eax
.text:00000000000044C7                 mov     ebx, 3Fh ; '?'
.text:00000000000044CC                 jmp     loc_3E78
.text:00000000000044CC ; ---------------------------------------------------------------------------
.text:00000000000044D1                 align 8
.text:00000000000044D8
.text:00000000000044D8 loc_44D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000044D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000044DD                 jnz     loc_4D00
.text:00000000000044E3                 xor     r12d, r12d
.text:00000000000044E6                 xor     eax, eax
.text:00000000000044E8                 mov     ebx, 3Fh ; '?'
.text:00000000000044ED                 jmp     loc_3EA9
.text:00000000000044ED ; ---------------------------------------------------------------------------
.text:00000000000044F2                 align 8
.text:00000000000044F8
.text:00000000000044F8 loc_44F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000044F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004500                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004504                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004510                 mov     [rsp+0E8h+ps], rax
.text:0000000000004515                 jnz     short loc_4544
.text:0000000000004517                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000451C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004521                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004526                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000452B                 call    _strlen
.text:0000000000004530                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004536                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000453C                 mov     r11, rax
.text:000000000000453F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004544
.text:0000000000004544 loc_4544:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004544                 lea     rax, [rsp+0E8h+wc]
.text:000000000000454C                 xor     ecx, ecx
.text:000000000000454E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004552                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004557                 mov     rbx, rcx
.text:000000000000455A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004562                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004567                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000456C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004574                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004579                 mov     [rsp+0E8h+var_78], r13
.text:000000000000457E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004583
.text:0000000000004583 loc_4583:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004583                 mov     rax, [rsp+0E8h+s]
.text:0000000000004588                 lea     r14, [rbp+rbx+0]
.text:000000000000458D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004592                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004597                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000459C                 lea     r13, [rax+r14]
.text:00000000000045A0                 sub     rdx, r14
.text:00000000000045A3                 mov     rsi, r13
.text:00000000000045A6                 call    rpl_mbrtowc
.text:00000000000045AB                 test    rax, rax
.text:00000000000045AE                 mov     r15, rax
.text:00000000000045B1                 jz      short loc_4601
.text:00000000000045B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000045B7                 jz      loc_4BD5
.text:00000000000045BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000045C1                 jz      loc_4B61
.text:00000000000045C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000045CC                 setz    al
.text:00000000000045CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000045D3                 jnz     loc_4770
.text:00000000000045D9
.text:00000000000045D9 loc_45D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000045D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000045D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000045E0                 call    _iswprint
.text:00000000000045E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000045EA                 test    eax, eax
.text:00000000000045EC                 mov     eax, 0
.text:00000000000045F1                 cmovz   r12d, eax
.text:00000000000045F5                 add     rbx, r15
.text:00000000000045F8                 call    _mbsinit
.text:00000000000045FD                 test    eax, eax
.text:00000000000045FF                 jz      short loc_4583
.text:0000000000004601
.text:0000000000004601 loc_4601:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004601                 mov     edx, r12d
.text:0000000000004604                 mov     rdi, rbx
.text:0000000000004607                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000460D                 xor     edx, 1
.text:0000000000004610                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004615                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000461B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000461F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004627                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000462C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004631                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004636
.text:0000000000004636 loc_4636:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004636                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004636                 cmp     rdi, 1
.text:000000000000463A                 jbe     loc_4C3B
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004640                 mov     rcx, rdi
.text:0000000000004643                 xor     esi, esi
.text:0000000000004645                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000464B                 add     rcx, rbp
.text:000000000000464E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004653                 jmp     loc_470E
.text:0000000000004653 ; ---------------------------------------------------------------------------
.text:0000000000004658                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004660                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004665                 setz    al
.text:0000000000004668                 test    r9b, r9b
.text:000000000000466B                 jnz     loc_4B20
.text:0000000000004671                 mov     esi, r8d
.text:0000000000004674                 xor     esi, 1
.text:0000000000004677                 and     al, sil
.text:000000000000467A                 jz      short loc_46AB
.text:000000000000467C                 cmp     r13, r15
.text:000000000000467F                 jbe     short loc_4686
.text:0000000000004681                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004686
.text:0000000000004686 loc_4686:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004686                 lea     rsi, [r15+1]
.text:000000000000468A                 cmp     r13, rsi
.text:000000000000468D                 jbe     short loc_4695
.text:000000000000468F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004695
.text:0000000000004695 loc_4695:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004695                 lea     rsi, [r15+2]
.text:0000000000004699                 cmp     r13, rsi
.text:000000000000469C                 jbe     short loc_46A4
.text:000000000000469E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000046A4
.text:00000000000046A4 loc_46A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000046A4                 add     r15, 3
.text:00000000000046A8                 mov     r8d, eax
.text:00000000000046AB
.text:00000000000046AB loc_46AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000046AB                 cmp     r13, r15
.text:00000000000046AE                 jbe     short loc_46B5
.text:00000000000046B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000046B5
.text:00000000000046B5 loc_46B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000046B5                 lea     rax, [r15+1]
.text:00000000000046B9                 cmp     r13, rax
.text:00000000000046BC                 jbe     short loc_46CB
.text:00000000000046BE                 mov     eax, ebx
.text:00000000000046C0                 shr     al, 6
.text:00000000000046C3                 add     eax, 30h ; '0'
.text:00000000000046C6                 mov     [r14+r15+1], al
.text:00000000000046CB
.text:00000000000046CB loc_46CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000046CB                 lea     rax, [r15+2]
.text:00000000000046CF                 cmp     r13, rax
.text:00000000000046D2                 jbe     short loc_46E4
.text:00000000000046D4                 mov     eax, ebx
.text:00000000000046D6                 shr     al, 3
.text:00000000000046D9                 and     eax, 7
.text:00000000000046DC                 add     eax, 30h ; '0'
.text:00000000000046DF                 mov     [r14+r15+2], al
.text:00000000000046E4
.text:00000000000046E4 loc_46E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000046E4                 and     ebx, 7
.text:00000000000046E7                 add     rbp, 1
.text:00000000000046EB                 add     r15, 3
.text:00000000000046EF                 add     ebx, 30h ; '0'
.text:00000000000046F2                 cmp     rbp, rcx
.text:00000000000046F5                 jnb     loc_3EE0
.text:00000000000046FB                 mov     esi, edx
.text:00000000000046FD
.text:00000000000046FD loc_46FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000046FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000046FD                 cmp     r13, r15
.text:0000000000004700                 jbe     short loc_4706
.text:0000000000004702                 mov     [r14+r15], bl
.text:0000000000004706
.text:0000000000004706 loc_4706:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004706                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000470A                 add     r15, 1
.text:000000000000470E
.text:000000000000470E loc_470E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000470E                 test    dl, dl
.text:0000000000004710                 jnz     loc_4660
.text:0000000000004716                 mov     eax, esi
.text:0000000000004718                 xor     eax, 1
.text:000000000000471B                 and     eax, r8d
.text:000000000000471E                 test    r10b, r10b
.text:0000000000004721                 jz      short loc_4731
.text:0000000000004723                 cmp     r13, r15
.text:0000000000004726                 jbe     short loc_472D
.text:0000000000004728                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000472D
.text:000000000000472D loc_472D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000472D                 add     r15, 1
.text:0000000000004731
.text:0000000000004731 loc_4731:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004731                 add     rbp, 1
.text:0000000000004735                 cmp     rbp, rcx
.text:0000000000004738                 jnb     loc_3EBC
.text:000000000000473E                 test    al, al
.text:0000000000004740                 jz      loc_4B3E
.text:0000000000004746                 cmp     r13, r15
.text:0000000000004749                 jbe     short loc_4750
.text:000000000000474B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004750
.text:0000000000004750 loc_4750:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004750                 lea     rax, [r15+1]
.text:0000000000004754                 cmp     r13, rax
.text:0000000000004757                 jbe     short loc_475F
.text:0000000000004759                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000475F
.text:000000000000475F loc_475F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000475F                 add     r15, 2
.text:0000000000004763                 xor     r10d, r10d
.text:0000000000004766                 xor     r8d, r8d
.text:0000000000004769                 jmp     short loc_46FD
.text:0000000000004769 ; ---------------------------------------------------------------------------
.text:000000000000476B                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004770                 cmp     r15, 1
.text:0000000000004774                 jz      loc_45D9
.text:000000000000477A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000477F                 lea     rcx, [rdi+r15]
.text:0000000000004783                 lea     rdx, [rdi+r14+1]
.text:0000000000004788                 lea     r8, [rcx+r14]
.text:000000000000478C                 jmp     short loc_479D
.text:000000000000478C ; ---------------------------------------------------------------------------
.text:000000000000478E                 align 10h
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004790                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004790                 add     rdx, 1
.text:0000000000004794                 cmp     r8, rdx
.text:0000000000004797                 jz      loc_45D9
.text:000000000000479D
.text:000000000000479D loc_479D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000479D                 movzx   ecx, byte ptr [rdx]
.text:00000000000047A0                 sub     ecx, 5Bh ; '['
.text:00000000000047A3                 cmp     cl, 21h ; '!'
.text:00000000000047A6                 ja      short loc_4790
.text:00000000000047A8                 mov     esi, 1
.text:00000000000047AD                 shl     rsi, cl
.text:00000000000047B0                 mov     rcx, rsi
.text:00000000000047B3                 mov     rsi, 20000002Bh
.text:00000000000047BD                 test    rcx, rsi
.text:00000000000047C0                 jz      short loc_4790
.text:00000000000047C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000047C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000047CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000047D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000047D9
.text:00000000000047D9 loc_47D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000047D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000047D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000047DE                 jz      short loc_47F0
.text:00000000000047E0                 test    al, al
.text:00000000000047E2                 mov     eax, 4
.text:00000000000047E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000047EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000047F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000047F0                 sub     rsp, 8
.text:00000000000047F4                 mov     rcx, rbp
.text:00000000000047F7                 mov     rsi, r13
.text:00000000000047FA                 push    [rsp+0F0h+var_88]
.text:00000000000047FE                 push    [rsp+0F8h+var_80]
.text:0000000000004802                 mov     rdi, r14
.text:0000000000004805                 push    0
.text:0000000000004807                 mov     r9d, [rsp+108h+var_70]
.text:000000000000480F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004814                 mov     rdx, [rsp+108h+s]
.text:0000000000004819                 and     r9d, 0FFFFFFFDh
.text:000000000000481D                 call    quotearg_buffer_restyled
.text:0000000000004822                 add     rsp, 20h
.text:0000000000004826                 mov     r15, rax
.text:0000000000004829
.text:0000000000004829 loc_4829:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004829                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004829                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004831                 xor     rbx, fs:28h
.text:000000000000483A                 mov     rax, r15
.text:000000000000483D                 jnz     loc_4E43
.text:0000000000004843                 add     rsp, 0B8h
.text:000000000000484A                 pop     rbx
.text:000000000000484B                 pop     rbp
.text:000000000000484C                 pop     r12
.text:000000000000484E                 pop     r13
.text:0000000000004850                 pop     r14
.text:0000000000004852                 pop     r15
.text:0000000000004854                 retn
.text:0000000000004854 ; ---------------------------------------------------------------------------
.text:0000000000004855                 align 8
.text:0000000000004858
.text:0000000000004858 loc_4858:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004858                 mov     rbp, r11
.text:000000000000485B                 jmp     loc_47D9
.text:0000000000004860 ; ---------------------------------------------------------------------------
.text:0000000000004860
.text:0000000000004860 loc_4860:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004860                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004860                 cmp     r13, r15
.text:0000000000004863                 jbe     short loc_486A
.text:0000000000004865                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000486A
.text:000000000000486A loc_486A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000486A                 lea     rax, [r15+1]
.text:000000000000486E                 cmp     r13, rax
.text:0000000000004871                 jbe     short loc_4879
.text:0000000000004873                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004879
.text:0000000000004879 loc_4879:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004879                 lea     rax, [r15+2]
.text:000000000000487D                 cmp     r13, rax
.text:0000000000004880                 jbe     loc_4E72
.text:0000000000004886                 mov     rdx, r13
.text:0000000000004889                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000488F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004894                 jmp     loc_4472
.text:0000000000004899 ; ---------------------------------------------------------------------------
.text:0000000000004899
.text:0000000000004899 loc_4899:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004899                 mov     eax, r12d
.text:000000000000489C                 mov     ebx, 30h ; '0'
.text:00000000000048A1                 xor     r12d, r12d
.text:00000000000048A4                 jmp     loc_3EA9
.text:00000000000048A9 ; ---------------------------------------------------------------------------
.text:00000000000048A9
.text:00000000000048A9 loc_48A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000048A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000048AF                 jmp     loc_4279
.text:00000000000048B4 ; ---------------------------------------------------------------------------
.text:00000000000048B4
.text:00000000000048B4 loc_48B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000048B4                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:00000000000048B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000048B6                 jnz     loc_3CE3        ; jumptable 00000000000121F1 case 1
.text:00000000000048BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000048C1
.text:00000000000048C1 loc_48C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000048C1                 test    r13, r13
.text:00000000000048C4                 jnz     loc_4E5A
.text:00000000000048CA                 lea     rax, asc_BAFD   ; "'"
.text:00000000000048D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048E4                 xor     r12d, r12d
.text:00000000000048E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000048EC                 mov     [rsp+0E8h+n], 1
.text:00000000000048F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000048FA                 mov     r15d, 1
.text:0000000000004900                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004908                 jmp     loc_3D23
.text:0000000000004908 ; ---------------------------------------------------------------------------
.text:000000000000490D                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004910                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:0000000000004910                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004912                 jnz     loc_4D0D
.text:0000000000004918                 test    r13, r13
.text:000000000000491B                 jz      loc_4B46
.text:0000000000004921                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004925                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000492A                 xor     r12d, r12d
.text:000000000000492D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004932                 mov     [rsp+0E8h+var_98], 0
.text:000000000000493B
.text:000000000000493B loc_493B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000493B                 lea     rax, unk_BAFB
.text:0000000000004942                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004947                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000494C                 mov     [rsp+0E8h+n], 1
.text:0000000000004955                 mov     r15d, 1
.text:000000000000495B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004960                 jmp     loc_3D23
.text:0000000000004965 ; ---------------------------------------------------------------------------
.text:0000000000004965
.text:0000000000004965 loc_4965:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004965                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:0000000000004965                 lea     rax, unk_BAFB   ; jumptable 00000000000121F1 case 6
.text:000000000000496C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004971                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004976                 xor     r12d, r12d
.text:0000000000004979                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004982                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004987                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000498C                 mov     [rsp+0E8h+n], 1
.text:0000000000004995                 xor     r15d, r15d
.text:0000000000004998                 mov     [rsp+0E8h+s2], rax
.text:000000000000499D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000049A5                 jmp     loc_3D23
.text:00000000000049AA ; ---------------------------------------------------------------------------
.text:00000000000049AA
.text:00000000000049AA loc_49AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000049AA                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:00000000000049AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000049AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000049B4                 xor     r12d, r12d
.text:00000000000049B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000049C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000049C5                 xor     r15d, r15d
.text:00000000000049C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000049CD                 mov     [rsp+0E8h+n], 0
.text:00000000000049D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000049DF                 jmp     loc_3D23
.text:00000000000049E4 ; ---------------------------------------------------------------------------
.text:00000000000049E4
.text:00000000000049E4 loc_49E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000049E4                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:00000000000049E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000049E9                 jz      short loc_4A41
.text:00000000000049EB                 lea     rsi, asc_BAFF   ; "`"
.text:00000000000049F2                 xor     edi, edi        ; domainname
.text:00000000000049F4                 mov     edx, 5          ; category
.text:00000000000049F9                 call    _dcgettext
.text:00000000000049FE                 mov     rcx, rax
.text:0000000000004A01                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004A06                 lea     rax, asc_BAFF   ; "`"
.text:0000000000004A0D                 cmp     rcx, rax
.text:0000000000004A10                 jz      loc_4DAE
.text:0000000000004A16
.text:0000000000004A16 loc_4A16:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004A16                 lea     rsi, asc_BAFD   ; "'"
.text:0000000000004A1D                 xor     edi, edi        ; domainname
.text:0000000000004A1F                 mov     edx, 5          ; category
.text:0000000000004A24                 call    _dcgettext
.text:0000000000004A29                 mov     rcx, rax
.text:0000000000004A2C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004A31                 lea     rax, asc_BAFD   ; "'"
.text:0000000000004A38                 cmp     rcx, rax
.text:0000000000004A3B                 jz      loc_4DC4
.text:0000000000004A41
.text:0000000000004A41 loc_4A41:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004A41                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004A41                 xor     r15d, r15d
.text:0000000000004A44                 test    ebx, ebx
.text:0000000000004A46                 jz      loc_4C0D
.text:0000000000004A4C
.text:0000000000004A4C loc_4A4C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000004A4C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000004A4C                 test    ebx, ebx
.text:0000000000004A4E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004A53                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004A58                 xor     r12d, r12d
.text:0000000000004A5B                 mov     rdi, rbx        ; s
.text:0000000000004A5E                 call    _strlen
.text:0000000000004A63                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004A68                 mov     [rsp+0E8h+n], rax
.text:0000000000004A6D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004A72                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004A80                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004A85                 jmp     loc_3D23
.text:0000000000004A8A ; ---------------------------------------------------------------------------
.text:0000000000004A8A
.text:0000000000004A8A loc_4A8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004A8A                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:0000000000004A8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000004A8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A94                 xor     r12d, r12d
.text:0000000000004A97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004AA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004AA5                 xor     r15d, r15d
.text:0000000000004AA8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004AAD                 mov     [rsp+0E8h+n], 0
.text:0000000000004AB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000004ABF                 jmp     loc_3D23
.text:0000000000004AC4 ; ---------------------------------------------------------------------------
.text:0000000000004AC4
.text:0000000000004AC4 loc_4AC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004AC4                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:0000000000004AC4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004AC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004ACE                 xor     r12d, r12d
.text:0000000000004AD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004ADA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004ADF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004AE4                 jmp     loc_3D03
.text:0000000000004AE9 ; ---------------------------------------------------------------------------
.text:0000000000004AE9
.text:0000000000004AE9 loc_4AE9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004AE9                 cmp     r13, r15
.text:0000000000004AEC                 jbe     short loc_4AF3
.text:0000000000004AEE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004AF3
.text:0000000000004AF3 loc_4AF3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004AF3                 lea     rax, [rcx+2]
.text:0000000000004AF7                 cmp     r13, rax
.text:0000000000004AFA                 jbe     short loc_4B02
.text:0000000000004AFC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004B02
.text:0000000000004B02 loc_4B02:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004B02                 mov     eax, r12d
.text:0000000000004B05                 lea     r15, [rcx+3]
.text:0000000000004B09                 xor     r12d, r12d
.text:0000000000004B0C                 mov     ebx, 30h ; '0'
.text:0000000000004B11                 jmp     loc_3E78
.text:0000000000004B11 ; ---------------------------------------------------------------------------
.text:0000000000004B16                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004B20                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004B25                 mov     rbp, r11
.text:0000000000004B28                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004B2C                 jmp     loc_47D9
.text:0000000000004B31 ; ---------------------------------------------------------------------------
.text:0000000000004B31
.text:0000000000004B31 loc_4B31:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004B31                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004B36                 xor     r12d, r12d
.text:0000000000004B39                 jmp     loc_4640
.text:0000000000004B3E ; ---------------------------------------------------------------------------
.text:0000000000004B3E
.text:0000000000004B3E loc_4B3E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000004B3E                 xor     r10d, r10d
.text:0000000000004B41                 jmp     loc_46FD
.text:0000000000004B46 ; ---------------------------------------------------------------------------
.text:0000000000004B46
.text:0000000000004B46 loc_4B46:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004B46                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B4F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B54                 xor     r12d, r12d
.text:0000000000004B57                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B5C                 jmp     loc_493B
.text:0000000000004B61 ; ---------------------------------------------------------------------------
.text:0000000000004B61
.text:0000000000004B61 loc_4B61:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004B61                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004B66                 mov     rsi, r14
.text:0000000000004B69                 mov     rcx, r13
.text:0000000000004B6C                 mov     rax, rbx
.text:0000000000004B6F                 mov     rdi, rbx
.text:0000000000004B72                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004B78                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004B7D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004B85                 cmp     rsi, r11
.text:0000000000004B88                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004B8E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004B96                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004B9B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004BA0                 jnb     short loc_4BC8
.text:0000000000004BA2                 cmp     byte ptr [rcx], 0
.text:0000000000004BA5                 jnz     short loc_4BB7
.text:0000000000004BA7                 jmp     short loc_4BC8
.text:0000000000004BA7 ; ---------------------------------------------------------------------------
.text:0000000000004BA9                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004BB0                 cmp     byte ptr [r9+rax], 0
.text:0000000000004BB5                 jz      short loc_4BC5
.text:0000000000004BB7
.text:0000000000004BB7 loc_4BB7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004BB7                 add     rax, 1
.text:0000000000004BBB                 lea     rdx, [rbp+rax+0]
.text:0000000000004BC0                 cmp     r11, rdx
.text:0000000000004BC3                 ja      short loc_4BB0
.text:0000000000004BC5
.text:0000000000004BC5 loc_4BC5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004BC5                 mov     rdi, rax
.text:0000000000004BC8
.text:0000000000004BC8 loc_4BC8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004BC8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004BC8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004BCD                 xor     r12d, r12d
.text:0000000000004BD0                 jmp     loc_4636
.text:0000000000004BD5 ; ---------------------------------------------------------------------------
.text:0000000000004BD5
.text:0000000000004BD5 loc_4BD5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004BD5                 mov     rdi, rbx
.text:0000000000004BD8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004BDE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004BE3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004BE9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004BF1                 xor     r12d, r12d
.text:0000000000004BF4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004BF9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004BFE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004C03                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004C08                 jmp     loc_4636
.text:0000000000004C0D ; ---------------------------------------------------------------------------
.text:0000000000004C0D
.text:0000000000004C0D loc_4C0D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000004C0D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004C12                 movzx   eax, byte ptr [rdx]
.text:0000000000004C15                 test    al, al
.text:0000000000004C17                 jz      loc_4A4C
.text:0000000000004C1D                 nop     dword ptr [rax]
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004C20                 cmp     r13, r15
.text:0000000000004C23                 jbe     short loc_4C29
.text:0000000000004C25                 mov     [r14+r15], al
.text:0000000000004C29
.text:0000000000004C29 loc_4C29:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004C29                 add     r15, 1
.text:0000000000004C2D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004C32                 test    al, al
.text:0000000000004C34                 jnz     short loc_4C20
.text:0000000000004C36                 jmp     loc_4A4C
.text:0000000000004C3B ; ---------------------------------------------------------------------------
.text:0000000000004C3B
.text:0000000000004C3B loc_4C3B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000004C3B                 mov     eax, edx
.text:0000000000004C3D                 jmp     loc_4197
.text:0000000000004C42 ; ---------------------------------------------------------------------------
.text:0000000000004C42
.text:0000000000004C42 loc_4C42:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004C42                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004C46                 cmp     bl, 3Eh ; '>'
.text:0000000000004C49                 ja      loc_44C0
.text:0000000000004C4F                 mov     rax, 7000A38200000000h
.text:0000000000004C59                 bt      rax, rbx
.text:0000000000004C5D                 jnb     loc_44C0
.text:0000000000004C63                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004C68                 jnz     loc_4E52
.text:0000000000004C6E                 cmp     r13, r15
.text:0000000000004C71                 jbe     short loc_4C78
.text:0000000000004C73                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004C78                 lea     rax, [r15+1]
.text:0000000000004C7C                 cmp     r13, rax
.text:0000000000004C7F                 jbe     short loc_4C87
.text:0000000000004C81                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004C87
.text:0000000000004C87 loc_4C87:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004C87                 lea     rax, [r15+2]
.text:0000000000004C8B                 cmp     r13, rax
.text:0000000000004C8E                 jbe     short loc_4C96
.text:0000000000004C90                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004C96
.text:0000000000004C96 loc_4C96:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004C96                 lea     rax, [r15+3]
.text:0000000000004C9A                 cmp     r13, rax
.text:0000000000004C9D                 jbe     short loc_4CA5
.text:0000000000004C9F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004CA5
.text:0000000000004CA5 loc_4CA5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004CA5                 add     r15, 4
.text:0000000000004CA9                 xor     edx, edx
.text:0000000000004CAB                 xor     r12d, r12d
.text:0000000000004CAE                 xor     eax, eax
.text:0000000000004CB0                 mov     rbp, rcx
.text:0000000000004CB3                 jmp     loc_3E78
.text:0000000000004CB8 ; ---------------------------------------------------------------------------
.text:0000000000004CB8
.text:0000000000004CB8 loc_4CB8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004CB8                                         ; DATA XREF: .rodata:jpt_3CE1↓o
.text:0000000000004CB8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000004CBA                 jz      loc_4E48
.text:0000000000004CC0                 lea     rax, asc_BAFD   ; "'"
.text:0000000000004CC7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004CCC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004CD1                 xor     r12d, r12d
.text:0000000000004CD4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004CDD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004CE2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004CE7                 mov     [rsp+0E8h+n], 1
.text:0000000000004CF0                 xor     r15d, r15d
.text:0000000000004CF3                 mov     [rsp+0E8h+s2], rax
.text:0000000000004CF8                 jmp     loc_3D23
.text:0000000000004CF8 ; ---------------------------------------------------------------------------
.text:0000000000004CFD                 align 20h
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004D00                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004D00                 mov     rbp, r11
.text:0000000000004D03                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004D08                 jmp     loc_47D9
.text:0000000000004D0D ; ---------------------------------------------------------------------------
.text:0000000000004D0D
.text:0000000000004D0D loc_4D0D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000004D0D                 lea     rax, unk_BAFB
.text:0000000000004D14                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004D19                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004D1E                 xor     r12d, r12d
.text:0000000000004D21                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004D2A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004D2F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004D34                 mov     [rsp+0E8h+n], 1
.text:0000000000004D3D                 xor     r15d, r15d
.text:0000000000004D40                 mov     [rsp+0E8h+s2], rax
.text:0000000000004D45                 jmp     loc_3D23
.text:0000000000004D4A ; ---------------------------------------------------------------------------
.text:0000000000004D4A
.text:0000000000004D4A loc_4D4A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000004D4A                 mov     eax, edx
.text:0000000000004D4C
.text:0000000000004D4C loc_4D4C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000004D4C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000004D4C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004D51                 test    rbx, rbx
.text:0000000000004D54                 jz      short loc_4D82
.text:0000000000004D56                 test    al, al
.text:0000000000004D58                 jz      short loc_4D82
.text:0000000000004D5A                 movzx   ecx, byte ptr [rbx]
.text:0000000000004D5D                 mov     rax, rbx
.text:0000000000004D60                 test    cl, cl
.text:0000000000004D62                 jz      short loc_4D82
.text:0000000000004D64                 mov     rdx, r15
.text:0000000000004D67                 sub     rax, r15
.text:0000000000004D6A
.text:0000000000004D6A loc_4D6A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000004D6A                 cmp     r13, rdx
.text:0000000000004D6D                 jbe     short loc_4D73
.text:0000000000004D6F                 mov     [r14+rdx], cl
.text:0000000000004D73
.text:0000000000004D73 loc_4D73:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004D73                 add     rdx, 1
.text:0000000000004D77                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000004D7B                 test    cl, cl
.text:0000000000004D7D                 jnz     short loc_4D6A
.text:0000000000004D7F                 mov     r15, rdx
.text:0000000000004D82
.text:0000000000004D82 loc_4D82:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004D82                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004D82                 cmp     r13, r15
.text:0000000000004D85                 jbe     loc_4829
.text:0000000000004D8B                 mov     byte ptr [r14+r15], 0
.text:0000000000004D90                 jmp     loc_4829
.text:0000000000004D95 ; ---------------------------------------------------------------------------
.text:0000000000004D95
.text:0000000000004D95 loc_4D95:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004D95                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004D9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004D9F                 mov     rbp, r11
.text:0000000000004DA2                 setz    al
.text:0000000000004DA5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004DA9                 jmp     loc_47D9
.text:0000000000004DAE ; ---------------------------------------------------------------------------
.text:0000000000004DAE
.text:0000000000004DAE loc_4DAE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000004DAE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004DB2                 mov     rdi, rcx
.text:0000000000004DB5                 call    gettext_quote
.text:0000000000004DBA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004DBF                 jmp     loc_4A16
.text:0000000000004DC4 ; ---------------------------------------------------------------------------
.text:0000000000004DC4
.text:0000000000004DC4 loc_4DC4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004DC4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004DC8                 mov     rdi, rcx
.text:0000000000004DCB                 call    gettext_quote
.text:0000000000004DD0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004DD5                 jmp     loc_4A41
.text:0000000000004DDA ; ---------------------------------------------------------------------------
.text:0000000000004DDA
.text:0000000000004DDA loc_4DDA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004DDA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004DDF                 mov     rbp, r11
.text:0000000000004DE2                 mov     eax, edx
.text:0000000000004DE4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004DE8                 jmp     loc_47D9
.text:0000000000004DED ; ---------------------------------------------------------------------------
.text:0000000000004DED
.text:0000000000004DED loc_4DED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004DED                 sub     rsp, 8
.text:0000000000004DF1                 mov     r8d, 5
.text:0000000000004DF7                 mov     rcx, r11
.text:0000000000004DFA                 push    [rsp+0F0h+var_88]
.text:0000000000004DFE                 push    [rsp+0F8h+var_80]
.text:0000000000004E02                 mov     rdi, r14
.text:0000000000004E05                 push    [rsp+100h+var_C8]
.text:0000000000004E09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004E11                 mov     rdx, [rsp+108h+s]
.text:0000000000004E16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004E1B                 call    quotearg_buffer_restyled
.text:0000000000004E20                 add     rsp, 20h
.text:0000000000004E24                 mov     r15, rax
.text:0000000000004E27                 jmp     loc_4829
.text:0000000000004E2C ; ---------------------------------------------------------------------------
.text:0000000000004E2C
.text:0000000000004E2C loc_4E2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004E2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004E31                 jmp     loc_4D4C
.text:0000000000004E36 ; ---------------------------------------------------------------------------
.text:0000000000004E36
.text:0000000000004E36 loc_4E36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004E36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004E3E                 jmp     loc_47D9
.text:0000000000004E43 ; ---------------------------------------------------------------------------
.text:0000000000004E43
.text:0000000000004E43 loc_4E43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004E43                 call    ___stack_chk_fail
.text:0000000000004E48 ; ---------------------------------------------------------------------------
.text:0000000000004E48
.text:0000000000004E48 loc_4E48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004E48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004E4D                 jmp     loc_48C1
.text:0000000000004E52 ; ---------------------------------------------------------------------------
.text:0000000000004E52
.text:0000000000004E52 loc_4E52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004E52                 mov     rbp, r11
.text:0000000000004E55                 jmp     loc_47F0
.text:0000000000004E5A ; ---------------------------------------------------------------------------
.text:0000000000004E5A
.text:0000000000004E5A loc_4E5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004E5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004E5F                 xor     eax, eax
.text:0000000000004E61                 xor     r12d, r12d
.text:0000000000004E64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E6D                 jmp     loc_4414
.text:0000000000004E72 ; ---------------------------------------------------------------------------
.text:0000000000004E72
.text:0000000000004E72 loc_4E72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004E72                 mov     rdx, r13
.text:0000000000004E75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004E7A                 jmp     loc_4472
.text:0000000000004E7F ; ---------------------------------------------------------------------------
.text:0000000000004E7F
.text:0000000000004E7F def_3CE1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004E7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004E7F ; } // starts at 3C50
.text:0000000000004E7F quotearg_buffer_restyled endp
.text:0000000000004E7F
.text:0000000000004E7F ; ---------------------------------------------------------------------------
.text:0000000000004E84                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90
.text:0000000000004E90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004E90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004E90
.text:0000000000004E90 var_50          = qword ptr -50h
.text:0000000000004E90 var_48          = qword ptr -48h
.text:0000000000004E90 var_40          = dword ptr -40h
.text:0000000000004E90 var_3C          = dword ptr -3Ch
.text:0000000000004E90
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 push    r15
.text:0000000000004E92                 push    r14
.text:0000000000004E94                 movsxd  r15, edi
.text:0000000000004E97                 push    r13
.text:0000000000004E99                 push    r12
.text:0000000000004E9B                 mov     r14, rdx
.text:0000000000004E9E                 push    rbp
.text:0000000000004E9F                 push    rbx
.text:0000000000004EA0                 mov     rbp, rcx
.text:0000000000004EA3                 sub     rsp, 28h
.text:0000000000004EA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000004EAC                 call    ___errno_location
.text:0000000000004EB1                 mov     r13, rax
.text:0000000000004EB4                 mov     eax, [rax]
.text:0000000000004EB6                 test    r15d, r15d
.text:0000000000004EB9                 mov     rbx, cs:slotvec
.text:0000000000004EC0                 mov     [rsp+58h+var_40], eax
.text:0000000000004EC4                 js      loc_5031
.text:0000000000004ECA                 cmp     cs:nslots, r15d
.text:0000000000004ED1                 jg      short loc_4F35
.text:0000000000004ED3                 cmp     r15d, 7FFFFFFFh
.text:0000000000004EDA                 jz      loc_5036
.text:0000000000004EE0                 lea     r12d, [r15+1]
.text:0000000000004EE4                 lea     rax, slotvec0
.text:0000000000004EEB                 movsxd  rsi, r12d
.text:0000000000004EEE                 shl     rsi, 4
.text:0000000000004EF2                 cmp     rbx, rax
.text:0000000000004EF5                 jz      loc_5010
.text:0000000000004EFB                 mov     rdi, rbx
.text:0000000000004EFE                 call    xrealloc
.text:0000000000004F03                 mov     rbx, rax
.text:0000000000004F06                 mov     cs:slotvec, rax
.text:0000000000004F0D
.text:0000000000004F0D loc_4F0D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004F0D                 movsxd  rdi, cs:nslots
.text:0000000000004F14                 mov     edx, r12d
.text:0000000000004F17                 xor     esi, esi        ; c
.text:0000000000004F19                 sub     edx, edi
.text:0000000000004F1B                 shl     rdi, 4
.text:0000000000004F1F                 movsxd  rdx, edx
.text:0000000000004F22                 add     rdi, rbx        ; s
.text:0000000000004F25                 shl     rdx, 4          ; n
.text:0000000000004F29                 call    _memset
.text:0000000000004F2E                 mov     cs:nslots, r12d
.text:0000000000004F35
.text:0000000000004F35 loc_4F35:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004F35                 mov     eax, [rbp+4]
.text:0000000000004F38                 shl     r15, 4
.text:0000000000004F3C                 sub     rsp, 8
.text:0000000000004F40                 add     rbx, r15
.text:0000000000004F43                 lea     r15, [rbp+8]
.text:0000000000004F47                 mov     r8d, [rbp+0]
.text:0000000000004F4B                 mov     r11, [rbx]
.text:0000000000004F4E                 mov     r12, [rbx+8]
.text:0000000000004F52                 mov     rcx, r14
.text:0000000000004F55                 or      eax, 1
.text:0000000000004F58                 mov     [rsp+60h+var_3C], eax
.text:0000000000004F5C                 push    qword ptr [rbp+30h]
.text:0000000000004F5F                 mov     r9d, eax
.text:0000000000004F62                 push    qword ptr [rbp+28h]
.text:0000000000004F65                 push    r15
.text:0000000000004F67                 mov     rsi, r11
.text:0000000000004F6A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004F6F                 mov     rdi, r12
.text:0000000000004F72                 mov     [rsp+78h+var_48], r11
.text:0000000000004F77                 call    quotearg_buffer_restyled
.text:0000000000004F7C                 add     rsp, 20h
.text:0000000000004F80                 mov     r11, [rsp+58h+var_48]
.text:0000000000004F85                 cmp     r11, rax
.text:0000000000004F88                 ja      short loc_4FF1
.text:0000000000004F8A                 lea     rsi, [rax+1]
.text:0000000000004F8E                 lea     rax, slot0
.text:0000000000004F95                 cmp     r12, rax
.text:0000000000004F98                 mov     [rbx], rsi
.text:0000000000004F9B                 jz      short loc_4FAF
.text:0000000000004F9D                 mov     rdi, r12        ; ptr
.text:0000000000004FA0                 mov     [rsp+58h+var_48], rsi
.text:0000000000004FA5                 call    free
.text:0000000000004FAA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004FAF
.text:0000000000004FAF loc_4FAF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004FAF                 mov     rdi, rsi
.text:0000000000004FB2                 mov     [rsp+58h+var_48], rsi
.text:0000000000004FB7                 call    xmalloc
.text:0000000000004FBC                 sub     rsp, 8
.text:0000000000004FC0                 mov     [rbx+8], rax
.text:0000000000004FC4                 mov     r8d, [rbp+0]
.text:0000000000004FC8                 push    qword ptr [rbp+30h]
.text:0000000000004FCB                 push    qword ptr [rbp+28h]
.text:0000000000004FCE                 mov     rcx, r14
.text:0000000000004FD1                 push    r15
.text:0000000000004FD3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004FD8                 mov     rdi, rax
.text:0000000000004FDB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004FE0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004FE5                 mov     r12, rax
.text:0000000000004FE8                 call    quotearg_buffer_restyled
.text:0000000000004FED                 add     rsp, 20h
.text:0000000000004FF1
.text:0000000000004FF1 loc_4FF1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004FF1                 mov     eax, [rsp+58h+var_40]
.text:0000000000004FF5                 mov     [r13+0], eax
.text:0000000000004FF9                 add     rsp, 28h
.text:0000000000004FFD                 mov     rax, r12
.text:0000000000005000                 pop     rbx
.text:0000000000005001                 pop     rbp
.text:0000000000005002                 pop     r12
.text:0000000000005004                 pop     r13
.text:0000000000005006                 pop     r14
.text:0000000000005008                 pop     r15
.text:000000000000500A                 retn
.text:000000000000500A ; ---------------------------------------------------------------------------
.text:000000000000500B                 align 10h
.text:0000000000005010
.text:0000000000005010 loc_5010:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005010                 xor     edi, edi
.text:0000000000005012                 call    xrealloc
.text:0000000000005017                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000501F                 mov     rbx, rax
.text:0000000000005022                 mov     cs:slotvec, rax
.text:0000000000005029                 movups  xmmword ptr [rax], xmm0
.text:000000000000502C                 jmp     loc_4F0D
.text:0000000000005031 ; ---------------------------------------------------------------------------
.text:0000000000005031
.text:0000000000005031 loc_5031:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000005031                 call    _abort
.text:0000000000005036 ; ---------------------------------------------------------------------------
.text:0000000000005036
.text:0000000000005036 loc_5036:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000005036                 call    xalloc_die
.text:0000000000005036 ; } // starts at 4E90
.text:0000000000005036 quotearg_n_options endp
.text:0000000000005036
.text:0000000000005036 ; ---------------------------------------------------------------------------
.text:000000000000503B                 align 20h
.text:0000000000005040
.text:0000000000005040 ; =============== S U B R O U T I N E =======================================
.text:0000000000005040
.text:0000000000005040 ; Attributes: info_from_lumina
.text:0000000000005040
.text:0000000000005040 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005040                 public clone_quoting_options
.text:0000000000005040 clone_quoting_options proc near
.text:0000000000005040 ; __unwind {
.text:0000000000005040                 push    r12
.text:0000000000005042                 push    rbp
.text:0000000000005043                 push    rbx
.text:0000000000005044                 mov     rbx, rdi
.text:0000000000005047                 call    ___errno_location
.text:000000000000504C                 mov     r12d, [rax]
.text:000000000000504F                 mov     rbp, rax
.text:0000000000005052                 lea     rax, default_quoting_options
.text:0000000000005059                 test    rbx, rbx
.text:000000000000505C                 mov     esi, 38h ; '8'  ; n
.text:0000000000005061                 cmovz   rbx, rax
.text:0000000000005065                 mov     rdi, rbx        ; src
.text:0000000000005068                 call    xmemdup
.text:000000000000506D                 mov     [rbp+0], r12d
.text:0000000000005071                 pop     rbx
.text:0000000000005072                 pop     rbp
.text:0000000000005073                 pop     r12
.text:0000000000005075                 retn
.text:0000000000005075 ; } // starts at 5040
.text:0000000000005075 clone_quoting_options endp
.text:0000000000005075
.text:0000000000005075 ; ---------------------------------------------------------------------------
.text:0000000000005076                 align 20h
.text:0000000000005080
.text:0000000000005080 ; =============== S U B R O U T I N E =======================================
.text:0000000000005080
.text:0000000000005080
.text:0000000000005080                 public get_quoting_style
.text:0000000000005080 get_quoting_style proc near
.text:0000000000005080 ; __unwind {
.text:0000000000005080                 lea     rax, default_quoting_options
.text:0000000000005087                 test    rdi, rdi
.text:000000000000508A                 cmovz   rdi, rax
.text:000000000000508E                 mov     eax, [rdi]
.text:0000000000005090                 retn
.text:0000000000005090 ; } // starts at 5080
.text:0000000000005090 get_quoting_style endp
.text:0000000000005090
.text:0000000000005090 ; ---------------------------------------------------------------------------
.text:0000000000005091                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0                 public set_quoting_style
.text:00000000000050A0 set_quoting_style proc near
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 lea     rax, default_quoting_options
.text:00000000000050A7                 test    rdi, rdi
.text:00000000000050AA                 cmovz   rdi, rax
.text:00000000000050AE                 mov     [rdi], esi
.text:00000000000050B0                 retn
.text:00000000000050B0 ; } // starts at 50A0
.text:00000000000050B0 set_quoting_style endp
.text:00000000000050B0
.text:00000000000050B0 ; ---------------------------------------------------------------------------
.text:00000000000050B1                 align 20h
.text:00000000000050C0
.text:00000000000050C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050C0
.text:00000000000050C0 ; Attributes: info_from_lumina
.text:00000000000050C0
.text:00000000000050C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000050C0                 public set_char_quoting
.text:00000000000050C0 set_char_quoting proc near
.text:00000000000050C0 ; __unwind {
.text:00000000000050C0                 lea     rax, default_quoting_options
.text:00000000000050C7                 test    rdi, rdi
.text:00000000000050CA                 mov     ecx, esi
.text:00000000000050CC                 cmovz   rdi, rax
.text:00000000000050D0                 mov     eax, esi
.text:00000000000050D2                 and     ecx, 1Fh
.text:00000000000050D5                 shr     al, 5
.text:00000000000050D8                 movzx   eax, al
.text:00000000000050DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000050E0                 mov     esi, [rdi]
.text:00000000000050E2                 mov     eax, esi
.text:00000000000050E4                 shr     eax, cl
.text:00000000000050E6                 xor     edx, eax
.text:00000000000050E8                 and     eax, 1
.text:00000000000050EB                 and     edx, 1
.text:00000000000050EE                 shl     edx, cl
.text:00000000000050F0                 xor     edx, esi
.text:00000000000050F2                 mov     [rdi], edx
.text:00000000000050F4                 retn
.text:00000000000050F4 ; } // starts at 50C0
.text:00000000000050F4 set_char_quoting endp
.text:00000000000050F4
.text:00000000000050F4 ; ---------------------------------------------------------------------------
.text:00000000000050F5                 align 20h
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100
.text:0000000000005100                 public set_quoting_flags
.text:0000000000005100 set_quoting_flags proc near
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 lea     rax, default_quoting_options
.text:0000000000005107                 test    rdi, rdi
.text:000000000000510A                 cmovz   rdi, rax
.text:000000000000510E                 mov     eax, [rdi+4]
.text:0000000000005111                 mov     [rdi+4], esi
.text:0000000000005114                 retn
.text:0000000000005114 ; } // starts at 5100
.text:0000000000005114 set_quoting_flags endp
.text:0000000000005114
.text:0000000000005114 ; ---------------------------------------------------------------------------
.text:0000000000005115                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120 ; Attributes: info_from_lumina
.text:0000000000005120
.text:0000000000005120 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005120                 public set_custom_quoting
.text:0000000000005120 set_custom_quoting proc near
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 lea     rax, default_quoting_options
.text:0000000000005127                 test    rdi, rdi
.text:000000000000512A                 cmovz   rdi, rax
.text:000000000000512E                 test    rsi, rsi
.text:0000000000005131                 mov     dword ptr [rdi], 0Ah
.text:0000000000005137                 jz      short loc_5147
.text:0000000000005139                 test    rdx, rdx
.text:000000000000513C                 jz      short loc_5147
.text:000000000000513E                 mov     [rdi+28h], rsi
.text:0000000000005142                 mov     [rdi+30h], rdx
.text:0000000000005146                 retn
.text:0000000000005147 ; ---------------------------------------------------------------------------
.text:0000000000005147
.text:0000000000005147 loc_5147:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005147                                         ; set_custom_quoting+1C↑j
.text:0000000000005147                 sub     rsp, 8
.text:000000000000514B                 call    _abort
.text:000000000000514B ; } // starts at 5120
.text:000000000000514B set_custom_quoting endp
.text:000000000000514B
.text:0000000000005150
.text:0000000000005150 ; =============== S U B R O U T I N E =======================================
.text:0000000000005150
.text:0000000000005150 ; Attributes: info_from_lumina
.text:0000000000005150
.text:0000000000005150 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005150                 public quotearg_buffer
.text:0000000000005150 quotearg_buffer proc near
.text:0000000000005150
.text:0000000000005150 var_40          = qword ptr -40h
.text:0000000000005150
.text:0000000000005150 ; __unwind {
.text:0000000000005150                 push    r15
.text:0000000000005152                 push    r14
.text:0000000000005154                 lea     rax, default_quoting_options
.text:000000000000515B                 push    r13
.text:000000000000515D                 push    r12
.text:000000000000515F                 mov     r13, rdi
.text:0000000000005162                 push    rbp
.text:0000000000005163                 push    rbx
.text:0000000000005164                 mov     rbx, r8
.text:0000000000005167                 mov     r14, rsi
.text:000000000000516A                 mov     r15, rdx
.text:000000000000516D                 sub     rsp, 18h
.text:0000000000005171                 test    r8, r8
.text:0000000000005174                 cmovz   rbx, rax
.text:0000000000005178                 mov     [rsp+48h+var_40], rcx
.text:000000000000517D                 call    ___errno_location
.text:0000000000005182                 mov     r12d, [rax]
.text:0000000000005185                 mov     rbp, rax
.text:0000000000005188                 lea     rax, [rbx+8]
.text:000000000000518C                 sub     rsp, 8
.text:0000000000005190                 mov     r9d, [rbx+4]
.text:0000000000005194                 push    qword ptr [rbx+30h]
.text:0000000000005197                 mov     r8d, [rbx]
.text:000000000000519A                 push    qword ptr [rbx+28h]
.text:000000000000519D                 mov     rdx, r15
.text:00000000000051A0                 push    rax
.text:00000000000051A1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000051A6                 mov     rsi, r14
.text:00000000000051A9                 mov     rdi, r13
.text:00000000000051AC                 call    quotearg_buffer_restyled
.text:00000000000051B1                 mov     [rbp+0], r12d
.text:00000000000051B5                 add     rsp, 38h
.text:00000000000051B9                 pop     rbx
.text:00000000000051BA                 pop     rbp
.text:00000000000051BB                 pop     r12
.text:00000000000051BD                 pop     r13
.text:00000000000051BF                 pop     r14
.text:00000000000051C1                 pop     r15
.text:00000000000051C3                 retn
.text:00000000000051C3 ; } // starts at 5150
.text:00000000000051C3 quotearg_buffer endp
.text:00000000000051C3
.text:00000000000051C3 ; ---------------------------------------------------------------------------
.text:00000000000051C4                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0 ; Attributes: info_from_lumina
.text:00000000000051D0
.text:00000000000051D0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000051D0                 public quotearg_alloc_mem
.text:00000000000051D0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000051D0
.text:00000000000051D0 var_5C          = dword ptr -5Ch
.text:00000000000051D0 var_58          = qword ptr -58h
.text:00000000000051D0 var_50          = qword ptr -50h
.text:00000000000051D0 var_48          = qword ptr -48h
.text:00000000000051D0 var_40          = qword ptr -40h
.text:00000000000051D0
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 push    r15
.text:00000000000051D2                 push    r14
.text:00000000000051D4                 lea     rax, default_quoting_options
.text:00000000000051DB                 push    r13
.text:00000000000051DD                 push    r12
.text:00000000000051DF                 mov     r12, rdx
.text:00000000000051E2                 push    rbp
.text:00000000000051E3                 push    rbx
.text:00000000000051E4                 mov     rbx, rcx
.text:00000000000051E7                 mov     r14, rdi
.text:00000000000051EA                 mov     r15, rsi
.text:00000000000051ED                 sub     rsp, 38h
.text:00000000000051F1                 test    rcx, rcx
.text:00000000000051F4                 cmovz   rbx, rax
.text:00000000000051F8                 xor     ebp, ebp
.text:00000000000051FA                 call    ___errno_location
.text:00000000000051FF                 test    r12, r12
.text:0000000000005202                 mov     r13, rax
.text:0000000000005205                 mov     eax, [rax]
.text:0000000000005207                 setz    bpl
.text:000000000000520B                 or      ebp, [rbx+4]
.text:000000000000520E                 lea     r10, [rbx+8]
.text:0000000000005212                 sub     rsp, 8
.text:0000000000005216                 mov     r8d, [rbx]
.text:0000000000005219                 mov     rcx, r15
.text:000000000000521C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005220                 push    qword ptr [rbx+30h]
.text:0000000000005223                 mov     rdx, r14
.text:0000000000005226                 push    qword ptr [rbx+28h]
.text:0000000000005229                 push    r10
.text:000000000000522B                 xor     esi, esi
.text:000000000000522D                 mov     r9d, ebp
.text:0000000000005230                 xor     edi, edi
.text:0000000000005232                 mov     [rsp+88h+var_48], r10
.text:0000000000005237                 call    quotearg_buffer_restyled
.text:000000000000523C                 lea     rsi, [rax+1]
.text:0000000000005240                 mov     [rsp+88h+var_40], rax
.text:0000000000005245                 add     rsp, 20h
.text:0000000000005249                 mov     rdi, rsi
.text:000000000000524C                 mov     [rsp+68h+var_50], rsi
.text:0000000000005251                 call    xmalloc
.text:0000000000005256                 mov     [rsp+68h+var_58], rax
.text:000000000000525B                 sub     rsp, 8
.text:000000000000525F                 push    qword ptr [rbx+30h]
.text:0000000000005262                 push    qword ptr [rbx+28h]
.text:0000000000005265                 mov     r10, [rsp+80h+var_48]
.text:000000000000526A                 mov     r9d, ebp
.text:000000000000526D                 mov     r8d, [rbx]
.text:0000000000005270                 mov     rcx, r15
.text:0000000000005273                 mov     rdx, r14
.text:0000000000005276                 mov     rdi, rax
.text:0000000000005279                 push    r10
.text:000000000000527B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005280                 call    quotearg_buffer_restyled
.text:0000000000005285                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005289                 add     rsp, 20h
.text:000000000000528D                 test    r12, r12
.text:0000000000005290                 mov     [r13+0], eax
.text:0000000000005294                 jz      short loc_529F
.text:0000000000005296                 mov     r11, [rsp+68h+var_40]
.text:000000000000529B                 mov     [r12], r11
.text:000000000000529F
.text:000000000000529F loc_529F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000529F                 mov     rax, [rsp+68h+var_58]
.text:00000000000052A4                 add     rsp, 38h
.text:00000000000052A8                 pop     rbx
.text:00000000000052A9                 pop     rbp
.text:00000000000052AA                 pop     r12
.text:00000000000052AC                 pop     r13
.text:00000000000052AE                 pop     r14
.text:00000000000052B0                 pop     r15
.text:00000000000052B2                 retn
.text:00000000000052B2 ; } // starts at 51D0
.text:00000000000052B2 quotearg_alloc_mem endp
.text:00000000000052B2
.text:00000000000052B2 ; ---------------------------------------------------------------------------
.text:00000000000052B3                 align 20h
.text:00000000000052C0
.text:00000000000052C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052C0
.text:00000000000052C0
.text:00000000000052C0                 public quotearg_alloc
.text:00000000000052C0 quotearg_alloc  proc near
.text:00000000000052C0 ; __unwind {
.text:00000000000052C0                 mov     rcx, rdx
.text:00000000000052C3                 xor     edx, edx
.text:00000000000052C5                 jmp     quotearg_alloc_mem
.text:00000000000052C5 ; } // starts at 52C0
.text:00000000000052C5 quotearg_alloc  endp
.text:00000000000052C5
.text:00000000000052C5 ; ---------------------------------------------------------------------------
.text:00000000000052CA                 align 10h
.text:00000000000052D0
.text:00000000000052D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052D0
.text:00000000000052D0 ; Attributes: info_from_lumina
.text:00000000000052D0
.text:00000000000052D0 ; void __cdecl quotearg_free()
.text:00000000000052D0                 public quotearg_free
.text:00000000000052D0 quotearg_free   proc near
.text:00000000000052D0 ; __unwind {
.text:00000000000052D0                 mov     eax, cs:nslots
.text:00000000000052D6                 push    r12
.text:00000000000052D8                 mov     r12, cs:slotvec
.text:00000000000052DF                 push    rbp
.text:00000000000052E0                 push    rbx
.text:00000000000052E1                 cmp     eax, 1
.text:00000000000052E4                 jle     short loc_5311
.text:00000000000052E6                 sub     eax, 2
.text:00000000000052E9                 lea     rbx, [r12+18h]
.text:00000000000052EE                 shl     rax, 4
.text:00000000000052F2                 lea     rbp, [r12+rax+28h]
.text:00000000000052F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005300                 mov     rdi, [rbx]      ; ptr
.text:0000000000005303                 add     rbx, 10h
.text:0000000000005307                 call    free
.text:000000000000530C                 cmp     rbx, rbp
.text:000000000000530F                 jnz     short loc_5300
.text:0000000000005311
.text:0000000000005311 loc_5311:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005311                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005316                 lea     rbx, slot0
.text:000000000000531D                 cmp     rdi, rbx
.text:0000000000005320                 jz      short loc_5339
.text:0000000000005322                 call    free
.text:0000000000005327                 mov     cs:slotvec0, 100h
.text:0000000000005332                 mov     cs:off_20F078, rbx
.text:0000000000005339
.text:0000000000005339 loc_5339:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005339                 lea     rbx, slotvec0
.text:0000000000005340                 cmp     r12, rbx
.text:0000000000005343                 jz      short loc_5354
.text:0000000000005345                 mov     rdi, r12        ; ptr
.text:0000000000005348                 call    free
.text:000000000000534D                 mov     cs:slotvec, rbx
.text:0000000000005354
.text:0000000000005354 loc_5354:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005354                 pop     rbx
.text:0000000000005355                 mov     cs:nslots, 1
.text:000000000000535F                 pop     rbp
.text:0000000000005360                 pop     r12
.text:0000000000005362                 retn
.text:0000000000005362 ; } // starts at 52D0
.text:0000000000005362 quotearg_free   endp
.text:0000000000005362
.text:0000000000005362 ; ---------------------------------------------------------------------------
.text:0000000000005363                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370
.text:0000000000005370                 public quotearg_n
.text:0000000000005370 quotearg_n      proc near
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 lea     rcx, default_quoting_options
.text:0000000000005377                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000537E                 jmp     quotearg_n_options
.text:000000000000537E ; } // starts at 5370
.text:000000000000537E quotearg_n      endp
.text:000000000000537E
.text:000000000000537E ; ---------------------------------------------------------------------------
.text:0000000000005383                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390
.text:0000000000005390                 public quotearg_n_mem
.text:0000000000005390 quotearg_n_mem  proc near
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 lea     rcx, default_quoting_options
.text:0000000000005397                 jmp     quotearg_n_options
.text:0000000000005397 ; } // starts at 5390
.text:0000000000005397 quotearg_n_mem  endp
.text:0000000000005397
.text:0000000000005397 ; ---------------------------------------------------------------------------
.text:000000000000539C                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0
.text:00000000000053A0                 public quotearg
.text:00000000000053A0 quotearg        proc near
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 lea     rcx, default_quoting_options
.text:00000000000053A7                 mov     rsi, rdi
.text:00000000000053AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000053B1                 xor     edi, edi
.text:00000000000053B3                 jmp     quotearg_n_options
.text:00000000000053B3 ; } // starts at 53A0
.text:00000000000053B3 quotearg        endp
.text:00000000000053B3
.text:00000000000053B3 ; ---------------------------------------------------------------------------
.text:00000000000053B8                 align 20h
.text:00000000000053C0
.text:00000000000053C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053C0
.text:00000000000053C0
.text:00000000000053C0                 public quotearg_mem
.text:00000000000053C0 quotearg_mem    proc near
.text:00000000000053C0 ; __unwind {
.text:00000000000053C0                 lea     rcx, default_quoting_options
.text:00000000000053C7                 mov     rdx, rsi
.text:00000000000053CA                 mov     rsi, rdi
.text:00000000000053CD                 xor     edi, edi
.text:00000000000053CF                 jmp     quotearg_n_options
.text:00000000000053CF ; } // starts at 53C0
.text:00000000000053CF quotearg_mem    endp
.text:00000000000053CF
.text:00000000000053CF ; ---------------------------------------------------------------------------
.text:00000000000053D4                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000053E0                 public quotearg_n_style
.text:00000000000053E0 quotearg_n_style proc near              ; CODE XREF: change_file_owner+B62↑p
.text:00000000000053E0                                         ; change_file_owner+B76↑p ...
.text:00000000000053E0
.text:00000000000053E0 var_48          = dword ptr -48h
.text:00000000000053E0 var_44          = qword ptr -44h
.text:00000000000053E0 var_3C          = qword ptr -3Ch
.text:00000000000053E0 var_34          = qword ptr -34h
.text:00000000000053E0 var_2C          = qword ptr -2Ch
.text:00000000000053E0 var_24          = qword ptr -24h
.text:00000000000053E0 var_1C          = qword ptr -1Ch
.text:00000000000053E0 var_14          = dword ptr -14h
.text:00000000000053E0 var_10          = qword ptr -10h
.text:00000000000053E0
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 sub     rsp, 48h
.text:00000000000053E4                 mov     rax, rdx
.text:00000000000053E7                 mov     rdx, fs:28h
.text:00000000000053F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000053F5                 xor     edx, edx
.text:00000000000053F7                 cmp     esi, 0Ah
.text:00000000000053FA                 jz      short loc_5464
.text:00000000000053FC                 mov     [rsp+48h+var_48], esi
.text:00000000000053FF                 mov     rcx, rsp
.text:0000000000005402                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005409                 mov     rsi, rax
.text:000000000000540C                 mov     [rsp+48h+var_44], 0
.text:0000000000005415                 mov     [rsp+48h+var_3C], 0
.text:000000000000541E                 mov     [rsp+48h+var_34], 0
.text:0000000000005427                 mov     [rsp+48h+var_2C], 0
.text:0000000000005430                 mov     [rsp+48h+var_24], 0
.text:0000000000005439                 mov     [rsp+48h+var_1C], 0
.text:0000000000005442                 mov     [rsp+48h+var_14], 0
.text:000000000000544A                 call    quotearg_n_options
.text:000000000000544F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005454                 xor     rcx, fs:28h
.text:000000000000545D                 jnz     short loc_5469
.text:000000000000545F                 add     rsp, 48h
.text:0000000000005463                 retn
.text:0000000000005464 ; ---------------------------------------------------------------------------
.text:0000000000005464
.text:0000000000005464 loc_5464:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005464                 call    _abort
.text:0000000000005469 ; ---------------------------------------------------------------------------
.text:0000000000005469
.text:0000000000005469 loc_5469:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005469                 call    ___stack_chk_fail
.text:0000000000005469 ; } // starts at 53E0
.text:0000000000005469 quotearg_n_style endp
.text:0000000000005469
.text:0000000000005469 ; ---------------------------------------------------------------------------
.text:000000000000546E                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470 ; Attributes: info_from_lumina
.text:0000000000005470
.text:0000000000005470 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005470                 public quotearg_n_style_mem
.text:0000000000005470 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005470
.text:0000000000005470 var_48          = dword ptr -48h
.text:0000000000005470 var_44          = qword ptr -44h
.text:0000000000005470 var_3C          = qword ptr -3Ch
.text:0000000000005470 var_34          = qword ptr -34h
.text:0000000000005470 var_2C          = qword ptr -2Ch
.text:0000000000005470 var_24          = qword ptr -24h
.text:0000000000005470 var_1C          = qword ptr -1Ch
.text:0000000000005470 var_14          = dword ptr -14h
.text:0000000000005470 var_10          = qword ptr -10h
.text:0000000000005470
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 sub     rsp, 48h
.text:0000000000005474                 mov     rax, rdx
.text:0000000000005477                 mov     rdx, rcx
.text:000000000000547A                 mov     rcx, fs:28h
.text:0000000000005483                 mov     [rsp+48h+var_10], rcx
.text:0000000000005488                 xor     ecx, ecx
.text:000000000000548A                 cmp     esi, 0Ah
.text:000000000000548D                 jz      short loc_54F0
.text:000000000000548F                 mov     [rsp+48h+var_48], esi
.text:0000000000005492                 mov     rcx, rsp
.text:0000000000005495                 mov     rsi, rax
.text:0000000000005498                 mov     [rsp+48h+var_44], 0
.text:00000000000054A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000054AA                 mov     [rsp+48h+var_34], 0
.text:00000000000054B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000054BC                 mov     [rsp+48h+var_24], 0
.text:00000000000054C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000054CE                 mov     [rsp+48h+var_14], 0
.text:00000000000054D6                 call    quotearg_n_options
.text:00000000000054DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000054E0                 xor     rdx, fs:28h
.text:00000000000054E9                 jnz     short loc_54F5
.text:00000000000054EB                 add     rsp, 48h
.text:00000000000054EF                 retn
.text:00000000000054F0 ; ---------------------------------------------------------------------------
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000054F0                 call    _abort
.text:00000000000054F5 ; ---------------------------------------------------------------------------
.text:00000000000054F5
.text:00000000000054F5 loc_54F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000054F5                 call    ___stack_chk_fail
.text:00000000000054F5 ; } // starts at 5470
.text:00000000000054F5 quotearg_n_style_mem endp
.text:00000000000054F5
.text:00000000000054F5 ; ---------------------------------------------------------------------------
.text:00000000000054FA                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500
.text:0000000000005500                 public quotearg_style
.text:0000000000005500 quotearg_style  proc near               ; CODE XREF: main+441↑p
.text:0000000000005500                                         ; main+4F9↑p ...
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 mov     rdx, rsi
.text:0000000000005503                 mov     esi, edi
.text:0000000000005505                 xor     edi, edi
.text:0000000000005507                 jmp     quotearg_n_style
.text:0000000000005507 ; } // starts at 5500
.text:0000000000005507 quotearg_style  endp
.text:0000000000005507
.text:0000000000005507 ; ---------------------------------------------------------------------------
.text:000000000000550C                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510                 public quotearg_style_mem
.text:0000000000005510 quotearg_style_mem proc near
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 mov     rcx, rdx
.text:0000000000005513                 mov     rdx, rsi
.text:0000000000005516                 mov     esi, edi
.text:0000000000005518                 xor     edi, edi
.text:000000000000551A                 jmp     quotearg_n_style_mem
.text:000000000000551A ; } // starts at 5510
.text:000000000000551A quotearg_style_mem endp
.text:000000000000551A
.text:000000000000551A ; ---------------------------------------------------------------------------
.text:000000000000551F                 align 20h
.text:0000000000005520
.text:0000000000005520 ; =============== S U B R O U T I N E =======================================
.text:0000000000005520
.text:0000000000005520 ; Attributes: info_from_lumina
.text:0000000000005520
.text:0000000000005520 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005520                 public quotearg_char_mem
.text:0000000000005520 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005520                                         ; quotearg_colon+C↓j ...
.text:0000000000005520
.text:0000000000005520 var_48          = xmmword ptr -48h
.text:0000000000005520 var_38          = xmmword ptr -38h
.text:0000000000005520 var_28          = xmmword ptr -28h
.text:0000000000005520 var_18          = qword ptr -18h
.text:0000000000005520 var_10          = qword ptr -10h
.text:0000000000005520
.text:0000000000005520 ; __unwind {
.text:0000000000005520                 sub     rsp, 48h
.text:0000000000005524                 mov     ecx, edx
.text:0000000000005526                 mov     rax, fs:28h
.text:000000000000552F                 mov     [rsp+48h+var_10], rax
.text:0000000000005534                 xor     eax, eax
.text:0000000000005536                 mov     rax, cs:qword_20F230
.text:000000000000553D                 mov     r8, rsp
.text:0000000000005540                 and     ecx, 1Fh
.text:0000000000005543                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000554B                 mov     [rsp+48h+var_18], rax
.text:0000000000005550                 mov     eax, edx
.text:0000000000005552                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005556                 shr     al, 5
.text:0000000000005559                 movzx   eax, al
.text:000000000000555C                 lea     r9, [r8+rax*4+8]
.text:0000000000005561                 movdqa  xmm0, cs:xmmword_20F210
.text:0000000000005569                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000556E                 movdqa  xmm0, cs:xmmword_20F220
.text:0000000000005576                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000557B                 mov     edx, [r9]
.text:000000000000557E                 mov     eax, edx
.text:0000000000005580                 shr     eax, cl
.text:0000000000005582                 not     eax
.text:0000000000005584                 and     eax, 1
.text:0000000000005587                 shl     eax, cl
.text:0000000000005589                 mov     rcx, r8
.text:000000000000558C                 xor     eax, edx
.text:000000000000558E                 mov     rdx, rsi
.text:0000000000005591                 mov     rsi, rdi
.text:0000000000005594                 mov     [r9], eax
.text:0000000000005597                 xor     edi, edi
.text:0000000000005599                 call    quotearg_n_options
.text:000000000000559E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000055A3                 xor     rsi, fs:28h
.text:00000000000055AC                 jnz     short loc_55B3
.text:00000000000055AE                 add     rsp, 48h
.text:00000000000055B2                 retn
.text:00000000000055B3 ; ---------------------------------------------------------------------------
.text:00000000000055B3
.text:00000000000055B3 loc_55B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000055B3                 call    ___stack_chk_fail
.text:00000000000055B3 ; } // starts at 5520
.text:00000000000055B3 quotearg_char_mem endp
.text:00000000000055B3
.text:00000000000055B3 ; ---------------------------------------------------------------------------
.text:00000000000055B8                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0
.text:00000000000055C0                 public quotearg_char
.text:00000000000055C0 quotearg_char   proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 movsx   edx, sil
.text:00000000000055C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000055CB                 jmp     quotearg_char_mem
.text:00000000000055CB ; } // starts at 55C0
.text:00000000000055CB quotearg_char   endp
.text:00000000000055CB
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0
.text:00000000000055D0                 public quotearg_colon
.text:00000000000055D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 mov     edx, 3Ah ; ':'
.text:00000000000055D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000055DC                 jmp     quotearg_char_mem
.text:00000000000055DC ; } // starts at 55D0
.text:00000000000055DC quotearg_colon  endp
.text:00000000000055DC
.text:00000000000055DC ; ---------------------------------------------------------------------------
.text:00000000000055E1                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0
.text:00000000000055F0                 public quotearg_colon_mem
.text:00000000000055F0 quotearg_colon_mem proc near
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 mov     edx, 3Ah ; ':'
.text:00000000000055F5                 jmp     quotearg_char_mem
.text:00000000000055F5 ; } // starts at 55F0
.text:00000000000055F5 quotearg_colon_mem endp
.text:00000000000055F5
.text:00000000000055F5 ; ---------------------------------------------------------------------------
.text:00000000000055FA                 align 20h
.text:0000000000005600
.text:0000000000005600 ; =============== S U B R O U T I N E =======================================
.text:0000000000005600
.text:0000000000005600 ; Attributes: info_from_lumina
.text:0000000000005600
.text:0000000000005600 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005600                 public quotearg_n_style_colon
.text:0000000000005600 quotearg_n_style_colon proc near        ; CODE XREF: change_file_owner+466↑p
.text:0000000000005600                                         ; change_file_owner+877↑p
.text:0000000000005600
.text:0000000000005600 var_48          = dword ptr -48h
.text:0000000000005600 var_44          = qword ptr -44h
.text:0000000000005600 var_3C          = qword ptr -3Ch
.text:0000000000005600 var_34          = qword ptr -34h
.text:0000000000005600 var_2C          = qword ptr -2Ch
.text:0000000000005600 var_24          = qword ptr -24h
.text:0000000000005600 var_1C          = qword ptr -1Ch
.text:0000000000005600 var_14          = dword ptr -14h
.text:0000000000005600 var_10          = qword ptr -10h
.text:0000000000005600
.text:0000000000005600 ; __unwind {
.text:0000000000005600                 sub     rsp, 48h
.text:0000000000005604                 mov     rax, rdx
.text:0000000000005607                 mov     rdx, fs:28h
.text:0000000000005610                 mov     [rsp+48h+var_10], rdx
.text:0000000000005615                 xor     edx, edx
.text:0000000000005617                 cmp     esi, 0Ah
.text:000000000000561A                 jz      short loc_5684
.text:000000000000561C                 mov     [rsp+48h+var_48], esi
.text:000000000000561F                 mov     rcx, rsp
.text:0000000000005622                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005629                 mov     rsi, rax
.text:000000000000562C                 mov     [rsp+48h+var_44], 0
.text:0000000000005635                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000563E                 mov     [rsp+48h+var_34], 0
.text:0000000000005647                 mov     [rsp+48h+var_2C], 0
.text:0000000000005650                 mov     [rsp+48h+var_24], 0
.text:0000000000005659                 mov     [rsp+48h+var_1C], 0
.text:0000000000005662                 mov     [rsp+48h+var_14], 0
.text:000000000000566A                 call    quotearg_n_options
.text:000000000000566F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005674                 xor     rcx, fs:28h
.text:000000000000567D                 jnz     short loc_5689
.text:000000000000567F                 add     rsp, 48h
.text:0000000000005683                 retn
.text:0000000000005684 ; ---------------------------------------------------------------------------
.text:0000000000005684
.text:0000000000005684 loc_5684:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005684                 call    _abort
.text:0000000000005689 ; ---------------------------------------------------------------------------
.text:0000000000005689
.text:0000000000005689 loc_5689:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005689                 call    ___stack_chk_fail
.text:0000000000005689 ; } // starts at 5600
.text:0000000000005689 quotearg_n_style_colon endp
.text:0000000000005689
.text:0000000000005689 ; ---------------------------------------------------------------------------
.text:000000000000568E                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690 ; Attributes: info_from_lumina
.text:0000000000005690
.text:0000000000005690 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005690                 public quotearg_n_custom_mem
.text:0000000000005690 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005690                                         ; quotearg_custom+12↓j ...
.text:0000000000005690
.text:0000000000005690 var_48          = xmmword ptr -48h
.text:0000000000005690 var_38          = xmmword ptr -38h
.text:0000000000005690 var_28          = xmmword ptr -28h
.text:0000000000005690 var_18          = qword ptr -18h
.text:0000000000005690 var_10          = qword ptr -10h
.text:0000000000005690
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 sub     rsp, 48h
.text:0000000000005694                 mov     r9, rcx
.text:0000000000005697                 mov     rcx, cs:qword_20F230
.text:000000000000569E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000056A6                 mov     rax, fs:28h
.text:00000000000056AF                 mov     [rsp+48h+var_10], rax
.text:00000000000056B4                 xor     eax, eax
.text:00000000000056B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000056BA                 test    rsi, rsi
.text:00000000000056BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000056C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000056C9                 movdqa  xmm0, cs:xmmword_20F210
.text:00000000000056D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000056D6                 movdqa  xmm0, cs:xmmword_20F220
.text:00000000000056DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000056E3                 jz      short loc_5717
.text:00000000000056E5                 test    rdx, rdx
.text:00000000000056E8                 jz      short loc_5717
.text:00000000000056EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000056EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000056F4                 mov     rcx, rsp
.text:00000000000056F7                 mov     rdx, r8
.text:00000000000056FA                 mov     rsi, r9
.text:00000000000056FD                 call    quotearg_n_options
.text:0000000000005702                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005707                 xor     rdi, fs:28h
.text:0000000000005710                 jnz     short loc_571C
.text:0000000000005712                 add     rsp, 48h
.text:0000000000005716                 retn
.text:0000000000005717 ; ---------------------------------------------------------------------------
.text:0000000000005717
.text:0000000000005717 loc_5717:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005717                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005717                 call    _abort
.text:000000000000571C ; ---------------------------------------------------------------------------
.text:000000000000571C
.text:000000000000571C loc_571C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000571C                 call    ___stack_chk_fail
.text:000000000000571C ; } // starts at 5690
.text:000000000000571C quotearg_n_custom_mem endp
.text:000000000000571C
.text:000000000000571C ; ---------------------------------------------------------------------------
.text:0000000000005721                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730
.text:0000000000005730                 public quotearg_n_custom
.text:0000000000005730 quotearg_n_custom proc near
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005737                 jmp     quotearg_n_custom_mem
.text:0000000000005737 ; } // starts at 5730
.text:0000000000005737 quotearg_n_custom endp
.text:0000000000005737
.text:0000000000005737 ; ---------------------------------------------------------------------------
.text:000000000000573C                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740
.text:0000000000005740                 public quotearg_custom
.text:0000000000005740 quotearg_custom proc near
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 mov     rcx, rdx
.text:0000000000005743                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000574A                 mov     rdx, rsi
.text:000000000000574D                 mov     rsi, rdi
.text:0000000000005750                 xor     edi, edi
.text:0000000000005752                 jmp     quotearg_n_custom_mem
.text:0000000000005752 ; } // starts at 5740
.text:0000000000005752 quotearg_custom endp
.text:0000000000005752
.text:0000000000005752 ; ---------------------------------------------------------------------------
.text:0000000000005757                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760
.text:0000000000005760                 public quotearg_custom_mem
.text:0000000000005760 quotearg_custom_mem proc near
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 mov     r8, rcx
.text:0000000000005763                 mov     rcx, rdx
.text:0000000000005766                 mov     rdx, rsi
.text:0000000000005769                 mov     rsi, rdi
.text:000000000000576C                 xor     edi, edi
.text:000000000000576E                 jmp     quotearg_n_custom_mem
.text:000000000000576E ; } // starts at 5760
.text:000000000000576E quotearg_custom_mem endp
.text:000000000000576E
.text:000000000000576E ; ---------------------------------------------------------------------------
.text:0000000000005773                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780
.text:0000000000005780                 public quote_n_mem
.text:0000000000005780 quote_n_mem     proc near
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 lea     rcx, quote_quoting_options
.text:0000000000005787                 jmp     quotearg_n_options
.text:0000000000005787 ; } // starts at 5780
.text:0000000000005787 quote_n_mem     endp
.text:0000000000005787
.text:0000000000005787 ; ---------------------------------------------------------------------------
.text:000000000000578C                 align 10h
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790
.text:0000000000005790                 public quote_mem
.text:0000000000005790 quote_mem       proc near
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 lea     rcx, quote_quoting_options
.text:0000000000005797                 mov     rdx, rsi
.text:000000000000579A                 mov     rsi, rdi
.text:000000000000579D                 xor     edi, edi
.text:000000000000579F                 jmp     quotearg_n_options
.text:000000000000579F ; } // starts at 5790
.text:000000000000579F quote_mem       endp
.text:000000000000579F
.text:000000000000579F ; ---------------------------------------------------------------------------
.text:00000000000057A4                 align 10h
.text:00000000000057B0
.text:00000000000057B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057B0
.text:00000000000057B0
.text:00000000000057B0                 public quote_n
.text:00000000000057B0 quote_n         proc near
.text:00000000000057B0 ; __unwind {
.text:00000000000057B0                 lea     rcx, quote_quoting_options
.text:00000000000057B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057BE                 jmp     quotearg_n_options
.text:00000000000057BE ; } // starts at 57B0
.text:00000000000057BE quote_n         endp
.text:00000000000057BE
.text:00000000000057BE ; ---------------------------------------------------------------------------
.text:00000000000057C3                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0
.text:00000000000057D0                 public quote
.text:00000000000057D0 quote           proc near               ; CODE XREF: main+246↑p
.text:00000000000057D0                                         ; main+4A8↑p ...
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 lea     rcx, quote_quoting_options
.text:00000000000057D7                 mov     rsi, rdi
.text:00000000000057DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000057E1                 xor     edi, edi
.text:00000000000057E3                 jmp     quotearg_n_options
.text:00000000000057E3 ; } // starts at 57D0
.text:00000000000057E3 quote           endp
.text:00000000000057E3
.text:00000000000057E3 ; ---------------------------------------------------------------------------
.text:00000000000057E8                 align 10h
.text:00000000000057F0
.text:00000000000057F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057F0
.text:00000000000057F0
.text:00000000000057F0                 public get_root_dev_ino
.text:00000000000057F0 get_root_dev_ino proc near              ; CODE XREF: main+422↑p
.text:00000000000057F0
.text:00000000000057F0 var_A8          = qword ptr -0A8h
.text:00000000000057F0 var_A0          = qword ptr -0A0h
.text:00000000000057F0 var_10          = qword ptr -10h
.text:00000000000057F0
.text:00000000000057F0 ; __unwind {
.text:00000000000057F0                 push    rbx
.text:00000000000057F1                 lea     rsi, aLibs+6    ; filename
.text:00000000000057F8                 mov     rbx, rdi
.text:00000000000057FB                 mov     edi, 1          ; ver
.text:0000000000005800                 sub     rsp, 0A0h
.text:0000000000005807                 mov     rdx, rsp        ; stat_buf
.text:000000000000580A                 mov     rax, fs:28h
.text:0000000000005813                 mov     [rsp+0A8h+var_10], rax
.text:000000000000581B                 xor     eax, eax
.text:000000000000581D                 call    ___lxstat
.text:0000000000005822                 test    eax, eax
.text:0000000000005824                 jnz     short loc_5858
.text:0000000000005826                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000582B                 mov     [rbx], rax
.text:000000000000582E                 mov     rax, [rsp+0A8h+var_A8]
.text:0000000000005832                 mov     [rbx+8], rax
.text:0000000000005836                 mov     rax, rbx
.text:0000000000005839
.text:0000000000005839 loc_5839:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:0000000000005839                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000005841                 xor     rcx, fs:28h
.text:000000000000584A                 jnz     short loc_585C
.text:000000000000584C                 add     rsp, 0A0h
.text:0000000000005853                 pop     rbx
.text:0000000000005854                 retn
.text:0000000000005854 ; ---------------------------------------------------------------------------
.text:0000000000005855                 align 8
.text:0000000000005858
.text:0000000000005858 loc_5858:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:0000000000005858                 xor     eax, eax
.text:000000000000585A                 jmp     short loc_5839
.text:000000000000585C ; ---------------------------------------------------------------------------
.text:000000000000585C
.text:000000000000585C loc_585C:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:000000000000585C                 call    ___stack_chk_fail
.text:000000000000585C ; } // starts at 57F0
.text:000000000000585C get_root_dev_ino endp
.text:000000000000585C
.text:000000000000585C ; ---------------------------------------------------------------------------
.text:0000000000005861                 align 10h
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870
.text:0000000000005870 parse_with_separator proc near          ; CODE XREF: parse_user_spec+45↓p
.text:0000000000005870                                         ; parse_user_spec+85↓p ...
.text:0000000000005870
.text:0000000000005870 msgid           = qword ptr -88h
.text:0000000000005870 name            = qword ptr -80h
.text:0000000000005870 var_78          = qword ptr -78h
.text:0000000000005870 var_70          = dword ptr -70h
.text:0000000000005870 var_6A          = byte ptr -6Ah
.text:0000000000005870 var_69          = byte ptr -69h
.text:0000000000005870 var_60          = qword ptr -60h
.text:0000000000005870 var_58          = byte ptr -58h
.text:0000000000005870 var_40          = qword ptr -40h
.text:0000000000005870
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 push    r15
.text:0000000000005872                 push    r14
.text:0000000000005874                 mov     r10, rsi
.text:0000000000005877                 push    r13
.text:0000000000005879                 push    r12
.text:000000000000587B                 mov     r12, rcx
.text:000000000000587E                 push    rbp
.text:000000000000587F                 push    rbx
.text:0000000000005880                 mov     r13, r8
.text:0000000000005883                 mov     r14, r9
.text:0000000000005886                 mov     r15d, 0FFFFFFFFh
.text:000000000000588C                 sub     rsp, 58h
.text:0000000000005890                 mov     eax, [rdx]
.text:0000000000005892                 mov     rcx, fs:28h
.text:000000000000589B                 mov     [rsp+88h+var_40], rcx
.text:00000000000058A0                 xor     ecx, ecx
.text:00000000000058A2                 test    r12, r12
.text:00000000000058A5                 mov     [rsp+88h+var_78], rdx
.text:00000000000058AA                 mov     [rsp+88h+var_70], eax
.text:00000000000058AE                 jz      short loc_58B4
.text:00000000000058B0                 mov     r15d, [r12]
.text:00000000000058B4
.text:00000000000058B4 loc_58B4:                               ; CODE XREF: parse_with_separator+3E↑j
.text:00000000000058B4                 test    r13, r13
.text:00000000000058B7                 jz      short loc_58C1
.text:00000000000058B9                 mov     qword ptr [r13+0], 0
.text:00000000000058C1
.text:00000000000058C1 loc_58C1:                               ; CODE XREF: parse_with_separator+47↑j
.text:00000000000058C1                 test    r14, r14
.text:00000000000058C4                 jz      short loc_58CD
.text:00000000000058C6                 mov     qword ptr [r14], 0
.text:00000000000058CD
.text:00000000000058CD loc_58CD:                               ; CODE XREF: parse_with_separator+54↑j
.text:00000000000058CD                 test    r10, r10
.text:00000000000058D0                 jz      loc_5A68
.text:00000000000058D6                 mov     rbx, r10
.text:00000000000058D9                 sub     rbx, rdi
.text:00000000000058DC                 jnz     loc_59B0
.text:00000000000058E2                 cmp     byte ptr [r10+1], 0
.text:00000000000058E7                 jz      loc_5AF8
.text:00000000000058ED                 add     r10, 1
.text:00000000000058F1                 mov     [rsp+88h+msgid], 0
.text:00000000000058F9                 setnz   [rsp+88h+var_6A]
.text:00000000000058FE                 mov     [rsp+88h+name], r10
.text:0000000000005903                 xor     ebp, ebp
.text:0000000000005905                 xor     ebx, ebx
.text:0000000000005907
.text:0000000000005907 loc_5907:                               ; CODE XREF: parse_with_separator+1C4↓j
.text:0000000000005907                                         ; parse_with_separator+1F0↓j ...
.text:0000000000005907                 cmp     [rsp+88h+var_6A], 0
.text:000000000000590C                 jz      loc_5C00
.text:0000000000005912                 mov     rax, [rsp+88h+name]
.text:0000000000005917                 cmp     byte ptr [rax], 2Bh ; '+'
.text:000000000000591A                 jz      loc_5A90
.text:0000000000005920                 mov     rdi, [rsp+88h+name] ; name
.text:0000000000005925                 call    _getgrnam
.text:000000000000592A                 test    rax, rax
.text:000000000000592D                 jz      loc_5A90
.text:0000000000005933                 mov     r15d, [rax+10h]
.text:0000000000005937
.text:0000000000005937 loc_5937:                               ; CODE XREF: parse_with_separator+2A8↓j
.text:0000000000005937                 call    _endgrent
.text:000000000000593C                 mov     rdi, [rsp+88h+name] ; src
.text:0000000000005941                 call    xstrdup
.text:0000000000005946                 mov     rbx, rax
.text:0000000000005949
.text:0000000000005949 loc_5949:                               ; CODE XREF: parse_with_separator+39B↓j
.text:0000000000005949                 mov     r10, rbp
.text:000000000000594C
.text:000000000000594C loc_594C:                               ; CODE XREF: parse_with_separator+1FD↓j
.text:000000000000594C                                         ; parse_with_separator+28D↓j
.text:000000000000594C                 mov     rax, [rsp+88h+var_78]
.text:0000000000005951                 mov     esi, [rsp+88h+var_70]
.text:0000000000005955                 test    r12, r12
.text:0000000000005958                 mov     [rax], esi
.text:000000000000595A                 jz      short loc_5960
.text:000000000000595C                 mov     [r12], r15d
.text:0000000000005960
.text:0000000000005960 loc_5960:                               ; CODE XREF: parse_with_separator+EA↑j
.text:0000000000005960                 test    r13, r13
.text:0000000000005963                 jz      short loc_596C
.text:0000000000005965                 mov     [r13+0], r10
.text:0000000000005969                 xor     r10d, r10d
.text:000000000000596C
.text:000000000000596C loc_596C:                               ; CODE XREF: parse_with_separator+F3↑j
.text:000000000000596C                 test    r14, r14
.text:000000000000596F                 jz      short loc_5976
.text:0000000000005971                 mov     [r14], rbx
.text:0000000000005974                 xor     ebx, ebx
.text:0000000000005976
.text:0000000000005976 loc_5976:                               ; CODE XREF: parse_with_separator+FF↑j
.text:0000000000005976                 mov     rdi, r10        ; ptr
.text:0000000000005979                 call    free
.text:000000000000597E                 mov     rdi, rbx        ; src
.text:0000000000005981                 call    free
.text:0000000000005986                 xor     eax, eax
.text:0000000000005988
.text:0000000000005988 loc_5988:                               ; CODE XREF: parse_with_separator+27E↓j
.text:0000000000005988                 mov     rdx, [rsp+88h+var_40]
.text:000000000000598D                 xor     rdx, fs:28h
.text:0000000000005996                 jnz     loc_5C25
.text:000000000000599C                 add     rsp, 58h
.text:00000000000059A0                 pop     rbx
.text:00000000000059A1                 pop     rbp
.text:00000000000059A2                 pop     r12
.text:00000000000059A4                 pop     r13
.text:00000000000059A6                 pop     r14
.text:00000000000059A8                 pop     r15
.text:00000000000059AA                 retn
.text:00000000000059AA ; ---------------------------------------------------------------------------
.text:00000000000059AB                 align 10h
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: parse_with_separator+6C↑j
.text:00000000000059B0                 lea     rsi, [rbx+1]    ; n
.text:00000000000059B4                 mov     [rsp+88h+msgid], r10
.text:00000000000059B8                 call    xmemdup
.text:00000000000059BD                 mov     r10, [rsp+88h+msgid]
.text:00000000000059C1                 mov     byte ptr [rax+rbx], 0
.text:00000000000059C5                 mov     rbp, rax
.text:00000000000059C8                 cmp     byte ptr [r10+1], 0
.text:00000000000059CD                 jnz     loc_5B20
.text:00000000000059D3
.text:00000000000059D3 loc_59D3:                               ; CODE XREF: parse_with_separator+213↓j
.text:00000000000059D3                 test    rbp, rbp
.text:00000000000059D6                 jz      loc_5AF8
.text:00000000000059DC                 mov     [rsp+88h+var_6A], 0
.text:00000000000059E1                 mov     eax, 1
.text:00000000000059E6                 mov     [rsp+88h+name], 0
.text:00000000000059EF
.text:00000000000059EF loc_59EF:                               ; CODE XREF: parse_with_separator+2D0↓j
.text:00000000000059EF                 test    r10, r10
.text:00000000000059F2                 setnz   r9b
.text:00000000000059F6                 and     r9d, eax
.text:00000000000059F9                 cmp     byte ptr [rbp+0], 2Bh ; '+'
.text:00000000000059FD                 jz      short loc_5A40
.text:00000000000059FF                 mov     rdi, rbp        ; src
.text:0000000000005A02                 mov     byte ptr [rsp+88h+msgid], r9b
.text:0000000000005A06                 call    _getpwnam
.text:0000000000005A0B                 test    rax, rax
.text:0000000000005A0E                 movzx   r9d, byte ptr [rsp+88h+msgid]
.text:0000000000005A13                 jz      short loc_5A40
.text:0000000000005A15                 mov     ecx, [rax+10h]
.text:0000000000005A18                 xor     ebx, ebx
.text:0000000000005A1A                 test    r9b, r9b
.text:0000000000005A1D                 mov     [rsp+88h+msgid], 0
.text:0000000000005A25                 mov     [rsp+88h+var_70], ecx
.text:0000000000005A29                 jnz     loc_5B48
.text:0000000000005A2F
.text:0000000000005A2F loc_5A2F:                               ; CODE XREF: parse_with_separator+305↓j
.text:0000000000005A2F                 call    _endpwent
.text:0000000000005A34                 jmp     loc_5907
.text:0000000000005A34 ; ---------------------------------------------------------------------------
.text:0000000000005A39                 align 20h
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: parse_with_separator+18D↑j
.text:0000000000005A40                                         ; parse_with_separator+1A3↑j
.text:0000000000005A40                 test    r9b, r9b
.text:0000000000005A43                 jz      loc_5B80
.text:0000000000005A49                 lea     rax, aInvalidSpec ; "invalid spec"
.text:0000000000005A50                 mov     [rsp+88h+var_6A], 0
.text:0000000000005A55                 xor     ebx, ebx
.text:0000000000005A57                 mov     [rsp+88h+msgid], rax
.text:0000000000005A5B                 call    _endpwent
.text:0000000000005A60                 jmp     loc_5907
.text:0000000000005A60 ; ---------------------------------------------------------------------------
.text:0000000000005A65                 align 8
.text:0000000000005A68
.text:0000000000005A68 loc_5A68:                               ; CODE XREF: parse_with_separator+60↑j
.text:0000000000005A68                 xor     ebx, ebx
.text:0000000000005A6A                 cmp     byte ptr [rdi], 0
.text:0000000000005A6D                 jz      loc_594C
.text:0000000000005A73                 mov     [rsp+88h+msgid], r10
.text:0000000000005A77                 call    xstrdup
.text:0000000000005A7C                 mov     r10, [rsp+88h+msgid]
.text:0000000000005A80                 mov     rbp, rax
.text:0000000000005A83                 jmp     loc_59D3
.text:0000000000005A83 ; ---------------------------------------------------------------------------
.text:0000000000005A88                 align 10h
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: parse_with_separator+AA↑j
.text:0000000000005A90                                         ; parse_with_separator+BD↑j
.text:0000000000005A90                 mov     rdi, [rsp+88h+name] ; nptr
.text:0000000000005A95                 lea     rcx, [rsp+88h+var_60]
.text:0000000000005A9A                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005AA1                 xor     esi, esi
.text:0000000000005AA3                 mov     edx, 0Ah
.text:0000000000005AA8                 call    xstrtoul
.text:0000000000005AAD                 test    eax, eax
.text:0000000000005AAF                 jz      short loc_5B08
.text:0000000000005AB1
.text:0000000000005AB1 loc_5AB1:                               ; CODE XREF: parse_with_separator+2AE↓j
.text:0000000000005AB1                 call    _endgrent
.text:0000000000005AB6                 mov     rdi, [rsp+88h+name] ; src
.text:0000000000005ABB                 call    xstrdup
.text:0000000000005AC0                 mov     rbx, rax
.text:0000000000005AC3                 lea     rax, aInvalidGroup ; "invalid group"
.text:0000000000005ACA                 mov     [rsp+88h+msgid], rax
.text:0000000000005ACE
.text:0000000000005ACE loc_5ACE:                               ; CODE XREF: parse_with_separator+395↓j
.text:0000000000005ACE                 mov     rdi, rbp        ; ptr
.text:0000000000005AD1                 call    free
.text:0000000000005AD6                 mov     rdi, rbx        ; ptr
.text:0000000000005AD9                 call    free
.text:0000000000005ADE                 mov     rsi, [rsp+88h+msgid] ; msgid
.text:0000000000005AE2                 mov     edx, 5          ; category
.text:0000000000005AE7                 xor     edi, edi        ; domainname
.text:0000000000005AE9                 call    _dcgettext
.text:0000000000005AEE                 jmp     loc_5988
.text:0000000000005AEE ; ---------------------------------------------------------------------------
.text:0000000000005AF3                 align 8
.text:0000000000005AF8
.text:0000000000005AF8 loc_5AF8:                               ; CODE XREF: parse_with_separator+77↑j
.text:0000000000005AF8                                         ; parse_with_separator+166↑j
.text:0000000000005AF8                 xor     r10d, r10d
.text:0000000000005AFB                 xor     ebx, ebx
.text:0000000000005AFD                 jmp     loc_594C
.text:0000000000005AFD ; ---------------------------------------------------------------------------
.text:0000000000005B02                 align 8
.text:0000000000005B08
.text:0000000000005B08 loc_5B08:                               ; CODE XREF: parse_with_separator+23F↑j
.text:0000000000005B08                 mov     rax, [rsp+88h+var_60]
.text:0000000000005B0D                 mov     edx, 0FFFFFFFEh
.text:0000000000005B12                 cmp     rax, rdx
.text:0000000000005B15                 mov     r15d, eax
.text:0000000000005B18                 jbe     loc_5937
.text:0000000000005B1E                 jmp     short loc_5AB1
.text:0000000000005B20 ; ---------------------------------------------------------------------------
.text:0000000000005B20
.text:0000000000005B20 loc_5B20:                               ; CODE XREF: parse_with_separator+15D↑j
.text:0000000000005B20                 mov     rax, r10
.text:0000000000005B23                 add     rax, 1
.text:0000000000005B27                 setnz   [rsp+88h+var_6A]
.text:0000000000005B2C                 test    rbp, rbp
.text:0000000000005B2F                 mov     [rsp+88h+name], rax
.text:0000000000005B34                 jz      loc_5C2A
.text:0000000000005B3A                 test    rax, rax
.text:0000000000005B3D                 setz    al
.text:0000000000005B40                 jmp     loc_59EF
.text:0000000000005B40 ; ---------------------------------------------------------------------------
.text:0000000000005B45                 align 8
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: parse_with_separator+1B9↑j
.text:0000000000005B48                 mov     r15d, [rax+14h]
.text:0000000000005B4C                 mov     edi, r15d       ; gid
.text:0000000000005B4F                 call    _getgrgid
.text:0000000000005B54                 test    rax, rax
.text:0000000000005B57                 jz      loc_5C10
.text:0000000000005B5D                 mov     rdi, [rax]      ; src
.text:0000000000005B60
.text:0000000000005B60 loc_5B60:                               ; CODE XREF: parse_with_separator+3B0↓j
.text:0000000000005B60                 call    xstrdup
.text:0000000000005B65                 mov     rbx, rax
.text:0000000000005B68                 call    _endgrent
.text:0000000000005B6D                 mov     [rsp+88h+msgid], 0
.text:0000000000005B75                 jmp     loc_5A2F
.text:0000000000005B75 ; ---------------------------------------------------------------------------
.text:0000000000005B7A                 align 20h
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: parse_with_separator+1D3↑j
.text:0000000000005B80                 lea     rcx, [rsp+88h+var_60]
.text:0000000000005B85                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005B8C                 xor     esi, esi
.text:0000000000005B8E                 mov     edx, 0Ah
.text:0000000000005B93                 mov     rdi, rbp        ; nptr
.text:0000000000005B96                 mov     [rsp+88h+var_69], r9b
.text:0000000000005B9B                 call    xstrtoul
.text:0000000000005BA0                 lea     rsi, aInvalidUser ; "invalid user"
.text:0000000000005BA7                 test    eax, eax
.text:0000000000005BA9                 movzx   r9d, [rsp+88h+var_69]
.text:0000000000005BAF                 mov     [rsp+88h+msgid], rsi
.text:0000000000005BB3                 jnz     short loc_5BE6
.text:0000000000005BB5                 mov     rax, [rsp+88h+var_60]
.text:0000000000005BBA                 movzx   ecx, [rsp+88h+var_6A]
.text:0000000000005BBF                 mov     edx, 0FFFFFFFEh
.text:0000000000005BC4                 cmp     rax, rdx
.text:0000000000005BC7                 cmova   ecx, r9d
.text:0000000000005BCB                 mov     r9d, ecx
.text:0000000000005BCE                 mov     ecx, [rsp+88h+var_70]
.text:0000000000005BD2                 cmovbe  ecx, eax
.text:0000000000005BD5                 mov     eax, 0
.text:0000000000005BDA                 cmova   rax, rsi
.text:0000000000005BDE                 mov     [rsp+88h+var_70], ecx
.text:0000000000005BE2                 mov     [rsp+88h+msgid], rax
.text:0000000000005BE6
.text:0000000000005BE6 loc_5BE6:                               ; CODE XREF: parse_with_separator+343↑j
.text:0000000000005BE6                 mov     [rsp+88h+var_6A], r9b
.text:0000000000005BEB                 xor     ebx, ebx
.text:0000000000005BED                 call    _endpwent
.text:0000000000005BF2                 jmp     loc_5907
.text:0000000000005BF2 ; ---------------------------------------------------------------------------
.text:0000000000005BF7                 align 20h
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: parse_with_separator+9C↑j
.text:0000000000005C00                 cmp     [rsp+88h+msgid], 0
.text:0000000000005C05                 jnz     loc_5ACE
.text:0000000000005C0B                 jmp     loc_5949
.text:0000000000005C10 ; ---------------------------------------------------------------------------
.text:0000000000005C10
.text:0000000000005C10 loc_5C10:                               ; CODE XREF: parse_with_separator+2E7↑j
.text:0000000000005C10                 lea     rsi, [rsp+88h+var_58]
.text:0000000000005C15                 mov     edi, r15d
.text:0000000000005C18                 call    umaxtostr
.text:0000000000005C1D                 mov     rdi, rax
.text:0000000000005C20                 jmp     loc_5B60
.text:0000000000005C25 ; ---------------------------------------------------------------------------
.text:0000000000005C25
.text:0000000000005C25 loc_5C25:                               ; CODE XREF: parse_with_separator+126↑j
.text:0000000000005C25                 call    ___stack_chk_fail
.text:0000000000005C2A ; ---------------------------------------------------------------------------
.text:0000000000005C2A
.text:0000000000005C2A loc_5C2A:                               ; CODE XREF: parse_with_separator+2C4↑j
.text:0000000000005C2A                 xor     ebx, ebx
.text:0000000000005C2C                 mov     [rsp+88h+msgid], 0
.text:0000000000005C34                 jmp     loc_5907
.text:0000000000005C34 ; } // starts at 5870
.text:0000000000005C34 parse_with_separator endp
.text:0000000000005C34
.text:0000000000005C34 ; ---------------------------------------------------------------------------
.text:0000000000005C39                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40 ; __int64 __fastcall parse_user_spec(char *s)
.text:0000000000005C40                 public parse_user_spec
.text:0000000000005C40 parse_user_spec proc near               ; CODE XREF: main+22D↑p
.text:0000000000005C40                                         ; main+3F6↑p
.text:0000000000005C40
.text:0000000000005C40 var_40          = qword ptr -40h
.text:0000000000005C40
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 test    rdx, rdx
.text:0000000000005C43                 jz      loc_5CF0
.text:0000000000005C49                 push    r15
.text:0000000000005C4B                 push    r14
.text:0000000000005C4D                 mov     r14, rsi
.text:0000000000005C50                 push    r13
.text:0000000000005C52                 push    r12
.text:0000000000005C54                 mov     r13, r8
.text:0000000000005C57                 push    rbp
.text:0000000000005C58                 push    rbx
.text:0000000000005C59                 mov     r12, rcx
.text:0000000000005C5C                 mov     rbp, rdx
.text:0000000000005C5F                 mov     rbx, rdi
.text:0000000000005C62                 mov     esi, 3Ah ; ':'  ; c
.text:0000000000005C67                 sub     rsp, 18h
.text:0000000000005C6B                 call    _strchr
.text:0000000000005C70                 mov     r9, r13
.text:0000000000005C73                 mov     r15, rax
.text:0000000000005C76                 mov     r8, r12
.text:0000000000005C79                 mov     rcx, rbp
.text:0000000000005C7C                 mov     rdx, r14
.text:0000000000005C7F                 mov     rsi, rax
.text:0000000000005C82                 mov     rdi, rbx
.text:0000000000005C85                 call    parse_with_separator
.text:0000000000005C8A                 test    r15, r15
.text:0000000000005C8D                 mov     r10, rax
.text:0000000000005C90                 jnz     short loc_5CD4
.text:0000000000005C92                 test    rax, rax
.text:0000000000005C95                 mov     [rsp+48h+var_40], rax
.text:0000000000005C9A                 jz      short loc_5D08
.text:0000000000005C9C                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000005CA1                 mov     rdi, rbx        ; s
.text:0000000000005CA4                 call    _strchr
.text:0000000000005CA9                 test    rax, rax
.text:0000000000005CAC                 mov     r10, [rsp+48h+var_40]
.text:0000000000005CB1                 jz      short loc_5CD4
.text:0000000000005CB3                 mov     r9, r13
.text:0000000000005CB6                 mov     r8, r12
.text:0000000000005CB9                 mov     rcx, rbp
.text:0000000000005CBC                 mov     rdx, r14
.text:0000000000005CBF                 mov     rsi, rax
.text:0000000000005CC2                 mov     rdi, rbx
.text:0000000000005CC5                 call    parse_with_separator
.text:0000000000005CCA                 test    rax, rax
.text:0000000000005CCD                 mov     r10, [rsp+48h+var_40]
.text:0000000000005CD2                 jz      short loc_5D08
.text:0000000000005CD4
.text:0000000000005CD4 loc_5CD4:                               ; CODE XREF: parse_user_spec+50↑j
.text:0000000000005CD4                                         ; parse_user_spec+71↑j ...
.text:0000000000005CD4                 add     rsp, 18h
.text:0000000000005CD8                 mov     rax, r10
.text:0000000000005CDB                 pop     rbx
.text:0000000000005CDC                 pop     rbp
.text:0000000000005CDD                 pop     r12
.text:0000000000005CDF                 pop     r13
.text:0000000000005CE1                 pop     r14
.text:0000000000005CE3                 pop     r15
.text:0000000000005CE5                 retn
.text:0000000000005CE5 ; ---------------------------------------------------------------------------
.text:0000000000005CE6                 align 10h
.text:0000000000005CF0
.text:0000000000005CF0 loc_5CF0:                               ; CODE XREF: parse_user_spec+3↑j
.text:0000000000005CF0                 mov     r9, r8
.text:0000000000005CF3                 mov     rdx, rsi
.text:0000000000005CF6                 mov     r8, rcx
.text:0000000000005CF9                 xor     esi, esi
.text:0000000000005CFB                 xor     ecx, ecx
.text:0000000000005CFD                 jmp     parse_with_separator
.text:0000000000005CFD ; ---------------------------------------------------------------------------
.text:0000000000005D02                 align 8
.text:0000000000005D08
.text:0000000000005D08 loc_5D08:                               ; CODE XREF: parse_user_spec+5A↑j
.text:0000000000005D08                                         ; parse_user_spec+92↑j
.text:0000000000005D08                 xor     r10d, r10d
.text:0000000000005D0B                 jmp     short loc_5CD4
.text:0000000000005D0B ; } // starts at 5C40
.text:0000000000005D0B parse_user_spec endp
.text:0000000000005D0B
.text:0000000000005D0B ; ---------------------------------------------------------------------------
.text:0000000000005D0D                 align 10h
.text:0000000000005D10
.text:0000000000005D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D10
.text:0000000000005D10
.text:0000000000005D10 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005D10                 public version_etc_arn
.text:0000000000005D10 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_614B↓j
.text:0000000000005D10                                         ; version_etc_va:loc_619B↓p ...
.text:0000000000005D10
.text:0000000000005D10 var_58          = qword ptr -58h
.text:0000000000005D10 var_50          = qword ptr -50h
.text:0000000000005D10 var_48          = qword ptr -48h
.text:0000000000005D10 var_40          = qword ptr -40h
.text:0000000000005D10
.text:0000000000005D10 ; __unwind {
.text:0000000000005D10                 push    r15
.text:0000000000005D12                 push    r14
.text:0000000000005D14                 push    r13
.text:0000000000005D16                 push    r12
.text:0000000000005D18                 mov     r12, r9
.text:0000000000005D1B                 push    rbp
.text:0000000000005D1C                 push    rbx
.text:0000000000005D1D                 mov     rbp, rdi
.text:0000000000005D20                 mov     rbx, r8
.text:0000000000005D23                 sub     rsp, 28h
.text:0000000000005D27                 test    rsi, rsi
.text:0000000000005D2A                 jz      loc_5E48
.text:0000000000005D30                 mov     r8, rdx
.text:0000000000005D33                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000005D3A                 mov     r9, rcx
.text:0000000000005D3D                 xor     eax, eax
.text:0000000000005D3F                 mov     rcx, rsi
.text:0000000000005D42                 mov     esi, 1
.text:0000000000005D47                 call    ___fprintf_chk
.text:0000000000005D4C
.text:0000000000005D4C loc_5D4C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000005D4C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005D53                 xor     edi, edi        ; domainname
.text:0000000000005D55                 mov     edx, 5          ; category
.text:0000000000005D5A                 call    _dcgettext
.text:0000000000005D5F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005D66                 mov     rcx, rax
.text:0000000000005D69                 mov     r8d, 7E3h
.text:0000000000005D6F                 mov     esi, 1
.text:0000000000005D74                 mov     rdi, rbp
.text:0000000000005D77                 xor     eax, eax
.text:0000000000005D79                 call    ___fprintf_chk
.text:0000000000005D7E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005D85                 xor     edi, edi        ; domainname
.text:0000000000005D87                 mov     edx, 5          ; category
.text:0000000000005D8C                 call    _dcgettext
.text:0000000000005D91                 mov     rsi, rbp        ; stream
.text:0000000000005D94                 mov     rdi, rax        ; s
.text:0000000000005D97                 call    _fputs_unlocked
.text:0000000000005D9C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005DA0                 ja      def_5DB4        ; jumptable 0000000000005DB4 default case
.text:0000000000005DA6                 lea     rdx, jpt_5DB4
.text:0000000000005DAD                 movsxd  rax, ds:(jpt_5DB4 - 0C2ECh)[rdx+r12*4]
.text:0000000000005DB1                 add     rax, rdx
.text:0000000000005DB4                 jmp     rax             ; switch jump
.text:0000000000005DB4 ; ---------------------------------------------------------------------------
.text:0000000000005DB6                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005DC0                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005DC0                 mov     r9, [rbx+38h]   ; jumptable 0000000000005DB4 case 8
.text:0000000000005DC4                 mov     rax, [rbx+10h]
.text:0000000000005DC8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005DCF                 mov     r8, [rbx+8]
.text:0000000000005DD3                 mov     edx, 5          ; category
.text:0000000000005DD8                 xor     edi, edi        ; domainname
.text:0000000000005DDA                 mov     r13, [rbx+30h]
.text:0000000000005DDE                 mov     r12, [rbx+28h]
.text:0000000000005DE2                 mov     [rsp+58h+var_48], r9
.text:0000000000005DE7                 mov     r15, [rbx+20h]
.text:0000000000005DEB                 mov     r14, [rbx+18h]
.text:0000000000005DEF                 mov     [rsp+58h+var_58], rax
.text:0000000000005DF3                 mov     [rsp+58h+var_50], r8
.text:0000000000005DF8                 mov     rbx, [rbx]
.text:0000000000005DFB                 call    _dcgettext
.text:0000000000005E00                 sub     rsp, 8
.text:0000000000005E04
.text:0000000000005E04 loc_5E04:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005E04                 mov     r9, [rsp+60h+var_48]
.text:0000000000005E09                 mov     rdx, rax
.text:0000000000005E0C                 mov     rcx, rbx
.text:0000000000005E0F                 mov     esi, 1
.text:0000000000005E14                 mov     rdi, rbp
.text:0000000000005E17                 xor     eax, eax
.text:0000000000005E19                 push    r9
.text:0000000000005E1B                 push    r13
.text:0000000000005E1D                 push    r12
.text:0000000000005E1F                 push    r15
.text:0000000000005E21                 push    r14
.text:0000000000005E23                 mov     r9, [rsp+88h+var_58]
.text:0000000000005E28                 mov     r8, [rsp+88h+var_50]
.text:0000000000005E2D                 call    ___fprintf_chk
.text:0000000000005E32                 add     rsp, 30h
.text:0000000000005E36
.text:0000000000005E36 loc_5E36:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005E36                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005E36                 add     rsp, 28h        ; jumptable 0000000000005DB4 case 0
.text:0000000000005E3A                 pop     rbx
.text:0000000000005E3B                 pop     rbp
.text:0000000000005E3C                 pop     r12
.text:0000000000005E3E                 pop     r13
.text:0000000000005E40                 pop     r14
.text:0000000000005E42                 pop     r15
.text:0000000000005E44                 retn
.text:0000000000005E44 ; ---------------------------------------------------------------------------
.text:0000000000005E45                 align 8
.text:0000000000005E48
.text:0000000000005E48 loc_5E48:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005E48                 mov     r8, rcx
.text:0000000000005E4B                 mov     rcx, rdx
.text:0000000000005E4E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005E55                 mov     esi, 1
.text:0000000000005E5A                 xor     eax, eax
.text:0000000000005E5C                 call    ___fprintf_chk
.text:0000000000005E61                 jmp     loc_5D4C
.text:0000000000005E61 ; ---------------------------------------------------------------------------
.text:0000000000005E66                 align 10h
.text:0000000000005E70
.text:0000000000005E70 loc_5E70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005E70                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005E70                 mov     r10, [rbx+40h]  ; jumptable 0000000000005DB4 case 9
.text:0000000000005E74                 mov     r9, [rbx+38h]
.text:0000000000005E78                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005E7F                 mov     rax, [rbx+10h]
.text:0000000000005E83                 mov     r8, [rbx+8]
.text:0000000000005E87                 mov     edx, 5          ; category
.text:0000000000005E8C                 mov     r13, [rbx+30h]
.text:0000000000005E90                 mov     r12, [rbx+28h]
.text:0000000000005E94                 mov     r15, [rbx+20h]
.text:0000000000005E98                 mov     r14, [rbx+18h]
.text:0000000000005E9C                 mov     rbx, [rbx]
.text:0000000000005E9F                 mov     [rsp+58h+var_40], r10
.text:0000000000005EA4                 mov     [rsp+58h+var_48], r9
.text:0000000000005EA9                 mov     [rsp+58h+var_58], rax
.text:0000000000005EAD                 mov     [rsp+58h+var_50], r8
.text:0000000000005EB2
.text:0000000000005EB2 loc_5EB2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005EB2                 xor     edi, edi        ; domainname
.text:0000000000005EB4                 call    _dcgettext
.text:0000000000005EB9                 mov     r10, [rsp+58h+var_40]
.text:0000000000005EBE                 push    r10
.text:0000000000005EC0                 jmp     loc_5E04
.text:0000000000005EC0 ; ---------------------------------------------------------------------------
.text:0000000000005EC5                 align 8
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005EC8                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005EC8                 mov     rbx, [rbx]      ; jumptable 0000000000005DB4 case 1
.text:0000000000005ECB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005ED2                 mov     edx, 5          ; category
.text:0000000000005ED7                 xor     edi, edi        ; domainname
.text:0000000000005ED9                 call    _dcgettext
.text:0000000000005EDE                 add     rsp, 28h
.text:0000000000005EE2                 mov     rcx, rbx
.text:0000000000005EE5                 mov     rdi, rbp
.text:0000000000005EE8                 pop     rbx
.text:0000000000005EE9                 pop     rbp
.text:0000000000005EEA                 pop     r12
.text:0000000000005EEC                 pop     r13
.text:0000000000005EEE                 pop     r14
.text:0000000000005EF0                 pop     r15
.text:0000000000005EF2                 mov     rdx, rax
.text:0000000000005EF5                 mov     esi, 1
.text:0000000000005EFA                 xor     eax, eax
.text:0000000000005EFC                 jmp     ___fprintf_chk
.text:0000000000005EFC ; ---------------------------------------------------------------------------
.text:0000000000005F01                 align 8
.text:0000000000005F08
.text:0000000000005F08 loc_5F08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F08                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005F08                 mov     r12, [rbx+8]    ; jumptable 0000000000005DB4 case 2
.text:0000000000005F0C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005F13                 mov     rbx, [rbx]
.text:0000000000005F16                 mov     edx, 5          ; category
.text:0000000000005F1B                 xor     edi, edi        ; domainname
.text:0000000000005F1D                 call    _dcgettext
.text:0000000000005F22                 add     rsp, 28h
.text:0000000000005F26                 mov     r8, r12
.text:0000000000005F29                 mov     rcx, rbx
.text:0000000000005F2C                 mov     rdi, rbp
.text:0000000000005F2F                 mov     rdx, rax
.text:0000000000005F32                 mov     esi, 1
.text:0000000000005F37                 pop     rbx
.text:0000000000005F38                 pop     rbp
.text:0000000000005F39                 pop     r12
.text:0000000000005F3B                 pop     r13
.text:0000000000005F3D                 pop     r14
.text:0000000000005F3F                 pop     r15
.text:0000000000005F41                 xor     eax, eax
.text:0000000000005F43                 jmp     ___fprintf_chk
.text:0000000000005F43 ; ---------------------------------------------------------------------------
.text:0000000000005F48                 align 10h
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F50                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005F50                 mov     r13, [rbx+10h]  ; jumptable 0000000000005DB4 case 3
.text:0000000000005F54                 mov     r12, [rbx+8]
.text:0000000000005F58                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000005F5F                 mov     rbx, [rbx]
.text:0000000000005F62                 mov     edx, 5          ; category
.text:0000000000005F67                 xor     edi, edi        ; domainname
.text:0000000000005F69                 call    _dcgettext
.text:0000000000005F6E                 add     rsp, 28h
.text:0000000000005F72                 mov     r9, r13
.text:0000000000005F75                 mov     r8, r12
.text:0000000000005F78                 mov     rcx, rbx
.text:0000000000005F7B                 mov     rdi, rbp
.text:0000000000005F7E                 mov     rdx, rax
.text:0000000000005F81                 pop     rbx
.text:0000000000005F82                 pop     rbp
.text:0000000000005F83                 pop     r12
.text:0000000000005F85                 pop     r13
.text:0000000000005F87                 pop     r14
.text:0000000000005F89                 pop     r15
.text:0000000000005F8B                 mov     esi, 1
.text:0000000000005F90                 xor     eax, eax
.text:0000000000005F92                 jmp     ___fprintf_chk
.text:0000000000005F92 ; ---------------------------------------------------------------------------
.text:0000000000005F97                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005FA0                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005FA0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005DB4 case 4
.text:0000000000005FA7                 mov     edx, 5          ; category
.text:0000000000005FAC                 xor     edi, edi        ; domainname
.text:0000000000005FAE                 mov     r14, [rbx+18h]
.text:0000000000005FB2                 mov     r13, [rbx+10h]
.text:0000000000005FB6                 mov     r12, [rbx+8]
.text:0000000000005FBA                 mov     rbx, [rbx]
.text:0000000000005FBD                 call    _dcgettext
.text:0000000000005FC2                 sub     rsp, 8
.text:0000000000005FC6
.text:0000000000005FC6 loc_5FC6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005FC6                 push    r14
.text:0000000000005FC8                 mov     rdx, rax
.text:0000000000005FCB                 mov     r9, r13
.text:0000000000005FCE                 mov     r8, r12
.text:0000000000005FD1                 mov     rcx, rbx
.text:0000000000005FD4                 mov     rdi, rbp
.text:0000000000005FD7                 mov     esi, 1
.text:0000000000005FDC                 xor     eax, eax
.text:0000000000005FDE                 call    ___fprintf_chk
.text:0000000000005FE3                 pop     rax
.text:0000000000005FE4                 pop     rdx
.text:0000000000005FE5                 add     rsp, 28h
.text:0000000000005FE9                 pop     rbx
.text:0000000000005FEA                 pop     rbp
.text:0000000000005FEB                 pop     r12
.text:0000000000005FED                 pop     r13
.text:0000000000005FEF                 pop     r14
.text:0000000000005FF1                 pop     r15
.text:0000000000005FF3                 retn
.text:0000000000005FF3 ; ---------------------------------------------------------------------------
.text:0000000000005FF4                 align 8
.text:0000000000005FF8
.text:0000000000005FF8 loc_5FF8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005FF8                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000005FF8                 mov     r15, [rbx+20h]  ; jumptable 0000000000005DB4 case 5
.text:0000000000005FFC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006003                 mov     edx, 5          ; category
.text:0000000000006008                 xor     edi, edi        ; domainname
.text:000000000000600A                 mov     r14, [rbx+18h]
.text:000000000000600E                 mov     r13, [rbx+10h]
.text:0000000000006012                 mov     r12, [rbx+8]
.text:0000000000006016                 mov     rbx, [rbx]
.text:0000000000006019                 call    _dcgettext
.text:000000000000601E                 push    r15
.text:0000000000006020                 jmp     short loc_5FC6
.text:0000000000006020 ; ---------------------------------------------------------------------------
.text:0000000000006022                 align 8
.text:0000000000006028
.text:0000000000006028 loc_6028:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006028                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000006028                 mov     r8, [rbx+8]     ; jumptable 0000000000005DB4 case 6
.text:000000000000602C                 mov     r12, [rbx+28h]
.text:0000000000006030                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006037                 mov     r15, [rbx+20h]
.text:000000000000603B                 mov     r14, [rbx+18h]
.text:000000000000603F                 mov     edx, 5          ; category
.text:0000000000006044                 mov     r13, [rbx+10h]
.text:0000000000006048                 xor     edi, edi        ; domainname
.text:000000000000604A                 mov     rbx, [rbx]
.text:000000000000604D                 mov     [rsp+58h+var_58], r8
.text:0000000000006051                 call    _dcgettext
.text:0000000000006056                 sub     rsp, 8
.text:000000000000605A                 mov     r9, r13
.text:000000000000605D                 push    r12
.text:000000000000605F                 push    r15
.text:0000000000006061                 push    r14
.text:0000000000006063
.text:0000000000006063 loc_6063:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006063                 mov     r8, [rsp+78h+var_58]
.text:0000000000006068                 mov     rcx, rbx
.text:000000000000606B                 mov     rdx, rax
.text:000000000000606E                 mov     rdi, rbp
.text:0000000000006071                 mov     esi, 1
.text:0000000000006076                 xor     eax, eax
.text:0000000000006078                 call    ___fprintf_chk
.text:000000000000607D                 add     rsp, 20h
.text:0000000000006081                 add     rsp, 28h
.text:0000000000006085                 pop     rbx
.text:0000000000006086                 pop     rbp
.text:0000000000006087                 pop     r12
.text:0000000000006089                 pop     r13
.text:000000000000608B                 pop     r14
.text:000000000000608D                 pop     r15
.text:000000000000608F                 retn
.text:0000000000006090 ; ---------------------------------------------------------------------------
.text:0000000000006090
.text:0000000000006090 loc_6090:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006090                                         ; DATA XREF: .rodata:jpt_5DB4↓o
.text:0000000000006090                 mov     r9, [rbx+10h]   ; jumptable 0000000000005DB4 case 7
.text:0000000000006094                 mov     r13, [rbx+30h]
.text:0000000000006098                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000609F                 mov     r12, [rbx+28h]
.text:00000000000060A3                 mov     r15, [rbx+20h]
.text:00000000000060A7                 mov     edx, 5          ; category
.text:00000000000060AC                 mov     r14, [rbx+18h]
.text:00000000000060B0                 mov     r8, [rbx+8]
.text:00000000000060B4                 xor     edi, edi        ; domainname
.text:00000000000060B6                 mov     [rsp+58h+var_50], r9
.text:00000000000060BB                 mov     rbx, [rbx]
.text:00000000000060BE                 mov     [rsp+58h+var_58], r8
.text:00000000000060C2                 call    _dcgettext
.text:00000000000060C7                 push    r13
.text:00000000000060C9                 push    r12
.text:00000000000060CB                 push    r15
.text:00000000000060CD                 push    r14
.text:00000000000060CF                 mov     r9, [rsp+78h+var_50]
.text:00000000000060D4                 jmp     short loc_6063
.text:00000000000060D4 ; ---------------------------------------------------------------------------
.text:00000000000060D6                 align 20h
.text:00000000000060E0
.text:00000000000060E0 def_5DB4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000060E0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005DB4 default case
.text:00000000000060E4                 mov     r9, [rbx+38h]
.text:00000000000060E8                 mov     edx, 5
.text:00000000000060ED                 mov     rax, [rbx+10h]
.text:00000000000060F1                 mov     r8, [rbx+8]
.text:00000000000060F5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000060FC                 mov     r13, [rbx+30h]
.text:0000000000006100                 mov     r12, [rbx+28h]
.text:0000000000006104                 mov     r15, [rbx+20h]
.text:0000000000006108                 mov     r14, [rbx+18h]
.text:000000000000610C                 mov     [rsp+58h+var_40], r10
.text:0000000000006111                 mov     [rsp+58h+var_48], r9
.text:0000000000006116                 mov     [rsp+58h+var_58], rax
.text:000000000000611A                 mov     [rsp+58h+var_50], r8
.text:000000000000611F                 mov     rbx, [rbx]
.text:0000000000006122                 jmp     loc_5EB2
.text:0000000000006122 ; } // starts at 5D10
.text:0000000000006122 version_etc_arn endp
.text:0000000000006122
.text:0000000000006122 ; ---------------------------------------------------------------------------
.text:0000000000006127                 align 10h
.text:0000000000006130
.text:0000000000006130 ; =============== S U B R O U T I N E =======================================
.text:0000000000006130
.text:0000000000006130 ; Attributes: info_from_lumina
.text:0000000000006130
.text:0000000000006130 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006130                 public version_etc_ar
.text:0000000000006130 version_etc_ar  proc near
.text:0000000000006130 ; __unwind {
.text:0000000000006130                 xor     r9d, r9d
.text:0000000000006133                 cmp     qword ptr [r8], 0
.text:0000000000006137                 jz      short loc_614B
.text:0000000000006139                 nop     dword ptr [rax+00000000h]
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006140                 add     r9, 1
.text:0000000000006144                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006149                 jnz     short loc_6140
.text:000000000000614B
.text:000000000000614B loc_614B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000614B                 jmp     version_etc_arn
.text:000000000000614B ; } // starts at 6130
.text:000000000000614B version_etc_ar  endp
.text:000000000000614B
.text:0000000000006150
.text:0000000000006150 ; =============== S U B R O U T I N E =======================================
.text:0000000000006150
.text:0000000000006150 ; Attributes: info_from_lumina
.text:0000000000006150
.text:0000000000006150 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000006150                 public version_etc_va
.text:0000000000006150 version_etc_va  proc near
.text:0000000000006150
.text:0000000000006150 authtab         = qword ptr -68h
.text:0000000000006150 var_10          = qword ptr -10h
.text:0000000000006150
.text:0000000000006150 ; __unwind {
.text:0000000000006150                 sub     rsp, 68h
.text:0000000000006154                 mov     r10, r8
.text:0000000000006157                 xor     r9d, r9d
.text:000000000000615A                 mov     rax, fs:28h
.text:0000000000006163                 mov     [rsp+68h+var_10], rax
.text:0000000000006168                 xor     eax, eax
.text:000000000000616A                 mov     r8, rsp
.text:000000000000616D                 nop     dword ptr [rax]
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006170                 mov     eax, [r10]
.text:0000000000006173                 cmp     eax, 2Fh ; '/'
.text:0000000000006176                 ja      short loc_61BA
.text:0000000000006178                 mov     r11d, eax
.text:000000000000617B                 add     r11, [r10+10h]
.text:000000000000617F                 add     eax, 8
.text:0000000000006182                 mov     [r10], eax
.text:0000000000006185
.text:0000000000006185 loc_6185:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006185                 mov     rax, [r11]
.text:0000000000006188                 test    rax, rax
.text:000000000000618B                 mov     [r8+r9*8], rax
.text:000000000000618F                 jz      short loc_619B
.text:0000000000006191                 add     r9, 1
.text:0000000000006195                 cmp     r9, 0Ah
.text:0000000000006199                 jnz     short loc_6170
.text:000000000000619B
.text:000000000000619B loc_619B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000619B                 call    version_etc_arn
.text:00000000000061A0                 mov     rax, [rsp+68h+var_10]
.text:00000000000061A5                 xor     rax, fs:28h
.text:00000000000061AE                 jnz     short loc_61B5
.text:00000000000061B0                 add     rsp, 68h
.text:00000000000061B4                 retn
.text:00000000000061B5 ; ---------------------------------------------------------------------------
.text:00000000000061B5
.text:00000000000061B5 loc_61B5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000061B5                 call    ___stack_chk_fail
.text:00000000000061BA ; ---------------------------------------------------------------------------
.text:00000000000061BA
.text:00000000000061BA loc_61BA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000061BA                 mov     r11, [r10+8]
.text:00000000000061BE                 lea     rax, [r11+8]
.text:00000000000061C2                 mov     [r10+8], rax
.text:00000000000061C6                 jmp     short loc_6185
.text:00000000000061C6 ; } // starts at 6150
.text:00000000000061C6 version_etc_va  endp
.text:00000000000061C6
.text:00000000000061C6 ; ---------------------------------------------------------------------------
.text:00000000000061C8                 align 10h
.text:00000000000061D0
.text:00000000000061D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061D0
.text:00000000000061D0 ; Attributes: info_from_lumina
.text:00000000000061D0
.text:00000000000061D0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000061D0                 public version_etc
.text:00000000000061D0 version_etc     proc near               ; CODE XREF: main+1D5↑p
.text:00000000000061D0
.text:00000000000061D0 var_C0          = dword ptr -0C0h
.text:00000000000061D0 var_B8          = qword ptr -0B8h
.text:00000000000061D0 var_B0          = qword ptr -0B0h
.text:00000000000061D0 var_A8          = byte ptr -0A8h
.text:00000000000061D0 var_50          = qword ptr -50h
.text:00000000000061D0 var_48          = byte ptr -48h
.text:00000000000061D0 var_28          = qword ptr -28h
.text:00000000000061D0 var_20          = qword ptr -20h
.text:00000000000061D0 arg_0           = byte ptr  8
.text:00000000000061D0
.text:00000000000061D0 ; __unwind {
.text:00000000000061D0                 push    rbp
.text:00000000000061D1                 push    rbx
.text:00000000000061D2                 mov     r10d, 20h ; ' '
.text:00000000000061D8                 xor     r11d, r11d
.text:00000000000061DB                 sub     rsp, 0B8h
.text:00000000000061E2                 mov     rax, fs:28h
.text:00000000000061EB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000061F0                 xor     eax, eax
.text:00000000000061F2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000061FA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006202                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000620A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000620F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006217                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000621F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006224                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000622C                 xor     r9d, r9d
.text:000000000000622F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006234                 mov     rbp, rax
.text:0000000000006237                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006240
.text:0000000000006240 loc_6240:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006240                 cmp     r10d, 2Fh ; '/'
.text:0000000000006244                 ja      short loc_629C
.text:0000000000006246                 mov     eax, r10d
.text:0000000000006249                 mov     r11d, 1
.text:000000000000624F                 add     r10d, 8
.text:0000000000006253                 add     rax, rbp
.text:0000000000006256
.text:0000000000006256 loc_6256:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006256                 mov     rax, [rax]
.text:0000000000006259                 test    rax, rax
.text:000000000000625C                 mov     [r8+r9*8], rax
.text:0000000000006260                 jz      short loc_626C
.text:0000000000006262                 add     r9, 1
.text:0000000000006266                 cmp     r9, 0Ah
.text:000000000000626A                 jnz     short loc_6240
.text:000000000000626C
.text:000000000000626C loc_626C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000626C                 test    r11b, r11b
.text:000000000000626F                 jnz     short loc_6295
.text:0000000000006271
.text:0000000000006271 loc_6271:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006271                 call    version_etc_arn
.text:0000000000006276                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000627B                 xor     rax, fs:28h
.text:0000000000006284                 jnz     short loc_6290
.text:0000000000006286                 add     rsp, 0B8h
.text:000000000000628D                 pop     rbx
.text:000000000000628E                 pop     rbp
.text:000000000000628F                 retn
.text:0000000000006290 ; ---------------------------------------------------------------------------
.text:0000000000006290
.text:0000000000006290 loc_6290:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006290                 call    ___stack_chk_fail
.text:0000000000006295 ; ---------------------------------------------------------------------------
.text:0000000000006295
.text:0000000000006295 loc_6295:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006295                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000629A                 jmp     short loc_6271
.text:000000000000629C ; ---------------------------------------------------------------------------
.text:000000000000629C
.text:000000000000629C loc_629C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000629C                 mov     rax, rbx
.text:000000000000629F                 add     rbx, 8
.text:00000000000062A3                 jmp     short loc_6256
.text:00000000000062A3 ; } // starts at 61D0
.text:00000000000062A3 version_etc     endp
.text:00000000000062A3
.text:00000000000062A3 ; ---------------------------------------------------------------------------
.text:00000000000062A5                 align 10h
.text:00000000000062B0
.text:00000000000062B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062B0
.text:00000000000062B0 ; Attributes: info_from_lumina
.text:00000000000062B0
.text:00000000000062B0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000062B0                 public emit_bug_reporting_address
.text:00000000000062B0 emit_bug_reporting_address proc near
.text:00000000000062B0 ; __unwind {
.text:00000000000062B0                 push    rbx
.text:00000000000062B1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000062B8                 mov     edx, 5          ; category
.text:00000000000062BD                 xor     edi, edi        ; domainname
.text:00000000000062BF                 call    _dcgettext
.text:00000000000062C4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000062CB                 mov     rsi, rax
.text:00000000000062CE                 mov     edi, 1
.text:00000000000062D3                 xor     eax, eax
.text:00000000000062D5                 call    ___printf_chk
.text:00000000000062DA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000062E1                 mov     edx, 5          ; category
.text:00000000000062E6                 xor     edi, edi        ; domainname
.text:00000000000062E8                 call    _dcgettext
.text:00000000000062ED                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000062F4                 lea     rdx, unk_AAE0
.text:00000000000062FB                 mov     rsi, rax
.text:00000000000062FE                 mov     edi, 1
.text:0000000000006303                 xor     eax, eax
.text:0000000000006305                 call    ___printf_chk
.text:000000000000630A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006311                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006318                 xor     edi, edi        ; domainname
.text:000000000000631A                 mov     edx, 5          ; category
.text:000000000000631F                 call    _dcgettext
.text:0000000000006324                 mov     rsi, rbx        ; stream
.text:0000000000006327                 mov     rdi, rax        ; s
.text:000000000000632A                 pop     rbx
.text:000000000000632B                 jmp     _fputs_unlocked
.text:000000000000632B ; } // starts at 62B0
.text:000000000000632B emit_bug_reporting_address endp
.text:000000000000632B
.text:0000000000006330
.text:0000000000006330 ; =============== S U B R O U T I N E =======================================
.text:0000000000006330
.text:0000000000006330
.text:0000000000006330                 public xmalloc
.text:0000000000006330 xmalloc         proc near               ; CODE XREF: user_group_str+29↑p
.text:0000000000006330                                         ; quotearg_n_options+127↑p ...
.text:0000000000006330 ; __unwind {
.text:0000000000006330                 push    rbx
.text:0000000000006331                 mov     rbx, rdi
.text:0000000000006334                 call    _malloc
.text:0000000000006339                 test    rax, rax
.text:000000000000633C                 jnz     short loc_6343
.text:000000000000633E                 test    rbx, rbx
.text:0000000000006341                 jnz     short loc_6345
.text:0000000000006343
.text:0000000000006343 loc_6343:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006343                 pop     rbx
.text:0000000000006344                 retn
.text:0000000000006345 ; ---------------------------------------------------------------------------
.text:0000000000006345
.text:0000000000006345 loc_6345:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006345                 call    xalloc_die
.text:0000000000006345 ; } // starts at 6330
.text:0000000000006345 xmalloc         endp
.text:0000000000006345
.text:0000000000006345 ; ---------------------------------------------------------------------------
.text:000000000000634A                 align 10h
.text:0000000000006350
.text:0000000000006350 ; =============== S U B R O U T I N E =======================================
.text:0000000000006350
.text:0000000000006350 ; Attributes: info_from_lumina
.text:0000000000006350
.text:0000000000006350 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006350                 public xnmalloc
.text:0000000000006350 xnmalloc        proc near
.text:0000000000006350 ; __unwind {
.text:0000000000006350                 mov     rax, rdi
.text:0000000000006353                 mul     rsi
.text:0000000000006356                 mov     rdi, rax
.text:0000000000006359                 seto    al
.text:000000000000635C                 test    rdi, rdi
.text:000000000000635F                 js      short loc_636B
.text:0000000000006361                 movzx   eax, al
.text:0000000000006364                 test    rax, rax
.text:0000000000006367                 jnz     short loc_636B
.text:0000000000006369                 jmp     short xmalloc
.text:000000000000636B ; ---------------------------------------------------------------------------
.text:000000000000636B
.text:000000000000636B loc_636B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000636B                                         ; xnmalloc+17↑j
.text:000000000000636B                 sub     rsp, 8
.text:000000000000636F                 call    xalloc_die
.text:000000000000636F ; } // starts at 6350
.text:000000000000636F xnmalloc        endp
.text:000000000000636F
.text:000000000000636F ; ---------------------------------------------------------------------------
.text:0000000000006374                 align 20h
.text:0000000000006380
.text:0000000000006380 ; =============== S U B R O U T I N E =======================================
.text:0000000000006380
.text:0000000000006380
.text:0000000000006380                 public xcharalloc
.text:0000000000006380 xcharalloc      proc near
.text:0000000000006380 ; __unwind {
.text:0000000000006380                 jmp     short xmalloc
.text:0000000000006380 ; } // starts at 6380
.text:0000000000006380 xcharalloc      endp
.text:0000000000006380
.text:0000000000006380 ; ---------------------------------------------------------------------------
.text:0000000000006382                 align 10h
.text:0000000000006390
.text:0000000000006390 ; =============== S U B R O U T I N E =======================================
.text:0000000000006390
.text:0000000000006390 ; Attributes: info_from_lumina
.text:0000000000006390
.text:0000000000006390 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006390                 public xrealloc
.text:0000000000006390 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000006390                                         ; quotearg_n_options+182↑p ...
.text:0000000000006390 ; __unwind {
.text:0000000000006390                 test    rsi, rsi
.text:0000000000006393                 push    rbx
.text:0000000000006394                 mov     rbx, rsi
.text:0000000000006397                 jnz     short loc_639E
.text:0000000000006399                 test    rdi, rdi
.text:000000000000639C                 jnz     short loc_63B8
.text:000000000000639E
.text:000000000000639E loc_639E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000639E                 mov     rsi, rbx        ; size
.text:00000000000063A1                 call    _realloc
.text:00000000000063A6                 test    rax, rax
.text:00000000000063A9                 jnz     short loc_63B0
.text:00000000000063AB                 test    rbx, rbx
.text:00000000000063AE                 jnz     short loc_63C1
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000063B0                 pop     rbx
.text:00000000000063B1                 retn
.text:00000000000063B1 ; ---------------------------------------------------------------------------
.text:00000000000063B2                 align 8
.text:00000000000063B8
.text:00000000000063B8 loc_63B8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000063B8                 call    free
.text:00000000000063BD                 xor     eax, eax
.text:00000000000063BF                 pop     rbx
.text:00000000000063C0                 retn
.text:00000000000063C1 ; ---------------------------------------------------------------------------
.text:00000000000063C1
.text:00000000000063C1 loc_63C1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000063C1                 call    xalloc_die
.text:00000000000063C1 ; } // starts at 6390
.text:00000000000063C1 xrealloc        endp
.text:00000000000063C1
.text:00000000000063C1 ; ---------------------------------------------------------------------------
.text:00000000000063C6                 align 10h
.text:00000000000063D0
.text:00000000000063D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063D0
.text:00000000000063D0 ; Attributes: info_from_lumina
.text:00000000000063D0
.text:00000000000063D0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000063D0                 public xnrealloc
.text:00000000000063D0 xnrealloc       proc near
.text:00000000000063D0 ; __unwind {
.text:00000000000063D0                 mov     rax, rsi
.text:00000000000063D3                 mul     rdx
.text:00000000000063D6                 mov     rsi, rax
.text:00000000000063D9                 seto    al
.text:00000000000063DC                 test    rsi, rsi
.text:00000000000063DF                 js      short loc_63EB
.text:00000000000063E1                 movzx   eax, al
.text:00000000000063E4                 test    rax, rax
.text:00000000000063E7                 jnz     short loc_63EB
.text:00000000000063E9                 jmp     short xrealloc
.text:00000000000063EB ; ---------------------------------------------------------------------------
.text:00000000000063EB
.text:00000000000063EB loc_63EB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000063EB                                         ; xnrealloc+17↑j
.text:00000000000063EB                 sub     rsp, 8
.text:00000000000063EF                 call    xalloc_die
.text:00000000000063EF ; } // starts at 63D0
.text:00000000000063EF xnrealloc       endp
.text:00000000000063EF
.text:00000000000063EF ; ---------------------------------------------------------------------------
.text:00000000000063F4                 align 20h
.text:0000000000006400
.text:0000000000006400 ; =============== S U B R O U T I N E =======================================
.text:0000000000006400
.text:0000000000006400 ; Attributes: info_from_lumina
.text:0000000000006400
.text:0000000000006400 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006400                 public x2nrealloc
.text:0000000000006400 x2nrealloc      proc near
.text:0000000000006400 ; __unwind {
.text:0000000000006400                 test    rdi, rdi
.text:0000000000006403                 mov     r9, rdx
.text:0000000000006406                 mov     rcx, [rsi]
.text:0000000000006409                 jz      short loc_6440
.text:000000000000640B                 xor     edx, edx
.text:000000000000640D                 mov     rax, 5555555555555554h
.text:0000000000006417                 div     r9
.text:000000000000641A                 cmp     rax, rcx
.text:000000000000641D                 jbe     short loc_645B
.text:000000000000641F                 mov     rax, rcx
.text:0000000000006422                 shr     rax, 1
.text:0000000000006425                 lea     rcx, [rax+rcx+1]
.text:000000000000642A
.text:000000000000642A loc_642A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000642A                 mov     [rsi], rcx
.text:000000000000642D                 imul    rcx, r9
.text:0000000000006431                 mov     rsi, rcx
.text:0000000000006434                 jmp     xrealloc
.text:0000000000006434 ; ---------------------------------------------------------------------------
.text:0000000000006439                 align 20h
.text:0000000000006440
.text:0000000000006440 loc_6440:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006440                 test    rcx, rcx
.text:0000000000006443                 jz      short loc_6468
.text:0000000000006445
.text:0000000000006445 loc_6445:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006445                 mov     rax, rcx
.text:0000000000006448                 mul     r9
.text:000000000000644B                 seto    dl
.text:000000000000644E                 test    rax, rax
.text:0000000000006451                 movzx   edx, dl
.text:0000000000006454                 js      short loc_645B
.text:0000000000006456                 test    rdx, rdx
.text:0000000000006459                 jz      short loc_642A
.text:000000000000645B
.text:000000000000645B loc_645B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000645B                                         ; x2nrealloc+54↑j
.text:000000000000645B                 sub     rsp, 8
.text:000000000000645F                 call    xalloc_die
.text:000000000000645F ; ---------------------------------------------------------------------------
.text:0000000000006464                 align 8
.text:0000000000006468
.text:0000000000006468 loc_6468:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006468                 xor     edx, edx
.text:000000000000646A                 mov     eax, 80h
.text:000000000000646F                 xor     r8d, r8d
.text:0000000000006472                 div     r9
.text:0000000000006475                 test    rax, rax
.text:0000000000006478                 setz    r8b
.text:000000000000647C                 lea     rcx, [r8+rax]
.text:0000000000006480                 jmp     short loc_6445
.text:0000000000006480 ; } // starts at 6400
.text:0000000000006480 x2nrealloc      endp
.text:0000000000006480
.text:0000000000006480 ; ---------------------------------------------------------------------------
.text:0000000000006482                 align 10h
.text:0000000000006490
.text:0000000000006490 ; =============== S U B R O U T I N E =======================================
.text:0000000000006490
.text:0000000000006490 ; Attributes: info_from_lumina
.text:0000000000006490
.text:0000000000006490 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006490                 public x2realloc
.text:0000000000006490 x2realloc       proc near
.text:0000000000006490 ; __unwind {
.text:0000000000006490                 test    rdi, rdi
.text:0000000000006493                 mov     rax, [rsi]
.text:0000000000006496                 jz      short loc_64C0
.text:0000000000006498                 mov     rdx, 5555555555555553h
.text:00000000000064A2                 cmp     rax, rdx
.text:00000000000064A5                 ja      short loc_64D1
.text:00000000000064A7                 mov     rdx, rax
.text:00000000000064AA                 shr     rdx, 1
.text:00000000000064AD                 lea     rax, [rdx+rax+1]
.text:00000000000064B2
.text:00000000000064B2 loc_64B2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000064B2                 mov     [rsi], rax
.text:00000000000064B5                 mov     rsi, rax
.text:00000000000064B8                 jmp     xrealloc
.text:00000000000064B8 ; ---------------------------------------------------------------------------
.text:00000000000064BD                 align 20h
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000064C0                 test    rax, rax
.text:00000000000064C3                 mov     edx, 80h
.text:00000000000064C8                 cmovz   rax, rdx
.text:00000000000064CC                 test    rax, rax
.text:00000000000064CF                 jns     short loc_64B2
.text:00000000000064D1
.text:00000000000064D1 loc_64D1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000064D1                 sub     rsp, 8
.text:00000000000064D5                 call    xalloc_die
.text:00000000000064D5 ; } // starts at 6490
.text:00000000000064D5 x2realloc       endp
.text:00000000000064D5
.text:00000000000064D5 ; ---------------------------------------------------------------------------
.text:00000000000064DA                 align 20h
.text:00000000000064E0
.text:00000000000064E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064E0
.text:00000000000064E0
.text:00000000000064E0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000064E0                 public xzalloc
.text:00000000000064E0 xzalloc         proc near
.text:00000000000064E0 ; __unwind {
.text:00000000000064E0                 push    rbx
.text:00000000000064E1                 mov     rbx, rdi
.text:00000000000064E4                 call    xmalloc
.text:00000000000064E9                 mov     rdx, rbx        ; n
.text:00000000000064EC                 xor     esi, esi        ; c
.text:00000000000064EE                 mov     rdi, rax        ; s
.text:00000000000064F1                 pop     rbx
.text:00000000000064F2                 jmp     _memset
.text:00000000000064F2 ; } // starts at 64E0
.text:00000000000064F2 xzalloc         endp
.text:00000000000064F2
.text:00000000000064F2 ; ---------------------------------------------------------------------------
.text:00000000000064F7                 align 20h
.text:0000000000006500
.text:0000000000006500 ; =============== S U B R O U T I N E =======================================
.text:0000000000006500
.text:0000000000006500 ; Attributes: info_from_lumina
.text:0000000000006500
.text:0000000000006500 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006500                 public xcalloc
.text:0000000000006500 xcalloc         proc near
.text:0000000000006500 ; __unwind {
.text:0000000000006500                 mov     rax, rdi
.text:0000000000006503                 sub     rsp, 8
.text:0000000000006507                 mul     rsi
.text:000000000000650A                 seto    dl
.text:000000000000650D                 test    rax, rax
.text:0000000000006510                 js      short loc_6529
.text:0000000000006512                 movzx   edx, dl
.text:0000000000006515                 test    rdx, rdx
.text:0000000000006518                 jnz     short loc_6529
.text:000000000000651A                 call    _calloc
.text:000000000000651F                 test    rax, rax
.text:0000000000006522                 jz      short loc_6529
.text:0000000000006524                 add     rsp, 8
.text:0000000000006528                 retn
.text:0000000000006529 ; ---------------------------------------------------------------------------
.text:0000000000006529
.text:0000000000006529 loc_6529:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006529                                         ; xcalloc+18↑j ...
.text:0000000000006529                 call    xalloc_die
.text:0000000000006529 ; } // starts at 6500
.text:0000000000006529 xcalloc         endp
.text:0000000000006529
.text:0000000000006529 ; ---------------------------------------------------------------------------
.text:000000000000652E                 align 10h
.text:0000000000006530
.text:0000000000006530 ; =============== S U B R O U T I N E =======================================
.text:0000000000006530
.text:0000000000006530 ; Attributes: info_from_lumina
.text:0000000000006530
.text:0000000000006530 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006530                 public xmemdup
.text:0000000000006530 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000006530                                         ; parse_with_separator+148↑p ...
.text:0000000000006530 ; __unwind {
.text:0000000000006530                 push    rbp
.text:0000000000006531                 push    rbx
.text:0000000000006532                 mov     rbp, rdi
.text:0000000000006535                 mov     rdi, rsi
.text:0000000000006538                 mov     rbx, rsi
.text:000000000000653B                 sub     rsp, 8
.text:000000000000653F                 call    xmalloc
.text:0000000000006544                 add     rsp, 8
.text:0000000000006548                 mov     rdx, rbx        ; n
.text:000000000000654B                 mov     rsi, rbp        ; src
.text:000000000000654E                 pop     rbx
.text:000000000000654F                 pop     rbp
.text:0000000000006550                 mov     rdi, rax        ; dest
.text:0000000000006553                 jmp     _memcpy
.text:0000000000006553 ; } // starts at 6530
.text:0000000000006553 xmemdup         endp
.text:0000000000006553
.text:0000000000006553 ; ---------------------------------------------------------------------------
.text:0000000000006558                 align 20h
.text:0000000000006560
.text:0000000000006560 ; =============== S U B R O U T I N E =======================================
.text:0000000000006560
.text:0000000000006560
.text:0000000000006560 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006560                 public xstrdup
.text:0000000000006560 xstrdup         proc near               ; CODE XREF: main+487↑p
.text:0000000000006560                                         ; user_group_str+64↑j ...
.text:0000000000006560 ; __unwind {
.text:0000000000006560                 push    rbx
.text:0000000000006561                 mov     rbx, rdi
.text:0000000000006564                 call    _strlen
.text:0000000000006569                 mov     rdi, rbx        ; src
.text:000000000000656C                 lea     rsi, [rax+1]    ; n
.text:0000000000006570                 pop     rbx
.text:0000000000006571                 jmp     short xmemdup
.text:0000000000006571 ; } // starts at 6560
.text:0000000000006571 xstrdup         endp
.text:0000000000006571
.text:0000000000006571 ; ---------------------------------------------------------------------------
.text:0000000000006573                 align 20h
.text:0000000000006580
.text:0000000000006580 ; =============== S U B R O U T I N E =======================================
.text:0000000000006580
.text:0000000000006580 ; Attributes: noreturn info_from_lumina
.text:0000000000006580
.text:0000000000006580 ; void __cdecl xalloc_die()
.text:0000000000006580                 public xalloc_die
.text:0000000000006580 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_5036↑p
.text:0000000000006580                                         ; xmalloc:loc_6345↑p ...
.text:0000000000006580 ; __unwind {
.text:0000000000006580                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006587                 sub     rsp, 8
.text:000000000000658B                 mov     edx, 5          ; category
.text:0000000000006590                 xor     edi, edi        ; domainname
.text:0000000000006592                 call    _dcgettext
.text:0000000000006597                 mov     edi, cs:exit_failure ; status
.text:000000000000659D                 lea     rdx, format+4   ; format
.text:00000000000065A4                 mov     rcx, rax
.text:00000000000065A7                 xor     esi, esi        ; errnum
.text:00000000000065A9                 xor     eax, eax
.text:00000000000065AB                 call    _error
.text:00000000000065B0                 call    _abort
.text:00000000000065B0 ; } // starts at 6580
.text:00000000000065B0 xalloc_die      endp
.text:00000000000065B0
.text:00000000000065B0 ; ---------------------------------------------------------------------------
.text:00000000000065B5                 align 20h
.text:00000000000065C0
.text:00000000000065C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065C0
.text:00000000000065C0
.text:00000000000065C0                 public xfts_open
.text:00000000000065C0 xfts_open       proc near               ; CODE XREF: chown_files+3F↑p
.text:00000000000065C0 ; __unwind {
.text:00000000000065C0                 sub     rsp, 8
.text:00000000000065C4                 or      esi, 200h
.text:00000000000065CA                 call    rpl_fts_open
.text:00000000000065CF                 test    rax, rax
.text:00000000000065D2                 jz      short loc_65E0
.text:00000000000065D4                 add     rsp, 8
.text:00000000000065D8                 retn
.text:00000000000065D8 ; ---------------------------------------------------------------------------
.text:00000000000065D9                 align 20h
.text:00000000000065E0
.text:00000000000065E0 loc_65E0:                               ; CODE XREF: xfts_open+12↑j
.text:00000000000065E0                 call    ___errno_location
.text:00000000000065E5                 cmp     dword ptr [rax], 16h
.text:00000000000065E8                 jz      short loc_65F0
.text:00000000000065EA                 call    xalloc_die
.text:00000000000065EA ; ---------------------------------------------------------------------------
.text:00000000000065EF                 align 10h
.text:00000000000065F0
.text:00000000000065F0 loc_65F0:                               ; CODE XREF: xfts_open+28↑j
.text:00000000000065F0                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:00000000000065F7                 lea     rsi, file       ; "../coreutils-8.31/lib/xfts.c"
.text:00000000000065FE                 lea     rdi, assertion  ; "errno != EINVAL"
.text:0000000000006605                 mov     edx, 29h ; ')'  ; line
.text:000000000000660A                 call    ___assert_fail
.text:000000000000660A ; } // starts at 65C0
.text:000000000000660A xfts_open       endp
.text:000000000000660A
.text:000000000000660A ; ---------------------------------------------------------------------------
.text:000000000000660F                 align 10h
.text:0000000000006610
.text:0000000000006610 ; =============== S U B R O U T I N E =======================================
.text:0000000000006610
.text:0000000000006610
.text:0000000000006610                 public cycle_warning_required
.text:0000000000006610 cycle_warning_required proc near        ; CODE XREF: change_file_owner+79↑p
.text:0000000000006610 ; __unwind {
.text:0000000000006610                 mov     edx, [rdi+48h]
.text:0000000000006613                 mov     eax, 1
.text:0000000000006618                 and     edx, 11h
.text:000000000000661B                 cmp     edx, 10h
.text:000000000000661E                 jz      short locret_6627
.text:0000000000006620                 xor     eax, eax
.text:0000000000006622                 cmp     edx, 11h
.text:0000000000006625                 jz      short loc_6630
.text:0000000000006627
.text:0000000000006627 locret_6627:                            ; CODE XREF: cycle_warning_required+E↑j
.text:0000000000006627                 rep retn
.text:0000000000006627 ; ---------------------------------------------------------------------------
.text:0000000000006629                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: cycle_warning_required+15↑j
.text:0000000000006630                 cmp     qword ptr [rsi+58h], 0
.text:0000000000006635                 setnz   al
.text:0000000000006638                 retn
.text:0000000000006638 ; } // starts at 6610
.text:0000000000006638 cycle_warning_required endp
.text:0000000000006638
.text:0000000000006638 ; ---------------------------------------------------------------------------
.text:0000000000006639                 align 20h
.text:0000000000006640
.text:0000000000006640 ; =============== S U B R O U T I N E =======================================
.text:0000000000006640
.text:0000000000006640
.text:0000000000006640 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000006640                 public xstrtoul
.text:0000000000006640 xstrtoul        proc near               ; CODE XREF: parse_with_separator+238↑p
.text:0000000000006640                                         ; parse_with_separator+32B↑p
.text:0000000000006640
.text:0000000000006640 base            = dword ptr -50h
.text:0000000000006640 endptr          = qword ptr -48h
.text:0000000000006640 var_40          = qword ptr -40h
.text:0000000000006640
.text:0000000000006640 ; __unwind {
.text:0000000000006640                 push    r15
.text:0000000000006642                 push    r14
.text:0000000000006644                 push    r13
.text:0000000000006646                 push    r12
.text:0000000000006648                 push    rbp
.text:0000000000006649                 push    rbx
.text:000000000000664A                 sub     rsp, 28h
.text:000000000000664E                 mov     rax, fs:28h
.text:0000000000006657                 mov     [rsp+58h+var_40], rax
.text:000000000000665C                 xor     eax, eax
.text:000000000000665E                 cmp     edx, 24h ; '$'
.text:0000000000006661                 ja      loc_69C5
.text:0000000000006667                 lea     rax, [rsp+58h+endptr]
.text:000000000000666C                 mov     r15, rsi
.text:000000000000666F                 test    rsi, rsi
.text:0000000000006672                 mov     rbp, rdi
.text:0000000000006675                 mov     [rsp+58h+base], edx
.text:0000000000006679                 mov     r14, rcx
.text:000000000000667C                 mov     r13, r8
.text:000000000000667F                 cmovz   r15, rax
.text:0000000000006683                 call    ___errno_location
.text:0000000000006688                 mov     dword ptr [rax], 0
.text:000000000000668E                 mov     r12, rax
.text:0000000000006691                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000006695                 call    ___ctype_b_loc
.text:000000000000669A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000669E                 mov     rsi, [rax]
.text:00000000000066A1                 mov     rax, rbp
.text:00000000000066A4                 jmp     short loc_66B7
.text:00000000000066A4 ; ---------------------------------------------------------------------------
.text:00000000000066A6                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: xstrtoul+7F↓j
.text:00000000000066B0                 add     rax, 1
.text:00000000000066B4                 movzx   ebx, byte ptr [rax]
.text:00000000000066B7
.text:00000000000066B7 loc_66B7:                               ; CODE XREF: xstrtoul+64↑j
.text:00000000000066B7                 movzx   ecx, bl
.text:00000000000066BA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000066BF                 jnz     short loc_66B0
.text:00000000000066C1                 cmp     bl, 2Dh ; '-'
.text:00000000000066C4                 jz      short loc_6718
.text:00000000000066C6                 mov     rsi, r15        ; endptr
.text:00000000000066C9                 mov     rdi, rbp        ; nptr
.text:00000000000066CC                 call    _strtoul
.text:00000000000066D1                 mov     rcx, [r15]
.text:00000000000066D4                 mov     rbx, rax
.text:00000000000066D7                 cmp     rcx, rbp
.text:00000000000066DA                 jz      short loc_6708
.text:00000000000066DC                 mov     eax, [r12]
.text:00000000000066E0                 test    eax, eax
.text:00000000000066E2                 jz      short loc_6748
.text:00000000000066E4                 cmp     eax, 22h ; '"'
.text:00000000000066E7                 mov     ebp, 1
.text:00000000000066EC                 jnz     short loc_6718
.text:00000000000066EE
.text:00000000000066EE loc_66EE:                               ; CODE XREF: xstrtoul+10A↓j
.text:00000000000066EE                 test    r13, r13
.text:00000000000066F1                 jz      short loc_66FC
.text:00000000000066F3                 movzx   r12d, byte ptr [rcx]
.text:00000000000066F7                 test    r12b, r12b
.text:00000000000066FA                 jnz     short loc_6777
.text:00000000000066FC
.text:00000000000066FC loc_66FC:                               ; CODE XREF: xstrtoul+B1↑j
.text:00000000000066FC                 mov     [r14], rbx
.text:00000000000066FF                 jmp     short loc_671D
.text:00000000000066FF ; ---------------------------------------------------------------------------
.text:0000000000006701                 align 8
.text:0000000000006708
.text:0000000000006708 loc_6708:                               ; CODE XREF: xstrtoul+9A↑j
.text:0000000000006708                 test    r13, r13
.text:000000000000670B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006710                 jnz     short loc_6750
.text:0000000000006712                 nop     word ptr [rax+rax+00h]
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: xstrtoul+84↑j
.text:0000000000006718                                         ; xstrtoul+AC↑j ...
.text:0000000000006718                 mov     ebp, 4
.text:000000000000671D
.text:000000000000671D loc_671D:                               ; CODE XREF: xstrtoul+BF↑j
.text:000000000000671D                                         ; xstrtoul+217↓j ...
.text:000000000000671D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000006722                 xor     rdi, fs:28h
.text:000000000000672B                 mov     eax, ebp
.text:000000000000672D                 jnz     loc_69C0
.text:0000000000006733                 add     rsp, 28h
.text:0000000000006737                 pop     rbx
.text:0000000000006738                 pop     rbp
.text:0000000000006739                 pop     r12
.text:000000000000673B                 pop     r13
.text:000000000000673D                 pop     r14
.text:000000000000673F                 pop     r15
.text:0000000000006741                 retn
.text:0000000000006741 ; ---------------------------------------------------------------------------
.text:0000000000006742                 align 8
.text:0000000000006748
.text:0000000000006748 loc_6748:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000006748                 xor     ebp, ebp
.text:000000000000674A                 jmp     short loc_66EE
.text:000000000000674A ; ---------------------------------------------------------------------------
.text:000000000000674C                 align 10h
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: xstrtoul+D0↑j
.text:0000000000006750                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000006755                 test    r12b, r12b
.text:0000000000006758                 jz      short loc_6718
.text:000000000000675A                 movsx   esi, r12b       ; c
.text:000000000000675E                 mov     rdi, r13        ; s
.text:0000000000006761                 xor     ebp, ebp
.text:0000000000006763                 call    _strchr
.text:0000000000006768                 test    rax, rax
.text:000000000000676B                 mov     ebx, 1
.text:0000000000006770                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006775                 jz      short loc_6718
.text:0000000000006777
.text:0000000000006777 loc_6777:                               ; CODE XREF: xstrtoul+BA↑j
.text:0000000000006777                 movsx   esi, r12b       ; c
.text:000000000000677B                 mov     rdi, r13        ; s
.text:000000000000677E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006783                 call    _strchr
.text:0000000000006788                 test    rax, rax
.text:000000000000678B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006790                 jz      def_6816        ; jumptable 0000000000006816 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006796                 lea     eax, [r12-45h]
.text:000000000000679B                 cmp     al, 2Fh ; '/'
.text:000000000000679D                 ja      short loc_67F0
.text:000000000000679F                 mov     rdx, 814400308945h
.text:00000000000067A9                 bt      rdx, rax
.text:00000000000067AD                 jnb     short loc_67F0
.text:00000000000067AF                 mov     esi, 30h ; '0'  ; c
.text:00000000000067B4                 mov     rdi, r13        ; s
.text:00000000000067B7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000067BC                 call    _strchr
.text:00000000000067C1                 test    rax, rax
.text:00000000000067C4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000067C9                 jz      short loc_67F0
.text:00000000000067CB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000067CF                 cmp     al, 44h ; 'D'
.text:00000000000067D1                 jz      short loc_67DF
.text:00000000000067D3                 cmp     al, 69h ; 'i'
.text:00000000000067D5                 jz      loc_69A8
.text:00000000000067DB                 cmp     al, 42h ; 'B'
.text:00000000000067DD                 jnz     short loc_67F0
.text:00000000000067DF
.text:00000000000067DF loc_67DF:                               ; CODE XREF: xstrtoul+191↑j
.text:00000000000067DF                 mov     edi, 2
.text:00000000000067E4                 mov     esi, 3E8h
.text:00000000000067E9                 jmp     short loc_67FA
.text:00000000000067E9 ; ---------------------------------------------------------------------------
.text:00000000000067EB                 align 10h
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: xstrtoul+15D↑j
.text:00000000000067F0                                         ; xstrtoul+16D↑j ...
.text:00000000000067F0                 mov     edi, 1
.text:00000000000067F5                 mov     esi, 400h
.text:00000000000067FA
.text:00000000000067FA loc_67FA:                               ; CODE XREF: xstrtoul+1A9↑j
.text:00000000000067FA                                         ; xstrtoul+37B↓j
.text:00000000000067FA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000067FE                 cmp     r12b, 35h
.text:0000000000006802                 ja      short def_6816  ; jumptable 0000000000006816 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006804                 lea     rdx, jpt_6816
.text:000000000000680B                 movzx   r12d, r12b
.text:000000000000680F                 movsxd  rax, ds:(jpt_6816 - 0C3E8h)[rdx+r12*4]
.text:0000000000006813                 add     rax, rdx
.text:0000000000006816                 jmp     rax             ; switch jump
.text:0000000000006818 ; ---------------------------------------------------------------------------
.text:0000000000006818
.text:0000000000006818 loc_6818:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006818                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:0000000000006818                 mov     rax, rbx        ; jumptable 0000000000006816 cases 77,109
.text:000000000000681B                 mul     rsi
.text:000000000000681E                 jo      loc_6A11
.text:0000000000006824                 xor     r8d, r8d
.text:0000000000006827
.text:0000000000006827 loc_6827:                               ; CODE XREF: xstrtoul+34E↓j
.text:0000000000006827                                         ; xstrtoul+35E↓j ...
.text:0000000000006827                 mul     rsi
.text:000000000000682A                 jo      loc_6A02
.text:0000000000006830                 mov     rbx, rax
.text:0000000000006833
.text:0000000000006833 loc_6833:                               ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000006833                 or      ebp, r8d
.text:0000000000006836                 db      2Eh
.text:0000000000006836                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006840                                         ; xstrtoul+23B↓j ...
.text:0000000000006840                 movsxd  rdi, edi        ; jumptable 0000000000006816 case 99
.text:0000000000006843                 mov     eax, ebp
.text:0000000000006845                 add     rcx, rdi
.text:0000000000006848                 or      eax, 2
.text:000000000000684B                 mov     [r15], rcx
.text:000000000000684E                 cmp     byte ptr [rcx], 0
.text:0000000000006851                 mov     [r14], rbx
.text:0000000000006854                 cmovnz  ebp, eax
.text:0000000000006857                 jmp     loc_671D
.text:000000000000685C ; ---------------------------------------------------------------------------
.text:000000000000685C
.text:000000000000685C def_6816:                               ; CODE XREF: xstrtoul+150↑j
.text:000000000000685C                                         ; xstrtoul+1C2↑j ...
.text:000000000000685C                 mov     [r14], rbx      ; jumptable 0000000000006816 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000685F                 or      ebp, 2
.text:0000000000006862                 jmp     loc_671D
.text:0000000000006867 ; ---------------------------------------------------------------------------
.text:0000000000006867
.text:0000000000006867 loc_6867:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006867                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:0000000000006867                 mov     edx, 2          ; jumptable 0000000000006816 case 119
.text:000000000000686C                 mov     rax, rdx
.text:000000000000686F                 mul     rbx
.text:0000000000006872                 jo      loc_690E
.text:0000000000006878                 add     rbx, rbx
.text:000000000000687B                 jmp     short loc_6840  ; jumptable 0000000000006816 case 99
.text:000000000000687D ; ---------------------------------------------------------------------------
.text:000000000000687D
.text:000000000000687D loc_687D:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000687D                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:000000000000687D                 mov     edx, 200h       ; jumptable 0000000000006816 case 98
.text:0000000000006882                 mov     rax, rdx
.text:0000000000006885                 mul     rbx
.text:0000000000006888                 jo      loc_690E
.text:000000000000688E                 shl     rbx, 9
.text:0000000000006892                 jmp     short loc_6840  ; jumptable 0000000000006816 case 99
.text:0000000000006894 ; ---------------------------------------------------------------------------
.text:0000000000006894
.text:0000000000006894 loc_6894:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006894                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:0000000000006894                 mov     r8d, 7          ; jumptable 0000000000006816 case 90
.text:000000000000689A                 xor     r9d, r9d
.text:000000000000689D                 nop     dword ptr [rax]
.text:00000000000068A0
.text:00000000000068A0 loc_68A0:                               ; CODE XREF: xstrtoul+273↓j
.text:00000000000068A0                 mov     rax, rbx
.text:00000000000068A3                 mul     rsi
.text:00000000000068A6                 mov     rbx, rax
.text:00000000000068A9                 jo      loc_6A3E
.text:00000000000068AF
.text:00000000000068AF loc_68AF:                               ; CODE XREF: xstrtoul+408↓j
.text:00000000000068AF                 sub     r8d, 1
.text:00000000000068B3                 jnz     short loc_68A0
.text:00000000000068B5
.text:00000000000068B5 loc_68B5:                               ; CODE XREF: xstrtoul+29D↓j
.text:00000000000068B5                                         ; xstrtoul+2BD↓j ...
.text:00000000000068B5                 or      ebp, r9d
.text:00000000000068B8                 jmp     short loc_6840  ; jumptable 0000000000006816 case 99
.text:00000000000068BA ; ---------------------------------------------------------------------------
.text:00000000000068BA
.text:00000000000068BA loc_68BA:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000068BA                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:00000000000068BA                 mov     r8d, 8          ; jumptable 0000000000006816 case 89
.text:00000000000068C0                 xor     r9d, r9d
.text:00000000000068C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000068C8
.text:00000000000068C8 loc_68C8:                               ; CODE XREF: xstrtoul+29B↓j
.text:00000000000068C8                 mov     rax, rbx
.text:00000000000068CB                 mul     rsi
.text:00000000000068CE                 mov     rbx, rax
.text:00000000000068D1                 jo      loc_6A20
.text:00000000000068D7
.text:00000000000068D7 loc_68D7:                               ; CODE XREF: xstrtoul+3EA↓j
.text:00000000000068D7                 sub     r8d, 1
.text:00000000000068DB                 jnz     short loc_68C8
.text:00000000000068DD                 jmp     short loc_68B5
.text:00000000000068DF ; ---------------------------------------------------------------------------
.text:00000000000068DF
.text:00000000000068DF loc_68DF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000068DF                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:00000000000068DF                 mov     r8d, 4          ; jumptable 0000000000006816 cases 84,116
.text:00000000000068E5                 xor     r9d, r9d
.text:00000000000068E8
.text:00000000000068E8 loc_68E8:                               ; CODE XREF: xstrtoul+2BB↓j
.text:00000000000068E8                 mov     rax, rbx
.text:00000000000068EB                 mul     rsi
.text:00000000000068EE                 mov     rbx, rax
.text:00000000000068F1                 jo      loc_69F3
.text:00000000000068F7
.text:00000000000068F7 loc_68F7:                               ; CODE XREF: xstrtoul+3BD↓j
.text:00000000000068F7                 sub     r8d, 1
.text:00000000000068FB                 jnz     short loc_68E8
.text:00000000000068FD                 jmp     short loc_68B5
.text:00000000000068FF ; ---------------------------------------------------------------------------
.text:00000000000068FF
.text:00000000000068FF loc_68FF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000068FF                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:00000000000068FF                 mov     rax, rbx        ; jumptable 0000000000006816 cases 75,107
.text:0000000000006902                 mul     rsi
.text:0000000000006905                 mov     rbx, rax
.text:0000000000006908                 jno     loc_6840        ; jumptable 0000000000006816 case 99
.text:000000000000690E
.text:000000000000690E loc_690E:                               ; CODE XREF: xstrtoul+232↑j
.text:000000000000690E                                         ; xstrtoul+248↑j ...
.text:000000000000690E                 mov     ebp, 1
.text:0000000000006913                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006917                 jmp     loc_6840        ; jumptable 0000000000006816 case 99
.text:0000000000006917 ; ---------------------------------------------------------------------------
.text:000000000000691C                 align 20h
.text:0000000000006920
.text:0000000000006920 loc_6920:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006920                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:0000000000006920                 mov     r8d, 5          ; jumptable 0000000000006816 case 80
.text:0000000000006926                 xor     r9d, r9d
.text:0000000000006929
.text:0000000000006929 loc_6929:                               ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000006929                 mov     rax, rbx
.text:000000000000692C                 mul     rsi
.text:000000000000692F                 mov     rbx, rax
.text:0000000000006932                 jo      loc_6A2F
.text:0000000000006938
.text:0000000000006938 loc_6938:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000006938                 sub     r8d, 1
.text:000000000000693C                 jnz     short loc_6929
.text:000000000000693E                 jmp     loc_68B5
.text:0000000000006943 ; ---------------------------------------------------------------------------
.text:0000000000006943
.text:0000000000006943 loc_6943:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006943                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:0000000000006943                 mov     r8d, 6          ; jumptable 0000000000006816 case 69
.text:0000000000006949                 xor     r9d, r9d
.text:000000000000694C
.text:000000000000694C loc_694C:                               ; CODE XREF: xstrtoul+31F↓j
.text:000000000000694C                 mov     rax, rbx
.text:000000000000694F                 mul     rsi
.text:0000000000006952                 mov     rbx, rax
.text:0000000000006955                 jo      loc_69E4
.text:000000000000695B
.text:000000000000695B loc_695B:                               ; CODE XREF: xstrtoul+3AE↓j
.text:000000000000695B                 sub     r8d, 1
.text:000000000000695F                 jnz     short loc_694C
.text:0000000000006961                 jmp     loc_68B5
.text:0000000000006966 ; ---------------------------------------------------------------------------
.text:0000000000006966
.text:0000000000006966 loc_6966:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006966                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:0000000000006966                 mov     edx, 400h       ; jumptable 0000000000006816 case 66
.text:000000000000696B                 mov     rax, rdx
.text:000000000000696E                 mul     rbx
.text:0000000000006971                 jo      short loc_690E
.text:0000000000006973                 shl     rbx, 0Ah
.text:0000000000006977                 jmp     loc_6840        ; jumptable 0000000000006816 case 99
.text:000000000000697C ; ---------------------------------------------------------------------------
.text:000000000000697C
.text:000000000000697C loc_697C:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000697C                                         ; DATA XREF: .rodata:jpt_6816↓o
.text:000000000000697C                 mov     rax, rbx        ; jumptable 0000000000006816 cases 71,103
.text:000000000000697F                 mul     rsi
.text:0000000000006982                 jo      loc_6A4D
.text:0000000000006988                 xor     r8d, r8d
.text:000000000000698B
.text:000000000000698B loc_698B:                               ; CODE XREF: xstrtoul+417↓j
.text:000000000000698B                 mul     rsi
.text:000000000000698E                 jno     loc_6827
.text:0000000000006994                 mov     r8d, 1
.text:000000000000699A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000699E                 jmp     loc_6827
.text:000000000000699E ; ---------------------------------------------------------------------------
.text:00000000000069A3                 align 8
.text:00000000000069A8
.text:00000000000069A8 loc_69A8:                               ; CODE XREF: xstrtoul+195↑j
.text:00000000000069A8                 xor     edi, edi
.text:00000000000069AA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000069AE                 mov     esi, 400h
.text:00000000000069B3                 setz    dil
.text:00000000000069B7                 lea     edi, [rdi+rdi+1]
.text:00000000000069BB                 jmp     loc_67FA
.text:00000000000069C0 ; ---------------------------------------------------------------------------
.text:00000000000069C0
.text:00000000000069C0 loc_69C0:                               ; CODE XREF: xstrtoul+ED↑j
.text:00000000000069C0                 call    ___stack_chk_fail
.text:00000000000069C5 ; ---------------------------------------------------------------------------
.text:00000000000069C5
.text:00000000000069C5 loc_69C5:                               ; CODE XREF: xstrtoul+21↑j
.text:00000000000069C5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:00000000000069CC                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000069D3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000069DA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000069DF                 call    ___assert_fail
.text:00000000000069E4 ; ---------------------------------------------------------------------------
.text:00000000000069E4
.text:00000000000069E4 loc_69E4:                               ; CODE XREF: xstrtoul+315↑j
.text:00000000000069E4                 mov     r9d, 1
.text:00000000000069EA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000069EE                 jmp     loc_695B
.text:00000000000069F3 ; ---------------------------------------------------------------------------
.text:00000000000069F3
.text:00000000000069F3 loc_69F3:                               ; CODE XREF: xstrtoul+2B1↑j
.text:00000000000069F3                 mov     r9d, 1
.text:00000000000069F9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000069FD                 jmp     loc_68F7
.text:0000000000006A02 ; ---------------------------------------------------------------------------
.text:0000000000006A02
.text:0000000000006A02 loc_6A02:                               ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000006A02                 mov     r8d, 1
.text:0000000000006A08                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A0C                 jmp     loc_6833
.text:0000000000006A11 ; ---------------------------------------------------------------------------
.text:0000000000006A11
.text:0000000000006A11 loc_6A11:                               ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000006A11                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A15                 mov     r8d, 1
.text:0000000000006A1B                 jmp     loc_6827
.text:0000000000006A20 ; ---------------------------------------------------------------------------
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: xstrtoul+291↑j
.text:0000000000006A20                 mov     r9d, 1
.text:0000000000006A26                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A2A                 jmp     loc_68D7
.text:0000000000006A2F ; ---------------------------------------------------------------------------
.text:0000000000006A2F
.text:0000000000006A2F loc_6A2F:                               ; CODE XREF: xstrtoul+2F2↑j
.text:0000000000006A2F                 mov     r9d, 1
.text:0000000000006A35                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A39                 jmp     loc_6938
.text:0000000000006A3E ; ---------------------------------------------------------------------------
.text:0000000000006A3E
.text:0000000000006A3E loc_6A3E:                               ; CODE XREF: xstrtoul+269↑j
.text:0000000000006A3E                 mov     r9d, 1
.text:0000000000006A44                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A48                 jmp     loc_68AF
.text:0000000000006A4D ; ---------------------------------------------------------------------------
.text:0000000000006A4D
.text:0000000000006A4D loc_6A4D:                               ; CODE XREF: xstrtoul+342↑j
.text:0000000000006A4D                 mov     r8d, 1
.text:0000000000006A53                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A57                 jmp     loc_698B
.text:0000000000006A57 ; } // starts at 6640
.text:0000000000006A57 xstrtoul        endp
.text:0000000000006A57
.text:0000000000006A57 ; ---------------------------------------------------------------------------
.text:0000000000006A5C                 align 20h
.text:0000000000006A60
.text:0000000000006A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A60
.text:0000000000006A60
.text:0000000000006A60 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:0000000000006A60 ; __unwind {
.text:0000000000006A60                 xor     eax, eax
.text:0000000000006A62                 mov     rdx, [rsi+8]
.text:0000000000006A66                 cmp     [rdi+8], rdx
.text:0000000000006A6A                 jz      short loc_6A70
.text:0000000000006A6C                 rep retn
.text:0000000000006A6C ; ---------------------------------------------------------------------------
.text:0000000000006A6E                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: AD_compare+A↑j
.text:0000000000006A70                 mov     rax, [rsi]
.text:0000000000006A73                 cmp     [rdi], rax
.text:0000000000006A76                 setz    al
.text:0000000000006A79                 retn
.text:0000000000006A79 ; } // starts at 6A60
.text:0000000000006A79 AD_compare      endp
.text:0000000000006A79
.text:0000000000006A79 ; ---------------------------------------------------------------------------
.text:0000000000006A7A                 align 20h
.text:0000000000006A80
.text:0000000000006A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A80
.text:0000000000006A80
.text:0000000000006A80 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:0000000000006A80 ; __unwind {
.text:0000000000006A80                 mov     rax, [rdi+8]
.text:0000000000006A84                 xor     edx, edx
.text:0000000000006A86                 div     rsi
.text:0000000000006A89                 mov     rax, rdx
.text:0000000000006A8C                 retn
.text:0000000000006A8C ; } // starts at 6A80
.text:0000000000006A8C AD_hash         endp
.text:0000000000006A8C
.text:0000000000006A8C ; ---------------------------------------------------------------------------
.text:0000000000006A8D                 align 10h
.text:0000000000006A90
.text:0000000000006A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A90
.text:0000000000006A90
.text:0000000000006A90 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:0000000000006A90 ; __unwind {
.text:0000000000006A90                 mov     rax, [rdi]
.text:0000000000006A93                 xor     edx, edx
.text:0000000000006A95                 div     rsi
.text:0000000000006A98                 mov     rax, rdx
.text:0000000000006A9B                 retn
.text:0000000000006A9B ; } // starts at 6A90
.text:0000000000006A9B dev_type_hash   endp
.text:0000000000006A9B
.text:0000000000006A9B ; ---------------------------------------------------------------------------
.text:0000000000006A9C                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AA0
.text:0000000000006AA0
.text:0000000000006AA0 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:0000000000006AA0 ; __unwind {
.text:0000000000006AA0                 mov     rax, [rsi]
.text:0000000000006AA3                 cmp     [rdi], rax
.text:0000000000006AA6                 setz    al
.text:0000000000006AA9                 retn
.text:0000000000006AA9 ; } // starts at 6AA0
.text:0000000000006AA9 dev_type_compare endp
.text:0000000000006AA9
.text:0000000000006AA9 ; ---------------------------------------------------------------------------
.text:0000000000006AAA                 align 10h
.text:0000000000006AB0
.text:0000000000006AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AB0
.text:0000000000006AB0
.text:0000000000006AB0 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_7E58↓o
.text:0000000000006AB0 ; __unwind {
.text:0000000000006AB0                 mov     rdx, [rdi]
.text:0000000000006AB3                 mov     rax, [rsi]
.text:0000000000006AB6                 mov     rax, [rax+80h]
.text:0000000000006ABD                 cmp     [rdx+80h], rax
.text:0000000000006AC4                 jb      short loc_6AD0
.text:0000000000006AC6                 setnbe  al
.text:0000000000006AC9                 movzx   eax, al
.text:0000000000006ACC                 retn
.text:0000000000006ACC ; ---------------------------------------------------------------------------
.text:0000000000006ACD                 align 10h
.text:0000000000006AD0
.text:0000000000006AD0 loc_6AD0:                               ; CODE XREF: fts_compare_ino+14↑j
.text:0000000000006AD0                 mov     eax, 0FFFFFFFFh
.text:0000000000006AD5                 retn
.text:0000000000006AD5 ; } // starts at 6AB0
.text:0000000000006AD5 fts_compare_ino endp
.text:0000000000006AD5
.text:0000000000006AD5 ; ---------------------------------------------------------------------------
.text:0000000000006AD6                 align 20h
.text:0000000000006AE0
.text:0000000000006AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AE0
.text:0000000000006AE0
.text:0000000000006AE0 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:0000000000006AE0                                         ; fts_build+607↓p ...
.text:0000000000006AE0 ; __unwind {
.text:0000000000006AE0                 push    r12
.text:0000000000006AE2                 push    rbp
.text:0000000000006AE3                 mov     rbp, rsi
.text:0000000000006AE6                 push    rbx
.text:0000000000006AE7                 cmp     qword ptr [rbp+58h], 0
.text:0000000000006AEC                 lea     rbx, [rsi+78h]
.text:0000000000006AF0                 mov     r12, rdi
.text:0000000000006AF3                 mov     eax, [rdi+48h]
.text:0000000000006AF6                 mov     rsi, [rsi+30h]  ; filename
.text:0000000000006AFA                 jnz     short loc_6B60
.text:0000000000006AFC                 test    al, 1
.text:0000000000006AFE                 jz      short loc_6B60
.text:0000000000006B00
.text:0000000000006B00 loc_6B00:                               ; CODE XREF: fts_stat+82↓j
.text:0000000000006B00                                         ; fts_stat+86↓j
.text:0000000000006B00                 mov     rdx, rbx        ; stat_buf
.text:0000000000006B03                 mov     edi, 1          ; ver
.text:0000000000006B08                 call    ___xstat
.text:0000000000006B0D                 test    eax, eax
.text:0000000000006B0F                 jz      short loc_6B8B
.text:0000000000006B11                 call    ___errno_location
.text:0000000000006B16                 mov     r12, rax
.text:0000000000006B19                 mov     eax, [rax]
.text:0000000000006B1B                 cmp     eax, 2
.text:0000000000006B1E                 jz      loc_6C30
.text:0000000000006B24
.text:0000000000006B24 loc_6B24:                               ; CODE XREF: fts_stat+147↓j
.text:0000000000006B24                                         ; fts_stat+169↓j
.text:0000000000006B24                 lea     rdi, [rbx+8]
.text:0000000000006B28                 mov     [rbp+40h], eax
.text:0000000000006B2B                 mov     qword ptr [rbp+78h], 0
.text:0000000000006B33                 mov     qword ptr [rbx+88h], 0
.text:0000000000006B3E                 xor     eax, eax
.text:0000000000006B40                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000006B44                 sub     rbx, rdi
.text:0000000000006B47                 lea     ecx, [rbx+90h]
.text:0000000000006B4D                 shr     ecx, 3
.text:0000000000006B50                 rep stosq
.text:0000000000006B53                 mov     eax, 0Ah
.text:0000000000006B58
.text:0000000000006B58 loc_6B58:                               ; CODE XREF: fts_stat+116↓j
.text:0000000000006B58                                         ; fts_stat+136↓j ...
.text:0000000000006B58                 pop     rbx
.text:0000000000006B59                 pop     rbp
.text:0000000000006B5A                 pop     r12
.text:0000000000006B5C                 retn
.text:0000000000006B5C ; ---------------------------------------------------------------------------
.text:0000000000006B5D                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: fts_stat+1A↑j
.text:0000000000006B60                                         ; fts_stat+1E↑j
.text:0000000000006B60                 test    al, 2
.text:0000000000006B62                 jnz     short loc_6B00
.text:0000000000006B64                 test    dl, dl
.text:0000000000006B66                 jnz     short loc_6B00
.text:0000000000006B68                 mov     rdx, rsi        ; filename
.text:0000000000006B6B                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000006B70                 mov     r8d, 100h       ; flag
.text:0000000000006B76                 mov     rcx, rbx        ; stat_buf
.text:0000000000006B79                 mov     edi, 1          ; ver
.text:0000000000006B7E                 call    ___fxstatat
.text:0000000000006B83                 test    eax, eax
.text:0000000000006B85                 jnz     loc_6C20
.text:0000000000006B8B
.text:0000000000006B8B loc_6B8B:                               ; CODE XREF: fts_stat+2F↑j
.text:0000000000006B8B                 mov     eax, [rbp+90h]
.text:0000000000006B91                 and     eax, 0F000h
.text:0000000000006B96                 cmp     eax, 4000h
.text:0000000000006B9B                 jz      short loc_6BC0
.text:0000000000006B9D                 cmp     eax, 0A000h
.text:0000000000006BA2                 jz      loc_6C78
.text:0000000000006BA8                 cmp     eax, 8000h
.text:0000000000006BAD                 setz    al
.text:0000000000006BB0                 movzx   eax, al
.text:0000000000006BB3                 pop     rbx
.text:0000000000006BB4                 lea     eax, [rax+rax*4+3]
.text:0000000000006BB8                 pop     rbp
.text:0000000000006BB9                 pop     r12
.text:0000000000006BBB                 retn
.text:0000000000006BBB ; ---------------------------------------------------------------------------
.text:0000000000006BBC                 align 20h
.text:0000000000006BC0
.text:0000000000006BC0 loc_6BC0:                               ; CODE XREF: fts_stat+BB↑j
.text:0000000000006BC0                 mov     rax, [rbp+88h]
.text:0000000000006BC7                 cmp     rax, 1
.text:0000000000006BCB                 jbe     loc_6C50
.text:0000000000006BD1                 cmp     qword ptr [rbp+58h], 0
.text:0000000000006BD6                 jle     short loc_6C50
.text:0000000000006BD8                 test    byte ptr [r12+48h], 20h
.text:0000000000006BDE                 lea     rdx, [rax-2]
.text:0000000000006BE2                 cmovz   rax, rdx
.text:0000000000006BE6
.text:0000000000006BE6 loc_6BE6:                               ; CODE XREF: fts_stat+177↓j
.text:0000000000006BE6                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:0000000000006BED                 mov     [rbp+68h], rax
.text:0000000000006BF1                 mov     eax, 1
.text:0000000000006BF6                 jnz     loc_6B58
.text:0000000000006BFC                 cmp     byte ptr [rbp+109h], 0
.text:0000000000006C03                 jnz     loc_6C88
.text:0000000000006C09
.text:0000000000006C09 loc_6C09:                               ; CODE XREF: fts_stat+1C0↓j
.text:0000000000006C09                 cmp     qword ptr [rbp+58h], 1
.text:0000000000006C0E                 sbb     eax, eax
.text:0000000000006C10                 and     eax, 0FFFFFFFCh
.text:0000000000006C13                 add     eax, 5
.text:0000000000006C16                 jmp     loc_6B58
.text:0000000000006C16 ; ---------------------------------------------------------------------------
.text:0000000000006C1B                 align 20h
.text:0000000000006C20
.text:0000000000006C20 loc_6C20:                               ; CODE XREF: fts_stat+A5↑j
.text:0000000000006C20                 call    ___errno_location
.text:0000000000006C25                 mov     eax, [rax]
.text:0000000000006C27                 jmp     loc_6B24
.text:0000000000006C27 ; ---------------------------------------------------------------------------
.text:0000000000006C2C                 align 10h
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: fts_stat+3E↑j
.text:0000000000006C30                 mov     rsi, [rbp+30h]  ; filename
.text:0000000000006C34                 mov     rdx, rbx        ; stat_buf
.text:0000000000006C37                 mov     edi, 1          ; ver
.text:0000000000006C3C                 call    ___lxstat
.text:0000000000006C41                 test    eax, eax
.text:0000000000006C43                 jz      short loc_6C60
.text:0000000000006C45                 mov     eax, [r12]
.text:0000000000006C49                 jmp     loc_6B24
.text:0000000000006C49 ; ---------------------------------------------------------------------------
.text:0000000000006C4E                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: fts_stat+EB↑j
.text:0000000000006C50                                         ; fts_stat+F6↑j
.text:0000000000006C50                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C57                 jmp     short loc_6BE6
.text:0000000000006C57 ; ---------------------------------------------------------------------------
.text:0000000000006C59                 align 20h
.text:0000000000006C60
.text:0000000000006C60 loc_6C60:                               ; CODE XREF: fts_stat+163↑j
.text:0000000000006C60                 mov     dword ptr [r12], 0
.text:0000000000006C68                 mov     eax, 0Dh
.text:0000000000006C6D                 jmp     loc_6B58
.text:0000000000006C6D ; ---------------------------------------------------------------------------
.text:0000000000006C72                 align 8
.text:0000000000006C78
.text:0000000000006C78 loc_6C78:                               ; CODE XREF: fts_stat+C2↑j
.text:0000000000006C78                 mov     eax, 0Ch
.text:0000000000006C7D                 jmp     loc_6B58
.text:0000000000006C7D ; ---------------------------------------------------------------------------
.text:0000000000006C82                 align 8
.text:0000000000006C88
.text:0000000000006C88 loc_6C88:                               ; CODE XREF: fts_stat+123↑j
.text:0000000000006C88                 mov     edx, [rbp+108h]
.text:0000000000006C8E                 and     edx, 0FFFF00h
.text:0000000000006C94                 cmp     edx, 2E00h
.text:0000000000006C9A                 jnz     loc_6B58
.text:0000000000006CA0                 jmp     loc_6C09
.text:0000000000006CA0 ; } // starts at 6AE0
.text:0000000000006CA0 fts_stat        endp
.text:0000000000006CA0
.text:0000000000006CA0 ; ---------------------------------------------------------------------------
.text:0000000000006CA5                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CB0
.text:0000000000006CB0
.text:0000000000006CB0 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:0000000000006CB0                                         ; fts_build+80E↓p ...
.text:0000000000006CB0 ; __unwind {
.text:0000000000006CB0                 push    r13
.text:0000000000006CB2                 push    r12
.text:0000000000006CB4                 mov     r12, rdx
.text:0000000000006CB7                 push    rbp
.text:0000000000006CB8                 push    rbx
.text:0000000000006CB9                 mov     rbp, rdi
.text:0000000000006CBC                 mov     rbx, rsi
.text:0000000000006CBF                 sub     rsp, 8
.text:0000000000006CC3                 cmp     [rbp+38h], rdx
.text:0000000000006CC7                 mov     r13, [rdi+40h]
.text:0000000000006CCB                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000006CCF                 jnb     short loc_6D05
.text:0000000000006CD1                 lea     rsi, [rdx+28h]
.text:0000000000006CD5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:0000000000006CDF                 cmp     rsi, rax
.text:0000000000006CE2                 mov     [rbp+38h], rsi
.text:0000000000006CE6                 ja      loc_6D84
.text:0000000000006CEC                 shl     rsi, 3          ; size
.text:0000000000006CF0                 call    _realloc
.text:0000000000006CF5                 test    rax, rax
.text:0000000000006CF8                 mov     rdi, rax        ; base
.text:0000000000006CFB                 jz      loc_6D80
.text:0000000000006D01                 mov     [rbp+10h], rax
.text:0000000000006D05
.text:0000000000006D05 loc_6D05:                               ; CODE XREF: fts_sort+1F↑j
.text:0000000000006D05                 test    rbx, rbx
.text:0000000000006D08                 jz      short loc_6D21
.text:0000000000006D0A                 mov     rdx, rdi
.text:0000000000006D0D                 nop     dword ptr [rax]
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: fts_sort+6F↓j
.text:0000000000006D10                 add     rdx, 8
.text:0000000000006D14                 mov     [rdx-8], rbx
.text:0000000000006D18                 mov     rbx, [rbx+10h]
.text:0000000000006D1C                 test    rbx, rbx
.text:0000000000006D1F                 jnz     short loc_6D10
.text:0000000000006D21
.text:0000000000006D21 loc_6D21:                               ; CODE XREF: fts_sort+58↑j
.text:0000000000006D21                 mov     rcx, r13        ; compar
.text:0000000000006D24                 mov     edx, 8          ; size
.text:0000000000006D29                 mov     rsi, r12        ; nmemb
.text:0000000000006D2C                 call    _qsort
.text:0000000000006D31                 mov     r8, [rbp+10h]
.text:0000000000006D35                 mov     rcx, r12
.text:0000000000006D38                 sub     rcx, 1
.text:0000000000006D3C                 mov     rax, [r8]
.text:0000000000006D3F                 jz      short loc_6DB0
.text:0000000000006D41                 mov     rdi, rax
.text:0000000000006D44                 mov     rdx, r8
.text:0000000000006D47                 jmp     short loc_6D53
.text:0000000000006D47 ; ---------------------------------------------------------------------------
.text:0000000000006D49                 align 10h
.text:0000000000006D50
.text:0000000000006D50 loc_6D50:                               ; CODE XREF: fts_sort+B3↓j
.text:0000000000006D50                 mov     rdi, [rdx]
.text:0000000000006D53
.text:0000000000006D53 loc_6D53:                               ; CODE XREF: fts_sort+97↑j
.text:0000000000006D53                 mov     rsi, [rdx+8]
.text:0000000000006D57                 add     rdx, 8
.text:0000000000006D5B                 sub     rcx, 1
.text:0000000000006D5F                 mov     [rdi+10h], rsi
.text:0000000000006D63                 jnz     short loc_6D50
.text:0000000000006D65                 mov     rdx, [r8+r12*8-8]
.text:0000000000006D6A
.text:0000000000006D6A loc_6D6A:                               ; CODE XREF: fts_sort+103↓j
.text:0000000000006D6A                 mov     qword ptr [rdx+10h], 0
.text:0000000000006D72                 add     rsp, 8
.text:0000000000006D76                 pop     rbx
.text:0000000000006D77                 pop     rbp
.text:0000000000006D78                 pop     r12
.text:0000000000006D7A                 pop     r13
.text:0000000000006D7C                 retn
.text:0000000000006D7C ; ---------------------------------------------------------------------------
.text:0000000000006D7D                 align 20h
.text:0000000000006D80
.text:0000000000006D80 loc_6D80:                               ; CODE XREF: fts_sort+4B↑j
.text:0000000000006D80                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000006D84
.text:0000000000006D84 loc_6D84:                               ; CODE XREF: fts_sort+36↑j
.text:0000000000006D84                 call    free
.text:0000000000006D89                 mov     qword ptr [rbp+10h], 0
.text:0000000000006D91                 mov     qword ptr [rbp+38h], 0
.text:0000000000006D99                 add     rsp, 8
.text:0000000000006D9D                 mov     rax, rbx
.text:0000000000006DA0                 pop     rbx
.text:0000000000006DA1                 pop     rbp
.text:0000000000006DA2                 pop     r12
.text:0000000000006DA4                 pop     r13
.text:0000000000006DA6                 retn
.text:0000000000006DA6 ; ---------------------------------------------------------------------------
.text:0000000000006DA7                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: fts_sort+8F↑j
.text:0000000000006DB0                 mov     rdx, rax
.text:0000000000006DB3                 jmp     short loc_6D6A
.text:0000000000006DB3 ; } // starts at 6CB0
.text:0000000000006DB3 fts_sort        endp
.text:0000000000006DB3
.text:0000000000006DB3 ; ---------------------------------------------------------------------------
.text:0000000000006DB5                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DC0
.text:0000000000006DC0
.text:0000000000006DC0 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:0000000000006DC0                                         ; rpl_fts_open+E7↓p ...
.text:0000000000006DC0 ; __unwind {
.text:0000000000006DC0                 push    r13
.text:0000000000006DC2                 push    r12
.text:0000000000006DC4                 mov     r12, rdi
.text:0000000000006DC7                 push    rbp
.text:0000000000006DC8                 lea     rdi, [rdx+110h]
.text:0000000000006DCF                 push    rbx
.text:0000000000006DD0                 mov     r13, rsi
.text:0000000000006DD3                 mov     rbp, rdx
.text:0000000000006DD6                 sub     rsp, 8
.text:0000000000006DDA                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:0000000000006DDE                 call    _malloc
.text:0000000000006DE3                 test    rax, rax
.text:0000000000006DE6                 mov     rbx, rax
.text:0000000000006DE9                 jz      short loc_6E3C
.text:0000000000006DEB                 lea     rdi, [rax+108h] ; dest
.text:0000000000006DF2                 mov     rdx, rbp        ; n
.text:0000000000006DF5                 mov     rsi, r13        ; src
.text:0000000000006DF8                 call    _memcpy
.text:0000000000006DFD                 mov     rax, [r12+20h]
.text:0000000000006E02                 mov     byte ptr [rbx+rbp+108h], 0
.text:0000000000006E0A                 mov     [rbx+60h], rbp
.text:0000000000006E0E                 mov     [rbx+50h], r12
.text:0000000000006E12                 mov     dword ptr [rbx+40h], 0
.text:0000000000006E19                 mov     qword ptr [rbx+18h], 0
.text:0000000000006E21                 mov     [rbx+38h], rax
.text:0000000000006E25                 mov     dword ptr [rbx+72h], 30000h
.text:0000000000006E2C                 mov     qword ptr [rbx+20h], 0
.text:0000000000006E34                 mov     qword ptr [rbx+28h], 0
.text:0000000000006E3C
.text:0000000000006E3C loc_6E3C:                               ; CODE XREF: fts_alloc+29↑j
.text:0000000000006E3C                 add     rsp, 8
.text:0000000000006E40                 mov     rax, rbx
.text:0000000000006E43                 pop     rbx
.text:0000000000006E44                 pop     rbp
.text:0000000000006E45                 pop     r12
.text:0000000000006E47                 pop     r13
.text:0000000000006E49                 retn
.text:0000000000006E49 ; } // starts at 6DC0
.text:0000000000006E49 fts_alloc       endp
.text:0000000000006E49
.text:0000000000006E49 ; ---------------------------------------------------------------------------
.text:0000000000006E4A                 align 10h
.text:0000000000006E50
.text:0000000000006E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E50
.text:0000000000006E50
.text:0000000000006E50 ; __int64 __fastcall fts_lfree(void *ptr)
.text:0000000000006E50 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:0000000000006E50                                         ; fts_build+765↓p ...
.text:0000000000006E50 ; __unwind {
.text:0000000000006E50                 test    rdi, rdi
.text:0000000000006E53                 jz      short locret_6E90
.text:0000000000006E55                 push    rbp
.text:0000000000006E56                 push    rbx
.text:0000000000006E57                 mov     rbx, rdi
.text:0000000000006E5A                 sub     rsp, 8
.text:0000000000006E5E                 xchg    ax, ax
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: fts_lfree+30↓j
.text:0000000000006E60                 mov     rdi, [rbx+18h]  ; dirp
.text:0000000000006E64                 mov     rbp, [rbx+10h]
.text:0000000000006E68                 test    rdi, rdi
.text:0000000000006E6B                 jz      short loc_6E72
.text:0000000000006E6D                 call    _closedir
.text:0000000000006E72
.text:0000000000006E72 loc_6E72:                               ; CODE XREF: fts_lfree+1B↑j
.text:0000000000006E72                 mov     rdi, rbx        ; ptr
.text:0000000000006E75                 mov     rbx, rbp
.text:0000000000006E78                 call    free
.text:0000000000006E7D                 test    rbp, rbp
.text:0000000000006E80                 jnz     short loc_6E60
.text:0000000000006E82                 add     rsp, 8
.text:0000000000006E86                 pop     rbx
.text:0000000000006E87                 pop     rbp
.text:0000000000006E88                 retn
.text:0000000000006E88 ; ---------------------------------------------------------------------------
.text:0000000000006E89                 align 10h
.text:0000000000006E90
.text:0000000000006E90 locret_6E90:                            ; CODE XREF: fts_lfree+3↑j
.text:0000000000006E90                 rep retn
.text:0000000000006E90 ; } // starts at 6E50
.text:0000000000006E90 fts_lfree       endp
.text:0000000000006E90
.text:0000000000006E90 ; ---------------------------------------------------------------------------
.text:0000000000006E92                 align 20h
.text:0000000000006EA0
.text:0000000000006EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EA0
.text:0000000000006EA0
.text:0000000000006EA0 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:0000000000006EA0                                         ; rpl_fts_close+8C↓p
.text:0000000000006EA0 ; __unwind {
.text:0000000000006EA0                 push    rbx
.text:0000000000006EA1                 mov     rbx, rdi
.text:0000000000006EA4                 jmp     short loc_6EBC
.text:0000000000006EA4 ; ---------------------------------------------------------------------------
.text:0000000000006EA6                 align 10h
.text:0000000000006EB0
.text:0000000000006EB0 loc_6EB0:                               ; CODE XREF: fd_ring_clear+26↓j
.text:0000000000006EB0                 mov     rdi, rbx
.text:0000000000006EB3                 call    i_ring_pop
.text:0000000000006EB8                 test    eax, eax
.text:0000000000006EBA                 jns     short loc_6ED0
.text:0000000000006EBC
.text:0000000000006EBC loc_6EBC:                               ; CODE XREF: fd_ring_clear+4↑j
.text:0000000000006EBC                                         ; fd_ring_clear+37↓j
.text:0000000000006EBC                 mov     rdi, rbx
.text:0000000000006EBF                 call    i_ring_empty
.text:0000000000006EC4                 test    al, al
.text:0000000000006EC6                 jz      short loc_6EB0
.text:0000000000006EC8                 pop     rbx
.text:0000000000006EC9                 retn
.text:0000000000006EC9 ; ---------------------------------------------------------------------------
.text:0000000000006ECA                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: fd_ring_clear+1A↑j
.text:0000000000006ED0                 mov     edi, eax        ; fd
.text:0000000000006ED2                 call    _close
.text:0000000000006ED7                 jmp     short loc_6EBC
.text:0000000000006ED7 ; } // starts at 6EA0
.text:0000000000006ED7 fd_ring_clear   endp
.text:0000000000006ED7
.text:0000000000006ED7 ; ---------------------------------------------------------------------------
.text:0000000000006ED9                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EE0
.text:0000000000006EE0
.text:0000000000006EE0 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:0000000000006EE0                                         ; fts_build+2C4↓p
.text:0000000000006EE0
.text:0000000000006EE0 var_B8          = qword ptr -0B8h
.text:0000000000006EE0 buf             = statfs ptr -0A8h
.text:0000000000006EE0 var_30          = qword ptr -30h
.text:0000000000006EE0
.text:0000000000006EE0 ; __unwind {
.text:0000000000006EE0                 push    r13
.text:0000000000006EE2                 push    r12
.text:0000000000006EE4                 push    rbp
.text:0000000000006EE5                 push    rbx
.text:0000000000006EE6                 sub     rsp, 98h
.text:0000000000006EED                 mov     rbx, [rdi+50h]
.text:0000000000006EF1                 mov     rax, fs:28h
.text:0000000000006EFA                 mov     [rsp+0B8h+var_30], rax
.text:0000000000006F02                 xor     eax, eax
.text:0000000000006F04                 test    byte ptr [rbx+49h], 2
.text:0000000000006F08                 jz      short loc_6F72
.text:0000000000006F0A                 mov     r12, [rbx+50h]
.text:0000000000006F0E                 mov     rbp, rdi
.text:0000000000006F11                 mov     r13d, esi
.text:0000000000006F14                 test    r12, r12
.text:0000000000006F17                 jz      short loc_6F40
.text:0000000000006F19
.text:0000000000006F19 loc_6F19:                               ; CODE XREF: filesystem_type+8B↓j
.text:0000000000006F19                 mov     rax, [rbp+78h]
.text:0000000000006F1D                 mov     rsi, rsp
.text:0000000000006F20                 mov     rdi, r12
.text:0000000000006F23                 mov     [rsp+0B8h+var_B8], rax
.text:0000000000006F27                 call    hash_lookup
.text:0000000000006F2C                 test    rax, rax
.text:0000000000006F2F                 jz      short loc_6F6D
.text:0000000000006F31                 mov     rbx, [rax+8]
.text:0000000000006F35                 jmp     short loc_6F74
.text:0000000000006F35 ; ---------------------------------------------------------------------------
.text:0000000000006F37                 align 20h
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: filesystem_type+37↑j
.text:0000000000006F40                 mov     r8, cs:free_ptr
.text:0000000000006F47                 lea     rcx, dev_type_compare
.text:0000000000006F4E                 lea     rdx, dev_type_hash
.text:0000000000006F55                 xor     esi, esi
.text:0000000000006F57                 mov     edi, 0Dh
.text:0000000000006F5C                 call    hash_initialize
.text:0000000000006F61                 test    rax, rax
.text:0000000000006F64                 mov     r12, rax
.text:0000000000006F67                 mov     [rbx+50h], rax
.text:0000000000006F6B                 jnz     short loc_6F19
.text:0000000000006F6D
.text:0000000000006F6D loc_6F6D:                               ; CODE XREF: filesystem_type+4F↑j
.text:0000000000006F6D                 test    r13d, r13d
.text:0000000000006F70                 jns     short loc_6FA0
.text:0000000000006F72
.text:0000000000006F72 loc_6F72:                               ; CODE XREF: filesystem_type+28↑j
.text:0000000000006F72                                         ; filesystem_type+CF↓j
.text:0000000000006F72                 xor     ebx, ebx
.text:0000000000006F74
.text:0000000000006F74 loc_6F74:                               ; CODE XREF: filesystem_type+55↑j
.text:0000000000006F74                                         ; filesystem_type+D9↓j ...
.text:0000000000006F74                 mov     rdx, [rsp+0B8h+var_30]
.text:0000000000006F7C                 xor     rdx, fs:28h
.text:0000000000006F85                 mov     rax, rbx
.text:0000000000006F88                 jnz     short loc_7002
.text:0000000000006F8A                 add     rsp, 98h
.text:0000000000006F91                 pop     rbx
.text:0000000000006F92                 pop     rbp
.text:0000000000006F93                 pop     r12
.text:0000000000006F95                 pop     r13
.text:0000000000006F97                 retn
.text:0000000000006F97 ; ---------------------------------------------------------------------------
.text:0000000000006F98                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 loc_6FA0:                               ; CODE XREF: filesystem_type+90↑j
.text:0000000000006FA0                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:0000000000006FA5                 mov     edi, r13d       ; fildes
.text:0000000000006FA8                 call    _fstatfs
.text:0000000000006FAD                 test    eax, eax
.text:0000000000006FAF                 jnz     short loc_6F72
.text:0000000000006FB1                 test    r12, r12
.text:0000000000006FB4                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006FB9                 jz      short loc_6F74
.text:0000000000006FBB                 mov     edi, 10h        ; size
.text:0000000000006FC0                 call    _malloc
.text:0000000000006FC5                 test    rax, rax
.text:0000000000006FC8                 mov     r13, rax
.text:0000000000006FCB                 jz      short loc_6F74
.text:0000000000006FCD                 mov     rax, [rbp+78h]
.text:0000000000006FD1                 mov     [r13+8], rbx
.text:0000000000006FD5                 mov     rsi, r13
.text:0000000000006FD8                 mov     rdi, r12
.text:0000000000006FDB                 mov     [r13+0], rax
.text:0000000000006FDF                 call    hash_insert
.text:0000000000006FE4                 test    rax, rax
.text:0000000000006FE7                 jz      short loc_6FF8
.text:0000000000006FE9                 cmp     r13, rax
.text:0000000000006FEC                 jnz     short loc_7007
.text:0000000000006FEE
.text:0000000000006FEE loc_6FEE:                               ; CODE XREF: filesystem_type+120↓j
.text:0000000000006FEE                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006FF3                 jmp     loc_6F74
.text:0000000000006FF8 ; ---------------------------------------------------------------------------
.text:0000000000006FF8
.text:0000000000006FF8 loc_6FF8:                               ; CODE XREF: filesystem_type+107↑j
.text:0000000000006FF8                 mov     rdi, r13        ; ptr
.text:0000000000006FFB                 call    free
.text:0000000000007000                 jmp     short loc_6FEE
.text:0000000000007002 ; ---------------------------------------------------------------------------
.text:0000000000007002
.text:0000000000007002 loc_7002:                               ; CODE XREF: filesystem_type+A8↑j
.text:0000000000007002                 call    ___stack_chk_fail
.text:0000000000007007 ; ---------------------------------------------------------------------------
.text:0000000000007007
.text:0000000000007007 loc_7007:                               ; CODE XREF: filesystem_type+10C↑j
.text:0000000000007007                 call    _abort
.text:0000000000007007 ; } // starts at 6EE0
.text:0000000000007007 filesystem_type endp
.text:0000000000007007
.text:0000000000007007 ; ---------------------------------------------------------------------------
.text:000000000000700C                 align 10h
.text:0000000000007010
.text:0000000000007010 ; =============== S U B R O U T I N E =======================================
.text:0000000000007010
.text:0000000000007010
.text:0000000000007010 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:0000000000007010                                         ; rpl_fts_read+705↓p
.text:0000000000007010 ; __unwind {
.text:0000000000007010                 sub     rsp, 8
.text:0000000000007014                 call    filesystem_type
.text:0000000000007019                 cmp     rax, 52654973h
.text:000000000000701F                 jz      short loc_7070
.text:0000000000007021                 jle     short loc_7050
.text:0000000000007023                 cmp     rax, 58465342h
.text:0000000000007029                 jz      short loc_7070
.text:000000000000702B                 mov     edx, 0FF534D42h
.text:0000000000007030                 cmp     rax, rdx
.text:0000000000007033                 jz      short loc_7065
.text:0000000000007035                 cmp     rax, 5346414Fh
.text:000000000000703B                 jz      short loc_7065
.text:000000000000703D
.text:000000000000703D loc_703D:                               ; CODE XREF: leaf_optimization+53↓j
.text:000000000000703D                 mov     eax, 1
.text:0000000000007042                 add     rsp, 8
.text:0000000000007046                 retn
.text:0000000000007046 ; ---------------------------------------------------------------------------
.text:0000000000007047                 align 10h
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: leaf_optimization+11↑j
.text:0000000000007050                 cmp     rax, 6969h
.text:0000000000007056                 jz      short loc_7065
.text:0000000000007058                 cmp     rax, 9FA0h
.text:000000000000705E                 jz      short loc_7065
.text:0000000000007060                 test    rax, rax
.text:0000000000007063                 jnz     short loc_703D
.text:0000000000007065
.text:0000000000007065 loc_7065:                               ; CODE XREF: leaf_optimization+23↑j
.text:0000000000007065                                         ; leaf_optimization+2B↑j ...
.text:0000000000007065                 xor     eax, eax
.text:0000000000007067                 add     rsp, 8
.text:000000000000706B                 retn
.text:000000000000706B ; ---------------------------------------------------------------------------
.text:000000000000706C                 align 10h
.text:0000000000007070
.text:0000000000007070 loc_7070:                               ; CODE XREF: leaf_optimization+F↑j
.text:0000000000007070                                         ; leaf_optimization+19↑j
.text:0000000000007070                 mov     eax, 2
.text:0000000000007075                 add     rsp, 8
.text:0000000000007079                 retn
.text:0000000000007079 ; } // starts at 7010
.text:0000000000007079 leaf_optimization endp
.text:0000000000007079
.text:0000000000007079 ; ---------------------------------------------------------------------------
.text:000000000000707A                 align 20h
.text:0000000000007080
.text:0000000000007080 ; =============== S U B R O U T I N E =======================================
.text:0000000000007080
.text:0000000000007080
.text:0000000000007080 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:0000000000007080                                         ; fts_safe_changedir+21E↓p ...
.text:0000000000007080 ; __unwind {
.text:0000000000007080                 push    rbp
.text:0000000000007081                 push    rbx
.text:0000000000007082                 mov     ebp, esi
.text:0000000000007084                 mov     rbx, rdi
.text:0000000000007087                 sub     rsp, 8
.text:000000000000708B                 mov     esi, [rdi+2Ch]
.text:000000000000708E                 cmp     esi, ebp
.text:0000000000007090                 jnz     short loc_7097
.text:0000000000007092                 cmp     esi, 0FFFFFF9Ch
.text:0000000000007095                 jnz     short loc_70E1
.text:0000000000007097
.text:0000000000007097 loc_7097:                               ; CODE XREF: cwd_advance_fd+10↑j
.text:0000000000007097                 test    dl, dl
.text:0000000000007099                 jnz     short loc_70B0
.text:000000000000709B                 test    byte ptr [rbx+48h], 4
.text:000000000000709F                 jnz     short loc_70A5
.text:00000000000070A1                 test    esi, esi
.text:00000000000070A3                 jns     short loc_70D0
.text:00000000000070A5
.text:00000000000070A5 loc_70A5:                               ; CODE XREF: cwd_advance_fd+1F↑j
.text:00000000000070A5                                         ; cwd_advance_fd+3B↓j
.text:00000000000070A5                 mov     [rbx+2Ch], ebp
.text:00000000000070A8                 add     rsp, 8
.text:00000000000070AC                 pop     rbx
.text:00000000000070AD                 pop     rbp
.text:00000000000070AE                 retn
.text:00000000000070AE ; ---------------------------------------------------------------------------
.text:00000000000070AF                 align 10h
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: cwd_advance_fd+19↑j
.text:00000000000070B0                 lea     rdi, [rbx+60h]
.text:00000000000070B4                 call    i_ring_push
.text:00000000000070B9                 test    eax, eax
.text:00000000000070BB                 js      short loc_70A5
.text:00000000000070BD                 mov     edi, eax        ; fd
.text:00000000000070BF                 call    _close
.text:00000000000070C4                 mov     [rbx+2Ch], ebp
.text:00000000000070C7                 add     rsp, 8
.text:00000000000070CB                 pop     rbx
.text:00000000000070CC                 pop     rbp
.text:00000000000070CD                 retn
.text:00000000000070CD ; ---------------------------------------------------------------------------
.text:00000000000070CE                 align 10h
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: cwd_advance_fd+23↑j
.text:00000000000070D0                 mov     edi, esi        ; fd
.text:00000000000070D2                 call    _close
.text:00000000000070D7                 mov     [rbx+2Ch], ebp
.text:00000000000070DA                 add     rsp, 8
.text:00000000000070DE                 pop     rbx
.text:00000000000070DF                 pop     rbp
.text:00000000000070E0                 retn
.text:00000000000070E1 ; ---------------------------------------------------------------------------
.text:00000000000070E1
.text:00000000000070E1 loc_70E1:                               ; CODE XREF: cwd_advance_fd+15↑j
.text:00000000000070E1                 call    _abort
.text:00000000000070E1 ; } // starts at 7080
.text:00000000000070E1 cwd_advance_fd  endp
.text:00000000000070E1
.text:00000000000070E1 ; ---------------------------------------------------------------------------
.text:00000000000070E6                 align 10h
.text:00000000000070F0
.text:00000000000070F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070F0
.text:00000000000070F0
.text:00000000000070F0 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:00000000000070F0                                         ; rpl_fts_read+2A3↓p ...
.text:00000000000070F0 ; __unwind {
.text:00000000000070F0                 push    rbp
.text:00000000000070F1                 push    rbx
.text:00000000000070F2                 mov     rbx, rdi
.text:00000000000070F5                 sub     rsp, 8
.text:00000000000070F9                 mov     edx, [rdi+48h]
.text:00000000000070FC                 mov     ebp, edx
.text:00000000000070FE                 and     ebp, 4
.text:0000000000007101                 jnz     short loc_7148
.text:0000000000007103                 and     dh, 2
.text:0000000000007106                 jnz     short loc_7130
.text:0000000000007108                 mov     edi, [rdi+28h]  ; fd
.text:000000000000710B                 xor     ebp, ebp
.text:000000000000710D                 call    _fchdir
.text:0000000000007112                 test    eax, eax
.text:0000000000007114                 setnz   bpl
.text:0000000000007118
.text:0000000000007118 loc_7118:                               ; CODE XREF: restore_initial_cwd+4F↓j
.text:0000000000007118                                         ; restore_initial_cwd+5A↓j
.text:0000000000007118                 lea     rdi, [rbx+60h]
.text:000000000000711C                 call    fd_ring_clear
.text:0000000000007121                 add     rsp, 8
.text:0000000000007125                 mov     eax, ebp
.text:0000000000007127                 pop     rbx
.text:0000000000007128                 pop     rbp
.text:0000000000007129                 retn
.text:0000000000007129 ; ---------------------------------------------------------------------------
.text:000000000000712A                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: restore_initial_cwd+16↑j
.text:0000000000007130                 mov     edx, 1
.text:0000000000007135                 mov     esi, 0FFFFFF9Ch
.text:000000000000713A                 call    cwd_advance_fd
.text:000000000000713F                 jmp     short loc_7118
.text:000000000000713F ; ---------------------------------------------------------------------------
.text:0000000000007141                 align 8
.text:0000000000007148
.text:0000000000007148 loc_7148:                               ; CODE XREF: restore_initial_cwd+11↑j
.text:0000000000007148                 xor     ebp, ebp
.text:000000000000714A                 jmp     short loc_7118
.text:000000000000714A ; } // starts at 70F0
.text:000000000000714A restore_initial_cwd endp
.text:000000000000714A
.text:000000000000714A ; ---------------------------------------------------------------------------
.text:000000000000714C                 align 10h
.text:0000000000007150
.text:0000000000007150 ; =============== S U B R O U T I N E =======================================
.text:0000000000007150
.text:0000000000007150
.text:0000000000007150 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:0000000000007150                                         ; rpl_fts_open+BD↓p
.text:0000000000007150 ; __unwind {
.text:0000000000007150                 push    rbx
.text:0000000000007151                 mov     rcx, [rsi]
.text:0000000000007154                 mov     rbx, rdi
.text:0000000000007157                 mov     rdi, [rdi]      ; ptr
.text:000000000000715A                 lea     rax, [rcx+rdx+100h]
.text:0000000000007162                 cmp     rcx, rax
.text:0000000000007165                 ja      short loc_7188
.text:0000000000007167                 mov     [rsi], rax
.text:000000000000716A                 mov     rsi, rax        ; size
.text:000000000000716D                 call    _realloc
.text:0000000000007172                 test    rax, rax
.text:0000000000007175                 jz      short loc_71A8
.text:0000000000007177                 mov     [rbx], rax
.text:000000000000717A                 mov     eax, 1
.text:000000000000717F                 pop     rbx
.text:0000000000007180                 retn
.text:0000000000007180 ; ---------------------------------------------------------------------------
.text:0000000000007181                 align 8
.text:0000000000007188
.text:0000000000007188 loc_7188:                               ; CODE XREF: fts_palloc_isra_2+15↑j
.text:0000000000007188                 call    free
.text:000000000000718D                 mov     qword ptr [rbx], 0
.text:0000000000007194                 call    ___errno_location
.text:0000000000007199                 mov     dword ptr [rax], 24h ; '$'
.text:000000000000719F                 xor     eax, eax
.text:00000000000071A1                 pop     rbx
.text:00000000000071A2                 retn
.text:00000000000071A2 ; ---------------------------------------------------------------------------
.text:00000000000071A3                 align 8
.text:00000000000071A8
.text:00000000000071A8 loc_71A8:                               ; CODE XREF: fts_palloc_isra_2+25↑j
.text:00000000000071A8                 mov     rdi, [rbx]      ; ptr
.text:00000000000071AB                 call    free
.text:00000000000071B0                 mov     qword ptr [rbx], 0
.text:00000000000071B7                 xor     eax, eax
.text:00000000000071B9                 pop     rbx
.text:00000000000071BA                 retn
.text:00000000000071BA ; } // starts at 7150
.text:00000000000071BA fts_palloc_isra_2 endp
.text:00000000000071BA
.text:00000000000071BA ; ---------------------------------------------------------------------------
.text:00000000000071BB                 align 20h
.text:00000000000071C0
.text:00000000000071C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071C0
.text:00000000000071C0
.text:00000000000071C0 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:00000000000071C0                                         ; rpl_fts_read+345↓p
.text:00000000000071C0 ; __unwind {
.text:00000000000071C0                 and     edi, 102h
.text:00000000000071C6                 push    rbx
.text:00000000000071C7                 mov     rbx, rsi
.text:00000000000071CA                 jz      short loc_7200
.text:00000000000071CC                 mov     r8, cs:free_ptr
.text:00000000000071D3                 lea     rcx, AD_compare
.text:00000000000071DA                 lea     rdx, AD_hash
.text:00000000000071E1                 xor     esi, esi
.text:00000000000071E3                 mov     edi, 1Fh
.text:00000000000071E8                 call    hash_initialize
.text:00000000000071ED                 test    rax, rax
.text:00000000000071F0                 mov     [rbx], rax
.text:00000000000071F3                 setnz   al
.text:00000000000071F6
.text:00000000000071F6 loc_71F6:                               ; CODE XREF: setup_dir_isra_4+55↓j
.text:00000000000071F6                 pop     rbx
.text:00000000000071F7                 retn
.text:00000000000071F7 ; ---------------------------------------------------------------------------
.text:00000000000071F8                 align 20h
.text:0000000000007200
.text:0000000000007200 loc_7200:                               ; CODE XREF: setup_dir_isra_4+A↑j
.text:0000000000007200                 mov     edi, 20h ; ' '  ; size
.text:0000000000007205                 call    _malloc
.text:000000000000720A                 mov     rdi, rax
.text:000000000000720D                 mov     [rbx], rax
.text:0000000000007210                 xor     eax, eax
.text:0000000000007212                 test    rdi, rdi
.text:0000000000007215                 jz      short loc_71F6
.text:0000000000007217                 call    cycle_check_init
.text:000000000000721C                 mov     eax, 1
.text:0000000000007221                 pop     rbx
.text:0000000000007222                 retn
.text:0000000000007222 ; } // starts at 71C0
.text:0000000000007222 setup_dir_isra_4 endp
.text:0000000000007222
.text:0000000000007222 ; ---------------------------------------------------------------------------
.text:0000000000007223                 align 10h
.text:0000000000007230
.text:0000000000007230 ; =============== S U B R O U T I N E =======================================
.text:0000000000007230
.text:0000000000007230
.text:0000000000007230 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:0000000000007230                                         ; rpl_fts_open+287↓p ...
.text:0000000000007230 ; __unwind {
.text:0000000000007230                 mov     rax, rdx
.text:0000000000007233                 mov     edx, esi
.text:0000000000007235                 shl     edx, 0Dh
.text:0000000000007238                 and     edx, 20000h
.text:000000000000723E                 or      edx, 90900h
.text:0000000000007244                 and     esi, 200h
.text:000000000000724A                 jnz     short loc_7260
.text:000000000000724C                 mov     rdi, rax
.text:000000000000724F                 mov     esi, edx
.text:0000000000007251                 xor     eax, eax
.text:0000000000007253                 jmp     open_safer
.text:0000000000007253 ; ---------------------------------------------------------------------------
.text:0000000000007258                 align 20h
.text:0000000000007260
.text:0000000000007260 loc_7260:                               ; CODE XREF: diropen_isra_6+1A↑j
.text:0000000000007260                 mov     rsi, rax
.text:0000000000007263                 xor     eax, eax
.text:0000000000007265                 jmp     openat_safer
.text:0000000000007265 ; } // starts at 7230
.text:0000000000007265 diropen_isra_6  endp
.text:0000000000007265
.text:0000000000007265 ; ---------------------------------------------------------------------------
.text:000000000000726A                 align 10h
.text:0000000000007270
.text:0000000000007270 ; =============== S U B R O U T I N E =======================================
.text:0000000000007270
.text:0000000000007270 ; Attributes: info_from_lumina
.text:0000000000007270
.text:0000000000007270 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:0000000000007270                                         ; fts_build+892↓p ...
.text:0000000000007270
.text:0000000000007270 var_D9          = byte ptr -0D9h
.text:0000000000007270 stat_buf        = stat ptr -0D8h
.text:0000000000007270 var_40          = qword ptr -40h
.text:0000000000007270
.text:0000000000007270 ; __unwind {
.text:0000000000007270                 push    r15
.text:0000000000007272                 push    r14
.text:0000000000007274                 mov     r14, rsi
.text:0000000000007277                 push    r13
.text:0000000000007279                 push    r12
.text:000000000000727B                 mov     r13, rdi
.text:000000000000727E                 push    rbp
.text:000000000000727F                 push    rbx
.text:0000000000007280                 mov     r12d, edx
.text:0000000000007283                 mov     rbp, rcx
.text:0000000000007286                 sub     rsp, 0B8h
.text:000000000000728D                 mov     ebx, [rdi+48h]
.text:0000000000007290                 mov     rax, fs:28h
.text:0000000000007299                 mov     [rsp+0E8h+var_40], rax
.text:00000000000072A1                 xor     eax, eax
.text:00000000000072A3                 mov     r9d, ebx
.text:00000000000072A6                 and     r9d, 4
.text:00000000000072AA                 test    rcx, rcx
.text:00000000000072AD                 jz      loc_7360
.text:00000000000072B3                 lea     rdx, asc_C4C9   ; ".."
.text:00000000000072BA                 mov     ecx, 3
.text:00000000000072BF                 mov     rsi, rbp
.text:00000000000072C2                 mov     rdi, rdx
.text:00000000000072C5                 repe cmpsb
.text:00000000000072C7                 setnbe  al
.text:00000000000072CA                 sbb     al, 0
.text:00000000000072CC                 test    al, al
.text:00000000000072CE                 jnz     loc_7360
.text:00000000000072D4                 test    r9d, r9d
.text:00000000000072D7                 jnz     loc_7365
.text:00000000000072DD                 test    r12d, r12d
.text:00000000000072E0                 jns     loc_74CA
.text:00000000000072E6                 test    bh, 2
.text:00000000000072E9                 jnz     loc_7430
.text:00000000000072EF
.text:00000000000072EF loc_72EF:                               ; CODE XREF: fts_safe_changedir+1E9↓j
.text:00000000000072EF                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000072F4
.text:00000000000072F4 loc_72F4:                               ; CODE XREF: fts_safe_changedir+1D2↓j
.text:00000000000072F4                                         ; fts_safe_changedir+275↓j
.text:00000000000072F4                 mov     edi, [r13+2Ch]
.text:00000000000072F8                 mov     rdx, rbp
.text:00000000000072FB                 mov     esi, ebx
.text:00000000000072FD                 call    diropen_isra_6
.text:0000000000007302                 test    eax, eax
.text:0000000000007304                 mov     r15d, eax
.text:0000000000007307                 js      loc_74BB
.text:000000000000730D                 mov     ebx, [r13+48h]
.text:0000000000007311                 test    bl, 2
.text:0000000000007314                 jz      loc_73BA
.text:000000000000731A                 nop     word ptr [rax+rax+00h]
.text:0000000000007320
.text:0000000000007320 loc_7320:                               ; CODE XREF: fts_safe_changedir+144↓j
.text:0000000000007320                                         ; fts_safe_changedir+16A↓j ...
.text:0000000000007320                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000007325                 mov     esi, r15d       ; fildes
.text:0000000000007328                 mov     edi, 1          ; ver
.text:000000000000732D                 call    ___fxstat       ; PIC mode
.text:0000000000007332                 test    eax, eax
.text:0000000000007334                 jz      loc_7400
.text:000000000000733A
.text:000000000000733A loc_733A:                               ; CODE XREF: fts_safe_changedir+1AA↓j
.text:000000000000733A                 mov     ebx, 0FFFFFFFFh
.text:000000000000733F
.text:000000000000733F loc_733F:                               ; CODE XREF: fts_safe_changedir+183↓j
.text:000000000000733F                 test    r12d, r12d
.text:0000000000007342                 jns     short loc_7375
.text:0000000000007344                 call    ___errno_location ; PIC mode
.text:0000000000007349                 mov     r12d, [rax]
.text:000000000000734C                 mov     rbp, rax
.text:000000000000734F                 mov     edi, r15d       ; fd
.text:0000000000007352                 call    _close          ; PIC mode
.text:0000000000007357                 mov     [rbp+0], r12d
.text:000000000000735B                 jmp     short loc_7375
.text:000000000000735B ; ---------------------------------------------------------------------------
.text:000000000000735D                 align 20h
.text:0000000000007360
.text:0000000000007360 loc_7360:                               ; CODE XREF: fts_safe_changedir+3D↑j
.text:0000000000007360                                         ; fts_safe_changedir+5E↑j
.text:0000000000007360                 test    r9d, r9d
.text:0000000000007363                 jz      short loc_73A0
.text:0000000000007365
.text:0000000000007365 loc_7365:                               ; CODE XREF: fts_safe_changedir+67↑j
.text:0000000000007365                 and     bh, 2
.text:0000000000007368                 jz      short loc_7373
.text:000000000000736A                 test    r12d, r12d
.text:000000000000736D                 jns     loc_7420
.text:0000000000007373
.text:0000000000007373 loc_7373:                               ; CODE XREF: fts_safe_changedir+F8↑j
.text:0000000000007373                 xor     ebx, ebx
.text:0000000000007375
.text:0000000000007375 loc_7375:                               ; CODE XREF: fts_safe_changedir+D2↑j
.text:0000000000007375                                         ; fts_safe_changedir+EB↑j ...
.text:0000000000007375                 mov     rcx, [rsp+0E8h+var_40]
.text:000000000000737D                 xor     rcx, fs:28h
.text:0000000000007386                 mov     eax, ebx
.text:0000000000007388                 jnz     loc_74C5
.text:000000000000738E                 add     rsp, 0B8h
.text:0000000000007395                 pop     rbx
.text:0000000000007396                 pop     rbp
.text:0000000000007397                 pop     r12
.text:0000000000007399                 pop     r13
.text:000000000000739B                 pop     r14
.text:000000000000739D                 pop     r15
.text:000000000000739F                 retn
.text:00000000000073A0 ; ---------------------------------------------------------------------------
.text:00000000000073A0
.text:00000000000073A0 loc_73A0:                               ; CODE XREF: fts_safe_changedir+F3↑j
.text:00000000000073A0                 test    r12d, r12d
.text:00000000000073A3                 js      loc_74E0
.text:00000000000073A9                 test    bl, 2
.text:00000000000073AC                 mov     r15d, r12d
.text:00000000000073AF                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000073B4                 jnz     loc_7320
.text:00000000000073BA
.text:00000000000073BA loc_73BA:                               ; CODE XREF: fts_safe_changedir+A4↑j
.text:00000000000073BA                 test    rbp, rbp
.text:00000000000073BD                 jz      short loc_73E0
.text:00000000000073BF                 lea     rdx, asc_C4C9   ; ".."
.text:00000000000073C6
.text:00000000000073C6 loc_73C6:                               ; CODE XREF: fts_safe_changedir+265↓j
.text:00000000000073C6                 mov     ecx, 3
.text:00000000000073CB                 mov     rsi, rbp
.text:00000000000073CE                 mov     rdi, rdx
.text:00000000000073D1                 repe cmpsb
.text:00000000000073D3                 setnbe  al
.text:00000000000073D6                 sbb     al, 0
.text:00000000000073D8                 test    al, al
.text:00000000000073DA                 jz      loc_7320
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: fts_safe_changedir+14D↑j
.text:00000000000073E0                                         ; fts_safe_changedir+1FA↓j ...
.text:00000000000073E0                 and     bh, 2
.text:00000000000073E3                 jnz     loc_7478
.text:00000000000073E9                 mov     edi, r15d       ; fd
.text:00000000000073EC                 call    _fchdir         ; PIC mode
.text:00000000000073F1                 mov     ebx, eax
.text:00000000000073F3                 jmp     loc_733F
.text:00000000000073F3 ; ---------------------------------------------------------------------------
.text:00000000000073F8                 align 20h
.text:0000000000007400
.text:0000000000007400 loc_7400:                               ; CODE XREF: fts_safe_changedir+C4↑j
.text:0000000000007400                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000007405                 cmp     [r14+78h], rax
.text:0000000000007409                 jz      loc_74A0
.text:000000000000740F
.text:000000000000740F loc_740F:                               ; CODE XREF: fts_safe_changedir+23C↓j
.text:000000000000740F                 call    ___errno_location ; PIC mode
.text:0000000000007414                 mov     dword ptr [rax], 2
.text:000000000000741A                 jmp     loc_733A
.text:000000000000741A ; ---------------------------------------------------------------------------
.text:000000000000741F                 align 20h
.text:0000000000007420
.text:0000000000007420 loc_7420:                               ; CODE XREF: fts_safe_changedir+FD↑j
.text:0000000000007420                 mov     edi, r12d       ; fd
.text:0000000000007423                 xor     ebx, ebx
.text:0000000000007425                 call    _close          ; PIC mode
.text:000000000000742A                 jmp     loc_7375
.text:000000000000742A ; ---------------------------------------------------------------------------
.text:000000000000742F                 align 10h
.text:0000000000007430
.text:0000000000007430 loc_7430:                               ; CODE XREF: fts_safe_changedir+79↑j
.text:0000000000007430                 lea     r15, [r13+60h]
.text:0000000000007434                 mov     rdi, r15
.text:0000000000007437                 call    i_ring_empty    ; PIC mode
.text:000000000000743C                 test    al, al
.text:000000000000743E                 mov     [rsp+0E8h+var_D9], al
.text:0000000000007442                 jnz     loc_72F4
.text:0000000000007448                 mov     rdi, r15
.text:000000000000744B                 call    i_ring_pop      ; PIC mode
.text:0000000000007450                 test    eax, eax
.text:0000000000007452                 mov     r15d, eax
.text:0000000000007455                 mov     ebx, [r13+48h]
.text:0000000000007459                 js      loc_72EF
.text:000000000000745F                 test    bl, 2
.text:0000000000007462                 mov     r12d, eax
.text:0000000000007465                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000746A                 jz      loc_73E0
.text:0000000000007470                 jmp     loc_7320
.text:0000000000007470 ; ---------------------------------------------------------------------------
.text:0000000000007475                 align 8
.text:0000000000007478
.text:0000000000007478 loc_7478:                               ; CODE XREF: fts_safe_changedir+173↑j
.text:0000000000007478                 movzx   r14d, [rsp+0E8h+var_D9]
.text:000000000000747E                 mov     esi, r15d
.text:0000000000007481                 mov     rdi, r13
.text:0000000000007484                 xor     ebx, ebx
.text:0000000000007486                 xor     r14d, 1
.text:000000000000748A                 movzx   edx, r14b
.text:000000000000748E                 call    cwd_advance_fd
.text:0000000000007493                 jmp     loc_7375
.text:0000000000007493 ; ---------------------------------------------------------------------------
.text:0000000000007498                 align 20h
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: fts_safe_changedir+199↑j
.text:00000000000074A0                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:00000000000074A5                 cmp     [r14+80h], rax
.text:00000000000074AC                 jnz     loc_740F
.text:00000000000074B2                 mov     ebx, [r13+48h]
.text:00000000000074B6                 jmp     loc_73E0
.text:00000000000074BB ; ---------------------------------------------------------------------------
.text:00000000000074BB
.text:00000000000074BB loc_74BB:                               ; CODE XREF: fts_safe_changedir+97↑j
.text:00000000000074BB                 mov     ebx, 0FFFFFFFFh
.text:00000000000074C0                 jmp     loc_7375
.text:00000000000074C5 ; ---------------------------------------------------------------------------
.text:00000000000074C5
.text:00000000000074C5 loc_74C5:                               ; CODE XREF: fts_safe_changedir+118↑j
.text:00000000000074C5                 call    ___stack_chk_fail ; PIC mode
.text:00000000000074CA ; ---------------------------------------------------------------------------
.text:00000000000074CA
.text:00000000000074CA loc_74CA:                               ; CODE XREF: fts_safe_changedir+70↑j
.text:00000000000074CA                 test    bl, 2
.text:00000000000074CD                 mov     r15d, r12d
.text:00000000000074D0                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000074D5                 jz      loc_73C6
.text:00000000000074DB                 jmp     loc_7320
.text:00000000000074E0 ; ---------------------------------------------------------------------------
.text:00000000000074E0
.text:00000000000074E0 loc_74E0:                               ; CODE XREF: fts_safe_changedir+133↑j
.text:00000000000074E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000074E5                 jmp     loc_72F4
.text:00000000000074E5 ; } // starts at 7270
.text:00000000000074E5 fts_safe_changedir endp
.text:00000000000074E5
.text:00000000000074E5 ; ---------------------------------------------------------------------------
.text:00000000000074EA                 align 10h
.text:00000000000074F0
.text:00000000000074F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074F0
.text:00000000000074F0
.text:00000000000074F0 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:00000000000074F0                                         ; rpl_fts_read+383↓p
.text:00000000000074F0 ; __unwind {
.text:00000000000074F0                 and     edi, 102h
.text:00000000000074F6                 push    r12
.text:00000000000074F8                 mov     r12, rsi
.text:00000000000074FB                 push    rbp
.text:00000000000074FC                 push    rbx
.text:00000000000074FD                 mov     rbx, rdx
.text:0000000000007500                 jz      short loc_7570
.text:0000000000007502                 mov     edi, 18h        ; size
.text:0000000000007507                 call    _malloc
.text:000000000000750C                 test    rax, rax
.text:000000000000750F                 mov     rbp, rax
.text:0000000000007512                 jz      loc_7598
.text:0000000000007518                 mov     rax, [rbx+78h]
.text:000000000000751C                 mov     rdi, [r12]
.text:0000000000007520                 mov     rsi, rbp
.text:0000000000007523                 mov     [rbp+10h], rbx
.text:0000000000007527                 mov     [rbp+0], rax
.text:000000000000752B                 mov     rax, [rbx+80h]
.text:0000000000007532                 mov     [rbp+8], rax
.text:0000000000007536                 call    hash_insert
.text:000000000000753B                 cmp     rbp, rax
.text:000000000000753E                 mov     r12, rax
.text:0000000000007541                 jz      short loc_7561
.text:0000000000007543                 mov     rdi, rbp        ; ptr
.text:0000000000007546                 call    free
.text:000000000000754B                 test    r12, r12
.text:000000000000754E                 jz      short loc_7598
.text:0000000000007550                 mov     rax, [r12+10h]
.text:0000000000007555                 mov     ecx, 2
.text:000000000000755A                 mov     [rbx+70h], cx
.text:000000000000755E                 mov     [rbx], rax
.text:0000000000007561
.text:0000000000007561 loc_7561:                               ; CODE XREF: enter_dir_isra_10+51↑j
.text:0000000000007561                                         ; enter_dir_isra_10+8F↓j
.text:0000000000007561                 pop     rbx
.text:0000000000007562                 mov     eax, 1
.text:0000000000007567                 pop     rbp
.text:0000000000007568                 pop     r12
.text:000000000000756A                 retn
.text:000000000000756A ; ---------------------------------------------------------------------------
.text:000000000000756B                 align 10h
.text:0000000000007570
.text:0000000000007570 loc_7570:                               ; CODE XREF: enter_dir_isra_10+10↑j
.text:0000000000007570                 mov     rdi, [r12]
.text:0000000000007574                 lea     rsi, [rdx+78h]
.text:0000000000007578                 call    cycle_check
.text:000000000000757D                 test    al, al
.text:000000000000757F                 jz      short loc_7561
.text:0000000000007581                 mov     edx, 2
.text:0000000000007586                 mov     [rbx], rbx
.text:0000000000007589                 mov     [rbx+70h], dx
.text:000000000000758D                 pop     rbx
.text:000000000000758E                 pop     rbp
.text:000000000000758F                 pop     r12
.text:0000000000007591                 retn
.text:0000000000007591 ; ---------------------------------------------------------------------------
.text:0000000000007592                 align 8
.text:0000000000007598
.text:0000000000007598 loc_7598:                               ; CODE XREF: enter_dir_isra_10+22↑j
.text:0000000000007598                                         ; enter_dir_isra_10+5E↑j
.text:0000000000007598                 pop     rbx
.text:0000000000007599                 xor     eax, eax
.text:000000000000759B                 pop     rbp
.text:000000000000759C                 pop     r12
.text:000000000000759E                 retn
.text:000000000000759E ; } // starts at 74F0
.text:000000000000759E enter_dir_isra_10 endp
.text:000000000000759E
.text:000000000000759E ; ---------------------------------------------------------------------------
.text:000000000000759F                 align 20h
.text:00000000000075A0
.text:00000000000075A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075A0
.text:00000000000075A0
.text:00000000000075A0 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:00000000000075A0                                         ; rpl_fts_read+195↓p ...
.text:00000000000075A0
.text:00000000000075A0 var_28          = qword ptr -28h
.text:00000000000075A0 var_20          = qword ptr -20h
.text:00000000000075A0 var_10          = qword ptr -10h
.text:00000000000075A0
.text:00000000000075A0 ; __unwind {
.text:00000000000075A0                 sub     rsp, 28h
.text:00000000000075A4                 mov     rcx, rsi
.text:00000000000075A7                 mov     rax, fs:28h
.text:00000000000075B0                 mov     [rsp+28h+var_10], rax
.text:00000000000075B5                 xor     eax, eax
.text:00000000000075B7                 and     edi, 102h
.text:00000000000075BD                 jnz     short loc_7600
.text:00000000000075BF                 mov     rax, [rdx+8]
.text:00000000000075C3                 test    rax, rax
.text:00000000000075C6                 jz      short loc_75E5
.text:00000000000075C8                 cmp     qword ptr [rax+58h], 0
.text:00000000000075CD                 js      short loc_75E5
.text:00000000000075CF                 mov     rcx, [rsi]
.text:00000000000075D2                 cmp     qword ptr [rcx+10h], 0
.text:00000000000075D7                 jz      short loc_7653
.text:00000000000075D9                 mov     rsi, [rdx+80h]
.text:00000000000075E0                 cmp     [rcx], rsi
.text:00000000000075E3                 jz      short loc_7630
.text:00000000000075E5
.text:00000000000075E5 loc_75E5:                               ; CODE XREF: leave_dir_isra_12+26↑j
.text:00000000000075E5                                         ; leave_dir_isra_12+2D↑j ...
.text:00000000000075E5                 mov     rax, [rsp+28h+var_10]
.text:00000000000075EA                 xor     rax, fs:28h
.text:00000000000075F3                 jnz     short loc_764E
.text:00000000000075F5                 add     rsp, 28h
.text:00000000000075F9                 retn
.text:00000000000075F9 ; ---------------------------------------------------------------------------
.text:00000000000075FA                 align 20h
.text:0000000000007600
.text:0000000000007600 loc_7600:                               ; CODE XREF: leave_dir_isra_12+1D↑j
.text:0000000000007600                 mov     rax, [rdx+78h]
.text:0000000000007604                 mov     rdi, [rcx]
.text:0000000000007607                 mov     rsi, rsp
.text:000000000000760A                 mov     [rsp+28h+var_28], rax
.text:000000000000760E                 mov     rax, [rdx+80h]
.text:0000000000007615                 mov     [rsp+28h+var_20], rax
.text:000000000000761A                 call    hash_delete
.text:000000000000761F                 test    rax, rax
.text:0000000000007622                 jz      short loc_7653
.text:0000000000007624                 mov     rdi, rax        ; ptr
.text:0000000000007627                 call    free
.text:000000000000762C                 jmp     short loc_75E5
.text:000000000000762C ; ---------------------------------------------------------------------------
.text:000000000000762E                 align 10h
.text:0000000000007630
.text:0000000000007630 loc_7630:                               ; CODE XREF: leave_dir_isra_12+43↑j
.text:0000000000007630                 mov     rsi, [rdx+78h]
.text:0000000000007634                 cmp     [rcx+8], rsi
.text:0000000000007638                 jnz     short loc_75E5
.text:000000000000763A                 mov     rdx, [rax+78h]
.text:000000000000763E                 mov     rax, [rax+80h]
.text:0000000000007645                 mov     [rcx+8], rdx
.text:0000000000007649                 mov     [rcx], rax
.text:000000000000764C                 jmp     short loc_75E5
.text:000000000000764E ; ---------------------------------------------------------------------------
.text:000000000000764E
.text:000000000000764E loc_764E:                               ; CODE XREF: leave_dir_isra_12+53↑j
.text:000000000000764E                 call    ___stack_chk_fail
.text:0000000000007653 ; ---------------------------------------------------------------------------
.text:0000000000007653
.text:0000000000007653 loc_7653:                               ; CODE XREF: leave_dir_isra_12+37↑j
.text:0000000000007653                                         ; leave_dir_isra_12+82↑j
.text:0000000000007653                 call    _abort
.text:0000000000007653 ; } // starts at 75A0
.text:0000000000007653 leave_dir_isra_12 endp
.text:0000000000007653
.text:0000000000007653 ; ---------------------------------------------------------------------------
.text:0000000000007658                 align 20h
.text:0000000000007660
.text:0000000000007660 ; =============== S U B R O U T I N E =======================================
.text:0000000000007660
.text:0000000000007660
.text:0000000000007660 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:0000000000007660                                         ; rpl_fts_read+619↓p ...
.text:0000000000007660
.text:0000000000007660 var_A0          = qword ptr -0A0h
.text:0000000000007660 ptr             = qword ptr -98h
.text:0000000000007660 var_90          = qword ptr -90h
.text:0000000000007660 var_88          = qword ptr -88h
.text:0000000000007660 var_80          = qword ptr -80h
.text:0000000000007660 var_78          = qword ptr -78h
.text:0000000000007660 var_70          = qword ptr -70h
.text:0000000000007660 dest            = qword ptr -68h
.text:0000000000007660 var_60          = qword ptr -60h
.text:0000000000007660 var_58          = qword ptr -58h
.text:0000000000007660 var_50          = dword ptr -50h
.text:0000000000007660 var_4B          = byte ptr -4Bh
.text:0000000000007660 var_4A          = byte ptr -4Ah
.text:0000000000007660 var_49          = byte ptr -49h
.text:0000000000007660 fd              = dword ptr -44h
.text:0000000000007660 var_40          = qword ptr -40h
.text:0000000000007660
.text:0000000000007660 ; __unwind {
.text:0000000000007660                 push    r15
.text:0000000000007662                 push    r14
.text:0000000000007664                 mov     r15, rdi
.text:0000000000007667                 push    r13
.text:0000000000007669                 push    r12
.text:000000000000766B                 push    rbp
.text:000000000000766C                 push    rbx
.text:000000000000766D                 sub     rsp, 78h
.text:0000000000007671                 mov     rbp, [rdi]
.text:0000000000007674                 mov     rax, fs:28h
.text:000000000000767D                 mov     [rsp+0A8h+var_40], rax
.text:0000000000007682                 xor     eax, eax
.text:0000000000007684                 mov     [rsp+0A8h+var_50], esi
.text:0000000000007688                 mov     rax, [rbp+18h]
.text:000000000000768C                 test    rax, rax
.text:000000000000768F                 mov     [rsp+0A8h+var_58], rax
.text:0000000000007694                 jz      loc_7AD0
.text:000000000000769A                 mov     rdi, rax        ; dirp
.text:000000000000769D                 call    _dirfd
.text:00000000000076A2                 test    eax, eax
.text:00000000000076A4                 mov     [rsp+0A8h+fd], eax
.text:00000000000076A8                 js      loc_7C00
.text:00000000000076AE                 cmp     qword ptr [r15+40h], 0
.text:00000000000076B3                 jz      loc_7E88
.text:00000000000076B9                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:00000000000076C2
.text:00000000000076C2 loc_76C2:                               ; CODE XREF: fts_build+89F↓j
.text:00000000000076C2                 mov     edi, [r15+48h]
.text:00000000000076C6                 mov     [rsp+0A8h+var_49], 1
.text:00000000000076CB
.text:00000000000076CB loc_76CB:                               ; CODE XREF: fts_build+57D↓j
.text:00000000000076CB                                         ; fts_build+83A↓j ...
.text:00000000000076CB                 mov     rcx, [rbp+48h]
.text:00000000000076CF                 mov     rdx, [rbp+38h]
.text:00000000000076D3                 mov     [rsp+0A8h+dest], 0
.text:00000000000076DC                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:00000000000076E1                 lea     rax, [rcx-1]
.text:00000000000076E5                 cmovnz  rax, rcx
.text:00000000000076E9                 and     edi, 4
.text:00000000000076EC                 mov     [rsp+0A8h+var_60], rax
.text:00000000000076F1                 jz      short loc_7703
.text:00000000000076F3                 add     rax, [r15+20h]
.text:00000000000076F7                 lea     rbx, [rax+1]
.text:00000000000076FB                 mov     byte ptr [rax], 2Fh ; '/'
.text:00000000000076FE                 mov     [rsp+0A8h+dest], rbx
.text:0000000000007703
.text:0000000000007703 loc_7703:                               ; CODE XREF: fts_build+91↑j
.text:0000000000007703                 mov     rax, [rsp+0A8h+var_60]
.text:0000000000007708                 mov     rbx, [r15+30h]
.text:000000000000770C                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000007711                 mov     [rsp+0A8h+var_4B], 0
.text:0000000000007716                 mov     [rsp+0A8h+var_A0], 0
.text:000000000000771F                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007728                 add     rax, 1
.text:000000000000772C                 mov     [rsp+0A8h+var_88], rbp
.text:0000000000007731                 sub     rbx, rax
.text:0000000000007734                 mov     [rsp+0A8h+var_90], rax
.text:0000000000007739                 mov     rax, [rbp+58h]
.text:000000000000773D                 mov     [rsp+0A8h+var_80], rbx
.text:0000000000007742                 xor     ebx, ebx
.text:0000000000007744                 add     rax, 1
.text:0000000000007748                 mov     [rsp+0A8h+var_78], rax
.text:000000000000774D                 jmp     loc_782F
.text:000000000000774D ; ---------------------------------------------------------------------------
.text:0000000000007752                 align 8
.text:0000000000007758
.text:0000000000007758 loc_7758:                               ; CODE XREF: fts_build+242↓j
.text:0000000000007758                                         ; fts_build+2A6↓j
.text:0000000000007758                 mov     r9, r14
.text:000000000000775B                 add     r9, [rsp+0A8h+var_90]
.text:0000000000007760                 jb      loc_7FC0
.text:0000000000007766                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000776B                 lea     rsi, [r13+108h] ; src
.text:0000000000007772                 mov     [r13+58h], rax
.text:0000000000007776                 mov     rax, [r15]
.text:0000000000007779                 mov     [r13+48h], r9
.text:000000000000777D                 mov     [r13+8], rax
.text:0000000000007781                 mov     rax, [rbp+0]
.text:0000000000007785                 mov     [r13+80h], rax
.text:000000000000778C                 mov     eax, [r15+48h]
.text:0000000000007790                 test    al, 4
.text:0000000000007792                 jnz     loc_7A00
.text:0000000000007798                 mov     [r13+30h], rsi
.text:000000000000779C
.text:000000000000779C loc_779C:                               ; CODE XREF: fts_build+3BE↓j
.text:000000000000779C                 cmp     qword ptr [r15+40h], 0
.text:00000000000077A1                 jz      short loc_77AC
.text:00000000000077A3                 test    ah, 4
.text:00000000000077A6                 jz      loc_7AA8
.text:00000000000077AC
.text:00000000000077AC loc_77AC:                               ; CODE XREF: fts_build+141↑j
.text:00000000000077AC                 movzx   edx, byte ptr [rbp+12h]
.text:00000000000077B0                 and     eax, 18h
.text:00000000000077B3                 mov     esi, edx
.text:00000000000077B5                 sub     edx, 1
.text:00000000000077B8                 cmp     eax, 18h
.text:00000000000077BB                 jz      loc_7A70
.text:00000000000077C1
.text:00000000000077C1 loc_77C1:                               ; CODE XREF: fts_build+416↓j
.text:00000000000077C1                 mov     ecx, 0Bh
.text:00000000000077C6                 cmp     edx, 0Bh
.text:00000000000077C9                 mov     [r13+70h], cx
.text:00000000000077CE                 ja      loc_7A38
.text:00000000000077D4                 lea     rax, CSWTCH_53
.text:00000000000077DB                 mov     eax, [rax+rdx*4]
.text:00000000000077DE                 mov     [r13+90h], eax
.text:00000000000077E5                 mov     eax, 2
.text:00000000000077EA
.text:00000000000077EA loc_77EA:                               ; CODE XREF: fts_build+3E8↓j
.text:00000000000077EA                                         ; fts_build+43F↓j ...
.text:00000000000077EA                 mov     [r13+0A8h], rax
.text:00000000000077F1
.text:00000000000077F1 loc_77F1:                               ; CODE XREF: fts_build+45A↓j
.text:00000000000077F1                 cmp     [rsp+0A8h+ptr], 0
.text:00000000000077F7                 mov     qword ptr [r13+10h], 0
.text:00000000000077FF                 jz      loc_7A28
.text:0000000000007805                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000780A                 mov     [rax+10h], r13
.text:000000000000780E
.text:000000000000780E loc_780E:                               ; CODE XREF: fts_build+3CD↓j
.text:000000000000780E                 cmp     rbx, 2710h
.text:0000000000007815                 jz      loc_7910
.text:000000000000781B
.text:000000000000781B loc_781B:                               ; CODE XREF: fts_build+2B5↓j
.text:000000000000781B                                         ; fts_build+645↓j
.text:000000000000781B                 add     rbx, 1
.text:000000000000781F                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000007824                 jnb     loc_7968
.text:000000000000782A
.text:000000000000782A loc_782A:                               ; CODE XREF: fts_build+2FD↓j
.text:000000000000782A                                         ; fts_build+406↓j
.text:000000000000782A                 mov     [rsp+0A8h+var_A0], r13
.text:000000000000782F
.text:000000000000782F loc_782F:                               ; CODE XREF: fts_build+ED↑j
.text:000000000000782F                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000007834                 mov     r13, [rax+18h]
.text:0000000000007838                 test    r13, r13
.text:000000000000783B                 jz      loc_7D08
.text:0000000000007841                 call    ___errno_location
.text:0000000000007846                 mov     rdi, r13        ; dirp
.text:0000000000007849                 mov     dword ptr [rax], 0
.text:000000000000784F                 mov     r12, rax
.text:0000000000007852                 call    _readdir
.text:0000000000007857                 test    rax, rax
.text:000000000000785A                 mov     rbp, rax
.text:000000000000785D                 jz      loc_7DE0
.text:0000000000007863                 test    byte ptr [r15+48h], 20h
.text:0000000000007868                 jnz     short loc_7874
.text:000000000000786A                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:000000000000786E                 jz      loc_7A50
.text:0000000000007874
.text:0000000000007874 loc_7874:                               ; CODE XREF: fts_build+208↑j
.text:0000000000007874                                         ; fts_build+3FB↓j
.text:0000000000007874                 lea     r13, [rbp+13h]
.text:0000000000007878                 mov     rdi, r13        ; s
.text:000000000000787B                 call    _strlen
.text:0000000000007880                 mov     rsi, r13
.text:0000000000007883                 mov     rdx, rax
.text:0000000000007886                 mov     rdi, r15
.text:0000000000007889                 mov     r14, rax
.text:000000000000788C                 call    fts_alloc
.text:0000000000007891                 test    rax, rax
.text:0000000000007894                 mov     r13, rax
.text:0000000000007897                 jz      loc_7CB0
.text:000000000000789D                 cmp     [rsp+0A8h+var_80], r14
.text:00000000000078A2                 ja      loc_7758
.text:00000000000078A8                 mov     rax, [r15+20h]
.text:00000000000078AC                 lea     rsi, [r15+30h]
.text:00000000000078B0                 lea     rdi, [r15+20h]
.text:00000000000078B4                 mov     [rsp+0A8h+var_80], rax
.text:00000000000078B9                 mov     rax, [rsp+0A8h+var_60]
.text:00000000000078BE                 lea     rdx, [rax+r14+2]
.text:00000000000078C3                 call    fts_palloc_isra_2
.text:00000000000078C8                 test    al, al
.text:00000000000078CA                 jz      loc_7CB0
.text:00000000000078D0                 mov     rdx, [r15+20h]
.text:00000000000078D4                 cmp     rdx, [rsp+0A8h+var_80]
.text:00000000000078D9                 jz      loc_7AC0
.text:00000000000078DF                 add     rdx, [rsp+0A8h+var_90]
.text:00000000000078E4                 test    byte ptr [r15+48h], 4
.text:00000000000078E9                 cmovz   rdx, [rsp+0A8h+dest]
.text:00000000000078EF                 mov     [rsp+0A8h+dest], rdx
.text:00000000000078F4
.text:00000000000078F4 loc_78F4:                               ; CODE XREF: fts_build+465↓j
.text:00000000000078F4                 mov     rcx, [r15+30h]
.text:00000000000078F8                 sub     rcx, [rsp+0A8h+var_90]
.text:00000000000078FD                 mov     [rsp+0A8h+var_4B], al
.text:0000000000007901                 mov     [rsp+0A8h+var_80], rcx
.text:0000000000007906                 jmp     loc_7758
.text:0000000000007906 ; ---------------------------------------------------------------------------
.text:000000000000790B                 align 10h
.text:0000000000007910
.text:0000000000007910 loc_7910:                               ; CODE XREF: fts_build+1B5↑j
.text:0000000000007910                 cmp     qword ptr [r15+40h], 0
.text:0000000000007915                 jnz     loc_781B
.text:000000000000791B                 mov     esi, [rsp+0A8h+fd]
.text:000000000000791F                 mov     rdi, [rsp+0A8h+var_88]
.text:0000000000007924                 call    filesystem_type
.text:0000000000007929                 cmp     rax, 1021994h
.text:000000000000792F                 jz      loc_7CA0
.text:0000000000007935                 mov     ecx, 0FF534D42h
.text:000000000000793A                 cmp     rax, rcx
.text:000000000000793D                 jz      loc_7CA0
.text:0000000000007943                 cmp     rax, 6969h
.text:0000000000007949                 jz      loc_7CA0
.text:000000000000794F                 add     rbx, 1
.text:0000000000007953                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000007958                 mov     [rsp+0A8h+var_4A], 1
.text:000000000000795D                 jb      loc_782A
.text:0000000000007963                 nop     dword ptr [rax+rax+00h]
.text:0000000000007968
.text:0000000000007968 loc_7968:                               ; CODE XREF: fts_build+1C4↑j
.text:0000000000007968                 cmp     [rsp+0A8h+var_4B], 0
.text:000000000000796D                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007972                 jz      loc_7D16
.text:0000000000007978
.text:0000000000007978 loc_7978:                               ; CODE XREF: fts_build+6B0↓j
.text:0000000000007978                 mov     rax, [r15+8]
.text:000000000000797C                 mov     rcx, [r15+20h]
.text:0000000000007980                 test    rax, rax
.text:0000000000007983                 jz      short loc_79B0
.text:0000000000007985                 nop     dword ptr [rax]
.text:0000000000007988
.text:0000000000007988 loc_7988:                               ; CODE XREF: fts_build+34E↓j
.text:0000000000007988                 mov     rdx, [rax+30h]
.text:000000000000798C                 lea     rsi, [rax+108h]
.text:0000000000007993                 cmp     rdx, rsi
.text:0000000000007996                 jz      short loc_79A3
.text:0000000000007998                 sub     rdx, [rax+38h]
.text:000000000000799C                 add     rdx, rcx
.text:000000000000799F                 mov     [rax+30h], rdx
.text:00000000000079A3
.text:00000000000079A3 loc_79A3:                               ; CODE XREF: fts_build+336↑j
.text:00000000000079A3                 mov     [rax+38h], rcx
.text:00000000000079A7                 mov     rax, [rax+10h]
.text:00000000000079AB                 test    rax, rax
.text:00000000000079AE                 jnz     short loc_7988
.text:00000000000079B0
.text:00000000000079B0 loc_79B0:                               ; CODE XREF: fts_build+323↑j
.text:00000000000079B0                 mov     rax, [rsp+0A8h+ptr]
.text:00000000000079B5                 jmp     short loc_79C3
.text:00000000000079B5 ; ---------------------------------------------------------------------------
.text:00000000000079B7                 align 20h
.text:00000000000079C0
.text:00000000000079C0 loc_79C0:                               ; CODE XREF: fts_build+394↓j
.text:00000000000079C0                                         ; fts_build+39A↓j
.text:00000000000079C0                 mov     rax, rdx
.text:00000000000079C3
.text:00000000000079C3 loc_79C3:                               ; CODE XREF: fts_build+355↑j
.text:00000000000079C3                 cmp     qword ptr [rax+58h], 0
.text:00000000000079C8                 js      loc_7D16
.text:00000000000079CE                 mov     rdx, [rax+30h]
.text:00000000000079D2                 lea     rsi, [rax+108h]
.text:00000000000079D9                 cmp     rdx, rsi
.text:00000000000079DC                 jz      short loc_79E9
.text:00000000000079DE                 sub     rdx, [rax+38h]
.text:00000000000079E2                 add     rdx, rcx
.text:00000000000079E5                 mov     [rax+30h], rdx
.text:00000000000079E9
.text:00000000000079E9 loc_79E9:                               ; CODE XREF: fts_build+37C↑j
.text:00000000000079E9                 mov     rdx, [rax+10h]
.text:00000000000079ED                 mov     [rax+38h], rcx
.text:00000000000079F1                 test    rdx, rdx
.text:00000000000079F4                 jnz     short loc_79C0
.text:00000000000079F6                 mov     rdx, [rax+8]
.text:00000000000079FA                 jmp     short loc_79C0
.text:00000000000079FA ; ---------------------------------------------------------------------------
.text:00000000000079FC                 align 20h
.text:0000000000007A00
.text:0000000000007A00 loc_7A00:                               ; CODE XREF: fts_build+132↑j
.text:0000000000007A00                 mov     rax, [r13+38h]
.text:0000000000007A04                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:0000000000007A09                 mov     [r13+30h], rax
.text:0000000000007A0D                 mov     rax, [r13+60h]
.text:0000000000007A11                 lea     rdx, [rax+1]    ; n
.text:0000000000007A15                 call    _memmove
.text:0000000000007A1A                 mov     eax, [r15+48h]
.text:0000000000007A1E                 jmp     loc_779C
.text:0000000000007A1E ; ---------------------------------------------------------------------------
.text:0000000000007A23                 align 8
.text:0000000000007A28
.text:0000000000007A28 loc_7A28:                               ; CODE XREF: fts_build+19F↑j
.text:0000000000007A28                 mov     [rsp+0A8h+ptr], r13
.text:0000000000007A2D                 jmp     loc_780E
.text:0000000000007A2D ; ---------------------------------------------------------------------------
.text:0000000000007A32                 align 8
.text:0000000000007A38
.text:0000000000007A38 loc_7A38:                               ; CODE XREF: fts_build+16E↑j
.text:0000000000007A38                 mov     dword ptr [r13+90h], 0
.text:0000000000007A43                 mov     eax, 2
.text:0000000000007A48                 jmp     loc_77EA
.text:0000000000007A48 ; ---------------------------------------------------------------------------
.text:0000000000007A4D                 align 10h
.text:0000000000007A50
.text:0000000000007A50 loc_7A50:                               ; CODE XREF: fts_build+20E↑j
.text:0000000000007A50                 cmp     byte ptr [rax+14h], 0
.text:0000000000007A54                 jz      short loc_7A61
.text:0000000000007A56                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:0000000000007A5B                 jnz     loc_7874
.text:0000000000007A61
.text:0000000000007A61 loc_7A61:                               ; CODE XREF: fts_build+3F4↑j
.text:0000000000007A61                 mov     r13, [rsp+0A8h+var_A0]
.text:0000000000007A66                 jmp     loc_782A
.text:0000000000007A66 ; ---------------------------------------------------------------------------
.text:0000000000007A6B                 align 10h
.text:0000000000007A70
.text:0000000000007A70 loc_7A70:                               ; CODE XREF: fts_build+15B↑j
.text:0000000000007A70                 and     esi, 0FBh
.text:0000000000007A76                 jz      loc_77C1
.text:0000000000007A7C                 mov     eax, 0Bh
.text:0000000000007A81                 cmp     edx, 0Bh
.text:0000000000007A84                 mov     [r13+70h], ax
.text:0000000000007A89                 jbe     loc_8016
.text:0000000000007A8F                 mov     dword ptr [r13+90h], 0
.text:0000000000007A9A                 mov     eax, 1
.text:0000000000007A9F                 jmp     loc_77EA
.text:0000000000007A9F ; ---------------------------------------------------------------------------
.text:0000000000007AA4                 align 8
.text:0000000000007AA8
.text:0000000000007AA8 loc_7AA8:                               ; CODE XREF: fts_build+146↑j
.text:0000000000007AA8                 xor     edx, edx
.text:0000000000007AAA                 mov     rsi, r13
.text:0000000000007AAD                 mov     rdi, r15
.text:0000000000007AB0                 call    fts_stat
.text:0000000000007AB5                 mov     [r13+70h], ax
.text:0000000000007ABA                 jmp     loc_77F1
.text:0000000000007ABA ; ---------------------------------------------------------------------------
.text:0000000000007ABF                 align 20h
.text:0000000000007AC0
.text:0000000000007AC0 loc_7AC0:                               ; CODE XREF: fts_build+279↑j
.text:0000000000007AC0                 movzx   eax, [rsp+0A8h+var_4B]
.text:0000000000007AC5                 jmp     loc_78F4
.text:0000000000007AC5 ; ---------------------------------------------------------------------------
.text:0000000000007ACA                 align 10h
.text:0000000000007AD0
.text:0000000000007AD0 loc_7AD0:                               ; CODE XREF: fts_build+34↑j
.text:0000000000007AD0                 mov     eax, [rdi+48h]
.text:0000000000007AD3                 mov     edx, eax
.text:0000000000007AD5                 and     edx, 10h
.text:0000000000007AD8                 jz      short loc_7AE7
.text:0000000000007ADA                 test    al, 1
.text:0000000000007ADC                 mov     edx, 20000h
.text:0000000000007AE1                 jnz     loc_7BE8
.text:0000000000007AE7
.text:0000000000007AE7 loc_7AE7:                               ; CODE XREF: fts_build+478↑j
.text:0000000000007AE7                                         ; fts_build+595↓j
.text:0000000000007AE7                 and     eax, 204h
.text:0000000000007AEC                 mov     rsi, [rbp+30h]
.text:0000000000007AF0                 mov     edi, 0FFFFFF9Ch
.text:0000000000007AF5                 cmp     eax, 200h
.text:0000000000007AFA                 jnz     short loc_7B00
.text:0000000000007AFC                 mov     edi, [r15+2Ch]
.text:0000000000007B00
.text:0000000000007B00 loc_7B00:                               ; CODE XREF: fts_build+49A↑j
.text:0000000000007B00                 lea     rcx, [rsp+0A8h+fd]
.text:0000000000007B05                 call    opendirat
.text:0000000000007B0A                 test    rax, rax
.text:0000000000007B0D                 mov     [rbp+18h], rax
.text:0000000000007B11                 jz      loc_7E30
.text:0000000000007B17                 cmp     word ptr [rbp+70h], 0Bh
.text:0000000000007B1C                 jz      loc_7EB0
.text:0000000000007B22                 mov     edi, [r15+48h]
.text:0000000000007B26                 test    edi, 100h
.text:0000000000007B2C                 jnz     loc_7C50
.text:0000000000007B32
.text:0000000000007B32 loc_7B32:                               ; CODE XREF: fts_build+61D↓j
.text:0000000000007B32                                         ; fts_build+861↓j
.text:0000000000007B32                 cmp     qword ptr [r15+40h], 1
.text:0000000000007B37                 sbb     rax, rax
.text:0000000000007B3A                 and     eax, 186A1h
.text:0000000000007B3F                 sub     rax, 1
.text:0000000000007B43                 cmp     [rsp+0A8h+var_50], 2
.text:0000000000007B48                 mov     [rsp+0A8h+var_70], rax
.text:0000000000007B4D                 jz      loc_7EA0
.text:0000000000007B53                 mov     edx, [r15+48h]
.text:0000000000007B57                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007B5B                 and     edx, 38h
.text:0000000000007B5E                 cmp     edx, 18h
.text:0000000000007B61                 jz      loc_7F04
.text:0000000000007B67
.text:0000000000007B67 loc_7B67:                               ; CODE XREF: fts_build+8AC↓j
.text:0000000000007B67                                         ; fts_build+8C4↓j
.text:0000000000007B67                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007B6C                 mov     r12d, 1
.text:0000000000007B72                 setz    bl
.text:0000000000007B75
.text:0000000000007B75 loc_7B75:                               ; CODE XREF: fts_build+955↓j
.text:0000000000007B75                 test    byte ptr [r15+49h], 2
.text:0000000000007B7A                 jnz     loc_7F5C
.text:0000000000007B80
.text:0000000000007B80 loc_7B80:                               ; CODE XREF: fts_build+913↓j
.text:0000000000007B80                 test    eax, eax
.text:0000000000007B82                 jns     loc_7EE8
.text:0000000000007B88
.text:0000000000007B88 loc_7B88:                               ; CODE XREF: fts_build+899↓j
.text:0000000000007B88                 test    bl, bl
.text:0000000000007B8A                 jz      short loc_7B9B
.text:0000000000007B8C                 test    r12b, r12b
.text:0000000000007B8F                 jz      short loc_7B9B
.text:0000000000007B91                 call    ___errno_location
.text:0000000000007B96                 mov     eax, [rax]
.text:0000000000007B98                 mov     [rbp+40h], eax
.text:0000000000007B9B
.text:0000000000007B9B loc_7B9B:                               ; CODE XREF: fts_build+52A↑j
.text:0000000000007B9B                                         ; fts_build+52F↑j
.text:0000000000007B9B                 or      word ptr [rbp+72h], 1
.text:0000000000007BA0                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007BA4                 call    _closedir
.text:0000000000007BA9                 mov     edi, [r15+48h]
.text:0000000000007BAD                 mov     qword ptr [rbp+18h], 0
.text:0000000000007BB5                 test    edi, 200h
.text:0000000000007BBB                 jz      short loc_7BD0
.text:0000000000007BBD                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007BC1                 test    eax, eax
.text:0000000000007BC3                 js      short loc_7BD0
.text:0000000000007BC5                 mov     edi, eax        ; fd
.text:0000000000007BC7                 call    _close
.text:0000000000007BCC                 mov     edi, [r15+48h]
.text:0000000000007BD0
.text:0000000000007BD0 loc_7BD0:                               ; CODE XREF: fts_build+55B↑j
.text:0000000000007BD0                                         ; fts_build+563↑j
.text:0000000000007BD0                 mov     qword ptr [rbp+18h], 0
.text:0000000000007BD8                 mov     [rsp+0A8h+var_49], 0
.text:0000000000007BDD                 jmp     loc_76CB
.text:0000000000007BDD ; ---------------------------------------------------------------------------
.text:0000000000007BE2                 align 8
.text:0000000000007BE8
.text:0000000000007BE8 loc_7BE8:                               ; CODE XREF: fts_build+481↑j
.text:0000000000007BE8                 xor     edx, edx
.text:0000000000007BEA                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007BEF                 setnz   dl
.text:0000000000007BF2                 shl     edx, 11h
.text:0000000000007BF5                 jmp     loc_7AE7
.text:0000000000007BF5 ; ---------------------------------------------------------------------------
.text:0000000000007BFA                 align 20h
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: fts_build+48↑j
.text:0000000000007C00                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007C04                 call    _closedir
.text:0000000000007C09                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007C0E                 mov     qword ptr [rbp+18h], 0
.text:0000000000007C16                 jz      loc_7E3B
.text:0000000000007C1C
.text:0000000000007C1C loc_7C1C:                               ; CODE XREF: fts_build+7D5↓j
.text:0000000000007C1C                                         ; fts_build+7F0↓j
.text:0000000000007C1C                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007C25
.text:0000000000007C25 loc_7C25:                               ; CODE XREF: fts_build+637↓j
.text:0000000000007C25                                         ; fts_build+69C↓j ...
.text:0000000000007C25                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000007C2A                 xor     rbx, fs:28h
.text:0000000000007C33                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000007C38                 jnz     loc_8011
.text:0000000000007C3E                 add     rsp, 78h
.text:0000000000007C42                 pop     rbx
.text:0000000000007C43                 pop     rbp
.text:0000000000007C44                 pop     r12
.text:0000000000007C46                 pop     r13
.text:0000000000007C48                 pop     r14
.text:0000000000007C4A                 pop     r15
.text:0000000000007C4C                 retn
.text:0000000000007C4C ; ---------------------------------------------------------------------------
.text:0000000000007C4D                 align 10h
.text:0000000000007C50
.text:0000000000007C50 loc_7C50:                               ; CODE XREF: fts_build+4CC↑j
.text:0000000000007C50                 lea     rbx, [r15+58h]
.text:0000000000007C54                 mov     rdx, rbp
.text:0000000000007C57                 mov     rsi, rbx
.text:0000000000007C5A                 call    leave_dir_isra_12
.text:0000000000007C5F                 xor     edx, edx
.text:0000000000007C61                 mov     rsi, rbp
.text:0000000000007C64                 mov     rdi, r15
.text:0000000000007C67                 call    fts_stat
.text:0000000000007C6C                 mov     edi, [r15+48h]
.text:0000000000007C70                 mov     rdx, rbp
.text:0000000000007C73                 mov     rsi, rbx
.text:0000000000007C76                 call    enter_dir_isra_10
.text:0000000000007C7B                 test    al, al
.text:0000000000007C7D                 jnz     loc_7B32
.text:0000000000007C83                 call    ___errno_location
.text:0000000000007C88                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007C91                 mov     dword ptr [rax], 0Ch
.text:0000000000007C97                 jmp     short loc_7C25
.text:0000000000007C97 ; ---------------------------------------------------------------------------
.text:0000000000007C99                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 loc_7CA0:                               ; CODE XREF: fts_build+2CF↑j
.text:0000000000007CA0                                         ; fts_build+2DD↑j ...
.text:0000000000007CA0                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000007CA5                 jmp     loc_781B
.text:0000000000007CA5 ; ---------------------------------------------------------------------------
.text:0000000000007CAA                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: fts_build+237↑j
.text:0000000000007CB0                                         ; fts_build+26A↑j
.text:0000000000007CB0                 mov     rdi, r13        ; ptr
.text:0000000000007CB3                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007CB8                 mov     ebx, [r12]
.text:0000000000007CBC                 call    free
.text:0000000000007CC1                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007CC6                 call    fts_lfree
.text:0000000000007CCB                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007CCF                 call    _closedir
.text:0000000000007CD4                 mov     r9d, 7
.text:0000000000007CDA                 mov     qword ptr [rbp+18h], 0
.text:0000000000007CE2                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007CEB                 mov     [rbp+70h], r9w
.text:0000000000007CF0                 or      dword ptr [r15+48h], 2000h
.text:0000000000007CF8                 mov     [r12], ebx
.text:0000000000007CFC                 jmp     loc_7C25
.text:0000000000007CFC ; ---------------------------------------------------------------------------
.text:0000000000007D01                 align 8
.text:0000000000007D08
.text:0000000000007D08 loc_7D08:                               ; CODE XREF: fts_build+1DB↑j
.text:0000000000007D08                 mov     rbp, rax
.text:0000000000007D0B
.text:0000000000007D0B loc_7D0B:                               ; CODE XREF: fts_build+7B5↓j
.text:0000000000007D0B                                         ; fts_build+7C8↓j
.text:0000000000007D0B                 cmp     [rsp+0A8h+var_4B], 0
.text:0000000000007D10                 jnz     loc_7978
.text:0000000000007D16
.text:0000000000007D16 loc_7D16:                               ; CODE XREF: fts_build+312↑j
.text:0000000000007D16                                         ; fts_build+368↑j
.text:0000000000007D16                 test    byte ptr [r15+48h], 4
.text:0000000000007D1B                 jz      short loc_7D3B
.text:0000000000007D1D                 mov     rax, [rsp+0A8h+var_90]
.text:0000000000007D22                 cmp     [r15+30h], rax
.text:0000000000007D26                 jz      short loc_7D2D
.text:0000000000007D28                 test    rbx, rbx
.text:0000000000007D2B                 jnz     short loc_7D33
.text:0000000000007D2D
.text:0000000000007D2D loc_7D2D:                               ; CODE XREF: fts_build+6C6↑j
.text:0000000000007D2D                 sub     [rsp+0A8h+dest], 1
.text:0000000000007D33
.text:0000000000007D33 loc_7D33:                               ; CODE XREF: fts_build+6CB↑j
.text:0000000000007D33                 mov     rax, [rsp+0A8h+dest]
.text:0000000000007D38                 mov     byte ptr [rax], 0
.text:0000000000007D3B
.text:0000000000007D3B loc_7D3B:                               ; CODE XREF: fts_build+6BB↑j
.text:0000000000007D3B                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000007D41                 jnz     short loc_7DB0
.text:0000000000007D43                 cmp     [rsp+0A8h+var_49], 0
.text:0000000000007D48                 jz      short loc_7DB0
.text:0000000000007D4A                 cmp     [rsp+0A8h+var_50], 1
.text:0000000000007D4F                 jz      short loc_7D90
.text:0000000000007D51                 test    rbx, rbx
.text:0000000000007D54                 jz      short loc_7D90
.text:0000000000007D56
.text:0000000000007D56 loc_7D56:                               ; CODE XREF: fts_build+753↓j
.text:0000000000007D56                 cmp     [rsp+0A8h+var_4A], 0
.text:0000000000007D5B                 jnz     loc_7E58
.text:0000000000007D61                 cmp     qword ptr [r15+40h], 0
.text:0000000000007D66                 jz      loc_7C25
.text:0000000000007D6C                 cmp     rbx, 1
.text:0000000000007D70                 jz      loc_7C25
.text:0000000000007D76                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000007D7B                 mov     rdx, rbx
.text:0000000000007D7E                 mov     rdi, r15
.text:0000000000007D81                 call    fts_sort
.text:0000000000007D86                 mov     [rsp+0A8h+ptr], rax
.text:0000000000007D8B                 jmp     loc_7C25
.text:0000000000007D90 ; ---------------------------------------------------------------------------
.text:0000000000007D90
.text:0000000000007D90 loc_7D90:                               ; CODE XREF: fts_build+6EF↑j
.text:0000000000007D90                                         ; fts_build+6F4↑j
.text:0000000000007D90                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007D95                 jnz     loc_7EC6
.text:0000000000007D9B                 mov     rdi, r15
.text:0000000000007D9E                 call    restore_initial_cwd
.text:0000000000007DA3                 test    eax, eax
.text:0000000000007DA5                 setnz   al
.text:0000000000007DA8
.text:0000000000007DA8 loc_7DA8:                               ; CODE XREF: fts_build+883↓j
.text:0000000000007DA8                 test    al, al
.text:0000000000007DAA                 jnz     loc_7F33
.text:0000000000007DB0
.text:0000000000007DB0 loc_7DB0:                               ; CODE XREF: fts_build+6E1↑j
.text:0000000000007DB0                                         ; fts_build+6E8↑j
.text:0000000000007DB0                 test    rbx, rbx
.text:0000000000007DB3                 jnz     short loc_7D56
.text:0000000000007DB5                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007DBA                 jz      loc_7F78
.text:0000000000007DC0
.text:0000000000007DC0 loc_7DC0:                               ; CODE XREF: fts_build+920↓j
.text:0000000000007DC0                                         ; fts_build+92A↓j ...
.text:0000000000007DC0                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007DC5                 call    fts_lfree
.text:0000000000007DCA                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007DD3                 jmp     loc_7C25
.text:0000000000007DD3 ; ---------------------------------------------------------------------------
.text:0000000000007DD8                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 loc_7DE0:                               ; CODE XREF: fts_build+1FD↑j
.text:0000000000007DE0                 mov     eax, [r12]
.text:0000000000007DE4                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007DE9                 test    eax, eax
.text:0000000000007DEB                 jz      short loc_7E0E
.text:0000000000007DED                 test    rbx, rbx
.text:0000000000007DF0                 mov     [rbp+40h], eax
.text:0000000000007DF3                 jnz     loc_7F29
.text:0000000000007DF9                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000007DFF                 mov     eax, 4
.text:0000000000007E04                 jnz     loc_7F29
.text:0000000000007E0A
.text:0000000000007E0A loc_7E0A:                               ; CODE XREF: fts_build+8CE↓j
.text:0000000000007E0A                 mov     [rbp+70h], ax
.text:0000000000007E0E
.text:0000000000007E0E loc_7E0E:                               ; CODE XREF: fts_build+78B↑j
.text:0000000000007E0E                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007E12                 test    rdi, rdi
.text:0000000000007E15                 jz      loc_7D0B
.text:0000000000007E1B                 call    _closedir
.text:0000000000007E20                 mov     qword ptr [rbp+18h], 0
.text:0000000000007E28                 jmp     loc_7D0B
.text:0000000000007E28 ; ---------------------------------------------------------------------------
.text:0000000000007E2D                 align 10h
.text:0000000000007E30
.text:0000000000007E30 loc_7E30:                               ; CODE XREF: fts_build+4B1↑j
.text:0000000000007E30                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007E35                 jnz     loc_7C1C
.text:0000000000007E3B
.text:0000000000007E3B loc_7E3B:                               ; CODE XREF: fts_build+5B6↑j
.text:0000000000007E3B                 mov     r10d, 4
.text:0000000000007E41                 mov     [rbp+70h], r10w
.text:0000000000007E46                 call    ___errno_location
.text:0000000000007E4B                 mov     eax, [rax]
.text:0000000000007E4D                 mov     [rbp+40h], eax
.text:0000000000007E50                 jmp     loc_7C1C
.text:0000000000007E50 ; ---------------------------------------------------------------------------
.text:0000000000007E55                 align 8
.text:0000000000007E58
.text:0000000000007E58 loc_7E58:                               ; CODE XREF: fts_build+6FB↑j
.text:0000000000007E58                 lea     rax, fts_compare_ino
.text:0000000000007E5F                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000007E64                 mov     rdx, rbx
.text:0000000000007E67                 mov     rdi, r15
.text:0000000000007E6A                 mov     [r15+40h], rax
.text:0000000000007E6E                 call    fts_sort
.text:0000000000007E73                 mov     qword ptr [r15+40h], 0
.text:0000000000007E7B                 mov     [rsp+0A8h+ptr], rax
.text:0000000000007E80                 jmp     loc_7C25
.text:0000000000007E80 ; ---------------------------------------------------------------------------
.text:0000000000007E85                 align 8
.text:0000000000007E88
.text:0000000000007E88 loc_7E88:                               ; CODE XREF: fts_build+53↑j
.text:0000000000007E88                 mov     [rsp+0A8h+var_70], 186A0h
.text:0000000000007E91                 mov     [rsp+0A8h+var_49], 1
.text:0000000000007E96                 mov     edi, [r15+48h]
.text:0000000000007E9A                 jmp     loc_76CB
.text:0000000000007E9A ; ---------------------------------------------------------------------------
.text:0000000000007E9F                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: fts_build+4ED↑j
.text:0000000000007EA0                                         ; fts_build+943↓j
.text:0000000000007EA0                 mov     [rsp+0A8h+var_49], 0
.text:0000000000007EA5                 mov     edi, [r15+48h]
.text:0000000000007EA9                 jmp     loc_76CB
.text:0000000000007EA9 ; ---------------------------------------------------------------------------
.text:0000000000007EAE                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: fts_build+4BC↑j
.text:0000000000007EB0                 xor     edx, edx
.text:0000000000007EB2                 mov     rsi, rbp
.text:0000000000007EB5                 mov     rdi, r15
.text:0000000000007EB8                 call    fts_stat
.text:0000000000007EBD                 mov     [rbp+70h], ax
.text:0000000000007EC1                 jmp     loc_7B32
.text:0000000000007EC6 ; ---------------------------------------------------------------------------
.text:0000000000007EC6
.text:0000000000007EC6 loc_7EC6:                               ; CODE XREF: fts_build+735↑j
.text:0000000000007EC6                 mov     rsi, [rbp+8]
.text:0000000000007ECA                 lea     rcx, asc_C4C9   ; ".."
.text:0000000000007ED1                 mov     edx, 0FFFFFFFFh
.text:0000000000007ED6                 mov     rdi, r15
.text:0000000000007ED9                 call    fts_safe_changedir
.text:0000000000007EDE                 test    eax, eax
.text:0000000000007EE0                 setnz   al
.text:0000000000007EE3                 jmp     loc_7DA8
.text:0000000000007EE8 ; ---------------------------------------------------------------------------
.text:0000000000007EE8
.text:0000000000007EE8 loc_7EE8:                               ; CODE XREF: fts_build+522↑j
.text:0000000000007EE8                 xor     ecx, ecx
.text:0000000000007EEA                 mov     edx, eax
.text:0000000000007EEC                 mov     rsi, rbp
.text:0000000000007EEF                 mov     rdi, r15
.text:0000000000007EF2                 call    fts_safe_changedir
.text:0000000000007EF7                 test    eax, eax
.text:0000000000007EF9                 jnz     loc_7B88
.text:0000000000007EFF                 jmp     loc_76C2
.text:0000000000007F04 ; ---------------------------------------------------------------------------
.text:0000000000007F04
.text:0000000000007F04 loc_7F04:                               ; CODE XREF: fts_build+501↑j
.text:0000000000007F04                 cmp     qword ptr [rbp+88h], 2
.text:0000000000007F0C                 jnz     loc_7B67
.text:0000000000007F12                 mov     esi, eax
.text:0000000000007F14                 mov     rdi, rbp
.text:0000000000007F17                 call    leaf_optimization
.text:0000000000007F1C                 test    eax, eax
.text:0000000000007F1E                 jnz     short loc_7F9E
.text:0000000000007F20                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007F24                 jmp     loc_7B67
.text:0000000000007F29 ; ---------------------------------------------------------------------------
.text:0000000000007F29
.text:0000000000007F29 loc_7F29:                               ; CODE XREF: fts_build+793↑j
.text:0000000000007F29                                         ; fts_build+7A4↑j
.text:0000000000007F29                 mov     eax, 7
.text:0000000000007F2E                 jmp     loc_7E0A
.text:0000000000007F33 ; ---------------------------------------------------------------------------
.text:0000000000007F33
.text:0000000000007F33 loc_7F33:                               ; CODE XREF: fts_build+74A↑j
.text:0000000000007F33                 mov     edi, 7
.text:0000000000007F38                 mov     [rbp+70h], di
.text:0000000000007F3C                 or      dword ptr [r15+48h], 2000h
.text:0000000000007F44                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007F49                 call    fts_lfree
.text:0000000000007F4E                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007F57                 jmp     loc_7C25
.text:0000000000007F5C ; ---------------------------------------------------------------------------
.text:0000000000007F5C
.text:0000000000007F5C loc_7F5C:                               ; CODE XREF: fts_build+51A↑j
.text:0000000000007F5C                 mov     edi, eax        ; fd
.text:0000000000007F5E                 mov     edx, 3
.text:0000000000007F63                 mov     esi, 406h
.text:0000000000007F68                 xor     eax, eax
.text:0000000000007F6A                 call    rpl_fcntl
.text:0000000000007F6F                 mov     [rsp+0A8h+fd], eax
.text:0000000000007F73                 jmp     loc_7B80
.text:0000000000007F78 ; ---------------------------------------------------------------------------
.text:0000000000007F78
.text:0000000000007F78 loc_7F78:                               ; CODE XREF: fts_build+75A↑j
.text:0000000000007F78                 movzx   eax, word ptr [rbp+70h]
.text:0000000000007F7C                 cmp     ax, 7
.text:0000000000007F80                 jz      loc_7DC0
.text:0000000000007F86                 cmp     ax, 4
.text:0000000000007F8A                 jz      loc_7DC0
.text:0000000000007F90                 mov     esi, 6
.text:0000000000007F95                 mov     [rbp+70h], si
.text:0000000000007F99                 jmp     loc_7DC0
.text:0000000000007F9E ; ---------------------------------------------------------------------------
.text:0000000000007F9E
.text:0000000000007F9E loc_7F9E:                               ; CODE XREF: fts_build+8BE↑j
.text:0000000000007F9E                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007FA3                 jnz     loc_7EA0
.text:0000000000007FA9                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007FAD                 xor     r12d, r12d
.text:0000000000007FB0                 mov     ebx, 1
.text:0000000000007FB5                 jmp     loc_7B75
.text:0000000000007FB5 ; ---------------------------------------------------------------------------
.text:0000000000007FBA                 align 20h
.text:0000000000007FC0
.text:0000000000007FC0 loc_7FC0:                               ; CODE XREF: fts_build+100↑j
.text:0000000000007FC0                 mov     rdi, r13        ; ptr
.text:0000000000007FC3                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007FC8                 call    free
.text:0000000000007FCD                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007FD2                 call    fts_lfree
.text:0000000000007FD7                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007FDB                 call    _closedir
.text:0000000000007FE0                 mov     r8d, 7
.text:0000000000007FE6                 mov     qword ptr [rbp+18h], 0
.text:0000000000007FEE                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007FF7                 mov     [rbp+70h], r8w
.text:0000000000007FFC                 or      dword ptr [r15+48h], 2000h
.text:0000000000008004                 mov     dword ptr [r12], 24h ; '$'
.text:000000000000800C                 jmp     loc_7C25
.text:0000000000008011 ; ---------------------------------------------------------------------------
.text:0000000000008011
.text:0000000000008011 loc_8011:                               ; CODE XREF: fts_build+5D8↑j
.text:0000000000008011                 call    ___stack_chk_fail
.text:0000000000008016 ; ---------------------------------------------------------------------------
.text:0000000000008016
.text:0000000000008016 loc_8016:                               ; CODE XREF: fts_build+429↑j
.text:0000000000008016                 lea     rax, CSWTCH_53
.text:000000000000801D                 mov     eax, [rax+rdx*4]
.text:0000000000008020                 mov     [r13+90h], eax
.text:0000000000008027                 mov     eax, 1
.text:000000000000802C                 jmp     loc_77EA
.text:000000000000802C ; } // starts at 7660
.text:000000000000802C fts_build       endp
.text:000000000000802C
.text:000000000000802C ; ---------------------------------------------------------------------------
.text:0000000000008031                 align 20h
.text:0000000000008040
.text:0000000000008040 ; =============== S U B R O U T I N E =======================================
.text:0000000000008040
.text:0000000000008040
.text:0000000000008040                 public rpl_fts_open
.text:0000000000008040 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:0000000000008040
.text:0000000000008040 var_50          = qword ptr -50h
.text:0000000000008040 var_42          = byte ptr -42h
.text:0000000000008040 var_41          = byte ptr -41h
.text:0000000000008040 var_40          = qword ptr -40h
.text:0000000000008040
.text:0000000000008040 ; __unwind {
.text:0000000000008040                 push    r15
.text:0000000000008042                 push    r14
.text:0000000000008044                 push    r13
.text:0000000000008046                 push    r12
.text:0000000000008048                 push    rbp
.text:0000000000008049                 push    rbx
.text:000000000000804A                 sub     rsp, 28h
.text:000000000000804E                 test    esi, 0FFFFF000h
.text:0000000000008054                 jnz     loc_83D8
.text:000000000000805A                 mov     eax, esi
.text:000000000000805C                 mov     ebp, esi
.text:000000000000805E                 and     eax, 204h
.text:0000000000008063                 cmp     eax, 204h
.text:0000000000008068                 jz      loc_83D8
.text:000000000000806E                 test    sil, 12h
.text:0000000000008072                 jz      loc_83D8
.text:0000000000008078                 mov     r13, rdi
.text:000000000000807B                 mov     esi, 1          ; size
.text:0000000000008080                 mov     edi, 80h        ; nmemb
.text:0000000000008085                 mov     r14, rdx
.text:0000000000008088                 call    _calloc
.text:000000000000808D                 test    rax, rax
.text:0000000000008090                 mov     rbx, rax
.text:0000000000008093                 jz      loc_82EE
.text:0000000000008099                 test    bpl, 2
.text:000000000000809D                 mov     [rax+40h], r14
.text:00000000000080A1                 jnz     loc_8300
.text:00000000000080A7                 mov     rdi, [r13+0]    ; s
.text:00000000000080AB                 mov     [rax+48h], ebp
.text:00000000000080AE                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:00000000000080B5                 test    rdi, rdi
.text:00000000000080B8                 jz      loc_831F
.text:00000000000080BE
.text:00000000000080BE loc_80BE:                               ; CODE XREF: rpl_fts_open+2D9↓j
.text:00000000000080BE                 mov     r15, r13
.text:00000000000080C1                 xor     r12d, r12d
.text:00000000000080C4                 nop     dword ptr [rax+00h]
.text:00000000000080C8
.text:00000000000080C8 loc_80C8:                               ; CODE XREF: rpl_fts_open+9E↓j
.text:00000000000080C8                 call    _strlen
.text:00000000000080CD                 cmp     r12, rax
.text:00000000000080D0                 cmovb   r12, rax
.text:00000000000080D4                 add     r15, 8
.text:00000000000080D8                 mov     rdi, [r15]
.text:00000000000080DB                 test    rdi, rdi
.text:00000000000080DE                 jnz     short loc_80C8
.text:00000000000080E0                 lea     rdx, [r12+1]
.text:00000000000080E5                 mov     eax, 1000h
.text:00000000000080EA                 cmp     rdx, 1000h
.text:00000000000080F1                 cmovb   rdx, rax
.text:00000000000080F5
.text:00000000000080F5 loc_80F5:                               ; CODE XREF: rpl_fts_open+2E4↓j
.text:00000000000080F5                 lea     rsi, [rbx+30h]
.text:00000000000080F9                 lea     rdi, [rbx+20h]
.text:00000000000080FD                 call    fts_palloc_isra_2
.text:0000000000008102                 test    al, al
.text:0000000000008104                 mov     [rsp+58h+var_42], al
.text:0000000000008108                 jz      loc_83A9
.text:000000000000810E                 mov     rsi, [r13+0]
.text:0000000000008112                 test    rsi, rsi
.text:0000000000008115                 jz      loc_83C0
.text:000000000000811B                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000008122                 xor     edx, edx
.text:0000000000008124                 mov     rdi, rbx
.text:0000000000008127                 call    fts_alloc
.text:000000000000812C                 test    rax, rax
.text:000000000000812F                 mov     r15, rax
.text:0000000000008132                 jz      loc_83A0
.text:0000000000008138                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000813F                 test    r14, r14
.text:0000000000008142                 mov     rsi, [r13+0]
.text:0000000000008146                 mov     [r15+58h], rax
.text:000000000000814A                 mov     [r15+68h], rax
.text:000000000000814E                 jz      short loc_815D
.text:0000000000008150
.text:0000000000008150 loc_8150:                               ; CODE XREF: rpl_fts_open+386↓j
.text:0000000000008150                 mov     eax, [rbx+48h]
.text:0000000000008153                 shr     eax, 0Ah
.text:0000000000008156                 and     eax, 1
.text:0000000000008159                 mov     [rsp+58h+var_42], al
.text:000000000000815D
.text:000000000000815D loc_815D:                               ; CODE XREF: rpl_fts_open+10E↑j
.text:000000000000815D                 test    rsi, rsi
.text:0000000000008160                 jz      loc_83CC
.text:0000000000008166                 shr     ebp, 0Bh
.text:0000000000008169                 mov     [rsp+58h+var_40], 0
.text:0000000000008172                 xor     r12d, r12d
.text:0000000000008175                 xor     ebp, 1
.text:0000000000008178                 mov     eax, ebp
.text:000000000000817A                 xor     ebp, ebp
.text:000000000000817C                 and     eax, 1
.text:000000000000817F                 mov     [rsp+58h+var_41], al
.text:0000000000008183                 jmp     short loc_81FC
.text:0000000000008183 ; ---------------------------------------------------------------------------
.text:0000000000008185                 align 8
.text:0000000000008188
.text:0000000000008188 loc_8188:                               ; CODE XREF: rpl_fts_open+1D2↓j
.text:0000000000008188                                         ; rpl_fts_open+1DD↓j ...
.text:0000000000008188                 mov     rdx, rax
.text:000000000000818B                 mov     rdi, rbx
.text:000000000000818E                 call    fts_alloc
.text:0000000000008193                 test    rax, rax
.text:0000000000008196                 mov     rcx, rax
.text:0000000000008199                 jz      loc_8390
.text:000000000000819F                 mov     qword ptr [rax+58h], 0
.text:00000000000081A7                 mov     [rax+8], r15
.text:00000000000081AB                 lea     rax, [rax+108h]
.text:00000000000081B2                 test    r12, r12
.text:00000000000081B5                 mov     [rcx+30h], rax
.text:00000000000081B9                 jz      loc_8330
.text:00000000000081BF                 cmp     [rsp+58h+var_42], 0
.text:00000000000081C4                 jz      loc_8330
.text:00000000000081CA                 mov     esi, 0Bh
.text:00000000000081CF                 test    r14, r14
.text:00000000000081D2                 mov     qword ptr [rcx+0A8h], 2
.text:00000000000081DD                 mov     [rcx+70h], si
.text:00000000000081E1                 jz      loc_8370
.text:00000000000081E7
.text:00000000000081E7 loc_81E7:                               ; CODE XREF: rpl_fts_open+30E↓j
.text:00000000000081E7                 mov     [rcx+10h], r12
.text:00000000000081EB                 mov     r12, rcx
.text:00000000000081EE
.text:00000000000081EE loc_81EE:                               ; CODE XREF: rpl_fts_open+329↓j
.text:00000000000081EE                                         ; rpl_fts_open+346↓j
.text:00000000000081EE                 add     rbp, 1
.text:00000000000081F2                 mov     rsi, [r13+rbp*8+0]
.text:00000000000081F7                 test    rsi, rsi
.text:00000000000081FA                 jz      short loc_8250
.text:00000000000081FC
.text:00000000000081FC loc_81FC:                               ; CODE XREF: rpl_fts_open+143↑j
.text:00000000000081FC                 mov     rdi, rsi        ; s
.text:00000000000081FF                 mov     [rsp+58h+var_50], rsi
.text:0000000000008204                 call    _strlen
.text:0000000000008209                 cmp     rax, 2
.text:000000000000820D                 mov     rsi, [rsp+58h+var_50]
.text:0000000000008212                 jbe     loc_8188
.text:0000000000008218                 cmp     [rsp+58h+var_41], 0
.text:000000000000821D                 jz      loc_8188
.text:0000000000008223                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:0000000000008228                 jnz     loc_8188
.text:000000000000822E                 xchg    ax, ax
.text:0000000000008230
.text:0000000000008230 loc_8230:                               ; CODE XREF: rpl_fts_open+203↓j
.text:0000000000008230                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:0000000000008235                 jnz     loc_8188
.text:000000000000823B                 sub     rax, 1
.text:000000000000823F                 cmp     rax, 1
.text:0000000000008243                 jnz     short loc_8230
.text:0000000000008245                 jmp     loc_8188
.text:0000000000008245 ; ---------------------------------------------------------------------------
.text:000000000000824A                 align 10h
.text:0000000000008250
.text:0000000000008250 loc_8250:                               ; CODE XREF: rpl_fts_open+1BA↑j
.text:0000000000008250                 test    r14, r14
.text:0000000000008253                 jz      short loc_826C
.text:0000000000008255                 cmp     rbp, 1
.text:0000000000008259                 jbe     short loc_826C
.text:000000000000825B                 mov     rsi, r12
.text:000000000000825E                 mov     rdx, rbp
.text:0000000000008261                 mov     rdi, rbx
.text:0000000000008264                 call    fts_sort
.text:0000000000008269                 mov     r12, rax
.text:000000000000826C
.text:000000000000826C loc_826C:                               ; CODE XREF: rpl_fts_open+213↑j
.text:000000000000826C                                         ; rpl_fts_open+219↑j ...
.text:000000000000826C                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000008273                 xor     edx, edx
.text:0000000000008275                 mov     rdi, rbx
.text:0000000000008278                 call    fts_alloc
.text:000000000000827D                 test    rax, rax
.text:0000000000008280                 mov     [rbx], rax
.text:0000000000008283                 jz      loc_8390
.text:0000000000008289                 mov     edi, [rbx+48h]
.text:000000000000828C                 mov     edx, 9
.text:0000000000008291                 lea     rsi, [rbx+58h]
.text:0000000000008295                 mov     [rax+10h], r12
.text:0000000000008299                 mov     [rax+70h], dx
.text:000000000000829D                 mov     qword ptr [rax+58h], 1
.text:00000000000082A5                 call    setup_dir_isra_4
.text:00000000000082AA                 test    al, al
.text:00000000000082AC                 jz      loc_8390
.text:00000000000082B2                 mov     esi, [rbx+48h]
.text:00000000000082B5                 test    esi, 204h
.text:00000000000082BB                 jnz     short loc_82E0
.text:00000000000082BD                 mov     edi, [rbx+2Ch]
.text:00000000000082C0                 lea     rdx, asc_C4C9+1 ; "."
.text:00000000000082C7                 call    diropen_isra_6
.text:00000000000082CC                 test    eax, eax
.text:00000000000082CE                 mov     [rbx+28h], eax
.text:00000000000082D1                 jns     short loc_82E0
.text:00000000000082D3                 or      dword ptr [rbx+48h], 4
.text:00000000000082D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000082E0
.text:00000000000082E0 loc_82E0:                               ; CODE XREF: rpl_fts_open+27B↑j
.text:00000000000082E0                                         ; rpl_fts_open+291↑j
.text:00000000000082E0                 lea     rdi, [rbx+60h]
.text:00000000000082E4                 mov     esi, 0FFFFFFFFh
.text:00000000000082E9                 call    i_ring_init
.text:00000000000082EE
.text:00000000000082EE loc_82EE:                               ; CODE XREF: rpl_fts_open+53↑j
.text:00000000000082EE                                         ; rpl_fts_open+373↓j ...
.text:00000000000082EE                 add     rsp, 28h
.text:00000000000082F2                 mov     rax, rbx
.text:00000000000082F5                 pop     rbx
.text:00000000000082F6                 pop     rbp
.text:00000000000082F7                 pop     r12
.text:00000000000082F9                 pop     r13
.text:00000000000082FB                 pop     r14
.text:00000000000082FD                 pop     r15
.text:00000000000082FF                 retn
.text:0000000000008300 ; ---------------------------------------------------------------------------
.text:0000000000008300
.text:0000000000008300 loc_8300:                               ; CODE XREF: rpl_fts_open+61↑j
.text:0000000000008300                 mov     rdi, [r13+0]
.text:0000000000008304                 mov     eax, ebp
.text:0000000000008306                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:000000000000830D                 and     ah, 0FDh
.text:0000000000008310                 or      eax, 4
.text:0000000000008313                 test    rdi, rdi
.text:0000000000008316                 mov     [rbx+48h], eax
.text:0000000000008319                 jnz     loc_80BE
.text:000000000000831F
.text:000000000000831F loc_831F:                               ; CODE XREF: rpl_fts_open+78↑j
.text:000000000000831F                 mov     edx, 1000h
.text:0000000000008324                 jmp     loc_80F5
.text:0000000000008324 ; ---------------------------------------------------------------------------
.text:0000000000008329                 align 10h
.text:0000000000008330
.text:0000000000008330 loc_8330:                               ; CODE XREF: rpl_fts_open+179↑j
.text:0000000000008330                                         ; rpl_fts_open+184↑j
.text:0000000000008330                 xor     edx, edx
.text:0000000000008332                 mov     rsi, rcx
.text:0000000000008335                 mov     rdi, rbx
.text:0000000000008338                 mov     [rsp+58h+var_50], rcx
.text:000000000000833D                 call    fts_stat
.text:0000000000008342                 mov     rcx, [rsp+58h+var_50]
.text:0000000000008347                 test    r14, r14
.text:000000000000834A                 mov     [rcx+70h], ax
.text:000000000000834E                 jnz     loc_81E7
.text:0000000000008354                 test    r12, r12
.text:0000000000008357                 mov     qword ptr [rcx+10h], 0
.text:000000000000835F                 jnz     short loc_8378
.text:0000000000008361                 mov     [rsp+58h+var_40], rcx
.text:0000000000008366                 mov     r12, rcx
.text:0000000000008369                 jmp     loc_81EE
.text:0000000000008369 ; ---------------------------------------------------------------------------
.text:000000000000836E                 align 10h
.text:0000000000008370
.text:0000000000008370 loc_8370:                               ; CODE XREF: rpl_fts_open+1A1↑j
.text:0000000000008370                 mov     qword ptr [rcx+10h], 0
.text:0000000000008378
.text:0000000000008378 loc_8378:                               ; CODE XREF: rpl_fts_open+31F↑j
.text:0000000000008378                 mov     rax, [rsp+58h+var_40]
.text:000000000000837D                 mov     [rsp+58h+var_40], rcx
.text:0000000000008382                 mov     [rax+10h], rcx
.text:0000000000008386                 jmp     loc_81EE
.text:0000000000008386 ; ---------------------------------------------------------------------------
.text:000000000000838B                 align 10h
.text:0000000000008390
.text:0000000000008390 loc_8390:                               ; CODE XREF: rpl_fts_open+159↑j
.text:0000000000008390                                         ; rpl_fts_open+243↑j ...
.text:0000000000008390                 mov     rdi, r12        ; ptr
.text:0000000000008393                 call    fts_lfree
.text:0000000000008398                 mov     rdi, r15        ; ptr
.text:000000000000839B                 call    free
.text:00000000000083A0
.text:00000000000083A0 loc_83A0:                               ; CODE XREF: rpl_fts_open+F2↑j
.text:00000000000083A0                 mov     rdi, [rbx+20h]  ; ptr
.text:00000000000083A4                 call    free
.text:00000000000083A9
.text:00000000000083A9 loc_83A9:                               ; CODE XREF: rpl_fts_open+C8↑j
.text:00000000000083A9                 mov     rdi, rbx        ; ptr
.text:00000000000083AC                 xor     ebx, ebx
.text:00000000000083AE                 call    free
.text:00000000000083B3                 jmp     loc_82EE
.text:00000000000083B3 ; ---------------------------------------------------------------------------
.text:00000000000083B8                 align 20h
.text:00000000000083C0
.text:00000000000083C0 loc_83C0:                               ; CODE XREF: rpl_fts_open+D5↑j
.text:00000000000083C0                 xor     r15d, r15d
.text:00000000000083C3                 test    r14, r14
.text:00000000000083C6                 jnz     loc_8150
.text:00000000000083CC
.text:00000000000083CC loc_83CC:                               ; CODE XREF: rpl_fts_open+120↑j
.text:00000000000083CC                 xor     r12d, r12d
.text:00000000000083CF                 jmp     loc_826C
.text:00000000000083CF ; ---------------------------------------------------------------------------
.text:00000000000083D4                 align 8
.text:00000000000083D8
.text:00000000000083D8 loc_83D8:                               ; CODE XREF: rpl_fts_open+14↑j
.text:00000000000083D8                                         ; rpl_fts_open+28↑j ...
.text:00000000000083D8                 call    ___errno_location
.text:00000000000083DD                 xor     ebx, ebx
.text:00000000000083DF                 mov     dword ptr [rax], 16h
.text:00000000000083E5                 jmp     loc_82EE
.text:00000000000083E5 ; } // starts at 8040
.text:00000000000083E5 rpl_fts_open    endp
.text:00000000000083E5
.text:00000000000083E5 ; ---------------------------------------------------------------------------
.text:00000000000083EA                 align 10h
.text:00000000000083F0
.text:00000000000083F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083F0
.text:00000000000083F0
.text:00000000000083F0 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:00000000000083F0                 public rpl_fts_close
.text:00000000000083F0 rpl_fts_close   proc near               ; CODE XREF: chown_files+9C↑p
.text:00000000000083F0 ; __unwind {
.text:00000000000083F0                 push    r12
.text:00000000000083F2                 push    rbp
.text:00000000000083F3                 mov     rbp, rdi
.text:00000000000083F6                 push    rbx
.text:00000000000083F7                 mov     rdi, [rdi]
.text:00000000000083FA                 test    rdi, rdi
.text:00000000000083FD                 jz      short loc_8443
.text:00000000000083FF                 cmp     qword ptr [rdi+58h], 0
.text:0000000000008404                 jns     short loc_841F
.text:0000000000008406                 jmp     loc_8520
.text:0000000000008406 ; ---------------------------------------------------------------------------
.text:000000000000840B                 align 10h
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: rpl_fts_close+36↓j
.text:0000000000008410                 call    free
.text:0000000000008415                 cmp     qword ptr [rbx+58h], 0
.text:000000000000841A                 mov     rdi, rbx        ; ptr
.text:000000000000841D                 js      short loc_843B
.text:000000000000841F
.text:000000000000841F loc_841F:                               ; CODE XREF: rpl_fts_close+14↑j
.text:000000000000841F                                         ; rpl_fts_close+49↓j
.text:000000000000841F                 mov     rbx, [rdi+10h]
.text:0000000000008423                 test    rbx, rbx
.text:0000000000008426                 jnz     short loc_8410
.text:0000000000008428                 mov     rbx, [rdi+8]
.text:000000000000842C                 call    free
.text:0000000000008431                 cmp     qword ptr [rbx+58h], 0
.text:0000000000008436                 mov     rdi, rbx
.text:0000000000008439                 jns     short loc_841F
.text:000000000000843B
.text:000000000000843B loc_843B:                               ; CODE XREF: rpl_fts_close+2D↑j
.text:000000000000843B                 mov     rdi, rbx        ; ptr
.text:000000000000843E                 call    free
.text:0000000000008443
.text:0000000000008443 loc_8443:                               ; CODE XREF: rpl_fts_close+D↑j
.text:0000000000008443                                         ; rpl_fts_close+13B↓j
.text:0000000000008443                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000008447                 test    rdi, rdi
.text:000000000000844A                 jz      short loc_8451
.text:000000000000844C                 call    fts_lfree
.text:0000000000008451
.text:0000000000008451 loc_8451:                               ; CODE XREF: rpl_fts_close+5A↑j
.text:0000000000008451                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000008455                 call    free
.text:000000000000845A                 mov     rdi, [rbp+20h]  ; ptr
.text:000000000000845E                 call    free
.text:0000000000008463                 mov     eax, [rbp+48h]
.text:0000000000008466                 test    ah, 2
.text:0000000000008469                 jz      short loc_84D0
.text:000000000000846B                 mov     edi, [rbp+2Ch]  ; fd
.text:000000000000846E                 test    edi, edi
.text:0000000000008470                 jns     loc_8500
.text:0000000000008476
.text:0000000000008476 loc_8476:                               ; CODE XREF: rpl_fts_close+E2↓j
.text:0000000000008476                                         ; rpl_fts_close+FA↓j ...
.text:0000000000008476                 xor     ebx, ebx
.text:0000000000008478
.text:0000000000008478 loc_8478:                               ; CODE XREF: rpl_fts_close+124↓j
.text:0000000000008478                                         ; rpl_fts_close+154↓j ...
.text:0000000000008478                 lea     rdi, [rbp+60h]
.text:000000000000847C                 call    fd_ring_clear
.text:0000000000008481                 mov     rdi, [rbp+50h]  ; ptr
.text:0000000000008485                 test    rdi, rdi
.text:0000000000008488                 jz      short loc_848F
.text:000000000000848A                 call    hash_free
.text:000000000000848F
.text:000000000000848F loc_848F:                               ; CODE XREF: rpl_fts_close+98↑j
.text:000000000000848F                 test    dword ptr [rbp+48h], 102h
.text:0000000000008496                 mov     rdi, [rbp+58h]  ; ptr
.text:000000000000849A                 jz      short loc_84C0
.text:000000000000849C                 test    rdi, rdi
.text:000000000000849F                 jz      short loc_84A6
.text:00000000000084A1                 call    hash_free
.text:00000000000084A6
.text:00000000000084A6 loc_84A6:                               ; CODE XREF: rpl_fts_close+AF↑j
.text:00000000000084A6                                         ; rpl_fts_close+D5↓j
.text:00000000000084A6                 mov     rdi, rbp        ; ptr
.text:00000000000084A9                 call    free
.text:00000000000084AE                 test    ebx, ebx
.text:00000000000084B0                 jnz     loc_8561
.text:00000000000084B6
.text:00000000000084B6 loc_84B6:                               ; CODE XREF: rpl_fts_close+17D↓j
.text:00000000000084B6                 mov     eax, ebx
.text:00000000000084B8                 pop     rbx
.text:00000000000084B9                 pop     rbp
.text:00000000000084BA                 pop     r12
.text:00000000000084BC                 retn
.text:00000000000084BC ; ---------------------------------------------------------------------------
.text:00000000000084BD                 align 20h
.text:00000000000084C0
.text:00000000000084C0 loc_84C0:                               ; CODE XREF: rpl_fts_close+AA↑j
.text:00000000000084C0                 call    free
.text:00000000000084C5                 jmp     short loc_84A6
.text:00000000000084C5 ; ---------------------------------------------------------------------------
.text:00000000000084C7                 align 10h
.text:00000000000084D0
.text:00000000000084D0 loc_84D0:                               ; CODE XREF: rpl_fts_close+79↑j
.text:00000000000084D0                 test    al, 4
.text:00000000000084D2                 jnz     short loc_8476
.text:00000000000084D4                 mov     edi, [rbp+28h]  ; fd
.text:00000000000084D7                 call    _fchdir
.text:00000000000084DC                 test    eax, eax
.text:00000000000084DE                 jnz     short loc_8530
.text:00000000000084E0                 mov     edi, [rbp+28h]  ; fd
.text:00000000000084E3                 call    _close
.text:00000000000084E8                 test    eax, eax
.text:00000000000084EA                 jz      short loc_8476
.text:00000000000084EC                 call    ___errno_location
.text:00000000000084F1                 mov     r12, rax
.text:00000000000084F4                 jmp     short loc_8558
.text:00000000000084F4 ; ---------------------------------------------------------------------------
.text:00000000000084F6                 align 20h
.text:0000000000008500
.text:0000000000008500 loc_8500:                               ; CODE XREF: rpl_fts_close+80↑j
.text:0000000000008500                 call    _close
.text:0000000000008505                 test    eax, eax
.text:0000000000008507                 jz      loc_8476
.text:000000000000850D                 call    ___errno_location
.text:0000000000008512                 mov     ebx, [rax]
.text:0000000000008514                 jmp     loc_8478
.text:0000000000008514 ; ---------------------------------------------------------------------------
.text:0000000000008519                 align 20h
.text:0000000000008520
.text:0000000000008520 loc_8520:                               ; CODE XREF: rpl_fts_close+16↑j
.text:0000000000008520                 mov     rbx, rdi
.text:0000000000008523                 mov     rdi, rbx        ; ptr
.text:0000000000008526                 call    free
.text:000000000000852B                 jmp     loc_8443
.text:0000000000008530 ; ---------------------------------------------------------------------------
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: rpl_fts_close+EE↑j
.text:0000000000008530                 call    ___errno_location
.text:0000000000008535                 mov     edi, [rbp+28h]  ; fd
.text:0000000000008538                 mov     r12, rax
.text:000000000000853B                 mov     ebx, [rax]
.text:000000000000853D                 call    _close
.text:0000000000008542                 test    eax, eax
.text:0000000000008544                 jz      loc_8478
.text:000000000000854A                 test    ebx, ebx
.text:000000000000854C                 jnz     loc_8478
.text:0000000000008552                 nop     word ptr [rax+rax+00h]
.text:0000000000008558
.text:0000000000008558 loc_8558:                               ; CODE XREF: rpl_fts_close+104↑j
.text:0000000000008558                 mov     ebx, [r12]
.text:000000000000855C                 jmp     loc_8478
.text:0000000000008561 ; ---------------------------------------------------------------------------
.text:0000000000008561
.text:0000000000008561 loc_8561:                               ; CODE XREF: rpl_fts_close+C0↑j
.text:0000000000008561                 call    ___errno_location
.text:0000000000008566                 mov     [rax], ebx
.text:0000000000008568                 mov     ebx, 0FFFFFFFFh
.text:000000000000856D                 jmp     loc_84B6
.text:000000000000856D ; } // starts at 83F0
.text:000000000000856D rpl_fts_close   endp
.text:000000000000856D
.text:000000000000856D ; ---------------------------------------------------------------------------
.text:0000000000008572                 align 20h
.text:0000000000008580
.text:0000000000008580 ; =============== S U B R O U T I N E =======================================
.text:0000000000008580
.text:0000000000008580
.text:0000000000008580                 public rpl_fts_read
.text:0000000000008580 rpl_fts_read    proc near               ; CODE XREF: change_file_owner+3F5↑p
.text:0000000000008580                                         ; chown_files+75↑p
.text:0000000000008580 ; __unwind {
.text:0000000000008580                 push    r14
.text:0000000000008582                 push    r13
.text:0000000000008584                 push    r12
.text:0000000000008586                 push    rbp
.text:0000000000008587                 push    rbx
.text:0000000000008588                 mov     rbp, [rdi]
.text:000000000000858B                 test    rbp, rbp
.text:000000000000858E                 jz      loc_869E
.text:0000000000008594                 mov     edx, [rdi+48h]
.text:0000000000008597                 test    dh, 20h
.text:000000000000859A                 jnz     loc_869E
.text:00000000000085A0                 movzx   eax, word ptr [rbp+74h]
.text:00000000000085A4                 mov     ebx, 3
.text:00000000000085A9                 mov     r12, rdi
.text:00000000000085AC                 mov     [rbp+74h], bx
.text:00000000000085B0                 cmp     ax, 1
.text:00000000000085B4                 jz      loc_8800
.text:00000000000085BA                 cmp     ax, 2
.text:00000000000085BE                 movzx   ecx, word ptr [rbp+70h]
.text:00000000000085C2                 jz      loc_86B0
.text:00000000000085C8                 cmp     cx, 1
.text:00000000000085CC                 jnz     short loc_8600
.text:00000000000085CE                 jmp     loc_87F0
.text:00000000000085CE ; ---------------------------------------------------------------------------
.text:00000000000085D3                 align 8
.text:00000000000085D8
.text:00000000000085D8 loc_85D8:                               ; CODE XREF: rpl_fts_read+87↓j
.text:00000000000085D8                 mov     [r12], rbx
.text:00000000000085DC                 mov     rdi, rbp        ; ptr
.text:00000000000085DF                 call    free
.text:00000000000085E4                 cmp     qword ptr [rbx+58h], 0
.text:00000000000085E9                 jz      loc_8820
.text:00000000000085EF                 movzx   eax, word ptr [rbx+74h]
.text:00000000000085F3                 mov     rbp, rbx
.text:00000000000085F6                 cmp     ax, 4
.text:00000000000085FA                 jnz     loc_8928
.text:0000000000008600
.text:0000000000008600 loc_8600:                               ; CODE XREF: rpl_fts_read+4C↑j
.text:0000000000008600                                         ; rpl_fts_read+13D↓j
.text:0000000000008600                 mov     rbx, [rbp+10h]
.text:0000000000008604                 test    rbx, rbx
.text:0000000000008607                 jnz     short loc_85D8
.text:0000000000008609                 mov     rbx, [rbp+8]
.text:000000000000860D                 cmp     qword ptr [rbx+18h], 0
.text:0000000000008612                 jnz     loc_8B80
.text:0000000000008618
.text:0000000000008618 loc_8618:                               ; CODE XREF: rpl_fts_read+688↓j
.text:0000000000008618                 mov     [r12], rbx
.text:000000000000861C                 mov     rdi, rbp        ; ptr
.text:000000000000861F                 call    free
.text:0000000000008624                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:0000000000008629                 jz      loc_8AE2
.text:000000000000862F                 cmp     word ptr [rbx+70h], 0Bh
.text:0000000000008634                 jz      loc_876F
.text:000000000000863A                 mov     rdx, [r12+20h]
.text:000000000000863F                 mov     rax, [rbx+48h]
.text:0000000000008643                 mov     byte ptr [rdx+rax], 0
.text:0000000000008647                 cmp     qword ptr [rbx+58h], 0
.text:000000000000864C                 jz      loc_8A10
.text:0000000000008652                 movzx   eax, word ptr [rbx+72h]
.text:0000000000008656                 test    al, 2
.text:0000000000008658                 jz      loc_89C8
.text:000000000000865E                 mov     eax, [r12+48h]
.text:0000000000008663                 mov     edi, [rbx+44h]  ; fd
.text:0000000000008666                 test    al, 4
.text:0000000000008668                 jz      loc_8A6C
.text:000000000000866E
.text:000000000000866E loc_866E:                               ; CODE XREF: rpl_fts_read+507↓j
.text:000000000000866E                                         ; rpl_fts_read+6AC↓j
.text:000000000000866E                 call    _close
.text:0000000000008673
.text:0000000000008673 loc_8673:                               ; CODE XREF: rpl_fts_read+44A↓j
.text:0000000000008673                                         ; rpl_fts_read+46A↓j ...
.text:0000000000008673                 mov     edi, [r12+48h]
.text:0000000000008678
.text:0000000000008678 loc_8678:                               ; CODE XREF: rpl_fts_read+48A↓j
.text:0000000000008678                 cmp     word ptr [rbx+70h], 2
.text:000000000000867D                 jz      short loc_8693
.text:000000000000867F                 mov     ecx, [rbx+40h]
.text:0000000000008682                 test    ecx, ecx
.text:0000000000008684                 jz      loc_8A28
.text:000000000000868A                 mov     edx, 7
.text:000000000000868F                 mov     [rbx+70h], dx
.text:0000000000008693
.text:0000000000008693 loc_8693:                               ; CODE XREF: rpl_fts_read+FD↑j
.text:0000000000008693                                         ; rpl_fts_read+4C3↓j
.text:0000000000008693                 and     edi, 2000h
.text:0000000000008699                 mov     rbp, rbx
.text:000000000000869C                 jz      short loc_871A
.text:000000000000869E
.text:000000000000869E loc_869E:                               ; CODE XREF: rpl_fts_read+E↑j
.text:000000000000869E                                         ; rpl_fts_read+1A↑j ...
.text:000000000000869E                 xor     ebp, ebp
.text:00000000000086A0                 pop     rbx
.text:00000000000086A1                 mov     rax, rbp
.text:00000000000086A4                 pop     rbp
.text:00000000000086A5                 pop     r12
.text:00000000000086A7                 pop     r13
.text:00000000000086A9                 pop     r14
.text:00000000000086AB                 retn
.text:00000000000086AB ; ---------------------------------------------------------------------------
.text:00000000000086AC                 align 10h
.text:00000000000086B0
.text:00000000000086B0 loc_86B0:                               ; CODE XREF: rpl_fts_read+42↑j
.text:00000000000086B0                 lea     eax, [rcx-0Ch]
.text:00000000000086B3                 cmp     ax, 1
.text:00000000000086B7                 jbe     short loc_8730
.text:00000000000086B9                 cmp     cx, 1
.text:00000000000086BD                 jnz     loc_8600
.text:00000000000086C3
.text:00000000000086C3 loc_86C3:                               ; CODE XREF: rpl_fts_read+274↓j
.text:00000000000086C3                 test    dl, 40h
.text:00000000000086C6                 jz      loc_8778
.text:00000000000086CC                 mov     rax, [r12+18h]
.text:00000000000086D1                 cmp     [rbp+78h], rax
.text:00000000000086D5                 jz      loc_8778
.text:00000000000086DB
.text:00000000000086DB loc_86DB:                               ; CODE XREF: rpl_fts_read+27A↓j
.text:00000000000086DB                 test    byte ptr [rbp+72h], 2
.text:00000000000086DF                 jnz     loc_8BC0
.text:00000000000086E5
.text:00000000000086E5 loc_86E5:                               ; CODE XREF: rpl_fts_read+648↓j
.text:00000000000086E5                 mov     rdi, [r12+8]    ; ptr
.text:00000000000086EA                 test    rdi, rdi
.text:00000000000086ED                 jz      short loc_86FD
.text:00000000000086EF                 call    fts_lfree
.text:00000000000086F4                 mov     qword ptr [r12+8], 0
.text:00000000000086FD
.text:00000000000086FD loc_86FD:                               ; CODE XREF: rpl_fts_read+16D↑j
.text:00000000000086FD                 mov     edi, [r12+48h]
.text:0000000000008702                 mov     r10d, 6
.text:0000000000008708                 lea     rsi, [r12+58h]
.text:000000000000870D                 mov     [rbp+70h], r10w
.text:0000000000008712                 mov     rdx, rbp
.text:0000000000008715                 call    leave_dir_isra_12
.text:000000000000871A
.text:000000000000871A loc_871A:                               ; CODE XREF: rpl_fts_read+11C↑j
.text:000000000000871A                                         ; rpl_fts_read+1D3↓j ...
.text:000000000000871A                 pop     rbx
.text:000000000000871B                 mov     rax, rbp
.text:000000000000871E                 pop     rbp
.text:000000000000871F                 pop     r12
.text:0000000000008721                 pop     r13
.text:0000000000008723                 pop     r14
.text:0000000000008725                 retn
.text:0000000000008725 ; ---------------------------------------------------------------------------
.text:0000000000008726                 align 10h
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: rpl_fts_read+137↑j
.text:0000000000008730                 mov     edx, 1
.text:0000000000008735                 mov     rsi, rbp
.text:0000000000008738                 call    fts_stat
.text:000000000000873D                 cmp     ax, 1
.text:0000000000008741                 mov     [rbp+70h], ax
.text:0000000000008745                 jz      loc_8A8C
.text:000000000000874B                 cmp     ax, 0Bh
.text:000000000000874F                 mov     [r12], rbp
.text:0000000000008753                 jnz     short loc_871A
.text:0000000000008755                 nop     dword ptr [rax]
.text:0000000000008758
.text:0000000000008758 loc_8758:                               ; CODE XREF: rpl_fts_read+356↓j
.text:0000000000008758                 mov     rax, [rbp+0A8h]
.text:000000000000875F                 cmp     rax, 2
.text:0000000000008763                 jz      loc_8B08
.text:0000000000008769                 cmp     rax, 1
.text:000000000000876D                 jz      short loc_871A
.text:000000000000876F
.text:000000000000876F loc_876F:                               ; CODE XREF: rpl_fts_read+B4↑j
.text:000000000000876F                 call    _abort
.text:000000000000876F ; ---------------------------------------------------------------------------
.text:0000000000008774                 align 8
.text:0000000000008778
.text:0000000000008778 loc_8778:                               ; CODE XREF: rpl_fts_read+146↑j
.text:0000000000008778                                         ; rpl_fts_read+155↑j
.text:0000000000008778                 mov     rdi, [r12+8]    ; ptr
.text:000000000000877D                 test    rdi, rdi
.text:0000000000008780                 jz      loc_8998
.text:0000000000008786                 test    dh, 10h
.text:0000000000008789                 jnz     loc_8982
.text:000000000000878F                 mov     rcx, [rbp+30h]
.text:0000000000008793                 mov     edx, 0FFFFFFFFh
.text:0000000000008798                 mov     rsi, rbp
.text:000000000000879B                 mov     rdi, r12
.text:000000000000879E                 call    fts_safe_changedir
.text:00000000000087A3                 test    eax, eax
.text:00000000000087A5                 jz      loc_8A62
.text:00000000000087AB                 call    ___errno_location
.text:00000000000087B0                 mov     eax, [rax]
.text:00000000000087B2                 or      word ptr [rbp+72h], 1
.text:00000000000087B7                 mov     [rbp+40h], eax
.text:00000000000087BA                 mov     rbp, [r12+8]
.text:00000000000087BF                 test    rbp, rbp
.text:00000000000087C2                 jz      loc_89B6
.text:00000000000087C8                 mov     rax, rbp
.text:00000000000087CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000087D0
.text:00000000000087D0 loc_87D0:                               ; CODE XREF: rpl_fts_read+263↓j
.text:00000000000087D0                 mov     rdx, [rax+8]
.text:00000000000087D4                 mov     rdx, [rdx+30h]
.text:00000000000087D8                 mov     [rax+30h], rdx
.text:00000000000087DC                 mov     rax, [rax+10h]
.text:00000000000087E0                 test    rax, rax
.text:00000000000087E3                 jnz     short loc_87D0
.text:00000000000087E5                 jmp     loc_89B6
.text:00000000000087E5 ; ---------------------------------------------------------------------------
.text:00000000000087EA                 align 10h
.text:00000000000087F0
.text:00000000000087F0 loc_87F0:                               ; CODE XREF: rpl_fts_read+4E↑j
.text:00000000000087F0                 cmp     ax, 4
.text:00000000000087F4                 jnz     loc_86C3
.text:00000000000087FA                 jmp     loc_86DB
.text:00000000000087FA ; ---------------------------------------------------------------------------
.text:00000000000087FF                 align 20h
.text:0000000000008800
.text:0000000000008800 loc_8800:                               ; CODE XREF: rpl_fts_read+34↑j
.text:0000000000008800                 mov     rsi, rbp
.text:0000000000008803                 xor     edx, edx
.text:0000000000008805                 call    fts_stat
.text:000000000000880A                 mov     [rbp+70h], ax
.text:000000000000880E                 mov     rax, rbp
.text:0000000000008811                 pop     rbx
.text:0000000000008812                 pop     rbp
.text:0000000000008813                 pop     r12
.text:0000000000008815                 pop     r13
.text:0000000000008817                 pop     r14
.text:0000000000008819                 retn
.text:0000000000008819 ; ---------------------------------------------------------------------------
.text:000000000000881A                 align 20h
.text:0000000000008820
.text:0000000000008820 loc_8820:                               ; CODE XREF: rpl_fts_read+69↑j
.text:0000000000008820                 mov     rdi, r12
.text:0000000000008823                 call    restore_initial_cwd
.text:0000000000008828                 test    eax, eax
.text:000000000000882A                 jnz     loc_8C31
.text:0000000000008830                 test    dword ptr [r12+48h], 102h
.text:0000000000008839                 mov     rdi, [r12+58h]  ; ptr
.text:000000000000883E                 jz      loc_8978
.text:0000000000008844                 test    rdi, rdi
.text:0000000000008847                 jz      short loc_884E
.text:0000000000008849                 call    hash_free
.text:000000000000884E
.text:000000000000884E loc_884E:                               ; CODE XREF: rpl_fts_read+2C7↑j
.text:000000000000884E                                         ; rpl_fts_read+3FD↓j
.text:000000000000884E                 mov     rdx, [rbx+60h]
.text:0000000000008852                 lea     rbp, [rbx+108h]
.text:0000000000008859                 mov     rdi, [r12+20h]  ; dest
.text:000000000000885E                 mov     rsi, rbp        ; src
.text:0000000000008861                 mov     [rbx+48h], rdx
.text:0000000000008865                 add     rdx, 1          ; n
.text:0000000000008869                 call    _memmove
.text:000000000000886E                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000008873                 mov     rdi, rbp        ; s
.text:0000000000008876                 call    _strrchr
.text:000000000000887B                 test    rax, rax
.text:000000000000887E                 jz      short loc_88AB
.text:0000000000008880                 cmp     rbp, rax
.text:0000000000008883                 jz      loc_8A50
.text:0000000000008889
.text:0000000000008889 loc_8889:                               ; CODE XREF: rpl_fts_read+4D7↓j
.text:0000000000008889                 lea     r13, [rax+1]
.text:000000000000888D                 mov     rdi, r13        ; s
.text:0000000000008890                 call    _strlen
.text:0000000000008895                 lea     rdx, [rax+1]    ; n
.text:0000000000008899                 mov     r14, rax
.text:000000000000889C                 mov     rsi, r13        ; src
.text:000000000000889F                 mov     rdi, rbp        ; dest
.text:00000000000088A2                 call    _memmove
.text:00000000000088A7                 mov     [rbx+60h], r14
.text:00000000000088AB
.text:00000000000088AB loc_88AB:                               ; CODE XREF: rpl_fts_read+2FE↑j
.text:00000000000088AB                                         ; rpl_fts_read+4DD↓j
.text:00000000000088AB                 mov     rax, [r12+20h]
.text:00000000000088B0                 mov     edi, [r12+48h]
.text:00000000000088B5                 lea     rsi, [r12+58h]
.text:00000000000088BA                 mov     rbp, rbx
.text:00000000000088BD                 mov     [rbx+38h], rax
.text:00000000000088C1                 mov     [rbx+30h], rax
.text:00000000000088C5                 call    setup_dir_isra_4
.text:00000000000088CA                 movzx   eax, word ptr [rbx+70h]
.text:00000000000088CE
.text:00000000000088CE loc_88CE:                               ; CODE XREF: rpl_fts_read+3EF↓j
.text:00000000000088CE                                         ; rpl_fts_read+73D↓j
.text:00000000000088CE                 cmp     ax, 0Bh
.text:00000000000088D2                 mov     [r12], rbp
.text:00000000000088D6                 jz      loc_8758
.text:00000000000088DC
.text:00000000000088DC loc_88DC:                               ; CODE XREF: rpl_fts_read+5C7↓j
.text:00000000000088DC                                         ; rpl_fts_read+717↓j
.text:00000000000088DC                 cmp     ax, 1
.text:00000000000088E0                 jnz     loc_871A
.text:00000000000088E6
.text:00000000000088E6 loc_88E6:                               ; CODE XREF: rpl_fts_read+51F↓j
.text:00000000000088E6                 cmp     qword ptr [rbp+58h], 0
.text:00000000000088EB                 jnz     short loc_88F6
.text:00000000000088ED
.text:00000000000088ED loc_88ED:                               ; CODE XREF: rpl_fts_read+6F8↓j
.text:00000000000088ED                 mov     rax, [rbp+78h]
.text:00000000000088F1                 mov     [r12+18h], rax
.text:00000000000088F6
.text:00000000000088F6 loc_88F6:                               ; CODE XREF: rpl_fts_read+36B↑j
.text:00000000000088F6                                         ; rpl_fts_read+5F4↓j
.text:00000000000088F6                 mov     edi, [r12+48h]
.text:00000000000088FB                 lea     rsi, [r12+58h]
.text:0000000000008900                 mov     rdx, rbp
.text:0000000000008903                 call    enter_dir_isra_10
.text:0000000000008908                 test    al, al
.text:000000000000890A                 jnz     loc_871A
.text:0000000000008910                 call    ___errno_location
.text:0000000000008915                 xor     ebp, ebp
.text:0000000000008917                 mov     dword ptr [rax], 0Ch
.text:000000000000891D                 jmp     loc_871A
.text:000000000000891D ; ---------------------------------------------------------------------------
.text:0000000000008922                 align 8
.text:0000000000008928
.text:0000000000008928 loc_8928:                               ; CODE XREF: rpl_fts_read+7A↑j
.text:0000000000008928                 cmp     ax, 2
.text:000000000000892C                 jz      loc_8BCD
.text:0000000000008932
.text:0000000000008932 loc_8932:                               ; CODE XREF: rpl_fts_read+43F↓j
.text:0000000000008932                                         ; rpl_fts_read+631↓j ...
.text:0000000000008932                 mov     rax, [rbp+8]
.text:0000000000008936                 lea     rsi, [rbp+108h] ; src
.text:000000000000893D                 mov     rdi, [rax+48h]
.text:0000000000008941                 mov     rax, [rax+38h]
.text:0000000000008945                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:000000000000894A                 lea     rdx, [rdi-1]
.text:000000000000894E                 cmovz   rdi, rdx
.text:0000000000008952                 add     rdi, [r12+20h]
.text:0000000000008957                 mov     byte ptr [rdi], 2Fh ; '/'
.text:000000000000895A                 mov     rax, [rbp+60h]
.text:000000000000895E                 add     rdi, 1          ; dest
.text:0000000000008962                 lea     rdx, [rax+1]    ; n
.text:0000000000008966                 call    _memmove
.text:000000000000896B                 movzx   eax, word ptr [rbp+70h]
.text:000000000000896F                 jmp     loc_88CE
.text:000000000000896F ; ---------------------------------------------------------------------------
.text:0000000000008974                 align 8
.text:0000000000008978
.text:0000000000008978 loc_8978:                               ; CODE XREF: rpl_fts_read+2BE↑j
.text:0000000000008978                 call    free
.text:000000000000897D                 jmp     loc_884E
.text:0000000000008982 ; ---------------------------------------------------------------------------
.text:0000000000008982
.text:0000000000008982 loc_8982:                               ; CODE XREF: rpl_fts_read+209↑j
.text:0000000000008982                 and     dh, 0EFh
.text:0000000000008985                 mov     [r12+48h], edx
.text:000000000000898A                 call    fts_lfree
.text:000000000000898F                 mov     qword ptr [r12+8], 0
.text:0000000000008998
.text:0000000000008998 loc_8998:                               ; CODE XREF: rpl_fts_read+200↑j
.text:0000000000008998                 mov     esi, 3
.text:000000000000899D                 mov     rdi, r12
.text:00000000000089A0                 call    fts_build
.text:00000000000089A5                 test    rax, rax
.text:00000000000089A8                 mov     [r12+8], rax
.text:00000000000089AD                 jz      loc_8AA4
.text:00000000000089B3                 mov     rbp, rax
.text:00000000000089B6
.text:00000000000089B6 loc_89B6:                               ; CODE XREF: rpl_fts_read+242↑j
.text:00000000000089B6                                         ; rpl_fts_read+265↑j ...
.text:00000000000089B6                 mov     qword ptr [r12+8], 0
.text:00000000000089BF                 jmp     loc_8932
.text:00000000000089BF ; ---------------------------------------------------------------------------
.text:00000000000089C4                 align 8
.text:00000000000089C8
.text:00000000000089C8 loc_89C8:                               ; CODE XREF: rpl_fts_read+D8↑j
.text:00000000000089C8                 test    al, 1
.text:00000000000089CA                 jnz     loc_8673
.text:00000000000089D0                 mov     rsi, [rbx+8]
.text:00000000000089D4                 lea     rcx, asc_C4C9   ; ".."
.text:00000000000089DB                 mov     edx, 0FFFFFFFFh
.text:00000000000089E0                 mov     rdi, r12
.text:00000000000089E3                 call    fts_safe_changedir
.text:00000000000089E8                 test    eax, eax
.text:00000000000089EA                 jz      loc_8673
.text:00000000000089F0
.text:00000000000089F0 loc_89F0:                               ; CODE XREF: rpl_fts_read+49A↓j
.text:00000000000089F0                 call    ___errno_location
.text:00000000000089F5                 mov     edi, [r12+48h]
.text:00000000000089FA                 mov     eax, [rax]
.text:00000000000089FC                 or      edi, 2000h
.text:0000000000008A02                 mov     [rbx+40h], eax
.text:0000000000008A05                 mov     [r12+48h], edi
.text:0000000000008A0A                 jmp     loc_8678
.text:0000000000008A0A ; ---------------------------------------------------------------------------
.text:0000000000008A0F                 align 10h
.text:0000000000008A10
.text:0000000000008A10 loc_8A10:                               ; CODE XREF: rpl_fts_read+CC↑j
.text:0000000000008A10                 mov     rdi, r12
.text:0000000000008A13                 call    restore_initial_cwd
.text:0000000000008A18                 test    eax, eax
.text:0000000000008A1A                 jnz     short loc_89F0
.text:0000000000008A1C                 jmp     loc_8673
.text:0000000000008A1C ; ---------------------------------------------------------------------------
.text:0000000000008A21                 align 8
.text:0000000000008A28
.text:0000000000008A28 loc_8A28:                               ; CODE XREF: rpl_fts_read+104↑j
.text:0000000000008A28                 mov     eax, 6
.text:0000000000008A2D                 lea     rsi, [r12+58h]
.text:0000000000008A32                 mov     rdx, rbx
.text:0000000000008A35                 mov     [rbx+70h], ax
.text:0000000000008A39                 call    leave_dir_isra_12
.text:0000000000008A3E                 mov     edi, [r12+48h]
.text:0000000000008A43                 jmp     loc_8693
.text:0000000000008A43 ; ---------------------------------------------------------------------------
.text:0000000000008A48                 align 10h
.text:0000000000008A50
.text:0000000000008A50 loc_8A50:                               ; CODE XREF: rpl_fts_read+303↑j
.text:0000000000008A50                 cmp     byte ptr [rbx+109h], 0
.text:0000000000008A57                 jnz     loc_8889
.text:0000000000008A5D                 jmp     loc_88AB
.text:0000000000008A62 ; ---------------------------------------------------------------------------
.text:0000000000008A62
.text:0000000000008A62 loc_8A62:                               ; CODE XREF: rpl_fts_read+225↑j
.text:0000000000008A62                 mov     rbp, [r12+8]
.text:0000000000008A67                 jmp     loc_89B6
.text:0000000000008A6C ; ---------------------------------------------------------------------------
.text:0000000000008A6C
.text:0000000000008A6C loc_8A6C:                               ; CODE XREF: rpl_fts_read+E8↑j
.text:0000000000008A6C                 test    ah, 2
.text:0000000000008A6F                 jz      loc_8C0D
.text:0000000000008A75                 mov     esi, edi
.text:0000000000008A77                 mov     edx, 1
.text:0000000000008A7C                 mov     rdi, r12
.text:0000000000008A7F                 call    cwd_advance_fd
.text:0000000000008A84                 mov     edi, [rbx+44h]
.text:0000000000008A87                 jmp     loc_866E
.text:0000000000008A8C ; ---------------------------------------------------------------------------
.text:0000000000008A8C
.text:0000000000008A8C loc_8A8C:                               ; CODE XREF: rpl_fts_read+1C5↑j
.text:0000000000008A8C                 mov     esi, [r12+48h]
.text:0000000000008A91                 test    sil, 4
.text:0000000000008A95                 jz      loc_8C9C
.text:0000000000008A9B                 mov     [r12], rbp
.text:0000000000008A9F                 jmp     loc_88E6
.text:0000000000008AA4 ; ---------------------------------------------------------------------------
.text:0000000000008AA4
.text:0000000000008AA4 loc_8AA4:                               ; CODE XREF: rpl_fts_read+42D↑j
.text:0000000000008AA4                 mov     edi, [r12+48h]
.text:0000000000008AA9                 test    edi, 2000h
.text:0000000000008AAF                 jnz     loc_869E
.text:0000000000008AB5                 mov     r9d, [rbp+40h]
.text:0000000000008AB9                 test    r9d, r9d
.text:0000000000008ABC                 jz      short loc_8AD0
.text:0000000000008ABE                 cmp     word ptr [rbp+70h], 4
.text:0000000000008AC3                 jz      short loc_8AD0
.text:0000000000008AC5                 mov     r8d, 7
.text:0000000000008ACB                 mov     [rbp+70h], r8w
.text:0000000000008AD0
.text:0000000000008AD0 loc_8AD0:                               ; CODE XREF: rpl_fts_read+53C↑j
.text:0000000000008AD0                                         ; rpl_fts_read+543↑j
.text:0000000000008AD0                 lea     rsi, [r12+58h]
.text:0000000000008AD5                 mov     rdx, rbp
.text:0000000000008AD8                 call    leave_dir_isra_12
.text:0000000000008ADD                 jmp     loc_871A
.text:0000000000008AE2 ; ---------------------------------------------------------------------------
.text:0000000000008AE2
.text:0000000000008AE2 loc_8AE2:                               ; CODE XREF: rpl_fts_read+A9↑j
.text:0000000000008AE2                 mov     rdi, rbx        ; ptr
.text:0000000000008AE5                 xor     ebp, ebp
.text:0000000000008AE7                 call    free
.text:0000000000008AEC                 call    ___errno_location
.text:0000000000008AF1                 mov     dword ptr [rax], 0
.text:0000000000008AF7                 mov     qword ptr [r12], 0
.text:0000000000008AFF                 jmp     loc_871A
.text:0000000000008AFF ; ---------------------------------------------------------------------------
.text:0000000000008B04                 align 8
.text:0000000000008B08
.text:0000000000008B08 loc_8B08:                               ; CODE XREF: rpl_fts_read+1E3↑j
.text:0000000000008B08                 mov     rbx, [rbp+8]
.text:0000000000008B0C                 cmp     qword ptr [rbx+68h], 0
.text:0000000000008B11                 jnz     short loc_8B24
.text:0000000000008B13                 mov     eax, [r12+48h]
.text:0000000000008B18                 and     eax, 18h
.text:0000000000008B1B                 cmp     eax, 18h
.text:0000000000008B1E                 jz      loc_8C7D
.text:0000000000008B24
.text:0000000000008B24 loc_8B24:                               ; CODE XREF: rpl_fts_read+591↑j
.text:0000000000008B24                                         ; rpl_fts_read+70D↓j
.text:0000000000008B24                 xor     edx, edx
.text:0000000000008B26                 mov     rsi, rbp
.text:0000000000008B29                 mov     rdi, r12
.text:0000000000008B2C                 call    fts_stat
.text:0000000000008B31                 mov     edx, [rbp+90h]
.text:0000000000008B37                 mov     [rbp+70h], ax
.text:0000000000008B3B                 and     edx, 0F000h
.text:0000000000008B41                 cmp     edx, 4000h
.text:0000000000008B47                 jnz     loc_88DC
.text:0000000000008B4D                 cmp     qword ptr [rbp+58h], 0
.text:0000000000008B52                 jz      loc_8C6E
.text:0000000000008B58                 mov     rcx, [rbx+68h]
.text:0000000000008B5C                 lea     rdx, [rcx-1]
.text:0000000000008B60                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:0000000000008B64                 ja      short loc_8B6A
.text:0000000000008B66                 mov     [rbx+68h], rdx
.text:0000000000008B6A
.text:0000000000008B6A loc_8B6A:                               ; CODE XREF: rpl_fts_read+5E4↑j
.text:0000000000008B6A                 cmp     ax, 1
.text:0000000000008B6E                 jnz     loc_871A
.text:0000000000008B74                 jmp     loc_88F6
.text:0000000000008B74 ; ---------------------------------------------------------------------------
.text:0000000000008B79                 align 20h
.text:0000000000008B80
.text:0000000000008B80 loc_8B80:                               ; CODE XREF: rpl_fts_read+92↑j
.text:0000000000008B80                 mov     rax, [rbx+48h]
.text:0000000000008B84                 mov     rdx, [r12+20h]
.text:0000000000008B89                 mov     esi, 3
.text:0000000000008B8E                 mov     [r12], rbx
.text:0000000000008B92                 mov     rdi, r12
.text:0000000000008B95                 mov     byte ptr [rdx+rax], 0
.text:0000000000008B99                 call    fts_build
.text:0000000000008B9E                 test    rax, rax
.text:0000000000008BA1                 mov     rbx, rax
.text:0000000000008BA4                 jz      short loc_8BF8
.text:0000000000008BA6                 mov     rdi, rbp        ; ptr
.text:0000000000008BA9                 mov     rbp, rbx
.text:0000000000008BAC                 call    free
.text:0000000000008BB1                 jmp     loc_8932
.text:0000000000008BB1 ; ---------------------------------------------------------------------------
.text:0000000000008BB6                 align 20h
.text:0000000000008BC0
.text:0000000000008BC0 loc_8BC0:                               ; CODE XREF: rpl_fts_read+15F↑j
.text:0000000000008BC0                 mov     edi, [rbp+44h]  ; fd
.text:0000000000008BC3                 call    _close
.text:0000000000008BC8                 jmp     loc_86E5
.text:0000000000008BCD ; ---------------------------------------------------------------------------
.text:0000000000008BCD
.text:0000000000008BCD loc_8BCD:                               ; CODE XREF: rpl_fts_read+3AC↑j
.text:0000000000008BCD                 mov     edx, 1
.text:0000000000008BD2                 mov     rsi, rbx
.text:0000000000008BD5                 mov     rdi, r12
.text:0000000000008BD8                 call    fts_stat
.text:0000000000008BDD                 cmp     ax, 1
.text:0000000000008BE1                 mov     [rbx+70h], ax
.text:0000000000008BE5                 jz      short loc_8C41
.text:0000000000008BE7
.text:0000000000008BE7 loc_8BE7:                               ; CODE XREF: rpl_fts_read+6CA↓j
.text:0000000000008BE7                                         ; rpl_fts_read+6E9↓j ...
.text:0000000000008BE7                 mov     esi, 3
.text:0000000000008BEC                 mov     rbp, rbx
.text:0000000000008BEF                 mov     [rbx+74h], si
.text:0000000000008BF3                 jmp     loc_8932
.text:0000000000008BF8 ; ---------------------------------------------------------------------------
.text:0000000000008BF8
.text:0000000000008BF8 loc_8BF8:                               ; CODE XREF: rpl_fts_read+624↑j
.text:0000000000008BF8                 test    byte ptr [r12+49h], 20h
.text:0000000000008BFE                 jnz     loc_869E
.text:0000000000008C04                 mov     rbx, [rbp+8]
.text:0000000000008C08                 jmp     loc_8618
.text:0000000000008C0D ; ---------------------------------------------------------------------------
.text:0000000000008C0D
.text:0000000000008C0D loc_8C0D:                               ; CODE XREF: rpl_fts_read+4EF↑j
.text:0000000000008C0D                 call    _fchdir
.text:0000000000008C12                 test    eax, eax
.text:0000000000008C14                 jz      short loc_8C29
.text:0000000000008C16                 call    ___errno_location
.text:0000000000008C1B                 mov     eax, [rax]
.text:0000000000008C1D                 mov     [rbx+40h], eax
.text:0000000000008C20                 or      dword ptr [r12+48h], 2000h
.text:0000000000008C29
.text:0000000000008C29 loc_8C29:                               ; CODE XREF: rpl_fts_read+694↑j
.text:0000000000008C29                 mov     edi, [rbx+44h]
.text:0000000000008C2C                 jmp     loc_866E
.text:0000000000008C31 ; ---------------------------------------------------------------------------
.text:0000000000008C31
.text:0000000000008C31 loc_8C31:                               ; CODE XREF: rpl_fts_read+2AA↑j
.text:0000000000008C31                 or      dword ptr [r12+48h], 2000h
.text:0000000000008C3A                 xor     ebp, ebp
.text:0000000000008C3C                 jmp     loc_871A
.text:0000000000008C41 ; ---------------------------------------------------------------------------
.text:0000000000008C41
.text:0000000000008C41 loc_8C41:                               ; CODE XREF: rpl_fts_read+665↑j
.text:0000000000008C41                 mov     esi, [r12+48h]
.text:0000000000008C46                 test    sil, 4
.text:0000000000008C4A                 jnz     short loc_8BE7
.text:0000000000008C4C                 mov     edi, [r12+2Ch]
.text:0000000000008C51                 lea     rdx, asc_C4C9+1 ; "."
.text:0000000000008C58                 call    diropen_isra_6
.text:0000000000008C5D                 test    eax, eax
.text:0000000000008C5F                 mov     [rbx+44h], eax
.text:0000000000008C62                 js      short loc_8CE0
.text:0000000000008C64                 or      word ptr [rbx+72h], 2
.text:0000000000008C69                 jmp     loc_8BE7
.text:0000000000008C6E ; ---------------------------------------------------------------------------
.text:0000000000008C6E
.text:0000000000008C6E loc_8C6E:                               ; CODE XREF: rpl_fts_read+5D2↑j
.text:0000000000008C6E                 cmp     ax, 1
.text:0000000000008C72                 jnz     loc_871A
.text:0000000000008C78                 jmp     loc_88ED
.text:0000000000008C7D ; ---------------------------------------------------------------------------
.text:0000000000008C7D
.text:0000000000008C7D loc_8C7D:                               ; CODE XREF: rpl_fts_read+59E↑j
.text:0000000000008C7D                 mov     esi, [r12+2Ch]
.text:0000000000008C82                 mov     rdi, rbx
.text:0000000000008C85                 call    leaf_optimization
.text:0000000000008C8A                 cmp     eax, 2
.text:0000000000008C8D                 jnz     loc_8B24
.text:0000000000008C93                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008C97                 jmp     loc_88DC
.text:0000000000008C9C ; ---------------------------------------------------------------------------
.text:0000000000008C9C
.text:0000000000008C9C loc_8C9C:                               ; CODE XREF: rpl_fts_read+515↑j
.text:0000000000008C9C                 mov     edi, [r12+2Ch]
.text:0000000000008CA1                 lea     rdx, asc_C4C9+1 ; "."
.text:0000000000008CA8                 call    diropen_isra_6
.text:0000000000008CAD                 test    eax, eax
.text:0000000000008CAF                 mov     [rbp+44h], eax
.text:0000000000008CB2                 js      short loc_8CC2
.text:0000000000008CB4                 or      word ptr [rbp+72h], 2
.text:0000000000008CB9                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008CBD                 jmp     loc_88CE
.text:0000000000008CC2 ; ---------------------------------------------------------------------------
.text:0000000000008CC2
.text:0000000000008CC2 loc_8CC2:                               ; CODE XREF: rpl_fts_read+732↑j
.text:0000000000008CC2                 call    ___errno_location
.text:0000000000008CC7                 mov     eax, [rax]
.text:0000000000008CC9                 mov     r11d, 7
.text:0000000000008CCF                 mov     [rbp+70h], r11w
.text:0000000000008CD4                 mov     [rbp+40h], eax
.text:0000000000008CD7                 mov     [r12], rbp
.text:0000000000008CDB                 jmp     loc_871A
.text:0000000000008CE0 ; ---------------------------------------------------------------------------
.text:0000000000008CE0
.text:0000000000008CE0 loc_8CE0:                               ; CODE XREF: rpl_fts_read+6E2↑j
.text:0000000000008CE0                 call    ___errno_location
.text:0000000000008CE5                 mov     eax, [rax]
.text:0000000000008CE7                 mov     edi, 7
.text:0000000000008CEC                 mov     [rbx+70h], di
.text:0000000000008CF0                 mov     [rbx+40h], eax
.text:0000000000008CF3                 jmp     loc_8BE7
.text:0000000000008CF3 ; } // starts at 8580
.text:0000000000008CF3 rpl_fts_read    endp
.text:0000000000008CF3
.text:0000000000008CF3 ; ---------------------------------------------------------------------------
.text:0000000000008CF8                 align 20h
.text:0000000000008D00
.text:0000000000008D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D00
.text:0000000000008D00
.text:0000000000008D00                 public rpl_fts_set
.text:0000000000008D00 rpl_fts_set     proc near               ; CODE XREF: change_file_owner+288↑p
.text:0000000000008D00                                         ; change_file_owner+3ED↑p ...
.text:0000000000008D00 ; __unwind {
.text:0000000000008D00                 cmp     edx, 4
.text:0000000000008D03                 ja      short loc_8D10
.text:0000000000008D05                 mov     [rsi+74h], dx
.text:0000000000008D09                 xor     eax, eax
.text:0000000000008D0B                 retn
.text:0000000000008D0B ; ---------------------------------------------------------------------------
.text:0000000000008D0C                 align 10h
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: rpl_fts_set+3↑j
.text:0000000000008D10                 sub     rsp, 8
.text:0000000000008D14                 call    ___errno_location
.text:0000000000008D19                 mov     dword ptr [rax], 16h
.text:0000000000008D1F                 mov     eax, 1
.text:0000000000008D24                 add     rsp, 8
.text:0000000000008D28                 retn
.text:0000000000008D28 ; } // starts at 8D00
.text:0000000000008D28 rpl_fts_set     endp
.text:0000000000008D28
.text:0000000000008D28 ; ---------------------------------------------------------------------------
.text:0000000000008D29                 align 10h
.text:0000000000008D30
.text:0000000000008D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D30
.text:0000000000008D30
.text:0000000000008D30                 public rpl_fts_children
.text:0000000000008D30 rpl_fts_children proc near
.text:0000000000008D30 ; __unwind {
.text:0000000000008D30                 push    r14
.text:0000000000008D32                 push    r13
.text:0000000000008D34                 push    r12
.text:0000000000008D36                 push    rbp
.text:0000000000008D37                 mov     r12d, esi
.text:0000000000008D3A                 push    rbx
.text:0000000000008D3B                 mov     rbx, rdi
.text:0000000000008D3E                 call    ___errno_location
.text:0000000000008D43                 test    r12d, 0FFFFEFFFh
.text:0000000000008D4A                 mov     r13, rax
.text:0000000000008D4D                 jnz     loc_8E38
.text:0000000000008D53                 mov     rbp, [rbx]
.text:0000000000008D56                 mov     dword ptr [rax], 0
.text:0000000000008D5C                 test    byte ptr [rbx+49h], 20h
.text:0000000000008D60                 jnz     short loc_8DE0
.text:0000000000008D62                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008D66                 cmp     ax, 9
.text:0000000000008D6A                 jz      short loc_8DD0
.text:0000000000008D6C                 cmp     ax, 1
.text:0000000000008D70                 jnz     short loc_8DE0
.text:0000000000008D72                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000008D76                 test    rdi, rdi
.text:0000000000008D79                 jz      short loc_8D80
.text:0000000000008D7B                 call    fts_lfree
.text:0000000000008D80
.text:0000000000008D80 loc_8D80:                               ; CODE XREF: rpl_fts_children+49↑j
.text:0000000000008D80                 cmp     r12d, 1000h
.text:0000000000008D87                 mov     r14d, 1
.text:0000000000008D8D                 jnz     short loc_8D9C
.text:0000000000008D8F                 or      dword ptr [rbx+48h], 1000h
.text:0000000000008D96                 mov     r14d, 2
.text:0000000000008D9C
.text:0000000000008D9C loc_8D9C:                               ; CODE XREF: rpl_fts_children+5D↑j
.text:0000000000008D9C                 cmp     qword ptr [rbp+58h], 0
.text:0000000000008DA1                 jnz     short loc_8DB5
.text:0000000000008DA3                 mov     rax, [rbp+30h]
.text:0000000000008DA7                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000008DAA                 jz      short loc_8DB5
.text:0000000000008DAC                 mov     esi, [rbx+48h]
.text:0000000000008DAF                 test    sil, 4
.text:0000000000008DB3                 jz      short loc_8DF0
.text:0000000000008DB5
.text:0000000000008DB5 loc_8DB5:                               ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000008DB5                                         ; rpl_fts_children+7A↑j
.text:0000000000008DB5                 mov     esi, r14d
.text:0000000000008DB8                 mov     rdi, rbx
.text:0000000000008DBB                 call    fts_build
.text:0000000000008DC0                 mov     [rbx+8], rax
.text:0000000000008DC4
.text:0000000000008DC4 loc_8DC4:                               ; CODE XREF: rpl_fts_children+100↓j
.text:0000000000008DC4                                         ; rpl_fts_children+110↓j ...
.text:0000000000008DC4                 pop     rbx
.text:0000000000008DC5                 pop     rbp
.text:0000000000008DC6                 pop     r12
.text:0000000000008DC8                 pop     r13
.text:0000000000008DCA                 pop     r14
.text:0000000000008DCC                 retn
.text:0000000000008DCC ; ---------------------------------------------------------------------------
.text:0000000000008DCD                 align 10h
.text:0000000000008DD0
.text:0000000000008DD0 loc_8DD0:                               ; CODE XREF: rpl_fts_children+3A↑j
.text:0000000000008DD0                 pop     rbx
.text:0000000000008DD1                 mov     rax, [rbp+10h]
.text:0000000000008DD5                 pop     rbp
.text:0000000000008DD6                 pop     r12
.text:0000000000008DD8                 pop     r13
.text:0000000000008DDA                 pop     r14
.text:0000000000008DDC                 retn
.text:0000000000008DDC ; ---------------------------------------------------------------------------
.text:0000000000008DDD                 align 20h
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: rpl_fts_children+30↑j
.text:0000000000008DE0                                         ; rpl_fts_children+40↑j
.text:0000000000008DE0                 pop     rbx
.text:0000000000008DE1                 xor     eax, eax
.text:0000000000008DE3                 pop     rbp
.text:0000000000008DE4                 pop     r12
.text:0000000000008DE6                 pop     r13
.text:0000000000008DE8                 pop     r14
.text:0000000000008DEA                 retn
.text:0000000000008DEA ; ---------------------------------------------------------------------------
.text:0000000000008DEB                 align 10h
.text:0000000000008DF0
.text:0000000000008DF0 loc_8DF0:                               ; CODE XREF: rpl_fts_children+83↑j
.text:0000000000008DF0                 mov     edi, [rbx+2Ch]
.text:0000000000008DF3                 lea     rdx, asc_C4C9+1 ; "."
.text:0000000000008DFA                 call    diropen_isra_6
.text:0000000000008DFF                 test    eax, eax
.text:0000000000008E01                 mov     ebp, eax
.text:0000000000008E03                 js      short loc_8E59
.text:0000000000008E05                 mov     esi, r14d
.text:0000000000008E08                 mov     rdi, rbx
.text:0000000000008E0B                 call    fts_build
.text:0000000000008E10                 test    byte ptr [rbx+49h], 2
.text:0000000000008E14                 mov     [rbx+8], rax
.text:0000000000008E18                 jnz     short loc_8E48
.text:0000000000008E1A                 mov     edi, ebp        ; fd
.text:0000000000008E1C                 call    _fchdir
.text:0000000000008E21                 test    eax, eax
.text:0000000000008E23                 jnz     short loc_8E68
.text:0000000000008E25                 mov     edi, ebp        ; fd
.text:0000000000008E27                 call    _close
.text:0000000000008E2C
.text:0000000000008E2C loc_8E2C:                               ; CODE XREF: rpl_fts_children+127↓j
.text:0000000000008E2C                 mov     rax, [rbx+8]
.text:0000000000008E30                 jmp     short loc_8DC4
.text:0000000000008E30 ; ---------------------------------------------------------------------------
.text:0000000000008E32                 align 8
.text:0000000000008E38
.text:0000000000008E38 loc_8E38:                               ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000008E38                 mov     dword ptr [rax], 16h
.text:0000000000008E3E                 xor     eax, eax
.text:0000000000008E40                 jmp     loc_8DC4
.text:0000000000008E40 ; ---------------------------------------------------------------------------
.text:0000000000008E45                 align 8
.text:0000000000008E48
.text:0000000000008E48 loc_8E48:                               ; CODE XREF: rpl_fts_children+E8↑j
.text:0000000000008E48                 mov     edx, 1
.text:0000000000008E4D                 mov     esi, ebp
.text:0000000000008E4F                 mov     rdi, rbx
.text:0000000000008E52                 call    cwd_advance_fd
.text:0000000000008E57                 jmp     short loc_8E2C
.text:0000000000008E59 ; ---------------------------------------------------------------------------
.text:0000000000008E59
.text:0000000000008E59 loc_8E59:                               ; CODE XREF: rpl_fts_children+D3↑j
.text:0000000000008E59                 mov     qword ptr [rbx+8], 0
.text:0000000000008E61                 xor     eax, eax
.text:0000000000008E63                 jmp     loc_8DC4
.text:0000000000008E68 ; ---------------------------------------------------------------------------
.text:0000000000008E68
.text:0000000000008E68 loc_8E68:                               ; CODE XREF: rpl_fts_children+F3↑j
.text:0000000000008E68                 mov     ebx, [r13+0]
.text:0000000000008E6C                 mov     edi, ebp        ; fd
.text:0000000000008E6E                 call    _close
.text:0000000000008E73                 xor     eax, eax
.text:0000000000008E75                 mov     [r13+0], ebx
.text:0000000000008E79                 jmp     loc_8DC4
.text:0000000000008E79 ; } // starts at 8D30
.text:0000000000008E79 rpl_fts_children endp
.text:0000000000008E79
.text:0000000000008E79 ; ---------------------------------------------------------------------------
.text:0000000000008E7E                 align 20h
.text:0000000000008E80
.text:0000000000008E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E80
.text:0000000000008E80 ; Attributes: info_from_lumina
.text:0000000000008E80
.text:0000000000008E80 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008E80                 public rpl_mbrtowc
.text:0000000000008E80 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008E80
.text:0000000000008E80 pwc             = dword ptr -34h
.text:0000000000008E80 var_30          = qword ptr -30h
.text:0000000000008E80
.text:0000000000008E80 ; __unwind {
.text:0000000000008E80                 push    r13
.text:0000000000008E82                 push    r12
.text:0000000000008E84                 mov     r13, rsi
.text:0000000000008E87                 push    rbp
.text:0000000000008E88                 push    rbx
.text:0000000000008E89                 mov     rbx, rdi
.text:0000000000008E8C                 mov     r12, rdx
.text:0000000000008E8F                 sub     rsp, 18h
.text:0000000000008E93                 mov     rax, fs:28h
.text:0000000000008E9C                 mov     [rsp+38h+var_30], rax
.text:0000000000008EA1                 xor     eax, eax
.text:0000000000008EA3                 lea     rax, [rsp+38h+pwc]
.text:0000000000008EA8                 test    rdi, rdi
.text:0000000000008EAB                 cmovz   rbx, rax
.text:0000000000008EAF                 mov     rdi, rbx        ; pwc
.text:0000000000008EB2                 call    _mbrtowc
.text:0000000000008EB7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000008EBB                 mov     rbp, rax
.text:0000000000008EBE                 jbe     short loc_8EE0
.text:0000000000008EC0                 test    r12, r12
.text:0000000000008EC3                 jz      short loc_8EE0
.text:0000000000008EC5                 xor     edi, edi
.text:0000000000008EC7                 call    hard_locale
.text:0000000000008ECC                 test    al, al
.text:0000000000008ECE                 jnz     short loc_8EE0
.text:0000000000008ED0                 movzx   eax, byte ptr [r13+0]
.text:0000000000008ED5                 mov     ebp, 1
.text:0000000000008EDA                 mov     [rbx], eax
.text:0000000000008EDC                 nop     dword ptr [rax+00h]
.text:0000000000008EE0
.text:0000000000008EE0 loc_8EE0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000008EE0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000008EE0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000008EE5                 xor     rdx, fs:28h
.text:0000000000008EEE                 mov     rax, rbp
.text:0000000000008EF1                 jnz     short loc_8EFE
.text:0000000000008EF3                 add     rsp, 18h
.text:0000000000008EF7                 pop     rbx
.text:0000000000008EF8                 pop     rbp
.text:0000000000008EF9                 pop     r12
.text:0000000000008EFB                 pop     r13
.text:0000000000008EFD                 retn
.text:0000000000008EFE ; ---------------------------------------------------------------------------
.text:0000000000008EFE
.text:0000000000008EFE loc_8EFE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000008EFE                 call    ___stack_chk_fail
.text:0000000000008EFE ; } // starts at 8E80
.text:0000000000008EFE rpl_mbrtowc     endp
.text:0000000000008EFE
.text:0000000000008EFE ; ---------------------------------------------------------------------------
.text:0000000000008F03                 align 10h
.text:0000000000008F10
.text:0000000000008F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F10
.text:0000000000008F10 ; Attributes: info_from_lumina
.text:0000000000008F10
.text:0000000000008F10 ; int __fastcall close_stream(FILE *stream)
.text:0000000000008F10                 public close_stream
.text:0000000000008F10 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000008F10                                         ; close_stdout+33↑p
.text:0000000000008F10 ; __unwind {
.text:0000000000008F10                 push    r12
.text:0000000000008F12                 push    rbp
.text:0000000000008F13                 mov     rbp, rdi
.text:0000000000008F16                 push    rbx
.text:0000000000008F17                 call    ___fpending
.text:0000000000008F1C                 mov     ebx, [rbp+0]
.text:0000000000008F1F                 mov     rdi, rbp        ; stream
.text:0000000000008F22                 mov     r12, rax
.text:0000000000008F25                 call    rpl_fclose
.text:0000000000008F2A                 and     ebx, 20h
.text:0000000000008F2D                 test    ebx, ebx
.text:0000000000008F2F                 jnz     short loc_8F48
.text:0000000000008F31                 test    eax, eax
.text:0000000000008F33                 jz      short loc_8F3F
.text:0000000000008F35                 test    r12, r12
.text:0000000000008F38                 mov     eax, 0FFFFFFFFh
.text:0000000000008F3D                 jz      short loc_8F78
.text:0000000000008F3F
.text:0000000000008F3F loc_8F3F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000008F3F                 pop     rbx
.text:0000000000008F40                 pop     rbp
.text:0000000000008F41                 pop     r12
.text:0000000000008F43                 retn
.text:0000000000008F43 ; ---------------------------------------------------------------------------
.text:0000000000008F44                 align 8
.text:0000000000008F48
.text:0000000000008F48 loc_8F48:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000008F48                 test    eax, eax
.text:0000000000008F4A                 jnz     short loc_8F68
.text:0000000000008F4C                 call    ___errno_location
.text:0000000000008F51                 mov     dword ptr [rax], 0
.text:0000000000008F57                 mov     eax, 0FFFFFFFFh
.text:0000000000008F5C                 pop     rbx
.text:0000000000008F5D                 pop     rbp
.text:0000000000008F5E                 pop     r12
.text:0000000000008F60                 retn
.text:0000000000008F60 ; ---------------------------------------------------------------------------
.text:0000000000008F61                 align 8
.text:0000000000008F68
.text:0000000000008F68 loc_8F68:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000008F68                 pop     rbx
.text:0000000000008F69                 mov     eax, 0FFFFFFFFh
.text:0000000000008F6E                 pop     rbp
.text:0000000000008F6F                 pop     r12
.text:0000000000008F71                 retn
.text:0000000000008F71 ; ---------------------------------------------------------------------------
.text:0000000000008F72                 align 8
.text:0000000000008F78
.text:0000000000008F78 loc_8F78:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000008F78                 call    ___errno_location
.text:0000000000008F7D                 cmp     dword ptr [rax], 9
.text:0000000000008F80                 pop     rbx
.text:0000000000008F81                 pop     rbp
.text:0000000000008F82                 pop     r12
.text:0000000000008F84                 setnz   al
.text:0000000000008F87                 movzx   eax, al
.text:0000000000008F8A                 neg     eax
.text:0000000000008F8C                 retn
.text:0000000000008F8C ; } // starts at 8F10
.text:0000000000008F8C close_stream    endp
.text:0000000000008F8C
.text:0000000000008F8C ; ---------------------------------------------------------------------------
.text:0000000000008F8D                 align 10h
.text:0000000000008F90
.text:0000000000008F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F90
.text:0000000000008F90
.text:0000000000008F90                 public cycle_check_init
.text:0000000000008F90 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:0000000000008F90 ; __unwind {
.text:0000000000008F90                 mov     qword ptr [rdi+10h], 0
.text:0000000000008F98                 mov     dword ptr [rdi+18h], 95F616h
.text:0000000000008F9F                 retn
.text:0000000000008F9F ; } // starts at 8F90
.text:0000000000008F9F cycle_check_init endp
.text:0000000000008F9F
.text:0000000000008FA0
.text:0000000000008FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FA0
.text:0000000000008FA0
.text:0000000000008FA0                 public cycle_check
.text:0000000000008FA0 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:0000000000008FA0 ; __unwind {
.text:0000000000008FA0                 cmp     dword ptr [rdi+18h], 95F616h
.text:0000000000008FA7                 jnz     short loc_9007
.text:0000000000008FA9                 mov     rdx, [rdi+10h]
.text:0000000000008FAD                 mov     rcx, [rsi+8]
.text:0000000000008FB1                 test    rdx, rdx
.text:0000000000008FB4                 jz      short loc_8FD0
.text:0000000000008FB6                 cmp     [rdi], rcx
.text:0000000000008FB9                 jz      short loc_8FE8
.text:0000000000008FBB
.text:0000000000008FBB loc_8FBB:                               ; CODE XREF: cycle_check+4F↓j
.text:0000000000008FBB                 lea     r8, [rdx+1]
.text:0000000000008FBF                 xor     eax, eax
.text:0000000000008FC1                 test    rdx, r8
.text:0000000000008FC4                 mov     [rdi+10h], r8
.text:0000000000008FC8                 jz      short loc_9000
.text:0000000000008FCA                 rep retn
.text:0000000000008FCA ; ---------------------------------------------------------------------------
.text:0000000000008FCC                 align 10h
.text:0000000000008FD0
.text:0000000000008FD0 loc_8FD0:                               ; CODE XREF: cycle_check+14↑j
.text:0000000000008FD0                 mov     qword ptr [rdi+10h], 1
.text:0000000000008FD8
.text:0000000000008FD8 loc_8FD8:                               ; CODE XREF: cycle_check+65↓j
.text:0000000000008FD8                 mov     rax, [rsi]
.text:0000000000008FDB                 mov     [rdi], rcx
.text:0000000000008FDE                 mov     [rdi+8], rax
.text:0000000000008FE2                 xor     eax, eax
.text:0000000000008FE4                 retn
.text:0000000000008FE4 ; ---------------------------------------------------------------------------
.text:0000000000008FE5                 align 8
.text:0000000000008FE8
.text:0000000000008FE8 loc_8FE8:                               ; CODE XREF: cycle_check+19↑j
.text:0000000000008FE8                 mov     rax, [rdi+8]
.text:0000000000008FEC                 cmp     [rsi], rax
.text:0000000000008FEF                 jnz     short loc_8FBB
.text:0000000000008FF1
.text:0000000000008FF1 loc_8FF1:                               ; CODE XREF: cycle_check+63↓j
.text:0000000000008FF1                 mov     eax, 1
.text:0000000000008FF6                 retn
.text:0000000000008FF6 ; ---------------------------------------------------------------------------
.text:0000000000008FF7                 align 20h
.text:0000000000009000
.text:0000000000009000 loc_9000:                               ; CODE XREF: cycle_check+28↑j
.text:0000000000009000                 test    r8, r8
.text:0000000000009003                 jz      short loc_8FF1
.text:0000000000009005                 jmp     short loc_8FD8
.text:0000000000009007 ; ---------------------------------------------------------------------------
.text:0000000000009007
.text:0000000000009007 loc_9007:                               ; CODE XREF: cycle_check+7↑j
.text:0000000000009007                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:000000000000900E                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/cycle-check.c"
.text:0000000000009015                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:000000000000901C                 sub     rsp, 8
.text:0000000000009020                 mov     edx, 3Ch ; '<'  ; line
.text:0000000000009025                 call    ___assert_fail
.text:0000000000009025 ; } // starts at 8FA0
.text:0000000000009025 cycle_check     endp
.text:0000000000009025
.text:0000000000009025 ; ---------------------------------------------------------------------------
.text:000000000000902A                 align 10h
.text:0000000000009030
.text:0000000000009030 ; =============== S U B R O U T I N E =======================================
.text:0000000000009030
.text:0000000000009030
.text:0000000000009030                 public open_safer
.text:0000000000009030 open_safer      proc near               ; CODE XREF: diropen_isra_6+23↑j
.text:0000000000009030
.text:0000000000009030 var_58          = dword ptr -58h
.text:0000000000009030 var_50          = qword ptr -50h
.text:0000000000009030 var_48          = qword ptr -48h
.text:0000000000009030 var_40          = qword ptr -40h
.text:0000000000009030 var_38          = byte ptr -38h
.text:0000000000009030 var_28          = qword ptr -28h
.text:0000000000009030 arg_0           = byte ptr  8
.text:0000000000009030
.text:0000000000009030 ; __unwind {
.text:0000000000009030                 sub     rsp, 58h
.text:0000000000009034                 mov     [rsp+58h+var_28], rdx
.text:0000000000009039                 xor     edx, edx
.text:000000000000903B                 mov     rax, fs:28h
.text:0000000000009044                 mov     [rsp+58h+var_40], rax
.text:0000000000009049                 xor     eax, eax
.text:000000000000904B                 test    sil, 40h
.text:000000000000904F                 jnz     short loc_9078
.text:0000000000009051
.text:0000000000009051 loc_9051:                               ; CODE XREF: open_safer+67↓j
.text:0000000000009051                 xor     eax, eax
.text:0000000000009053                 call    _open
.text:0000000000009058                 mov     edi, eax        ; fd
.text:000000000000905A                 call    fd_safer_flag
.text:000000000000905F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000009064                 xor     rcx, fs:28h
.text:000000000000906D                 jnz     short loc_9099
.text:000000000000906F                 add     rsp, 58h
.text:0000000000009073                 retn
.text:0000000000009073 ; ---------------------------------------------------------------------------
.text:0000000000009074                 align 8
.text:0000000000009078
.text:0000000000009078 loc_9078:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000009078                 lea     rax, [rsp+58h+arg_0]
.text:000000000000907D                 mov     [rsp+58h+var_58], 10h
.text:0000000000009084                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000009088                 mov     [rsp+58h+var_50], rax
.text:000000000000908D                 lea     rax, [rsp+58h+var_38]
.text:0000000000009092                 mov     [rsp+58h+var_48], rax
.text:0000000000009097                 jmp     short loc_9051
.text:0000000000009099 ; ---------------------------------------------------------------------------
.text:0000000000009099
.text:0000000000009099 loc_9099:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000009099                 call    ___stack_chk_fail
.text:0000000000009099 ; } // starts at 9030
.text:0000000000009099 open_safer      endp
.text:0000000000009099
.text:0000000000009099 ; ---------------------------------------------------------------------------
.text:000000000000909E                 align 20h
.text:00000000000090A0
.text:00000000000090A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090A0
.text:00000000000090A0
.text:00000000000090A0                 public hard_locale
.text:00000000000090A0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000090A0 ; __unwind {
.text:00000000000090A0                 sub     rsp, 8
.text:00000000000090A4                 xor     esi, esi        ; locale
.text:00000000000090A6                 call    _setlocale
.text:00000000000090AB                 mov     rdx, rax
.text:00000000000090AE                 mov     eax, 1
.text:00000000000090B3                 test    rdx, rdx
.text:00000000000090B6                 jz      short loc_90D5
.text:00000000000090B8                 lea     rdi, aC         ; "C"
.text:00000000000090BF                 mov     ecx, 2
.text:00000000000090C4                 mov     rsi, rdx
.text:00000000000090C7                 repe cmpsb
.text:00000000000090C9                 setnbe  cl
.text:00000000000090CC                 sbb     cl, 0
.text:00000000000090CF                 xor     eax, eax
.text:00000000000090D1                 test    cl, cl
.text:00000000000090D3                 jnz     short loc_90E0
.text:00000000000090D5
.text:00000000000090D5 loc_90D5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000090D5                 add     rsp, 8
.text:00000000000090D9                 retn
.text:00000000000090D9 ; ---------------------------------------------------------------------------
.text:00000000000090DA                 align 20h
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000090E0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000090E7                 mov     ecx, 6
.text:00000000000090EC                 mov     rsi, rdx
.text:00000000000090EF                 repe cmpsb
.text:00000000000090F1                 setnbe  al
.text:00000000000090F4                 sbb     al, 0
.text:00000000000090F6                 test    al, al
.text:00000000000090F8                 setnz   al
.text:00000000000090FB                 add     rsp, 8
.text:00000000000090FF                 retn
.text:00000000000090FF ; } // starts at 90A0
.text:00000000000090FF hard_locale     endp
.text:00000000000090FF
.text:0000000000009100
.text:0000000000009100 ; =============== S U B R O U T I N E =======================================
.text:0000000000009100
.text:0000000000009100 ; Attributes: info_from_lumina
.text:0000000000009100
.text:0000000000009100 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000009100 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000009100                                         ; hash_rehash+7B↓p
.text:0000000000009100 ; __unwind {
.text:0000000000009100                 cmp     rdi, 0Ah
.text:0000000000009104                 mov     eax, 0Ah
.text:0000000000009109                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000009113                 cmovb   rdi, rax
.text:0000000000009117                 or      rdi, 1
.text:000000000000911B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000911F                 jz      short loc_918F
.text:0000000000009121                 nop     dword ptr [rax+00000000h]
.text:0000000000009128
.text:0000000000009128 loc_9128:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000009128                 mov     rax, rdi
.text:000000000000912B                 mov     rcx, rdi
.text:000000000000912E                 mul     r9
.text:0000000000009131                 mov     rax, rdx
.text:0000000000009134                 shr     rax, 1
.text:0000000000009137                 lea     rax, [rax+rax*2]
.text:000000000000913B                 sub     rcx, rax
.text:000000000000913E                 cmp     rdi, 9
.text:0000000000009142                 mov     rax, rcx
.text:0000000000009145                 jbe     short loc_9180
.text:0000000000009147                 test    rcx, rcx
.text:000000000000914A                 jz      short loc_9185
.text:000000000000914C                 mov     r8d, 10h
.text:0000000000009152                 mov     esi, 9
.text:0000000000009157                 mov     ecx, 3
.text:000000000000915C                 jmp     short loc_9169
.text:000000000000915C ; ---------------------------------------------------------------------------
.text:000000000000915E                 align 20h
.text:0000000000009160
.text:0000000000009160 loc_9160:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000009160                 add     r8, 8
.text:0000000000009164                 test    rdx, rdx
.text:0000000000009167                 jz      short loc_9185
.text:0000000000009169
.text:0000000000009169 loc_9169:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000009169                 add     rcx, 2
.text:000000000000916D                 xor     edx, edx
.text:000000000000916F                 mov     rax, rdi
.text:0000000000009172                 div     rcx
.text:0000000000009175                 add     rsi, r8
.text:0000000000009178                 cmp     rsi, rdi
.text:000000000000917B                 mov     rax, rdx
.text:000000000000917E                 jb      short loc_9160
.text:0000000000009180
.text:0000000000009180 loc_9180:                               ; CODE XREF: next_prime+45↑j
.text:0000000000009180                 test    rax, rax
.text:0000000000009183                 jnz     short loc_918F
.text:0000000000009185
.text:0000000000009185 loc_9185:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000009185                                         ; next_prime+67↑j
.text:0000000000009185                 add     rdi, 2
.text:0000000000009189                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000918D                 jnz     short loc_9128
.text:000000000000918F
.text:000000000000918F loc_918F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000918F                                         ; next_prime+83↑j
.text:000000000000918F                 mov     rax, rdi
.text:0000000000009192                 retn
.text:0000000000009192 ; } // starts at 9100
.text:0000000000009192 next_prime      endp
.text:0000000000009192
.text:0000000000009192 ; ---------------------------------------------------------------------------
.text:0000000000009193                 align 20h
.text:00000000000091A0
.text:00000000000091A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091A0
.text:00000000000091A0
.text:00000000000091A0 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:00000000000091A0 ; __unwind {
.text:00000000000091A0                 mov     rax, rdi
.text:00000000000091A3                 xor     edx, edx
.text:00000000000091A5                 ror     rax, 3
.text:00000000000091A9                 div     rsi
.text:00000000000091AC                 mov     rax, rdx
.text:00000000000091AF                 retn
.text:00000000000091AF ; } // starts at 91A0
.text:00000000000091AF raw_hasher      endp
.text:00000000000091AF
.text:00000000000091B0
.text:00000000000091B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091B0
.text:00000000000091B0
.text:00000000000091B0 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:00000000000091B0 ; __unwind {
.text:00000000000091B0                 cmp     rdi, rsi
.text:00000000000091B3                 setz    al
.text:00000000000091B6                 retn
.text:00000000000091B6 ; } // starts at 91B0
.text:00000000000091B6 raw_comparator  endp
.text:00000000000091B6
.text:00000000000091B6 ; ---------------------------------------------------------------------------
.text:00000000000091B7                 align 20h
.text:00000000000091C0
.text:00000000000091C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091C0
.text:00000000000091C0 ; Attributes: info_from_lumina
.text:00000000000091C0
.text:00000000000091C0 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:00000000000091C0 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:00000000000091C0                                         ; transfer_entries+65↓p ...
.text:00000000000091C0 ; __unwind {
.text:00000000000091C0                 push    rbx
.text:00000000000091C1                 mov     rbx, rdi
.text:00000000000091C4                 mov     rdi, rsi
.text:00000000000091C7                 mov     rsi, [rbx+10h]
.text:00000000000091CB                 call    qword ptr [rbx+30h]
.text:00000000000091CE                 cmp     [rbx+10h], rax
.text:00000000000091D2                 jbe     short loc_91DD
.text:00000000000091D4                 shl     rax, 4
.text:00000000000091D8                 add     rax, [rbx]
.text:00000000000091DB                 pop     rbx
.text:00000000000091DC                 retn
.text:00000000000091DD ; ---------------------------------------------------------------------------
.text:00000000000091DD
.text:00000000000091DD loc_91DD:                               ; CODE XREF: safe_hasher+12↑j
.text:00000000000091DD                 call    _abort
.text:00000000000091DD ; } // starts at 91C0
.text:00000000000091DD safe_hasher     endp
.text:00000000000091DD
.text:00000000000091DD ; ---------------------------------------------------------------------------
.text:00000000000091E2                 align 10h
.text:00000000000091F0
.text:00000000000091F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091F0
.text:00000000000091F0 ; Attributes: info_from_lumina
.text:00000000000091F0
.text:00000000000091F0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:00000000000091F0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:00000000000091F0                                         ; hash_insert_if_absent+1CF↓p ...
.text:00000000000091F0 ; __unwind {
.text:00000000000091F0                 push    r14
.text:00000000000091F2                 push    r13
.text:00000000000091F4                 mov     r14, rdx
.text:00000000000091F7                 push    r12
.text:00000000000091F9                 push    rbp
.text:00000000000091FA                 mov     r12, rdi
.text:00000000000091FD                 push    rbx
.text:00000000000091FE                 mov     rbp, rsi
.text:0000000000009201                 mov     r13d, ecx
.text:0000000000009204                 call    safe_hasher
.text:0000000000009209                 mov     [r14], rax
.text:000000000000920C                 mov     rsi, [rax]
.text:000000000000920F                 test    rsi, rsi
.text:0000000000009212                 jz      loc_9300
.text:0000000000009218                 cmp     rsi, rbp
.text:000000000000921B                 mov     rbx, rax
.text:000000000000921E                 jz      loc_92B3
.text:0000000000009224                 mov     rdi, rbp
.text:0000000000009227                 call    qword ptr [r12+38h]
.text:000000000000922C                 test    al, al
.text:000000000000922E                 jnz     loc_92B0
.text:0000000000009234                 mov     rax, [rbx+8]
.text:0000000000009238                 test    rax, rax
.text:000000000000923B                 jz      loc_9300
.text:0000000000009241                 mov     rsi, [rax]
.text:0000000000009244                 cmp     rbp, rsi
.text:0000000000009247                 jnz     short loc_9269
.text:0000000000009249                 jmp     short loc_927C
.text:0000000000009249 ; ---------------------------------------------------------------------------
.text:000000000000924B                 align 10h
.text:0000000000009250
.text:0000000000009250 loc_9250:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000009250                 mov     rbx, [rbx+8]
.text:0000000000009254                 mov     rax, [rbx+8]
.text:0000000000009258                 test    rax, rax
.text:000000000000925B                 jz      loc_9300
.text:0000000000009261                 mov     rsi, [rax]
.text:0000000000009264                 cmp     rsi, rbp
.text:0000000000009267                 jz      short loc_927C
.text:0000000000009269
.text:0000000000009269 loc_9269:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000009269                 mov     rdi, rbp
.text:000000000000926C                 call    qword ptr [r12+38h]
.text:0000000000009271                 test    al, al
.text:0000000000009273                 jz      short loc_9250
.text:0000000000009275                 mov     rax, [rbx+8]
.text:0000000000009279                 mov     rsi, [rax]
.text:000000000000927C
.text:000000000000927C loc_927C:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000927C                                         ; hash_find_entry+77↑j
.text:000000000000927C                 test    r13b, r13b
.text:000000000000927F                 jz      short loc_929E
.text:0000000000009281                 mov     rdx, [rax+8]
.text:0000000000009285                 mov     [rbx+8], rdx
.text:0000000000009289                 mov     qword ptr [rax], 0
.text:0000000000009290                 mov     rdx, [r12+48h]
.text:0000000000009295                 mov     [rax+8], rdx
.text:0000000000009299                 mov     [r12+48h], rax
.text:000000000000929E
.text:000000000000929E loc_929E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000929E                                         ; hash_find_entry+C6↓j ...
.text:000000000000929E                 pop     rbx
.text:000000000000929F                 mov     rax, rsi
.text:00000000000092A2                 pop     rbp
.text:00000000000092A3                 pop     r12
.text:00000000000092A5                 pop     r13
.text:00000000000092A7                 pop     r14
.text:00000000000092A9                 retn
.text:00000000000092A9 ; ---------------------------------------------------------------------------
.text:00000000000092AA                 align 10h
.text:00000000000092B0
.text:00000000000092B0 loc_92B0:                               ; CODE XREF: hash_find_entry+3E↑j
.text:00000000000092B0                 mov     rsi, [rbx]
.text:00000000000092B3
.text:00000000000092B3 loc_92B3:                               ; CODE XREF: hash_find_entry+2E↑j
.text:00000000000092B3                 test    r13b, r13b
.text:00000000000092B6                 jz      short loc_929E
.text:00000000000092B8                 mov     rax, [rbx+8]
.text:00000000000092BC                 test    rax, rax
.text:00000000000092BF                 jz      short loc_92F0
.text:00000000000092C1                 movdqu  xmm0, xmmword ptr [rax]
.text:00000000000092C5                 movups  xmmword ptr [rbx], xmm0
.text:00000000000092C8                 mov     qword ptr [rax], 0
.text:00000000000092CF                 mov     rdx, [r12+48h]
.text:00000000000092D4                 mov     [rax+8], rdx
.text:00000000000092D8                 mov     [r12+48h], rax
.text:00000000000092DD                 mov     rax, rsi
.text:00000000000092E0                 pop     rbx
.text:00000000000092E1                 pop     rbp
.text:00000000000092E2                 pop     r12
.text:00000000000092E4                 pop     r13
.text:00000000000092E6                 pop     r14
.text:00000000000092E8                 retn
.text:00000000000092E8 ; ---------------------------------------------------------------------------
.text:00000000000092E9                 align 10h
.text:00000000000092F0
.text:00000000000092F0 loc_92F0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:00000000000092F0                 mov     qword ptr [rbx], 0
.text:00000000000092F7                 jmp     short loc_929E
.text:00000000000092F7 ; ---------------------------------------------------------------------------
.text:00000000000092F9                 align 20h
.text:0000000000009300
.text:0000000000009300 loc_9300:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000009300                                         ; hash_find_entry+4B↑j ...
.text:0000000000009300                 xor     esi, esi
.text:0000000000009302                 pop     rbx
.text:0000000000009303                 mov     rax, rsi
.text:0000000000009306                 pop     rbp
.text:0000000000009307                 pop     r12
.text:0000000000009309                 pop     r13
.text:000000000000930B                 pop     r14
.text:000000000000930D                 retn
.text:000000000000930D ; } // starts at 91F0
.text:000000000000930D hash_find_entry endp
.text:000000000000930D
.text:000000000000930D ; ---------------------------------------------------------------------------
.text:000000000000930E                 align 10h
.text:0000000000009310
.text:0000000000009310 ; =============== S U B R O U T I N E =======================================
.text:0000000000009310
.text:0000000000009310 ; Attributes: info_from_lumina
.text:0000000000009310
.text:0000000000009310 ; _Bool check_tuning(Hash_table *table)
.text:0000000000009310 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000009310                                         ; hash_initialize+11B↓p ...
.text:0000000000009310 ; __unwind {
.text:0000000000009310                 mov     rdx, [rdi]
.text:0000000000009313                 lea     rcx, default_tuning
.text:000000000000931A                 mov     eax, 1
.text:000000000000931F                 cmp     rdx, rcx
.text:0000000000009322                 jz      short locret_9385
.text:0000000000009324                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000009329                 ucomiss xmm0, cs:dword_C5F4
.text:0000000000009330                 jbe     short loc_9380
.text:0000000000009332                 movss   xmm1, cs:dword_C5F8
.text:000000000000933A                 ucomiss xmm1, xmm0
.text:000000000000933D                 jbe     short loc_9380
.text:000000000000933F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000009344                 ucomiss xmm1, cs:dword_C5FC
.text:000000000000934B                 jbe     short loc_9380
.text:000000000000934D                 movss   xmm1, dword ptr [rdx]
.text:0000000000009351                 ucomiss xmm1, cs:dword_C600
.text:0000000000009358                 jb      short loc_9380
.text:000000000000935A                 addss   xmm1, cs:dword_C5F4
.text:0000000000009362                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000009367                 ucomiss xmm2, xmm1
.text:000000000000936A                 jbe     short loc_9380
.text:000000000000936C                 movss   xmm3, cs:dword_C604
.text:0000000000009374                 ucomiss xmm3, xmm2
.text:0000000000009377                 jb      short loc_9380
.text:0000000000009379                 ucomiss xmm0, xmm1
.text:000000000000937C                 ja      short locret_9385
.text:000000000000937E                 xchg    ax, ax
.text:0000000000009380
.text:0000000000009380 loc_9380:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000009380                                         ; check_tuning+2D↑j ...
.text:0000000000009380                 mov     [rdi], rcx
.text:0000000000009383                 xor     eax, eax
.text:0000000000009385
.text:0000000000009385 locret_9385:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000009385                                         ; check_tuning+6C↑j
.text:0000000000009385                 rep retn
.text:0000000000009385 ; } // starts at 9310
.text:0000000000009385 check_tuning    endp
.text:0000000000009385
.text:0000000000009385 ; ---------------------------------------------------------------------------
.text:0000000000009387                 align 10h
.text:0000000000009390
.text:0000000000009390 ; =============== S U B R O U T I N E =======================================
.text:0000000000009390
.text:0000000000009390 ; Attributes: info_from_lumina
.text:0000000000009390
.text:0000000000009390 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000009390 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000009390                                         ; hash_rehash+152↓p ...
.text:0000000000009390 ; __unwind {
.text:0000000000009390                 push    r15
.text:0000000000009392                 push    r14
.text:0000000000009394                 push    r13
.text:0000000000009396                 push    r12
.text:0000000000009398                 push    rbp
.text:0000000000009399                 push    rbx
.text:000000000000939A                 sub     rsp, 8
.text:000000000000939E                 mov     r12, [rsi]
.text:00000000000093A1                 cmp     r12, [rsi+8]
.text:00000000000093A5                 jnb     loc_9488
.text:00000000000093AB                 mov     rbp, rdi
.text:00000000000093AE                 mov     r13, rsi
.text:00000000000093B1                 mov     r14d, edx
.text:00000000000093B4                 nop     dword ptr [rax+00h]
.text:00000000000093B8
.text:00000000000093B8 loc_93B8:                               ; CODE XREF: transfer_entries+F2↓j
.text:00000000000093B8                 mov     r15, [r12]
.text:00000000000093BC                 test    r15, r15
.text:00000000000093BF                 jz      loc_947A
.text:00000000000093C5                 mov     rbx, [r12+8]
.text:00000000000093CA                 test    rbx, rbx
.text:00000000000093CD                 jnz     short loc_93EC
.text:00000000000093CF                 jmp     short loc_942B
.text:00000000000093CF ; ---------------------------------------------------------------------------
.text:00000000000093D1                 align 8
.text:00000000000093D8
.text:00000000000093D8 loc_93D8:                               ; CODE XREF: transfer_entries+72↓j
.text:00000000000093D8                 mov     rcx, [rax+8]
.text:00000000000093DC                 test    rdx, rdx
.text:00000000000093DF                 mov     [rbx+8], rcx
.text:00000000000093E3                 mov     [rax+8], rbx
.text:00000000000093E7                 mov     rbx, rdx
.text:00000000000093EA                 jz      short loc_9427
.text:00000000000093EC
.text:00000000000093EC loc_93EC:                               ; CODE XREF: transfer_entries+3D↑j
.text:00000000000093EC                                         ; transfer_entries+95↓j
.text:00000000000093EC                 mov     r15, [rbx]
.text:00000000000093EF                 mov     rdi, rbp
.text:00000000000093F2                 mov     rsi, r15
.text:00000000000093F5                 call    safe_hasher
.text:00000000000093FA                 cmp     qword ptr [rax], 0
.text:00000000000093FE                 mov     rdx, [rbx+8]
.text:0000000000009402                 jnz     short loc_93D8
.text:0000000000009404                 mov     [rax], r15
.text:0000000000009407                 add     qword ptr [rbp+18h], 1
.text:000000000000940C                 test    rdx, rdx
.text:000000000000940F                 mov     qword ptr [rbx], 0
.text:0000000000009416                 mov     rax, [rbp+48h]
.text:000000000000941A                 mov     [rbx+8], rax
.text:000000000000941E                 mov     [rbp+48h], rbx
.text:0000000000009422                 mov     rbx, rdx
.text:0000000000009425                 jnz     short loc_93EC
.text:0000000000009427
.text:0000000000009427 loc_9427:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000009427                 mov     r15, [r12]
.text:000000000000942B
.text:000000000000942B loc_942B:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000942B                 test    r14b, r14b
.text:000000000000942E                 mov     qword ptr [r12+8], 0
.text:0000000000009437                 jnz     short loc_947A
.text:0000000000009439                 mov     rsi, r15
.text:000000000000943C                 mov     rdi, rbp
.text:000000000000943F                 call    safe_hasher
.text:0000000000009444                 cmp     qword ptr [rax], 0
.text:0000000000009448                 mov     rbx, rax
.text:000000000000944B                 jz      short loc_94A0
.text:000000000000944D                 mov     rax, [rbp+48h]
.text:0000000000009451                 test    rax, rax
.text:0000000000009454                 jz      short loc_94B0
.text:0000000000009456                 mov     rdx, [rax+8]
.text:000000000000945A                 mov     [rbp+48h], rdx
.text:000000000000945E
.text:000000000000945E loc_945E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000945E                 mov     rdx, [rbx+8]
.text:0000000000009462                 mov     [rax], r15
.text:0000000000009465                 mov     [rax+8], rdx
.text:0000000000009469                 mov     [rbx+8], rax
.text:000000000000946D
.text:000000000000946D loc_946D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000946D                 mov     qword ptr [r12], 0
.text:0000000000009475                 sub     qword ptr [r13+18h], 1
.text:000000000000947A
.text:000000000000947A loc_947A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000947A                                         ; transfer_entries+A7↑j
.text:000000000000947A                 add     r12, 10h
.text:000000000000947E                 cmp     [r13+8], r12
.text:0000000000009482                 ja      loc_93B8
.text:0000000000009488
.text:0000000000009488 loc_9488:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000009488                 add     rsp, 8
.text:000000000000948C                 mov     eax, 1
.text:0000000000009491                 pop     rbx
.text:0000000000009492                 pop     rbp
.text:0000000000009493                 pop     r12
.text:0000000000009495                 pop     r13
.text:0000000000009497                 pop     r14
.text:0000000000009499                 pop     r15
.text:000000000000949B                 retn
.text:000000000000949B ; ---------------------------------------------------------------------------
.text:000000000000949C                 align 20h
.text:00000000000094A0
.text:00000000000094A0 loc_94A0:                               ; CODE XREF: transfer_entries+BB↑j
.text:00000000000094A0                 mov     [rax], r15
.text:00000000000094A3                 add     qword ptr [rbp+18h], 1
.text:00000000000094A8                 jmp     short loc_946D
.text:00000000000094A8 ; ---------------------------------------------------------------------------
.text:00000000000094AA                 align 10h
.text:00000000000094B0
.text:00000000000094B0 loc_94B0:                               ; CODE XREF: transfer_entries+C4↑j
.text:00000000000094B0                 mov     edi, 10h        ; size
.text:00000000000094B5                 call    _malloc
.text:00000000000094BA                 test    rax, rax
.text:00000000000094BD                 jnz     short loc_945E
.text:00000000000094BF                 add     rsp, 8
.text:00000000000094C3                 xor     eax, eax
.text:00000000000094C5                 pop     rbx
.text:00000000000094C6                 pop     rbp
.text:00000000000094C7                 pop     r12
.text:00000000000094C9                 pop     r13
.text:00000000000094CB                 pop     r14
.text:00000000000094CD                 pop     r15
.text:00000000000094CF                 retn
.text:00000000000094CF ; } // starts at 9390
.text:00000000000094CF transfer_entries endp
.text:00000000000094CF
.text:00000000000094D0
.text:00000000000094D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094D0
.text:00000000000094D0
.text:00000000000094D0                 public hash_get_n_buckets
.text:00000000000094D0 hash_get_n_buckets proc near
.text:00000000000094D0 ; __unwind {
.text:00000000000094D0                 mov     rax, [rdi+10h]
.text:00000000000094D4                 retn
.text:00000000000094D4 ; } // starts at 94D0
.text:00000000000094D4 hash_get_n_buckets endp
.text:00000000000094D4
.text:00000000000094D4 ; ---------------------------------------------------------------------------
.text:00000000000094D5                 align 20h
.text:00000000000094E0
.text:00000000000094E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094E0
.text:00000000000094E0
.text:00000000000094E0                 public hash_get_n_buckets_used
.text:00000000000094E0 hash_get_n_buckets_used proc near
.text:00000000000094E0 ; __unwind {
.text:00000000000094E0                 mov     rax, [rdi+18h]
.text:00000000000094E4                 retn
.text:00000000000094E4 ; } // starts at 94E0
.text:00000000000094E4 hash_get_n_buckets_used endp
.text:00000000000094E4
.text:00000000000094E4 ; ---------------------------------------------------------------------------
.text:00000000000094E5                 align 10h
.text:00000000000094F0
.text:00000000000094F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094F0
.text:00000000000094F0
.text:00000000000094F0                 public hash_get_n_entries
.text:00000000000094F0 hash_get_n_entries proc near
.text:00000000000094F0 ; __unwind {
.text:00000000000094F0                 mov     rax, [rdi+20h]
.text:00000000000094F4                 retn
.text:00000000000094F4 ; } // starts at 94F0
.text:00000000000094F4 hash_get_n_entries endp
.text:00000000000094F4
.text:00000000000094F4 ; ---------------------------------------------------------------------------
.text:00000000000094F5                 align 20h
.text:0000000000009500
.text:0000000000009500 ; =============== S U B R O U T I N E =======================================
.text:0000000000009500
.text:0000000000009500 ; Attributes: info_from_lumina
.text:0000000000009500
.text:0000000000009500 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:0000000000009500                 public hash_get_max_bucket_length
.text:0000000000009500 hash_get_max_bucket_length proc near
.text:0000000000009500 ; __unwind {
.text:0000000000009500                 mov     rsi, [rdi]
.text:0000000000009503                 mov     rdi, [rdi+8]
.text:0000000000009507                 xor     eax, eax
.text:0000000000009509                 cmp     rsi, rdi
.text:000000000000950C                 jnb     short locret_9547
.text:000000000000950E                 xchg    ax, ax
.text:0000000000009510
.text:0000000000009510 loc_9510:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000009510                 cmp     qword ptr [rsi], 0
.text:0000000000009514                 jz      short loc_953C
.text:0000000000009516                 mov     rdx, [rsi+8]
.text:000000000000951A                 mov     ecx, 1
.text:000000000000951F                 test    rdx, rdx
.text:0000000000009522                 jz      short loc_9535
.text:0000000000009524                 nop     dword ptr [rax+00h]
.text:0000000000009528
.text:0000000000009528 loc_9528:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000009528                 mov     rdx, [rdx+8]
.text:000000000000952C                 add     rcx, 1
.text:0000000000009530                 test    rdx, rdx
.text:0000000000009533                 jnz     short loc_9528
.text:0000000000009535
.text:0000000000009535 loc_9535:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000009535                 cmp     rax, rcx
.text:0000000000009538                 cmovb   rax, rcx
.text:000000000000953C
.text:000000000000953C loc_953C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000953C                 add     rsi, 10h
.text:0000000000009540                 cmp     rsi, rdi
.text:0000000000009543                 jb      short loc_9510
.text:0000000000009545                 rep retn
.text:0000000000009547 ; ---------------------------------------------------------------------------
.text:0000000000009547
.text:0000000000009547 locret_9547:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000009547                 rep retn
.text:0000000000009547 ; } // starts at 9500
.text:0000000000009547 hash_get_max_bucket_length endp
.text:0000000000009547
.text:0000000000009547 ; ---------------------------------------------------------------------------
.text:0000000000009549                 align 10h
.text:0000000000009550
.text:0000000000009550 ; =============== S U B R O U T I N E =======================================
.text:0000000000009550
.text:0000000000009550 ; Attributes: info_from_lumina
.text:0000000000009550
.text:0000000000009550 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000009550                 public hash_table_ok
.text:0000000000009550 hash_table_ok   proc near
.text:0000000000009550 ; __unwind {
.text:0000000000009550                 mov     rcx, [rdi]
.text:0000000000009553                 mov     r8, [rdi+8]
.text:0000000000009557                 xor     edx, edx
.text:0000000000009559                 xor     esi, esi
.text:000000000000955B                 cmp     rcx, r8
.text:000000000000955E                 jnb     short loc_9596
.text:0000000000009560
.text:0000000000009560 loc_9560:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000009560                 cmp     qword ptr [rcx], 0
.text:0000000000009564                 jz      short loc_958D
.text:0000000000009566                 mov     rax, [rcx+8]
.text:000000000000956A                 add     rsi, 1
.text:000000000000956E                 add     rdx, 1
.text:0000000000009572                 test    rax, rax
.text:0000000000009575                 jz      short loc_958D
.text:0000000000009577                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009580
.text:0000000000009580 loc_9580:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000009580                 mov     rax, [rax+8]
.text:0000000000009584                 add     rdx, 1
.text:0000000000009588                 test    rax, rax
.text:000000000000958B                 jnz     short loc_9580
.text:000000000000958D
.text:000000000000958D loc_958D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000958D                                         ; hash_table_ok+25↑j
.text:000000000000958D                 add     rcx, 10h
.text:0000000000009591                 cmp     rcx, r8
.text:0000000000009594                 jb      short loc_9560
.text:0000000000009596
.text:0000000000009596 loc_9596:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000009596                 xor     eax, eax
.text:0000000000009598                 cmp     [rdi+18h], rsi
.text:000000000000959C                 jz      short loc_95A0
.text:000000000000959E                 rep retn
.text:00000000000095A0 ; ---------------------------------------------------------------------------
.text:00000000000095A0
.text:00000000000095A0 loc_95A0:                               ; CODE XREF: hash_table_ok+4C↑j
.text:00000000000095A0                 cmp     [rdi+20h], rdx
.text:00000000000095A4                 setz    al
.text:00000000000095A7                 retn
.text:00000000000095A7 ; } // starts at 9550
.text:00000000000095A7 hash_table_ok   endp
.text:00000000000095A7
.text:00000000000095A7 ; ---------------------------------------------------------------------------
.text:00000000000095A8                 align 10h
.text:00000000000095B0
.text:00000000000095B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095B0
.text:00000000000095B0 ; Attributes: info_from_lumina
.text:00000000000095B0
.text:00000000000095B0 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:00000000000095B0                 public hash_print_statistics
.text:00000000000095B0 hash_print_statistics proc near
.text:00000000000095B0 ; __unwind {
.text:00000000000095B0                 push    r13
.text:00000000000095B2                 push    r12
.text:00000000000095B4                 mov     r12, rsi
.text:00000000000095B7                 push    rbp
.text:00000000000095B8                 push    rbx
.text:00000000000095B9                 xor     ebx, ebx
.text:00000000000095BB                 sub     rsp, 8
.text:00000000000095BF                 mov     rsi, [rdi]
.text:00000000000095C2                 mov     rcx, [rdi+20h]
.text:00000000000095C6                 mov     rbp, [rdi+10h]
.text:00000000000095CA                 mov     r13, [rdi+18h]
.text:00000000000095CE                 mov     rdi, [rdi+8]
.text:00000000000095D2                 cmp     rsi, rdi
.text:00000000000095D5                 jnb     short loc_9615
.text:00000000000095D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000095E0
.text:00000000000095E0 loc_95E0:                               ; CODE XREF: hash_print_statistics+63↓j
.text:00000000000095E0                 cmp     qword ptr [rsi], 0
.text:00000000000095E4                 jz      short loc_960C
.text:00000000000095E6                 mov     rax, [rsi+8]
.text:00000000000095EA                 mov     edx, 1
.text:00000000000095EF                 test    rax, rax
.text:00000000000095F2                 jz      short loc_9605
.text:00000000000095F4                 nop     dword ptr [rax+00h]
.text:00000000000095F8
.text:00000000000095F8 loc_95F8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:00000000000095F8                 mov     rax, [rax+8]
.text:00000000000095FC                 add     rdx, 1
.text:0000000000009600                 test    rax, rax
.text:0000000000009603                 jnz     short loc_95F8
.text:0000000000009605
.text:0000000000009605 loc_9605:                               ; CODE XREF: hash_print_statistics+42↑j
.text:0000000000009605                 cmp     rbx, rdx
.text:0000000000009608                 cmovb   rbx, rdx
.text:000000000000960C
.text:000000000000960C loc_960C:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000960C                 add     rsi, 10h
.text:0000000000009610                 cmp     rsi, rdi
.text:0000000000009613                 jb      short loc_95E0
.text:0000000000009615
.text:0000000000009615 loc_9615:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000009615                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000961C                 mov     esi, 1
.text:0000000000009621                 mov     rdi, r12
.text:0000000000009624                 xor     eax, eax
.text:0000000000009626                 call    ___fprintf_chk
.text:000000000000962B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000009632                 xor     eax, eax
.text:0000000000009634                 mov     rcx, rbp
.text:0000000000009637                 mov     esi, 1
.text:000000000000963C                 mov     rdi, r12
.text:000000000000963F                 call    ___fprintf_chk
.text:0000000000009644                 test    r13, r13
.text:0000000000009647                 js      short loc_96B0
.text:0000000000009649                 pxor    xmm0, xmm0
.text:000000000000964D                 test    rbp, rbp
.text:0000000000009650                 cvtsi2sd xmm0, r13
.text:0000000000009655                 mulsd   xmm0, cs:qword_C618
.text:000000000000965D                 js      short loc_96D9
.text:000000000000965F
.text:000000000000965F loc_965F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000965F                 pxor    xmm1, xmm1
.text:0000000000009663                 cvtsi2sd xmm1, rbp
.text:0000000000009668
.text:0000000000009668 loc_9668:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000009668                 divsd   xmm0, xmm1
.text:000000000000966C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000009673                 mov     rcx, r13
.text:0000000000009676                 mov     rdi, r12
.text:0000000000009679                 mov     esi, 1
.text:000000000000967E                 mov     eax, 1
.text:0000000000009683                 call    ___fprintf_chk
.text:0000000000009688                 add     rsp, 8
.text:000000000000968C                 mov     rcx, rbx
.text:000000000000968F                 mov     rdi, r12
.text:0000000000009692                 pop     rbx
.text:0000000000009693                 pop     rbp
.text:0000000000009694                 pop     r12
.text:0000000000009696                 pop     r13
.text:0000000000009698                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000969F                 mov     esi, 1
.text:00000000000096A4                 xor     eax, eax
.text:00000000000096A6                 jmp     ___fprintf_chk
.text:00000000000096A6 ; ---------------------------------------------------------------------------
.text:00000000000096AB                 align 10h
.text:00000000000096B0
.text:00000000000096B0 loc_96B0:                               ; CODE XREF: hash_print_statistics+97↑j
.text:00000000000096B0                 mov     rax, r13
.text:00000000000096B3                 mov     rdx, r13
.text:00000000000096B6                 pxor    xmm0, xmm0
.text:00000000000096BA                 shr     rax, 1
.text:00000000000096BD                 and     edx, 1
.text:00000000000096C0                 or      rax, rdx
.text:00000000000096C3                 test    rbp, rbp
.text:00000000000096C6                 cvtsi2sd xmm0, rax
.text:00000000000096CB                 addsd   xmm0, xmm0
.text:00000000000096CF                 mulsd   xmm0, cs:qword_C618
.text:00000000000096D7                 jns     short loc_965F
.text:00000000000096D9
.text:00000000000096D9 loc_96D9:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:00000000000096D9                 mov     rax, rbp
.text:00000000000096DC                 pxor    xmm1, xmm1
.text:00000000000096E0                 shr     rax, 1
.text:00000000000096E3                 and     ebp, 1
.text:00000000000096E6                 or      rax, rbp
.text:00000000000096E9                 cvtsi2sd xmm1, rax
.text:00000000000096EE                 addsd   xmm1, xmm1
.text:00000000000096F2                 jmp     loc_9668
.text:00000000000096F2 ; } // starts at 95B0
.text:00000000000096F2 hash_print_statistics endp
.text:00000000000096F2
.text:00000000000096F2 ; ---------------------------------------------------------------------------
.text:00000000000096F7                 align 20h
.text:0000000000009700
.text:0000000000009700 ; =============== S U B R O U T I N E =======================================
.text:0000000000009700
.text:0000000000009700 ; Attributes: info_from_lumina
.text:0000000000009700
.text:0000000000009700 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:0000000000009700                 public hash_lookup
.text:0000000000009700 hash_lookup     proc near               ; CODE XREF: filesystem_type+47↑p
.text:0000000000009700 ; __unwind {
.text:0000000000009700                 push    r12
.text:0000000000009702                 push    rbp
.text:0000000000009703                 mov     r12, rdi
.text:0000000000009706                 push    rbx
.text:0000000000009707                 mov     rbp, rsi
.text:000000000000970A                 call    safe_hasher
.text:000000000000970F                 mov     rsi, [rax]
.text:0000000000009712                 test    rsi, rsi
.text:0000000000009715                 jz      short loc_973D
.text:0000000000009717                 mov     rbx, rax
.text:000000000000971A                 jmp     short loc_9723
.text:000000000000971A ; ---------------------------------------------------------------------------
.text:000000000000971C                 align 20h
.text:0000000000009720
.text:0000000000009720 loc_9720:                               ; CODE XREF: hash_lookup+3B↓j
.text:0000000000009720                 mov     rsi, [rbx]
.text:0000000000009723
.text:0000000000009723 loc_9723:                               ; CODE XREF: hash_lookup+1A↑j
.text:0000000000009723                 cmp     rsi, rbp
.text:0000000000009726                 jz      short loc_973F
.text:0000000000009728                 mov     rdi, rbp
.text:000000000000972B                 call    qword ptr [r12+38h]
.text:0000000000009730                 test    al, al
.text:0000000000009732                 jnz     short loc_9750
.text:0000000000009734                 mov     rbx, [rbx+8]
.text:0000000000009738                 test    rbx, rbx
.text:000000000000973B                 jnz     short loc_9720
.text:000000000000973D
.text:000000000000973D loc_973D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000973D                 xor     esi, esi
.text:000000000000973F
.text:000000000000973F loc_973F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000973F                 pop     rbx
.text:0000000000009740                 mov     rax, rsi
.text:0000000000009743                 pop     rbp
.text:0000000000009744                 pop     r12
.text:0000000000009746                 retn
.text:0000000000009746 ; ---------------------------------------------------------------------------
.text:0000000000009747                 align 10h
.text:0000000000009750
.text:0000000000009750 loc_9750:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000009750                 mov     rsi, [rbx]
.text:0000000000009753                 pop     rbx
.text:0000000000009754                 pop     rbp
.text:0000000000009755                 mov     rax, rsi
.text:0000000000009758                 pop     r12
.text:000000000000975A                 retn
.text:000000000000975A ; } // starts at 9700
.text:000000000000975A hash_lookup     endp
.text:000000000000975A
.text:000000000000975A ; ---------------------------------------------------------------------------
.text:000000000000975B                 align 20h
.text:0000000000009760
.text:0000000000009760 ; =============== S U B R O U T I N E =======================================
.text:0000000000009760
.text:0000000000009760 ; Attributes: info_from_lumina
.text:0000000000009760
.text:0000000000009760 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000009760                 public hash_get_first
.text:0000000000009760 hash_get_first  proc near
.text:0000000000009760 ; __unwind {
.text:0000000000009760                 cmp     qword ptr [rdi+20h], 0
.text:0000000000009765                 jz      short loc_9793
.text:0000000000009767                 mov     rdx, [rdi]
.text:000000000000976A                 mov     rcx, [rdi+8]
.text:000000000000976E                 cmp     rdx, rcx
.text:0000000000009771                 jnb     short loc_9798
.text:0000000000009773                 mov     rax, [rdx]
.text:0000000000009776                 test    rax, rax
.text:0000000000009779                 jnz     short locret_9796
.text:000000000000977B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009780
.text:0000000000009780 loc_9780:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000009780                 add     rdx, 10h
.text:0000000000009784                 cmp     rdx, rcx
.text:0000000000009787                 jnb     short loc_9798
.text:0000000000009789                 mov     rax, [rdx]
.text:000000000000978C                 test    rax, rax
.text:000000000000978F                 jz      short loc_9780
.text:0000000000009791                 rep retn
.text:0000000000009793 ; ---------------------------------------------------------------------------
.text:0000000000009793
.text:0000000000009793 loc_9793:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000009793                 xor     eax, eax
.text:0000000000009795                 retn
.text:0000000000009796 ; ---------------------------------------------------------------------------
.text:0000000000009796
.text:0000000000009796 locret_9796:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000009796                 rep retn
.text:0000000000009798 ; ---------------------------------------------------------------------------
.text:0000000000009798
.text:0000000000009798 loc_9798:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000009798                                         ; hash_get_first+27↑j
.text:0000000000009798                 sub     rsp, 8
.text:000000000000979C                 call    _abort
.text:000000000000979C ; } // starts at 9760
.text:000000000000979C hash_get_first  endp
.text:000000000000979C
.text:000000000000979C ; ---------------------------------------------------------------------------
.text:00000000000097A1                 align 10h
.text:00000000000097B0
.text:00000000000097B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000097B0
.text:00000000000097B0 ; Attributes: info_from_lumina
.text:00000000000097B0
.text:00000000000097B0 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:00000000000097B0                 public hash_get_next
.text:00000000000097B0 hash_get_next   proc near
.text:00000000000097B0 ; __unwind {
.text:00000000000097B0                 push    rbp
.text:00000000000097B1                 push    rbx
.text:00000000000097B2                 mov     rbp, rdi
.text:00000000000097B5                 mov     rbx, rsi
.text:00000000000097B8                 sub     rsp, 8
.text:00000000000097BC                 call    safe_hasher
.text:00000000000097C1                 mov     rdx, rax
.text:00000000000097C4                 mov     rcx, rax
.text:00000000000097C7                 mov     rax, [rdx]
.text:00000000000097CA                 mov     rdx, [rdx+8]
.text:00000000000097CE                 cmp     rax, rbx
.text:00000000000097D1                 jz      short loc_97E9
.text:00000000000097D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000097D8
.text:00000000000097D8 loc_97D8:                               ; CODE XREF: hash_get_next+37↓j
.text:00000000000097D8                 test    rdx, rdx
.text:00000000000097DB                 jz      short loc_97EE
.text:00000000000097DD                 mov     rax, [rdx]
.text:00000000000097E0                 mov     rdx, [rdx+8]
.text:00000000000097E4                 cmp     rax, rbx
.text:00000000000097E7                 jnz     short loc_97D8
.text:00000000000097E9
.text:00000000000097E9 loc_97E9:                               ; CODE XREF: hash_get_next+21↑j
.text:00000000000097E9                 test    rdx, rdx
.text:00000000000097EC                 jnz     short loc_9818
.text:00000000000097EE
.text:00000000000097EE loc_97EE:                               ; CODE XREF: hash_get_next+2B↑j
.text:00000000000097EE                 mov     rdx, [rbp+8]
.text:00000000000097F2                 jmp     short loc_9800
.text:00000000000097F2 ; ---------------------------------------------------------------------------
.text:00000000000097F4                 align 8
.text:00000000000097F8
.text:00000000000097F8 loc_97F8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000097F8                 mov     rax, [rcx]
.text:00000000000097FB                 test    rax, rax
.text:00000000000097FE                 jnz     short loc_980B
.text:0000000000009800
.text:0000000000009800 loc_9800:                               ; CODE XREF: hash_get_next+42↑j
.text:0000000000009800                 add     rcx, 10h
.text:0000000000009804                 cmp     rdx, rcx
.text:0000000000009807                 ja      short loc_97F8
.text:0000000000009809                 xor     eax, eax
.text:000000000000980B
.text:000000000000980B loc_980B:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000980B                 add     rsp, 8
.text:000000000000980F                 pop     rbx
.text:0000000000009810                 pop     rbp
.text:0000000000009811                 retn
.text:0000000000009811 ; ---------------------------------------------------------------------------
.text:0000000000009812                 align 8
.text:0000000000009818
.text:0000000000009818 loc_9818:                               ; CODE XREF: hash_get_next+3C↑j
.text:0000000000009818                 mov     rax, [rdx]
.text:000000000000981B                 add     rsp, 8
.text:000000000000981F                 pop     rbx
.text:0000000000009820                 pop     rbp
.text:0000000000009821                 retn
.text:0000000000009821 ; } // starts at 97B0
.text:0000000000009821 hash_get_next   endp
.text:0000000000009821
.text:0000000000009821 ; ---------------------------------------------------------------------------
.text:0000000000009822                 align 10h
.text:0000000000009830
.text:0000000000009830 ; =============== S U B R O U T I N E =======================================
.text:0000000000009830
.text:0000000000009830 ; Attributes: info_from_lumina
.text:0000000000009830
.text:0000000000009830 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000009830                 public hash_get_entries
.text:0000000000009830 hash_get_entries proc near
.text:0000000000009830 ; __unwind {
.text:0000000000009830                 mov     r9, [rdi]
.text:0000000000009833                 cmp     [rdi+8], r9
.text:0000000000009837                 jbe     short loc_9892
.text:0000000000009839                 xor     r8d, r8d
.text:000000000000983C
.text:000000000000983C loc_983C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000983C                 mov     rcx, [r9]
.text:000000000000983F                 test    rcx, rcx
.text:0000000000009842                 jz      short loc_987D
.text:0000000000009844                 cmp     rdx, r8
.text:0000000000009847                 jbe     short loc_9887
.text:0000000000009849                 mov     [rsi+r8*8], rcx
.text:000000000000984D                 mov     rcx, [r9+8]
.text:0000000000009851                 lea     rax, [r8+1]
.text:0000000000009855                 test    rcx, rcx
.text:0000000000009858                 jz      short loc_987A
.text:000000000000985A                 nop     word ptr [rax+rax+00h]
.text:0000000000009860
.text:0000000000009860 loc_9860:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000009860                 cmp     rdx, rax
.text:0000000000009863                 jz      short locret_9890
.text:0000000000009865                 mov     r8, [rcx]
.text:0000000000009868                 add     rax, 1
.text:000000000000986C                 mov     [rsi+rax*8-8], r8
.text:0000000000009871                 mov     rcx, [rcx+8]
.text:0000000000009875                 test    rcx, rcx
.text:0000000000009878                 jnz     short loc_9860
.text:000000000000987A
.text:000000000000987A loc_987A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000987A                 mov     r8, rax
.text:000000000000987D
.text:000000000000987D loc_987D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000987D                 add     r9, 10h
.text:0000000000009881                 cmp     [rdi+8], r9
.text:0000000000009885                 ja      short loc_983C
.text:0000000000009887
.text:0000000000009887 loc_9887:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000009887                 mov     rax, r8
.text:000000000000988A                 retn
.text:000000000000988A ; ---------------------------------------------------------------------------
.text:000000000000988B                 align 10h
.text:0000000000009890
.text:0000000000009890 locret_9890:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000009890                 rep retn
.text:0000000000009892 ; ---------------------------------------------------------------------------
.text:0000000000009892
.text:0000000000009892 loc_9892:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000009892                 xor     eax, eax
.text:0000000000009894                 retn
.text:0000000000009894 ; } // starts at 9830
.text:0000000000009894 hash_get_entries endp
.text:0000000000009894
.text:0000000000009894 ; ---------------------------------------------------------------------------
.text:0000000000009895                 align 20h
.text:00000000000098A0
.text:00000000000098A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098A0
.text:00000000000098A0 ; Attributes: info_from_lumina
.text:00000000000098A0
.text:00000000000098A0 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:00000000000098A0                 public hash_do_for_each
.text:00000000000098A0 hash_do_for_each proc near
.text:00000000000098A0 ; __unwind {
.text:00000000000098A0                 push    r15
.text:00000000000098A2                 push    r14
.text:00000000000098A4                 push    r13
.text:00000000000098A6                 push    r12
.text:00000000000098A8                 push    rbp
.text:00000000000098A9                 push    rbx
.text:00000000000098AA                 sub     rsp, 8
.text:00000000000098AE                 mov     r14, [rdi]
.text:00000000000098B1                 cmp     [rdi+8], r14
.text:00000000000098B5                 jbe     short loc_9906
.text:00000000000098B7                 mov     r13, rdx
.text:00000000000098BA                 mov     r12, rsi
.text:00000000000098BD                 mov     r15, rdi
.text:00000000000098C0                 xor     ebp, ebp
.text:00000000000098C2
.text:00000000000098C2 loc_98C2:                               ; CODE XREF: hash_do_for_each+52↓j
.text:00000000000098C2                 mov     rdi, [r14]
.text:00000000000098C5                 test    rdi, rdi
.text:00000000000098C8                 jz      short loc_98EA
.text:00000000000098CA                 mov     rbx, r14
.text:00000000000098CD                 jmp     short loc_98D3
.text:00000000000098CD ; ---------------------------------------------------------------------------
.text:00000000000098CF                 align 10h
.text:00000000000098D0
.text:00000000000098D0 loc_98D0:                               ; CODE XREF: hash_do_for_each+48↓j
.text:00000000000098D0                 mov     rdi, [rbx]
.text:00000000000098D3
.text:00000000000098D3 loc_98D3:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:00000000000098D3                 mov     rsi, r13
.text:00000000000098D6                 call    r12
.text:00000000000098D9                 test    al, al
.text:00000000000098DB                 jz      short loc_98F4
.text:00000000000098DD                 mov     rbx, [rbx+8]
.text:00000000000098E1                 add     rbp, 1
.text:00000000000098E5                 test    rbx, rbx
.text:00000000000098E8                 jnz     short loc_98D0
.text:00000000000098EA
.text:00000000000098EA loc_98EA:                               ; CODE XREF: hash_do_for_each+28↑j
.text:00000000000098EA                 add     r14, 10h
.text:00000000000098EE                 cmp     [r15+8], r14
.text:00000000000098F2                 ja      short loc_98C2
.text:00000000000098F4
.text:00000000000098F4 loc_98F4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000098F4                                         ; hash_do_for_each+68↓j
.text:00000000000098F4                 add     rsp, 8
.text:00000000000098F8                 mov     rax, rbp
.text:00000000000098FB                 pop     rbx
.text:00000000000098FC                 pop     rbp
.text:00000000000098FD                 pop     r12
.text:00000000000098FF                 pop     r13
.text:0000000000009901                 pop     r14
.text:0000000000009903                 pop     r15
.text:0000000000009905                 retn
.text:0000000000009906 ; ---------------------------------------------------------------------------
.text:0000000000009906
.text:0000000000009906 loc_9906:                               ; CODE XREF: hash_do_for_each+15↑j
.text:0000000000009906                 xor     ebp, ebp
.text:0000000000009908                 jmp     short loc_98F4
.text:0000000000009908 ; } // starts at 98A0
.text:0000000000009908 hash_do_for_each endp
.text:0000000000009908
.text:0000000000009908 ; ---------------------------------------------------------------------------
.text:000000000000990A                 align 10h
.text:0000000000009910
.text:0000000000009910 ; =============== S U B R O U T I N E =======================================
.text:0000000000009910
.text:0000000000009910 ; Attributes: info_from_lumina
.text:0000000000009910
.text:0000000000009910 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000009910                 public hash_string
.text:0000000000009910 hash_string     proc near
.text:0000000000009910 ; __unwind {
.text:0000000000009910                 movzx   ecx, byte ptr [rdi]
.text:0000000000009913                 xor     edx, edx
.text:0000000000009915                 test    cl, cl
.text:0000000000009917                 jz      short loc_993D
.text:0000000000009919                 nop     dword ptr [rax+00000000h]
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000009920                 mov     rax, rdx
.text:0000000000009923                 add     rdi, 1
.text:0000000000009927                 shl     rax, 5
.text:000000000000992B                 sub     rax, rdx
.text:000000000000992E                 xor     edx, edx
.text:0000000000009930                 add     rax, rcx
.text:0000000000009933                 movzx   ecx, byte ptr [rdi]
.text:0000000000009936                 div     rsi
.text:0000000000009939                 test    cl, cl
.text:000000000000993B                 jnz     short loc_9920
.text:000000000000993D
.text:000000000000993D loc_993D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000993D                 mov     rax, rdx
.text:0000000000009940                 retn
.text:0000000000009940 ; } // starts at 9910
.text:0000000000009940 hash_string     endp
.text:0000000000009940
.text:0000000000009940 ; ---------------------------------------------------------------------------
.text:0000000000009941                 align 10h
.text:0000000000009950
.text:0000000000009950 ; =============== S U B R O U T I N E =======================================
.text:0000000000009950
.text:0000000000009950 ; Attributes: info_from_lumina
.text:0000000000009950
.text:0000000000009950 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000009950                 public hash_reset_tuning
.text:0000000000009950 hash_reset_tuning proc near
.text:0000000000009950 ; __unwind {
.text:0000000000009950                 mov     rax, 3F80000000000000h
.text:000000000000995A                 mov     byte ptr [rdi+10h], 0
.text:000000000000995E                 mov     [rdi], rax
.text:0000000000009961                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000996B                 mov     [rdi+8], rax
.text:000000000000996F                 retn
.text:000000000000996F ; } // starts at 9950
.text:000000000000996F hash_reset_tuning endp
.text:000000000000996F
.text:0000000000009970
.text:0000000000009970 ; =============== S U B R O U T I N E =======================================
.text:0000000000009970
.text:0000000000009970 ; Attributes: info_from_lumina
.text:0000000000009970
.text:0000000000009970 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000009970                 public hash_initialize
.text:0000000000009970 hash_initialize proc near               ; CODE XREF: filesystem_type+7C↑p
.text:0000000000009970                                         ; setup_dir_isra_4+28↑p
.text:0000000000009970 ; __unwind {
.text:0000000000009970                 push    r15
.text:0000000000009972                 push    r14
.text:0000000000009974                 lea     rax, raw_hasher
.text:000000000000997B                 push    r13
.text:000000000000997D                 push    r12
.text:000000000000997F                 mov     r12, rdx
.text:0000000000009982                 push    rbp
.text:0000000000009983                 push    rbx
.text:0000000000009984                 mov     r13, rcx
.text:0000000000009987                 mov     rbp, rdi
.text:000000000000998A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000998F                 mov     r15, rsi
.text:0000000000009992                 sub     rsp, 8
.text:0000000000009996                 test    rdx, rdx
.text:0000000000009999                 mov     r14, r8
.text:000000000000999C                 cmovz   r12, rax
.text:00000000000099A0                 lea     rax, raw_comparator
.text:00000000000099A7                 test    rcx, rcx
.text:00000000000099AA                 cmovz   r13, rax
.text:00000000000099AE                 call    _malloc
.text:00000000000099B3                 test    rax, rax
.text:00000000000099B6                 mov     rbx, rax
.text:00000000000099B9                 jz      loc_9A6A
.text:00000000000099BF                 test    r15, r15
.text:00000000000099C2                 lea     rdi, [rax+28h]
.text:00000000000099C6                 jz      loc_9A80
.text:00000000000099CC                 mov     [rax+28h], r15
.text:00000000000099D0                 call    check_tuning
.text:00000000000099D5                 test    al, al
.text:00000000000099D7                 jz      loc_9A60
.text:00000000000099DD                 cmp     byte ptr [r15+10h], 0
.text:00000000000099E2                 jz      loc_9AE0
.text:00000000000099E8
.text:00000000000099E8 loc_99E8:                               ; CODE XREF: hash_initialize+16A↓j
.text:00000000000099E8                                         ; hash_initialize+1A5↓j
.text:00000000000099E8                 mov     rdi, rbp
.text:00000000000099EB                 call    next_prime
.text:00000000000099F0                 mov     edx, 8
.text:00000000000099F5                 mov     rbp, rax
.text:00000000000099F8                 xor     ecx, ecx
.text:00000000000099FA                 mov     rax, rdx
.text:00000000000099FD                 mul     rbp
.text:0000000000009A00                 jo      loc_9B1A
.text:0000000000009A06
.text:0000000000009A06 loc_9A06:                               ; CODE XREF: hash_initialize+1AF↓j
.text:0000000000009A06                 test    rax, rax
.text:0000000000009A09                 js      short loc_9A60
.text:0000000000009A0B                 test    rcx, rcx
.text:0000000000009A0E                 jnz     short loc_9A60
.text:0000000000009A10                 test    rbp, rbp
.text:0000000000009A13                 mov     [rbx+10h], rbp
.text:0000000000009A17                 jz      short loc_9A60
.text:0000000000009A19                 mov     esi, 10h        ; size
.text:0000000000009A1E                 mov     rdi, rbp        ; nmemb
.text:0000000000009A21                 call    _calloc
.text:0000000000009A26                 test    rax, rax
.text:0000000000009A29                 mov     [rbx], rax
.text:0000000000009A2C                 jz      short loc_9A60
.text:0000000000009A2E                 shl     rbp, 4
.text:0000000000009A32                 mov     qword ptr [rbx+18h], 0
.text:0000000000009A3A                 mov     qword ptr [rbx+20h], 0
.text:0000000000009A42                 add     rbp, rax
.text:0000000000009A45                 mov     [rbx+30h], r12
.text:0000000000009A49                 mov     [rbx+38h], r13
.text:0000000000009A4D                 mov     [rbx+8], rbp
.text:0000000000009A51                 mov     [rbx+40h], r14
.text:0000000000009A55                 mov     qword ptr [rbx+48h], 0
.text:0000000000009A5D                 jmp     short loc_9A6A
.text:0000000000009A5D ; ---------------------------------------------------------------------------
.text:0000000000009A5F                 align 20h
.text:0000000000009A60
.text:0000000000009A60 loc_9A60:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000009A60                                         ; hash_initialize+99↑j ...
.text:0000000000009A60                 mov     rdi, rbx        ; ptr
.text:0000000000009A63                 xor     ebx, ebx
.text:0000000000009A65                 call    free
.text:0000000000009A6A
.text:0000000000009A6A loc_9A6A:                               ; CODE XREF: hash_initialize+49↑j
.text:0000000000009A6A                                         ; hash_initialize+ED↑j
.text:0000000000009A6A                 add     rsp, 8
.text:0000000000009A6E                 mov     rax, rbx
.text:0000000000009A71                 pop     rbx
.text:0000000000009A72                 pop     rbp
.text:0000000000009A73                 pop     r12
.text:0000000000009A75                 pop     r13
.text:0000000000009A77                 pop     r14
.text:0000000000009A79                 pop     r15
.text:0000000000009A7B                 retn
.text:0000000000009A7B ; ---------------------------------------------------------------------------
.text:0000000000009A7C                 align 20h
.text:0000000000009A80
.text:0000000000009A80 loc_9A80:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000009A80                 lea     rax, default_tuning
.text:0000000000009A87                 mov     [rbx+28h], rax
.text:0000000000009A8B                 call    check_tuning
.text:0000000000009A90                 test    al, al
.text:0000000000009A92                 movss   xmm1, cs:dword_C608
.text:0000000000009A9A                 jz      short loc_9A60
.text:0000000000009A9C                 test    rbp, rbp
.text:0000000000009A9F                 js      short loc_9AEB
.text:0000000000009AA1
.text:0000000000009AA1 loc_9AA1:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000009AA1                 pxor    xmm0, xmm0
.text:0000000000009AA5                 cvtsi2ss xmm0, rbp
.text:0000000000009AAA
.text:0000000000009AAA loc_9AAA:                               ; CODE XREF: hash_initialize+194↓j
.text:0000000000009AAA                 divss   xmm0, xmm1
.text:0000000000009AAE                 ucomiss xmm0, cs:dword_C60C
.text:0000000000009AB5                 jnb     short loc_9A60
.text:0000000000009AB7                 ucomiss xmm0, cs:dword_C610
.text:0000000000009ABE                 jb      short loc_9B10
.text:0000000000009AC0                 subss   xmm0, cs:dword_C610
.text:0000000000009AC8                 mov     rax, 8000000000000000h
.text:0000000000009AD2                 cvttss2si rbp, xmm0
.text:0000000000009AD7                 xor     rbp, rax
.text:0000000000009ADA                 jmp     loc_99E8
.text:0000000000009ADA ; ---------------------------------------------------------------------------
.text:0000000000009ADF                 align 20h
.text:0000000000009AE0
.text:0000000000009AE0 loc_9AE0:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000009AE0                 test    rbp, rbp
.text:0000000000009AE3                 movss   xmm1, dword ptr [r15+8]
.text:0000000000009AE9                 jns     short loc_9AA1
.text:0000000000009AEB
.text:0000000000009AEB loc_9AEB:                               ; CODE XREF: hash_initialize+12F↑j
.text:0000000000009AEB                 mov     rax, rbp
.text:0000000000009AEE                 pxor    xmm0, xmm0
.text:0000000000009AF2                 shr     rax, 1
.text:0000000000009AF5                 and     ebp, 1
.text:0000000000009AF8                 or      rax, rbp
.text:0000000000009AFB                 cvtsi2ss xmm0, rax
.text:0000000000009B00                 addss   xmm0, xmm0
.text:0000000000009B04                 jmp     short loc_9AAA
.text:0000000000009B04 ; ---------------------------------------------------------------------------
.text:0000000000009B06                 align 10h
.text:0000000000009B10
.text:0000000000009B10 loc_9B10:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000009B10                 cvttss2si rbp, xmm0
.text:0000000000009B15                 jmp     loc_99E8
.text:0000000000009B1A ; ---------------------------------------------------------------------------
.text:0000000000009B1A
.text:0000000000009B1A loc_9B1A:                               ; CODE XREF: hash_initialize+90↑j
.text:0000000000009B1A                 mov     ecx, 1
.text:0000000000009B1F                 jmp     loc_9A06
.text:0000000000009B1F ; } // starts at 9970
.text:0000000000009B1F hash_initialize endp
.text:0000000000009B1F
.text:0000000000009B1F ; ---------------------------------------------------------------------------
.text:0000000000009B24                 align 10h
.text:0000000000009B30
.text:0000000000009B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B30
.text:0000000000009B30 ; Attributes: info_from_lumina
.text:0000000000009B30
.text:0000000000009B30 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000009B30                 public hash_clear
.text:0000000000009B30 hash_clear      proc near
.text:0000000000009B30 ; __unwind {
.text:0000000000009B30                 push    r12
.text:0000000000009B32                 push    rbp
.text:0000000000009B33                 mov     rbp, rdi
.text:0000000000009B36                 push    rbx
.text:0000000000009B37                 mov     r12, [rdi]
.text:0000000000009B3A                 cmp     r12, [rdi+8]
.text:0000000000009B3E                 jnb     short loc_9BAB
.text:0000000000009B40
.text:0000000000009B40 loc_9B40:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000009B40                 cmp     qword ptr [r12], 0
.text:0000000000009B45                 jz      short loc_9BA1
.text:0000000000009B47                 mov     rbx, [r12+8]
.text:0000000000009B4C                 mov     rax, [rbp+40h]
.text:0000000000009B50                 test    rbx, rbx
.text:0000000000009B53                 jz      short loc_9B85
.text:0000000000009B55                 nop     dword ptr [rax]
.text:0000000000009B58
.text:0000000000009B58 loc_9B58:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000009B58                 test    rax, rax
.text:0000000000009B5B                 jz      short loc_9B66
.text:0000000000009B5D                 mov     rdi, [rbx]
.text:0000000000009B60                 call    rax
.text:0000000000009B62                 mov     rax, [rbp+40h]
.text:0000000000009B66
.text:0000000000009B66 loc_9B66:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000009B66                 mov     rdx, [rbx+8]
.text:0000000000009B6A                 mov     rcx, [rbp+48h]
.text:0000000000009B6E                 mov     qword ptr [rbx], 0
.text:0000000000009B75                 test    rdx, rdx
.text:0000000000009B78                 mov     [rbx+8], rcx
.text:0000000000009B7C                 mov     [rbp+48h], rbx
.text:0000000000009B80                 mov     rbx, rdx
.text:0000000000009B83                 jnz     short loc_9B58
.text:0000000000009B85
.text:0000000000009B85 loc_9B85:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000009B85                 test    rax, rax
.text:0000000000009B88                 jz      short loc_9B90
.text:0000000000009B8A                 mov     rdi, [r12]
.text:0000000000009B8E                 call    rax
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000009B90                 mov     qword ptr [r12], 0
.text:0000000000009B98                 mov     qword ptr [r12+8], 0
.text:0000000000009BA1
.text:0000000000009BA1 loc_9BA1:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000009BA1                 add     r12, 10h
.text:0000000000009BA5                 cmp     [rbp+8], r12
.text:0000000000009BA9                 ja      short loc_9B40
.text:0000000000009BAB
.text:0000000000009BAB loc_9BAB:                               ; CODE XREF: hash_clear+E↑j
.text:0000000000009BAB                 mov     qword ptr [rbp+18h], 0
.text:0000000000009BB3                 mov     qword ptr [rbp+20h], 0
.text:0000000000009BBB                 pop     rbx
.text:0000000000009BBC                 pop     rbp
.text:0000000000009BBD                 pop     r12
.text:0000000000009BBF                 retn
.text:0000000000009BBF ; } // starts at 9B30
.text:0000000000009BBF hash_clear      endp
.text:0000000000009BBF
.text:0000000000009BC0
.text:0000000000009BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BC0
.text:0000000000009BC0 ; Attributes: info_from_lumina
.text:0000000000009BC0
.text:0000000000009BC0 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000009BC0                 public hash_free
.text:0000000000009BC0 hash_free       proc near               ; CODE XREF: rpl_fts_close+9A↑p
.text:0000000000009BC0                                         ; rpl_fts_close+B1↑p ...
.text:0000000000009BC0 ; __unwind {
.text:0000000000009BC0                 push    r12
.text:0000000000009BC2                 push    rbp
.text:0000000000009BC3                 mov     r12, rdi
.text:0000000000009BC6                 push    rbx
.text:0000000000009BC7                 cmp     qword ptr [rdi+40h], 0
.text:0000000000009BCC                 mov     rbp, [rdi]
.text:0000000000009BCF                 mov     rax, [rdi+8]
.text:0000000000009BD3                 jz      short loc_9C23
.text:0000000000009BD5                 cmp     qword ptr [rdi+20h], 0
.text:0000000000009BDA                 jz      short loc_9C23
.text:0000000000009BDC                 cmp     rbp, rax
.text:0000000000009BDF                 jnb     short loc_9C5C
.text:0000000000009BE1                 nop     dword ptr [rax+00000000h]
.text:0000000000009BE8
.text:0000000000009BE8 loc_9BE8:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000009BE8                 mov     rdi, [rbp+0]
.text:0000000000009BEC                 test    rdi, rdi
.text:0000000000009BEF                 jz      short loc_9C16
.text:0000000000009BF1                 mov     rbx, rbp
.text:0000000000009BF4                 jmp     short loc_9C03
.text:0000000000009BF4 ; ---------------------------------------------------------------------------
.text:0000000000009BF6                 align 20h
.text:0000000000009C00
.text:0000000000009C00 loc_9C00:                               ; CODE XREF: hash_free+4F↓j
.text:0000000000009C00                 mov     rdi, [rbx]
.text:0000000000009C03
.text:0000000000009C03 loc_9C03:                               ; CODE XREF: hash_free+34↑j
.text:0000000000009C03                 call    qword ptr [r12+40h]
.text:0000000000009C08                 mov     rbx, [rbx+8]
.text:0000000000009C0C                 test    rbx, rbx
.text:0000000000009C0F                 jnz     short loc_9C00
.text:0000000000009C11                 mov     rax, [r12+8]
.text:0000000000009C16
.text:0000000000009C16 loc_9C16:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000009C16                 add     rbp, 10h
.text:0000000000009C1A                 cmp     rax, rbp
.text:0000000000009C1D                 ja      short loc_9BE8
.text:0000000000009C1F                 mov     rbp, [r12]
.text:0000000000009C23
.text:0000000000009C23 loc_9C23:                               ; CODE XREF: hash_free+13↑j
.text:0000000000009C23                                         ; hash_free+1A↑j
.text:0000000000009C23                 cmp     rbp, rax
.text:0000000000009C26                 jnb     short loc_9C5C
.text:0000000000009C28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009C30
.text:0000000000009C30 loc_9C30:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000009C30                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000009C34                 test    rdi, rdi
.text:0000000000009C37                 jz      short loc_9C51
.text:0000000000009C39                 nop     dword ptr [rax+00000000h]
.text:0000000000009C40
.text:0000000000009C40 loc_9C40:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000009C40                 mov     rbx, [rdi+8]
.text:0000000000009C44                 call    free
.text:0000000000009C49                 test    rbx, rbx
.text:0000000000009C4C                 mov     rdi, rbx
.text:0000000000009C4F                 jnz     short loc_9C40
.text:0000000000009C51
.text:0000000000009C51 loc_9C51:                               ; CODE XREF: hash_free+77↑j
.text:0000000000009C51                 add     rbp, 10h
.text:0000000000009C55                 cmp     [r12+8], rbp
.text:0000000000009C5A                 ja      short loc_9C30
.text:0000000000009C5C
.text:0000000000009C5C loc_9C5C:                               ; CODE XREF: hash_free+1F↑j
.text:0000000000009C5C                                         ; hash_free+66↑j
.text:0000000000009C5C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000009C61                 test    rdi, rdi
.text:0000000000009C64                 jz      short loc_9C81
.text:0000000000009C66                 db      2Eh
.text:0000000000009C66                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009C70
.text:0000000000009C70 loc_9C70:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000009C70                 mov     rbx, [rdi+8]
.text:0000000000009C74                 call    free
.text:0000000000009C79                 test    rbx, rbx
.text:0000000000009C7C                 mov     rdi, rbx
.text:0000000000009C7F                 jnz     short loc_9C70
.text:0000000000009C81
.text:0000000000009C81 loc_9C81:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000009C81                 mov     rdi, [r12]      ; ptr
.text:0000000000009C85                 call    free
.text:0000000000009C8A                 pop     rbx
.text:0000000000009C8B                 mov     rdi, r12        ; ptr
.text:0000000000009C8E                 pop     rbp
.text:0000000000009C8F                 pop     r12
.text:0000000000009C91                 jmp     free
.text:0000000000009C91 ; } // starts at 9BC0
.text:0000000000009C91 hash_free       endp
.text:0000000000009C91
.text:0000000000009C91 ; ---------------------------------------------------------------------------
.text:0000000000009C96                 align 20h
.text:0000000000009CA0
.text:0000000000009CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CA0
.text:0000000000009CA0 ; Attributes: info_from_lumina
.text:0000000000009CA0
.text:0000000000009CA0 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000009CA0                 public hash_rehash
.text:0000000000009CA0 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000009CA0                                         ; hash_delete+10F↓p
.text:0000000000009CA0
.text:0000000000009CA0 ptr             = qword ptr -78h
.text:0000000000009CA0 var_70          = qword ptr -70h
.text:0000000000009CA0 var_68          = qword ptr -68h
.text:0000000000009CA0 var_60          = qword ptr -60h
.text:0000000000009CA0 var_58          = qword ptr -58h
.text:0000000000009CA0 var_50          = qword ptr -50h
.text:0000000000009CA0 var_48          = qword ptr -48h
.text:0000000000009CA0 var_40          = qword ptr -40h
.text:0000000000009CA0 var_38          = qword ptr -38h
.text:0000000000009CA0 var_30          = qword ptr -30h
.text:0000000000009CA0 var_20          = qword ptr -20h
.text:0000000000009CA0
.text:0000000000009CA0 ; __unwind {
.text:0000000000009CA0                 push    r12
.text:0000000000009CA2                 push    rbp
.text:0000000000009CA3                 mov     rbp, rdi
.text:0000000000009CA6                 push    rbx
.text:0000000000009CA7                 sub     rsp, 60h
.text:0000000000009CAB                 mov     r12, [rdi+28h]
.text:0000000000009CAF                 mov     rax, fs:28h
.text:0000000000009CB8                 mov     [rsp+78h+var_20], rax
.text:0000000000009CBD                 xor     eax, eax
.text:0000000000009CBF                 cmp     byte ptr [r12+10h], 0
.text:0000000000009CC5                 jnz     short loc_9D18
.text:0000000000009CC7                 test    rsi, rsi
.text:0000000000009CCA                 js      loc_9E48
.text:0000000000009CD0                 pxor    xmm0, xmm0
.text:0000000000009CD4                 cvtsi2ss xmm0, rsi
.text:0000000000009CD9
.text:0000000000009CD9 loc_9CD9:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000009CD9                 divss   xmm0, dword ptr [r12+8]
.text:0000000000009CE0                 ucomiss xmm0, cs:dword_C60C
.text:0000000000009CE7                 jnb     loc_9E20
.text:0000000000009CED                 ucomiss xmm0, cs:dword_C610
.text:0000000000009CF4                 jb      loc_9E70
.text:0000000000009CFA                 subss   xmm0, cs:dword_C610
.text:0000000000009D02                 mov     rax, 8000000000000000h
.text:0000000000009D0C                 cvttss2si rsi, xmm0
.text:0000000000009D11                 xor     rsi, rax
.text:0000000000009D14                 nop     dword ptr [rax+00h]
.text:0000000000009D18
.text:0000000000009D18 loc_9D18:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000009D18                                         ; hash_rehash+1D5↓j
.text:0000000000009D18                 mov     rdi, rsi
.text:0000000000009D1B                 call    next_prime
.text:0000000000009D20                 mov     edx, 8
.text:0000000000009D25                 mov     rbx, rax
.text:0000000000009D28                 xor     ecx, ecx
.text:0000000000009D2A                 mov     rax, rdx
.text:0000000000009D2D                 mul     rbx
.text:0000000000009D30                 jo      loc_9ECF
.text:0000000000009D36
.text:0000000000009D36 loc_9D36:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000009D36                 test    rax, rax
.text:0000000000009D39                 mov     eax, 1
.text:0000000000009D3E                 cmovs   rcx, rax
.text:0000000000009D42                 test    rbx, rbx
.text:0000000000009D45                 jz      loc_9E20
.text:0000000000009D4B                 and     ecx, 1
.text:0000000000009D4E                 jnz     loc_9E20
.text:0000000000009D54                 cmp     [rbp+10h], rbx
.text:0000000000009D58                 jz      loc_9E80
.text:0000000000009D5E                 mov     esi, 10h        ; size
.text:0000000000009D63                 mov     rdi, rbx        ; nmemb
.text:0000000000009D66                 call    _calloc
.text:0000000000009D6B                 test    rax, rax
.text:0000000000009D6E                 mov     [rsp+78h+ptr], rax
.text:0000000000009D72                 jz      loc_9E20
.text:0000000000009D78                 mov     [rsp+78h+var_68], rbx
.text:0000000000009D7D                 shl     rbx, 4
.text:0000000000009D81                 mov     [rsp+78h+var_50], r12
.text:0000000000009D86                 add     rbx, rax
.text:0000000000009D89                 mov     rax, [rbp+30h]
.text:0000000000009D8D                 mov     r12, rsp
.text:0000000000009D90                 xor     edx, edx
.text:0000000000009D92                 mov     rsi, rbp
.text:0000000000009D95                 mov     rdi, r12
.text:0000000000009D98                 mov     [rsp+78h+var_70], rbx
.text:0000000000009D9D                 mov     [rsp+78h+var_60], 0
.text:0000000000009DA6                 mov     [rsp+78h+var_48], rax
.text:0000000000009DAB                 mov     rax, [rbp+38h]
.text:0000000000009DAF                 mov     [rsp+78h+var_58], 0
.text:0000000000009DB8                 mov     [rsp+78h+var_40], rax
.text:0000000000009DBD                 mov     rax, [rbp+40h]
.text:0000000000009DC1                 mov     [rsp+78h+var_38], rax
.text:0000000000009DC6                 mov     rax, [rbp+48h]
.text:0000000000009DCA                 mov     [rsp+78h+var_30], rax
.text:0000000000009DCF                 call    transfer_entries
.text:0000000000009DD4                 test    al, al
.text:0000000000009DD6                 mov     ebx, eax
.text:0000000000009DD8                 jnz     loc_9E90
.text:0000000000009DDE                 mov     rax, [rsp+78h+var_30]
.text:0000000000009DE3                 mov     edx, 1
.text:0000000000009DE8                 mov     rsi, r12
.text:0000000000009DEB                 mov     rdi, rbp
.text:0000000000009DEE                 mov     [rbp+48h], rax
.text:0000000000009DF2                 call    transfer_entries
.text:0000000000009DF7                 test    al, al
.text:0000000000009DF9                 jz      loc_9ED9
.text:0000000000009DFF                 xor     edx, edx
.text:0000000000009E01                 mov     rsi, r12
.text:0000000000009E04                 mov     rdi, rbp
.text:0000000000009E07                 call    transfer_entries
.text:0000000000009E0C                 test    al, al
.text:0000000000009E0E                 jz      loc_9ED9
.text:0000000000009E14                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000009E18                 call    free
.text:0000000000009E1D                 jmp     short loc_9E22
.text:0000000000009E1D ; ---------------------------------------------------------------------------
.text:0000000000009E1F                 align 20h
.text:0000000000009E20
.text:0000000000009E20 loc_9E20:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000009E20                                         ; hash_rehash+A5↑j ...
.text:0000000000009E20                 xor     ebx, ebx
.text:0000000000009E22
.text:0000000000009E22 loc_9E22:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000009E22                                         ; hash_rehash+1E5↓j ...
.text:0000000000009E22                 mov     rcx, [rsp+78h+var_20]
.text:0000000000009E27                 xor     rcx, fs:28h
.text:0000000000009E30                 mov     eax, ebx
.text:0000000000009E32                 jnz     loc_9ECA
.text:0000000000009E38                 add     rsp, 60h
.text:0000000000009E3C                 pop     rbx
.text:0000000000009E3D                 pop     rbp
.text:0000000000009E3E                 pop     r12
.text:0000000000009E40                 retn
.text:0000000000009E40 ; ---------------------------------------------------------------------------
.text:0000000000009E41                 align 8
.text:0000000000009E48
.text:0000000000009E48 loc_9E48:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000009E48                 mov     rax, rsi
.text:0000000000009E4B                 pxor    xmm0, xmm0
.text:0000000000009E4F                 shr     rax, 1
.text:0000000000009E52                 and     esi, 1
.text:0000000000009E55                 or      rax, rsi
.text:0000000000009E58                 cvtsi2ss xmm0, rax
.text:0000000000009E5D                 addss   xmm0, xmm0
.text:0000000000009E61                 jmp     loc_9CD9
.text:0000000000009E61 ; ---------------------------------------------------------------------------
.text:0000000000009E66                 align 10h
.text:0000000000009E70
.text:0000000000009E70 loc_9E70:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000009E70                 cvttss2si rsi, xmm0
.text:0000000000009E75                 jmp     loc_9D18
.text:0000000000009E75 ; ---------------------------------------------------------------------------
.text:0000000000009E7A                 align 20h
.text:0000000000009E80
.text:0000000000009E80 loc_9E80:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000009E80                 mov     ebx, 1
.text:0000000000009E85                 jmp     short loc_9E22
.text:0000000000009E85 ; ---------------------------------------------------------------------------
.text:0000000000009E87                 align 10h
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000009E90                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000009E94                 call    free
.text:0000000000009E99                 mov     rax, [rsp+78h+ptr]
.text:0000000000009E9D                 mov     [rbp+0], rax
.text:0000000000009EA1                 mov     rax, [rsp+78h+var_70]
.text:0000000000009EA6                 mov     [rbp+8], rax
.text:0000000000009EAA                 mov     rax, [rsp+78h+var_68]
.text:0000000000009EAF                 mov     [rbp+10h], rax
.text:0000000000009EB3                 mov     rax, [rsp+78h+var_60]
.text:0000000000009EB8                 mov     [rbp+18h], rax
.text:0000000000009EBC                 mov     rax, [rsp+78h+var_30]
.text:0000000000009EC1                 mov     [rbp+48h], rax
.text:0000000000009EC5                 jmp     loc_9E22
.text:0000000000009ECA ; ---------------------------------------------------------------------------
.text:0000000000009ECA
.text:0000000000009ECA loc_9ECA:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000009ECA                 call    ___stack_chk_fail
.text:0000000000009ECF ; ---------------------------------------------------------------------------
.text:0000000000009ECF
.text:0000000000009ECF loc_9ECF:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000009ECF                 mov     ecx, 1
.text:0000000000009ED4                 jmp     loc_9D36
.text:0000000000009ED9 ; ---------------------------------------------------------------------------
.text:0000000000009ED9
.text:0000000000009ED9 loc_9ED9:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000009ED9                                         ; hash_rehash+16E↑j
.text:0000000000009ED9                 call    _abort
.text:0000000000009ED9 ; } // starts at 9CA0
.text:0000000000009ED9 hash_rehash     endp
.text:0000000000009ED9
.text:0000000000009ED9 ; ---------------------------------------------------------------------------
.text:0000000000009EDE                 align 20h
.text:0000000000009EE0
.text:0000000000009EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EE0
.text:0000000000009EE0 ; Attributes: info_from_lumina
.text:0000000000009EE0
.text:0000000000009EE0 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000009EE0                 public hash_insert_if_absent
.text:0000000000009EE0 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000009EE0
.text:0000000000009EE0 var_38          = qword ptr -38h
.text:0000000000009EE0 var_30          = qword ptr -30h
.text:0000000000009EE0
.text:0000000000009EE0 ; __unwind {
.text:0000000000009EE0                 push    r13
.text:0000000000009EE2                 push    r12
.text:0000000000009EE4                 push    rbp
.text:0000000000009EE5                 push    rbx
.text:0000000000009EE6                 sub     rsp, 18h
.text:0000000000009EEA                 mov     rax, fs:28h
.text:0000000000009EF3                 mov     [rsp+38h+var_30], rax
.text:0000000000009EF8                 xor     eax, eax
.text:0000000000009EFA                 test    rsi, rsi
.text:0000000000009EFD                 jz      loc_A0BD
.text:0000000000009F03                 mov     r12, rsp
.text:0000000000009F06                 xor     ecx, ecx
.text:0000000000009F08                 mov     r13, rdx
.text:0000000000009F0B                 mov     rdx, r12
.text:0000000000009F0E                 mov     rbx, rdi
.text:0000000000009F11                 mov     rbp, rsi
.text:0000000000009F14                 call    hash_find_entry
.text:0000000000009F19                 test    rax, rax
.text:0000000000009F1C                 mov     rdx, rax
.text:0000000000009F1F                 jz      short loc_9F50
.text:0000000000009F21                 xor     eax, eax
.text:0000000000009F23                 test    r13, r13
.text:0000000000009F26                 jz      short loc_9F2C
.text:0000000000009F28                 mov     [r13+0], rdx
.text:0000000000009F2C
.text:0000000000009F2C loc_9F2C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000009F2C                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000009F2C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000009F31                 xor     rcx, fs:28h
.text:0000000000009F3A                 jnz     loc_A15F
.text:0000000000009F40                 add     rsp, 18h
.text:0000000000009F44                 pop     rbx
.text:0000000000009F45                 pop     rbp
.text:0000000000009F46                 pop     r12
.text:0000000000009F48                 pop     r13
.text:0000000000009F4A                 retn
.text:0000000000009F4A ; ---------------------------------------------------------------------------
.text:0000000000009F4B                 align 10h
.text:0000000000009F50
.text:0000000000009F50 loc_9F50:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000009F50                 mov     rax, [rbx+18h]
.text:0000000000009F54                 test    rax, rax
.text:0000000000009F57                 js      short loc_9FD0
.text:0000000000009F59                 pxor    xmm1, xmm1
.text:0000000000009F5D                 mov     rdx, [rbx+28h]
.text:0000000000009F61                 cvtsi2ss xmm1, rax
.text:0000000000009F66                 mov     rax, [rbx+10h]
.text:0000000000009F6A                 test    rax, rax
.text:0000000000009F6D                 js      loc_9FFA
.text:0000000000009F73
.text:0000000000009F73 loc_9F73:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000009F73                 pxor    xmm0, xmm0
.text:0000000000009F77                 cvtsi2ss xmm0, rax
.text:0000000000009F7C
.text:0000000000009F7C loc_9F7C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000009F7C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000009F81                 ucomiss xmm1, xmm0
.text:0000000000009F84                 ja      loc_A020
.text:0000000000009F8A
.text:0000000000009F8A loc_9F8A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000009F8A                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000009F8A                 mov     r12, [rsp+38h+var_38]
.text:0000000000009F8E                 cmp     qword ptr [r12], 0
.text:0000000000009F93                 jz      loc_A0C8
.text:0000000000009F99                 mov     rax, [rbx+48h]
.text:0000000000009F9D                 test    rax, rax
.text:0000000000009FA0                 jz      loc_A0E0
.text:0000000000009FA6                 mov     rdx, [rax+8]
.text:0000000000009FAA                 mov     [rbx+48h], rdx
.text:0000000000009FAE
.text:0000000000009FAE loc_9FAE:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000009FAE                 mov     rdx, [r12+8]
.text:0000000000009FB3                 mov     [rax], rbp
.text:0000000000009FB6                 mov     [rax+8], rdx
.text:0000000000009FBA                 mov     [r12+8], rax
.text:0000000000009FBF                 mov     eax, 1
.text:0000000000009FC4                 add     qword ptr [rbx+20h], 1
.text:0000000000009FC9                 jmp     loc_9F2C
.text:0000000000009FC9 ; ---------------------------------------------------------------------------
.text:0000000000009FCE                 align 10h
.text:0000000000009FD0
.text:0000000000009FD0 loc_9FD0:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000009FD0                 mov     rdx, rax
.text:0000000000009FD3                 pxor    xmm1, xmm1
.text:0000000000009FD7                 and     eax, 1
.text:0000000000009FDA                 shr     rdx, 1
.text:0000000000009FDD                 or      rdx, rax
.text:0000000000009FE0                 mov     rax, [rbx+10h]
.text:0000000000009FE4                 cvtsi2ss xmm1, rdx
.text:0000000000009FE9                 mov     rdx, [rbx+28h]
.text:0000000000009FED                 test    rax, rax
.text:0000000000009FF0                 addss   xmm1, xmm1
.text:0000000000009FF4                 jns     loc_9F73
.text:0000000000009FFA
.text:0000000000009FFA loc_9FFA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000009FFA                 mov     rcx, rax
.text:0000000000009FFD                 pxor    xmm0, xmm0
.text:000000000000A001                 shr     rcx, 1
.text:000000000000A004                 and     eax, 1
.text:000000000000A007                 or      rcx, rax
.text:000000000000A00A                 cvtsi2ss xmm0, rcx
.text:000000000000A00F                 addss   xmm0, xmm0
.text:000000000000A013                 jmp     loc_9F7C
.text:000000000000A013 ; ---------------------------------------------------------------------------
.text:000000000000A018                 align 20h
.text:000000000000A020
.text:000000000000A020 loc_A020:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:000000000000A020                 lea     rdi, [rbx+28h]
.text:000000000000A024                 call    check_tuning
.text:000000000000A029                 mov     rax, [rbx+10h]
.text:000000000000A02D                 mov     rdx, [rbx+28h]
.text:000000000000A031                 test    rax, rax
.text:000000000000A034                 movss   xmm2, dword ptr [rdx+8]
.text:000000000000A039                 js      loc_A100
.text:000000000000A03F                 pxor    xmm0, xmm0
.text:000000000000A043                 cvtsi2ss xmm0, rax
.text:000000000000A048
.text:000000000000A048 loc_A048:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:000000000000A048                 mov     rax, [rbx+18h]
.text:000000000000A04C                 test    rax, rax
.text:000000000000A04F                 js      loc_A120
.text:000000000000A055                 pxor    xmm1, xmm1
.text:000000000000A059                 cvtsi2ss xmm1, rax
.text:000000000000A05E
.text:000000000000A05E loc_A05E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000A05E                 movaps  xmm3, xmm2
.text:000000000000A061                 mulss   xmm3, xmm0
.text:000000000000A065                 ucomiss xmm1, xmm3
.text:000000000000A068                 jbe     loc_9F8A
.text:000000000000A06E                 cmp     byte ptr [rdx+10h], 0
.text:000000000000A072                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:000000000000A077                 jnz     short loc_A07D
.text:000000000000A079                 mulss   xmm0, xmm2
.text:000000000000A07D
.text:000000000000A07D loc_A07D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000A07D                 ucomiss xmm0, cs:dword_C60C
.text:000000000000A084                 jnb     short loc_A0F3
.text:000000000000A086                 ucomiss xmm0, cs:dword_C610
.text:000000000000A08D                 jnb     loc_A140
.text:000000000000A093                 cvttss2si rsi, xmm0
.text:000000000000A098
.text:000000000000A098 loc_A098:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:000000000000A098                 mov     rdi, rbx
.text:000000000000A09B                 call    hash_rehash
.text:000000000000A0A0                 test    al, al
.text:000000000000A0A2                 jz      short loc_A0F3
.text:000000000000A0A4                 xor     ecx, ecx
.text:000000000000A0A6                 mov     rdx, r12
.text:000000000000A0A9                 mov     rsi, rbp
.text:000000000000A0AC                 mov     rdi, rbx
.text:000000000000A0AF                 call    hash_find_entry
.text:000000000000A0B4                 test    rax, rax
.text:000000000000A0B7                 jz      loc_9F8A
.text:000000000000A0BD
.text:000000000000A0BD loc_A0BD:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000A0BD                 call    _abort
.text:000000000000A0BD ; ---------------------------------------------------------------------------
.text:000000000000A0C2                 align 8
.text:000000000000A0C8
.text:000000000000A0C8 loc_A0C8:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:000000000000A0C8                 mov     [r12], rbp
.text:000000000000A0CC                 mov     eax, 1
.text:000000000000A0D1                 add     qword ptr [rbx+20h], 1
.text:000000000000A0D6                 add     qword ptr [rbx+18h], 1
.text:000000000000A0DB                 jmp     loc_9F2C
.text:000000000000A0E0 ; ---------------------------------------------------------------------------
.text:000000000000A0E0
.text:000000000000A0E0 loc_A0E0:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:000000000000A0E0                 mov     edi, 10h        ; size
.text:000000000000A0E5                 call    _malloc
.text:000000000000A0EA                 test    rax, rax
.text:000000000000A0ED                 jnz     loc_9FAE
.text:000000000000A0F3
.text:000000000000A0F3 loc_A0F3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:000000000000A0F3                                         ; hash_insert_if_absent+1C2↑j
.text:000000000000A0F3                 mov     eax, 0FFFFFFFFh
.text:000000000000A0F8                 jmp     loc_9F2C
.text:000000000000A0F8 ; ---------------------------------------------------------------------------
.text:000000000000A0FD                 align 20h
.text:000000000000A100
.text:000000000000A100 loc_A100:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:000000000000A100                 mov     rcx, rax
.text:000000000000A103                 pxor    xmm0, xmm0
.text:000000000000A107                 shr     rcx, 1
.text:000000000000A10A                 and     eax, 1
.text:000000000000A10D                 or      rcx, rax
.text:000000000000A110                 cvtsi2ss xmm0, rcx
.text:000000000000A115                 addss   xmm0, xmm0
.text:000000000000A119                 jmp     loc_A048
.text:000000000000A119 ; ---------------------------------------------------------------------------
.text:000000000000A11E                 align 20h
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:000000000000A120                 mov     rcx, rax
.text:000000000000A123                 pxor    xmm1, xmm1
.text:000000000000A127                 shr     rcx, 1
.text:000000000000A12A                 and     eax, 1
.text:000000000000A12D                 or      rcx, rax
.text:000000000000A130                 cvtsi2ss xmm1, rcx
.text:000000000000A135                 addss   xmm1, xmm1
.text:000000000000A139                 jmp     loc_A05E
.text:000000000000A139 ; ---------------------------------------------------------------------------
.text:000000000000A13E                 align 20h
.text:000000000000A140
.text:000000000000A140 loc_A140:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:000000000000A140                 subss   xmm0, cs:dword_C610
.text:000000000000A148                 mov     rax, 8000000000000000h
.text:000000000000A152                 cvttss2si rsi, xmm0
.text:000000000000A157                 xor     rsi, rax
.text:000000000000A15A                 jmp     loc_A098
.text:000000000000A15F ; ---------------------------------------------------------------------------
.text:000000000000A15F
.text:000000000000A15F loc_A15F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000A15F                 call    ___stack_chk_fail
.text:000000000000A15F ; } // starts at 9EE0
.text:000000000000A15F hash_insert_if_absent endp
.text:000000000000A15F
.text:000000000000A15F ; ---------------------------------------------------------------------------
.text:000000000000A164                 align 10h
.text:000000000000A170
.text:000000000000A170 ; =============== S U B R O U T I N E =======================================
.text:000000000000A170
.text:000000000000A170 ; Attributes: info_from_lumina
.text:000000000000A170
.text:000000000000A170 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:000000000000A170                 public hash_insert
.text:000000000000A170 hash_insert     proc near               ; CODE XREF: filesystem_type+FF↑p
.text:000000000000A170                                         ; enter_dir_isra_10+46↑p
.text:000000000000A170
.text:000000000000A170 var_18          = qword ptr -18h
.text:000000000000A170 var_10          = qword ptr -10h
.text:000000000000A170
.text:000000000000A170 ; __unwind {
.text:000000000000A170                 push    rbx
.text:000000000000A171                 mov     rbx, rsi
.text:000000000000A174                 sub     rsp, 10h
.text:000000000000A178                 mov     rdx, rsp
.text:000000000000A17B                 mov     rax, fs:28h
.text:000000000000A184                 mov     [rsp+18h+var_10], rax
.text:000000000000A189                 xor     eax, eax
.text:000000000000A18B                 call    hash_insert_if_absent
.text:000000000000A190                 cmp     eax, 0FFFFFFFFh
.text:000000000000A193                 jz      short loc_A1C0
.text:000000000000A195                 test    eax, eax
.text:000000000000A197                 jnz     short loc_A19D
.text:000000000000A199                 mov     rbx, [rsp+18h+var_18]
.text:000000000000A19D
.text:000000000000A19D loc_A19D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000A19D                                         ; hash_insert+52↓j
.text:000000000000A19D                 mov     rcx, [rsp+18h+var_10]
.text:000000000000A1A2                 xor     rcx, fs:28h
.text:000000000000A1AB                 mov     rax, rbx
.text:000000000000A1AE                 jnz     short loc_A1C4
.text:000000000000A1B0                 add     rsp, 10h
.text:000000000000A1B4                 pop     rbx
.text:000000000000A1B5                 retn
.text:000000000000A1B5 ; ---------------------------------------------------------------------------
.text:000000000000A1B6                 align 20h
.text:000000000000A1C0
.text:000000000000A1C0 loc_A1C0:                               ; CODE XREF: hash_insert+23↑j
.text:000000000000A1C0                 xor     ebx, ebx
.text:000000000000A1C2                 jmp     short loc_A19D
.text:000000000000A1C4 ; ---------------------------------------------------------------------------
.text:000000000000A1C4
.text:000000000000A1C4 loc_A1C4:                               ; CODE XREF: hash_insert+3E↑j
.text:000000000000A1C4                 call    ___stack_chk_fail
.text:000000000000A1C4 ; } // starts at A170
.text:000000000000A1C4 hash_insert     endp
.text:000000000000A1C4
.text:000000000000A1C4 ; ---------------------------------------------------------------------------
.text:000000000000A1C9                 align 10h
.text:000000000000A1D0
.text:000000000000A1D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A1D0
.text:000000000000A1D0 ; Attributes: info_from_lumina
.text:000000000000A1D0
.text:000000000000A1D0 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:000000000000A1D0                 public hash_delete
.text:000000000000A1D0 hash_delete     proc near               ; CODE XREF: leave_dir_isra_12+7A↑p
.text:000000000000A1D0
.text:000000000000A1D0 var_28          = qword ptr -28h
.text:000000000000A1D0 var_20          = qword ptr -20h
.text:000000000000A1D0
.text:000000000000A1D0 ; __unwind {
.text:000000000000A1D0                 push    r12
.text:000000000000A1D2                 push    rbp
.text:000000000000A1D3                 mov     ecx, 1
.text:000000000000A1D8                 push    rbx
.text:000000000000A1D9                 mov     rbx, rdi
.text:000000000000A1DC                 sub     rsp, 10h
.text:000000000000A1E0                 mov     rdx, rsp
.text:000000000000A1E3                 mov     rax, fs:28h
.text:000000000000A1EC                 mov     [rsp+28h+var_20], rax
.text:000000000000A1F1                 xor     eax, eax
.text:000000000000A1F3                 call    hash_find_entry
.text:000000000000A1F8                 test    rax, rax
.text:000000000000A1FB                 mov     rbp, rax
.text:000000000000A1FE                 jz      short loc_A20F
.text:000000000000A200                 mov     rax, [rsp+28h+var_28]
.text:000000000000A204                 sub     qword ptr [rbx+20h], 1
.text:000000000000A209                 cmp     qword ptr [rax], 0
.text:000000000000A20D                 jz      short loc_A230
.text:000000000000A20F
.text:000000000000A20F loc_A20F:                               ; CODE XREF: hash_delete+2E↑j
.text:000000000000A20F                                         ; hash_delete+9F↓j ...
.text:000000000000A20F                 mov     rcx, [rsp+28h+var_20]
.text:000000000000A214                 xor     rcx, fs:28h
.text:000000000000A21D                 mov     rax, rbp
.text:000000000000A220                 jnz     loc_A3CE
.text:000000000000A226                 add     rsp, 10h
.text:000000000000A22A                 pop     rbx
.text:000000000000A22B                 pop     rbp
.text:000000000000A22C                 pop     r12
.text:000000000000A22E                 retn
.text:000000000000A22E ; ---------------------------------------------------------------------------
.text:000000000000A22F                 align 10h
.text:000000000000A230
.text:000000000000A230 loc_A230:                               ; CODE XREF: hash_delete+3D↑j
.text:000000000000A230                 mov     rax, [rbx+18h]
.text:000000000000A234                 sub     rax, 1
.text:000000000000A238                 test    rax, rax
.text:000000000000A23B                 mov     [rbx+18h], rax
.text:000000000000A23F                 js      loc_A340
.text:000000000000A245                 pxor    xmm0, xmm0
.text:000000000000A249                 cvtsi2ss xmm0, rax
.text:000000000000A24E
.text:000000000000A24E loc_A24E:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000A24E                 mov     rax, [rbx+10h]
.text:000000000000A252                 mov     rdx, [rbx+28h]
.text:000000000000A256                 test    rax, rax
.text:000000000000A259                 js      loc_A320
.text:000000000000A25F                 pxor    xmm1, xmm1
.text:000000000000A263                 cvtsi2ss xmm1, rax
.text:000000000000A268
.text:000000000000A268 loc_A268:                               ; CODE XREF: hash_delete+169↓j
.text:000000000000A268                 mulss   xmm1, dword ptr [rdx]
.text:000000000000A26C                 ucomiss xmm1, xmm0
.text:000000000000A26F                 jbe     short loc_A20F
.text:000000000000A271                 lea     rdi, [rbx+28h]
.text:000000000000A275                 call    check_tuning
.text:000000000000A27A                 mov     rax, [rbx+10h]
.text:000000000000A27E                 mov     rdx, [rbx+28h]
.text:000000000000A282                 test    rax, rax
.text:000000000000A285                 js      loc_A3B0
.text:000000000000A28B                 pxor    xmm0, xmm0
.text:000000000000A28F                 cvtsi2ss xmm0, rax
.text:000000000000A294
.text:000000000000A294 loc_A294:                               ; CODE XREF: hash_delete+1F9↓j
.text:000000000000A294                 mov     rax, [rbx+18h]
.text:000000000000A298                 test    rax, rax
.text:000000000000A29B                 js      loc_A390
.text:000000000000A2A1                 pxor    xmm1, xmm1
.text:000000000000A2A5                 cvtsi2ss xmm1, rax
.text:000000000000A2AA
.text:000000000000A2AA loc_A2AA:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000A2AA                 movss   xmm2, dword ptr [rdx]
.text:000000000000A2AE                 mulss   xmm2, xmm0
.text:000000000000A2B2                 ucomiss xmm2, xmm1
.text:000000000000A2B5                 jbe     loc_A20F
.text:000000000000A2BB                 cmp     byte ptr [rdx+10h], 0
.text:000000000000A2BF                 mulss   xmm0, dword ptr [rdx+4]
.text:000000000000A2C4                 jz      loc_A380
.text:000000000000A2CA
.text:000000000000A2CA loc_A2CA:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000A2CA                 ucomiss xmm0, cs:dword_C610
.text:000000000000A2D1                 jnb     loc_A360
.text:000000000000A2D7                 cvttss2si rsi, xmm0
.text:000000000000A2DC
.text:000000000000A2DC loc_A2DC:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000A2DC                 mov     rdi, rbx
.text:000000000000A2DF                 call    hash_rehash
.text:000000000000A2E4                 test    al, al
.text:000000000000A2E6                 jnz     loc_A20F
.text:000000000000A2EC                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000A2F0                 test    rdi, rdi
.text:000000000000A2F3                 jz      short loc_A309
.text:000000000000A2F5                 nop     dword ptr [rax]
.text:000000000000A2F8
.text:000000000000A2F8 loc_A2F8:                               ; CODE XREF: hash_delete+137↓j
.text:000000000000A2F8                 mov     r12, [rdi+8]
.text:000000000000A2FC                 call    free
.text:000000000000A301                 test    r12, r12
.text:000000000000A304                 mov     rdi, r12
.text:000000000000A307                 jnz     short loc_A2F8
.text:000000000000A309
.text:000000000000A309 loc_A309:                               ; CODE XREF: hash_delete+123↑j
.text:000000000000A309                 mov     qword ptr [rbx+48h], 0
.text:000000000000A311                 jmp     loc_A20F
.text:000000000000A311 ; ---------------------------------------------------------------------------
.text:000000000000A316                 align 20h
.text:000000000000A320
.text:000000000000A320 loc_A320:                               ; CODE XREF: hash_delete+89↑j
.text:000000000000A320                 mov     rcx, rax
.text:000000000000A323                 pxor    xmm1, xmm1
.text:000000000000A327                 shr     rcx, 1
.text:000000000000A32A                 and     eax, 1
.text:000000000000A32D                 or      rcx, rax
.text:000000000000A330                 cvtsi2ss xmm1, rcx
.text:000000000000A335                 addss   xmm1, xmm1
.text:000000000000A339                 jmp     loc_A268
.text:000000000000A339 ; ---------------------------------------------------------------------------
.text:000000000000A33E                 align 20h
.text:000000000000A340
.text:000000000000A340 loc_A340:                               ; CODE XREF: hash_delete+6F↑j
.text:000000000000A340                 mov     rdx, rax
.text:000000000000A343                 pxor    xmm0, xmm0
.text:000000000000A347                 shr     rdx, 1
.text:000000000000A34A                 and     eax, 1
.text:000000000000A34D                 or      rdx, rax
.text:000000000000A350                 cvtsi2ss xmm0, rdx
.text:000000000000A355                 addss   xmm0, xmm0
.text:000000000000A359                 jmp     loc_A24E
.text:000000000000A359 ; ---------------------------------------------------------------------------
.text:000000000000A35E                 align 20h
.text:000000000000A360
.text:000000000000A360 loc_A360:                               ; CODE XREF: hash_delete+101↑j
.text:000000000000A360                 subss   xmm0, cs:dword_C610
.text:000000000000A368                 mov     rax, 8000000000000000h
.text:000000000000A372                 cvttss2si rsi, xmm0
.text:000000000000A377                 xor     rsi, rax
.text:000000000000A37A                 jmp     loc_A2DC
.text:000000000000A37A ; ---------------------------------------------------------------------------
.text:000000000000A37F                 align 20h
.text:000000000000A380
.text:000000000000A380 loc_A380:                               ; CODE XREF: hash_delete+F4↑j
.text:000000000000A380                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000A385                 jmp     loc_A2CA
.text:000000000000A385 ; ---------------------------------------------------------------------------
.text:000000000000A38A                 align 10h
.text:000000000000A390
.text:000000000000A390 loc_A390:                               ; CODE XREF: hash_delete+CB↑j
.text:000000000000A390                 mov     rcx, rax
.text:000000000000A393                 pxor    xmm1, xmm1
.text:000000000000A397                 shr     rcx, 1
.text:000000000000A39A                 and     eax, 1
.text:000000000000A39D                 or      rcx, rax
.text:000000000000A3A0                 cvtsi2ss xmm1, rcx
.text:000000000000A3A5                 addss   xmm1, xmm1
.text:000000000000A3A9                 jmp     loc_A2AA
.text:000000000000A3A9 ; ---------------------------------------------------------------------------
.text:000000000000A3AE                 align 10h
.text:000000000000A3B0
.text:000000000000A3B0 loc_A3B0:                               ; CODE XREF: hash_delete+B5↑j
.text:000000000000A3B0                 mov     rcx, rax
.text:000000000000A3B3                 pxor    xmm0, xmm0
.text:000000000000A3B7                 shr     rcx, 1
.text:000000000000A3BA                 and     eax, 1
.text:000000000000A3BD                 or      rcx, rax
.text:000000000000A3C0                 cvtsi2ss xmm0, rcx
.text:000000000000A3C5                 addss   xmm0, xmm0
.text:000000000000A3C9                 jmp     loc_A294
.text:000000000000A3CE ; ---------------------------------------------------------------------------
.text:000000000000A3CE
.text:000000000000A3CE loc_A3CE:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000A3CE                 call    ___stack_chk_fail
.text:000000000000A3CE ; } // starts at A1D0
.text:000000000000A3CE hash_delete     endp
.text:000000000000A3CE
.text:000000000000A3CE ; ---------------------------------------------------------------------------
.text:000000000000A3D3                 align 20h
.text:000000000000A3E0
.text:000000000000A3E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3E0
.text:000000000000A3E0
.text:000000000000A3E0                 public i_ring_init
.text:000000000000A3E0 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:000000000000A3E0 ; __unwind {
.text:000000000000A3E0                 mov     byte ptr [rdi+1Ch], 1
.text:000000000000A3E4                 mov     qword ptr [rdi+14h], 0
.text:000000000000A3EC                 mov     [rdi], esi
.text:000000000000A3EE                 mov     [rdi+4], esi
.text:000000000000A3F1                 mov     [rdi+8], esi
.text:000000000000A3F4                 mov     [rdi+0Ch], esi
.text:000000000000A3F7                 mov     [rdi+10h], esi
.text:000000000000A3FA                 retn
.text:000000000000A3FA ; } // starts at A3E0
.text:000000000000A3FA i_ring_init     endp
.text:000000000000A3FA
.text:000000000000A3FA ; ---------------------------------------------------------------------------
.text:000000000000A3FB                 align 20h
.text:000000000000A400
.text:000000000000A400 ; =============== S U B R O U T I N E =======================================
.text:000000000000A400
.text:000000000000A400
.text:000000000000A400                 public i_ring_empty
.text:000000000000A400 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:000000000000A400                                         ; fts_safe_changedir+1C7↑p
.text:000000000000A400 ; __unwind {
.text:000000000000A400                 movzx   eax, byte ptr [rdi+1Ch]
.text:000000000000A404                 retn
.text:000000000000A404 ; } // starts at A400
.text:000000000000A404 i_ring_empty    endp
.text:000000000000A404
.text:000000000000A404 ; ---------------------------------------------------------------------------
.text:000000000000A405                 align 10h
.text:000000000000A410
.text:000000000000A410 ; =============== S U B R O U T I N E =======================================
.text:000000000000A410
.text:000000000000A410
.text:000000000000A410                 public i_ring_push
.text:000000000000A410 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:000000000000A410 ; __unwind {
.text:000000000000A410                 movzx   edx, byte ptr [rdi+1Ch]
.text:000000000000A414                 mov     ecx, [rdi+14h]
.text:000000000000A417                 xor     edx, 1
.text:000000000000A41A                 movzx   edx, dl
.text:000000000000A41D                 add     ecx, edx
.text:000000000000A41F                 and     ecx, 3
.text:000000000000A422                 mov     eax, ecx
.text:000000000000A424                 lea     r8, [rdi+rax*4]
.text:000000000000A428                 mov     eax, [r8]
.text:000000000000A42B                 mov     [r8], esi
.text:000000000000A42E                 mov     esi, [rdi+18h]
.text:000000000000A431                 mov     [rdi+14h], ecx
.text:000000000000A434                 cmp     esi, ecx
.text:000000000000A436                 jnz     short loc_A440
.text:000000000000A438                 add     edx, esi
.text:000000000000A43A                 and     edx, 3
.text:000000000000A43D                 mov     [rdi+18h], edx
.text:000000000000A440
.text:000000000000A440 loc_A440:                               ; CODE XREF: i_ring_push+26↑j
.text:000000000000A440                 mov     byte ptr [rdi+1Ch], 0
.text:000000000000A444                 retn
.text:000000000000A444 ; } // starts at A410
.text:000000000000A444 i_ring_push     endp
.text:000000000000A444
.text:000000000000A444 ; ---------------------------------------------------------------------------
.text:000000000000A445                 align 10h
.text:000000000000A450
.text:000000000000A450 ; =============== S U B R O U T I N E =======================================
.text:000000000000A450
.text:000000000000A450
.text:000000000000A450                 public i_ring_pop
.text:000000000000A450 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:000000000000A450                                         ; fts_safe_changedir+1DB↑p
.text:000000000000A450 ; __unwind {
.text:000000000000A450                 cmp     byte ptr [rdi+1Ch], 0
.text:000000000000A454                 jnz     short loc_A485
.text:000000000000A456                 mov     eax, [rdi+14h]
.text:000000000000A459                 mov     esi, [rdi+10h]
.text:000000000000A45C                 lea     rcx, [rdi+rax*4]
.text:000000000000A460                 mov     rdx, rax
.text:000000000000A463                 mov     eax, [rcx]
.text:000000000000A465                 mov     [rcx], esi
.text:000000000000A467                 cmp     edx, [rdi+18h]
.text:000000000000A46A                 jz      short loc_A480
.text:000000000000A46C                 add     edx, 3
.text:000000000000A46F                 and     edx, 3
.text:000000000000A472                 mov     [rdi+14h], edx
.text:000000000000A475                 retn
.text:000000000000A475 ; ---------------------------------------------------------------------------
.text:000000000000A476                 align 20h
.text:000000000000A480
.text:000000000000A480 loc_A480:                               ; CODE XREF: i_ring_pop+1A↑j
.text:000000000000A480                 mov     byte ptr [rdi+1Ch], 1
.text:000000000000A484                 retn
.text:000000000000A485 ; ---------------------------------------------------------------------------
.text:000000000000A485
.text:000000000000A485 loc_A485:                               ; CODE XREF: i_ring_pop+4↑j
.text:000000000000A485                 sub     rsp, 8
.text:000000000000A489                 call    _abort
.text:000000000000A489 ; } // starts at A450
.text:000000000000A489 i_ring_pop      endp
.text:000000000000A489
.text:000000000000A489 ; ---------------------------------------------------------------------------
.text:000000000000A48E                 align 10h
.text:000000000000A490
.text:000000000000A490 ; =============== S U B R O U T I N E =======================================
.text:000000000000A490
.text:000000000000A490
.text:000000000000A490                 public locale_charset
.text:000000000000A490 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000A490 ; __unwind {
.text:000000000000A490                 sub     rsp, 8
.text:000000000000A494                 mov     edi, 0Eh        ; item
.text:000000000000A499                 call    _nl_langinfo
.text:000000000000A49E                 test    rax, rax
.text:000000000000A4A1                 jz      short loc_A4C0
.text:000000000000A4A3                 cmp     byte ptr [rax], 0
.text:000000000000A4A6                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000A4AD                 cmovz   rax, rdx
.text:000000000000A4B1                 add     rsp, 8
.text:000000000000A4B5                 retn
.text:000000000000A4B5 ; ---------------------------------------------------------------------------
.text:000000000000A4B6                 align 20h
.text:000000000000A4C0
.text:000000000000A4C0 loc_A4C0:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000A4C0                 lea     rax, aAscii     ; "ASCII"
.text:000000000000A4C7                 add     rsp, 8
.text:000000000000A4CB                 retn
.text:000000000000A4CB ; } // starts at A490
.text:000000000000A4CB locale_charset  endp
.text:000000000000A4CB
.text:000000000000A4CB ; ---------------------------------------------------------------------------
.text:000000000000A4CC                 align 10h
.text:000000000000A4D0
.text:000000000000A4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4D0
.text:000000000000A4D0
.text:000000000000A4D0                 public openat_safer
.text:000000000000A4D0 openat_safer    proc near               ; CODE XREF: diropen_isra_6+35↑j
.text:000000000000A4D0                                         ; opendirat+15↓p
.text:000000000000A4D0
.text:000000000000A4D0 var_58          = dword ptr -58h
.text:000000000000A4D0 var_50          = qword ptr -50h
.text:000000000000A4D0 var_48          = qword ptr -48h
.text:000000000000A4D0 var_40          = qword ptr -40h
.text:000000000000A4D0 var_38          = byte ptr -38h
.text:000000000000A4D0 var_20          = qword ptr -20h
.text:000000000000A4D0 arg_0           = byte ptr  8
.text:000000000000A4D0
.text:000000000000A4D0 ; __unwind {
.text:000000000000A4D0                 sub     rsp, 58h
.text:000000000000A4D4                 mov     [rsp+58h+var_20], rcx
.text:000000000000A4D9                 xor     ecx, ecx
.text:000000000000A4DB                 mov     rax, fs:28h
.text:000000000000A4E4                 mov     [rsp+58h+var_40], rax
.text:000000000000A4E9                 xor     eax, eax
.text:000000000000A4EB                 test    dl, 40h
.text:000000000000A4EE                 jnz     short loc_A518
.text:000000000000A4F0
.text:000000000000A4F0 loc_A4F0:                               ; CODE XREF: openat_safer+67↓j
.text:000000000000A4F0                 xor     eax, eax
.text:000000000000A4F2                 call    _openat
.text:000000000000A4F7                 mov     edi, eax        ; fd
.text:000000000000A4F9                 call    fd_safer_flag
.text:000000000000A4FE                 mov     rsi, [rsp+58h+var_40]
.text:000000000000A503                 xor     rsi, fs:28h
.text:000000000000A50C                 jnz     short loc_A539
.text:000000000000A50E                 add     rsp, 58h
.text:000000000000A512                 retn
.text:000000000000A512 ; ---------------------------------------------------------------------------
.text:000000000000A513                 align 8
.text:000000000000A518
.text:000000000000A518 loc_A518:                               ; CODE XREF: openat_safer+1E↑j
.text:000000000000A518                 lea     rax, [rsp+58h+arg_0]
.text:000000000000A51D                 mov     [rsp+58h+var_58], 18h
.text:000000000000A524                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:000000000000A528                 mov     [rsp+58h+var_50], rax
.text:000000000000A52D                 lea     rax, [rsp+58h+var_38]
.text:000000000000A532                 mov     [rsp+58h+var_48], rax
.text:000000000000A537                 jmp     short loc_A4F0
.text:000000000000A539 ; ---------------------------------------------------------------------------
.text:000000000000A539
.text:000000000000A539 loc_A539:                               ; CODE XREF: openat_safer+3C↑j
.text:000000000000A539                 call    ___stack_chk_fail
.text:000000000000A539 ; } // starts at A4D0
.text:000000000000A539 openat_safer    endp
.text:000000000000A539
.text:000000000000A539 ; ---------------------------------------------------------------------------
.text:000000000000A53E                 align 20h
.text:000000000000A540
.text:000000000000A540 ; =============== S U B R O U T I N E =======================================
.text:000000000000A540
.text:000000000000A540
.text:000000000000A540                 public opendirat
.text:000000000000A540 opendirat       proc near               ; CODE XREF: fts_build+4A5↑p
.text:000000000000A540 ; __unwind {
.text:000000000000A540                 push    r13
.text:000000000000A542                 push    r12
.text:000000000000A544                 or      edx, 90900h
.text:000000000000A54A                 push    rbp
.text:000000000000A54B                 push    rbx
.text:000000000000A54C                 xor     eax, eax
.text:000000000000A54E                 mov     r12, rcx
.text:000000000000A551                 sub     rsp, 8
.text:000000000000A555                 call    openat_safer
.text:000000000000A55A                 test    eax, eax
.text:000000000000A55C                 js      short loc_A5B0
.text:000000000000A55E                 mov     edi, eax        ; fd
.text:000000000000A560                 mov     ebx, eax
.text:000000000000A562                 call    _fdopendir
.text:000000000000A567                 test    rax, rax
.text:000000000000A56A                 mov     rbp, rax
.text:000000000000A56D                 jz      short loc_A588
.text:000000000000A56F                 mov     [r12], ebx
.text:000000000000A573                 add     rsp, 8
.text:000000000000A577                 mov     rax, rbp
.text:000000000000A57A                 pop     rbx
.text:000000000000A57B                 pop     rbp
.text:000000000000A57C                 pop     r12
.text:000000000000A57E                 pop     r13
.text:000000000000A580                 retn
.text:000000000000A580 ; ---------------------------------------------------------------------------
.text:000000000000A581                 align 8
.text:000000000000A588
.text:000000000000A588 loc_A588:                               ; CODE XREF: opendirat+2D↑j
.text:000000000000A588                 call    ___errno_location
.text:000000000000A58D                 mov     r13d, [rax]
.text:000000000000A590                 mov     r12, rax
.text:000000000000A593                 mov     edi, ebx        ; fd
.text:000000000000A595                 call    _close
.text:000000000000A59A                 mov     rax, rbp
.text:000000000000A59D                 mov     [r12], r13d
.text:000000000000A5A1                 add     rsp, 8
.text:000000000000A5A5                 pop     rbx
.text:000000000000A5A6                 pop     rbp
.text:000000000000A5A7                 pop     r12
.text:000000000000A5A9                 pop     r13
.text:000000000000A5AB                 retn
.text:000000000000A5AB ; ---------------------------------------------------------------------------
.text:000000000000A5AC                 align 10h
.text:000000000000A5B0
.text:000000000000A5B0 loc_A5B0:                               ; CODE XREF: opendirat+1C↑j
.text:000000000000A5B0                 add     rsp, 8
.text:000000000000A5B4                 xor     ebp, ebp
.text:000000000000A5B6                 pop     rbx
.text:000000000000A5B7                 mov     rax, rbp
.text:000000000000A5BA                 pop     rbp
.text:000000000000A5BB                 pop     r12
.text:000000000000A5BD                 pop     r13
.text:000000000000A5BF                 retn
.text:000000000000A5BF ; } // starts at A540
.text:000000000000A5BF opendirat       endp
.text:000000000000A5BF
.text:000000000000A5C0
.text:000000000000A5C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5C0
.text:000000000000A5C0 ; Attributes: info_from_lumina
.text:000000000000A5C0
.text:000000000000A5C0 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000000A5C0                 public fd_safer_flag
.text:000000000000A5C0 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000000A5C0                                         ; openat_safer+29↑p
.text:000000000000A5C0 ; __unwind {
.text:000000000000A5C0                 push    r13
.text:000000000000A5C2                 push    r12
.text:000000000000A5C4                 push    rbp
.text:000000000000A5C5                 push    rbx
.text:000000000000A5C6                 mov     ebx, edi
.text:000000000000A5C8                 sub     rsp, 8
.text:000000000000A5CC                 cmp     edi, 2
.text:000000000000A5CF                 ja      short loc_A5F2
.text:000000000000A5D1                 call    dup_safer
.text:000000000000A5D6                 mov     r12d, eax
.text:000000000000A5D9                 call    ___errno_location
.text:000000000000A5DE                 mov     r13d, [rax]
.text:000000000000A5E1                 mov     rbp, rax
.text:000000000000A5E4                 mov     edi, ebx        ; fd
.text:000000000000A5E6                 call    _close
.text:000000000000A5EB                 mov     ebx, r12d
.text:000000000000A5EE                 mov     [rbp+0], r13d
.text:000000000000A5F2
.text:000000000000A5F2 loc_A5F2:                               ; CODE XREF: fd_safer_flag+F↑j
.text:000000000000A5F2                 add     rsp, 8
.text:000000000000A5F6                 mov     eax, ebx
.text:000000000000A5F8                 pop     rbx
.text:000000000000A5F9                 pop     rbp
.text:000000000000A5FA                 pop     r12
.text:000000000000A5FC                 pop     r13
.text:000000000000A5FE                 retn
.text:000000000000A5FE ; } // starts at A5C0
.text:000000000000A5FE fd_safer_flag   endp
.text:000000000000A5FE
.text:000000000000A5FE ; ---------------------------------------------------------------------------
.text:000000000000A5FF                 align 20h
.text:000000000000A600
.text:000000000000A600 ; =============== S U B R O U T I N E =======================================
.text:000000000000A600
.text:000000000000A600 ; Attributes: info_from_lumina
.text:000000000000A600
.text:000000000000A600 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000A600                 public rpl_fclose
.text:000000000000A600 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:000000000000A600 ; __unwind {
.text:000000000000A600                 push    r12
.text:000000000000A602                 push    rbp
.text:000000000000A603                 push    rbx
.text:000000000000A604                 mov     rbx, rdi
.text:000000000000A607                 call    _fileno
.text:000000000000A60C                 test    eax, eax
.text:000000000000A60E                 mov     rdi, rbx        ; fp
.text:000000000000A611                 js      short loc_A667
.text:000000000000A613                 call    ___freading
.text:000000000000A618                 test    eax, eax
.text:000000000000A61A                 jnz     short loc_A648
.text:000000000000A61C
.text:000000000000A61C loc_A61C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000A61C                 mov     rdi, rbx        ; stream
.text:000000000000A61F                 call    rpl_fflush
.text:000000000000A624                 test    eax, eax
.text:000000000000A626                 jz      short loc_A664
.text:000000000000A628                 call    ___errno_location
.text:000000000000A62D                 mov     r12d, [rax]
.text:000000000000A630                 mov     rdi, rbx        ; stream
.text:000000000000A633                 mov     rbp, rax
.text:000000000000A636                 call    _fclose
.text:000000000000A63B                 test    r12d, r12d
.text:000000000000A63E                 jnz     short loc_A670
.text:000000000000A640
.text:000000000000A640 loc_A640:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000A640                 pop     rbx
.text:000000000000A641                 pop     rbp
.text:000000000000A642                 pop     r12
.text:000000000000A644                 retn
.text:000000000000A644 ; ---------------------------------------------------------------------------
.text:000000000000A645                 align 8
.text:000000000000A648
.text:000000000000A648 loc_A648:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000A648                 mov     rdi, rbx        ; stream
.text:000000000000A64B                 call    _fileno
.text:000000000000A650                 xor     esi, esi        ; offset
.text:000000000000A652                 mov     edx, 1          ; whence
.text:000000000000A657                 mov     edi, eax        ; fd
.text:000000000000A659                 call    _lseek
.text:000000000000A65E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A662                 jnz     short loc_A61C
.text:000000000000A664
.text:000000000000A664 loc_A664:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000A664                 mov     rdi, rbx        ; stream
.text:000000000000A667
.text:000000000000A667 loc_A667:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000A667                 pop     rbx
.text:000000000000A668                 pop     rbp
.text:000000000000A669                 pop     r12
.text:000000000000A66B                 jmp     _fclose
.text:000000000000A670 ; ---------------------------------------------------------------------------
.text:000000000000A670
.text:000000000000A670 loc_A670:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000A670                 mov     [rbp+0], r12d
.text:000000000000A674                 mov     eax, 0FFFFFFFFh
.text:000000000000A679                 jmp     short loc_A640
.text:000000000000A679 ; } // starts at A600
.text:000000000000A679 rpl_fclose      endp
.text:000000000000A679
.text:000000000000A679 ; ---------------------------------------------------------------------------
.text:000000000000A67B                 align 20h
.text:000000000000A680
.text:000000000000A680 ; =============== S U B R O U T I N E =======================================
.text:000000000000A680
.text:000000000000A680
.text:000000000000A680 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000A680                 public rpl_fcntl
.text:000000000000A680 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:000000000000A680                                         ; dup_safer+9↓j
.text:000000000000A680
.text:000000000000A680 var_68          = dword ptr -68h
.text:000000000000A680 var_60          = qword ptr -60h
.text:000000000000A680 var_58          = qword ptr -58h
.text:000000000000A680 var_50          = qword ptr -50h
.text:000000000000A680 var_48          = byte ptr -48h
.text:000000000000A680 var_38          = qword ptr -38h
.text:000000000000A680 var_30          = qword ptr -30h
.text:000000000000A680 var_28          = qword ptr -28h
.text:000000000000A680 var_20          = qword ptr -20h
.text:000000000000A680 arg_0           = byte ptr  8
.text:000000000000A680
.text:000000000000A680 ; __unwind {
.text:000000000000A680                 push    r12
.text:000000000000A682                 push    rbp
.text:000000000000A683                 mov     ebp, edi
.text:000000000000A685                 push    rbx
.text:000000000000A686                 sub     rsp, 50h
.text:000000000000A68A                 mov     rax, fs:28h
.text:000000000000A693                 mov     [rsp+68h+var_50], rax
.text:000000000000A698                 xor     eax, eax
.text:000000000000A69A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000A69F                 test    esi, esi
.text:000000000000A6A1                 mov     [rsp+68h+var_38], rdx
.text:000000000000A6A6                 mov     [rsp+68h+var_30], rcx
.text:000000000000A6AB                 mov     [rsp+68h+var_28], r8
.text:000000000000A6B0                 mov     [rsp+68h+var_60], rax
.text:000000000000A6B5                 lea     rax, [rsp+68h+var_48]
.text:000000000000A6BA                 mov     [rsp+68h+var_20], r9
.text:000000000000A6BF                 mov     [rsp+68h+var_68], 10h
.text:000000000000A6C6                 mov     [rsp+68h+var_58], rax
.text:000000000000A6CB                 jz      loc_A8D2
.text:000000000000A6D1                 cmp     esi, 406h
.text:000000000000A6D7                 jnz     short loc_A720
.text:000000000000A6D9                 mov     rax, [rsp+68h+var_58]
.text:000000000000A6DE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000A6E5                 mov     [rsp+68h+var_68], 18h
.text:000000000000A6EC                 mov     r12d, [rax+10h]
.text:000000000000A6F0                 mov     edx, r12d
.text:000000000000A6F3                 js      loc_A823
.text:000000000000A6F9                 xor     eax, eax
.text:000000000000A6FB                 mov     esi, 406h       ; cmd
.text:000000000000A700                 call    _fcntl
.text:000000000000A705                 test    eax, eax
.text:000000000000A707                 mov     ebx, eax
.text:000000000000A709                 js      loc_A898
.text:000000000000A70F
.text:000000000000A70F loc_A70F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000A70F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000A719                 jmp     short loc_A760
.text:000000000000A719 ; ---------------------------------------------------------------------------
.text:000000000000A71B                 align 20h
.text:000000000000A720
.text:000000000000A720 loc_A720:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000A720                 cmp     esi, 0Bh
.text:000000000000A723                 jz      short loc_A750
.text:000000000000A725                 jg      short loc_A780
.text:000000000000A727                 cmp     esi, 4
.text:000000000000A72A                 jz      loc_A800
.text:000000000000A730                 jg      loc_A7F0
.text:000000000000A736                 cmp     esi, 2
.text:000000000000A739                 jz      loc_A800
.text:000000000000A73F                 jg      short loc_A750
.text:000000000000A741                 cmp     esi, 1
.text:000000000000A744                 jnz     short loc_A7A8
.text:000000000000A746                 db      2Eh
.text:000000000000A746                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000A750                                         ; rpl_fcntl+BF↑j ...
.text:000000000000A750                 mov     edi, ebp        ; fd
.text:000000000000A752                 xor     eax, eax
.text:000000000000A754                 call    _fcntl
.text:000000000000A759                 mov     ebx, eax
.text:000000000000A75B                 nop     dword ptr [rax+rax+00h]
.text:000000000000A760
.text:000000000000A760 loc_A760:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000A760                                         ; rpl_fcntl+147↓j ...
.text:000000000000A760                 mov     rcx, [rsp+68h+var_50]
.text:000000000000A765                 xor     rcx, fs:28h
.text:000000000000A76E                 mov     eax, ebx
.text:000000000000A770                 jnz     loc_A8CD
.text:000000000000A776                 add     rsp, 50h
.text:000000000000A77A                 pop     rbx
.text:000000000000A77B                 pop     rbp
.text:000000000000A77C                 pop     r12
.text:000000000000A77E                 retn
.text:000000000000A77E ; ---------------------------------------------------------------------------
.text:000000000000A77F                 align 20h
.text:000000000000A780
.text:000000000000A780 loc_A780:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000A780                 cmp     esi, 407h
.text:000000000000A786                 jg      short loc_A7D0
.text:000000000000A788                 cmp     esi, 406h
.text:000000000000A78E                 jge     short loc_A800
.text:000000000000A790                 cmp     esi, 401h
.text:000000000000A796                 jz      short loc_A750
.text:000000000000A798                 cmp     esi, 402h
.text:000000000000A79E                 jz      short loc_A800
.text:000000000000A7A0                 cmp     esi, 400h
.text:000000000000A7A6                 jz      short loc_A800
.text:000000000000A7A8
.text:000000000000A7A8 loc_A7A8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000A7A8                                         ; rpl_fcntl+164↓j ...
.text:000000000000A7A8                 mov     eax, [rsp+68h+var_68]
.text:000000000000A7AB                 cmp     eax, 2Fh ; '/'
.text:000000000000A7AE                 ja      loc_A8EA
.text:000000000000A7B4                 add     rax, [rsp+68h+var_58]
.text:000000000000A7B9
.text:000000000000A7B9 loc_A7B9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000A7B9                 mov     rdx, [rax]
.text:000000000000A7BC                 mov     edi, ebp        ; fd
.text:000000000000A7BE                 xor     eax, eax
.text:000000000000A7C0                 call    _fcntl
.text:000000000000A7C5                 mov     ebx, eax
.text:000000000000A7C7                 jmp     short loc_A760
.text:000000000000A7C7 ; ---------------------------------------------------------------------------
.text:000000000000A7C9                 align 10h
.text:000000000000A7D0
.text:000000000000A7D0 loc_A7D0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000A7D0                 cmp     esi, 409h
.text:000000000000A7D6                 jz      short loc_A800
.text:000000000000A7D8                 jl      loc_A750
.text:000000000000A7DE                 cmp     esi, 40Ah
.text:000000000000A7E4                 jnz     short loc_A7A8
.text:000000000000A7E6                 jmp     loc_A750
.text:000000000000A7E6 ; ---------------------------------------------------------------------------
.text:000000000000A7EB                 align 10h
.text:000000000000A7F0
.text:000000000000A7F0 loc_A7F0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000A7F0                 cmp     esi, 9
.text:000000000000A7F3                 jz      loc_A750
.text:000000000000A7F9                 jg      short loc_A800
.text:000000000000A7FB                 cmp     esi, 8
.text:000000000000A7FE                 jnz     short loc_A7A8
.text:000000000000A800
.text:000000000000A800 loc_A800:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000A800                                         ; rpl_fcntl+B9↑j ...
.text:000000000000A800                 mov     eax, [rsp+68h+var_68]
.text:000000000000A803                 cmp     eax, 2Fh ; '/'
.text:000000000000A806                 ja      loc_A8F4
.text:000000000000A80C                 add     rax, [rsp+68h+var_58]
.text:000000000000A811
.text:000000000000A811 loc_A811:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000A811                 mov     edx, [rax]
.text:000000000000A813                 mov     edi, ebp        ; fd
.text:000000000000A815                 xor     eax, eax
.text:000000000000A817                 call    _fcntl
.text:000000000000A81C                 mov     ebx, eax
.text:000000000000A81E                 jmp     loc_A760
.text:000000000000A823 ; ---------------------------------------------------------------------------
.text:000000000000A823
.text:000000000000A823 loc_A823:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000A823                 xor     esi, esi        ; cmd
.text:000000000000A825                 xor     eax, eax
.text:000000000000A827                 call    _fcntl
.text:000000000000A82C                 test    eax, eax
.text:000000000000A82E                 mov     ebx, eax
.text:000000000000A830                 js      loc_A760
.text:000000000000A836                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000A83D                 jnz     loc_A760
.text:000000000000A843
.text:000000000000A843 loc_A843:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000A843                 xor     eax, eax
.text:000000000000A845                 mov     esi, 1          ; cmd
.text:000000000000A84A                 mov     edi, ebx        ; fd
.text:000000000000A84C                 call    _fcntl
.text:000000000000A851                 test    eax, eax
.text:000000000000A853                 js      short loc_A871
.text:000000000000A855                 or      eax, 1
.text:000000000000A858                 mov     esi, 2          ; cmd
.text:000000000000A85D                 mov     edi, ebx        ; fd
.text:000000000000A85F                 mov     edx, eax
.text:000000000000A861                 xor     eax, eax
.text:000000000000A863                 call    _fcntl
.text:000000000000A868                 cmp     eax, 0FFFFFFFFh
.text:000000000000A86B                 jnz     loc_A760
.text:000000000000A871
.text:000000000000A871 loc_A871:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000A871                 call    ___errno_location
.text:000000000000A876                 mov     r12d, [rax]
.text:000000000000A879                 mov     rbp, rax
.text:000000000000A87C                 mov     edi, ebx        ; fd
.text:000000000000A87E                 call    _close
.text:000000000000A883                 mov     ebx, 0FFFFFFFFh
.text:000000000000A888                 mov     [rbp+0], r12d
.text:000000000000A88C                 jmp     loc_A760
.text:000000000000A88C ; ---------------------------------------------------------------------------
.text:000000000000A891                 align 8
.text:000000000000A898
.text:000000000000A898 loc_A898:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000A898                 call    ___errno_location
.text:000000000000A89D                 cmp     dword ptr [rax], 16h
.text:000000000000A8A0                 jnz     loc_A70F
.text:000000000000A8A6                 xor     esi, esi        ; cmd
.text:000000000000A8A8                 xor     eax, eax
.text:000000000000A8AA                 mov     edx, r12d
.text:000000000000A8AD                 mov     edi, ebp        ; fd
.text:000000000000A8AF                 call    _fcntl
.text:000000000000A8B4                 test    eax, eax
.text:000000000000A8B6                 mov     ebx, eax
.text:000000000000A8B8                 js      loc_A760
.text:000000000000A8BE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000A8C8                 jmp     loc_A843
.text:000000000000A8CD ; ---------------------------------------------------------------------------
.text:000000000000A8CD
.text:000000000000A8CD loc_A8CD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000A8CD                 call    ___stack_chk_fail
.text:000000000000A8D2 ; ---------------------------------------------------------------------------
.text:000000000000A8D2
.text:000000000000A8D2 loc_A8D2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000A8D2                 mov     rax, [rsp+68h+var_58]
.text:000000000000A8D7                 xor     esi, esi        ; cmd
.text:000000000000A8D9                 mov     edx, [rax+10h]
.text:000000000000A8DC                 xor     eax, eax
.text:000000000000A8DE                 call    _fcntl
.text:000000000000A8E3                 mov     ebx, eax
.text:000000000000A8E5                 jmp     loc_A760
.text:000000000000A8EA ; ---------------------------------------------------------------------------
.text:000000000000A8EA
.text:000000000000A8EA loc_A8EA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000A8EA                 mov     rax, [rsp+68h+var_60]
.text:000000000000A8EF                 jmp     loc_A7B9
.text:000000000000A8F4 ; ---------------------------------------------------------------------------
.text:000000000000A8F4
.text:000000000000A8F4 loc_A8F4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000A8F4                 mov     rax, [rsp+68h+var_60]
.text:000000000000A8F9                 jmp     loc_A811
.text:000000000000A8F9 ; } // starts at A680
.text:000000000000A8F9 rpl_fcntl       endp
.text:000000000000A8F9
.text:000000000000A8F9 ; ---------------------------------------------------------------------------
.text:000000000000A8FE                 align 20h
.text:000000000000A900
.text:000000000000A900 ; =============== S U B R O U T I N E =======================================
.text:000000000000A900
.text:000000000000A900 ; Attributes: info_from_lumina
.text:000000000000A900
.text:000000000000A900 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000A900                 public rpl_fflush
.text:000000000000A900 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000A900 ; __unwind {
.text:000000000000A900                 test    rdi, rdi
.text:000000000000A903                 push    rbx
.text:000000000000A904                 mov     rbx, rdi
.text:000000000000A907                 jz      short loc_A91A
.text:000000000000A909                 call    ___freading
.text:000000000000A90E                 test    eax, eax
.text:000000000000A910                 jz      short loc_A91A
.text:000000000000A912                 test    dword ptr [rbx], 100h
.text:000000000000A918                 jnz     short loc_A928
.text:000000000000A91A
.text:000000000000A91A loc_A91A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000A91A                                         ; rpl_fflush+10↑j
.text:000000000000A91A                 mov     rdi, rbx        ; stream
.text:000000000000A91D                 pop     rbx
.text:000000000000A91E                 jmp     _fflush
.text:000000000000A91E ; ---------------------------------------------------------------------------
.text:000000000000A923                 align 8
.text:000000000000A928
.text:000000000000A928 loc_A928:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000A928                 mov     rdi, rbx
.text:000000000000A92B                 mov     edx, 1
.text:000000000000A930                 xor     esi, esi
.text:000000000000A932                 call    rpl_fseeko
.text:000000000000A937                 mov     rdi, rbx        ; stream
.text:000000000000A93A                 pop     rbx
.text:000000000000A93B                 jmp     _fflush
.text:000000000000A93B ; } // starts at A900
.text:000000000000A93B rpl_fflush      endp
.text:000000000000A93B
.text:000000000000A940
.text:000000000000A940 ; =============== S U B R O U T I N E =======================================
.text:000000000000A940
.text:000000000000A940 ; Attributes: info_from_lumina
.text:000000000000A940
.text:000000000000A940 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000A940                 public rpl_fseeko
.text:000000000000A940 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000A940 ; __unwind {
.text:000000000000A940                 mov     rax, [rdi+8]
.text:000000000000A944                 cmp     [rdi+10h], rax
.text:000000000000A948                 jz      short loc_A950
.text:000000000000A94A
.text:000000000000A94A loc_A94A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000A94A                                         ; rpl_fseeko+1F↓j
.text:000000000000A94A                 jmp     _fseeko
.text:000000000000A94A ; ---------------------------------------------------------------------------
.text:000000000000A94F                 align 10h
.text:000000000000A950
.text:000000000000A950 loc_A950:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000A950                 mov     rax, [rdi+20h]
.text:000000000000A954                 cmp     [rdi+28h], rax
.text:000000000000A958                 jnz     short loc_A94A
.text:000000000000A95A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000A95F                 jnz     short loc_A94A
.text:000000000000A961                 push    r12
.text:000000000000A963                 push    rbp
.text:000000000000A964                 mov     r12d, edx
.text:000000000000A967                 push    rbx
.text:000000000000A968                 mov     rbp, rsi
.text:000000000000A96B                 mov     rbx, rdi
.text:000000000000A96E                 call    _fileno
.text:000000000000A973                 mov     edx, r12d       ; whence
.text:000000000000A976                 mov     rsi, rbp        ; offset
.text:000000000000A979                 mov     edi, eax        ; fd
.text:000000000000A97B                 call    _lseek
.text:000000000000A980                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A984                 jz      short loc_A992
.text:000000000000A986                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000A989                 mov     [rbx+90h], rax
.text:000000000000A990                 xor     eax, eax
.text:000000000000A992
.text:000000000000A992 loc_A992:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000A992                 pop     rbx
.text:000000000000A993                 pop     rbp
.text:000000000000A994                 pop     r12
.text:000000000000A996                 retn
.text:000000000000A996 ; } // starts at A940
.text:000000000000A996 rpl_fseeko      endp
.text:000000000000A996
.text:000000000000A996 ; ---------------------------------------------------------------------------
.text:000000000000A997                 align 20h
.text:000000000000A9A0
.text:000000000000A9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A9A0
.text:000000000000A9A0
.text:000000000000A9A0                 public dup_safer
.text:000000000000A9A0 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000A9A0 ; __unwind {
.text:000000000000A9A0                 mov     edx, 3
.text:000000000000A9A5                 xor     esi, esi
.text:000000000000A9A7                 xor     eax, eax
.text:000000000000A9A9                 jmp     rpl_fcntl
.text:000000000000A9A9 ; } // starts at A9A0
.text:000000000000A9A9 dup_safer       endp
.text:000000000000A9A9
.text:000000000000A9A9 ; ---------------------------------------------------------------------------
.text:000000000000A9AE                 align 10h
.text:000000000000A9B0
.text:000000000000A9B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A9B0
.text:000000000000A9B0 ; Attributes: info_from_lumina
.text:000000000000A9B0
.text:000000000000A9B0 ; void _libc_csu_init(void)
.text:000000000000A9B0                 public __libc_csu_init
.text:000000000000A9B0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000A9B0 ; __unwind {
.text:000000000000A9B0                 push    r15
.text:000000000000A9B2                 push    r14
.text:000000000000A9B4                 mov     r15, rdx
.text:000000000000A9B7                 push    r13
.text:000000000000A9B9                 push    r12
.text:000000000000A9BB                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000A9C2                 push    rbp
.text:000000000000A9C3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000A9CA                 push    rbx
.text:000000000000A9CB                 mov     r13d, edi
.text:000000000000A9CE                 mov     r14, rsi
.text:000000000000A9D1                 sub     rbp, r12
.text:000000000000A9D4                 sub     rsp, 8
.text:000000000000A9D8                 sar     rbp, 3
.text:000000000000A9DC                 call    _init_proc
.text:000000000000A9E1                 test    rbp, rbp
.text:000000000000A9E4                 jz      short loc_AA06
.text:000000000000A9E6                 xor     ebx, ebx
.text:000000000000A9E8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000A9F0
.text:000000000000A9F0 loc_A9F0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000A9F0                 mov     rdx, r15
.text:000000000000A9F3                 mov     rsi, r14
.text:000000000000A9F6                 mov     edi, r13d
.text:000000000000A9F9                 call    ds:(__frame_dummy_init_array_entry - 20E970h)[r12+rbx*8]
.text:000000000000A9FD                 add     rbx, 1
.text:000000000000AA01                 cmp     rbp, rbx
.text:000000000000AA04                 jnz     short loc_A9F0
.text:000000000000AA06
.text:000000000000AA06 loc_AA06:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000AA06                 add     rsp, 8
.text:000000000000AA0A                 pop     rbx
.text:000000000000AA0B                 pop     rbp
.text:000000000000AA0C                 pop     r12
.text:000000000000AA0E                 pop     r13
.text:000000000000AA10                 pop     r14
.text:000000000000AA12                 pop     r15
.text:000000000000AA14                 retn
.text:000000000000AA14 ; } // starts at A9B0
.text:000000000000AA14 __libc_csu_init endp
.text:000000000000AA14
.text:000000000000AA14 ; ---------------------------------------------------------------------------
.text:000000000000AA15                 align 20h
.text:000000000000AA20
.text:000000000000AA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA20
.text:000000000000AA20
.text:000000000000AA20 ; void _libc_csu_fini(void)
.text:000000000000AA20                 public __libc_csu_fini
.text:000000000000AA20 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000AA20 ; __unwind {
.text:000000000000AA20                 rep retn
.text:000000000000AA20 ; } // starts at AA20
.text:000000000000AA20 __libc_csu_fini endp
.text:000000000000AA20
.text:000000000000AA20 ; ---------------------------------------------------------------------------
.text:000000000000AA22                 align 10h
.text:000000000000AA30
.text:000000000000AA30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA30
.text:000000000000AA30
.text:000000000000AA30 atexit          proc near               ; CODE XREF: main+9D↑p
.text:000000000000AA30 ; __unwind {
.text:000000000000AA30                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000AA37                 xor     esi, esi        ; obj
.text:000000000000AA39                 jmp     ___cxa_atexit
.text:000000000000AA39 ; } // starts at AA30
.text:000000000000AA39 atexit          endp
.text:000000000000AA39
.text:000000000000AA39 _text           ends
.text:000000000000AA39
LOAD:000000000000AA3E ; ===========================================================================
LOAD:000000000000AA3E
LOAD:000000000000AA3E ; Segment type: Pure code
LOAD:000000000000AA3E ; Segment permissions: Read/Execute
LOAD:000000000000AA3E LOAD            segment byte public 'CODE' use64
LOAD:000000000000AA3E                 assume cs:LOAD
LOAD:000000000000AA3E                 ;org 0AA3Eh
LOAD:000000000000AA3E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000AA3E                 align 20h
LOAD:000000000000AA3E LOAD            ends
LOAD:000000000000AA3E
.fini:000000000000AA40 ; ===========================================================================
.fini:000000000000AA40
.fini:000000000000AA40 ; Segment type: Pure code
.fini:000000000000AA40 ; Segment permissions: Read/Execute
.fini:000000000000AA40 _fini           segment dword public 'CODE' use64
.fini:000000000000AA40                 assume cs:_fini
.fini:000000000000AA40                 ;org 0AA40h
.fini:000000000000AA40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000AA40
.fini:000000000000AA40 ; =============== S U B R O U T I N E =======================================
.fini:000000000000AA40
.fini:000000000000AA40
.fini:000000000000AA40                 public _term_proc
.fini:000000000000AA40 _term_proc      proc near
.fini:000000000000AA40                 sub     rsp, 8          ; _fini
.fini:000000000000AA44                 add     rsp, 8
.fini:000000000000AA48                 retn
.fini:000000000000AA48 _term_proc      endp
.fini:000000000000AA48
.fini:000000000000AA48 _fini           ends
.fini:000000000000AA48
LOAD:000000000000AA49 ; ===========================================================================
LOAD:000000000000AA49
LOAD:000000000000AA49 ; Segment type: Pure code
LOAD:000000000000AA49 ; Segment permissions: Read/Execute
LOAD:000000000000AA49 LOAD            segment byte public 'CODE' use64
LOAD:000000000000AA49                 assume cs:LOAD
LOAD:000000000000AA49                 ;org 0AA49h
LOAD:000000000000AA49                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000AA49                 align 20h
LOAD:000000000000AA49 LOAD            ends
LOAD:000000000000AA49
.rodata:000000000000AA60 ; ===========================================================================
.rodata:000000000000AA60
.rodata:000000000000AA60 ; Segment type: Pure data
.rodata:000000000000AA60 ; Segment permissions: Read
.rodata:000000000000AA60 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000AA60                 assume cs:_rodata
.rodata:000000000000AA60                 ;org 0AA60h
.rodata:000000000000AA60                 public _IO_stdin_used
.rodata:000000000000AA60 _IO_stdin_used  db    1
.rodata:000000000000AA61                 db    0
.rodata:000000000000AA62                 db    2
.rodata:000000000000AA63                 db    0
.rodata:000000000000AA64 aChown          db 'chown',0            ; DATA XREF: main+1CC↑o
.rodata:000000000000AA64                                         ; usage+27C↑o ...
.rodata:000000000000AA6A asc_AA6A        db '[',0                ; DATA XREF: usage+26E↑o
.rodata:000000000000AA6C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+29C↑o
.rodata:000000000000AA7C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000AA7C                                         ; DATA XREF: usage+2CC↑o
.rodata:000000000000AA7C                                         ; usage+3C4↑o ...
.rodata:000000000000AA92 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2DD↑o
.rodata:000000000000AA9C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2E9↑o
.rodata:000000000000AAAB aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+275↑o
.rodata:000000000000AAB5 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+2A8↑o
.rodata:000000000000AABF aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2C0↑o
.rodata:000000000000AAC9 ; const char aSOnlineHelpS[]
.rodata:000000000000AAC9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+332↑o
.rodata:000000000000AAC9                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000AAE0 unk_AAE0        db  47h ; G             ; DATA XREF: main+1C5↑o
.rodata:000000000000AAE0                                         ; usage+34E↑o ...
.rodata:000000000000AAE1                 db  4Eh ; N
.rodata:000000000000AAE2                 db  55h ; U
.rodata:000000000000AAE3                 db  20h
.rodata:000000000000AAE4 ; const char domainname[]
.rodata:000000000000AAE4 domainname      db 'coreutils',0        ; DATA XREF: main+7E↑o
.rodata:000000000000AAE4                                         ; main+8A↑o ...
.rodata:000000000000AAEE ; const char s2[]
.rodata:000000000000AAEE s2              db 'en_',0              ; DATA XREF: usage+375↑o
.rodata:000000000000AAEE                                         ; usage+436↑o
.rodata:000000000000AAF2 ; const char aFullDocumentat[]
.rodata:000000000000AAF2 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000AAF2                                         ; DATA XREF: usage:loc_2821↑o
.rodata:000000000000AAF2                                         ; usage:loc_28DE↑o
.rodata:000000000000AB0D ; const char dirname[]
.rodata:000000000000AB0D dirname         db '/usr/local/share/locale',0
.rodata:000000000000AB0D                                         ; DATA XREF: main+77↑o
.rodata:000000000000AB25 ; const char format[]
.rodata:000000000000AB25 format          db '%s: %s',0           ; DATA XREF: main+24F↑o
.rodata:000000000000AB25                                         ; main+4AD↑o ...
.rodata:000000000000AB2C aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+1B7↑o
.rodata:000000000000AB39 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+1BE↑o
.rodata:000000000000AB49 ; const char shortopts[]
.rodata:000000000000AB49 shortopts       db 'HLPRcfhv',0         ; DATA XREF: main+C7↑o
.rodata:000000000000AB52 ; const char aMissingOperand[]
.rodata:000000000000AB52 aMissingOperand db 'missing operand',0  ; DATA XREF: main+534↑o
.rodata:000000000000AB62 ; const char aMissingOperand_0[]
.rodata:000000000000AB62 aMissingOperand_0 db 'missing operand after %s',0
.rodata:000000000000AB62                                         ; DATA XREF: main+564↑o
.rodata:000000000000AB7B aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000AB85 aChanges        db 'changes',0          ; DATA XREF: .data.rel.ro:000000000020E9A0↓o
.rodata:000000000000AB8D aFrom           db 'from',0             ; DATA XREF: .data.rel.ro:000000000020E9E0↓o
.rodata:000000000000AB92 aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:000000000020EA00↓o
.rodata:000000000000AB92                                         ; .data.rel.ro:000000000020E9C0↓o ...
.rodata:000000000000ABA1 aNoPreserveRoot_0 db 'no-preserve-root',0
.rodata:000000000000ABA1                                         ; DATA XREF: .data.rel.ro:000000000020EA20↓o
.rodata:000000000000ABA1                                         ; .data.rel.ro:000000000020EA40↓o
.rodata:000000000000ABB2 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:000000000020EA60↓o
.rodata:000000000000ABB8 aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:000000000020EA80↓o
.rodata:000000000000ABBF aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020EAC0↓o
.rodata:000000000000ABC7 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020EAE0↓o
.rodata:000000000000ABCC aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020EB00↓o
.rodata:000000000000ABD4                 align 8
.rodata:000000000000ABD8 ; const char aTrySHelpForMor[]
.rodata:000000000000ABD8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000ABD8                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000ABFF                 align 20h
.rodata:000000000000AC00 ; const char aUsageSOptionOw[]
.rodata:000000000000AC00 aUsageSOptionOw db 'Usage: %s [OPTION]... [OWNER][:[GROUP]] FILE...',0Ah
.rodata:000000000000AC00                                         ; DATA XREF: usage:loc_24ED↑o
.rodata:000000000000AC00                 db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
.rodata:000000000000AC61                 align 8
.rodata:000000000000AC68 ; const char aChangeTheOwner[]
.rodata:000000000000AC68 aChangeTheOwner db 'Change the owner and/or group of each FILE to OWNER and/or GROUP.'
.rodata:000000000000AC68                                         ; DATA XREF: usage+87↑o
.rodata:000000000000AC68                 db 0Ah
.rodata:000000000000AC68                 db 'With --reference, change the owner and group of each FILE to thos'
.rodata:000000000000AC68                 db 'e of RFILE.',0Ah
.rodata:000000000000AC68                 db 0Ah,0
.rodata:000000000000ACF9                 align 20h
.rodata:000000000000AD00 ; const char aCChangesLikeVe[]
.rodata:000000000000AD00 aCChangesLikeVe db '  -c, --changes          like verbose but report only when a chan'
.rodata:000000000000AD00                                         ; DATA XREF: usage+AC↑o
.rodata:000000000000AD00                 db 'ge is made',0Ah
.rodata:000000000000AD00                 db '  -f, --silent, --quiet  suppress most error messages',0Ah
.rodata:000000000000AD00                 db '  -v, --verbose          output a diagnostic for every file proce'
.rodata:000000000000AD00                 db 'ssed',0Ah,0
.rodata:000000000000ADC9                 align 10h
.rodata:000000000000ADD0 ; const char aDereferenceAff[]
.rodata:000000000000ADD0 aDereferenceAff db '      --dereference      affect the referent of each symbolic lin'
.rodata:000000000000ADD0                                         ; DATA XREF: usage+D1↑o
.rodata:000000000000ADD0                 db 'k (this is',0Ah
.rodata:000000000000ADD0                 db '                         the default), rather than the symbolic l'
.rodata:000000000000ADD0                 db 'ink itself',0Ah
.rodata:000000000000ADD0                 db '  -h, --no-dereference   affect symbolic links instead of any ref'
.rodata:000000000000ADD0                 db 'erenced file',0Ah,0
.rodata:000000000000AEB7                 align 8
.rodata:000000000000AEB8 ; const char aUsefulOnlyOnSy[]
.rodata:000000000000AEB8 aUsefulOnlyOnSy db '                         (useful only on systems that can change '
.rodata:000000000000AEB8                                         ; DATA XREF: usage+F6↑o
.rodata:000000000000AEB8                 db 'the',0Ah
.rodata:000000000000AEB8                 db '                         ownership of a symlink)',0Ah,0
.rodata:000000000000AF2F                 align 10h
.rodata:000000000000AF30 ; const char aFromCurrentOwn[]
.rodata:000000000000AF30 aFromCurrentOwn db '      --from=CURRENT_OWNER:CURRENT_GROUP',0Ah
.rodata:000000000000AF30                                         ; DATA XREF: usage+11B↑o
.rodata:000000000000AF30                 db '                         change the owner and/or group of each fi'
.rodata:000000000000AF30                 db 'le only if',0Ah
.rodata:000000000000AF30                 db '                         its current owner and/or group match tho'
.rodata:000000000000AF30                 db 'se specified',0Ah
.rodata:000000000000AF30                 db '                         here.  Either may be omitted, in which c'
.rodata:000000000000AF30                 db 'ase a match',0Ah
.rodata:000000000000AF30                 db '                         is not required for the omitted attribut'
.rodata:000000000000AF30                 db 'e',0Ah,0
.rodata:000000000000B084                 align 8
.rodata:000000000000B088 ; const char aNoPreserveRoot[]
.rodata:000000000000B088 aNoPreserveRoot db '      --no-preserve-root  do not treat ',27h,'/',27h,' specially '
.rodata:000000000000B088                                         ; DATA XREF: usage+140↑o
.rodata:000000000000B088                 db '(the default)',0Ah
.rodata:000000000000B088                 db '      --preserve-root    fail to operate recursively on ',27h,'/',27h
.rodata:000000000000B088                 db 0Ah,0
.rodata:000000000000B108 ; const char aReferenceRfile[]
.rodata:000000000000B108 aReferenceRfile db '      --reference=RFILE  use RFILE',27h,'s owner and group rather'
.rodata:000000000000B108                                         ; DATA XREF: usage+165↑o
.rodata:000000000000B108                 db ' than',0Ah
.rodata:000000000000B108                 db '                         specifying OWNER:GROUP values',0Ah,0
.rodata:000000000000B181                 align 8
.rodata:000000000000B188 ; const char aRRecursiveOper[]
.rodata:000000000000B188 aRRecursiveOper db '  -R, --recursive        operate on files and directories recursi'
.rodata:000000000000B188                                         ; DATA XREF: usage+18A↑o
.rodata:000000000000B188                 db 'vely',0Ah,0
.rodata:000000000000B1CF                 align 10h
.rodata:000000000000B1D0 ; const char aTheFollowingOp[]
.rodata:000000000000B1D0 aTheFollowingOp db 0Ah                  ; DATA XREF: usage+1AF↑o
.rodata:000000000000B1D0                 db 'The following options modify how a hierarchy is traversed when th'
.rodata:000000000000B1D0                 db 'e -R',0Ah
.rodata:000000000000B1D0                 db 'option is also specified.  If more than one is specified, only th'
.rodata:000000000000B1D0                 db 'e final',0Ah
.rodata:000000000000B1D0                 db 'one takes effect.',0Ah
.rodata:000000000000B1D0                 db 0Ah
.rodata:000000000000B1D0                 db '  -H                     if a command line argument is a symbolic'
.rodata:000000000000B1D0                 db ' link',0Ah
.rodata:000000000000B1D0                 db '                         to a directory, traverse it',0Ah
.rodata:000000000000B1D0                 db '  -L                     traverse every symbolic link to a direct'
.rodata:000000000000B1D0                 db 'ory',0Ah
.rodata:000000000000B1D0                 db '                         encountered',0Ah
.rodata:000000000000B1D0                 db '  -P                     do not traverse any symbolic links (defa'
.rodata:000000000000B1D0                 db 'ult)',0Ah
.rodata:000000000000B1D0                 db 0Ah,0
.rodata:000000000000B3A1                 align 8
.rodata:000000000000B3A8 ; const char aHelpDisplayThi[]
.rodata:000000000000B3A8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000B3A8                                         ; DATA XREF: usage+1D4↑o
.rodata:000000000000B3D5                 align 8
.rodata:000000000000B3D8 ; const char aVersionOutputV[]
.rodata:000000000000B3D8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000B3D8                                         ; DATA XREF: usage+1F9↑o
.rodata:000000000000B40E                 align 10h
.rodata:000000000000B410 ; const char aOwnerIsUnchang[]
.rodata:000000000000B410 aOwnerIsUnchang db 0Ah                  ; DATA XREF: usage+21E↑o
.rodata:000000000000B410                 db 'Owner is unchanged if missing.  Group is unchanged if missing, bu'
.rodata:000000000000B410                 db 't changed',0Ah
.rodata:000000000000B410                 db 'to login group if implied by a ',27h,':',27h,' following a symbol'
.rodata:000000000000B410                 db 'ic OWNER.',0Ah
.rodata:000000000000B410                 db 'OWNER and GROUP may be numeric as well as symbolic.',0Ah,0
.rodata:000000000000B4D0 ; const char aExamplesSRootU[]
.rodata:000000000000B4D0 aExamplesSRootU db 0Ah                  ; DATA XREF: usage+243↑o
.rodata:000000000000B4D0                 db 'Examples:',0Ah
.rodata:000000000000B4D0                 db '  %s root /u        Change the owner of /u to "root".',0Ah
.rodata:000000000000B4D0                 db '  %s root:staff /u  Likewise, but also change its group to "staff'
.rodata:000000000000B4D0                 db '".',0Ah
.rodata:000000000000B4D0                 db '  %s -hR root /u    Change the owner of /u and subfiles to "root"'
.rodata:000000000000B4D0                 db '.',0Ah,0
.rodata:000000000000B599                 align 20h
.rodata:000000000000B5A0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000B5A0                                         ; DATA XREF: usage+347↑o
.rodata:000000000000B5A0                                         ; usage+3AB↑o ...
.rodata:000000000000B5C8 ; const char aReportAnyTrans[]
.rodata:000000000000B5C8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000B5C8                                         ; DATA XREF: usage+49F↑o
.rodata:000000000000B5C8                 db 'am/>',0Ah,0
.rodata:000000000000B60F                 align 10h
.rodata:000000000000B610 ; const char aOrAvailableLoc[]
.rodata:000000000000B610 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000B610                                         ; DATA XREF: usage:loc_2866↑o
.rodata:000000000000B643                 align 8
.rodata:000000000000B648 ; const char aRDereferenceRe[]
.rodata:000000000000B648 aRDereferenceRe db '-R --dereference requires either -H or -L',0
.rodata:000000000000B648                                         ; DATA XREF: main:loc_22B8↑o
.rodata:000000000000B672                 align 8
.rodata:000000000000B678 ; const char msgid[]
.rodata:000000000000B678 msgid           db 'failed to get attributes of %s',0
.rodata:000000000000B678                                         ; DATA XREF: main+446↑o
.rodata:000000000000B678                                         ; main+4FE↑o
.rodata:000000000000B697 ; const char aCannotAccessS[]
.rodata:000000000000B697 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: change_file_owner+4BF↑o
.rodata:000000000000B6A8 aCannotReadDire db 'cannot read directory %s',0
.rodata:000000000000B6A8                                         ; DATA XREF: change_file_owner+997↑o
.rodata:000000000000B6C1 aCannotDerefere db 'cannot dereference %s',0
.rodata:000000000000B6C1                                         ; DATA XREF: change_file_owner+AAD↑o
.rodata:000000000000B6D7 ; const char aChangingOwners[]
.rodata:000000000000B6D7 aChangingOwners db 'changing ownership of %s',0
.rodata:000000000000B6D7                                         ; DATA XREF: change_file_owner+7AA↑o
.rodata:000000000000B6F0 ; const char aChangingGroupO[]
.rodata:000000000000B6F0 aChangingGroupO db 'changing group of %s',0
.rodata:000000000000B6F0                                         ; DATA XREF: change_file_owner:loc_3408↑o
.rodata:000000000000B705 ; const char aNoChangeToOwne[]
.rodata:000000000000B705 aNoChangeToOwne db 'no change to ownership of %s',0Ah,0
.rodata:000000000000B705                                         ; DATA XREF: change_file_owner:loc_3610↑o
.rodata:000000000000B723 ; const char aGroupOfSRetain[]
.rodata:000000000000B723 aGroupOfSRetain db 'group of %s retained as %s',0Ah,0
.rodata:000000000000B723                                         ; DATA XREF: change_file_owner+76C↑o
.rodata:000000000000B73F ; const char aOwnershipOfSRe_0[]
.rodata:000000000000B73F aOwnershipOfSRe_0 db 'ownership of %s retained',0Ah,0
.rodata:000000000000B73F                                         ; DATA XREF: change_file_owner:loc_35D8↑o
.rodata:000000000000B759 ; const char aFtsReadFailed[]
.rodata:000000000000B759 aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: chown_files:loc_3978↑o
.rodata:000000000000B769 ; const char aFtsCloseFailed[]
.rodata:000000000000B769 aFtsCloseFailed db 'fts_close failed',0 ; DATA XREF: chown_files+A5↑o
.rodata:000000000000B77A                 align 20h
.rodata:000000000000B780 ; const char aItIsDangerousT[]
.rodata:000000000000B780 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.rodata:000000000000B780                                         ; DATA XREF: change_file_owner+393↑o
.rodata:000000000000B780                                         ; change_file_owner+588↑o
.rodata:000000000000B7AD                 align 10h
.rodata:000000000000B7B0 ; const char aItIsDangerousT_0[]
.rodata:000000000000B7B0 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.rodata:000000000000B7B0                                         ; DATA XREF: change_file_owner+B7B↑o
.rodata:000000000000B7B0                                         ; change_file_owner+CB3↑o
.rodata:000000000000B7EA                 align 10h
.rodata:000000000000B7F0 ; const char aUseNoPreserveR[]
.rodata:000000000000B7F0 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.rodata:000000000000B7F0                                         ; DATA XREF: change_file_owner:loc_2EAA↑o
.rodata:000000000000B7F0                                         ; change_file_owner:loc_309F↑o
.rodata:000000000000B821                 align 8
.rodata:000000000000B828 ; const char aWarningCircula[]
.rodata:000000000000B828 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:000000000000B828                                         ; DATA XREF: change_file_owner+87C↑o
.rodata:000000000000B828                 db 'This almost certainly means that you have a corrupted file system'
.rodata:000000000000B828                 db '.',0Ah
.rodata:000000000000B828                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:000000000000B828                 db 'The following directory is part of the cycle:',0Ah
.rodata:000000000000B828                 db '  %s',0Ah,0
.rodata:000000000000B8E2                 align 8
.rodata:000000000000B8E8 ; const char aChangedOwnersh[]
.rodata:000000000000B8E8 aChangedOwnersh db 'changed ownership of %s from %s to %s',0Ah,0
.rodata:000000000000B8E8                                         ; DATA XREF: change_file_owner:loc_3450↑o
.rodata:000000000000B90F                 align 10h
.rodata:000000000000B910 ; const char aChangedGroupOf[]
.rodata:000000000000B910 aChangedGroupOf db 'changed group of %s from %s to %s',0Ah,0
.rodata:000000000000B910                                         ; DATA XREF: change_file_owner+8BE↑o
.rodata:000000000000B933                 align 8
.rodata:000000000000B938 ; const char aFailedToChange[]
.rodata:000000000000B938 aFailedToChange db 'failed to change ownership of %s from %s to %s',0Ah,0
.rodata:000000000000B938                                         ; DATA XREF: change_file_owner+72A↑o
.rodata:000000000000B968 ; const char aFailedToChange_0[]
.rodata:000000000000B968 aFailedToChange_0 db 'failed to change group of %s from %s to %s',0Ah,0
.rodata:000000000000B968                                         ; DATA XREF: change_file_owner+8E1↑o
.rodata:000000000000B994                 align 8
.rodata:000000000000B998 ; const char aFailedToChange_3[]
.rodata:000000000000B998 aFailedToChange_3 db 'failed to change ownership of %s',0Ah,0
.rodata:000000000000B998                                         ; DATA XREF: change_file_owner+B10↑o
.rodata:000000000000B998                                         ; change_file_owner:loc_3710↑o
.rodata:000000000000B9BA                 align 20h
.rodata:000000000000B9C0 ; const char aFailedToChange_1[]
.rodata:000000000000B9C0 aFailedToChange_1 db 'failed to change ownership of %s to %s',0Ah,0
.rodata:000000000000B9C0                                         ; DATA XREF: change_file_owner+A33↑o
.rodata:000000000000B9E8 aFailedToChange_2 db 'failed to change group of %s to %s',0Ah,0
.rodata:000000000000B9E8                                         ; DATA XREF: change_file_owner+B03↑o
.rodata:000000000000BA0C                 align 10h
.rodata:000000000000BA10 ; const char aOwnershipOfSRe[]
.rodata:000000000000BA10 aOwnershipOfSRe db 'ownership of %s retained as %s',0Ah,0
.rodata:000000000000BA10                                         ; DATA XREF: change_file_owner+207↑o
.rodata:000000000000BA30 ; const char aNeitherSymboli[]
.rodata:000000000000BA30 aNeitherSymboli db 'neither symbolic link %s nor referent has been changed',0Ah,0
.rodata:000000000000BA30                                         ; DATA XREF: change_file_owner+9FA↑o
.rodata:000000000000BA68 jpt_2B55        dd offset def_2B55 - 0BA68h
.rodata:000000000000BA68                                         ; DATA XREF: change_file_owner+53↑o
.rodata:000000000000BA68                                         ; change_file_owner+5E↑r
.rodata:000000000000BA68                 dd offset loc_2E18 - 0BA68h ; jump table for switch statement
.rodata:000000000000BA68                 dd offset loc_2B60 - 0BA68h
.rodata:000000000000BA68                 dd offset def_2B55 - 0BA68h
.rodata:000000000000BA68                 dd offset loc_2EF0 - 0BA68h
.rodata:000000000000BA68                 dd offset def_2B55 - 0BA68h
.rodata:000000000000BA68                 dd offset loc_2FD0 - 0BA68h
.rodata:000000000000BA68                 dd offset loc_2F40 - 0BA68h
.rodata:000000000000BA68                 dd offset def_2B55 - 0BA68h
.rodata:000000000000BA68                 dd offset def_2B55 - 0BA68h
.rodata:000000000000BA68                 dd offset loc_2F80 - 0BA68h
.rodata:000000000000BA94 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000BA99 ; const char aWriteError[]
.rodata:000000000000BA99 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3A03↑o
.rodata:000000000000BAA5                 align 8
.rodata:000000000000BAA8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000BAA8                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000BAE0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000BAE0                                         ; main+435↑o ...
.rodata:000000000000BAE8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000BAEC unk_BAEC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000BAED                 db  80h
.rodata:000000000000BAEE                 db  98h
.rodata:000000000000BAEF                 db    0
.rodata:000000000000BAF0 unk_BAF0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000BAF1                 db  80h
.rodata:000000000000BAF2                 db  99h
.rodata:000000000000BAF3                 db    0
.rodata:000000000000BAF4 unk_BAF4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000BAF5                 db    7
.rodata:000000000000BAF6                 db  65h ; e
.rodata:000000000000BAF7                 db    0
.rodata:000000000000BAF8 unk_BAF8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000BAF9                 db 0AFh
.rodata:000000000000BAFA                 db    0
.rodata:000000000000BAFB unk_BAFB        db  22h ; "             ; DATA XREF: gettext_quote:loc_3B80↑o
.rodata:000000000000BAFB                                         ; quotearg_buffer_restyled:loc_493B↑o ...
.rodata:000000000000BAFC                 db    0
.rodata:000000000000BAFD ; const char asc_BAFD[2]
.rodata:000000000000BAFD asc_BAFD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000BAFD                                         ; quotearg_buffer_restyled:loc_3D03↑o ...
.rodata:000000000000BAFF ; const char asc_BAFF[2]
.rodata:000000000000BAFF asc_BAFF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000BAFF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000BB01 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000BB09 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020EB48↓o
.rodata:000000000000BB0F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020EB50↓o
.rodata:000000000000BB1C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020EB58↓o
.rodata:000000000000BB1C                                         ; .data.rel.ro:000000000020EB78↓o
.rodata:000000000000BB29 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000BB29                                         ; DATA XREF: .data.rel.ro:000000000020EB60↓o
.rodata:000000000000BB3D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020EB70↓o
.rodata:000000000000BB45 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020EB88↓o
.rodata:000000000000BB4D                 align 20h
.rodata:000000000000BB60 jpt_3CE1        dd offset loc_4A8A - 0BB60h
.rodata:000000000000BB60                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000BB60                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000BB60                 dd offset loc_3CE3 - 0BB60h ; jump table for switch statement
.rodata:000000000000BB60                 dd offset loc_4CB8 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_4AC4 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_48B4 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_4910 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_4965 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_49AA - 0BB60h
.rodata:000000000000BB60                 dd offset loc_49E4 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_49E4 - 0BB60h
.rodata:000000000000BB60                 dd offset loc_49E4 - 0BB60h
.rodata:000000000000BB8C jpt_3E3E        dd offset loc_4060 - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000BB8C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch ; jump table for switch statement
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset loc_40A0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_3FA8 - 0BB8Ch, offset loc_3F68 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4130 - 0BB8Ch, offset loc_4120 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4110 - 0BB8Ch, offset loc_4100 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset def_3E3E - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40F0 - 0BB8Ch, offset loc_40E0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_40B0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_3F43 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_40E0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_40E0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_40E0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_3F13 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset def_3E3E - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_40E0 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_3FB8 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_4088 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_4088 - 0BB8Ch, offset loc_3E43 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40E0 - 0BB8Ch, offset loc_3E43 - 0BB8Ch
.rodata:000000000000BB8C                 dd offset loc_40B0 - 0BB8Ch
.rodata:000000000000BD88 jpt_41CA        dd offset loc_4230 - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000BD88                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h ; jump table for switch statement
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset loc_4220 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4370 - 0BD88h, offset loc_4358 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4208 - 0BD88h, offset loc_4348 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_41F0 - 0BD88h, offset loc_4330 - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset def_41CA - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4318 - 0BD88h, offset loc_4300 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_42E8 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_3F40 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_4300 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_4300 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_4300 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_3F10 - 0BD88h
.rodata:000000000000BD88                 dd offset def_41CA - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_4300 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_41D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_42D0 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42D0 - 0BD88h, offset loc_3E40 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_4300 - 0BD88h, offset loc_3E40 - 0BD88h
.rodata:000000000000BD88                 dd offset loc_42E8 - 0BD88h
.rodata:000000000000BF84                 align 20h
.rodata:000000000000BFA0                 public quoting_style_vals
.rodata:000000000000BFA0 quoting_style_vals db    0
.rodata:000000000000BFA1                 db    0
.rodata:000000000000BFA2                 db    0
.rodata:000000000000BFA3                 db    0
.rodata:000000000000BFA4                 db    1
.rodata:000000000000BFA5                 db    0
.rodata:000000000000BFA6                 db    0
.rodata:000000000000BFA7                 db    0
.rodata:000000000000BFA8                 db    2
.rodata:000000000000BFA9                 db    0
.rodata:000000000000BFAA                 db    0
.rodata:000000000000BFAB                 db    0
.rodata:000000000000BFAC                 db    3
.rodata:000000000000BFAD                 db    0
.rodata:000000000000BFAE                 db    0
.rodata:000000000000BFAF                 db    0
.rodata:000000000000BFB0                 db    4
.rodata:000000000000BFB1                 db    0
.rodata:000000000000BFB2                 db    0
.rodata:000000000000BFB3                 db    0
.rodata:000000000000BFB4                 db    5
.rodata:000000000000BFB5                 db    0
.rodata:000000000000BFB6                 db    0
.rodata:000000000000BFB7                 db    0
.rodata:000000000000BFB8                 db    6
.rodata:000000000000BFB9                 db    0
.rodata:000000000000BFBA                 db    0
.rodata:000000000000BFBB                 db    0
.rodata:000000000000BFBC                 db    7
.rodata:000000000000BFBD                 db    0
.rodata:000000000000BFBE                 db    0
.rodata:000000000000BFBF                 db    0
.rodata:000000000000BFC0                 db    8
.rodata:000000000000BFC1                 db    0
.rodata:000000000000BFC2                 db    0
.rodata:000000000000BFC3                 db    0
.rodata:000000000000BFC4                 db    9
.rodata:000000000000BFC5                 db    0
.rodata:000000000000BFC6                 db    0
.rodata:000000000000BFC7                 db    0
.rodata:000000000000BFC8 aInvalidUser    db 'invalid user',0     ; DATA XREF: parse_with_separator+330↑o
.rodata:000000000000BFD5 aInvalidSpec    db 'invalid spec',0     ; DATA XREF: parse_with_separator+1D9↑o
.rodata:000000000000BFE2 aInvalidGroup   db 'invalid group',0    ; DATA XREF: parse_with_separator+253↑o
.rodata:000000000000BFF0 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000BFFC aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000C003 ; const char aC_0[]
.rodata:000000000000C003 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_5D4C↑o
.rodata:000000000000C007 ; const char aWrittenByS[]
.rodata:000000000000C007 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000C007                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000C017 ; const char aWrittenBySAndS[]
.rodata:000000000000C017 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000C017                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000C02E ; const char aWrittenBySSAnd[]
.rodata:000000000000C02E aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000C02E                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000C04A ; const char aReportBugsToS[]
.rodata:000000000000C04A aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000C04A                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000C05F aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000C05F                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000C075 ; const char aSHomePageS[]
.rodata:000000000000C075 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000C075                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000C089                 align 10h
.rodata:000000000000C090 ; const char aLicenseGplv3Gn[]
.rodata:000000000000C090 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000C090                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000C090                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000C090                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000C090                 db '.',0Ah
.rodata:000000000000C090                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000C090                 db 0Ah,0
.rodata:000000000000C15C                 align 20h
.rodata:000000000000C160 ; const char aWrittenBySSSAn[]
.rodata:000000000000C160 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C160                                         ; DATA XREF: version_etc_arn:loc_5FA0↑o
.rodata:000000000000C160                 db 'and %s.',0Ah,0
.rodata:000000000000C180 ; const char aWrittenBySSSSA[]
.rodata:000000000000C180 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C180                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000C180                 db '%s, and %s.',0Ah,0
.rodata:000000000000C1A4                 align 8
.rodata:000000000000C1A8 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000C1A8 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C1A8                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000C1A8                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000C1D0 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000C1D0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C1D0                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000C1D0                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000C1FC                 align 20h
.rodata:000000000000C200 ; const char aWrittenBySSSSS[]
.rodata:000000000000C200 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C200                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000C200                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C200                 db 'and %s.',0Ah,0
.rodata:000000000000C230 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000C230 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C230                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000C230                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C230                 db '%s, and %s.',0Ah,0
.rodata:000000000000C264                 align 8
.rodata:000000000000C268 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C268                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000C268                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C268                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000C2A4                 align 8
.rodata:000000000000C2A8 ; const char aGeneralHelpUsi[]
.rodata:000000000000C2A8 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000C2A8                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000C2A8                 db 0
.rodata:000000000000C2E9                 align 4
.rodata:000000000000C2EC jpt_5DB4        dd offset loc_5E36 - 0C2ECh
.rodata:000000000000C2EC                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000C2EC                                         ; version_etc_arn+9D↑r
.rodata:000000000000C2EC                 dd offset loc_5EC8 - 0C2ECh ; jump table for switch statement
.rodata:000000000000C2EC                 dd offset loc_5F08 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_5F50 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_5FA0 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_5FF8 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_6028 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_6090 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_5DC0 - 0C2ECh
.rodata:000000000000C2EC                 dd offset loc_5E70 - 0C2ECh
.rodata:000000000000C314                 align 20h
.rodata:000000000000C320                 public version_etc_copyright
.rodata:000000000000C320 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000C320                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000C34F ; const char aMemoryExhauste[]
.rodata:000000000000C34F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000C360 ; const char file[]
.rodata:000000000000C360 file            db '../coreutils-8.31/lib/xfts.c',0
.rodata:000000000000C360                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000000C37D ; const char assertion[]
.rodata:000000000000C37D assertion       db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:000000000000C38D                 align 10h
.rodata:000000000000C390 ; const char _PRETTY_FUNCTION___3434[]
.rodata:000000000000C390 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:000000000000C390                                         ; DATA XREF: xfts_open:loc_65F0↑o
.rodata:000000000000C39A                 align 20h
.rodata:000000000000C3A0 ; const char aCoreutils831Li_0[]
.rodata:000000000000C3A0 aCoreutils831Li_0 db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000C3A0                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:000000000000C3C0 ; const char a0StrtolBaseStr[]
.rodata:000000000000C3C0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000C3C0                                         ; DATA XREF: xstrtoul+393↑o
.rodata:000000000000C3E6                 align 8
.rodata:000000000000C3E8 jpt_6816        dd offset loc_6966 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:000000000000C3E8                                         ; xstrtoul+1CF↑r
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_6943 - 0C3E8h ; jump table for switch statement
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_697C - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_68FF - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_6818 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset loc_6920 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset loc_68DF - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_68BA - 0C3E8h
.rodata:000000000000C3E8                 dd offset loc_6894 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset loc_687D - 0C3E8h, offset loc_6840 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_697C - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_68FF - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_6818 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset loc_68DF - 0C3E8h, offset def_6816 - 0C3E8h
.rodata:000000000000C3E8                 dd offset def_6816 - 0C3E8h, offset loc_6867 - 0C3E8h
.rodata:000000000000C4C0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000C4C0 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:000000000000C4C0                                         ; DATA XREF: xstrtoul:loc_69C5↑o
.rodata:000000000000C4C9 asc_C4C9        db '..',0               ; DATA XREF: fts_safe_changedir+43↑o
.rodata:000000000000C4C9                                         ; fts_safe_changedir+14F↑o ...
.rodata:000000000000C4CC                 align 20h
.rodata:000000000000C4E0 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:000000000000C4E0                                         ; fts_build:loc_8016↑o
.rodata:000000000000C4E1                 db  10h
.rodata:000000000000C4E2                 db    0
.rodata:000000000000C4E3                 db    0
.rodata:000000000000C4E4                 db    0
.rodata:000000000000C4E5                 db  20h
.rodata:000000000000C4E6                 db    0
.rodata:000000000000C4E7                 db    0
.rodata:000000000000C4E8                 db    0
.rodata:000000000000C4E9                 db    0
.rodata:000000000000C4EA                 db    0
.rodata:000000000000C4EB                 db    0
.rodata:000000000000C4EC                 db    0
.rodata:000000000000C4ED                 db  40h ; @
.rodata:000000000000C4EE                 db    0
.rodata:000000000000C4EF                 db    0
.rodata:000000000000C4F0                 db    0
.rodata:000000000000C4F1                 db    0
.rodata:000000000000C4F2                 db    0
.rodata:000000000000C4F3                 db    0
.rodata:000000000000C4F4                 db    0
.rodata:000000000000C4F5                 db  60h ; `
.rodata:000000000000C4F6                 db    0
.rodata:000000000000C4F7                 db    0
.rodata:000000000000C4F8                 db    0
.rodata:000000000000C4F9                 db    0
.rodata:000000000000C4FA                 db    0
.rodata:000000000000C4FB                 db    0
.rodata:000000000000C4FC                 db    0
.rodata:000000000000C4FD                 db  80h
.rodata:000000000000C4FE                 db    0
.rodata:000000000000C4FF                 db    0
.rodata:000000000000C500                 db    0
.rodata:000000000000C501                 db    0
.rodata:000000000000C502                 db    0
.rodata:000000000000C503                 db    0
.rodata:000000000000C504                 db    0
.rodata:000000000000C505                 db 0A0h
.rodata:000000000000C506                 db    0
.rodata:000000000000C507                 db    0
.rodata:000000000000C508                 db    0
.rodata:000000000000C509                 db    0
.rodata:000000000000C50A                 db    0
.rodata:000000000000C50B                 db    0
.rodata:000000000000C50C                 db    0
.rodata:000000000000C50D                 db 0C0h
.rodata:000000000000C50E                 db    0
.rodata:000000000000C50F                 db    0
.rodata:000000000000C510 ; const char aCoreutils831Li_1[]
.rodata:000000000000C510 aCoreutils831Li_1 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:000000000000C510                                         ; DATA XREF: cycle_check+6E↑o
.rodata:000000000000C534 ; const char aStateMagic9827[]
.rodata:000000000000C534 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:000000000000C534                                         ; DATA XREF: cycle_check+75↑o
.rodata:000000000000C54C                 align 10h
.rodata:000000000000C550 ; const char _PRETTY_FUNCTION___3994[]
.rodata:000000000000C550 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:000000000000C550                                         ; DATA XREF: cycle_check:loc_9007↑o
.rodata:000000000000C55C aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000C55E aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_90E0↑o
.rodata:000000000000C564 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000C564                                         ; DATA XREF: hash_print_statistics:loc_9615↑o
.rodata:000000000000C57C aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000C57C                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000C594 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000C594                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000C5AC                 align 10h
.rodata:000000000000C5B0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000C5B0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000C5D1                 align 20h
.rodata:000000000000C5E0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000C5E0                                         ; hash_initialize:loc_9A80↑o
.rodata:000000000000C5E1                 db    0
.rodata:000000000000C5E2                 db    0
.rodata:000000000000C5E3                 db    0
.rodata:000000000000C5E4                 db    0
.rodata:000000000000C5E5                 db    0
.rodata:000000000000C5E6                 db  80h
.rodata:000000000000C5E7                 db  3Fh ; ?
.rodata:000000000000C5E8                 db 0CDh
.rodata:000000000000C5E9                 db 0CCh
.rodata:000000000000C5EA                 db  4Ch ; L
.rodata:000000000000C5EB                 db  3Fh ; ?
.rodata:000000000000C5EC                 db 0F4h
.rodata:000000000000C5ED                 db 0FDh
.rodata:000000000000C5EE                 db 0B4h
.rodata:000000000000C5EF                 db  3Fh ; ?
.rodata:000000000000C5F0                 db    0
.rodata:000000000000C5F1                 db    0
.rodata:000000000000C5F2                 db    0
.rodata:000000000000C5F3                 db    0
.rodata:000000000000C5F4 dword_C5F4      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000C5F4                                         ; check_tuning+4A↑r
.rodata:000000000000C5F8 dword_C5F8      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000C5FC dword_C5FC      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000C600 dword_C600      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000C604 dword_C604      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000C608 dword_C608      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000C60C dword_C60C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000C60C                                         ; hash_rehash+40↑r ...
.rodata:000000000000C610 dword_C610      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000C610                                         ; hash_initialize+150↑r ...
.rodata:000000000000C614                 align 8
.rodata:000000000000C618 qword_C618      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000C618                                         ; hash_print_statistics+11F↑r
.rodata:000000000000C620 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000C620                                         ; locale_charset:loc_A4C0↑o
.rodata:000000000000C620 _rodata         ends
.rodata:000000000000C620
LOAD:000000000000C626 ; ===========================================================================
LOAD:000000000000C626
LOAD:000000000000C626 ; Segment type: Pure code
LOAD:000000000000C626 ; Segment permissions: Read/Execute
LOAD:000000000000C626 LOAD            segment byte public 'CODE' use64
LOAD:000000000000C626                 assume cs:LOAD
LOAD:000000000000C626                 ;org 0C626h
LOAD:000000000000C626                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000C626                 align 8
LOAD:000000000000C626 LOAD            ends
LOAD:000000000000C626
.eh_frame_hdr:000000000000C628 ; ===========================================================================
.eh_frame_hdr:000000000000C628
.eh_frame_hdr:000000000000C628 ; Segment type: Pure data
.eh_frame_hdr:000000000000C628 ; Segment permissions: Read
.eh_frame_hdr:000000000000C628 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000C628                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000C628                 ;org 0C628h
.eh_frame_hdr:000000000000C628 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000C629                 db  1Bh
.eh_frame_hdr:000000000000C62A                 db    3
.eh_frame_hdr:000000000000C62B                 db  3Bh ; ;
.eh_frame_hdr:000000000000C62C                 db 0B4h
.eh_frame_hdr:000000000000C62D                 db    4
.eh_frame_hdr:000000000000C62E                 db    0
.eh_frame_hdr:000000000000C62F                 db    0
.eh_frame_hdr:000000000000C630                 db  95h
.eh_frame_hdr:000000000000C631                 db    0
.eh_frame_hdr:000000000000C632                 db    0
.eh_frame_hdr:000000000000C633                 db    0
.eh_frame_hdr:000000000000C634                 db  68h ; h
.eh_frame_hdr:000000000000C635                 db  53h ; S
.eh_frame_hdr:000000000000C636                 db 0FFh
.eh_frame_hdr:000000000000C637                 db 0FFh
.eh_frame_hdr:000000000000C638                 db    0
.eh_frame_hdr:000000000000C639                 db    5
.eh_frame_hdr:000000000000C63A                 db    0
.eh_frame_hdr:000000000000C63B                 db    0
.eh_frame_hdr:000000000000C63C                 db 0B8h
.eh_frame_hdr:000000000000C63D                 db  57h ; W
.eh_frame_hdr:000000000000C63E                 db 0FFh
.eh_frame_hdr:000000000000C63F                 db 0FFh
.eh_frame_hdr:000000000000C640                 db  28h ; (
.eh_frame_hdr:000000000000C641                 db    5
.eh_frame_hdr:000000000000C642                 db    0
.eh_frame_hdr:000000000000C643                 db    0
.eh_frame_hdr:000000000000C644                 db 0C8h
.eh_frame_hdr:000000000000C645                 db  57h ; W
.eh_frame_hdr:000000000000C646                 db 0FFh
.eh_frame_hdr:000000000000C647                 db 0FFh
.eh_frame_hdr:000000000000C648                 db  6Ch ; l
.eh_frame_hdr:000000000000C649                 db    5
.eh_frame_hdr:000000000000C64A                 db    0
.eh_frame_hdr:000000000000C64B                 db    0
.eh_frame_hdr:000000000000C64C                 db  58h ; X
.eh_frame_hdr:000000000000C64D                 db  5Dh ; ]
.eh_frame_hdr:000000000000C64E                 db 0FFh
.eh_frame_hdr:000000000000C64F                 db 0FFh
.eh_frame_hdr:000000000000C650                 db 0D0h
.eh_frame_hdr:000000000000C651                 db    4
.eh_frame_hdr:000000000000C652                 db    0
.eh_frame_hdr:000000000000C653                 db    0
.eh_frame_hdr:000000000000C654                 db  68h ; h
.eh_frame_hdr:000000000000C655                 db  5Eh ; ^
.eh_frame_hdr:000000000000C656                 db 0FFh
.eh_frame_hdr:000000000000C657                 db 0FFh
.eh_frame_hdr:000000000000C658                 db  40h ; @
.eh_frame_hdr:000000000000C659                 db    5
.eh_frame_hdr:000000000000C65A                 db    0
.eh_frame_hdr:000000000000C65B                 db    0
.eh_frame_hdr:000000000000C65C                 db  38h ; 8
.eh_frame_hdr:000000000000C65D                 db  63h ; c
.eh_frame_hdr:000000000000C65E                 db 0FFh
.eh_frame_hdr:000000000000C65F                 db 0FFh
.eh_frame_hdr:000000000000C660                 db 0D8h
.eh_frame_hdr:000000000000C661                 db    5
.eh_frame_hdr:000000000000C662                 db    0
.eh_frame_hdr:000000000000C663                 db    0
.eh_frame_hdr:000000000000C664                 db 0B8h
.eh_frame_hdr:000000000000C665                 db  63h ; c
.eh_frame_hdr:000000000000C666                 db 0FFh
.eh_frame_hdr:000000000000C667                 db 0FFh
.eh_frame_hdr:000000000000C668                 db  14h
.eh_frame_hdr:000000000000C669                 db    6
.eh_frame_hdr:000000000000C66A                 db    0
.eh_frame_hdr:000000000000C66B                 db    0
.eh_frame_hdr:000000000000C66C                 db 0E8h
.eh_frame_hdr:000000000000C66D                 db  63h ; c
.eh_frame_hdr:000000000000C66E                 db 0FFh
.eh_frame_hdr:000000000000C66F                 db 0FFh
.eh_frame_hdr:000000000000C670                 db  28h ; (
.eh_frame_hdr:000000000000C671                 db    6
.eh_frame_hdr:000000000000C672                 db    0
.eh_frame_hdr:000000000000C673                 db    0
.eh_frame_hdr:000000000000C674                 db    8
.eh_frame_hdr:000000000000C675                 db  64h ; d
.eh_frame_hdr:000000000000C676                 db 0FFh
.eh_frame_hdr:000000000000C677                 db 0FFh
.eh_frame_hdr:000000000000C678                 db  44h ; D
.eh_frame_hdr:000000000000C679                 db    6
.eh_frame_hdr:000000000000C67A                 db    0
.eh_frame_hdr:000000000000C67B                 db    0
.eh_frame_hdr:000000000000C67C                 db  68h ; h
.eh_frame_hdr:000000000000C67D                 db  64h ; d
.eh_frame_hdr:000000000000C67E                 db 0FFh
.eh_frame_hdr:000000000000C67F                 db 0FFh
.eh_frame_hdr:000000000000C680                 db  68h ; h
.eh_frame_hdr:000000000000C681                 db    6
.eh_frame_hdr:000000000000C682                 db    0
.eh_frame_hdr:000000000000C683                 db    0
.eh_frame_hdr:000000000000C684                 db 0C8h
.eh_frame_hdr:000000000000C685                 db  64h ; d
.eh_frame_hdr:000000000000C686                 db 0FFh
.eh_frame_hdr:000000000000C687                 db 0FFh
.eh_frame_hdr:000000000000C688                 db  8Ch
.eh_frame_hdr:000000000000C689                 db    6
.eh_frame_hdr:000000000000C68A                 db    0
.eh_frame_hdr:000000000000C68B                 db    0
.eh_frame_hdr:000000000000C68C                 db  58h ; X
.eh_frame_hdr:000000000000C68D                 db  72h ; r
.eh_frame_hdr:000000000000C68E                 db 0FFh
.eh_frame_hdr:000000000000C68F                 db 0FFh
.eh_frame_hdr:000000000000C690                 db 0DCh
.eh_frame_hdr:000000000000C691                 db    6
.eh_frame_hdr:000000000000C692                 db    0
.eh_frame_hdr:000000000000C693                 db    0
.eh_frame_hdr:000000000000C694                 db  78h ; x
.eh_frame_hdr:000000000000C695                 db  73h ; s
.eh_frame_hdr:000000000000C696                 db 0FFh
.eh_frame_hdr:000000000000C697                 db 0FFh
.eh_frame_hdr:000000000000C698                 db  38h ; 8
.eh_frame_hdr:000000000000C699                 db    7
.eh_frame_hdr:000000000000C69A                 db    0
.eh_frame_hdr:000000000000C69B                 db    0
.eh_frame_hdr:000000000000C69C                 db  88h
.eh_frame_hdr:000000000000C69D                 db  73h ; s
.eh_frame_hdr:000000000000C69E                 db 0FFh
.eh_frame_hdr:000000000000C69F                 db 0FFh
.eh_frame_hdr:000000000000C6A0                 db  4Ch ; L
.eh_frame_hdr:000000000000C6A1                 db    7
.eh_frame_hdr:000000000000C6A2                 db    0
.eh_frame_hdr:000000000000C6A3                 db    0
.eh_frame_hdr:000000000000C6A4                 db  98h
.eh_frame_hdr:000000000000C6A5                 db  73h ; s
.eh_frame_hdr:000000000000C6A6                 db 0FFh
.eh_frame_hdr:000000000000C6A7                 db 0FFh
.eh_frame_hdr:000000000000C6A8                 db  60h ; `
.eh_frame_hdr:000000000000C6A9                 db    7
.eh_frame_hdr:000000000000C6AA                 db    0
.eh_frame_hdr:000000000000C6AB                 db    0
.eh_frame_hdr:000000000000C6AC                 db  48h ; H
.eh_frame_hdr:000000000000C6AD                 db  74h ; t
.eh_frame_hdr:000000000000C6AE                 db 0FFh
.eh_frame_hdr:000000000000C6AF                 db 0FFh
.eh_frame_hdr:000000000000C6B0                 db  90h
.eh_frame_hdr:000000000000C6B1                 db    7
.eh_frame_hdr:000000000000C6B2                 db    0
.eh_frame_hdr:000000000000C6B3                 db    0
.eh_frame_hdr:000000000000C6B4                 db  98h
.eh_frame_hdr:000000000000C6B5                 db  74h ; t
.eh_frame_hdr:000000000000C6B6                 db 0FFh
.eh_frame_hdr:000000000000C6B7                 db 0FFh
.eh_frame_hdr:000000000000C6B8                 db 0A8h
.eh_frame_hdr:000000000000C6B9                 db    7
.eh_frame_hdr:000000000000C6BA                 db    0
.eh_frame_hdr:000000000000C6BB                 db    0
.eh_frame_hdr:000000000000C6BC                 db  38h ; 8
.eh_frame_hdr:000000000000C6BD                 db  75h ; u
.eh_frame_hdr:000000000000C6BE                 db 0FFh
.eh_frame_hdr:000000000000C6BF                 db 0FFh
.eh_frame_hdr:000000000000C6C0                 db 0C8h
.eh_frame_hdr:000000000000C6C1                 db    7
.eh_frame_hdr:000000000000C6C2                 db    0
.eh_frame_hdr:000000000000C6C3                 db    0
.eh_frame_hdr:000000000000C6C4                 db  28h ; (
.eh_frame_hdr:000000000000C6C5                 db  76h ; v
.eh_frame_hdr:000000000000C6C6                 db 0FFh
.eh_frame_hdr:000000000000C6C7                 db 0FFh
.eh_frame_hdr:000000000000C6C8                 db  0Ch
.eh_frame_hdr:000000000000C6C9                 db    8
.eh_frame_hdr:000000000000C6CA                 db    0
.eh_frame_hdr:000000000000C6CB                 db    0
.eh_frame_hdr:000000000000C6CC                 db  68h ; h
.eh_frame_hdr:000000000000C6CD                 db  88h
.eh_frame_hdr:000000000000C6CE                 db 0FFh
.eh_frame_hdr:000000000000C6CF                 db 0FFh
.eh_frame_hdr:000000000000C6D0                 db  84h
.eh_frame_hdr:000000000000C6D1                 db    8
.eh_frame_hdr:000000000000C6D2                 db    0
.eh_frame_hdr:000000000000C6D3                 db    0
.eh_frame_hdr:000000000000C6D4                 db  18h
.eh_frame_hdr:000000000000C6D5                 db  8Ah
.eh_frame_hdr:000000000000C6D6                 db 0FFh
.eh_frame_hdr:000000000000C6D7                 db 0FFh
.eh_frame_hdr:000000000000C6D8                 db 0F0h
.eh_frame_hdr:000000000000C6D9                 db    8
.eh_frame_hdr:000000000000C6DA                 db    0
.eh_frame_hdr:000000000000C6DB                 db    0
.eh_frame_hdr:000000000000C6DC                 db  58h ; X
.eh_frame_hdr:000000000000C6DD                 db  8Ah
.eh_frame_hdr:000000000000C6DE                 db 0FFh
.eh_frame_hdr:000000000000C6DF                 db 0FFh
.eh_frame_hdr:000000000000C6E0                 db  1Ch
.eh_frame_hdr:000000000000C6E1                 db    9
.eh_frame_hdr:000000000000C6E2                 db    0
.eh_frame_hdr:000000000000C6E3                 db    0
.eh_frame_hdr:000000000000C6E4                 db  78h ; x
.eh_frame_hdr:000000000000C6E5                 db  8Ah
.eh_frame_hdr:000000000000C6E6                 db 0FFh
.eh_frame_hdr:000000000000C6E7                 db 0FFh
.eh_frame_hdr:000000000000C6E8                 db  30h ; 0
.eh_frame_hdr:000000000000C6E9                 db    9
.eh_frame_hdr:000000000000C6EA                 db    0
.eh_frame_hdr:000000000000C6EB                 db    0
.eh_frame_hdr:000000000000C6EC                 db  98h
.eh_frame_hdr:000000000000C6ED                 db  8Ah
.eh_frame_hdr:000000000000C6EE                 db 0FFh
.eh_frame_hdr:000000000000C6EF                 db 0FFh
.eh_frame_hdr:000000000000C6F0                 db  44h ; D
.eh_frame_hdr:000000000000C6F1                 db    9
.eh_frame_hdr:000000000000C6F2                 db    0
.eh_frame_hdr:000000000000C6F3                 db    0
.eh_frame_hdr:000000000000C6F4                 db 0D8h
.eh_frame_hdr:000000000000C6F5                 db  8Ah
.eh_frame_hdr:000000000000C6F6                 db 0FFh
.eh_frame_hdr:000000000000C6F7                 db 0FFh
.eh_frame_hdr:000000000000C6F8                 db  58h ; X
.eh_frame_hdr:000000000000C6F9                 db    9
.eh_frame_hdr:000000000000C6FA                 db    0
.eh_frame_hdr:000000000000C6FB                 db    0
.eh_frame_hdr:000000000000C6FC                 db 0F8h
.eh_frame_hdr:000000000000C6FD                 db  8Ah
.eh_frame_hdr:000000000000C6FE                 db 0FFh
.eh_frame_hdr:000000000000C6FF                 db 0FFh
.eh_frame_hdr:000000000000C700                 db  6Ch ; l
.eh_frame_hdr:000000000000C701                 db    9
.eh_frame_hdr:000000000000C702                 db    0
.eh_frame_hdr:000000000000C703                 db    0
.eh_frame_hdr:000000000000C704                 db  28h ; (
.eh_frame_hdr:000000000000C705                 db  8Bh
.eh_frame_hdr:000000000000C706                 db 0FFh
.eh_frame_hdr:000000000000C707                 db 0FFh
.eh_frame_hdr:000000000000C708                 db  80h
.eh_frame_hdr:000000000000C709                 db    9
.eh_frame_hdr:000000000000C70A                 db    0
.eh_frame_hdr:000000000000C70B                 db    0
.eh_frame_hdr:000000000000C70C                 db 0A8h
.eh_frame_hdr:000000000000C70D                 db  8Bh
.eh_frame_hdr:000000000000C70E                 db 0FFh
.eh_frame_hdr:000000000000C70F                 db 0FFh
.eh_frame_hdr:000000000000C710                 db 0D4h
.eh_frame_hdr:000000000000C711                 db    9
.eh_frame_hdr:000000000000C712                 db    0
.eh_frame_hdr:000000000000C713                 db    0
.eh_frame_hdr:000000000000C714                 db  98h
.eh_frame_hdr:000000000000C715                 db  8Ch
.eh_frame_hdr:000000000000C716                 db 0FFh
.eh_frame_hdr:000000000000C717                 db 0FFh
.eh_frame_hdr:000000000000C718                 db  40h ; @
.eh_frame_hdr:000000000000C719                 db  0Ah
.eh_frame_hdr:000000000000C71A                 db    0
.eh_frame_hdr:000000000000C71B                 db    0
.eh_frame_hdr:000000000000C71C                 db 0A8h
.eh_frame_hdr:000000000000C71D                 db  8Ch
.eh_frame_hdr:000000000000C71E                 db 0FFh
.eh_frame_hdr:000000000000C71F                 db 0FFh
.eh_frame_hdr:000000000000C720                 db  54h ; T
.eh_frame_hdr:000000000000C721                 db  0Ah
.eh_frame_hdr:000000000000C722                 db    0
.eh_frame_hdr:000000000000C723                 db    0
.eh_frame_hdr:000000000000C724                 db  48h ; H
.eh_frame_hdr:000000000000C725                 db  8Dh
.eh_frame_hdr:000000000000C726                 db 0FFh
.eh_frame_hdr:000000000000C727                 db 0FFh
.eh_frame_hdr:000000000000C728                 db  80h
.eh_frame_hdr:000000000000C729                 db  0Ah
.eh_frame_hdr:000000000000C72A                 db    0
.eh_frame_hdr:000000000000C72B                 db    0
.eh_frame_hdr:000000000000C72C                 db  68h ; h
.eh_frame_hdr:000000000000C72D                 db  8Dh
.eh_frame_hdr:000000000000C72E                 db 0FFh
.eh_frame_hdr:000000000000C72F                 db 0FFh
.eh_frame_hdr:000000000000C730                 db  94h
.eh_frame_hdr:000000000000C731                 db  0Ah
.eh_frame_hdr:000000000000C732                 db    0
.eh_frame_hdr:000000000000C733                 db    0
.eh_frame_hdr:000000000000C734                 db  78h ; x
.eh_frame_hdr:000000000000C735                 db  8Dh
.eh_frame_hdr:000000000000C736                 db 0FFh
.eh_frame_hdr:000000000000C737                 db 0FFh
.eh_frame_hdr:000000000000C738                 db 0A8h
.eh_frame_hdr:000000000000C739                 db  0Ah
.eh_frame_hdr:000000000000C73A                 db    0
.eh_frame_hdr:000000000000C73B                 db    0
.eh_frame_hdr:000000000000C73C                 db  98h
.eh_frame_hdr:000000000000C73D                 db  8Dh
.eh_frame_hdr:000000000000C73E                 db 0FFh
.eh_frame_hdr:000000000000C73F                 db 0FFh
.eh_frame_hdr:000000000000C740                 db 0BCh
.eh_frame_hdr:000000000000C741                 db  0Ah
.eh_frame_hdr:000000000000C742                 db    0
.eh_frame_hdr:000000000000C743                 db    0
.eh_frame_hdr:000000000000C744                 db 0B8h
.eh_frame_hdr:000000000000C745                 db  8Dh
.eh_frame_hdr:000000000000C746                 db 0FFh
.eh_frame_hdr:000000000000C747                 db 0FFh
.eh_frame_hdr:000000000000C748                 db 0D0h
.eh_frame_hdr:000000000000C749                 db  0Ah
.eh_frame_hdr:000000000000C74A                 db    0
.eh_frame_hdr:000000000000C74B                 db    0
.eh_frame_hdr:000000000000C74C                 db  48h ; H
.eh_frame_hdr:000000000000C74D                 db  8Eh
.eh_frame_hdr:000000000000C74E                 db 0FFh
.eh_frame_hdr:000000000000C74F                 db 0FFh
.eh_frame_hdr:000000000000C750                 db 0ECh
.eh_frame_hdr:000000000000C751                 db  0Ah
.eh_frame_hdr:000000000000C752                 db    0
.eh_frame_hdr:000000000000C753                 db    0
.eh_frame_hdr:000000000000C754                 db 0D8h
.eh_frame_hdr:000000000000C755                 db  8Eh
.eh_frame_hdr:000000000000C756                 db 0FFh
.eh_frame_hdr:000000000000C757                 db 0FFh
.eh_frame_hdr:000000000000C758                 db    8
.eh_frame_hdr:000000000000C759                 db  0Bh
.eh_frame_hdr:000000000000C75A                 db    0
.eh_frame_hdr:000000000000C75B                 db    0
.eh_frame_hdr:000000000000C75C                 db 0E8h
.eh_frame_hdr:000000000000C75D                 db  8Eh
.eh_frame_hdr:000000000000C75E                 db 0FFh
.eh_frame_hdr:000000000000C75F                 db 0FFh
.eh_frame_hdr:000000000000C760                 db  1Ch
.eh_frame_hdr:000000000000C761                 db  0Bh
.eh_frame_hdr:000000000000C762                 db    0
.eh_frame_hdr:000000000000C763                 db    0
.eh_frame_hdr:000000000000C764                 db 0F8h
.eh_frame_hdr:000000000000C765                 db  8Eh
.eh_frame_hdr:000000000000C766                 db 0FFh
.eh_frame_hdr:000000000000C767                 db 0FFh
.eh_frame_hdr:000000000000C768                 db  30h ; 0
.eh_frame_hdr:000000000000C769                 db  0Bh
.eh_frame_hdr:000000000000C76A                 db    0
.eh_frame_hdr:000000000000C76B                 db    0
.eh_frame_hdr:000000000000C76C                 db  98h
.eh_frame_hdr:000000000000C76D                 db  8Fh
.eh_frame_hdr:000000000000C76E                 db 0FFh
.eh_frame_hdr:000000000000C76F                 db 0FFh
.eh_frame_hdr:000000000000C770                 db  4Ch ; L
.eh_frame_hdr:000000000000C771                 db  0Bh
.eh_frame_hdr:000000000000C772                 db    0
.eh_frame_hdr:000000000000C773                 db    0
.eh_frame_hdr:000000000000C774                 db 0A8h
.eh_frame_hdr:000000000000C775                 db  8Fh
.eh_frame_hdr:000000000000C776                 db 0FFh
.eh_frame_hdr:000000000000C777                 db 0FFh
.eh_frame_hdr:000000000000C778                 db  60h ; `
.eh_frame_hdr:000000000000C779                 db  0Bh
.eh_frame_hdr:000000000000C77A                 db    0
.eh_frame_hdr:000000000000C77B                 db    0
.eh_frame_hdr:000000000000C77C                 db 0C8h
.eh_frame_hdr:000000000000C77D                 db  8Fh
.eh_frame_hdr:000000000000C77E                 db 0FFh
.eh_frame_hdr:000000000000C77F                 db 0FFh
.eh_frame_hdr:000000000000C780                 db  74h ; t
.eh_frame_hdr:000000000000C781                 db  0Bh
.eh_frame_hdr:000000000000C782                 db    0
.eh_frame_hdr:000000000000C783                 db    0
.eh_frame_hdr:000000000000C784                 db 0D8h
.eh_frame_hdr:000000000000C785                 db  8Fh
.eh_frame_hdr:000000000000C786                 db 0FFh
.eh_frame_hdr:000000000000C787                 db 0FFh
.eh_frame_hdr:000000000000C788                 db  88h
.eh_frame_hdr:000000000000C789                 db  0Bh
.eh_frame_hdr:000000000000C78A                 db    0
.eh_frame_hdr:000000000000C78B                 db    0
.eh_frame_hdr:000000000000C78C                 db  68h ; h
.eh_frame_hdr:000000000000C78D                 db  90h
.eh_frame_hdr:000000000000C78E                 db 0FFh
.eh_frame_hdr:000000000000C78F                 db 0FFh
.eh_frame_hdr:000000000000C790                 db 0A4h
.eh_frame_hdr:000000000000C791                 db  0Bh
.eh_frame_hdr:000000000000C792                 db    0
.eh_frame_hdr:000000000000C793                 db    0
.eh_frame_hdr:000000000000C794                 db    8
.eh_frame_hdr:000000000000C795                 db  91h
.eh_frame_hdr:000000000000C796                 db 0FFh
.eh_frame_hdr:000000000000C797                 db 0FFh
.eh_frame_hdr:000000000000C798                 db 0C0h
.eh_frame_hdr:000000000000C799                 db  0Bh
.eh_frame_hdr:000000000000C79A                 db    0
.eh_frame_hdr:000000000000C79B                 db    0
.eh_frame_hdr:000000000000C79C                 db  18h
.eh_frame_hdr:000000000000C79D                 db  91h
.eh_frame_hdr:000000000000C79E                 db 0FFh
.eh_frame_hdr:000000000000C79F                 db 0FFh
.eh_frame_hdr:000000000000C7A0                 db 0D4h
.eh_frame_hdr:000000000000C7A1                 db  0Bh
.eh_frame_hdr:000000000000C7A2                 db    0
.eh_frame_hdr:000000000000C7A3                 db    0
.eh_frame_hdr:000000000000C7A4                 db  38h ; 8
.eh_frame_hdr:000000000000C7A5                 db  91h
.eh_frame_hdr:000000000000C7A6                 db 0FFh
.eh_frame_hdr:000000000000C7A7                 db 0FFh
.eh_frame_hdr:000000000000C7A8                 db 0E8h
.eh_frame_hdr:000000000000C7A9                 db  0Bh
.eh_frame_hdr:000000000000C7AA                 db    0
.eh_frame_hdr:000000000000C7AB                 db    0
.eh_frame_hdr:000000000000C7AC                 db  58h ; X
.eh_frame_hdr:000000000000C7AD                 db  91h
.eh_frame_hdr:000000000000C7AE                 db 0FFh
.eh_frame_hdr:000000000000C7AF                 db 0FFh
.eh_frame_hdr:000000000000C7B0                 db 0FCh
.eh_frame_hdr:000000000000C7B1                 db  0Bh
.eh_frame_hdr:000000000000C7B2                 db    0
.eh_frame_hdr:000000000000C7B3                 db    0
.eh_frame_hdr:000000000000C7B4                 db  68h ; h
.eh_frame_hdr:000000000000C7B5                 db  91h
.eh_frame_hdr:000000000000C7B6                 db 0FFh
.eh_frame_hdr:000000000000C7B7                 db 0FFh
.eh_frame_hdr:000000000000C7B8                 db  10h
.eh_frame_hdr:000000000000C7B9                 db  0Ch
.eh_frame_hdr:000000000000C7BA                 db    0
.eh_frame_hdr:000000000000C7BB                 db    0
.eh_frame_hdr:000000000000C7BC                 db  88h
.eh_frame_hdr:000000000000C7BD                 db  91h
.eh_frame_hdr:000000000000C7BE                 db 0FFh
.eh_frame_hdr:000000000000C7BF                 db 0FFh
.eh_frame_hdr:000000000000C7C0                 db  24h ; $
.eh_frame_hdr:000000000000C7C1                 db  0Ch
.eh_frame_hdr:000000000000C7C2                 db    0
.eh_frame_hdr:000000000000C7C3                 db    0
.eh_frame_hdr:000000000000C7C4                 db 0A8h
.eh_frame_hdr:000000000000C7C5                 db  91h
.eh_frame_hdr:000000000000C7C6                 db 0FFh
.eh_frame_hdr:000000000000C7C7                 db 0FFh
.eh_frame_hdr:000000000000C7C8                 db  38h ; 8
.eh_frame_hdr:000000000000C7C9                 db  0Ch
.eh_frame_hdr:000000000000C7CA                 db    0
.eh_frame_hdr:000000000000C7CB                 db    0
.eh_frame_hdr:000000000000C7CC                 db 0C8h
.eh_frame_hdr:000000000000C7CD                 db  91h
.eh_frame_hdr:000000000000C7CE                 db 0FFh
.eh_frame_hdr:000000000000C7CF                 db 0FFh
.eh_frame_hdr:000000000000C7D0                 db  50h ; P
.eh_frame_hdr:000000000000C7D1                 db  0Ch
.eh_frame_hdr:000000000000C7D2                 db    0
.eh_frame_hdr:000000000000C7D3                 db    0
.eh_frame_hdr:000000000000C7D4                 db  48h ; H
.eh_frame_hdr:000000000000C7D5                 db  92h
.eh_frame_hdr:000000000000C7D6                 db 0FFh
.eh_frame_hdr:000000000000C7D7                 db 0FFh
.eh_frame_hdr:000000000000C7D8                 db  78h ; x
.eh_frame_hdr:000000000000C7D9                 db  0Ch
.eh_frame_hdr:000000000000C7DA                 db    0
.eh_frame_hdr:000000000000C7DB                 db    0
.eh_frame_hdr:000000000000C7DC                 db  18h
.eh_frame_hdr:000000000000C7DD                 db  96h
.eh_frame_hdr:000000000000C7DE                 db 0FFh
.eh_frame_hdr:000000000000C7DF                 db 0FFh
.eh_frame_hdr:000000000000C7E0                 db 0C8h
.eh_frame_hdr:000000000000C7E1                 db  0Ch
.eh_frame_hdr:000000000000C7E2                 db    0
.eh_frame_hdr:000000000000C7E3                 db    0
.eh_frame_hdr:000000000000C7E4                 db 0E8h
.eh_frame_hdr:000000000000C7E5                 db  96h
.eh_frame_hdr:000000000000C7E6                 db 0FFh
.eh_frame_hdr:000000000000C7E7                 db 0FFh
.eh_frame_hdr:000000000000C7E8                 db  28h ; (
.eh_frame_hdr:000000000000C7E9                 db  0Dh
.eh_frame_hdr:000000000000C7EA                 db    0
.eh_frame_hdr:000000000000C7EB                 db    0
.eh_frame_hdr:000000000000C7EC                 db    8
.eh_frame_hdr:000000000000C7ED                 db  9Bh
.eh_frame_hdr:000000000000C7EE                 db 0FFh
.eh_frame_hdr:000000000000C7EF                 db 0FFh
.eh_frame_hdr:000000000000C7F0                 db  3Ch ; <
.eh_frame_hdr:000000000000C7F1                 db  0Eh
.eh_frame_hdr:000000000000C7F2                 db    0
.eh_frame_hdr:000000000000C7F3                 db    0
.eh_frame_hdr:000000000000C7F4                 db  28h ; (
.eh_frame_hdr:000000000000C7F5                 db  9Bh
.eh_frame_hdr:000000000000C7F6                 db 0FFh
.eh_frame_hdr:000000000000C7F7                 db 0FFh
.eh_frame_hdr:000000000000C7F8                 db  50h ; P
.eh_frame_hdr:000000000000C7F9                 db  0Eh
.eh_frame_hdr:000000000000C7FA                 db    0
.eh_frame_hdr:000000000000C7FB                 db    0
.eh_frame_hdr:000000000000C7FC                 db 0A8h
.eh_frame_hdr:000000000000C7FD                 db  9Bh
.eh_frame_hdr:000000000000C7FE                 db 0FFh
.eh_frame_hdr:000000000000C7FF                 db 0FFh
.eh_frame_hdr:000000000000C800                 db  6Ch ; l
.eh_frame_hdr:000000000000C801                 db  0Eh
.eh_frame_hdr:000000000000C802                 db    0
.eh_frame_hdr:000000000000C803                 db    0
.eh_frame_hdr:000000000000C804                 db  88h
.eh_frame_hdr:000000000000C805                 db  9Ch
.eh_frame_hdr:000000000000C806                 db 0FFh
.eh_frame_hdr:000000000000C807                 db 0FFh
.eh_frame_hdr:000000000000C808                 db  98h
.eh_frame_hdr:000000000000C809                 db  0Eh
.eh_frame_hdr:000000000000C80A                 db    0
.eh_frame_hdr:000000000000C80B                 db    0
.eh_frame_hdr:000000000000C80C                 db    8
.eh_frame_hdr:000000000000C80D                 db  9Dh
.eh_frame_hdr:000000000000C80E                 db 0FFh
.eh_frame_hdr:000000000000C80F                 db 0FFh
.eh_frame_hdr:000000000000C810                 db 0B8h
.eh_frame_hdr:000000000000C811                 db  0Eh
.eh_frame_hdr:000000000000C812                 db    0
.eh_frame_hdr:000000000000C813                 db    0
.eh_frame_hdr:000000000000C814                 db  28h ; (
.eh_frame_hdr:000000000000C815                 db  9Dh
.eh_frame_hdr:000000000000C816                 db 0FFh
.eh_frame_hdr:000000000000C817                 db 0FFh
.eh_frame_hdr:000000000000C818                 db 0D4h
.eh_frame_hdr:000000000000C819                 db  0Eh
.eh_frame_hdr:000000000000C81A                 db    0
.eh_frame_hdr:000000000000C81B                 db    0
.eh_frame_hdr:000000000000C81C                 db  58h ; X
.eh_frame_hdr:000000000000C81D                 db  9Dh
.eh_frame_hdr:000000000000C81E                 db 0FFh
.eh_frame_hdr:000000000000C81F                 db 0FFh
.eh_frame_hdr:000000000000C820                 db 0E8h
.eh_frame_hdr:000000000000C821                 db  0Eh
.eh_frame_hdr:000000000000C822                 db    0
.eh_frame_hdr:000000000000C823                 db    0
.eh_frame_hdr:000000000000C824                 db  68h ; h
.eh_frame_hdr:000000000000C825                 db  9Dh
.eh_frame_hdr:000000000000C826                 db 0FFh
.eh_frame_hdr:000000000000C827                 db 0FFh
.eh_frame_hdr:000000000000C828                 db 0FCh
.eh_frame_hdr:000000000000C829                 db  0Eh
.eh_frame_hdr:000000000000C82A                 db    0
.eh_frame_hdr:000000000000C82B                 db    0
.eh_frame_hdr:000000000000C82C                 db 0A8h
.eh_frame_hdr:000000000000C82D                 db  9Dh
.eh_frame_hdr:000000000000C82E                 db 0FFh
.eh_frame_hdr:000000000000C82F                 db 0FFh
.eh_frame_hdr:000000000000C830                 db  20h
.eh_frame_hdr:000000000000C831                 db  0Fh
.eh_frame_hdr:000000000000C832                 db    0
.eh_frame_hdr:000000000000C833                 db    0
.eh_frame_hdr:000000000000C834                 db 0D8h
.eh_frame_hdr:000000000000C835                 db  9Dh
.eh_frame_hdr:000000000000C836                 db 0FFh
.eh_frame_hdr:000000000000C837                 db 0FFh
.eh_frame_hdr:000000000000C838                 db  34h ; 4
.eh_frame_hdr:000000000000C839                 db  0Fh
.eh_frame_hdr:000000000000C83A                 db    0
.eh_frame_hdr:000000000000C83B                 db    0
.eh_frame_hdr:000000000000C83C                 db  68h ; h
.eh_frame_hdr:000000000000C83D                 db  9Eh
.eh_frame_hdr:000000000000C83E                 db 0FFh
.eh_frame_hdr:000000000000C83F                 db 0FFh
.eh_frame_hdr:000000000000C840                 db  4Ch ; L
.eh_frame_hdr:000000000000C841                 db  0Fh
.eh_frame_hdr:000000000000C842                 db    0
.eh_frame_hdr:000000000000C843                 db    0
.eh_frame_hdr:000000000000C844                 db 0B8h
.eh_frame_hdr:000000000000C845                 db  9Eh
.eh_frame_hdr:000000000000C846                 db 0FFh
.eh_frame_hdr:000000000000C847                 db 0FFh
.eh_frame_hdr:000000000000C848                 db  64h ; d
.eh_frame_hdr:000000000000C849                 db  0Fh
.eh_frame_hdr:000000000000C84A                 db    0
.eh_frame_hdr:000000000000C84B                 db    0
.eh_frame_hdr:000000000000C84C                 db 0D8h
.eh_frame_hdr:000000000000C84D                 db  9Eh
.eh_frame_hdr:000000000000C84E                 db 0FFh
.eh_frame_hdr:000000000000C84F                 db 0FFh
.eh_frame_hdr:000000000000C850                 db  80h
.eh_frame_hdr:000000000000C851                 db  0Fh
.eh_frame_hdr:000000000000C852                 db    0
.eh_frame_hdr:000000000000C853                 db    0
.eh_frame_hdr:000000000000C854                 db    8
.eh_frame_hdr:000000000000C855                 db  9Fh
.eh_frame_hdr:000000000000C856                 db 0FFh
.eh_frame_hdr:000000000000C857                 db 0FFh
.eh_frame_hdr:000000000000C858                 db  9Ch
.eh_frame_hdr:000000000000C859                 db  0Fh
.eh_frame_hdr:000000000000C85A                 db    0
.eh_frame_hdr:000000000000C85B                 db    0
.eh_frame_hdr:000000000000C85C                 db  38h ; 8
.eh_frame_hdr:000000000000C85D                 db  9Fh
.eh_frame_hdr:000000000000C85E                 db 0FFh
.eh_frame_hdr:000000000000C85F                 db 0FFh
.eh_frame_hdr:000000000000C860                 db 0C4h
.eh_frame_hdr:000000000000C861                 db  0Fh
.eh_frame_hdr:000000000000C862                 db    0
.eh_frame_hdr:000000000000C863                 db    0
.eh_frame_hdr:000000000000C864                 db  58h ; X
.eh_frame_hdr:000000000000C865                 db  9Fh
.eh_frame_hdr:000000000000C866                 db 0FFh
.eh_frame_hdr:000000000000C867                 db 0FFh
.eh_frame_hdr:000000000000C868                 db 0E0h
.eh_frame_hdr:000000000000C869                 db  0Fh
.eh_frame_hdr:000000000000C86A                 db    0
.eh_frame_hdr:000000000000C86B                 db    0
.eh_frame_hdr:000000000000C86C                 db  98h
.eh_frame_hdr:000000000000C86D                 db  9Fh
.eh_frame_hdr:000000000000C86E                 db 0FFh
.eh_frame_hdr:000000000000C86F                 db 0FFh
.eh_frame_hdr:000000000000C870                 db 0F8h
.eh_frame_hdr:000000000000C871                 db  0Fh
.eh_frame_hdr:000000000000C872                 db    0
.eh_frame_hdr:000000000000C873                 db    0
.eh_frame_hdr:000000000000C874                 db 0E8h
.eh_frame_hdr:000000000000C875                 db  9Fh
.eh_frame_hdr:000000000000C876                 db 0FFh
.eh_frame_hdr:000000000000C877                 db 0FFh
.eh_frame_hdr:000000000000C878                 db  14h
.eh_frame_hdr:000000000000C879                 db  10h
.eh_frame_hdr:000000000000C87A                 db    0
.eh_frame_hdr:000000000000C87B                 db    0
.eh_frame_hdr:000000000000C87C                 db  18h
.eh_frame_hdr:000000000000C87D                 db 0A0h
.eh_frame_hdr:000000000000C87E                 db 0FFh
.eh_frame_hdr:000000000000C87F                 db 0FFh
.eh_frame_hdr:000000000000C880                 db  28h ; (
.eh_frame_hdr:000000000000C881                 db  10h
.eh_frame_hdr:000000000000C882                 db    0
.eh_frame_hdr:000000000000C883                 db    0
.eh_frame_hdr:000000000000C884                 db  38h ; 8
.eh_frame_hdr:000000000000C885                 db 0A4h
.eh_frame_hdr:000000000000C886                 db 0FFh
.eh_frame_hdr:000000000000C887                 db 0FFh
.eh_frame_hdr:000000000000C888                 db  78h ; x
.eh_frame_hdr:000000000000C889                 db  10h
.eh_frame_hdr:000000000000C88A                 db    0
.eh_frame_hdr:000000000000C88B                 db    0
.eh_frame_hdr:000000000000C88C                 db  58h ; X
.eh_frame_hdr:000000000000C88D                 db 0A4h
.eh_frame_hdr:000000000000C88E                 db 0FFh
.eh_frame_hdr:000000000000C88F                 db 0FFh
.eh_frame_hdr:000000000000C890                 db  8Ch
.eh_frame_hdr:000000000000C891                 db  10h
.eh_frame_hdr:000000000000C892                 db    0
.eh_frame_hdr:000000000000C893                 db    0
.eh_frame_hdr:000000000000C894                 db  68h ; h
.eh_frame_hdr:000000000000C895                 db 0A4h
.eh_frame_hdr:000000000000C896                 db 0FFh
.eh_frame_hdr:000000000000C897                 db 0FFh
.eh_frame_hdr:000000000000C898                 db 0A0h
.eh_frame_hdr:000000000000C899                 db  10h
.eh_frame_hdr:000000000000C89A                 db    0
.eh_frame_hdr:000000000000C89B                 db    0
.eh_frame_hdr:000000000000C89C                 db  78h ; x
.eh_frame_hdr:000000000000C89D                 db 0A4h
.eh_frame_hdr:000000000000C89E                 db 0FFh
.eh_frame_hdr:000000000000C89F                 db 0FFh
.eh_frame_hdr:000000000000C8A0                 db 0B4h
.eh_frame_hdr:000000000000C8A1                 db  10h
.eh_frame_hdr:000000000000C8A2                 db    0
.eh_frame_hdr:000000000000C8A3                 db    0
.eh_frame_hdr:000000000000C8A4                 db  88h
.eh_frame_hdr:000000000000C8A5                 db 0A4h
.eh_frame_hdr:000000000000C8A6                 db 0FFh
.eh_frame_hdr:000000000000C8A7                 db 0FFh
.eh_frame_hdr:000000000000C8A8                 db 0C8h
.eh_frame_hdr:000000000000C8A9                 db  10h
.eh_frame_hdr:000000000000C8AA                 db    0
.eh_frame_hdr:000000000000C8AB                 db    0
.eh_frame_hdr:000000000000C8AC                 db 0B8h
.eh_frame_hdr:000000000000C8AD                 db 0A4h
.eh_frame_hdr:000000000000C8AE                 db 0FFh
.eh_frame_hdr:000000000000C8AF                 db 0FFh
.eh_frame_hdr:000000000000C8B0                 db 0DCh
.eh_frame_hdr:000000000000C8B1                 db  10h
.eh_frame_hdr:000000000000C8B2                 db    0
.eh_frame_hdr:000000000000C8B3                 db    0
.eh_frame_hdr:000000000000C8B4                 db  88h
.eh_frame_hdr:000000000000C8B5                 db 0A6h
.eh_frame_hdr:000000000000C8B6                 db 0FFh
.eh_frame_hdr:000000000000C8B7                 db 0FFh
.eh_frame_hdr:000000000000C8B8                 db  18h
.eh_frame_hdr:000000000000C8B9                 db  11h
.eh_frame_hdr:000000000000C8BA                 db    0
.eh_frame_hdr:000000000000C8BB                 db    0
.eh_frame_hdr:000000000000C8BC                 db  98h
.eh_frame_hdr:000000000000C8BD                 db 0A7h
.eh_frame_hdr:000000000000C8BE                 db 0FFh
.eh_frame_hdr:000000000000C8BF                 db 0FFh
.eh_frame_hdr:000000000000C8C0                 db  68h ; h
.eh_frame_hdr:000000000000C8C1                 db  11h
.eh_frame_hdr:000000000000C8C2                 db    0
.eh_frame_hdr:000000000000C8C3                 db    0
.eh_frame_hdr:000000000000C8C4                 db  28h ; (
.eh_frame_hdr:000000000000C8C5                 db 0A8h
.eh_frame_hdr:000000000000C8C6                 db 0FFh
.eh_frame_hdr:000000000000C8C7                 db 0FFh
.eh_frame_hdr:000000000000C8C8                 db 0A0h
.eh_frame_hdr:000000000000C8C9                 db  11h
.eh_frame_hdr:000000000000C8CA                 db    0
.eh_frame_hdr:000000000000C8CB                 db    0
.eh_frame_hdr:000000000000C8CC                 db  78h ; x
.eh_frame_hdr:000000000000C8CD                 db 0A8h
.eh_frame_hdr:000000000000C8CE                 db 0FFh
.eh_frame_hdr:000000000000C8CF                 db 0FFh
.eh_frame_hdr:000000000000C8D0                 db 0CCh
.eh_frame_hdr:000000000000C8D1                 db  11h
.eh_frame_hdr:000000000000C8D2                 db    0
.eh_frame_hdr:000000000000C8D3                 db    0
.eh_frame_hdr:000000000000C8D4                 db 0B8h
.eh_frame_hdr:000000000000C8D5                 db 0A8h
.eh_frame_hdr:000000000000C8D6                 db 0FFh
.eh_frame_hdr:000000000000C8D7                 db 0FFh
.eh_frame_hdr:000000000000C8D8                 db 0E8h
.eh_frame_hdr:000000000000C8D9                 db  11h
.eh_frame_hdr:000000000000C8DA                 db    0
.eh_frame_hdr:000000000000C8DB                 db    0
.eh_frame_hdr:000000000000C8DC                 db 0E8h
.eh_frame_hdr:000000000000C8DD                 db 0A9h
.eh_frame_hdr:000000000000C8DE                 db 0FFh
.eh_frame_hdr:000000000000C8DF                 db 0FFh
.eh_frame_hdr:000000000000C8E0                 db  24h ; $
.eh_frame_hdr:000000000000C8E1                 db  12h
.eh_frame_hdr:000000000000C8E2                 db    0
.eh_frame_hdr:000000000000C8E3                 db    0
.eh_frame_hdr:000000000000C8E4                 db  58h ; X
.eh_frame_hdr:000000000000C8E5                 db 0AAh
.eh_frame_hdr:000000000000C8E6                 db 0FFh
.eh_frame_hdr:000000000000C8E7                 db 0FFh
.eh_frame_hdr:000000000000C8E8                 db  48h ; H
.eh_frame_hdr:000000000000C8E9                 db  12h
.eh_frame_hdr:000000000000C8EA                 db    0
.eh_frame_hdr:000000000000C8EB                 db    0
.eh_frame_hdr:000000000000C8EC                 db 0C8h
.eh_frame_hdr:000000000000C8ED                 db 0AAh
.eh_frame_hdr:000000000000C8EE                 db 0FFh
.eh_frame_hdr:000000000000C8EF                 db 0FFh
.eh_frame_hdr:000000000000C8F0                 db  8Ch
.eh_frame_hdr:000000000000C8F1                 db  12h
.eh_frame_hdr:000000000000C8F2                 db    0
.eh_frame_hdr:000000000000C8F3                 db    0
.eh_frame_hdr:000000000000C8F4                 db  28h ; (
.eh_frame_hdr:000000000000C8F5                 db 0ABh
.eh_frame_hdr:000000000000C8F6                 db 0FFh
.eh_frame_hdr:000000000000C8F7                 db 0FFh
.eh_frame_hdr:000000000000C8F8                 db 0B8h
.eh_frame_hdr:000000000000C8F9                 db  12h
.eh_frame_hdr:000000000000C8FA                 db    0
.eh_frame_hdr:000000000000C8FB                 db    0
.eh_frame_hdr:000000000000C8FC                 db  98h
.eh_frame_hdr:000000000000C8FD                 db 0ABh
.eh_frame_hdr:000000000000C8FE                 db 0FFh
.eh_frame_hdr:000000000000C8FF                 db 0FFh
.eh_frame_hdr:000000000000C900                 db 0E0h
.eh_frame_hdr:000000000000C901                 db  12h
.eh_frame_hdr:000000000000C902                 db    0
.eh_frame_hdr:000000000000C903                 db    0
.eh_frame_hdr:000000000000C904                 db    8
.eh_frame_hdr:000000000000C905                 db 0ACh
.eh_frame_hdr:000000000000C906                 db 0FFh
.eh_frame_hdr:000000000000C907                 db 0FFh
.eh_frame_hdr:000000000000C908                 db    0
.eh_frame_hdr:000000000000C909                 db  13h
.eh_frame_hdr:000000000000C90A                 db    0
.eh_frame_hdr:000000000000C90B                 db    0
.eh_frame_hdr:000000000000C90C                 db  48h ; H
.eh_frame_hdr:000000000000C90D                 db 0ACh
.eh_frame_hdr:000000000000C90E                 db 0FFh
.eh_frame_hdr:000000000000C90F                 db 0FFh
.eh_frame_hdr:000000000000C910                 db  14h
.eh_frame_hdr:000000000000C911                 db  13h
.eh_frame_hdr:000000000000C912                 db    0
.eh_frame_hdr:000000000000C913                 db    0
.eh_frame_hdr:000000000000C914                 db 0C8h
.eh_frame_hdr:000000000000C915                 db 0AEh
.eh_frame_hdr:000000000000C916                 db 0FFh
.eh_frame_hdr:000000000000C917                 db 0FFh
.eh_frame_hdr:000000000000C918                 db  64h ; d
.eh_frame_hdr:000000000000C919                 db  13h
.eh_frame_hdr:000000000000C91A                 db    0
.eh_frame_hdr:000000000000C91B                 db    0
.eh_frame_hdr:000000000000C91C                 db  78h ; x
.eh_frame_hdr:000000000000C91D                 db 0AFh
.eh_frame_hdr:000000000000C91E                 db 0FFh
.eh_frame_hdr:000000000000C91F                 db 0FFh
.eh_frame_hdr:000000000000C920                 db 0A8h
.eh_frame_hdr:000000000000C921                 db  13h
.eh_frame_hdr:000000000000C922                 db    0
.eh_frame_hdr:000000000000C923                 db    0
.eh_frame_hdr:000000000000C924                 db  38h ; 8
.eh_frame_hdr:000000000000C925                 db 0B0h
.eh_frame_hdr:000000000000C926                 db 0FFh
.eh_frame_hdr:000000000000C927                 db 0FFh
.eh_frame_hdr:000000000000C928                 db 0C4h
.eh_frame_hdr:000000000000C929                 db  13h
.eh_frame_hdr:000000000000C92A                 db    0
.eh_frame_hdr:000000000000C92B                 db    0
.eh_frame_hdr:000000000000C92C                 db  18h
.eh_frame_hdr:000000000000C92D                 db 0BAh
.eh_frame_hdr:000000000000C92E                 db 0FFh
.eh_frame_hdr:000000000000C92F                 db 0FFh
.eh_frame_hdr:000000000000C930                 db  14h
.eh_frame_hdr:000000000000C931                 db  14h
.eh_frame_hdr:000000000000C932                 db    0
.eh_frame_hdr:000000000000C933                 db    0
.eh_frame_hdr:000000000000C934                 db 0C8h
.eh_frame_hdr:000000000000C935                 db 0BDh
.eh_frame_hdr:000000000000C936                 db 0FFh
.eh_frame_hdr:000000000000C937                 db 0FFh
.eh_frame_hdr:000000000000C938                 db  60h ; `
.eh_frame_hdr:000000000000C939                 db  14h
.eh_frame_hdr:000000000000C93A                 db    0
.eh_frame_hdr:000000000000C93B                 db    0
.eh_frame_hdr:000000000000C93C                 db  58h ; X
.eh_frame_hdr:000000000000C93D                 db 0BFh
.eh_frame_hdr:000000000000C93E                 db 0FFh
.eh_frame_hdr:000000000000C93F                 db 0FFh
.eh_frame_hdr:000000000000C940                 db  90h
.eh_frame_hdr:000000000000C941                 db  14h
.eh_frame_hdr:000000000000C942                 db    0
.eh_frame_hdr:000000000000C943                 db    0
.eh_frame_hdr:000000000000C944                 db 0D8h
.eh_frame_hdr:000000000000C945                 db 0C6h
.eh_frame_hdr:000000000000C946                 db 0FFh
.eh_frame_hdr:000000000000C947                 db 0FFh
.eh_frame_hdr:000000000000C948                 db 0F4h
.eh_frame_hdr:000000000000C949                 db  14h
.eh_frame_hdr:000000000000C94A                 db    0
.eh_frame_hdr:000000000000C94B                 db    0
.eh_frame_hdr:000000000000C94C                 db    8
.eh_frame_hdr:000000000000C94D                 db 0C7h
.eh_frame_hdr:000000000000C94E                 db 0FFh
.eh_frame_hdr:000000000000C94F                 db 0FFh
.eh_frame_hdr:000000000000C950                 db  0Ch
.eh_frame_hdr:000000000000C951                 db  15h
.eh_frame_hdr:000000000000C952                 db    0
.eh_frame_hdr:000000000000C953                 db    0
.eh_frame_hdr:000000000000C954                 db  58h ; X
.eh_frame_hdr:000000000000C955                 db 0C8h
.eh_frame_hdr:000000000000C956                 db 0FFh
.eh_frame_hdr:000000000000C957                 db 0FFh
.eh_frame_hdr:000000000000C958                 db  70h ; p
.eh_frame_hdr:000000000000C959                 db  15h
.eh_frame_hdr:000000000000C95A                 db    0
.eh_frame_hdr:000000000000C95B                 db    0
.eh_frame_hdr:000000000000C95C                 db 0E8h
.eh_frame_hdr:000000000000C95D                 db 0C8h
.eh_frame_hdr:000000000000C95E                 db 0FFh
.eh_frame_hdr:000000000000C95F                 db 0FFh
.eh_frame_hdr:000000000000C960                 db 0B0h
.eh_frame_hdr:000000000000C961                 db  15h
.eh_frame_hdr:000000000000C962                 db    0
.eh_frame_hdr:000000000000C963                 db    0
.eh_frame_hdr:000000000000C964                 db  68h ; h
.eh_frame_hdr:000000000000C965                 db 0C9h
.eh_frame_hdr:000000000000C966                 db 0FFh
.eh_frame_hdr:000000000000C967                 db 0FFh
.eh_frame_hdr:000000000000C968                 db    0
.eh_frame_hdr:000000000000C969                 db  16h
.eh_frame_hdr:000000000000C96A                 db    0
.eh_frame_hdr:000000000000C96B                 db    0
.eh_frame_hdr:000000000000C96C                 db  78h ; x
.eh_frame_hdr:000000000000C96D                 db 0C9h
.eh_frame_hdr:000000000000C96E                 db 0FFh
.eh_frame_hdr:000000000000C96F                 db 0FFh
.eh_frame_hdr:000000000000C970                 db  14h
.eh_frame_hdr:000000000000C971                 db  16h
.eh_frame_hdr:000000000000C972                 db    0
.eh_frame_hdr:000000000000C973                 db    0
.eh_frame_hdr:000000000000C974                 db    8
.eh_frame_hdr:000000000000C975                 db 0CAh
.eh_frame_hdr:000000000000C976                 db 0FFh
.eh_frame_hdr:000000000000C977                 db 0FFh
.eh_frame_hdr:000000000000C978                 db  30h ; 0
.eh_frame_hdr:000000000000C979                 db  16h
.eh_frame_hdr:000000000000C97A                 db    0
.eh_frame_hdr:000000000000C97B                 db    0
.eh_frame_hdr:000000000000C97C                 db  78h ; x
.eh_frame_hdr:000000000000C97D                 db 0CAh
.eh_frame_hdr:000000000000C97E                 db 0FFh
.eh_frame_hdr:000000000000C97F                 db 0FFh
.eh_frame_hdr:000000000000C980                 db  50h ; P
.eh_frame_hdr:000000000000C981                 db  16h
.eh_frame_hdr:000000000000C982                 db    0
.eh_frame_hdr:000000000000C983                 db    0
.eh_frame_hdr:000000000000C984                 db 0D8h
.eh_frame_hdr:000000000000C985                 db 0CAh
.eh_frame_hdr:000000000000C986                 db 0FFh
.eh_frame_hdr:000000000000C987                 db 0FFh
.eh_frame_hdr:000000000000C988                 db  70h ; p
.eh_frame_hdr:000000000000C989                 db  16h
.eh_frame_hdr:000000000000C98A                 db    0
.eh_frame_hdr:000000000000C98B                 db    0
.eh_frame_hdr:000000000000C98C                 db  78h ; x
.eh_frame_hdr:000000000000C98D                 db 0CBh
.eh_frame_hdr:000000000000C98E                 db 0FFh
.eh_frame_hdr:000000000000C98F                 db 0FFh
.eh_frame_hdr:000000000000C990                 db  84h
.eh_frame_hdr:000000000000C991                 db  16h
.eh_frame_hdr:000000000000C992                 db    0
.eh_frame_hdr:000000000000C993                 db    0
.eh_frame_hdr:000000000000C994                 db  88h
.eh_frame_hdr:000000000000C995                 db 0CBh
.eh_frame_hdr:000000000000C996                 db 0FFh
.eh_frame_hdr:000000000000C997                 db 0FFh
.eh_frame_hdr:000000000000C998                 db  98h
.eh_frame_hdr:000000000000C999                 db  16h
.eh_frame_hdr:000000000000C99A                 db    0
.eh_frame_hdr:000000000000C99B                 db    0
.eh_frame_hdr:000000000000C99C                 db  98h
.eh_frame_hdr:000000000000C99D                 db 0CBh
.eh_frame_hdr:000000000000C99E                 db 0FFh
.eh_frame_hdr:000000000000C99F                 db 0FFh
.eh_frame_hdr:000000000000C9A0                 db 0ACh
.eh_frame_hdr:000000000000C9A1                 db  16h
.eh_frame_hdr:000000000000C9A2                 db    0
.eh_frame_hdr:000000000000C9A3                 db    0
.eh_frame_hdr:000000000000C9A4                 db 0C8h
.eh_frame_hdr:000000000000C9A5                 db 0CBh
.eh_frame_hdr:000000000000C9A6                 db 0FFh
.eh_frame_hdr:000000000000C9A7                 db 0FFh
.eh_frame_hdr:000000000000C9A8                 db 0C8h
.eh_frame_hdr:000000000000C9A9                 db  16h
.eh_frame_hdr:000000000000C9AA                 db    0
.eh_frame_hdr:000000000000C9AB                 db    0
.eh_frame_hdr:000000000000C9AC                 db 0E8h
.eh_frame_hdr:000000000000C9AD                 db 0CCh
.eh_frame_hdr:000000000000C9AE                 db 0FFh
.eh_frame_hdr:000000000000C9AF                 db 0FFh
.eh_frame_hdr:000000000000C9B0                 db  28h ; (
.eh_frame_hdr:000000000000C9B1                 db  17h
.eh_frame_hdr:000000000000C9B2                 db    0
.eh_frame_hdr:000000000000C9B3                 db    0
.eh_frame_hdr:000000000000C9B4                 db  68h ; h
.eh_frame_hdr:000000000000C9B5                 db 0CDh
.eh_frame_hdr:000000000000C9B6                 db 0FFh
.eh_frame_hdr:000000000000C9B7                 db 0FFh
.eh_frame_hdr:000000000000C9B8                 db  3Ch ; <
.eh_frame_hdr:000000000000C9B9                 db  17h
.eh_frame_hdr:000000000000C9BA                 db    0
.eh_frame_hdr:000000000000C9BB                 db    0
.eh_frame_hdr:000000000000C9BC                 db 0A8h
.eh_frame_hdr:000000000000C9BD                 db 0CEh
.eh_frame_hdr:000000000000C9BE                 db 0FFh
.eh_frame_hdr:000000000000C9BF                 db 0FFh
.eh_frame_hdr:000000000000C9C0                 db  9Ch
.eh_frame_hdr:000000000000C9C1                 db  17h
.eh_frame_hdr:000000000000C9C2                 db    0
.eh_frame_hdr:000000000000C9C3                 db    0
.eh_frame_hdr:000000000000C9C4                 db 0B8h
.eh_frame_hdr:000000000000C9C5                 db 0CEh
.eh_frame_hdr:000000000000C9C6                 db 0FFh
.eh_frame_hdr:000000000000C9C7                 db 0FFh
.eh_frame_hdr:000000000000C9C8                 db 0B0h
.eh_frame_hdr:000000000000C9C9                 db  17h
.eh_frame_hdr:000000000000C9CA                 db    0
.eh_frame_hdr:000000000000C9CB                 db    0
.eh_frame_hdr:000000000000C9CC                 db 0C8h
.eh_frame_hdr:000000000000C9CD                 db 0CEh
.eh_frame_hdr:000000000000C9CE                 db 0FFh
.eh_frame_hdr:000000000000C9CF                 db 0FFh
.eh_frame_hdr:000000000000C9D0                 db 0C4h
.eh_frame_hdr:000000000000C9D1                 db  17h
.eh_frame_hdr:000000000000C9D2                 db    0
.eh_frame_hdr:000000000000C9D3                 db    0
.eh_frame_hdr:000000000000C9D4                 db 0D8h
.eh_frame_hdr:000000000000C9D5                 db 0CEh
.eh_frame_hdr:000000000000C9D6                 db 0FFh
.eh_frame_hdr:000000000000C9D7                 db 0FFh
.eh_frame_hdr:000000000000C9D8                 db 0D8h
.eh_frame_hdr:000000000000C9D9                 db  17h
.eh_frame_hdr:000000000000C9DA                 db    0
.eh_frame_hdr:000000000000C9DB                 db    0
.eh_frame_hdr:000000000000C9DC                 db  28h ; (
.eh_frame_hdr:000000000000C9DD                 db 0CFh
.eh_frame_hdr:000000000000C9DE                 db 0FFh
.eh_frame_hdr:000000000000C9DF                 db 0FFh
.eh_frame_hdr:000000000000C9E0                 db 0ECh
.eh_frame_hdr:000000000000C9E1                 db  17h
.eh_frame_hdr:000000000000C9E2                 db    0
.eh_frame_hdr:000000000000C9E3                 db    0
.eh_frame_hdr:000000000000C9E4                 db  88h
.eh_frame_hdr:000000000000C9E5                 db 0CFh
.eh_frame_hdr:000000000000C9E6                 db 0FFh
.eh_frame_hdr:000000000000C9E7                 db 0FFh
.eh_frame_hdr:000000000000C9E8                 db    0
.eh_frame_hdr:000000000000C9E9                 db  18h
.eh_frame_hdr:000000000000C9EA                 db    0
.eh_frame_hdr:000000000000C9EB                 db    0
.eh_frame_hdr:000000000000C9EC                 db 0D8h
.eh_frame_hdr:000000000000C9ED                 db 0D0h
.eh_frame_hdr:000000000000C9EE                 db 0FFh
.eh_frame_hdr:000000000000C9EF                 db 0FFh
.eh_frame_hdr:000000000000C9F0                 db  3Ch ; <
.eh_frame_hdr:000000000000C9F1                 db  18h
.eh_frame_hdr:000000000000C9F2                 db    0
.eh_frame_hdr:000000000000C9F3                 db    0
.eh_frame_hdr:000000000000C9F4                 db  38h ; 8
.eh_frame_hdr:000000000000C9F5                 db 0D1h
.eh_frame_hdr:000000000000C9F6                 db 0FFh
.eh_frame_hdr:000000000000C9F7                 db 0FFh
.eh_frame_hdr:000000000000C9F8                 db  74h ; t
.eh_frame_hdr:000000000000C9F9                 db  18h
.eh_frame_hdr:000000000000C9FA                 db    0
.eh_frame_hdr:000000000000C9FB                 db    0
.eh_frame_hdr:000000000000C9FC                 db  88h
.eh_frame_hdr:000000000000C9FD                 db 0D1h
.eh_frame_hdr:000000000000C9FE                 db 0FFh
.eh_frame_hdr:000000000000C9FF                 db 0FFh
.eh_frame_hdr:000000000000CA00                 db  88h
.eh_frame_hdr:000000000000CA01                 db  18h
.eh_frame_hdr:000000000000CA02                 db    0
.eh_frame_hdr:000000000000CA03                 db    0
.eh_frame_hdr:000000000000CA04                 db    8
.eh_frame_hdr:000000000000CA05                 db 0D2h
.eh_frame_hdr:000000000000CA06                 db 0FFh
.eh_frame_hdr:000000000000CA07                 db 0FFh
.eh_frame_hdr:000000000000CA08                 db 0BCh
.eh_frame_hdr:000000000000CA09                 db  18h
.eh_frame_hdr:000000000000CA0A                 db    0
.eh_frame_hdr:000000000000CA0B                 db    0
.eh_frame_hdr:000000000000CA0C                 db  78h ; x
.eh_frame_hdr:000000000000CA0D                 db 0D2h
.eh_frame_hdr:000000000000CA0E                 db 0FFh
.eh_frame_hdr:000000000000CA0F                 db 0FFh
.eh_frame_hdr:000000000000CA10                 db 0D0h
.eh_frame_hdr:000000000000CA11                 db  18h
.eh_frame_hdr:000000000000CA12                 db    0
.eh_frame_hdr:000000000000CA13                 db    0
.eh_frame_hdr:000000000000CA14                 db 0E8h
.eh_frame_hdr:000000000000CA15                 db 0D2h
.eh_frame_hdr:000000000000CA16                 db 0FFh
.eh_frame_hdr:000000000000CA17                 db 0FFh
.eh_frame_hdr:000000000000CA18                 db  1Ch
.eh_frame_hdr:000000000000CA19                 db  19h
.eh_frame_hdr:000000000000CA1A                 db    0
.eh_frame_hdr:000000000000CA1B                 db    0
.eh_frame_hdr:000000000000CA1C                 db  28h ; (
.eh_frame_hdr:000000000000CA1D                 db 0D3h
.eh_frame_hdr:000000000000CA1E                 db 0FFh
.eh_frame_hdr:000000000000CA1F                 db 0FFh
.eh_frame_hdr:000000000000CA20                 db  30h ; 0
.eh_frame_hdr:000000000000CA21                 db  19h
.eh_frame_hdr:000000000000CA22                 db    0
.eh_frame_hdr:000000000000CA23                 db    0
.eh_frame_hdr:000000000000CA24                 db  48h ; H
.eh_frame_hdr:000000000000CA25                 db 0D3h
.eh_frame_hdr:000000000000CA26                 db 0FFh
.eh_frame_hdr:000000000000CA27                 db 0FFh
.eh_frame_hdr:000000000000CA28                 db  44h ; D
.eh_frame_hdr:000000000000CA29                 db  19h
.eh_frame_hdr:000000000000CA2A                 db    0
.eh_frame_hdr:000000000000CA2B                 db    0
.eh_frame_hdr:000000000000CA2C                 db    8
.eh_frame_hdr:000000000000CA2D                 db 0D5h
.eh_frame_hdr:000000000000CA2E                 db 0FFh
.eh_frame_hdr:000000000000CA2F                 db 0FFh
.eh_frame_hdr:000000000000CA30                 db  90h
.eh_frame_hdr:000000000000CA31                 db  19h
.eh_frame_hdr:000000000000CA32                 db    0
.eh_frame_hdr:000000000000CA33                 db    0
.eh_frame_hdr:000000000000CA34                 db  98h
.eh_frame_hdr:000000000000CA35                 db 0D5h
.eh_frame_hdr:000000000000CA36                 db 0FFh
.eh_frame_hdr:000000000000CA37                 db 0FFh
.eh_frame_hdr:000000000000CA38                 db 0BCh
.eh_frame_hdr:000000000000CA39                 db  19h
.eh_frame_hdr:000000000000CA3A                 db    0
.eh_frame_hdr:000000000000CA3B                 db    0
.eh_frame_hdr:000000000000CA3C                 db  78h ; x
.eh_frame_hdr:000000000000CA3D                 db 0D6h
.eh_frame_hdr:000000000000CA3E                 db 0FFh
.eh_frame_hdr:000000000000CA3F                 db 0FFh
.eh_frame_hdr:000000000000CA40                 db 0E8h
.eh_frame_hdr:000000000000CA41                 db  19h
.eh_frame_hdr:000000000000CA42                 db    0
.eh_frame_hdr:000000000000CA43                 db    0
.eh_frame_hdr:000000000000CA44                 db 0B8h
.eh_frame_hdr:000000000000CA45                 db 0D8h
.eh_frame_hdr:000000000000CA46                 db 0FFh
.eh_frame_hdr:000000000000CA47                 db 0FFh
.eh_frame_hdr:000000000000CA48                 db  20h
.eh_frame_hdr:000000000000CA49                 db  1Ah
.eh_frame_hdr:000000000000CA4A                 db    0
.eh_frame_hdr:000000000000CA4B                 db    0
.eh_frame_hdr:000000000000CA4C                 db  48h ; H
.eh_frame_hdr:000000000000CA4D                 db 0DBh
.eh_frame_hdr:000000000000CA4E                 db 0FFh
.eh_frame_hdr:000000000000CA4F                 db 0FFh
.eh_frame_hdr:000000000000CA50                 db  5Ch ; \
.eh_frame_hdr:000000000000CA51                 db  1Ah
.eh_frame_hdr:000000000000CA52                 db    0
.eh_frame_hdr:000000000000CA53                 db    0
.eh_frame_hdr:000000000000CA54                 db 0A8h
.eh_frame_hdr:000000000000CA55                 db 0DBh
.eh_frame_hdr:000000000000CA56                 db 0FFh
.eh_frame_hdr:000000000000CA57                 db 0FFh
.eh_frame_hdr:000000000000CA58                 db  80h
.eh_frame_hdr:000000000000CA59                 db  1Ah
.eh_frame_hdr:000000000000CA5A                 db    0
.eh_frame_hdr:000000000000CA5B                 db    0
.eh_frame_hdr:000000000000CA5C                 db 0B8h
.eh_frame_hdr:000000000000CA5D                 db 0DDh
.eh_frame_hdr:000000000000CA5E                 db 0FFh
.eh_frame_hdr:000000000000CA5F                 db 0FFh
.eh_frame_hdr:000000000000CA60                 db 0B8h
.eh_frame_hdr:000000000000CA61                 db  1Ah
.eh_frame_hdr:000000000000CA62                 db    0
.eh_frame_hdr:000000000000CA63                 db    0
.eh_frame_hdr:000000000000CA64                 db 0D8h
.eh_frame_hdr:000000000000CA65                 db 0DDh
.eh_frame_hdr:000000000000CA66                 db 0FFh
.eh_frame_hdr:000000000000CA67                 db 0FFh
.eh_frame_hdr:000000000000CA68                 db 0CCh
.eh_frame_hdr:000000000000CA69                 db  1Ah
.eh_frame_hdr:000000000000CA6A                 db    0
.eh_frame_hdr:000000000000CA6B                 db    0
.eh_frame_hdr:000000000000CA6C                 db 0E8h
.eh_frame_hdr:000000000000CA6D                 db 0DDh
.eh_frame_hdr:000000000000CA6E                 db 0FFh
.eh_frame_hdr:000000000000CA6F                 db 0FFh
.eh_frame_hdr:000000000000CA70                 db 0E0h
.eh_frame_hdr:000000000000CA71                 db  1Ah
.eh_frame_hdr:000000000000CA72                 db    0
.eh_frame_hdr:000000000000CA73                 db    0
.eh_frame_hdr:000000000000CA74                 db  28h ; (
.eh_frame_hdr:000000000000CA75                 db 0DEh
.eh_frame_hdr:000000000000CA76                 db 0FFh
.eh_frame_hdr:000000000000CA77                 db 0FFh
.eh_frame_hdr:000000000000CA78                 db 0F4h
.eh_frame_hdr:000000000000CA79                 db  1Ah
.eh_frame_hdr:000000000000CA7A                 db    0
.eh_frame_hdr:000000000000CA7B                 db    0
.eh_frame_hdr:000000000000CA7C                 db  68h ; h
.eh_frame_hdr:000000000000CA7D                 db 0DEh
.eh_frame_hdr:000000000000CA7E                 db 0FFh
.eh_frame_hdr:000000000000CA7F                 db 0FFh
.eh_frame_hdr:000000000000CA80                 db    8
.eh_frame_hdr:000000000000CA81                 db  1Bh
.eh_frame_hdr:000000000000CA82                 db    0
.eh_frame_hdr:000000000000CA83                 db    0
.eh_frame_hdr:000000000000CA84                 db 0A8h
.eh_frame_hdr:000000000000CA85                 db 0DEh
.eh_frame_hdr:000000000000CA86                 db 0FFh
.eh_frame_hdr:000000000000CA87                 db 0FFh
.eh_frame_hdr:000000000000CA88                 db  28h ; (
.eh_frame_hdr:000000000000CA89                 db  1Bh
.eh_frame_hdr:000000000000CA8A                 db    0
.eh_frame_hdr:000000000000CA8B                 db    0
.eh_frame_hdr:000000000000CA8C                 db  18h
.eh_frame_hdr:000000000000CA8D                 db 0DFh
.eh_frame_hdr:000000000000CA8E                 db 0FFh
.eh_frame_hdr:000000000000CA8F                 db 0FFh
.eh_frame_hdr:000000000000CA90                 db  48h ; H
.eh_frame_hdr:000000000000CA91                 db  1Bh
.eh_frame_hdr:000000000000CA92                 db    0
.eh_frame_hdr:000000000000CA93                 db    0
.eh_frame_hdr:000000000000CA94                 db  98h
.eh_frame_hdr:000000000000CA95                 db 0DFh
.eh_frame_hdr:000000000000CA96                 db 0FFh
.eh_frame_hdr:000000000000CA97                 db 0FFh
.eh_frame_hdr:000000000000CA98                 db 0A8h
.eh_frame_hdr:000000000000CA99                 db  1Bh
.eh_frame_hdr:000000000000CA9A                 db    0
.eh_frame_hdr:000000000000CA9B                 db    0
.eh_frame_hdr:000000000000CA9C                 db 0D8h
.eh_frame_hdr:000000000000CA9D                 db 0DFh
.eh_frame_hdr:000000000000CA9E                 db 0FFh
.eh_frame_hdr:000000000000CA9F                 db 0FFh
.eh_frame_hdr:000000000000CAA0                 db 0E0h
.eh_frame_hdr:000000000000CAA1                 db  1Bh
.eh_frame_hdr:000000000000CAA2                 db    0
.eh_frame_hdr:000000000000CAA3                 db    0
.eh_frame_hdr:000000000000CAA4                 db  58h ; X
.eh_frame_hdr:000000000000CAA5                 db 0E0h
.eh_frame_hdr:000000000000CAA6                 db 0FFh
.eh_frame_hdr:000000000000CAA7                 db 0FFh
.eh_frame_hdr:000000000000CAA8                 db  18h
.eh_frame_hdr:000000000000CAA9                 db  1Ch
.eh_frame_hdr:000000000000CAAA                 db    0
.eh_frame_hdr:000000000000CAAB                 db    0
.eh_frame_hdr:000000000000CAAC                 db 0D8h
.eh_frame_hdr:000000000000CAAD                 db 0E2h
.eh_frame_hdr:000000000000CAAE                 db 0FFh
.eh_frame_hdr:000000000000CAAF                 db 0FFh
.eh_frame_hdr:000000000000CAB0                 db  50h ; P
.eh_frame_hdr:000000000000CAB1                 db  1Ch
.eh_frame_hdr:000000000000CAB2                 db    0
.eh_frame_hdr:000000000000CAB3                 db    0
.eh_frame_hdr:000000000000CAB4                 db  18h
.eh_frame_hdr:000000000000CAB5                 db 0E3h
.eh_frame_hdr:000000000000CAB6                 db 0FFh
.eh_frame_hdr:000000000000CAB7                 db 0FFh
.eh_frame_hdr:000000000000CAB8                 db  70h ; p
.eh_frame_hdr:000000000000CAB9                 db  1Ch
.eh_frame_hdr:000000000000CABA                 db    0
.eh_frame_hdr:000000000000CABB                 db    0
.eh_frame_hdr:000000000000CABC                 db  78h ; x
.eh_frame_hdr:000000000000CABD                 db 0E3h
.eh_frame_hdr:000000000000CABE                 db 0FFh
.eh_frame_hdr:000000000000CABF                 db 0FFh
.eh_frame_hdr:000000000000CAC0                 db 0A0h
.eh_frame_hdr:000000000000CAC1                 db  1Ch
.eh_frame_hdr:000000000000CAC2                 db    0
.eh_frame_hdr:000000000000CAC3                 db    0
.eh_frame_hdr:000000000000CAC4                 db  88h
.eh_frame_hdr:000000000000CAC5                 db 0E3h
.eh_frame_hdr:000000000000CAC6                 db 0FFh
.eh_frame_hdr:000000000000CAC7                 db 0FFh
.eh_frame_hdr:000000000000CAC8                 db 0B8h
.eh_frame_hdr:000000000000CAC9                 db  1Ch
.eh_frame_hdr:000000000000CACA                 db    0
.eh_frame_hdr:000000000000CACB                 db    0
.eh_frame_hdr:000000000000CACC                 db 0F8h
.eh_frame_hdr:000000000000CACD                 db 0E3h
.eh_frame_hdr:000000000000CACE                 db 0FFh
.eh_frame_hdr:000000000000CACF                 db 0FFh
.eh_frame_hdr:000000000000CAD0                 db    0
.eh_frame_hdr:000000000000CAD1                 db  1Dh
.eh_frame_hdr:000000000000CAD2                 db    0
.eh_frame_hdr:000000000000CAD3                 db    0
.eh_frame_hdr:000000000000CAD4                 db    8
.eh_frame_hdr:000000000000CAD5                 db 0E4h
.eh_frame_hdr:000000000000CAD6                 db 0FFh
.eh_frame_hdr:000000000000CAD7                 db 0FFh
.eh_frame_hdr:000000000000CAD8                 db  18h
.eh_frame_hdr:000000000000CAD9                 db  1Dh
.eh_frame_hdr:000000000000CADA                 db    0
.eh_frame_hdr:000000000000CADB                 db    0
.eh_frame_hdr:000000000000CADB _eh_frame_hdr   ends
.eh_frame_hdr:000000000000CADB
LOAD:000000000000CADC ; ===========================================================================
LOAD:000000000000CADC
LOAD:000000000000CADC ; Segment type: Pure code
LOAD:000000000000CADC ; Segment permissions: Read/Execute
LOAD:000000000000CADC LOAD            segment byte public 'CODE' use64
LOAD:000000000000CADC                 assume cs:LOAD
LOAD:000000000000CADC                 ;org 0CADCh
LOAD:000000000000CADC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000CADC                 align 20h
LOAD:000000000000CADC LOAD            ends
LOAD:000000000000CADC
.eh_frame:000000000000CAE0 ; ===========================================================================
.eh_frame:000000000000CAE0
.eh_frame:000000000000CAE0 ; Segment type: Pure data
.eh_frame:000000000000CAE0 ; Segment permissions: Read
.eh_frame:000000000000CAE0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000CAE0                 assume cs:_eh_frame
.eh_frame:000000000000CAE0                 ;org 0CAE0h
.eh_frame:000000000000CAE0                 db  14h
.eh_frame:000000000000CAE1                 db    0
.eh_frame:000000000000CAE2                 db    0
.eh_frame:000000000000CAE3                 db    0
.eh_frame:000000000000CAE4                 db    0
.eh_frame:000000000000CAE5                 db    0
.eh_frame:000000000000CAE6                 db    0
.eh_frame:000000000000CAE7                 db    0
.eh_frame:000000000000CAE8                 db    1
.eh_frame:000000000000CAE9                 db  7Ah ; z
.eh_frame:000000000000CAEA                 db  52h ; R
.eh_frame:000000000000CAEB                 db    0
.eh_frame:000000000000CAEC                 db    1
.eh_frame:000000000000CAED                 db  78h ; x
.eh_frame:000000000000CAEE                 db  10h
.eh_frame:000000000000CAEF                 db    1
.eh_frame:000000000000CAF0                 db  1Bh
.eh_frame:000000000000CAF1                 db  0Ch
.eh_frame:000000000000CAF2                 db    7
.eh_frame:000000000000CAF3                 db    8
.eh_frame:000000000000CAF4                 db  90h
.eh_frame:000000000000CAF5                 db    1
.eh_frame:000000000000CAF6                 db    7
.eh_frame:000000000000CAF7                 db  10h
.eh_frame:000000000000CAF8                 db  14h
.eh_frame:000000000000CAF9                 db    0
.eh_frame:000000000000CAFA                 db    0
.eh_frame:000000000000CAFB                 db    0
.eh_frame:000000000000CAFC                 db  1Ch
.eh_frame:000000000000CAFD                 db    0
.eh_frame:000000000000CAFE                 db    0
.eh_frame:000000000000CAFF                 db    0
.eh_frame:000000000000CB00                 db  80h
.eh_frame:000000000000CB01                 db  58h ; X
.eh_frame:000000000000CB02                 db 0FFh
.eh_frame:000000000000CB03                 db 0FFh
.eh_frame:000000000000CB04                 db  2Bh ; +
.eh_frame:000000000000CB05                 db    0
.eh_frame:000000000000CB06                 db    0
.eh_frame:000000000000CB07                 db    0
.eh_frame:000000000000CB08                 db    0
.eh_frame:000000000000CB09                 db    0
.eh_frame:000000000000CB0A                 db    0
.eh_frame:000000000000CB0B                 db    0
.eh_frame:000000000000CB0C                 db    0
.eh_frame:000000000000CB0D                 db    0
.eh_frame:000000000000CB0E                 db    0
.eh_frame:000000000000CB0F                 db    0
.eh_frame:000000000000CB10                 db  14h
.eh_frame:000000000000CB11                 db    0
.eh_frame:000000000000CB12                 db    0
.eh_frame:000000000000CB13                 db    0
.eh_frame:000000000000CB14                 db    0
.eh_frame:000000000000CB15                 db    0
.eh_frame:000000000000CB16                 db    0
.eh_frame:000000000000CB17                 db    0
.eh_frame:000000000000CB18                 db    1
.eh_frame:000000000000CB19                 db  7Ah ; z
.eh_frame:000000000000CB1A                 db  52h ; R
.eh_frame:000000000000CB1B                 db    0
.eh_frame:000000000000CB1C                 db    1
.eh_frame:000000000000CB1D                 db  78h ; x
.eh_frame:000000000000CB1E                 db  10h
.eh_frame:000000000000CB1F                 db    1
.eh_frame:000000000000CB20                 db  1Bh
.eh_frame:000000000000CB21                 db  0Ch
.eh_frame:000000000000CB22                 db    7
.eh_frame:000000000000CB23                 db    8
.eh_frame:000000000000CB24                 db  90h
.eh_frame:000000000000CB25                 db    1
.eh_frame:000000000000CB26                 db    0
.eh_frame:000000000000CB27                 db    0
.eh_frame:000000000000CB28                 db  24h ; $
.eh_frame:000000000000CB29                 db    0
.eh_frame:000000000000CB2A                 db    0
.eh_frame:000000000000CB2B                 db    0
.eh_frame:000000000000CB2C                 db  1Ch
.eh_frame:000000000000CB2D                 db    0
.eh_frame:000000000000CB2E                 db    0
.eh_frame:000000000000CB2F                 db    0
.eh_frame:000000000000CB30                 db  60h ; `
.eh_frame:000000000000CB31                 db  4Eh ; N
.eh_frame:000000000000CB32                 db 0FFh
.eh_frame:000000000000CB33                 db 0FFh
.eh_frame:000000000000CB34                 db  50h ; P
.eh_frame:000000000000CB35                 db    4
.eh_frame:000000000000CB36                 db    0
.eh_frame:000000000000CB37                 db    0
.eh_frame:000000000000CB38                 db    0
.eh_frame:000000000000CB39                 db  0Eh
.eh_frame:000000000000CB3A                 db  10h
.eh_frame:000000000000CB3B                 db  46h ; F
.eh_frame:000000000000CB3C                 db  0Eh
.eh_frame:000000000000CB3D                 db  18h
.eh_frame:000000000000CB3E                 db  4Ah ; J
.eh_frame:000000000000CB3F                 db  0Fh
.eh_frame:000000000000CB40                 db  0Bh
.eh_frame:000000000000CB41                 db  77h ; w
.eh_frame:000000000000CB42                 db    8
.eh_frame:000000000000CB43                 db  80h
.eh_frame:000000000000CB44                 db    0
.eh_frame:000000000000CB45                 db  3Fh ; ?
.eh_frame:000000000000CB46                 db  1Ah
.eh_frame:000000000000CB47                 db  3Bh ; ;
.eh_frame:000000000000CB48                 db  2Ah ; *
.eh_frame:000000000000CB49                 db  33h ; 3
.eh_frame:000000000000CB4A                 db  24h ; $
.eh_frame:000000000000CB4B                 db  22h ; "
.eh_frame:000000000000CB4C                 db    0
.eh_frame:000000000000CB4D                 db    0
.eh_frame:000000000000CB4E                 db    0
.eh_frame:000000000000CB4F                 db    0
.eh_frame:000000000000CB50                 db  14h
.eh_frame:000000000000CB51                 db    0
.eh_frame:000000000000CB52                 db    0
.eh_frame:000000000000CB53                 db    0
.eh_frame:000000000000CB54                 db  44h ; D
.eh_frame:000000000000CB55                 db    0
.eh_frame:000000000000CB56                 db    0
.eh_frame:000000000000CB57                 db    0
.eh_frame:000000000000CB58                 db  88h
.eh_frame:000000000000CB59                 db  52h ; R
.eh_frame:000000000000CB5A                 db 0FFh
.eh_frame:000000000000CB5B                 db 0FFh
.eh_frame:000000000000CB5C                 db  10h
.eh_frame:000000000000CB5D                 db    0
.eh_frame:000000000000CB5E                 db    0
.eh_frame:000000000000CB5F                 db    0
.eh_frame:000000000000CB60                 db    0
.eh_frame:000000000000CB61                 db    0
.eh_frame:000000000000CB62                 db    0
.eh_frame:000000000000CB63                 db    0
.eh_frame:000000000000CB64                 db    0
.eh_frame:000000000000CB65                 db    0
.eh_frame:000000000000CB66                 db    0
.eh_frame:000000000000CB67                 db    0
.eh_frame:000000000000CB68                 db  28h ; (
.eh_frame:000000000000CB69                 db    0
.eh_frame:000000000000CB6A                 db    0
.eh_frame:000000000000CB6B                 db    0
.eh_frame:000000000000CB6C                 db  5Ch ; \
.eh_frame:000000000000CB6D                 db    0
.eh_frame:000000000000CB6E                 db    0
.eh_frame:000000000000CB6F                 db    0
.eh_frame:000000000000CB70                 db  20h
.eh_frame:000000000000CB71                 db  59h ; Y
.eh_frame:000000000000CB72                 db 0FFh
.eh_frame:000000000000CB73                 db 0FFh
.eh_frame:000000000000CB74                 db 0C2h
.eh_frame:000000000000CB75                 db    4
.eh_frame:000000000000CB76                 db    0
.eh_frame:000000000000CB77                 db    0
.eh_frame:000000000000CB78                 db    0
.eh_frame:000000000000CB79                 db  42h ; B
.eh_frame:000000000000CB7A                 db  0Eh
.eh_frame:000000000000CB7B                 db  10h
.eh_frame:000000000000CB7C                 db  8Dh
.eh_frame:000000000000CB7D                 db    2
.eh_frame:000000000000CB7E                 db  42h ; B
.eh_frame:000000000000CB7F                 db  0Eh
.eh_frame:000000000000CB80                 db  18h
.eh_frame:000000000000CB81                 db  8Ch
.eh_frame:000000000000CB82                 db    3
.eh_frame:000000000000CB83                 db  46h ; F
.eh_frame:000000000000CB84                 db  0Eh
.eh_frame:000000000000CB85                 db  20h
.eh_frame:000000000000CB86                 db  86h
.eh_frame:000000000000CB87                 db    4
.eh_frame:000000000000CB88                 db  41h ; A
.eh_frame:000000000000CB89                 db  0Eh
.eh_frame:000000000000CB8A                 db  28h ; (
.eh_frame:000000000000CB8B                 db  83h
.eh_frame:000000000000CB8C                 db    5
.eh_frame:000000000000CB8D                 db  49h ; I
.eh_frame:000000000000CB8E                 db  0Eh
.eh_frame:000000000000CB8F                 db 0B0h
.eh_frame:000000000000CB90                 db    1
.eh_frame:000000000000CB91                 db    0
.eh_frame:000000000000CB92                 db    0
.eh_frame:000000000000CB93                 db    0
.eh_frame:000000000000CB94                 db  68h ; h
.eh_frame:000000000000CB95                 db    0
.eh_frame:000000000000CB96                 db    0
.eh_frame:000000000000CB97                 db    0
.eh_frame:000000000000CB98                 db  88h
.eh_frame:000000000000CB99                 db    0
.eh_frame:000000000000CB9A                 db    0
.eh_frame:000000000000CB9B                 db    0
.eh_frame:000000000000CB9C                 db  54h ; T
.eh_frame:000000000000CB9D                 db  52h ; R
.eh_frame:000000000000CB9E                 db 0FFh
.eh_frame:000000000000CB9F                 db 0FFh
.eh_frame:000000000000CBA0                 db  90h
.eh_frame:000000000000CBA1                 db    5
.eh_frame:000000000000CBA2                 db    0
.eh_frame:000000000000CBA3                 db    0
.eh_frame:000000000000CBA4                 db    0
.eh_frame:000000000000CBA5                 db  42h ; B
.eh_frame:000000000000CBA6                 db  0Eh
.eh_frame:000000000000CBA7                 db  10h
.eh_frame:000000000000CBA8                 db  8Fh
.eh_frame:000000000000CBA9                 db    2
.eh_frame:000000000000CBAA                 db  42h ; B
.eh_frame:000000000000CBAB                 db  0Eh
.eh_frame:000000000000CBAC                 db  18h
.eh_frame:000000000000CBAD                 db  8Eh
.eh_frame:000000000000CBAE                 db    3
.eh_frame:000000000000CBAF                 db  45h ; E
.eh_frame:000000000000CBB0                 db  0Eh
.eh_frame:000000000000CBB1                 db  20h
.eh_frame:000000000000CBB2                 db  8Dh
.eh_frame:000000000000CBB3                 db    4
.eh_frame:000000000000CBB4                 db  42h ; B
.eh_frame:000000000000CBB5                 db  0Eh
.eh_frame:000000000000CBB6                 db  28h ; (
.eh_frame:000000000000CBB7                 db  8Ch
.eh_frame:000000000000CBB8                 db    5
.eh_frame:000000000000CBB9                 db  47h ; G
.eh_frame:000000000000CBBA                 db  0Eh
.eh_frame:000000000000CBBB                 db  30h ; 0
.eh_frame:000000000000CBBC                 db  86h
.eh_frame:000000000000CBBD                 db    6
.eh_frame:000000000000CBBE                 db  41h ; A
.eh_frame:000000000000CBBF                 db  0Eh
.eh_frame:000000000000CBC0                 db  38h ; 8
.eh_frame:000000000000CBC1                 db  83h
.eh_frame:000000000000CBC2                 db    7
.eh_frame:000000000000CBC3                 db  53h ; S
.eh_frame:000000000000CBC4                 db  0Eh
.eh_frame:000000000000CBC5                 db 0B0h
.eh_frame:000000000000CBC6                 db    2
.eh_frame:000000000000CBC7                 db    3
.eh_frame:000000000000CBC8                 db  81h
.eh_frame:000000000000CBC9                 db    1
.eh_frame:000000000000CBCA                 db  0Ah
.eh_frame:000000000000CBCB                 db  0Eh
.eh_frame:000000000000CBCC                 db 0B8h
.eh_frame:000000000000CBCD                 db    2
.eh_frame:000000000000CBCE                 db  50h ; P
.eh_frame:000000000000CBCF                 db  0Eh
.eh_frame:000000000000CBD0                 db 0C0h
.eh_frame:000000000000CBD1                 db    2
.eh_frame:000000000000CBD2                 db  71h ; q
.eh_frame:000000000000CBD3                 db  0Bh
.eh_frame:000000000000CBD4                 db    3
.eh_frame:000000000000CBD5                 db  7Ch ; |
.eh_frame:000000000000CBD6                 db    1
.eh_frame:000000000000CBD7                 db  0Eh
.eh_frame:000000000000CBD8                 db 0B8h
.eh_frame:000000000000CBD9                 db    2
.eh_frame:000000000000CBDA                 db  45h ; E
.eh_frame:000000000000CBDB                 db  0Eh
.eh_frame:000000000000CBDC                 db 0C0h
.eh_frame:000000000000CBDD                 db    2
.eh_frame:000000000000CBDE                 db  62h ; b
.eh_frame:000000000000CBDF                 db  0Eh
.eh_frame:000000000000CBE0                 db 0B8h
.eh_frame:000000000000CBE1                 db    2
.eh_frame:000000000000CBE2                 db  41h ; A
.eh_frame:000000000000CBE3                 db  0Eh
.eh_frame:000000000000CBE4                 db 0B0h
.eh_frame:000000000000CBE5                 db    2
.eh_frame:000000000000CBE6                 db  64h ; d
.eh_frame:000000000000CBE7                 db  0Ah
.eh_frame:000000000000CBE8                 db  0Eh
.eh_frame:000000000000CBE9                 db  38h ; 8
.eh_frame:000000000000CBEA                 db  41h ; A
.eh_frame:000000000000CBEB                 db  0Eh
.eh_frame:000000000000CBEC                 db  30h ; 0
.eh_frame:000000000000CBED                 db  41h ; A
.eh_frame:000000000000CBEE                 db  0Eh
.eh_frame:000000000000CBEF                 db  28h ; (
.eh_frame:000000000000CBF0                 db  42h ; B
.eh_frame:000000000000CBF1                 db  0Eh
.eh_frame:000000000000CBF2                 db  20h
.eh_frame:000000000000CBF3                 db  42h ; B
.eh_frame:000000000000CBF4                 db  0Eh
.eh_frame:000000000000CBF5                 db  18h
.eh_frame:000000000000CBF6                 db  42h ; B
.eh_frame:000000000000CBF7                 db  0Eh
.eh_frame:000000000000CBF8                 db  10h
.eh_frame:000000000000CBF9                 db  42h ; B
.eh_frame:000000000000CBFA                 db  0Eh
.eh_frame:000000000000CBFB                 db    8
.eh_frame:000000000000CBFC                 db  41h ; A
.eh_frame:000000000000CBFD                 db  0Bh
.eh_frame:000000000000CBFE                 db    0
.eh_frame:000000000000CBFF                 db    0
.eh_frame:000000000000CC00                 db  38h ; 8
.eh_frame:000000000000CC01                 db    0
.eh_frame:000000000000CC02                 db    0
.eh_frame:000000000000CC03                 db    0
.eh_frame:000000000000CC04                 db 0F4h
.eh_frame:000000000000CC05                 db    0
.eh_frame:000000000000CC06                 db    0
.eh_frame:000000000000CC07                 db    0
.eh_frame:000000000000CC08                 db  58h ; X
.eh_frame:000000000000CC09                 db  5Dh ; ]
.eh_frame:000000000000CC0A                 db 0FFh
.eh_frame:000000000000CC0B                 db 0FFh
.eh_frame:000000000000CC0C                 db  75h ; u
.eh_frame:000000000000CC0D                 db    0
.eh_frame:000000000000CC0E                 db    0
.eh_frame:000000000000CC0F                 db    0
.eh_frame:000000000000CC10                 db    0
.eh_frame:000000000000CC11                 db  45h ; E
.eh_frame:000000000000CC12                 db  0Eh
.eh_frame:000000000000CC13                 db  10h
.eh_frame:000000000000CC14                 db  8Ch
.eh_frame:000000000000CC15                 db    2
.eh_frame:000000000000CC16                 db  41h ; A
.eh_frame:000000000000CC17                 db  0Eh
.eh_frame:000000000000CC18                 db  18h
.eh_frame:000000000000CC19                 db  86h
.eh_frame:000000000000CC1A                 db    3
.eh_frame:000000000000CC1B                 db  41h ; A
.eh_frame:000000000000CC1C                 db  0Eh
.eh_frame:000000000000CC1D                 db  20h
.eh_frame:000000000000CC1E                 db  83h
.eh_frame:000000000000CC1F                 db    4
.eh_frame:000000000000CC20                 db    2
.eh_frame:000000000000CC21                 db  48h ; H
.eh_frame:000000000000CC22                 db  0Ah
.eh_frame:000000000000CC23                 db  0Eh
.eh_frame:000000000000CC24                 db  18h
.eh_frame:000000000000CC25                 db  41h ; A
.eh_frame:000000000000CC26                 db  0Eh
.eh_frame:000000000000CC27                 db  10h
.eh_frame:000000000000CC28                 db  42h ; B
.eh_frame:000000000000CC29                 db  0Eh
.eh_frame:000000000000CC2A                 db    8
.eh_frame:000000000000CC2B                 db  46h ; F
.eh_frame:000000000000CC2C                 db  0Bh
.eh_frame:000000000000CC2D                 db  49h ; I
.eh_frame:000000000000CC2E                 db  0Ah
.eh_frame:000000000000CC2F                 db  0Eh
.eh_frame:000000000000CC30                 db  18h
.eh_frame:000000000000CC31                 db  41h ; A
.eh_frame:000000000000CC32                 db  0Eh
.eh_frame:000000000000CC33                 db  10h
.eh_frame:000000000000CC34                 db  42h ; B
.eh_frame:000000000000CC35                 db  0Eh
.eh_frame:000000000000CC36                 db    8
.eh_frame:000000000000CC37                 db  4Ch ; L
.eh_frame:000000000000CC38                 db  0Bh
.eh_frame:000000000000CC39                 db    0
.eh_frame:000000000000CC3A                 db    0
.eh_frame:000000000000CC3B                 db    0
.eh_frame:000000000000CC3C                 db  10h
.eh_frame:000000000000CC3D                 db    0
.eh_frame:000000000000CC3E                 db    0
.eh_frame:000000000000CC3F                 db    0
.eh_frame:000000000000CC40                 db  30h ; 0
.eh_frame:000000000000CC41                 db    1
.eh_frame:000000000000CC42                 db    0
.eh_frame:000000000000CC43                 db    0
.eh_frame:000000000000CC44                 db  9Ch
.eh_frame:000000000000CC45                 db  5Dh ; ]
.eh_frame:000000000000CC46                 db 0FFh
.eh_frame:000000000000CC47                 db 0FFh
.eh_frame:000000000000CC48                 db  2Bh ; +
.eh_frame:000000000000CC49                 db    0
.eh_frame:000000000000CC4A                 db    0
.eh_frame:000000000000CC4B                 db    0
.eh_frame:000000000000CC4C                 db    0
.eh_frame:000000000000CC4D                 db    0
.eh_frame:000000000000CC4E                 db    0
.eh_frame:000000000000CC4F                 db    0
.eh_frame:000000000000CC50                 db  18h
.eh_frame:000000000000CC51                 db    0
.eh_frame:000000000000CC52                 db    0
.eh_frame:000000000000CC53                 db    0
.eh_frame:000000000000CC54                 db  44h ; D
.eh_frame:000000000000CC55                 db    1
.eh_frame:000000000000CC56                 db    0
.eh_frame:000000000000CC57                 db    0
.eh_frame:000000000000CC58                 db 0B8h
.eh_frame:000000000000CC59                 db  5Dh ; ]
.eh_frame:000000000000CC5A                 db 0FFh
.eh_frame:000000000000CC5B                 db 0FFh
.eh_frame:000000000000CC5C                 db  17h
.eh_frame:000000000000CC5D                 db    0
.eh_frame:000000000000CC5E                 db    0
.eh_frame:000000000000CC5F                 db    0
.eh_frame:000000000000CC60                 db    0
.eh_frame:000000000000CC61                 db  41h ; A
.eh_frame:000000000000CC62                 db  0Eh
.eh_frame:000000000000CC63                 db  10h
.eh_frame:000000000000CC64                 db  83h
.eh_frame:000000000000CC65                 db    2
.eh_frame:000000000000CC66                 db  51h ; Q
.eh_frame:000000000000CC67                 db  0Eh
.eh_frame:000000000000CC68                 db    8
.eh_frame:000000000000CC69                 db    0
.eh_frame:000000000000CC6A                 db    0
.eh_frame:000000000000CC6B                 db    0
.eh_frame:000000000000CC6C                 db  20h
.eh_frame:000000000000CC6D                 db    0
.eh_frame:000000000000CC6E                 db    0
.eh_frame:000000000000CC6F                 db    0
.eh_frame:000000000000CC70                 db  60h ; `
.eh_frame:000000000000CC71                 db    1
.eh_frame:000000000000CC72                 db    0
.eh_frame:000000000000CC73                 db    0
.eh_frame:000000000000CC74                 db 0BCh
.eh_frame:000000000000CC75                 db  5Dh ; ]
.eh_frame:000000000000CC76                 db 0FFh
.eh_frame:000000000000CC77                 db 0FFh
.eh_frame:000000000000CC78                 db  54h ; T
.eh_frame:000000000000CC79                 db    0
.eh_frame:000000000000CC7A                 db    0
.eh_frame:000000000000CC7B                 db    0
.eh_frame:000000000000CC7C                 db    0
.eh_frame:000000000000CC7D                 db  41h ; A
.eh_frame:000000000000CC7E                 db  0Eh
.eh_frame:000000000000CC7F                 db  10h
.eh_frame:000000000000CC80                 db  83h
.eh_frame:000000000000CC81                 db    2
.eh_frame:000000000000CC82                 db  46h ; F
.eh_frame:000000000000CC83                 db  0Eh
.eh_frame:000000000000CC84                 db  30h ; 0
.eh_frame:000000000000CC85                 db  76h ; v
.eh_frame:000000000000CC86                 db  0Ah
.eh_frame:000000000000CC87                 db  0Eh
.eh_frame:000000000000CC88                 db  10h
.eh_frame:000000000000CC89                 db  41h ; A
.eh_frame:000000000000CC8A                 db  0Eh
.eh_frame:000000000000CC8B                 db    8
.eh_frame:000000000000CC8C                 db  42h ; B
.eh_frame:000000000000CC8D                 db  0Bh
.eh_frame:000000000000CC8E                 db    0
.eh_frame:000000000000CC8F                 db    0
.eh_frame:000000000000CC90                 db  20h
.eh_frame:000000000000CC91                 db    0
.eh_frame:000000000000CC92                 db    0
.eh_frame:000000000000CC93                 db    0
.eh_frame:000000000000CC94                 db  84h
.eh_frame:000000000000CC95                 db    1
.eh_frame:000000000000CC96                 db    0
.eh_frame:000000000000CC97                 db    0
.eh_frame:000000000000CC98                 db 0F8h
.eh_frame:000000000000CC99                 db  5Dh ; ]
.eh_frame:000000000000CC9A                 db 0FFh
.eh_frame:000000000000CC9B                 db 0FFh
.eh_frame:000000000000CC9C                 db  54h ; T
.eh_frame:000000000000CC9D                 db    0
.eh_frame:000000000000CC9E                 db    0
.eh_frame:000000000000CC9F                 db    0
.eh_frame:000000000000CCA0                 db    0
.eh_frame:000000000000CCA1                 db  41h ; A
.eh_frame:000000000000CCA2                 db  0Eh
.eh_frame:000000000000CCA3                 db  10h
.eh_frame:000000000000CCA4                 db  83h
.eh_frame:000000000000CCA5                 db    2
.eh_frame:000000000000CCA6                 db  46h ; F
.eh_frame:000000000000CCA7                 db  0Eh
.eh_frame:000000000000CCA8                 db  30h ; 0
.eh_frame:000000000000CCA9                 db  76h ; v
.eh_frame:000000000000CCAA                 db  0Ah
.eh_frame:000000000000CCAB                 db  0Eh
.eh_frame:000000000000CCAC                 db  10h
.eh_frame:000000000000CCAD                 db  41h ; A
.eh_frame:000000000000CCAE                 db  0Eh
.eh_frame:000000000000CCAF                 db    8
.eh_frame:000000000000CCB0                 db  42h ; B
.eh_frame:000000000000CCB1                 db  0Bh
.eh_frame:000000000000CCB2                 db    0
.eh_frame:000000000000CCB3                 db    0
.eh_frame:000000000000CCB4                 db  4Ch ; L
.eh_frame:000000000000CCB5                 db    0
.eh_frame:000000000000CCB6                 db    0
.eh_frame:000000000000CCB7                 db    0
.eh_frame:000000000000CCB8                 db 0A8h
.eh_frame:000000000000CCB9                 db    1
.eh_frame:000000000000CCBA                 db    0
.eh_frame:000000000000CCBB                 db    0
.eh_frame:000000000000CCBC                 db  34h ; 4
.eh_frame:000000000000CCBD                 db  5Eh ; ^
.eh_frame:000000000000CCBE                 db 0FFh
.eh_frame:000000000000CCBF                 db 0FFh
.eh_frame:000000000000CCC0                 db  83h
.eh_frame:000000000000CCC1                 db  0Dh
.eh_frame:000000000000CCC2                 db    0
.eh_frame:000000000000CCC3                 db    0
.eh_frame:000000000000CCC4                 db    0
.eh_frame:000000000000CCC5                 db  42h ; B
.eh_frame:000000000000CCC6                 db  0Eh
.eh_frame:000000000000CCC7                 db  10h
.eh_frame:000000000000CCC8                 db  8Fh
.eh_frame:000000000000CCC9                 db    2
.eh_frame:000000000000CCCA                 db  42h ; B
.eh_frame:000000000000CCCB                 db  0Eh
.eh_frame:000000000000CCCC                 db  18h
.eh_frame:000000000000CCCD                 db  8Eh
.eh_frame:000000000000CCCE                 db    3
.eh_frame:000000000000CCCF                 db  42h ; B
.eh_frame:000000000000CCD0                 db  0Eh
.eh_frame:000000000000CCD1                 db  20h
.eh_frame:000000000000CCD2                 db  8Dh
.eh_frame:000000000000CCD3                 db    4
.eh_frame:000000000000CCD4                 db  42h ; B
.eh_frame:000000000000CCD5                 db  0Eh
.eh_frame:000000000000CCD6                 db  28h ; (
.eh_frame:000000000000CCD7                 db  8Ch
.eh_frame:000000000000CCD8                 db    5
.eh_frame:000000000000CCD9                 db  44h ; D
.eh_frame:000000000000CCDA                 db  0Eh
.eh_frame:000000000000CCDB                 db  30h ; 0
.eh_frame:000000000000CCDC                 db  86h
.eh_frame:000000000000CCDD                 db    6
.eh_frame:000000000000CCDE                 db  41h ; A
.eh_frame:000000000000CCDF                 db  0Eh
.eh_frame:000000000000CCE0                 db  38h ; 8
.eh_frame:000000000000CCE1                 db  83h
.eh_frame:000000000000CCE2                 db    7
.eh_frame:000000000000CCE3                 db  4Ah ; J
.eh_frame:000000000000CCE4                 db  0Eh
.eh_frame:000000000000CCE5                 db 0B0h
.eh_frame:000000000000CCE6                 db    3
.eh_frame:000000000000CCE7                 db    3
.eh_frame:000000000000CCE8                 db 0FAh
.eh_frame:000000000000CCE9                 db    4
.eh_frame:000000000000CCEA                 db  0Ah
.eh_frame:000000000000CCEB                 db  0Eh
.eh_frame:000000000000CCEC                 db  38h ; 8
.eh_frame:000000000000CCED                 db  41h ; A
.eh_frame:000000000000CCEE                 db  0Eh
.eh_frame:000000000000CCEF                 db  30h ; 0
.eh_frame:000000000000CCF0                 db  41h ; A
.eh_frame:000000000000CCF1                 db  0Eh
.eh_frame:000000000000CCF2                 db  28h ; (
.eh_frame:000000000000CCF3                 db  42h ; B
.eh_frame:000000000000CCF4                 db  0Eh
.eh_frame:000000000000CCF5                 db  20h
.eh_frame:000000000000CCF6                 db  42h ; B
.eh_frame:000000000000CCF7                 db  0Eh
.eh_frame:000000000000CCF8                 db  18h
.eh_frame:000000000000CCF9                 db  42h ; B
.eh_frame:000000000000CCFA                 db  0Eh
.eh_frame:000000000000CCFB                 db  10h
.eh_frame:000000000000CCFC                 db  42h ; B
.eh_frame:000000000000CCFD                 db  0Eh
.eh_frame:000000000000CCFE                 db    8
.eh_frame:000000000000CCFF                 db  45h ; E
.eh_frame:000000000000CD00                 db  0Bh
.eh_frame:000000000000CD01                 db    0
.eh_frame:000000000000CD02                 db    0
.eh_frame:000000000000CD03                 db    0
.eh_frame:000000000000CD04                 db  58h ; X
.eh_frame:000000000000CD05                 db    0
.eh_frame:000000000000CD06                 db    0
.eh_frame:000000000000CD07                 db    0
.eh_frame:000000000000CD08                 db 0F8h
.eh_frame:000000000000CD09                 db    1
.eh_frame:000000000000CD0A                 db    0
.eh_frame:000000000000CD0B                 db    0
.eh_frame:000000000000CD0C                 db  74h ; t
.eh_frame:000000000000CD0D                 db  6Bh ; k
.eh_frame:000000000000CD0E                 db 0FFh
.eh_frame:000000000000CD0F                 db 0FFh
.eh_frame:000000000000CD10                 db  20h
.eh_frame:000000000000CD11                 db    1
.eh_frame:000000000000CD12                 db    0
.eh_frame:000000000000CD13                 db    0
.eh_frame:000000000000CD14                 db    0
.eh_frame:000000000000CD15                 db  42h ; B
.eh_frame:000000000000CD16                 db  0Eh
.eh_frame:000000000000CD17                 db  10h
.eh_frame:000000000000CD18                 db  8Fh
.eh_frame:000000000000CD19                 db    2
.eh_frame:000000000000CD1A                 db  42h ; B
.eh_frame:000000000000CD1B                 db  0Eh
.eh_frame:000000000000CD1C                 db  18h
.eh_frame:000000000000CD1D                 db  8Eh
.eh_frame:000000000000CD1E                 db    3
.eh_frame:000000000000CD1F                 db  45h ; E
.eh_frame:000000000000CD20                 db  0Eh
.eh_frame:000000000000CD21                 db  20h
.eh_frame:000000000000CD22                 db  8Dh
.eh_frame:000000000000CD23                 db    4
.eh_frame:000000000000CD24                 db  42h ; B
.eh_frame:000000000000CD25                 db  0Eh
.eh_frame:000000000000CD26                 db  28h ; (
.eh_frame:000000000000CD27                 db  8Ch
.eh_frame:000000000000CD28                 db    5
.eh_frame:000000000000CD29                 db  44h ; D
.eh_frame:000000000000CD2A                 db  0Eh
.eh_frame:000000000000CD2B                 db  30h ; 0
.eh_frame:000000000000CD2C                 db  86h
.eh_frame:000000000000CD2D                 db    6
.eh_frame:000000000000CD2E                 db  41h ; A
.eh_frame:000000000000CD2F                 db  0Eh
.eh_frame:000000000000CD30                 db  38h ; 8
.eh_frame:000000000000CD31                 db  83h
.eh_frame:000000000000CD32                 db    7
.eh_frame:000000000000CD33                 db  47h ; G
.eh_frame:000000000000CD34                 db  0Eh
.eh_frame:000000000000CD35                 db  50h ; P
.eh_frame:000000000000CD36                 db  7Dh ; }
.eh_frame:000000000000CD37                 db  0Eh
.eh_frame:000000000000CD38                 db  58h ; X
.eh_frame:000000000000CD39                 db  48h ; H
.eh_frame:000000000000CD3A                 db  0Eh
.eh_frame:000000000000CD3B                 db  60h ; `
.eh_frame:000000000000CD3C                 db  55h ; U
.eh_frame:000000000000CD3D                 db  0Eh
.eh_frame:000000000000CD3E                 db  58h ; X
.eh_frame:000000000000CD3F                 db  41h ; A
.eh_frame:000000000000CD40                 db  0Eh
.eh_frame:000000000000CD41                 db  50h ; P
.eh_frame:000000000000CD42                 db    2
.eh_frame:000000000000CD43                 db  5Ch ; \
.eh_frame:000000000000CD44                 db  0Ah
.eh_frame:000000000000CD45                 db  0Eh
.eh_frame:000000000000CD46                 db  38h ; 8
.eh_frame:000000000000CD47                 db  43h ; C
.eh_frame:000000000000CD48                 db  0Eh
.eh_frame:000000000000CD49                 db  30h ; 0
.eh_frame:000000000000CD4A                 db  41h ; A
.eh_frame:000000000000CD4B                 db  0Eh
.eh_frame:000000000000CD4C                 db  28h ; (
.eh_frame:000000000000CD4D                 db  42h ; B
.eh_frame:000000000000CD4E                 db  0Eh
.eh_frame:000000000000CD4F                 db  20h
.eh_frame:000000000000CD50                 db  42h ; B
.eh_frame:000000000000CD51                 db  0Eh
.eh_frame:000000000000CD52                 db  18h
.eh_frame:000000000000CD53                 db  42h ; B
.eh_frame:000000000000CD54                 db  0Eh
.eh_frame:000000000000CD55                 db  10h
.eh_frame:000000000000CD56                 db  42h ; B
.eh_frame:000000000000CD57                 db  0Eh
.eh_frame:000000000000CD58                 db    8
.eh_frame:000000000000CD59                 db  46h ; F
.eh_frame:000000000000CD5A                 db  0Bh
.eh_frame:000000000000CD5B                 db    0
.eh_frame:000000000000CD5C                 db    0
.eh_frame:000000000000CD5D                 db    0
.eh_frame:000000000000CD5E                 db    0
.eh_frame:000000000000CD5F                 db    0
.eh_frame:000000000000CD60                 db  10h
.eh_frame:000000000000CD61                 db    0
.eh_frame:000000000000CD62                 db    0
.eh_frame:000000000000CD63                 db    0
.eh_frame:000000000000CD64                 db  54h ; T
.eh_frame:000000000000CD65                 db    2
.eh_frame:000000000000CD66                 db    0
.eh_frame:000000000000CD67                 db    0
.eh_frame:000000000000CD68                 db  38h ; 8
.eh_frame:000000000000CD69                 db  6Ch ; l
.eh_frame:000000000000CD6A                 db 0FFh
.eh_frame:000000000000CD6B                 db 0FFh
.eh_frame:000000000000CD6C                 db    8
.eh_frame:000000000000CD6D                 db    0
.eh_frame:000000000000CD6E                 db    0
.eh_frame:000000000000CD6F                 db    0
.eh_frame:000000000000CD70                 db    0
.eh_frame:000000000000CD71                 db    0
.eh_frame:000000000000CD72                 db    0
.eh_frame:000000000000CD73                 db    0
.eh_frame:000000000000CD74                 db  10h
.eh_frame:000000000000CD75                 db    0
.eh_frame:000000000000CD76                 db    0
.eh_frame:000000000000CD77                 db    0
.eh_frame:000000000000CD78                 db  68h ; h
.eh_frame:000000000000CD79                 db    2
.eh_frame:000000000000CD7A                 db    0
.eh_frame:000000000000CD7B                 db    0
.eh_frame:000000000000CD7C                 db  34h ; 4
.eh_frame:000000000000CD7D                 db  6Ch ; l
.eh_frame:000000000000CD7E                 db 0FFh
.eh_frame:000000000000CD7F                 db 0FFh
.eh_frame:000000000000CD80                 db    8
.eh_frame:000000000000CD81                 db    0
.eh_frame:000000000000CD82                 db    0
.eh_frame:000000000000CD83                 db    0
.eh_frame:000000000000CD84                 db    0
.eh_frame:000000000000CD85                 db    0
.eh_frame:000000000000CD86                 db    0
.eh_frame:000000000000CD87                 db    0
.eh_frame:000000000000CD88                 db  2Ch ; ,
.eh_frame:000000000000CD89                 db    0
.eh_frame:000000000000CD8A                 db    0
.eh_frame:000000000000CD8B                 db    0
.eh_frame:000000000000CD8C                 db  7Ch ; |
.eh_frame:000000000000CD8D                 db    2
.eh_frame:000000000000CD8E                 db    0
.eh_frame:000000000000CD8F                 db    0
.eh_frame:000000000000CD90                 db  30h ; 0
.eh_frame:000000000000CD91                 db  6Ch ; l
.eh_frame:000000000000CD92                 db 0FFh
.eh_frame:000000000000CD93                 db 0FFh
.eh_frame:000000000000CD94                 db 0A4h
.eh_frame:000000000000CD95                 db    0
.eh_frame:000000000000CD96                 db    0
.eh_frame:000000000000CD97                 db    0
.eh_frame:000000000000CD98                 db    0
.eh_frame:000000000000CD99                 db  41h ; A
.eh_frame:000000000000CD9A                 db  0Eh
.eh_frame:000000000000CD9B                 db  10h
.eh_frame:000000000000CD9C                 db  86h
.eh_frame:000000000000CD9D                 db    2
.eh_frame:000000000000CD9E                 db  41h ; A
.eh_frame:000000000000CD9F                 db  0Eh
.eh_frame:000000000000CDA0                 db  18h
.eh_frame:000000000000CDA1                 db  83h
.eh_frame:000000000000CDA2                 db    3
.eh_frame:000000000000CDA3                 db  44h ; D
.eh_frame:000000000000CDA4                 db  0Eh
.eh_frame:000000000000CDA5                 db  20h
.eh_frame:000000000000CDA6                 db  7Ah ; z
.eh_frame:000000000000CDA7                 db  0Ah
.eh_frame:000000000000CDA8                 db  0Eh
.eh_frame:000000000000CDA9                 db  18h
.eh_frame:000000000000CDAA                 db  41h ; A
.eh_frame:000000000000CDAB                 db  0Eh
.eh_frame:000000000000CDAC                 db  10h
.eh_frame:000000000000CDAD                 db  41h ; A
.eh_frame:000000000000CDAE                 db  0Eh
.eh_frame:000000000000CDAF                 db    8
.eh_frame:000000000000CDB0                 db  41h ; A
.eh_frame:000000000000CDB1                 db  0Bh
.eh_frame:000000000000CDB2                 db    0
.eh_frame:000000000000CDB3                 db    0
.eh_frame:000000000000CDB4                 db    0
.eh_frame:000000000000CDB5                 db    0
.eh_frame:000000000000CDB6                 db    0
.eh_frame:000000000000CDB7                 db    0
.eh_frame:000000000000CDB8                 db  14h
.eh_frame:000000000000CDB9                 db    0
.eh_frame:000000000000CDBA                 db    0
.eh_frame:000000000000CDBB                 db    0
.eh_frame:000000000000CDBC                 db 0ACh
.eh_frame:000000000000CDBD                 db    2
.eh_frame:000000000000CDBE                 db    0
.eh_frame:000000000000CDBF                 db    0
.eh_frame:000000000000CDC0                 db 0B0h
.eh_frame:000000000000CDC1                 db  6Ch ; l
.eh_frame:000000000000CDC2                 db 0FFh
.eh_frame:000000000000CDC3                 db 0FFh
.eh_frame:000000000000CDC4                 db  42h ; B
.eh_frame:000000000000CDC5                 db    0
.eh_frame:000000000000CDC6                 db    0
.eh_frame:000000000000CDC7                 db    0
.eh_frame:000000000000CDC8                 db    0
.eh_frame:000000000000CDC9                 db    0
.eh_frame:000000000000CDCA                 db    0
.eh_frame:000000000000CDCB                 db    0
.eh_frame:000000000000CDCC                 db    0
.eh_frame:000000000000CDCD                 db    0
.eh_frame:000000000000CDCE                 db    0
.eh_frame:000000000000CDCF                 db    0
.eh_frame:000000000000CDD0                 db  1Ch
.eh_frame:000000000000CDD1                 db    0
.eh_frame:000000000000CDD2                 db    0
.eh_frame:000000000000CDD3                 db    0
.eh_frame:000000000000CDD4                 db 0C4h
.eh_frame:000000000000CDD5                 db    2
.eh_frame:000000000000CDD6                 db    0
.eh_frame:000000000000CDD7                 db    0
.eh_frame:000000000000CDD8                 db 0E8h
.eh_frame:000000000000CDD9                 db  6Ch ; l
.eh_frame:000000000000CDDA                 db 0FFh
.eh_frame:000000000000CDDB                 db 0FFh
.eh_frame:000000000000CDDC                 db  9Fh
.eh_frame:000000000000CDDD                 db    0
.eh_frame:000000000000CDDE                 db    0
.eh_frame:000000000000CDDF                 db    0
.eh_frame:000000000000CDE0                 db    0
.eh_frame:000000000000CDE1                 db  44h ; D
.eh_frame:000000000000CDE2                 db  0Eh
.eh_frame:000000000000CDE3                 db  10h
.eh_frame:000000000000CDE4                 db  83h
.eh_frame:000000000000CDE5                 db    2
.eh_frame:000000000000CDE6                 db    2
.eh_frame:000000000000CDE7                 db  78h ; x
.eh_frame:000000000000CDE8                 db  0Ah
.eh_frame:000000000000CDE9                 db  0Eh
.eh_frame:000000000000CDEA                 db    8
.eh_frame:000000000000CDEB                 db  41h ; A
.eh_frame:000000000000CDEC                 db  0Bh
.eh_frame:000000000000CDED                 db    0
.eh_frame:000000000000CDEE                 db    0
.eh_frame:000000000000CDEF                 db    0
.eh_frame:000000000000CDF0                 db  40h ; @
.eh_frame:000000000000CDF1                 db    0
.eh_frame:000000000000CDF2                 db    0
.eh_frame:000000000000CDF3                 db    0
.eh_frame:000000000000CDF4                 db 0E4h
.eh_frame:000000000000CDF5                 db    2
.eh_frame:000000000000CDF6                 db    0
.eh_frame:000000000000CDF7                 db    0
.eh_frame:000000000000CDF8                 db  68h ; h
.eh_frame:000000000000CDF9                 db  6Dh ; m
.eh_frame:000000000000CDFA                 db 0FFh
.eh_frame:000000000000CDFB                 db 0FFh
.eh_frame:000000000000CDFC                 db 0E7h
.eh_frame:000000000000CDFD                 db    0
.eh_frame:000000000000CDFE                 db    0
.eh_frame:000000000000CDFF                 db    0
.eh_frame:000000000000CE00                 db    0
.eh_frame:000000000000CE01                 db  41h ; A
.eh_frame:000000000000CE02                 db  0Eh
.eh_frame:000000000000CE03                 db  10h
.eh_frame:000000000000CE04                 db  86h
.eh_frame:000000000000CE05                 db    2
.eh_frame:000000000000CE06                 db  41h ; A
.eh_frame:000000000000CE07                 db  0Eh
.eh_frame:000000000000CE08                 db  18h
.eh_frame:000000000000CE09                 db  83h
.eh_frame:000000000000CE0A                 db    3
.eh_frame:000000000000CE0B                 db  49h ; I
.eh_frame:000000000000CE0C                 db  0Eh
.eh_frame:000000000000CE0D                 db  20h
.eh_frame:000000000000CE0E                 db  6Eh ; n
.eh_frame:000000000000CE0F                 db  0Ah
.eh_frame:000000000000CE10                 db  0Eh
.eh_frame:000000000000CE11                 db  18h
.eh_frame:000000000000CE12                 db  41h ; A
.eh_frame:000000000000CE13                 db  0Eh
.eh_frame:000000000000CE14                 db  10h
.eh_frame:000000000000CE15                 db  41h ; A
.eh_frame:000000000000CE16                 db  0Eh
.eh_frame:000000000000CE17                 db    8
.eh_frame:000000000000CE18                 db  45h ; E
.eh_frame:000000000000CE19                 db  0Bh
.eh_frame:000000000000CE1A                 db    2
.eh_frame:000000000000CE1B                 db  4Ah ; J
.eh_frame:000000000000CE1C                 db  0Ah
.eh_frame:000000000000CE1D                 db  0Eh
.eh_frame:000000000000CE1E                 db  18h
.eh_frame:000000000000CE1F                 db  41h ; A
.eh_frame:000000000000CE20                 db  0Eh
.eh_frame:000000000000CE21                 db  10h
.eh_frame:000000000000CE22                 db  41h ; A
.eh_frame:000000000000CE23                 db  0Eh
.eh_frame:000000000000CE24                 db    8
.eh_frame:000000000000CE25                 db  44h ; D
.eh_frame:000000000000CE26                 db  0Bh
.eh_frame:000000000000CE27                 db    2
.eh_frame:000000000000CE28                 db  54h ; T
.eh_frame:000000000000CE29                 db  0Eh
.eh_frame:000000000000CE2A                 db  18h
.eh_frame:000000000000CE2B                 db  41h ; A
.eh_frame:000000000000CE2C                 db  0Eh
.eh_frame:000000000000CE2D                 db  10h
.eh_frame:000000000000CE2E                 db  41h ; A
.eh_frame:000000000000CE2F                 db  0Eh
.eh_frame:000000000000CE30                 db    8
.eh_frame:000000000000CE31                 db    0
.eh_frame:000000000000CE32                 db    0
.eh_frame:000000000000CE33                 db    0
.eh_frame:000000000000CE34                 db  74h ; t
.eh_frame:000000000000CE35                 db    0
.eh_frame:000000000000CE36                 db    0
.eh_frame:000000000000CE37                 db    0
.eh_frame:000000000000CE38                 db  28h ; (
.eh_frame:000000000000CE39                 db    3
.eh_frame:000000000000CE3A                 db    0
.eh_frame:000000000000CE3B                 db    0
.eh_frame:000000000000CE3C                 db  14h
.eh_frame:000000000000CE3D                 db  6Eh ; n
.eh_frame:000000000000CE3E                 db 0FFh
.eh_frame:000000000000CE3F                 db 0FFh
.eh_frame:000000000000CE40                 db  34h ; 4
.eh_frame:000000000000CE41                 db  12h
.eh_frame:000000000000CE42                 db    0
.eh_frame:000000000000CE43                 db    0
.eh_frame:000000000000CE44                 db    0
.eh_frame:000000000000CE45                 db  42h ; B
.eh_frame:000000000000CE46                 db  0Eh
.eh_frame:000000000000CE47                 db  10h
.eh_frame:000000000000CE48                 db  8Fh
.eh_frame:000000000000CE49                 db    2
.eh_frame:000000000000CE4A                 db  42h ; B
.eh_frame:000000000000CE4B                 db  0Eh
.eh_frame:000000000000CE4C                 db  18h
.eh_frame:000000000000CE4D                 db  8Eh
.eh_frame:000000000000CE4E                 db    3
.eh_frame:000000000000CE4F                 db  45h ; E
.eh_frame:000000000000CE50                 db  0Eh
.eh_frame:000000000000CE51                 db  20h
.eh_frame:000000000000CE52                 db  8Dh
.eh_frame:000000000000CE53                 db    4
.eh_frame:000000000000CE54                 db  42h ; B
.eh_frame:000000000000CE55                 db  0Eh
.eh_frame:000000000000CE56                 db  28h ; (
.eh_frame:000000000000CE57                 db  8Ch
.eh_frame:000000000000CE58                 db    5
.eh_frame:000000000000CE59                 db  44h ; D
.eh_frame:000000000000CE5A                 db  0Eh
.eh_frame:000000000000CE5B                 db  30h ; 0
.eh_frame:000000000000CE5C                 db  86h
.eh_frame:000000000000CE5D                 db    6
.eh_frame:000000000000CE5E                 db  41h ; A
.eh_frame:000000000000CE5F                 db  0Eh
.eh_frame:000000000000CE60                 db  38h ; 8
.eh_frame:000000000000CE61                 db  83h
.eh_frame:000000000000CE62                 db    7
.eh_frame:000000000000CE63                 db  53h ; S
.eh_frame:000000000000CE64                 db  0Eh
.eh_frame:000000000000CE65                 db 0F0h
.eh_frame:000000000000CE66                 db    1
.eh_frame:000000000000CE67                 db    3
.eh_frame:000000000000CE68                 db  81h
.eh_frame:000000000000CE69                 db  0Bh
.eh_frame:000000000000CE6A                 db  0Eh
.eh_frame:000000000000CE6B                 db 0F8h
.eh_frame:000000000000CE6C                 db    1
.eh_frame:000000000000CE6D                 db  4Ah ; J
.eh_frame:000000000000CE6E                 db  0Eh
.eh_frame:000000000000CE6F                 db  80h
.eh_frame:000000000000CE70                 db    2
.eh_frame:000000000000CE71                 db  44h ; D
.eh_frame:000000000000CE72                 db  0Eh
.eh_frame:000000000000CE73                 db  88h
.eh_frame:000000000000CE74                 db    2
.eh_frame:000000000000CE75                 db  45h ; E
.eh_frame:000000000000CE76                 db  0Eh
.eh_frame:000000000000CE77                 db  90h
.eh_frame:000000000000CE78                 db    2
.eh_frame:000000000000CE79                 db  5Fh ; _
.eh_frame:000000000000CE7A                 db  0Eh
.eh_frame:000000000000CE7B                 db 0F0h
.eh_frame:000000000000CE7C                 db    1
.eh_frame:000000000000CE7D                 db  64h ; d
.eh_frame:000000000000CE7E                 db  0Ah
.eh_frame:000000000000CE7F                 db  0Eh
.eh_frame:000000000000CE80                 db  38h ; 8
.eh_frame:000000000000CE81                 db  41h ; A
.eh_frame:000000000000CE82                 db  0Eh
.eh_frame:000000000000CE83                 db  30h ; 0
.eh_frame:000000000000CE84                 db  41h ; A
.eh_frame:000000000000CE85                 db  0Eh
.eh_frame:000000000000CE86                 db  28h ; (
.eh_frame:000000000000CE87                 db  42h ; B
.eh_frame:000000000000CE88                 db  0Eh
.eh_frame:000000000000CE89                 db  20h
.eh_frame:000000000000CE8A                 db  42h ; B
.eh_frame:000000000000CE8B                 db  0Eh
.eh_frame:000000000000CE8C                 db  18h
.eh_frame:000000000000CE8D                 db  42h ; B
.eh_frame:000000000000CE8E                 db  0Eh
.eh_frame:000000000000CE8F                 db  10h
.eh_frame:000000000000CE90                 db  42h ; B
.eh_frame:000000000000CE91                 db  0Eh
.eh_frame:000000000000CE92                 db    8
.eh_frame:000000000000CE93                 db  44h ; D
.eh_frame:000000000000CE94                 db  0Bh
.eh_frame:000000000000CE95                 db    3
.eh_frame:000000000000CE96                 db  99h
.eh_frame:000000000000CE97                 db    5
.eh_frame:000000000000CE98                 db  0Eh
.eh_frame:000000000000CE99                 db 0F8h
.eh_frame:000000000000CE9A                 db    1
.eh_frame:000000000000CE9B                 db  4Dh ; M
.eh_frame:000000000000CE9C                 db  0Eh
.eh_frame:000000000000CE9D                 db  80h
.eh_frame:000000000000CE9E                 db    2
.eh_frame:000000000000CE9F                 db  44h ; D
.eh_frame:000000000000CEA0                 db  0Eh
.eh_frame:000000000000CEA1                 db  88h
.eh_frame:000000000000CEA2                 db    2
.eh_frame:000000000000CEA3                 db  47h ; G
.eh_frame:000000000000CEA4                 db  0Eh
.eh_frame:000000000000CEA5                 db  90h
.eh_frame:000000000000CEA6                 db    2
.eh_frame:000000000000CEA7                 db  5Bh ; [
.eh_frame:000000000000CEA8                 db  0Eh
.eh_frame:000000000000CEA9                 db 0F0h
.eh_frame:000000000000CEAA                 db    1
.eh_frame:000000000000CEAB                 db    0
.eh_frame:000000000000CEAC                 db  68h ; h
.eh_frame:000000000000CEAD                 db    0
.eh_frame:000000000000CEAE                 db    0
.eh_frame:000000000000CEAF                 db    0
.eh_frame:000000000000CEB0                 db 0A0h
.eh_frame:000000000000CEB1                 db    3
.eh_frame:000000000000CEB2                 db    0
.eh_frame:000000000000CEB3                 db    0
.eh_frame:000000000000CEB4                 db 0DCh
.eh_frame:000000000000CEB5                 db  7Fh ; 
.eh_frame:000000000000CEB6                 db 0FFh
.eh_frame:000000000000CEB7                 db 0FFh
.eh_frame:000000000000CEB8                 db 0ABh
.eh_frame:000000000000CEB9                 db    1
.eh_frame:000000000000CEBA                 db    0
.eh_frame:000000000000CEBB                 db    0
.eh_frame:000000000000CEBC                 db    0
.eh_frame:000000000000CEBD                 db  42h ; B
.eh_frame:000000000000CEBE                 db  0Eh
.eh_frame:000000000000CEBF                 db  10h
.eh_frame:000000000000CEC0                 db  8Fh
.eh_frame:000000000000CEC1                 db    2
.eh_frame:000000000000CEC2                 db  42h ; B
.eh_frame:000000000000CEC3                 db  0Eh
.eh_frame:000000000000CEC4                 db  18h
.eh_frame:000000000000CEC5                 db  8Eh
.eh_frame:000000000000CEC6                 db    3
.eh_frame:000000000000CEC7                 db  45h ; E
.eh_frame:000000000000CEC8                 db  0Eh
.eh_frame:000000000000CEC9                 db  20h
.eh_frame:000000000000CECA                 db  8Dh
.eh_frame:000000000000CECB                 db    4
.eh_frame:000000000000CECC                 db  42h ; B
.eh_frame:000000000000CECD                 db  0Eh
.eh_frame:000000000000CECE                 db  28h ; (
.eh_frame:000000000000CECF                 db  8Ch
.eh_frame:000000000000CED0                 db    5
.eh_frame:000000000000CED1                 db  44h ; D
.eh_frame:000000000000CED2                 db  0Eh
.eh_frame:000000000000CED3                 db  30h ; 0
.eh_frame:000000000000CED4                 db  86h
.eh_frame:000000000000CED5                 db    6
.eh_frame:000000000000CED6                 db  41h ; A
.eh_frame:000000000000CED7                 db  0Eh
.eh_frame:000000000000CED8                 db  38h ; 8
.eh_frame:000000000000CED9                 db  83h
.eh_frame:000000000000CEDA                 db    7
.eh_frame:000000000000CEDB                 db  47h ; G
.eh_frame:000000000000CEDC                 db  0Eh
.eh_frame:000000000000CEDD                 db  60h ; `
.eh_frame:000000000000CEDE                 db    2
.eh_frame:000000000000CEDF                 db  99h
.eh_frame:000000000000CEE0                 db  0Eh
.eh_frame:000000000000CEE1                 db  68h ; h
.eh_frame:000000000000CEE2                 db  5Fh ; _
.eh_frame:000000000000CEE3                 db  0Eh
.eh_frame:000000000000CEE4                 db  70h ; p
.eh_frame:000000000000CEE5                 db  46h ; F
.eh_frame:000000000000CEE6                 db  0Eh
.eh_frame:000000000000CEE7                 db  78h ; x
.eh_frame:000000000000CEE8                 db  42h ; B
.eh_frame:000000000000CEE9                 db  0Eh
.eh_frame:000000000000CEEA                 db  80h
.eh_frame:000000000000CEEB                 db    1
.eh_frame:000000000000CEEC                 db  59h ; Y
.eh_frame:000000000000CEED                 db  0Eh
.eh_frame:000000000000CEEE                 db  60h ; `
.eh_frame:000000000000CEEF                 db    2
.eh_frame:000000000000CEF0                 db  40h ; @
.eh_frame:000000000000CEF1                 db  0Eh
.eh_frame:000000000000CEF2                 db  68h ; h
.eh_frame:000000000000CEF3                 db  4Bh ; K
.eh_frame:000000000000CEF4                 db  0Eh
.eh_frame:000000000000CEF5                 db  70h ; p
.eh_frame:000000000000CEF6                 db  43h ; C
.eh_frame:000000000000CEF7                 db  0Eh
.eh_frame:000000000000CEF8                 db  78h ; x
.eh_frame:000000000000CEF9                 db  45h ; E
.eh_frame:000000000000CEFA                 db  0Eh
.eh_frame:000000000000CEFB                 db  80h
.eh_frame:000000000000CEFC                 db    1
.eh_frame:000000000000CEFD                 db  5Eh ; ^
.eh_frame:000000000000CEFE                 db  0Eh
.eh_frame:000000000000CEFF                 db  60h ; `
.eh_frame:000000000000CF00                 db  4Ch ; L
.eh_frame:000000000000CF01                 db  0Ah
.eh_frame:000000000000CF02                 db  0Eh
.eh_frame:000000000000CF03                 db  38h ; 8
.eh_frame:000000000000CF04                 db  44h ; D
.eh_frame:000000000000CF05                 db  0Eh
.eh_frame:000000000000CF06                 db  30h ; 0
.eh_frame:000000000000CF07                 db  41h ; A
.eh_frame:000000000000CF08                 db  0Eh
.eh_frame:000000000000CF09                 db  28h ; (
.eh_frame:000000000000CF0A                 db  42h ; B
.eh_frame:000000000000CF0B                 db  0Eh
.eh_frame:000000000000CF0C                 db  20h
.eh_frame:000000000000CF0D                 db  42h ; B
.eh_frame:000000000000CF0E                 db  0Eh
.eh_frame:000000000000CF0F                 db  18h
.eh_frame:000000000000CF10                 db  42h ; B
.eh_frame:000000000000CF11                 db  0Eh
.eh_frame:000000000000CF12                 db  10h
.eh_frame:000000000000CF13                 db  42h ; B
.eh_frame:000000000000CF14                 db  0Eh
.eh_frame:000000000000CF15                 db    8
.eh_frame:000000000000CF16                 db  46h ; F
.eh_frame:000000000000CF17                 db  0Bh
.eh_frame:000000000000CF18                 db  28h ; (
.eh_frame:000000000000CF19                 db    0
.eh_frame:000000000000CF1A                 db    0
.eh_frame:000000000000CF1B                 db    0
.eh_frame:000000000000CF1C                 db  0Ch
.eh_frame:000000000000CF1D                 db    4
.eh_frame:000000000000CF1E                 db    0
.eh_frame:000000000000CF1F                 db    0
.eh_frame:000000000000CF20                 db  20h
.eh_frame:000000000000CF21                 db  81h
.eh_frame:000000000000CF22                 db 0FFh
.eh_frame:000000000000CF23                 db 0FFh
.eh_frame:000000000000CF24                 db  36h ; 6
.eh_frame:000000000000CF25                 db    0
.eh_frame:000000000000CF26                 db    0
.eh_frame:000000000000CF27                 db    0
.eh_frame:000000000000CF28                 db    0
.eh_frame:000000000000CF29                 db  42h ; B
.eh_frame:000000000000CF2A                 db  0Eh
.eh_frame:000000000000CF2B                 db  10h
.eh_frame:000000000000CF2C                 db  8Ch
.eh_frame:000000000000CF2D                 db    2
.eh_frame:000000000000CF2E                 db  41h ; A
.eh_frame:000000000000CF2F                 db  0Eh
.eh_frame:000000000000CF30                 db  18h
.eh_frame:000000000000CF31                 db  86h
.eh_frame:000000000000CF32                 db    3
.eh_frame:000000000000CF33                 db  41h ; A
.eh_frame:000000000000CF34                 db  0Eh
.eh_frame:000000000000CF35                 db  20h
.eh_frame:000000000000CF36                 db  83h
.eh_frame:000000000000CF37                 db    4
.eh_frame:000000000000CF38                 db  6Eh ; n
.eh_frame:000000000000CF39                 db  0Eh
.eh_frame:000000000000CF3A                 db  18h
.eh_frame:000000000000CF3B                 db  41h ; A
.eh_frame:000000000000CF3C                 db  0Eh
.eh_frame:000000000000CF3D                 db  10h
.eh_frame:000000000000CF3E                 db  42h ; B
.eh_frame:000000000000CF3F                 db  0Eh
.eh_frame:000000000000CF40                 db    8
.eh_frame:000000000000CF41                 db    0
.eh_frame:000000000000CF42                 db    0
.eh_frame:000000000000CF43                 db    0
.eh_frame:000000000000CF44                 db  10h
.eh_frame:000000000000CF45                 db    0
.eh_frame:000000000000CF46                 db    0
.eh_frame:000000000000CF47                 db    0
.eh_frame:000000000000CF48                 db  38h ; 8
.eh_frame:000000000000CF49                 db    4
.eh_frame:000000000000CF4A                 db    0
.eh_frame:000000000000CF4B                 db    0
.eh_frame:000000000000CF4C                 db  34h ; 4
.eh_frame:000000000000CF4D                 db  81h
.eh_frame:000000000000CF4E                 db 0FFh
.eh_frame:000000000000CF4F                 db 0FFh
.eh_frame:000000000000CF50                 db  11h
.eh_frame:000000000000CF51                 db    0
.eh_frame:000000000000CF52                 db    0
.eh_frame:000000000000CF53                 db    0
.eh_frame:000000000000CF54                 db    0
.eh_frame:000000000000CF55                 db    0
.eh_frame:000000000000CF56                 db    0
.eh_frame:000000000000CF57                 db    0
.eh_frame:000000000000CF58                 db  10h
.eh_frame:000000000000CF59                 db    0
.eh_frame:000000000000CF5A                 db    0
.eh_frame:000000000000CF5B                 db    0
.eh_frame:000000000000CF5C                 db  4Ch ; L
.eh_frame:000000000000CF5D                 db    4
.eh_frame:000000000000CF5E                 db    0
.eh_frame:000000000000CF5F                 db    0
.eh_frame:000000000000CF60                 db  40h ; @
.eh_frame:000000000000CF61                 db  81h
.eh_frame:000000000000CF62                 db 0FFh
.eh_frame:000000000000CF63                 db 0FFh
.eh_frame:000000000000CF64                 db  11h
.eh_frame:000000000000CF65                 db    0
.eh_frame:000000000000CF66                 db    0
.eh_frame:000000000000CF67                 db    0
.eh_frame:000000000000CF68                 db    0
.eh_frame:000000000000CF69                 db    0
.eh_frame:000000000000CF6A                 db    0
.eh_frame:000000000000CF6B                 db    0
.eh_frame:000000000000CF6C                 db  10h
.eh_frame:000000000000CF6D                 db    0
.eh_frame:000000000000CF6E                 db    0
.eh_frame:000000000000CF6F                 db    0
.eh_frame:000000000000CF70                 db  60h ; `
.eh_frame:000000000000CF71                 db    4
.eh_frame:000000000000CF72                 db    0
.eh_frame:000000000000CF73                 db    0
.eh_frame:000000000000CF74                 db  4Ch ; L
.eh_frame:000000000000CF75                 db  81h
.eh_frame:000000000000CF76                 db 0FFh
.eh_frame:000000000000CF77                 db 0FFh
.eh_frame:000000000000CF78                 db  35h ; 5
.eh_frame:000000000000CF79                 db    0
.eh_frame:000000000000CF7A                 db    0
.eh_frame:000000000000CF7B                 db    0
.eh_frame:000000000000CF7C                 db    0
.eh_frame:000000000000CF7D                 db    0
.eh_frame:000000000000CF7E                 db    0
.eh_frame:000000000000CF7F                 db    0
.eh_frame:000000000000CF80                 db  10h
.eh_frame:000000000000CF81                 db    0
.eh_frame:000000000000CF82                 db    0
.eh_frame:000000000000CF83                 db    0
.eh_frame:000000000000CF84                 db  74h ; t
.eh_frame:000000000000CF85                 db    4
.eh_frame:000000000000CF86                 db    0
.eh_frame:000000000000CF87                 db    0
.eh_frame:000000000000CF88                 db  78h ; x
.eh_frame:000000000000CF89                 db  81h
.eh_frame:000000000000CF8A                 db 0FFh
.eh_frame:000000000000CF8B                 db 0FFh
.eh_frame:000000000000CF8C                 db  15h
.eh_frame:000000000000CF8D                 db    0
.eh_frame:000000000000CF8E                 db    0
.eh_frame:000000000000CF8F                 db    0
.eh_frame:000000000000CF90                 db    0
.eh_frame:000000000000CF91                 db    0
.eh_frame:000000000000CF92                 db    0
.eh_frame:000000000000CF93                 db    0
.eh_frame:000000000000CF94                 db  10h
.eh_frame:000000000000CF95                 db    0
.eh_frame:000000000000CF96                 db    0
.eh_frame:000000000000CF97                 db    0
.eh_frame:000000000000CF98                 db  88h
.eh_frame:000000000000CF99                 db    4
.eh_frame:000000000000CF9A                 db    0
.eh_frame:000000000000CF9B                 db    0
.eh_frame:000000000000CF9C                 db  84h
.eh_frame:000000000000CF9D                 db  81h
.eh_frame:000000000000CF9E                 db 0FFh
.eh_frame:000000000000CF9F                 db 0FFh
.eh_frame:000000000000CFA0                 db  30h ; 0
.eh_frame:000000000000CFA1                 db    0
.eh_frame:000000000000CFA2                 db    0
.eh_frame:000000000000CFA3                 db    0
.eh_frame:000000000000CFA4                 db    0
.eh_frame:000000000000CFA5                 db  6Bh ; k
.eh_frame:000000000000CFA6                 db  0Eh
.eh_frame:000000000000CFA7                 db  10h
.eh_frame:000000000000CFA8                 db  50h ; P
.eh_frame:000000000000CFA9                 db    0
.eh_frame:000000000000CFAA                 db    0
.eh_frame:000000000000CFAB                 db    0
.eh_frame:000000000000CFAC                 db  9Ch
.eh_frame:000000000000CFAD                 db    4
.eh_frame:000000000000CFAE                 db    0
.eh_frame:000000000000CFAF                 db    0
.eh_frame:000000000000CFB0                 db 0A0h
.eh_frame:000000000000CFB1                 db  81h
.eh_frame:000000000000CFB2                 db 0FFh
.eh_frame:000000000000CFB3                 db 0FFh
.eh_frame:000000000000CFB4                 db  74h ; t
.eh_frame:000000000000CFB5                 db    0
.eh_frame:000000000000CFB6                 db    0
.eh_frame:000000000000CFB7                 db    0
.eh_frame:000000000000CFB8                 db    0
.eh_frame:000000000000CFB9                 db  42h ; B
.eh_frame:000000000000CFBA                 db  0Eh
.eh_frame:000000000000CFBB                 db  10h
.eh_frame:000000000000CFBC                 db  8Fh
.eh_frame:000000000000CFBD                 db    2
.eh_frame:000000000000CFBE                 db  42h ; B
.eh_frame:000000000000CFBF                 db  0Eh
.eh_frame:000000000000CFC0                 db  18h
.eh_frame:000000000000CFC1                 db  8Eh
.eh_frame:000000000000CFC2                 db    3
.eh_frame:000000000000CFC3                 db  49h ; I
.eh_frame:000000000000CFC4                 db  0Eh
.eh_frame:000000000000CFC5                 db  20h
.eh_frame:000000000000CFC6                 db  8Dh
.eh_frame:000000000000CFC7                 db    4
.eh_frame:000000000000CFC8                 db  42h ; B
.eh_frame:000000000000CFC9                 db  0Eh
.eh_frame:000000000000CFCA                 db  28h ; (
.eh_frame:000000000000CFCB                 db  8Ch
.eh_frame:000000000000CFCC                 db    5
.eh_frame:000000000000CFCD                 db  44h ; D
.eh_frame:000000000000CFCE                 db  0Eh
.eh_frame:000000000000CFCF                 db  30h ; 0
.eh_frame:000000000000CFD0                 db  86h
.eh_frame:000000000000CFD1                 db    6
.eh_frame:000000000000CFD2                 db  41h ; A
.eh_frame:000000000000CFD3                 db  0Eh
.eh_frame:000000000000CFD4                 db  38h ; 8
.eh_frame:000000000000CFD5                 db  83h
.eh_frame:000000000000CFD6                 db    7
.eh_frame:000000000000CFD7                 db  4Dh ; M
.eh_frame:000000000000CFD8                 db  0Eh
.eh_frame:000000000000CFD9                 db  50h ; P
.eh_frame:000000000000CFDA                 db  5Fh ; _
.eh_frame:000000000000CFDB                 db  0Eh
.eh_frame:000000000000CFDC                 db  58h ; X
.eh_frame:000000000000CFDD                 db  47h ; G
.eh_frame:000000000000CFDE                 db  0Eh
.eh_frame:000000000000CFDF                 db  60h ; `
.eh_frame:000000000000CFE0                 db  46h ; F
.eh_frame:000000000000CFE1                 db  0Eh
.eh_frame:000000000000CFE2                 db  68h ; h
.eh_frame:000000000000CFE3                 db  44h ; D
.eh_frame:000000000000CFE4                 db  0Eh
.eh_frame:000000000000CFE5                 db  70h ; p
.eh_frame:000000000000CFE6                 db  58h ; X
.eh_frame:000000000000CFE7                 db  0Eh
.eh_frame:000000000000CFE8                 db  38h ; 8
.eh_frame:000000000000CFE9                 db  41h ; A
.eh_frame:000000000000CFEA                 db  0Eh
.eh_frame:000000000000CFEB                 db  30h ; 0
.eh_frame:000000000000CFEC                 db  41h ; A
.eh_frame:000000000000CFED                 db  0Eh
.eh_frame:000000000000CFEE                 db  28h ; (
.eh_frame:000000000000CFEF                 db  42h ; B
.eh_frame:000000000000CFF0                 db  0Eh
.eh_frame:000000000000CFF1                 db  20h
.eh_frame:000000000000CFF2                 db  42h ; B
.eh_frame:000000000000CFF3                 db  0Eh
.eh_frame:000000000000CFF4                 db  18h
.eh_frame:000000000000CFF5                 db  42h ; B
.eh_frame:000000000000CFF6                 db  0Eh
.eh_frame:000000000000CFF7                 db  10h
.eh_frame:000000000000CFF8                 db  42h ; B
.eh_frame:000000000000CFF9                 db  0Eh
.eh_frame:000000000000CFFA                 db    8
.eh_frame:000000000000CFFB                 db    0
.eh_frame:000000000000CFFC                 db  68h ; h
.eh_frame:000000000000CFFD                 db    0
.eh_frame:000000000000CFFE                 db    0
.eh_frame:000000000000CFFF                 db    0
.eh_frame:000000000000D000                 db 0F0h
.eh_frame:000000000000D001                 db    4
.eh_frame:000000000000D002                 db    0
.eh_frame:000000000000D003                 db    0
.eh_frame:000000000000D004                 db 0CCh
.eh_frame:000000000000D005                 db  81h
.eh_frame:000000000000D006                 db 0FFh
.eh_frame:000000000000D007                 db 0FFh
.eh_frame:000000000000D008                 db 0E3h
.eh_frame:000000000000D009                 db    0
.eh_frame:000000000000D00A                 db    0
.eh_frame:000000000000D00B                 db    0
.eh_frame:000000000000D00C                 db    0
.eh_frame:000000000000D00D                 db  42h ; B
.eh_frame:000000000000D00E                 db  0Eh
.eh_frame:000000000000D00F                 db  10h
.eh_frame:000000000000D010                 db  8Fh
.eh_frame:000000000000D011                 db    2
.eh_frame:000000000000D012                 db  42h ; B
.eh_frame:000000000000D013                 db  0Eh
.eh_frame:000000000000D014                 db  18h
.eh_frame:000000000000D015                 db  8Eh
.eh_frame:000000000000D016                 db    3
.eh_frame:000000000000D017                 db  49h ; I
.eh_frame:000000000000D018                 db  0Eh
.eh_frame:000000000000D019                 db  20h
.eh_frame:000000000000D01A                 db  8Dh
.eh_frame:000000000000D01B                 db    4
.eh_frame:000000000000D01C                 db  42h ; B
.eh_frame:000000000000D01D                 db  0Eh
.eh_frame:000000000000D01E                 db  28h ; (
.eh_frame:000000000000D01F                 db  8Ch
.eh_frame:000000000000D020                 db    5
.eh_frame:000000000000D021                 db  44h ; D
.eh_frame:000000000000D022                 db  0Eh
.eh_frame:000000000000D023                 db  30h ; 0
.eh_frame:000000000000D024                 db  86h
.eh_frame:000000000000D025                 db    6
.eh_frame:000000000000D026                 db  41h ; A
.eh_frame:000000000000D027                 db  0Eh
.eh_frame:000000000000D028                 db  38h ; 8
.eh_frame:000000000000D029                 db  83h
.eh_frame:000000000000D02A                 db    7
.eh_frame:000000000000D02B                 db  4Dh ; M
.eh_frame:000000000000D02C                 db  0Eh
.eh_frame:000000000000D02D                 db  70h ; p
.eh_frame:000000000000D02E                 db  65h ; e
.eh_frame:000000000000D02F                 db  0Eh
.eh_frame:000000000000D030                 db  78h ; x
.eh_frame:000000000000D031                 db  4Dh ; M
.eh_frame:000000000000D032                 db  0Eh
.eh_frame:000000000000D033                 db  80h
.eh_frame:000000000000D034                 db    1
.eh_frame:000000000000D035                 db  46h ; F
.eh_frame:000000000000D036                 db  0Eh
.eh_frame:000000000000D037                 db  88h
.eh_frame:000000000000D038                 db    1
.eh_frame:000000000000D039                 db  42h ; B
.eh_frame:000000000000D03A                 db  0Eh
.eh_frame:000000000000D03B                 db  90h
.eh_frame:000000000000D03C                 db    1
.eh_frame:000000000000D03D                 db  5Eh ; ^
.eh_frame:000000000000D03E                 db  0Eh
.eh_frame:000000000000D03F                 db  70h ; p
.eh_frame:000000000000D040                 db  56h ; V
.eh_frame:000000000000D041                 db  0Eh
.eh_frame:000000000000D042                 db  78h ; x
.eh_frame:000000000000D043                 db  43h ; C
.eh_frame:000000000000D044                 db  0Eh
.eh_frame:000000000000D045                 db  80h
.eh_frame:000000000000D046                 db    1
.eh_frame:000000000000D047                 db  43h ; C
.eh_frame:000000000000D048                 db  0Eh
.eh_frame:000000000000D049                 db  88h
.eh_frame:000000000000D04A                 db    1
.eh_frame:000000000000D04B                 db  56h ; V
.eh_frame:000000000000D04C                 db  0Eh
.eh_frame:000000000000D04D                 db  90h
.eh_frame:000000000000D04E                 db    1
.eh_frame:000000000000D04F                 db  52h ; R
.eh_frame:000000000000D050                 db  0Eh
.eh_frame:000000000000D051                 db  70h ; p
.eh_frame:000000000000D052                 db  5Bh ; [
.eh_frame:000000000000D053                 db  0Eh
.eh_frame:000000000000D054                 db  38h ; 8
.eh_frame:000000000000D055                 db  41h ; A
.eh_frame:000000000000D056                 db  0Eh
.eh_frame:000000000000D057                 db  30h ; 0
.eh_frame:000000000000D058                 db  41h ; A
.eh_frame:000000000000D059                 db  0Eh
.eh_frame:000000000000D05A                 db  28h ; (
.eh_frame:000000000000D05B                 db  42h ; B
.eh_frame:000000000000D05C                 db  0Eh
.eh_frame:000000000000D05D                 db  20h
.eh_frame:000000000000D05E                 db  42h ; B
.eh_frame:000000000000D05F                 db  0Eh
.eh_frame:000000000000D060                 db  18h
.eh_frame:000000000000D061                 db  42h ; B
.eh_frame:000000000000D062                 db  0Eh
.eh_frame:000000000000D063                 db  10h
.eh_frame:000000000000D064                 db  42h ; B
.eh_frame:000000000000D065                 db  0Eh
.eh_frame:000000000000D066                 db    8
.eh_frame:000000000000D067                 db    0
.eh_frame:000000000000D068                 db  10h
.eh_frame:000000000000D069                 db    0
.eh_frame:000000000000D06A                 db    0
.eh_frame:000000000000D06B                 db    0
.eh_frame:000000000000D06C                 db  5Ch ; \
.eh_frame:000000000000D06D                 db    5
.eh_frame:000000000000D06E                 db    0
.eh_frame:000000000000D06F                 db    0
.eh_frame:000000000000D070                 db  50h ; P
.eh_frame:000000000000D071                 db  82h
.eh_frame:000000000000D072                 db 0FFh
.eh_frame:000000000000D073                 db 0FFh
.eh_frame:000000000000D074                 db  0Ah
.eh_frame:000000000000D075                 db    0
.eh_frame:000000000000D076                 db    0
.eh_frame:000000000000D077                 db    0
.eh_frame:000000000000D078                 db    0
.eh_frame:000000000000D079                 db    0
.eh_frame:000000000000D07A                 db    0
.eh_frame:000000000000D07B                 db    0
.eh_frame:000000000000D07C                 db  28h ; (
.eh_frame:000000000000D07D                 db    0
.eh_frame:000000000000D07E                 db    0
.eh_frame:000000000000D07F                 db    0
.eh_frame:000000000000D080                 db  70h ; p
.eh_frame:000000000000D081                 db    5
.eh_frame:000000000000D082                 db    0
.eh_frame:000000000000D083                 db    0
.eh_frame:000000000000D084                 db  4Ch ; L
.eh_frame:000000000000D085                 db  82h
.eh_frame:000000000000D086                 db 0FFh
.eh_frame:000000000000D087                 db 0FFh
.eh_frame:000000000000D088                 db  93h
.eh_frame:000000000000D089                 db    0
.eh_frame:000000000000D08A                 db    0
.eh_frame:000000000000D08B                 db    0
.eh_frame:000000000000D08C                 db    0
.eh_frame:000000000000D08D                 db  48h ; H
.eh_frame:000000000000D08E                 db  0Eh
.eh_frame:000000000000D08F                 db  10h
.eh_frame:000000000000D090                 db  8Ch
.eh_frame:000000000000D091                 db    2
.eh_frame:000000000000D092                 db  48h ; H
.eh_frame:000000000000D093                 db  0Eh
.eh_frame:000000000000D094                 db  18h
.eh_frame:000000000000D095                 db  86h
.eh_frame:000000000000D096                 db    3
.eh_frame:000000000000D097                 db  41h ; A
.eh_frame:000000000000D098                 db  0Eh
.eh_frame:000000000000D099                 db  20h
.eh_frame:000000000000D09A                 db  83h
.eh_frame:000000000000D09B                 db    4
.eh_frame:000000000000D09C                 db    2
.eh_frame:000000000000D09D                 db  74h ; t
.eh_frame:000000000000D09E                 db  0Eh
.eh_frame:000000000000D09F                 db  18h
.eh_frame:000000000000D0A0                 db  4Bh ; K
.eh_frame:000000000000D0A1                 db  0Eh
.eh_frame:000000000000D0A2                 db  10h
.eh_frame:000000000000D0A3                 db  42h ; B
.eh_frame:000000000000D0A4                 db  0Eh
.eh_frame:000000000000D0A5                 db    8
.eh_frame:000000000000D0A6                 db    0
.eh_frame:000000000000D0A7                 db    0
.eh_frame:000000000000D0A8                 db  10h
.eh_frame:000000000000D0A9                 db    0
.eh_frame:000000000000D0AA                 db    0
.eh_frame:000000000000D0AB                 db    0
.eh_frame:000000000000D0AC                 db  9Ch
.eh_frame:000000000000D0AD                 db    5
.eh_frame:000000000000D0AE                 db    0
.eh_frame:000000000000D0AF                 db    0
.eh_frame:000000000000D0B0                 db 0C0h
.eh_frame:000000000000D0B1                 db  82h
.eh_frame:000000000000D0B2                 db 0FFh
.eh_frame:000000000000D0B3                 db 0FFh
.eh_frame:000000000000D0B4                 db  13h
.eh_frame:000000000000D0B5                 db    0
.eh_frame:000000000000D0B6                 db    0
.eh_frame:000000000000D0B7                 db    0
.eh_frame:000000000000D0B8                 db    0
.eh_frame:000000000000D0B9                 db    0
.eh_frame:000000000000D0BA                 db    0
.eh_frame:000000000000D0BB                 db    0
.eh_frame:000000000000D0BC                 db  10h
.eh_frame:000000000000D0BD                 db    0
.eh_frame:000000000000D0BE                 db    0
.eh_frame:000000000000D0BF                 db    0
.eh_frame:000000000000D0C0                 db 0B0h
.eh_frame:000000000000D0C1                 db    5
.eh_frame:000000000000D0C2                 db    0
.eh_frame:000000000000D0C3                 db    0
.eh_frame:000000000000D0C4                 db 0CCh
.eh_frame:000000000000D0C5                 db  82h
.eh_frame:000000000000D0C6                 db 0FFh
.eh_frame:000000000000D0C7                 db 0FFh
.eh_frame:000000000000D0C8                 db  0Ch
.eh_frame:000000000000D0C9                 db    0
.eh_frame:000000000000D0CA                 db    0
.eh_frame:000000000000D0CB                 db    0
.eh_frame:000000000000D0CC                 db    0
.eh_frame:000000000000D0CD                 db    0
.eh_frame:000000000000D0CE                 db    0
.eh_frame:000000000000D0CF                 db    0
.eh_frame:000000000000D0D0                 db  10h
.eh_frame:000000000000D0D1                 db    0
.eh_frame:000000000000D0D2                 db    0
.eh_frame:000000000000D0D3                 db    0
.eh_frame:000000000000D0D4                 db 0C4h
.eh_frame:000000000000D0D5                 db    5
.eh_frame:000000000000D0D6                 db    0
.eh_frame:000000000000D0D7                 db    0
.eh_frame:000000000000D0D8                 db 0C8h
.eh_frame:000000000000D0D9                 db  82h
.eh_frame:000000000000D0DA                 db 0FFh
.eh_frame:000000000000D0DB                 db 0FFh
.eh_frame:000000000000D0DC                 db  18h
.eh_frame:000000000000D0DD                 db    0
.eh_frame:000000000000D0DE                 db    0
.eh_frame:000000000000D0DF                 db    0
.eh_frame:000000000000D0E0                 db    0
.eh_frame:000000000000D0E1                 db    0
.eh_frame:000000000000D0E2                 db    0
.eh_frame:000000000000D0E3                 db    0
.eh_frame:000000000000D0E4                 db  10h
.eh_frame:000000000000D0E5                 db    0
.eh_frame:000000000000D0E6                 db    0
.eh_frame:000000000000D0E7                 db    0
.eh_frame:000000000000D0E8                 db 0D8h
.eh_frame:000000000000D0E9                 db    5
.eh_frame:000000000000D0EA                 db    0
.eh_frame:000000000000D0EB                 db    0
.eh_frame:000000000000D0EC                 db 0D4h
.eh_frame:000000000000D0ED                 db  82h
.eh_frame:000000000000D0EE                 db 0FFh
.eh_frame:000000000000D0EF                 db 0FFh
.eh_frame:000000000000D0F0                 db  14h
.eh_frame:000000000000D0F1                 db    0
.eh_frame:000000000000D0F2                 db    0
.eh_frame:000000000000D0F3                 db    0
.eh_frame:000000000000D0F4                 db    0
.eh_frame:000000000000D0F5                 db    0
.eh_frame:000000000000D0F6                 db    0
.eh_frame:000000000000D0F7                 db    0
.eh_frame:000000000000D0F8                 db  18h
.eh_frame:000000000000D0F9                 db    0
.eh_frame:000000000000D0FA                 db    0
.eh_frame:000000000000D0FB                 db    0
.eh_frame:000000000000D0FC                 db 0ECh
.eh_frame:000000000000D0FD                 db    5
.eh_frame:000000000000D0FE                 db    0
.eh_frame:000000000000D0FF                 db    0
.eh_frame:000000000000D100                 db 0E0h
.eh_frame:000000000000D101                 db  82h
.eh_frame:000000000000D102                 db 0FFh
.eh_frame:000000000000D103                 db 0FFh
.eh_frame:000000000000D104                 db  8Eh
.eh_frame:000000000000D105                 db    0
.eh_frame:000000000000D106                 db    0
.eh_frame:000000000000D107                 db    0
.eh_frame:000000000000D108                 db    0
.eh_frame:000000000000D109                 db  44h ; D
.eh_frame:000000000000D10A                 db  0Eh
.eh_frame:000000000000D10B                 db  50h ; P
.eh_frame:000000000000D10C                 db    2
.eh_frame:000000000000D10D                 db  7Fh ; 
.eh_frame:000000000000D10E                 db  0Ah
.eh_frame:000000000000D10F                 db  0Eh
.eh_frame:000000000000D110                 db    8
.eh_frame:000000000000D111                 db  41h ; A
.eh_frame:000000000000D112                 db  0Bh
.eh_frame:000000000000D113                 db    0
.eh_frame:000000000000D114                 db  18h
.eh_frame:000000000000D115                 db    0
.eh_frame:000000000000D116                 db    0
.eh_frame:000000000000D117                 db    0
.eh_frame:000000000000D118                 db    8
.eh_frame:000000000000D119                 db    6
.eh_frame:000000000000D11A                 db    0
.eh_frame:000000000000D11B                 db    0
.eh_frame:000000000000D11C                 db  54h ; T
.eh_frame:000000000000D11D                 db  83h
.eh_frame:000000000000D11E                 db 0FFh
.eh_frame:000000000000D11F                 db 0FFh
.eh_frame:000000000000D120                 db  8Ah
.eh_frame:000000000000D121                 db    0
.eh_frame:000000000000D122                 db    0
.eh_frame:000000000000D123                 db    0
.eh_frame:000000000000D124                 db    0
.eh_frame:000000000000D125                 db  44h ; D
.eh_frame:000000000000D126                 db  0Eh
.eh_frame:000000000000D127                 db  50h ; P
.eh_frame:000000000000D128                 db    2
.eh_frame:000000000000D129                 db  7Bh ; {
.eh_frame:000000000000D12A                 db  0Ah
.eh_frame:000000000000D12B                 db  0Eh
.eh_frame:000000000000D12C                 db    8
.eh_frame:000000000000D12D                 db  41h ; A
.eh_frame:000000000000D12E                 db  0Bh
.eh_frame:000000000000D12F                 db    0
.eh_frame:000000000000D130                 db  10h
.eh_frame:000000000000D131                 db    0
.eh_frame:000000000000D132                 db    0
.eh_frame:000000000000D133                 db    0
.eh_frame:000000000000D134                 db  24h ; $
.eh_frame:000000000000D135                 db    6
.eh_frame:000000000000D136                 db    0
.eh_frame:000000000000D137                 db    0
.eh_frame:000000000000D138                 db 0C8h
.eh_frame:000000000000D139                 db  83h
.eh_frame:000000000000D13A                 db 0FFh
.eh_frame:000000000000D13B                 db 0FFh
.eh_frame:000000000000D13C                 db  0Ch
.eh_frame:000000000000D13D                 db    0
.eh_frame:000000000000D13E                 db    0
.eh_frame:000000000000D13F                 db    0
.eh_frame:000000000000D140                 db    0
.eh_frame:000000000000D141                 db    0
.eh_frame:000000000000D142                 db    0
.eh_frame:000000000000D143                 db    0
.eh_frame:000000000000D144                 db  10h
.eh_frame:000000000000D145                 db    0
.eh_frame:000000000000D146                 db    0
.eh_frame:000000000000D147                 db    0
.eh_frame:000000000000D148                 db  38h ; 8
.eh_frame:000000000000D149                 db    6
.eh_frame:000000000000D14A                 db    0
.eh_frame:000000000000D14B                 db    0
.eh_frame:000000000000D14C                 db 0C4h
.eh_frame:000000000000D14D                 db  83h
.eh_frame:000000000000D14E                 db 0FFh
.eh_frame:000000000000D14F                 db 0FFh
.eh_frame:000000000000D150                 db  0Fh
.eh_frame:000000000000D151                 db    0
.eh_frame:000000000000D152                 db    0
.eh_frame:000000000000D153                 db    0
.eh_frame:000000000000D154                 db    0
.eh_frame:000000000000D155                 db    0
.eh_frame:000000000000D156                 db    0
.eh_frame:000000000000D157                 db    0
.eh_frame:000000000000D158                 db  18h
.eh_frame:000000000000D159                 db    0
.eh_frame:000000000000D15A                 db    0
.eh_frame:000000000000D15B                 db    0
.eh_frame:000000000000D15C                 db  4Ch ; L
.eh_frame:000000000000D15D                 db    6
.eh_frame:000000000000D15E                 db    0
.eh_frame:000000000000D15F                 db    0
.eh_frame:000000000000D160                 db 0C0h
.eh_frame:000000000000D161                 db  83h
.eh_frame:000000000000D162                 db 0FFh
.eh_frame:000000000000D163                 db 0FFh
.eh_frame:000000000000D164                 db  98h
.eh_frame:000000000000D165                 db    0
.eh_frame:000000000000D166                 db    0
.eh_frame:000000000000D167                 db    0
.eh_frame:000000000000D168                 db    0
.eh_frame:000000000000D169                 db  44h ; D
.eh_frame:000000000000D16A                 db  0Eh
.eh_frame:000000000000D16B                 db  50h ; P
.eh_frame:000000000000D16C                 db    2
.eh_frame:000000000000D16D                 db  8Eh
.eh_frame:000000000000D16E                 db  0Ah
.eh_frame:000000000000D16F                 db  0Eh
.eh_frame:000000000000D170                 db    8
.eh_frame:000000000000D171                 db  41h ; A
.eh_frame:000000000000D172                 db  0Bh
.eh_frame:000000000000D173                 db    0
.eh_frame:000000000000D174                 db  10h
.eh_frame:000000000000D175                 db    0
.eh_frame:000000000000D176                 db    0
.eh_frame:000000000000D177                 db    0
.eh_frame:000000000000D178                 db  68h ; h
.eh_frame:000000000000D179                 db    6
.eh_frame:000000000000D17A                 db    0
.eh_frame:000000000000D17B                 db    0
.eh_frame:000000000000D17C                 db  44h ; D
.eh_frame:000000000000D17D                 db  84h
.eh_frame:000000000000D17E                 db 0FFh
.eh_frame:000000000000D17F                 db 0FFh
.eh_frame:000000000000D180                 db  10h
.eh_frame:000000000000D181                 db    0
.eh_frame:000000000000D182                 db    0
.eh_frame:000000000000D183                 db    0
.eh_frame:000000000000D184                 db    0
.eh_frame:000000000000D185                 db    0
.eh_frame:000000000000D186                 db    0
.eh_frame:000000000000D187                 db    0
.eh_frame:000000000000D188                 db  10h
.eh_frame:000000000000D189                 db    0
.eh_frame:000000000000D18A                 db    0
.eh_frame:000000000000D18B                 db    0
.eh_frame:000000000000D18C                 db  7Ch ; |
.eh_frame:000000000000D18D                 db    6
.eh_frame:000000000000D18E                 db    0
.eh_frame:000000000000D18F                 db    0
.eh_frame:000000000000D190                 db  40h ; @
.eh_frame:000000000000D191                 db  84h
.eh_frame:000000000000D192                 db 0FFh
.eh_frame:000000000000D193                 db 0FFh
.eh_frame:000000000000D194                 db  11h
.eh_frame:000000000000D195                 db    0
.eh_frame:000000000000D196                 db    0
.eh_frame:000000000000D197                 db    0
.eh_frame:000000000000D198                 db    0
.eh_frame:000000000000D199                 db    0
.eh_frame:000000000000D19A                 db    0
.eh_frame:000000000000D19B                 db    0
.eh_frame:000000000000D19C                 db  10h
.eh_frame:000000000000D19D                 db    0
.eh_frame:000000000000D19E                 db    0
.eh_frame:000000000000D19F                 db    0
.eh_frame:000000000000D1A0                 db  90h
.eh_frame:000000000000D1A1                 db    6
.eh_frame:000000000000D1A2                 db    0
.eh_frame:000000000000D1A3                 db    0
.eh_frame:000000000000D1A4                 db  4Ch ; L
.eh_frame:000000000000D1A5                 db  84h
.eh_frame:000000000000D1A6                 db 0FFh
.eh_frame:000000000000D1A7                 db 0FFh
.eh_frame:000000000000D1A8                 db  0Ah
.eh_frame:000000000000D1A9                 db    0
.eh_frame:000000000000D1AA                 db    0
.eh_frame:000000000000D1AB                 db    0
.eh_frame:000000000000D1AC                 db    0
.eh_frame:000000000000D1AD                 db    0
.eh_frame:000000000000D1AE                 db    0
.eh_frame:000000000000D1AF                 db    0
.eh_frame:000000000000D1B0                 db  18h
.eh_frame:000000000000D1B1                 db    0
.eh_frame:000000000000D1B2                 db    0
.eh_frame:000000000000D1B3                 db    0
.eh_frame:000000000000D1B4                 db 0A4h
.eh_frame:000000000000D1B5                 db    6
.eh_frame:000000000000D1B6                 db    0
.eh_frame:000000000000D1B7                 db    0
.eh_frame:000000000000D1B8                 db  48h ; H
.eh_frame:000000000000D1B9                 db  84h
.eh_frame:000000000000D1BA                 db 0FFh
.eh_frame:000000000000D1BB                 db 0FFh
.eh_frame:000000000000D1BC                 db  8Eh
.eh_frame:000000000000D1BD                 db    0
.eh_frame:000000000000D1BE                 db    0
.eh_frame:000000000000D1BF                 db    0
.eh_frame:000000000000D1C0                 db    0
.eh_frame:000000000000D1C1                 db  44h ; D
.eh_frame:000000000000D1C2                 db  0Eh
.eh_frame:000000000000D1C3                 db  50h ; P
.eh_frame:000000000000D1C4                 db    2
.eh_frame:000000000000D1C5                 db  7Fh ; 
.eh_frame:000000000000D1C6                 db  0Ah
.eh_frame:000000000000D1C7                 db  0Eh
.eh_frame:000000000000D1C8                 db    8
.eh_frame:000000000000D1C9                 db  41h ; A
.eh_frame:000000000000D1CA                 db  0Bh
.eh_frame:000000000000D1CB                 db    0
.eh_frame:000000000000D1CC                 db  18h
.eh_frame:000000000000D1CD                 db    0
.eh_frame:000000000000D1CE                 db    0
.eh_frame:000000000000D1CF                 db    0
.eh_frame:000000000000D1D0                 db 0C0h
.eh_frame:000000000000D1D1                 db    6
.eh_frame:000000000000D1D2                 db    0
.eh_frame:000000000000D1D3                 db    0
.eh_frame:000000000000D1D4                 db 0BCh
.eh_frame:000000000000D1D5                 db  84h
.eh_frame:000000000000D1D6                 db 0FFh
.eh_frame:000000000000D1D7                 db 0FFh
.eh_frame:000000000000D1D8                 db  91h
.eh_frame:000000000000D1D9                 db    0
.eh_frame:000000000000D1DA                 db    0
.eh_frame:000000000000D1DB                 db    0
.eh_frame:000000000000D1DC                 db    0
.eh_frame:000000000000D1DD                 db  44h ; D
.eh_frame:000000000000D1DE                 db  0Eh
.eh_frame:000000000000D1DF                 db  50h ; P
.eh_frame:000000000000D1E0                 db    2
.eh_frame:000000000000D1E1                 db  82h
.eh_frame:000000000000D1E2                 db  0Ah
.eh_frame:000000000000D1E3                 db  0Eh
.eh_frame:000000000000D1E4                 db    8
.eh_frame:000000000000D1E5                 db  41h ; A
.eh_frame:000000000000D1E6                 db  0Bh
.eh_frame:000000000000D1E7                 db    0
.eh_frame:000000000000D1E8                 db  10h
.eh_frame:000000000000D1E9                 db    0
.eh_frame:000000000000D1EA                 db    0
.eh_frame:000000000000D1EB                 db    0
.eh_frame:000000000000D1EC                 db 0DCh
.eh_frame:000000000000D1ED                 db    6
.eh_frame:000000000000D1EE                 db    0
.eh_frame:000000000000D1EF                 db    0
.eh_frame:000000000000D1F0                 db  40h ; @
.eh_frame:000000000000D1F1                 db  85h
.eh_frame:000000000000D1F2                 db 0FFh
.eh_frame:000000000000D1F3                 db 0FFh
.eh_frame:000000000000D1F4                 db  0Ch
.eh_frame:000000000000D1F5                 db    0
.eh_frame:000000000000D1F6                 db    0
.eh_frame:000000000000D1F7                 db    0
.eh_frame:000000000000D1F8                 db    0
.eh_frame:000000000000D1F9                 db    0
.eh_frame:000000000000D1FA                 db    0
.eh_frame:000000000000D1FB                 db    0
.eh_frame:000000000000D1FC                 db  10h
.eh_frame:000000000000D1FD                 db    0
.eh_frame:000000000000D1FE                 db    0
.eh_frame:000000000000D1FF                 db    0
.eh_frame:000000000000D200                 db 0F0h
.eh_frame:000000000000D201                 db    6
.eh_frame:000000000000D202                 db    0
.eh_frame:000000000000D203                 db    0
.eh_frame:000000000000D204                 db  3Ch ; <
.eh_frame:000000000000D205                 db  85h
.eh_frame:000000000000D206                 db 0FFh
.eh_frame:000000000000D207                 db 0FFh
.eh_frame:000000000000D208                 db  17h
.eh_frame:000000000000D209                 db    0
.eh_frame:000000000000D20A                 db    0
.eh_frame:000000000000D20B                 db    0
.eh_frame:000000000000D20C                 db    0
.eh_frame:000000000000D20D                 db    0
.eh_frame:000000000000D20E                 db    0
.eh_frame:000000000000D20F                 db    0
.eh_frame:000000000000D210                 db  10h
.eh_frame:000000000000D211                 db    0
.eh_frame:000000000000D212                 db    0
.eh_frame:000000000000D213                 db    0
.eh_frame:000000000000D214                 db    4
.eh_frame:000000000000D215                 db    7
.eh_frame:000000000000D216                 db    0
.eh_frame:000000000000D217                 db    0
.eh_frame:000000000000D218                 db  48h ; H
.eh_frame:000000000000D219                 db  85h
.eh_frame:000000000000D21A                 db 0FFh
.eh_frame:000000000000D21B                 db 0FFh
.eh_frame:000000000000D21C                 db  13h
.eh_frame:000000000000D21D                 db    0
.eh_frame:000000000000D21E                 db    0
.eh_frame:000000000000D21F                 db    0
.eh_frame:000000000000D220                 db    0
.eh_frame:000000000000D221                 db    0
.eh_frame:000000000000D222                 db    0
.eh_frame:000000000000D223                 db    0
.eh_frame:000000000000D224                 db  10h
.eh_frame:000000000000D225                 db    0
.eh_frame:000000000000D226                 db    0
.eh_frame:000000000000D227                 db    0
.eh_frame:000000000000D228                 db  18h
.eh_frame:000000000000D229                 db    7
.eh_frame:000000000000D22A                 db    0
.eh_frame:000000000000D22B                 db    0
.eh_frame:000000000000D22C                 db  54h ; T
.eh_frame:000000000000D22D                 db  85h
.eh_frame:000000000000D22E                 db 0FFh
.eh_frame:000000000000D22F                 db 0FFh
.eh_frame:000000000000D230                 db  0Ch
.eh_frame:000000000000D231                 db    0
.eh_frame:000000000000D232                 db    0
.eh_frame:000000000000D233                 db    0
.eh_frame:000000000000D234                 db    0
.eh_frame:000000000000D235                 db    0
.eh_frame:000000000000D236                 db    0
.eh_frame:000000000000D237                 db    0
.eh_frame:000000000000D238                 db  10h
.eh_frame:000000000000D239                 db    0
.eh_frame:000000000000D23A                 db    0
.eh_frame:000000000000D23B                 db    0
.eh_frame:000000000000D23C                 db  2Ch ; ,
.eh_frame:000000000000D23D                 db    7
.eh_frame:000000000000D23E                 db    0
.eh_frame:000000000000D23F                 db    0
.eh_frame:000000000000D240                 db  50h ; P
.eh_frame:000000000000D241                 db  85h
.eh_frame:000000000000D242                 db 0FFh
.eh_frame:000000000000D243                 db 0FFh
.eh_frame:000000000000D244                 db  14h
.eh_frame:000000000000D245                 db    0
.eh_frame:000000000000D246                 db    0
.eh_frame:000000000000D247                 db    0
.eh_frame:000000000000D248                 db    0
.eh_frame:000000000000D249                 db    0
.eh_frame:000000000000D24A                 db    0
.eh_frame:000000000000D24B                 db    0
.eh_frame:000000000000D24C                 db  10h
.eh_frame:000000000000D24D                 db    0
.eh_frame:000000000000D24E                 db    0
.eh_frame:000000000000D24F                 db    0
.eh_frame:000000000000D250                 db  40h ; @
.eh_frame:000000000000D251                 db    7
.eh_frame:000000000000D252                 db    0
.eh_frame:000000000000D253                 db    0
.eh_frame:000000000000D254                 db  5Ch ; \
.eh_frame:000000000000D255                 db  85h
.eh_frame:000000000000D256                 db 0FFh
.eh_frame:000000000000D257                 db 0FFh
.eh_frame:000000000000D258                 db  13h
.eh_frame:000000000000D259                 db    0
.eh_frame:000000000000D25A                 db    0
.eh_frame:000000000000D25B                 db    0
.eh_frame:000000000000D25C                 db    0
.eh_frame:000000000000D25D                 db    0
.eh_frame:000000000000D25E                 db    0
.eh_frame:000000000000D25F                 db    0
.eh_frame:000000000000D260                 db  14h
.eh_frame:000000000000D261                 db    0
.eh_frame:000000000000D262                 db    0
.eh_frame:000000000000D263                 db    0
.eh_frame:000000000000D264                 db  54h ; T
.eh_frame:000000000000D265                 db    7
.eh_frame:000000000000D266                 db    0
.eh_frame:000000000000D267                 db    0
.eh_frame:000000000000D268                 db  68h ; h
.eh_frame:000000000000D269                 db  85h
.eh_frame:000000000000D26A                 db 0FFh
.eh_frame:000000000000D26B                 db 0FFh
.eh_frame:000000000000D26C                 db  18h
.eh_frame:000000000000D26D                 db    0
.eh_frame:000000000000D26E                 db    0
.eh_frame:000000000000D26F                 db    0
.eh_frame:000000000000D270                 db    0
.eh_frame:000000000000D271                 db    0
.eh_frame:000000000000D272                 db    0
.eh_frame:000000000000D273                 db    0
.eh_frame:000000000000D274                 db    0
.eh_frame:000000000000D275                 db    0
.eh_frame:000000000000D276                 db    0
.eh_frame:000000000000D277                 db    0
.eh_frame:000000000000D278                 db  24h ; $
.eh_frame:000000000000D279                 db    0
.eh_frame:000000000000D27A                 db    0
.eh_frame:000000000000D27B                 db    0
.eh_frame:000000000000D27C                 db  6Ch ; l
.eh_frame:000000000000D27D                 db    7
.eh_frame:000000000000D27E                 db    0
.eh_frame:000000000000D27F                 db    0
.eh_frame:000000000000D280                 db  70h ; p
.eh_frame:000000000000D281                 db  85h
.eh_frame:000000000000D282                 db 0FFh
.eh_frame:000000000000D283                 db 0FFh
.eh_frame:000000000000D284                 db  71h ; q
.eh_frame:000000000000D285                 db    0
.eh_frame:000000000000D286                 db    0
.eh_frame:000000000000D287                 db    0
.eh_frame:000000000000D288                 db    0
.eh_frame:000000000000D289                 db  41h ; A
.eh_frame:000000000000D28A                 db  0Eh
.eh_frame:000000000000D28B                 db  10h
.eh_frame:000000000000D28C                 db  83h
.eh_frame:000000000000D28D                 db    2
.eh_frame:000000000000D28E                 db  56h ; V
.eh_frame:000000000000D28F                 db  0Eh
.eh_frame:000000000000D290                 db 0B0h
.eh_frame:000000000000D291                 db    1
.eh_frame:000000000000D292                 db    2
.eh_frame:000000000000D293                 db  4Ch ; L
.eh_frame:000000000000D294                 db  0Ah
.eh_frame:000000000000D295                 db  0Eh
.eh_frame:000000000000D296                 db  10h
.eh_frame:000000000000D297                 db  41h ; A
.eh_frame:000000000000D298                 db  0Eh
.eh_frame:000000000000D299                 db    8
.eh_frame:000000000000D29A                 db  44h ; D
.eh_frame:000000000000D29B                 db  0Bh
.eh_frame:000000000000D29C                 db    0
.eh_frame:000000000000D29D                 db    0
.eh_frame:000000000000D29E                 db    0
.eh_frame:000000000000D29F                 db    0
.eh_frame:000000000000D2A0                 db  4Ch ; L
.eh_frame:000000000000D2A1                 db    0
.eh_frame:000000000000D2A2                 db    0
.eh_frame:000000000000D2A3                 db    0
.eh_frame:000000000000D2A4                 db  94h
.eh_frame:000000000000D2A5                 db    7
.eh_frame:000000000000D2A6                 db    0
.eh_frame:000000000000D2A7                 db    0
.eh_frame:000000000000D2A8                 db 0C8h
.eh_frame:000000000000D2A9                 db  85h
.eh_frame:000000000000D2AA                 db 0FFh
.eh_frame:000000000000D2AB                 db 0FFh
.eh_frame:000000000000D2AC                 db 0C9h
.eh_frame:000000000000D2AD                 db    3
.eh_frame:000000000000D2AE                 db    0
.eh_frame:000000000000D2AF                 db    0
.eh_frame:000000000000D2B0                 db    0
.eh_frame:000000000000D2B1                 db  42h ; B
.eh_frame:000000000000D2B2                 db  0Eh
.eh_frame:000000000000D2B3                 db  10h
.eh_frame:000000000000D2B4                 db  8Fh
.eh_frame:000000000000D2B5                 db    2
.eh_frame:000000000000D2B6                 db  42h ; B
.eh_frame:000000000000D2B7                 db  0Eh
.eh_frame:000000000000D2B8                 db  18h
.eh_frame:000000000000D2B9                 db  8Eh
.eh_frame:000000000000D2BA                 db    3
.eh_frame:000000000000D2BB                 db  45h ; E
.eh_frame:000000000000D2BC                 db  0Eh
.eh_frame:000000000000D2BD                 db  20h
.eh_frame:000000000000D2BE                 db  8Dh
.eh_frame:000000000000D2BF                 db    4
.eh_frame:000000000000D2C0                 db  42h ; B
.eh_frame:000000000000D2C1                 db  0Eh
.eh_frame:000000000000D2C2                 db  28h ; (
.eh_frame:000000000000D2C3                 db  8Ch
.eh_frame:000000000000D2C4                 db    5
.eh_frame:000000000000D2C5                 db  44h ; D
.eh_frame:000000000000D2C6                 db  0Eh
.eh_frame:000000000000D2C7                 db  30h ; 0
.eh_frame:000000000000D2C8                 db  86h
.eh_frame:000000000000D2C9                 db    6
.eh_frame:000000000000D2CA                 db  41h ; A
.eh_frame:000000000000D2CB                 db  0Eh
.eh_frame:000000000000D2CC                 db  38h ; 8
.eh_frame:000000000000D2CD                 db  83h
.eh_frame:000000000000D2CE                 db    7
.eh_frame:000000000000D2CF                 db  50h ; P
.eh_frame:000000000000D2D0                 db  0Eh
.eh_frame:000000000000D2D1                 db  90h
.eh_frame:000000000000D2D2                 db    1
.eh_frame:000000000000D2D3                 db    3
.eh_frame:000000000000D2D4                 db  10h
.eh_frame:000000000000D2D5                 db    1
.eh_frame:000000000000D2D6                 db  0Ah
.eh_frame:000000000000D2D7                 db  0Eh
.eh_frame:000000000000D2D8                 db  38h ; 8
.eh_frame:000000000000D2D9                 db  41h ; A
.eh_frame:000000000000D2DA                 db  0Eh
.eh_frame:000000000000D2DB                 db  30h ; 0
.eh_frame:000000000000D2DC                 db  41h ; A
.eh_frame:000000000000D2DD                 db  0Eh
.eh_frame:000000000000D2DE                 db  28h ; (
.eh_frame:000000000000D2DF                 db  42h ; B
.eh_frame:000000000000D2E0                 db  0Eh
.eh_frame:000000000000D2E1                 db  20h
.eh_frame:000000000000D2E2                 db  42h ; B
.eh_frame:000000000000D2E3                 db  0Eh
.eh_frame:000000000000D2E4                 db  18h
.eh_frame:000000000000D2E5                 db  42h ; B
.eh_frame:000000000000D2E6                 db  0Eh
.eh_frame:000000000000D2E7                 db  10h
.eh_frame:000000000000D2E8                 db  42h ; B
.eh_frame:000000000000D2E9                 db  0Eh
.eh_frame:000000000000D2EA                 db    8
.eh_frame:000000000000D2EB                 db  46h ; F
.eh_frame:000000000000D2EC                 db  0Bh
.eh_frame:000000000000D2ED                 db    0
.eh_frame:000000000000D2EE                 db    0
.eh_frame:000000000000D2EF                 db    0
.eh_frame:000000000000D2F0                 db  5Ch ; \
.eh_frame:000000000000D2F1                 db    0
.eh_frame:000000000000D2F2                 db    0
.eh_frame:000000000000D2F3                 db    0
.eh_frame:000000000000D2F4                 db 0E4h
.eh_frame:000000000000D2F5                 db    7
.eh_frame:000000000000D2F6                 db    0
.eh_frame:000000000000D2F7                 db    0
.eh_frame:000000000000D2F8                 db  48h ; H
.eh_frame:000000000000D2F9                 db  89h
.eh_frame:000000000000D2FA                 db 0FFh
.eh_frame:000000000000D2FB                 db 0FFh
.eh_frame:000000000000D2FC                 db 0CDh
.eh_frame:000000000000D2FD                 db    0
.eh_frame:000000000000D2FE                 db    0
.eh_frame:000000000000D2FF                 db    0
.eh_frame:000000000000D300                 db    0
.eh_frame:000000000000D301                 db  4Bh ; K
.eh_frame:000000000000D302                 db  0Eh
.eh_frame:000000000000D303                 db  10h
.eh_frame:000000000000D304                 db  8Fh
.eh_frame:000000000000D305                 db    2
.eh_frame:000000000000D306                 db  42h ; B
.eh_frame:000000000000D307                 db  0Eh
.eh_frame:000000000000D308                 db  18h
.eh_frame:000000000000D309                 db  8Eh
.eh_frame:000000000000D30A                 db    3
.eh_frame:000000000000D30B                 db  45h ; E
.eh_frame:000000000000D30C                 db  0Eh
.eh_frame:000000000000D30D                 db  20h
.eh_frame:000000000000D30E                 db  8Dh
.eh_frame:000000000000D30F                 db    4
.eh_frame:000000000000D310                 db  42h ; B
.eh_frame:000000000000D311                 db  0Eh
.eh_frame:000000000000D312                 db  28h ; (
.eh_frame:000000000000D313                 db  8Ch
.eh_frame:000000000000D314                 db    5
.eh_frame:000000000000D315                 db  44h ; D
.eh_frame:000000000000D316                 db  0Eh
.eh_frame:000000000000D317                 db  30h ; 0
.eh_frame:000000000000D318                 db  86h
.eh_frame:000000000000D319                 db    6
.eh_frame:000000000000D31A                 db  41h ; A
.eh_frame:000000000000D31B                 db  0Eh
.eh_frame:000000000000D31C                 db  38h ; 8
.eh_frame:000000000000D31D                 db  83h
.eh_frame:000000000000D31E                 db    7
.eh_frame:000000000000D31F                 db  52h ; R
.eh_frame:000000000000D320                 db  0Eh
.eh_frame:000000000000D321                 db  50h ; P
.eh_frame:000000000000D322                 db    2
.eh_frame:000000000000D323                 db  6Dh ; m
.eh_frame:000000000000D324                 db  0Eh
.eh_frame:000000000000D325                 db  38h ; 8
.eh_frame:000000000000D326                 db  44h ; D
.eh_frame:000000000000D327                 db  0Eh
.eh_frame:000000000000D328                 db  30h ; 0
.eh_frame:000000000000D329                 db  41h ; A
.eh_frame:000000000000D32A                 db  0Eh
.eh_frame:000000000000D32B                 db  28h ; (
.eh_frame:000000000000D32C                 db  42h ; B
.eh_frame:000000000000D32D                 db  0Eh
.eh_frame:000000000000D32E                 db  20h
.eh_frame:000000000000D32F                 db  42h ; B
.eh_frame:000000000000D330                 db  0Eh
.eh_frame:000000000000D331                 db  18h
.eh_frame:000000000000D332                 db  42h ; B
.eh_frame:000000000000D333                 db  0Eh
.eh_frame:000000000000D334                 db  10h
.eh_frame:000000000000D335                 db  42h ; B
.eh_frame:000000000000D336                 db  0Eh
.eh_frame:000000000000D337                 db    8
.eh_frame:000000000000D338                 db  4Bh ; K
.eh_frame:000000000000D339                 db 0C3h
.eh_frame:000000000000D33A                 db 0C6h
.eh_frame:000000000000D33B                 db 0CCh
.eh_frame:000000000000D33C                 db 0CDh
.eh_frame:000000000000D33D                 db 0CEh
.eh_frame:000000000000D33E                 db 0CFh
.eh_frame:000000000000D33F                 db  58h ; X
.eh_frame:000000000000D340                 db  0Eh
.eh_frame:000000000000D341                 db  50h ; P
.eh_frame:000000000000D342                 db  83h
.eh_frame:000000000000D343                 db    7
.eh_frame:000000000000D344                 db  86h
.eh_frame:000000000000D345                 db    6
.eh_frame:000000000000D346                 db  8Ch
.eh_frame:000000000000D347                 db    5
.eh_frame:000000000000D348                 db  8Dh
.eh_frame:000000000000D349                 db    4
.eh_frame:000000000000D34A                 db  8Eh
.eh_frame:000000000000D34B                 db    3
.eh_frame:000000000000D34C                 db  8Fh
.eh_frame:000000000000D34D                 db    2
.eh_frame:000000000000D34E                 db    0
.eh_frame:000000000000D34F                 db    0
.eh_frame:000000000000D350                 db  10h
.eh_frame:000000000000D351                 db    1
.eh_frame:000000000000D352                 db    0
.eh_frame:000000000000D353                 db    0
.eh_frame:000000000000D354                 db  44h ; D
.eh_frame:000000000000D355                 db    8
.eh_frame:000000000000D356                 db    0
.eh_frame:000000000000D357                 db    0
.eh_frame:000000000000D358                 db 0B8h
.eh_frame:000000000000D359                 db  89h
.eh_frame:000000000000D35A                 db 0FFh
.eh_frame:000000000000D35B                 db 0FFh
.eh_frame:000000000000D35C                 db  17h
.eh_frame:000000000000D35D                 db    4
.eh_frame:000000000000D35E                 db    0
.eh_frame:000000000000D35F                 db    0
.eh_frame:000000000000D360                 db    0
.eh_frame:000000000000D361                 db  42h ; B
.eh_frame:000000000000D362                 db  0Eh
.eh_frame:000000000000D363                 db  10h
.eh_frame:000000000000D364                 db  8Fh
.eh_frame:000000000000D365                 db    2
.eh_frame:000000000000D366                 db  42h ; B
.eh_frame:000000000000D367                 db  0Eh
.eh_frame:000000000000D368                 db  18h
.eh_frame:000000000000D369                 db  8Eh
.eh_frame:000000000000D36A                 db    3
.eh_frame:000000000000D36B                 db  42h ; B
.eh_frame:000000000000D36C                 db  0Eh
.eh_frame:000000000000D36D                 db  20h
.eh_frame:000000000000D36E                 db  8Dh
.eh_frame:000000000000D36F                 db    4
.eh_frame:000000000000D370                 db  42h ; B
.eh_frame:000000000000D371                 db  0Eh
.eh_frame:000000000000D372                 db  28h ; (
.eh_frame:000000000000D373                 db  8Ch
.eh_frame:000000000000D374                 db    5
.eh_frame:000000000000D375                 db  44h ; D
.eh_frame:000000000000D376                 db  0Eh
.eh_frame:000000000000D377                 db  30h ; 0
.eh_frame:000000000000D378                 db  86h
.eh_frame:000000000000D379                 db    6
.eh_frame:000000000000D37A                 db  41h ; A
.eh_frame:000000000000D37B                 db  0Eh
.eh_frame:000000000000D37C                 db  38h ; 8
.eh_frame:000000000000D37D                 db  83h
.eh_frame:000000000000D37E                 db    7
.eh_frame:000000000000D37F                 db  4Ah ; J
.eh_frame:000000000000D380                 db  0Eh
.eh_frame:000000000000D381                 db  60h ; `
.eh_frame:000000000000D382                 db    2
.eh_frame:000000000000D383                 db 0DDh
.eh_frame:000000000000D384                 db  0Eh
.eh_frame:000000000000D385                 db  68h ; h
.eh_frame:000000000000D386                 db  57h ; W
.eh_frame:000000000000D387                 db  0Eh
.eh_frame:000000000000D388                 db  70h ; p
.eh_frame:000000000000D389                 db  42h ; B
.eh_frame:000000000000D38A                 db  0Eh
.eh_frame:000000000000D38B                 db  78h ; x
.eh_frame:000000000000D38C                 db  42h ; B
.eh_frame:000000000000D38D                 db  0Eh
.eh_frame:000000000000D38E                 db  80h
.eh_frame:000000000000D38F                 db    1
.eh_frame:000000000000D390                 db  42h ; B
.eh_frame:000000000000D391                 db  0Eh
.eh_frame:000000000000D392                 db  88h
.eh_frame:000000000000D393                 db    1
.eh_frame:000000000000D394                 db  42h ; B
.eh_frame:000000000000D395                 db  0Eh
.eh_frame:000000000000D396                 db  90h
.eh_frame:000000000000D397                 db    1
.eh_frame:000000000000D398                 db  53h ; S
.eh_frame:000000000000D399                 db  0Eh
.eh_frame:000000000000D39A                 db  60h ; `
.eh_frame:000000000000D39B                 db  44h ; D
.eh_frame:000000000000D39C                 db  0Ah
.eh_frame:000000000000D39D                 db  0Eh
.eh_frame:000000000000D39E                 db  38h ; 8
.eh_frame:000000000000D39F                 db  41h ; A
.eh_frame:000000000000D3A0                 db  0Eh
.eh_frame:000000000000D3A1                 db  30h ; 0
.eh_frame:000000000000D3A2                 db  41h ; A
.eh_frame:000000000000D3A3                 db  0Eh
.eh_frame:000000000000D3A4                 db  28h ; (
.eh_frame:000000000000D3A5                 db  42h ; B
.eh_frame:000000000000D3A6                 db  0Eh
.eh_frame:000000000000D3A7                 db  20h
.eh_frame:000000000000D3A8                 db  42h ; B
.eh_frame:000000000000D3A9                 db  0Eh
.eh_frame:000000000000D3AA                 db  18h
.eh_frame:000000000000D3AB                 db  42h ; B
.eh_frame:000000000000D3AC                 db  0Eh
.eh_frame:000000000000D3AD                 db  10h
.eh_frame:000000000000D3AE                 db  42h ; B
.eh_frame:000000000000D3AF                 db  0Eh
.eh_frame:000000000000D3B0                 db    8
.eh_frame:000000000000D3B1                 db  44h ; D
.eh_frame:000000000000D3B2                 db  0Bh
.eh_frame:000000000000D3B3                 db    2
.eh_frame:000000000000D3B4                 db  78h ; x
.eh_frame:000000000000D3B5                 db  0Ah
.eh_frame:000000000000D3B6                 db  0Eh
.eh_frame:000000000000D3B7                 db  68h ; h
.eh_frame:000000000000D3B8                 db  48h ; H
.eh_frame:000000000000D3B9                 db  0Bh
.eh_frame:000000000000D3BA                 db  5Ah ; Z
.eh_frame:000000000000D3BB                 db  0Ah
.eh_frame:000000000000D3BC                 db  0Eh
.eh_frame:000000000000D3BD                 db  38h ; 8
.eh_frame:000000000000D3BE                 db  47h ; G
.eh_frame:000000000000D3BF                 db  0Eh
.eh_frame:000000000000D3C0                 db  30h ; 0
.eh_frame:000000000000D3C1                 db  41h ; A
.eh_frame:000000000000D3C2                 db  0Eh
.eh_frame:000000000000D3C3                 db  28h ; (
.eh_frame:000000000000D3C4                 db  42h ; B
.eh_frame:000000000000D3C5                 db  0Eh
.eh_frame:000000000000D3C6                 db  20h
.eh_frame:000000000000D3C7                 db  42h ; B
.eh_frame:000000000000D3C8                 db  0Eh
.eh_frame:000000000000D3C9                 db  18h
.eh_frame:000000000000D3CA                 db  42h ; B
.eh_frame:000000000000D3CB                 db  0Eh
.eh_frame:000000000000D3CC                 db  10h
.eh_frame:000000000000D3CD                 db  42h ; B
.eh_frame:000000000000D3CE                 db  0Eh
.eh_frame:000000000000D3CF                 db    8
.eh_frame:000000000000D3D0                 db  56h ; V
.eh_frame:000000000000D3D1                 db  0Bh
.eh_frame:000000000000D3D2                 db  5Eh ; ^
.eh_frame:000000000000D3D3                 db  0Ah
.eh_frame:000000000000D3D4                 db  0Eh
.eh_frame:000000000000D3D5                 db  38h ; 8
.eh_frame:000000000000D3D6                 db  52h ; R
.eh_frame:000000000000D3D7                 db  0Eh
.eh_frame:000000000000D3D8                 db  30h ; 0
.eh_frame:000000000000D3D9                 db  41h ; A
.eh_frame:000000000000D3DA                 db  0Eh
.eh_frame:000000000000D3DB                 db  28h ; (
.eh_frame:000000000000D3DC                 db  42h ; B
.eh_frame:000000000000D3DD                 db  0Eh
.eh_frame:000000000000D3DE                 db  20h
.eh_frame:000000000000D3DF                 db  42h ; B
.eh_frame:000000000000D3E0                 db  0Eh
.eh_frame:000000000000D3E1                 db  18h
.eh_frame:000000000000D3E2                 db  42h ; B
.eh_frame:000000000000D3E3                 db  0Eh
.eh_frame:000000000000D3E4                 db  10h
.eh_frame:000000000000D3E5                 db  42h ; B
.eh_frame:000000000000D3E6                 db  0Eh
.eh_frame:000000000000D3E7                 db    8
.eh_frame:000000000000D3E8                 db  4Fh ; O
.eh_frame:000000000000D3E9                 db  0Bh
.eh_frame:000000000000D3EA                 db  62h ; b
.eh_frame:000000000000D3EB                 db  0Ah
.eh_frame:000000000000D3EC                 db  0Eh
.eh_frame:000000000000D3ED                 db  38h ; 8
.eh_frame:000000000000D3EE                 db  50h ; P
.eh_frame:000000000000D3EF                 db  0Eh
.eh_frame:000000000000D3F0                 db  30h ; 0
.eh_frame:000000000000D3F1                 db  41h ; A
.eh_frame:000000000000D3F2                 db  0Eh
.eh_frame:000000000000D3F3                 db  28h ; (
.eh_frame:000000000000D3F4                 db  42h ; B
.eh_frame:000000000000D3F5                 db  0Eh
.eh_frame:000000000000D3F6                 db  20h
.eh_frame:000000000000D3F7                 db  42h ; B
.eh_frame:000000000000D3F8                 db  0Eh
.eh_frame:000000000000D3F9                 db  18h
.eh_frame:000000000000D3FA                 db  42h ; B
.eh_frame:000000000000D3FB                 db  0Eh
.eh_frame:000000000000D3FC                 db  10h
.eh_frame:000000000000D3FD                 db  42h ; B
.eh_frame:000000000000D3FE                 db  0Eh
.eh_frame:000000000000D3FF                 db    8
.eh_frame:000000000000D400                 db  55h ; U
.eh_frame:000000000000D401                 db  0Bh
.eh_frame:000000000000D402                 db  66h ; f
.eh_frame:000000000000D403                 db  0Eh
.eh_frame:000000000000D404                 db  68h ; h
.eh_frame:000000000000D405                 db  42h ; B
.eh_frame:000000000000D406                 db  0Eh
.eh_frame:000000000000D407                 db  70h ; p
.eh_frame:000000000000D408                 db  5Ch ; \
.eh_frame:000000000000D409                 db  0Eh
.eh_frame:000000000000D40A                 db  68h ; h
.eh_frame:000000000000D40B                 db  41h ; A
.eh_frame:000000000000D40C                 db  0Eh
.eh_frame:000000000000D40D                 db  60h ; `
.eh_frame:000000000000D40E                 db  44h ; D
.eh_frame:000000000000D40F                 db  0Ah
.eh_frame:000000000000D410                 db  0Eh
.eh_frame:000000000000D411                 db  38h ; 8
.eh_frame:000000000000D412                 db  41h ; A
.eh_frame:000000000000D413                 db  0Eh
.eh_frame:000000000000D414                 db  30h ; 0
.eh_frame:000000000000D415                 db  41h ; A
.eh_frame:000000000000D416                 db  0Eh
.eh_frame:000000000000D417                 db  28h ; (
.eh_frame:000000000000D418                 db  42h ; B
.eh_frame:000000000000D419                 db  0Eh
.eh_frame:000000000000D41A                 db  20h
.eh_frame:000000000000D41B                 db  42h ; B
.eh_frame:000000000000D41C                 db  0Eh
.eh_frame:000000000000D41D                 db  18h
.eh_frame:000000000000D41E                 db  42h ; B
.eh_frame:000000000000D41F                 db  0Eh
.eh_frame:000000000000D420                 db  10h
.eh_frame:000000000000D421                 db  42h ; B
.eh_frame:000000000000D422                 db  0Eh
.eh_frame:000000000000D423                 db    8
.eh_frame:000000000000D424                 db  45h ; E
.eh_frame:000000000000D425                 db  0Bh
.eh_frame:000000000000D426                 db  68h ; h
.eh_frame:000000000000D427                 db  0Ah
.eh_frame:000000000000D428                 db  0Eh
.eh_frame:000000000000D429                 db  68h ; h
.eh_frame:000000000000D42A                 db  48h ; H
.eh_frame:000000000000D42B                 db  0Bh
.eh_frame:000000000000D42C                 db  72h ; r
.eh_frame:000000000000D42D                 db  0Eh
.eh_frame:000000000000D42E                 db  68h ; h
.eh_frame:000000000000D42F                 db  45h ; E
.eh_frame:000000000000D430                 db  0Eh
.eh_frame:000000000000D431                 db  70h ; p
.eh_frame:000000000000D432                 db  42h ; B
.eh_frame:000000000000D433                 db  0Eh
.eh_frame:000000000000D434                 db  78h ; x
.eh_frame:000000000000D435                 db  42h ; B
.eh_frame:000000000000D436                 db  0Eh
.eh_frame:000000000000D437                 db  80h
.eh_frame:000000000000D438                 db    1
.eh_frame:000000000000D439                 db  5Eh ; ^
.eh_frame:000000000000D43A                 db  0Eh
.eh_frame:000000000000D43B                 db  60h ; `
.eh_frame:000000000000D43C                 db  44h ; D
.eh_frame:000000000000D43D                 db  0Ah
.eh_frame:000000000000D43E                 db  0Eh
.eh_frame:000000000000D43F                 db  38h ; 8
.eh_frame:000000000000D440                 db  41h ; A
.eh_frame:000000000000D441                 db  0Eh
.eh_frame:000000000000D442                 db  30h ; 0
.eh_frame:000000000000D443                 db  41h ; A
.eh_frame:000000000000D444                 db  0Eh
.eh_frame:000000000000D445                 db  28h ; (
.eh_frame:000000000000D446                 db  42h ; B
.eh_frame:000000000000D447                 db  0Eh
.eh_frame:000000000000D448                 db  20h
.eh_frame:000000000000D449                 db  42h ; B
.eh_frame:000000000000D44A                 db  0Eh
.eh_frame:000000000000D44B                 db  18h
.eh_frame:000000000000D44C                 db  42h ; B
.eh_frame:000000000000D44D                 db  0Eh
.eh_frame:000000000000D44E                 db  10h
.eh_frame:000000000000D44F                 db  42h ; B
.eh_frame:000000000000D450                 db  0Eh
.eh_frame:000000000000D451                 db    8
.eh_frame:000000000000D452                 db  41h ; A
.eh_frame:000000000000D453                 db  0Bh
.eh_frame:000000000000D454                 db  79h ; y
.eh_frame:000000000000D455                 db  0Ah
.eh_frame:000000000000D456                 db  0Eh
.eh_frame:000000000000D457                 db  68h ; h
.eh_frame:000000000000D458                 db  42h ; B
.eh_frame:000000000000D459                 db  0Eh
.eh_frame:000000000000D45A                 db  70h ; p
.eh_frame:000000000000D45B                 db  42h ; B
.eh_frame:000000000000D45C                 db  0Eh
.eh_frame:000000000000D45D                 db  78h ; x
.eh_frame:000000000000D45E                 db  42h ; B
.eh_frame:000000000000D45F                 db  0Eh
.eh_frame:000000000000D460                 db  80h
.eh_frame:000000000000D461                 db    1
.eh_frame:000000000000D462                 db  51h ; Q
.eh_frame:000000000000D463                 db  0Bh
.eh_frame:000000000000D464                 db  10h
.eh_frame:000000000000D465                 db    0
.eh_frame:000000000000D466                 db    0
.eh_frame:000000000000D467                 db    0
.eh_frame:000000000000D468                 db  58h ; X
.eh_frame:000000000000D469                 db    9
.eh_frame:000000000000D46A                 db    0
.eh_frame:000000000000D46B                 db    0
.eh_frame:000000000000D46C                 db 0C4h
.eh_frame:000000000000D46D                 db  8Ch
.eh_frame:000000000000D46E                 db 0FFh
.eh_frame:000000000000D46F                 db 0FFh
.eh_frame:000000000000D470                 db  20h
.eh_frame:000000000000D471                 db    0
.eh_frame:000000000000D472                 db    0
.eh_frame:000000000000D473                 db    0
.eh_frame:000000000000D474                 db    0
.eh_frame:000000000000D475                 db    0
.eh_frame:000000000000D476                 db    0
.eh_frame:000000000000D477                 db    0
.eh_frame:000000000000D478                 db  18h
.eh_frame:000000000000D479                 db    0
.eh_frame:000000000000D47A                 db    0
.eh_frame:000000000000D47B                 db    0
.eh_frame:000000000000D47C                 db  6Ch ; l
.eh_frame:000000000000D47D                 db    9
.eh_frame:000000000000D47E                 db    0
.eh_frame:000000000000D47F                 db    0
.eh_frame:000000000000D480                 db 0D0h
.eh_frame:000000000000D481                 db  8Ch
.eh_frame:000000000000D482                 db 0FFh
.eh_frame:000000000000D483                 db 0FFh
.eh_frame:000000000000D484                 db  78h ; x
.eh_frame:000000000000D485                 db    0
.eh_frame:000000000000D486                 db    0
.eh_frame:000000000000D487                 db    0
.eh_frame:000000000000D488                 db    0
.eh_frame:000000000000D489                 db  44h ; D
.eh_frame:000000000000D48A                 db  0Eh
.eh_frame:000000000000D48B                 db  70h ; p
.eh_frame:000000000000D48C                 db    2
.eh_frame:000000000000D48D                 db  60h ; `
.eh_frame:000000000000D48E                 db  0Ah
.eh_frame:000000000000D48F                 db  0Eh
.eh_frame:000000000000D490                 db    8
.eh_frame:000000000000D491                 db  41h ; A
.eh_frame:000000000000D492                 db  0Bh
.eh_frame:000000000000D493                 db    0
.eh_frame:000000000000D494                 db  28h ; (
.eh_frame:000000000000D495                 db    0
.eh_frame:000000000000D496                 db    0
.eh_frame:000000000000D497                 db    0
.eh_frame:000000000000D498                 db  88h
.eh_frame:000000000000D499                 db    9
.eh_frame:000000000000D49A                 db    0
.eh_frame:000000000000D49B                 db    0
.eh_frame:000000000000D49C                 db  34h ; 4
.eh_frame:000000000000D49D                 db  8Dh
.eh_frame:000000000000D49E                 db 0FFh
.eh_frame:000000000000D49F                 db 0FFh
.eh_frame:000000000000D4A0                 db 0D5h
.eh_frame:000000000000D4A1                 db    0
.eh_frame:000000000000D4A2                 db    0
.eh_frame:000000000000D4A3                 db    0
.eh_frame:000000000000D4A4                 db    0
.eh_frame:000000000000D4A5                 db  41h ; A
.eh_frame:000000000000D4A6                 db  0Eh
.eh_frame:000000000000D4A7                 db  10h
.eh_frame:000000000000D4A8                 db  86h
.eh_frame:000000000000D4A9                 db    2
.eh_frame:000000000000D4AA                 db  41h ; A
.eh_frame:000000000000D4AB                 db  0Eh
.eh_frame:000000000000D4AC                 db  18h
.eh_frame:000000000000D4AD                 db  83h
.eh_frame:000000000000D4AE                 db    3
.eh_frame:000000000000D4AF                 db  50h ; P
.eh_frame:000000000000D4B0                 db  0Eh
.eh_frame:000000000000D4B1                 db 0D0h
.eh_frame:000000000000D4B2                 db    1
.eh_frame:000000000000D4B3                 db    2
.eh_frame:000000000000D4B4                 db 0ABh
.eh_frame:000000000000D4B5                 db  0Ah
.eh_frame:000000000000D4B6                 db  0Eh
.eh_frame:000000000000D4B7                 db  18h
.eh_frame:000000000000D4B8                 db  41h ; A
.eh_frame:000000000000D4B9                 db  0Eh
.eh_frame:000000000000D4BA                 db  10h
.eh_frame:000000000000D4BB                 db  41h ; A
.eh_frame:000000000000D4BC                 db  0Eh
.eh_frame:000000000000D4BD                 db    8
.eh_frame:000000000000D4BE                 db  41h ; A
.eh_frame:000000000000D4BF                 db  0Bh
.eh_frame:000000000000D4C0                 db  1Ch
.eh_frame:000000000000D4C1                 db    0
.eh_frame:000000000000D4C2                 db    0
.eh_frame:000000000000D4C3                 db    0
.eh_frame:000000000000D4C4                 db 0B4h
.eh_frame:000000000000D4C5                 db    9
.eh_frame:000000000000D4C6                 db    0
.eh_frame:000000000000D4C7                 db    0
.eh_frame:000000000000D4C8                 db 0E8h
.eh_frame:000000000000D4C9                 db  8Dh
.eh_frame:000000000000D4CA                 db 0FFh
.eh_frame:000000000000D4CB                 db 0FFh
.eh_frame:000000000000D4CC                 db  80h
.eh_frame:000000000000D4CD                 db    0
.eh_frame:000000000000D4CE                 db    0
.eh_frame:000000000000D4CF                 db    0
.eh_frame:000000000000D4D0                 db    0
.eh_frame:000000000000D4D1                 db  41h ; A
.eh_frame:000000000000D4D2                 db  0Eh
.eh_frame:000000000000D4D3                 db  10h
.eh_frame:000000000000D4D4                 db  83h
.eh_frame:000000000000D4D5                 db    2
.eh_frame:000000000000D4D6                 db    2
.eh_frame:000000000000D4D7                 db  7Ah ; z
.eh_frame:000000000000D4D8                 db  0Eh
.eh_frame:000000000000D4D9                 db    8
.eh_frame:000000000000D4DA                 db    0
.eh_frame:000000000000D4DB                 db    0
.eh_frame:000000000000D4DC                 db    0
.eh_frame:000000000000D4DD                 db    0
.eh_frame:000000000000D4DE                 db    0
.eh_frame:000000000000D4DF                 db    0
.eh_frame:000000000000D4E0                 db  18h
.eh_frame:000000000000D4E1                 db    0
.eh_frame:000000000000D4E2                 db    0
.eh_frame:000000000000D4E3                 db    0
.eh_frame:000000000000D4E4                 db 0D4h
.eh_frame:000000000000D4E5                 db    9
.eh_frame:000000000000D4E6                 db    0
.eh_frame:000000000000D4E7                 db    0
.eh_frame:000000000000D4E8                 db  48h ; H
.eh_frame:000000000000D4E9                 db  8Eh
.eh_frame:000000000000D4EA                 db 0FFh
.eh_frame:000000000000D4EB                 db 0FFh
.eh_frame:000000000000D4EC                 db  1Ah
.eh_frame:000000000000D4ED                 db    0
.eh_frame:000000000000D4EE                 db    0
.eh_frame:000000000000D4EF                 db    0
.eh_frame:000000000000D4F0                 db    0
.eh_frame:000000000000D4F1                 db  41h ; A
.eh_frame:000000000000D4F2                 db  0Eh
.eh_frame:000000000000D4F3                 db  10h
.eh_frame:000000000000D4F4                 db  83h
.eh_frame:000000000000D4F5                 db    2
.eh_frame:000000000000D4F6                 db  53h ; S
.eh_frame:000000000000D4F7                 db  0Ah
.eh_frame:000000000000D4F8                 db  0Eh
.eh_frame:000000000000D4F9                 db    8
.eh_frame:000000000000D4FA                 db  41h ; A
.eh_frame:000000000000D4FB                 db  0Bh
.eh_frame:000000000000D4FC                 db  10h
.eh_frame:000000000000D4FD                 db    0
.eh_frame:000000000000D4FE                 db    0
.eh_frame:000000000000D4FF                 db    0
.eh_frame:000000000000D500                 db 0F0h
.eh_frame:000000000000D501                 db    9
.eh_frame:000000000000D502                 db    0
.eh_frame:000000000000D503                 db    0
.eh_frame:000000000000D504                 db  4Ch ; L
.eh_frame:000000000000D505                 db  8Eh
.eh_frame:000000000000D506                 db 0FFh
.eh_frame:000000000000D507                 db 0FFh
.eh_frame:000000000000D508                 db  24h ; $
.eh_frame:000000000000D509                 db    0
.eh_frame:000000000000D50A                 db    0
.eh_frame:000000000000D50B                 db    0
.eh_frame:000000000000D50C                 db    0
.eh_frame:000000000000D50D                 db  5Fh ; _
.eh_frame:000000000000D50E                 db  0Eh
.eh_frame:000000000000D50F                 db  10h
.eh_frame:000000000000D510                 db  10h
.eh_frame:000000000000D511                 db    0
.eh_frame:000000000000D512                 db    0
.eh_frame:000000000000D513                 db    0
.eh_frame:000000000000D514                 db    4
.eh_frame:000000000000D515                 db  0Ah
.eh_frame:000000000000D516                 db    0
.eh_frame:000000000000D517                 db    0
.eh_frame:000000000000D518                 db  68h ; h
.eh_frame:000000000000D519                 db  8Eh
.eh_frame:000000000000D51A                 db 0FFh
.eh_frame:000000000000D51B                 db 0FFh
.eh_frame:000000000000D51C                 db    2
.eh_frame:000000000000D51D                 db    0
.eh_frame:000000000000D51E                 db    0
.eh_frame:000000000000D51F                 db    0
.eh_frame:000000000000D520                 db    0
.eh_frame:000000000000D521                 db    0
.eh_frame:000000000000D522                 db    0
.eh_frame:000000000000D523                 db    0
.eh_frame:000000000000D524                 db  20h
.eh_frame:000000000000D525                 db    0
.eh_frame:000000000000D526                 db    0
.eh_frame:000000000000D527                 db    0
.eh_frame:000000000000D528                 db  18h
.eh_frame:000000000000D529                 db  0Ah
.eh_frame:000000000000D52A                 db    0
.eh_frame:000000000000D52B                 db    0
.eh_frame:000000000000D52C                 db  64h ; d
.eh_frame:000000000000D52D                 db  8Eh
.eh_frame:000000000000D52E                 db 0FFh
.eh_frame:000000000000D52F                 db 0FFh
.eh_frame:000000000000D530                 db  36h ; 6
.eh_frame:000000000000D531                 db    0
.eh_frame:000000000000D532                 db    0
.eh_frame:000000000000D533                 db    0
.eh_frame:000000000000D534                 db    0
.eh_frame:000000000000D535                 db  44h ; D
.eh_frame:000000000000D536                 db  0Eh
.eh_frame:000000000000D537                 db  10h
.eh_frame:000000000000D538                 db  83h
.eh_frame:000000000000D539                 db    2
.eh_frame:000000000000D53A                 db  5Dh ; ]
.eh_frame:000000000000D53B                 db  0Ah
.eh_frame:000000000000D53C                 db  0Eh
.eh_frame:000000000000D53D                 db    8
.eh_frame:000000000000D53E                 db  47h ; G
.eh_frame:000000000000D53F                 db  0Bh
.eh_frame:000000000000D540                 db  48h ; H
.eh_frame:000000000000D541                 db  0Ah
.eh_frame:000000000000D542                 db  0Eh
.eh_frame:000000000000D543                 db    8
.eh_frame:000000000000D544                 db  41h ; A
.eh_frame:000000000000D545                 db  0Bh
.eh_frame:000000000000D546                 db    0
.eh_frame:000000000000D547                 db    0
.eh_frame:000000000000D548                 db  10h
.eh_frame:000000000000D549                 db    0
.eh_frame:000000000000D54A                 db    0
.eh_frame:000000000000D54B                 db    0
.eh_frame:000000000000D54C                 db  3Ch ; <
.eh_frame:000000000000D54D                 db  0Ah
.eh_frame:000000000000D54E                 db    0
.eh_frame:000000000000D54F                 db    0
.eh_frame:000000000000D550                 db  80h
.eh_frame:000000000000D551                 db  8Eh
.eh_frame:000000000000D552                 db 0FFh
.eh_frame:000000000000D553                 db 0FFh
.eh_frame:000000000000D554                 db  24h ; $
.eh_frame:000000000000D555                 db    0
.eh_frame:000000000000D556                 db    0
.eh_frame:000000000000D557                 db    0
.eh_frame:000000000000D558                 db    0
.eh_frame:000000000000D559                 db  5Fh ; _
.eh_frame:000000000000D55A                 db  0Eh
.eh_frame:000000000000D55B                 db  10h
.eh_frame:000000000000D55C                 db  14h
.eh_frame:000000000000D55D                 db    0
.eh_frame:000000000000D55E                 db    0
.eh_frame:000000000000D55F                 db    0
.eh_frame:000000000000D560                 db  50h ; P
.eh_frame:000000000000D561                 db  0Ah
.eh_frame:000000000000D562                 db    0
.eh_frame:000000000000D563                 db    0
.eh_frame:000000000000D564                 db  9Ch
.eh_frame:000000000000D565                 db  8Eh
.eh_frame:000000000000D566                 db 0FFh
.eh_frame:000000000000D567                 db 0FFh
.eh_frame:000000000000D568                 db  82h
.eh_frame:000000000000D569                 db    0
.eh_frame:000000000000D56A                 db    0
.eh_frame:000000000000D56B                 db    0
.eh_frame:000000000000D56C                 db    0
.eh_frame:000000000000D56D                 db    2
.eh_frame:000000000000D56E                 db  5Fh ; _
.eh_frame:000000000000D56F                 db  0Eh
.eh_frame:000000000000D570                 db  10h
.eh_frame:000000000000D571                 db  49h ; I
.eh_frame:000000000000D572                 db  0Eh
.eh_frame:000000000000D573                 db    8
.eh_frame:000000000000D574                 db  14h
.eh_frame:000000000000D575                 db    0
.eh_frame:000000000000D576                 db    0
.eh_frame:000000000000D577                 db    0
.eh_frame:000000000000D578                 db  68h ; h
.eh_frame:000000000000D579                 db  0Ah
.eh_frame:000000000000D57A                 db    0
.eh_frame:000000000000D57B                 db    0
.eh_frame:000000000000D57C                 db  14h
.eh_frame:000000000000D57D                 db  8Fh
.eh_frame:000000000000D57E                 db 0FFh
.eh_frame:000000000000D57F                 db 0FFh
.eh_frame:000000000000D580                 db  4Ah ; J
.eh_frame:000000000000D581                 db    0
.eh_frame:000000000000D582                 db    0
.eh_frame:000000000000D583                 db    0
.eh_frame:000000000000D584                 db    0
.eh_frame:000000000000D585                 db    2
.eh_frame:000000000000D586                 db  45h ; E
.eh_frame:000000000000D587                 db  0Eh
.eh_frame:000000000000D588                 db  10h
.eh_frame:000000000000D589                 db    0
.eh_frame:000000000000D58A                 db    0
.eh_frame:000000000000D58B                 db    0
.eh_frame:000000000000D58C                 db  18h
.eh_frame:000000000000D58D                 db    0
.eh_frame:000000000000D58E                 db    0
.eh_frame:000000000000D58F                 db    0
.eh_frame:000000000000D590                 db  80h
.eh_frame:000000000000D591                 db  0Ah
.eh_frame:000000000000D592                 db    0
.eh_frame:000000000000D593                 db    0
.eh_frame:000000000000D594                 db  4Ch ; L
.eh_frame:000000000000D595                 db  8Fh
.eh_frame:000000000000D596                 db 0FFh
.eh_frame:000000000000D597                 db 0FFh
.eh_frame:000000000000D598                 db  17h
.eh_frame:000000000000D599                 db    0
.eh_frame:000000000000D59A                 db    0
.eh_frame:000000000000D59B                 db    0
.eh_frame:000000000000D59C                 db    0
.eh_frame:000000000000D59D                 db  41h ; A
.eh_frame:000000000000D59E                 db  0Eh
.eh_frame:000000000000D59F                 db  10h
.eh_frame:000000000000D5A0                 db  83h
.eh_frame:000000000000D5A1                 db    2
.eh_frame:000000000000D5A2                 db  51h ; Q
.eh_frame:000000000000D5A3                 db  0Eh
.eh_frame:000000000000D5A4                 db    8
.eh_frame:000000000000D5A5                 db    0
.eh_frame:000000000000D5A6                 db    0
.eh_frame:000000000000D5A7                 db    0
.eh_frame:000000000000D5A8                 db  18h
.eh_frame:000000000000D5A9                 db    0
.eh_frame:000000000000D5AA                 db    0
.eh_frame:000000000000D5AB                 db    0
.eh_frame:000000000000D5AC                 db  9Ch
.eh_frame:000000000000D5AD                 db  0Ah
.eh_frame:000000000000D5AE                 db    0
.eh_frame:000000000000D5AF                 db    0
.eh_frame:000000000000D5B0                 db  50h ; P
.eh_frame:000000000000D5B1                 db  8Fh
.eh_frame:000000000000D5B2                 db 0FFh
.eh_frame:000000000000D5B3                 db 0FFh
.eh_frame:000000000000D5B4                 db  2Eh ; .
.eh_frame:000000000000D5B5                 db    0
.eh_frame:000000000000D5B6                 db    0
.eh_frame:000000000000D5B7                 db    0
.eh_frame:000000000000D5B8                 db    0
.eh_frame:000000000000D5B9                 db  47h ; G
.eh_frame:000000000000D5BA                 db  0Eh
.eh_frame:000000000000D5BB                 db  10h
.eh_frame:000000000000D5BC                 db  61h ; a
.eh_frame:000000000000D5BD                 db  0Ah
.eh_frame:000000000000D5BE                 db  0Eh
.eh_frame:000000000000D5BF                 db    8
.eh_frame:000000000000D5C0                 db  41h ; A
.eh_frame:000000000000D5C1                 db  0Bh
.eh_frame:000000000000D5C2                 db    0
.eh_frame:000000000000D5C3                 db    0
.eh_frame:000000000000D5C4                 db  24h ; $
.eh_frame:000000000000D5C5                 db    0
.eh_frame:000000000000D5C6                 db    0
.eh_frame:000000000000D5C7                 db    0
.eh_frame:000000000000D5C8                 db 0B8h
.eh_frame:000000000000D5C9                 db  0Ah
.eh_frame:000000000000D5CA                 db    0
.eh_frame:000000000000D5CB                 db    0
.eh_frame:000000000000D5CC                 db  64h ; d
.eh_frame:000000000000D5CD                 db  8Fh
.eh_frame:000000000000D5CE                 db 0FFh
.eh_frame:000000000000D5CF                 db 0FFh
.eh_frame:000000000000D5D0                 db  28h ; (
.eh_frame:000000000000D5D1                 db    0
.eh_frame:000000000000D5D2                 db    0
.eh_frame:000000000000D5D3                 db    0
.eh_frame:000000000000D5D4                 db    0
.eh_frame:000000000000D5D5                 db  41h ; A
.eh_frame:000000000000D5D6                 db  0Eh
.eh_frame:000000000000D5D7                 db  10h
.eh_frame:000000000000D5D8                 db  86h
.eh_frame:000000000000D5D9                 db    2
.eh_frame:000000000000D5DA                 db  41h ; A
.eh_frame:000000000000D5DB                 db  0Eh
.eh_frame:000000000000D5DC                 db  18h
.eh_frame:000000000000D5DD                 db  83h
.eh_frame:000000000000D5DE                 db    3
.eh_frame:000000000000D5DF                 db  4Dh ; M
.eh_frame:000000000000D5E0                 db  0Eh
.eh_frame:000000000000D5E1                 db  20h
.eh_frame:000000000000D5E2                 db  49h ; I
.eh_frame:000000000000D5E3                 db  0Eh
.eh_frame:000000000000D5E4                 db  18h
.eh_frame:000000000000D5E5                 db  47h ; G
.eh_frame:000000000000D5E6                 db  0Eh
.eh_frame:000000000000D5E7                 db  10h
.eh_frame:000000000000D5E8                 db  41h ; A
.eh_frame:000000000000D5E9                 db  0Eh
.eh_frame:000000000000D5EA                 db    8
.eh_frame:000000000000D5EB                 db    0
.eh_frame:000000000000D5EC                 db  18h
.eh_frame:000000000000D5ED                 db    0
.eh_frame:000000000000D5EE                 db    0
.eh_frame:000000000000D5EF                 db    0
.eh_frame:000000000000D5F0                 db 0E0h
.eh_frame:000000000000D5F1                 db  0Ah
.eh_frame:000000000000D5F2                 db    0
.eh_frame:000000000000D5F3                 db    0
.eh_frame:000000000000D5F4                 db  6Ch ; l
.eh_frame:000000000000D5F5                 db  8Fh
.eh_frame:000000000000D5F6                 db 0FFh
.eh_frame:000000000000D5F7                 db 0FFh
.eh_frame:000000000000D5F8                 db  13h
.eh_frame:000000000000D5F9                 db    0
.eh_frame:000000000000D5FA                 db    0
.eh_frame:000000000000D5FB                 db    0
.eh_frame:000000000000D5FC                 db    0
.eh_frame:000000000000D5FD                 db  41h ; A
.eh_frame:000000000000D5FE                 db  0Eh
.eh_frame:000000000000D5FF                 db  10h
.eh_frame:000000000000D600                 db  83h
.eh_frame:000000000000D601                 db    2
.eh_frame:000000000000D602                 db  50h ; P
.eh_frame:000000000000D603                 db  0Eh
.eh_frame:000000000000D604                 db    8
.eh_frame:000000000000D605                 db    0
.eh_frame:000000000000D606                 db    0
.eh_frame:000000000000D607                 db    0
.eh_frame:000000000000D608                 db  14h
.eh_frame:000000000000D609                 db    0
.eh_frame:000000000000D60A                 db    0
.eh_frame:000000000000D60B                 db    0
.eh_frame:000000000000D60C                 db 0FCh
.eh_frame:000000000000D60D                 db  0Ah
.eh_frame:000000000000D60E                 db    0
.eh_frame:000000000000D60F                 db    0
.eh_frame:000000000000D610                 db  70h ; p
.eh_frame:000000000000D611                 db  8Fh
.eh_frame:000000000000D612                 db 0FFh
.eh_frame:000000000000D613                 db 0FFh
.eh_frame:000000000000D614                 db  35h ; 5
.eh_frame:000000000000D615                 db    0
.eh_frame:000000000000D616                 db    0
.eh_frame:000000000000D617                 db    0
.eh_frame:000000000000D618                 db    0
.eh_frame:000000000000D619                 db  4Bh ; K
.eh_frame:000000000000D61A                 db  0Eh
.eh_frame:000000000000D61B                 db  10h
.eh_frame:000000000000D61C                 db    0
.eh_frame:000000000000D61D                 db    0
.eh_frame:000000000000D61E                 db    0
.eh_frame:000000000000D61F                 db    0
.eh_frame:000000000000D620                 db  18h
.eh_frame:000000000000D621                 db    0
.eh_frame:000000000000D622                 db    0
.eh_frame:000000000000D623                 db    0
.eh_frame:000000000000D624                 db  14h
.eh_frame:000000000000D625                 db  0Bh
.eh_frame:000000000000D626                 db    0
.eh_frame:000000000000D627                 db    0
.eh_frame:000000000000D628                 db  98h
.eh_frame:000000000000D629                 db  8Fh
.eh_frame:000000000000D62A                 db 0FFh
.eh_frame:000000000000D62B                 db 0FFh
.eh_frame:000000000000D62C                 db  4Fh ; O
.eh_frame:000000000000D62D                 db    0
.eh_frame:000000000000D62E                 db    0
.eh_frame:000000000000D62F                 db    0
.eh_frame:000000000000D630                 db    0
.eh_frame:000000000000D631                 db  44h ; D
.eh_frame:000000000000D632                 db  0Eh
.eh_frame:000000000000D633                 db  10h
.eh_frame:000000000000D634                 db  54h ; T
.eh_frame:000000000000D635                 db  0Ah
.eh_frame:000000000000D636                 db  0Eh
.eh_frame:000000000000D637                 db    8
.eh_frame:000000000000D638                 db  48h ; H
.eh_frame:000000000000D639                 db  0Bh
.eh_frame:000000000000D63A                 db    0
.eh_frame:000000000000D63B                 db    0
.eh_frame:000000000000D63C                 db  10h
.eh_frame:000000000000D63D                 db    0
.eh_frame:000000000000D63E                 db    0
.eh_frame:000000000000D63F                 db    0
.eh_frame:000000000000D640                 db  30h ; 0
.eh_frame:000000000000D641                 db  0Bh
.eh_frame:000000000000D642                 db    0
.eh_frame:000000000000D643                 db    0
.eh_frame:000000000000D644                 db 0CCh
.eh_frame:000000000000D645                 db  8Fh
.eh_frame:000000000000D646                 db 0FFh
.eh_frame:000000000000D647                 db 0FFh
.eh_frame:000000000000D648                 db  29h ; )
.eh_frame:000000000000D649                 db    0
.eh_frame:000000000000D64A                 db    0
.eh_frame:000000000000D64B                 db    0
.eh_frame:000000000000D64C                 db    0
.eh_frame:000000000000D64D                 db    0
.eh_frame:000000000000D64E                 db    0
.eh_frame:000000000000D64F                 db    0
.eh_frame:000000000000D650                 db  4Ch ; L
.eh_frame:000000000000D651                 db    0
.eh_frame:000000000000D652                 db    0
.eh_frame:000000000000D653                 db    0
.eh_frame:000000000000D654                 db  44h ; D
.eh_frame:000000000000D655                 db  0Bh
.eh_frame:000000000000D656                 db    0
.eh_frame:000000000000D657                 db    0
.eh_frame:000000000000D658                 db 0E8h
.eh_frame:000000000000D659                 db  8Fh
.eh_frame:000000000000D65A                 db 0FFh
.eh_frame:000000000000D65B                 db 0FFh
.eh_frame:000000000000D65C                 db  1Ch
.eh_frame:000000000000D65D                 db    4
.eh_frame:000000000000D65E                 db    0
.eh_frame:000000000000D65F                 db    0
.eh_frame:000000000000D660                 db    0
.eh_frame:000000000000D661                 db  42h ; B
.eh_frame:000000000000D662                 db  0Eh
.eh_frame:000000000000D663                 db  10h
.eh_frame:000000000000D664                 db  8Fh
.eh_frame:000000000000D665                 db    2
.eh_frame:000000000000D666                 db  42h ; B
.eh_frame:000000000000D667                 db  0Eh
.eh_frame:000000000000D668                 db  18h
.eh_frame:000000000000D669                 db  8Eh
.eh_frame:000000000000D66A                 db    3
.eh_frame:000000000000D66B                 db  42h ; B
.eh_frame:000000000000D66C                 db  0Eh
.eh_frame:000000000000D66D                 db  20h
.eh_frame:000000000000D66E                 db  8Dh
.eh_frame:000000000000D66F                 db    4
.eh_frame:000000000000D670                 db  42h ; B
.eh_frame:000000000000D671                 db  0Eh
.eh_frame:000000000000D672                 db  28h ; (
.eh_frame:000000000000D673                 db  8Ch
.eh_frame:000000000000D674                 db    5
.eh_frame:000000000000D675                 db  41h ; A
.eh_frame:000000000000D676                 db  0Eh
.eh_frame:000000000000D677                 db  30h ; 0
.eh_frame:000000000000D678                 db  86h
.eh_frame:000000000000D679                 db    6
.eh_frame:000000000000D67A                 db  41h ; A
.eh_frame:000000000000D67B                 db  0Eh
.eh_frame:000000000000D67C                 db  38h ; 8
.eh_frame:000000000000D67D                 db  83h
.eh_frame:000000000000D67E                 db    7
.eh_frame:000000000000D67F                 db  44h ; D
.eh_frame:000000000000D680                 db  0Eh
.eh_frame:000000000000D681                 db  60h ; `
.eh_frame:000000000000D682                 db    2
.eh_frame:000000000000D683                 db 0E9h
.eh_frame:000000000000D684                 db  0Ah
.eh_frame:000000000000D685                 db  0Eh
.eh_frame:000000000000D686                 db  38h ; 8
.eh_frame:000000000000D687                 db  41h ; A
.eh_frame:000000000000D688                 db  0Eh
.eh_frame:000000000000D689                 db  30h ; 0
.eh_frame:000000000000D68A                 db  41h ; A
.eh_frame:000000000000D68B                 db  0Eh
.eh_frame:000000000000D68C                 db  28h ; (
.eh_frame:000000000000D68D                 db  42h ; B
.eh_frame:000000000000D68E                 db  0Eh
.eh_frame:000000000000D68F                 db  20h
.eh_frame:000000000000D690                 db  42h ; B
.eh_frame:000000000000D691                 db  0Eh
.eh_frame:000000000000D692                 db  18h
.eh_frame:000000000000D693                 db  42h ; B
.eh_frame:000000000000D694                 db  0Eh
.eh_frame:000000000000D695                 db  10h
.eh_frame:000000000000D696                 db  42h ; B
.eh_frame:000000000000D697                 db  0Eh
.eh_frame:000000000000D698                 db    8
.eh_frame:000000000000D699                 db  47h ; G
.eh_frame:000000000000D69A                 db  0Bh
.eh_frame:000000000000D69B                 db    0
.eh_frame:000000000000D69C                 db    0
.eh_frame:000000000000D69D                 db    0
.eh_frame:000000000000D69E                 db    0
.eh_frame:000000000000D69F                 db    0
.eh_frame:000000000000D6A0                 db  10h
.eh_frame:000000000000D6A1                 db    0
.eh_frame:000000000000D6A2                 db    0
.eh_frame:000000000000D6A3                 db    0
.eh_frame:000000000000D6A4                 db  94h
.eh_frame:000000000000D6A5                 db  0Bh
.eh_frame:000000000000D6A6                 db    0
.eh_frame:000000000000D6A7                 db    0
.eh_frame:000000000000D6A8                 db 0B8h
.eh_frame:000000000000D6A9                 db  93h
.eh_frame:000000000000D6AA                 db 0FFh
.eh_frame:000000000000D6AB                 db 0FFh
.eh_frame:000000000000D6AC                 db  1Ah
.eh_frame:000000000000D6AD                 db    0
.eh_frame:000000000000D6AE                 db    0
.eh_frame:000000000000D6AF                 db    0
.eh_frame:000000000000D6B0                 db    0
.eh_frame:000000000000D6B1                 db    0
.eh_frame:000000000000D6B2                 db    0
.eh_frame:000000000000D6B3                 db    0
.eh_frame:000000000000D6B4                 db  10h
.eh_frame:000000000000D6B5                 db    0
.eh_frame:000000000000D6B6                 db    0
.eh_frame:000000000000D6B7                 db    0
.eh_frame:000000000000D6B8                 db 0A8h
.eh_frame:000000000000D6B9                 db  0Bh
.eh_frame:000000000000D6BA                 db    0
.eh_frame:000000000000D6BB                 db    0
.eh_frame:000000000000D6BC                 db 0C4h
.eh_frame:000000000000D6BD                 db  93h
.eh_frame:000000000000D6BE                 db 0FFh
.eh_frame:000000000000D6BF                 db 0FFh
.eh_frame:000000000000D6C0                 db  0Dh
.eh_frame:000000000000D6C1                 db    0
.eh_frame:000000000000D6C2                 db    0
.eh_frame:000000000000D6C3                 db    0
.eh_frame:000000000000D6C4                 db    0
.eh_frame:000000000000D6C5                 db    0
.eh_frame:000000000000D6C6                 db    0
.eh_frame:000000000000D6C7                 db    0
.eh_frame:000000000000D6C8                 db  10h
.eh_frame:000000000000D6C9                 db    0
.eh_frame:000000000000D6CA                 db    0
.eh_frame:000000000000D6CB                 db    0
.eh_frame:000000000000D6CC                 db 0BCh
.eh_frame:000000000000D6CD                 db  0Bh
.eh_frame:000000000000D6CE                 db    0
.eh_frame:000000000000D6CF                 db    0
.eh_frame:000000000000D6D0                 db 0C0h
.eh_frame:000000000000D6D1                 db  93h
.eh_frame:000000000000D6D2                 db 0FFh
.eh_frame:000000000000D6D3                 db 0FFh
.eh_frame:000000000000D6D4                 db  0Ch
.eh_frame:000000000000D6D5                 db    0
.eh_frame:000000000000D6D6                 db    0
.eh_frame:000000000000D6D7                 db    0
.eh_frame:000000000000D6D8                 db    0
.eh_frame:000000000000D6D9                 db    0
.eh_frame:000000000000D6DA                 db    0
.eh_frame:000000000000D6DB                 db    0
.eh_frame:000000000000D6DC                 db  10h
.eh_frame:000000000000D6DD                 db    0
.eh_frame:000000000000D6DE                 db    0
.eh_frame:000000000000D6DF                 db    0
.eh_frame:000000000000D6E0                 db 0D0h
.eh_frame:000000000000D6E1                 db  0Bh
.eh_frame:000000000000D6E2                 db    0
.eh_frame:000000000000D6E3                 db    0
.eh_frame:000000000000D6E4                 db 0BCh
.eh_frame:000000000000D6E5                 db  93h
.eh_frame:000000000000D6E6                 db 0FFh
.eh_frame:000000000000D6E7                 db 0FFh
.eh_frame:000000000000D6E8                 db  0Ah
.eh_frame:000000000000D6E9                 db    0
.eh_frame:000000000000D6EA                 db    0
.eh_frame:000000000000D6EB                 db    0
.eh_frame:000000000000D6EC                 db    0
.eh_frame:000000000000D6ED                 db    0
.eh_frame:000000000000D6EE                 db    0
.eh_frame:000000000000D6EF                 db    0
.eh_frame:000000000000D6F0                 db  10h
.eh_frame:000000000000D6F1                 db    0
.eh_frame:000000000000D6F2                 db    0
.eh_frame:000000000000D6F3                 db    0
.eh_frame:000000000000D6F4                 db 0E4h
.eh_frame:000000000000D6F5                 db  0Bh
.eh_frame:000000000000D6F6                 db    0
.eh_frame:000000000000D6F7                 db    0
.eh_frame:000000000000D6F8                 db 0B8h
.eh_frame:000000000000D6F9                 db  93h
.eh_frame:000000000000D6FA                 db 0FFh
.eh_frame:000000000000D6FB                 db 0FFh
.eh_frame:000000000000D6FC                 db  26h ; &
.eh_frame:000000000000D6FD                 db    0
.eh_frame:000000000000D6FE                 db    0
.eh_frame:000000000000D6FF                 db    0
.eh_frame:000000000000D700                 db    0
.eh_frame:000000000000D701                 db    0
.eh_frame:000000000000D702                 db    0
.eh_frame:000000000000D703                 db    0
.eh_frame:000000000000D704                 db  38h ; 8
.eh_frame:000000000000D705                 db    0
.eh_frame:000000000000D706                 db    0
.eh_frame:000000000000D707                 db    0
.eh_frame:000000000000D708                 db 0F8h
.eh_frame:000000000000D709                 db  0Bh
.eh_frame:000000000000D70A                 db    0
.eh_frame:000000000000D70B                 db    0
.eh_frame:000000000000D70C                 db 0D4h
.eh_frame:000000000000D70D                 db  93h
.eh_frame:000000000000D70E                 db 0FFh
.eh_frame:000000000000D70F                 db 0FFh
.eh_frame:000000000000D710                 db 0C5h
.eh_frame:000000000000D711                 db    1
.eh_frame:000000000000D712                 db    0
.eh_frame:000000000000D713                 db    0
.eh_frame:000000000000D714                 db    0
.eh_frame:000000000000D715                 db  42h ; B
.eh_frame:000000000000D716                 db  0Eh
.eh_frame:000000000000D717                 db  10h
.eh_frame:000000000000D718                 db  8Ch
.eh_frame:000000000000D719                 db    2
.eh_frame:000000000000D71A                 db  41h ; A
.eh_frame:000000000000D71B                 db  0Eh
.eh_frame:000000000000D71C                 db  18h
.eh_frame:000000000000D71D                 db  86h
.eh_frame:000000000000D71E                 db    3
.eh_frame:000000000000D71F                 db  44h ; D
.eh_frame:000000000000D720                 db  0Eh
.eh_frame:000000000000D721                 db  20h
.eh_frame:000000000000D722                 db  83h
.eh_frame:000000000000D723                 db    4
.eh_frame:000000000000D724                 db    2
.eh_frame:000000000000D725                 db  72h ; r
.eh_frame:000000000000D726                 db  0Ah
.eh_frame:000000000000D727                 db  0Eh
.eh_frame:000000000000D728                 db  18h
.eh_frame:000000000000D729                 db  41h ; A
.eh_frame:000000000000D72A                 db  0Eh
.eh_frame:000000000000D72B                 db  10h
.eh_frame:000000000000D72C                 db  42h ; B
.eh_frame:000000000000D72D                 db  0Eh
.eh_frame:000000000000D72E                 db    8
.eh_frame:000000000000D72F                 db  44h ; D
.eh_frame:000000000000D730                 db  0Bh
.eh_frame:000000000000D731                 db    2
.eh_frame:000000000000D732                 db  54h ; T
.eh_frame:000000000000D733                 db  0Ah
.eh_frame:000000000000D734                 db  0Eh
.eh_frame:000000000000D735                 db  18h
.eh_frame:000000000000D736                 db  45h ; E
.eh_frame:000000000000D737                 db  0Eh
.eh_frame:000000000000D738                 db  10h
.eh_frame:000000000000D739                 db  42h ; B
.eh_frame:000000000000D73A                 db  0Eh
.eh_frame:000000000000D73B                 db    8
.eh_frame:000000000000D73C                 db  45h ; E
.eh_frame:000000000000D73D                 db  0Bh
.eh_frame:000000000000D73E                 db    0
.eh_frame:000000000000D73F                 db    0
.eh_frame:000000000000D740                 db  4Ch ; L
.eh_frame:000000000000D741                 db    0
.eh_frame:000000000000D742                 db    0
.eh_frame:000000000000D743                 db    0
.eh_frame:000000000000D744                 db  34h ; 4
.eh_frame:000000000000D745                 db  0Ch
.eh_frame:000000000000D746                 db    0
.eh_frame:000000000000D747                 db    0
.eh_frame:000000000000D748                 db  68h ; h
.eh_frame:000000000000D749                 db  95h
.eh_frame:000000000000D74A                 db 0FFh
.eh_frame:000000000000D74B                 db 0FFh
.eh_frame:000000000000D74C                 db    5
.eh_frame:000000000000D74D                 db    1
.eh_frame:000000000000D74E                 db    0
.eh_frame:000000000000D74F                 db    0
.eh_frame:000000000000D750                 db    0
.eh_frame:000000000000D751                 db  42h ; B
.eh_frame:000000000000D752                 db  0Eh
.eh_frame:000000000000D753                 db  10h
.eh_frame:000000000000D754                 db  8Dh
.eh_frame:000000000000D755                 db    2
.eh_frame:000000000000D756                 db  42h ; B
.eh_frame:000000000000D757                 db  0Eh
.eh_frame:000000000000D758                 db  18h
.eh_frame:000000000000D759                 db  8Ch
.eh_frame:000000000000D75A                 db    3
.eh_frame:000000000000D75B                 db  44h ; D
.eh_frame:000000000000D75C                 db  0Eh
.eh_frame:000000000000D75D                 db  20h
.eh_frame:000000000000D75E                 db  86h
.eh_frame:000000000000D75F                 db    4
.eh_frame:000000000000D760                 db  41h ; A
.eh_frame:000000000000D761                 db  0Eh
.eh_frame:000000000000D762                 db  28h ; (
.eh_frame:000000000000D763                 db  83h
.eh_frame:000000000000D764                 db    5
.eh_frame:000000000000D765                 db  4Ah ; J
.eh_frame:000000000000D766                 db  0Eh
.eh_frame:000000000000D767                 db  30h ; 0
.eh_frame:000000000000D768                 db    2
.eh_frame:000000000000D769                 db 0B3h
.eh_frame:000000000000D76A                 db  0Ah
.eh_frame:000000000000D76B                 db  0Eh
.eh_frame:000000000000D76C                 db  28h ; (
.eh_frame:000000000000D76D                 db  41h ; A
.eh_frame:000000000000D76E                 db  0Eh
.eh_frame:000000000000D76F                 db  20h
.eh_frame:000000000000D770                 db  41h ; A
.eh_frame:000000000000D771                 db  0Eh
.eh_frame:000000000000D772                 db  18h
.eh_frame:000000000000D773                 db  42h ; B
.eh_frame:000000000000D774                 db  0Eh
.eh_frame:000000000000D775                 db  10h
.eh_frame:000000000000D776                 db  42h ; B
.eh_frame:000000000000D777                 db  0Eh
.eh_frame:000000000000D778                 db    8
.eh_frame:000000000000D779                 db  44h ; D
.eh_frame:000000000000D77A                 db  0Bh
.eh_frame:000000000000D77B                 db  5Dh ; ]
.eh_frame:000000000000D77C                 db  0Ah
.eh_frame:000000000000D77D                 db  0Eh
.eh_frame:000000000000D77E                 db  28h ; (
.eh_frame:000000000000D77F                 db  44h ; D
.eh_frame:000000000000D780                 db  0Eh
.eh_frame:000000000000D781                 db  20h
.eh_frame:000000000000D782                 db  41h ; A
.eh_frame:000000000000D783                 db  0Eh
.eh_frame:000000000000D784                 db  18h
.eh_frame:000000000000D785                 db  42h ; B
.eh_frame:000000000000D786                 db  0Eh
.eh_frame:000000000000D787                 db  10h
.eh_frame:000000000000D788                 db  42h ; B
.eh_frame:000000000000D789                 db  0Eh
.eh_frame:000000000000D78A                 db    8
.eh_frame:000000000000D78B                 db  4Ah ; J
.eh_frame:000000000000D78C                 db  0Bh
.eh_frame:000000000000D78D                 db    0
.eh_frame:000000000000D78E                 db    0
.eh_frame:000000000000D78F                 db    0
.eh_frame:000000000000D790                 db  34h ; 4
.eh_frame:000000000000D791                 db    0
.eh_frame:000000000000D792                 db    0
.eh_frame:000000000000D793                 db    0
.eh_frame:000000000000D794                 db  84h
.eh_frame:000000000000D795                 db  0Ch
.eh_frame:000000000000D796                 db    0
.eh_frame:000000000000D797                 db    0
.eh_frame:000000000000D798                 db  28h ; (
.eh_frame:000000000000D799                 db  96h
.eh_frame:000000000000D79A                 db 0FFh
.eh_frame:000000000000D79B                 db 0FFh
.eh_frame:000000000000D79C                 db  8Ah
.eh_frame:000000000000D79D                 db    0
.eh_frame:000000000000D79E                 db    0
.eh_frame:000000000000D79F                 db    0
.eh_frame:000000000000D7A0                 db    0
.eh_frame:000000000000D7A1                 db  42h ; B
.eh_frame:000000000000D7A2                 db  0Eh
.eh_frame:000000000000D7A3                 db  10h
.eh_frame:000000000000D7A4                 db  8Dh
.eh_frame:000000000000D7A5                 db    2
.eh_frame:000000000000D7A6                 db  42h ; B
.eh_frame:000000000000D7A7                 db  0Eh
.eh_frame:000000000000D7A8                 db  18h
.eh_frame:000000000000D7A9                 db  8Ch
.eh_frame:000000000000D7AA                 db    3
.eh_frame:000000000000D7AB                 db  44h ; D
.eh_frame:000000000000D7AC                 db  0Eh
.eh_frame:000000000000D7AD                 db  20h
.eh_frame:000000000000D7AE                 db  86h
.eh_frame:000000000000D7AF                 db    4
.eh_frame:000000000000D7B0                 db  48h ; H
.eh_frame:000000000000D7B1                 db  0Eh
.eh_frame:000000000000D7B2                 db  28h ; (
.eh_frame:000000000000D7B3                 db  83h
.eh_frame:000000000000D7B4                 db    5
.eh_frame:000000000000D7B5                 db  4Ah ; J
.eh_frame:000000000000D7B6                 db  0Eh
.eh_frame:000000000000D7B7                 db  30h ; 0
.eh_frame:000000000000D7B8                 db    2
.eh_frame:000000000000D7B9                 db  66h ; f
.eh_frame:000000000000D7BA                 db  0Eh
.eh_frame:000000000000D7BB                 db  28h ; (
.eh_frame:000000000000D7BC                 db  44h ; D
.eh_frame:000000000000D7BD                 db  0Eh
.eh_frame:000000000000D7BE                 db  20h
.eh_frame:000000000000D7BF                 db  41h ; A
.eh_frame:000000000000D7C0                 db  0Eh
.eh_frame:000000000000D7C1                 db  18h
.eh_frame:000000000000D7C2                 db  42h ; B
.eh_frame:000000000000D7C3                 db  0Eh
.eh_frame:000000000000D7C4                 db  10h
.eh_frame:000000000000D7C5                 db  42h ; B
.eh_frame:000000000000D7C6                 db  0Eh
.eh_frame:000000000000D7C7                 db    8
.eh_frame:000000000000D7C8                 db  28h ; (
.eh_frame:000000000000D7C9                 db    0
.eh_frame:000000000000D7CA                 db    0
.eh_frame:000000000000D7CB                 db    0
.eh_frame:000000000000D7CC                 db 0BCh
.eh_frame:000000000000D7CD                 db  0Ch
.eh_frame:000000000000D7CE                 db    0
.eh_frame:000000000000D7CF                 db    0
.eh_frame:000000000000D7D0                 db  80h
.eh_frame:000000000000D7D1                 db  96h
.eh_frame:000000000000D7D2                 db 0FFh
.eh_frame:000000000000D7D3                 db 0FFh
.eh_frame:000000000000D7D4                 db  42h ; B
.eh_frame:000000000000D7D5                 db    0
.eh_frame:000000000000D7D6                 db    0
.eh_frame:000000000000D7D7                 db    0
.eh_frame:000000000000D7D8                 db    0
.eh_frame:000000000000D7D9                 db  46h ; F
.eh_frame:000000000000D7DA                 db  0Eh
.eh_frame:000000000000D7DB                 db  10h
.eh_frame:000000000000D7DC                 db  86h
.eh_frame:000000000000D7DD                 db    2
.eh_frame:000000000000D7DE                 db  41h ; A
.eh_frame:000000000000D7DF                 db  0Eh
.eh_frame:000000000000D7E0                 db  18h
.eh_frame:000000000000D7E1                 db  83h
.eh_frame:000000000000D7E2                 db    3
.eh_frame:000000000000D7E3                 db  47h ; G
.eh_frame:000000000000D7E4                 db  0Eh
.eh_frame:000000000000D7E5                 db  20h
.eh_frame:000000000000D7E6                 db  68h ; h
.eh_frame:000000000000D7E7                 db  0Eh
.eh_frame:000000000000D7E8                 db  18h
.eh_frame:000000000000D7E9                 db  41h ; A
.eh_frame:000000000000D7EA                 db  0Eh
.eh_frame:000000000000D7EB                 db  10h
.eh_frame:000000000000D7EC                 db  41h ; A
.eh_frame:000000000000D7ED                 db  0Eh
.eh_frame:000000000000D7EE                 db    8
.eh_frame:000000000000D7EF                 db  48h ; H
.eh_frame:000000000000D7F0                 db 0C3h
.eh_frame:000000000000D7F1                 db 0C6h
.eh_frame:000000000000D7F2                 db    0
.eh_frame:000000000000D7F3                 db    0
.eh_frame:000000000000D7F4                 db  18h
.eh_frame:000000000000D7F5                 db    0
.eh_frame:000000000000D7F6                 db    0
.eh_frame:000000000000D7F7                 db    0
.eh_frame:000000000000D7F8                 db 0E8h
.eh_frame:000000000000D7F9                 db  0Ch
.eh_frame:000000000000D7FA                 db    0
.eh_frame:000000000000D7FB                 db    0
.eh_frame:000000000000D7FC                 db 0A4h
.eh_frame:000000000000D7FD                 db  96h
.eh_frame:000000000000D7FE                 db 0FFh
.eh_frame:000000000000D7FF                 db 0FFh
.eh_frame:000000000000D800                 db  39h ; 9
.eh_frame:000000000000D801                 db    0
.eh_frame:000000000000D802                 db    0
.eh_frame:000000000000D803                 db    0
.eh_frame:000000000000D804                 db    0
.eh_frame:000000000000D805                 db  41h ; A
.eh_frame:000000000000D806                 db  0Eh
.eh_frame:000000000000D807                 db  10h
.eh_frame:000000000000D808                 db  83h
.eh_frame:000000000000D809                 db    2
.eh_frame:000000000000D80A                 db  68h ; h
.eh_frame:000000000000D80B                 db  0Ah
.eh_frame:000000000000D80C                 db  0Eh
.eh_frame:000000000000D80D                 db    8
.eh_frame:000000000000D80E                 db  47h ; G
.eh_frame:000000000000D80F                 db  0Bh
.eh_frame:000000000000D810                 db  38h ; 8
.eh_frame:000000000000D811                 db    0
.eh_frame:000000000000D812                 db    0
.eh_frame:000000000000D813                 db    0
.eh_frame:000000000000D814                 db    4
.eh_frame:000000000000D815                 db  0Dh
.eh_frame:000000000000D816                 db    0
.eh_frame:000000000000D817                 db    0
.eh_frame:000000000000D818                 db 0C8h
.eh_frame:000000000000D819                 db  96h
.eh_frame:000000000000D81A                 db 0FFh
.eh_frame:000000000000D81B                 db 0FFh
.eh_frame:000000000000D81C                 db  2Ch ; ,
.eh_frame:000000000000D81D                 db    1
.eh_frame:000000000000D81E                 db    0
.eh_frame:000000000000D81F                 db    0
.eh_frame:000000000000D820                 db    0
.eh_frame:000000000000D821                 db  42h ; B
.eh_frame:000000000000D822                 db  0Eh
.eh_frame:000000000000D823                 db  10h
.eh_frame:000000000000D824                 db  8Dh
.eh_frame:000000000000D825                 db    2
.eh_frame:000000000000D826                 db  42h ; B
.eh_frame:000000000000D827                 db  0Eh
.eh_frame:000000000000D828                 db  18h
.eh_frame:000000000000D829                 db  8Ch
.eh_frame:000000000000D82A                 db    3
.eh_frame:000000000000D82B                 db  41h ; A
.eh_frame:000000000000D82C                 db  0Eh
.eh_frame:000000000000D82D                 db  20h
.eh_frame:000000000000D82E                 db  86h
.eh_frame:000000000000D82F                 db    4
.eh_frame:000000000000D830                 db  41h ; A
.eh_frame:000000000000D831                 db  0Eh
.eh_frame:000000000000D832                 db  28h ; (
.eh_frame:000000000000D833                 db  83h
.eh_frame:000000000000D834                 db    5
.eh_frame:000000000000D835                 db  47h ; G
.eh_frame:000000000000D836                 db  0Eh
.eh_frame:000000000000D837                 db 0C0h
.eh_frame:000000000000D838                 db    1
.eh_frame:000000000000D839                 db    2
.eh_frame:000000000000D83A                 db 0A4h
.eh_frame:000000000000D83B                 db  0Ah
.eh_frame:000000000000D83C                 db  0Eh
.eh_frame:000000000000D83D                 db  28h ; (
.eh_frame:000000000000D83E                 db  41h ; A
.eh_frame:000000000000D83F                 db  0Eh
.eh_frame:000000000000D840                 db  20h
.eh_frame:000000000000D841                 db  41h ; A
.eh_frame:000000000000D842                 db  0Eh
.eh_frame:000000000000D843                 db  18h
.eh_frame:000000000000D844                 db  42h ; B
.eh_frame:000000000000D845                 db  0Eh
.eh_frame:000000000000D846                 db  10h
.eh_frame:000000000000D847                 db  42h ; B
.eh_frame:000000000000D848                 db  0Eh
.eh_frame:000000000000D849                 db    8
.eh_frame:000000000000D84A                 db  49h ; I
.eh_frame:000000000000D84B                 db  0Bh
.eh_frame:000000000000D84C                 db  20h
.eh_frame:000000000000D84D                 db    0
.eh_frame:000000000000D84E                 db    0
.eh_frame:000000000000D84F                 db    0
.eh_frame:000000000000D850                 db  40h ; @
.eh_frame:000000000000D851                 db  0Dh
.eh_frame:000000000000D852                 db    0
.eh_frame:000000000000D853                 db    0
.eh_frame:000000000000D854                 db 0BCh
.eh_frame:000000000000D855                 db  97h
.eh_frame:000000000000D856                 db 0FFh
.eh_frame:000000000000D857                 db 0FFh
.eh_frame:000000000000D858                 db  6Ah ; j
.eh_frame:000000000000D859                 db    0
.eh_frame:000000000000D85A                 db    0
.eh_frame:000000000000D85B                 db    0
.eh_frame:000000000000D85C                 db    0
.eh_frame:000000000000D85D                 db  44h ; D
.eh_frame:000000000000D85E                 db  0Eh
.eh_frame:000000000000D85F                 db  10h
.eh_frame:000000000000D860                 db  72h ; r
.eh_frame:000000000000D861                 db  0Ah
.eh_frame:000000000000D862                 db  0Eh
.eh_frame:000000000000D863                 db    8
.eh_frame:000000000000D864                 db  4Ah ; J
.eh_frame:000000000000D865                 db  0Bh
.eh_frame:000000000000D866                 db  5Bh ; [
.eh_frame:000000000000D867                 db  0Ah
.eh_frame:000000000000D868                 db  0Eh
.eh_frame:000000000000D869                 db    8
.eh_frame:000000000000D86A                 db  45h ; E
.eh_frame:000000000000D86B                 db  0Bh
.eh_frame:000000000000D86C                 db  49h ; I
.eh_frame:000000000000D86D                 db  0Eh
.eh_frame:000000000000D86E                 db    8
.eh_frame:000000000000D86F                 db    0
.eh_frame:000000000000D870                 db  40h ; @
.eh_frame:000000000000D871                 db    0
.eh_frame:000000000000D872                 db    0
.eh_frame:000000000000D873                 db    0
.eh_frame:000000000000D874                 db  64h ; d
.eh_frame:000000000000D875                 db  0Dh
.eh_frame:000000000000D876                 db    0
.eh_frame:000000000000D877                 db    0
.eh_frame:000000000000D878                 db    8
.eh_frame:000000000000D879                 db  98h
.eh_frame:000000000000D87A                 db 0FFh
.eh_frame:000000000000D87B                 db 0FFh
.eh_frame:000000000000D87C                 db  66h ; f
.eh_frame:000000000000D87D                 db    0
.eh_frame:000000000000D87E                 db    0
.eh_frame:000000000000D87F                 db    0
.eh_frame:000000000000D880                 db    0
.eh_frame:000000000000D881                 db  41h ; A
.eh_frame:000000000000D882                 db  0Eh
.eh_frame:000000000000D883                 db  10h
.eh_frame:000000000000D884                 db  86h
.eh_frame:000000000000D885                 db    2
.eh_frame:000000000000D886                 db  41h ; A
.eh_frame:000000000000D887                 db  0Eh
.eh_frame:000000000000D888                 db  18h
.eh_frame:000000000000D889                 db  83h
.eh_frame:000000000000D88A                 db    3
.eh_frame:000000000000D88B                 db  49h ; I
.eh_frame:000000000000D88C                 db  0Eh
.eh_frame:000000000000D88D                 db  20h
.eh_frame:000000000000D88E                 db  61h ; a
.eh_frame:000000000000D88F                 db  0Ah
.eh_frame:000000000000D890                 db  0Eh
.eh_frame:000000000000D891                 db  18h
.eh_frame:000000000000D892                 db  41h ; A
.eh_frame:000000000000D893                 db  0Eh
.eh_frame:000000000000D894                 db  10h
.eh_frame:000000000000D895                 db  41h ; A
.eh_frame:000000000000D896                 db  0Eh
.eh_frame:000000000000D897                 db    8
.eh_frame:000000000000D898                 db  42h ; B
.eh_frame:000000000000D899                 db  0Bh
.eh_frame:000000000000D89A                 db  5Bh ; [
.eh_frame:000000000000D89B                 db  0Ah
.eh_frame:000000000000D89C                 db  0Eh
.eh_frame:000000000000D89D                 db  18h
.eh_frame:000000000000D89E                 db  41h ; A
.eh_frame:000000000000D89F                 db  0Eh
.eh_frame:000000000000D8A0                 db  10h
.eh_frame:000000000000D8A1                 db  41h ; A
.eh_frame:000000000000D8A2                 db  0Eh
.eh_frame:000000000000D8A3                 db    8
.eh_frame:000000000000D8A4                 db  43h ; C
.eh_frame:000000000000D8A5                 db  0Bh
.eh_frame:000000000000D8A6                 db  4Eh ; N
.eh_frame:000000000000D8A7                 db  0Ah
.eh_frame:000000000000D8A8                 db  0Eh
.eh_frame:000000000000D8A9                 db  18h
.eh_frame:000000000000D8AA                 db  41h ; A
.eh_frame:000000000000D8AB                 db  0Eh
.eh_frame:000000000000D8AC                 db  10h
.eh_frame:000000000000D8AD                 db  41h ; A
.eh_frame:000000000000D8AE                 db  0Eh
.eh_frame:000000000000D8AF                 db    8
.eh_frame:000000000000D8B0                 db  41h ; A
.eh_frame:000000000000D8B1                 db  0Bh
.eh_frame:000000000000D8B2                 db    0
.eh_frame:000000000000D8B3                 db    0
.eh_frame:000000000000D8B4                 db  28h ; (
.eh_frame:000000000000D8B5                 db    0
.eh_frame:000000000000D8B6                 db    0
.eh_frame:000000000000D8B7                 db    0
.eh_frame:000000000000D8B8                 db 0A8h
.eh_frame:000000000000D8B9                 db  0Dh
.eh_frame:000000000000D8BA                 db    0
.eh_frame:000000000000D8BB                 db    0
.eh_frame:000000000000D8BC                 db  34h ; 4
.eh_frame:000000000000D8BD                 db  98h
.eh_frame:000000000000D8BE                 db 0FFh
.eh_frame:000000000000D8BF                 db 0FFh
.eh_frame:000000000000D8C0                 db  5Ch ; \
.eh_frame:000000000000D8C1                 db    0
.eh_frame:000000000000D8C2                 db    0
.eh_frame:000000000000D8C3                 db    0
.eh_frame:000000000000D8C4                 db    0
.eh_frame:000000000000D8C5                 db  41h ; A
.eh_frame:000000000000D8C6                 db  0Eh
.eh_frame:000000000000D8C7                 db  10h
.eh_frame:000000000000D8C8                 db  86h
.eh_frame:000000000000D8C9                 db    2
.eh_frame:000000000000D8CA                 db  41h ; A
.eh_frame:000000000000D8CB                 db  0Eh
.eh_frame:000000000000D8CC                 db  18h
.eh_frame:000000000000D8CD                 db  83h
.eh_frame:000000000000D8CE                 db    3
.eh_frame:000000000000D8CF                 db  47h ; G
.eh_frame:000000000000D8D0                 db  0Eh
.eh_frame:000000000000D8D1                 db  20h
.eh_frame:000000000000D8D2                 db  6Ch ; l
.eh_frame:000000000000D8D3                 db  0Ah
.eh_frame:000000000000D8D4                 db  0Eh
.eh_frame:000000000000D8D5                 db  18h
.eh_frame:000000000000D8D6                 db  43h ; C
.eh_frame:000000000000D8D7                 db  0Eh
.eh_frame:000000000000D8D8                 db  10h
.eh_frame:000000000000D8D9                 db  41h ; A
.eh_frame:000000000000D8DA                 db  0Eh
.eh_frame:000000000000D8DB                 db    8
.eh_frame:000000000000D8DC                 db  47h ; G
.eh_frame:000000000000D8DD                 db  0Bh
.eh_frame:000000000000D8DE                 db    0
.eh_frame:000000000000D8DF                 db    0
.eh_frame:000000000000D8E0                 db  24h ; $
.eh_frame:000000000000D8E1                 db    0
.eh_frame:000000000000D8E2                 db    0
.eh_frame:000000000000D8E3                 db    0
.eh_frame:000000000000D8E4                 db 0D4h
.eh_frame:000000000000D8E5                 db  0Dh
.eh_frame:000000000000D8E6                 db    0
.eh_frame:000000000000D8E7                 db    0
.eh_frame:000000000000D8E8                 db  68h ; h
.eh_frame:000000000000D8E9                 db  98h
.eh_frame:000000000000D8EA                 db 0FFh
.eh_frame:000000000000D8EB                 db 0FFh
.eh_frame:000000000000D8EC                 db  6Bh ; k
.eh_frame:000000000000D8ED                 db    0
.eh_frame:000000000000D8EE                 db    0
.eh_frame:000000000000D8EF                 db    0
.eh_frame:000000000000D8F0                 db    0
.eh_frame:000000000000D8F1                 db  41h ; A
.eh_frame:000000000000D8F2                 db  0Eh
.eh_frame:000000000000D8F3                 db  10h
.eh_frame:000000000000D8F4                 db  83h
.eh_frame:000000000000D8F5                 db    2
.eh_frame:000000000000D8F6                 db  6Fh ; o
.eh_frame:000000000000D8F7                 db  0Ah
.eh_frame:000000000000D8F8                 db  0Eh
.eh_frame:000000000000D8F9                 db    8
.eh_frame:000000000000D8FA                 db  48h ; H
.eh_frame:000000000000D8FB                 db  0Bh
.eh_frame:000000000000D8FC                 db  5Ah ; Z
.eh_frame:000000000000D8FD                 db  0Ah
.eh_frame:000000000000D8FE                 db  0Eh
.eh_frame:000000000000D8FF                 db    8
.eh_frame:000000000000D900                 db  46h ; F
.eh_frame:000000000000D901                 db  0Bh
.eh_frame:000000000000D902                 db  52h ; R
.eh_frame:000000000000D903                 db  0Eh
.eh_frame:000000000000D904                 db    8
.eh_frame:000000000000D905                 db    0
.eh_frame:000000000000D906                 db    0
.eh_frame:000000000000D907                 db    0
.eh_frame:000000000000D908                 db  1Ch
.eh_frame:000000000000D909                 db    0
.eh_frame:000000000000D90A                 db    0
.eh_frame:000000000000D90B                 db    0
.eh_frame:000000000000D90C                 db 0FCh
.eh_frame:000000000000D90D                 db  0Dh
.eh_frame:000000000000D90E                 db    0
.eh_frame:000000000000D90F                 db    0
.eh_frame:000000000000D910                 db 0B0h
.eh_frame:000000000000D911                 db  98h
.eh_frame:000000000000D912                 db 0FFh
.eh_frame:000000000000D913                 db 0FFh
.eh_frame:000000000000D914                 db  63h ; c
.eh_frame:000000000000D915                 db    0
.eh_frame:000000000000D916                 db    0
.eh_frame:000000000000D917                 db    0
.eh_frame:000000000000D918                 db    0
.eh_frame:000000000000D919                 db  47h ; G
.eh_frame:000000000000D91A                 db  0Eh
.eh_frame:000000000000D91B                 db  10h
.eh_frame:000000000000D91C                 db  83h
.eh_frame:000000000000D91D                 db    2
.eh_frame:000000000000D91E                 db  70h ; p
.eh_frame:000000000000D91F                 db  0Ah
.eh_frame:000000000000D920                 db  0Eh
.eh_frame:000000000000D921                 db    8
.eh_frame:000000000000D922                 db  49h ; I
.eh_frame:000000000000D923                 db  0Bh
.eh_frame:000000000000D924                 db  62h ; b
.eh_frame:000000000000D925                 db  0Eh
.eh_frame:000000000000D926                 db    8
.eh_frame:000000000000D927                 db    0
.eh_frame:000000000000D928                 db  10h
.eh_frame:000000000000D929                 db    0
.eh_frame:000000000000D92A                 db    0
.eh_frame:000000000000D92B                 db    0
.eh_frame:000000000000D92C                 db  1Ch
.eh_frame:000000000000D92D                 db  0Eh
.eh_frame:000000000000D92E                 db    0
.eh_frame:000000000000D92F                 db    0
.eh_frame:000000000000D930                 db    0
.eh_frame:000000000000D931                 db  99h
.eh_frame:000000000000D932                 db 0FFh
.eh_frame:000000000000D933                 db 0FFh
.eh_frame:000000000000D934                 db  3Ah ; :
.eh_frame:000000000000D935                 db    0
.eh_frame:000000000000D936                 db    0
.eh_frame:000000000000D937                 db    0
.eh_frame:000000000000D938                 db    0
.eh_frame:000000000000D939                 db    0
.eh_frame:000000000000D93A                 db    0
.eh_frame:000000000000D93B                 db    0
.eh_frame:000000000000D93C                 db  4Ch ; L
.eh_frame:000000000000D93D                 db    0
.eh_frame:000000000000D93E                 db    0
.eh_frame:000000000000D93F                 db    0
.eh_frame:000000000000D940                 db  30h ; 0
.eh_frame:000000000000D941                 db  0Eh
.eh_frame:000000000000D942                 db    0
.eh_frame:000000000000D943                 db    0
.eh_frame:000000000000D944                 db  2Ch ; ,
.eh_frame:000000000000D945                 db  99h
.eh_frame:000000000000D946                 db 0FFh
.eh_frame:000000000000D947                 db 0FFh
.eh_frame:000000000000D948                 db  7Ah ; z
.eh_frame:000000000000D949                 db    2
.eh_frame:000000000000D94A                 db    0
.eh_frame:000000000000D94B                 db    0
.eh_frame:000000000000D94C                 db    0
.eh_frame:000000000000D94D                 db  42h ; B
.eh_frame:000000000000D94E                 db  0Eh
.eh_frame:000000000000D94F                 db  10h
.eh_frame:000000000000D950                 db  8Fh
.eh_frame:000000000000D951                 db    2
.eh_frame:000000000000D952                 db  42h ; B
.eh_frame:000000000000D953                 db  0Eh
.eh_frame:000000000000D954                 db  18h
.eh_frame:000000000000D955                 db  8Eh
.eh_frame:000000000000D956                 db    3
.eh_frame:000000000000D957                 db  45h ; E
.eh_frame:000000000000D958                 db  0Eh
.eh_frame:000000000000D959                 db  20h
.eh_frame:000000000000D95A                 db  8Dh
.eh_frame:000000000000D95B                 db    4
.eh_frame:000000000000D95C                 db  42h ; B
.eh_frame:000000000000D95D                 db  0Eh
.eh_frame:000000000000D95E                 db  28h ; (
.eh_frame:000000000000D95F                 db  8Ch
.eh_frame:000000000000D960                 db    5
.eh_frame:000000000000D961                 db  44h ; D
.eh_frame:000000000000D962                 db  0Eh
.eh_frame:000000000000D963                 db  30h ; 0
.eh_frame:000000000000D964                 db  86h
.eh_frame:000000000000D965                 db    6
.eh_frame:000000000000D966                 db  41h ; A
.eh_frame:000000000000D967                 db  0Eh
.eh_frame:000000000000D968                 db  38h ; 8
.eh_frame:000000000000D969                 db  83h
.eh_frame:000000000000D96A                 db    7
.eh_frame:000000000000D96B                 db  4Dh ; M
.eh_frame:000000000000D96C                 db  0Eh
.eh_frame:000000000000D96D                 db 0F0h
.eh_frame:000000000000D96E                 db    1
.eh_frame:000000000000D96F                 db    3
.eh_frame:000000000000D970                 db    8
.eh_frame:000000000000D971                 db    1
.eh_frame:000000000000D972                 db  0Ah
.eh_frame:000000000000D973                 db  0Eh
.eh_frame:000000000000D974                 db  38h ; 8
.eh_frame:000000000000D975                 db  41h ; A
.eh_frame:000000000000D976                 db  0Eh
.eh_frame:000000000000D977                 db  30h ; 0
.eh_frame:000000000000D978                 db  41h ; A
.eh_frame:000000000000D979                 db  0Eh
.eh_frame:000000000000D97A                 db  28h ; (
.eh_frame:000000000000D97B                 db  42h ; B
.eh_frame:000000000000D97C                 db  0Eh
.eh_frame:000000000000D97D                 db  20h
.eh_frame:000000000000D97E                 db  42h ; B
.eh_frame:000000000000D97F                 db  0Eh
.eh_frame:000000000000D980                 db  18h
.eh_frame:000000000000D981                 db  42h ; B
.eh_frame:000000000000D982                 db  0Eh
.eh_frame:000000000000D983                 db  10h
.eh_frame:000000000000D984                 db  42h ; B
.eh_frame:000000000000D985                 db  0Eh
.eh_frame:000000000000D986                 db    8
.eh_frame:000000000000D987                 db  41h ; A
.eh_frame:000000000000D988                 db  0Bh
.eh_frame:000000000000D989                 db    0
.eh_frame:000000000000D98A                 db    0
.eh_frame:000000000000D98B                 db    0
.eh_frame:000000000000D98C                 db  40h ; @
.eh_frame:000000000000D98D                 db    0
.eh_frame:000000000000D98E                 db    0
.eh_frame:000000000000D98F                 db    0
.eh_frame:000000000000D990                 db  80h
.eh_frame:000000000000D991                 db  0Eh
.eh_frame:000000000000D992                 db    0
.eh_frame:000000000000D993                 db    0
.eh_frame:000000000000D994                 db  5Ch ; \
.eh_frame:000000000000D995                 db  9Bh
.eh_frame:000000000000D996                 db 0FFh
.eh_frame:000000000000D997                 db 0FFh
.eh_frame:000000000000D998                 db 0AFh
.eh_frame:000000000000D999                 db    0
.eh_frame:000000000000D99A                 db    0
.eh_frame:000000000000D99B                 db    0
.eh_frame:000000000000D99C                 db    0
.eh_frame:000000000000D99D                 db  48h ; H
.eh_frame:000000000000D99E                 db  0Eh
.eh_frame:000000000000D99F                 db  10h
.eh_frame:000000000000D9A0                 db  8Ch
.eh_frame:000000000000D9A1                 db    2
.eh_frame:000000000000D9A2                 db  44h ; D
.eh_frame:000000000000D9A3                 db  0Eh
.eh_frame:000000000000D9A4                 db  18h
.eh_frame:000000000000D9A5                 db  86h
.eh_frame:000000000000D9A6                 db    3
.eh_frame:000000000000D9A7                 db  41h ; A
.eh_frame:000000000000D9A8                 db  0Eh
.eh_frame:000000000000D9A9                 db  20h
.eh_frame:000000000000D9AA                 db  83h
.eh_frame:000000000000D9AB                 db    4
.eh_frame:000000000000D9AC                 db    2
.eh_frame:000000000000D9AD                 db  65h ; e
.eh_frame:000000000000D9AE                 db  0Ah
.eh_frame:000000000000D9AF                 db  0Eh
.eh_frame:000000000000D9B0                 db  18h
.eh_frame:000000000000D9B1                 db  46h ; F
.eh_frame:000000000000D9B2                 db  0Eh
.eh_frame:000000000000D9B3                 db  10h
.eh_frame:000000000000D9B4                 db  42h ; B
.eh_frame:000000000000D9B5                 db  0Eh
.eh_frame:000000000000D9B6                 db    8
.eh_frame:000000000000D9B7                 db  46h ; F
.eh_frame:000000000000D9B8                 db  0Bh
.eh_frame:000000000000D9B9                 db  5Eh ; ^
.eh_frame:000000000000D9BA                 db  0Ah
.eh_frame:000000000000D9BB                 db  0Eh
.eh_frame:000000000000D9BC                 db  18h
.eh_frame:000000000000D9BD                 db  41h ; A
.eh_frame:000000000000D9BE                 db  0Eh
.eh_frame:000000000000D9BF                 db  10h
.eh_frame:000000000000D9C0                 db  42h ; B
.eh_frame:000000000000D9C1                 db  0Eh
.eh_frame:000000000000D9C2                 db    8
.eh_frame:000000000000D9C3                 db  47h ; G
.eh_frame:000000000000D9C4                 db  0Bh
.eh_frame:000000000000D9C5                 db  41h ; A
.eh_frame:000000000000D9C6                 db  0Eh
.eh_frame:000000000000D9C7                 db  18h
.eh_frame:000000000000D9C8                 db  43h ; C
.eh_frame:000000000000D9C9                 db  0Eh
.eh_frame:000000000000D9CA                 db  10h
.eh_frame:000000000000D9CB                 db  42h ; B
.eh_frame:000000000000D9CC                 db  0Eh
.eh_frame:000000000000D9CD                 db    8
.eh_frame:000000000000D9CE                 db    0
.eh_frame:000000000000D9CF                 db    0
.eh_frame:000000000000D9D0                 db  18h
.eh_frame:000000000000D9D1                 db    0
.eh_frame:000000000000D9D2                 db    0
.eh_frame:000000000000D9D3                 db    0
.eh_frame:000000000000D9D4                 db 0C4h
.eh_frame:000000000000D9D5                 db  0Eh
.eh_frame:000000000000D9D6                 db    0
.eh_frame:000000000000D9D7                 db    0
.eh_frame:000000000000D9D8                 db 0C8h
.eh_frame:000000000000D9D9                 db  9Bh
.eh_frame:000000000000D9DA                 db 0FFh
.eh_frame:000000000000D9DB                 db 0FFh
.eh_frame:000000000000D9DC                 db 0B8h
.eh_frame:000000000000D9DD                 db    0
.eh_frame:000000000000D9DE                 db    0
.eh_frame:000000000000D9DF                 db    0
.eh_frame:000000000000D9E0                 db    0
.eh_frame:000000000000D9E1                 db  44h ; D
.eh_frame:000000000000D9E2                 db  0Eh
.eh_frame:000000000000D9E3                 db  30h ; 0
.eh_frame:000000000000D9E4                 db    2
.eh_frame:000000000000D9E5                 db  55h ; U
.eh_frame:000000000000D9E6                 db  0Ah
.eh_frame:000000000000D9E7                 db  0Eh
.eh_frame:000000000000D9E8                 db    8
.eh_frame:000000000000D9E9                 db  47h ; G
.eh_frame:000000000000D9EA                 db  0Bh
.eh_frame:000000000000D9EB                 db    0
.eh_frame:000000000000D9EC                 db  4Ch ; L
.eh_frame:000000000000D9ED                 db    0
.eh_frame:000000000000D9EE                 db    0
.eh_frame:000000000000D9EF                 db    0
.eh_frame:000000000000D9F0                 db 0E0h
.eh_frame:000000000000D9F1                 db  0Eh
.eh_frame:000000000000D9F2                 db    0
.eh_frame:000000000000D9F3                 db    0
.eh_frame:000000000000D9F4                 db  6Ch ; l
.eh_frame:000000000000D9F5                 db  9Ch
.eh_frame:000000000000D9F6                 db 0FFh
.eh_frame:000000000000D9F7                 db 0FFh
.eh_frame:000000000000D9F8                 db 0D1h
.eh_frame:000000000000D9F9                 db    9
.eh_frame:000000000000D9FA                 db    0
.eh_frame:000000000000D9FB                 db    0
.eh_frame:000000000000D9FC                 db    0
.eh_frame:000000000000D9FD                 db  42h ; B
.eh_frame:000000000000D9FE                 db  0Eh
.eh_frame:000000000000D9FF                 db  10h
.eh_frame:000000000000DA00                 db  8Fh
.eh_frame:000000000000DA01                 db    2
.eh_frame:000000000000DA02                 db  42h ; B
.eh_frame:000000000000DA03                 db  0Eh
.eh_frame:000000000000DA04                 db  18h
.eh_frame:000000000000DA05                 db  8Eh
.eh_frame:000000000000DA06                 db    3
.eh_frame:000000000000DA07                 db  45h ; E
.eh_frame:000000000000DA08                 db  0Eh
.eh_frame:000000000000DA09                 db  20h
.eh_frame:000000000000DA0A                 db  8Dh
.eh_frame:000000000000DA0B                 db    4
.eh_frame:000000000000DA0C                 db  42h ; B
.eh_frame:000000000000DA0D                 db  0Eh
.eh_frame:000000000000DA0E                 db  28h ; (
.eh_frame:000000000000DA0F                 db  8Ch
.eh_frame:000000000000DA10                 db    5
.eh_frame:000000000000DA11                 db  41h ; A
.eh_frame:000000000000DA12                 db  0Eh
.eh_frame:000000000000DA13                 db  30h ; 0
.eh_frame:000000000000DA14                 db  86h
.eh_frame:000000000000DA15                 db    6
.eh_frame:000000000000DA16                 db  41h ; A
.eh_frame:000000000000DA17                 db  0Eh
.eh_frame:000000000000DA18                 db  38h ; 8
.eh_frame:000000000000DA19                 db  83h
.eh_frame:000000000000DA1A                 db    7
.eh_frame:000000000000DA1B                 db  44h ; D
.eh_frame:000000000000DA1C                 db  0Eh
.eh_frame:000000000000DA1D                 db 0B0h
.eh_frame:000000000000DA1E                 db    1
.eh_frame:000000000000DA1F                 db    3
.eh_frame:000000000000DA20                 db 0D1h
.eh_frame:000000000000DA21                 db    5
.eh_frame:000000000000DA22                 db  0Ah
.eh_frame:000000000000DA23                 db  0Eh
.eh_frame:000000000000DA24                 db  38h ; 8
.eh_frame:000000000000DA25                 db  41h ; A
.eh_frame:000000000000DA26                 db  0Eh
.eh_frame:000000000000DA27                 db  30h ; 0
.eh_frame:000000000000DA28                 db  41h ; A
.eh_frame:000000000000DA29                 db  0Eh
.eh_frame:000000000000DA2A                 db  28h ; (
.eh_frame:000000000000DA2B                 db  42h ; B
.eh_frame:000000000000DA2C                 db  0Eh
.eh_frame:000000000000DA2D                 db  20h
.eh_frame:000000000000DA2E                 db  42h ; B
.eh_frame:000000000000DA2F                 db  0Eh
.eh_frame:000000000000DA30                 db  18h
.eh_frame:000000000000DA31                 db  42h ; B
.eh_frame:000000000000DA32                 db  0Eh
.eh_frame:000000000000DA33                 db  10h
.eh_frame:000000000000DA34                 db  42h ; B
.eh_frame:000000000000DA35                 db  0Eh
.eh_frame:000000000000DA36                 db    8
.eh_frame:000000000000DA37                 db  44h ; D
.eh_frame:000000000000DA38                 db  0Bh
.eh_frame:000000000000DA39                 db    0
.eh_frame:000000000000DA3A                 db    0
.eh_frame:000000000000DA3B                 db    0
.eh_frame:000000000000DA3C                 db  48h ; H
.eh_frame:000000000000DA3D                 db    0
.eh_frame:000000000000DA3E                 db    0
.eh_frame:000000000000DA3F                 db    0
.eh_frame:000000000000DA40                 db  30h ; 0
.eh_frame:000000000000DA41                 db  0Fh
.eh_frame:000000000000DA42                 db    0
.eh_frame:000000000000DA43                 db    0
.eh_frame:000000000000DA44                 db 0FCh
.eh_frame:000000000000DA45                 db 0A5h
.eh_frame:000000000000DA46                 db 0FFh
.eh_frame:000000000000DA47                 db 0FFh
.eh_frame:000000000000DA48                 db 0AAh
.eh_frame:000000000000DA49                 db    3
.eh_frame:000000000000DA4A                 db    0
.eh_frame:000000000000DA4B                 db    0
.eh_frame:000000000000DA4C                 db    0
.eh_frame:000000000000DA4D                 db  42h ; B
.eh_frame:000000000000DA4E                 db  0Eh
.eh_frame:000000000000DA4F                 db  10h
.eh_frame:000000000000DA50                 db  8Fh
.eh_frame:000000000000DA51                 db    2
.eh_frame:000000000000DA52                 db  42h ; B
.eh_frame:000000000000DA53                 db  0Eh
.eh_frame:000000000000DA54                 db  18h
.eh_frame:000000000000DA55                 db  8Eh
.eh_frame:000000000000DA56                 db    3
.eh_frame:000000000000DA57                 db  42h ; B
.eh_frame:000000000000DA58                 db  0Eh
.eh_frame:000000000000DA59                 db  20h
.eh_frame:000000000000DA5A                 db  8Dh
.eh_frame:000000000000DA5B                 db    4
.eh_frame:000000000000DA5C                 db  42h ; B
.eh_frame:000000000000DA5D                 db  0Eh
.eh_frame:000000000000DA5E                 db  28h ; (
.eh_frame:000000000000DA5F                 db  8Ch
.eh_frame:000000000000DA60                 db    5
.eh_frame:000000000000DA61                 db  41h ; A
.eh_frame:000000000000DA62                 db  0Eh
.eh_frame:000000000000DA63                 db  30h ; 0
.eh_frame:000000000000DA64                 db  86h
.eh_frame:000000000000DA65                 db    6
.eh_frame:000000000000DA66                 db  41h ; A
.eh_frame:000000000000DA67                 db  0Eh
.eh_frame:000000000000DA68                 db  38h ; 8
.eh_frame:000000000000DA69                 db  83h
.eh_frame:000000000000DA6A                 db    7
.eh_frame:000000000000DA6B                 db  44h ; D
.eh_frame:000000000000DA6C                 db  0Eh
.eh_frame:000000000000DA6D                 db  60h ; `
.eh_frame:000000000000DA6E                 db    3
.eh_frame:000000000000DA6F                 db 0A4h
.eh_frame:000000000000DA70                 db    2
.eh_frame:000000000000DA71                 db  0Ah
.eh_frame:000000000000DA72                 db  0Eh
.eh_frame:000000000000DA73                 db  38h ; 8
.eh_frame:000000000000DA74                 db  44h ; D
.eh_frame:000000000000DA75                 db  0Eh
.eh_frame:000000000000DA76                 db  30h ; 0
.eh_frame:000000000000DA77                 db  41h ; A
.eh_frame:000000000000DA78                 db  0Eh
.eh_frame:000000000000DA79                 db  28h ; (
.eh_frame:000000000000DA7A                 db  42h ; B
.eh_frame:000000000000DA7B                 db  0Eh
.eh_frame:000000000000DA7C                 db  20h
.eh_frame:000000000000DA7D                 db  42h ; B
.eh_frame:000000000000DA7E                 db  0Eh
.eh_frame:000000000000DA7F                 db  18h
.eh_frame:000000000000DA80                 db  42h ; B
.eh_frame:000000000000DA81                 db  0Eh
.eh_frame:000000000000DA82                 db  10h
.eh_frame:000000000000DA83                 db  42h ; B
.eh_frame:000000000000DA84                 db  0Eh
.eh_frame:000000000000DA85                 db    8
.eh_frame:000000000000DA86                 db  41h ; A
.eh_frame:000000000000DA87                 db  0Bh
.eh_frame:000000000000DA88                 db  2Ch ; ,
.eh_frame:000000000000DA89                 db    0
.eh_frame:000000000000DA8A                 db    0
.eh_frame:000000000000DA8B                 db    0
.eh_frame:000000000000DA8C                 db  7Ch ; |
.eh_frame:000000000000DA8D                 db  0Fh
.eh_frame:000000000000DA8E                 db    0
.eh_frame:000000000000DA8F                 db    0
.eh_frame:000000000000DA90                 db  60h ; `
.eh_frame:000000000000DA91                 db 0A9h
.eh_frame:000000000000DA92                 db 0FFh
.eh_frame:000000000000DA93                 db 0FFh
.eh_frame:000000000000DA94                 db  82h
.eh_frame:000000000000DA95                 db    1
.eh_frame:000000000000DA96                 db    0
.eh_frame:000000000000DA97                 db    0
.eh_frame:000000000000DA98                 db    0
.eh_frame:000000000000DA99                 db  42h ; B
.eh_frame:000000000000DA9A                 db  0Eh
.eh_frame:000000000000DA9B                 db  10h
.eh_frame:000000000000DA9C                 db  8Ch
.eh_frame:000000000000DA9D                 db    2
.eh_frame:000000000000DA9E                 db  41h ; A
.eh_frame:000000000000DA9F                 db  0Eh
.eh_frame:000000000000DAA0                 db  18h
.eh_frame:000000000000DAA1                 db  86h
.eh_frame:000000000000DAA2                 db    3
.eh_frame:000000000000DAA3                 db  44h ; D
.eh_frame:000000000000DAA4                 db  0Eh
.eh_frame:000000000000DAA5                 db  20h
.eh_frame:000000000000DAA6                 db  83h
.eh_frame:000000000000DAA7                 db    4
.eh_frame:000000000000DAA8                 db    2
.eh_frame:000000000000DAA9                 db 0C2h
.eh_frame:000000000000DAAA                 db  0Ah
.eh_frame:000000000000DAAB                 db  0Eh
.eh_frame:000000000000DAAC                 db  18h
.eh_frame:000000000000DAAD                 db  41h ; A
.eh_frame:000000000000DAAE                 db  0Eh
.eh_frame:000000000000DAAF                 db  10h
.eh_frame:000000000000DAB0                 db  42h ; B
.eh_frame:000000000000DAB1                 db  0Eh
.eh_frame:000000000000DAB2                 db    8
.eh_frame:000000000000DAB3                 db  44h ; D
.eh_frame:000000000000DAB4                 db  0Bh
.eh_frame:000000000000DAB5                 db    0
.eh_frame:000000000000DAB6                 db    0
.eh_frame:000000000000DAB7                 db    0
.eh_frame:000000000000DAB8                 db  60h ; `
.eh_frame:000000000000DAB9                 db    0
.eh_frame:000000000000DABA                 db    0
.eh_frame:000000000000DABB                 db    0
.eh_frame:000000000000DABC                 db 0ACh
.eh_frame:000000000000DABD                 db  0Fh
.eh_frame:000000000000DABE                 db    0
.eh_frame:000000000000DABF                 db    0
.eh_frame:000000000000DAC0                 db 0C0h
.eh_frame:000000000000DAC1                 db 0AAh
.eh_frame:000000000000DAC2                 db 0FFh
.eh_frame:000000000000DAC3                 db 0FFh
.eh_frame:000000000000DAC4                 db  78h ; x
.eh_frame:000000000000DAC5                 db    7
.eh_frame:000000000000DAC6                 db    0
.eh_frame:000000000000DAC7                 db    0
.eh_frame:000000000000DAC8                 db    0
.eh_frame:000000000000DAC9                 db  42h ; B
.eh_frame:000000000000DACA                 db  0Eh
.eh_frame:000000000000DACB                 db  10h
.eh_frame:000000000000DACC                 db  8Eh
.eh_frame:000000000000DACD                 db    2
.eh_frame:000000000000DACE                 db  42h ; B
.eh_frame:000000000000DACF                 db  0Eh
.eh_frame:000000000000DAD0                 db  18h
.eh_frame:000000000000DAD1                 db  8Dh
.eh_frame:000000000000DAD2                 db    3
.eh_frame:000000000000DAD3                 db  42h ; B
.eh_frame:000000000000DAD4                 db  0Eh
.eh_frame:000000000000DAD5                 db  20h
.eh_frame:000000000000DAD6                 db  8Ch
.eh_frame:000000000000DAD7                 db    4
.eh_frame:000000000000DAD8                 db  41h ; A
.eh_frame:000000000000DAD9                 db  0Eh
.eh_frame:000000000000DADA                 db  28h ; (
.eh_frame:000000000000DADB                 db  86h
.eh_frame:000000000000DADC                 db    5
.eh_frame:000000000000DADD                 db  41h ; A
.eh_frame:000000000000DADE                 db  0Eh
.eh_frame:000000000000DADF                 db  30h ; 0
.eh_frame:000000000000DAE0                 db  83h
.eh_frame:000000000000DAE1                 db    6
.eh_frame:000000000000DAE2                 db    3
.eh_frame:000000000000DAE3                 db  19h
.eh_frame:000000000000DAE4                 db    1
.eh_frame:000000000000DAE5                 db  0Ah
.eh_frame:000000000000DAE6                 db  0Eh
.eh_frame:000000000000DAE7                 db  28h ; (
.eh_frame:000000000000DAE8                 db  44h ; D
.eh_frame:000000000000DAE9                 db  0Eh
.eh_frame:000000000000DAEA                 db  20h
.eh_frame:000000000000DAEB                 db  42h ; B
.eh_frame:000000000000DAEC                 db  0Eh
.eh_frame:000000000000DAED                 db  18h
.eh_frame:000000000000DAEE                 db  42h ; B
.eh_frame:000000000000DAEF                 db  0Eh
.eh_frame:000000000000DAF0                 db  10h
.eh_frame:000000000000DAF1                 db  42h ; B
.eh_frame:000000000000DAF2                 db  0Eh
.eh_frame:000000000000DAF3                 db    8
.eh_frame:000000000000DAF4                 db  45h ; E
.eh_frame:000000000000DAF5                 db  0Bh
.eh_frame:000000000000DAF6                 db    2
.eh_frame:000000000000DAF7                 db  6Bh ; k
.eh_frame:000000000000DAF8                 db  0Ah
.eh_frame:000000000000DAF9                 db  0Eh
.eh_frame:000000000000DAFA                 db  28h ; (
.eh_frame:000000000000DAFB                 db  44h ; D
.eh_frame:000000000000DAFC                 db  0Eh
.eh_frame:000000000000DAFD                 db  20h
.eh_frame:000000000000DAFE                 db  42h ; B
.eh_frame:000000000000DAFF                 db  0Eh
.eh_frame:000000000000DB00                 db  18h
.eh_frame:000000000000DB01                 db  42h ; B
.eh_frame:000000000000DB02                 db  0Eh
.eh_frame:000000000000DB03                 db  10h
.eh_frame:000000000000DB04                 db  42h ; B
.eh_frame:000000000000DB05                 db  0Eh
.eh_frame:000000000000DB06                 db    8
.eh_frame:000000000000DB07                 db  4Bh ; K
.eh_frame:000000000000DB08                 db  0Bh
.eh_frame:000000000000DB09                 db    2
.eh_frame:000000000000DB0A                 db 0E2h
.eh_frame:000000000000DB0B                 db  0Ah
.eh_frame:000000000000DB0C                 db  0Eh
.eh_frame:000000000000DB0D                 db  28h ; (
.eh_frame:000000000000DB0E                 db  41h ; A
.eh_frame:000000000000DB0F                 db  0Eh
.eh_frame:000000000000DB10                 db  20h
.eh_frame:000000000000DB11                 db  42h ; B
.eh_frame:000000000000DB12                 db  0Eh
.eh_frame:000000000000DB13                 db  18h
.eh_frame:000000000000DB14                 db  42h ; B
.eh_frame:000000000000DB15                 db  0Eh
.eh_frame:000000000000DB16                 db  10h
.eh_frame:000000000000DB17                 db  42h ; B
.eh_frame:000000000000DB18                 db  0Eh
.eh_frame:000000000000DB19                 db    8
.eh_frame:000000000000DB1A                 db  47h ; G
.eh_frame:000000000000DB1B                 db  0Bh
.eh_frame:000000000000DB1C                 db  14h
.eh_frame:000000000000DB1D                 db    0
.eh_frame:000000000000DB1E                 db    0
.eh_frame:000000000000DB1F                 db    0
.eh_frame:000000000000DB20                 db  10h
.eh_frame:000000000000DB21                 db  10h
.eh_frame:000000000000DB22                 db    0
.eh_frame:000000000000DB23                 db    0
.eh_frame:000000000000DB24                 db 0DCh
.eh_frame:000000000000DB25                 db 0B1h
.eh_frame:000000000000DB26                 db 0FFh
.eh_frame:000000000000DB27                 db 0FFh
.eh_frame:000000000000DB28                 db  29h ; )
.eh_frame:000000000000DB29                 db    0
.eh_frame:000000000000DB2A                 db    0
.eh_frame:000000000000DB2B                 db    0
.eh_frame:000000000000DB2C                 db    0
.eh_frame:000000000000DB2D                 db  54h ; T
.eh_frame:000000000000DB2E                 db  0Eh
.eh_frame:000000000000DB2F                 db  10h
.eh_frame:000000000000DB30                 db  54h ; T
.eh_frame:000000000000DB31                 db  0Eh
.eh_frame:000000000000DB32                 db    8
.eh_frame:000000000000DB33                 db    0
.eh_frame:000000000000DB34                 db  60h ; `
.eh_frame:000000000000DB35                 db    0
.eh_frame:000000000000DB36                 db    0
.eh_frame:000000000000DB37                 db    0
.eh_frame:000000000000DB38                 db  28h ; (
.eh_frame:000000000000DB39                 db  10h
.eh_frame:000000000000DB3A                 db    0
.eh_frame:000000000000DB3B                 db    0
.eh_frame:000000000000DB3C                 db 0F4h
.eh_frame:000000000000DB3D                 db 0B1h
.eh_frame:000000000000DB3E                 db 0FFh
.eh_frame:000000000000DB3F                 db 0FFh
.eh_frame:000000000000DB40                 db  4Eh ; N
.eh_frame:000000000000DB41                 db    1
.eh_frame:000000000000DB42                 db    0
.eh_frame:000000000000DB43                 db    0
.eh_frame:000000000000DB44                 db    0
.eh_frame:000000000000DB45                 db  42h ; B
.eh_frame:000000000000DB46                 db  0Eh
.eh_frame:000000000000DB47                 db  10h
.eh_frame:000000000000DB48                 db  8Eh
.eh_frame:000000000000DB49                 db    2
.eh_frame:000000000000DB4A                 db  42h ; B
.eh_frame:000000000000DB4B                 db  0Eh
.eh_frame:000000000000DB4C                 db  18h
.eh_frame:000000000000DB4D                 db  8Dh
.eh_frame:000000000000DB4E                 db    3
.eh_frame:000000000000DB4F                 db  42h ; B
.eh_frame:000000000000DB50                 db  0Eh
.eh_frame:000000000000DB51                 db  20h
.eh_frame:000000000000DB52                 db  8Ch
.eh_frame:000000000000DB53                 db    4
.eh_frame:000000000000DB54                 db  41h ; A
.eh_frame:000000000000DB55                 db  0Eh
.eh_frame:000000000000DB56                 db  28h ; (
.eh_frame:000000000000DB57                 db  86h
.eh_frame:000000000000DB58                 db    5
.eh_frame:000000000000DB59                 db  44h ; D
.eh_frame:000000000000DB5A                 db  0Eh
.eh_frame:000000000000DB5B                 db  30h ; 0
.eh_frame:000000000000DB5C                 db  83h
.eh_frame:000000000000DB5D                 db    6
.eh_frame:000000000000DB5E                 db    2
.eh_frame:000000000000DB5F                 db  8Ah
.eh_frame:000000000000DB60                 db  0Ah
.eh_frame:000000000000DB61                 db  0Eh
.eh_frame:000000000000DB62                 db  28h ; (
.eh_frame:000000000000DB63                 db  41h ; A
.eh_frame:000000000000DB64                 db  0Eh
.eh_frame:000000000000DB65                 db  20h
.eh_frame:000000000000DB66                 db  42h ; B
.eh_frame:000000000000DB67                 db  0Eh
.eh_frame:000000000000DB68                 db  18h
.eh_frame:000000000000DB69                 db  42h ; B
.eh_frame:000000000000DB6A                 db  0Eh
.eh_frame:000000000000DB6B                 db  10h
.eh_frame:000000000000DB6C                 db  42h ; B
.eh_frame:000000000000DB6D                 db  0Eh
.eh_frame:000000000000DB6E                 db    8
.eh_frame:000000000000DB6F                 db  44h ; D
.eh_frame:000000000000DB70                 db  0Bh
.eh_frame:000000000000DB71                 db  41h ; A
.eh_frame:000000000000DB72                 db  0Ah
.eh_frame:000000000000DB73                 db  0Eh
.eh_frame:000000000000DB74                 db  28h ; (
.eh_frame:000000000000DB75                 db  45h ; E
.eh_frame:000000000000DB76                 db  0Eh
.eh_frame:000000000000DB77                 db  20h
.eh_frame:000000000000DB78                 db  42h ; B
.eh_frame:000000000000DB79                 db  0Eh
.eh_frame:000000000000DB7A                 db  18h
.eh_frame:000000000000DB7B                 db  42h ; B
.eh_frame:000000000000DB7C                 db  0Eh
.eh_frame:000000000000DB7D                 db  10h
.eh_frame:000000000000DB7E                 db  42h ; B
.eh_frame:000000000000DB7F                 db  0Eh
.eh_frame:000000000000DB80                 db    8
.eh_frame:000000000000DB81                 db  44h ; D
.eh_frame:000000000000DB82                 db  0Bh
.eh_frame:000000000000DB83                 db  41h ; A
.eh_frame:000000000000DB84                 db  0Ah
.eh_frame:000000000000DB85                 db  0Eh
.eh_frame:000000000000DB86                 db  28h ; (
.eh_frame:000000000000DB87                 db  43h ; C
.eh_frame:000000000000DB88                 db  0Eh
.eh_frame:000000000000DB89                 db  20h
.eh_frame:000000000000DB8A                 db  42h ; B
.eh_frame:000000000000DB8B                 db  0Eh
.eh_frame:000000000000DB8C                 db  18h
.eh_frame:000000000000DB8D                 db  42h ; B
.eh_frame:000000000000DB8E                 db  0Eh
.eh_frame:000000000000DB8F                 db  10h
.eh_frame:000000000000DB90                 db  42h ; B
.eh_frame:000000000000DB91                 db  0Eh
.eh_frame:000000000000DB92                 db    8
.eh_frame:000000000000DB93                 db  46h ; F
.eh_frame:000000000000DB94                 db  0Bh
.eh_frame:000000000000DB95                 db    0
.eh_frame:000000000000DB96                 db    0
.eh_frame:000000000000DB97                 db    0
.eh_frame:000000000000DB98                 db  3Ch ; <
.eh_frame:000000000000DB99                 db    0
.eh_frame:000000000000DB9A                 db    0
.eh_frame:000000000000DB9B                 db    0
.eh_frame:000000000000DB9C                 db  8Ch
.eh_frame:000000000000DB9D                 db  10h
.eh_frame:000000000000DB9E                 db    0
.eh_frame:000000000000DB9F                 db    0
.eh_frame:000000000000DBA0                 db 0E0h
.eh_frame:000000000000DBA1                 db 0B2h
.eh_frame:000000000000DBA2                 db 0FFh
.eh_frame:000000000000DBA3                 db 0FFh
.eh_frame:000000000000DBA4                 db  83h
.eh_frame:000000000000DBA5                 db    0
.eh_frame:000000000000DBA6                 db    0
.eh_frame:000000000000DBA7                 db    0
.eh_frame:000000000000DBA8                 db    0
.eh_frame:000000000000DBA9                 db  42h ; B
.eh_frame:000000000000DBAA                 db  0Eh
.eh_frame:000000000000DBAB                 db  10h
.eh_frame:000000000000DBAC                 db  8Dh
.eh_frame:000000000000DBAD                 db    2
.eh_frame:000000000000DBAE                 db  42h ; B
.eh_frame:000000000000DBAF                 db  0Eh
.eh_frame:000000000000DBB0                 db  18h
.eh_frame:000000000000DBB1                 db  8Ch
.eh_frame:000000000000DBB2                 db    3
.eh_frame:000000000000DBB3                 db  44h ; D
.eh_frame:000000000000DBB4                 db  0Eh
.eh_frame:000000000000DBB5                 db  20h
.eh_frame:000000000000DBB6                 db  86h
.eh_frame:000000000000DBB7                 db    4
.eh_frame:000000000000DBB8                 db  41h ; A
.eh_frame:000000000000DBB9                 db  0Eh
.eh_frame:000000000000DBBA                 db  28h ; (
.eh_frame:000000000000DBBB                 db  83h
.eh_frame:000000000000DBBC                 db    5
.eh_frame:000000000000DBBD                 db  4Ah ; J
.eh_frame:000000000000DBBE                 db  0Eh
.eh_frame:000000000000DBBF                 db  40h ; @
.eh_frame:000000000000DBC0                 db    2
.eh_frame:000000000000DBC1                 db  64h ; d
.eh_frame:000000000000DBC2                 db  0Ah
.eh_frame:000000000000DBC3                 db  0Eh
.eh_frame:000000000000DBC4                 db  28h ; (
.eh_frame:000000000000DBC5                 db  41h ; A
.eh_frame:000000000000DBC6                 db  0Eh
.eh_frame:000000000000DBC7                 db  20h
.eh_frame:000000000000DBC8                 db  41h ; A
.eh_frame:000000000000DBC9                 db  0Eh
.eh_frame:000000000000DBCA                 db  18h
.eh_frame:000000000000DBCB                 db  42h ; B
.eh_frame:000000000000DBCC                 db  0Eh
.eh_frame:000000000000DBCD                 db  10h
.eh_frame:000000000000DBCE                 db  42h ; B
.eh_frame:000000000000DBCF                 db  0Eh
.eh_frame:000000000000DBD0                 db    8
.eh_frame:000000000000DBD1                 db  41h ; A
.eh_frame:000000000000DBD2                 db  0Bh
.eh_frame:000000000000DBD3                 db    0
.eh_frame:000000000000DBD4                 db    0
.eh_frame:000000000000DBD5                 db    0
.eh_frame:000000000000DBD6                 db    0
.eh_frame:000000000000DBD7                 db    0
.eh_frame:000000000000DBD8                 db  4Ch ; L
.eh_frame:000000000000DBD9                 db    0
.eh_frame:000000000000DBDA                 db    0
.eh_frame:000000000000DBDB                 db    0
.eh_frame:000000000000DBDC                 db 0CCh
.eh_frame:000000000000DBDD                 db  10h
.eh_frame:000000000000DBDE                 db    0
.eh_frame:000000000000DBDF                 db    0
.eh_frame:000000000000DBE0                 db  30h ; 0
.eh_frame:000000000000DBE1                 db 0B3h
.eh_frame:000000000000DBE2                 db 0FFh
.eh_frame:000000000000DBE3                 db 0FFh
.eh_frame:000000000000DBE4                 db  7Dh ; }
.eh_frame:000000000000DBE5                 db    0
.eh_frame:000000000000DBE6                 db    0
.eh_frame:000000000000DBE7                 db    0
.eh_frame:000000000000DBE8                 db    0
.eh_frame:000000000000DBE9                 db  42h ; B
.eh_frame:000000000000DBEA                 db  0Eh
.eh_frame:000000000000DBEB                 db  10h
.eh_frame:000000000000DBEC                 db  8Ch
.eh_frame:000000000000DBED                 db    2
.eh_frame:000000000000DBEE                 db  41h ; A
.eh_frame:000000000000DBEF                 db  0Eh
.eh_frame:000000000000DBF0                 db  18h
.eh_frame:000000000000DBF1                 db  86h
.eh_frame:000000000000DBF2                 db    3
.eh_frame:000000000000DBF3                 db  44h ; D
.eh_frame:000000000000DBF4                 db  0Eh
.eh_frame:000000000000DBF5                 db  20h
.eh_frame:000000000000DBF6                 db  83h
.eh_frame:000000000000DBF7                 db    4
.eh_frame:000000000000DBF8                 db  69h ; i
.eh_frame:000000000000DBF9                 db  0Ah
.eh_frame:000000000000DBFA                 db  0Eh
.eh_frame:000000000000DBFB                 db  18h
.eh_frame:000000000000DBFC                 db  41h ; A
.eh_frame:000000000000DBFD                 db  0Eh
.eh_frame:000000000000DBFE                 db  10h
.eh_frame:000000000000DBFF                 db  42h ; B
.eh_frame:000000000000DC00                 db  0Eh
.eh_frame:000000000000DC01                 db    8
.eh_frame:000000000000DC02                 db  45h ; E
.eh_frame:000000000000DC03                 db  0Bh
.eh_frame:000000000000DC04                 db  55h ; U
.eh_frame:000000000000DC05                 db  0Ah
.eh_frame:000000000000DC06                 db  0Eh
.eh_frame:000000000000DC07                 db  18h
.eh_frame:000000000000DC08                 db  41h ; A
.eh_frame:000000000000DC09                 db  0Eh
.eh_frame:000000000000DC0A                 db  10h
.eh_frame:000000000000DC0B                 db  42h ; B
.eh_frame:000000000000DC0C                 db  0Eh
.eh_frame:000000000000DC0D                 db    8
.eh_frame:000000000000DC0E                 db  48h ; H
.eh_frame:000000000000DC0F                 db  0Bh
.eh_frame:000000000000DC10                 db  41h ; A
.eh_frame:000000000000DC11                 db  0Ah
.eh_frame:000000000000DC12                 db  0Eh
.eh_frame:000000000000DC13                 db  18h
.eh_frame:000000000000DC14                 db  46h ; F
.eh_frame:000000000000DC15                 db  0Eh
.eh_frame:000000000000DC16                 db  10h
.eh_frame:000000000000DC17                 db  42h ; B
.eh_frame:000000000000DC18                 db  0Eh
.eh_frame:000000000000DC19                 db    8
.eh_frame:000000000000DC1A                 db  47h ; G
.eh_frame:000000000000DC1B                 db  0Bh
.eh_frame:000000000000DC1C                 db  49h ; I
.eh_frame:000000000000DC1D                 db  0Eh
.eh_frame:000000000000DC1E                 db  18h
.eh_frame:000000000000DC1F                 db  41h ; A
.eh_frame:000000000000DC20                 db  0Eh
.eh_frame:000000000000DC21                 db  10h
.eh_frame:000000000000DC22                 db  42h ; B
.eh_frame:000000000000DC23                 db  0Eh
.eh_frame:000000000000DC24                 db    8
.eh_frame:000000000000DC25                 db    0
.eh_frame:000000000000DC26                 db    0
.eh_frame:000000000000DC27                 db    0
.eh_frame:000000000000DC28                 db  10h
.eh_frame:000000000000DC29                 db    0
.eh_frame:000000000000DC2A                 db    0
.eh_frame:000000000000DC2B                 db    0
.eh_frame:000000000000DC2C                 db  1Ch
.eh_frame:000000000000DC2D                 db  11h
.eh_frame:000000000000DC2E                 db    0
.eh_frame:000000000000DC2F                 db    0
.eh_frame:000000000000DC30                 db  60h ; `
.eh_frame:000000000000DC31                 db 0B3h
.eh_frame:000000000000DC32                 db 0FFh
.eh_frame:000000000000DC33                 db 0FFh
.eh_frame:000000000000DC34                 db  10h
.eh_frame:000000000000DC35                 db    0
.eh_frame:000000000000DC36                 db    0
.eh_frame:000000000000DC37                 db    0
.eh_frame:000000000000DC38                 db    0
.eh_frame:000000000000DC39                 db    0
.eh_frame:000000000000DC3A                 db    0
.eh_frame:000000000000DC3B                 db    0
.eh_frame:000000000000DC3C                 db  18h
.eh_frame:000000000000DC3D                 db    0
.eh_frame:000000000000DC3E                 db    0
.eh_frame:000000000000DC3F                 db    0
.eh_frame:000000000000DC40                 db  30h ; 0
.eh_frame:000000000000DC41                 db  11h
.eh_frame:000000000000DC42                 db    0
.eh_frame:000000000000DC43                 db    0
.eh_frame:000000000000DC44                 db  5Ch ; \
.eh_frame:000000000000DC45                 db 0B3h
.eh_frame:000000000000DC46                 db 0FFh
.eh_frame:000000000000DC47                 db 0FFh
.eh_frame:000000000000DC48                 db  8Ah
.eh_frame:000000000000DC49                 db    0
.eh_frame:000000000000DC4A                 db    0
.eh_frame:000000000000DC4B                 db    0
.eh_frame:000000000000DC4C                 db    0
.eh_frame:000000000000DC4D                 db    2
.eh_frame:000000000000DC4E                 db  80h
.eh_frame:000000000000DC4F                 db  0Eh
.eh_frame:000000000000DC50                 db  10h
.eh_frame:000000000000DC51                 db    0
.eh_frame:000000000000DC52                 db    0
.eh_frame:000000000000DC53                 db    0
.eh_frame:000000000000DC54                 db    0
.eh_frame:000000000000DC55                 db    0
.eh_frame:000000000000DC56                 db    0
.eh_frame:000000000000DC57                 db    0
.eh_frame:000000000000DC58                 db  1Ch
.eh_frame:000000000000DC59                 db    0
.eh_frame:000000000000DC5A                 db    0
.eh_frame:000000000000DC5B                 db    0
.eh_frame:000000000000DC5C                 db  4Ch ; L
.eh_frame:000000000000DC5D                 db  11h
.eh_frame:000000000000DC5E                 db    0
.eh_frame:000000000000DC5F                 db    0
.eh_frame:000000000000DC60                 db 0D0h
.eh_frame:000000000000DC61                 db 0B3h
.eh_frame:000000000000DC62                 db 0FFh
.eh_frame:000000000000DC63                 db 0FFh
.eh_frame:000000000000DC64                 db  6Eh ; n
.eh_frame:000000000000DC65                 db    0
.eh_frame:000000000000DC66                 db    0
.eh_frame:000000000000DC67                 db    0
.eh_frame:000000000000DC68                 db    0
.eh_frame:000000000000DC69                 db  44h ; D
.eh_frame:000000000000DC6A                 db  0Eh
.eh_frame:000000000000DC6B                 db  60h ; `
.eh_frame:000000000000DC6C                 db  7Fh ; 
.eh_frame:000000000000DC6D                 db  0Ah
.eh_frame:000000000000DC6E                 db  0Eh
.eh_frame:000000000000DC6F                 db    8
.eh_frame:000000000000DC70                 db  45h ; E
.eh_frame:000000000000DC71                 db  0Bh
.eh_frame:000000000000DC72                 db    0
.eh_frame:000000000000DC73                 db    0
.eh_frame:000000000000DC74                 db    0
.eh_frame:000000000000DC75                 db    0
.eh_frame:000000000000DC76                 db    0
.eh_frame:000000000000DC77                 db    0
.eh_frame:000000000000DC78                 db  1Ch
.eh_frame:000000000000DC79                 db    0
.eh_frame:000000000000DC7A                 db    0
.eh_frame:000000000000DC7B                 db    0
.eh_frame:000000000000DC7C                 db  6Ch ; l
.eh_frame:000000000000DC7D                 db  11h
.eh_frame:000000000000DC7E                 db    0
.eh_frame:000000000000DC7F                 db    0
.eh_frame:000000000000DC80                 db  20h
.eh_frame:000000000000DC81                 db 0B4h
.eh_frame:000000000000DC82                 db 0FFh
.eh_frame:000000000000DC83                 db 0FFh
.eh_frame:000000000000DC84                 db  60h ; `
.eh_frame:000000000000DC85                 db    0
.eh_frame:000000000000DC86                 db    0
.eh_frame:000000000000DC87                 db    0
.eh_frame:000000000000DC88                 db    0
.eh_frame:000000000000DC89                 db  44h ; D
.eh_frame:000000000000DC8A                 db  0Eh
.eh_frame:000000000000DC8B                 db  10h
.eh_frame:000000000000DC8C                 db  75h ; u
.eh_frame:000000000000DC8D                 db  0Ah
.eh_frame:000000000000DC8E                 db  0Eh
.eh_frame:000000000000DC8F                 db    8
.eh_frame:000000000000DC90                 db  47h ; G
.eh_frame:000000000000DC91                 db  0Bh
.eh_frame:000000000000DC92                 db  5Fh ; _
.eh_frame:000000000000DC93                 db  0Eh
.eh_frame:000000000000DC94                 db    8
.eh_frame:000000000000DC95                 db    0
.eh_frame:000000000000DC96                 db    0
.eh_frame:000000000000DC97                 db    0
.eh_frame:000000000000DC98                 db  10h
.eh_frame:000000000000DC99                 db    0
.eh_frame:000000000000DC9A                 db    0
.eh_frame:000000000000DC9B                 db    0
.eh_frame:000000000000DC9C                 db  8Ch
.eh_frame:000000000000DC9D                 db  11h
.eh_frame:000000000000DC9E                 db    0
.eh_frame:000000000000DC9F                 db    0
.eh_frame:000000000000DCA0                 db  60h ; `
.eh_frame:000000000000DCA1                 db 0B4h
.eh_frame:000000000000DCA2                 db 0FFh
.eh_frame:000000000000DCA3                 db 0FFh
.eh_frame:000000000000DCA4                 db  93h
.eh_frame:000000000000DCA5                 db    0
.eh_frame:000000000000DCA6                 db    0
.eh_frame:000000000000DCA7                 db    0
.eh_frame:000000000000DCA8                 db    0
.eh_frame:000000000000DCA9                 db    0
.eh_frame:000000000000DCAA                 db    0
.eh_frame:000000000000DCAB                 db    0
.eh_frame:000000000000DCAC                 db  10h
.eh_frame:000000000000DCAD                 db    0
.eh_frame:000000000000DCAE                 db    0
.eh_frame:000000000000DCAF                 db    0
.eh_frame:000000000000DCB0                 db 0A0h
.eh_frame:000000000000DCB1                 db  11h
.eh_frame:000000000000DCB2                 db    0
.eh_frame:000000000000DCB3                 db    0
.eh_frame:000000000000DCB4                 db 0ECh
.eh_frame:000000000000DCB5                 db 0B4h
.eh_frame:000000000000DCB6                 db 0FFh
.eh_frame:000000000000DCB7                 db 0FFh
.eh_frame:000000000000DCB8                 db  10h
.eh_frame:000000000000DCB9                 db    0
.eh_frame:000000000000DCBA                 db    0
.eh_frame:000000000000DCBB                 db    0
.eh_frame:000000000000DCBC                 db    0
.eh_frame:000000000000DCBD                 db    0
.eh_frame:000000000000DCBE                 db    0
.eh_frame:000000000000DCBF                 db    0
.eh_frame:000000000000DCC0                 db  10h
.eh_frame:000000000000DCC1                 db    0
.eh_frame:000000000000DCC2                 db    0
.eh_frame:000000000000DCC3                 db    0
.eh_frame:000000000000DCC4                 db 0B4h
.eh_frame:000000000000DCC5                 db  11h
.eh_frame:000000000000DCC6                 db    0
.eh_frame:000000000000DCC7                 db    0
.eh_frame:000000000000DCC8                 db 0E8h
.eh_frame:000000000000DCC9                 db 0B4h
.eh_frame:000000000000DCCA                 db 0FFh
.eh_frame:000000000000DCCB                 db 0FFh
.eh_frame:000000000000DCCC                 db    7
.eh_frame:000000000000DCCD                 db    0
.eh_frame:000000000000DCCE                 db    0
.eh_frame:000000000000DCCF                 db    0
.eh_frame:000000000000DCD0                 db    0
.eh_frame:000000000000DCD1                 db    0
.eh_frame:000000000000DCD2                 db    0
.eh_frame:000000000000DCD3                 db    0
.eh_frame:000000000000DCD4                 db  18h
.eh_frame:000000000000DCD5                 db    0
.eh_frame:000000000000DCD6                 db    0
.eh_frame:000000000000DCD7                 db    0
.eh_frame:000000000000DCD8                 db 0C8h
.eh_frame:000000000000DCD9                 db  11h
.eh_frame:000000000000DCDA                 db    0
.eh_frame:000000000000DCDB                 db    0
.eh_frame:000000000000DCDC                 db 0E4h
.eh_frame:000000000000DCDD                 db 0B4h
.eh_frame:000000000000DCDE                 db 0FFh
.eh_frame:000000000000DCDF                 db 0FFh
.eh_frame:000000000000DCE0                 db  22h ; "
.eh_frame:000000000000DCE1                 db    0
.eh_frame:000000000000DCE2                 db    0
.eh_frame:000000000000DCE3                 db    0
.eh_frame:000000000000DCE4                 db    0
.eh_frame:000000000000DCE5                 db  41h ; A
.eh_frame:000000000000DCE6                 db  0Eh
.eh_frame:000000000000DCE7                 db  10h
.eh_frame:000000000000DCE8                 db  83h
.eh_frame:000000000000DCE9                 db    2
.eh_frame:000000000000DCEA                 db  5Bh ; [
.eh_frame:000000000000DCEB                 db  0Ah
.eh_frame:000000000000DCEC                 db  0Eh
.eh_frame:000000000000DCED                 db    8
.eh_frame:000000000000DCEE                 db  41h ; A
.eh_frame:000000000000DCEF                 db  0Bh
.eh_frame:000000000000DCF0                 db  5Ch ; \
.eh_frame:000000000000DCF1                 db    0
.eh_frame:000000000000DCF2                 db    0
.eh_frame:000000000000DCF3                 db    0
.eh_frame:000000000000DCF4                 db 0E4h
.eh_frame:000000000000DCF5                 db  11h
.eh_frame:000000000000DCF6                 db    0
.eh_frame:000000000000DCF7                 db    0
.eh_frame:000000000000DCF8                 db 0F8h
.eh_frame:000000000000DCF9                 db 0B4h
.eh_frame:000000000000DCFA                 db 0FFh
.eh_frame:000000000000DCFB                 db 0FFh
.eh_frame:000000000000DCFC                 db  1Eh
.eh_frame:000000000000DCFD                 db    1
.eh_frame:000000000000DCFE                 db    0
.eh_frame:000000000000DCFF                 db    0
.eh_frame:000000000000DD00                 db    0
.eh_frame:000000000000DD01                 db  42h ; B
.eh_frame:000000000000DD02                 db  0Eh
.eh_frame:000000000000DD03                 db  10h
.eh_frame:000000000000DD04                 db  8Eh
.eh_frame:000000000000DD05                 db    2
.eh_frame:000000000000DD06                 db  42h ; B
.eh_frame:000000000000DD07                 db  0Eh
.eh_frame:000000000000DD08                 db  18h
.eh_frame:000000000000DD09                 db  8Dh
.eh_frame:000000000000DD0A                 db    3
.eh_frame:000000000000DD0B                 db  45h ; E
.eh_frame:000000000000DD0C                 db  0Eh
.eh_frame:000000000000DD0D                 db  20h
.eh_frame:000000000000DD0E                 db  8Ch
.eh_frame:000000000000DD0F                 db    4
.eh_frame:000000000000DD10                 db  41h ; A
.eh_frame:000000000000DD11                 db  0Eh
.eh_frame:000000000000DD12                 db  28h ; (
.eh_frame:000000000000DD13                 db  86h
.eh_frame:000000000000DD14                 db    5
.eh_frame:000000000000DD15                 db  44h ; D
.eh_frame:000000000000DD16                 db  0Eh
.eh_frame:000000000000DD17                 db  30h ; 0
.eh_frame:000000000000DD18                 db  83h
.eh_frame:000000000000DD19                 db    6
.eh_frame:000000000000DD1A                 db    2
.eh_frame:000000000000DD1B                 db 0A1h
.eh_frame:000000000000DD1C                 db  0Ah
.eh_frame:000000000000DD1D                 db  0Eh
.eh_frame:000000000000DD1E                 db  28h ; (
.eh_frame:000000000000DD1F                 db  44h ; D
.eh_frame:000000000000DD20                 db  0Eh
.eh_frame:000000000000DD21                 db  20h
.eh_frame:000000000000DD22                 db  42h ; B
.eh_frame:000000000000DD23                 db  0Eh
.eh_frame:000000000000DD24                 db  18h
.eh_frame:000000000000DD25                 db  42h ; B
.eh_frame:000000000000DD26                 db  0Eh
.eh_frame:000000000000DD27                 db  10h
.eh_frame:000000000000DD28                 db  42h ; B
.eh_frame:000000000000DD29                 db  0Eh
.eh_frame:000000000000DD2A                 db    8
.eh_frame:000000000000DD2B                 db  47h ; G
.eh_frame:000000000000DD2C                 db  0Bh
.eh_frame:000000000000DD2D                 db  71h ; q
.eh_frame:000000000000DD2E                 db  0Ah
.eh_frame:000000000000DD2F                 db  0Eh
.eh_frame:000000000000DD30                 db  28h ; (
.eh_frame:000000000000DD31                 db  41h ; A
.eh_frame:000000000000DD32                 db  0Eh
.eh_frame:000000000000DD33                 db  20h
.eh_frame:000000000000DD34                 db  42h ; B
.eh_frame:000000000000DD35                 db  0Eh
.eh_frame:000000000000DD36                 db  18h
.eh_frame:000000000000DD37                 db  42h ; B
.eh_frame:000000000000DD38                 db  0Eh
.eh_frame:000000000000DD39                 db  10h
.eh_frame:000000000000DD3A                 db  42h ; B
.eh_frame:000000000000DD3B                 db  0Eh
.eh_frame:000000000000DD3C                 db    8
.eh_frame:000000000000DD3D                 db  48h ; H
.eh_frame:000000000000DD3E                 db  0Bh
.eh_frame:000000000000DD3F                 db  53h ; S
.eh_frame:000000000000DD40                 db  0Eh
.eh_frame:000000000000DD41                 db  28h ; (
.eh_frame:000000000000DD42                 db  44h ; D
.eh_frame:000000000000DD43                 db  0Eh
.eh_frame:000000000000DD44                 db  20h
.eh_frame:000000000000DD45                 db  42h ; B
.eh_frame:000000000000DD46                 db  0Eh
.eh_frame:000000000000DD47                 db  18h
.eh_frame:000000000000DD48                 db  42h ; B
.eh_frame:000000000000DD49                 db  0Eh
.eh_frame:000000000000DD4A                 db  10h
.eh_frame:000000000000DD4B                 db  42h ; B
.eh_frame:000000000000DD4C                 db  0Eh
.eh_frame:000000000000DD4D                 db    8
.eh_frame:000000000000DD4E                 db    0
.eh_frame:000000000000DD4F                 db    0
.eh_frame:000000000000DD50                 db  10h
.eh_frame:000000000000DD51                 db    0
.eh_frame:000000000000DD52                 db    0
.eh_frame:000000000000DD53                 db    0
.eh_frame:000000000000DD54                 db  44h ; D
.eh_frame:000000000000DD55                 db  12h
.eh_frame:000000000000DD56                 db    0
.eh_frame:000000000000DD57                 db    0
.eh_frame:000000000000DD58                 db 0B8h
.eh_frame:000000000000DD59                 db 0B5h
.eh_frame:000000000000DD5A                 db 0FFh
.eh_frame:000000000000DD5B                 db 0FFh
.eh_frame:000000000000DD5C                 db  77h ; w
.eh_frame:000000000000DD5D                 db    0
.eh_frame:000000000000DD5E                 db    0
.eh_frame:000000000000DD5F                 db    0
.eh_frame:000000000000DD60                 db    0
.eh_frame:000000000000DD61                 db    0
.eh_frame:000000000000DD62                 db    0
.eh_frame:000000000000DD63                 db    0
.eh_frame:000000000000DD64                 db  5Ch ; \
.eh_frame:000000000000DD65                 db    0
.eh_frame:000000000000DD66                 db    0
.eh_frame:000000000000DD67                 db    0
.eh_frame:000000000000DD68                 db  58h ; X
.eh_frame:000000000000DD69                 db  12h
.eh_frame:000000000000DD6A                 db    0
.eh_frame:000000000000DD6B                 db    0
.eh_frame:000000000000DD6C                 db  24h ; $
.eh_frame:000000000000DD6D                 db 0B6h
.eh_frame:000000000000DD6E                 db 0FFh
.eh_frame:000000000000DD6F                 db 0FFh
.eh_frame:000000000000DD70                 db  40h ; @
.eh_frame:000000000000DD71                 db    1
.eh_frame:000000000000DD72                 db    0
.eh_frame:000000000000DD73                 db    0
.eh_frame:000000000000DD74                 db    0
.eh_frame:000000000000DD75                 db  42h ; B
.eh_frame:000000000000DD76                 db  0Eh
.eh_frame:000000000000DD77                 db  10h
.eh_frame:000000000000DD78                 db  8Fh
.eh_frame:000000000000DD79                 db    2
.eh_frame:000000000000DD7A                 db  42h ; B
.eh_frame:000000000000DD7B                 db  0Eh
.eh_frame:000000000000DD7C                 db  18h
.eh_frame:000000000000DD7D                 db  8Eh
.eh_frame:000000000000DD7E                 db    3
.eh_frame:000000000000DD7F                 db  42h ; B
.eh_frame:000000000000DD80                 db  0Eh
.eh_frame:000000000000DD81                 db  20h
.eh_frame:000000000000DD82                 db  8Dh
.eh_frame:000000000000DD83                 db    4
.eh_frame:000000000000DD84                 db  42h ; B
.eh_frame:000000000000DD85                 db  0Eh
.eh_frame:000000000000DD86                 db  28h ; (
.eh_frame:000000000000DD87                 db  8Ch
.eh_frame:000000000000DD88                 db    5
.eh_frame:000000000000DD89                 db  41h ; A
.eh_frame:000000000000DD8A                 db  0Eh
.eh_frame:000000000000DD8B                 db  30h ; 0
.eh_frame:000000000000DD8C                 db  86h
.eh_frame:000000000000DD8D                 db    6
.eh_frame:000000000000DD8E                 db  41h ; A
.eh_frame:000000000000DD8F                 db  0Eh
.eh_frame:000000000000DD90                 db  38h ; 8
.eh_frame:000000000000DD91                 db  83h
.eh_frame:000000000000DD92                 db    7
.eh_frame:000000000000DD93                 db  44h ; D
.eh_frame:000000000000DD94                 db  0Eh
.eh_frame:000000000000DD95                 db  40h ; @
.eh_frame:000000000000DD96                 db    2
.eh_frame:000000000000DD97                 db 0EEh
.eh_frame:000000000000DD98                 db  0Ah
.eh_frame:000000000000DD99                 db  0Eh
.eh_frame:000000000000DD9A                 db  38h ; 8
.eh_frame:000000000000DD9B                 db  46h ; F
.eh_frame:000000000000DD9C                 db  0Eh
.eh_frame:000000000000DD9D                 db  30h ; 0
.eh_frame:000000000000DD9E                 db  41h ; A
.eh_frame:000000000000DD9F                 db  0Eh
.eh_frame:000000000000DDA0                 db  28h ; (
.eh_frame:000000000000DDA1                 db  42h ; B
.eh_frame:000000000000DDA2                 db  0Eh
.eh_frame:000000000000DDA3                 db  20h
.eh_frame:000000000000DDA4                 db  42h ; B
.eh_frame:000000000000DDA5                 db  0Eh
.eh_frame:000000000000DDA6                 db  18h
.eh_frame:000000000000DDA7                 db  42h ; B
.eh_frame:000000000000DDA8                 db  0Eh
.eh_frame:000000000000DDA9                 db  10h
.eh_frame:000000000000DDAA                 db  42h ; B
.eh_frame:000000000000DDAB                 db  0Eh
.eh_frame:000000000000DDAC                 db    8
.eh_frame:000000000000DDAD                 db  45h ; E
.eh_frame:000000000000DDAE                 db  0Bh
.eh_frame:000000000000DDAF                 db  63h ; c
.eh_frame:000000000000DDB0                 db  0Eh
.eh_frame:000000000000DDB1                 db  38h ; 8
.eh_frame:000000000000DDB2                 db  43h ; C
.eh_frame:000000000000DDB3                 db  0Eh
.eh_frame:000000000000DDB4                 db  30h ; 0
.eh_frame:000000000000DDB5                 db  41h ; A
.eh_frame:000000000000DDB6                 db  0Eh
.eh_frame:000000000000DDB7                 db  28h ; (
.eh_frame:000000000000DDB8                 db  42h ; B
.eh_frame:000000000000DDB9                 db  0Eh
.eh_frame:000000000000DDBA                 db  20h
.eh_frame:000000000000DDBB                 db  42h ; B
.eh_frame:000000000000DDBC                 db  0Eh
.eh_frame:000000000000DDBD                 db  18h
.eh_frame:000000000000DDBE                 db  42h ; B
.eh_frame:000000000000DDBF                 db  0Eh
.eh_frame:000000000000DDC0                 db  10h
.eh_frame:000000000000DDC1                 db  42h ; B
.eh_frame:000000000000DDC2                 db  0Eh
.eh_frame:000000000000DDC3                 db    8
.eh_frame:000000000000DDC4                 db  10h
.eh_frame:000000000000DDC5                 db    0
.eh_frame:000000000000DDC6                 db    0
.eh_frame:000000000000DDC7                 db    0
.eh_frame:000000000000DDC8                 db 0B8h
.eh_frame:000000000000DDC9                 db  12h
.eh_frame:000000000000DDCA                 db    0
.eh_frame:000000000000DDCB                 db    0
.eh_frame:000000000000DDCC                 db    4
.eh_frame:000000000000DDCD                 db 0B7h
.eh_frame:000000000000DDCE                 db 0FFh
.eh_frame:000000000000DDCF                 db 0FFh
.eh_frame:000000000000DDD0                 db    5
.eh_frame:000000000000DDD1                 db    0
.eh_frame:000000000000DDD2                 db    0
.eh_frame:000000000000DDD3                 db    0
.eh_frame:000000000000DDD4                 db    0
.eh_frame:000000000000DDD5                 db    0
.eh_frame:000000000000DDD6                 db    0
.eh_frame:000000000000DDD7                 db    0
.eh_frame:000000000000DDD8                 db  10h
.eh_frame:000000000000DDD9                 db    0
.eh_frame:000000000000DDDA                 db    0
.eh_frame:000000000000DDDB                 db    0
.eh_frame:000000000000DDDC                 db 0CCh
.eh_frame:000000000000DDDD                 db  12h
.eh_frame:000000000000DDDE                 db    0
.eh_frame:000000000000DDDF                 db    0
.eh_frame:000000000000DDE0                 db    0
.eh_frame:000000000000DDE1                 db 0B7h
.eh_frame:000000000000DDE2                 db 0FFh
.eh_frame:000000000000DDE3                 db 0FFh
.eh_frame:000000000000DDE4                 db    5
.eh_frame:000000000000DDE5                 db    0
.eh_frame:000000000000DDE6                 db    0
.eh_frame:000000000000DDE7                 db    0
.eh_frame:000000000000DDE8                 db    0
.eh_frame:000000000000DDE9                 db    0
.eh_frame:000000000000DDEA                 db    0
.eh_frame:000000000000DDEB                 db    0
.eh_frame:000000000000DDEC                 db  10h
.eh_frame:000000000000DDED                 db    0
.eh_frame:000000000000DDEE                 db    0
.eh_frame:000000000000DDEF                 db    0
.eh_frame:000000000000DDF0                 db 0E0h
.eh_frame:000000000000DDF1                 db  12h
.eh_frame:000000000000DDF2                 db    0
.eh_frame:000000000000DDF3                 db    0
.eh_frame:000000000000DDF4                 db 0FCh
.eh_frame:000000000000DDF5                 db 0B6h
.eh_frame:000000000000DDF6                 db 0FFh
.eh_frame:000000000000DDF7                 db 0FFh
.eh_frame:000000000000DDF8                 db    5
.eh_frame:000000000000DDF9                 db    0
.eh_frame:000000000000DDFA                 db    0
.eh_frame:000000000000DDFB                 db    0
.eh_frame:000000000000DDFC                 db    0
.eh_frame:000000000000DDFD                 db    0
.eh_frame:000000000000DDFE                 db    0
.eh_frame:000000000000DDFF                 db    0
.eh_frame:000000000000DE00                 db  10h
.eh_frame:000000000000DE01                 db    0
.eh_frame:000000000000DE02                 db    0
.eh_frame:000000000000DE03                 db    0
.eh_frame:000000000000DE04                 db 0F4h
.eh_frame:000000000000DE05                 db  12h
.eh_frame:000000000000DE06                 db    0
.eh_frame:000000000000DE07                 db    0
.eh_frame:000000000000DE08                 db 0F8h
.eh_frame:000000000000DE09                 db 0B6h
.eh_frame:000000000000DE0A                 db 0FFh
.eh_frame:000000000000DE0B                 db 0FFh
.eh_frame:000000000000DE0C                 db  49h ; I
.eh_frame:000000000000DE0D                 db    0
.eh_frame:000000000000DE0E                 db    0
.eh_frame:000000000000DE0F                 db    0
.eh_frame:000000000000DE10                 db    0
.eh_frame:000000000000DE11                 db    0
.eh_frame:000000000000DE12                 db    0
.eh_frame:000000000000DE13                 db    0
.eh_frame:000000000000DE14                 db  10h
.eh_frame:000000000000DE15                 db    0
.eh_frame:000000000000DE16                 db    0
.eh_frame:000000000000DE17                 db    0
.eh_frame:000000000000DE18                 db    8
.eh_frame:000000000000DE19                 db  13h
.eh_frame:000000000000DE1A                 db    0
.eh_frame:000000000000DE1B                 db    0
.eh_frame:000000000000DE1C                 db  34h ; 4
.eh_frame:000000000000DE1D                 db 0B7h
.eh_frame:000000000000DE1E                 db 0FFh
.eh_frame:000000000000DE1F                 db 0FFh
.eh_frame:000000000000DE20                 db  58h ; X
.eh_frame:000000000000DE21                 db    0
.eh_frame:000000000000DE22                 db    0
.eh_frame:000000000000DE23                 db    0
.eh_frame:000000000000DE24                 db    0
.eh_frame:000000000000DE25                 db    0
.eh_frame:000000000000DE26                 db    0
.eh_frame:000000000000DE27                 db    0
.eh_frame:000000000000DE28                 db  38h ; 8
.eh_frame:000000000000DE29                 db    0
.eh_frame:000000000000DE2A                 db    0
.eh_frame:000000000000DE2B                 db    0
.eh_frame:000000000000DE2C                 db  1Ch
.eh_frame:000000000000DE2D                 db  13h
.eh_frame:000000000000DE2E                 db    0
.eh_frame:000000000000DE2F                 db    0
.eh_frame:000000000000DE30                 db  80h
.eh_frame:000000000000DE31                 db 0B7h
.eh_frame:000000000000DE32                 db 0FFh
.eh_frame:000000000000DE33                 db 0FFh
.eh_frame:000000000000DE34                 db  47h ; G
.eh_frame:000000000000DE35                 db    1
.eh_frame:000000000000DE36                 db    0
.eh_frame:000000000000DE37                 db    0
.eh_frame:000000000000DE38                 db    0
.eh_frame:000000000000DE39                 db  42h ; B
.eh_frame:000000000000DE3A                 db  0Eh
.eh_frame:000000000000DE3B                 db  10h
.eh_frame:000000000000DE3C                 db  8Dh
.eh_frame:000000000000DE3D                 db    2
.eh_frame:000000000000DE3E                 db  42h ; B
.eh_frame:000000000000DE3F                 db  0Eh
.eh_frame:000000000000DE40                 db  18h
.eh_frame:000000000000DE41                 db  8Ch
.eh_frame:000000000000DE42                 db    3
.eh_frame:000000000000DE43                 db  44h ; D
.eh_frame:000000000000DE44                 db  0Eh
.eh_frame:000000000000DE45                 db  20h
.eh_frame:000000000000DE46                 db  86h
.eh_frame:000000000000DE47                 db    4
.eh_frame:000000000000DE48                 db  41h ; A
.eh_frame:000000000000DE49                 db  0Eh
.eh_frame:000000000000DE4A                 db  28h ; (
.eh_frame:000000000000DE4B                 db  83h
.eh_frame:000000000000DE4C                 db    5
.eh_frame:000000000000DE4D                 db  46h ; F
.eh_frame:000000000000DE4E                 db  0Eh
.eh_frame:000000000000DE4F                 db  30h ; 0
.eh_frame:000000000000DE50                 db    2
.eh_frame:000000000000DE51                 db 0CDh
.eh_frame:000000000000DE52                 db  0Ah
.eh_frame:000000000000DE53                 db  0Eh
.eh_frame:000000000000DE54                 db  28h ; (
.eh_frame:000000000000DE55                 db  47h ; G
.eh_frame:000000000000DE56                 db  0Eh
.eh_frame:000000000000DE57                 db  20h
.eh_frame:000000000000DE58                 db  41h ; A
.eh_frame:000000000000DE59                 db  0Eh
.eh_frame:000000000000DE5A                 db  18h
.eh_frame:000000000000DE5B                 db  42h ; B
.eh_frame:000000000000DE5C                 db  0Eh
.eh_frame:000000000000DE5D                 db  10h
.eh_frame:000000000000DE5E                 db  42h ; B
.eh_frame:000000000000DE5F                 db  0Eh
.eh_frame:000000000000DE60                 db    8
.eh_frame:000000000000DE61                 db  58h ; X
.eh_frame:000000000000DE62                 db  0Bh
.eh_frame:000000000000DE63                 db    0
.eh_frame:000000000000DE64                 db  34h ; 4
.eh_frame:000000000000DE65                 db    0
.eh_frame:000000000000DE66                 db    0
.eh_frame:000000000000DE67                 db    0
.eh_frame:000000000000DE68                 db  58h ; X
.eh_frame:000000000000DE69                 db  13h
.eh_frame:000000000000DE6A                 db    0
.eh_frame:000000000000DE6B                 db    0
.eh_frame:000000000000DE6C                 db  94h
.eh_frame:000000000000DE6D                 db 0B8h
.eh_frame:000000000000DE6E                 db 0FFh
.eh_frame:000000000000DE6F                 db 0FFh
.eh_frame:000000000000DE70                 db  5Bh ; [
.eh_frame:000000000000DE71                 db    0
.eh_frame:000000000000DE72                 db    0
.eh_frame:000000000000DE73                 db    0
.eh_frame:000000000000DE74                 db    0
.eh_frame:000000000000DE75                 db  42h ; B
.eh_frame:000000000000DE76                 db  0Eh
.eh_frame:000000000000DE77                 db  10h
.eh_frame:000000000000DE78                 db  8Ch
.eh_frame:000000000000DE79                 db    2
.eh_frame:000000000000DE7A                 db  41h ; A
.eh_frame:000000000000DE7B                 db  0Eh
.eh_frame:000000000000DE7C                 db  18h
.eh_frame:000000000000DE7D                 db  86h
.eh_frame:000000000000DE7E                 db    3
.eh_frame:000000000000DE7F                 db  44h ; D
.eh_frame:000000000000DE80                 db  0Eh
.eh_frame:000000000000DE81                 db  20h
.eh_frame:000000000000DE82                 db  83h
.eh_frame:000000000000DE83                 db    4
.eh_frame:000000000000DE84                 db  79h ; y
.eh_frame:000000000000DE85                 db  0Ah
.eh_frame:000000000000DE86                 db  0Eh
.eh_frame:000000000000DE87                 db  18h
.eh_frame:000000000000DE88                 db  44h ; D
.eh_frame:000000000000DE89                 db  0Eh
.eh_frame:000000000000DE8A                 db  10h
.eh_frame:000000000000DE8B                 db  42h ; B
.eh_frame:000000000000DE8C                 db  0Eh
.eh_frame:000000000000DE8D                 db    8
.eh_frame:000000000000DE8E                 db  4Ah ; J
.eh_frame:000000000000DE8F                 db  0Bh
.eh_frame:000000000000DE90                 db  44h ; D
.eh_frame:000000000000DE91                 db  0Eh
.eh_frame:000000000000DE92                 db  18h
.eh_frame:000000000000DE93                 db  41h ; A
.eh_frame:000000000000DE94                 db  0Eh
.eh_frame:000000000000DE95                 db  10h
.eh_frame:000000000000DE96                 db  45h ; E
.eh_frame:000000000000DE97                 db  0Eh
.eh_frame:000000000000DE98                 db    8
.eh_frame:000000000000DE99                 db    0
.eh_frame:000000000000DE9A                 db    0
.eh_frame:000000000000DE9B                 db    0
.eh_frame:000000000000DE9C                 db  10h
.eh_frame:000000000000DE9D                 db    0
.eh_frame:000000000000DE9E                 db    0
.eh_frame:000000000000DE9F                 db    0
.eh_frame:000000000000DEA0                 db  90h
.eh_frame:000000000000DEA1                 db  13h
.eh_frame:000000000000DEA2                 db    0
.eh_frame:000000000000DEA3                 db    0
.eh_frame:000000000000DEA4                 db 0BCh
.eh_frame:000000000000DEA5                 db 0B8h
.eh_frame:000000000000DEA6                 db 0FFh
.eh_frame:000000000000DEA7                 db 0FFh
.eh_frame:000000000000DEA8                 db  41h ; A
.eh_frame:000000000000DEA9                 db    0
.eh_frame:000000000000DEAA                 db    0
.eh_frame:000000000000DEAB                 db    0
.eh_frame:000000000000DEAC                 db    0
.eh_frame:000000000000DEAD                 db  7Ch ; |
.eh_frame:000000000000DEAE                 db  0Eh
.eh_frame:000000000000DEAF                 db  10h
.eh_frame:000000000000DEB0                 db  30h ; 0
.eh_frame:000000000000DEB1                 db    0
.eh_frame:000000000000DEB2                 db    0
.eh_frame:000000000000DEB3                 db    0
.eh_frame:000000000000DEB4                 db 0A4h
.eh_frame:000000000000DEB5                 db  13h
.eh_frame:000000000000DEB6                 db    0
.eh_frame:000000000000DEB7                 db    0
.eh_frame:000000000000DEB8                 db 0F8h
.eh_frame:000000000000DEB9                 db 0B8h
.eh_frame:000000000000DEBA                 db 0FFh
.eh_frame:000000000000DEBB                 db 0FFh
.eh_frame:000000000000DEBC                 db  72h ; r
.eh_frame:000000000000DEBD                 db    0
.eh_frame:000000000000DEBE                 db    0
.eh_frame:000000000000DEBF                 db    0
.eh_frame:000000000000DEC0                 db    0
.eh_frame:000000000000DEC1                 db  41h ; A
.eh_frame:000000000000DEC2                 db  0Eh
.eh_frame:000000000000DEC3                 db  10h
.eh_frame:000000000000DEC4                 db  86h
.eh_frame:000000000000DEC5                 db    2
.eh_frame:000000000000DEC6                 db  41h ; A
.eh_frame:000000000000DEC7                 db  0Eh
.eh_frame:000000000000DEC8                 db  18h
.eh_frame:000000000000DEC9                 db  83h
.eh_frame:000000000000DECA                 db    3
.eh_frame:000000000000DECB                 db  4Ah ; J
.eh_frame:000000000000DECC                 db  0Eh
.eh_frame:000000000000DECD                 db  20h
.eh_frame:000000000000DECE                 db    2
.eh_frame:000000000000DECF                 db  53h ; S
.eh_frame:000000000000DED0                 db  0Ah
.eh_frame:000000000000DED1                 db  0Eh
.eh_frame:000000000000DED2                 db  18h
.eh_frame:000000000000DED3                 db  41h ; A
.eh_frame:000000000000DED4                 db  0Eh
.eh_frame:000000000000DED5                 db  10h
.eh_frame:000000000000DED6                 db  41h ; A
.eh_frame:000000000000DED7                 db  0Eh
.eh_frame:000000000000DED8                 db    8
.eh_frame:000000000000DED9                 db  47h ; G
.eh_frame:000000000000DEDA                 db  0Bh
.eh_frame:000000000000DEDB                 db  47h ; G
.eh_frame:000000000000DEDC                 db  0Eh
.eh_frame:000000000000DEDD                 db  18h
.eh_frame:000000000000DEDE                 db  41h ; A
.eh_frame:000000000000DEDF                 db  0Eh
.eh_frame:000000000000DEE0                 db  10h
.eh_frame:000000000000DEE1                 db  41h ; A
.eh_frame:000000000000DEE2                 db  0Eh
.eh_frame:000000000000DEE3                 db    8
.eh_frame:000000000000DEE4                 db  10h
.eh_frame:000000000000DEE5                 db    0
.eh_frame:000000000000DEE6                 db    0
.eh_frame:000000000000DEE7                 db    0
.eh_frame:000000000000DEE8                 db 0D8h
.eh_frame:000000000000DEE9                 db  13h
.eh_frame:000000000000DEEA                 db    0
.eh_frame:000000000000DEEB                 db    0
.eh_frame:000000000000DEEC                 db  44h ; D
.eh_frame:000000000000DEED                 db 0B9h
.eh_frame:000000000000DEEE                 db 0FFh
.eh_frame:000000000000DEEF                 db 0FFh
.eh_frame:000000000000DEF0                 db  65h ; e
.eh_frame:000000000000DEF1                 db    0
.eh_frame:000000000000DEF2                 db    0
.eh_frame:000000000000DEF3                 db    0
.eh_frame:000000000000DEF4                 db    0
.eh_frame:000000000000DEF5                 db    0
.eh_frame:000000000000DEF6                 db    0
.eh_frame:000000000000DEF7                 db    0
.eh_frame:000000000000DEF8                 db  48h ; H
.eh_frame:000000000000DEF9                 db    0
.eh_frame:000000000000DEFA                 db    0
.eh_frame:000000000000DEFB                 db    0
.eh_frame:000000000000DEFC                 db 0ECh
.eh_frame:000000000000DEFD                 db  13h
.eh_frame:000000000000DEFE                 db    0
.eh_frame:000000000000DEFF                 db    0
.eh_frame:000000000000DF00                 db 0A0h
.eh_frame:000000000000DF01                 db 0B9h
.eh_frame:000000000000DF02                 db 0FFh
.eh_frame:000000000000DF03                 db 0FFh
.eh_frame:000000000000DF04                 db  6Ah ; j
.eh_frame:000000000000DF05                 db    0
.eh_frame:000000000000DF06                 db    0
.eh_frame:000000000000DF07                 db    0
.eh_frame:000000000000DF08                 db    0
.eh_frame:000000000000DF09                 db  42h ; B
.eh_frame:000000000000DF0A                 db  0Eh
.eh_frame:000000000000DF0B                 db  10h
.eh_frame:000000000000DF0C                 db  8Fh
.eh_frame:000000000000DF0D                 db    2
.eh_frame:000000000000DF0E                 db  42h ; B
.eh_frame:000000000000DF0F                 db  0Eh
.eh_frame:000000000000DF10                 db  18h
.eh_frame:000000000000DF11                 db  8Eh
.eh_frame:000000000000DF12                 db    3
.eh_frame:000000000000DF13                 db  42h ; B
.eh_frame:000000000000DF14                 db  0Eh
.eh_frame:000000000000DF15                 db  20h
.eh_frame:000000000000DF16                 db  8Dh
.eh_frame:000000000000DF17                 db    4
.eh_frame:000000000000DF18                 db  42h ; B
.eh_frame:000000000000DF19                 db  0Eh
.eh_frame:000000000000DF1A                 db  28h ; (
.eh_frame:000000000000DF1B                 db  8Ch
.eh_frame:000000000000DF1C                 db    5
.eh_frame:000000000000DF1D                 db  41h ; A
.eh_frame:000000000000DF1E                 db  0Eh
.eh_frame:000000000000DF1F                 db  30h ; 0
.eh_frame:000000000000DF20                 db  86h
.eh_frame:000000000000DF21                 db    6
.eh_frame:000000000000DF22                 db  41h ; A
.eh_frame:000000000000DF23                 db  0Eh
.eh_frame:000000000000DF24                 db  38h ; 8
.eh_frame:000000000000DF25                 db  83h
.eh_frame:000000000000DF26                 db    7
.eh_frame:000000000000DF27                 db  44h ; D
.eh_frame:000000000000DF28                 db  0Eh
.eh_frame:000000000000DF29                 db  40h ; @
.eh_frame:000000000000DF2A                 db    2
.eh_frame:000000000000DF2B                 db  4Ah ; J
.eh_frame:000000000000DF2C                 db  0Ah
.eh_frame:000000000000DF2D                 db  0Eh
.eh_frame:000000000000DF2E                 db  38h ; 8
.eh_frame:000000000000DF2F                 db  44h ; D
.eh_frame:000000000000DF30                 db  0Eh
.eh_frame:000000000000DF31                 db  30h ; 0
.eh_frame:000000000000DF32                 db  41h ; A
.eh_frame:000000000000DF33                 db  0Eh
.eh_frame:000000000000DF34                 db  28h ; (
.eh_frame:000000000000DF35                 db  42h ; B
.eh_frame:000000000000DF36                 db  0Eh
.eh_frame:000000000000DF37                 db  20h
.eh_frame:000000000000DF38                 db  42h ; B
.eh_frame:000000000000DF39                 db  0Eh
.eh_frame:000000000000DF3A                 db  18h
.eh_frame:000000000000DF3B                 db  42h ; B
.eh_frame:000000000000DF3C                 db  0Eh
.eh_frame:000000000000DF3D                 db  10h
.eh_frame:000000000000DF3E                 db  42h ; B
.eh_frame:000000000000DF3F                 db  0Eh
.eh_frame:000000000000DF40                 db    8
.eh_frame:000000000000DF41                 db  41h ; A
.eh_frame:000000000000DF42                 db  0Bh
.eh_frame:000000000000DF43                 db    0
.eh_frame:000000000000DF44                 db  10h
.eh_frame:000000000000DF45                 db    0
.eh_frame:000000000000DF46                 db    0
.eh_frame:000000000000DF47                 db    0
.eh_frame:000000000000DF48                 db  38h ; 8
.eh_frame:000000000000DF49                 db  14h
.eh_frame:000000000000DF4A                 db    0
.eh_frame:000000000000DF4B                 db    0
.eh_frame:000000000000DF4C                 db 0C4h
.eh_frame:000000000000DF4D                 db 0B9h
.eh_frame:000000000000DF4E                 db 0FFh
.eh_frame:000000000000DF4F                 db 0FFh
.eh_frame:000000000000DF50                 db  31h ; 1
.eh_frame:000000000000DF51                 db    0
.eh_frame:000000000000DF52                 db    0
.eh_frame:000000000000DF53                 db    0
.eh_frame:000000000000DF54                 db    0
.eh_frame:000000000000DF55                 db    0
.eh_frame:000000000000DF56                 db    0
.eh_frame:000000000000DF57                 db    0
.eh_frame:000000000000DF58                 db  10h
.eh_frame:000000000000DF59                 db    0
.eh_frame:000000000000DF5A                 db    0
.eh_frame:000000000000DF5B                 db    0
.eh_frame:000000000000DF5C                 db  4Ch ; L
.eh_frame:000000000000DF5D                 db  14h
.eh_frame:000000000000DF5E                 db    0
.eh_frame:000000000000DF5F                 db    0
.eh_frame:000000000000DF60                 db 0F0h
.eh_frame:000000000000DF61                 db 0B9h
.eh_frame:000000000000DF62                 db 0FFh
.eh_frame:000000000000DF63                 db 0FFh
.eh_frame:000000000000DF64                 db  20h
.eh_frame:000000000000DF65                 db    0
.eh_frame:000000000000DF66                 db    0
.eh_frame:000000000000DF67                 db    0
.eh_frame:000000000000DF68                 db    0
.eh_frame:000000000000DF69                 db    0
.eh_frame:000000000000DF6A                 db    0
.eh_frame:000000000000DF6B                 db    0
.eh_frame:000000000000DF6C                 db  48h ; H
.eh_frame:000000000000DF6D                 db    0
.eh_frame:000000000000DF6E                 db    0
.eh_frame:000000000000DF6F                 db    0
.eh_frame:000000000000DF70                 db  60h ; `
.eh_frame:000000000000DF71                 db  14h
.eh_frame:000000000000DF72                 db    0
.eh_frame:000000000000DF73                 db    0
.eh_frame:000000000000DF74                 db 0FCh
.eh_frame:000000000000DF75                 db 0B9h
.eh_frame:000000000000DF76                 db 0FFh
.eh_frame:000000000000DF77                 db 0FFh
.eh_frame:000000000000DF78                 db 0B4h
.eh_frame:000000000000DF79                 db    1
.eh_frame:000000000000DF7A                 db    0
.eh_frame:000000000000DF7B                 db    0
.eh_frame:000000000000DF7C                 db    0
.eh_frame:000000000000DF7D                 db  42h ; B
.eh_frame:000000000000DF7E                 db  0Eh
.eh_frame:000000000000DF7F                 db  10h
.eh_frame:000000000000DF80                 db  8Fh
.eh_frame:000000000000DF81                 db    2
.eh_frame:000000000000DF82                 db  42h ; B
.eh_frame:000000000000DF83                 db  0Eh
.eh_frame:000000000000DF84                 db  18h
.eh_frame:000000000000DF85                 db  8Eh
.eh_frame:000000000000DF86                 db    3
.eh_frame:000000000000DF87                 db  49h ; I
.eh_frame:000000000000DF88                 db  0Eh
.eh_frame:000000000000DF89                 db  20h
.eh_frame:000000000000DF8A                 db  8Dh
.eh_frame:000000000000DF8B                 db    4
.eh_frame:000000000000DF8C                 db  42h ; B
.eh_frame:000000000000DF8D                 db  0Eh
.eh_frame:000000000000DF8E                 db  28h ; (
.eh_frame:000000000000DF8F                 db  8Ch
.eh_frame:000000000000DF90                 db    5
.eh_frame:000000000000DF91                 db  44h ; D
.eh_frame:000000000000DF92                 db  0Eh
.eh_frame:000000000000DF93                 db  30h ; 0
.eh_frame:000000000000DF94                 db  86h
.eh_frame:000000000000DF95                 db    6
.eh_frame:000000000000DF96                 db  41h ; A
.eh_frame:000000000000DF97                 db  0Eh
.eh_frame:000000000000DF98                 db  38h ; 8
.eh_frame:000000000000DF99                 db  83h
.eh_frame:000000000000DF9A                 db    7
.eh_frame:000000000000DF9B                 db  52h ; R
.eh_frame:000000000000DF9C                 db  0Eh
.eh_frame:000000000000DF9D                 db  40h ; @
.eh_frame:000000000000DF9E                 db    2
.eh_frame:000000000000DF9F                 db 0D8h
.eh_frame:000000000000DFA0                 db  0Ah
.eh_frame:000000000000DFA1                 db  0Eh
.eh_frame:000000000000DFA2                 db  38h ; 8
.eh_frame:000000000000DFA3                 db  44h ; D
.eh_frame:000000000000DFA4                 db  0Eh
.eh_frame:000000000000DFA5                 db  30h ; 0
.eh_frame:000000000000DFA6                 db  41h ; A
.eh_frame:000000000000DFA7                 db  0Eh
.eh_frame:000000000000DFA8                 db  28h ; (
.eh_frame:000000000000DFA9                 db  42h ; B
.eh_frame:000000000000DFAA                 db  0Eh
.eh_frame:000000000000DFAB                 db  20h
.eh_frame:000000000000DFAC                 db  42h ; B
.eh_frame:000000000000DFAD                 db  0Eh
.eh_frame:000000000000DFAE                 db  18h
.eh_frame:000000000000DFAF                 db  42h ; B
.eh_frame:000000000000DFB0                 db  0Eh
.eh_frame:000000000000DFB1                 db  10h
.eh_frame:000000000000DFB2                 db  42h ; B
.eh_frame:000000000000DFB3                 db  0Eh
.eh_frame:000000000000DFB4                 db    8
.eh_frame:000000000000DFB5                 db  45h ; E
.eh_frame:000000000000DFB6                 db  0Bh
.eh_frame:000000000000DFB7                 db    0
.eh_frame:000000000000DFB8                 db  28h ; (
.eh_frame:000000000000DFB9                 db    0
.eh_frame:000000000000DFBA                 db    0
.eh_frame:000000000000DFBB                 db    0
.eh_frame:000000000000DFBC                 db 0ACh
.eh_frame:000000000000DFBD                 db  14h
.eh_frame:000000000000DFBE                 db    0
.eh_frame:000000000000DFBF                 db    0
.eh_frame:000000000000DFC0                 db  70h ; p
.eh_frame:000000000000DFC1                 db 0BBh
.eh_frame:000000000000DFC2                 db 0FFh
.eh_frame:000000000000DFC3                 db 0FFh
.eh_frame:000000000000DFC4                 db  90h
.eh_frame:000000000000DFC5                 db    0
.eh_frame:000000000000DFC6                 db    0
.eh_frame:000000000000DFC7                 db    0
.eh_frame:000000000000DFC8                 db    0
.eh_frame:000000000000DFC9                 db  42h ; B
.eh_frame:000000000000DFCA                 db  0Eh
.eh_frame:000000000000DFCB                 db  10h
.eh_frame:000000000000DFCC                 db  8Ch
.eh_frame:000000000000DFCD                 db    2
.eh_frame:000000000000DFCE                 db  41h ; A
.eh_frame:000000000000DFCF                 db  0Eh
.eh_frame:000000000000DFD0                 db  18h
.eh_frame:000000000000DFD1                 db  86h
.eh_frame:000000000000DFD2                 db    3
.eh_frame:000000000000DFD3                 db  44h ; D
.eh_frame:000000000000DFD4                 db  0Eh
.eh_frame:000000000000DFD5                 db  20h
.eh_frame:000000000000DFD6                 db  83h
.eh_frame:000000000000DFD7                 db    4
.eh_frame:000000000000DFD8                 db    2
.eh_frame:000000000000DFD9                 db  85h
.eh_frame:000000000000DFDA                 db  0Eh
.eh_frame:000000000000DFDB                 db  18h
.eh_frame:000000000000DFDC                 db  41h ; A
.eh_frame:000000000000DFDD                 db  0Eh
.eh_frame:000000000000DFDE                 db  10h
.eh_frame:000000000000DFDF                 db  42h ; B
.eh_frame:000000000000DFE0                 db  0Eh
.eh_frame:000000000000DFE1                 db    8
.eh_frame:000000000000DFE2                 db    0
.eh_frame:000000000000DFE3                 db    0
.eh_frame:000000000000DFE4                 db  28h ; (
.eh_frame:000000000000DFE5                 db    0
.eh_frame:000000000000DFE6                 db    0
.eh_frame:000000000000DFE7                 db    0
.eh_frame:000000000000DFE8                 db 0D8h
.eh_frame:000000000000DFE9                 db  14h
.eh_frame:000000000000DFEA                 db    0
.eh_frame:000000000000DFEB                 db    0
.eh_frame:000000000000DFEC                 db 0D4h
.eh_frame:000000000000DFED                 db 0BBh
.eh_frame:000000000000DFEE                 db 0FFh
.eh_frame:000000000000DFEF                 db 0FFh
.eh_frame:000000000000DFF0                 db 0D6h
.eh_frame:000000000000DFF1                 db    0
.eh_frame:000000000000DFF2                 db    0
.eh_frame:000000000000DFF3                 db    0
.eh_frame:000000000000DFF4                 db    0
.eh_frame:000000000000DFF5                 db  42h ; B
.eh_frame:000000000000DFF6                 db  0Eh
.eh_frame:000000000000DFF7                 db  10h
.eh_frame:000000000000DFF8                 db  8Ch
.eh_frame:000000000000DFF9                 db    2
.eh_frame:000000000000DFFA                 db  41h ; A
.eh_frame:000000000000DFFB                 db  0Eh
.eh_frame:000000000000DFFC                 db  18h
.eh_frame:000000000000DFFD                 db  86h
.eh_frame:000000000000DFFE                 db    3
.eh_frame:000000000000DFFF                 db  44h ; D
.eh_frame:000000000000E000                 db  0Eh
.eh_frame:000000000000E001                 db  20h
.eh_frame:000000000000E002                 db  83h
.eh_frame:000000000000E003                 db    4
.eh_frame:000000000000E004                 db    2
.eh_frame:000000000000E005                 db 0C4h
.eh_frame:000000000000E006                 db  0Eh
.eh_frame:000000000000E007                 db  18h
.eh_frame:000000000000E008                 db  44h ; D
.eh_frame:000000000000E009                 db  0Eh
.eh_frame:000000000000E00A                 db  10h
.eh_frame:000000000000E00B                 db  42h ; B
.eh_frame:000000000000E00C                 db  0Eh
.eh_frame:000000000000E00D                 db    8
.eh_frame:000000000000E00E                 db    0
.eh_frame:000000000000E00F                 db    0
.eh_frame:000000000000E010                 db  34h ; 4
.eh_frame:000000000000E011                 db    0
.eh_frame:000000000000E012                 db    0
.eh_frame:000000000000E013                 db    0
.eh_frame:000000000000E014                 db    4
.eh_frame:000000000000E015                 db  15h
.eh_frame:000000000000E016                 db    0
.eh_frame:000000000000E017                 db    0
.eh_frame:000000000000E018                 db  88h
.eh_frame:000000000000E019                 db 0BCh
.eh_frame:000000000000E01A                 db 0FFh
.eh_frame:000000000000E01B                 db 0FFh
.eh_frame:000000000000E01C                 db  3Eh ; >
.eh_frame:000000000000E01D                 db    2
.eh_frame:000000000000E01E                 db    0
.eh_frame:000000000000E01F                 db    0
.eh_frame:000000000000E020                 db    0
.eh_frame:000000000000E021                 db  42h ; B
.eh_frame:000000000000E022                 db  0Eh
.eh_frame:000000000000E023                 db  10h
.eh_frame:000000000000E024                 db  8Ch
.eh_frame:000000000000E025                 db    2
.eh_frame:000000000000E026                 db  41h ; A
.eh_frame:000000000000E027                 db  0Eh
.eh_frame:000000000000E028                 db  18h
.eh_frame:000000000000E029                 db  86h
.eh_frame:000000000000E02A                 db    3
.eh_frame:000000000000E02B                 db  44h ; D
.eh_frame:000000000000E02C                 db  0Eh
.eh_frame:000000000000E02D                 db  20h
.eh_frame:000000000000E02E                 db  83h
.eh_frame:000000000000E02F                 db    4
.eh_frame:000000000000E030                 db  44h ; D
.eh_frame:000000000000E031                 db  0Eh
.eh_frame:000000000000E032                 db  80h
.eh_frame:000000000000E033                 db    1
.eh_frame:000000000000E034                 db    3
.eh_frame:000000000000E035                 db  91h
.eh_frame:000000000000E036                 db    1
.eh_frame:000000000000E037                 db  0Ah
.eh_frame:000000000000E038                 db  0Eh
.eh_frame:000000000000E039                 db  20h
.eh_frame:000000000000E03A                 db  41h ; A
.eh_frame:000000000000E03B                 db  0Eh
.eh_frame:000000000000E03C                 db  18h
.eh_frame:000000000000E03D                 db  41h ; A
.eh_frame:000000000000E03E                 db  0Eh
.eh_frame:000000000000E03F                 db  10h
.eh_frame:000000000000E040                 db  42h ; B
.eh_frame:000000000000E041                 db  0Eh
.eh_frame:000000000000E042                 db    8
.eh_frame:000000000000E043                 db  48h ; H
.eh_frame:000000000000E044                 db  0Bh
.eh_frame:000000000000E045                 db    0
.eh_frame:000000000000E046                 db    0
.eh_frame:000000000000E047                 db    0
.eh_frame:000000000000E048                 db  38h ; 8
.eh_frame:000000000000E049                 db    0
.eh_frame:000000000000E04A                 db    0
.eh_frame:000000000000E04B                 db    0
.eh_frame:000000000000E04C                 db  3Ch ; <
.eh_frame:000000000000E04D                 db  15h
.eh_frame:000000000000E04E                 db    0
.eh_frame:000000000000E04F                 db    0
.eh_frame:000000000000E050                 db  90h
.eh_frame:000000000000E051                 db 0BEh
.eh_frame:000000000000E052                 db 0FFh
.eh_frame:000000000000E053                 db 0FFh
.eh_frame:000000000000E054                 db  84h
.eh_frame:000000000000E055                 db    2
.eh_frame:000000000000E056                 db    0
.eh_frame:000000000000E057                 db    0
.eh_frame:000000000000E058                 db    0
.eh_frame:000000000000E059                 db  42h ; B
.eh_frame:000000000000E05A                 db  0Eh
.eh_frame:000000000000E05B                 db  10h
.eh_frame:000000000000E05C                 db  8Dh
.eh_frame:000000000000E05D                 db    2
.eh_frame:000000000000E05E                 db  42h ; B
.eh_frame:000000000000E05F                 db  0Eh
.eh_frame:000000000000E060                 db  18h
.eh_frame:000000000000E061                 db  8Ch
.eh_frame:000000000000E062                 db    3
.eh_frame:000000000000E063                 db  41h ; A
.eh_frame:000000000000E064                 db  0Eh
.eh_frame:000000000000E065                 db  20h
.eh_frame:000000000000E066                 db  86h
.eh_frame:000000000000E067                 db    4
.eh_frame:000000000000E068                 db  41h ; A
.eh_frame:000000000000E069                 db  0Eh
.eh_frame:000000000000E06A                 db  28h ; (
.eh_frame:000000000000E06B                 db  83h
.eh_frame:000000000000E06C                 db    5
.eh_frame:000000000000E06D                 db  44h ; D
.eh_frame:000000000000E06E                 db  0Eh
.eh_frame:000000000000E06F                 db  40h ; @
.eh_frame:000000000000E070                 db    2
.eh_frame:000000000000E071                 db  5Ah ; Z
.eh_frame:000000000000E072                 db  0Ah
.eh_frame:000000000000E073                 db  0Eh
.eh_frame:000000000000E074                 db  28h ; (
.eh_frame:000000000000E075                 db  41h ; A
.eh_frame:000000000000E076                 db  0Eh
.eh_frame:000000000000E077                 db  20h
.eh_frame:000000000000E078                 db  41h ; A
.eh_frame:000000000000E079                 db  0Eh
.eh_frame:000000000000E07A                 db  18h
.eh_frame:000000000000E07B                 db  42h ; B
.eh_frame:000000000000E07C                 db  0Eh
.eh_frame:000000000000E07D                 db  10h
.eh_frame:000000000000E07E                 db  42h ; B
.eh_frame:000000000000E07F                 db  0Eh
.eh_frame:000000000000E080                 db    8
.eh_frame:000000000000E081                 db  46h ; F
.eh_frame:000000000000E082                 db  0Bh
.eh_frame:000000000000E083                 db    0
.eh_frame:000000000000E084                 db  20h
.eh_frame:000000000000E085                 db    0
.eh_frame:000000000000E086                 db    0
.eh_frame:000000000000E087                 db    0
.eh_frame:000000000000E088                 db  78h ; x
.eh_frame:000000000000E089                 db  15h
.eh_frame:000000000000E08A                 db    0
.eh_frame:000000000000E08B                 db    0
.eh_frame:000000000000E08C                 db 0E4h
.eh_frame:000000000000E08D                 db 0C0h
.eh_frame:000000000000E08E                 db 0FFh
.eh_frame:000000000000E08F                 db 0FFh
.eh_frame:000000000000E090                 db  59h ; Y
.eh_frame:000000000000E091                 db    0
.eh_frame:000000000000E092                 db    0
.eh_frame:000000000000E093                 db    0
.eh_frame:000000000000E094                 db    0
.eh_frame:000000000000E095                 db  41h ; A
.eh_frame:000000000000E096                 db  0Eh
.eh_frame:000000000000E097                 db  10h
.eh_frame:000000000000E098                 db  83h
.eh_frame:000000000000E099                 db    2
.eh_frame:000000000000E09A                 db  47h ; G
.eh_frame:000000000000E09B                 db  0Eh
.eh_frame:000000000000E09C                 db  20h
.eh_frame:000000000000E09D                 db  7Ch ; |
.eh_frame:000000000000E09E                 db  0Ah
.eh_frame:000000000000E09F                 db  0Eh
.eh_frame:000000000000E0A0                 db  10h
.eh_frame:000000000000E0A1                 db  41h ; A
.eh_frame:000000000000E0A2                 db  0Eh
.eh_frame:000000000000E0A3                 db    8
.eh_frame:000000000000E0A4                 db  4Bh ; K
.eh_frame:000000000000E0A5                 db  0Bh
.eh_frame:000000000000E0A6                 db    0
.eh_frame:000000000000E0A7                 db    0
.eh_frame:000000000000E0A8                 db  34h ; 4
.eh_frame:000000000000E0A9                 db    0
.eh_frame:000000000000E0AA                 db    0
.eh_frame:000000000000E0AB                 db    0
.eh_frame:000000000000E0AC                 db  9Ch
.eh_frame:000000000000E0AD                 db  15h
.eh_frame:000000000000E0AE                 db    0
.eh_frame:000000000000E0AF                 db    0
.eh_frame:000000000000E0B0                 db  20h
.eh_frame:000000000000E0B1                 db 0C1h
.eh_frame:000000000000E0B2                 db 0FFh
.eh_frame:000000000000E0B3                 db 0FFh
.eh_frame:000000000000E0B4                 db    3
.eh_frame:000000000000E0B5                 db    2
.eh_frame:000000000000E0B6                 db    0
.eh_frame:000000000000E0B7                 db    0
.eh_frame:000000000000E0B8                 db    0
.eh_frame:000000000000E0B9                 db  42h ; B
.eh_frame:000000000000E0BA                 db  0Eh
.eh_frame:000000000000E0BB                 db  10h
.eh_frame:000000000000E0BC                 db  8Ch
.eh_frame:000000000000E0BD                 db    2
.eh_frame:000000000000E0BE                 db  41h ; A
.eh_frame:000000000000E0BF                 db  0Eh
.eh_frame:000000000000E0C0                 db  18h
.eh_frame:000000000000E0C1                 db  86h
.eh_frame:000000000000E0C2                 db    3
.eh_frame:000000000000E0C3                 db  46h ; F
.eh_frame:000000000000E0C4                 db  0Eh
.eh_frame:000000000000E0C5                 db  20h
.eh_frame:000000000000E0C6                 db  83h
.eh_frame:000000000000E0C7                 db    4
.eh_frame:000000000000E0C8                 db  47h ; G
.eh_frame:000000000000E0C9                 db  0Eh
.eh_frame:000000000000E0CA                 db  30h ; 0
.eh_frame:000000000000E0CB                 db    2
.eh_frame:000000000000E0CC                 db  4Ah ; J
.eh_frame:000000000000E0CD                 db  0Ah
.eh_frame:000000000000E0CE                 db  0Eh
.eh_frame:000000000000E0CF                 db  20h
.eh_frame:000000000000E0D0                 db  41h ; A
.eh_frame:000000000000E0D1                 db  0Eh
.eh_frame:000000000000E0D2                 db  18h
.eh_frame:000000000000E0D3                 db  41h ; A
.eh_frame:000000000000E0D4                 db  0Eh
.eh_frame:000000000000E0D5                 db  10h
.eh_frame:000000000000E0D6                 db  42h ; B
.eh_frame:000000000000E0D7                 db  0Eh
.eh_frame:000000000000E0D8                 db    8
.eh_frame:000000000000E0D9                 db  42h ; B
.eh_frame:000000000000E0DA                 db  0Bh
.eh_frame:000000000000E0DB                 db    0
.eh_frame:000000000000E0DC                 db    0
.eh_frame:000000000000E0DD                 db    0
.eh_frame:000000000000E0DE                 db    0
.eh_frame:000000000000E0DF                 db    0
.eh_frame:000000000000E0E0                 db  10h
.eh_frame:000000000000E0E1                 db    0
.eh_frame:000000000000E0E2                 db    0
.eh_frame:000000000000E0E3                 db    0
.eh_frame:000000000000E0E4                 db 0D4h
.eh_frame:000000000000E0E5                 db  15h
.eh_frame:000000000000E0E6                 db    0
.eh_frame:000000000000E0E7                 db    0
.eh_frame:000000000000E0E8                 db 0F8h
.eh_frame:000000000000E0E9                 db 0C2h
.eh_frame:000000000000E0EA                 db 0FFh
.eh_frame:000000000000E0EB                 db 0FFh
.eh_frame:000000000000E0EC                 db  1Bh
.eh_frame:000000000000E0ED                 db    0
.eh_frame:000000000000E0EE                 db    0
.eh_frame:000000000000E0EF                 db    0
.eh_frame:000000000000E0F0                 db    0
.eh_frame:000000000000E0F1                 db    0
.eh_frame:000000000000E0F2                 db    0
.eh_frame:000000000000E0F3                 db    0
.eh_frame:000000000000E0F4                 db  10h
.eh_frame:000000000000E0F5                 db    0
.eh_frame:000000000000E0F6                 db    0
.eh_frame:000000000000E0F7                 db    0
.eh_frame:000000000000E0F8                 db 0E8h
.eh_frame:000000000000E0F9                 db  15h
.eh_frame:000000000000E0FA                 db    0
.eh_frame:000000000000E0FB                 db    0
.eh_frame:000000000000E0FC                 db    4
.eh_frame:000000000000E0FD                 db 0C3h
.eh_frame:000000000000E0FE                 db 0FFh
.eh_frame:000000000000E0FF                 db 0FFh
.eh_frame:000000000000E100                 db    5
.eh_frame:000000000000E101                 db    0
.eh_frame:000000000000E102                 db    0
.eh_frame:000000000000E103                 db    0
.eh_frame:000000000000E104                 db    0
.eh_frame:000000000000E105                 db    0
.eh_frame:000000000000E106                 db    0
.eh_frame:000000000000E107                 db    0
.eh_frame:000000000000E108                 db  10h
.eh_frame:000000000000E109                 db    0
.eh_frame:000000000000E10A                 db    0
.eh_frame:000000000000E10B                 db    0
.eh_frame:000000000000E10C                 db 0FCh
.eh_frame:000000000000E10D                 db  15h
.eh_frame:000000000000E10E                 db    0
.eh_frame:000000000000E10F                 db    0
.eh_frame:000000000000E110                 db    0
.eh_frame:000000000000E111                 db 0C3h
.eh_frame:000000000000E112                 db 0FFh
.eh_frame:000000000000E113                 db 0FFh
.eh_frame:000000000000E114                 db  35h ; 5
.eh_frame:000000000000E115                 db    0
.eh_frame:000000000000E116                 db    0
.eh_frame:000000000000E117                 db    0
.eh_frame:000000000000E118                 db    0
.eh_frame:000000000000E119                 db    0
.eh_frame:000000000000E11A                 db    0
.eh_frame:000000000000E11B                 db    0
.eh_frame:000000000000E11C                 db  10h
.eh_frame:000000000000E11D                 db    0
.eh_frame:000000000000E11E                 db    0
.eh_frame:000000000000E11F                 db    0
.eh_frame:000000000000E120                 db  10h
.eh_frame:000000000000E121                 db  16h
.eh_frame:000000000000E122                 db    0
.eh_frame:000000000000E123                 db    0
.eh_frame:000000000000E124                 db  2Ch ; ,
.eh_frame:000000000000E125                 db 0C3h
.eh_frame:000000000000E126                 db 0FFh
.eh_frame:000000000000E127                 db 0FFh
.eh_frame:000000000000E128                 db  3Eh ; >
.eh_frame:000000000000E129                 db    0
.eh_frame:000000000000E12A                 db    0
.eh_frame:000000000000E12B                 db    0
.eh_frame:000000000000E12C                 db    0
.eh_frame:000000000000E12D                 db  79h ; y
.eh_frame:000000000000E12E                 db  0Eh
.eh_frame:000000000000E12F                 db  10h
.eh_frame:000000000000E130                 db  1Ch
.eh_frame:000000000000E131                 db    0
.eh_frame:000000000000E132                 db    0
.eh_frame:000000000000E133                 db    0
.eh_frame:000000000000E134                 db  24h ; $
.eh_frame:000000000000E135                 db  16h
.eh_frame:000000000000E136                 db    0
.eh_frame:000000000000E137                 db    0
.eh_frame:000000000000E138                 db  58h ; X
.eh_frame:000000000000E139                 db 0C3h
.eh_frame:000000000000E13A                 db 0FFh
.eh_frame:000000000000E13B                 db 0FFh
.eh_frame:000000000000E13C                 db  3Ch ; <
.eh_frame:000000000000E13D                 db    0
.eh_frame:000000000000E13E                 db    0
.eh_frame:000000000000E13F                 db    0
.eh_frame:000000000000E140                 db    0
.eh_frame:000000000000E141                 db  44h ; D
.eh_frame:000000000000E142                 db  0Eh
.eh_frame:000000000000E143                 db  10h
.eh_frame:000000000000E144                 db  61h ; a
.eh_frame:000000000000E145                 db  0Ah
.eh_frame:000000000000E146                 db  0Eh
.eh_frame:000000000000E147                 db    8
.eh_frame:000000000000E148                 db  4Bh ; K
.eh_frame:000000000000E149                 db  0Bh
.eh_frame:000000000000E14A                 db  4Bh ; K
.eh_frame:000000000000E14B                 db  0Eh
.eh_frame:000000000000E14C                 db    8
.eh_frame:000000000000E14D                 db    0
.eh_frame:000000000000E14E                 db    0
.eh_frame:000000000000E14F                 db    0
.eh_frame:000000000000E150                 db  1Ch
.eh_frame:000000000000E151                 db    0
.eh_frame:000000000000E152                 db    0
.eh_frame:000000000000E153                 db    0
.eh_frame:000000000000E154                 db  44h ; D
.eh_frame:000000000000E155                 db  16h
.eh_frame:000000000000E156                 db    0
.eh_frame:000000000000E157                 db    0
.eh_frame:000000000000E158                 db  78h ; x
.eh_frame:000000000000E159                 db 0C3h
.eh_frame:000000000000E15A                 db 0FFh
.eh_frame:000000000000E15B                 db 0FFh
.eh_frame:000000000000E15C                 db  6Eh ; n
.eh_frame:000000000000E15D                 db    0
.eh_frame:000000000000E15E                 db    0
.eh_frame:000000000000E15F                 db    0
.eh_frame:000000000000E160                 db    0
.eh_frame:000000000000E161                 db  44h ; D
.eh_frame:000000000000E162                 db  0Eh
.eh_frame:000000000000E163                 db  60h ; `
.eh_frame:000000000000E164                 db  7Eh ; ~
.eh_frame:000000000000E165                 db  0Ah
.eh_frame:000000000000E166                 db  0Eh
.eh_frame:000000000000E167                 db    8
.eh_frame:000000000000E168                 db  46h ; F
.eh_frame:000000000000E169                 db  0Bh
.eh_frame:000000000000E16A                 db    0
.eh_frame:000000000000E16B                 db    0
.eh_frame:000000000000E16C                 db    0
.eh_frame:000000000000E16D                 db    0
.eh_frame:000000000000E16E                 db    0
.eh_frame:000000000000E16F                 db    0
.eh_frame:000000000000E170                 db  5Ch ; \
.eh_frame:000000000000E171                 db    0
.eh_frame:000000000000E172                 db    0
.eh_frame:000000000000E173                 db    0
.eh_frame:000000000000E174                 db  64h ; d
.eh_frame:000000000000E175                 db  16h
.eh_frame:000000000000E176                 db    0
.eh_frame:000000000000E177                 db    0
.eh_frame:000000000000E178                 db 0C8h
.eh_frame:000000000000E179                 db 0C3h
.eh_frame:000000000000E17A                 db 0FFh
.eh_frame:000000000000E17B                 db 0FFh
.eh_frame:000000000000E17C                 db  80h
.eh_frame:000000000000E17D                 db    0
.eh_frame:000000000000E17E                 db    0
.eh_frame:000000000000E17F                 db    0
.eh_frame:000000000000E180                 db    0
.eh_frame:000000000000E181                 db  42h ; B
.eh_frame:000000000000E182                 db  0Eh
.eh_frame:000000000000E183                 db  10h
.eh_frame:000000000000E184                 db  8Dh
.eh_frame:000000000000E185                 db    2
.eh_frame:000000000000E186                 db  42h ; B
.eh_frame:000000000000E187                 db  0Eh
.eh_frame:000000000000E188                 db  18h
.eh_frame:000000000000E189                 db  8Ch
.eh_frame:000000000000E18A                 db    3
.eh_frame:000000000000E18B                 db  47h ; G
.eh_frame:000000000000E18C                 db  0Eh
.eh_frame:000000000000E18D                 db  20h
.eh_frame:000000000000E18E                 db  86h
.eh_frame:000000000000E18F                 db    4
.eh_frame:000000000000E190                 db  41h ; A
.eh_frame:000000000000E191                 db  0Eh
.eh_frame:000000000000E192                 db  28h ; (
.eh_frame:000000000000E193                 db  83h
.eh_frame:000000000000E194                 db    5
.eh_frame:000000000000E195                 db  49h ; I
.eh_frame:000000000000E196                 db  0Eh
.eh_frame:000000000000E197                 db  30h ; 0
.eh_frame:000000000000E198                 db  62h ; b
.eh_frame:000000000000E199                 db  0Ah
.eh_frame:000000000000E19A                 db  0Eh
.eh_frame:000000000000E19B                 db  28h ; (
.eh_frame:000000000000E19C                 db  44h ; D
.eh_frame:000000000000E19D                 db  0Eh
.eh_frame:000000000000E19E                 db  20h
.eh_frame:000000000000E19F                 db  41h ; A
.eh_frame:000000000000E1A0                 db  0Eh
.eh_frame:000000000000E1A1                 db  18h
.eh_frame:000000000000E1A2                 db  42h ; B
.eh_frame:000000000000E1A3                 db  0Eh
.eh_frame:000000000000E1A4                 db  10h
.eh_frame:000000000000E1A5                 db  42h ; B
.eh_frame:000000000000E1A6                 db  0Eh
.eh_frame:000000000000E1A7                 db    8
.eh_frame:000000000000E1A8                 db  48h ; H
.eh_frame:000000000000E1A9                 db  0Bh
.eh_frame:000000000000E1AA                 db  5Dh ; ]
.eh_frame:000000000000E1AB                 db  0Ah
.eh_frame:000000000000E1AC                 db  0Eh
.eh_frame:000000000000E1AD                 db  28h ; (
.eh_frame:000000000000E1AE                 db  41h ; A
.eh_frame:000000000000E1AF                 db  0Eh
.eh_frame:000000000000E1B0                 db  20h
.eh_frame:000000000000E1B1                 db  41h ; A
.eh_frame:000000000000E1B2                 db  0Eh
.eh_frame:000000000000E1B3                 db  18h
.eh_frame:000000000000E1B4                 db  42h ; B
.eh_frame:000000000000E1B5                 db  0Eh
.eh_frame:000000000000E1B6                 db  10h
.eh_frame:000000000000E1B7                 db  42h ; B
.eh_frame:000000000000E1B8                 db  0Eh
.eh_frame:000000000000E1B9                 db    8
.eh_frame:000000000000E1BA                 db  45h ; E
.eh_frame:000000000000E1BB                 db  0Bh
.eh_frame:000000000000E1BC                 db  44h ; D
.eh_frame:000000000000E1BD                 db  0Eh
.eh_frame:000000000000E1BE                 db  28h ; (
.eh_frame:000000000000E1BF                 db  43h ; C
.eh_frame:000000000000E1C0                 db  0Eh
.eh_frame:000000000000E1C1                 db  20h
.eh_frame:000000000000E1C2                 db  44h ; D
.eh_frame:000000000000E1C3                 db  0Eh
.eh_frame:000000000000E1C4                 db  18h
.eh_frame:000000000000E1C5                 db  42h ; B
.eh_frame:000000000000E1C6                 db  0Eh
.eh_frame:000000000000E1C7                 db  10h
.eh_frame:000000000000E1C8                 db  42h ; B
.eh_frame:000000000000E1C9                 db  0Eh
.eh_frame:000000000000E1CA                 db    8
.eh_frame:000000000000E1CB                 db    0
.eh_frame:000000000000E1CC                 db    0
.eh_frame:000000000000E1CD                 db    0
.eh_frame:000000000000E1CE                 db    0
.eh_frame:000000000000E1CF                 db    0
.eh_frame:000000000000E1D0                 db  34h ; 4
.eh_frame:000000000000E1D1                 db    0
.eh_frame:000000000000E1D2                 db    0
.eh_frame:000000000000E1D3                 db    0
.eh_frame:000000000000E1D4                 db 0C4h
.eh_frame:000000000000E1D5                 db  16h
.eh_frame:000000000000E1D6                 db    0
.eh_frame:000000000000E1D7                 db    0
.eh_frame:000000000000E1D8                 db 0E8h
.eh_frame:000000000000E1D9                 db 0C3h
.eh_frame:000000000000E1DA                 db 0FFh
.eh_frame:000000000000E1DB                 db 0FFh
.eh_frame:000000000000E1DC                 db  3Fh ; ?
.eh_frame:000000000000E1DD                 db    0
.eh_frame:000000000000E1DE                 db    0
.eh_frame:000000000000E1DF                 db    0
.eh_frame:000000000000E1E0                 db    0
.eh_frame:000000000000E1E1                 db  42h ; B
.eh_frame:000000000000E1E2                 db  0Eh
.eh_frame:000000000000E1E3                 db  10h
.eh_frame:000000000000E1E4                 db  8Dh
.eh_frame:000000000000E1E5                 db    2
.eh_frame:000000000000E1E6                 db  42h ; B
.eh_frame:000000000000E1E7                 db  0Eh
.eh_frame:000000000000E1E8                 db  18h
.eh_frame:000000000000E1E9                 db  8Ch
.eh_frame:000000000000E1EA                 db    3
.eh_frame:000000000000E1EB                 db  41h ; A
.eh_frame:000000000000E1EC                 db  0Eh
.eh_frame:000000000000E1ED                 db  20h
.eh_frame:000000000000E1EE                 db  86h
.eh_frame:000000000000E1EF                 db    4
.eh_frame:000000000000E1F0                 db  41h ; A
.eh_frame:000000000000E1F1                 db  0Eh
.eh_frame:000000000000E1F2                 db  28h ; (
.eh_frame:000000000000E1F3                 db  83h
.eh_frame:000000000000E1F4                 db    5
.eh_frame:000000000000E1F5                 db  46h ; F
.eh_frame:000000000000E1F6                 db  0Eh
.eh_frame:000000000000E1F7                 db  30h ; 0
.eh_frame:000000000000E1F8                 db  6Ah ; j
.eh_frame:000000000000E1F9                 db  0Eh
.eh_frame:000000000000E1FA                 db  28h ; (
.eh_frame:000000000000E1FB                 db  43h ; C
.eh_frame:000000000000E1FC                 db  0Eh
.eh_frame:000000000000E1FD                 db  20h
.eh_frame:000000000000E1FE                 db  41h ; A
.eh_frame:000000000000E1FF                 db  0Eh
.eh_frame:000000000000E200                 db  18h
.eh_frame:000000000000E201                 db  42h ; B
.eh_frame:000000000000E202                 db  0Eh
.eh_frame:000000000000E203                 db  10h
.eh_frame:000000000000E204                 db  42h ; B
.eh_frame:000000000000E205                 db  0Eh
.eh_frame:000000000000E206                 db    8
.eh_frame:000000000000E207                 db    0
.eh_frame:000000000000E208                 db  34h ; 4
.eh_frame:000000000000E209                 db    0
.eh_frame:000000000000E20A                 db    0
.eh_frame:000000000000E20B                 db    0
.eh_frame:000000000000E20C                 db 0FCh
.eh_frame:000000000000E20D                 db  16h
.eh_frame:000000000000E20E                 db    0
.eh_frame:000000000000E20F                 db    0
.eh_frame:000000000000E210                 db 0F0h
.eh_frame:000000000000E211                 db 0C3h
.eh_frame:000000000000E212                 db 0FFh
.eh_frame:000000000000E213                 db 0FFh
.eh_frame:000000000000E214                 db  7Bh ; {
.eh_frame:000000000000E215                 db    0
.eh_frame:000000000000E216                 db    0
.eh_frame:000000000000E217                 db    0
.eh_frame:000000000000E218                 db    0
.eh_frame:000000000000E219                 db  42h ; B
.eh_frame:000000000000E21A                 db  0Eh
.eh_frame:000000000000E21B                 db  10h
.eh_frame:000000000000E21C                 db  8Ch
.eh_frame:000000000000E21D                 db    2
.eh_frame:000000000000E21E                 db  41h ; A
.eh_frame:000000000000E21F                 db  0Eh
.eh_frame:000000000000E220                 db  18h
.eh_frame:000000000000E221                 db  86h
.eh_frame:000000000000E222                 db    3
.eh_frame:000000000000E223                 db  41h ; A
.eh_frame:000000000000E224                 db  0Eh
.eh_frame:000000000000E225                 db  20h
.eh_frame:000000000000E226                 db  83h
.eh_frame:000000000000E227                 db    4
.eh_frame:000000000000E228                 db  7Dh ; }
.eh_frame:000000000000E229                 db  0Ah
.eh_frame:000000000000E22A                 db  0Eh
.eh_frame:000000000000E22B                 db  18h
.eh_frame:000000000000E22C                 db  41h ; A
.eh_frame:000000000000E22D                 db  0Eh
.eh_frame:000000000000E22E                 db  10h
.eh_frame:000000000000E22F                 db  42h ; B
.eh_frame:000000000000E230                 db  0Eh
.eh_frame:000000000000E231                 db    8
.eh_frame:000000000000E232                 db  44h ; D
.eh_frame:000000000000E233                 db  0Bh
.eh_frame:000000000000E234                 db  60h ; `
.eh_frame:000000000000E235                 db  0Ah
.eh_frame:000000000000E236                 db  0Eh
.eh_frame:000000000000E237                 db  18h
.eh_frame:000000000000E238                 db  41h ; A
.eh_frame:000000000000E239                 db  0Eh
.eh_frame:000000000000E23A                 db  10h
.eh_frame:000000000000E23B                 db  42h ; B
.eh_frame:000000000000E23C                 db  0Eh
.eh_frame:000000000000E23D                 db    8
.eh_frame:000000000000E23E                 db  45h ; E
.eh_frame:000000000000E23F                 db  0Bh
.eh_frame:000000000000E240                 db  34h ; 4
.eh_frame:000000000000E241                 db    0
.eh_frame:000000000000E242                 db    0
.eh_frame:000000000000E243                 db    0
.eh_frame:000000000000E244                 db  34h ; 4
.eh_frame:000000000000E245                 db  17h
.eh_frame:000000000000E246                 db    0
.eh_frame:000000000000E247                 db    0
.eh_frame:000000000000E248                 db  38h ; 8
.eh_frame:000000000000E249                 db 0C4h
.eh_frame:000000000000E24A                 db 0FFh
.eh_frame:000000000000E24B                 db 0FFh
.eh_frame:000000000000E24C                 db  7Eh ; ~
.eh_frame:000000000000E24D                 db    2
.eh_frame:000000000000E24E                 db    0
.eh_frame:000000000000E24F                 db    0
.eh_frame:000000000000E250                 db    0
.eh_frame:000000000000E251                 db  42h ; B
.eh_frame:000000000000E252                 db  0Eh
.eh_frame:000000000000E253                 db  10h
.eh_frame:000000000000E254                 db  8Ch
.eh_frame:000000000000E255                 db    2
.eh_frame:000000000000E256                 db  41h ; A
.eh_frame:000000000000E257                 db  0Eh
.eh_frame:000000000000E258                 db  18h
.eh_frame:000000000000E259                 db  86h
.eh_frame:000000000000E25A                 db    3
.eh_frame:000000000000E25B                 db  43h ; C
.eh_frame:000000000000E25C                 db  0Eh
.eh_frame:000000000000E25D                 db  20h
.eh_frame:000000000000E25E                 db  83h
.eh_frame:000000000000E25F                 db    4
.eh_frame:000000000000E260                 db  44h ; D
.eh_frame:000000000000E261                 db  0Eh
.eh_frame:000000000000E262                 db  70h ; p
.eh_frame:000000000000E263                 db    2
.eh_frame:000000000000E264                 db 0F0h
.eh_frame:000000000000E265                 db  0Ah
.eh_frame:000000000000E266                 db  0Eh
.eh_frame:000000000000E267                 db  20h
.eh_frame:000000000000E268                 db  41h ; A
.eh_frame:000000000000E269                 db  0Eh
.eh_frame:000000000000E26A                 db  18h
.eh_frame:000000000000E26B                 db  41h ; A
.eh_frame:000000000000E26C                 db  0Eh
.eh_frame:000000000000E26D                 db  10h
.eh_frame:000000000000E26E                 db  42h ; B
.eh_frame:000000000000E26F                 db  0Eh
.eh_frame:000000000000E270                 db    8
.eh_frame:000000000000E271                 db  42h ; B
.eh_frame:000000000000E272                 db  0Bh
.eh_frame:000000000000E273                 db    0
.eh_frame:000000000000E274                 db    0
.eh_frame:000000000000E275                 db    0
.eh_frame:000000000000E276                 db    0
.eh_frame:000000000000E277                 db    0
.eh_frame:000000000000E278                 db  1Ch
.eh_frame:000000000000E279                 db    0
.eh_frame:000000000000E27A                 db    0
.eh_frame:000000000000E27B                 db    0
.eh_frame:000000000000E27C                 db  6Ch ; l
.eh_frame:000000000000E27D                 db  17h
.eh_frame:000000000000E27E                 db    0
.eh_frame:000000000000E27F                 db    0
.eh_frame:000000000000E280                 db  80h
.eh_frame:000000000000E281                 db 0C6h
.eh_frame:000000000000E282                 db 0FFh
.eh_frame:000000000000E283                 db 0FFh
.eh_frame:000000000000E284                 db  40h ; @
.eh_frame:000000000000E285                 db    0
.eh_frame:000000000000E286                 db    0
.eh_frame:000000000000E287                 db    0
.eh_frame:000000000000E288                 db    0
.eh_frame:000000000000E289                 db  44h ; D
.eh_frame:000000000000E28A                 db  0Eh
.eh_frame:000000000000E28B                 db  10h
.eh_frame:000000000000E28C                 db  83h
.eh_frame:000000000000E28D                 db    2
.eh_frame:000000000000E28E                 db  5Ah ; Z
.eh_frame:000000000000E28F                 db  0Ah
.eh_frame:000000000000E290                 db  0Eh
.eh_frame:000000000000E291                 db    8
.eh_frame:000000000000E292                 db  4Ah ; J
.eh_frame:000000000000E293                 db  0Bh
.eh_frame:000000000000E294                 db  53h ; S
.eh_frame:000000000000E295                 db  0Eh
.eh_frame:000000000000E296                 db    8
.eh_frame:000000000000E297                 db    0
.eh_frame:000000000000E298                 db  2Ch ; ,
.eh_frame:000000000000E299                 db    0
.eh_frame:000000000000E29A                 db    0
.eh_frame:000000000000E29B                 db    0
.eh_frame:000000000000E29C                 db  8Ch
.eh_frame:000000000000E29D                 db  17h
.eh_frame:000000000000E29E                 db    0
.eh_frame:000000000000E29F                 db    0
.eh_frame:000000000000E2A0                 db 0A0h
.eh_frame:000000000000E2A1                 db 0C6h
.eh_frame:000000000000E2A2                 db 0FFh
.eh_frame:000000000000E2A3                 db 0FFh
.eh_frame:000000000000E2A4                 db  57h ; W
.eh_frame:000000000000E2A5                 db    0
.eh_frame:000000000000E2A6                 db    0
.eh_frame:000000000000E2A7                 db    0
.eh_frame:000000000000E2A8                 db    0
.eh_frame:000000000000E2A9                 db  63h ; c
.eh_frame:000000000000E2AA                 db  0Eh
.eh_frame:000000000000E2AB                 db  10h
.eh_frame:000000000000E2AC                 db  8Ch
.eh_frame:000000000000E2AD                 db    2
.eh_frame:000000000000E2AE                 db  41h ; A
.eh_frame:000000000000E2AF                 db  0Eh
.eh_frame:000000000000E2B0                 db  18h
.eh_frame:000000000000E2B1                 db  86h
.eh_frame:000000000000E2B2                 db    3
.eh_frame:000000000000E2B3                 db  44h ; D
.eh_frame:000000000000E2B4                 db  0Eh
.eh_frame:000000000000E2B5                 db  20h
.eh_frame:000000000000E2B6                 db  83h
.eh_frame:000000000000E2B7                 db    4
.eh_frame:000000000000E2B8                 db  6Bh ; k
.eh_frame:000000000000E2B9                 db  0Eh
.eh_frame:000000000000E2BA                 db  18h
.eh_frame:000000000000E2BB                 db  41h ; A
.eh_frame:000000000000E2BC                 db  0Eh
.eh_frame:000000000000E2BD                 db  10h
.eh_frame:000000000000E2BE                 db  42h ; B
.eh_frame:000000000000E2BF                 db  0Eh
.eh_frame:000000000000E2C0                 db    8
.eh_frame:000000000000E2C1                 db    0
.eh_frame:000000000000E2C2                 db    0
.eh_frame:000000000000E2C3                 db    0
.eh_frame:000000000000E2C4                 db    0
.eh_frame:000000000000E2C5                 db    0
.eh_frame:000000000000E2C6                 db    0
.eh_frame:000000000000E2C7                 db    0
.eh_frame:000000000000E2C8                 db  14h
.eh_frame:000000000000E2C9                 db    0
.eh_frame:000000000000E2CA                 db    0
.eh_frame:000000000000E2CB                 db    0
.eh_frame:000000000000E2CC                 db 0BCh
.eh_frame:000000000000E2CD                 db  17h
.eh_frame:000000000000E2CE                 db    0
.eh_frame:000000000000E2CF                 db    0
.eh_frame:000000000000E2D0                 db 0D0h
.eh_frame:000000000000E2D1                 db 0C6h
.eh_frame:000000000000E2D2                 db 0FFh
.eh_frame:000000000000E2D3                 db 0FFh
.eh_frame:000000000000E2D4                 db  0Eh
.eh_frame:000000000000E2D5                 db    0
.eh_frame:000000000000E2D6                 db    0
.eh_frame:000000000000E2D7                 db    0
.eh_frame:000000000000E2D8                 db    0
.eh_frame:000000000000E2D9                 db    0
.eh_frame:000000000000E2DA                 db    0
.eh_frame:000000000000E2DB                 db    0
.eh_frame:000000000000E2DC                 db    0
.eh_frame:000000000000E2DD                 db    0
.eh_frame:000000000000E2DE                 db    0
.eh_frame:000000000000E2DF                 db    0
.eh_frame:000000000000E2E0                 db  44h ; D
.eh_frame:000000000000E2E1                 db    0
.eh_frame:000000000000E2E2                 db    0
.eh_frame:000000000000E2E3                 db    0
.eh_frame:000000000000E2E4                 db 0D4h
.eh_frame:000000000000E2E5                 db  17h
.eh_frame:000000000000E2E6                 db    0
.eh_frame:000000000000E2E7                 db    0
.eh_frame:000000000000E2E8                 db 0C8h
.eh_frame:000000000000E2E9                 db 0C6h
.eh_frame:000000000000E2EA                 db 0FFh
.eh_frame:000000000000E2EB                 db 0FFh
.eh_frame:000000000000E2EC                 db  65h ; e
.eh_frame:000000000000E2ED                 db    0
.eh_frame:000000000000E2EE                 db    0
.eh_frame:000000000000E2EF                 db    0
.eh_frame:000000000000E2F0                 db    0
.eh_frame:000000000000E2F1                 db  42h ; B
.eh_frame:000000000000E2F2                 db  0Eh
.eh_frame:000000000000E2F3                 db  10h
.eh_frame:000000000000E2F4                 db  8Fh
.eh_frame:000000000000E2F5                 db    2
.eh_frame:000000000000E2F6                 db  42h ; B
.eh_frame:000000000000E2F7                 db  0Eh
.eh_frame:000000000000E2F8                 db  18h
.eh_frame:000000000000E2F9                 db  8Eh
.eh_frame:000000000000E2FA                 db    3
.eh_frame:000000000000E2FB                 db  45h ; E
.eh_frame:000000000000E2FC                 db  0Eh
.eh_frame:000000000000E2FD                 db  20h
.eh_frame:000000000000E2FE                 db  8Dh
.eh_frame:000000000000E2FF                 db    4
.eh_frame:000000000000E300                 db  42h ; B
.eh_frame:000000000000E301                 db  0Eh
.eh_frame:000000000000E302                 db  28h ; (
.eh_frame:000000000000E303                 db  8Ch
.eh_frame:000000000000E304                 db    5
.eh_frame:000000000000E305                 db  48h ; H
.eh_frame:000000000000E306                 db  0Eh
.eh_frame:000000000000E307                 db  30h ; 0
.eh_frame:000000000000E308                 db  86h
.eh_frame:000000000000E309                 db    6
.eh_frame:000000000000E30A                 db  48h ; H
.eh_frame:000000000000E30B                 db  0Eh
.eh_frame:000000000000E30C                 db  38h ; 8
.eh_frame:000000000000E30D                 db  83h
.eh_frame:000000000000E30E                 db    7
.eh_frame:000000000000E30F                 db  4Dh ; M
.eh_frame:000000000000E310                 db  0Eh
.eh_frame:000000000000E311                 db  40h ; @
.eh_frame:000000000000E312                 db  72h ; r
.eh_frame:000000000000E313                 db  0Eh
.eh_frame:000000000000E314                 db  38h ; 8
.eh_frame:000000000000E315                 db  41h ; A
.eh_frame:000000000000E316                 db  0Eh
.eh_frame:000000000000E317                 db  30h ; 0
.eh_frame:000000000000E318                 db  41h ; A
.eh_frame:000000000000E319                 db  0Eh
.eh_frame:000000000000E31A                 db  28h ; (
.eh_frame:000000000000E31B                 db  42h ; B
.eh_frame:000000000000E31C                 db  0Eh
.eh_frame:000000000000E31D                 db  20h
.eh_frame:000000000000E31E                 db  42h ; B
.eh_frame:000000000000E31F                 db  0Eh
.eh_frame:000000000000E320                 db  18h
.eh_frame:000000000000E321                 db  42h ; B
.eh_frame:000000000000E322                 db  0Eh
.eh_frame:000000000000E323                 db  10h
.eh_frame:000000000000E324                 db  42h ; B
.eh_frame:000000000000E325                 db  0Eh
.eh_frame:000000000000E326                 db    8
.eh_frame:000000000000E327                 db    0
.eh_frame:000000000000E328                 db  14h
.eh_frame:000000000000E329                 db    0
.eh_frame:000000000000E32A                 db    0
.eh_frame:000000000000E32B                 db    0
.eh_frame:000000000000E32C                 db  1Ch
.eh_frame:000000000000E32D                 db  18h
.eh_frame:000000000000E32E                 db    0
.eh_frame:000000000000E32F                 db    0
.eh_frame:000000000000E330                 db 0F0h
.eh_frame:000000000000E331                 db 0C6h
.eh_frame:000000000000E332                 db 0FFh
.eh_frame:000000000000E333                 db 0FFh
.eh_frame:000000000000E334                 db    2
.eh_frame:000000000000E335                 db    0
.eh_frame:000000000000E336                 db    0
.eh_frame:000000000000E337                 db    0
.eh_frame:000000000000E338                 db    0
.eh_frame:000000000000E339                 db    0
.eh_frame:000000000000E33A                 db    0
.eh_frame:000000000000E33B                 db    0
.eh_frame:000000000000E33C                 db    0
.eh_frame:000000000000E33D                 db    0
.eh_frame:000000000000E33E                 db    0
.eh_frame:000000000000E33F                 db    0
.eh_frame:000000000000E340                 db  10h
.eh_frame:000000000000E341                 db    0
.eh_frame:000000000000E342                 db    0
.eh_frame:000000000000E343                 db    0
.eh_frame:000000000000E344                 db  34h ; 4
.eh_frame:000000000000E345                 db  18h
.eh_frame:000000000000E346                 db    0
.eh_frame:000000000000E347                 db    0
.eh_frame:000000000000E348                 db 0E8h
.eh_frame:000000000000E349                 db 0C6h
.eh_frame:000000000000E34A                 db 0FFh
.eh_frame:000000000000E34B                 db 0FFh
.eh_frame:000000000000E34C                 db  0Eh
.eh_frame:000000000000E34D                 db    0
.eh_frame:000000000000E34E                 db    0
.eh_frame:000000000000E34F                 db    0
.eh_frame:000000000000E350                 db    0
.eh_frame:000000000000E351                 db    0
.eh_frame:000000000000E352                 db    0
.eh_frame:000000000000E353                 db    0
.eh_frame:000000000000E354 __FRAME_END__   db    0
.eh_frame:000000000000E355                 db    0
.eh_frame:000000000000E356                 db    0
.eh_frame:000000000000E357                 db    0
.eh_frame:000000000000E357 _eh_frame       ends
.eh_frame:000000000000E357
.init_array:000000000020E970 ; ELF Initialization Function Table
.init_array:000000000020E970 ; ===========================================================================
.init_array:000000000020E970
.init_array:000000000020E970 ; Segment type: Pure data
.init_array:000000000020E970 ; Segment permissions: Read/Write
.init_array:000000000020E970 _init_array     segment qword public 'DATA' use64
.init_array:000000000020E970                 assume cs:_init_array
.init_array:000000000020E970                 ;org 20E970h
.init_array:000000000020E970 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020E970                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020E970                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020E970 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020E970
.fini_array:000000000020E978 ; ELF Termination Function Table
.fini_array:000000000020E978 ; ===========================================================================
.fini_array:000000000020E978
.fini_array:000000000020E978 ; Segment type: Pure data
.fini_array:000000000020E978 ; Segment permissions: Read/Write
.fini_array:000000000020E978 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020E978                 assume cs:_fini_array
.fini_array:000000000020E978                 ;org 20E978h
.fini_array:000000000020E978 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020E978                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020E978 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020E978
.data.rel.ro:000000000020E980 ; ===========================================================================
.data.rel.ro:000000000020E980
.data.rel.ro:000000000020E980 ; Segment type: Pure data
.data.rel.ro:000000000020E980 ; Segment permissions: Read/Write
.data.rel.ro:000000000020E980 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020E980                 assume cs:_data_rel_ro
.data.rel.ro:000000000020E980                 ;org 20E980h
.data.rel.ro:000000000020E980 ; struct option long_options
.data.rel.ro:000000000020E980 long_options    dq offset aRecursive    ; name
.data.rel.ro:000000000020E980                                         ; DATA XREF: main:loc_1EB0↑o
.data.rel.ro:000000000020E980                 dd 0                    ; has_arg ; "recursive"
.data.rel.ro:000000000020E980                 db 4 dup(0)
.data.rel.ro:000000000020E980                 dq 0                    ; flag
.data.rel.ro:000000000020E980                 dd 52h                  ; val
.data.rel.ro:000000000020E980                 db 4 dup(0)
.data.rel.ro:000000000020E9A0                 dq offset aChanges      ; "changes"
.data.rel.ro:000000000020E9A8                 db    0
.data.rel.ro:000000000020E9A9                 db    0
.data.rel.ro:000000000020E9AA                 db    0
.data.rel.ro:000000000020E9AB                 db    0
.data.rel.ro:000000000020E9AC                 db    0
.data.rel.ro:000000000020E9AD                 db    0
.data.rel.ro:000000000020E9AE                 db    0
.data.rel.ro:000000000020E9AF                 db    0
.data.rel.ro:000000000020E9B0                 db    0
.data.rel.ro:000000000020E9B1                 db    0
.data.rel.ro:000000000020E9B2                 db    0
.data.rel.ro:000000000020E9B3                 db    0
.data.rel.ro:000000000020E9B4                 db    0
.data.rel.ro:000000000020E9B5                 db    0
.data.rel.ro:000000000020E9B6                 db    0
.data.rel.ro:000000000020E9B7                 db    0
.data.rel.ro:000000000020E9B8                 db  63h ; c
.data.rel.ro:000000000020E9B9                 db    0
.data.rel.ro:000000000020E9BA                 db    0
.data.rel.ro:000000000020E9BB                 db    0
.data.rel.ro:000000000020E9BC                 db    0
.data.rel.ro:000000000020E9BD                 db    0
.data.rel.ro:000000000020E9BE                 db    0
.data.rel.ro:000000000020E9BF                 db    0
.data.rel.ro:000000000020E9C0                 dq offset aNoDereference+3 ; "dereference"
.data.rel.ro:000000000020E9C8                 db    0
.data.rel.ro:000000000020E9C9                 db    0
.data.rel.ro:000000000020E9CA                 db    0
.data.rel.ro:000000000020E9CB                 db    0
.data.rel.ro:000000000020E9CC                 db    0
.data.rel.ro:000000000020E9CD                 db    0
.data.rel.ro:000000000020E9CE                 db    0
.data.rel.ro:000000000020E9CF                 db    0
.data.rel.ro:000000000020E9D0                 db    0
.data.rel.ro:000000000020E9D1                 db    0
.data.rel.ro:000000000020E9D2                 db    0
.data.rel.ro:000000000020E9D3                 db    0
.data.rel.ro:000000000020E9D4                 db    0
.data.rel.ro:000000000020E9D5                 db    0
.data.rel.ro:000000000020E9D6                 db    0
.data.rel.ro:000000000020E9D7                 db    0
.data.rel.ro:000000000020E9D8                 db  80h
.data.rel.ro:000000000020E9D9                 db    0
.data.rel.ro:000000000020E9DA                 db    0
.data.rel.ro:000000000020E9DB                 db    0
.data.rel.ro:000000000020E9DC                 db    0
.data.rel.ro:000000000020E9DD                 db    0
.data.rel.ro:000000000020E9DE                 db    0
.data.rel.ro:000000000020E9DF                 db    0
.data.rel.ro:000000000020E9E0                 dq offset aFrom         ; "from"
.data.rel.ro:000000000020E9E8                 db    1
.data.rel.ro:000000000020E9E9                 db    0
.data.rel.ro:000000000020E9EA                 db    0
.data.rel.ro:000000000020E9EB                 db    0
.data.rel.ro:000000000020E9EC                 db    0
.data.rel.ro:000000000020E9ED                 db    0
.data.rel.ro:000000000020E9EE                 db    0
.data.rel.ro:000000000020E9EF                 db    0
.data.rel.ro:000000000020E9F0                 db    0
.data.rel.ro:000000000020E9F1                 db    0
.data.rel.ro:000000000020E9F2                 db    0
.data.rel.ro:000000000020E9F3                 db    0
.data.rel.ro:000000000020E9F4                 db    0
.data.rel.ro:000000000020E9F5                 db    0
.data.rel.ro:000000000020E9F6                 db    0
.data.rel.ro:000000000020E9F7                 db    0
.data.rel.ro:000000000020E9F8                 db  81h
.data.rel.ro:000000000020E9F9                 db    0
.data.rel.ro:000000000020E9FA                 db    0
.data.rel.ro:000000000020E9FB                 db    0
.data.rel.ro:000000000020E9FC                 db    0
.data.rel.ro:000000000020E9FD                 db    0
.data.rel.ro:000000000020E9FE                 db    0
.data.rel.ro:000000000020E9FF                 db    0
.data.rel.ro:000000000020EA00                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:000000000020EA08                 db    0
.data.rel.ro:000000000020EA09                 db    0
.data.rel.ro:000000000020EA0A                 db    0
.data.rel.ro:000000000020EA0B                 db    0
.data.rel.ro:000000000020EA0C                 db    0
.data.rel.ro:000000000020EA0D                 db    0
.data.rel.ro:000000000020EA0E                 db    0
.data.rel.ro:000000000020EA0F                 db    0
.data.rel.ro:000000000020EA10                 db    0
.data.rel.ro:000000000020EA11                 db    0
.data.rel.ro:000000000020EA12                 db    0
.data.rel.ro:000000000020EA13                 db    0
.data.rel.ro:000000000020EA14                 db    0
.data.rel.ro:000000000020EA15                 db    0
.data.rel.ro:000000000020EA16                 db    0
.data.rel.ro:000000000020EA17                 db    0
.data.rel.ro:000000000020EA18                 db  68h ; h
.data.rel.ro:000000000020EA19                 db    0
.data.rel.ro:000000000020EA1A                 db    0
.data.rel.ro:000000000020EA1B                 db    0
.data.rel.ro:000000000020EA1C                 db    0
.data.rel.ro:000000000020EA1D                 db    0
.data.rel.ro:000000000020EA1E                 db    0
.data.rel.ro:000000000020EA1F                 db    0
.data.rel.ro:000000000020EA20                 dq offset aNoPreserveRoot_0 ; "no-preserve-root"
.data.rel.ro:000000000020EA28                 db    0
.data.rel.ro:000000000020EA29                 db    0
.data.rel.ro:000000000020EA2A                 db    0
.data.rel.ro:000000000020EA2B                 db    0
.data.rel.ro:000000000020EA2C                 db    0
.data.rel.ro:000000000020EA2D                 db    0
.data.rel.ro:000000000020EA2E                 db    0
.data.rel.ro:000000000020EA2F                 db    0
.data.rel.ro:000000000020EA30                 db    0
.data.rel.ro:000000000020EA31                 db    0
.data.rel.ro:000000000020EA32                 db    0
.data.rel.ro:000000000020EA33                 db    0
.data.rel.ro:000000000020EA34                 db    0
.data.rel.ro:000000000020EA35                 db    0
.data.rel.ro:000000000020EA36                 db    0
.data.rel.ro:000000000020EA37                 db    0
.data.rel.ro:000000000020EA38                 db  82h
.data.rel.ro:000000000020EA39                 db    0
.data.rel.ro:000000000020EA3A                 db    0
.data.rel.ro:000000000020EA3B                 db    0
.data.rel.ro:000000000020EA3C                 db    0
.data.rel.ro:000000000020EA3D                 db    0
.data.rel.ro:000000000020EA3E                 db    0
.data.rel.ro:000000000020EA3F                 db    0
.data.rel.ro:000000000020EA40                 dq offset aNoPreserveRoot_0+3 ; "preserve-root"
.data.rel.ro:000000000020EA48                 db    0
.data.rel.ro:000000000020EA49                 db    0
.data.rel.ro:000000000020EA4A                 db    0
.data.rel.ro:000000000020EA4B                 db    0
.data.rel.ro:000000000020EA4C                 db    0
.data.rel.ro:000000000020EA4D                 db    0
.data.rel.ro:000000000020EA4E                 db    0
.data.rel.ro:000000000020EA4F                 db    0
.data.rel.ro:000000000020EA50                 db    0
.data.rel.ro:000000000020EA51                 db    0
.data.rel.ro:000000000020EA52                 db    0
.data.rel.ro:000000000020EA53                 db    0
.data.rel.ro:000000000020EA54                 db    0
.data.rel.ro:000000000020EA55                 db    0
.data.rel.ro:000000000020EA56                 db    0
.data.rel.ro:000000000020EA57                 db    0
.data.rel.ro:000000000020EA58                 db  83h
.data.rel.ro:000000000020EA59                 db    0
.data.rel.ro:000000000020EA5A                 db    0
.data.rel.ro:000000000020EA5B                 db    0
.data.rel.ro:000000000020EA5C                 db    0
.data.rel.ro:000000000020EA5D                 db    0
.data.rel.ro:000000000020EA5E                 db    0
.data.rel.ro:000000000020EA5F                 db    0
.data.rel.ro:000000000020EA60                 dq offset aQuiet        ; "quiet"
.data.rel.ro:000000000020EA68                 db    0
.data.rel.ro:000000000020EA69                 db    0
.data.rel.ro:000000000020EA6A                 db    0
.data.rel.ro:000000000020EA6B                 db    0
.data.rel.ro:000000000020EA6C                 db    0
.data.rel.ro:000000000020EA6D                 db    0
.data.rel.ro:000000000020EA6E                 db    0
.data.rel.ro:000000000020EA6F                 db    0
.data.rel.ro:000000000020EA70                 db    0
.data.rel.ro:000000000020EA71                 db    0
.data.rel.ro:000000000020EA72                 db    0
.data.rel.ro:000000000020EA73                 db    0
.data.rel.ro:000000000020EA74                 db    0
.data.rel.ro:000000000020EA75                 db    0
.data.rel.ro:000000000020EA76                 db    0
.data.rel.ro:000000000020EA77                 db    0
.data.rel.ro:000000000020EA78                 db  66h ; f
.data.rel.ro:000000000020EA79                 db    0
.data.rel.ro:000000000020EA7A                 db    0
.data.rel.ro:000000000020EA7B                 db    0
.data.rel.ro:000000000020EA7C                 db    0
.data.rel.ro:000000000020EA7D                 db    0
.data.rel.ro:000000000020EA7E                 db    0
.data.rel.ro:000000000020EA7F                 db    0
.data.rel.ro:000000000020EA80                 dq offset aSilent       ; "silent"
.data.rel.ro:000000000020EA88                 db    0
.data.rel.ro:000000000020EA89                 db    0
.data.rel.ro:000000000020EA8A                 db    0
.data.rel.ro:000000000020EA8B                 db    0
.data.rel.ro:000000000020EA8C                 db    0
.data.rel.ro:000000000020EA8D                 db    0
.data.rel.ro:000000000020EA8E                 db    0
.data.rel.ro:000000000020EA8F                 db    0
.data.rel.ro:000000000020EA90                 db    0
.data.rel.ro:000000000020EA91                 db    0
.data.rel.ro:000000000020EA92                 db    0
.data.rel.ro:000000000020EA93                 db    0
.data.rel.ro:000000000020EA94                 db    0
.data.rel.ro:000000000020EA95                 db    0
.data.rel.ro:000000000020EA96                 db    0
.data.rel.ro:000000000020EA97                 db    0
.data.rel.ro:000000000020EA98                 db  66h ; f
.data.rel.ro:000000000020EA99                 db    0
.data.rel.ro:000000000020EA9A                 db    0
.data.rel.ro:000000000020EA9B                 db    0
.data.rel.ro:000000000020EA9C                 db    0
.data.rel.ro:000000000020EA9D                 db    0
.data.rel.ro:000000000020EA9E                 db    0
.data.rel.ro:000000000020EA9F                 db    0
.data.rel.ro:000000000020EAA0                 dq offset aNoDereference+5 ; "reference"
.data.rel.ro:000000000020EAA8                 db    1
.data.rel.ro:000000000020EAA9                 db    0
.data.rel.ro:000000000020EAAA                 db    0
.data.rel.ro:000000000020EAAB                 db    0
.data.rel.ro:000000000020EAAC                 db    0
.data.rel.ro:000000000020EAAD                 db    0
.data.rel.ro:000000000020EAAE                 db    0
.data.rel.ro:000000000020EAAF                 db    0
.data.rel.ro:000000000020EAB0                 db    0
.data.rel.ro:000000000020EAB1                 db    0
.data.rel.ro:000000000020EAB2                 db    0
.data.rel.ro:000000000020EAB3                 db    0
.data.rel.ro:000000000020EAB4                 db    0
.data.rel.ro:000000000020EAB5                 db    0
.data.rel.ro:000000000020EAB6                 db    0
.data.rel.ro:000000000020EAB7                 db    0
.data.rel.ro:000000000020EAB8                 db  84h
.data.rel.ro:000000000020EAB9                 db    0
.data.rel.ro:000000000020EABA                 db    0
.data.rel.ro:000000000020EABB                 db    0
.data.rel.ro:000000000020EABC                 db    0
.data.rel.ro:000000000020EABD                 db    0
.data.rel.ro:000000000020EABE                 db    0
.data.rel.ro:000000000020EABF                 db    0
.data.rel.ro:000000000020EAC0                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020EAC8                 db    0
.data.rel.ro:000000000020EAC9                 db    0
.data.rel.ro:000000000020EACA                 db    0
.data.rel.ro:000000000020EACB                 db    0
.data.rel.ro:000000000020EACC                 db    0
.data.rel.ro:000000000020EACD                 db    0
.data.rel.ro:000000000020EACE                 db    0
.data.rel.ro:000000000020EACF                 db    0
.data.rel.ro:000000000020EAD0                 db    0
.data.rel.ro:000000000020EAD1                 db    0
.data.rel.ro:000000000020EAD2                 db    0
.data.rel.ro:000000000020EAD3                 db    0
.data.rel.ro:000000000020EAD4                 db    0
.data.rel.ro:000000000020EAD5                 db    0
.data.rel.ro:000000000020EAD6                 db    0
.data.rel.ro:000000000020EAD7                 db    0
.data.rel.ro:000000000020EAD8                 db  76h ; v
.data.rel.ro:000000000020EAD9                 db    0
.data.rel.ro:000000000020EADA                 db    0
.data.rel.ro:000000000020EADB                 db    0
.data.rel.ro:000000000020EADC                 db    0
.data.rel.ro:000000000020EADD                 db    0
.data.rel.ro:000000000020EADE                 db    0
.data.rel.ro:000000000020EADF                 db    0
.data.rel.ro:000000000020EAE0                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020EAE8                 db    0
.data.rel.ro:000000000020EAE9                 db    0
.data.rel.ro:000000000020EAEA                 db    0
.data.rel.ro:000000000020EAEB                 db    0
.data.rel.ro:000000000020EAEC                 db    0
.data.rel.ro:000000000020EAED                 db    0
.data.rel.ro:000000000020EAEE                 db    0
.data.rel.ro:000000000020EAEF                 db    0
.data.rel.ro:000000000020EAF0                 db    0
.data.rel.ro:000000000020EAF1                 db    0
.data.rel.ro:000000000020EAF2                 db    0
.data.rel.ro:000000000020EAF3                 db    0
.data.rel.ro:000000000020EAF4                 db    0
.data.rel.ro:000000000020EAF5                 db    0
.data.rel.ro:000000000020EAF6                 db    0
.data.rel.ro:000000000020EAF7                 db    0
.data.rel.ro:000000000020EAF8                 db  7Eh ; ~
.data.rel.ro:000000000020EAF9                 db 0FFh
.data.rel.ro:000000000020EAFA                 db 0FFh
.data.rel.ro:000000000020EAFB                 db 0FFh
.data.rel.ro:000000000020EAFC                 db    0
.data.rel.ro:000000000020EAFD                 db    0
.data.rel.ro:000000000020EAFE                 db    0
.data.rel.ro:000000000020EAFF                 db    0
.data.rel.ro:000000000020EB00                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020EB08                 db    0
.data.rel.ro:000000000020EB09                 db    0
.data.rel.ro:000000000020EB0A                 db    0
.data.rel.ro:000000000020EB0B                 db    0
.data.rel.ro:000000000020EB0C                 db    0
.data.rel.ro:000000000020EB0D                 db    0
.data.rel.ro:000000000020EB0E                 db    0
.data.rel.ro:000000000020EB0F                 db    0
.data.rel.ro:000000000020EB10                 db    0
.data.rel.ro:000000000020EB11                 db    0
.data.rel.ro:000000000020EB12                 db    0
.data.rel.ro:000000000020EB13                 db    0
.data.rel.ro:000000000020EB14                 db    0
.data.rel.ro:000000000020EB15                 db    0
.data.rel.ro:000000000020EB16                 db    0
.data.rel.ro:000000000020EB17                 db    0
.data.rel.ro:000000000020EB18                 db  7Dh ; }
.data.rel.ro:000000000020EB19                 db 0FFh
.data.rel.ro:000000000020EB1A                 db 0FFh
.data.rel.ro:000000000020EB1B                 db 0FFh
.data.rel.ro:000000000020EB1C                 db    0
.data.rel.ro:000000000020EB1D                 db    0
.data.rel.ro:000000000020EB1E                 db    0
.data.rel.ro:000000000020EB1F                 db    0
.data.rel.ro:000000000020EB20                 db    0
.data.rel.ro:000000000020EB21                 db    0
.data.rel.ro:000000000020EB22                 db    0
.data.rel.ro:000000000020EB23                 db    0
.data.rel.ro:000000000020EB24                 db    0
.data.rel.ro:000000000020EB25                 db    0
.data.rel.ro:000000000020EB26                 db    0
.data.rel.ro:000000000020EB27                 db    0
.data.rel.ro:000000000020EB28                 db    0
.data.rel.ro:000000000020EB29                 db    0
.data.rel.ro:000000000020EB2A                 db    0
.data.rel.ro:000000000020EB2B                 db    0
.data.rel.ro:000000000020EB2C                 db    0
.data.rel.ro:000000000020EB2D                 db    0
.data.rel.ro:000000000020EB2E                 db    0
.data.rel.ro:000000000020EB2F                 db    0
.data.rel.ro:000000000020EB30                 db    0
.data.rel.ro:000000000020EB31                 db    0
.data.rel.ro:000000000020EB32                 db    0
.data.rel.ro:000000000020EB33                 db    0
.data.rel.ro:000000000020EB34                 db    0
.data.rel.ro:000000000020EB35                 db    0
.data.rel.ro:000000000020EB36                 db    0
.data.rel.ro:000000000020EB37                 db    0
.data.rel.ro:000000000020EB38                 db    0
.data.rel.ro:000000000020EB39                 db    0
.data.rel.ro:000000000020EB3A                 db    0
.data.rel.ro:000000000020EB3B                 db    0
.data.rel.ro:000000000020EB3C                 db    0
.data.rel.ro:000000000020EB3D                 db    0
.data.rel.ro:000000000020EB3E                 db    0
.data.rel.ro:000000000020EB3F                 db    0
.data.rel.ro:000000000020EB40                 public quoting_style_args
.data.rel.ro:000000000020EB40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020EB48                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020EB50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020EB58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020EB60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020EB68                 dq offset file+1Bh      ; "c"
.data.rel.ro:000000000020EB70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020EB78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020EB80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020EB88                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020EB90                 db    0
.data.rel.ro:000000000020EB91                 db    0
.data.rel.ro:000000000020EB92                 db    0
.data.rel.ro:000000000020EB93                 db    0
.data.rel.ro:000000000020EB94                 db    0
.data.rel.ro:000000000020EB95                 db    0
.data.rel.ro:000000000020EB96                 db    0
.data.rel.ro:000000000020EB97                 db    0
.data.rel.ro:000000000020EB97 _data_rel_ro    ends
.data.rel.ro:000000000020EB97
LOAD:000000000020EB98 ; ELF Dynamic Information
LOAD:000000000020EB98 ; ===========================================================================
LOAD:000000000020EB98
LOAD:000000000020EB98 ; Segment type: Pure data
LOAD:000000000020EB98 ; Segment permissions: Read/Write
LOAD:000000000020EB98 LOAD            segment byte public 'DATA' use64
LOAD:000000000020EB98                 assume cs:LOAD
LOAD:000000000020EB98                 ;org 20EB98h
LOAD:000000000020EB98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020EB98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020EB98                                         ; DT_NEEDED libc.so.6
LOAD:000000000020EBA8                 Elf64_Dyn <0Ch, 1970h>  ; DT_INIT
LOAD:000000000020EBB8                 Elf64_Dyn <0Dh, 0AA40h> ; DT_FINI
LOAD:000000000020EBC8                 Elf64_Dyn <19h, 20E970h> ; DT_INIT_ARRAY
LOAD:000000000020EBD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020EBE8                 Elf64_Dyn <1Ah, 20E978h> ; DT_FINI_ARRAY
LOAD:000000000020EBF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020EC08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020EC18                 Elf64_Dyn <5, 0AA8h>    ; DT_STRTAB
LOAD:000000000020EC28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020EC38                 Elf64_Dyn <0Ah, 37Ah>   ; DT_STRSZ
LOAD:000000000020EC48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020EC58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020EC68                 Elf64_Dyn <3, 20ED88h>  ; DT_PLTGOT
LOAD:000000000020EC78                 Elf64_Dyn <2, 660h>     ; DT_PLTRELSZ
LOAD:000000000020EC88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020EC98                 Elf64_Dyn <17h, 1310h>  ; DT_JMPREL
LOAD:000000000020ECA8                 Elf64_Dyn <7, 0F38h>    ; DT_RELA
LOAD:000000000020ECB8                 Elf64_Dyn <8, 3D8h>     ; DT_RELASZ
LOAD:000000000020ECC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020ECD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020ECE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020ECF8                 Elf64_Dyn <6FFFFFFEh, 0EC8h> ; DT_VERNEED
LOAD:000000000020ED08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020ED18                 Elf64_Dyn <6FFFFFF0h, 0E22h> ; DT_VERSYM
LOAD:000000000020ED28                 Elf64_Dyn <6FFFFFF9h, 1Dh> ; DT_RELACOUNT
LOAD:000000000020ED38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ED48                 db    0
LOAD:000000000020ED49                 db    0
LOAD:000000000020ED4A                 db    0
LOAD:000000000020ED4B                 db    0
LOAD:000000000020ED4C                 db    0
LOAD:000000000020ED4D                 db    0
LOAD:000000000020ED4E                 db    0
LOAD:000000000020ED4F                 db    0
LOAD:000000000020ED50                 db    0
LOAD:000000000020ED51                 db    0
LOAD:000000000020ED52                 db    0
LOAD:000000000020ED53                 db    0
LOAD:000000000020ED54                 db    0
LOAD:000000000020ED55                 db    0
LOAD:000000000020ED56                 db    0
LOAD:000000000020ED57                 db    0
LOAD:000000000020ED58                 db    0
LOAD:000000000020ED59                 db    0
LOAD:000000000020ED5A                 db    0
LOAD:000000000020ED5B                 db    0
LOAD:000000000020ED5C                 db    0
LOAD:000000000020ED5D                 db    0
LOAD:000000000020ED5E                 db    0
LOAD:000000000020ED5F                 db    0
LOAD:000000000020ED60                 db    0
LOAD:000000000020ED61                 db    0
LOAD:000000000020ED62                 db    0
LOAD:000000000020ED63                 db    0
LOAD:000000000020ED64                 db    0
LOAD:000000000020ED65                 db    0
LOAD:000000000020ED66                 db    0
LOAD:000000000020ED67                 db    0
LOAD:000000000020ED68                 db    0
LOAD:000000000020ED69                 db    0
LOAD:000000000020ED6A                 db    0
LOAD:000000000020ED6B                 db    0
LOAD:000000000020ED6C                 db    0
LOAD:000000000020ED6D                 db    0
LOAD:000000000020ED6E                 db    0
LOAD:000000000020ED6F                 db    0
LOAD:000000000020ED70                 db    0
LOAD:000000000020ED71                 db    0
LOAD:000000000020ED72                 db    0
LOAD:000000000020ED73                 db    0
LOAD:000000000020ED74                 db    0
LOAD:000000000020ED75                 db    0
LOAD:000000000020ED76                 db    0
LOAD:000000000020ED77                 db    0
LOAD:000000000020ED78                 db    0
LOAD:000000000020ED79                 db    0
LOAD:000000000020ED7A                 db    0
LOAD:000000000020ED7B                 db    0
LOAD:000000000020ED7C                 db    0
LOAD:000000000020ED7D                 db    0
LOAD:000000000020ED7E                 db    0
LOAD:000000000020ED7F                 db    0
LOAD:000000000020ED80                 db    0
LOAD:000000000020ED81                 db    0
LOAD:000000000020ED82                 db    0
LOAD:000000000020ED83                 db    0
LOAD:000000000020ED84                 db    0
LOAD:000000000020ED85                 db    0
LOAD:000000000020ED86                 db    0
LOAD:000000000020ED87                 db    0
LOAD:000000000020ED87 LOAD            ends
LOAD:000000000020ED87
.got:000000000020ED88 ; ===========================================================================
.got:000000000020ED88
.got:000000000020ED88 ; Segment type: Pure data
.got:000000000020ED88 ; Segment permissions: Read/Write
.got:000000000020ED88 _got            segment qword public 'DATA' use64
.got:000000000020ED88                 assume cs:_got
.got:000000000020ED88                 ;org 20ED88h
.got:000000000020ED88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020ED90 qword_20ED90    dq 0                    ; DATA XREF: sub_1990↑r
.got:000000000020ED98 qword_20ED98    dq 0                    ; DATA XREF: sub_1990+6↑r
.got:000000000020EDA0 endgrent_ptr    dq offset endgrent      ; DATA XREF: _endgrent↑r
.got:000000000020EDA8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020EDB0 __errno_location_ptr dq offset __errno_location
.got:000000000020EDB0                                         ; DATA XREF: ___errno_location↑r
.got:000000000020EDB8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020EDC0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020EDC8 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020EDD0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020EDD8 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000020EDE0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020EDE8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020EDF0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020EDF8 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:000000000020EE00 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020EE00                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020EE08 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:000000000020EE10 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020EE18 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020EE18                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020EE20 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020EE28 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020EE30 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000020EE38 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020EE38                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020EE40 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020EE48 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020EE50 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020EE58 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:000000000020EE60 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020EE68 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020EE70 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020EE78 __assert_fail_ptr dq offset __assert_fail
.got:000000000020EE78                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020EE80 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020EE88 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020EE90 __openat_2_ptr  dq offset __openat_2    ; DATA XREF: ___openat_2↑r
.got:000000000020EE98 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000020EEA0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020EEA8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020EEA8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020EEB0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020EEB8 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000020EEC0 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:000000000020EEC8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020EED0 getgrnam_ptr    dq offset getgrnam      ; DATA XREF: _getgrnam↑r
.got:000000000020EED8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020EEE0 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020EEE8 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000020EEF0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020EEF8 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020EF00 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020EF08 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020EF10 endpwent_ptr    dq offset endpwent      ; DATA XREF: _endpwent↑r
.got:000000000020EF18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020EF20 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000020EF28 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020EF30 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020EF38 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020EF40 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020EF48 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020EF50 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020EF58 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020EF60 fchown_ptr      dq offset fchown        ; DATA XREF: _fchown↑r
.got:000000000020EF68 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000020EF70 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000020EF78 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000020EF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020EF88 fchownat_ptr    dq offset fchownat      ; DATA XREF: _fchownat↑r
.got:000000000020EF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020EF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020EFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020EFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020EFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020EFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020EFB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020EFB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020EFC0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000020EFC0                                         ; filesystem_type:loc_6F40↑r ...
.got:000000000020EFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020EFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020EFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020EFD0                                         ; DATA XREF: start+24↑r
.got:000000000020EFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020EFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020EFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020EFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020EFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020EFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020EFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020EFE8 _got            ends
.got:000000000020EFE8
LOAD:000000000020EFF0 ; ===========================================================================
LOAD:000000000020EFF0
LOAD:000000000020EFF0 ; Segment type: Pure data
LOAD:000000000020EFF0 ; Segment permissions: Read/Write
LOAD:000000000020EFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020EFF0                 assume cs:LOAD
LOAD:000000000020EFF0                 ;org 20EFF0h
LOAD:000000000020EFF0                 align 20h
LOAD:000000000020EFF0 LOAD            ends
LOAD:000000000020EFF0
.data:000000000020F000 ; ===========================================================================
.data:000000000020F000
.data:000000000020F000 ; Segment type: Pure data
.data:000000000020F000 ; Segment permissions: Read/Write
.data:000000000020F000 _data           segment align_32 public 'DATA' use64
.data:000000000020F000                 assume cs:_data
.data:000000000020F000                 ;org 20F000h
.data:000000000020F000                 public __data_start ; weak
.data:000000000020F000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020F000                                         ; data_start
.data:000000000020F001                 db    0
.data:000000000020F002                 db    0
.data:000000000020F003                 db    0
.data:000000000020F004                 db    0
.data:000000000020F005                 db    0
.data:000000000020F006                 db    0
.data:000000000020F007                 db    0
.data:000000000020F008                 public __dso_handle
.data:000000000020F008 ; void *_dso_handle
.data:000000000020F008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020F008                                         ; atexit↑r ...
.data:000000000020F010                 public Version
.data:000000000020F010 Version         dq offset a831          ; DATA XREF: main+1AE↑r
.data:000000000020F010                                         ; "8.31"
.data:000000000020F018                 public exit_failure
.data:000000000020F018 ; int exit_failure
.data:000000000020F018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3A42↑r
.data:000000000020F018                                         ; xalloc_die+17↑r
.data:000000000020F01C                 align 20h
.data:000000000020F020                 public quote_quoting_options
.data:000000000020F020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020F020                                         ; quote_mem↑o ...
.data:000000000020F021                 db    0
.data:000000000020F022                 db    0
.data:000000000020F023                 db    0
.data:000000000020F024                 db    0
.data:000000000020F025                 db    0
.data:000000000020F026                 db    0
.data:000000000020F027                 db    0
.data:000000000020F028                 db    0
.data:000000000020F029                 db    0
.data:000000000020F02A                 db    0
.data:000000000020F02B                 db    0
.data:000000000020F02C                 db    0
.data:000000000020F02D                 db    0
.data:000000000020F02E                 db    0
.data:000000000020F02F                 db    0
.data:000000000020F030                 db    0
.data:000000000020F031                 db    0
.data:000000000020F032                 db    0
.data:000000000020F033                 db    0
.data:000000000020F034                 db    0
.data:000000000020F035                 db    0
.data:000000000020F036                 db    0
.data:000000000020F037                 db    0
.data:000000000020F038                 db    0
.data:000000000020F039                 db    0
.data:000000000020F03A                 db    0
.data:000000000020F03B                 db    0
.data:000000000020F03C                 db    0
.data:000000000020F03D                 db    0
.data:000000000020F03E                 db    0
.data:000000000020F03F                 db    0
.data:000000000020F040                 db    0
.data:000000000020F041                 db    0
.data:000000000020F042                 db    0
.data:000000000020F043                 db    0
.data:000000000020F044                 db    0
.data:000000000020F045                 db    0
.data:000000000020F046                 db    0
.data:000000000020F047                 db    0
.data:000000000020F048                 db    0
.data:000000000020F049                 db    0
.data:000000000020F04A                 db    0
.data:000000000020F04B                 db    0
.data:000000000020F04C                 db    0
.data:000000000020F04D                 db    0
.data:000000000020F04E                 db    0
.data:000000000020F04F                 db    0
.data:000000000020F050                 db    0
.data:000000000020F051                 db    0
.data:000000000020F052                 db    0
.data:000000000020F053                 db    0
.data:000000000020F054                 db    0
.data:000000000020F055                 db    0
.data:000000000020F056                 db    0
.data:000000000020F057                 db    0
.data:000000000020F058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020F058                                         ; quotearg_n_options:loc_4F0D↑r ...
.data:000000000020F05C                 align 20h
.data:000000000020F060 ; void *slotvec
.data:000000000020F060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020F060                                         ; quotearg_n_options+76↑w ...
.data:000000000020F068                 align 10h
.data:000000000020F070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020F070                                         ; quotearg_n_options+187↑r ...
.data:000000000020F078 off_20F078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020F078 _data           ends
.data:000000000020F078
.bss:000000000020F080 ; ===========================================================================
.bss:000000000020F080
.bss:000000000020F080 ; Segment type: Uninitialized
.bss:000000000020F080 ; Segment permissions: Read/Write
.bss:000000000020F080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020F080                 assume cs:_bss
.bss:000000000020F080                 ;org 20F080h
.bss:000000000020F080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020F080                 public __bss_start ; weak
.bss:000000000020F080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A00↑o
.bss:000000000020F080                                         ; LOAD:0000000000000A48↑o ...
.bss:000000000020F080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020F080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020F080                                         ; _edata
.bss:000000000020F080                                         ; Copy of shared data
.bss:000000000020F088                 public stdout@@GLIBC_2_2_5
.bss:000000000020F088 ; FILE *stdout
.bss:000000000020F088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009E8↑o
.bss:000000000020F088                                         ; main+1A7↑r ...
.bss:000000000020F088                                         ; Alternative name is 'stdout'
.bss:000000000020F088                                         ; Copy of shared data
.bss:000000000020F090                 public optind@@GLIBC_2_2_5
.bss:000000000020F090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A78↑o
.bss:000000000020F090                                         ; main:loc_20CC↑r ...
.bss:000000000020F090                                         ; Alternative name is 'optind'
.bss:000000000020F090                                         ; Copy of shared data
.bss:000000000020F094                 align 8
.bss:000000000020F098                 public optarg@@GLIBC_2_2_5
.bss:000000000020F098 ; char *optarg
.bss:000000000020F098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:000000000020F098                                         ; main+170↑r ...
.bss:000000000020F098                                         ; Alternative name is 'optarg'
.bss:000000000020F098                                         ; Copy of shared data
.bss:000000000020F0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020F0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020F0A0                                         ; DATA XREF: LOAD:0000000000000A18↑o
.bss:000000000020F0A0                                         ; LOAD:0000000000000A30↑o ...
.bss:000000000020F0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020F0A0                                         ; Copy of shared data
.bss:000000000020F0A8                 align 20h
.bss:000000000020F0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020F0C0 ; FILE *stderr
.bss:000000000020F0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:000000000020F0C0                                         ; usage+3D↑r ...
.bss:000000000020F0C0                                         ; Alternative name is 'stderr'
.bss:000000000020F0C0                                         ; Copy of shared data
.bss:000000000020F0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020F0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020F0C9                 align 10h
.bss:000000000020F0D0 dev_ino_buf_7022 db    ? ;              ; DATA XREF: main:loc_220B↑o
.bss:000000000020F0D1                 db    ? ;
.bss:000000000020F0D2                 db    ? ;
.bss:000000000020F0D3                 db    ? ;
.bss:000000000020F0D4                 db    ? ;
.bss:000000000020F0D5                 db    ? ;
.bss:000000000020F0D6                 db    ? ;
.bss:000000000020F0D7                 db    ? ;
.bss:000000000020F0D8                 db    ? ;
.bss:000000000020F0D9                 db    ? ;
.bss:000000000020F0DA                 db    ? ;
.bss:000000000020F0DB                 db    ? ;
.bss:000000000020F0DC                 db    ? ;
.bss:000000000020F0DD                 db    ? ;
.bss:000000000020F0DE                 db    ? ;
.bss:000000000020F0DF                 db    ? ;
.bss:000000000020F0E0 ; char *reference_file
.bss:000000000020F0E0 reference_file  dq ?                    ; DATA XREF: main+177↑w
.bss:000000000020F0E0                                         ; main+2E6↑r
.bss:000000000020F0E8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020F0E8                                         ; close_stdout+1B↑r
.bss:000000000020F0E9                 align 10h
.bss:000000000020F0F0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020F0F0                                         ; close_stdout+56↑r
.bss:000000000020F0F8                 public program_name
.bss:000000000020F0F8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020F0F8                                         ; usage+23C↑r ...
.bss:000000000020F100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020F100                                         ; quotearg_free+46↑o ...
.bss:000000000020F101                 db    ? ;
.bss:000000000020F102                 db    ? ;
.bss:000000000020F103                 db    ? ;
.bss:000000000020F104                 db    ? ;
.bss:000000000020F105                 db    ? ;
.bss:000000000020F106                 db    ? ;
.bss:000000000020F107                 db    ? ;
.bss:000000000020F108                 db    ? ;
.bss:000000000020F109                 db    ? ;
.bss:000000000020F10A                 db    ? ;
.bss:000000000020F10B                 db    ? ;
.bss:000000000020F10C                 db    ? ;
.bss:000000000020F10D                 db    ? ;
.bss:000000000020F10E                 db    ? ;
.bss:000000000020F10F                 db    ? ;
.bss:000000000020F110                 db    ? ;
.bss:000000000020F111                 db    ? ;
.bss:000000000020F112                 db    ? ;
.bss:000000000020F113                 db    ? ;
.bss:000000000020F114                 db    ? ;
.bss:000000000020F115                 db    ? ;
.bss:000000000020F116                 db    ? ;
.bss:000000000020F117                 db    ? ;
.bss:000000000020F118                 db    ? ;
.bss:000000000020F119                 db    ? ;
.bss:000000000020F11A                 db    ? ;
.bss:000000000020F11B                 db    ? ;
.bss:000000000020F11C                 db    ? ;
.bss:000000000020F11D                 db    ? ;
.bss:000000000020F11E                 db    ? ;
.bss:000000000020F11F                 db    ? ;
.bss:000000000020F120                 db    ? ;
.bss:000000000020F121                 db    ? ;
.bss:000000000020F122                 db    ? ;
.bss:000000000020F123                 db    ? ;
.bss:000000000020F124                 db    ? ;
.bss:000000000020F125                 db    ? ;
.bss:000000000020F126                 db    ? ;
.bss:000000000020F127                 db    ? ;
.bss:000000000020F128                 db    ? ;
.bss:000000000020F129                 db    ? ;
.bss:000000000020F12A                 db    ? ;
.bss:000000000020F12B                 db    ? ;
.bss:000000000020F12C                 db    ? ;
.bss:000000000020F12D                 db    ? ;
.bss:000000000020F12E                 db    ? ;
.bss:000000000020F12F                 db    ? ;
.bss:000000000020F130                 db    ? ;
.bss:000000000020F131                 db    ? ;
.bss:000000000020F132                 db    ? ;
.bss:000000000020F133                 db    ? ;
.bss:000000000020F134                 db    ? ;
.bss:000000000020F135                 db    ? ;
.bss:000000000020F136                 db    ? ;
.bss:000000000020F137                 db    ? ;
.bss:000000000020F138                 db    ? ;
.bss:000000000020F139                 db    ? ;
.bss:000000000020F13A                 db    ? ;
.bss:000000000020F13B                 db    ? ;
.bss:000000000020F13C                 db    ? ;
.bss:000000000020F13D                 db    ? ;
.bss:000000000020F13E                 db    ? ;
.bss:000000000020F13F                 db    ? ;
.bss:000000000020F140                 db    ? ;
.bss:000000000020F141                 db    ? ;
.bss:000000000020F142                 db    ? ;
.bss:000000000020F143                 db    ? ;
.bss:000000000020F144                 db    ? ;
.bss:000000000020F145                 db    ? ;
.bss:000000000020F146                 db    ? ;
.bss:000000000020F147                 db    ? ;
.bss:000000000020F148                 db    ? ;
.bss:000000000020F149                 db    ? ;
.bss:000000000020F14A                 db    ? ;
.bss:000000000020F14B                 db    ? ;
.bss:000000000020F14C                 db    ? ;
.bss:000000000020F14D                 db    ? ;
.bss:000000000020F14E                 db    ? ;
.bss:000000000020F14F                 db    ? ;
.bss:000000000020F150                 db    ? ;
.bss:000000000020F151                 db    ? ;
.bss:000000000020F152                 db    ? ;
.bss:000000000020F153                 db    ? ;
.bss:000000000020F154                 db    ? ;
.bss:000000000020F155                 db    ? ;
.bss:000000000020F156                 db    ? ;
.bss:000000000020F157                 db    ? ;
.bss:000000000020F158                 db    ? ;
.bss:000000000020F159                 db    ? ;
.bss:000000000020F15A                 db    ? ;
.bss:000000000020F15B                 db    ? ;
.bss:000000000020F15C                 db    ? ;
.bss:000000000020F15D                 db    ? ;
.bss:000000000020F15E                 db    ? ;
.bss:000000000020F15F                 db    ? ;
.bss:000000000020F160                 db    ? ;
.bss:000000000020F161                 db    ? ;
.bss:000000000020F162                 db    ? ;
.bss:000000000020F163                 db    ? ;
.bss:000000000020F164                 db    ? ;
.bss:000000000020F165                 db    ? ;
.bss:000000000020F166                 db    ? ;
.bss:000000000020F167                 db    ? ;
.bss:000000000020F168                 db    ? ;
.bss:000000000020F169                 db    ? ;
.bss:000000000020F16A                 db    ? ;
.bss:000000000020F16B                 db    ? ;
.bss:000000000020F16C                 db    ? ;
.bss:000000000020F16D                 db    ? ;
.bss:000000000020F16E                 db    ? ;
.bss:000000000020F16F                 db    ? ;
.bss:000000000020F170                 db    ? ;
.bss:000000000020F171                 db    ? ;
.bss:000000000020F172                 db    ? ;
.bss:000000000020F173                 db    ? ;
.bss:000000000020F174                 db    ? ;
.bss:000000000020F175                 db    ? ;
.bss:000000000020F176                 db    ? ;
.bss:000000000020F177                 db    ? ;
.bss:000000000020F178                 db    ? ;
.bss:000000000020F179                 db    ? ;
.bss:000000000020F17A                 db    ? ;
.bss:000000000020F17B                 db    ? ;
.bss:000000000020F17C                 db    ? ;
.bss:000000000020F17D                 db    ? ;
.bss:000000000020F17E                 db    ? ;
.bss:000000000020F17F                 db    ? ;
.bss:000000000020F180                 db    ? ;
.bss:000000000020F181                 db    ? ;
.bss:000000000020F182                 db    ? ;
.bss:000000000020F183                 db    ? ;
.bss:000000000020F184                 db    ? ;
.bss:000000000020F185                 db    ? ;
.bss:000000000020F186                 db    ? ;
.bss:000000000020F187                 db    ? ;
.bss:000000000020F188                 db    ? ;
.bss:000000000020F189                 db    ? ;
.bss:000000000020F18A                 db    ? ;
.bss:000000000020F18B                 db    ? ;
.bss:000000000020F18C                 db    ? ;
.bss:000000000020F18D                 db    ? ;
.bss:000000000020F18E                 db    ? ;
.bss:000000000020F18F                 db    ? ;
.bss:000000000020F190                 db    ? ;
.bss:000000000020F191                 db    ? ;
.bss:000000000020F192                 db    ? ;
.bss:000000000020F193                 db    ? ;
.bss:000000000020F194                 db    ? ;
.bss:000000000020F195                 db    ? ;
.bss:000000000020F196                 db    ? ;
.bss:000000000020F197                 db    ? ;
.bss:000000000020F198                 db    ? ;
.bss:000000000020F199                 db    ? ;
.bss:000000000020F19A                 db    ? ;
.bss:000000000020F19B                 db    ? ;
.bss:000000000020F19C                 db    ? ;
.bss:000000000020F19D                 db    ? ;
.bss:000000000020F19E                 db    ? ;
.bss:000000000020F19F                 db    ? ;
.bss:000000000020F1A0                 db    ? ;
.bss:000000000020F1A1                 db    ? ;
.bss:000000000020F1A2                 db    ? ;
.bss:000000000020F1A3                 db    ? ;
.bss:000000000020F1A4                 db    ? ;
.bss:000000000020F1A5                 db    ? ;
.bss:000000000020F1A6                 db    ? ;
.bss:000000000020F1A7                 db    ? ;
.bss:000000000020F1A8                 db    ? ;
.bss:000000000020F1A9                 db    ? ;
.bss:000000000020F1AA                 db    ? ;
.bss:000000000020F1AB                 db    ? ;
.bss:000000000020F1AC                 db    ? ;
.bss:000000000020F1AD                 db    ? ;
.bss:000000000020F1AE                 db    ? ;
.bss:000000000020F1AF                 db    ? ;
.bss:000000000020F1B0                 db    ? ;
.bss:000000000020F1B1                 db    ? ;
.bss:000000000020F1B2                 db    ? ;
.bss:000000000020F1B3                 db    ? ;
.bss:000000000020F1B4                 db    ? ;
.bss:000000000020F1B5                 db    ? ;
.bss:000000000020F1B6                 db    ? ;
.bss:000000000020F1B7                 db    ? ;
.bss:000000000020F1B8                 db    ? ;
.bss:000000000020F1B9                 db    ? ;
.bss:000000000020F1BA                 db    ? ;
.bss:000000000020F1BB                 db    ? ;
.bss:000000000020F1BC                 db    ? ;
.bss:000000000020F1BD                 db    ? ;
.bss:000000000020F1BE                 db    ? ;
.bss:000000000020F1BF                 db    ? ;
.bss:000000000020F1C0                 db    ? ;
.bss:000000000020F1C1                 db    ? ;
.bss:000000000020F1C2                 db    ? ;
.bss:000000000020F1C3                 db    ? ;
.bss:000000000020F1C4                 db    ? ;
.bss:000000000020F1C5                 db    ? ;
.bss:000000000020F1C6                 db    ? ;
.bss:000000000020F1C7                 db    ? ;
.bss:000000000020F1C8                 db    ? ;
.bss:000000000020F1C9                 db    ? ;
.bss:000000000020F1CA                 db    ? ;
.bss:000000000020F1CB                 db    ? ;
.bss:000000000020F1CC                 db    ? ;
.bss:000000000020F1CD                 db    ? ;
.bss:000000000020F1CE                 db    ? ;
.bss:000000000020F1CF                 db    ? ;
.bss:000000000020F1D0                 db    ? ;
.bss:000000000020F1D1                 db    ? ;
.bss:000000000020F1D2                 db    ? ;
.bss:000000000020F1D3                 db    ? ;
.bss:000000000020F1D4                 db    ? ;
.bss:000000000020F1D5                 db    ? ;
.bss:000000000020F1D6                 db    ? ;
.bss:000000000020F1D7                 db    ? ;
.bss:000000000020F1D8                 db    ? ;
.bss:000000000020F1D9                 db    ? ;
.bss:000000000020F1DA                 db    ? ;
.bss:000000000020F1DB                 db    ? ;
.bss:000000000020F1DC                 db    ? ;
.bss:000000000020F1DD                 db    ? ;
.bss:000000000020F1DE                 db    ? ;
.bss:000000000020F1DF                 db    ? ;
.bss:000000000020F1E0                 db    ? ;
.bss:000000000020F1E1                 db    ? ;
.bss:000000000020F1E2                 db    ? ;
.bss:000000000020F1E3                 db    ? ;
.bss:000000000020F1E4                 db    ? ;
.bss:000000000020F1E5                 db    ? ;
.bss:000000000020F1E6                 db    ? ;
.bss:000000000020F1E7                 db    ? ;
.bss:000000000020F1E8                 db    ? ;
.bss:000000000020F1E9                 db    ? ;
.bss:000000000020F1EA                 db    ? ;
.bss:000000000020F1EB                 db    ? ;
.bss:000000000020F1EC                 db    ? ;
.bss:000000000020F1ED                 db    ? ;
.bss:000000000020F1EE                 db    ? ;
.bss:000000000020F1EF                 db    ? ;
.bss:000000000020F1F0                 db    ? ;
.bss:000000000020F1F1                 db    ? ;
.bss:000000000020F1F2                 db    ? ;
.bss:000000000020F1F3                 db    ? ;
.bss:000000000020F1F4                 db    ? ;
.bss:000000000020F1F5                 db    ? ;
.bss:000000000020F1F6                 db    ? ;
.bss:000000000020F1F7                 db    ? ;
.bss:000000000020F1F8                 db    ? ;
.bss:000000000020F1F9                 db    ? ;
.bss:000000000020F1FA                 db    ? ;
.bss:000000000020F1FB                 db    ? ;
.bss:000000000020F1FC                 db    ? ;
.bss:000000000020F1FD                 db    ? ;
.bss:000000000020F1FE                 db    ? ;
.bss:000000000020F1FF                 db    ? ;
.bss:000000000020F200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020F200                                         ; get_quoting_style↑o ...
.bss:000000000020F210 xmmword_20F210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020F210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020F220 xmmword_20F220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020F220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020F230 qword_20F230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020F230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020F238 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020F238                                         ; rpl_fcntl:loc_A70F↑w ...
.bss:000000000020F23C                 align 20h
.bss:000000000020F23C _bss            ends
.bss:000000000020F23C
.prgend:000000000020F240 ; ===========================================================================
.prgend:000000000020F240
.prgend:000000000020F240 ; Segment type: Zero-length
.prgend:000000000020F240 _prgend         segment byte public '' use64
.prgend:000000000020F240 _end            label byte
.prgend:000000000020F240 _prgend         ends
.prgend:000000000020F240
extern:000000000020F248 ; ===========================================================================
extern:000000000020F248
extern:000000000020F248 ; Segment type: Externs
extern:000000000020F248 ; extern
extern:000000000020F248 ; void endgrent(void)
extern:000000000020F248                 extrn endgrent:near     ; CODE XREF: _endgrent↑j
extern:000000000020F248                                         ; DATA XREF: .got:endgrent_ptr↑o
extern:000000000020F250 ; void free(void *ptr)
extern:000000000020F250                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020F250                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020F258 ; void __noreturn abort(void)
extern:000000000020F258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020F258                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020F260 ; int *_errno_location(void)
extern:000000000020F260                 extrn __errno_location:near
extern:000000000020F260                                         ; CODE XREF: ___errno_location↑j
extern:000000000020F260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020F268 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020F268                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020F268                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020F270 ; void __noreturn exit(int status)
extern:000000000020F270                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020F270                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020F278 ; char *strcpy(char *dest, const char *src)
extern:000000000020F278                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020F278                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020F280 ; size_t _fpending(FILE *fp)
extern:000000000020F280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020F280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020F288 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000020F288                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000020F288                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000020F290 ; int fcntl(int fd, int cmd, ...)
extern:000000000020F290                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020F290                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020F298 ; char *textdomain(const char *domainname)
extern:000000000020F298                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020F298                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020F2A0 ; int fclose(FILE *stream)
extern:000000000020F2A0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020F2A0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020F2A8 ; struct passwd *getpwuid(__uid_t uid)
extern:000000000020F2A8                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:000000000020F2A8                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:000000000020F2B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020F2B0                 extrn bindtextdomain:near
extern:000000000020F2B0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020F2B0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020F2B8 ; char *stpcpy(char *dest, const char *src)
extern:000000000020F2B8                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000020F2B8                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000020F2C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020F2C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020F2C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020F2C8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020F2C8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020F2C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020F2C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020F2D0 ; size_t strlen(const char *s)
extern:000000000020F2D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020F2D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020F2D8 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020F2D8                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020F2D8                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020F2E0 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000020F2E0                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000020F2E0                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000020F2E8                 extrn __stack_chk_fail:near
extern:000000000020F2E8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020F2E8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020F2F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020F2F0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020F2F0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020F2F8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020F2F8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020F2F8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020F300 ; char *strchr(const char *s, int c)
extern:000000000020F300                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020F300                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020F308 ; struct group *getgrgid(__gid_t gid)
extern:000000000020F308                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:000000000020F308                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:000000000020F310 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020F310                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020F310                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020F318 ; char *strrchr(const char *s, int c)
extern:000000000020F318                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020F318                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020F320 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020F320                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020F320                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020F328 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020F328                 extrn __assert_fail:near
extern:000000000020F328                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020F328                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020F330 ; void *memset(void *s, int c, size_t n)
extern:000000000020F330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020F330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020F338 ; int close(int fd)
extern:000000000020F338                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020F338                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020F340                 extrn __openat_2:near   ; CODE XREF: ___openat_2↑j
extern:000000000020F340                                         ; DATA XREF: .got:__openat_2_ptr↑o
extern:000000000020F348 ; int closedir(DIR *dirp)
extern:000000000020F348                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000020F348                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000020F350 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020F350                 extrn __libc_start_main:near
extern:000000000020F350                                         ; CODE XREF: start+24↑p
extern:000000000020F350                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020F358 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020F358                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020F358                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020F360 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020F360                 extrn fputs_unlocked:near
extern:000000000020F360                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020F360                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020F368 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020F368                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020F368                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020F370 ; int dirfd(DIR *dirp)
extern:000000000020F370                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000020F370                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000020F378 ; struct passwd *getpwnam(const char *name)
extern:000000000020F378                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:000000000020F378                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:000000000020F380 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020F380                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020F380                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020F388 ; struct group *getgrnam(const char *name)
extern:000000000020F388                 extrn getgrnam:near     ; CODE XREF: _getgrnam↑j
extern:000000000020F388                                         ; DATA XREF: .got:getgrnam_ptr↑o
extern:000000000020F390 ; int fileno(FILE *stream)
extern:000000000020F390                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020F390                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020F398 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020F398                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020F398                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020F3A0 ; struct dirent *readdir(DIR *dirp)
extern:000000000020F3A0                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000020F3A0                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000020F3A8 ; void *malloc(size_t size)
extern:000000000020F3A8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020F3A8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020F3B0 ; int fflush(FILE *stream)
extern:000000000020F3B0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020F3B0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020F3B8 ; char *nl_langinfo(nl_item item)
extern:000000000020F3B8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020F3B8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020F3C0 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020F3C0                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020F3C0                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020F3C8 ; void endpwent(void)
extern:000000000020F3C8                 extrn endpwent:near     ; CODE XREF: _endpwent↑j
extern:000000000020F3C8                                         ; DATA XREF: .got:endpwent_ptr↑o
extern:000000000020F3D0 ; int _freading(FILE *fp)
extern:000000000020F3D0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020F3D0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020F3D8 ; int fchdir(int fd)
extern:000000000020F3D8                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000020F3D8                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000020F3E0 ; void *realloc(void *ptr, size_t size)
extern:000000000020F3E0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020F3E0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020F3E8 ; char *setlocale(int category, const char *locale)
extern:000000000020F3E8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020F3E8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020F3F0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020F3F0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020F3F8 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020F3F8                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020F3F8                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020F400 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020F400                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020F400                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020F408 ; int open(const char *file, int oflag, ...)
extern:000000000020F408                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020F408                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020F410 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020F410                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020F410                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020F418 ; int fchown(int fd, __uid_t owner, __gid_t group)
extern:000000000020F418                 extrn fchown:near       ; CODE XREF: _fchown↑j
extern:000000000020F418                                         ; DATA XREF: .got:fchown_ptr↑o
extern:000000000020F420 ; DIR *fdopendir(int fd)
extern:000000000020F420                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000020F420                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000020F428 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000020F428                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000020F428                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000020F430 ; int fstatfs(int fildes, struct statfs *buf)
extern:000000000020F430                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:000000000020F430                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:000000000020F438 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020F438                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020F438                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020F440 ; int fchownat(int fd, const char *file, __uid_t owner, __gid_t group, int flag)
extern:000000000020F440                 extrn fchownat:near     ; CODE XREF: _fchownat↑j
extern:000000000020F440                                         ; DATA XREF: .got:fchownat_ptr↑o
extern:000000000020F448 ; void __noreturn exit(int status)
extern:000000000020F448                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020F448                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020F450 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020F450                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020F450                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020F458                 extrn __fprintf_chk:near
extern:000000000020F458                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020F458                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020F460 ; int mbsinit(const mbstate_t *ps)
extern:000000000020F460                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020F460                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020F468 ; int iswprint(wint_t wc)
extern:000000000020F468                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020F468                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020F470 ; int __fastcall __cxa_finalize(void *)
extern:000000000020F470                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020F470                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020F470                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020F478 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020F478                 extrn __ctype_b_loc:near
extern:000000000020F478                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020F478                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020F480                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020F480                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020F488                 extrn __gmon_start__:near ; weak
extern:000000000020F488                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020F488                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020F490                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020F490                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020F490
extern:000000000020F490
extern:000000000020F490                 end start
