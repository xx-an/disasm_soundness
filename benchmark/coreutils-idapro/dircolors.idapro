LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 5951FACE7338E34FACA2746861FE9C7204B2020433E3F0167AFC2752412003B7
LOAD:0000000000000000 ; Input MD5    : 0EB9D6C1C666D8D280697DFFC01E67D6
LOAD:0000000000000000 ; Input CRC32  : 42AD296D
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/dircolors
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'dircolors.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'c-strcasecmp.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'freopen-safer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrndup.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'obstack.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000318↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000330↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2B978h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9288h                ; Size in file image
LOAD:00000000000000D8                 dq 9288h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9850h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209850h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 838h                 ; Size in file image
LOAD:0000000000000110                 dq 0A68h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 826Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 826Ch                ; Physical address
LOAD:00000000000001B0                 dq 2CCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2CCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9850h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209850h              ; Physical address
LOAD:0000000000000220                 dq 7B0h                 ; Size in file image
LOAD:0000000000000228                 dq 7B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9Fh, 78h, 6Ah, 0E6h, 41h, 0E8h, 92h, 0BAh, 0FFh, 0BDh ; Desc
LOAD:0000000000000284                 db 72h, 67h, 0Ch, 0F0h, 69h, 6Eh, 4Ch, 47h, 29h, 4Ah
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 2
LOAD:00000000000002A4 elf_gnu_hash_shift dd 7
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 16AA01120048A106h, 900004A01210D020h
LOAD:00000000000002B8 elf_gnu_hash_bucket dd 38h, 3Dh, 45h
LOAD:00000000000002C4 elf_gnu_hash_chain dd 0EB01FAB6h, 60E0C78Ch, 1C8C1D28h, 759A6A7Eh, 5B7F3E03h
LOAD:00000000000002C4                 dd 9E7650BCh, 10615566h, 7FFD8E4Eh, 9789A096h, 0AD3C9892h
LOAD:00000000000002C4                 dd 72632CCEh, 0F54162E4h, 1C8BF239h, 12F7C432h, 0BA53E4Dh
LOAD:0000000000000300 ; ELF Symbol Table
LOAD:0000000000000300                 Elf64_Sym <0>
LOAD:0000000000000318                 Elf64_Sym <offset aGetenv - offset byte_9A8, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000318                            offset dword_0, 0>
LOAD:0000000000000330                 Elf64_Sym <offset aObstackFree+9 - offset byte_9A8, 12h, 0, 0, \ ; "free"
LOAD:0000000000000330                            offset dword_0, 0>
LOAD:0000000000000348                 Elf64_Sym <offset aAbort - offset byte_9A8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000348                            0>
LOAD:0000000000000360                 Elf64_Sym <offset aErrnoLocation - offset byte_9A8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000360                            offset dword_0, 0>
LOAD:0000000000000378                 Elf64_Sym <offset aStrncmp - offset byte_9A8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000378                            offset dword_0, 0>
LOAD:0000000000000390                 Elf64_Sym <offset aItmDeregistert - offset byte_9A8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000390                            offset dword_0, 0>
LOAD:00000000000003A8                 Elf64_Sym <offset aExit - offset byte_9A8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A8                            0>
LOAD:00000000000003C0                 Elf64_Sym <offset aFpending - offset byte_9A8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003C0                            offset dword_0, 0>
LOAD:00000000000003D8                 Elf64_Sym <offset aPuts - offset byte_9A8, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003D8                            0>
LOAD:00000000000003F0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9A8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003F0                            offset dword_0, 0>
LOAD:0000000000000408                 Elf64_Sym <offset aFclose - offset byte_9A8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aBindtextdomain - offset byte_9A8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aDcgettext - offset byte_9A8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9A8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aStrlen - offset byte_9A8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aStackChkFail - offset byte_9A8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000480                            offset dword_0, 0>
LOAD:0000000000000498                 Elf64_Sym <offset aGetoptLong - offset byte_9A8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000498                            offset dword_0, 0>
LOAD:00000000000004B0                 Elf64_Sym <offset aMbrtowc - offset byte_9A8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004B0                            offset dword_0, 0>
LOAD:00000000000004C8                 Elf64_Sym <offset aDup2 - offset byte_9A8, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:00000000000004C8                            0>
LOAD:00000000000004E0                 Elf64_Sym <offset aStrrchr - offset byte_9A8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004E0                            offset dword_0, 0>
LOAD:00000000000004F8                 Elf64_Sym <offset aLseek - offset byte_9A8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004F8                            0>
LOAD:0000000000000510                 Elf64_Sym <offset aFnmatch - offset byte_9A8, 12h, 0, 0, \ ; "fnmatch"
LOAD:0000000000000510                            offset dword_0, 0>
LOAD:0000000000000528                 Elf64_Sym <offset aMemset - offset byte_9A8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000528                            offset dword_0, 0>
LOAD:0000000000000540                 Elf64_Sym <offset aFreopen - offset byte_9A8, 12h, 0, 0, \ ; "freopen"
LOAD:0000000000000540                            offset dword_0, 0>
LOAD:0000000000000558                 Elf64_Sym <offset aFclose+1 - offset byte_9A8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000558                            offset dword_0, 0>
LOAD:0000000000000570                 Elf64_Sym <offset aStrndup - offset byte_9A8, 12h, 0, 0, \ ; "strndup"
LOAD:0000000000000570                            offset dword_0, 0>
LOAD:0000000000000588                 Elf64_Sym <offset aLibcStartMain - offset byte_9A8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000588                            offset dword_0, 0>
LOAD:00000000000005A0                 Elf64_Sym <offset aMemcmp - offset byte_9A8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005A0                            offset dword_0, 0>
LOAD:00000000000005B8                 Elf64_Sym <offset aFputsUnlocked - offset byte_9A8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005B8                            offset dword_0, 0>
LOAD:00000000000005D0                 Elf64_Sym <offset aCalloc - offset byte_9A8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005D0                            offset dword_0, 0>
LOAD:00000000000005E8                 Elf64_Sym <offset aGetdelim - offset byte_9A8, 12h, 0, 0, \ ; "__getdelim"
LOAD:00000000000005E8                            offset dword_0, 0>
LOAD:0000000000000600                 Elf64_Sym <offset aStrcmp - offset byte_9A8, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000600                            offset dword_0, 0>
LOAD:0000000000000618                 Elf64_Sym <offset aGmonStart - offset byte_9A8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000618                            offset dword_0, 0>
LOAD:0000000000000630                 Elf64_Sym <offset aMemcpy - offset byte_9A8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000630                            offset dword_0, 0>
LOAD:0000000000000648                 Elf64_Sym <offset aFileno - offset byte_9A8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000648                            offset dword_0, 0>
LOAD:0000000000000660                 Elf64_Sym <offset aMalloc - offset byte_9A8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000660                            offset dword_0, 0>
LOAD:0000000000000678                 Elf64_Sym <offset aFflush - offset byte_9A8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000678                            offset dword_0, 0>
LOAD:0000000000000690                 Elf64_Sym <offset aNlLanginfo - offset byte_9A8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000690                            offset dword_0, 0>
LOAD:00000000000006A8                 Elf64_Sym <offset aFreading - offset byte_9A8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006A8                            offset dword_0, 0>
LOAD:00000000000006C0                 Elf64_Sym <offset aFwriteUnlocked - offset byte_9A8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000006C0                            offset dword_0, 0>
LOAD:00000000000006D8                 Elf64_Sym <offset aRealloc - offset byte_9A8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006D8                            offset dword_0, 0>
LOAD:00000000000006F0                 Elf64_Sym <offset aSetlocale - offset byte_9A8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006F0                            offset dword_0, 0>
LOAD:0000000000000708                 Elf64_Sym <offset aPrintfChk - offset byte_9A8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000708                            offset dword_0, 0>
LOAD:0000000000000720                 Elf64_Sym <offset aError - offset byte_9A8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000720                            0>
LOAD:0000000000000738                 Elf64_Sym <offset aFreopen+3 - offset byte_9A8, 12h, 0, 0, \ ; "open"
LOAD:0000000000000738                            offset dword_0, 0>
LOAD:0000000000000750                 Elf64_Sym <offset aFseeko - offset byte_9A8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000750                            offset dword_0, 0>
LOAD:0000000000000768                 Elf64_Sym <offset aCxaAtexit - offset byte_9A8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000768                            offset dword_0, 0>
LOAD:0000000000000780                 Elf64_Sym <offset aExit+1 - offset byte_9A8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000780                            offset dword_0, 0>
LOAD:0000000000000798                 Elf64_Sym <offset aFwrite - offset byte_9A8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000798                            offset dword_0, 0>
LOAD:00000000000007B0                 Elf64_Sym <offset aFprintfChk - offset byte_9A8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007B0                            offset dword_0, 0>
LOAD:00000000000007C8                 Elf64_Sym <offset aItmRegistertmc - offset byte_9A8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007C8                            offset dword_0, 0>
LOAD:00000000000007E0                 Elf64_Sym <offset aMbsinit - offset byte_9A8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007E0                            offset dword_0, 0>
LOAD:00000000000007F8                 Elf64_Sym <offset aIswprint - offset byte_9A8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007F8                            offset dword_0, 0>
LOAD:0000000000000810                 Elf64_Sym <offset aCxaFinalize - offset byte_9A8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000810                            offset dword_0, 0>
LOAD:0000000000000828                 Elf64_Sym <offset aCtypeBLoc - offset byte_9A8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000828                            offset dword_0, 0>
LOAD:0000000000000840                 Elf64_Sym <offset aObstackAllocFa - offset byte_9A8, 11h, 0, 18h, \ ; "obstack_alloc_failed_handler"
LOAD:0000000000000840                            offset obstack_alloc_failed_handler, 8>
LOAD:0000000000000858                 Elf64_Sym <offset aObstackNewchun - offset byte_9A8, 12h, 0, 0Eh, \ ; "_obstack_newchunk"
LOAD:0000000000000858                            offset _obstack_newchunk, 0EBh>
LOAD:0000000000000870                 Elf64_Sym <offset aStdout - offset byte_9A8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000870                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000888                 Elf64_Sym <offset aObstackBegin1 - offset byte_9A8, 12h, 0, 0Eh, \ ; "_obstack_begin_1"
LOAD:0000000000000888                            offset _obstack_begin_1, 15h>
LOAD:00000000000008A0                 Elf64_Sym <offset aObstackAllocat - offset byte_9A8, 12h, 0, 0Eh, \ ; "_obstack_allocated_p"
LOAD:00000000000008A0                            offset _obstack_allocated_p, 38h>
LOAD:00000000000008B8                 Elf64_Sym <offset aProgname - offset byte_9A8, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008B8                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008D0                 Elf64_Sym <offset aStdin - offset byte_9A8, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000008D0                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000008E8                 Elf64_Sym <offset aObstackBegin - offset byte_9A8, 12h, 0, 0Eh, \ ; "_obstack_begin"
LOAD:00000000000008E8                            offset _obstack_begin, 11h>
LOAD:0000000000000900                 Elf64_Sym <offset aProgramInvocat - offset byte_9A8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000900                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000918                 Elf64_Sym <offset aObstackMemoryU - offset byte_9A8, 12h, 0, 0Eh, \ ; "_obstack_memory_used"
LOAD:0000000000000918                            offset _obstack_memory_used, 2Ah>
LOAD:0000000000000930                 Elf64_Sym <offset aPrognameFull - offset byte_9A8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000930                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000948                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9A8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000948                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000960                 Elf64_Sym <offset aStderr - offset byte_9A8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000960                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000978                 Elf64_Sym <offset aOptind - offset byte_9A8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000978                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000990                 Elf64_Sym <offset aObstackFree - offset byte_9A8, 12h, 0, 0Eh, \ ; "_obstack_free"
LOAD:0000000000000990                            offset _obstack_free, 6Ah>
LOAD:00000000000009A8 ; ELF String Table
LOAD:00000000000009A8 byte_9A8        db 0                    ; DATA XREF: LOAD:0000000000000318↑o
LOAD:00000000000009A8                                         ; LOAD:0000000000000330↑o ...
LOAD:00000000000009A9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000D88↓o
LOAD:00000000000009B3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000678↑o
LOAD:00000000000009BA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000708↑o
LOAD:00000000000009C7 aFnmatch        db 'fnmatch',0          ; DATA XREF: LOAD:0000000000000510↑o
LOAD:00000000000009CF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006F0↑o
LOAD:00000000000009D9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:00000000000009E1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000378↑o
LOAD:00000000000009E9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000978↑o
LOAD:00000000000009F0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004E0↑o
LOAD:00000000000009F8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000A02 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000720↑o
LOAD:0000000000000A08 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003D8↑o
LOAD:0000000000000A0D aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000480↑o
LOAD:0000000000000A1E aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007F8↑o
LOAD:0000000000000A27 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006D8↑o
LOAD:0000000000000A2F aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000348↑o
LOAD:0000000000000A35 aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000008D0↑o
LOAD:0000000000000A3B aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A8↑o
LOAD:0000000000000A3B                                         ; LOAD:0000000000000780↑o
LOAD:0000000000000A41 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A41                                         ; DATA XREF: LOAD:0000000000000900↑o
LOAD:0000000000000A59 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A59                                         ; DATA XREF: LOAD:0000000000000450↑o
LOAD:0000000000000A70 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005D0↑o
LOAD:0000000000000A77 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000468↑o
LOAD:0000000000000A7E aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000528↑o
LOAD:0000000000000A85 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000360↑o
LOAD:0000000000000A96 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005A0↑o
LOAD:0000000000000A9D aStrndup        db 'strndup',0          ; DATA XREF: LOAD:0000000000000570↑o
LOAD:0000000000000AA5 aDup2           db 'dup2',0             ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:0000000000000AAA aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007B0↑o
LOAD:0000000000000AB8 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000870↑o
LOAD:0000000000000ABF aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004F8↑o
LOAD:0000000000000AC5 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000630↑o
LOAD:0000000000000ACC aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000408↑o
LOAD:0000000000000ACC                                         ; LOAD:0000000000000558↑o
LOAD:0000000000000AD3 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000660↑o
LOAD:0000000000000ADA aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007E0↑o
LOAD:0000000000000AE2 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000690↑o
LOAD:0000000000000AEE aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000828↑o
LOAD:0000000000000AFC aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000318↑o
LOAD:0000000000000B03 aObstackAllocat db '_obstack_allocated_p',0
LOAD:0000000000000B03                                         ; DATA XREF: LOAD:00000000000008A0↑o
LOAD:0000000000000B18 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006A8↑o
LOAD:0000000000000B23 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000960↑o
LOAD:0000000000000B2A aObstackBegin1  db '_obstack_begin_1',0 ; DATA XREF: LOAD:0000000000000888↑o
LOAD:0000000000000B3B aObstackNewchun db '_obstack_newchunk',0
LOAD:0000000000000B3B                                         ; DATA XREF: LOAD:0000000000000858↑o
LOAD:0000000000000B4D aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000498↑o
LOAD:0000000000000B59 aFreopen        db 'freopen',0          ; DATA XREF: LOAD:0000000000000540↑o
LOAD:0000000000000B59                                         ; LOAD:0000000000000738↑o
LOAD:0000000000000B61 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000648↑o
LOAD:0000000000000B68 aObstackMemoryU db '_obstack_memory_used',0
LOAD:0000000000000B68                                         ; DATA XREF: LOAD:0000000000000918↑o
LOAD:0000000000000B7D aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:00000000000005E8↑o
LOAD:0000000000000B88 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000798↑o
LOAD:0000000000000B8F aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003C0↑o
LOAD:0000000000000B9A aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B9A                                         ; DATA XREF: LOAD:0000000000000948↑o
LOAD:0000000000000BB8 aObstackAllocFa db 'obstack_alloc_failed_handler',0
LOAD:0000000000000BB8                                         ; DATA XREF: LOAD:0000000000000840↑o
LOAD:0000000000000BD5 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000810↑o
LOAD:0000000000000BE4 aObstackBegin   db '_obstack_begin',0   ; DATA XREF: LOAD:00000000000008E8↑o
LOAD:0000000000000BF3 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000420↑o
LOAD:0000000000000BF3                                         ; LOAD:00000000000003F0↑o
LOAD:0000000000000C02 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000006C0↑o
LOAD:0000000000000C12 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000600↑o
LOAD:0000000000000C19 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C19                                         ; DATA XREF: LOAD:0000000000000588↑o
LOAD:0000000000000C2B aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000750↑o
LOAD:0000000000000C32 aObstackFree    db '_obstack_free',0    ; DATA XREF: LOAD:0000000000000990↑o
LOAD:0000000000000C32                                         ; LOAD:0000000000000330↑o
LOAD:0000000000000C40 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005B8↑o
LOAD:0000000000000C4F aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008B8↑o
LOAD:0000000000000C5A aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000930↑o
LOAD:0000000000000C6A aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000768↑o
LOAD:0000000000000C77 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D98↓o
LOAD:0000000000000C81 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:0000000000000C8D aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000C98 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DC8↓o
LOAD:0000000000000CA2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DD8↓o
LOAD:0000000000000CAE aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CAE                                         ; DATA XREF: LOAD:0000000000000390↑o
LOAD:0000000000000CCA aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000618↑o
LOAD:0000000000000CD9 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CD9                                         ; DATA XREF: LOAD:00000000000007C8↑o
LOAD:0000000000000CF3                 align 4
LOAD:0000000000000CF4 ; ELF GNU Symbol Version Table
LOAD:0000000000000CF4                 dw 0
LOAD:0000000000000CF6                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000CF8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000CFA                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000CFC                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000CFE                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D00                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D02                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D04                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D06                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000D08                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D0C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D0E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D16                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 2                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 2                    ; fnmatch@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; freopen@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; strndup@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D38                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D3A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D4C                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D5A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D5C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D64                 dw 1                    ; global symbol: obstack_alloc_failed_handler
LOAD:0000000000000D66                 dw 1                    ; global symbol: _obstack_newchunk
LOAD:0000000000000D68                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 1                    ; global symbol: _obstack_begin_1
LOAD:0000000000000D6C                 dw 1                    ; global symbol: _obstack_allocated_p
LOAD:0000000000000D6E                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 1                    ; global symbol: _obstack_begin
LOAD:0000000000000D74                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 1                    ; global symbol: _obstack_memory_used
LOAD:0000000000000D78                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 1                    ; global symbol: _obstack_free
LOAD:0000000000000D82                 dw 0
LOAD:0000000000000D84                 dw 0
LOAD:0000000000000D86                 dw 0
LOAD:0000000000000D88 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000D88                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9A8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D98                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9A8, \ ; "GLIBC_2.3"
LOAD:0000000000000D98                                10h>
LOAD:0000000000000DA8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_9A8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DA8                                10h>
LOAD:0000000000000DB8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_9A8, \ ; "GLIBC_2.14"
LOAD:0000000000000DB8                                10h>
LOAD:0000000000000DC8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_9A8, \ ; "GLIBC_2.4"
LOAD:0000000000000DC8                                10h>
LOAD:0000000000000DD8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9A8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000DE8 ; ELF RELA Relocation Table
LOAD:0000000000000DE8                 Elf64_Rela <209850h, 8, 25A0h> ; R_X86_64_RELATIVE +25A0h
LOAD:0000000000000E00                 Elf64_Rela <209858h, 8, 2560h> ; R_X86_64_RELATIVE +2560h
LOAD:0000000000000E18                 Elf64_Rela <209860h, 8, 6320h> ; R_X86_64_RELATIVE +6320h
LOAD:0000000000000E30                 Elf64_Rela <209880h, 8, 630Ch> ; R_X86_64_RELATIVE +630Ch
LOAD:0000000000000E48                 Elf64_Rela <2098A0h, 8, 630Bh> ; R_X86_64_RELATIVE +630Bh
LOAD:0000000000000E60                 Elf64_Rela <2098C0h, 8, 632Dh> ; R_X86_64_RELATIVE +632Dh
LOAD:0000000000000E78                 Elf64_Rela <2098E0h, 8, 6335h> ; R_X86_64_RELATIVE +6335h
LOAD:0000000000000E90                 Elf64_Rela <209900h, 8, 6344h> ; R_X86_64_RELATIVE +6344h
LOAD:0000000000000EA8                 Elf64_Rela <209920h, 8, 6349h> ; R_X86_64_RELATIVE +6349h
LOAD:0000000000000EC0                 Elf64_Rela <209960h, 8, 6351h> ; R_X86_64_RELATIVE +6351h
LOAD:0000000000000ED8                 Elf64_Rela <209968h, 8, 6351h> ; R_X86_64_RELATIVE +6351h
LOAD:0000000000000EF0                 Elf64_Rela <209970h, 8, 6354h> ; R_X86_64_RELATIVE +6354h
LOAD:0000000000000F08                 Elf64_Rela <209978h, 8, 61DEh> ; R_X86_64_RELATIVE +61DEh
LOAD:0000000000000F20                 Elf64_Rela <209980h, 8, 6357h> ; R_X86_64_RELATIVE +6357h
LOAD:0000000000000F38                 Elf64_Rela <209988h, 8, 635Ah> ; R_X86_64_RELATIVE +635Ah
LOAD:0000000000000F50                 Elf64_Rela <209990h, 8, 635Ah> ; R_X86_64_RELATIVE +635Ah
LOAD:0000000000000F68                 Elf64_Rela <209998h, 8, 635Ah> ; R_X86_64_RELATIVE +635Ah
LOAD:0000000000000F80                 Elf64_Rela <2099A0h, 8, 79B2h> ; R_X86_64_RELATIVE +79B2h
LOAD:0000000000000F98                 Elf64_Rela <2099A8h, 8, 635Dh> ; R_X86_64_RELATIVE +635Dh
LOAD:0000000000000FB0                 Elf64_Rela <2099B0h, 8, 6360h> ; R_X86_64_RELATIVE +6360h
LOAD:0000000000000FC8                 Elf64_Rela <2099B8h, 8, 6360h> ; R_X86_64_RELATIVE +6360h
LOAD:0000000000000FE0                 Elf64_Rela <2099C0h, 8, 6363h> ; R_X86_64_RELATIVE +6363h
LOAD:0000000000000FF8                 Elf64_Rela <2099C8h, 8, 6366h> ; R_X86_64_RELATIVE +6366h
LOAD:0000000000001010                 Elf64_Rela <2099D0h, 8, 6366h> ; R_X86_64_RELATIVE +6366h
LOAD:0000000000001028                 Elf64_Rela <2099D8h, 8, 6369h> ; R_X86_64_RELATIVE +6369h
LOAD:0000000000001040                 Elf64_Rela <2099E0h, 8, 6369h> ; R_X86_64_RELATIVE +6369h
LOAD:0000000000001058                 Elf64_Rela <2099E8h, 8, 636Ch> ; R_X86_64_RELATIVE +636Ch
LOAD:0000000000001070                 Elf64_Rela <2099F0h, 8, 636Fh> ; R_X86_64_RELATIVE +636Fh
LOAD:0000000000001088                 Elf64_Rela <2099F8h, 8, 6372h> ; R_X86_64_RELATIVE +6372h
LOAD:00000000000010A0                 Elf64_Rela <209A00h, 8, 6372h> ; R_X86_64_RELATIVE +6372h
LOAD:00000000000010B8                 Elf64_Rela <209A08h, 8, 6375h> ; R_X86_64_RELATIVE +6375h
LOAD:00000000000010D0                 Elf64_Rela <209A10h, 8, 6375h> ; R_X86_64_RELATIVE +6375h
LOAD:00000000000010E8                 Elf64_Rela <209A18h, 8, 6378h> ; R_X86_64_RELATIVE +6378h
LOAD:0000000000001100                 Elf64_Rela <209A20h, 8, 6378h> ; R_X86_64_RELATIVE +6378h
LOAD:0000000000001118                 Elf64_Rela <209A28h, 8, 637Bh> ; R_X86_64_RELATIVE +637Bh
LOAD:0000000000001130                 Elf64_Rela <209A30h, 8, 637Bh> ; R_X86_64_RELATIVE +637Bh
LOAD:0000000000001148                 Elf64_Rela <209A38h, 8, 637Eh> ; R_X86_64_RELATIVE +637Eh
LOAD:0000000000001160                 Elf64_Rela <209A40h, 8, 637Eh> ; R_X86_64_RELATIVE +637Eh
LOAD:0000000000001178                 Elf64_Rela <209A48h, 8, 6381h> ; R_X86_64_RELATIVE +6381h
LOAD:0000000000001190                 Elf64_Rela <209A50h, 8, 6384h> ; R_X86_64_RELATIVE +6384h
LOAD:00000000000011A8                 Elf64_Rela <209A58h, 8, 6384h> ; R_X86_64_RELATIVE +6384h
LOAD:00000000000011C0                 Elf64_Rela <209A60h, 8, 6387h> ; R_X86_64_RELATIVE +6387h
LOAD:00000000000011D8                 Elf64_Rela <209A68h, 8, 6387h> ; R_X86_64_RELATIVE +6387h
LOAD:00000000000011F0                 Elf64_Rela <209A70h, 8, 638Ah> ; R_X86_64_RELATIVE +638Ah
LOAD:0000000000001208                 Elf64_Rela <209A78h, 8, 638Dh> ; R_X86_64_RELATIVE +638Dh
LOAD:0000000000001220                 Elf64_Rela <209A80h, 8, 6390h> ; R_X86_64_RELATIVE +6390h
LOAD:0000000000001238                 Elf64_Rela <209AA0h, 8, 61A9h> ; R_X86_64_RELATIVE +61A9h
LOAD:0000000000001250                 Elf64_Rela <209AA8h, 8, 6393h> ; R_X86_64_RELATIVE +6393h
LOAD:0000000000001268                 Elf64_Rela <209AB0h, 8, 6398h> ; R_X86_64_RELATIVE +6398h
LOAD:0000000000001280                 Elf64_Rela <209AB8h, 8, 639Dh> ; R_X86_64_RELATIVE +639Dh
LOAD:0000000000001298                 Elf64_Rela <209AC0h, 8, 63A3h> ; R_X86_64_RELATIVE +63A3h
LOAD:00000000000012B0                 Elf64_Rela <209AC8h, 8, 63A7h> ; R_X86_64_RELATIVE +63A7h
LOAD:00000000000012C8                 Elf64_Rela <209AD0h, 8, 6469h> ; R_X86_64_RELATIVE +6469h
LOAD:00000000000012E0                 Elf64_Rela <209AD8h, 8, 63ABh> ; R_X86_64_RELATIVE +63ABh
LOAD:00000000000012F8                 Elf64_Rela <209AE0h, 8, 63B3h> ; R_X86_64_RELATIVE +63B3h
LOAD:0000000000001310                 Elf64_Rela <209AE8h, 8, 63BAh> ; R_X86_64_RELATIVE +63BAh
LOAD:0000000000001328                 Elf64_Rela <209AF0h, 8, 63C2h> ; R_X86_64_RELATIVE +63C2h
LOAD:0000000000001340                 Elf64_Rela <209AF8h, 8, 63C7h> ; R_X86_64_RELATIVE +63C7h
LOAD:0000000000001358                 Elf64_Rela <209B00h, 8, 63CCh> ; R_X86_64_RELATIVE +63CCh
LOAD:0000000000001370                 Elf64_Rela <209B08h, 8, 63D1h> ; R_X86_64_RELATIVE +63D1h
LOAD:0000000000001388                 Elf64_Rela <209B10h, 8, 63D5h> ; R_X86_64_RELATIVE +63D5h
LOAD:00000000000013A0                 Elf64_Rela <209B18h, 8, 63DBh> ; R_X86_64_RELATIVE +63DBh
LOAD:00000000000013B8                 Elf64_Rela <209B20h, 8, 63DFh> ; R_X86_64_RELATIVE +63DFh
LOAD:00000000000013D0                 Elf64_Rela <209B28h, 8, 63E4h> ; R_X86_64_RELATIVE +63E4h
LOAD:00000000000013E8                 Elf64_Rela <209B30h, 8, 63E9h> ; R_X86_64_RELATIVE +63E9h
LOAD:0000000000001400                 Elf64_Rela <209B38h, 8, 63EEh> ; R_X86_64_RELATIVE +63EEh
LOAD:0000000000001418                 Elf64_Rela <209B40h, 8, 63F3h> ; R_X86_64_RELATIVE +63F3h
LOAD:0000000000001430                 Elf64_Rela <209B48h, 8, 63FCh> ; R_X86_64_RELATIVE +63FCh
LOAD:0000000000001448                 Elf64_Rela <209B50h, 8, 6402h> ; R_X86_64_RELATIVE +6402h
LOAD:0000000000001460                 Elf64_Rela <209B58h, 8, 640Ch> ; R_X86_64_RELATIVE +640Ch
LOAD:0000000000001478                 Elf64_Rela <209B60h, 8, 6410h> ; R_X86_64_RELATIVE +6410h
LOAD:0000000000001490                 Elf64_Rela <209B68h, 8, 6418h> ; R_X86_64_RELATIVE +6418h
LOAD:00000000000014A8                 Elf64_Rela <209B70h, 8, 641Dh> ; R_X86_64_RELATIVE +641Dh
LOAD:00000000000014C0                 Elf64_Rela <209B78h, 8, 6424h> ; R_X86_64_RELATIVE +6424h
LOAD:00000000000014D8                 Elf64_Rela <209B80h, 8, 6429h> ; R_X86_64_RELATIVE +6429h
LOAD:00000000000014F0                 Elf64_Rela <209B88h, 8, 6430h> ; R_X86_64_RELATIVE +6430h
LOAD:0000000000001508                 Elf64_Rela <209B90h, 8, 6442h> ; R_X86_64_RELATIVE +6442h
LOAD:0000000000001520                 Elf64_Rela <209B98h, 8, 6437h> ; R_X86_64_RELATIVE +6437h
LOAD:0000000000001538                 Elf64_Rela <209BA0h, 8, 643Bh> ; R_X86_64_RELATIVE +643Bh
LOAD:0000000000001550                 Elf64_Rela <209BA8h, 8, 6451h> ; R_X86_64_RELATIVE +6451h
LOAD:0000000000001568                 Elf64_Rela <209BB0h, 8, 6455h> ; R_X86_64_RELATIVE +6455h
LOAD:0000000000001580                 Elf64_Rela <209BB8h, 8, 6460h> ; R_X86_64_RELATIVE +6460h
LOAD:0000000000001598                 Elf64_Rela <209BC0h, 8, 646Eh> ; R_X86_64_RELATIVE +646Eh
LOAD:00000000000015B0                 Elf64_Rela <209BE0h, 8, 7A1Fh> ; R_X86_64_RELATIVE +7A1Fh
LOAD:00000000000015C8                 Elf64_Rela <209BE8h, 8, 632Fh> ; R_X86_64_RELATIVE +632Fh
LOAD:00000000000015E0                 Elf64_Rela <209BF0h, 8, 7A27h> ; R_X86_64_RELATIVE +7A27h
LOAD:00000000000015F8                 Elf64_Rela <209BF8h, 8, 7A34h> ; R_X86_64_RELATIVE +7A34h
LOAD:0000000000001610                 Elf64_Rela <209C00h, 8, 7A41h> ; R_X86_64_RELATIVE +7A41h
LOAD:0000000000001628                 Elf64_Rela <209C08h, 8, 6379h> ; R_X86_64_RELATIVE +6379h
LOAD:0000000000001640                 Elf64_Rela <209C10h, 8, 7A55h> ; R_X86_64_RELATIVE +7A55h
LOAD:0000000000001658                 Elf64_Rela <209C18h, 8, 7A3Ah> ; R_X86_64_RELATIVE +7A3Ah
LOAD:0000000000001670                 Elf64_Rela <209C20h, 8, 62EAh> ; R_X86_64_RELATIVE +62EAh
LOAD:0000000000001688                 Elf64_Rela <209C28h, 8, 7A5Dh> ; R_X86_64_RELATIVE +7A5Dh
LOAD:00000000000016A0                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:00000000000016B8                 Elf64_Rela <20A010h, 8, 79A4h> ; R_X86_64_RELATIVE +79A4h
LOAD:00000000000016D0                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:00000000000016E8                 Elf64_Rela <20A078h, 8, 20A180h> ; R_X86_64_RELATIVE +20A180h
LOAD:0000000000001700                 Elf64_Rela <20A080h, 8, 5CC0h> ; R_X86_64_RELATIVE +5CC0h
LOAD:0000000000001718                 Elf64_Rela <209FC0h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001730                 Elf64_Rela <209FC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001748                 Elf64_Rela <209FD0h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001760                 Elf64_Rela <209FD8h, 2100000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001778                 Elf64_Rela <209FE0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT malloc
LOAD:0000000000001790                 Elf64_Rela <209FE8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000017A8                 Elf64_Rela <209FF0h, 3600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000017C0                 Elf64_Rela <20A0A0h, 3D00000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000017D8                 Elf64_Rela <20A0A8h, 3A00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000017F0                 Elf64_Rela <20A0B0h, 3E00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001808                 Elf64_Rela <20A0B8h, 4500000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001820                 Elf64_Rela <20A0C0h, 4200000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001838                 Elf64_Rela <20A0E0h, 4400000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001850 ; ELF JMPREL Relocation Table
LOAD:0000000000001850                 Elf64_Rela <209E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001868                 Elf64_Rela <209E48h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001880                 Elf64_Rela <209E50h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001898                 Elf64_Rela <209E58h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000018B0                 Elf64_Rela <209E60h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000018C8                 Elf64_Rela <209E68h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000018E0                 Elf64_Rela <209E70h, 900000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:00000000000018F8                 Elf64_Rela <209E78h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001910                 Elf64_Rela <209E80h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001928                 Elf64_Rela <209E88h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001940                 Elf64_Rela <209E90h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001958                 Elf64_Rela <209E98h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001970                 Elf64_Rela <209EA0h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001988                 Elf64_Rela <209EA8h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000019A0                 Elf64_Rela <209EB0h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000019B8                 Elf64_Rela <209EB8h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000019D0                 Elf64_Rela <209EC0h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:00000000000019E8                 Elf64_Rela <209EC8h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001A00                 Elf64_Rela <209ED0h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001A18                 Elf64_Rela <209ED8h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT fnmatch
LOAD:0000000000001A30                 Elf64_Rela <209EE0h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001A48                 Elf64_Rela <209EE8h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT freopen
LOAD:0000000000001A60                 Elf64_Rela <209EF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001A78                 Elf64_Rela <209EF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strndup
LOAD:0000000000001A90                 Elf64_Rela <209F00h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001AA8                 Elf64_Rela <209F08h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001AC0                 Elf64_Rela <209F10h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001AD8                 Elf64_Rela <209F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001AF0                 Elf64_Rela <209F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001B08                 Elf64_Rela <209F28h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001B20                 Elf64_Rela <209F30h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001B38                 Elf64_Rela <209F38h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001B50                 Elf64_Rela <209F40h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001B68                 Elf64_Rela <209F48h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001B80                 Elf64_Rela <209F50h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001B98                 Elf64_Rela <209F58h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001BB0                 Elf64_Rela <209F60h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001BC8                 Elf64_Rela <209F68h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001BE0                 Elf64_Rela <209F70h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001BF8                 Elf64_Rela <209F78h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001C10                 Elf64_Rela <209F80h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001C28                 Elf64_Rela <209F88h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001C40                 Elf64_Rela <209F90h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001C58                 Elf64_Rela <209F98h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001C70                 Elf64_Rela <209FA0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001C88                 Elf64_Rela <209FA8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001CA0                 Elf64_Rela <209FB0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001CB8                 Elf64_Rela <209FB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001CB8 LOAD            ends
LOAD:0000000000001CB8
.init:0000000000001CD0 ; ===========================================================================
.init:0000000000001CD0
.init:0000000000001CD0 ; Segment type: Pure code
.init:0000000000001CD0 ; Segment permissions: Read/Execute
.init:0000000000001CD0 _init           segment dword public 'CODE' use64
.init:0000000000001CD0                 assume cs:_init
.init:0000000000001CD0                 ;org 1CD0h
.init:0000000000001CD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001CD0
.init:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.init:0000000000001CD0
.init:0000000000001CD0
.init:0000000000001CD0                 public _init_proc
.init:0000000000001CD0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001CD0                 sub     rsp, 8          ; _init
.init:0000000000001CD4                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001CDB                 test    rax, rax
.init:0000000000001CDE                 jz      short loc_1CE2
.init:0000000000001CE0                 call    rax ; __gmon_start__
.init:0000000000001CE2
.init:0000000000001CE2 loc_1CE2:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001CE2                 add     rsp, 8
.init:0000000000001CE6                 retn
.init:0000000000001CE6 _init_proc      endp
.init:0000000000001CE6
.init:0000000000001CE6 _init           ends
.init:0000000000001CE6
LOAD:0000000000001CE7 ; ===========================================================================
LOAD:0000000000001CE7
LOAD:0000000000001CE7 ; Segment type: Pure code
LOAD:0000000000001CE7 ; Segment permissions: Read/Execute
LOAD:0000000000001CE7 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001CE7                 assume cs:LOAD
LOAD:0000000000001CE7                 ;org 1CE7h
LOAD:0000000000001CE7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001CE7                 align 10h
LOAD:0000000000001CE7 LOAD            ends
LOAD:0000000000001CE7
.plt:0000000000001CF0 ; ===========================================================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Segment type: Pure code
.plt:0000000000001CF0 ; Segment permissions: Read/Execute
.plt:0000000000001CF0 _plt            segment para public 'CODE' use64
.plt:0000000000001CF0                 assume cs:_plt
.plt:0000000000001CF0                 ;org 1CF0h
.plt:0000000000001CF0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0
.plt:0000000000001CF0 sub_1CF0        proc near               ; CODE XREF: .plt:0000000000001D0B↓j
.plt:0000000000001CF0                                         ; .plt:0000000000001D1B↓j ...
.plt:0000000000001CF0 ; __unwind {
.plt:0000000000001CF0                 push    cs:qword_209E30
.plt:0000000000001CF6                 jmp     cs:qword_209E38
.plt:0000000000001CF6 sub_1CF0        endp
.plt:0000000000001CF6
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CFC                 align 20h
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; char *getenv(const char *name)
.plt:0000000000001D00 _getenv         proc near               ; CODE XREF: main+2E8↓p
.plt:0000000000001D00                                         ; dc_parse_stream+3F↓p
.plt:0000000000001D00                 jmp     cs:getenv_ptr
.plt:0000000000001D00 _getenv         endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    0
.plt:0000000000001D0B                 jmp     sub_1CF0
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: noreturn thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; void __noreturn abort(void)
.plt:0000000000001D10 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001D10                                         ; quotearg_buffer_restyled:def_3731↓p ...
.plt:0000000000001D10                 jmp     cs:abort_ptr
.plt:0000000000001D10 _abort          endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    1
.plt:0000000000001D1B                 jmp     sub_1CF0
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int *__errno_location(void)
.plt:0000000000001D20 ___errno_location proc near             ; CODE XREF: main+356↓p
.plt:0000000000001D20                                         ; close_stdout+16↓p ...
.plt:0000000000001D20                 jmp     cs:__errno_location_ptr
.plt:0000000000001D20 ___errno_location endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    2
.plt:0000000000001D2B                 jmp     sub_1CF0
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001D30 _strncmp        proc near               ; CODE XREF: usage+22C↓p
.plt:0000000000001D30                                         ; usage+2ED↓p
.plt:0000000000001D30                 jmp     cs:strncmp_ptr
.plt:0000000000001D30 _strncmp        endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    3
.plt:0000000000001D3B                 jmp     sub_1CF0
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: noreturn thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; void __noreturn _exit(int status)
.plt:0000000000001D40 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001D40                 jmp     cs:_exit_ptr
.plt:0000000000001D40 __exit          endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    4
.plt:0000000000001D4B                 jmp     sub_1CF0
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; size_t __fpending(FILE *fp)
.plt:0000000000001D50 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001D50                 jmp     cs:__fpending_ptr
.plt:0000000000001D50 ___fpending     endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    5
.plt:0000000000001D5B                 jmp     sub_1CF0
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; int puts(const char *s)
.plt:0000000000001D60 _puts           proc near               ; CODE XREF: main+140↓p
.plt:0000000000001D60                 jmp     cs:puts_ptr
.plt:0000000000001D60 _puts           endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    6
.plt:0000000000001D6B                 jmp     sub_1CF0
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; char *textdomain(const char *domainname)
.plt:0000000000001D70 _textdomain     proc near               ; CODE XREF: main+49↓p
.plt:0000000000001D70                 jmp     cs:textdomain_ptr
.plt:0000000000001D70 _textdomain     endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    7
.plt:0000000000001D7B                 jmp     sub_1CF0
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int fclose(FILE *stream)
.plt:0000000000001D80 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001D80                                         ; rpl_fclose+6B↓j
.plt:0000000000001D80                 jmp     cs:fclose_ptr
.plt:0000000000001D80 _fclose         endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    8
.plt:0000000000001D8B                 jmp     sub_1CF0
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001D90 _bindtextdomain proc near               ; CODE XREF: main+3D↓p
.plt:0000000000001D90                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001D90 _bindtextdomain endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    9
.plt:0000000000001D9B                 jmp     sub_1CF0
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001DA0 _dcgettext      proc near               ; CODE XREF: main+3B2↓p
.plt:0000000000001DA0                                         ; main+3E0↓p ...
.plt:0000000000001DA0                 jmp     cs:dcgettext_ptr
.plt:0000000000001DA0 _dcgettext      endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    0Ah
.plt:0000000000001DAB                 jmp     sub_1CF0
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001DB0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001DB0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001DB0 ___ctype_get_mb_cur_max endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    0Bh
.plt:0000000000001DBB                 jmp     sub_1CF0
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; size_t strlen(const char *s)
.plt:0000000000001DC0 _strlen         proc near               ; CODE XREF: dc_parse_stream+243↓p
.plt:0000000000001DC0                                         ; base_len+4↓p ...
.plt:0000000000001DC0                 jmp     cs:strlen_ptr
.plt:0000000000001DC0 _strlen         endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    0Ch
.plt:0000000000001DCB                 jmp     sub_1CF0
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: noreturn thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ___stack_chk_fail proc near             ; CODE XREF: dc_parse_stream:loc_2DBE↓p
.plt:0000000000001DD0                                         ; quotearg_buffer_restyled:loc_4893↓p ...
.plt:0000000000001DD0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001DD0 ___stack_chk_fail endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    0Dh
.plt:0000000000001DDB                 jmp     sub_1CF0
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001DE0 _getopt_long    proc near               ; CODE XREF: main+70↓p
.plt:0000000000001DE0                 jmp     cs:getopt_long_ptr
.plt:0000000000001DE0 _getopt_long    endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    0Eh
.plt:0000000000001DEB                 jmp     sub_1CF0
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001DF0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001DF0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001DF0 _mbrtowc        endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    0Fh
.plt:0000000000001DFB                 jmp     sub_1CF0
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int dup2(int fd, int fd2)
.plt:0000000000001E00 _dup2           proc near               ; CODE XREF: freopen_safer+4F↓p
.plt:0000000000001E00                                         ; freopen_safer+64↓p ...
.plt:0000000000001E00                 jmp     cs:dup2_ptr
.plt:0000000000001E00 _dup2           endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    10h
.plt:0000000000001E0B                 jmp     sub_1CF0
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; char *strrchr(const char *s, int c)
.plt:0000000000001E10 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001E10                 jmp     cs:strrchr_ptr
.plt:0000000000001E10 _strrchr        endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    11h
.plt:0000000000001E1B                 jmp     sub_1CF0
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001E20 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001E20                                         ; rpl_fseeko+3B↓p
.plt:0000000000001E20                 jmp     cs:lseek_ptr
.plt:0000000000001E20 _lseek          endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    12h
.plt:0000000000001E2B                 jmp     sub_1CF0
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; int fnmatch(const char *pattern, const char *name, int flags)
.plt:0000000000001E30 _fnmatch        proc near               ; CODE XREF: dc_parse_stream+2EA↓p
.plt:0000000000001E30                 jmp     cs:fnmatch_ptr
.plt:0000000000001E30 _fnmatch        endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    13h
.plt:0000000000001E3B                 jmp     sub_1CF0
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001E40 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001E40                                         ; xzalloc+12↓j
.plt:0000000000001E40                 jmp     cs:memset_ptr
.plt:0000000000001E40 _memset         endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    14h
.plt:0000000000001E4B                 jmp     sub_1CF0
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
.plt:0000000000001E50 _freopen        proc near               ; CODE XREF: freopen_safer+BB↓p
.plt:0000000000001E50                 jmp     cs:freopen_ptr
.plt:0000000000001E50 _freopen        endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    15h
.plt:0000000000001E5B                 jmp     sub_1CF0
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; int close(int fd)
.plt:0000000000001E60 _close          proc near               ; CODE XREF: protect_fd+29↓p
.plt:0000000000001E60                                         ; freopen_safer+133↓p ...
.plt:0000000000001E60                 jmp     cs:close_ptr
.plt:0000000000001E60 _close          endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    16h
.plt:0000000000001E6B                 jmp     sub_1CF0
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; char *strndup(const char *string, size_t n)
.plt:0000000000001E70 _strndup        proc near               ; CODE XREF: xstrndup+4↓p
.plt:0000000000001E70                 jmp     cs:strndup_ptr
.plt:0000000000001E70 _strndup        endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    17h
.plt:0000000000001E7B                 jmp     sub_1CF0
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001E80 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001E80                 jmp     cs:memcmp_ptr
.plt:0000000000001E80 _memcmp         endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    18h
.plt:0000000000001E8B                 jmp     sub_1CF0
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001E90 _fputs_unlocked proc near               ; CODE XREF: main+2A0↓p
.plt:0000000000001E90                                         ; main+2C6↓p ...
.plt:0000000000001E90                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001E90 _fputs_unlocked endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    19h
.plt:0000000000001E9B                 jmp     sub_1CF0
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001EA0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001EA0                 jmp     cs:calloc_ptr
.plt:0000000000001EA0 _calloc         endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    1Ah
.plt:0000000000001EAB                 jmp     sub_1CF0
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000001EB0 ___getdelim     proc near               ; CODE XREF: dc_parse_stream+9F↓p
.plt:0000000000001EB0                 jmp     cs:__getdelim_ptr
.plt:0000000000001EB0 ___getdelim     endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    1Bh
.plt:0000000000001EBB                 jmp     sub_1CF0
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001EC0 _strcmp         proc near               ; CODE XREF: main+1B4↓p
.plt:0000000000001EC0                                         ; main+31A↓p ...
.plt:0000000000001EC0                 jmp     cs:strcmp_ptr
.plt:0000000000001EC0 _strcmp         endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    1Ch
.plt:0000000000001ECB                 jmp     sub_1CF0
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001ED0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001ED0                                         ; _obstack_newchunk+95↓p
.plt:0000000000001ED0                 jmp     cs:memcpy_ptr
.plt:0000000000001ED0 _memcpy         endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    1Dh
.plt:0000000000001EDB                 jmp     sub_1CF0
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; int fileno(FILE *stream)
.plt:0000000000001EE0 _fileno         proc near               ; CODE XREF: freopen_safer+1C↓p
.plt:0000000000001EE0                                         ; rpl_fclose+7↓p ...
.plt:0000000000001EE0                 jmp     cs:fileno_ptr
.plt:0000000000001EE0 _fileno         endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    1Eh
.plt:0000000000001EEB                 jmp     sub_1CF0
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; int fflush(FILE *stream)
.plt:0000000000001EF0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001EF0                                         ; rpl_fflush+3B↓j
.plt:0000000000001EF0                 jmp     cs:fflush_ptr
.plt:0000000000001EF0 _fflush         endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    1Fh
.plt:0000000000001EFB                 jmp     sub_1CF0
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; char *nl_langinfo(nl_item item)
.plt:0000000000001F00 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001F00                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001F00 _nl_langinfo    endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    20h ; ' '
.plt:0000000000001F0B                 jmp     sub_1CF0
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int __freading(FILE *fp)
.plt:0000000000001F10 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001F10                                         ; rpl_fflush+9↓p
.plt:0000000000001F10                 jmp     cs:__freading_ptr
.plt:0000000000001F10 ___freading     endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    21h ; '!'
.plt:0000000000001F1B                 jmp     sub_1CF0
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001F20 _fwrite_unlocked proc near              ; CODE XREF: main+2B7↓p
.plt:0000000000001F20                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001F20 _fwrite_unlocked endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    22h ; '"'
.plt:0000000000001F2B                 jmp     sub_1CF0
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001F30 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001F30                 jmp     cs:realloc_ptr
.plt:0000000000001F30 _realloc        endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    23h ; '#'
.plt:0000000000001F3B                 jmp     sub_1CF0
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; char *setlocale(int category, const char *locale)
.plt:0000000000001F40 _setlocale      proc near               ; CODE XREF: main+2A↓p
.plt:0000000000001F40                                         ; usage+213↓p ...
.plt:0000000000001F40                 jmp     cs:setlocale_ptr
.plt:0000000000001F40 _setlocale      endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    24h ; '$'
.plt:0000000000001F4B                 jmp     sub_1CF0
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001F50                                         ; usage+207↓p ...
.plt:0000000000001F50                 jmp     cs:__printf_chk_ptr
.plt:0000000000001F50 ___printf_chk   endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    25h ; '%'
.plt:0000000000001F5B                 jmp     sub_1CF0
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001F60 _error          proc near               ; CODE XREF: main+36B↓p
.plt:0000000000001F60                                         ; main+3C3↓p ...
.plt:0000000000001F60                 jmp     cs:error_ptr
.plt:0000000000001F60 _error          endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    26h ; '&'
.plt:0000000000001F6B                 jmp     sub_1CF0
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; int open(const char *file, int oflag, ...)
.plt:0000000000001F70 _open           proc near               ; CODE XREF: protect_fd+18↓p
.plt:0000000000001F70                 jmp     cs:open_ptr
.plt:0000000000001F70 _open           endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    27h ; '''
.plt:0000000000001F7B                 jmp     sub_1CF0
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001F80 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5BDA↓j
.plt:0000000000001F80                 jmp     cs:fseeko_ptr
.plt:0000000000001F80 _fseeko         endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    28h ; '('
.plt:0000000000001F8B                 jmp     sub_1CF0
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001F90 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001F90                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001F90 ___cxa_atexit   endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    29h ; ')'
.plt:0000000000001F9B                 jmp     sub_1CF0
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: noreturn thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ; void __noreturn exit(int status)
.plt:0000000000001FA0 _exit           proc near               ; CODE XREF: main+DA↓p
.plt:0000000000001FA0                                         ; usage+58↓p ...
.plt:0000000000001FA0                 jmp     cs:exit_ptr
.plt:0000000000001FA0 _exit           endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    2Ah ; '*'
.plt:0000000000001FAB                 jmp     sub_1CF0
.plt:0000000000001FB0
.plt:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FB0
.plt:0000000000001FB0 ; Attributes: thunk
.plt:0000000000001FB0
.plt:0000000000001FB0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001FB0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001FB0                 jmp     cs:fwrite_ptr
.plt:0000000000001FB0 _fwrite         endp
.plt:0000000000001FB0
.plt:0000000000001FB6 ; ---------------------------------------------------------------------------
.plt:0000000000001FB6                 push    2Bh ; '+'
.plt:0000000000001FBB                 jmp     sub_1CF0
.plt:0000000000001FC0
.plt:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FC0
.plt:0000000000001FC0 ; Attributes: thunk
.plt:0000000000001FC0
.plt:0000000000001FC0 ___fprintf_chk  proc near               ; CODE XREF: main+473↓p
.plt:0000000000001FC0                                         ; usage+51↓p ...
.plt:0000000000001FC0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001FC0 ___fprintf_chk  endp
.plt:0000000000001FC0
.plt:0000000000001FC6 ; ---------------------------------------------------------------------------
.plt:0000000000001FC6                 push    2Ch ; ','
.plt:0000000000001FCB                 jmp     sub_1CF0
.plt:0000000000001FD0
.plt:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FD0
.plt:0000000000001FD0 ; Attributes: thunk
.plt:0000000000001FD0
.plt:0000000000001FD0 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001FD0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001FD0                 jmp     cs:mbsinit_ptr
.plt:0000000000001FD0 _mbsinit        endp
.plt:0000000000001FD0
.plt:0000000000001FD6 ; ---------------------------------------------------------------------------
.plt:0000000000001FD6                 push    2Dh ; '-'
.plt:0000000000001FDB                 jmp     sub_1CF0
.plt:0000000000001FE0
.plt:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FE0
.plt:0000000000001FE0 ; Attributes: thunk
.plt:0000000000001FE0
.plt:0000000000001FE0 ; int iswprint(wint_t wc)
.plt:0000000000001FE0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001FE0                 jmp     cs:iswprint_ptr
.plt:0000000000001FE0 _iswprint       endp
.plt:0000000000001FE0
.plt:0000000000001FE6 ; ---------------------------------------------------------------------------
.plt:0000000000001FE6                 push    2Eh ; '.'
.plt:0000000000001FEB                 jmp     sub_1CF0
.plt:0000000000001FF0
.plt:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FF0
.plt:0000000000001FF0 ; Attributes: thunk
.plt:0000000000001FF0
.plt:0000000000001FF0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001FF0 ___ctype_b_loc  proc near               ; CODE XREF: dc_parse_stream:loc_2852↓p
.plt:0000000000001FF0                                         ; quotearg_buffer_restyled+513↓p
.plt:0000000000001FF0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001FF0 ___ctype_b_loc  endp
.plt:0000000000001FF0
.plt:0000000000001FF6 ; ---------------------------------------------------------------------------
.plt:0000000000001FF6                 push    2Fh ; '/'
.plt:0000000000001FFB                 jmp     sub_1CF0
.plt:0000000000001FFB ; } // starts at 1CF0
.plt:0000000000001FFB _plt            ends
.plt:0000000000001FFB
.plt.got:0000000000002000 ; ===========================================================================
.plt.got:0000000000002000
.plt.got:0000000000002000 ; Segment type: Pure code
.plt.got:0000000000002000 ; Segment permissions: Read/Execute
.plt.got:0000000000002000 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002000                 assume cs:_plt_got
.plt.got:0000000000002000                 ;org 2000h
.plt.got:0000000000002000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002000
.plt.got:0000000000002000 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002000
.plt.got:0000000000002000 ; Attributes: thunk
.plt.got:0000000000002000
.plt.got:0000000000002000 ; void free(void *ptr)
.plt.got:0000000000002000 free            proc near               ; CODE XREF: dc_parse_stream+213↓p
.plt.got:0000000000002000                                         ; dc_parse_stream+21B↓p ...
.plt.got:0000000000002000 ; __unwind {
.plt.got:0000000000002000                 jmp     cs:free_ptr
.plt.got:0000000000002000 free            endp
.plt.got:0000000000002000
.plt.got:0000000000002000 ; ---------------------------------------------------------------------------
.plt.got:0000000000002006                 align 8
.plt.got:0000000000002008
.plt.got:0000000000002008 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002008
.plt.got:0000000000002008 ; Attributes: thunk
.plt.got:0000000000002008
.plt.got:0000000000002008 ; void *malloc(size_t size)
.plt.got:0000000000002008 malloc          proc near               ; CODE XREF: xmalloc+4↓p
.plt.got:0000000000002008                 jmp     cs:malloc_ptr
.plt.got:0000000000002008 malloc          endp
.plt.got:0000000000002008
.plt.got:0000000000002008 ; ---------------------------------------------------------------------------
.plt.got:000000000000200E                 align 10h
.plt.got:0000000000002010
.plt.got:0000000000002010 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002010
.plt.got:0000000000002010 ; Attributes: thunk
.plt.got:0000000000002010
.plt.got:0000000000002010 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002010 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002010                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002010 __cxa_finalize  endp
.plt.got:0000000000002010
.plt.got:0000000000002010 ; ---------------------------------------------------------------------------
.plt.got:0000000000002016                 align 8
.plt.got:0000000000002016 ; } // starts at 2000
.plt.got:0000000000002016 _plt_got        ends
.plt.got:0000000000002016
LOAD:0000000000002018 ; ===========================================================================
LOAD:0000000000002018
LOAD:0000000000002018 ; Segment type: Pure code
LOAD:0000000000002018 ; Segment permissions: Read/Execute
LOAD:0000000000002018 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002018                 assume cs:LOAD
LOAD:0000000000002018                 ;org 2018h
LOAD:0000000000002018                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002018                 align 20h
LOAD:0000000000002018 LOAD            ends
LOAD:0000000000002018
.text:0000000000002020 ; ===========================================================================
.text:0000000000002020
.text:0000000000002020 ; Segment type: Pure code
.text:0000000000002020 ; Segment permissions: Read/Execute
.text:0000000000002020 _text           segment para public 'CODE' use64
.text:0000000000002020                 assume cs:_text
.text:0000000000002020                 ;org 2020h
.text:0000000000002020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002020
.text:0000000000002020 ; =============== S U B R O U T I N E =======================================
.text:0000000000002020
.text:0000000000002020
.text:0000000000002020 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002020                 public main
.text:0000000000002020 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002020 ; __unwind {
.text:0000000000002020                 push    r14
.text:0000000000002022                 push    r13
.text:0000000000002024                 mov     r13d, 2
.text:000000000000202A                 push    r12
.text:000000000000202C                 push    rbp
.text:000000000000202D                 mov     ebp, edi
.text:000000000000202F                 push    rbx
.text:0000000000002030                 mov     rdi, [rsi]
.text:0000000000002033                 mov     rbx, rsi
.text:0000000000002036                 xor     r12d, r12d
.text:0000000000002039                 call    set_program_name
.text:000000000000203E                 lea     rsi, asc_62C3+2 ; locale
.text:0000000000002045                 mov     edi, 6          ; category
.text:000000000000204A                 call    _setlocale
.text:000000000000204F                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002056                 lea     rdi, domainname ; "coreutils"
.text:000000000000205D                 call    _bindtextdomain
.text:0000000000002062                 lea     rdi, domainname ; "coreutils"
.text:0000000000002069                 call    _textdomain
.text:000000000000206E                 lea     rdi, close_stdout
.text:0000000000002075                 call    atexit
.text:000000000000207A
.text:000000000000207A loc_207A:                               ; CODE XREF: main+99↓j
.text:000000000000207A                                         ; main+E3↓j ...
.text:000000000000207A                 lea     rcx, long_options ; longopts
.text:0000000000002081                 lea     rdx, shortopts  ; "bcp"
.text:0000000000002088                 xor     r8d, r8d        ; longind
.text:000000000000208B                 mov     rsi, rbx        ; argv
.text:000000000000208E                 mov     edi, ebp        ; argc
.text:0000000000002090                 call    _getopt_long
.text:0000000000002095                 cmp     eax, 0FFFFFFFFh
.text:0000000000002098                 jz      loc_211B
.text:000000000000209E                 cmp     eax, 62h ; 'b'
.text:00000000000020A1                 jz      short loc_2100
.text:00000000000020A3                 jle     short loc_20C0
.text:00000000000020A5                 cmp     eax, 63h ; 'c'
.text:00000000000020A8                 jz      short loc_2110
.text:00000000000020AA                 cmp     eax, 70h ; 'p'
.text:00000000000020AD                 jnz     loc_23E8
.text:00000000000020B3                 mov     r12d, 1
.text:00000000000020B9                 jmp     short loc_207A
.text:00000000000020B9 ; ---------------------------------------------------------------------------
.text:00000000000020BB                 align 20h
.text:00000000000020C0
.text:00000000000020C0 loc_20C0:                               ; CODE XREF: main+83↑j
.text:00000000000020C0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000020C5                 jnz     loc_23A1
.text:00000000000020CB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000020D2                 mov     rcx, cs:Version
.text:00000000000020D9                 lea     r8, aHPeterAnvin ; "H. Peter Anvin"
.text:00000000000020E0                 lea     rdx, unk_6275
.text:00000000000020E7                 lea     rsi, aDircolors ; "dircolors"
.text:00000000000020EE                 xor     r9d, r9d
.text:00000000000020F1                 xor     eax, eax
.text:00000000000020F3                 call    version_etc
.text:00000000000020F8                 xor     edi, edi        ; status
.text:00000000000020FA                 call    _exit
.text:00000000000020FA ; ---------------------------------------------------------------------------
.text:00000000000020FF                 align 20h
.text:0000000000002100
.text:0000000000002100 loc_2100:                               ; CODE XREF: main+81↑j
.text:0000000000002100                 xor     r13d, r13d
.text:0000000000002103                 jmp     loc_207A
.text:0000000000002103 ; ---------------------------------------------------------------------------
.text:0000000000002108                 align 10h
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: main+88↑j
.text:0000000000002110                 mov     r13d, 1
.text:0000000000002116                 jmp     loc_207A
.text:000000000000211B ; ---------------------------------------------------------------------------
.text:000000000000211B
.text:000000000000211B loc_211B:                               ; CODE XREF: main+78↑j
.text:000000000000211B                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002122                 sub     ebp, eax
.text:0000000000002124                 cmp     r13d, 2
.text:0000000000002128                 lea     rbx, [rbx+rax*8]
.text:000000000000212C                 jz      short loc_2137
.text:000000000000212E                 test    r12b, r12b
.text:0000000000002131                 jnz     loc_2416
.text:0000000000002137
.text:0000000000002137 loc_2137:                               ; CODE XREF: main+10C↑j
.text:0000000000002137                 mov     eax, r12d
.text:000000000000213A                 xor     eax, 1
.text:000000000000213D                 movzx   eax, al
.text:0000000000002140                 cmp     eax, ebp
.text:0000000000002142                 jl      loc_23AF
.text:0000000000002148                 test    r12b, r12b
.text:000000000000214B                 jz      short loc_2197
.text:000000000000214D                 lea     rbx, G_line     ; "# Configuration file for dircolors, a u"...
.text:0000000000002154                 or      rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000002158                 mov     r13, rbx
.text:000000000000215B                 jmp     short loc_2178
.text:000000000000215D ; ---------------------------------------------------------------------------
.text:000000000000215D
.text:000000000000215D loc_215D:                               ; CODE XREF: main+164↓j
.text:000000000000215D                 mov     rdi, r13        ; s
.text:0000000000002160                 call    _puts
.text:0000000000002165                 xor     eax, eax
.text:0000000000002167                 mov     rdi, r13
.text:000000000000216A                 mov     rcx, rbp
.text:000000000000216D                 repne scasb
.text:000000000000216F                 mov     rax, rcx
.text:0000000000002172                 not     rax
.text:0000000000002175                 add     r13, rax
.text:0000000000002178
.text:0000000000002178 loc_2178:                               ; CODE XREF: main+13B↑j
.text:0000000000002178                 mov     rax, r13
.text:000000000000217B                 sub     rax, rbx
.text:000000000000217E                 cmp     rax, 10C3h
.text:0000000000002184                 jbe     short loc_215D
.text:0000000000002186
.text:0000000000002186 loc_2186:                               ; CODE XREF: main+207↓j
.text:0000000000002186                                         ; main+2CB↓j ...
.text:0000000000002186                 xor     r12d, 1
.text:000000000000218A                 pop     rbx
.text:000000000000218B                 movzx   eax, r12b
.text:000000000000218F                 pop     rbp
.text:0000000000002190                 pop     r12
.text:0000000000002192                 pop     r13
.text:0000000000002194                 pop     r14
.text:0000000000002196                 retn
.text:0000000000002197 ; ---------------------------------------------------------------------------
.text:0000000000002197
.text:0000000000002197 loc_2197:                               ; CODE XREF: main+12B↑j
.text:0000000000002197                 cmp     r13d, 2
.text:000000000000219B                 jz      loc_2301
.text:00000000000021A1
.text:00000000000021A1 loc_21A1:                               ; CODE XREF: main+321↓j
.text:00000000000021A1                                         ; main+33F↓j
.text:00000000000021A1                 mov     r8, cs:free_ptr
.text:00000000000021A8                 mov     rcx, cs:malloc_ptr
.text:00000000000021AF                 lea     rdi, lsc_obstack
.text:00000000000021B6                 xor     edx, edx
.text:00000000000021B8                 xor     esi, esi
.text:00000000000021BA                 call    _obstack_begin
.text:00000000000021BF                 test    ebp, ebp
.text:00000000000021C1                 jz      loc_22F0
.text:00000000000021C7                 mov     rbx, [rbx]
.text:00000000000021CA                 lea     rsi, aLt+2      ; s2
.text:00000000000021D1                 mov     rdi, rbx        ; s1
.text:00000000000021D4                 call    _strcmp
.text:00000000000021D9                 test    eax, eax
.text:00000000000021DB                 jz      short loc_21FC
.text:00000000000021DD                 mov     rdx, cs:stdin@@GLIBC_2_2_5
.text:00000000000021E4                 lea     rsi, aWriteError+0Ah ; "r"
.text:00000000000021EB                 mov     rdi, rbx
.text:00000000000021EE                 call    freopen_safer
.text:00000000000021F3                 test    rax, rax
.text:00000000000021F6                 jz      loc_2364
.text:00000000000021FC
.text:00000000000021FC loc_21FC:                               ; CODE XREF: main+1BB↑j
.text:00000000000021FC                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000002203                 mov     rsi, rbx
.text:0000000000002206                 call    dc_parse_stream
.text:000000000000220B                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000002212                 mov     ebp, eax
.text:0000000000002214                 call    rpl_fclose
.text:0000000000002219                 test    eax, eax
.text:000000000000221B                 jnz     loc_2364
.text:0000000000002221                 mov     r12d, ebp
.text:0000000000002224
.text:0000000000002224 loc_2224:                               ; CODE XREF: main+2DC↓j
.text:0000000000002224                 test    r12b, r12b
.text:0000000000002227                 jz      loc_2186
.text:000000000000222D                 mov     rax, cs:qword_20A118
.text:0000000000002234                 mov     rbp, cs:ptr
.text:000000000000223B                 mov     rbx, rax
.text:000000000000223E                 sub     rbx, rbp
.text:0000000000002241                 cmp     rax, rbp
.text:0000000000002244                 jz      loc_2395
.text:000000000000224A
.text:000000000000224A loc_224A:                               ; CODE XREF: main+37C↓j
.text:000000000000224A                 mov     rdx, cs:qword_20A130
.text:0000000000002251                 mov     rcx, cs:qword_20A120
.text:0000000000002258                 add     rax, rdx
.text:000000000000225B                 not     rdx
.text:000000000000225E                 mov     rsi, rcx
.text:0000000000002261                 and     rax, rdx
.text:0000000000002264                 mov     rdx, cs:qword_20A108
.text:000000000000226B                 mov     cs:qword_20A118, rax
.text:0000000000002272                 sub     rsi, rdx
.text:0000000000002275                 sub     rax, rdx
.text:0000000000002278                 cmp     rax, rsi
.text:000000000000227B                 jbe     short loc_2284
.text:000000000000227D                 mov     cs:qword_20A118, rcx
.text:0000000000002284
.text:0000000000002284 loc_2284:                               ; CODE XREF: main+25B↑j
.text:0000000000002284                 mov     rax, cs:qword_20A118
.text:000000000000228B                 lea     r14, asc_62C3   ; "'\n"
.text:0000000000002292                 test    r13d, r13d
.text:0000000000002295                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000229C                 lea     rdi, aSetenvLsColors ; "setenv LS_COLORS '"
.text:00000000000022A3                 mov     cs:ptr, rax
.text:00000000000022AA                 lea     rax, aExportLsColors ; "';\nexport LS_COLORS\n"
.text:00000000000022B1                 cmovz   r14, rax
.text:00000000000022B5                 lea     rax, s          ; "LS_COLORS='"
.text:00000000000022BC                 cmovz   rdi, rax        ; s
.text:00000000000022C0                 call    _fputs_unlocked
.text:00000000000022C5                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000022CC                 mov     rdi, rbp        ; ptr
.text:00000000000022CF                 mov     rdx, rbx        ; n
.text:00000000000022D2                 mov     esi, 1          ; size
.text:00000000000022D7                 call    _fwrite_unlocked
.text:00000000000022DC                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000022E3                 mov     rdi, r14        ; s
.text:00000000000022E6                 call    _fputs_unlocked
.text:00000000000022EB                 jmp     loc_2186
.text:00000000000022F0 ; ---------------------------------------------------------------------------
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: main+1A1↑j
.text:00000000000022F0                 xor     esi, esi
.text:00000000000022F2                 xor     edi, edi        ; stream
.text:00000000000022F4                 call    dc_parse_stream
.text:00000000000022F9                 mov     r12d, eax
.text:00000000000022FC                 jmp     loc_2224
.text:0000000000002301 ; ---------------------------------------------------------------------------
.text:0000000000002301
.text:0000000000002301 loc_2301:                               ; CODE XREF: main+17B↑j
.text:0000000000002301                 lea     rdi, name       ; "SHELL"
.text:0000000000002308                 call    _getenv
.text:000000000000230D                 test    rax, rax
.text:0000000000002310                 jz      loc_23F2
.text:0000000000002316                 cmp     byte ptr [rax], 0
.text:0000000000002319                 jz      loc_23F2
.text:000000000000231F                 mov     rdi, rax
.text:0000000000002322                 mov     r13d, 1
.text:0000000000002328                 call    last_component
.text:000000000000232D                 lea     rsi, s2+1       ; s2
.text:0000000000002334                 mov     rdi, rax        ; s1
.text:0000000000002337                 mov     r14, rax
.text:000000000000233A                 call    _strcmp
.text:000000000000233F                 test    eax, eax
.text:0000000000002341                 jz      loc_21A1
.text:0000000000002347                 lea     rsi, s2         ; "tcsh"
.text:000000000000234E                 mov     rdi, r14        ; s1
.text:0000000000002351                 xor     r13d, r13d
.text:0000000000002354                 call    _strcmp
.text:0000000000002359                 test    eax, eax
.text:000000000000235B                 setz    r13b
.text:000000000000235F                 jmp     loc_21A1
.text:0000000000002364 ; ---------------------------------------------------------------------------
.text:0000000000002364
.text:0000000000002364 loc_2364:                               ; CODE XREF: main+1D6↑j
.text:0000000000002364                                         ; main+1FB↑j
.text:0000000000002364                 mov     rdx, rbx
.text:0000000000002367                 xor     edi, edi
.text:0000000000002369                 mov     esi, 3
.text:000000000000236E                 call    quotearg_n_style_colon
.text:0000000000002373                 mov     rbx, rax
.text:0000000000002376                 call    ___errno_location
.text:000000000000237B                 mov     esi, [rax]      ; errnum
.text:000000000000237D                 lea     rdx, format+4   ; format
.text:0000000000002384                 mov     rcx, rbx
.text:0000000000002387                 xor     edi, edi        ; status
.text:0000000000002389                 xor     eax, eax
.text:000000000000238B                 call    _error
.text:0000000000002390                 jmp     loc_2186
.text:0000000000002395 ; ---------------------------------------------------------------------------
.text:0000000000002395
.text:0000000000002395 loc_2395:                               ; CODE XREF: main+224↑j
.text:0000000000002395                 or      cs:byte_20A150, 2
.text:000000000000239C                 jmp     loc_224A
.text:00000000000023A1 ; ---------------------------------------------------------------------------
.text:00000000000023A1
.text:00000000000023A1 loc_23A1:                               ; CODE XREF: main+A5↑j
.text:00000000000023A1                 cmp     eax, 0FFFFFF7Eh
.text:00000000000023A6                 jnz     short loc_23E8
.text:00000000000023A8                 xor     edi, edi        ; status
.text:00000000000023AA                 call    usage
.text:00000000000023AF ; ---------------------------------------------------------------------------
.text:00000000000023AF
.text:00000000000023AF loc_23AF:                               ; CODE XREF: main+122↑j
.text:00000000000023AF                 test    r12b, r12b
.text:00000000000023B2                 jnz     loc_2439
.text:00000000000023B8                 mov     rdi, [rbx+8]
.text:00000000000023BC                 call    quote
.text:00000000000023C1                 lea     rsi, msgid      ; "extra operand %s"
.text:00000000000023C8                 mov     rbx, rax
.text:00000000000023CB                 mov     edx, 5          ; category
.text:00000000000023D0                 xor     edi, edi        ; domainname
.text:00000000000023D2                 call    _dcgettext
.text:00000000000023D7                 mov     rcx, rbx
.text:00000000000023DA                 mov     rdx, rax        ; format
.text:00000000000023DD                 xor     esi, esi        ; errnum
.text:00000000000023DF                 xor     edi, edi        ; status
.text:00000000000023E1                 xor     eax, eax
.text:00000000000023E3                 call    _error
.text:00000000000023E8
.text:00000000000023E8 loc_23E8:                               ; CODE XREF: main+8D↑j
.text:00000000000023E8                                         ; main+386↑j ...
.text:00000000000023E8                 mov     edi, 1          ; status
.text:00000000000023ED                 call    usage
.text:00000000000023F2 ; ---------------------------------------------------------------------------
.text:00000000000023F2
.text:00000000000023F2 loc_23F2:                               ; CODE XREF: main+2F0↑j
.text:00000000000023F2                                         ; main+2F9↑j
.text:00000000000023F2                 lea     rsi, aNoShellEnviron ; "no SHELL environment variable, and no s"...
.text:00000000000023F9                 mov     edx, 5          ; category
.text:00000000000023FE                 xor     edi, edi        ; domainname
.text:0000000000002400                 call    _dcgettext
.text:0000000000002405                 xor     esi, esi        ; errnum
.text:0000000000002407                 mov     rdx, rax        ; format
.text:000000000000240A                 mov     edi, 1          ; status
.text:000000000000240F                 xor     eax, eax
.text:0000000000002411                 call    _error
.text:0000000000002416
.text:0000000000002416 loc_2416:                               ; CODE XREF: main+111↑j
.text:0000000000002416                 lea     rsi, aTheOptionsToOu ; "the options to output dircolors' intern"...
.text:000000000000241D                 xor     edi, edi        ; domainname
.text:000000000000241F                 mov     edx, 5          ; category
.text:0000000000002424                 call    _dcgettext
.text:0000000000002429                 xor     esi, esi        ; errnum
.text:000000000000242B                 mov     rdx, rax        ; format
.text:000000000000242E                 xor     edi, edi        ; status
.text:0000000000002430                 xor     eax, eax
.text:0000000000002432                 call    _error
.text:0000000000002437                 jmp     short loc_23E8
.text:0000000000002439 ; ---------------------------------------------------------------------------
.text:0000000000002439
.text:0000000000002439 loc_2439:                               ; CODE XREF: main+392↑j
.text:0000000000002439                 mov     rdi, [rbx]
.text:000000000000243C                 call    quote
.text:0000000000002441                 lea     rsi, msgid      ; "extra operand %s"
.text:0000000000002448                 mov     rbx, rax
.text:000000000000244B                 xor     edi, edi        ; domainname
.text:000000000000244D                 mov     edx, 5          ; category
.text:0000000000002452                 call    _dcgettext
.text:0000000000002457                 mov     rcx, rbx
.text:000000000000245A                 mov     rdx, rax        ; format
.text:000000000000245D                 xor     esi, esi        ; errnum
.text:000000000000245F                 xor     edi, edi        ; status
.text:0000000000002461                 xor     eax, eax
.text:0000000000002463                 call    _error
.text:0000000000002468                 lea     rsi, aFileOperandsCa ; "file operands cannot be combined with -"...
.text:000000000000246F                 xor     edi, edi        ; domainname
.text:0000000000002471                 mov     edx, 5          ; category
.text:0000000000002476                 call    _dcgettext
.text:000000000000247B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002482                 lea     rdx, aSSS+8     ; "%s\n"
.text:0000000000002489                 mov     rcx, rax
.text:000000000000248C                 mov     esi, 1
.text:0000000000002491                 xor     eax, eax
.text:0000000000002493                 call    ___fprintf_chk
.text:0000000000002498                 jmp     loc_23E8
.text:0000000000002498 ; } // starts at 2020
.text:0000000000002498 main            endp
.text:0000000000002498
.text:0000000000002498 ; ---------------------------------------------------------------------------
.text:000000000000249D                 align 20h
.text:00000000000024A0
.text:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024A0
.text:00000000000024A0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000024A0
.text:00000000000024A0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000024A0                 public start
.text:00000000000024A0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000024A0 ; __unwind {
.text:00000000000024A0                 xor     ebp, ebp
.text:00000000000024A2                 mov     r9, rdx         ; rtld_fini
.text:00000000000024A5                 pop     rsi             ; argc
.text:00000000000024A6                 mov     rdx, rsp        ; ubp_av
.text:00000000000024A9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000024AD                 push    rax
.text:00000000000024AE                 push    rsp             ; stack_end
.text:00000000000024AF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000024B6                 lea     rcx, __libc_csu_init ; init
.text:00000000000024BD                 lea     rdi, main       ; main
.text:00000000000024C4                 call    cs:__libc_start_main_ptr
.text:00000000000024CA                 hlt
.text:00000000000024CA ; } // starts at 24A0
.text:00000000000024CA start           endp
.text:00000000000024CA
.text:00000000000024CA ; ---------------------------------------------------------------------------
.text:00000000000024CB                 align 10h
.text:00000000000024D0
.text:00000000000024D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024D0
.text:00000000000024D0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000024D0
.text:00000000000024D0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2583↓p
.text:00000000000024D0                 lea     rdi, __bss_start
.text:00000000000024D7                 push    rbp
.text:00000000000024D8                 lea     rax, __bss_start
.text:00000000000024DF                 cmp     rax, rdi
.text:00000000000024E2                 mov     rbp, rsp
.text:00000000000024E5                 jz      short loc_2500
.text:00000000000024E7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000024EE                 test    rax, rax
.text:00000000000024F1                 jz      short loc_2500
.text:00000000000024F3                 pop     rbp
.text:00000000000024F4                 jmp     rax
.text:00000000000024F4 ; ---------------------------------------------------------------------------
.text:00000000000024F6                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002500                                         ; deregister_tm_clones+21↑j
.text:0000000000002500                 pop     rbp
.text:0000000000002501                 retn
.text:0000000000002501 deregister_tm_clones endp
.text:0000000000002501
.text:0000000000002501 ; ---------------------------------------------------------------------------
.text:0000000000002502                 align 10h
.text:0000000000002510
.text:0000000000002510 ; =============== S U B R O U T I N E =======================================
.text:0000000000002510
.text:0000000000002510 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002510
.text:0000000000002510 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002510                 lea     rdi, __bss_start
.text:0000000000002517                 lea     rsi, __bss_start
.text:000000000000251E                 push    rbp
.text:000000000000251F                 sub     rsi, rdi
.text:0000000000002522                 mov     rbp, rsp
.text:0000000000002525                 sar     rsi, 3
.text:0000000000002529                 mov     rax, rsi
.text:000000000000252C                 shr     rax, 3Fh
.text:0000000000002530                 add     rsi, rax
.text:0000000000002533                 sar     rsi, 1
.text:0000000000002536                 jz      short loc_2550
.text:0000000000002538                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000253F                 test    rax, rax
.text:0000000000002542                 jz      short loc_2550
.text:0000000000002544                 pop     rbp
.text:0000000000002545                 jmp     rax
.text:0000000000002545 ; ---------------------------------------------------------------------------
.text:0000000000002547                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002550                                         ; register_tm_clones+32↑j
.text:0000000000002550                 pop     rbp
.text:0000000000002551                 retn
.text:0000000000002551 register_tm_clones endp
.text:0000000000002551
.text:0000000000002551 ; ---------------------------------------------------------------------------
.text:0000000000002552                 align 20h
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560 ; Attributes: info_from_lumina
.text:0000000000002560
.text:0000000000002560 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002560                 cmp     cs:completed_7697, 0
.text:0000000000002567                 jnz     short locret_2598
.text:0000000000002569                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002571                 push    rbp
.text:0000000000002572                 mov     rbp, rsp
.text:0000000000002575                 jz      short loc_2583
.text:0000000000002577                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000257E                 call    __cxa_finalize
.text:0000000000002583
.text:0000000000002583 loc_2583:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002583                 call    deregister_tm_clones
.text:0000000000002588                 mov     cs:completed_7697, 1
.text:000000000000258F                 pop     rbp
.text:0000000000002590                 retn
.text:0000000000002590 ; ---------------------------------------------------------------------------
.text:0000000000002591                 align 8
.text:0000000000002598
.text:0000000000002598 locret_2598:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002598                 rep retn
.text:0000000000002598 __do_global_dtors_aux endp
.text:0000000000002598
.text:0000000000002598 ; ---------------------------------------------------------------------------
.text:000000000000259A                 align 20h
.text:00000000000025A0
.text:00000000000025A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025A0
.text:00000000000025A0 ; Attributes: bp-based frame
.text:00000000000025A0
.text:00000000000025A0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000025A0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000025A0                 push    rbp
.text:00000000000025A1                 mov     rbp, rsp
.text:00000000000025A4                 pop     rbp
.text:00000000000025A5                 jmp     register_tm_clones
.text:00000000000025A5 frame_dummy     endp
.text:00000000000025A5
.text:00000000000025A5 ; ---------------------------------------------------------------------------
.text:00000000000025AA                 align 10h
.text:00000000000025B0
.text:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025B0
.text:00000000000025B0
.text:00000000000025B0 append_quoted   proc near               ; CODE XREF: dc_parse_stream+348↓p
.text:00000000000025B0                                         ; dc_parse_stream+372↓p ...
.text:00000000000025B0 ; __unwind {
.text:00000000000025B0                 movzx   edx, byte ptr [rdi]
.text:00000000000025B3                 test    dl, dl
.text:00000000000025B5                 jz      locret_2770
.text:00000000000025BB                 push    r12
.text:00000000000025BD                 mov     r12d, 1
.text:00000000000025C3                 push    rbp
.text:00000000000025C4                 lea     rbp, lsc_obstack
.text:00000000000025CB                 push    rbx
.text:00000000000025CC                 mov     rbx, rdi
.text:00000000000025CF                 jmp     short loc_2645
.text:00000000000025CF ; ---------------------------------------------------------------------------
.text:00000000000025D1                 align 8
.text:00000000000025D8
.text:00000000000025D8 loc_25D8:                               ; CODE XREF: append_quoted+A8↓j
.text:00000000000025D8                 cmp     dl, 27h ; '''
.text:00000000000025DB                 jz      loc_26A0
.text:00000000000025E1                 cmp     dl, 3Ah ; ':'
.text:00000000000025E4                 jnz     loc_2690
.text:00000000000025EA
.text:00000000000025EA loc_25EA:                               ; CODE XREF: append_quoted+A6↓j
.text:00000000000025EA                 test    r12b, r12b
.text:00000000000025ED                 jz      loc_2690
.text:00000000000025F3                 cmp     rcx, rax
.text:00000000000025F6                 jz      loc_2778
.text:00000000000025FC
.text:00000000000025FC loc_25FC:                               ; CODE XREF: append_quoted+1DC↓j
.text:00000000000025FC                 lea     rdx, [rax+1]
.text:0000000000002600                 mov     cs:qword_20A118, rdx
.text:0000000000002607                 mov     byte ptr [rax], 5Ch ; '\'
.text:000000000000260A                 mov     rcx, cs:qword_20A120
.text:0000000000002611                 mov     rax, cs:qword_20A118
.text:0000000000002618                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: append_quoted+E6↓j
.text:0000000000002620                                         ; append_quoted+157↓j
.text:0000000000002620                 cmp     rcx, rax
.text:0000000000002623                 jz      short loc_2671
.text:0000000000002625
.text:0000000000002625 loc_2625:                               ; CODE XREF: append_quoted+BF↓j
.text:0000000000002625                                         ; append_quoted+D5↓j
.text:0000000000002625                 lea     rdx, [rax+1]
.text:0000000000002629                 add     rbx, 1
.text:000000000000262D                 mov     cs:qword_20A118, rdx
.text:0000000000002634                 movzx   edx, byte ptr [rbx-1]
.text:0000000000002638                 mov     [rax], dl
.text:000000000000263A                 movzx   edx, byte ptr [rbx]
.text:000000000000263D                 test    dl, dl
.text:000000000000263F                 jz      loc_2710
.text:0000000000002645
.text:0000000000002645 loc_2645:                               ; CODE XREF: append_quoted+1F↑j
.text:0000000000002645                 cmp     dl, 3Dh ; '='
.text:0000000000002648                 mov     rcx, cs:qword_20A120
.text:000000000000264F                 mov     rax, cs:qword_20A118
.text:0000000000002656                 jz      short loc_25EA
.text:0000000000002658                 jle     loc_25D8
.text:000000000000265E                 cmp     dl, 5Ch ; '\'
.text:0000000000002661                 jz      short loc_2668
.text:0000000000002663                 cmp     dl, 5Eh ; '^'
.text:0000000000002666                 jnz     short loc_2690
.text:0000000000002668
.text:0000000000002668 loc_2668:                               ; CODE XREF: append_quoted+B1↑j
.text:0000000000002668                 xor     r12d, 1
.text:000000000000266C                 cmp     rcx, rax
.text:000000000000266F                 jnz     short loc_2625
.text:0000000000002671
.text:0000000000002671 loc_2671:                               ; CODE XREF: append_quoted+73↑j
.text:0000000000002671                 mov     esi, 1
.text:0000000000002676                 mov     rdi, rbp
.text:0000000000002679                 call    _obstack_newchunk
.text:000000000000267E                 mov     rax, cs:qword_20A118
.text:0000000000002685                 jmp     short loc_2625
.text:0000000000002685 ; ---------------------------------------------------------------------------
.text:0000000000002687                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: append_quoted+34↑j
.text:0000000000002690                                         ; append_quoted+3D↑j ...
.text:0000000000002690                 mov     r12d, 1
.text:0000000000002696                 jmp     short loc_2620
.text:0000000000002696 ; ---------------------------------------------------------------------------
.text:0000000000002698                 align 20h
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: append_quoted+2B↑j
.text:00000000000026A0                 cmp     rcx, rax
.text:00000000000026A3                 jz      short loc_2718
.text:00000000000026A5
.text:00000000000026A5 loc_26A5:                               ; CODE XREF: append_quoted+17C↓j
.text:00000000000026A5                 lea     rdx, [rax+1]
.text:00000000000026A9                 mov     cs:qword_20A118, rdx
.text:00000000000026B0                 mov     byte ptr [rax], 27h ; '''
.text:00000000000026B3                 mov     rax, cs:qword_20A118
.text:00000000000026BA                 cmp     cs:qword_20A120, rax
.text:00000000000026C1                 jz      loc_2750
.text:00000000000026C7
.text:00000000000026C7 loc_26C7:                               ; CODE XREF: append_quoted+1B4↓j
.text:00000000000026C7                 lea     rdx, [rax+1]
.text:00000000000026CB                 mov     cs:qword_20A118, rdx
.text:00000000000026D2                 mov     byte ptr [rax], 5Ch ; '\'
.text:00000000000026D5                 mov     rax, cs:qword_20A118
.text:00000000000026DC                 cmp     cs:qword_20A120, rax
.text:00000000000026E3                 jz      short loc_2738
.text:00000000000026E5
.text:00000000000026E5 loc_26E5:                               ; CODE XREF: append_quoted+19C↓j
.text:00000000000026E5                 lea     rdx, [rax+1]
.text:00000000000026E9                 mov     r12d, 1
.text:00000000000026EF                 mov     cs:qword_20A118, rdx
.text:00000000000026F6                 mov     byte ptr [rax], 27h ; '''
.text:00000000000026F9                 mov     rcx, cs:qword_20A120
.text:0000000000002700                 mov     rax, cs:qword_20A118
.text:0000000000002707                 jmp     loc_2620
.text:0000000000002707 ; ---------------------------------------------------------------------------
.text:000000000000270C                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: append_quoted+8F↑j
.text:0000000000002710                 pop     rbx
.text:0000000000002711                 pop     rbp
.text:0000000000002712                 pop     r12
.text:0000000000002714                 retn
.text:0000000000002714 ; ---------------------------------------------------------------------------
.text:0000000000002715                 align 8
.text:0000000000002718
.text:0000000000002718 loc_2718:                               ; CODE XREF: append_quoted+F3↑j
.text:0000000000002718                 mov     esi, 1
.text:000000000000271D                 mov     rdi, rbp
.text:0000000000002720                 call    _obstack_newchunk
.text:0000000000002725                 mov     rax, cs:qword_20A118
.text:000000000000272C                 jmp     loc_26A5
.text:000000000000272C ; ---------------------------------------------------------------------------
.text:0000000000002731                 align 8
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: append_quoted+133↑j
.text:0000000000002738                 mov     esi, 1
.text:000000000000273D                 mov     rdi, rbp
.text:0000000000002740                 call    _obstack_newchunk
.text:0000000000002745                 mov     rax, cs:qword_20A118
.text:000000000000274C                 jmp     short loc_26E5
.text:000000000000274C ; ---------------------------------------------------------------------------
.text:000000000000274E                 align 10h
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: append_quoted+111↑j
.text:0000000000002750                 mov     esi, 1
.text:0000000000002755                 mov     rdi, rbp
.text:0000000000002758                 call    _obstack_newchunk
.text:000000000000275D                 mov     rax, cs:qword_20A118
.text:0000000000002764                 jmp     loc_26C7
.text:0000000000002764 ; ---------------------------------------------------------------------------
.text:0000000000002769                 align 10h
.text:0000000000002770
.text:0000000000002770 locret_2770:                            ; CODE XREF: append_quoted+5↑j
.text:0000000000002770                 rep retn
.text:0000000000002770 ; ---------------------------------------------------------------------------
.text:0000000000002772                 align 8
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: append_quoted+46↑j
.text:0000000000002778                 mov     esi, 1
.text:000000000000277D                 mov     rdi, rbp
.text:0000000000002780                 call    _obstack_newchunk
.text:0000000000002785                 mov     rax, cs:qword_20A118
.text:000000000000278C                 jmp     loc_25FC
.text:000000000000278C ; } // starts at 25B0
.text:000000000000278C append_quoted   endp
.text:000000000000278C
.text:000000000000278C ; ---------------------------------------------------------------------------
.text:0000000000002791                 align 20h
.text:00000000000027A0
.text:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027A0
.text:00000000000027A0
.text:00000000000027A0 ; __int64 __fastcall dc_parse_stream(FILE *stream)
.text:00000000000027A0 dc_parse_stream proc near               ; CODE XREF: main+1E6↑p
.text:00000000000027A0                                         ; main+2D4↑p
.text:00000000000027A0
.text:00000000000027A0 var_78          = dword ptr -78h
.text:00000000000027A0 var_71          = byte ptr -71h
.text:00000000000027A0 var_70          = qword ptr -70h
.text:00000000000027A0 name            = qword ptr -68h
.text:00000000000027A0 ptr             = qword ptr -60h
.text:00000000000027A0 lineptr         = qword ptr -50h
.text:00000000000027A0 n               = qword ptr -48h
.text:00000000000027A0 var_40          = qword ptr -40h
.text:00000000000027A0
.text:00000000000027A0 ; __unwind {
.text:00000000000027A0                 push    r15
.text:00000000000027A2                 push    r14
.text:00000000000027A4                 mov     r14, rdi
.text:00000000000027A7                 push    r13
.text:00000000000027A9                 push    r12
.text:00000000000027AB                 lea     rdi, aTerm      ; "TERM"
.text:00000000000027B2                 push    rbp
.text:00000000000027B3                 push    rbx
.text:00000000000027B4                 sub     rsp, 48h
.text:00000000000027B8                 mov     rax, fs:28h
.text:00000000000027C1                 mov     [rsp+78h+var_40], rax
.text:00000000000027C6                 xor     eax, eax
.text:00000000000027C8                 mov     [rsp+78h+var_70], rsi
.text:00000000000027CD                 mov     [rsp+78h+lineptr], 0
.text:00000000000027D6                 mov     [rsp+78h+n], 0
.text:00000000000027DF                 call    _getenv
.text:00000000000027E4                 test    rax, rax
.text:00000000000027E7                 jz      loc_2BE8
.text:00000000000027ED                 cmp     byte ptr [rax], 0
.text:00000000000027F0                 mov     rdi, rax
.text:00000000000027F3                 lea     rax, aNone      ; "none"
.text:00000000000027FA                 cmovnz  rax, rdi
.text:00000000000027FE                 mov     [rsp+78h+name], rax
.text:0000000000002803
.text:0000000000002803 loc_2803:                               ; CODE XREF: dc_parse_stream+454↓j
.text:0000000000002803                 lea     r12, G_line     ; "# Configuration file for dircolors, a u"...
.text:000000000000280A                 mov     [rsp+78h+var_78], 3
.text:0000000000002811                 mov     [rsp+78h+var_71], 1
.text:0000000000002816                 xor     ebp, ebp
.text:0000000000002818                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: dc_parse_stream+CE↓j
.text:0000000000002820                                         ; dc_parse_stream+D3↓j ...
.text:0000000000002820                 add     rbp, 1
.text:0000000000002824                 test    r14, r14
.text:0000000000002827                 jz      loc_29CD
.text:000000000000282D
.text:000000000000282D loc_282D:                               ; CODE XREF: dc_parse_stream+227↓j
.text:000000000000282D                 lea     rsi, [rsp+78h+n] ; n
.text:0000000000002832                 lea     rdi, [rsp+78h+lineptr] ; lineptr
.text:0000000000002837                 mov     rcx, r14        ; stream
.text:000000000000283A                 mov     edx, 0Ah        ; delimiter
.text:000000000000283F                 call    ___getdelim
.text:0000000000002844                 test    rax, rax
.text:0000000000002847                 jle     loc_2B4E
.text:000000000000284D                 mov     r15, [rsp+78h+lineptr]
.text:0000000000002852
.text:0000000000002852 loc_2852:                               ; CODE XREF: dc_parse_stream+24D↓j
.text:0000000000002852                 call    ___ctype_b_loc
.text:0000000000002857                 mov     rcx, [rax]
.text:000000000000285A                 mov     r13, rax
.text:000000000000285D
.text:000000000000285D loc_285D:                               ; CODE XREF: dc_parse_stream+274↓j
.text:000000000000285D                 movzx   edx, byte ptr [r15]
.text:0000000000002861                 test    byte ptr [rcx+rdx*2+1], 20h
.text:0000000000002866                 jnz     loc_2A10
.text:000000000000286C                 test    dl, dl
.text:000000000000286E                 jz      short loc_2820
.text:0000000000002870                 cmp     dl, 23h ; '#'
.text:0000000000002873                 jz      short loc_2820
.text:0000000000002875                 mov     rbx, r15
.text:0000000000002878                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: dc_parse_stream+FC↓j
.text:0000000000002880                 add     rbx, 1
.text:0000000000002884                 movzx   eax, byte ptr [rbx]
.text:0000000000002887                 mov     rdx, rax
.text:000000000000288A                 movzx   eax, word ptr [rcx+rax*2]
.text:000000000000288E                 shr     ax, 0Dh
.text:0000000000002892                 xor     eax, 1
.text:0000000000002895                 test    dl, dl
.text:0000000000002897                 setnz   dl
.text:000000000000289A                 test    dl, al
.text:000000000000289C                 jnz     short loc_2880
.text:000000000000289E                 mov     rsi, rbx
.text:00000000000028A1                 mov     rdi, r15
.text:00000000000028A4                 sub     rsi, r15
.text:00000000000028A7                 call    xstrndup
.text:00000000000028AC                 cmp     byte ptr [rbx], 0
.text:00000000000028AF                 mov     r15, rax
.text:00000000000028B2                 jz      loc_2A20
.text:00000000000028B8                 mov     rcx, [r13+0]
.text:00000000000028BC                 nop     dword ptr [rax+00h]
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: dc_parse_stream+12F↓j
.text:00000000000028C0                 add     rbx, 1
.text:00000000000028C4                 movzx   edx, byte ptr [rbx]
.text:00000000000028C7                 test    byte ptr [rcx+rdx*2+1], 20h
.text:00000000000028CC                 mov     rax, rdx
.text:00000000000028CF                 jnz     short loc_28C0
.text:00000000000028D1                 test    dl, dl
.text:00000000000028D3                 jz      loc_2A20
.text:00000000000028D9                 cmp     al, 23h ; '#'
.text:00000000000028DB                 mov     rdx, rbx
.text:00000000000028DE                 jnz     short loc_28EB
.text:00000000000028E0                 jmp     loc_2A20
.text:00000000000028E0 ; ---------------------------------------------------------------------------
.text:00000000000028E5                 align 8
.text:00000000000028E8
.text:00000000000028E8 loc_28E8:                               ; CODE XREF: dc_parse_stream+161↓j
.text:00000000000028E8                 mov     rdx, rsi
.text:00000000000028EB
.text:00000000000028EB loc_28EB:                               ; CODE XREF: dc_parse_stream+13E↑j
.text:00000000000028EB                 movzx   eax, byte ptr [rdx+1]
.text:00000000000028EF                 lea     rsi, [rdx+1]
.text:00000000000028F3                 test    al, al
.text:00000000000028F5                 setnz   dil
.text:00000000000028F9                 cmp     al, 23h ; '#'
.text:00000000000028FB                 setnz   al
.text:00000000000028FE                 test    dil, al
.text:0000000000002901                 jnz     short loc_28E8
.text:0000000000002903                 movzx   eax, byte ptr [rsi-1]
.text:0000000000002907                 test    byte ptr [rcx+rax*2+1], 20h
.text:000000000000290C                 jnz     loc_29F8
.text:0000000000002912
.text:0000000000002912 loc_2912:                               ; CODE XREF: dc_parse_stream+26A↓j
.text:0000000000002912                 sub     rsi, rbx
.text:0000000000002915                 mov     rdi, rbx
.text:0000000000002918                 call    xstrndup
.text:000000000000291D                 test    r15, r15
.text:0000000000002920                 mov     rbx, rax
.text:0000000000002923                 jz      loc_2820
.text:0000000000002929                 test    rax, rax
.text:000000000000292C                 jz      loc_2A29
.text:0000000000002932                 lea     rsi, aTerm      ; "TERM"
.text:0000000000002939                 mov     rdi, r15
.text:000000000000293C                 call    c_strcasecmp
.text:0000000000002941                 test    eax, eax
.text:0000000000002943                 jz      loc_2A80
.text:0000000000002949                 mov     eax, [rsp+78h+var_78]
.text:000000000000294C                 cmp     eax, 2
.text:000000000000294F                 jz      loc_2AB0
.text:0000000000002955                 test    eax, eax
.text:0000000000002957                 jz      short loc_29B0
.text:0000000000002959                 movzx   eax, byte ptr [r15]
.text:000000000000295D                 cmp     al, 2Eh ; '.'
.text:000000000000295F                 jz      loc_2AC3
.text:0000000000002965
.text:0000000000002965 loc_2965:                               ; CODE XREF: dc_parse_stream+31D↓j
.text:0000000000002965                 cmp     al, 2Ah ; '*'
.text:0000000000002967                 jz      loc_2B80
.text:000000000000296D                 lea     rsi, aOptions   ; "OPTIONS"
.text:0000000000002974                 mov     rdi, r15
.text:0000000000002977                 call    c_strcasecmp
.text:000000000000297C                 test    eax, eax
.text:000000000000297E                 jz      short loc_29B0
.text:0000000000002980                 lea     rsi, aColor     ; "COLOR"
.text:0000000000002987                 mov     rdi, r15
.text:000000000000298A                 call    c_strcasecmp
.text:000000000000298F                 test    eax, eax
.text:0000000000002991                 jz      short loc_29B0
.text:0000000000002993                 lea     rsi, aEightbit  ; "EIGHTBIT"
.text:000000000000299A                 mov     rdi, r15
.text:000000000000299D                 call    c_strcasecmp
.text:00000000000029A2                 test    eax, eax
.text:00000000000029A4                 jnz     loc_2C33
.text:00000000000029AA                 nop     word ptr [rax+rax+00h]
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: dc_parse_stream+1B7↑j
.text:00000000000029B0                                         ; dc_parse_stream+1DE↑j ...
.text:00000000000029B0                 mov     rdi, r15        ; ptr
.text:00000000000029B3                 call    free
.text:00000000000029B8                 mov     rdi, rbx        ; ptr
.text:00000000000029BB                 call    free
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: dc_parse_stream+3A9↓j
.text:00000000000029C0                                         ; dc_parse_stream+5D5↓j
.text:00000000000029C0                 add     rbp, 1
.text:00000000000029C4                 test    r14, r14
.text:00000000000029C7                 jnz     loc_282D
.text:00000000000029CD
.text:00000000000029CD loc_29CD:                               ; CODE XREF: dc_parse_stream+87↑j
.text:00000000000029CD                 lea     rax, a831       ; "8.31"
.text:00000000000029D4                 cmp     r12, rax
.text:00000000000029D7                 jz      loc_2B58
.text:00000000000029DD                 mov     rdi, r12        ; s
.text:00000000000029E0                 mov     r15, r12
.text:00000000000029E3                 call    _strlen
.text:00000000000029E8                 lea     r12, [r12+rax+1]
.text:00000000000029ED                 jmp     loc_2852
.text:00000000000029ED ; ---------------------------------------------------------------------------
.text:00000000000029F2                 align 8
.text:00000000000029F8
.text:00000000000029F8 loc_29F8:                               ; CODE XREF: dc_parse_stream+16C↑j
.text:00000000000029F8                                         ; dc_parse_stream+264↓j
.text:00000000000029F8                 sub     rdx, 1
.text:00000000000029FC                 movzx   eax, byte ptr [rdx]
.text:00000000000029FF                 test    byte ptr [rcx+rax*2+1], 20h
.text:0000000000002A04                 jnz     short loc_29F8
.text:0000000000002A06                 lea     rsi, [rdx+1]
.text:0000000000002A0A                 jmp     loc_2912
.text:0000000000002A0A ; ---------------------------------------------------------------------------
.text:0000000000002A0F                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: dc_parse_stream+C6↑j
.text:0000000000002A10                 add     r15, 1
.text:0000000000002A14                 jmp     loc_285D
.text:0000000000002A14 ; ---------------------------------------------------------------------------
.text:0000000000002A19                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: dc_parse_stream+112↑j
.text:0000000000002A20                                         ; dc_parse_stream+133↑j ...
.text:0000000000002A20                 test    r15, r15
.text:0000000000002A23                 jz      loc_2820
.text:0000000000002A29
.text:0000000000002A29 loc_2A29:                               ; CODE XREF: dc_parse_stream+18C↑j
.text:0000000000002A29                 mov     rdx, [rsp+78h+var_70]
.text:0000000000002A2E                 mov     esi, 3
.text:0000000000002A33                 xor     edi, edi
.text:0000000000002A35                 call    quotearg_n_style_colon
.text:0000000000002A3A                 lea     rsi, aSLuInvalidLine ; "%s:%lu: invalid line;  missing second t"...
.text:0000000000002A41                 mov     rbx, rax
.text:0000000000002A44                 mov     edx, 5          ; category
.text:0000000000002A49                 xor     edi, edi        ; domainname
.text:0000000000002A4B                 call    _dcgettext
.text:0000000000002A50                 mov     r8, rbp
.text:0000000000002A53                 mov     rdx, rax        ; format
.text:0000000000002A56                 mov     rcx, rbx
.text:0000000000002A59                 xor     esi, esi        ; errnum
.text:0000000000002A5B                 xor     edi, edi        ; status
.text:0000000000002A5D                 xor     eax, eax
.text:0000000000002A5F                 call    _error
.text:0000000000002A64                 mov     rdi, r15        ; ptr
.text:0000000000002A67                 call    free
.text:0000000000002A6C                 mov     [rsp+78h+var_71], 0
.text:0000000000002A71                 jmp     loc_2820
.text:0000000000002A71 ; ---------------------------------------------------------------------------
.text:0000000000002A76                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: dc_parse_stream+1A3↑j
.text:0000000000002A80                 mov     rsi, [rsp+78h+name] ; name
.text:0000000000002A85                 xor     edx, edx        ; flags
.text:0000000000002A87                 mov     rdi, rbx        ; pattern
.text:0000000000002A8A                 call    _fnmatch
.text:0000000000002A8F                 test    eax, eax
.text:0000000000002A91                 jz      short loc_2AA4
.text:0000000000002A93                 cmp     [rsp+78h+var_78], 2
.text:0000000000002A97                 mov     [rsp+78h+var_78], 0
.text:0000000000002A9E                 jnz     loc_29B0
.text:0000000000002AA4
.text:0000000000002AA4 loc_2AA4:                               ; CODE XREF: dc_parse_stream+2F1↑j
.text:0000000000002AA4                 mov     [rsp+78h+var_78], 2
.text:0000000000002AAB                 jmp     loc_29B0
.text:0000000000002AB0 ; ---------------------------------------------------------------------------
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: dc_parse_stream+1AF↑j
.text:0000000000002AB0                 movzx   eax, byte ptr [r15]
.text:0000000000002AB4                 mov     [rsp+78h+var_78], 1
.text:0000000000002ABB                 cmp     al, 2Eh ; '.'
.text:0000000000002ABD                 jnz     loc_2965
.text:0000000000002AC3
.text:0000000000002AC3 loc_2AC3:                               ; CODE XREF: dc_parse_stream+1BF↑j
.text:0000000000002AC3                 mov     rax, cs:qword_20A118
.text:0000000000002ACA                 cmp     cs:qword_20A120, rax
.text:0000000000002AD1                 jz      loc_2C16
.text:0000000000002AD7
.text:0000000000002AD7 loc_2AD7:                               ; CODE XREF: dc_parse_stream+48E↓j
.text:0000000000002AD7                 lea     rdx, [rax+1]
.text:0000000000002ADB                 mov     rdi, r15
.text:0000000000002ADE                 mov     cs:qword_20A118, rdx
.text:0000000000002AE5                 mov     byte ptr [rax], 2Ah ; '*'
.text:0000000000002AE8                 call    append_quoted
.text:0000000000002AED                 mov     rax, cs:qword_20A118
.text:0000000000002AF4                 cmp     cs:qword_20A120, rax
.text:0000000000002AFB                 jz      loc_2BF9
.text:0000000000002B01
.text:0000000000002B01 loc_2B01:                               ; CODE XREF: dc_parse_stream+471↓j
.text:0000000000002B01                 lea     rdx, [rax+1]
.text:0000000000002B05                 mov     rdi, rbx
.text:0000000000002B08                 mov     cs:qword_20A118, rdx
.text:0000000000002B0F                 mov     byte ptr [rax], 3Dh ; '='
.text:0000000000002B12                 call    append_quoted
.text:0000000000002B17                 mov     rax, cs:qword_20A118
.text:0000000000002B1E                 cmp     cs:qword_20A120, rax
.text:0000000000002B25                 jz      loc_2BD5
.text:0000000000002B2B
.text:0000000000002B2B loc_2B2B:                               ; CODE XREF: dc_parse_stream+430↓j
.text:0000000000002B2B                 lea     rdx, [rax+1]
.text:0000000000002B2F                 mov     rdi, r15        ; ptr
.text:0000000000002B32                 mov     cs:qword_20A118, rdx
.text:0000000000002B39                 mov     byte ptr [rax], 3Ah ; ':'
.text:0000000000002B3C                 call    free
.text:0000000000002B41                 mov     rdi, rbx        ; ptr
.text:0000000000002B44                 call    free
.text:0000000000002B49                 jmp     loc_29C0
.text:0000000000002B4E ; ---------------------------------------------------------------------------
.text:0000000000002B4E
.text:0000000000002B4E loc_2B4E:                               ; CODE XREF: dc_parse_stream+A7↑j
.text:0000000000002B4E                 mov     rdi, [rsp+78h+lineptr] ; ptr
.text:0000000000002B53                 call    free
.text:0000000000002B58
.text:0000000000002B58 loc_2B58:                               ; CODE XREF: dc_parse_stream+237↑j
.text:0000000000002B58                 mov     rdi, [rsp+78h+var_40]
.text:0000000000002B5D                 xor     rdi, fs:28h
.text:0000000000002B66                 movzx   eax, [rsp+78h+var_71]
.text:0000000000002B6B                 jnz     loc_2DBE
.text:0000000000002B71                 add     rsp, 48h
.text:0000000000002B75                 pop     rbx
.text:0000000000002B76                 pop     rbp
.text:0000000000002B77                 pop     r12
.text:0000000000002B79                 pop     r13
.text:0000000000002B7B                 pop     r14
.text:0000000000002B7D                 pop     r15
.text:0000000000002B7F                 retn
.text:0000000000002B80 ; ---------------------------------------------------------------------------
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: dc_parse_stream+1C7↑j
.text:0000000000002B80                 mov     rdi, r15
.text:0000000000002B83                 call    append_quoted
.text:0000000000002B88                 mov     rax, cs:qword_20A118
.text:0000000000002B8F                 cmp     cs:qword_20A120, rax
.text:0000000000002B96                 jz      loc_2CF8
.text:0000000000002B9C
.text:0000000000002B9C loc_2B9C:                               ; CODE XREF: dc_parse_stream+552↓j
.text:0000000000002B9C                                         ; dc_parse_stream+569↓j
.text:0000000000002B9C                 mov     rax, cs:qword_20A118
.text:0000000000002BA3                 mov     rdi, rbx
.text:0000000000002BA6                 lea     rdx, [rax+1]
.text:0000000000002BAA                 mov     cs:qword_20A118, rdx
.text:0000000000002BB1                 mov     byte ptr [rax], 3Dh ; '='
.text:0000000000002BB4                 call    append_quoted
.text:0000000000002BB9                 mov     rax, cs:qword_20A118
.text:0000000000002BC0                 cmp     cs:qword_20A120, rax
.text:0000000000002BC7                 jz      short loc_2BD5
.text:0000000000002BC9
.text:0000000000002BC9 loc_2BC9:                               ; CODE XREF: dc_parse_stream+446↓j
.text:0000000000002BC9                 mov     rax, cs:qword_20A118
.text:0000000000002BD0                 jmp     loc_2B2B
.text:0000000000002BD5 ; ---------------------------------------------------------------------------
.text:0000000000002BD5
.text:0000000000002BD5 loc_2BD5:                               ; CODE XREF: dc_parse_stream+385↑j
.text:0000000000002BD5                                         ; dc_parse_stream+427↑j
.text:0000000000002BD5                 lea     rdi, lsc_obstack
.text:0000000000002BDC                 mov     esi, 1
.text:0000000000002BE1                 call    _obstack_newchunk
.text:0000000000002BE6                 jmp     short loc_2BC9
.text:0000000000002BE8 ; ---------------------------------------------------------------------------
.text:0000000000002BE8
.text:0000000000002BE8 loc_2BE8:                               ; CODE XREF: dc_parse_stream+47↑j
.text:0000000000002BE8                 lea     rax, aNone      ; "none"
.text:0000000000002BEF                 mov     [rsp+78h+name], rax
.text:0000000000002BF4                 jmp     loc_2803
.text:0000000000002BF9 ; ---------------------------------------------------------------------------
.text:0000000000002BF9
.text:0000000000002BF9 loc_2BF9:                               ; CODE XREF: dc_parse_stream+35B↑j
.text:0000000000002BF9                 lea     rdi, lsc_obstack
.text:0000000000002C00                 mov     esi, 1
.text:0000000000002C05                 call    _obstack_newchunk
.text:0000000000002C0A                 mov     rax, cs:qword_20A118
.text:0000000000002C11                 jmp     loc_2B01
.text:0000000000002C16 ; ---------------------------------------------------------------------------
.text:0000000000002C16
.text:0000000000002C16 loc_2C16:                               ; CODE XREF: dc_parse_stream+331↑j
.text:0000000000002C16                 lea     rdi, lsc_obstack
.text:0000000000002C1D                 mov     esi, 1
.text:0000000000002C22                 call    _obstack_newchunk
.text:0000000000002C27                 mov     rax, cs:qword_20A118
.text:0000000000002C2E                 jmp     loc_2AD7
.text:0000000000002C33 ; ---------------------------------------------------------------------------
.text:0000000000002C33
.text:0000000000002C33 loc_2C33:                               ; CODE XREF: dc_parse_stream+204↑j
.text:0000000000002C33                 xor     r13d, r13d
.text:0000000000002C36                 mov     [rsp+78h+ptr], rbx
.text:0000000000002C3B                 lea     rsi, aNormal    ; "NORMAL"
.text:0000000000002C42                 mov     rbx, r13
.text:0000000000002C45                 jmp     short loc_2C68
.text:0000000000002C45 ; ---------------------------------------------------------------------------
.text:0000000000002C47                 align 10h
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: dc_parse_stream+4D5↓j
.text:0000000000002C50                 lea     rax, slack_codes
.text:0000000000002C57                 add     rbx, 1
.text:0000000000002C5B                 mov     rsi, [rax+rbx*8]
.text:0000000000002C5F                 test    rsi, rsi
.text:0000000000002C62                 jz      loc_2D0E
.text:0000000000002C68
.text:0000000000002C68 loc_2C68:                               ; CODE XREF: dc_parse_stream+4A5↑j
.text:0000000000002C68                 mov     rdi, r15
.text:0000000000002C6B                 mov     r13d, ebx
.text:0000000000002C6E                 call    c_strcasecmp
.text:0000000000002C73                 test    eax, eax
.text:0000000000002C75                 jnz     short loc_2C50
.text:0000000000002C77                 mov     rax, cs:qword_20A118
.text:0000000000002C7E                 cmp     cs:qword_20A120, rax
.text:0000000000002C85                 mov     rbx, [rsp+78h+ptr]
.text:0000000000002C8A                 jz      loc_2D92
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: dc_parse_stream+603↓j
.text:0000000000002C90                 lea     rax, ls_codes
.text:0000000000002C97                 movsxd  r13, r13d
.text:0000000000002C9A                 mov     r13, [rax+r13*8]
.text:0000000000002C9E                 mov     rax, cs:qword_20A118
.text:0000000000002CA5                 lea     rdx, [rax+1]
.text:0000000000002CA9                 mov     cs:qword_20A118, rdx
.text:0000000000002CB0                 movzx   edx, byte ptr [r13+0]
.text:0000000000002CB5                 mov     [rax], dl
.text:0000000000002CB7                 mov     rax, cs:qword_20A118
.text:0000000000002CBE                 cmp     cs:qword_20A120, rax
.text:0000000000002CC5                 jz      loc_2DA8
.text:0000000000002CCB
.text:0000000000002CCB loc_2CCB:                               ; CODE XREF: dc_parse_stream+619↓j
.text:0000000000002CCB                 mov     rax, cs:qword_20A118
.text:0000000000002CD2                 lea     rdx, [rax+1]
.text:0000000000002CD6                 mov     cs:qword_20A118, rdx
.text:0000000000002CDD                 movzx   edx, byte ptr [r13+1]
.text:0000000000002CE2                 mov     [rax], dl
.text:0000000000002CE4                 mov     rax, cs:qword_20A118
.text:0000000000002CEB                 cmp     cs:qword_20A120, rax
.text:0000000000002CF2                 jnz     loc_2B9C
.text:0000000000002CF8
.text:0000000000002CF8 loc_2CF8:                               ; CODE XREF: dc_parse_stream+3F6↑j
.text:0000000000002CF8                 lea     rdi, lsc_obstack
.text:0000000000002CFF                 mov     esi, 1
.text:0000000000002D04                 call    _obstack_newchunk
.text:0000000000002D09                 jmp     loc_2B9C
.text:0000000000002D0E ; ---------------------------------------------------------------------------
.text:0000000000002D0E
.text:0000000000002D0E loc_2D0E:                               ; CODE XREF: dc_parse_stream+4C2↑j
.text:0000000000002D0E                 cmp     [rsp+78h+var_78], 3
.text:0000000000002D12                 mov     rbx, [rsp+78h+ptr]
.text:0000000000002D17                 jz      loc_29B0
.text:0000000000002D1D                 mov     rdx, [rsp+78h+var_70]
.text:0000000000002D22                 test    rdx, rdx
.text:0000000000002D25                 jz      short loc_2D7A
.text:0000000000002D27                 mov     esi, 3
.text:0000000000002D2C                 xor     edi, edi
.text:0000000000002D2E                 call    quotearg_n_style_colon
.text:0000000000002D33                 mov     r13, rax
.text:0000000000002D36
.text:0000000000002D36 loc_2D36:                               ; CODE XREF: dc_parse_stream+5F0↓j
.text:0000000000002D36                 lea     rsi, aSLuUnrecognize ; "%s:%lu: unrecognized keyword %s"
.text:0000000000002D3D                 xor     edi, edi        ; domainname
.text:0000000000002D3F                 mov     edx, 5          ; category
.text:0000000000002D44                 call    _dcgettext
.text:0000000000002D49                 mov     r9, r15
.text:0000000000002D4C                 mov     rdx, rax        ; format
.text:0000000000002D4F                 mov     r8, rbp
.text:0000000000002D52                 mov     rcx, r13
.text:0000000000002D55                 xor     esi, esi        ; errnum
.text:0000000000002D57                 xor     edi, edi        ; status
.text:0000000000002D59                 xor     eax, eax
.text:0000000000002D5B                 call    _error
.text:0000000000002D60                 mov     rdi, r15        ; ptr
.text:0000000000002D63                 mov     [rsp+78h+var_71], 0
.text:0000000000002D68                 call    free
.text:0000000000002D6D                 mov     rdi, rbx        ; ptr
.text:0000000000002D70                 call    free
.text:0000000000002D75                 jmp     loc_29C0
.text:0000000000002D7A ; ---------------------------------------------------------------------------
.text:0000000000002D7A
.text:0000000000002D7A loc_2D7A:                               ; CODE XREF: dc_parse_stream+585↑j
.text:0000000000002D7A                 lea     rsi, aInternal  ; "<internal>"
.text:0000000000002D81                 mov     edx, 5          ; category
.text:0000000000002D86                 xor     edi, edi        ; domainname
.text:0000000000002D88                 call    _dcgettext
.text:0000000000002D8D                 mov     r13, rax
.text:0000000000002D90                 jmp     short loc_2D36
.text:0000000000002D92 ; ---------------------------------------------------------------------------
.text:0000000000002D92
.text:0000000000002D92 loc_2D92:                               ; CODE XREF: dc_parse_stream+4EA↑j
.text:0000000000002D92                 lea     rdi, lsc_obstack
.text:0000000000002D99                 mov     esi, 1
.text:0000000000002D9E                 call    _obstack_newchunk
.text:0000000000002DA3                 jmp     loc_2C90
.text:0000000000002DA8 ; ---------------------------------------------------------------------------
.text:0000000000002DA8
.text:0000000000002DA8 loc_2DA8:                               ; CODE XREF: dc_parse_stream+525↑j
.text:0000000000002DA8                 lea     rdi, lsc_obstack
.text:0000000000002DAF                 mov     esi, 1
.text:0000000000002DB4                 call    _obstack_newchunk
.text:0000000000002DB9                 jmp     loc_2CCB
.text:0000000000002DBE ; ---------------------------------------------------------------------------
.text:0000000000002DBE
.text:0000000000002DBE loc_2DBE:                               ; CODE XREF: dc_parse_stream+3CB↑j
.text:0000000000002DBE                 call    ___stack_chk_fail
.text:0000000000002DBE ; } // starts at 27A0
.text:0000000000002DBE dc_parse_stream endp
.text:0000000000002DBE
.text:0000000000002DBE ; ---------------------------------------------------------------------------
.text:0000000000002DC3                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DD0
.text:0000000000002DD0 ; Attributes: noreturn
.text:0000000000002DD0
.text:0000000000002DD0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002DD0                 public usage
.text:0000000000002DD0 usage           proc near               ; CODE XREF: main+38A↑p
.text:0000000000002DD0                                         ; main+3CD↑p
.text:0000000000002DD0
.text:0000000000002DD0 var_A8          = qword ptr -0A8h
.text:0000000000002DD0 var_A0          = qword ptr -0A0h
.text:0000000000002DD0 var_98          = qword ptr -98h
.text:0000000000002DD0 var_90          = qword ptr -90h
.text:0000000000002DD0 var_88          = qword ptr -88h
.text:0000000000002DD0 var_80          = qword ptr -80h
.text:0000000000002DD0 var_78          = qword ptr -78h
.text:0000000000002DD0 var_70          = qword ptr -70h
.text:0000000000002DD0 var_68          = qword ptr -68h
.text:0000000000002DD0 var_60          = qword ptr -60h
.text:0000000000002DD0 var_58          = qword ptr -58h
.text:0000000000002DD0 var_50          = qword ptr -50h
.text:0000000000002DD0 var_48          = qword ptr -48h
.text:0000000000002DD0 var_40          = qword ptr -40h
.text:0000000000002DD0 var_30          = qword ptr -30h
.text:0000000000002DD0
.text:0000000000002DD0 ; __unwind {
.text:0000000000002DD0                 push    r13
.text:0000000000002DD2                 push    r12
.text:0000000000002DD4                 mov     edx, 5          ; category
.text:0000000000002DD9                 push    rbp
.text:0000000000002DDA                 push    rbx
.text:0000000000002DDB                 mov     ebp, edi
.text:0000000000002DDD                 sub     rsp, 88h
.text:0000000000002DE4                 mov     rbx, cs:program_name
.text:0000000000002DEB                 mov     rax, fs:28h
.text:0000000000002DF4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002DF9                 xor     eax, eax
.text:0000000000002DFB                 test    edi, edi
.text:0000000000002DFD                 jz      short loc_2E2D
.text:0000000000002DFF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002E06                 xor     edi, edi        ; domainname
.text:0000000000002E08                 call    _dcgettext
.text:0000000000002E0D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002E14                 mov     rdx, rax
.text:0000000000002E17                 mov     rcx, rbx
.text:0000000000002E1A                 mov     esi, 1
.text:0000000000002E1F                 xor     eax, eax
.text:0000000000002E21                 call    ___fprintf_chk
.text:0000000000002E26
.text:0000000000002E26 loc_2E26:                               ; CODE XREF: usage+2A6↓j
.text:0000000000002E26                 mov     edi, ebp        ; status
.text:0000000000002E28                 call    _exit
.text:0000000000002E2D ; ---------------------------------------------------------------------------
.text:0000000000002E2D
.text:0000000000002E2D loc_2E2D:                               ; CODE XREF: usage+2D↑j
.text:0000000000002E2D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:0000000000002E34                 xor     edi, edi        ; domainname
.text:0000000000002E36                 call    _dcgettext
.text:0000000000002E3B                 mov     rdx, rbx
.text:0000000000002E3E                 mov     rsi, rax
.text:0000000000002E41                 mov     edi, 1
.text:0000000000002E46                 xor     eax, eax
.text:0000000000002E48                 call    ___printf_chk
.text:0000000000002E4D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E54                 lea     rsi, aOutputCommands ; "Output commands to set the LS_COLORS en"...
.text:0000000000002E5B                 mov     edx, 5          ; category
.text:0000000000002E60                 xor     edi, edi        ; domainname
.text:0000000000002E62                 call    _dcgettext
.text:0000000000002E67                 mov     rsi, rbx        ; stream
.text:0000000000002E6A                 mov     rdi, rax        ; s
.text:0000000000002E6D                 call    _fputs_unlocked
.text:0000000000002E72                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E79                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002E80                 mov     edx, 5          ; category
.text:0000000000002E85                 xor     edi, edi        ; domainname
.text:0000000000002E87                 call    _dcgettext
.text:0000000000002E8C                 mov     rsi, rbx        ; stream
.text:0000000000002E8F                 mov     rdi, rax        ; s
.text:0000000000002E92                 call    _fputs_unlocked
.text:0000000000002E97                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E9E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002EA5                 mov     edx, 5          ; category
.text:0000000000002EAA                 xor     edi, edi        ; domainname
.text:0000000000002EAC                 call    _dcgettext
.text:0000000000002EB1                 mov     rsi, rbx        ; stream
.text:0000000000002EB4                 mov     rdi, rax        ; s
.text:0000000000002EB7                 call    _fputs_unlocked
.text:0000000000002EBC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002EC3                 lea     rsi, aIfFileIsSpecif ; "\nIf FILE is specified, read it to dete"...
.text:0000000000002ECA                 mov     edx, 5          ; category
.text:0000000000002ECF                 xor     edi, edi        ; domainname
.text:0000000000002ED1                 call    _dcgettext
.text:0000000000002ED6                 mov     rsi, rbx        ; stream
.text:0000000000002ED9                 mov     rdi, rax        ; s
.text:0000000000002EDC                 lea     rbx, aDircolors ; "dircolors"
.text:0000000000002EE3                 call    _fputs_unlocked
.text:0000000000002EE8                 lea     rax, asc_61FF   ; "["
.text:0000000000002EEF                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002EF6                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002EFF                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002F08                 mov     rdx, rsp
.text:0000000000002F0B                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002F0F                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002F16                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002F1B                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002F22                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002F27                 lea     rax, domainname ; "coreutils"
.text:0000000000002F2E                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002F33                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002F3A                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002F3F                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002F46                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002F4B                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002F50                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002F57                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002F5C                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002F63                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002F68                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002F6D                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002F72                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002F77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: usage+1CD↓j
.text:0000000000002F80                 add     rdx, 10h
.text:0000000000002F84                 mov     rdi, [rdx]
.text:0000000000002F87                 test    rdi, rdi
.text:0000000000002F8A                 jz      short loc_2F9F
.text:0000000000002F8C                 mov     ecx, 0Ah
.text:0000000000002F91                 mov     rsi, rbx
.text:0000000000002F94                 repe cmpsb
.text:0000000000002F96                 setnbe  al
.text:0000000000002F99                 sbb     al, 0
.text:0000000000002F9B                 test    al, al
.text:0000000000002F9D                 jnz     short loc_2F80
.text:0000000000002F9F
.text:0000000000002F9F loc_2F9F:                               ; CODE XREF: usage+1BA↑j
.text:0000000000002F9F                 mov     r12, [rdx+8]
.text:0000000000002FA3                 xor     edi, edi        ; domainname
.text:0000000000002FA5                 mov     edx, 5          ; category
.text:0000000000002FAA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002FB1                 test    r12, r12
.text:0000000000002FB4                 jz      loc_307B
.text:0000000000002FBA                 call    _dcgettext
.text:0000000000002FBF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002FC6                 lea     rdx, unk_6275
.text:0000000000002FCD                 mov     rsi, rax
.text:0000000000002FD0                 mov     edi, 1
.text:0000000000002FD5                 xor     eax, eax
.text:0000000000002FD7                 call    ___printf_chk
.text:0000000000002FDC                 xor     esi, esi        ; locale
.text:0000000000002FDE                 mov     edi, 5          ; category
.text:0000000000002FE3                 call    _setlocale
.text:0000000000002FE8                 test    rax, rax
.text:0000000000002FEB                 jz      short loc_3009
.text:0000000000002FED                 lea     rsi, aEn        ; "en_"
.text:0000000000002FF4                 mov     edx, 3          ; n
.text:0000000000002FF9                 mov     rdi, rax        ; s1
.text:0000000000002FFC                 call    _strncmp
.text:0000000000003001                 test    eax, eax
.text:0000000000003003                 jnz     loc_3110
.text:0000000000003009
.text:0000000000003009 loc_3009:                               ; CODE XREF: usage+21B↑j
.text:0000000000003009                                         ; usage+365↓j
.text:0000000000003009                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003010                 xor     edi, edi        ; domainname
.text:0000000000003012                 mov     edx, 5          ; category
.text:0000000000003017                 call    _dcgettext
.text:000000000000301C                 lea     rcx, aDircolors ; "dircolors"
.text:0000000000003023                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000302A                 mov     rsi, rax
.text:000000000000302D                 mov     edi, 1
.text:0000000000003032                 xor     eax, eax
.text:0000000000003034                 call    ___printf_chk
.text:0000000000003039                 cmp     r12, rbx
.text:000000000000303C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003043                 lea     rbx, asc_62C3+2 ; ""
.text:000000000000304A                 cmovz   rbx, rcx
.text:000000000000304E
.text:000000000000304E loc_304E:                               ; CODE XREF: usage+334↓j
.text:000000000000304E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003055                 xor     edi, edi        ; domainname
.text:0000000000003057                 mov     edx, 5          ; category
.text:000000000000305C                 call    _dcgettext
.text:0000000000003061                 mov     rcx, rbx
.text:0000000000003064                 mov     rsi, rax
.text:0000000000003067                 mov     rdx, r12
.text:000000000000306A                 mov     edi, 1
.text:000000000000306F                 xor     eax, eax
.text:0000000000003071                 call    ___printf_chk
.text:0000000000003076                 jmp     loc_2E26
.text:000000000000307B ; ---------------------------------------------------------------------------
.text:000000000000307B
.text:000000000000307B loc_307B:                               ; CODE XREF: usage+1E4↑j
.text:000000000000307B                 call    _dcgettext
.text:0000000000003080                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003087                 lea     rdx, unk_6275
.text:000000000000308E                 mov     rsi, rax
.text:0000000000003091                 mov     edi, 1
.text:0000000000003096                 xor     eax, eax
.text:0000000000003098                 call    ___printf_chk
.text:000000000000309D                 xor     esi, esi        ; locale
.text:000000000000309F                 mov     edi, 5          ; category
.text:00000000000030A4                 call    _setlocale
.text:00000000000030A9                 test    rax, rax
.text:00000000000030AC                 jz      short loc_30C6
.text:00000000000030AE                 lea     rsi, aEn        ; "en_"
.text:00000000000030B5                 mov     edx, 3          ; n
.text:00000000000030BA                 mov     rdi, rax        ; s1
.text:00000000000030BD                 call    _strncmp
.text:00000000000030C2                 test    eax, eax
.text:00000000000030C4                 jnz     short loc_3109
.text:00000000000030C6
.text:00000000000030C6 loc_30C6:                               ; CODE XREF: usage+2DC↑j
.text:00000000000030C6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000030CD                 mov     edx, 5          ; category
.text:00000000000030D2                 xor     edi, edi        ; domainname
.text:00000000000030D4                 lea     r12, aDircolors ; "dircolors"
.text:00000000000030DB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000030E2                 call    _dcgettext
.text:00000000000030E7                 lea     rcx, aDircolors ; "dircolors"
.text:00000000000030EE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000030F5                 mov     rsi, rax
.text:00000000000030F8                 mov     edi, 1
.text:00000000000030FD                 xor     eax, eax
.text:00000000000030FF                 call    ___printf_chk
.text:0000000000003104                 jmp     loc_304E
.text:0000000000003109 ; ---------------------------------------------------------------------------
.text:0000000000003109
.text:0000000000003109 loc_3109:                               ; CODE XREF: usage+2F4↑j
.text:0000000000003109                 lea     r12, aDircolors ; "dircolors"
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: usage+233↑j
.text:0000000000003110                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003117                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000311E                 xor     edi, edi        ; domainname
.text:0000000000003120                 mov     edx, 5          ; category
.text:0000000000003125                 call    _dcgettext
.text:000000000000312A                 mov     rsi, r13        ; stream
.text:000000000000312D                 mov     rdi, rax        ; s
.text:0000000000003130                 call    _fputs_unlocked
.text:0000000000003135                 jmp     loc_3009
.text:0000000000003135 ; } // starts at 2DD0
.text:0000000000003135 usage           endp
.text:0000000000003135
.text:0000000000003135 ; ---------------------------------------------------------------------------
.text:000000000000313A                 align 20h
.text:0000000000003140
.text:0000000000003140 ; =============== S U B R O U T I N E =======================================
.text:0000000000003140
.text:0000000000003140
.text:0000000000003140                 public c_strcasecmp
.text:0000000000003140 c_strcasecmp    proc near               ; CODE XREF: dc_parse_stream+19C↑p
.text:0000000000003140                                         ; dc_parse_stream+1D7↑p ...
.text:0000000000003140 ; __unwind {
.text:0000000000003140                 xor     eax, eax
.text:0000000000003142                 cmp     rdi, rsi
.text:0000000000003145                 jnz     short loc_315C
.text:0000000000003147                 jmp     short locret_318C
.text:0000000000003147 ; ---------------------------------------------------------------------------
.text:0000000000003149                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: c_strcasecmp+42↓j
.text:0000000000003150                 add     rdi, 1
.text:0000000000003154                 add     rsi, 1
.text:0000000000003158                 cmp     al, dl
.text:000000000000315A                 jnz     short loc_3184
.text:000000000000315C
.text:000000000000315C loc_315C:                               ; CODE XREF: c_strcasecmp+5↑j
.text:000000000000315C                 movzx   eax, byte ptr [rdi]
.text:000000000000315F                 mov     edx, eax
.text:0000000000003161                 lea     ecx, [rax+20h]
.text:0000000000003164                 sub     edx, 41h ; 'A'
.text:0000000000003167                 cmp     dl, 1Ah
.text:000000000000316A                 movzx   edx, byte ptr [rsi]
.text:000000000000316D                 cmovb   eax, ecx
.text:0000000000003170                 mov     ecx, edx
.text:0000000000003172                 lea     r9d, [rdx+20h]
.text:0000000000003176                 sub     ecx, 41h ; 'A'
.text:0000000000003179                 cmp     cl, 1Ah
.text:000000000000317C                 cmovb   edx, r9d
.text:0000000000003180                 test    al, al
.text:0000000000003182                 jnz     short loc_3150
.text:0000000000003184
.text:0000000000003184 loc_3184:                               ; CODE XREF: c_strcasecmp+1A↑j
.text:0000000000003184                 movzx   eax, al
.text:0000000000003187                 movzx   edx, dl
.text:000000000000318A                 sub     eax, edx
.text:000000000000318C
.text:000000000000318C locret_318C:                            ; CODE XREF: c_strcasecmp+7↑j
.text:000000000000318C                 rep retn
.text:000000000000318C ; } // starts at 3140
.text:000000000000318C c_strcasecmp    endp
.text:000000000000318C
.text:000000000000318C ; ---------------------------------------------------------------------------
.text:000000000000318E                 align 10h
.text:0000000000003190
.text:0000000000003190 ; =============== S U B R O U T I N E =======================================
.text:0000000000003190
.text:0000000000003190
.text:0000000000003190                 public close_stdout_set_file_name
.text:0000000000003190 close_stdout_set_file_name proc near
.text:0000000000003190 ; __unwind {
.text:0000000000003190                 mov     cs:file_name, rdi
.text:0000000000003197                 retn
.text:0000000000003197 ; } // starts at 3190
.text:0000000000003197 close_stdout_set_file_name endp
.text:0000000000003197
.text:0000000000003197 ; ---------------------------------------------------------------------------
.text:0000000000003198                 align 20h
.text:00000000000031A0
.text:00000000000031A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031A0
.text:00000000000031A0
.text:00000000000031A0                 public close_stdout_set_ignore_EPIPE
.text:00000000000031A0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000031A0 ; __unwind {
.text:00000000000031A0                 mov     cs:ignore_EPIPE, dil
.text:00000000000031A7                 retn
.text:00000000000031A7 ; } // starts at 31A0
.text:00000000000031A7 close_stdout_set_ignore_EPIPE endp
.text:00000000000031A7
.text:00000000000031A7 ; ---------------------------------------------------------------------------
.text:00000000000031A8                 align 10h
.text:00000000000031B0
.text:00000000000031B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031B0
.text:00000000000031B0 ; Attributes: info_from_lumina
.text:00000000000031B0
.text:00000000000031B0 ; void __cdecl close_stdout()
.text:00000000000031B0                 public close_stdout
.text:00000000000031B0 close_stdout    proc near               ; DATA XREF: main+4E↑o
.text:00000000000031B0 ; __unwind {
.text:00000000000031B0                 push    rbp
.text:00000000000031B1                 push    rbx
.text:00000000000031B2                 sub     rsp, 8
.text:00000000000031B6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000031BD                 call    close_stream
.text:00000000000031C2                 test    eax, eax
.text:00000000000031C4                 jz      short loc_31DC
.text:00000000000031C6                 call    ___errno_location
.text:00000000000031CB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000031D2                 mov     rbx, rax
.text:00000000000031D5                 jz      short loc_31F3
.text:00000000000031D7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000031DA                 jnz     short loc_31F3
.text:00000000000031DC
.text:00000000000031DC loc_31DC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000031DC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000031E3                 call    close_stream
.text:00000000000031E8                 test    eax, eax
.text:00000000000031EA                 jnz     short loc_3232
.text:00000000000031EC                 add     rsp, 8
.text:00000000000031F0                 pop     rbx
.text:00000000000031F1                 pop     rbp
.text:00000000000031F2                 retn
.text:00000000000031F3 ; ---------------------------------------------------------------------------
.text:00000000000031F3
.text:00000000000031F3 loc_31F3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000031F3                                         ; close_stdout+2A↑j
.text:00000000000031F3                 lea     rsi, aWriteError ; "write error"
.text:00000000000031FA                 xor     edi, edi        ; domainname
.text:00000000000031FC                 mov     edx, 5          ; category
.text:0000000000003201                 call    _dcgettext
.text:0000000000003206                 mov     rdi, cs:file_name
.text:000000000000320D                 mov     rbp, rax
.text:0000000000003210                 test    rdi, rdi
.text:0000000000003213                 jz      short loc_323D
.text:0000000000003215                 call    quotearg_colon
.text:000000000000321A                 mov     esi, [rbx]      ; errnum
.text:000000000000321C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003223                 mov     rcx, rax
.text:0000000000003226                 mov     r8, rbp
.text:0000000000003229                 xor     edi, edi        ; status
.text:000000000000322B                 xor     eax, eax
.text:000000000000322D                 call    _error
.text:0000000000003232
.text:0000000000003232 loc_3232:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003232                                         ; close_stdout+A2↓j
.text:0000000000003232                 mov     edi, cs:exit_failure ; status
.text:0000000000003238                 call    __exit
.text:000000000000323D ; ---------------------------------------------------------------------------
.text:000000000000323D
.text:000000000000323D loc_323D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000323D                 mov     esi, [rbx]      ; errnum
.text:000000000000323F                 lea     rdx, format+4   ; format
.text:0000000000003246                 mov     rcx, rax
.text:0000000000003249                 xor     edi, edi        ; status
.text:000000000000324B                 xor     eax, eax
.text:000000000000324D                 call    _error
.text:0000000000003252                 jmp     short loc_3232
.text:0000000000003252 ; } // starts at 31B0
.text:0000000000003252 close_stdout    endp
.text:0000000000003252
.text:0000000000003252 ; ---------------------------------------------------------------------------
.text:0000000000003254                 align 20h
.text:0000000000003260
.text:0000000000003260 ; =============== S U B R O U T I N E =======================================
.text:0000000000003260
.text:0000000000003260 ; Attributes: info_from_lumina
.text:0000000000003260
.text:0000000000003260 ; char *__fastcall last_component(const char *name)
.text:0000000000003260                 public last_component
.text:0000000000003260 last_component  proc near               ; CODE XREF: main+308↑p
.text:0000000000003260 ; __unwind {
.text:0000000000003260                 movzx   edx, byte ptr [rdi]
.text:0000000000003263                 mov     rax, rdi
.text:0000000000003266                 cmp     dl, 2Fh ; '/'
.text:0000000000003269                 jnz     short loc_327C
.text:000000000000326B                 nop     dword ptr [rax+rax+00h]
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: last_component+1A↓j
.text:0000000000003270                 add     rax, 1
.text:0000000000003274                 movzx   edx, byte ptr [rax]
.text:0000000000003277                 cmp     dl, 2Fh ; '/'
.text:000000000000327A                 jz      short loc_3270
.text:000000000000327C
.text:000000000000327C loc_327C:                               ; CODE XREF: last_component+9↑j
.text:000000000000327C                 test    dl, dl
.text:000000000000327E                 jz      short locret_32BA
.text:0000000000003280                 mov     rcx, rax
.text:0000000000003283                 xor     esi, esi
.text:0000000000003285                 jmp     short loc_32A5
.text:0000000000003285 ; ---------------------------------------------------------------------------
.text:0000000000003287                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: last_component+48↓j
.text:0000000000003290                 test    sil, sil
.text:0000000000003293                 jz      short loc_329A
.text:0000000000003295                 mov     rax, rcx
.text:0000000000003298                 xor     esi, esi
.text:000000000000329A
.text:000000000000329A loc_329A:                               ; CODE XREF: last_component+33↑j
.text:000000000000329A                 add     rcx, 1
.text:000000000000329E                 movzx   edx, byte ptr [rcx]
.text:00000000000032A1                 test    dl, dl
.text:00000000000032A3                 jz      short locret_32BA
.text:00000000000032A5
.text:00000000000032A5 loc_32A5:                               ; CODE XREF: last_component+25↑j
.text:00000000000032A5                                         ; last_component+58↓j
.text:00000000000032A5                 cmp     dl, 2Fh ; '/'
.text:00000000000032A8                 jnz     short loc_3290
.text:00000000000032AA                 add     rcx, 1
.text:00000000000032AE                 movzx   edx, byte ptr [rcx]
.text:00000000000032B1                 mov     esi, 1
.text:00000000000032B6                 test    dl, dl
.text:00000000000032B8                 jnz     short loc_32A5
.text:00000000000032BA
.text:00000000000032BA locret_32BA:                            ; CODE XREF: last_component+1E↑j
.text:00000000000032BA                                         ; last_component+43↑j
.text:00000000000032BA                 rep retn
.text:00000000000032BA ; } // starts at 3260
.text:00000000000032BA last_component  endp
.text:00000000000032BA
.text:00000000000032BA ; ---------------------------------------------------------------------------
.text:00000000000032BC                 align 20h
.text:00000000000032C0
.text:00000000000032C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032C0
.text:00000000000032C0 ; Attributes: info_from_lumina
.text:00000000000032C0
.text:00000000000032C0 ; size_t __fastcall base_len(const char *name)
.text:00000000000032C0                 public base_len
.text:00000000000032C0 base_len        proc near
.text:00000000000032C0 ; __unwind {
.text:00000000000032C0                 push    rbx
.text:00000000000032C1                 mov     rbx, rdi
.text:00000000000032C4                 call    _strlen
.text:00000000000032C9                 cmp     rax, 1
.text:00000000000032CD                 jbe     short loc_32DA
.text:00000000000032CF                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:00000000000032D4                 lea     rdx, [rax-1]
.text:00000000000032D8                 jz      short loc_32E8
.text:00000000000032DA
.text:00000000000032DA loc_32DA:                               ; CODE XREF: base_len+D↑j
.text:00000000000032DA                 pop     rbx
.text:00000000000032DB                 retn
.text:00000000000032DB ; ---------------------------------------------------------------------------
.text:00000000000032DC                 align 20h
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: base_len+37↓j
.text:00000000000032E0                 mov     rdx, rax
.text:00000000000032E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000032E8
.text:00000000000032E8 loc_32E8:                               ; CODE XREF: base_len+18↑j
.text:00000000000032E8                 cmp     rdx, 1
.text:00000000000032EC                 jz      short loc_3300
.text:00000000000032EE                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:00000000000032F3                 lea     rax, [rdx-1]
.text:00000000000032F7                 jz      short loc_32E0
.text:00000000000032F9                 mov     rax, rdx
.text:00000000000032FC                 pop     rbx
.text:00000000000032FD                 retn
.text:00000000000032FD ; ---------------------------------------------------------------------------
.text:00000000000032FE                 align 20h
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: base_len+2C↑j
.text:0000000000003300                 mov     eax, 1
.text:0000000000003305                 pop     rbx
.text:0000000000003306                 retn
.text:0000000000003306 ; } // starts at 32C0
.text:0000000000003306 base_len        endp
.text:0000000000003306
.text:0000000000003306 ; ---------------------------------------------------------------------------
.text:0000000000003307                 align 10h
.text:0000000000003310
.text:0000000000003310 ; =============== S U B R O U T I N E =======================================
.text:0000000000003310
.text:0000000000003310
.text:0000000000003310 protect_fd      proc near               ; CODE XREF: freopen_safer+83↓p
.text:0000000000003310                                         ; freopen_safer+A1↓p ...
.text:0000000000003310 ; __unwind {
.text:0000000000003310                 push    rbp
.text:0000000000003311                 push    rbx
.text:0000000000003312                 mov     ebp, edi
.text:0000000000003314                 lea     rdi, file       ; "/dev/null"
.text:000000000000331B                 xor     esi, esi        ; oflag
.text:000000000000331D                 xor     eax, eax
.text:000000000000331F                 sub     rsp, 8
.text:0000000000003323                 mov     ebx, 1
.text:0000000000003328                 call    _open
.text:000000000000332D                 cmp     ebp, eax
.text:000000000000332F                 jz      short loc_3349
.text:0000000000003331                 xor     ebx, ebx
.text:0000000000003333                 test    eax, eax
.text:0000000000003335                 js      short loc_3349
.text:0000000000003337                 mov     edi, eax        ; fd
.text:0000000000003339                 call    _close
.text:000000000000333E                 call    ___errno_location
.text:0000000000003343                 mov     dword ptr [rax], 9
.text:0000000000003349
.text:0000000000003349 loc_3349:                               ; CODE XREF: protect_fd+1F↑j
.text:0000000000003349                                         ; protect_fd+25↑j
.text:0000000000003349                 add     rsp, 8
.text:000000000000334D                 mov     eax, ebx
.text:000000000000334F                 pop     rbx
.text:0000000000003350                 pop     rbp
.text:0000000000003351                 retn
.text:0000000000003351 ; } // starts at 3310
.text:0000000000003351 protect_fd      endp
.text:0000000000003351
.text:0000000000003351 ; ---------------------------------------------------------------------------
.text:0000000000003352                 align 20h
.text:0000000000003360
.text:0000000000003360 ; =============== S U B R O U T I N E =======================================
.text:0000000000003360
.text:0000000000003360
.text:0000000000003360                 public freopen_safer
.text:0000000000003360 freopen_safer   proc near               ; CODE XREF: main+1CE↑p
.text:0000000000003360
.text:0000000000003360 filename        = qword ptr -40h
.text:0000000000003360
.text:0000000000003360 ; __unwind {
.text:0000000000003360                 push    r15
.text:0000000000003362                 push    r14
.text:0000000000003364                 mov     r15, rsi
.text:0000000000003367                 push    r13
.text:0000000000003369                 push    r12
.text:000000000000336B                 mov     r12, rdx
.text:000000000000336E                 push    rbp
.text:000000000000336F                 push    rbx
.text:0000000000003370                 sub     rsp, 18h
.text:0000000000003374                 mov     [rsp+48h+filename], rdi
.text:0000000000003379                 mov     rdi, rdx        ; stream
.text:000000000000337C                 call    _fileno
.text:0000000000003381                 mov     ebx, eax
.text:0000000000003383                 call    ___errno_location
.text:0000000000003388                 cmp     ebx, 1
.text:000000000000338B                 mov     r14, rax
.text:000000000000338E                 jz      loc_34F0
.text:0000000000003394                 cmp     ebx, 2
.text:0000000000003397                 jz      loc_34E0
.text:000000000000339D                 test    ebx, ebx
.text:000000000000339F                 jz      loc_3458
.text:00000000000033A5                 mov     esi, 2          ; fd2
.text:00000000000033AA                 mov     edi, 2          ; fd
.text:00000000000033AF                 call    _dup2
.text:00000000000033B4                 cmp     eax, 2
.text:00000000000033B7                 setnz   bl
.text:00000000000033BA
.text:00000000000033BA loc_33BA:                               ; CODE XREF: freopen_safer+182↓j
.text:00000000000033BA                 mov     esi, 1          ; fd2
.text:00000000000033BF                 mov     edi, 1          ; fd
.text:00000000000033C4                 call    _dup2
.text:00000000000033C9                 cmp     eax, 1
.text:00000000000033CC                 setnz   bpl
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: freopen_safer+194↓j
.text:00000000000033D0                 xor     esi, esi        ; fd2
.text:00000000000033D2                 xor     edi, edi        ; fd
.text:00000000000033D4                 call    _dup2
.text:00000000000033D9                 test    eax, eax
.text:00000000000033DB                 jz      loc_3468
.text:00000000000033E1                 xor     edi, edi
.text:00000000000033E3                 call    protect_fd
.text:00000000000033E8                 test    al, al
.text:00000000000033EA                 mov     r13d, eax
.text:00000000000033ED                 jz      loc_3500
.text:00000000000033F3                 test    bpl, bpl
.text:00000000000033F6                 jnz     short loc_3470
.text:00000000000033F8
.text:00000000000033F8 loc_33F8:                               ; CODE XREF: freopen_safer+10E↓j
.text:00000000000033F8                                         ; freopen_safer+11E↓j
.text:00000000000033F8                 test    bl, bl
.text:00000000000033FA                 jz      short loc_3410
.text:00000000000033FC                 mov     edi, 2
.text:0000000000003401                 call    protect_fd
.text:0000000000003406                 test    al, al
.text:0000000000003408                 mov     ebx, eax
.text:000000000000340A                 jz      loc_34C0
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: freopen_safer+9A↑j
.text:0000000000003410                                         ; freopen_safer+FF↓j
.text:0000000000003410                 mov     rdi, [rsp+48h+filename] ; filename
.text:0000000000003415                 mov     rdx, r12        ; stream
.text:0000000000003418                 mov     rsi, r15        ; modes
.text:000000000000341B                 call    _freopen
.text:0000000000003420                 mov     r12, rax
.text:0000000000003423
.text:0000000000003423 loc_3423:                               ; CODE XREF: freopen_safer+1A9↓j
.text:0000000000003423                 test    bl, bl
.text:0000000000003425                 mov     r15d, [r14]
.text:0000000000003428                 jnz     loc_34D0
.text:000000000000342E
.text:000000000000342E loc_342E:                               ; CODE XREF: freopen_safer+17A↓j
.text:000000000000342E                 test    bpl, bpl
.text:0000000000003431                 jnz     short loc_34A0
.text:0000000000003433                 test    r13b, r13b
.text:0000000000003436                 jnz     short loc_34AF
.text:0000000000003438
.text:0000000000003438 loc_3438:                               ; CODE XREF: freopen_safer+14D↓j
.text:0000000000003438                                         ; freopen_safer+156↓j
.text:0000000000003438                 test    r12, r12
.text:000000000000343B                 jnz     short loc_3440
.text:000000000000343D                 mov     [r14], r15d
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: freopen_safer+DB↑j
.text:0000000000003440                 add     rsp, 18h
.text:0000000000003444                 mov     rax, r12
.text:0000000000003447                 pop     rbx
.text:0000000000003448                 pop     rbp
.text:0000000000003449                 pop     r12
.text:000000000000344B                 pop     r13
.text:000000000000344D                 pop     r14
.text:000000000000344F                 pop     r15
.text:0000000000003451                 retn
.text:0000000000003451 ; ---------------------------------------------------------------------------
.text:0000000000003452                 align 8
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: freopen_safer+3F↑j
.text:0000000000003458                 xor     ebx, ebx
.text:000000000000345A                 xor     ebp, ebp
.text:000000000000345C                 xor     r13d, r13d
.text:000000000000345F                 jmp     short loc_3410
.text:000000000000345F ; ---------------------------------------------------------------------------
.text:0000000000003461                 align 8
.text:0000000000003468
.text:0000000000003468 loc_3468:                               ; CODE XREF: freopen_safer+7B↑j
.text:0000000000003468                 xor     r13d, r13d
.text:000000000000346B                 test    bpl, bpl
.text:000000000000346E                 jz      short loc_33F8
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: freopen_safer+96↑j
.text:0000000000003470                 mov     edi, 1
.text:0000000000003475                 call    protect_fd
.text:000000000000347A                 test    al, al
.text:000000000000347C                 mov     ebp, eax
.text:000000000000347E                 jnz     loc_33F8
.text:0000000000003484                 xor     r12d, r12d
.text:0000000000003487                 test    bl, bl
.text:0000000000003489                 mov     r15d, [r14]
.text:000000000000348C                 jz      short loc_34A0
.text:000000000000348E                 mov     edi, 2          ; fd
.text:0000000000003493                 call    _close
.text:0000000000003498                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034A0
.text:00000000000034A0 loc_34A0:                               ; CODE XREF: freopen_safer+D1↑j
.text:00000000000034A0                                         ; freopen_safer+12C↑j
.text:00000000000034A0                 mov     edi, 1          ; fd
.text:00000000000034A5                 call    _close
.text:00000000000034AA                 test    r13b, r13b
.text:00000000000034AD                 jz      short loc_3438
.text:00000000000034AF
.text:00000000000034AF loc_34AF:                               ; CODE XREF: freopen_safer+D6↑j
.text:00000000000034AF                 xor     edi, edi        ; fd
.text:00000000000034B1                 call    _close
.text:00000000000034B6                 jmp     short loc_3438
.text:00000000000034B6 ; ---------------------------------------------------------------------------
.text:00000000000034B8                 align 20h
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: freopen_safer+AA↑j
.text:00000000000034C0                 mov     r15d, [r14]
.text:00000000000034C3                 xor     r12d, r12d
.text:00000000000034C6                 db      2Eh
.text:00000000000034C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: freopen_safer+C8↑j
.text:00000000000034D0                 mov     edi, 2          ; fd
.text:00000000000034D5                 call    _close
.text:00000000000034DA                 jmp     loc_342E
.text:00000000000034DA ; ---------------------------------------------------------------------------
.text:00000000000034DF                 align 20h
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: freopen_safer+37↑j
.text:00000000000034E0                 xor     ebx, ebx
.text:00000000000034E2                 jmp     loc_33BA
.text:00000000000034E2 ; ---------------------------------------------------------------------------
.text:00000000000034E7                 align 10h
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: freopen_safer+2E↑j
.text:00000000000034F0                 xor     ebx, ebx
.text:00000000000034F2                 xor     ebp, ebp
.text:00000000000034F4                 jmp     loc_33D0
.text:00000000000034F4 ; ---------------------------------------------------------------------------
.text:00000000000034F9                 align 20h
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: freopen_safer+8D↑j
.text:0000000000003500                 mov     r13d, 1
.text:0000000000003506                 xor     r12d, r12d
.text:0000000000003509                 jmp     loc_3423
.text:0000000000003509 ; } // starts at 3360
.text:0000000000003509 freopen_safer   endp
.text:0000000000003509
.text:0000000000003509 ; ---------------------------------------------------------------------------
.text:000000000000350E                 align 10h
.text:0000000000003510
.text:0000000000003510 ; =============== S U B R O U T I N E =======================================
.text:0000000000003510
.text:0000000000003510
.text:0000000000003510                 public set_program_name
.text:0000000000003510 set_program_name proc near              ; CODE XREF: main+19↑p
.text:0000000000003510 ; __unwind {
.text:0000000000003510                 test    rdi, rdi
.text:0000000000003513                 push    rbx
.text:0000000000003514                 jz      short loc_358D
.text:0000000000003516                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000351B                 mov     rbx, rdi
.text:000000000000351E                 call    _strrchr
.text:0000000000003523                 test    rax, rax
.text:0000000000003526                 jz      short loc_357D
.text:0000000000003528                 lea     r8, [rax+1]
.text:000000000000352C                 mov     rdx, r8
.text:000000000000352F                 sub     rdx, rbx
.text:0000000000003532                 cmp     rdx, 6
.text:0000000000003536                 jle     short loc_357D
.text:0000000000003538                 lea     rsi, [rax-6]
.text:000000000000353C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003543                 mov     ecx, 7
.text:0000000000003548                 repe cmpsb
.text:000000000000354A                 setnbe  dl
.text:000000000000354D                 sbb     dl, 0
.text:0000000000003550                 test    dl, dl
.text:0000000000003552                 jnz     short loc_357D
.text:0000000000003554                 lea     rdi, aLt        ; "lt-"
.text:000000000000355B                 mov     ecx, 3
.text:0000000000003560                 mov     rsi, r8
.text:0000000000003563                 mov     rbx, r8
.text:0000000000003566                 repe cmpsb
.text:0000000000003568                 setnbe  dl
.text:000000000000356B                 sbb     dl, 0
.text:000000000000356E                 test    dl, dl
.text:0000000000003570                 jnz     short loc_357D
.text:0000000000003572                 lea     rbx, [rax+4]
.text:0000000000003576                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000357D
.text:000000000000357D loc_357D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000357D                                         ; set_program_name+26↑j ...
.text:000000000000357D                 mov     cs:program_name, rbx
.text:0000000000003584                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000358B                 pop     rbx
.text:000000000000358C                 retn
.text:000000000000358D ; ---------------------------------------------------------------------------
.text:000000000000358D
.text:000000000000358D loc_358D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000358D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003594                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000359B                 mov     edx, 37h ; '7'  ; n
.text:00000000000035A0                 mov     esi, 1          ; size
.text:00000000000035A5                 call    _fwrite
.text:00000000000035AA                 call    _abort
.text:00000000000035AA ; } // starts at 3510
.text:00000000000035AA set_program_name endp
.text:00000000000035AA
.text:00000000000035AA ; ---------------------------------------------------------------------------
.text:00000000000035AF                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0 ; Attributes: info_from_lumina
.text:00000000000035B0
.text:00000000000035B0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000035B0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000035B0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 push    rbp
.text:00000000000035B1                 push    rbx
.text:00000000000035B2                 mov     rbp, rdi
.text:00000000000035B5                 mov     ebx, esi
.text:00000000000035B7                 sub     rsp, 8
.text:00000000000035BB                 call    locale_charset
.text:00000000000035C0                 movzx   edx, byte ptr [rax]
.text:00000000000035C3                 and     edx, 0FFFFFFDFh
.text:00000000000035C6                 cmp     dl, 55h ; 'U'
.text:00000000000035C9                 jz      short loc_3640
.text:00000000000035CB                 cmp     dl, 47h ; 'G'
.text:00000000000035CE                 jz      short loc_35F0
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000035D0                                         ; gettext_quote+50↓j ...
.text:00000000000035D0                 lea     rax, unk_7A1B
.text:00000000000035D7                 lea     rdx, aSetenvLsColors+11h ; "'"
.text:00000000000035DE                 cmp     ebx, 9
.text:00000000000035E1                 cmovnz  rax, rdx
.text:00000000000035E5                 add     rsp, 8
.text:00000000000035E9                 pop     rbx
.text:00000000000035EA                 pop     rbp
.text:00000000000035EB                 retn
.text:00000000000035EB ; ---------------------------------------------------------------------------
.text:00000000000035EC                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000035F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000035F4                 and     edx, 0FFFFFFDFh
.text:00000000000035F7                 cmp     dl, 42h ; 'B'
.text:00000000000035FA                 jnz     short loc_35D0
.text:00000000000035FC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003600                 jnz     short loc_35D0
.text:0000000000003602                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003606                 jnz     short loc_35D0
.text:0000000000003608                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000360C                 jnz     short loc_35D0
.text:000000000000360E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003612                 jnz     short loc_35D0
.text:0000000000003614                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003618                 jnz     short loc_35D0
.text:000000000000361A                 cmp     byte ptr [rax+7], 0
.text:000000000000361E                 jnz     short loc_35D0
.text:0000000000003620                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003624                 lea     rax, unk_7A14
.text:000000000000362B                 lea     rdx, unk_7A18
.text:0000000000003632                 cmovnz  rax, rdx
.text:0000000000003636                 add     rsp, 8
.text:000000000000363A                 pop     rbx
.text:000000000000363B                 pop     rbp
.text:000000000000363C                 retn
.text:000000000000363C ; ---------------------------------------------------------------------------
.text:000000000000363D                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003640                 movzx   edx, byte ptr [rax+1]
.text:0000000000003644                 and     edx, 0FFFFFFDFh
.text:0000000000003647                 cmp     dl, 54h ; 'T'
.text:000000000000364A                 jnz     short loc_35D0
.text:000000000000364C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003650                 and     edx, 0FFFFFFDFh
.text:0000000000003653                 cmp     dl, 46h ; 'F'
.text:0000000000003656                 jnz     loc_35D0
.text:000000000000365C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003660                 jnz     loc_35D0
.text:0000000000003666                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000366A                 jnz     loc_35D0
.text:0000000000003670                 cmp     byte ptr [rax+5], 0
.text:0000000000003674                 jnz     loc_35D0
.text:000000000000367A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000367E                 lea     rax, unk_7A0C
.text:0000000000003685                 lea     rdx, unk_7A10
.text:000000000000368C                 cmovnz  rax, rdx
.text:0000000000003690                 add     rsp, 8
.text:0000000000003694                 pop     rbx
.text:0000000000003695                 pop     rbp
.text:0000000000003696                 retn
.text:0000000000003696 ; } // starts at 35B0
.text:0000000000003696 gettext_quote   endp
.text:0000000000003696
.text:0000000000003696 ; ---------------------------------------------------------------------------
.text:0000000000003697                 align 20h
.text:00000000000036A0
.text:00000000000036A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036A0
.text:00000000000036A0 ; Attributes: info_from_lumina
.text:00000000000036A0
.text:00000000000036A0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000036A0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000036A0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000036A0
.text:00000000000036A0 var_E0          = dword ptr -0E0h
.text:00000000000036A0 var_DB          = byte ptr -0DBh
.text:00000000000036A0 var_DA          = byte ptr -0DAh
.text:00000000000036A0 var_D9          = byte ptr -0D9h
.text:00000000000036A0 s               = qword ptr -0D8h
.text:00000000000036A0 n               = qword ptr -0D0h
.text:00000000000036A0 var_C8          = qword ptr -0C8h
.text:00000000000036A0 ps              = qword ptr -0C0h
.text:00000000000036A0 var_B8          = qword ptr -0B8h
.text:00000000000036A0 var_B0          = qword ptr -0B0h
.text:00000000000036A0 var_A8          = qword ptr -0A8h
.text:00000000000036A0 s2              = qword ptr -0A0h
.text:00000000000036A0 var_98          = qword ptr -98h
.text:00000000000036A0 var_90          = qword ptr -90h
.text:00000000000036A0 var_88          = qword ptr -88h
.text:00000000000036A0 var_80          = qword ptr -80h
.text:00000000000036A0 var_78          = qword ptr -78h
.text:00000000000036A0 var_70          = dword ptr -70h
.text:00000000000036A0 var_6C          = byte ptr -6Ch
.text:00000000000036A0 var_6B          = byte ptr -6Bh
.text:00000000000036A0 var_6A          = byte ptr -6Ah
.text:00000000000036A0 var_69          = byte ptr -69h
.text:00000000000036A0 var_68          = qword ptr -68h
.text:00000000000036A0 var_60          = qword ptr -60h
.text:00000000000036A0 wc              = dword ptr -4Ch
.text:00000000000036A0 var_48          = qword ptr -48h
.text:00000000000036A0 var_40          = qword ptr -40h
.text:00000000000036A0 arg_0           = qword ptr  8
.text:00000000000036A0 arg_8           = qword ptr  10h
.text:00000000000036A0 arg_10          = qword ptr  18h
.text:00000000000036A0
.text:00000000000036A0 ; __unwind {
.text:00000000000036A0                 push    r15
.text:00000000000036A2                 push    r14
.text:00000000000036A4                 mov     r15d, r8d
.text:00000000000036A7                 push    r13
.text:00000000000036A9                 push    r12
.text:00000000000036AB                 mov     r14, rdi
.text:00000000000036AE                 push    rbp
.text:00000000000036AF                 push    rbx
.text:00000000000036B0                 mov     ebx, r9d
.text:00000000000036B3                 mov     r13, rsi
.text:00000000000036B6                 mov     rbp, rcx
.text:00000000000036B9                 and     ebx, 2
.text:00000000000036BC                 sub     rsp, 0B8h
.text:00000000000036C3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000036CB                 mov     [rsp+0E8h+s], rdx
.text:00000000000036D0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000036D5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000036DA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000036DF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000036E7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000036EC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000036F4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000036F9                 mov     rax, fs:28h
.text:0000000000003702                 mov     [rsp+0E8h+var_40], rax
.text:000000000000370A                 xor     eax, eax
.text:000000000000370C                 call    ___ctype_get_mb_cur_max
.text:0000000000003711                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003715                 mov     [rsp+0E8h+var_90], rax
.text:000000000000371A                 ja      def_3731        ; jumptable 00000000000121F1 default case
.text:0000000000003720                 lea     rcx, jpt_3731
.text:0000000000003727                 mov     edx, r15d
.text:000000000000372A                 movsxd  rax, ds:(jpt_3731 - 7A80h)[rcx+rdx*4]
.text:000000000000372E                 add     rax, rcx
.text:0000000000003731                 jmp     rax             ; switch jump
.text:0000000000003733 ; ---------------------------------------------------------------------------
.text:0000000000003733
.text:0000000000003733 loc_3733:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003733                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003733                                         ; DATA XREF: ...
.text:0000000000003733                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003738                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000373D                 xor     r12d, r12d
.text:0000000000003740                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003749                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000374E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003753
.text:0000000000003753 loc_3753:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003753                 lea     rax, aSetenvLsColors+11h ; "'"
.text:000000000000375A                 mov     [rsp+0E8h+n], 1
.text:0000000000003763                 xor     r15d, r15d
.text:0000000000003766                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000376E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003773
.text:0000000000003773 loc_3773:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003773                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003773                 xor     r11d, r11d
.text:0000000000003776                 mov     rax, rbp
.text:0000000000003779                 mov     r8d, r12d
.text:000000000000377C                 mov     rbp, r11
.text:000000000000377F                 mov     r11, rax
.text:0000000000003782                 nop     word ptr [rax+rax+00h]
.text:0000000000003788
.text:0000000000003788 loc_3788:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003788                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003788                 cmp     r11, rbp
.text:000000000000378B                 setnz   r12b
.text:000000000000378F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003793                 jnz     short loc_37A2
.text:0000000000003795                 mov     rax, [rsp+0E8h+s]
.text:000000000000379A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000379E                 setnz   r12b
.text:00000000000037A2
.text:00000000000037A2 loc_37A2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000037A2                 test    r12b, r12b
.text:00000000000037A5                 jz      loc_3E00
.text:00000000000037AB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000037B0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000037B5                 lea     r9, [rdi+rbp]
.text:00000000000037B9                 setnz   al
.text:00000000000037BC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000037C0                 mov     r10d, eax
.text:00000000000037C3                 jz      loc_3870
.text:00000000000037C9                 mov     rax, [rsp+0E8h+n]
.text:00000000000037CE                 test    rax, rax
.text:00000000000037D1                 jz      loc_3C00
.text:00000000000037D7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000037DB                 lea     rbx, [rbp+rax+0]
.text:00000000000037E0                 jnz     short loc_3810
.text:00000000000037E2                 cmp     rax, 1
.text:00000000000037E6                 jbe     short loc_3810
.text:00000000000037E8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000037ED                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000037F2                 mov     [rsp+0E8h+ps], r9
.text:00000000000037F7                 call    _strlen
.text:00000000000037FC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003802                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003808                 mov     r11, rax
.text:000000000000380B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003810                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003810                 cmp     rbx, r11
.text:0000000000003813                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003818                 ja      loc_3DD0
.text:000000000000381E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003823                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003828                 mov     rdi, r9         ; s1
.text:000000000000382B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003830                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003835                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000383A                 call    _memcmp
.text:000000000000383F                 test    eax, eax
.text:0000000000003841                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003846                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000384C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003851                 jnz     loc_3DD0
.text:0000000000003857                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000385C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003862                 jnz     loc_47E5
.text:0000000000003868                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003870                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003870                 movzx   ebx, byte ptr [r9]
.text:0000000000003874                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003877                 ja      def_388E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000387D                 lea     rcx, jpt_388E
.text:0000000000003884                 movzx   edx, bl
.text:0000000000003887                 movsxd  rax, ds:(jpt_388E - 7AACh)[rcx+rdx*4]
.text:000000000000388B                 add     rax, rcx
.text:000000000000388E                 jmp     rax             ; switch jump
.text:0000000000003890 ; ---------------------------------------------------------------------------
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003890                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003890                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003893
.text:0000000000003893 loc_3893:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003893                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003893                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003897                 setnz   al
.text:000000000000389A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000389E                 jnz     short loc_38AC
.text:00000000000038A0                 mov     rax, [rsp+0E8h+s]
.text:00000000000038A5                 cmp     byte ptr [rax+1], 0
.text:00000000000038A9                 setnz   al
.text:00000000000038AC
.text:00000000000038AC loc_38AC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000038AC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038B1                 setz    dl
.text:00000000000038B4                 test    al, al
.text:00000000000038B6                 jz      loc_3B08
.text:00000000000038BC
.text:00000000000038BC loc_38BC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000038BC                 xor     r12d, r12d
.text:00000000000038BF                 xor     eax, eax
.text:00000000000038C1                 nop     dword ptr [rax+00000000h]
.text:00000000000038C8
.text:00000000000038C8 loc_38C8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000038C8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000038C8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000038CD                 jnz     loc_39E2
.text:00000000000038D3                 test    dl, dl
.text:00000000000038D5                 jnz     loc_39E2
.text:00000000000038DB
.text:00000000000038DB loc_38DB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000038DB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000038E0                 test    rsi, rsi
.text:00000000000038E3                 jz      short loc_38F9
.text:00000000000038E5                 mov     edx, ebx
.text:00000000000038E7                 shr     dl, 5
.text:00000000000038EA                 movzx   edx, dl
.text:00000000000038ED                 mov     edx, [rsi+rdx*4]
.text:00000000000038F0                 bt      edx, ebx
.text:00000000000038F3                 jb      loc_3A43
.text:00000000000038F9
.text:00000000000038F9 loc_38F9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000038F9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000038F9                 test    r10b, r10b
.text:00000000000038FC                 jnz     loc_3A43
.text:0000000000003902                 xor     eax, 1
.text:0000000000003905                 add     rbp, 1
.text:0000000000003909                 and     eax, r8d
.text:000000000000390C
.text:000000000000390C loc_390C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000390C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000390C                 test    al, al
.text:000000000000390E                 jz      short loc_3930
.text:0000000000003910                 cmp     r13, r15
.text:0000000000003913                 jbe     short loc_391A
.text:0000000000003915                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000391A
.text:000000000000391A loc_391A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000391A                 lea     rax, [r15+1]
.text:000000000000391E                 cmp     r13, rax
.text:0000000000003921                 jbe     short loc_3929
.text:0000000000003923                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003929
.text:0000000000003929 loc_3929:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003929                 add     r15, 2
.text:000000000000392D                 xor     r8d, r8d
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003930                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003930                 cmp     r15, r13
.text:0000000000003933                 jnb     short loc_3939
.text:0000000000003935                 mov     [r14+r15], bl
.text:0000000000003939
.text:0000000000003939 loc_3939:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003939                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000393E                 add     r15, 1
.text:0000000000003942                 mov     eax, 0
.text:0000000000003947                 test    r12b, r12b
.text:000000000000394A                 cmovz   edi, eax
.text:000000000000394D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003952                 jmp     loc_3788
.text:0000000000003952 ; ---------------------------------------------------------------------------
.text:0000000000003957                 align 20h
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003960                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003960                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003963
.text:0000000000003963 loc_3963:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003963                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003963                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003967                 cmp     eax, 2
.text:000000000000396A                 jz      loc_3F28
.text:0000000000003970                 cmp     eax, 5
.text:0000000000003973                 jz      loc_3EE8
.text:0000000000003979                 cmp     eax, 2
.text:000000000000397C                 mov     ebx, 3Fh ; '?'
.text:0000000000003981                 setz    dl
.text:0000000000003984                 xor     r12d, r12d
.text:0000000000003987                 xor     eax, eax
.text:0000000000003989                 jmp     loc_38C8
.text:0000000000003989 ; ---------------------------------------------------------------------------
.text:000000000000398E                 align 10h
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003990                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003990                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003993
.text:0000000000003993 loc_3993:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003993                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003993                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003998                 jz      loc_3EA0
.text:000000000000399E                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000039A3                 xor     edx, edx
.text:00000000000039A5                 xor     eax, eax
.text:00000000000039A7                 mov     ebx, 27h ; '''
.text:00000000000039AC                 jmp     loc_38C8
.text:00000000000039AC ; ---------------------------------------------------------------------------
.text:00000000000039B1                 align 8
.text:00000000000039B8
.text:00000000000039B8 loc_39B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039B8                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:00000000000039B8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000039BD                 mov     ebx, 74h ; 't'
.text:00000000000039C2
.text:00000000000039C2 loc_39C2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000039C2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000039C2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039C7                 setz    al
.text:00000000000039CA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000039CE                 jnz     loc_3B1E
.text:00000000000039D4
.text:00000000000039D4 loc_39D4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000039D4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000039D4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000039D9                 jnz     short loc_3A40
.text:00000000000039DB
.text:00000000000039DB loc_39DB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000039DB                 mov     ebx, edx
.text:00000000000039DD                 xor     r12d, r12d
.text:00000000000039E0                 xor     eax, eax
.text:00000000000039E2
.text:00000000000039E2 loc_39E2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000039E2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000039E2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000039E7                 jnz     loc_38DB
.text:00000000000039ED                 jmp     loc_38F9
.text:00000000000039ED ; ---------------------------------------------------------------------------
.text:00000000000039F2                 align 8
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039F8                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:00000000000039F8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000039FD                 mov     ebx, 62h ; 'b'
.text:0000000000003A02                 jmp     short loc_39D4
.text:0000000000003A02 ; ---------------------------------------------------------------------------
.text:0000000000003A04                 align 8
.text:0000000000003A08
.text:0000000000003A08 loc_3A08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A08                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003A08                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003A0D                 jz      loc_3DE0
.text:0000000000003A13                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A18                 jz      loc_3C30
.text:0000000000003A1E
.text:0000000000003A1E loc_3A1E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003A1E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A23                 jz      loc_3C30
.text:0000000000003A29                 cmp     [rsp+0E8h+n], 0
.text:0000000000003A2F                 jnz     loc_3DEB
.text:0000000000003A35                 mov     ebx, 5Ch ; '\'
.text:0000000000003A3A                 nop     word ptr [rax+rax+00h]
.text:0000000000003A40
.text:0000000000003A40 loc_3A40:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003A40                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003A40                 xor     r12d, r12d
.text:0000000000003A43
.text:0000000000003A43 loc_3A43:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003A43                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003A43                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A48                 setz    dl
.text:0000000000003A4B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A50                 mov     eax, edx
.text:0000000000003A52                 jnz     loc_42A8
.text:0000000000003A58                 mov     eax, r8d
.text:0000000000003A5B                 xor     eax, 1
.text:0000000000003A5E                 and     al, dl
.text:0000000000003A60                 jz      short loc_3A91
.text:0000000000003A62                 cmp     r13, r15
.text:0000000000003A65                 jbe     short loc_3A6C
.text:0000000000003A67                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003A6C
.text:0000000000003A6C loc_3A6C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003A6C                 lea     rdx, [r15+1]
.text:0000000000003A70                 cmp     r13, rdx
.text:0000000000003A73                 jbe     short loc_3A7B
.text:0000000000003A75                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003A7B
.text:0000000000003A7B loc_3A7B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003A7B                 lea     rdx, [r15+2]
.text:0000000000003A7F                 cmp     r13, rdx
.text:0000000000003A82                 jbe     short loc_3A8A
.text:0000000000003A84                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003A8A
.text:0000000000003A8A loc_3A8A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003A8A                 add     r15, 3
.text:0000000000003A8E                 mov     r8d, eax
.text:0000000000003A91
.text:0000000000003A91 loc_3A91:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003A91                 cmp     r13, r15
.text:0000000000003A94                 jbe     short loc_3A9B
.text:0000000000003A96                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003A9B
.text:0000000000003A9B loc_3A9B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003A9B                 add     r15, 1
.text:0000000000003A9F                 add     rbp, 1
.text:0000000000003AA3                 jmp     loc_3930
.text:0000000000003AA3 ; ---------------------------------------------------------------------------
.text:0000000000003AA8                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003AB0                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003AB0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003AB5                 jnz     loc_3C83
.text:0000000000003ABB                 xor     edx, edx
.text:0000000000003ABD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003AC2                 jz      loc_39DB
.text:0000000000003AC8                 add     rbp, 1
.text:0000000000003ACC                 jmp     loc_3788
.text:0000000000003ACC ; ---------------------------------------------------------------------------
.text:0000000000003AD1                 align 8
.text:0000000000003AD8
.text:0000000000003AD8 loc_3AD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003AD8                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003AD8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003ADD                 setz    dl
.text:0000000000003AE0                 xor     eax, eax
.text:0000000000003AE2                 jmp     loc_38C8
.text:0000000000003AE2 ; ---------------------------------------------------------------------------
.text:0000000000003AE7                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003AF0                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003AF0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003AF5                 mov     ebx, 61h ; 'a'
.text:0000000000003AFA                 jmp     loc_39D4
.text:0000000000003AFA ; ---------------------------------------------------------------------------
.text:0000000000003AFF                 align 20h
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B00                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003B05                 setz    dl
.text:0000000000003B08
.text:0000000000003B08 loc_3B08:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003B08                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003B08                 test    rbp, rbp
.text:0000000000003B0B                 jnz     loc_38BC
.text:0000000000003B11
.text:0000000000003B11 loc_3B11:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003B11                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003B11                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003B16                 and     al, dl
.text:0000000000003B18                 jz      loc_38C8
.text:0000000000003B1E
.text:0000000000003B1E loc_3B1E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003B1E                 mov     rbp, r11
.text:0000000000003B21                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B29                 jmp     loc_4229
.text:0000000000003B29 ; ---------------------------------------------------------------------------
.text:0000000000003B2E                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B30                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003B35                 setz    dl
.text:0000000000003B38                 xor     r12d, r12d
.text:0000000000003B3B                 jmp     short loc_3B11
.text:0000000000003B3B ; ---------------------------------------------------------------------------
.text:0000000000003B3D                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B40                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003B45                 mov     ebx, 20h ; ' '
.text:0000000000003B4A                 setz    dl
.text:0000000000003B4D                 jmp     short loc_3B11
.text:0000000000003B4D ; ---------------------------------------------------------------------------
.text:0000000000003B4F                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B50                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B50                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003B55                 mov     ebx, 72h ; 'r'
.text:0000000000003B5A                 jmp     loc_39C2
.text:0000000000003B5A ; ---------------------------------------------------------------------------
.text:0000000000003B5F                 align 20h
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B60                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B60                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003B65                 mov     ebx, 66h ; 'f'
.text:0000000000003B6A                 jmp     loc_39D4
.text:0000000000003B6A ; ---------------------------------------------------------------------------
.text:0000000000003B6F                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B70                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B70                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003B75                 mov     ebx, 76h ; 'v'
.text:0000000000003B7A                 jmp     loc_39D4
.text:0000000000003B7A ; ---------------------------------------------------------------------------
.text:0000000000003B7F                 align 20h
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B80                                         ; DATA XREF: .rodata:jpt_388E↓o
.text:0000000000003B80                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003B85                 mov     ebx, 6Eh ; 'n'
.text:0000000000003B8A                 jmp     loc_39C2
.text:0000000000003B8A ; ---------------------------------------------------------------------------
.text:0000000000003B8F                 align 10h
.text:0000000000003B90
.text:0000000000003B90 def_3C1A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003B90                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003B90                                         ; DATA XREF: ...
.text:0000000000003B90                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003B93                 nop     dword ptr [rax+rax+00h]
.text:0000000000003B98
.text:0000000000003B98 def_388E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003B98                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003B98                                         ; DATA XREF: ...
.text:0000000000003B98                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003B9E                 jnz     loc_3F48
.text:0000000000003BA4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003BA9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003BAE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003BB3                 call    ___ctype_b_loc
.text:0000000000003BB8                 mov     rcx, [rax]
.text:0000000000003BBB                 movzx   edx, bl
.text:0000000000003BBE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003BC4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003BCA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003BCF                 mov     edi, 1
.text:0000000000003BD4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003BD8                 and     ax, 4000h
.text:0000000000003BDC                 setnz   r12b
.text:0000000000003BE0                 setz    al
.text:0000000000003BE3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003BE7
.text:0000000000003BE7 loc_3BE7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003BE7                 test    al, al
.text:0000000000003BE9                 jnz     loc_4581
.text:0000000000003BEF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BF4                 setz    dl
.text:0000000000003BF7                 jmp     loc_38C8
.text:0000000000003BF7 ; ---------------------------------------------------------------------------
.text:0000000000003BFC                 align 20h
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003C00                 movzx   ebx, byte ptr [r9]
.text:0000000000003C04                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003C07                 ja      short def_3C1A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003C09                 lea     rcx, jpt_3C1A
.text:0000000000003C10                 movzx   edx, bl
.text:0000000000003C13                 movsxd  rax, ds:(jpt_3C1A - 7CA8h)[rcx+rdx*4]
.text:0000000000003C17                 add     rax, rcx
.text:0000000000003C1A                 jmp     rax             ; switch jump
.text:0000000000003C1A ; ---------------------------------------------------------------------------
.text:0000000000003C1C                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C20                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003C20                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003C23                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003C28                 jnz     loc_3A1E
.text:0000000000003C2E                 xchg    ax, ax
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003C30                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003C30                 mov     edx, 5Ch ; '\'
.text:0000000000003C35                 mov     ebx, 5Ch ; '\'
.text:0000000000003C3A                 jmp     loc_39D4
.text:0000000000003C3A ; ---------------------------------------------------------------------------
.text:0000000000003C3F                 align 20h
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C40                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003C40                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003C45                 xor     r10d, r10d
.text:0000000000003C48                 mov     ebx, 66h ; 'f'
.text:0000000000003C4D                 jmp     loc_39D4
.text:0000000000003C4D ; ---------------------------------------------------------------------------
.text:0000000000003C52                 align 8
.text:0000000000003C58
.text:0000000000003C58 loc_3C58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C58                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003C58                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003C5D                 xor     r10d, r10d
.text:0000000000003C60                 mov     ebx, 6Eh ; 'n'
.text:0000000000003C65                 jmp     loc_39C2
.text:0000000000003C65 ; ---------------------------------------------------------------------------
.text:0000000000003C6A                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003C70                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003C75                 jmp     loc_3A40
.text:0000000000003C75 ; ---------------------------------------------------------------------------
.text:0000000000003C7A                 align 20h
.text:0000000000003C80
.text:0000000000003C80 loc_3C80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C80                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003C80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003C83
.text:0000000000003C83 loc_3C83:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003C83                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C88                 setz    dl
.text:0000000000003C8B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C90                 jnz     loc_482A
.text:0000000000003C96                 mov     eax, r8d
.text:0000000000003C99                 mov     rcx, r15
.text:0000000000003C9C                 xor     eax, 1
.text:0000000000003C9F                 and     al, dl
.text:0000000000003CA1                 jz      short loc_3CD0
.text:0000000000003CA3                 cmp     r13, r15
.text:0000000000003CA6                 jbe     short loc_3CAD
.text:0000000000003CA8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003CAD
.text:0000000000003CAD loc_3CAD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003CAD                 lea     rcx, [r15+1]
.text:0000000000003CB1                 cmp     r13, rcx
.text:0000000000003CB4                 jbe     short loc_3CBC
.text:0000000000003CB6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003CBC
.text:0000000000003CBC loc_3CBC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003CBC                 lea     rcx, [r15+2]
.text:0000000000003CC0                 cmp     r13, rcx
.text:0000000000003CC3                 ja      loc_42F9
.text:0000000000003CC9
.text:0000000000003CC9 loc_3CC9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003CC9                 lea     rcx, [r15+3]
.text:0000000000003CCD                 mov     r8d, eax
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003CD0                 cmp     r13, rcx
.text:0000000000003CD3                 jbe     short loc_3CDA
.text:0000000000003CD5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003CDA
.text:0000000000003CDA loc_3CDA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003CDA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CDF                 lea     r15, [rcx+1]
.text:0000000000003CE3                 jz      loc_42E9
.text:0000000000003CE9                 lea     rax, [rbp+1]
.text:0000000000003CED                 cmp     rax, r11
.text:0000000000003CF0                 jnb     short loc_3D0B
.text:0000000000003CF2                 mov     rax, [rsp+0E8h+s]
.text:0000000000003CF7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003CFC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003D00                 sub     eax, 30h ; '0'
.text:0000000000003D03                 cmp     al, 9
.text:0000000000003D05                 jbe     loc_4539
.text:0000000000003D0B
.text:0000000000003D0B loc_3D0B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003D0B                 mov     eax, r12d
.text:0000000000003D0E                 mov     ebx, 30h ; '0'
.text:0000000000003D13                 xor     r12d, r12d
.text:0000000000003D16                 jmp     loc_38C8
.text:0000000000003D16 ; ---------------------------------------------------------------------------
.text:0000000000003D1B                 align 20h
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D20                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003D20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003D25                 mov     r12d, r10d
.text:0000000000003D28                 setz    dl
.text:0000000000003D2B                 xor     r10d, r10d
.text:0000000000003D2E                 xor     eax, eax
.text:0000000000003D30                 jmp     loc_38C8
.text:0000000000003D30 ; ---------------------------------------------------------------------------
.text:0000000000003D35                 align 8
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D38                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003D38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003D3D                 setz    dl
.text:0000000000003D40                 xor     r10d, r10d
.text:0000000000003D43                 jmp     loc_3B08
.text:0000000000003D43 ; ---------------------------------------------------------------------------
.text:0000000000003D48                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D50                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003D50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003D55                 setz    dl
.text:0000000000003D58                 xor     r10d, r10d
.text:0000000000003D5B                 xor     r12d, r12d
.text:0000000000003D5E                 jmp     loc_3B11
.text:0000000000003D5E ; ---------------------------------------------------------------------------
.text:0000000000003D63                 align 8
.text:0000000000003D68
.text:0000000000003D68 loc_3D68:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D68                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003D68                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003D6D                 mov     r12d, r10d
.text:0000000000003D70                 mov     ebx, 20h ; ' '
.text:0000000000003D75                 setz    dl
.text:0000000000003D78                 xor     r10d, r10d
.text:0000000000003D7B                 jmp     loc_3B11
.text:0000000000003D80 ; ---------------------------------------------------------------------------
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D80                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003D80                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003D85                 xor     r10d, r10d
.text:0000000000003D88                 mov     ebx, 72h ; 'r'
.text:0000000000003D8D                 jmp     loc_39C2
.text:0000000000003D8D ; ---------------------------------------------------------------------------
.text:0000000000003D92                 align 8
.text:0000000000003D98
.text:0000000000003D98 loc_3D98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D98                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003D98                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003D9D                 jmp     loc_3A40
.text:0000000000003D9D ; ---------------------------------------------------------------------------
.text:0000000000003DA2                 align 8
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DA8                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003DA8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003DAD                 xor     r10d, r10d
.text:0000000000003DB0                 mov     ebx, 74h ; 't'
.text:0000000000003DB5                 jmp     loc_39C2
.text:0000000000003DB5 ; ---------------------------------------------------------------------------
.text:0000000000003DBA                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DC0                                         ; DATA XREF: .rodata:jpt_3C1A↓o
.text:0000000000003DC0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003DC5                 jmp     loc_3A40
.text:0000000000003DC5 ; ---------------------------------------------------------------------------
.text:0000000000003DCA                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003DD0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003DD0                 xor     r10d, r10d
.text:0000000000003DD3                 jmp     loc_3870
.text:0000000000003DD3 ; ---------------------------------------------------------------------------
.text:0000000000003DD8                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 loc_3DE0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003DE0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003DE5                 jnz     loc_4750
.text:0000000000003DEB
.text:0000000000003DEB loc_3DEB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003DEB                 add     rbp, 1
.text:0000000000003DEF                 mov     eax, r8d
.text:0000000000003DF2                 xor     r12d, r12d
.text:0000000000003DF5                 mov     ebx, 5Ch ; '\'
.text:0000000000003DFA                 jmp     loc_390C
.text:0000000000003DFA ; ---------------------------------------------------------------------------
.text:0000000000003DFF                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003E00                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E05                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E0A                 mov     r12d, r8d
.text:0000000000003E0D                 mov     rbp, r11
.text:0000000000003E10                 setz    dl
.text:0000000000003E13                 mov     eax, ebx
.text:0000000000003E15                 test    r15, r15
.text:0000000000003E18                 setz    cl
.text:0000000000003E1B                 and     eax, edx
.text:0000000000003E1D                 and     al, cl
.text:0000000000003E1F                 jnz     loc_4886
.text:0000000000003E25                 mov     eax, ebx
.text:0000000000003E27                 xor     eax, 1
.text:0000000000003E2A                 and     dl, al
.text:0000000000003E2C                 jz      loc_479C
.text:0000000000003E32                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003E37                 jz      loc_479A
.text:0000000000003E3D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003E42                 jnz     loc_483D
.text:0000000000003E48                 test    r13, r13
.text:0000000000003E4B                 setz    al
.text:0000000000003E4E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003E54                 setnz   dl
.text:0000000000003E57                 and     al, dl
.text:0000000000003E59                 jz      loc_487C
.text:0000000000003E5F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E64
.text:0000000000003E64 loc_3E64:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003E64                 lea     rbx, aSetenvLsColors+11h ; "'"
.text:0000000000003E6B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003E6F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E77                 mov     r15d, 1
.text:0000000000003E7D                 mov     [rsp+0E8h+n], 1
.text:0000000000003E86                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003E8B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003E90                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003E94                 jmp     loc_3773
.text:0000000000003E94 ; ---------------------------------------------------------------------------
.text:0000000000003E99                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003EA0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003EA5                 jnz     loc_4750
.text:0000000000003EAB                 test    r13, r13
.text:0000000000003EAE                 jz      loc_42B0
.text:0000000000003EB4                 xor     edx, edx
.text:0000000000003EB6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003EBC                 jnz     loc_42B0
.text:0000000000003EC2
.text:0000000000003EC2 loc_3EC2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003EC2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003EC2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003EC7                 add     r15, 3
.text:0000000000003ECB                 xor     eax, eax
.text:0000000000003ECD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003ED2                 xor     r8d, r8d
.text:0000000000003ED5                 mov     r13, rdx
.text:0000000000003ED8                 mov     ebx, 27h ; '''
.text:0000000000003EDD                 jmp     loc_38F9
.text:0000000000003EDD ; ---------------------------------------------------------------------------
.text:0000000000003EE2                 align 8
.text:0000000000003EE8
.text:0000000000003EE8 loc_3EE8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003EE8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003EED                 jz      short loc_3F10
.text:0000000000003EEF                 lea     rcx, [rbp+2]
.text:0000000000003EF3                 cmp     rcx, r11
.text:0000000000003EF6                 jnb     short loc_3F10
.text:0000000000003EF8                 mov     rax, [rsp+0E8h+s]
.text:0000000000003EFD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003F02                 jz      loc_4692
.text:0000000000003F08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003F10                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003F10                 xor     edx, edx
.text:0000000000003F12                 xor     r12d, r12d
.text:0000000000003F15                 xor     eax, eax
.text:0000000000003F17                 mov     ebx, 3Fh ; '?'
.text:0000000000003F1C                 jmp     loc_38C8
.text:0000000000003F1C ; ---------------------------------------------------------------------------
.text:0000000000003F21                 align 8
.text:0000000000003F28
.text:0000000000003F28 loc_3F28:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003F28                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F2D                 jnz     loc_4750
.text:0000000000003F33                 xor     r12d, r12d
.text:0000000000003F36                 xor     eax, eax
.text:0000000000003F38                 mov     ebx, 3Fh ; '?'
.text:0000000000003F3D                 jmp     loc_38F9
.text:0000000000003F3D ; ---------------------------------------------------------------------------
.text:0000000000003F42                 align 8
.text:0000000000003F48
.text:0000000000003F48 loc_3F48:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003F48                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003F50                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F54                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003F60                 mov     [rsp+0E8h+ps], rax
.text:0000000000003F65                 jnz     short loc_3F94
.text:0000000000003F67                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003F6C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003F71                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003F76                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003F7B                 call    _strlen
.text:0000000000003F80                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003F86                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003F8C                 mov     r11, rax
.text:0000000000003F8F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003F94
.text:0000000000003F94 loc_3F94:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003F94                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003F9C                 xor     ecx, ecx
.text:0000000000003F9E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003FA2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003FA7                 mov     rbx, rcx
.text:0000000000003FAA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003FB2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003FB7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003FBC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003FC4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003FC9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003FCE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003FD3
.text:0000000000003FD3 loc_3FD3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003FD3                 mov     rax, [rsp+0E8h+s]
.text:0000000000003FD8                 lea     r14, [rbp+rbx+0]
.text:0000000000003FDD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003FE2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003FE7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003FEC                 lea     r13, [rax+r14]
.text:0000000000003FF0                 sub     rdx, r14
.text:0000000000003FF3                 mov     rsi, r13
.text:0000000000003FF6                 call    rpl_mbrtowc
.text:0000000000003FFB                 test    rax, rax
.text:0000000000003FFE                 mov     r15, rax
.text:0000000000004001                 jz      short loc_4051
.text:0000000000004003                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004007                 jz      loc_4625
.text:000000000000400D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004011                 jz      loc_45B1
.text:0000000000004017                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000401C                 setz    al
.text:000000000000401F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004023                 jnz     loc_41C0
.text:0000000000004029
.text:0000000000004029 loc_4029:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004029                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004029                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004030                 call    _iswprint
.text:0000000000004035                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000403A                 test    eax, eax
.text:000000000000403C                 mov     eax, 0
.text:0000000000004041                 cmovz   r12d, eax
.text:0000000000004045                 add     rbx, r15
.text:0000000000004048                 call    _mbsinit
.text:000000000000404D                 test    eax, eax
.text:000000000000404F                 jz      short loc_3FD3
.text:0000000000004051
.text:0000000000004051 loc_4051:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004051                 mov     edx, r12d
.text:0000000000004054                 mov     rdi, rbx
.text:0000000000004057                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000405D                 xor     edx, 1
.text:0000000000004060                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004065                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000406B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000406F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004077                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000407C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004081                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004086
.text:0000000000004086 loc_4086:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004086                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004086                 cmp     rdi, 1
.text:000000000000408A                 jbe     loc_468B
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004090                 mov     rcx, rdi
.text:0000000000004093                 xor     esi, esi
.text:0000000000004095                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000409B                 add     rcx, rbp
.text:000000000000409E                 mov     rdi, [rsp+0E8h+s]
.text:00000000000040A3                 jmp     loc_415E
.text:00000000000040A3 ; ---------------------------------------------------------------------------
.text:00000000000040A8                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000040B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040B5                 setz    al
.text:00000000000040B8                 test    r9b, r9b
.text:00000000000040BB                 jnz     loc_4570
.text:00000000000040C1                 mov     esi, r8d
.text:00000000000040C4                 xor     esi, 1
.text:00000000000040C7                 and     al, sil
.text:00000000000040CA                 jz      short loc_40FB
.text:00000000000040CC                 cmp     r13, r15
.text:00000000000040CF                 jbe     short loc_40D6
.text:00000000000040D1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000040D6
.text:00000000000040D6 loc_40D6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000040D6                 lea     rsi, [r15+1]
.text:00000000000040DA                 cmp     r13, rsi
.text:00000000000040DD                 jbe     short loc_40E5
.text:00000000000040DF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000040E5
.text:00000000000040E5 loc_40E5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000040E5                 lea     rsi, [r15+2]
.text:00000000000040E9                 cmp     r13, rsi
.text:00000000000040EC                 jbe     short loc_40F4
.text:00000000000040EE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000040F4
.text:00000000000040F4 loc_40F4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000040F4                 add     r15, 3
.text:00000000000040F8                 mov     r8d, eax
.text:00000000000040FB
.text:00000000000040FB loc_40FB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000040FB                 cmp     r13, r15
.text:00000000000040FE                 jbe     short loc_4105
.text:0000000000004100                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004105
.text:0000000000004105 loc_4105:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004105                 lea     rax, [r15+1]
.text:0000000000004109                 cmp     r13, rax
.text:000000000000410C                 jbe     short loc_411B
.text:000000000000410E                 mov     eax, ebx
.text:0000000000004110                 shr     al, 6
.text:0000000000004113                 add     eax, 30h ; '0'
.text:0000000000004116                 mov     [r14+r15+1], al
.text:000000000000411B
.text:000000000000411B loc_411B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000411B                 lea     rax, [r15+2]
.text:000000000000411F                 cmp     r13, rax
.text:0000000000004122                 jbe     short loc_4134
.text:0000000000004124                 mov     eax, ebx
.text:0000000000004126                 shr     al, 3
.text:0000000000004129                 and     eax, 7
.text:000000000000412C                 add     eax, 30h ; '0'
.text:000000000000412F                 mov     [r14+r15+2], al
.text:0000000000004134
.text:0000000000004134 loc_4134:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004134                 and     ebx, 7
.text:0000000000004137                 add     rbp, 1
.text:000000000000413B                 add     r15, 3
.text:000000000000413F                 add     ebx, 30h ; '0'
.text:0000000000004142                 cmp     rbp, rcx
.text:0000000000004145                 jnb     loc_3930
.text:000000000000414B                 mov     esi, edx
.text:000000000000414D
.text:000000000000414D loc_414D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000414D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000414D                 cmp     r13, r15
.text:0000000000004150                 jbe     short loc_4156
.text:0000000000004152                 mov     [r14+r15], bl
.text:0000000000004156
.text:0000000000004156 loc_4156:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004156                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000415A                 add     r15, 1
.text:000000000000415E
.text:000000000000415E loc_415E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000415E                 test    dl, dl
.text:0000000000004160                 jnz     loc_40B0
.text:0000000000004166                 mov     eax, esi
.text:0000000000004168                 xor     eax, 1
.text:000000000000416B                 and     eax, r8d
.text:000000000000416E                 test    r10b, r10b
.text:0000000000004171                 jz      short loc_4181
.text:0000000000004173                 cmp     r13, r15
.text:0000000000004176                 jbe     short loc_417D
.text:0000000000004178                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000417D
.text:000000000000417D loc_417D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000417D                 add     r15, 1
.text:0000000000004181
.text:0000000000004181 loc_4181:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004181                 add     rbp, 1
.text:0000000000004185                 cmp     rbp, rcx
.text:0000000000004188                 jnb     loc_390C
.text:000000000000418E                 test    al, al
.text:0000000000004190                 jz      loc_458E
.text:0000000000004196                 cmp     r13, r15
.text:0000000000004199                 jbe     short loc_41A0
.text:000000000000419B                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000041A0                 lea     rax, [r15+1]
.text:00000000000041A4                 cmp     r13, rax
.text:00000000000041A7                 jbe     short loc_41AF
.text:00000000000041A9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000041AF
.text:00000000000041AF loc_41AF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000041AF                 add     r15, 2
.text:00000000000041B3                 xor     r10d, r10d
.text:00000000000041B6                 xor     r8d, r8d
.text:00000000000041B9                 jmp     short loc_414D
.text:00000000000041B9 ; ---------------------------------------------------------------------------
.text:00000000000041BB                 align 20h
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000041C0                 cmp     r15, 1
.text:00000000000041C4                 jz      loc_4029
.text:00000000000041CA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000041CF                 lea     rcx, [rdi+r15]
.text:00000000000041D3                 lea     rdx, [rdi+r14+1]
.text:00000000000041D8                 lea     r8, [rcx+r14]
.text:00000000000041DC                 jmp     short loc_41ED
.text:00000000000041DC ; ---------------------------------------------------------------------------
.text:00000000000041DE                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000041E0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000041E0                 add     rdx, 1
.text:00000000000041E4                 cmp     r8, rdx
.text:00000000000041E7                 jz      loc_4029
.text:00000000000041ED
.text:00000000000041ED loc_41ED:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000041ED                 movzx   ecx, byte ptr [rdx]
.text:00000000000041F0                 sub     ecx, 5Bh ; '['
.text:00000000000041F3                 cmp     cl, 21h ; '!'
.text:00000000000041F6                 ja      short loc_41E0
.text:00000000000041F8                 mov     esi, 1
.text:00000000000041FD                 shl     rsi, cl
.text:0000000000004200                 mov     rcx, rsi
.text:0000000000004203                 mov     rsi, 20000002Bh
.text:000000000000420D                 test    rcx, rsi
.text:0000000000004210                 jz      short loc_41E0
.text:0000000000004212                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004217                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000421C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004221                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004229
.text:0000000000004229 loc_4229:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004229                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004229                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000422E                 jz      short loc_4240
.text:0000000000004230                 test    al, al
.text:0000000000004232                 mov     eax, 4
.text:0000000000004237                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000423C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004240
.text:0000000000004240 loc_4240:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004240                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004240                 sub     rsp, 8
.text:0000000000004244                 mov     rcx, rbp
.text:0000000000004247                 mov     rsi, r13
.text:000000000000424A                 push    [rsp+0F0h+var_88]
.text:000000000000424E                 push    [rsp+0F8h+var_80]
.text:0000000000004252                 mov     rdi, r14
.text:0000000000004255                 push    0
.text:0000000000004257                 mov     r9d, [rsp+108h+var_70]
.text:000000000000425F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004264                 mov     rdx, [rsp+108h+s]
.text:0000000000004269                 and     r9d, 0FFFFFFFDh
.text:000000000000426D                 call    quotearg_buffer_restyled
.text:0000000000004272                 add     rsp, 20h
.text:0000000000004276                 mov     r15, rax
.text:0000000000004279
.text:0000000000004279 loc_4279:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004279                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004279                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004281                 xor     rbx, fs:28h
.text:000000000000428A                 mov     rax, r15
.text:000000000000428D                 jnz     loc_4893
.text:0000000000004293                 add     rsp, 0B8h
.text:000000000000429A                 pop     rbx
.text:000000000000429B                 pop     rbp
.text:000000000000429C                 pop     r12
.text:000000000000429E                 pop     r13
.text:00000000000042A0                 pop     r14
.text:00000000000042A2                 pop     r15
.text:00000000000042A4                 retn
.text:00000000000042A4 ; ---------------------------------------------------------------------------
.text:00000000000042A5                 align 8
.text:00000000000042A8
.text:00000000000042A8 loc_42A8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000042A8                 mov     rbp, r11
.text:00000000000042AB                 jmp     loc_4229
.text:00000000000042B0 ; ---------------------------------------------------------------------------
.text:00000000000042B0
.text:00000000000042B0 loc_42B0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000042B0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000042B0                 cmp     r13, r15
.text:00000000000042B3                 jbe     short loc_42BA
.text:00000000000042B5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000042BA
.text:00000000000042BA loc_42BA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000042BA                 lea     rax, [r15+1]
.text:00000000000042BE                 cmp     r13, rax
.text:00000000000042C1                 jbe     short loc_42C9
.text:00000000000042C3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000042C9
.text:00000000000042C9 loc_42C9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000042C9                 lea     rax, [r15+2]
.text:00000000000042CD                 cmp     r13, rax
.text:00000000000042D0                 jbe     loc_48C2
.text:00000000000042D6                 mov     rdx, r13
.text:00000000000042D9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000042DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000042E4                 jmp     loc_3EC2
.text:00000000000042E9 ; ---------------------------------------------------------------------------
.text:00000000000042E9
.text:00000000000042E9 loc_42E9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000042E9                 mov     eax, r12d
.text:00000000000042EC                 mov     ebx, 30h ; '0'
.text:00000000000042F1                 xor     r12d, r12d
.text:00000000000042F4                 jmp     loc_38F9
.text:00000000000042F9 ; ---------------------------------------------------------------------------
.text:00000000000042F9
.text:00000000000042F9 loc_42F9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000042F9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000042FF                 jmp     loc_3CC9
.text:0000000000004304 ; ---------------------------------------------------------------------------
.text:0000000000004304
.text:0000000000004304 loc_4304:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004304                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:0000000000004304                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004306                 jnz     loc_3733        ; jumptable 00000000000121F1 case 1
.text:000000000000430C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004311
.text:0000000000004311 loc_4311:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004311                 test    r13, r13
.text:0000000000004314                 jnz     loc_48AA
.text:000000000000431A                 lea     rax, aSetenvLsColors+11h ; "'"
.text:0000000000004321                 mov     [rsp+0E8h+var_98], 0
.text:000000000000432A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000432F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004334                 xor     r12d, r12d
.text:0000000000004337                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000433C                 mov     [rsp+0E8h+n], 1
.text:0000000000004345                 mov     [rsp+0E8h+s2], rax
.text:000000000000434A                 mov     r15d, 1
.text:0000000000004350                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004358                 jmp     loc_3773
.text:0000000000004358 ; ---------------------------------------------------------------------------
.text:000000000000435D                 align 20h
.text:0000000000004360
.text:0000000000004360 loc_4360:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004360                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:0000000000004360                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004362                 jnz     loc_475D
.text:0000000000004368                 test    r13, r13
.text:000000000000436B                 jz      loc_4596
.text:0000000000004371                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004375                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000437A                 xor     r12d, r12d
.text:000000000000437D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004382                 mov     [rsp+0E8h+var_98], 0
.text:000000000000438B
.text:000000000000438B loc_438B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000438B                 lea     rax, unk_7A1B
.text:0000000000004392                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004397                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000439C                 mov     [rsp+0E8h+n], 1
.text:00000000000043A5                 mov     r15d, 1
.text:00000000000043AB                 mov     [rsp+0E8h+s2], rax
.text:00000000000043B0                 jmp     loc_3773
.text:00000000000043B5 ; ---------------------------------------------------------------------------
.text:00000000000043B5
.text:00000000000043B5 loc_43B5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000043B5                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:00000000000043B5                 lea     rax, unk_7A1B   ; jumptable 00000000000121F1 case 6
.text:00000000000043BC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043C1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043C6                 xor     r12d, r12d
.text:00000000000043C9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043D2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043D7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043DC                 mov     [rsp+0E8h+n], 1
.text:00000000000043E5                 xor     r15d, r15d
.text:00000000000043E8                 mov     [rsp+0E8h+s2], rax
.text:00000000000043ED                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000043F5                 jmp     loc_3773
.text:00000000000043FA ; ---------------------------------------------------------------------------
.text:00000000000043FA
.text:00000000000043FA loc_43FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000043FA                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:00000000000043FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000043FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004404                 xor     r12d, r12d
.text:0000000000004407                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004410                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004415                 xor     r15d, r15d
.text:0000000000004418                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000441D                 mov     [rsp+0E8h+n], 0
.text:0000000000004426                 mov     [rsp+0E8h+s2], 0
.text:000000000000442F                 jmp     loc_3773
.text:0000000000004434 ; ---------------------------------------------------------------------------
.text:0000000000004434
.text:0000000000004434 loc_4434:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004434                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:0000000000004434                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004439                 jz      short loc_4491
.text:000000000000443B                 lea     rsi, asc_7A1D   ; "`"
.text:0000000000004442                 xor     edi, edi        ; domainname
.text:0000000000004444                 mov     edx, 5          ; category
.text:0000000000004449                 call    _dcgettext
.text:000000000000444E                 mov     rcx, rax
.text:0000000000004451                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004456                 lea     rax, asc_7A1D   ; "`"
.text:000000000000445D                 cmp     rcx, rax
.text:0000000000004460                 jz      loc_47FE
.text:0000000000004466
.text:0000000000004466 loc_4466:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004466                 lea     rsi, aSetenvLsColors+11h ; msgid
.text:000000000000446D                 xor     edi, edi        ; domainname
.text:000000000000446F                 mov     edx, 5          ; category
.text:0000000000004474                 call    _dcgettext
.text:0000000000004479                 mov     rcx, rax
.text:000000000000447C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004481                 lea     rax, aSetenvLsColors+11h ; "'"
.text:0000000000004488                 cmp     rcx, rax
.text:000000000000448B                 jz      loc_4814
.text:0000000000004491
.text:0000000000004491 loc_4491:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004491                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004491                 xor     r15d, r15d
.text:0000000000004494                 test    ebx, ebx
.text:0000000000004496                 jz      loc_465D
.text:000000000000449C
.text:000000000000449C loc_449C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000449C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000449C                 test    ebx, ebx
.text:000000000000449E                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000044A3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000044A8                 xor     r12d, r12d
.text:00000000000044AB                 mov     rdi, rbx        ; s
.text:00000000000044AE                 call    _strlen
.text:00000000000044B3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000044B8                 mov     [rsp+0E8h+n], rax
.text:00000000000044BD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000044C2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000044C7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000044D0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000044D5                 jmp     loc_3773
.text:00000000000044DA ; ---------------------------------------------------------------------------
.text:00000000000044DA
.text:00000000000044DA loc_44DA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000044DA                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:00000000000044DA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000044DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000044E4                 xor     r12d, r12d
.text:00000000000044E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000044F0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000044F5                 xor     r15d, r15d
.text:00000000000044F8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000044FD                 mov     [rsp+0E8h+n], 0
.text:0000000000004506                 mov     [rsp+0E8h+s2], 0
.text:000000000000450F                 jmp     loc_3773
.text:0000000000004514 ; ---------------------------------------------------------------------------
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004514                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:0000000000004514                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004519                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000451E                 xor     r12d, r12d
.text:0000000000004521                 mov     [rsp+0E8h+var_98], 0
.text:000000000000452A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000452F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004534                 jmp     loc_3753
.text:0000000000004539 ; ---------------------------------------------------------------------------
.text:0000000000004539
.text:0000000000004539 loc_4539:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004539                 cmp     r13, r15
.text:000000000000453C                 jbe     short loc_4543
.text:000000000000453E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004543
.text:0000000000004543 loc_4543:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004543                 lea     rax, [rcx+2]
.text:0000000000004547                 cmp     r13, rax
.text:000000000000454A                 jbe     short loc_4552
.text:000000000000454C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004552
.text:0000000000004552 loc_4552:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004552                 mov     eax, r12d
.text:0000000000004555                 lea     r15, [rcx+3]
.text:0000000000004559                 xor     r12d, r12d
.text:000000000000455C                 mov     ebx, 30h ; '0'
.text:0000000000004561                 jmp     loc_38C8
.text:0000000000004561 ; ---------------------------------------------------------------------------
.text:0000000000004566                 align 10h
.text:0000000000004570
.text:0000000000004570 loc_4570:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004570                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004575                 mov     rbp, r11
.text:0000000000004578                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000457C                 jmp     loc_4229
.text:0000000000004581 ; ---------------------------------------------------------------------------
.text:0000000000004581
.text:0000000000004581 loc_4581:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004581                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004586                 xor     r12d, r12d
.text:0000000000004589                 jmp     loc_4090
.text:000000000000458E ; ---------------------------------------------------------------------------
.text:000000000000458E
.text:000000000000458E loc_458E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000458E                 xor     r10d, r10d
.text:0000000000004591                 jmp     loc_414D
.text:0000000000004596 ; ---------------------------------------------------------------------------
.text:0000000000004596
.text:0000000000004596 loc_4596:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004596                 mov     [rsp+0E8h+var_98], 0
.text:000000000000459F                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045A4                 xor     r12d, r12d
.text:00000000000045A7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045AC                 jmp     loc_438B
.text:00000000000045B1 ; ---------------------------------------------------------------------------
.text:00000000000045B1
.text:00000000000045B1 loc_45B1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000045B1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000045B6                 mov     rsi, r14
.text:00000000000045B9                 mov     rcx, r13
.text:00000000000045BC                 mov     rax, rbx
.text:00000000000045BF                 mov     rdi, rbx
.text:00000000000045C2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000045C8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000045CD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000045D5                 cmp     rsi, r11
.text:00000000000045D8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000045DE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000045E6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000045EB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000045F0                 jnb     short loc_4618
.text:00000000000045F2                 cmp     byte ptr [rcx], 0
.text:00000000000045F5                 jnz     short loc_4607
.text:00000000000045F7                 jmp     short loc_4618
.text:00000000000045F7 ; ---------------------------------------------------------------------------
.text:00000000000045F9                 align 20h
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004600                 cmp     byte ptr [r9+rax], 0
.text:0000000000004605                 jz      short loc_4615
.text:0000000000004607
.text:0000000000004607 loc_4607:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004607                 add     rax, 1
.text:000000000000460B                 lea     rdx, [rbp+rax+0]
.text:0000000000004610                 cmp     r11, rdx
.text:0000000000004613                 ja      short loc_4600
.text:0000000000004615
.text:0000000000004615 loc_4615:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004615                 mov     rdi, rax
.text:0000000000004618
.text:0000000000004618 loc_4618:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004618                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004618                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000461D                 xor     r12d, r12d
.text:0000000000004620                 jmp     loc_4086
.text:0000000000004625 ; ---------------------------------------------------------------------------
.text:0000000000004625
.text:0000000000004625 loc_4625:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004625                 mov     rdi, rbx
.text:0000000000004628                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000462E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004633                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004639                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004641                 xor     r12d, r12d
.text:0000000000004644                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004649                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000464E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004653                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004658                 jmp     loc_4086
.text:000000000000465D ; ---------------------------------------------------------------------------
.text:000000000000465D
.text:000000000000465D loc_465D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000465D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004662                 movzx   eax, byte ptr [rdx]
.text:0000000000004665                 test    al, al
.text:0000000000004667                 jz      loc_449C
.text:000000000000466D                 nop     dword ptr [rax]
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004670                 cmp     r13, r15
.text:0000000000004673                 jbe     short loc_4679
.text:0000000000004675                 mov     [r14+r15], al
.text:0000000000004679
.text:0000000000004679 loc_4679:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004679                 add     r15, 1
.text:000000000000467D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004682                 test    al, al
.text:0000000000004684                 jnz     short loc_4670
.text:0000000000004686                 jmp     loc_449C
.text:000000000000468B ; ---------------------------------------------------------------------------
.text:000000000000468B
.text:000000000000468B loc_468B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000468B                 mov     eax, edx
.text:000000000000468D                 jmp     loc_3BE7
.text:0000000000004692 ; ---------------------------------------------------------------------------
.text:0000000000004692
.text:0000000000004692 loc_4692:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004692                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004696                 cmp     bl, 3Eh ; '>'
.text:0000000000004699                 ja      loc_3F10
.text:000000000000469F                 mov     rax, 7000A38200000000h
.text:00000000000046A9                 bt      rax, rbx
.text:00000000000046AD                 jnb     loc_3F10
.text:00000000000046B3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000046B8                 jnz     loc_48A2
.text:00000000000046BE                 cmp     r13, r15
.text:00000000000046C1                 jbe     short loc_46C8
.text:00000000000046C3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000046C8
.text:00000000000046C8 loc_46C8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000046C8                 lea     rax, [r15+1]
.text:00000000000046CC                 cmp     r13, rax
.text:00000000000046CF                 jbe     short loc_46D7
.text:00000000000046D1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000046D7
.text:00000000000046D7 loc_46D7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000046D7                 lea     rax, [r15+2]
.text:00000000000046DB                 cmp     r13, rax
.text:00000000000046DE                 jbe     short loc_46E6
.text:00000000000046E0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000046E6
.text:00000000000046E6 loc_46E6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000046E6                 lea     rax, [r15+3]
.text:00000000000046EA                 cmp     r13, rax
.text:00000000000046ED                 jbe     short loc_46F5
.text:00000000000046EF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000046F5
.text:00000000000046F5 loc_46F5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000046F5                 add     r15, 4
.text:00000000000046F9                 xor     edx, edx
.text:00000000000046FB                 xor     r12d, r12d
.text:00000000000046FE                 xor     eax, eax
.text:0000000000004700                 mov     rbp, rcx
.text:0000000000004703                 jmp     loc_38C8
.text:0000000000004708 ; ---------------------------------------------------------------------------
.text:0000000000004708
.text:0000000000004708 loc_4708:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004708                                         ; DATA XREF: .rodata:jpt_3731↓o
.text:0000000000004708                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000470A                 jz      loc_4898
.text:0000000000004710                 lea     rax, aSetenvLsColors+11h ; "'"
.text:0000000000004717                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000471C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004721                 xor     r12d, r12d
.text:0000000000004724                 mov     [rsp+0E8h+var_98], 0
.text:000000000000472D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004732                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004737                 mov     [rsp+0E8h+n], 1
.text:0000000000004740                 xor     r15d, r15d
.text:0000000000004743                 mov     [rsp+0E8h+s2], rax
.text:0000000000004748                 jmp     loc_3773
.text:0000000000004748 ; ---------------------------------------------------------------------------
.text:000000000000474D                 align 10h
.text:0000000000004750
.text:0000000000004750 loc_4750:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004750                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004750                 mov     rbp, r11
.text:0000000000004753                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004758                 jmp     loc_4229
.text:000000000000475D ; ---------------------------------------------------------------------------
.text:000000000000475D
.text:000000000000475D loc_475D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000475D                 lea     rax, unk_7A1B
.text:0000000000004764                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004769                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000476E                 xor     r12d, r12d
.text:0000000000004771                 mov     [rsp+0E8h+var_98], 0
.text:000000000000477A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000477F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004784                 mov     [rsp+0E8h+n], 1
.text:000000000000478D                 xor     r15d, r15d
.text:0000000000004790                 mov     [rsp+0E8h+s2], rax
.text:0000000000004795                 jmp     loc_3773
.text:000000000000479A ; ---------------------------------------------------------------------------
.text:000000000000479A
.text:000000000000479A loc_479A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000479A                 mov     eax, edx
.text:000000000000479C
.text:000000000000479C loc_479C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000479C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000479C                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000047A1                 test    rbx, rbx
.text:00000000000047A4                 jz      short loc_47D2
.text:00000000000047A6                 test    al, al
.text:00000000000047A8                 jz      short loc_47D2
.text:00000000000047AA                 movzx   ecx, byte ptr [rbx]
.text:00000000000047AD                 mov     rax, rbx
.text:00000000000047B0                 test    cl, cl
.text:00000000000047B2                 jz      short loc_47D2
.text:00000000000047B4                 mov     rdx, r15
.text:00000000000047B7                 sub     rax, r15
.text:00000000000047BA
.text:00000000000047BA loc_47BA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000047BA                 cmp     r13, rdx
.text:00000000000047BD                 jbe     short loc_47C3
.text:00000000000047BF                 mov     [r14+rdx], cl
.text:00000000000047C3
.text:00000000000047C3 loc_47C3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000047C3                 add     rdx, 1
.text:00000000000047C7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000047CB                 test    cl, cl
.text:00000000000047CD                 jnz     short loc_47BA
.text:00000000000047CF                 mov     r15, rdx
.text:00000000000047D2
.text:00000000000047D2 loc_47D2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000047D2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000047D2                 cmp     r13, r15
.text:00000000000047D5                 jbe     loc_4279
.text:00000000000047DB                 mov     byte ptr [r14+r15], 0
.text:00000000000047E0                 jmp     loc_4279
.text:00000000000047E5 ; ---------------------------------------------------------------------------
.text:00000000000047E5
.text:00000000000047E5 loc_47E5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000047E5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000047EA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000047EF                 mov     rbp, r11
.text:00000000000047F2                 setz    al
.text:00000000000047F5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000047F9                 jmp     loc_4229
.text:00000000000047FE ; ---------------------------------------------------------------------------
.text:00000000000047FE
.text:00000000000047FE loc_47FE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000047FE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004802                 mov     rdi, rcx
.text:0000000000004805                 call    gettext_quote
.text:000000000000480A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000480F                 jmp     loc_4466
.text:0000000000004814 ; ---------------------------------------------------------------------------
.text:0000000000004814
.text:0000000000004814 loc_4814:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004814                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004818                 mov     rdi, rcx
.text:000000000000481B                 call    gettext_quote
.text:0000000000004820                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004825                 jmp     loc_4491
.text:000000000000482A ; ---------------------------------------------------------------------------
.text:000000000000482A
.text:000000000000482A loc_482A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000482A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000482F                 mov     rbp, r11
.text:0000000000004832                 mov     eax, edx
.text:0000000000004834                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004838                 jmp     loc_4229
.text:000000000000483D ; ---------------------------------------------------------------------------
.text:000000000000483D
.text:000000000000483D loc_483D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000483D                 sub     rsp, 8
.text:0000000000004841                 mov     r8d, 5
.text:0000000000004847                 mov     rcx, r11
.text:000000000000484A                 push    [rsp+0F0h+var_88]
.text:000000000000484E                 push    [rsp+0F8h+var_80]
.text:0000000000004852                 mov     rdi, r14
.text:0000000000004855                 push    [rsp+100h+var_C8]
.text:0000000000004859                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004861                 mov     rdx, [rsp+108h+s]
.text:0000000000004866                 mov     rsi, [rsp+108h+var_98]
.text:000000000000486B                 call    quotearg_buffer_restyled
.text:0000000000004870                 add     rsp, 20h
.text:0000000000004874                 mov     r15, rax
.text:0000000000004877                 jmp     loc_4279
.text:000000000000487C ; ---------------------------------------------------------------------------
.text:000000000000487C
.text:000000000000487C loc_487C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000487C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004881                 jmp     loc_479C
.text:0000000000004886 ; ---------------------------------------------------------------------------
.text:0000000000004886
.text:0000000000004886 loc_4886:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004886                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000488E                 jmp     loc_4229
.text:0000000000004893 ; ---------------------------------------------------------------------------
.text:0000000000004893
.text:0000000000004893 loc_4893:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004893                 call    ___stack_chk_fail
.text:0000000000004898 ; ---------------------------------------------------------------------------
.text:0000000000004898
.text:0000000000004898 loc_4898:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004898                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000489D                 jmp     loc_4311
.text:00000000000048A2 ; ---------------------------------------------------------------------------
.text:00000000000048A2
.text:00000000000048A2 loc_48A2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000048A2                 mov     rbp, r11
.text:00000000000048A5                 jmp     loc_4240
.text:00000000000048AA ; ---------------------------------------------------------------------------
.text:00000000000048AA
.text:00000000000048AA loc_48AA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000048AA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048AF                 xor     eax, eax
.text:00000000000048B1                 xor     r12d, r12d
.text:00000000000048B4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048BD                 jmp     loc_3E64
.text:00000000000048C2 ; ---------------------------------------------------------------------------
.text:00000000000048C2
.text:00000000000048C2 loc_48C2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000048C2                 mov     rdx, r13
.text:00000000000048C5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000048CA                 jmp     loc_3EC2
.text:00000000000048CF ; ---------------------------------------------------------------------------
.text:00000000000048CF
.text:00000000000048CF def_3731:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000048CF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000048CF ; } // starts at 36A0
.text:00000000000048CF quotearg_buffer_restyled endp
.text:00000000000048CF
.text:00000000000048CF ; ---------------------------------------------------------------------------
.text:00000000000048D4                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0
.text:00000000000048E0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000048E0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000048E0
.text:00000000000048E0 var_50          = qword ptr -50h
.text:00000000000048E0 var_48          = qword ptr -48h
.text:00000000000048E0 var_40          = dword ptr -40h
.text:00000000000048E0 var_3C          = dword ptr -3Ch
.text:00000000000048E0
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 push    r15
.text:00000000000048E2                 push    r14
.text:00000000000048E4                 movsxd  r15, edi
.text:00000000000048E7                 push    r13
.text:00000000000048E9                 push    r12
.text:00000000000048EB                 mov     r14, rdx
.text:00000000000048EE                 push    rbp
.text:00000000000048EF                 push    rbx
.text:00000000000048F0                 mov     rbp, rcx
.text:00000000000048F3                 sub     rsp, 28h
.text:00000000000048F7                 mov     [rsp+58h+var_50], rsi
.text:00000000000048FC                 call    ___errno_location
.text:0000000000004901                 mov     r13, rax
.text:0000000000004904                 mov     eax, [rax]
.text:0000000000004906                 test    r15d, r15d
.text:0000000000004909                 mov     rbx, cs:slotvec
.text:0000000000004910                 mov     [rsp+58h+var_40], eax
.text:0000000000004914                 js      loc_4A81
.text:000000000000491A                 cmp     cs:nslots, r15d
.text:0000000000004921                 jg      short loc_4985
.text:0000000000004923                 cmp     r15d, 7FFFFFFFh
.text:000000000000492A                 jz      loc_4A86
.text:0000000000004930                 lea     r12d, [r15+1]
.text:0000000000004934                 lea     rax, slotvec0
.text:000000000000493B                 movsxd  rsi, r12d
.text:000000000000493E                 shl     rsi, 4
.text:0000000000004942                 cmp     rbx, rax
.text:0000000000004945                 jz      loc_4A60
.text:000000000000494B                 mov     rdi, rbx
.text:000000000000494E                 call    xrealloc
.text:0000000000004953                 mov     rbx, rax
.text:0000000000004956                 mov     cs:slotvec, rax
.text:000000000000495D
.text:000000000000495D loc_495D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000495D                 movsxd  rdi, cs:nslots
.text:0000000000004964                 mov     edx, r12d
.text:0000000000004967                 xor     esi, esi        ; c
.text:0000000000004969                 sub     edx, edi
.text:000000000000496B                 shl     rdi, 4
.text:000000000000496F                 movsxd  rdx, edx
.text:0000000000004972                 add     rdi, rbx        ; s
.text:0000000000004975                 shl     rdx, 4          ; n
.text:0000000000004979                 call    _memset
.text:000000000000497E                 mov     cs:nslots, r12d
.text:0000000000004985
.text:0000000000004985 loc_4985:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004985                 mov     eax, [rbp+4]
.text:0000000000004988                 shl     r15, 4
.text:000000000000498C                 sub     rsp, 8
.text:0000000000004990                 add     rbx, r15
.text:0000000000004993                 lea     r15, [rbp+8]
.text:0000000000004997                 mov     r8d, [rbp+0]
.text:000000000000499B                 mov     r11, [rbx]
.text:000000000000499E                 mov     r12, [rbx+8]
.text:00000000000049A2                 mov     rcx, r14
.text:00000000000049A5                 or      eax, 1
.text:00000000000049A8                 mov     [rsp+60h+var_3C], eax
.text:00000000000049AC                 push    qword ptr [rbp+30h]
.text:00000000000049AF                 mov     r9d, eax
.text:00000000000049B2                 push    qword ptr [rbp+28h]
.text:00000000000049B5                 push    r15
.text:00000000000049B7                 mov     rsi, r11
.text:00000000000049BA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000049BF                 mov     rdi, r12
.text:00000000000049C2                 mov     [rsp+78h+var_48], r11
.text:00000000000049C7                 call    quotearg_buffer_restyled
.text:00000000000049CC                 add     rsp, 20h
.text:00000000000049D0                 mov     r11, [rsp+58h+var_48]
.text:00000000000049D5                 cmp     r11, rax
.text:00000000000049D8                 ja      short loc_4A41
.text:00000000000049DA                 lea     rsi, [rax+1]
.text:00000000000049DE                 lea     rax, slot0
.text:00000000000049E5                 cmp     r12, rax
.text:00000000000049E8                 mov     [rbx], rsi
.text:00000000000049EB                 jz      short loc_49FF
.text:00000000000049ED                 mov     rdi, r12        ; ptr
.text:00000000000049F0                 mov     [rsp+58h+var_48], rsi
.text:00000000000049F5                 call    free
.text:00000000000049FA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000049FF
.text:00000000000049FF loc_49FF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000049FF                 mov     rdi, rsi
.text:0000000000004A02                 mov     [rsp+58h+var_48], rsi
.text:0000000000004A07                 call    xmalloc
.text:0000000000004A0C                 sub     rsp, 8
.text:0000000000004A10                 mov     [rbx+8], rax
.text:0000000000004A14                 mov     r8d, [rbp+0]
.text:0000000000004A18                 push    qword ptr [rbp+30h]
.text:0000000000004A1B                 push    qword ptr [rbp+28h]
.text:0000000000004A1E                 mov     rcx, r14
.text:0000000000004A21                 push    r15
.text:0000000000004A23                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004A28                 mov     rdi, rax
.text:0000000000004A2B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004A30                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004A35                 mov     r12, rax
.text:0000000000004A38                 call    quotearg_buffer_restyled
.text:0000000000004A3D                 add     rsp, 20h
.text:0000000000004A41
.text:0000000000004A41 loc_4A41:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004A41                 mov     eax, [rsp+58h+var_40]
.text:0000000000004A45                 mov     [r13+0], eax
.text:0000000000004A49                 add     rsp, 28h
.text:0000000000004A4D                 mov     rax, r12
.text:0000000000004A50                 pop     rbx
.text:0000000000004A51                 pop     rbp
.text:0000000000004A52                 pop     r12
.text:0000000000004A54                 pop     r13
.text:0000000000004A56                 pop     r14
.text:0000000000004A58                 pop     r15
.text:0000000000004A5A                 retn
.text:0000000000004A5A ; ---------------------------------------------------------------------------
.text:0000000000004A5B                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004A60                 xor     edi, edi
.text:0000000000004A62                 call    xrealloc
.text:0000000000004A67                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004A6F                 mov     rbx, rax
.text:0000000000004A72                 mov     cs:slotvec, rax
.text:0000000000004A79                 movups  xmmword ptr [rax], xmm0
.text:0000000000004A7C                 jmp     loc_495D
.text:0000000000004A81 ; ---------------------------------------------------------------------------
.text:0000000000004A81
.text:0000000000004A81 loc_4A81:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004A81                 call    _abort
.text:0000000000004A86 ; ---------------------------------------------------------------------------
.text:0000000000004A86
.text:0000000000004A86 loc_4A86:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004A86                 call    xalloc_die
.text:0000000000004A86 ; } // starts at 48E0
.text:0000000000004A86 quotearg_n_options endp
.text:0000000000004A86
.text:0000000000004A86 ; ---------------------------------------------------------------------------
.text:0000000000004A8B                 align 10h
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90 ; Attributes: info_from_lumina
.text:0000000000004A90
.text:0000000000004A90 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004A90                 public clone_quoting_options
.text:0000000000004A90 clone_quoting_options proc near
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 push    r12
.text:0000000000004A92                 push    rbp
.text:0000000000004A93                 push    rbx
.text:0000000000004A94                 mov     rbx, rdi
.text:0000000000004A97                 call    ___errno_location
.text:0000000000004A9C                 mov     r12d, [rax]
.text:0000000000004A9F                 mov     rbp, rax
.text:0000000000004AA2                 lea     rax, default_quoting_options
.text:0000000000004AA9                 test    rbx, rbx
.text:0000000000004AAC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004AB1                 cmovz   rbx, rax
.text:0000000000004AB5                 mov     rdi, rbx        ; src
.text:0000000000004AB8                 call    xmemdup
.text:0000000000004ABD                 mov     [rbp+0], r12d
.text:0000000000004AC1                 pop     rbx
.text:0000000000004AC2                 pop     rbp
.text:0000000000004AC3                 pop     r12
.text:0000000000004AC5                 retn
.text:0000000000004AC5 ; } // starts at 4A90
.text:0000000000004AC5 clone_quoting_options endp
.text:0000000000004AC5
.text:0000000000004AC5 ; ---------------------------------------------------------------------------
.text:0000000000004AC6                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public get_quoting_style
.text:0000000000004AD0 get_quoting_style proc near
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 lea     rax, default_quoting_options
.text:0000000000004AD7                 test    rdi, rdi
.text:0000000000004ADA                 cmovz   rdi, rax
.text:0000000000004ADE                 mov     eax, [rdi]
.text:0000000000004AE0                 retn
.text:0000000000004AE0 ; } // starts at 4AD0
.text:0000000000004AE0 get_quoting_style endp
.text:0000000000004AE0
.text:0000000000004AE0 ; ---------------------------------------------------------------------------
.text:0000000000004AE1                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AF0
.text:0000000000004AF0
.text:0000000000004AF0                 public set_quoting_style
.text:0000000000004AF0 set_quoting_style proc near
.text:0000000000004AF0 ; __unwind {
.text:0000000000004AF0                 lea     rax, default_quoting_options
.text:0000000000004AF7                 test    rdi, rdi
.text:0000000000004AFA                 cmovz   rdi, rax
.text:0000000000004AFE                 mov     [rdi], esi
.text:0000000000004B00                 retn
.text:0000000000004B00 ; } // starts at 4AF0
.text:0000000000004B00 set_quoting_style endp
.text:0000000000004B00
.text:0000000000004B00 ; ---------------------------------------------------------------------------
.text:0000000000004B01                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10 ; Attributes: info_from_lumina
.text:0000000000004B10
.text:0000000000004B10 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004B10                 public set_char_quoting
.text:0000000000004B10 set_char_quoting proc near
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 lea     rax, default_quoting_options
.text:0000000000004B17                 test    rdi, rdi
.text:0000000000004B1A                 mov     ecx, esi
.text:0000000000004B1C                 cmovz   rdi, rax
.text:0000000000004B20                 mov     eax, esi
.text:0000000000004B22                 and     ecx, 1Fh
.text:0000000000004B25                 shr     al, 5
.text:0000000000004B28                 movzx   eax, al
.text:0000000000004B2B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004B30                 mov     esi, [rdi]
.text:0000000000004B32                 mov     eax, esi
.text:0000000000004B34                 shr     eax, cl
.text:0000000000004B36                 xor     edx, eax
.text:0000000000004B38                 and     eax, 1
.text:0000000000004B3B                 and     edx, 1
.text:0000000000004B3E                 shl     edx, cl
.text:0000000000004B40                 xor     edx, esi
.text:0000000000004B42                 mov     [rdi], edx
.text:0000000000004B44                 retn
.text:0000000000004B44 ; } // starts at 4B10
.text:0000000000004B44 set_char_quoting endp
.text:0000000000004B44
.text:0000000000004B44 ; ---------------------------------------------------------------------------
.text:0000000000004B45                 align 10h
.text:0000000000004B50
.text:0000000000004B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B50
.text:0000000000004B50
.text:0000000000004B50                 public set_quoting_flags
.text:0000000000004B50 set_quoting_flags proc near
.text:0000000000004B50 ; __unwind {
.text:0000000000004B50                 lea     rax, default_quoting_options
.text:0000000000004B57                 test    rdi, rdi
.text:0000000000004B5A                 cmovz   rdi, rax
.text:0000000000004B5E                 mov     eax, [rdi+4]
.text:0000000000004B61                 mov     [rdi+4], esi
.text:0000000000004B64                 retn
.text:0000000000004B64 ; } // starts at 4B50
.text:0000000000004B64 set_quoting_flags endp
.text:0000000000004B64
.text:0000000000004B64 ; ---------------------------------------------------------------------------
.text:0000000000004B65                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004B70                 public set_custom_quoting
.text:0000000000004B70 set_custom_quoting proc near
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 lea     rax, default_quoting_options
.text:0000000000004B77                 test    rdi, rdi
.text:0000000000004B7A                 cmovz   rdi, rax
.text:0000000000004B7E                 test    rsi, rsi
.text:0000000000004B81                 mov     dword ptr [rdi], 0Ah
.text:0000000000004B87                 jz      short loc_4B97
.text:0000000000004B89                 test    rdx, rdx
.text:0000000000004B8C                 jz      short loc_4B97
.text:0000000000004B8E                 mov     [rdi+28h], rsi
.text:0000000000004B92                 mov     [rdi+30h], rdx
.text:0000000000004B96                 retn
.text:0000000000004B97 ; ---------------------------------------------------------------------------
.text:0000000000004B97
.text:0000000000004B97 loc_4B97:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004B97                                         ; set_custom_quoting+1C↑j
.text:0000000000004B97                 sub     rsp, 8
.text:0000000000004B9B                 call    _abort
.text:0000000000004B9B ; } // starts at 4B70
.text:0000000000004B9B set_custom_quoting endp
.text:0000000000004B9B
.text:0000000000004BA0
.text:0000000000004BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BA0
.text:0000000000004BA0 ; Attributes: info_from_lumina
.text:0000000000004BA0
.text:0000000000004BA0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004BA0                 public quotearg_buffer
.text:0000000000004BA0 quotearg_buffer proc near
.text:0000000000004BA0
.text:0000000000004BA0 var_40          = qword ptr -40h
.text:0000000000004BA0
.text:0000000000004BA0 ; __unwind {
.text:0000000000004BA0                 push    r15
.text:0000000000004BA2                 push    r14
.text:0000000000004BA4                 lea     rax, default_quoting_options
.text:0000000000004BAB                 push    r13
.text:0000000000004BAD                 push    r12
.text:0000000000004BAF                 mov     r13, rdi
.text:0000000000004BB2                 push    rbp
.text:0000000000004BB3                 push    rbx
.text:0000000000004BB4                 mov     rbx, r8
.text:0000000000004BB7                 mov     r14, rsi
.text:0000000000004BBA                 mov     r15, rdx
.text:0000000000004BBD                 sub     rsp, 18h
.text:0000000000004BC1                 test    r8, r8
.text:0000000000004BC4                 cmovz   rbx, rax
.text:0000000000004BC8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004BCD                 call    ___errno_location
.text:0000000000004BD2                 mov     r12d, [rax]
.text:0000000000004BD5                 mov     rbp, rax
.text:0000000000004BD8                 lea     rax, [rbx+8]
.text:0000000000004BDC                 sub     rsp, 8
.text:0000000000004BE0                 mov     r9d, [rbx+4]
.text:0000000000004BE4                 push    qword ptr [rbx+30h]
.text:0000000000004BE7                 mov     r8d, [rbx]
.text:0000000000004BEA                 push    qword ptr [rbx+28h]
.text:0000000000004BED                 mov     rdx, r15
.text:0000000000004BF0                 push    rax
.text:0000000000004BF1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004BF6                 mov     rsi, r14
.text:0000000000004BF9                 mov     rdi, r13
.text:0000000000004BFC                 call    quotearg_buffer_restyled
.text:0000000000004C01                 mov     [rbp+0], r12d
.text:0000000000004C05                 add     rsp, 38h
.text:0000000000004C09                 pop     rbx
.text:0000000000004C0A                 pop     rbp
.text:0000000000004C0B                 pop     r12
.text:0000000000004C0D                 pop     r13
.text:0000000000004C0F                 pop     r14
.text:0000000000004C11                 pop     r15
.text:0000000000004C13                 retn
.text:0000000000004C13 ; } // starts at 4BA0
.text:0000000000004C13 quotearg_buffer endp
.text:0000000000004C13
.text:0000000000004C13 ; ---------------------------------------------------------------------------
.text:0000000000004C14                 align 20h
.text:0000000000004C20
.text:0000000000004C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C20
.text:0000000000004C20 ; Attributes: info_from_lumina
.text:0000000000004C20
.text:0000000000004C20 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004C20                 public quotearg_alloc_mem
.text:0000000000004C20 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004C20
.text:0000000000004C20 var_5C          = dword ptr -5Ch
.text:0000000000004C20 var_58          = qword ptr -58h
.text:0000000000004C20 var_50          = qword ptr -50h
.text:0000000000004C20 var_48          = qword ptr -48h
.text:0000000000004C20 var_40          = qword ptr -40h
.text:0000000000004C20
.text:0000000000004C20 ; __unwind {
.text:0000000000004C20                 push    r15
.text:0000000000004C22                 push    r14
.text:0000000000004C24                 lea     rax, default_quoting_options
.text:0000000000004C2B                 push    r13
.text:0000000000004C2D                 push    r12
.text:0000000000004C2F                 mov     r12, rdx
.text:0000000000004C32                 push    rbp
.text:0000000000004C33                 push    rbx
.text:0000000000004C34                 mov     rbx, rcx
.text:0000000000004C37                 mov     r14, rdi
.text:0000000000004C3A                 mov     r15, rsi
.text:0000000000004C3D                 sub     rsp, 38h
.text:0000000000004C41                 test    rcx, rcx
.text:0000000000004C44                 cmovz   rbx, rax
.text:0000000000004C48                 xor     ebp, ebp
.text:0000000000004C4A                 call    ___errno_location
.text:0000000000004C4F                 test    r12, r12
.text:0000000000004C52                 mov     r13, rax
.text:0000000000004C55                 mov     eax, [rax]
.text:0000000000004C57                 setz    bpl
.text:0000000000004C5B                 or      ebp, [rbx+4]
.text:0000000000004C5E                 lea     r10, [rbx+8]
.text:0000000000004C62                 sub     rsp, 8
.text:0000000000004C66                 mov     r8d, [rbx]
.text:0000000000004C69                 mov     rcx, r15
.text:0000000000004C6C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004C70                 push    qword ptr [rbx+30h]
.text:0000000000004C73                 mov     rdx, r14
.text:0000000000004C76                 push    qword ptr [rbx+28h]
.text:0000000000004C79                 push    r10
.text:0000000000004C7B                 xor     esi, esi
.text:0000000000004C7D                 mov     r9d, ebp
.text:0000000000004C80                 xor     edi, edi
.text:0000000000004C82                 mov     [rsp+88h+var_48], r10
.text:0000000000004C87                 call    quotearg_buffer_restyled
.text:0000000000004C8C                 lea     rsi, [rax+1]
.text:0000000000004C90                 mov     [rsp+88h+var_40], rax
.text:0000000000004C95                 add     rsp, 20h
.text:0000000000004C99                 mov     rdi, rsi
.text:0000000000004C9C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004CA1                 call    xmalloc
.text:0000000000004CA6                 mov     [rsp+68h+var_58], rax
.text:0000000000004CAB                 sub     rsp, 8
.text:0000000000004CAF                 push    qword ptr [rbx+30h]
.text:0000000000004CB2                 push    qword ptr [rbx+28h]
.text:0000000000004CB5                 mov     r10, [rsp+80h+var_48]
.text:0000000000004CBA                 mov     r9d, ebp
.text:0000000000004CBD                 mov     r8d, [rbx]
.text:0000000000004CC0                 mov     rcx, r15
.text:0000000000004CC3                 mov     rdx, r14
.text:0000000000004CC6                 mov     rdi, rax
.text:0000000000004CC9                 push    r10
.text:0000000000004CCB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004CD0                 call    quotearg_buffer_restyled
.text:0000000000004CD5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004CD9                 add     rsp, 20h
.text:0000000000004CDD                 test    r12, r12
.text:0000000000004CE0                 mov     [r13+0], eax
.text:0000000000004CE4                 jz      short loc_4CEF
.text:0000000000004CE6                 mov     r11, [rsp+68h+var_40]
.text:0000000000004CEB                 mov     [r12], r11
.text:0000000000004CEF
.text:0000000000004CEF loc_4CEF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004CEF                 mov     rax, [rsp+68h+var_58]
.text:0000000000004CF4                 add     rsp, 38h
.text:0000000000004CF8                 pop     rbx
.text:0000000000004CF9                 pop     rbp
.text:0000000000004CFA                 pop     r12
.text:0000000000004CFC                 pop     r13
.text:0000000000004CFE                 pop     r14
.text:0000000000004D00                 pop     r15
.text:0000000000004D02                 retn
.text:0000000000004D02 ; } // starts at 4C20
.text:0000000000004D02 quotearg_alloc_mem endp
.text:0000000000004D02
.text:0000000000004D02 ; ---------------------------------------------------------------------------
.text:0000000000004D03                 align 10h
.text:0000000000004D10
.text:0000000000004D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D10
.text:0000000000004D10
.text:0000000000004D10                 public quotearg_alloc
.text:0000000000004D10 quotearg_alloc  proc near
.text:0000000000004D10 ; __unwind {
.text:0000000000004D10                 mov     rcx, rdx
.text:0000000000004D13                 xor     edx, edx
.text:0000000000004D15                 jmp     quotearg_alloc_mem
.text:0000000000004D15 ; } // starts at 4D10
.text:0000000000004D15 quotearg_alloc  endp
.text:0000000000004D15
.text:0000000000004D15 ; ---------------------------------------------------------------------------
.text:0000000000004D1A                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20 ; Attributes: info_from_lumina
.text:0000000000004D20
.text:0000000000004D20 ; void __cdecl quotearg_free()
.text:0000000000004D20                 public quotearg_free
.text:0000000000004D20 quotearg_free   proc near
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 mov     eax, cs:nslots
.text:0000000000004D26                 push    r12
.text:0000000000004D28                 mov     r12, cs:slotvec
.text:0000000000004D2F                 push    rbp
.text:0000000000004D30                 push    rbx
.text:0000000000004D31                 cmp     eax, 1
.text:0000000000004D34                 jle     short loc_4D61
.text:0000000000004D36                 sub     eax, 2
.text:0000000000004D39                 lea     rbx, [r12+18h]
.text:0000000000004D3E                 shl     rax, 4
.text:0000000000004D42                 lea     rbp, [r12+rax+28h]
.text:0000000000004D47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004D50
.text:0000000000004D50 loc_4D50:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004D50                 mov     rdi, [rbx]      ; ptr
.text:0000000000004D53                 add     rbx, 10h
.text:0000000000004D57                 call    free
.text:0000000000004D5C                 cmp     rbx, rbp
.text:0000000000004D5F                 jnz     short loc_4D50
.text:0000000000004D61
.text:0000000000004D61 loc_4D61:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004D61                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004D66                 lea     rbx, slot0
.text:0000000000004D6D                 cmp     rdi, rbx
.text:0000000000004D70                 jz      short loc_4D89
.text:0000000000004D72                 call    free
.text:0000000000004D77                 mov     cs:slotvec0, 100h
.text:0000000000004D82                 mov     cs:off_20A078, rbx
.text:0000000000004D89
.text:0000000000004D89 loc_4D89:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004D89                 lea     rbx, slotvec0
.text:0000000000004D90                 cmp     r12, rbx
.text:0000000000004D93                 jz      short loc_4DA4
.text:0000000000004D95                 mov     rdi, r12        ; ptr
.text:0000000000004D98                 call    free
.text:0000000000004D9D                 mov     cs:slotvec, rbx
.text:0000000000004DA4
.text:0000000000004DA4 loc_4DA4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004DA4                 pop     rbx
.text:0000000000004DA5                 mov     cs:nslots, 1
.text:0000000000004DAF                 pop     rbp
.text:0000000000004DB0                 pop     r12
.text:0000000000004DB2                 retn
.text:0000000000004DB2 ; } // starts at 4D20
.text:0000000000004DB2 quotearg_free   endp
.text:0000000000004DB2
.text:0000000000004DB2 ; ---------------------------------------------------------------------------
.text:0000000000004DB3                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DC0
.text:0000000000004DC0
.text:0000000000004DC0                 public quotearg_n
.text:0000000000004DC0 quotearg_n      proc near
.text:0000000000004DC0 ; __unwind {
.text:0000000000004DC0                 lea     rcx, default_quoting_options
.text:0000000000004DC7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DCE                 jmp     quotearg_n_options
.text:0000000000004DCE ; } // starts at 4DC0
.text:0000000000004DCE quotearg_n      endp
.text:0000000000004DCE
.text:0000000000004DCE ; ---------------------------------------------------------------------------
.text:0000000000004DD3                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0                 public quotearg_n_mem
.text:0000000000004DE0 quotearg_n_mem  proc near
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 lea     rcx, default_quoting_options
.text:0000000000004DE7                 jmp     quotearg_n_options
.text:0000000000004DE7 ; } // starts at 4DE0
.text:0000000000004DE7 quotearg_n_mem  endp
.text:0000000000004DE7
.text:0000000000004DE7 ; ---------------------------------------------------------------------------
.text:0000000000004DEC                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0                 public quotearg
.text:0000000000004DF0 quotearg        proc near
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 lea     rcx, default_quoting_options
.text:0000000000004DF7                 mov     rsi, rdi
.text:0000000000004DFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E01                 xor     edi, edi
.text:0000000000004E03                 jmp     quotearg_n_options
.text:0000000000004E03 ; } // starts at 4DF0
.text:0000000000004E03 quotearg        endp
.text:0000000000004E03
.text:0000000000004E03 ; ---------------------------------------------------------------------------
.text:0000000000004E08                 align 10h
.text:0000000000004E10
.text:0000000000004E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E10
.text:0000000000004E10
.text:0000000000004E10                 public quotearg_mem
.text:0000000000004E10 quotearg_mem    proc near
.text:0000000000004E10 ; __unwind {
.text:0000000000004E10                 lea     rcx, default_quoting_options
.text:0000000000004E17                 mov     rdx, rsi
.text:0000000000004E1A                 mov     rsi, rdi
.text:0000000000004E1D                 xor     edi, edi
.text:0000000000004E1F                 jmp     quotearg_n_options
.text:0000000000004E1F ; } // starts at 4E10
.text:0000000000004E1F quotearg_mem    endp
.text:0000000000004E1F
.text:0000000000004E1F ; ---------------------------------------------------------------------------
.text:0000000000004E24                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30 ; Attributes: info_from_lumina
.text:0000000000004E30
.text:0000000000004E30 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004E30                 public quotearg_n_style
.text:0000000000004E30 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004E30
.text:0000000000004E30 var_48          = dword ptr -48h
.text:0000000000004E30 var_44          = qword ptr -44h
.text:0000000000004E30 var_3C          = qword ptr -3Ch
.text:0000000000004E30 var_34          = qword ptr -34h
.text:0000000000004E30 var_2C          = qword ptr -2Ch
.text:0000000000004E30 var_24          = qword ptr -24h
.text:0000000000004E30 var_1C          = qword ptr -1Ch
.text:0000000000004E30 var_14          = dword ptr -14h
.text:0000000000004E30 var_10          = qword ptr -10h
.text:0000000000004E30
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 sub     rsp, 48h
.text:0000000000004E34                 mov     rax, rdx
.text:0000000000004E37                 mov     rdx, fs:28h
.text:0000000000004E40                 mov     [rsp+48h+var_10], rdx
.text:0000000000004E45                 xor     edx, edx
.text:0000000000004E47                 cmp     esi, 0Ah
.text:0000000000004E4A                 jz      short loc_4EB4
.text:0000000000004E4C                 mov     [rsp+48h+var_48], esi
.text:0000000000004E4F                 mov     rcx, rsp
.text:0000000000004E52                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E59                 mov     rsi, rax
.text:0000000000004E5C                 mov     [rsp+48h+var_44], 0
.text:0000000000004E65                 mov     [rsp+48h+var_3C], 0
.text:0000000000004E6E                 mov     [rsp+48h+var_34], 0
.text:0000000000004E77                 mov     [rsp+48h+var_2C], 0
.text:0000000000004E80                 mov     [rsp+48h+var_24], 0
.text:0000000000004E89                 mov     [rsp+48h+var_1C], 0
.text:0000000000004E92                 mov     [rsp+48h+var_14], 0
.text:0000000000004E9A                 call    quotearg_n_options
.text:0000000000004E9F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004EA4                 xor     rcx, fs:28h
.text:0000000000004EAD                 jnz     short loc_4EB9
.text:0000000000004EAF                 add     rsp, 48h
.text:0000000000004EB3                 retn
.text:0000000000004EB4 ; ---------------------------------------------------------------------------
.text:0000000000004EB4
.text:0000000000004EB4 loc_4EB4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004EB4                 call    _abort
.text:0000000000004EB9 ; ---------------------------------------------------------------------------
.text:0000000000004EB9
.text:0000000000004EB9 loc_4EB9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004EB9                 call    ___stack_chk_fail
.text:0000000000004EB9 ; } // starts at 4E30
.text:0000000000004EB9 quotearg_n_style endp
.text:0000000000004EB9
.text:0000000000004EB9 ; ---------------------------------------------------------------------------
.text:0000000000004EBE                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0 ; Attributes: info_from_lumina
.text:0000000000004EC0
.text:0000000000004EC0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004EC0                 public quotearg_n_style_mem
.text:0000000000004EC0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004EC0
.text:0000000000004EC0 var_48          = dword ptr -48h
.text:0000000000004EC0 var_44          = qword ptr -44h
.text:0000000000004EC0 var_3C          = qword ptr -3Ch
.text:0000000000004EC0 var_34          = qword ptr -34h
.text:0000000000004EC0 var_2C          = qword ptr -2Ch
.text:0000000000004EC0 var_24          = qword ptr -24h
.text:0000000000004EC0 var_1C          = qword ptr -1Ch
.text:0000000000004EC0 var_14          = dword ptr -14h
.text:0000000000004EC0 var_10          = qword ptr -10h
.text:0000000000004EC0
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 sub     rsp, 48h
.text:0000000000004EC4                 mov     rax, rdx
.text:0000000000004EC7                 mov     rdx, rcx
.text:0000000000004ECA                 mov     rcx, fs:28h
.text:0000000000004ED3                 mov     [rsp+48h+var_10], rcx
.text:0000000000004ED8                 xor     ecx, ecx
.text:0000000000004EDA                 cmp     esi, 0Ah
.text:0000000000004EDD                 jz      short loc_4F40
.text:0000000000004EDF                 mov     [rsp+48h+var_48], esi
.text:0000000000004EE2                 mov     rcx, rsp
.text:0000000000004EE5                 mov     rsi, rax
.text:0000000000004EE8                 mov     [rsp+48h+var_44], 0
.text:0000000000004EF1                 mov     [rsp+48h+var_3C], 0
.text:0000000000004EFA                 mov     [rsp+48h+var_34], 0
.text:0000000000004F03                 mov     [rsp+48h+var_2C], 0
.text:0000000000004F0C                 mov     [rsp+48h+var_24], 0
.text:0000000000004F15                 mov     [rsp+48h+var_1C], 0
.text:0000000000004F1E                 mov     [rsp+48h+var_14], 0
.text:0000000000004F26                 call    quotearg_n_options
.text:0000000000004F2B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004F30                 xor     rdx, fs:28h
.text:0000000000004F39                 jnz     short loc_4F45
.text:0000000000004F3B                 add     rsp, 48h
.text:0000000000004F3F                 retn
.text:0000000000004F40 ; ---------------------------------------------------------------------------
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004F40                 call    _abort
.text:0000000000004F45 ; ---------------------------------------------------------------------------
.text:0000000000004F45
.text:0000000000004F45 loc_4F45:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004F45                 call    ___stack_chk_fail
.text:0000000000004F45 ; } // starts at 4EC0
.text:0000000000004F45 quotearg_n_style_mem endp
.text:0000000000004F45
.text:0000000000004F45 ; ---------------------------------------------------------------------------
.text:0000000000004F4A                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50
.text:0000000000004F50                 public quotearg_style
.text:0000000000004F50 quotearg_style  proc near
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 mov     rdx, rsi
.text:0000000000004F53                 mov     esi, edi
.text:0000000000004F55                 xor     edi, edi
.text:0000000000004F57                 jmp     quotearg_n_style
.text:0000000000004F57 ; } // starts at 4F50
.text:0000000000004F57 quotearg_style  endp
.text:0000000000004F57
.text:0000000000004F57 ; ---------------------------------------------------------------------------
.text:0000000000004F5C                 align 20h
.text:0000000000004F60
.text:0000000000004F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F60
.text:0000000000004F60
.text:0000000000004F60                 public quotearg_style_mem
.text:0000000000004F60 quotearg_style_mem proc near
.text:0000000000004F60 ; __unwind {
.text:0000000000004F60                 mov     rcx, rdx
.text:0000000000004F63                 mov     rdx, rsi
.text:0000000000004F66                 mov     esi, edi
.text:0000000000004F68                 xor     edi, edi
.text:0000000000004F6A                 jmp     quotearg_n_style_mem
.text:0000000000004F6A ; } // starts at 4F60
.text:0000000000004F6A quotearg_style_mem endp
.text:0000000000004F6A
.text:0000000000004F6A ; ---------------------------------------------------------------------------
.text:0000000000004F6F                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70 ; Attributes: info_from_lumina
.text:0000000000004F70
.text:0000000000004F70 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004F70                 public quotearg_char_mem
.text:0000000000004F70 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004F70                                         ; quotearg_colon+C↓j ...
.text:0000000000004F70
.text:0000000000004F70 var_48          = xmmword ptr -48h
.text:0000000000004F70 var_38          = xmmword ptr -38h
.text:0000000000004F70 var_28          = xmmword ptr -28h
.text:0000000000004F70 var_18          = qword ptr -18h
.text:0000000000004F70 var_10          = qword ptr -10h
.text:0000000000004F70
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 sub     rsp, 48h
.text:0000000000004F74                 mov     ecx, edx
.text:0000000000004F76                 mov     rax, fs:28h
.text:0000000000004F7F                 mov     [rsp+48h+var_10], rax
.text:0000000000004F84                 xor     eax, eax
.text:0000000000004F86                 mov     rax, cs:qword_20A2B0
.text:0000000000004F8D                 mov     r8, rsp
.text:0000000000004F90                 and     ecx, 1Fh
.text:0000000000004F93                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004F9B                 mov     [rsp+48h+var_18], rax
.text:0000000000004FA0                 mov     eax, edx
.text:0000000000004FA2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004FA6                 shr     al, 5
.text:0000000000004FA9                 movzx   eax, al
.text:0000000000004FAC                 lea     r9, [r8+rax*4+8]
.text:0000000000004FB1                 movdqa  xmm0, cs:xmmword_20A290
.text:0000000000004FB9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004FBE                 movdqa  xmm0, cs:xmmword_20A2A0
.text:0000000000004FC6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004FCB                 mov     edx, [r9]
.text:0000000000004FCE                 mov     eax, edx
.text:0000000000004FD0                 shr     eax, cl
.text:0000000000004FD2                 not     eax
.text:0000000000004FD4                 and     eax, 1
.text:0000000000004FD7                 shl     eax, cl
.text:0000000000004FD9                 mov     rcx, r8
.text:0000000000004FDC                 xor     eax, edx
.text:0000000000004FDE                 mov     rdx, rsi
.text:0000000000004FE1                 mov     rsi, rdi
.text:0000000000004FE4                 mov     [r9], eax
.text:0000000000004FE7                 xor     edi, edi
.text:0000000000004FE9                 call    quotearg_n_options
.text:0000000000004FEE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004FF3                 xor     rsi, fs:28h
.text:0000000000004FFC                 jnz     short loc_5003
.text:0000000000004FFE                 add     rsp, 48h
.text:0000000000005002                 retn
.text:0000000000005003 ; ---------------------------------------------------------------------------
.text:0000000000005003
.text:0000000000005003 loc_5003:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005003                 call    ___stack_chk_fail
.text:0000000000005003 ; } // starts at 4F70
.text:0000000000005003 quotearg_char_mem endp
.text:0000000000005003
.text:0000000000005003 ; ---------------------------------------------------------------------------
.text:0000000000005008                 align 10h
.text:0000000000005010
.text:0000000000005010 ; =============== S U B R O U T I N E =======================================
.text:0000000000005010
.text:0000000000005010
.text:0000000000005010                 public quotearg_char
.text:0000000000005010 quotearg_char   proc near
.text:0000000000005010 ; __unwind {
.text:0000000000005010                 movsx   edx, sil
.text:0000000000005014                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000501B                 jmp     quotearg_char_mem
.text:000000000000501B ; } // starts at 5010
.text:000000000000501B quotearg_char   endp
.text:000000000000501B
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020
.text:0000000000005020                 public quotearg_colon
.text:0000000000005020 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 mov     edx, 3Ah ; ':'
.text:0000000000005025                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000502C                 jmp     quotearg_char_mem
.text:000000000000502C ; } // starts at 5020
.text:000000000000502C quotearg_colon  endp
.text:000000000000502C
.text:000000000000502C ; ---------------------------------------------------------------------------
.text:0000000000005031                 align 20h
.text:0000000000005040
.text:0000000000005040 ; =============== S U B R O U T I N E =======================================
.text:0000000000005040
.text:0000000000005040
.text:0000000000005040                 public quotearg_colon_mem
.text:0000000000005040 quotearg_colon_mem proc near
.text:0000000000005040 ; __unwind {
.text:0000000000005040                 mov     edx, 3Ah ; ':'
.text:0000000000005045                 jmp     quotearg_char_mem
.text:0000000000005045 ; } // starts at 5040
.text:0000000000005045 quotearg_colon_mem endp
.text:0000000000005045
.text:0000000000005045 ; ---------------------------------------------------------------------------
.text:000000000000504A                 align 10h
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050 ; Attributes: info_from_lumina
.text:0000000000005050
.text:0000000000005050 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005050                 public quotearg_n_style_colon
.text:0000000000005050 quotearg_n_style_colon proc near        ; CODE XREF: main+34E↑p
.text:0000000000005050                                         ; dc_parse_stream+295↑p ...
.text:0000000000005050
.text:0000000000005050 var_48          = dword ptr -48h
.text:0000000000005050 var_44          = qword ptr -44h
.text:0000000000005050 var_3C          = qword ptr -3Ch
.text:0000000000005050 var_34          = qword ptr -34h
.text:0000000000005050 var_2C          = qword ptr -2Ch
.text:0000000000005050 var_24          = qword ptr -24h
.text:0000000000005050 var_1C          = qword ptr -1Ch
.text:0000000000005050 var_14          = dword ptr -14h
.text:0000000000005050 var_10          = qword ptr -10h
.text:0000000000005050
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 sub     rsp, 48h
.text:0000000000005054                 mov     rax, rdx
.text:0000000000005057                 mov     rdx, fs:28h
.text:0000000000005060                 mov     [rsp+48h+var_10], rdx
.text:0000000000005065                 xor     edx, edx
.text:0000000000005067                 cmp     esi, 0Ah
.text:000000000000506A                 jz      short loc_50D4
.text:000000000000506C                 mov     [rsp+48h+var_48], esi
.text:000000000000506F                 mov     rcx, rsp
.text:0000000000005072                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005079                 mov     rsi, rax
.text:000000000000507C                 mov     [rsp+48h+var_44], 0
.text:0000000000005085                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000508E                 mov     [rsp+48h+var_34], 0
.text:0000000000005097                 mov     [rsp+48h+var_2C], 0
.text:00000000000050A0                 mov     [rsp+48h+var_24], 0
.text:00000000000050A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000050B2                 mov     [rsp+48h+var_14], 0
.text:00000000000050BA                 call    quotearg_n_options
.text:00000000000050BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000050C4                 xor     rcx, fs:28h
.text:00000000000050CD                 jnz     short loc_50D9
.text:00000000000050CF                 add     rsp, 48h
.text:00000000000050D3                 retn
.text:00000000000050D4 ; ---------------------------------------------------------------------------
.text:00000000000050D4
.text:00000000000050D4 loc_50D4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000050D4                 call    _abort
.text:00000000000050D9 ; ---------------------------------------------------------------------------
.text:00000000000050D9
.text:00000000000050D9 loc_50D9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000050D9                 call    ___stack_chk_fail
.text:00000000000050D9 ; } // starts at 5050
.text:00000000000050D9 quotearg_n_style_colon endp
.text:00000000000050D9
.text:00000000000050D9 ; ---------------------------------------------------------------------------
.text:00000000000050DE                 align 20h
.text:00000000000050E0
.text:00000000000050E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050E0
.text:00000000000050E0 ; Attributes: info_from_lumina
.text:00000000000050E0
.text:00000000000050E0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000050E0                 public quotearg_n_custom_mem
.text:00000000000050E0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000050E0                                         ; quotearg_custom+12↓j ...
.text:00000000000050E0
.text:00000000000050E0 var_48          = xmmword ptr -48h
.text:00000000000050E0 var_38          = xmmword ptr -38h
.text:00000000000050E0 var_28          = xmmword ptr -28h
.text:00000000000050E0 var_18          = qword ptr -18h
.text:00000000000050E0 var_10          = qword ptr -10h
.text:00000000000050E0
.text:00000000000050E0 ; __unwind {
.text:00000000000050E0                 sub     rsp, 48h
.text:00000000000050E4                 mov     r9, rcx
.text:00000000000050E7                 mov     rcx, cs:qword_20A2B0
.text:00000000000050EE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000050F6                 mov     rax, fs:28h
.text:00000000000050FF                 mov     [rsp+48h+var_10], rax
.text:0000000000005104                 xor     eax, eax
.text:0000000000005106                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000510A                 test    rsi, rsi
.text:000000000000510D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005112                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005119                 movdqa  xmm0, cs:xmmword_20A290
.text:0000000000005121                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005126                 movdqa  xmm0, cs:xmmword_20A2A0
.text:000000000000512E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005133                 jz      short loc_5167
.text:0000000000005135                 test    rdx, rdx
.text:0000000000005138                 jz      short loc_5167
.text:000000000000513A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000513F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005144                 mov     rcx, rsp
.text:0000000000005147                 mov     rdx, r8
.text:000000000000514A                 mov     rsi, r9
.text:000000000000514D                 call    quotearg_n_options
.text:0000000000005152                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005157                 xor     rdi, fs:28h
.text:0000000000005160                 jnz     short loc_516C
.text:0000000000005162                 add     rsp, 48h
.text:0000000000005166                 retn
.text:0000000000005167 ; ---------------------------------------------------------------------------
.text:0000000000005167
.text:0000000000005167 loc_5167:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005167                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005167                 call    _abort
.text:000000000000516C ; ---------------------------------------------------------------------------
.text:000000000000516C
.text:000000000000516C loc_516C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000516C                 call    ___stack_chk_fail
.text:000000000000516C ; } // starts at 50E0
.text:000000000000516C quotearg_n_custom_mem endp
.text:000000000000516C
.text:000000000000516C ; ---------------------------------------------------------------------------
.text:0000000000005171                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180
.text:0000000000005180                 public quotearg_n_custom
.text:0000000000005180 quotearg_n_custom proc near
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005187                 jmp     quotearg_n_custom_mem
.text:0000000000005187 ; } // starts at 5180
.text:0000000000005187 quotearg_n_custom endp
.text:0000000000005187
.text:0000000000005187 ; ---------------------------------------------------------------------------
.text:000000000000518C                 align 10h
.text:0000000000005190
.text:0000000000005190 ; =============== S U B R O U T I N E =======================================
.text:0000000000005190
.text:0000000000005190
.text:0000000000005190                 public quotearg_custom
.text:0000000000005190 quotearg_custom proc near
.text:0000000000005190 ; __unwind {
.text:0000000000005190                 mov     rcx, rdx
.text:0000000000005193                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000519A                 mov     rdx, rsi
.text:000000000000519D                 mov     rsi, rdi
.text:00000000000051A0                 xor     edi, edi
.text:00000000000051A2                 jmp     quotearg_n_custom_mem
.text:00000000000051A2 ; } // starts at 5190
.text:00000000000051A2 quotearg_custom endp
.text:00000000000051A2
.text:00000000000051A2 ; ---------------------------------------------------------------------------
.text:00000000000051A7                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0
.text:00000000000051B0                 public quotearg_custom_mem
.text:00000000000051B0 quotearg_custom_mem proc near
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 mov     r8, rcx
.text:00000000000051B3                 mov     rcx, rdx
.text:00000000000051B6                 mov     rdx, rsi
.text:00000000000051B9                 mov     rsi, rdi
.text:00000000000051BC                 xor     edi, edi
.text:00000000000051BE                 jmp     quotearg_n_custom_mem
.text:00000000000051BE ; } // starts at 51B0
.text:00000000000051BE quotearg_custom_mem endp
.text:00000000000051BE
.text:00000000000051BE ; ---------------------------------------------------------------------------
.text:00000000000051C3                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0
.text:00000000000051D0                 public quote_n_mem
.text:00000000000051D0 quote_n_mem     proc near
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 lea     rcx, quote_quoting_options
.text:00000000000051D7                 jmp     quotearg_n_options
.text:00000000000051D7 ; } // starts at 51D0
.text:00000000000051D7 quote_n_mem     endp
.text:00000000000051D7
.text:00000000000051D7 ; ---------------------------------------------------------------------------
.text:00000000000051DC                 align 20h
.text:00000000000051E0
.text:00000000000051E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051E0
.text:00000000000051E0
.text:00000000000051E0                 public quote_mem
.text:00000000000051E0 quote_mem       proc near
.text:00000000000051E0 ; __unwind {
.text:00000000000051E0                 lea     rcx, quote_quoting_options
.text:00000000000051E7                 mov     rdx, rsi
.text:00000000000051EA                 mov     rsi, rdi
.text:00000000000051ED                 xor     edi, edi
.text:00000000000051EF                 jmp     quotearg_n_options
.text:00000000000051EF ; } // starts at 51E0
.text:00000000000051EF quote_mem       endp
.text:00000000000051EF
.text:00000000000051EF ; ---------------------------------------------------------------------------
.text:00000000000051F4                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200                 public quote_n
.text:0000000000005200 quote_n         proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 lea     rcx, quote_quoting_options
.text:0000000000005207                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000520E                 jmp     quotearg_n_options
.text:000000000000520E ; } // starts at 5200
.text:000000000000520E quote_n         endp
.text:000000000000520E
.text:000000000000520E ; ---------------------------------------------------------------------------
.text:0000000000005213                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220
.text:0000000000005220                 public quote
.text:0000000000005220 quote           proc near               ; CODE XREF: main+39C↑p
.text:0000000000005220                                         ; main+41C↑p
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 lea     rcx, quote_quoting_options
.text:0000000000005227                 mov     rsi, rdi
.text:000000000000522A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005231                 xor     edi, edi
.text:0000000000005233                 jmp     quotearg_n_options
.text:0000000000005233 ; } // starts at 5220
.text:0000000000005233 quote           endp
.text:0000000000005233
.text:0000000000005233 ; ---------------------------------------------------------------------------
.text:0000000000005238                 align 20h
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240
.text:0000000000005240 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005240                 public version_etc_arn
.text:0000000000005240 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_567B↓j
.text:0000000000005240                                         ; version_etc_va:loc_56CB↓p ...
.text:0000000000005240
.text:0000000000005240 var_58          = qword ptr -58h
.text:0000000000005240 var_50          = qword ptr -50h
.text:0000000000005240 var_48          = qword ptr -48h
.text:0000000000005240 var_40          = qword ptr -40h
.text:0000000000005240
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 push    r15
.text:0000000000005242                 push    r14
.text:0000000000005244                 push    r13
.text:0000000000005246                 push    r12
.text:0000000000005248                 mov     r12, r9
.text:000000000000524B                 push    rbp
.text:000000000000524C                 push    rbx
.text:000000000000524D                 mov     rbp, rdi
.text:0000000000005250                 mov     rbx, r8
.text:0000000000005253                 sub     rsp, 28h
.text:0000000000005257                 test    rsi, rsi
.text:000000000000525A                 jz      loc_5378
.text:0000000000005260                 mov     r8, rdx
.text:0000000000005263                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000526A                 mov     r9, rcx
.text:000000000000526D                 xor     eax, eax
.text:000000000000526F                 mov     rcx, rsi
.text:0000000000005272                 mov     esi, 1
.text:0000000000005277                 call    ___fprintf_chk
.text:000000000000527C
.text:000000000000527C loc_527C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000527C                 lea     rsi, aC         ; "(C)"
.text:0000000000005283                 xor     edi, edi        ; domainname
.text:0000000000005285                 mov     edx, 5          ; category
.text:000000000000528A                 call    _dcgettext
.text:000000000000528F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005296                 mov     rcx, rax
.text:0000000000005299                 mov     r8d, 7E3h
.text:000000000000529F                 mov     esi, 1
.text:00000000000052A4                 mov     rdi, rbp
.text:00000000000052A7                 xor     eax, eax
.text:00000000000052A9                 call    ___fprintf_chk
.text:00000000000052AE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000052B5                 xor     edi, edi        ; domainname
.text:00000000000052B7                 mov     edx, 5          ; category
.text:00000000000052BC                 call    _dcgettext
.text:00000000000052C1                 mov     rsi, rbp        ; stream
.text:00000000000052C4                 mov     rdi, rax        ; s
.text:00000000000052C7                 call    _fputs_unlocked
.text:00000000000052CC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000052D0                 ja      def_52E4        ; jumptable 00000000000052E4 default case
.text:00000000000052D6                 lea     rdx, jpt_52E4
.text:00000000000052DD                 movsxd  rax, ds:(jpt_52E4 - 81E8h)[rdx+r12*4]
.text:00000000000052E1                 add     rax, rdx
.text:00000000000052E4                 jmp     rax             ; switch jump
.text:00000000000052E4 ; ---------------------------------------------------------------------------
.text:00000000000052E6                 align 10h
.text:00000000000052F0
.text:00000000000052F0 loc_52F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000052F0                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:00000000000052F0                 mov     r9, [rbx+38h]   ; jumptable 00000000000052E4 case 8
.text:00000000000052F4                 mov     rax, [rbx+10h]
.text:00000000000052F8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000052FF                 mov     r8, [rbx+8]
.text:0000000000005303                 mov     edx, 5          ; category
.text:0000000000005308                 xor     edi, edi        ; domainname
.text:000000000000530A                 mov     r13, [rbx+30h]
.text:000000000000530E                 mov     r12, [rbx+28h]
.text:0000000000005312                 mov     [rsp+58h+var_48], r9
.text:0000000000005317                 mov     r15, [rbx+20h]
.text:000000000000531B                 mov     r14, [rbx+18h]
.text:000000000000531F                 mov     [rsp+58h+var_58], rax
.text:0000000000005323                 mov     [rsp+58h+var_50], r8
.text:0000000000005328                 mov     rbx, [rbx]
.text:000000000000532B                 call    _dcgettext
.text:0000000000005330                 sub     rsp, 8
.text:0000000000005334
.text:0000000000005334 loc_5334:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005334                 mov     r9, [rsp+60h+var_48]
.text:0000000000005339                 mov     rdx, rax
.text:000000000000533C                 mov     rcx, rbx
.text:000000000000533F                 mov     esi, 1
.text:0000000000005344                 mov     rdi, rbp
.text:0000000000005347                 xor     eax, eax
.text:0000000000005349                 push    r9
.text:000000000000534B                 push    r13
.text:000000000000534D                 push    r12
.text:000000000000534F                 push    r15
.text:0000000000005351                 push    r14
.text:0000000000005353                 mov     r9, [rsp+88h+var_58]
.text:0000000000005358                 mov     r8, [rsp+88h+var_50]
.text:000000000000535D                 call    ___fprintf_chk
.text:0000000000005362                 add     rsp, 30h
.text:0000000000005366
.text:0000000000005366 loc_5366:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005366                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:0000000000005366                 add     rsp, 28h        ; jumptable 00000000000052E4 case 0
.text:000000000000536A                 pop     rbx
.text:000000000000536B                 pop     rbp
.text:000000000000536C                 pop     r12
.text:000000000000536E                 pop     r13
.text:0000000000005370                 pop     r14
.text:0000000000005372                 pop     r15
.text:0000000000005374                 retn
.text:0000000000005374 ; ---------------------------------------------------------------------------
.text:0000000000005375                 align 8
.text:0000000000005378
.text:0000000000005378 loc_5378:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005378                 mov     r8, rcx
.text:000000000000537B                 mov     rcx, rdx
.text:000000000000537E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005385                 mov     esi, 1
.text:000000000000538A                 xor     eax, eax
.text:000000000000538C                 call    ___fprintf_chk
.text:0000000000005391                 jmp     loc_527C
.text:0000000000005391 ; ---------------------------------------------------------------------------
.text:0000000000005396                 align 20h
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000053A0                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:00000000000053A0                 mov     r10, [rbx+40h]  ; jumptable 00000000000052E4 case 9
.text:00000000000053A4                 mov     r9, [rbx+38h]
.text:00000000000053A8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000053AF                 mov     rax, [rbx+10h]
.text:00000000000053B3                 mov     r8, [rbx+8]
.text:00000000000053B7                 mov     edx, 5          ; category
.text:00000000000053BC                 mov     r13, [rbx+30h]
.text:00000000000053C0                 mov     r12, [rbx+28h]
.text:00000000000053C4                 mov     r15, [rbx+20h]
.text:00000000000053C8                 mov     r14, [rbx+18h]
.text:00000000000053CC                 mov     rbx, [rbx]
.text:00000000000053CF                 mov     [rsp+58h+var_40], r10
.text:00000000000053D4                 mov     [rsp+58h+var_48], r9
.text:00000000000053D9                 mov     [rsp+58h+var_58], rax
.text:00000000000053DD                 mov     [rsp+58h+var_50], r8
.text:00000000000053E2
.text:00000000000053E2 loc_53E2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000053E2                 xor     edi, edi        ; domainname
.text:00000000000053E4                 call    _dcgettext
.text:00000000000053E9                 mov     r10, [rsp+58h+var_40]
.text:00000000000053EE                 push    r10
.text:00000000000053F0                 jmp     loc_5334
.text:00000000000053F0 ; ---------------------------------------------------------------------------
.text:00000000000053F5                 align 8
.text:00000000000053F8
.text:00000000000053F8 loc_53F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000053F8                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:00000000000053F8                 mov     rbx, [rbx]      ; jumptable 00000000000052E4 case 1
.text:00000000000053FB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005402                 mov     edx, 5          ; category
.text:0000000000005407                 xor     edi, edi        ; domainname
.text:0000000000005409                 call    _dcgettext
.text:000000000000540E                 add     rsp, 28h
.text:0000000000005412                 mov     rcx, rbx
.text:0000000000005415                 mov     rdi, rbp
.text:0000000000005418                 pop     rbx
.text:0000000000005419                 pop     rbp
.text:000000000000541A                 pop     r12
.text:000000000000541C                 pop     r13
.text:000000000000541E                 pop     r14
.text:0000000000005420                 pop     r15
.text:0000000000005422                 mov     rdx, rax
.text:0000000000005425                 mov     esi, 1
.text:000000000000542A                 xor     eax, eax
.text:000000000000542C                 jmp     ___fprintf_chk
.text:000000000000542C ; ---------------------------------------------------------------------------
.text:0000000000005431                 align 8
.text:0000000000005438
.text:0000000000005438 loc_5438:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005438                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:0000000000005438                 mov     r12, [rbx+8]    ; jumptable 00000000000052E4 case 2
.text:000000000000543C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005443                 mov     rbx, [rbx]
.text:0000000000005446                 mov     edx, 5          ; category
.text:000000000000544B                 xor     edi, edi        ; domainname
.text:000000000000544D                 call    _dcgettext
.text:0000000000005452                 add     rsp, 28h
.text:0000000000005456                 mov     r8, r12
.text:0000000000005459                 mov     rcx, rbx
.text:000000000000545C                 mov     rdi, rbp
.text:000000000000545F                 mov     rdx, rax
.text:0000000000005462                 mov     esi, 1
.text:0000000000005467                 pop     rbx
.text:0000000000005468                 pop     rbp
.text:0000000000005469                 pop     r12
.text:000000000000546B                 pop     r13
.text:000000000000546D                 pop     r14
.text:000000000000546F                 pop     r15
.text:0000000000005471                 xor     eax, eax
.text:0000000000005473                 jmp     ___fprintf_chk
.text:0000000000005473 ; ---------------------------------------------------------------------------
.text:0000000000005478                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005480                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:0000000000005480                 mov     r13, [rbx+10h]  ; jumptable 00000000000052E4 case 3
.text:0000000000005484                 mov     r12, [rbx+8]
.text:0000000000005488                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000548F                 mov     rbx, [rbx]
.text:0000000000005492                 mov     edx, 5          ; category
.text:0000000000005497                 xor     edi, edi        ; domainname
.text:0000000000005499                 call    _dcgettext
.text:000000000000549E                 add     rsp, 28h
.text:00000000000054A2                 mov     r9, r13
.text:00000000000054A5                 mov     r8, r12
.text:00000000000054A8                 mov     rcx, rbx
.text:00000000000054AB                 mov     rdi, rbp
.text:00000000000054AE                 mov     rdx, rax
.text:00000000000054B1                 pop     rbx
.text:00000000000054B2                 pop     rbp
.text:00000000000054B3                 pop     r12
.text:00000000000054B5                 pop     r13
.text:00000000000054B7                 pop     r14
.text:00000000000054B9                 pop     r15
.text:00000000000054BB                 mov     esi, 1
.text:00000000000054C0                 xor     eax, eax
.text:00000000000054C2                 jmp     ___fprintf_chk
.text:00000000000054C2 ; ---------------------------------------------------------------------------
.text:00000000000054C7                 align 10h
.text:00000000000054D0
.text:00000000000054D0 loc_54D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000054D0                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:00000000000054D0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000052E4 case 4
.text:00000000000054D7                 mov     edx, 5          ; category
.text:00000000000054DC                 xor     edi, edi        ; domainname
.text:00000000000054DE                 mov     r14, [rbx+18h]
.text:00000000000054E2                 mov     r13, [rbx+10h]
.text:00000000000054E6                 mov     r12, [rbx+8]
.text:00000000000054EA                 mov     rbx, [rbx]
.text:00000000000054ED                 call    _dcgettext
.text:00000000000054F2                 sub     rsp, 8
.text:00000000000054F6
.text:00000000000054F6 loc_54F6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000054F6                 push    r14
.text:00000000000054F8                 mov     rdx, rax
.text:00000000000054FB                 mov     r9, r13
.text:00000000000054FE                 mov     r8, r12
.text:0000000000005501                 mov     rcx, rbx
.text:0000000000005504                 mov     rdi, rbp
.text:0000000000005507                 mov     esi, 1
.text:000000000000550C                 xor     eax, eax
.text:000000000000550E                 call    ___fprintf_chk
.text:0000000000005513                 pop     rax
.text:0000000000005514                 pop     rdx
.text:0000000000005515                 add     rsp, 28h
.text:0000000000005519                 pop     rbx
.text:000000000000551A                 pop     rbp
.text:000000000000551B                 pop     r12
.text:000000000000551D                 pop     r13
.text:000000000000551F                 pop     r14
.text:0000000000005521                 pop     r15
.text:0000000000005523                 retn
.text:0000000000005523 ; ---------------------------------------------------------------------------
.text:0000000000005524                 align 8
.text:0000000000005528
.text:0000000000005528 loc_5528:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005528                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:0000000000005528                 mov     r15, [rbx+20h]  ; jumptable 00000000000052E4 case 5
.text:000000000000552C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005533                 mov     edx, 5          ; category
.text:0000000000005538                 xor     edi, edi        ; domainname
.text:000000000000553A                 mov     r14, [rbx+18h]
.text:000000000000553E                 mov     r13, [rbx+10h]
.text:0000000000005542                 mov     r12, [rbx+8]
.text:0000000000005546                 mov     rbx, [rbx]
.text:0000000000005549                 call    _dcgettext
.text:000000000000554E                 push    r15
.text:0000000000005550                 jmp     short loc_54F6
.text:0000000000005550 ; ---------------------------------------------------------------------------
.text:0000000000005552                 align 8
.text:0000000000005558
.text:0000000000005558 loc_5558:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005558                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:0000000000005558                 mov     r8, [rbx+8]     ; jumptable 00000000000052E4 case 6
.text:000000000000555C                 mov     r12, [rbx+28h]
.text:0000000000005560                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005567                 mov     r15, [rbx+20h]
.text:000000000000556B                 mov     r14, [rbx+18h]
.text:000000000000556F                 mov     edx, 5          ; category
.text:0000000000005574                 mov     r13, [rbx+10h]
.text:0000000000005578                 xor     edi, edi        ; domainname
.text:000000000000557A                 mov     rbx, [rbx]
.text:000000000000557D                 mov     [rsp+58h+var_58], r8
.text:0000000000005581                 call    _dcgettext
.text:0000000000005586                 sub     rsp, 8
.text:000000000000558A                 mov     r9, r13
.text:000000000000558D                 push    r12
.text:000000000000558F                 push    r15
.text:0000000000005591                 push    r14
.text:0000000000005593
.text:0000000000005593 loc_5593:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005593                 mov     r8, [rsp+78h+var_58]
.text:0000000000005598                 mov     rcx, rbx
.text:000000000000559B                 mov     rdx, rax
.text:000000000000559E                 mov     rdi, rbp
.text:00000000000055A1                 mov     esi, 1
.text:00000000000055A6                 xor     eax, eax
.text:00000000000055A8                 call    ___fprintf_chk
.text:00000000000055AD                 add     rsp, 20h
.text:00000000000055B1                 add     rsp, 28h
.text:00000000000055B5                 pop     rbx
.text:00000000000055B6                 pop     rbp
.text:00000000000055B7                 pop     r12
.text:00000000000055B9                 pop     r13
.text:00000000000055BB                 pop     r14
.text:00000000000055BD                 pop     r15
.text:00000000000055BF                 retn
.text:00000000000055C0 ; ---------------------------------------------------------------------------
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055C0                                         ; DATA XREF: .rodata:jpt_52E4↓o
.text:00000000000055C0                 mov     r9, [rbx+10h]   ; jumptable 00000000000052E4 case 7
.text:00000000000055C4                 mov     r13, [rbx+30h]
.text:00000000000055C8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000055CF                 mov     r12, [rbx+28h]
.text:00000000000055D3                 mov     r15, [rbx+20h]
.text:00000000000055D7                 mov     edx, 5          ; category
.text:00000000000055DC                 mov     r14, [rbx+18h]
.text:00000000000055E0                 mov     r8, [rbx+8]
.text:00000000000055E4                 xor     edi, edi        ; domainname
.text:00000000000055E6                 mov     [rsp+58h+var_50], r9
.text:00000000000055EB                 mov     rbx, [rbx]
.text:00000000000055EE                 mov     [rsp+58h+var_58], r8
.text:00000000000055F2                 call    _dcgettext
.text:00000000000055F7                 push    r13
.text:00000000000055F9                 push    r12
.text:00000000000055FB                 push    r15
.text:00000000000055FD                 push    r14
.text:00000000000055FF                 mov     r9, [rsp+78h+var_50]
.text:0000000000005604                 jmp     short loc_5593
.text:0000000000005604 ; ---------------------------------------------------------------------------
.text:0000000000005606                 align 10h
.text:0000000000005610
.text:0000000000005610 def_52E4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005610                 mov     r10, [rbx+40h]  ; jumptable 00000000000052E4 default case
.text:0000000000005614                 mov     r9, [rbx+38h]
.text:0000000000005618                 mov     edx, 5
.text:000000000000561D                 mov     rax, [rbx+10h]
.text:0000000000005621                 mov     r8, [rbx+8]
.text:0000000000005625                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000562C                 mov     r13, [rbx+30h]
.text:0000000000005630                 mov     r12, [rbx+28h]
.text:0000000000005634                 mov     r15, [rbx+20h]
.text:0000000000005638                 mov     r14, [rbx+18h]
.text:000000000000563C                 mov     [rsp+58h+var_40], r10
.text:0000000000005641                 mov     [rsp+58h+var_48], r9
.text:0000000000005646                 mov     [rsp+58h+var_58], rax
.text:000000000000564A                 mov     [rsp+58h+var_50], r8
.text:000000000000564F                 mov     rbx, [rbx]
.text:0000000000005652                 jmp     loc_53E2
.text:0000000000005652 ; } // starts at 5240
.text:0000000000005652 version_etc_arn endp
.text:0000000000005652
.text:0000000000005652 ; ---------------------------------------------------------------------------
.text:0000000000005657                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660 ; Attributes: info_from_lumina
.text:0000000000005660
.text:0000000000005660 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005660                 public version_etc_ar
.text:0000000000005660 version_etc_ar  proc near
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 xor     r9d, r9d
.text:0000000000005663                 cmp     qword ptr [r8], 0
.text:0000000000005667                 jz      short loc_567B
.text:0000000000005669                 nop     dword ptr [rax+00000000h]
.text:0000000000005670
.text:0000000000005670 loc_5670:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005670                 add     r9, 1
.text:0000000000005674                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005679                 jnz     short loc_5670
.text:000000000000567B
.text:000000000000567B loc_567B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000567B                 jmp     version_etc_arn
.text:000000000000567B ; } // starts at 5660
.text:000000000000567B version_etc_ar  endp
.text:000000000000567B
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680 ; Attributes: info_from_lumina
.text:0000000000005680
.text:0000000000005680 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005680                 public version_etc_va
.text:0000000000005680 version_etc_va  proc near
.text:0000000000005680
.text:0000000000005680 authtab         = qword ptr -68h
.text:0000000000005680 var_10          = qword ptr -10h
.text:0000000000005680
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 sub     rsp, 68h
.text:0000000000005684                 mov     r10, r8
.text:0000000000005687                 xor     r9d, r9d
.text:000000000000568A                 mov     rax, fs:28h
.text:0000000000005693                 mov     [rsp+68h+var_10], rax
.text:0000000000005698                 xor     eax, eax
.text:000000000000569A                 mov     r8, rsp
.text:000000000000569D                 nop     dword ptr [rax]
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000056A0                 mov     eax, [r10]
.text:00000000000056A3                 cmp     eax, 2Fh ; '/'
.text:00000000000056A6                 ja      short loc_56EA
.text:00000000000056A8                 mov     r11d, eax
.text:00000000000056AB                 add     r11, [r10+10h]
.text:00000000000056AF                 add     eax, 8
.text:00000000000056B2                 mov     [r10], eax
.text:00000000000056B5
.text:00000000000056B5 loc_56B5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000056B5                 mov     rax, [r11]
.text:00000000000056B8                 test    rax, rax
.text:00000000000056BB                 mov     [r8+r9*8], rax
.text:00000000000056BF                 jz      short loc_56CB
.text:00000000000056C1                 add     r9, 1
.text:00000000000056C5                 cmp     r9, 0Ah
.text:00000000000056C9                 jnz     short loc_56A0
.text:00000000000056CB
.text:00000000000056CB loc_56CB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000056CB                 call    version_etc_arn
.text:00000000000056D0                 mov     rax, [rsp+68h+var_10]
.text:00000000000056D5                 xor     rax, fs:28h
.text:00000000000056DE                 jnz     short loc_56E5
.text:00000000000056E0                 add     rsp, 68h
.text:00000000000056E4                 retn
.text:00000000000056E5 ; ---------------------------------------------------------------------------
.text:00000000000056E5
.text:00000000000056E5 loc_56E5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000056E5                 call    ___stack_chk_fail
.text:00000000000056EA ; ---------------------------------------------------------------------------
.text:00000000000056EA
.text:00000000000056EA loc_56EA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000056EA                 mov     r11, [r10+8]
.text:00000000000056EE                 lea     rax, [r11+8]
.text:00000000000056F2                 mov     [r10+8], rax
.text:00000000000056F6                 jmp     short loc_56B5
.text:00000000000056F6 ; } // starts at 5680
.text:00000000000056F6 version_etc_va  endp
.text:00000000000056F6
.text:00000000000056F6 ; ---------------------------------------------------------------------------
.text:00000000000056F8                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700 ; Attributes: info_from_lumina
.text:0000000000005700
.text:0000000000005700 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005700                 public version_etc
.text:0000000000005700 version_etc     proc near               ; CODE XREF: main+D3↑p
.text:0000000000005700
.text:0000000000005700 var_C0          = dword ptr -0C0h
.text:0000000000005700 var_B8          = qword ptr -0B8h
.text:0000000000005700 var_B0          = qword ptr -0B0h
.text:0000000000005700 var_A8          = byte ptr -0A8h
.text:0000000000005700 var_50          = qword ptr -50h
.text:0000000000005700 var_48          = byte ptr -48h
.text:0000000000005700 var_28          = qword ptr -28h
.text:0000000000005700 var_20          = qword ptr -20h
.text:0000000000005700 arg_0           = byte ptr  8
.text:0000000000005700
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 push    rbp
.text:0000000000005701                 push    rbx
.text:0000000000005702                 mov     r10d, 20h ; ' '
.text:0000000000005708                 xor     r11d, r11d
.text:000000000000570B                 sub     rsp, 0B8h
.text:0000000000005712                 mov     rax, fs:28h
.text:000000000000571B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005720                 xor     eax, eax
.text:0000000000005722                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000572A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005732                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000573A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000573F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005747                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000574F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005754                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000575C                 xor     r9d, r9d
.text:000000000000575F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005764                 mov     rbp, rax
.text:0000000000005767                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005770                 cmp     r10d, 2Fh ; '/'
.text:0000000000005774                 ja      short loc_57CC
.text:0000000000005776                 mov     eax, r10d
.text:0000000000005779                 mov     r11d, 1
.text:000000000000577F                 add     r10d, 8
.text:0000000000005783                 add     rax, rbp
.text:0000000000005786
.text:0000000000005786 loc_5786:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005786                 mov     rax, [rax]
.text:0000000000005789                 test    rax, rax
.text:000000000000578C                 mov     [r8+r9*8], rax
.text:0000000000005790                 jz      short loc_579C
.text:0000000000005792                 add     r9, 1
.text:0000000000005796                 cmp     r9, 0Ah
.text:000000000000579A                 jnz     short loc_5770
.text:000000000000579C
.text:000000000000579C loc_579C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000579C                 test    r11b, r11b
.text:000000000000579F                 jnz     short loc_57C5
.text:00000000000057A1
.text:00000000000057A1 loc_57A1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000057A1                 call    version_etc_arn
.text:00000000000057A6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000057AB                 xor     rax, fs:28h
.text:00000000000057B4                 jnz     short loc_57C0
.text:00000000000057B6                 add     rsp, 0B8h
.text:00000000000057BD                 pop     rbx
.text:00000000000057BE                 pop     rbp
.text:00000000000057BF                 retn
.text:00000000000057C0 ; ---------------------------------------------------------------------------
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000057C0                 call    ___stack_chk_fail
.text:00000000000057C5 ; ---------------------------------------------------------------------------
.text:00000000000057C5
.text:00000000000057C5 loc_57C5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000057C5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000057CA                 jmp     short loc_57A1
.text:00000000000057CC ; ---------------------------------------------------------------------------
.text:00000000000057CC
.text:00000000000057CC loc_57CC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000057CC                 mov     rax, rbx
.text:00000000000057CF                 add     rbx, 8
.text:00000000000057D3                 jmp     short loc_5786
.text:00000000000057D3 ; } // starts at 5700
.text:00000000000057D3 version_etc     endp
.text:00000000000057D3
.text:00000000000057D3 ; ---------------------------------------------------------------------------
.text:00000000000057D5                 align 20h
.text:00000000000057E0
.text:00000000000057E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057E0
.text:00000000000057E0 ; Attributes: info_from_lumina
.text:00000000000057E0
.text:00000000000057E0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000057E0                 public emit_bug_reporting_address
.text:00000000000057E0 emit_bug_reporting_address proc near
.text:00000000000057E0 ; __unwind {
.text:00000000000057E0                 push    rbx
.text:00000000000057E1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000057E8                 mov     edx, 5          ; category
.text:00000000000057ED                 xor     edi, edi        ; domainname
.text:00000000000057EF                 call    _dcgettext
.text:00000000000057F4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000057FB                 mov     rsi, rax
.text:00000000000057FE                 mov     edi, 1
.text:0000000000005803                 xor     eax, eax
.text:0000000000005805                 call    ___printf_chk
.text:000000000000580A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005811                 mov     edx, 5          ; category
.text:0000000000005816                 xor     edi, edi        ; domainname
.text:0000000000005818                 call    _dcgettext
.text:000000000000581D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005824                 lea     rdx, unk_6275
.text:000000000000582B                 mov     rsi, rax
.text:000000000000582E                 mov     edi, 1
.text:0000000000005833                 xor     eax, eax
.text:0000000000005835                 call    ___printf_chk
.text:000000000000583A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005841                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005848                 xor     edi, edi        ; domainname
.text:000000000000584A                 mov     edx, 5          ; category
.text:000000000000584F                 call    _dcgettext
.text:0000000000005854                 mov     rsi, rbx        ; stream
.text:0000000000005857                 mov     rdi, rax        ; s
.text:000000000000585A                 pop     rbx
.text:000000000000585B                 jmp     _fputs_unlocked
.text:000000000000585B ; } // starts at 57E0
.text:000000000000585B emit_bug_reporting_address endp
.text:000000000000585B
.text:0000000000005860
.text:0000000000005860 ; =============== S U B R O U T I N E =======================================
.text:0000000000005860
.text:0000000000005860
.text:0000000000005860                 public xmalloc
.text:0000000000005860 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005860                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005860 ; __unwind {
.text:0000000000005860                 push    rbx
.text:0000000000005861                 mov     rbx, rdi
.text:0000000000005864                 call    malloc
.text:0000000000005869                 test    rax, rax
.text:000000000000586C                 jnz     short loc_5873
.text:000000000000586E                 test    rbx, rbx
.text:0000000000005871                 jnz     short loc_5875
.text:0000000000005873
.text:0000000000005873 loc_5873:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005873                 pop     rbx
.text:0000000000005874                 retn
.text:0000000000005875 ; ---------------------------------------------------------------------------
.text:0000000000005875
.text:0000000000005875 loc_5875:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005875                 call    xalloc_die
.text:0000000000005875 ; } // starts at 5860
.text:0000000000005875 xmalloc         endp
.text:0000000000005875
.text:0000000000005875 ; ---------------------------------------------------------------------------
.text:000000000000587A                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880 ; Attributes: info_from_lumina
.text:0000000000005880
.text:0000000000005880 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005880                 public xnmalloc
.text:0000000000005880 xnmalloc        proc near
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 mov     rax, rdi
.text:0000000000005883                 mul     rsi
.text:0000000000005886                 mov     rdi, rax
.text:0000000000005889                 seto    al
.text:000000000000588C                 test    rdi, rdi
.text:000000000000588F                 js      short loc_589B
.text:0000000000005891                 movzx   eax, al
.text:0000000000005894                 test    rax, rax
.text:0000000000005897                 jnz     short loc_589B
.text:0000000000005899                 jmp     short xmalloc
.text:000000000000589B ; ---------------------------------------------------------------------------
.text:000000000000589B
.text:000000000000589B loc_589B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000589B                                         ; xnmalloc+17↑j
.text:000000000000589B                 sub     rsp, 8
.text:000000000000589F                 call    xalloc_die
.text:000000000000589F ; } // starts at 5880
.text:000000000000589F xnmalloc        endp
.text:000000000000589F
.text:000000000000589F ; ---------------------------------------------------------------------------
.text:00000000000058A4                 align 10h
.text:00000000000058B0
.text:00000000000058B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058B0
.text:00000000000058B0
.text:00000000000058B0                 public xcharalloc
.text:00000000000058B0 xcharalloc      proc near
.text:00000000000058B0 ; __unwind {
.text:00000000000058B0                 jmp     short xmalloc
.text:00000000000058B0 ; } // starts at 58B0
.text:00000000000058B0 xcharalloc      endp
.text:00000000000058B0
.text:00000000000058B0 ; ---------------------------------------------------------------------------
.text:00000000000058B2                 align 20h
.text:00000000000058C0
.text:00000000000058C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058C0
.text:00000000000058C0 ; Attributes: info_from_lumina
.text:00000000000058C0
.text:00000000000058C0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000058C0                 public xrealloc
.text:00000000000058C0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000058C0                                         ; quotearg_n_options+182↑p ...
.text:00000000000058C0 ; __unwind {
.text:00000000000058C0                 test    rsi, rsi
.text:00000000000058C3                 push    rbx
.text:00000000000058C4                 mov     rbx, rsi
.text:00000000000058C7                 jnz     short loc_58CE
.text:00000000000058C9                 test    rdi, rdi
.text:00000000000058CC                 jnz     short loc_58E8
.text:00000000000058CE
.text:00000000000058CE loc_58CE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000058CE                 mov     rsi, rbx        ; size
.text:00000000000058D1                 call    _realloc
.text:00000000000058D6                 test    rax, rax
.text:00000000000058D9                 jnz     short loc_58E0
.text:00000000000058DB                 test    rbx, rbx
.text:00000000000058DE                 jnz     short loc_58F1
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000058E0                 pop     rbx
.text:00000000000058E1                 retn
.text:00000000000058E1 ; ---------------------------------------------------------------------------
.text:00000000000058E2                 align 8
.text:00000000000058E8
.text:00000000000058E8 loc_58E8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000058E8                 call    free
.text:00000000000058ED                 xor     eax, eax
.text:00000000000058EF                 pop     rbx
.text:00000000000058F0                 retn
.text:00000000000058F1 ; ---------------------------------------------------------------------------
.text:00000000000058F1
.text:00000000000058F1 loc_58F1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000058F1                 call    xalloc_die
.text:00000000000058F1 ; } // starts at 58C0
.text:00000000000058F1 xrealloc        endp
.text:00000000000058F1
.text:00000000000058F1 ; ---------------------------------------------------------------------------
.text:00000000000058F6                 align 20h
.text:0000000000005900
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900
.text:0000000000005900 ; Attributes: info_from_lumina
.text:0000000000005900
.text:0000000000005900 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005900                 public xnrealloc
.text:0000000000005900 xnrealloc       proc near
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 mov     rax, rsi
.text:0000000000005903                 mul     rdx
.text:0000000000005906                 mov     rsi, rax
.text:0000000000005909                 seto    al
.text:000000000000590C                 test    rsi, rsi
.text:000000000000590F                 js      short loc_591B
.text:0000000000005911                 movzx   eax, al
.text:0000000000005914                 test    rax, rax
.text:0000000000005917                 jnz     short loc_591B
.text:0000000000005919                 jmp     short xrealloc
.text:000000000000591B ; ---------------------------------------------------------------------------
.text:000000000000591B
.text:000000000000591B loc_591B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000591B                                         ; xnrealloc+17↑j
.text:000000000000591B                 sub     rsp, 8
.text:000000000000591F                 call    xalloc_die
.text:000000000000591F ; } // starts at 5900
.text:000000000000591F xnrealloc       endp
.text:000000000000591F
.text:000000000000591F ; ---------------------------------------------------------------------------
.text:0000000000005924                 align 10h
.text:0000000000005930
.text:0000000000005930 ; =============== S U B R O U T I N E =======================================
.text:0000000000005930
.text:0000000000005930 ; Attributes: info_from_lumina
.text:0000000000005930
.text:0000000000005930 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005930                 public x2nrealloc
.text:0000000000005930 x2nrealloc      proc near
.text:0000000000005930 ; __unwind {
.text:0000000000005930                 test    rdi, rdi
.text:0000000000005933                 mov     r9, rdx
.text:0000000000005936                 mov     rcx, [rsi]
.text:0000000000005939                 jz      short loc_5970
.text:000000000000593B                 xor     edx, edx
.text:000000000000593D                 mov     rax, 5555555555555554h
.text:0000000000005947                 div     r9
.text:000000000000594A                 cmp     rax, rcx
.text:000000000000594D                 jbe     short loc_598B
.text:000000000000594F                 mov     rax, rcx
.text:0000000000005952                 shr     rax, 1
.text:0000000000005955                 lea     rcx, [rax+rcx+1]
.text:000000000000595A
.text:000000000000595A loc_595A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000595A                 mov     [rsi], rcx
.text:000000000000595D                 imul    rcx, r9
.text:0000000000005961                 mov     rsi, rcx
.text:0000000000005964                 jmp     xrealloc
.text:0000000000005964 ; ---------------------------------------------------------------------------
.text:0000000000005969                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005970                 test    rcx, rcx
.text:0000000000005973                 jz      short loc_5998
.text:0000000000005975
.text:0000000000005975 loc_5975:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005975                 mov     rax, rcx
.text:0000000000005978                 mul     r9
.text:000000000000597B                 seto    dl
.text:000000000000597E                 test    rax, rax
.text:0000000000005981                 movzx   edx, dl
.text:0000000000005984                 js      short loc_598B
.text:0000000000005986                 test    rdx, rdx
.text:0000000000005989                 jz      short loc_595A
.text:000000000000598B
.text:000000000000598B loc_598B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000598B                                         ; x2nrealloc+54↑j
.text:000000000000598B                 sub     rsp, 8
.text:000000000000598F                 call    xalloc_die
.text:000000000000598F ; ---------------------------------------------------------------------------
.text:0000000000005994                 align 8
.text:0000000000005998
.text:0000000000005998 loc_5998:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005998                 xor     edx, edx
.text:000000000000599A                 mov     eax, 80h
.text:000000000000599F                 xor     r8d, r8d
.text:00000000000059A2                 div     r9
.text:00000000000059A5                 test    rax, rax
.text:00000000000059A8                 setz    r8b
.text:00000000000059AC                 lea     rcx, [r8+rax]
.text:00000000000059B0                 jmp     short loc_5975
.text:00000000000059B0 ; } // starts at 5930
.text:00000000000059B0 x2nrealloc      endp
.text:00000000000059B0
.text:00000000000059B0 ; ---------------------------------------------------------------------------
.text:00000000000059B2                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0 ; Attributes: info_from_lumina
.text:00000000000059C0
.text:00000000000059C0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000059C0                 public x2realloc
.text:00000000000059C0 x2realloc       proc near
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 test    rdi, rdi
.text:00000000000059C3                 mov     rax, [rsi]
.text:00000000000059C6                 jz      short loc_59F0
.text:00000000000059C8                 mov     rdx, 5555555555555553h
.text:00000000000059D2                 cmp     rax, rdx
.text:00000000000059D5                 ja      short loc_5A01
.text:00000000000059D7                 mov     rdx, rax
.text:00000000000059DA                 shr     rdx, 1
.text:00000000000059DD                 lea     rax, [rdx+rax+1]
.text:00000000000059E2
.text:00000000000059E2 loc_59E2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000059E2                 mov     [rsi], rax
.text:00000000000059E5                 mov     rsi, rax
.text:00000000000059E8                 jmp     xrealloc
.text:00000000000059E8 ; ---------------------------------------------------------------------------
.text:00000000000059ED                 align 10h
.text:00000000000059F0
.text:00000000000059F0 loc_59F0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000059F0                 test    rax, rax
.text:00000000000059F3                 mov     edx, 80h
.text:00000000000059F8                 cmovz   rax, rdx
.text:00000000000059FC                 test    rax, rax
.text:00000000000059FF                 jns     short loc_59E2
.text:0000000000005A01
.text:0000000000005A01 loc_5A01:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005A01                 sub     rsp, 8
.text:0000000000005A05                 call    xalloc_die
.text:0000000000005A05 ; } // starts at 59C0
.text:0000000000005A05 x2realloc       endp
.text:0000000000005A05
.text:0000000000005A05 ; ---------------------------------------------------------------------------
.text:0000000000005A0A                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10
.text:0000000000005A10 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005A10                 public xzalloc
.text:0000000000005A10 xzalloc         proc near
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 push    rbx
.text:0000000000005A11                 mov     rbx, rdi
.text:0000000000005A14                 call    xmalloc
.text:0000000000005A19                 mov     rdx, rbx        ; n
.text:0000000000005A1C                 xor     esi, esi        ; c
.text:0000000000005A1E                 mov     rdi, rax        ; s
.text:0000000000005A21                 pop     rbx
.text:0000000000005A22                 jmp     _memset
.text:0000000000005A22 ; } // starts at 5A10
.text:0000000000005A22 xzalloc         endp
.text:0000000000005A22
.text:0000000000005A22 ; ---------------------------------------------------------------------------
.text:0000000000005A27                 align 10h
.text:0000000000005A30
.text:0000000000005A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A30
.text:0000000000005A30 ; Attributes: info_from_lumina
.text:0000000000005A30
.text:0000000000005A30 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005A30                 public xcalloc
.text:0000000000005A30 xcalloc         proc near
.text:0000000000005A30 ; __unwind {
.text:0000000000005A30                 mov     rax, rdi
.text:0000000000005A33                 sub     rsp, 8
.text:0000000000005A37                 mul     rsi
.text:0000000000005A3A                 seto    dl
.text:0000000000005A3D                 test    rax, rax
.text:0000000000005A40                 js      short loc_5A59
.text:0000000000005A42                 movzx   edx, dl
.text:0000000000005A45                 test    rdx, rdx
.text:0000000000005A48                 jnz     short loc_5A59
.text:0000000000005A4A                 call    _calloc
.text:0000000000005A4F                 test    rax, rax
.text:0000000000005A52                 jz      short loc_5A59
.text:0000000000005A54                 add     rsp, 8
.text:0000000000005A58                 retn
.text:0000000000005A59 ; ---------------------------------------------------------------------------
.text:0000000000005A59
.text:0000000000005A59 loc_5A59:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005A59                                         ; xcalloc+18↑j ...
.text:0000000000005A59                 call    xalloc_die
.text:0000000000005A59 ; } // starts at 5A30
.text:0000000000005A59 xcalloc         endp
.text:0000000000005A59
.text:0000000000005A59 ; ---------------------------------------------------------------------------
.text:0000000000005A5E                 align 20h
.text:0000000000005A60
.text:0000000000005A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A60
.text:0000000000005A60 ; Attributes: info_from_lumina
.text:0000000000005A60
.text:0000000000005A60 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005A60                 public xmemdup
.text:0000000000005A60 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005A60                                         ; xstrdup+11↓j
.text:0000000000005A60 ; __unwind {
.text:0000000000005A60                 push    rbp
.text:0000000000005A61                 push    rbx
.text:0000000000005A62                 mov     rbp, rdi
.text:0000000000005A65                 mov     rdi, rsi
.text:0000000000005A68                 mov     rbx, rsi
.text:0000000000005A6B                 sub     rsp, 8
.text:0000000000005A6F                 call    xmalloc
.text:0000000000005A74                 add     rsp, 8
.text:0000000000005A78                 mov     rdx, rbx        ; n
.text:0000000000005A7B                 mov     rsi, rbp        ; src
.text:0000000000005A7E                 pop     rbx
.text:0000000000005A7F                 pop     rbp
.text:0000000000005A80                 mov     rdi, rax        ; dest
.text:0000000000005A83                 jmp     _memcpy
.text:0000000000005A83 ; } // starts at 5A60
.text:0000000000005A83 xmemdup         endp
.text:0000000000005A83
.text:0000000000005A83 ; ---------------------------------------------------------------------------
.text:0000000000005A88                 align 10h
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90
.text:0000000000005A90 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005A90                 public xstrdup
.text:0000000000005A90 xstrdup         proc near
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 push    rbx
.text:0000000000005A91                 mov     rbx, rdi
.text:0000000000005A94                 call    _strlen
.text:0000000000005A99                 mov     rdi, rbx        ; src
.text:0000000000005A9C                 lea     rsi, [rax+1]    ; n
.text:0000000000005AA0                 pop     rbx
.text:0000000000005AA1                 jmp     short xmemdup
.text:0000000000005AA1 ; } // starts at 5A90
.text:0000000000005AA1 xstrdup         endp
.text:0000000000005AA1
.text:0000000000005AA1 ; ---------------------------------------------------------------------------
.text:0000000000005AA3                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AB0
.text:0000000000005AB0 ; Attributes: noreturn info_from_lumina
.text:0000000000005AB0
.text:0000000000005AB0 ; void __cdecl xalloc_die()
.text:0000000000005AB0                 public xalloc_die
.text:0000000000005AB0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4A86↑p
.text:0000000000005AB0                                         ; xmalloc:loc_5875↑p ...
.text:0000000000005AB0 ; __unwind {
.text:0000000000005AB0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005AB7                 sub     rsp, 8
.text:0000000000005ABB                 mov     edx, 5          ; category
.text:0000000000005AC0                 xor     edi, edi        ; domainname
.text:0000000000005AC2                 call    _dcgettext
.text:0000000000005AC7                 mov     edi, cs:exit_failure ; status
.text:0000000000005ACD                 lea     rdx, format+4   ; format
.text:0000000000005AD4                 mov     rcx, rax
.text:0000000000005AD7                 xor     esi, esi        ; errnum
.text:0000000000005AD9                 xor     eax, eax
.text:0000000000005ADB                 call    _error
.text:0000000000005AE0                 call    _abort
.text:0000000000005AE0 ; } // starts at 5AB0
.text:0000000000005AE0 xalloc_die      endp
.text:0000000000005AE0
.text:0000000000005AE0 ; ---------------------------------------------------------------------------
.text:0000000000005AE5                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0
.text:0000000000005AF0                 public xstrndup
.text:0000000000005AF0 xstrndup        proc near               ; CODE XREF: dc_parse_stream+107↑p
.text:0000000000005AF0                                         ; dc_parse_stream+178↑p
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 sub     rsp, 8
.text:0000000000005AF4                 call    _strndup
.text:0000000000005AF9                 test    rax, rax
.text:0000000000005AFC                 jz      short loc_5B03
.text:0000000000005AFE                 add     rsp, 8
.text:0000000000005B02                 retn
.text:0000000000005B03 ; ---------------------------------------------------------------------------
.text:0000000000005B03
.text:0000000000005B03 loc_5B03:                               ; CODE XREF: xstrndup+C↑j
.text:0000000000005B03                 call    xalloc_die
.text:0000000000005B03 ; } // starts at 5AF0
.text:0000000000005B03 xstrndup        endp
.text:0000000000005B03
.text:0000000000005B03 ; ---------------------------------------------------------------------------
.text:0000000000005B08                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10 ; Attributes: info_from_lumina
.text:0000000000005B10
.text:0000000000005B10 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005B10                 public rpl_fclose
.text:0000000000005B10 rpl_fclose      proc near               ; CODE XREF: main+1F4↑p
.text:0000000000005B10                                         ; close_stream+15↓p
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 push    r12
.text:0000000000005B12                 push    rbp
.text:0000000000005B13                 push    rbx
.text:0000000000005B14                 mov     rbx, rdi
.text:0000000000005B17                 call    _fileno
.text:0000000000005B1C                 test    eax, eax
.text:0000000000005B1E                 mov     rdi, rbx        ; fp
.text:0000000000005B21                 js      short loc_5B77
.text:0000000000005B23                 call    ___freading
.text:0000000000005B28                 test    eax, eax
.text:0000000000005B2A                 jnz     short loc_5B58
.text:0000000000005B2C
.text:0000000000005B2C loc_5B2C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005B2C                 mov     rdi, rbx        ; stream
.text:0000000000005B2F                 call    rpl_fflush
.text:0000000000005B34                 test    eax, eax
.text:0000000000005B36                 jz      short loc_5B74
.text:0000000000005B38                 call    ___errno_location
.text:0000000000005B3D                 mov     r12d, [rax]
.text:0000000000005B40                 mov     rdi, rbx        ; stream
.text:0000000000005B43                 mov     rbp, rax
.text:0000000000005B46                 call    _fclose
.text:0000000000005B4B                 test    r12d, r12d
.text:0000000000005B4E                 jnz     short loc_5B80
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005B50                 pop     rbx
.text:0000000000005B51                 pop     rbp
.text:0000000000005B52                 pop     r12
.text:0000000000005B54                 retn
.text:0000000000005B54 ; ---------------------------------------------------------------------------
.text:0000000000005B55                 align 8
.text:0000000000005B58
.text:0000000000005B58 loc_5B58:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005B58                 mov     rdi, rbx        ; stream
.text:0000000000005B5B                 call    _fileno
.text:0000000000005B60                 xor     esi, esi        ; offset
.text:0000000000005B62                 mov     edx, 1          ; whence
.text:0000000000005B67                 mov     edi, eax        ; fd
.text:0000000000005B69                 call    _lseek
.text:0000000000005B6E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B72                 jnz     short loc_5B2C
.text:0000000000005B74
.text:0000000000005B74 loc_5B74:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005B74                 mov     rdi, rbx        ; stream
.text:0000000000005B77
.text:0000000000005B77 loc_5B77:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005B77                 pop     rbx
.text:0000000000005B78                 pop     rbp
.text:0000000000005B79                 pop     r12
.text:0000000000005B7B                 jmp     _fclose
.text:0000000000005B80 ; ---------------------------------------------------------------------------
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005B80                 mov     [rbp+0], r12d
.text:0000000000005B84                 mov     eax, 0FFFFFFFFh
.text:0000000000005B89                 jmp     short loc_5B50
.text:0000000000005B89 ; } // starts at 5B10
.text:0000000000005B89 rpl_fclose      endp
.text:0000000000005B89
.text:0000000000005B89 ; ---------------------------------------------------------------------------
.text:0000000000005B8B                 align 10h
.text:0000000000005B90
.text:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B90
.text:0000000000005B90 ; Attributes: info_from_lumina
.text:0000000000005B90
.text:0000000000005B90 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005B90                 public rpl_fflush
.text:0000000000005B90 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005B90 ; __unwind {
.text:0000000000005B90                 test    rdi, rdi
.text:0000000000005B93                 push    rbx
.text:0000000000005B94                 mov     rbx, rdi
.text:0000000000005B97                 jz      short loc_5BAA
.text:0000000000005B99                 call    ___freading
.text:0000000000005B9E                 test    eax, eax
.text:0000000000005BA0                 jz      short loc_5BAA
.text:0000000000005BA2                 test    dword ptr [rbx], 100h
.text:0000000000005BA8                 jnz     short loc_5BB8
.text:0000000000005BAA
.text:0000000000005BAA loc_5BAA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005BAA                                         ; rpl_fflush+10↑j
.text:0000000000005BAA                 mov     rdi, rbx        ; stream
.text:0000000000005BAD                 pop     rbx
.text:0000000000005BAE                 jmp     _fflush
.text:0000000000005BAE ; ---------------------------------------------------------------------------
.text:0000000000005BB3                 align 8
.text:0000000000005BB8
.text:0000000000005BB8 loc_5BB8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005BB8                 mov     rdi, rbx
.text:0000000000005BBB                 mov     edx, 1
.text:0000000000005BC0                 xor     esi, esi
.text:0000000000005BC2                 call    rpl_fseeko
.text:0000000000005BC7                 mov     rdi, rbx        ; stream
.text:0000000000005BCA                 pop     rbx
.text:0000000000005BCB                 jmp     _fflush
.text:0000000000005BCB ; } // starts at 5B90
.text:0000000000005BCB rpl_fflush      endp
.text:0000000000005BCB
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0 ; Attributes: info_from_lumina
.text:0000000000005BD0
.text:0000000000005BD0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005BD0                 public rpl_fseeko
.text:0000000000005BD0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 mov     rax, [rdi+8]
.text:0000000000005BD4                 cmp     [rdi+10h], rax
.text:0000000000005BD8                 jz      short loc_5BE0
.text:0000000000005BDA
.text:0000000000005BDA loc_5BDA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005BDA                                         ; rpl_fseeko+1F↓j
.text:0000000000005BDA                 jmp     _fseeko
.text:0000000000005BDA ; ---------------------------------------------------------------------------
.text:0000000000005BDF                 align 20h
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005BE0                 mov     rax, [rdi+20h]
.text:0000000000005BE4                 cmp     [rdi+28h], rax
.text:0000000000005BE8                 jnz     short loc_5BDA
.text:0000000000005BEA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005BEF                 jnz     short loc_5BDA
.text:0000000000005BF1                 push    r12
.text:0000000000005BF3                 push    rbp
.text:0000000000005BF4                 mov     r12d, edx
.text:0000000000005BF7                 push    rbx
.text:0000000000005BF8                 mov     rbp, rsi
.text:0000000000005BFB                 mov     rbx, rdi
.text:0000000000005BFE                 call    _fileno
.text:0000000000005C03                 mov     edx, r12d       ; whence
.text:0000000000005C06                 mov     rsi, rbp        ; offset
.text:0000000000005C09                 mov     edi, eax        ; fd
.text:0000000000005C0B                 call    _lseek
.text:0000000000005C10                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C14                 jz      short loc_5C22
.text:0000000000005C16                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005C19                 mov     [rbx+90h], rax
.text:0000000000005C20                 xor     eax, eax
.text:0000000000005C22
.text:0000000000005C22 loc_5C22:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005C22                 pop     rbx
.text:0000000000005C23                 pop     rbp
.text:0000000000005C24                 pop     r12
.text:0000000000005C26                 retn
.text:0000000000005C26 ; } // starts at 5BD0
.text:0000000000005C26 rpl_fseeko      endp
.text:0000000000005C26
.text:0000000000005C26 ; ---------------------------------------------------------------------------
.text:0000000000005C27                 align 10h
.text:0000000000005C30
.text:0000000000005C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C30
.text:0000000000005C30 ; Attributes: info_from_lumina
.text:0000000000005C30
.text:0000000000005C30 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005C30                 public rpl_mbrtowc
.text:0000000000005C30 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005C30
.text:0000000000005C30 pwc             = dword ptr -34h
.text:0000000000005C30 var_30          = qword ptr -30h
.text:0000000000005C30
.text:0000000000005C30 ; __unwind {
.text:0000000000005C30                 push    r13
.text:0000000000005C32                 push    r12
.text:0000000000005C34                 mov     r13, rsi
.text:0000000000005C37                 push    rbp
.text:0000000000005C38                 push    rbx
.text:0000000000005C39                 mov     rbx, rdi
.text:0000000000005C3C                 mov     r12, rdx
.text:0000000000005C3F                 sub     rsp, 18h
.text:0000000000005C43                 mov     rax, fs:28h
.text:0000000000005C4C                 mov     [rsp+38h+var_30], rax
.text:0000000000005C51                 xor     eax, eax
.text:0000000000005C53                 lea     rax, [rsp+38h+pwc]
.text:0000000000005C58                 test    rdi, rdi
.text:0000000000005C5B                 cmovz   rbx, rax
.text:0000000000005C5F                 mov     rdi, rbx        ; pwc
.text:0000000000005C62                 call    _mbrtowc
.text:0000000000005C67                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005C6B                 mov     rbp, rax
.text:0000000000005C6E                 jbe     short loc_5C90
.text:0000000000005C70                 test    r12, r12
.text:0000000000005C73                 jz      short loc_5C90
.text:0000000000005C75                 xor     edi, edi
.text:0000000000005C77                 call    hard_locale
.text:0000000000005C7C                 test    al, al
.text:0000000000005C7E                 jnz     short loc_5C90
.text:0000000000005C80                 movzx   eax, byte ptr [r13+0]
.text:0000000000005C85                 mov     ebp, 1
.text:0000000000005C8A                 mov     [rbx], eax
.text:0000000000005C8C                 nop     dword ptr [rax+00h]
.text:0000000000005C90
.text:0000000000005C90 loc_5C90:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005C90                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005C90                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005C95                 xor     rdx, fs:28h
.text:0000000000005C9E                 mov     rax, rbp
.text:0000000000005CA1                 jnz     short loc_5CAE
.text:0000000000005CA3                 add     rsp, 18h
.text:0000000000005CA7                 pop     rbx
.text:0000000000005CA8                 pop     rbp
.text:0000000000005CA9                 pop     r12
.text:0000000000005CAB                 pop     r13
.text:0000000000005CAD                 retn
.text:0000000000005CAE ; ---------------------------------------------------------------------------
.text:0000000000005CAE
.text:0000000000005CAE loc_5CAE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005CAE                 call    ___stack_chk_fail
.text:0000000000005CAE ; } // starts at 5C30
.text:0000000000005CAE rpl_mbrtowc     endp
.text:0000000000005CAE
.text:0000000000005CAE ; ---------------------------------------------------------------------------
.text:0000000000005CB3                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CC0
.text:0000000000005CC0 ; Attributes: noreturn info_from_lumina
.text:0000000000005CC0
.text:0000000000005CC0 ; void __cdecl print_and_abort()
.text:0000000000005CC0 print_and_abort proc near               ; CODE XREF: _obstack_begin_worker:loc_5DBD↓p
.text:0000000000005CC0                                         ; _obstack_newchunk:loc_5EF5↓p
.text:0000000000005CC0                                         ; DATA XREF: ...
.text:0000000000005CC0 ; __unwind {
.text:0000000000005CC0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005CC7                 sub     rsp, 8
.text:0000000000005CCB                 mov     edx, 5          ; category
.text:0000000000005CD0                 xor     edi, edi        ; domainname
.text:0000000000005CD2                 call    _dcgettext
.text:0000000000005CD7                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005CDE                 lea     rdx, aSSS+8     ; "%s\n"
.text:0000000000005CE5                 mov     rcx, rax
.text:0000000000005CE8                 mov     esi, 1
.text:0000000000005CED                 xor     eax, eax
.text:0000000000005CEF                 call    ___fprintf_chk
.text:0000000000005CF4                 mov     edi, cs:exit_failure ; status
.text:0000000000005CFA                 call    _exit
.text:0000000000005CFA ; } // starts at 5CC0
.text:0000000000005CFA print_and_abort endp
.text:0000000000005CFA
.text:0000000000005CFA ; ---------------------------------------------------------------------------
.text:0000000000005CFF                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00
.text:0000000000005D00 call_chunkfun   proc near               ; CODE XREF: _obstack_begin_worker+29↓p
.text:0000000000005D00                                         ; _obstack_newchunk+58↓p
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 test    byte ptr [rdi+50h], 1
.text:0000000000005D04                 mov     rax, [rdi+38h]
.text:0000000000005D08                 jnz     short loc_5D10
.text:0000000000005D0A                 mov     rdi, rsi
.text:0000000000005D0D                 jmp     rax
.text:0000000000005D0D ; ---------------------------------------------------------------------------
.text:0000000000005D0F                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: call_chunkfun+8↑j
.text:0000000000005D10                 mov     rdi, [rdi+48h]
.text:0000000000005D14                 jmp     rax
.text:0000000000005D14 ; } // starts at 5D00
.text:0000000000005D14 call_chunkfun   endp
.text:0000000000005D14
.text:0000000000005D14 ; ---------------------------------------------------------------------------
.text:0000000000005D16                 align 20h
.text:0000000000005D20
.text:0000000000005D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D20
.text:0000000000005D20
.text:0000000000005D20 call_freefun    proc near               ; CODE XREF: _obstack_newchunk+DE↓p
.text:0000000000005D20                                         ; _obstack_free+2C↓p
.text:0000000000005D20 ; __unwind {
.text:0000000000005D20                 test    byte ptr [rdi+50h], 1
.text:0000000000005D24                 mov     rax, [rdi+40h]
.text:0000000000005D28                 jnz     short loc_5D30
.text:0000000000005D2A                 mov     rdi, rsi
.text:0000000000005D2D                 jmp     rax
.text:0000000000005D2D ; ---------------------------------------------------------------------------
.text:0000000000005D2F                 align 10h
.text:0000000000005D30
.text:0000000000005D30 loc_5D30:                               ; CODE XREF: call_freefun+8↑j
.text:0000000000005D30                 mov     rdi, [rdi+48h]
.text:0000000000005D34                 jmp     rax
.text:0000000000005D34 ; } // starts at 5D20
.text:0000000000005D34 call_freefun    endp
.text:0000000000005D34
.text:0000000000005D34 ; ---------------------------------------------------------------------------
.text:0000000000005D36                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40 ; Attributes: info_from_lumina
.text:0000000000005D40
.text:0000000000005D40 ; int __fastcall obstack_begin_worker(obstack *h, size_t size, size_t alignment)
.text:0000000000005D40 _obstack_begin_worker proc near         ; CODE XREF: _obstack_begin+C↓j
.text:0000000000005D40                                         ; _obstack_begin_1+10↓j
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 test    rdx, rdx
.text:0000000000005D43                 push    r12
.text:0000000000005D45                 push    rbp
.text:0000000000005D46                 push    rbx
.text:0000000000005D47                 mov     rbx, rdi
.text:0000000000005D4A                 jz      short loc_5DB0
.text:0000000000005D4C                 lea     r12, [rdx-1]
.text:0000000000005D50                 mov     rbp, rdx
.text:0000000000005D53
.text:0000000000005D53 loc_5D53:                               ; CODE XREF: _obstack_begin_worker+7B↓j
.text:0000000000005D53                 test    rsi, rsi
.text:0000000000005D56                 mov     eax, 0FE0h
.text:0000000000005D5B                 mov     [rbx+30h], r12
.text:0000000000005D5F                 cmovz   rsi, rax
.text:0000000000005D63                 mov     rdi, rbx
.text:0000000000005D66                 mov     [rbx], rsi
.text:0000000000005D69                 call    call_chunkfun
.text:0000000000005D6E                 test    rax, rax
.text:0000000000005D71                 mov     [rbx+8], rax
.text:0000000000005D75                 jz      short loc_5DBD
.text:0000000000005D77                 lea     rdx, [rax+r12+10h]
.text:0000000000005D7C                 neg     rbp
.text:0000000000005D7F                 and     rbp, rdx
.text:0000000000005D82                 mov     rdx, [rbx]
.text:0000000000005D85                 mov     [rbx+10h], rbp
.text:0000000000005D89                 mov     [rbx+18h], rbp
.text:0000000000005D8D                 add     rdx, rax
.text:0000000000005D90                 mov     [rax], rdx
.text:0000000000005D93                 mov     [rbx+20h], rdx
.text:0000000000005D97                 mov     qword ptr [rax+8], 0
.text:0000000000005D9F                 mov     eax, 1
.text:0000000000005DA4                 and     byte ptr [rbx+50h], 0F9h
.text:0000000000005DA8                 pop     rbx
.text:0000000000005DA9                 pop     rbp
.text:0000000000005DAA                 pop     r12
.text:0000000000005DAC                 retn
.text:0000000000005DAC ; ---------------------------------------------------------------------------
.text:0000000000005DAD                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 loc_5DB0:                               ; CODE XREF: _obstack_begin_worker+A↑j
.text:0000000000005DB0                 mov     r12d, 0Fh
.text:0000000000005DB6                 mov     ebp, 10h
.text:0000000000005DBB                 jmp     short loc_5D53
.text:0000000000005DBD ; ---------------------------------------------------------------------------
.text:0000000000005DBD
.text:0000000000005DBD loc_5DBD:                               ; CODE XREF: _obstack_begin_worker+35↑j
.text:0000000000005DBD                 call    cs:obstack_alloc_failed_handler
.text:0000000000005DBD ; } // starts at 5D40
.text:0000000000005DBD _obstack_begin_worker endp
.text:0000000000005DBD
.text:0000000000005DBD ; ---------------------------------------------------------------------------
.text:0000000000005DC3                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0
.text:0000000000005DD0                 public _obstack_begin
.text:0000000000005DD0 _obstack_begin  proc near               ; CODE XREF: main+19A↑p
.text:0000000000005DD0                                         ; DATA XREF: LOAD:00000000000008E8↑o
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 and     byte ptr [rdi+50h], 0FEh
.text:0000000000005DD4                 mov     [rdi+38h], rcx
.text:0000000000005DD8                 mov     [rdi+40h], r8
.text:0000000000005DDC                 jmp     _obstack_begin_worker
.text:0000000000005DDC ; } // starts at 5DD0
.text:0000000000005DDC _obstack_begin  endp
.text:0000000000005DDC
.text:0000000000005DDC ; ---------------------------------------------------------------------------
.text:0000000000005DE1                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DF0
.text:0000000000005DF0
.text:0000000000005DF0                 public _obstack_begin_1
.text:0000000000005DF0 _obstack_begin_1 proc near              ; DATA XREF: LOAD:0000000000000888↑o
.text:0000000000005DF0 ; __unwind {
.text:0000000000005DF0                 or      byte ptr [rdi+50h], 1
.text:0000000000005DF4                 mov     [rdi+38h], rcx
.text:0000000000005DF8                 mov     [rdi+40h], r8
.text:0000000000005DFC                 mov     [rdi+48h], r9
.text:0000000000005E00                 jmp     _obstack_begin_worker
.text:0000000000005E00 ; } // starts at 5DF0
.text:0000000000005E00 _obstack_begin_1 endp
.text:0000000000005E00
.text:0000000000005E00 ; ---------------------------------------------------------------------------
.text:0000000000005E05                 align 10h
.text:0000000000005E10
.text:0000000000005E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E10
.text:0000000000005E10 ; Attributes: info_from_lumina
.text:0000000000005E10
.text:0000000000005E10 ; void __fastcall obstack_newchunk(obstack *h, size_t length)
.text:0000000000005E10                 public _obstack_newchunk
.text:0000000000005E10 _obstack_newchunk proc near             ; CODE XREF: append_quoted+C9↑p
.text:0000000000005E10                                         ; append_quoted+170↑p ...
.text:0000000000005E10 ; __unwind {
.text:0000000000005E10                 push    r14
.text:0000000000005E12                 push    r13
.text:0000000000005E14                 xor     edx, edx
.text:0000000000005E16                 push    r12
.text:0000000000005E18                 push    rbp
.text:0000000000005E19                 push    rbx
.text:0000000000005E1A                 mov     rbx, [rdi+18h]
.text:0000000000005E1E                 sub     rbx, [rdi+10h]
.text:0000000000005E22                 mov     rbp, [rdi+8]
.text:0000000000005E26                 add     rsi, rbx
.text:0000000000005E29                 mov     rcx, rbx
.text:0000000000005E2C                 setb    dl
.text:0000000000005E2F                 add     rsi, [rdi+30h]
.text:0000000000005E33                 setb    al
.text:0000000000005E36                 shr     rcx, 3
.text:0000000000005E3A                 cmp     [rdi], rsi
.text:0000000000005E3D                 lea     r12, [rsi+rcx+64h]
.text:0000000000005E42                 cmovnb  rsi, [rdi]
.text:0000000000005E46                 cmp     rsi, r12
.text:0000000000005E49                 cmovnb  r12, rsi
.text:0000000000005E4D                 test    rdx, rdx
.text:0000000000005E50                 jnz     loc_5EF5
.text:0000000000005E56                 movzx   eax, al
.text:0000000000005E59                 test    rax, rax
.text:0000000000005E5C                 jnz     loc_5EF5
.text:0000000000005E62                 mov     rsi, r12
.text:0000000000005E65                 mov     r13, rdi
.text:0000000000005E68                 call    call_chunkfun
.text:0000000000005E6D                 test    rax, rax
.text:0000000000005E70                 mov     r14, rax
.text:0000000000005E73                 jz      loc_5EF5
.text:0000000000005E79                 lea     rsi, [rax+r12]
.text:0000000000005E7D                 mov     [r13+8], rax
.text:0000000000005E81                 mov     [rax+8], rbp
.text:0000000000005E85                 mov     rdx, rbx        ; n
.text:0000000000005E88                 mov     [r13+20h], rsi
.text:0000000000005E8C                 mov     [rax], rsi
.text:0000000000005E8F                 mov     rax, [r13+30h]
.text:0000000000005E93                 mov     rsi, [r13+10h]  ; src
.text:0000000000005E97                 lea     r12, [r14+rax+10h]
.text:0000000000005E9C                 not     rax
.text:0000000000005E9F                 and     r12, rax
.text:0000000000005EA2                 mov     rdi, r12        ; dest
.text:0000000000005EA5                 call    _memcpy
.text:0000000000005EAA                 test    byte ptr [r13+50h], 2
.text:0000000000005EAF                 jnz     short loc_5EC6
.text:0000000000005EB1                 mov     rax, [r13+30h]
.text:0000000000005EB5                 lea     rdx, [rbp+rax+10h]
.text:0000000000005EBA                 not     rax
.text:0000000000005EBD                 and     rax, rdx
.text:0000000000005EC0                 cmp     [r13+10h], rax
.text:0000000000005EC4                 jz      short loc_5EE0
.text:0000000000005EC6
.text:0000000000005EC6 loc_5EC6:                               ; CODE XREF: _obstack_newchunk+9F↑j
.text:0000000000005EC6                                         ; _obstack_newchunk+E3↓j
.text:0000000000005EC6                 and     byte ptr [r13+50h], 0FDh
.text:0000000000005ECB                 add     rbx, r12
.text:0000000000005ECE                 mov     [r13+10h], r12
.text:0000000000005ED2                 mov     [r13+18h], rbx
.text:0000000000005ED6                 pop     rbx
.text:0000000000005ED7                 pop     rbp
.text:0000000000005ED8                 pop     r12
.text:0000000000005EDA                 pop     r13
.text:0000000000005EDC                 pop     r14
.text:0000000000005EDE                 retn
.text:0000000000005EDE ; ---------------------------------------------------------------------------
.text:0000000000005EDF                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: _obstack_newchunk+B4↑j
.text:0000000000005EE0                 mov     rax, [rbp+8]
.text:0000000000005EE4                 mov     rsi, rbp
.text:0000000000005EE7                 mov     rdi, r13
.text:0000000000005EEA                 mov     [r14+8], rax
.text:0000000000005EEE                 call    call_freefun
.text:0000000000005EF3                 jmp     short loc_5EC6
.text:0000000000005EF5 ; ---------------------------------------------------------------------------
.text:0000000000005EF5
.text:0000000000005EF5 loc_5EF5:                               ; CODE XREF: _obstack_newchunk+40↑j
.text:0000000000005EF5                                         ; _obstack_newchunk+4C↑j ...
.text:0000000000005EF5                 call    cs:obstack_alloc_failed_handler
.text:0000000000005EF5 ; } // starts at 5E10
.text:0000000000005EF5 _obstack_newchunk endp
.text:0000000000005EF5
.text:0000000000005EF5 ; ---------------------------------------------------------------------------
.text:0000000000005EFB                 align 20h
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00 ; Attributes: info_from_lumina
.text:0000000000005F00
.text:0000000000005F00 ; int __fastcall obstack_allocated_p(obstack_0 *h, void *obj)
.text:0000000000005F00                 public _obstack_allocated_p
.text:0000000000005F00 _obstack_allocated_p proc near          ; DATA XREF: LOAD:00000000000008A0↑o
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 mov     rax, [rdi+8]
.text:0000000000005F04                 test    rax, rax
.text:0000000000005F07                 jz      short locret_5F36
.text:0000000000005F09                 nop     dword ptr [rax+00000000h]
.text:0000000000005F10
.text:0000000000005F10 loc_5F10:                               ; CODE XREF: _obstack_allocated_p+21↓j
.text:0000000000005F10                 cmp     rsi, rax
.text:0000000000005F13                 jbe     short loc_5F1A
.text:0000000000005F15                 cmp     [rax], rsi
.text:0000000000005F18                 jnb     short loc_5F30
.text:0000000000005F1A
.text:0000000000005F1A loc_5F1A:                               ; CODE XREF: _obstack_allocated_p+13↑j
.text:0000000000005F1A                 mov     rax, [rax+8]
.text:0000000000005F1E                 test    rax, rax
.text:0000000000005F21                 jnz     short loc_5F10
.text:0000000000005F23                 xor     eax, eax
.text:0000000000005F25                 retn
.text:0000000000005F25 ; ---------------------------------------------------------------------------
.text:0000000000005F26                 align 10h
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: _obstack_allocated_p+18↑j
.text:0000000000005F30                 mov     eax, 1
.text:0000000000005F35                 retn
.text:0000000000005F36 ; ---------------------------------------------------------------------------
.text:0000000000005F36
.text:0000000000005F36 locret_5F36:                            ; CODE XREF: _obstack_allocated_p+7↑j
.text:0000000000005F36                 rep retn
.text:0000000000005F36 ; } // starts at 5F00
.text:0000000000005F36 _obstack_allocated_p endp
.text:0000000000005F36
.text:0000000000005F36 ; ---------------------------------------------------------------------------
.text:0000000000005F38                 align 20h
.text:0000000000005F40
.text:0000000000005F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F40
.text:0000000000005F40 ; Attributes: info_from_lumina
.text:0000000000005F40
.text:0000000000005F40 ; void obstack_free(struct obstack *obstack, void *block)
.text:0000000000005F40                 public _obstack_free
.text:0000000000005F40 _obstack_free   proc near               ; DATA XREF: LOAD:0000000000000990↑o
.text:0000000000005F40 ; __unwind {
.text:0000000000005F40                 push    r12
.text:0000000000005F42                 push    rbp
.text:0000000000005F43                 mov     rbp, rsi
.text:0000000000005F46                 push    rbx
.text:0000000000005F47                 mov     rsi, [rdi+8]
.text:0000000000005F4B                 mov     rbx, rdi
.text:0000000000005F4E                 test    rsi, rsi
.text:0000000000005F51                 jz      short loc_5F7D
.text:0000000000005F53                 nop     dword ptr [rax+rax+00h]
.text:0000000000005F58
.text:0000000000005F58 loc_5F58:                               ; CODE XREF: _obstack_free+3B↓j
.text:0000000000005F58                 cmp     rsi, rbp
.text:0000000000005F5B                 jnb     short loc_5F65
.text:0000000000005F5D                 mov     rax, [rsi]
.text:0000000000005F60                 cmp     rax, rbp
.text:0000000000005F63                 jnb     short loc_5F90
.text:0000000000005F65
.text:0000000000005F65 loc_5F65:                               ; CODE XREF: _obstack_free+1B↑j
.text:0000000000005F65                 mov     r12, [rsi+8]
.text:0000000000005F69                 mov     rdi, rbx
.text:0000000000005F6C                 call    call_freefun
.text:0000000000005F71                 or      byte ptr [rbx+50h], 2
.text:0000000000005F75                 test    r12, r12
.text:0000000000005F78                 mov     rsi, r12
.text:0000000000005F7B                 jnz     short loc_5F58
.text:0000000000005F7D
.text:0000000000005F7D loc_5F7D:                               ; CODE XREF: _obstack_free+11↑j
.text:0000000000005F7D                 test    rbp, rbp
.text:0000000000005F80                 jnz     short loc_5FA5
.text:0000000000005F82                 pop     rbx
.text:0000000000005F83                 pop     rbp
.text:0000000000005F84                 pop     r12
.text:0000000000005F86                 retn
.text:0000000000005F86 ; ---------------------------------------------------------------------------
.text:0000000000005F87                 align 10h
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: _obstack_free+23↑j
.text:0000000000005F90                 mov     [rbx+18h], rbp
.text:0000000000005F94                 mov     [rbx+10h], rbp
.text:0000000000005F98                 mov     [rbx+20h], rax
.text:0000000000005F9C                 mov     [rbx+8], rsi
.text:0000000000005FA0                 pop     rbx
.text:0000000000005FA1                 pop     rbp
.text:0000000000005FA2                 pop     r12
.text:0000000000005FA4                 retn
.text:0000000000005FA5 ; ---------------------------------------------------------------------------
.text:0000000000005FA5
.text:0000000000005FA5 loc_5FA5:                               ; CODE XREF: _obstack_free+40↑j
.text:0000000000005FA5                 call    _abort
.text:0000000000005FA5 ; } // starts at 5F40
.text:0000000000005FA5 _obstack_free   endp
.text:0000000000005FA5
.text:0000000000005FA5 ; ---------------------------------------------------------------------------
.text:0000000000005FAA                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FB0
.text:0000000000005FB0 ; Attributes: info_from_lumina
.text:0000000000005FB0
.text:0000000000005FB0 ; size_t __fastcall obstack_memory_used(obstack_0 *h)
.text:0000000000005FB0                 public _obstack_memory_used
.text:0000000000005FB0 _obstack_memory_used proc near          ; DATA XREF: LOAD:0000000000000918↑o
.text:0000000000005FB0 ; __unwind {
.text:0000000000005FB0                 mov     rdx, [rdi+8]
.text:0000000000005FB4                 xor     eax, eax
.text:0000000000005FB6                 test    rdx, rdx
.text:0000000000005FB9                 jz      short locret_5FD8
.text:0000000000005FBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000005FC0
.text:0000000000005FC0 loc_5FC0:                               ; CODE XREF: _obstack_memory_used+20↓j
.text:0000000000005FC0                 mov     rcx, [rdx]
.text:0000000000005FC3                 sub     rcx, rdx
.text:0000000000005FC6                 mov     rdx, [rdx+8]
.text:0000000000005FCA                 add     rax, rcx
.text:0000000000005FCD                 test    rdx, rdx
.text:0000000000005FD0                 jnz     short loc_5FC0
.text:0000000000005FD2                 rep retn
.text:0000000000005FD2 ; ---------------------------------------------------------------------------
.text:0000000000005FD4                 align 8
.text:0000000000005FD8
.text:0000000000005FD8 locret_5FD8:                            ; CODE XREF: _obstack_memory_used+9↑j
.text:0000000000005FD8                 rep retn
.text:0000000000005FD8 ; } // starts at 5FB0
.text:0000000000005FD8 _obstack_memory_used endp
.text:0000000000005FD8
.text:0000000000005FD8 ; ---------------------------------------------------------------------------
.text:0000000000005FDA                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FE0
.text:0000000000005FE0 ; Attributes: info_from_lumina
.text:0000000000005FE0
.text:0000000000005FE0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005FE0                 public close_stream
.text:0000000000005FE0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005FE0                                         ; close_stdout+33↑p
.text:0000000000005FE0 ; __unwind {
.text:0000000000005FE0                 push    r12
.text:0000000000005FE2                 push    rbp
.text:0000000000005FE3                 mov     rbp, rdi
.text:0000000000005FE6                 push    rbx
.text:0000000000005FE7                 call    ___fpending
.text:0000000000005FEC                 mov     ebx, [rbp+0]
.text:0000000000005FEF                 mov     rdi, rbp        ; stream
.text:0000000000005FF2                 mov     r12, rax
.text:0000000000005FF5                 call    rpl_fclose
.text:0000000000005FFA                 and     ebx, 20h
.text:0000000000005FFD                 test    ebx, ebx
.text:0000000000005FFF                 jnz     short loc_6018
.text:0000000000006001                 test    eax, eax
.text:0000000000006003                 jz      short loc_600F
.text:0000000000006005                 test    r12, r12
.text:0000000000006008                 mov     eax, 0FFFFFFFFh
.text:000000000000600D                 jz      short loc_6048
.text:000000000000600F
.text:000000000000600F loc_600F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000600F                 pop     rbx
.text:0000000000006010                 pop     rbp
.text:0000000000006011                 pop     r12
.text:0000000000006013                 retn
.text:0000000000006013 ; ---------------------------------------------------------------------------
.text:0000000000006014                 align 8
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006018                 test    eax, eax
.text:000000000000601A                 jnz     short loc_6038
.text:000000000000601C                 call    ___errno_location
.text:0000000000006021                 mov     dword ptr [rax], 0
.text:0000000000006027                 mov     eax, 0FFFFFFFFh
.text:000000000000602C                 pop     rbx
.text:000000000000602D                 pop     rbp
.text:000000000000602E                 pop     r12
.text:0000000000006030                 retn
.text:0000000000006030 ; ---------------------------------------------------------------------------
.text:0000000000006031                 align 8
.text:0000000000006038
.text:0000000000006038 loc_6038:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006038                 pop     rbx
.text:0000000000006039                 mov     eax, 0FFFFFFFFh
.text:000000000000603E                 pop     rbp
.text:000000000000603F                 pop     r12
.text:0000000000006041                 retn
.text:0000000000006041 ; ---------------------------------------------------------------------------
.text:0000000000006042                 align 8
.text:0000000000006048
.text:0000000000006048 loc_6048:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006048                 call    ___errno_location
.text:000000000000604D                 cmp     dword ptr [rax], 9
.text:0000000000006050                 pop     rbx
.text:0000000000006051                 pop     rbp
.text:0000000000006052                 pop     r12
.text:0000000000006054                 setnz   al
.text:0000000000006057                 movzx   eax, al
.text:000000000000605A                 neg     eax
.text:000000000000605C                 retn
.text:000000000000605C ; } // starts at 5FE0
.text:000000000000605C close_stream    endp
.text:000000000000605C
.text:000000000000605C ; ---------------------------------------------------------------------------
.text:000000000000605D                 align 20h
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060
.text:0000000000006060                 public hard_locale
.text:0000000000006060 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 sub     rsp, 8
.text:0000000000006064                 xor     esi, esi        ; locale
.text:0000000000006066                 call    _setlocale
.text:000000000000606B                 mov     rdx, rax
.text:000000000000606E                 mov     eax, 1
.text:0000000000006073                 test    rdx, rdx
.text:0000000000006076                 jz      short loc_6095
.text:0000000000006078                 lea     rdi, aExec+3    ; "C"
.text:000000000000607F                 mov     ecx, 2
.text:0000000000006084                 mov     rsi, rdx
.text:0000000000006087                 repe cmpsb
.text:0000000000006089                 setnbe  cl
.text:000000000000608C                 sbb     cl, 0
.text:000000000000608F                 xor     eax, eax
.text:0000000000006091                 test    cl, cl
.text:0000000000006093                 jnz     short loc_60A0
.text:0000000000006095
.text:0000000000006095 loc_6095:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006095                 add     rsp, 8
.text:0000000000006099                 retn
.text:0000000000006099 ; ---------------------------------------------------------------------------
.text:000000000000609A                 align 20h
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000060A0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000060A7                 mov     ecx, 6
.text:00000000000060AC                 mov     rsi, rdx
.text:00000000000060AF                 repe cmpsb
.text:00000000000060B1                 setnbe  al
.text:00000000000060B4                 sbb     al, 0
.text:00000000000060B6                 test    al, al
.text:00000000000060B8                 setnz   al
.text:00000000000060BB                 add     rsp, 8
.text:00000000000060BF                 retn
.text:00000000000060BF ; } // starts at 6060
.text:00000000000060BF hard_locale     endp
.text:00000000000060BF
.text:00000000000060C0
.text:00000000000060C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060C0
.text:00000000000060C0
.text:00000000000060C0                 public locale_charset
.text:00000000000060C0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000060C0 ; __unwind {
.text:00000000000060C0                 sub     rsp, 8
.text:00000000000060C4                 mov     edi, 0Eh        ; item
.text:00000000000060C9                 call    _nl_langinfo
.text:00000000000060CE                 test    rax, rax
.text:00000000000060D1                 jz      short loc_60F0
.text:00000000000060D3                 cmp     byte ptr [rax], 0
.text:00000000000060D6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000060DD                 cmovz   rax, rdx
.text:00000000000060E1                 add     rsp, 8
.text:00000000000060E5                 retn
.text:00000000000060E5 ; ---------------------------------------------------------------------------
.text:00000000000060E6                 align 10h
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000060F0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000060F7                 add     rsp, 8
.text:00000000000060FB                 retn
.text:00000000000060FB ; } // starts at 60C0
.text:00000000000060FB locale_charset  endp
.text:00000000000060FB
.text:00000000000060FB ; ---------------------------------------------------------------------------
.text:00000000000060FC                 align 20h
.text:0000000000006100
.text:0000000000006100 ; =============== S U B R O U T I N E =======================================
.text:0000000000006100
.text:0000000000006100 ; Attributes: info_from_lumina
.text:0000000000006100
.text:0000000000006100 ; void _libc_csu_init(void)
.text:0000000000006100                 public __libc_csu_init
.text:0000000000006100 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006100 ; __unwind {
.text:0000000000006100                 push    r15
.text:0000000000006102                 push    r14
.text:0000000000006104                 mov     r15, rdx
.text:0000000000006107                 push    r13
.text:0000000000006109                 push    r12
.text:000000000000610B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006112                 push    rbp
.text:0000000000006113                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000611A                 push    rbx
.text:000000000000611B                 mov     r13d, edi
.text:000000000000611E                 mov     r14, rsi
.text:0000000000006121                 sub     rbp, r12
.text:0000000000006124                 sub     rsp, 8
.text:0000000000006128                 sar     rbp, 3
.text:000000000000612C                 call    _init_proc
.text:0000000000006131                 test    rbp, rbp
.text:0000000000006134                 jz      short loc_6156
.text:0000000000006136                 xor     ebx, ebx
.text:0000000000006138                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006140                 mov     rdx, r15
.text:0000000000006143                 mov     rsi, r14
.text:0000000000006146                 mov     edi, r13d
.text:0000000000006149                 call    ds:(__frame_dummy_init_array_entry - 209850h)[r12+rbx*8]
.text:000000000000614D                 add     rbx, 1
.text:0000000000006151                 cmp     rbp, rbx
.text:0000000000006154                 jnz     short loc_6140
.text:0000000000006156
.text:0000000000006156 loc_6156:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006156                 add     rsp, 8
.text:000000000000615A                 pop     rbx
.text:000000000000615B                 pop     rbp
.text:000000000000615C                 pop     r12
.text:000000000000615E                 pop     r13
.text:0000000000006160                 pop     r14
.text:0000000000006162                 pop     r15
.text:0000000000006164                 retn
.text:0000000000006164 ; } // starts at 6100
.text:0000000000006164 __libc_csu_init endp
.text:0000000000006164
.text:0000000000006164 ; ---------------------------------------------------------------------------
.text:0000000000006165                 align 10h
.text:0000000000006170
.text:0000000000006170 ; =============== S U B R O U T I N E =======================================
.text:0000000000006170
.text:0000000000006170
.text:0000000000006170 ; void _libc_csu_fini(void)
.text:0000000000006170                 public __libc_csu_fini
.text:0000000000006170 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006170 ; __unwind {
.text:0000000000006170                 rep retn
.text:0000000000006170 ; } // starts at 6170
.text:0000000000006170 __libc_csu_fini endp
.text:0000000000006170
.text:0000000000006170 ; ---------------------------------------------------------------------------
.text:0000000000006172                 align 20h
.text:0000000000006180
.text:0000000000006180 ; =============== S U B R O U T I N E =======================================
.text:0000000000006180
.text:0000000000006180
.text:0000000000006180 atexit          proc near               ; CODE XREF: main+55↑p
.text:0000000000006180 ; __unwind {
.text:0000000000006180                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006187                 xor     esi, esi        ; obj
.text:0000000000006189                 jmp     ___cxa_atexit
.text:0000000000006189 ; } // starts at 6180
.text:0000000000006189 atexit          endp
.text:0000000000006189
.text:0000000000006189 _text           ends
.text:0000000000006189
LOAD:000000000000618E ; ===========================================================================
LOAD:000000000000618E
LOAD:000000000000618E ; Segment type: Pure code
LOAD:000000000000618E ; Segment permissions: Read/Execute
LOAD:000000000000618E LOAD            segment byte public 'CODE' use64
LOAD:000000000000618E                 assume cs:LOAD
LOAD:000000000000618E                 ;org 618Eh
LOAD:000000000000618E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000618E                 align 10h
LOAD:000000000000618E LOAD            ends
LOAD:000000000000618E
.fini:0000000000006190 ; ===========================================================================
.fini:0000000000006190
.fini:0000000000006190 ; Segment type: Pure code
.fini:0000000000006190 ; Segment permissions: Read/Execute
.fini:0000000000006190 _fini           segment dword public 'CODE' use64
.fini:0000000000006190                 assume cs:_fini
.fini:0000000000006190                 ;org 6190h
.fini:0000000000006190                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006190
.fini:0000000000006190 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006190
.fini:0000000000006190
.fini:0000000000006190                 public _term_proc
.fini:0000000000006190 _term_proc      proc near
.fini:0000000000006190                 sub     rsp, 8          ; _fini
.fini:0000000000006194                 add     rsp, 8
.fini:0000000000006198                 retn
.fini:0000000000006198 _term_proc      endp
.fini:0000000000006198
.fini:0000000000006198 _fini           ends
.fini:0000000000006198
LOAD:0000000000006199 ; ===========================================================================
LOAD:0000000000006199
LOAD:0000000000006199 ; Segment type: Pure code
LOAD:0000000000006199 ; Segment permissions: Read/Execute
LOAD:0000000000006199 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006199                 assume cs:LOAD
LOAD:0000000000006199                 ;org 6199h
LOAD:0000000000006199                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006199                 align 20h
LOAD:0000000000006199 LOAD            ends
LOAD:0000000000006199
.rodata:00000000000061A0 ; ===========================================================================
.rodata:00000000000061A0
.rodata:00000000000061A0 ; Segment type: Pure data
.rodata:00000000000061A0 ; Segment permissions: Read
.rodata:00000000000061A0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000061A0                 assume cs:_rodata
.rodata:00000000000061A0                 ;org 61A0h
.rodata:00000000000061A0                 public _IO_stdin_used
.rodata:00000000000061A0 _IO_stdin_used  db    1
.rodata:00000000000061A1                 db    0
.rodata:00000000000061A2                 db    2
.rodata:00000000000061A3                 db    0
.rodata:00000000000061A4 aNone           db 'none',0             ; DATA XREF: dc_parse_stream+53↑o
.rodata:00000000000061A4                                         ; dc_parse_stream:loc_2BE8↑o
.rodata:00000000000061A9 aNormal         db 'NORMAL',0           ; DATA XREF: dc_parse_stream+49B↑o
.rodata:00000000000061A9                                         ; .data.rel.ro:slack_codes↓o
.rodata:00000000000061B0 ; const char aTerm[]
.rodata:00000000000061B0 aTerm           db 'TERM',0             ; DATA XREF: dc_parse_stream+B↑o
.rodata:00000000000061B0                                         ; dc_parse_stream+192↑o
.rodata:00000000000061B5 aOptions        db 'OPTIONS',0          ; DATA XREF: dc_parse_stream+1CD↑o
.rodata:00000000000061BD aColor          db 'COLOR',0            ; DATA XREF: dc_parse_stream+1E0↑o
.rodata:00000000000061C3 aEightbit       db 'EIGHTBIT',0         ; DATA XREF: dc_parse_stream+1F3↑o
.rodata:00000000000061CC ; const char aInternal[]
.rodata:00000000000061CC aInternal       db '<internal>',0       ; DATA XREF: dc_parse_stream:loc_2D7A↑o
.rodata:00000000000061D7 aDircolors      db 'dircolors',0        ; DATA XREF: main+C7↑o
.rodata:00000000000061D7                                         ; usage+10C↑o ...
.rodata:00000000000061E1 ; const char aUsageSOptionFi[]
.rodata:00000000000061E1 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.rodata:00000000000061E1                                         ; DATA XREF: usage:loc_2E2D↑o
.rodata:00000000000061FF asc_61FF        db '[',0                ; DATA XREF: usage+118↑o
.rodata:0000000000006201 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+13F↑o
.rodata:0000000000006211 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000006211                                         ; DATA XREF: usage+16F↑o
.rodata:0000000000006211                                         ; usage+26C↑o ...
.rodata:0000000000006227 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+180↑o
.rodata:0000000000006231 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+18C↑o
.rodata:0000000000006240 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+11F↑o
.rodata:000000000000624A aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+14B↑o
.rodata:0000000000006254 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+163↑o
.rodata:000000000000625E ; const char aSOnlineHelpS[]
.rodata:000000000000625E aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:000000000000625E                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006275 unk_6275        db  47h ; G             ; DATA XREF: main+C0↑o
.rodata:0000000000006275                                         ; usage+1F6↑o ...
.rodata:0000000000006276                 db  4Eh ; N
.rodata:0000000000006277                 db  55h ; U
.rodata:0000000000006278                 db  20h
.rodata:0000000000006279 ; const char domainname[]
.rodata:0000000000006279 domainname      db 'coreutils',0        ; DATA XREF: main+36↑o
.rodata:0000000000006279                                         ; main+42↑o ...
.rodata:0000000000006283 ; const char aEn[]
.rodata:0000000000006283 aEn             db 'en_',0              ; DATA XREF: usage+21D↑o
.rodata:0000000000006283                                         ; usage+2DE↑o
.rodata:0000000000006287 ; const char aFullDocumentat[]
.rodata:0000000000006287 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006287                                         ; DATA XREF: usage:loc_3009↑o
.rodata:0000000000006287                                         ; usage:loc_30C6↑o
.rodata:00000000000062A2 ; const char aExportLsColors[]
.rodata:00000000000062A2 aExportLsColors db 27h,';',0Ah          ; DATA XREF: main+28A↑o
.rodata:00000000000062A2                 db 'export LS_COLORS',0Ah,0
.rodata:00000000000062B7 ; const char s[]
.rodata:00000000000062B7 s               db 'LS_COLORS=',27h,0   ; DATA XREF: main+295↑o
.rodata:00000000000062C3 asc_62C3        db 27h,0Ah,0            ; DATA XREF: main+26B↑o
.rodata:00000000000062C3                                         ; main+1E↑o ...
.rodata:00000000000062C6 aSetenvLsColors db 'setenv LS_COLORS ',27h,0
.rodata:00000000000062C6                                         ; DATA XREF: main+27C↑o
.rodata:00000000000062D9 ; const char dirname[]
.rodata:00000000000062D9 dirname         db '/usr/local/share/locale',0
.rodata:00000000000062D9                                         ; DATA XREF: main+2F↑o
.rodata:00000000000062F1 aHPeterAnvin    db 'H. Peter Anvin',0   ; DATA XREF: main+B9↑o
.rodata:0000000000006300 ; const char shortopts[]
.rodata:0000000000006300 shortopts       db 'bcp',0              ; DATA XREF: main+61↑o
.rodata:0000000000006304 ; const char name[]
.rodata:0000000000006304 name            db 'SHELL',0            ; DATA XREF: main:loc_2301↑o
.rodata:000000000000630A ; const char s2[]
.rodata:000000000000630A s2              db 'tcsh',0             ; DATA XREF: main+327↑o
.rodata:000000000000630A                                         ; main+30D↑o ...
.rodata:000000000000630F ; const char msgid[]
.rodata:000000000000630F msgid           db 'extra operand %s',0 ; DATA XREF: main+3A1↑o
.rodata:000000000000630F                                         ; main+421↑o
.rodata:0000000000006320 aBourneShell    db 'bourne-shell',0     ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000632D aCShell         db 'c-shell',0          ; DATA XREF: .data.rel.ro:00000000002098C0↓o
.rodata:000000000000632D                                         ; .data.rel.ro:0000000000209BE8↓o
.rodata:0000000000006335 aPrintDatabase  db 'print-database',0   ; DATA XREF: .data.rel.ro:00000000002098E0↓o
.rodata:0000000000006344 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209900↓o
.rodata:0000000000006349 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209920↓o
.rodata:0000000000006351 aNo             db 'no',0               ; DATA XREF: .data.rel.ro:ls_codes↓o
.rodata:0000000000006351                                         ; .data.rel.ro:0000000000209968↓o
.rodata:0000000000006354 aFi             db 'fi',0               ; DATA XREF: .data.rel.ro:0000000000209970↓o
.rodata:0000000000006357 aDi             db 'di',0               ; DATA XREF: .data.rel.ro:0000000000209980↓o
.rodata:000000000000635A aLn             db 'ln',0               ; DATA XREF: .data.rel.ro:0000000000209988↓o
.rodata:000000000000635A                                         ; .data.rel.ro:0000000000209990↓o ...
.rodata:000000000000635D aMi             db 'mi',0               ; DATA XREF: .data.rel.ro:00000000002099A8↓o
.rodata:0000000000006360 aPi             db 'pi',0               ; DATA XREF: .data.rel.ro:00000000002099B0↓o
.rodata:0000000000006360                                         ; .data.rel.ro:00000000002099B8↓o
.rodata:0000000000006363 aSo             db 'so',0               ; DATA XREF: .data.rel.ro:00000000002099C0↓o
.rodata:0000000000006366 aBd             db 'bd',0               ; DATA XREF: .data.rel.ro:00000000002099C8↓o
.rodata:0000000000006366                                         ; .data.rel.ro:00000000002099D0↓o
.rodata:0000000000006369 aCd             db 'cd',0               ; DATA XREF: .data.rel.ro:00000000002099D8↓o
.rodata:0000000000006369                                         ; .data.rel.ro:00000000002099E0↓o
.rodata:000000000000636C aDo             db 'do',0               ; DATA XREF: .data.rel.ro:00000000002099E8↓o
.rodata:000000000000636F aEx             db 'ex',0               ; DATA XREF: .data.rel.ro:00000000002099F0↓o
.rodata:0000000000006372 aLc             db 'lc',0               ; DATA XREF: .data.rel.ro:00000000002099F8↓o
.rodata:0000000000006372                                         ; .data.rel.ro:0000000000209A00↓o
.rodata:0000000000006375 aRc             db 'rc',0               ; DATA XREF: .data.rel.ro:0000000000209A08↓o
.rodata:0000000000006375                                         ; .data.rel.ro:0000000000209A10↓o
.rodata:0000000000006378 aEc             db 'ec',0               ; DATA XREF: .data.rel.ro:0000000000209A18↓o
.rodata:0000000000006378                                         ; .data.rel.ro:0000000000209A20↓o ...
.rodata:000000000000637B aSu             db 'su',0               ; DATA XREF: .data.rel.ro:0000000000209A28↓o
.rodata:000000000000637B                                         ; .data.rel.ro:0000000000209A30↓o
.rodata:000000000000637E aSg             db 'sg',0               ; DATA XREF: .data.rel.ro:0000000000209A38↓o
.rodata:000000000000637E                                         ; .data.rel.ro:0000000000209A40↓o
.rodata:0000000000006381 aSt             db 'st',0               ; DATA XREF: .data.rel.ro:0000000000209A48↓o
.rodata:0000000000006384 aOw             db 'ow',0               ; DATA XREF: .data.rel.ro:0000000000209A50↓o
.rodata:0000000000006384                                         ; .data.rel.ro:0000000000209A58↓o
.rodata:0000000000006387 aTw             db 'tw',0               ; DATA XREF: .data.rel.ro:0000000000209A60↓o
.rodata:0000000000006387                                         ; .data.rel.ro:0000000000209A68↓o
.rodata:000000000000638A aCa             db 'ca',0               ; DATA XREF: .data.rel.ro:0000000000209A70↓o
.rodata:000000000000638D aMh             db 'mh',0               ; DATA XREF: .data.rel.ro:0000000000209A78↓o
.rodata:0000000000006390 aCl             db 'cl',0               ; DATA XREF: .data.rel.ro:0000000000209A80↓o
.rodata:0000000000006393 aNorm           db 'NORM',0             ; DATA XREF: .data.rel.ro:0000000000209AA8↓o
.rodata:0000000000006398 aFile           db 'FILE',0             ; DATA XREF: .data.rel.ro:0000000000209AB0↓o
.rodata:000000000000639D aReset          db 'RESET',0            ; DATA XREF: .data.rel.ro:0000000000209AB8↓o
.rodata:00000000000063A3 aDir            db 'DIR',0              ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:00000000000063A7 aLnk            db 'LNK',0              ; DATA XREF: .data.rel.ro:0000000000209AC8↓o
.rodata:00000000000063AB aSymlink        db 'SYMLINK',0          ; DATA XREF: .data.rel.ro:0000000000209AD8↓o
.rodata:00000000000063B3 aOrphan         db 'ORPHAN',0           ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:00000000000063BA aMissing        db 'MISSING',0          ; DATA XREF: .data.rel.ro:0000000000209AE8↓o
.rodata:00000000000063C2 aFifo           db 'FIFO',0             ; DATA XREF: .data.rel.ro:0000000000209AF0↓o
.rodata:00000000000063C7 aPipe           db 'PIPE',0             ; DATA XREF: .data.rel.ro:0000000000209AF8↓o
.rodata:00000000000063CC aSock           db 'SOCK',0             ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:00000000000063D1 aBlk            db 'BLK',0              ; DATA XREF: .data.rel.ro:0000000000209B08↓o
.rodata:00000000000063D5 aBlock          db 'BLOCK',0            ; DATA XREF: .data.rel.ro:0000000000209B10↓o
.rodata:00000000000063DB aChr            db 'CHR',0              ; DATA XREF: .data.rel.ro:0000000000209B18↓o
.rodata:00000000000063DF aChar           db 'CHAR',0             ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:00000000000063E4 aDoor           db 'DOOR',0             ; DATA XREF: .data.rel.ro:0000000000209B28↓o
.rodata:00000000000063E9 aExec           db 'EXEC',0             ; DATA XREF: .data.rel.ro:0000000000209B30↓o
.rodata:00000000000063E9                                         ; hard_locale+18↑o
.rodata:00000000000063EE aLeft           db 'LEFT',0             ; DATA XREF: .data.rel.ro:0000000000209B38↓o
.rodata:00000000000063F3 aLeftcode       db 'LEFTCODE',0         ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:00000000000063FC aRight          db 'RIGHT',0            ; DATA XREF: .data.rel.ro:0000000000209B48↓o
.rodata:0000000000006402 aRightcode      db 'RIGHTCODE',0        ; DATA XREF: .data.rel.ro:0000000000209B50↓o
.rodata:000000000000640C aEnd            db 'END',0              ; DATA XREF: .data.rel.ro:0000000000209B58↓o
.rodata:0000000000006410 aEndcode        db 'ENDCODE',0          ; DATA XREF: .data.rel.ro:0000000000209B60↓o
.rodata:0000000000006418 aSuid           db 'SUID',0             ; DATA XREF: .data.rel.ro:0000000000209B68↓o
.rodata:000000000000641D aSetuid         db 'SETUID',0           ; DATA XREF: .data.rel.ro:0000000000209B70↓o
.rodata:0000000000006424 aSgid           db 'SGID',0             ; DATA XREF: .data.rel.ro:0000000000209B78↓o
.rodata:0000000000006429 aSetgid         db 'SETGID',0           ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000006430 aSticky         db 'STICKY',0           ; DATA XREF: .data.rel.ro:0000000000209B88↓o
.rodata:0000000000006437 aOwr            db 'OWR',0              ; DATA XREF: .data.rel.ro:0000000000209B98↓o
.rodata:000000000000643B aStickyOtherWri db 'STICKY_OTHER_WRITABLE',0
.rodata:000000000000643B                                         ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:000000000000643B                                         ; .data.rel.ro:0000000000209B90↓o
.rodata:0000000000006451 aOwt            db 'OWT',0              ; DATA XREF: .data.rel.ro:0000000000209BA8↓o
.rodata:0000000000006455 aCapability     db 'CAPABILITY',0       ; DATA XREF: .data.rel.ro:0000000000209BB0↓o
.rodata:0000000000006460 aMultihardlink  db 'MULTIHARDLINK',0    ; DATA XREF: .data.rel.ro:0000000000209BB8↓o
.rodata:0000000000006460                                         ; .data.rel.ro:0000000000209AD0↓o
.rodata:000000000000646E aClrtoeol       db 'CLRTOEOL',0         ; DATA XREF: .data.rel.ro:0000000000209BC0↓o
.rodata:0000000000006477                 align 8
.rodata:0000000000006478 ; const char aSLuInvalidLine[]
.rodata:0000000000006478 aSLuInvalidLine db '%s:%lu: invalid line;  missing second token',0
.rodata:0000000000006478                                         ; DATA XREF: dc_parse_stream+29A↑o
.rodata:00000000000064A4                 align 8
.rodata:00000000000064A8 ; const char aSLuUnrecognize[]
.rodata:00000000000064A8 aSLuUnrecognize db '%s:%lu: unrecognized keyword %s',0
.rodata:00000000000064A8                                         ; DATA XREF: dc_parse_stream:loc_2D36↑o
.rodata:00000000000064C8 ; const char aTrySHelpForMor[]
.rodata:00000000000064C8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000064C8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000064EF                 align 10h
.rodata:00000000000064F0 ; const char aOutputCommands[]
.rodata:00000000000064F0 aOutputCommands db 'Output commands to set the LS_COLORS environment variable.',0Ah
.rodata:00000000000064F0                                         ; DATA XREF: usage+84↑o
.rodata:00000000000064F0                 db 0Ah
.rodata:00000000000064F0                 db 'Determine format of output:',0Ah
.rodata:00000000000064F0                 db '  -b, --sh, --bourne-shell    output Bourne shell code to set LS_'
.rodata:00000000000064F0                 db 'COLORS',0Ah
.rodata:00000000000064F0                 db '  -c, --csh, --c-shell        output C shell code to set LS_COLOR'
.rodata:00000000000064F0                 db 'S',0Ah
.rodata:00000000000064F0                 db '  -p, --print-database        output defaults',0Ah,0
.rodata:0000000000006602                 align 8
.rodata:0000000000006608 ; const char aHelpDisplayThi[]
.rodata:0000000000006608 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006608                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000006635                 align 8
.rodata:0000000000006638 ; const char aVersionOutputV[]
.rodata:0000000000006638 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006638                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000666E                 align 10h
.rodata:0000000000006670 ; const char aIfFileIsSpecif[]
.rodata:0000000000006670 aIfFileIsSpecif db 0Ah                  ; DATA XREF: usage+F3↑o
.rodata:0000000000006670                 db 'If FILE is specified, read it to determine which colors to use fo'
.rodata:0000000000006670                 db 'r which',0Ah
.rodata:0000000000006670                 db 'file types and extensions.  Otherwise, a precompiled database is '
.rodata:0000000000006670                 db 'used.',0Ah
.rodata:0000000000006670                 db 'For details on the format of these files, run ',27h,'dircolors --'
.rodata:0000000000006670                 db 'print-database',27h,'.',0Ah,0
.rodata:000000000000674E                 align 10h
.rodata:0000000000006750 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006750                                         ; DATA XREF: usage+1EF↑o
.rodata:0000000000006750                                         ; usage+253↑o ...
.rodata:0000000000006778 ; const char aReportAnyTrans[]
.rodata:0000000000006778 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006778                                         ; DATA XREF: usage+347↑o
.rodata:0000000000006778                 db 'am/>',0Ah,0
.rodata:00000000000067BF                 align 20h
.rodata:00000000000067C0 ; const char aOrAvailableLoc[]
.rodata:00000000000067C0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000067C0                                         ; DATA XREF: usage:loc_304E↑o
.rodata:00000000000067F3                 align 8
.rodata:00000000000067F8 ; const char aTheOptionsToOu[]
.rodata:00000000000067F8 aTheOptionsToOu db 'the options to output dircolors',27h,' internal database and',0Ah
.rodata:00000000000067F8                                         ; DATA XREF: main:loc_2416↑o
.rodata:00000000000067F8                 db 'to select a shell syntax are mutually exclusive',0
.rodata:000000000000685F                 align 20h
.rodata:0000000000006860 ; const char aNoShellEnviron[]
.rodata:0000000000006860 aNoShellEnviron db 'no SHELL environment variable, and no shell type option given',0
.rodata:0000000000006860                                         ; DATA XREF: main:loc_23F2↑o
.rodata:000000000000689E                 align 20h
.rodata:00000000000068A0 ; const char aFileOperandsCa[]
.rodata:00000000000068A0 aFileOperandsCa db 'file operands cannot be combined with --print-database (-p)',0
.rodata:00000000000068A0                                         ; DATA XREF: main+448↑o
.rodata:00000000000068DC                 align 20h
.rodata:00000000000068E0 ; const char G_line[]
.rodata:00000000000068E0 G_line          db '# Configuration file for dircolors, a utility to help you set the'
.rodata:00000000000068E0                                         ; DATA XREF: main+12D↑o
.rodata:00000000000068E0                                         ; dc_parse_stream:loc_2803↑o
.rodata:00000000000068E0                 db 0
.rodata:0000000000006922 aLsColorsEnviro db '# LS_COLORS environment variable used by GNU ls with the --color '
.rodata:0000000000006922                 db 'option.',0
.rodata:000000000000696B aCopyrightC1996 db '# Copyright (C) 1996-2019 Free Software Foundation, Inc.',0
.rodata:00000000000069A4 aCopyingAndDist db '# Copying and distribution of this file, with or without modifica'
.rodata:00000000000069A4                 db 'tion,',0
.rodata:00000000000069EB aArePermittedPr db '# are permitted provided the copyright notice and this notice are'
.rodata:00000000000069EB                 db ' preserved.',0
.rodata:0000000000006A38 aTheKeywordsCol db '# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the',0
.rodata:0000000000006A74 aSlackwareVersi db '# slackware version of dircolors) are recognized but ignored.',0
.rodata:0000000000006AB2 aBelowAreTermEn db '# Below are TERM entries, which can be a glob patterns, to match',0
.rodata:0000000000006AF3 aAgainstTheTerm db '# against the TERM environment variable to determine if it is col'
.rodata:0000000000006AF3                 db 'orizable.',0
.rodata:0000000000006B3E aTermEterm      db 'TERM Eterm',0
.rodata:0000000000006B49 aTermAnsi       db 'TERM ansi',0
.rodata:0000000000006B53 aTermColor      db 'TERM *color*',0
.rodata:0000000000006B60 aTermCon09X09   db 'TERM con[0-9]*x[0-9]*',0
.rodata:0000000000006B76 aTermCons25     db 'TERM cons25',0
.rodata:0000000000006B82 aTermConsole    db 'TERM console',0
.rodata:0000000000006B8F aTermCygwin     db 'TERM cygwin',0
.rodata:0000000000006B9B aTermDtterm     db 'TERM dtterm',0
.rodata:0000000000006BA7 aTermGnome      db 'TERM gnome',0
.rodata:0000000000006BB2 aTermHurd       db 'TERM hurd',0
.rodata:0000000000006BBC aTermJfbterm    db 'TERM jfbterm',0
.rodata:0000000000006BC9 aTermKonsole    db 'TERM konsole',0
.rodata:0000000000006BD6 aTermKterm      db 'TERM kterm',0
.rodata:0000000000006BE1 aTermLinux      db 'TERM linux',0
.rodata:0000000000006BEC aTermLinuxC     db 'TERM linux-c',0
.rodata:0000000000006BF9 aTermMlterm     db 'TERM mlterm',0
.rodata:0000000000006C05 aTermPutty      db 'TERM putty',0
.rodata:0000000000006C10 aTermRxvt       db 'TERM rxvt*',0
.rodata:0000000000006C1B aTermScreen     db 'TERM screen*',0
.rodata:0000000000006C28 aTermSt         db 'TERM st',0
.rodata:0000000000006C30 aTermTerminator db 'TERM terminator',0
.rodata:0000000000006C40 aTermTmux       db 'TERM tmux*',0
.rodata:0000000000006C4B aTermVt100      db 'TERM vt100',0
.rodata:0000000000006C56 aTermXterm      db 'TERM xterm*',0
.rodata:0000000000006C62 aBelowAreTheCol db '# Below are the color init strings for the basic file types.',0
.rodata:0000000000006C9F aOneCanUseCodes db '# One can use codes for 256 or more colors supported by modern te'
.rodata:0000000000006C9F                 db 'rminals.',0
.rodata:0000000000006CE9 aTheDefaultColo db '# The default color codes use the capabilities of an 8 color term'
.rodata:0000000000006CE9                 db 'inal',0
.rodata:0000000000006D2F aWithSomeAdditi db '# with some additional attributes as per the following codes:',0
.rodata:0000000000006D6D aAttributeCodes db '# Attribute codes:',0
.rodata:0000000000006D80 a00None01Bold04 db '# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed',0
.rodata:0000000000006DC1 aTextColorCodes db '# Text color codes:',0
.rodata:0000000000006DD5 a30Black31Red32 db '# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 3'
.rodata:0000000000006DD5                 db '7=white',0
.rodata:0000000000006E1E aBackgroundColo db '# Background color codes:',0
.rodata:0000000000006E38 a40Black41Red42 db '# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 4'
.rodata:0000000000006E38                 db '7=white',0
.rodata:0000000000006E81 aNormal00NoColo db '#NORMAL 00 # no color code at all',0
.rodata:0000000000006EA3 aFile00RegularF db '#FILE 00 # regular file: use no color at all',0
.rodata:0000000000006ED0 aReset0ResetToN db 'RESET 0 # reset to "normal" color',0
.rodata:0000000000006EF2 aDir0134Directo db 'DIR 01;34 # directory',0
.rodata:0000000000006F08 aLink0136Symbol db 'LINK 01;36 # symbolic link. (If you set this to ',27h,'target',27h
.rodata:0000000000006F08                 db ' instead of a',0
.rodata:0000000000006F4E aNumericalValue db ' # numerical value, the color is as for the file pointed to.)',0
.rodata:0000000000006F8C aMultihardlink0 db 'MULTIHARDLINK 00 # regular file with more than one link',0
.rodata:0000000000006FC4 aFifo4033Pipe   db 'FIFO 40;33 # pipe',0
.rodata:0000000000006FD6 aSock0135Socket db 'SOCK 01;35 # socket',0
.rodata:0000000000006FEA aDoor0135Door   db 'DOOR 01;35 # door',0
.rodata:0000000000006FFC aBlk403301Block db 'BLK 40;33;01 # block device driver',0
.rodata:000000000000701F aChr403301Chara db 'CHR 40;33;01 # character device driver',0
.rodata:0000000000007046 aOrphan403101Sy db 'ORPHAN 40;31;01 # symlink to nonexistent file, or non-stat',27h,'a'
.rodata:0000000000007046                 db 'ble file ...',0
.rodata:000000000000708F aMissing00AndTh db 'MISSING 00 # ... and the files they point to',0
.rodata:00000000000070BC aSetuid3741File db 'SETUID 37;41 # file that is setuid (u+s)',0
.rodata:00000000000070E5 aSetgid3043File db 'SETGID 30;43 # file that is setgid (g+s)',0
.rodata:000000000000710E aCapability3041 db 'CAPABILITY 30;41 # file with capability',0
.rodata:0000000000007136 aStickyOtherWri_0 db 'STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writab'
.rodata:0000000000007136                 db 'le (+t,o+w)',0
.rodata:0000000000007183 aOtherWritable3 db 'OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not s'
.rodata:0000000000007183                 db 'ticky',0
.rodata:00000000000071CA aSticky3744DirW db 'STICKY 37;44 # dir with the sticky bit set (+t) and not other-wri'
.rodata:00000000000071CA                 db 'table',0
.rodata:0000000000007211 aThisIsForFiles db '# This is for files with execute permission:',0
.rodata:000000000000723E aExec0132       db 'EXEC 01;32',0
.rodata:0000000000007249 aListAnyFileExt db '# List any file extensions like ',27h,'.gz',27h,' or ',27h,'.tar',27h
.rodata:0000000000007249                 db ' that you would like ls',0
.rodata:0000000000007290 aToColorizeBelo db '# to colorize below. Put the extension, a space, and the color in'
.rodata:0000000000007290                 db 'it string.',0
.rodata:00000000000072DC aAndAnyComments db '# (and any comments you want to add after a ',27h,'#',27h,')',0
.rodata:000000000000730D aIfYouUseDosSty db '# If you use DOS-style suffixes, you may want to uncomment the fo'
.rodata:000000000000730D                 db 'llowing:',0
.rodata:0000000000007357 aCmd0132Executa db '#.cmd 01;32 # executables (bright green)',0
.rodata:0000000000007380 aExe0132        db '#.exe 01;32',0
.rodata:000000000000738C aCom0132        db '#.com 01;32',0
.rodata:0000000000007398 aBtm0132        db '#.btm 01;32',0
.rodata:00000000000073A4 aBat0132        db '#.bat 01;32',0
.rodata:00000000000073B0 aOrIfYouWantToC db '# Or if you want to colorize scripts even if they do not have the'
.rodata:00000000000073B0                 db 0
.rodata:00000000000073F2 aExecutableBitA db '# executable bit actually set.',0
.rodata:0000000000007411 aSh0132         db '#.sh 01;32',0
.rodata:000000000000741C aCsh0132        db '#.csh 01;32',0
.rodata:0000000000007428 aArchivesOrComp db ' # archives or compressed (bright red)',0
.rodata:000000000000744F aTar0131        db '.tar 01;31',0
.rodata:000000000000745A aTgz0131        db '.tgz 01;31',0
.rodata:0000000000007465 aArc0131        db '.arc 01;31',0
.rodata:0000000000007470 aArj0131        db '.arj 01;31',0
.rodata:000000000000747B aTaz0131        db '.taz 01;31',0
.rodata:0000000000007486 aLha0131        db '.lha 01;31',0
.rodata:0000000000007491 aLz40131        db '.lz4 01;31',0
.rodata:000000000000749C aLzh0131        db '.lzh 01;31',0
.rodata:00000000000074A7 aLzma0131       db '.lzma 01;31',0
.rodata:00000000000074B3 aTlz0131        db '.tlz 01;31',0
.rodata:00000000000074BE aTxz0131        db '.txz 01;31',0
.rodata:00000000000074C9 aTzo0131        db '.tzo 01;31',0
.rodata:00000000000074D4 aT7z0131        db '.t7z 01;31',0
.rodata:00000000000074DF aZip0131        db '.zip 01;31',0
.rodata:00000000000074EA aZ0131          db '.z 01;31',0
.rodata:00000000000074F3 aDz0131         db '.dz 01;31',0
.rodata:00000000000074FD aGz0131         db '.gz 01;31',0
.rodata:0000000000007507 aLrz0131        db '.lrz 01;31',0
.rodata:0000000000007512 aLz0131         db '.lz 01;31',0
.rodata:000000000000751C aLzo0131        db '.lzo 01;31',0
.rodata:0000000000007527 aXz0131         db '.xz 01;31',0
.rodata:0000000000007531 aZst0131        db '.zst 01;31',0
.rodata:000000000000753C aTzst0131       db '.tzst 01;31',0
.rodata:0000000000007548 aBz20131        db '.bz2 01;31',0
.rodata:0000000000007553 aBz0131         db '.bz 01;31',0
.rodata:000000000000755D aTbz0131        db '.tbz 01;31',0
.rodata:0000000000007568 aTbz20131       db '.tbz2 01;31',0
.rodata:0000000000007574 aTz0131         db '.tz 01;31',0
.rodata:000000000000757E aDeb0131        db '.deb 01;31',0
.rodata:0000000000007589 aRpm0131        db '.rpm 01;31',0
.rodata:0000000000007594 aJar0131        db '.jar 01;31',0
.rodata:000000000000759F aWar0131        db '.war 01;31',0
.rodata:00000000000075AA aEar0131        db '.ear 01;31',0
.rodata:00000000000075B5 aSar0131        db '.sar 01;31',0
.rodata:00000000000075C0 aRar0131        db '.rar 01;31',0
.rodata:00000000000075CB aAlz0131        db '.alz 01;31',0
.rodata:00000000000075D6 aAce0131        db '.ace 01;31',0
.rodata:00000000000075E1 aZoo0131        db '.zoo 01;31',0
.rodata:00000000000075EC aCpio0131       db '.cpio 01;31',0
.rodata:00000000000075F8 a7z0131         db '.7z 01;31',0
.rodata:0000000000007602 aRz0131         db '.rz 01;31',0
.rodata:000000000000760C aCab0131        db '.cab 01;31',0
.rodata:0000000000007617 aWim0131        db '.wim 01;31',0
.rodata:0000000000007622 aSwm0131        db '.swm 01;31',0
.rodata:000000000000762D aDwm0131        db '.dwm 01;31',0
.rodata:0000000000007638 aEsd0131        db '.esd 01;31',0
.rodata:0000000000007643 aImageFormats   db '# image formats',0
.rodata:0000000000007653 aJpg0135        db '.jpg 01;35',0
.rodata:000000000000765E aJpeg0135       db '.jpeg 01;35',0
.rodata:000000000000766A aMjpg0135       db '.mjpg 01;35',0
.rodata:0000000000007676 aMjpeg0135      db '.mjpeg 01;35',0
.rodata:0000000000007683 aGif0135        db '.gif 01;35',0
.rodata:000000000000768E aBmp0135        db '.bmp 01;35',0
.rodata:0000000000007699 aPbm0135        db '.pbm 01;35',0
.rodata:00000000000076A4 aPgm0135        db '.pgm 01;35',0
.rodata:00000000000076AF aPpm0135        db '.ppm 01;35',0
.rodata:00000000000076BA aTga0135        db '.tga 01;35',0
.rodata:00000000000076C5 aXbm0135        db '.xbm 01;35',0
.rodata:00000000000076D0 aXpm0135        db '.xpm 01;35',0
.rodata:00000000000076DB aTif0135        db '.tif 01;35',0
.rodata:00000000000076E6 aTiff0135       db '.tiff 01;35',0
.rodata:00000000000076F2 aPng0135        db '.png 01;35',0
.rodata:00000000000076FD aSvg0135        db '.svg 01;35',0
.rodata:0000000000007708 aSvgz0135       db '.svgz 01;35',0
.rodata:0000000000007714 aMng0135        db '.mng 01;35',0
.rodata:000000000000771F aPcx0135        db '.pcx 01;35',0
.rodata:000000000000772A aMov0135        db '.mov 01;35',0
.rodata:0000000000007735 aMpg0135        db '.mpg 01;35',0
.rodata:0000000000007740 aMpeg0135       db '.mpeg 01;35',0
.rodata:000000000000774C aM2v0135        db '.m2v 01;35',0
.rodata:0000000000007757 aMkv0135        db '.mkv 01;35',0
.rodata:0000000000007762 aWebm0135       db '.webm 01;35',0
.rodata:000000000000776E aOgm0135        db '.ogm 01;35',0
.rodata:0000000000007779 aMp40135        db '.mp4 01;35',0
.rodata:0000000000007784 aM4v0135        db '.m4v 01;35',0
.rodata:000000000000778F aMp4v0135       db '.mp4v 01;35',0
.rodata:000000000000779B aVob0135        db '.vob 01;35',0
.rodata:00000000000077A6 aQt0135         db '.qt 01;35',0
.rodata:00000000000077B0 aNuv0135        db '.nuv 01;35',0
.rodata:00000000000077BB aWmv0135        db '.wmv 01;35',0
.rodata:00000000000077C6 aAsf0135        db '.asf 01;35',0
.rodata:00000000000077D1 aRm0135         db '.rm 01;35',0
.rodata:00000000000077DB aRmvb0135       db '.rmvb 01;35',0
.rodata:00000000000077E7 aFlc0135        db '.flc 01;35',0
.rodata:00000000000077F2 aAvi0135        db '.avi 01;35',0
.rodata:00000000000077FD aFli0135        db '.fli 01;35',0
.rodata:0000000000007808 aFlv0135        db '.flv 01;35',0
.rodata:0000000000007813 aGl0135         db '.gl 01;35',0
.rodata:000000000000781D aDl0135         db '.dl 01;35',0
.rodata:0000000000007827 aXcf0135        db '.xcf 01;35',0
.rodata:0000000000007832 aXwd0135        db '.xwd 01;35',0
.rodata:000000000000783D aYuv0135        db '.yuv 01;35',0
.rodata:0000000000007848 aCgm0135        db '.cgm 01;35',0
.rodata:0000000000007853 aEmf0135        db '.emf 01;35',0
.rodata:000000000000785E aHttpsWikiXiphO db '# https://wiki.xiph.org/MIME_Types_and_File_Extensions',0
.rodata:0000000000007895 aOgv0135        db '.ogv 01;35',0
.rodata:00000000000078A0 aOgx0135        db '.ogx 01;35',0
.rodata:00000000000078AB aAudioFormats   db '# audio formats',0
.rodata:00000000000078BB aAac0036        db '.aac 00;36',0
.rodata:00000000000078C6 aAu0036         db '.au 00;36',0
.rodata:00000000000078D0 aFlac0036       db '.flac 00;36',0
.rodata:00000000000078DC aM4a0036        db '.m4a 00;36',0
.rodata:00000000000078E7 aMid0036        db '.mid 00;36',0
.rodata:00000000000078F2 aMidi0036       db '.midi 00;36',0
.rodata:00000000000078FE aMka0036        db '.mka 00;36',0
.rodata:0000000000007909 aMp30036        db '.mp3 00;36',0
.rodata:0000000000007914 aMpc0036        db '.mpc 00;36',0
.rodata:000000000000791F aOgg0036        db '.ogg 00;36',0
.rodata:000000000000792A aRa0036         db '.ra 00;36',0
.rodata:0000000000007934 aWav0036        db '.wav 00;36',0
.rodata:000000000000793F aHttpsWikiXiphO_0 db '# https://wiki.xiph.org/MIME_Types_and_File_Extensions',0
.rodata:0000000000007976 aOga0036        db '.oga 00;36',0
.rodata:0000000000007981 aOpus0036       db '.opus 00;36',0
.rodata:000000000000798D aSpx0036        db '.spx 00;36',0
.rodata:0000000000007998 aXspf0036       db '.xspf 00;36',0
.rodata:00000000000079A4 a831            db '8.31',0             ; DATA XREF: dc_parse_stream:loc_29CD↑o
.rodata:00000000000079A4                                         ; .data:Version↓o
.rodata:00000000000079A9 ; const char aWriteError[]
.rodata:00000000000079A9 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_31F3↑o
.rodata:00000000000079A9                                         ; .data.rel.ro:00000000002099A0↓o ...
.rodata:00000000000079B5 ; const char format[]
.rodata:00000000000079B5 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000079B5                                         ; main+35D↑o ...
.rodata:00000000000079BC ; const char file[]
.rodata:00000000000079BC file            db '/dev/null',0        ; DATA XREF: protect_fd+4↑o
.rodata:00000000000079C6                 align 8
.rodata:00000000000079C8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000079C8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007A00 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007A08 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007A08                                         ; main+1AA↑o
.rodata:0000000000007A0C unk_7A0C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007A0D                 db  80h
.rodata:0000000000007A0E                 db  98h
.rodata:0000000000007A0F                 db    0
.rodata:0000000000007A10 unk_7A10        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007A11                 db  80h
.rodata:0000000000007A12                 db  99h
.rodata:0000000000007A13                 db    0
.rodata:0000000000007A14 unk_7A14        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000007A15                 db    7
.rodata:0000000000007A16                 db  65h ; e
.rodata:0000000000007A17                 db    0
.rodata:0000000000007A18 unk_7A18        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007A19                 db 0AFh
.rodata:0000000000007A1A                 db    0
.rodata:0000000000007A1B unk_7A1B        db  22h ; "             ; DATA XREF: gettext_quote:loc_35D0↑o
.rodata:0000000000007A1B                                         ; quotearg_buffer_restyled:loc_438B↑o ...
.rodata:0000000000007A1C                 db    0
.rodata:0000000000007A1D ; const char asc_7A1D[2]
.rodata:0000000000007A1D asc_7A1D        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007A1D                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007A1F aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007A27 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:0000000000007A34 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BF8↓o
.rodata:0000000000007A34                                         ; .data.rel.ro:0000000000209C18↓o
.rodata:0000000000007A41 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007A41                                         ; DATA XREF: .data.rel.ro:0000000000209C00↓o
.rodata:0000000000007A55 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209C10↓o
.rodata:0000000000007A5D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C28↓o
.rodata:0000000000007A65                 align 20h
.rodata:0000000000007A80 jpt_3731        dd offset loc_44DA - 7A80h
.rodata:0000000000007A80                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007A80                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007A80                 dd offset loc_3733 - 7A80h ; jump table for switch statement
.rodata:0000000000007A80                 dd offset loc_4708 - 7A80h
.rodata:0000000000007A80                 dd offset loc_4514 - 7A80h
.rodata:0000000000007A80                 dd offset loc_4304 - 7A80h
.rodata:0000000000007A80                 dd offset loc_4360 - 7A80h
.rodata:0000000000007A80                 dd offset loc_43B5 - 7A80h
.rodata:0000000000007A80                 dd offset loc_43FA - 7A80h
.rodata:0000000000007A80                 dd offset loc_4434 - 7A80h
.rodata:0000000000007A80                 dd offset loc_4434 - 7A80h
.rodata:0000000000007A80                 dd offset loc_4434 - 7A80h
.rodata:0000000000007AAC jpt_388E        dd offset loc_3AB0 - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000007AAC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh ; jump table for switch statement
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset loc_3AF0 - 7AACh, offset loc_39F8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_39B8 - 7AACh, offset loc_3B80 - 7AACh, offset loc_3B70 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B60 - 7AACh, offset loc_3B50 - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset def_388E - 7AACh
.rodata:0000000000007AAC                 dd offset def_388E - 7AACh, offset def_388E - 7AACh, offset loc_3B40 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B30 - 7AACh, offset loc_3B30 - 7AACh, offset loc_3B00 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B30 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3B30 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3993 - 7AACh, offset loc_3B30 - 7AACh, offset loc_3B30 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B30 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3B30 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B30 - 7AACh, offset loc_3B30 - 7AACh, offset loc_3B30 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3963 - 7AACh, offset def_388E - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3B30 - 7AACh, offset loc_3A08 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3B30 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B30 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh, offset loc_3AD8 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3893 - 7AACh, offset loc_3B30 - 7AACh, offset loc_3893 - 7AACh
.rodata:0000000000007AAC                 dd offset loc_3B00 - 7AACh
.rodata:0000000000007CA8 jpt_3C1A        dd offset loc_3C80 - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007CA8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h ; jump table for switch statement
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset loc_3C70 - 7CA8h, offset loc_3DC0 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3DA8 - 7CA8h, offset loc_3C58 - 7CA8h, offset loc_3D98 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3C40 - 7CA8h, offset loc_3D80 - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h
.rodata:0000000000007CA8                 dd offset def_3C1A - 7CA8h, offset def_3C1A - 7CA8h, offset loc_3D68 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D50 - 7CA8h, offset loc_3D50 - 7CA8h, offset loc_3D38 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D50 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D50 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3990 - 7CA8h, offset loc_3D50 - 7CA8h, offset loc_3D50 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D50 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D50 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D50 - 7CA8h, offset loc_3D50 - 7CA8h, offset loc_3D50 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3960 - 7CA8h, offset def_3C1A - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D50 - 7CA8h, offset loc_3C20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D50 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D50 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h, offset loc_3D20 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3890 - 7CA8h, offset loc_3D50 - 7CA8h, offset loc_3890 - 7CA8h
.rodata:0000000000007CA8                 dd offset loc_3D38 - 7CA8h
.rodata:0000000000007EA4                 align 20h
.rodata:0000000000007EC0                 public quoting_style_vals
.rodata:0000000000007EC0 quoting_style_vals db    0
.rodata:0000000000007EC1                 db    0
.rodata:0000000000007EC2                 db    0
.rodata:0000000000007EC3                 db    0
.rodata:0000000000007EC4                 db    1
.rodata:0000000000007EC5                 db    0
.rodata:0000000000007EC6                 db    0
.rodata:0000000000007EC7                 db    0
.rodata:0000000000007EC8                 db    2
.rodata:0000000000007EC9                 db    0
.rodata:0000000000007ECA                 db    0
.rodata:0000000000007ECB                 db    0
.rodata:0000000000007ECC                 db    3
.rodata:0000000000007ECD                 db    0
.rodata:0000000000007ECE                 db    0
.rodata:0000000000007ECF                 db    0
.rodata:0000000000007ED0                 db    4
.rodata:0000000000007ED1                 db    0
.rodata:0000000000007ED2                 db    0
.rodata:0000000000007ED3                 db    0
.rodata:0000000000007ED4                 db    5
.rodata:0000000000007ED5                 db    0
.rodata:0000000000007ED6                 db    0
.rodata:0000000000007ED7                 db    0
.rodata:0000000000007ED8                 db    6
.rodata:0000000000007ED9                 db    0
.rodata:0000000000007EDA                 db    0
.rodata:0000000000007EDB                 db    0
.rodata:0000000000007EDC                 db    7
.rodata:0000000000007EDD                 db    0
.rodata:0000000000007EDE                 db    0
.rodata:0000000000007EDF                 db    0
.rodata:0000000000007EE0                 db    8
.rodata:0000000000007EE1                 db    0
.rodata:0000000000007EE2                 db    0
.rodata:0000000000007EE3                 db    0
.rodata:0000000000007EE4                 db    9
.rodata:0000000000007EE5                 db    0
.rodata:0000000000007EE6                 db    0
.rodata:0000000000007EE7                 db    0
.rodata:0000000000007EE8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007EE8                                         ; main+462↑o ...
.rodata:0000000000007EF4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000007EFB ; const char aC[]
.rodata:0000000000007EFB aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_527C↑o
.rodata:0000000000007EFF ; const char aWrittenByS[]
.rodata:0000000000007EFF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000007EFF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000007F0F ; const char aWrittenBySAndS[]
.rodata:0000000000007F0F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000007F0F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007F26 ; const char aWrittenBySSAnd[]
.rodata:0000000000007F26 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007F26                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007F42 ; const char aReportBugsToS[]
.rodata:0000000000007F42 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007F42                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000007F57 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007F57                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000007F6D ; const char aSHomePageS[]
.rodata:0000000000007F6D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000007F6D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007F81                 align 8
.rodata:0000000000007F88 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007F88 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007F88                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007F88                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007F88                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007F88                 db '.',0Ah
.rodata:0000000000007F88                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007F88                 db 0Ah,0
.rodata:0000000000008054                 align 8
.rodata:0000000000008058 ; const char aWrittenBySSSAn[]
.rodata:0000000000008058 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008058                                         ; DATA XREF: version_etc_arn:loc_54D0↑o
.rodata:0000000000008058                 db 'and %s.',0Ah,0
.rodata:0000000000008078 ; const char aWrittenBySSSSA[]
.rodata:0000000000008078 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008078                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000008078                 db '%s, and %s.',0Ah,0
.rodata:000000000000809C                 align 20h
.rodata:00000000000080A0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000080A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000080A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000080A0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000080C8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000080C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000080C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000080C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000080F4                 align 8
.rodata:00000000000080F8 ; const char aWrittenBySSSSS[]
.rodata:00000000000080F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000080F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000080F8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000080F8                 db 'and %s.',0Ah,0
.rodata:0000000000008128 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000008128 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008128                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000008128                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008128                 db '%s, and %s.',0Ah,0
.rodata:000000000000815C                 align 20h
.rodata:0000000000008160 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008160                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000008160                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008160                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000819C                 align 20h
.rodata:00000000000081A0 ; const char aGeneralHelpUsi[]
.rodata:00000000000081A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000081A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000081A0                 db 0
.rodata:00000000000081E1                 align 8
.rodata:00000000000081E8 jpt_52E4        dd offset loc_5366 - 81E8h
.rodata:00000000000081E8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000081E8                                         ; version_etc_arn+9D↑r
.rodata:00000000000081E8                 dd offset loc_53F8 - 81E8h ; jump table for switch statement
.rodata:00000000000081E8                 dd offset loc_5438 - 81E8h
.rodata:00000000000081E8                 dd offset loc_5480 - 81E8h
.rodata:00000000000081E8                 dd offset loc_54D0 - 81E8h
.rodata:00000000000081E8                 dd offset loc_5528 - 81E8h
.rodata:00000000000081E8                 dd offset loc_5558 - 81E8h
.rodata:00000000000081E8                 dd offset loc_55C0 - 81E8h
.rodata:00000000000081E8                 dd offset loc_52F0 - 81E8h
.rodata:00000000000081E8                 dd offset loc_53A0 - 81E8h
.rodata:0000000000008210                 align 20h
.rodata:0000000000008220                 public version_etc_copyright
.rodata:0000000000008220 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000008220                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000824F ; const char aMemoryExhauste[]
.rodata:000000000000824F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000824F                                         ; print_and_abort↑o
.rodata:0000000000008260 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_60A0↑o
.rodata:0000000000008266 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000008266                                         ; locale_charset:loc_60F0↑o
.rodata:0000000000008266 _rodata         ends
.rodata:0000000000008266
.eh_frame_hdr:000000000000826C ; ===========================================================================
.eh_frame_hdr:000000000000826C
.eh_frame_hdr:000000000000826C ; Segment type: Pure data
.eh_frame_hdr:000000000000826C ; Segment permissions: Read
.eh_frame_hdr:000000000000826C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000826C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000826C                 ;org 826Ch
.eh_frame_hdr:000000000000826C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000826D                 db  1Bh
.eh_frame_hdr:000000000000826E                 db    3
.eh_frame_hdr:000000000000826F                 db  3Bh ; ;
.eh_frame_hdr:0000000000008270                 db 0C8h
.eh_frame_hdr:0000000000008271                 db    2
.eh_frame_hdr:0000000000008272                 db    0
.eh_frame_hdr:0000000000008273                 db    0
.eh_frame_hdr:0000000000008274                 db  58h ; X
.eh_frame_hdr:0000000000008275                 db    0
.eh_frame_hdr:0000000000008276                 db    0
.eh_frame_hdr:0000000000008277                 db    0
.eh_frame_hdr:0000000000008278                 db  84h
.eh_frame_hdr:0000000000008279                 db  9Ah
.eh_frame_hdr:000000000000827A                 db 0FFh
.eh_frame_hdr:000000000000827B                 db 0FFh
.eh_frame_hdr:000000000000827C                 db  14h
.eh_frame_hdr:000000000000827D                 db    3
.eh_frame_hdr:000000000000827E                 db    0
.eh_frame_hdr:000000000000827F                 db    0
.eh_frame_hdr:0000000000008280                 db  94h
.eh_frame_hdr:0000000000008281                 db  9Dh
.eh_frame_hdr:0000000000008282                 db 0FFh
.eh_frame_hdr:0000000000008283                 db 0FFh
.eh_frame_hdr:0000000000008284                 db  3Ch ; <
.eh_frame_hdr:0000000000008285                 db    3
.eh_frame_hdr:0000000000008286                 db    0
.eh_frame_hdr:0000000000008287                 db    0
.eh_frame_hdr:0000000000008288                 db 0B4h
.eh_frame_hdr:0000000000008289                 db  9Dh
.eh_frame_hdr:000000000000828A                 db 0FFh
.eh_frame_hdr:000000000000828B                 db 0FFh
.eh_frame_hdr:000000000000828C                 db  10h
.eh_frame_hdr:000000000000828D                 db    4
.eh_frame_hdr:000000000000828E                 db    0
.eh_frame_hdr:000000000000828F                 db    0
.eh_frame_hdr:0000000000008290                 db  34h ; 4
.eh_frame_hdr:0000000000008291                 db 0A2h
.eh_frame_hdr:0000000000008292                 db 0FFh
.eh_frame_hdr:0000000000008293                 db 0FFh
.eh_frame_hdr:0000000000008294                 db 0E4h
.eh_frame_hdr:0000000000008295                 db    2
.eh_frame_hdr:0000000000008296                 db    0
.eh_frame_hdr:0000000000008297                 db    0
.eh_frame_hdr:0000000000008298                 db  44h ; D
.eh_frame_hdr:0000000000008299                 db 0A3h
.eh_frame_hdr:000000000000829A                 db 0FFh
.eh_frame_hdr:000000000000829B                 db 0FFh
.eh_frame_hdr:000000000000829C                 db  54h ; T
.eh_frame_hdr:000000000000829D                 db    3
.eh_frame_hdr:000000000000829E                 db    0
.eh_frame_hdr:000000000000829F                 db    0
.eh_frame_hdr:00000000000082A0                 db  34h ; 4
.eh_frame_hdr:00000000000082A1                 db 0A5h
.eh_frame_hdr:00000000000082A2                 db 0FFh
.eh_frame_hdr:00000000000082A3                 db 0FFh
.eh_frame_hdr:00000000000082A4                 db  94h
.eh_frame_hdr:00000000000082A5                 db    3
.eh_frame_hdr:00000000000082A6                 db    0
.eh_frame_hdr:00000000000082A7                 db    0
.eh_frame_hdr:00000000000082A8                 db  64h ; d
.eh_frame_hdr:00000000000082A9                 db 0ABh
.eh_frame_hdr:00000000000082AA                 db 0FFh
.eh_frame_hdr:00000000000082AB                 db 0FFh
.eh_frame_hdr:00000000000082AC                 db 0E4h
.eh_frame_hdr:00000000000082AD                 db    3
.eh_frame_hdr:00000000000082AE                 db    0
.eh_frame_hdr:00000000000082AF                 db    0
.eh_frame_hdr:00000000000082B0                 db 0D4h
.eh_frame_hdr:00000000000082B1                 db 0AEh
.eh_frame_hdr:00000000000082B2                 db 0FFh
.eh_frame_hdr:00000000000082B3                 db 0FFh
.eh_frame_hdr:00000000000082B4                 db  54h ; T
.eh_frame_hdr:00000000000082B5                 db    4
.eh_frame_hdr:00000000000082B6                 db    0
.eh_frame_hdr:00000000000082B7                 db    0
.eh_frame_hdr:00000000000082B8                 db  24h ; $
.eh_frame_hdr:00000000000082B9                 db 0AFh
.eh_frame_hdr:00000000000082BA                 db 0FFh
.eh_frame_hdr:00000000000082BB                 db 0FFh
.eh_frame_hdr:00000000000082BC                 db  6Ch ; l
.eh_frame_hdr:00000000000082BD                 db    4
.eh_frame_hdr:00000000000082BE                 db    0
.eh_frame_hdr:00000000000082BF                 db    0
.eh_frame_hdr:00000000000082C0                 db  34h ; 4
.eh_frame_hdr:00000000000082C1                 db 0AFh
.eh_frame_hdr:00000000000082C2                 db 0FFh
.eh_frame_hdr:00000000000082C3                 db 0FFh
.eh_frame_hdr:00000000000082C4                 db  80h
.eh_frame_hdr:00000000000082C5                 db    4
.eh_frame_hdr:00000000000082C6                 db    0
.eh_frame_hdr:00000000000082C7                 db    0
.eh_frame_hdr:00000000000082C8                 db  44h ; D
.eh_frame_hdr:00000000000082C9                 db 0AFh
.eh_frame_hdr:00000000000082CA                 db 0FFh
.eh_frame_hdr:00000000000082CB                 db 0FFh
.eh_frame_hdr:00000000000082CC                 db  94h
.eh_frame_hdr:00000000000082CD                 db    4
.eh_frame_hdr:00000000000082CE                 db    0
.eh_frame_hdr:00000000000082CF                 db    0
.eh_frame_hdr:00000000000082D0                 db 0F4h
.eh_frame_hdr:00000000000082D1                 db 0AFh
.eh_frame_hdr:00000000000082D2                 db 0FFh
.eh_frame_hdr:00000000000082D3                 db 0FFh
.eh_frame_hdr:00000000000082D4                 db 0C4h
.eh_frame_hdr:00000000000082D5                 db    4
.eh_frame_hdr:00000000000082D6                 db    0
.eh_frame_hdr:00000000000082D7                 db    0
.eh_frame_hdr:00000000000082D8                 db  54h ; T
.eh_frame_hdr:00000000000082D9                 db 0B0h
.eh_frame_hdr:00000000000082DA                 db 0FFh
.eh_frame_hdr:00000000000082DB                 db 0FFh
.eh_frame_hdr:00000000000082DC                 db 0D8h
.eh_frame_hdr:00000000000082DD                 db    4
.eh_frame_hdr:00000000000082DE                 db    0
.eh_frame_hdr:00000000000082DF                 db    0
.eh_frame_hdr:00000000000082E0                 db 0A4h
.eh_frame_hdr:00000000000082E1                 db 0B0h
.eh_frame_hdr:00000000000082E2                 db 0FFh
.eh_frame_hdr:00000000000082E3                 db 0FFh
.eh_frame_hdr:00000000000082E4                 db    4
.eh_frame_hdr:00000000000082E5                 db    5
.eh_frame_hdr:00000000000082E6                 db    0
.eh_frame_hdr:00000000000082E7                 db    0
.eh_frame_hdr:00000000000082E8                 db 0F4h
.eh_frame_hdr:00000000000082E9                 db 0B0h
.eh_frame_hdr:00000000000082EA                 db 0FFh
.eh_frame_hdr:00000000000082EB                 db 0FFh
.eh_frame_hdr:00000000000082EC                 db  2Ch ; ,
.eh_frame_hdr:00000000000082ED                 db    5
.eh_frame_hdr:00000000000082EE                 db    0
.eh_frame_hdr:00000000000082EF                 db    0
.eh_frame_hdr:00000000000082F0                 db 0A4h
.eh_frame_hdr:00000000000082F1                 db 0B2h
.eh_frame_hdr:00000000000082F2                 db 0FFh
.eh_frame_hdr:00000000000082F3                 db 0FFh
.eh_frame_hdr:00000000000082F4                 db  7Ch ; |
.eh_frame_hdr:00000000000082F5                 db    5
.eh_frame_hdr:00000000000082F6                 db    0
.eh_frame_hdr:00000000000082F7                 db    0
.eh_frame_hdr:00000000000082F8                 db  44h ; D
.eh_frame_hdr:00000000000082F9                 db 0B3h
.eh_frame_hdr:00000000000082FA                 db 0FFh
.eh_frame_hdr:00000000000082FB                 db 0FFh
.eh_frame_hdr:00000000000082FC                 db  9Ch
.eh_frame_hdr:00000000000082FD                 db    5
.eh_frame_hdr:00000000000082FE                 db    0
.eh_frame_hdr:00000000000082FF                 db    0
.eh_frame_hdr:0000000000008300                 db  34h ; 4
.eh_frame_hdr:0000000000008301                 db 0B4h
.eh_frame_hdr:0000000000008302                 db 0FFh
.eh_frame_hdr:0000000000008303                 db 0FFh
.eh_frame_hdr:0000000000008304                 db 0E0h
.eh_frame_hdr:0000000000008305                 db    5
.eh_frame_hdr:0000000000008306                 db    0
.eh_frame_hdr:0000000000008307                 db    0
.eh_frame_hdr:0000000000008308                 db  74h ; t
.eh_frame_hdr:0000000000008309                 db 0C6h
.eh_frame_hdr:000000000000830A                 db 0FFh
.eh_frame_hdr:000000000000830B                 db 0FFh
.eh_frame_hdr:000000000000830C                 db  58h ; X
.eh_frame_hdr:000000000000830D                 db    6
.eh_frame_hdr:000000000000830E                 db    0
.eh_frame_hdr:000000000000830F                 db    0
.eh_frame_hdr:0000000000008310                 db  24h ; $
.eh_frame_hdr:0000000000008311                 db 0C8h
.eh_frame_hdr:0000000000008312                 db 0FFh
.eh_frame_hdr:0000000000008313                 db 0FFh
.eh_frame_hdr:0000000000008314                 db 0C4h
.eh_frame_hdr:0000000000008315                 db    6
.eh_frame_hdr:0000000000008316                 db    0
.eh_frame_hdr:0000000000008317                 db    0
.eh_frame_hdr:0000000000008318                 db  64h ; d
.eh_frame_hdr:0000000000008319                 db 0C8h
.eh_frame_hdr:000000000000831A                 db 0FFh
.eh_frame_hdr:000000000000831B                 db 0FFh
.eh_frame_hdr:000000000000831C                 db 0F0h
.eh_frame_hdr:000000000000831D                 db    6
.eh_frame_hdr:000000000000831E                 db    0
.eh_frame_hdr:000000000000831F                 db    0
.eh_frame_hdr:0000000000008320                 db  84h
.eh_frame_hdr:0000000000008321                 db 0C8h
.eh_frame_hdr:0000000000008322                 db 0FFh
.eh_frame_hdr:0000000000008323                 db 0FFh
.eh_frame_hdr:0000000000008324                 db    4
.eh_frame_hdr:0000000000008325                 db    7
.eh_frame_hdr:0000000000008326                 db    0
.eh_frame_hdr:0000000000008327                 db    0
.eh_frame_hdr:0000000000008328                 db 0A4h
.eh_frame_hdr:0000000000008329                 db 0C8h
.eh_frame_hdr:000000000000832A                 db 0FFh
.eh_frame_hdr:000000000000832B                 db 0FFh
.eh_frame_hdr:000000000000832C                 db  18h
.eh_frame_hdr:000000000000832D                 db    7
.eh_frame_hdr:000000000000832E                 db    0
.eh_frame_hdr:000000000000832F                 db    0
.eh_frame_hdr:0000000000008330                 db 0E4h
.eh_frame_hdr:0000000000008331                 db 0C8h
.eh_frame_hdr:0000000000008332                 db 0FFh
.eh_frame_hdr:0000000000008333                 db 0FFh
.eh_frame_hdr:0000000000008334                 db  2Ch ; ,
.eh_frame_hdr:0000000000008335                 db    7
.eh_frame_hdr:0000000000008336                 db    0
.eh_frame_hdr:0000000000008337                 db    0
.eh_frame_hdr:0000000000008338                 db    4
.eh_frame_hdr:0000000000008339                 db 0C9h
.eh_frame_hdr:000000000000833A                 db 0FFh
.eh_frame_hdr:000000000000833B                 db 0FFh
.eh_frame_hdr:000000000000833C                 db  40h ; @
.eh_frame_hdr:000000000000833D                 db    7
.eh_frame_hdr:000000000000833E                 db    0
.eh_frame_hdr:000000000000833F                 db    0
.eh_frame_hdr:0000000000008340                 db  34h ; 4
.eh_frame_hdr:0000000000008341                 db 0C9h
.eh_frame_hdr:0000000000008342                 db 0FFh
.eh_frame_hdr:0000000000008343                 db 0FFh
.eh_frame_hdr:0000000000008344                 db  54h ; T
.eh_frame_hdr:0000000000008345                 db    7
.eh_frame_hdr:0000000000008346                 db    0
.eh_frame_hdr:0000000000008347                 db    0
.eh_frame_hdr:0000000000008348                 db 0B4h
.eh_frame_hdr:0000000000008349                 db 0C9h
.eh_frame_hdr:000000000000834A                 db 0FFh
.eh_frame_hdr:000000000000834B                 db 0FFh
.eh_frame_hdr:000000000000834C                 db 0A8h
.eh_frame_hdr:000000000000834D                 db    7
.eh_frame_hdr:000000000000834E                 db    0
.eh_frame_hdr:000000000000834F                 db    0
.eh_frame_hdr:0000000000008350                 db 0A4h
.eh_frame_hdr:0000000000008351                 db 0CAh
.eh_frame_hdr:0000000000008352                 db 0FFh
.eh_frame_hdr:0000000000008353                 db 0FFh
.eh_frame_hdr:0000000000008354                 db  14h
.eh_frame_hdr:0000000000008355                 db    8
.eh_frame_hdr:0000000000008356                 db    0
.eh_frame_hdr:0000000000008357                 db    0
.eh_frame_hdr:0000000000008358                 db 0B4h
.eh_frame_hdr:0000000000008359                 db 0CAh
.eh_frame_hdr:000000000000835A                 db 0FFh
.eh_frame_hdr:000000000000835B                 db 0FFh
.eh_frame_hdr:000000000000835C                 db  28h ; (
.eh_frame_hdr:000000000000835D                 db    8
.eh_frame_hdr:000000000000835E                 db    0
.eh_frame_hdr:000000000000835F                 db    0
.eh_frame_hdr:0000000000008360                 db  54h ; T
.eh_frame_hdr:0000000000008361                 db 0CBh
.eh_frame_hdr:0000000000008362                 db 0FFh
.eh_frame_hdr:0000000000008363                 db 0FFh
.eh_frame_hdr:0000000000008364                 db  54h ; T
.eh_frame_hdr:0000000000008365                 db    8
.eh_frame_hdr:0000000000008366                 db    0
.eh_frame_hdr:0000000000008367                 db    0
.eh_frame_hdr:0000000000008368                 db  74h ; t
.eh_frame_hdr:0000000000008369                 db 0CBh
.eh_frame_hdr:000000000000836A                 db 0FFh
.eh_frame_hdr:000000000000836B                 db 0FFh
.eh_frame_hdr:000000000000836C                 db  68h ; h
.eh_frame_hdr:000000000000836D                 db    8
.eh_frame_hdr:000000000000836E                 db    0
.eh_frame_hdr:000000000000836F                 db    0
.eh_frame_hdr:0000000000008370                 db  84h
.eh_frame_hdr:0000000000008371                 db 0CBh
.eh_frame_hdr:0000000000008372                 db 0FFh
.eh_frame_hdr:0000000000008373                 db 0FFh
.eh_frame_hdr:0000000000008374                 db  7Ch ; |
.eh_frame_hdr:0000000000008375                 db    8
.eh_frame_hdr:0000000000008376                 db    0
.eh_frame_hdr:0000000000008377                 db    0
.eh_frame_hdr:0000000000008378                 db 0A4h
.eh_frame_hdr:0000000000008379                 db 0CBh
.eh_frame_hdr:000000000000837A                 db 0FFh
.eh_frame_hdr:000000000000837B                 db 0FFh
.eh_frame_hdr:000000000000837C                 db  90h
.eh_frame_hdr:000000000000837D                 db    8
.eh_frame_hdr:000000000000837E                 db    0
.eh_frame_hdr:000000000000837F                 db    0
.eh_frame_hdr:0000000000008380                 db 0C4h
.eh_frame_hdr:0000000000008381                 db 0CBh
.eh_frame_hdr:0000000000008382                 db 0FFh
.eh_frame_hdr:0000000000008383                 db 0FFh
.eh_frame_hdr:0000000000008384                 db 0A4h
.eh_frame_hdr:0000000000008385                 db    8
.eh_frame_hdr:0000000000008386                 db    0
.eh_frame_hdr:0000000000008387                 db    0
.eh_frame_hdr:0000000000008388                 db  54h ; T
.eh_frame_hdr:0000000000008389                 db 0CCh
.eh_frame_hdr:000000000000838A                 db 0FFh
.eh_frame_hdr:000000000000838B                 db 0FFh
.eh_frame_hdr:000000000000838C                 db 0C0h
.eh_frame_hdr:000000000000838D                 db    8
.eh_frame_hdr:000000000000838E                 db    0
.eh_frame_hdr:000000000000838F                 db    0
.eh_frame_hdr:0000000000008390                 db 0E4h
.eh_frame_hdr:0000000000008391                 db 0CCh
.eh_frame_hdr:0000000000008392                 db 0FFh
.eh_frame_hdr:0000000000008393                 db 0FFh
.eh_frame_hdr:0000000000008394                 db 0DCh
.eh_frame_hdr:0000000000008395                 db    8
.eh_frame_hdr:0000000000008396                 db    0
.eh_frame_hdr:0000000000008397                 db    0
.eh_frame_hdr:0000000000008398                 db 0F4h
.eh_frame_hdr:0000000000008399                 db 0CCh
.eh_frame_hdr:000000000000839A                 db 0FFh
.eh_frame_hdr:000000000000839B                 db 0FFh
.eh_frame_hdr:000000000000839C                 db 0F0h
.eh_frame_hdr:000000000000839D                 db    8
.eh_frame_hdr:000000000000839E                 db    0
.eh_frame_hdr:000000000000839F                 db    0
.eh_frame_hdr:00000000000083A0                 db    4
.eh_frame_hdr:00000000000083A1                 db 0CDh
.eh_frame_hdr:00000000000083A2                 db 0FFh
.eh_frame_hdr:00000000000083A3                 db 0FFh
.eh_frame_hdr:00000000000083A4                 db    4
.eh_frame_hdr:00000000000083A5                 db    9
.eh_frame_hdr:00000000000083A6                 db    0
.eh_frame_hdr:00000000000083A7                 db    0
.eh_frame_hdr:00000000000083A8                 db 0A4h
.eh_frame_hdr:00000000000083A9                 db 0CDh
.eh_frame_hdr:00000000000083AA                 db 0FFh
.eh_frame_hdr:00000000000083AB                 db 0FFh
.eh_frame_hdr:00000000000083AC                 db  20h
.eh_frame_hdr:00000000000083AD                 db    9
.eh_frame_hdr:00000000000083AE                 db    0
.eh_frame_hdr:00000000000083AF                 db    0
.eh_frame_hdr:00000000000083B0                 db 0B4h
.eh_frame_hdr:00000000000083B1                 db 0CDh
.eh_frame_hdr:00000000000083B2                 db 0FFh
.eh_frame_hdr:00000000000083B3                 db 0FFh
.eh_frame_hdr:00000000000083B4                 db  34h ; 4
.eh_frame_hdr:00000000000083B5                 db    9
.eh_frame_hdr:00000000000083B6                 db    0
.eh_frame_hdr:00000000000083B7                 db    0
.eh_frame_hdr:00000000000083B8                 db 0D4h
.eh_frame_hdr:00000000000083B9                 db 0CDh
.eh_frame_hdr:00000000000083BA                 db 0FFh
.eh_frame_hdr:00000000000083BB                 db 0FFh
.eh_frame_hdr:00000000000083BC                 db  48h ; H
.eh_frame_hdr:00000000000083BD                 db    9
.eh_frame_hdr:00000000000083BE                 db    0
.eh_frame_hdr:00000000000083BF                 db    0
.eh_frame_hdr:00000000000083C0                 db 0E4h
.eh_frame_hdr:00000000000083C1                 db 0CDh
.eh_frame_hdr:00000000000083C2                 db 0FFh
.eh_frame_hdr:00000000000083C3                 db 0FFh
.eh_frame_hdr:00000000000083C4                 db  5Ch ; \
.eh_frame_hdr:00000000000083C5                 db    9
.eh_frame_hdr:00000000000083C6                 db    0
.eh_frame_hdr:00000000000083C7                 db    0
.eh_frame_hdr:00000000000083C8                 db  74h ; t
.eh_frame_hdr:00000000000083C9                 db 0CEh
.eh_frame_hdr:00000000000083CA                 db 0FFh
.eh_frame_hdr:00000000000083CB                 db 0FFh
.eh_frame_hdr:00000000000083CC                 db  78h ; x
.eh_frame_hdr:00000000000083CD                 db    9
.eh_frame_hdr:00000000000083CE                 db    0
.eh_frame_hdr:00000000000083CF                 db    0
.eh_frame_hdr:00000000000083D0                 db  14h
.eh_frame_hdr:00000000000083D1                 db 0CFh
.eh_frame_hdr:00000000000083D2                 db 0FFh
.eh_frame_hdr:00000000000083D3                 db 0FFh
.eh_frame_hdr:00000000000083D4                 db  94h
.eh_frame_hdr:00000000000083D5                 db    9
.eh_frame_hdr:00000000000083D6                 db    0
.eh_frame_hdr:00000000000083D7                 db    0
.eh_frame_hdr:00000000000083D8                 db  24h ; $
.eh_frame_hdr:00000000000083D9                 db 0CFh
.eh_frame_hdr:00000000000083DA                 db 0FFh
.eh_frame_hdr:00000000000083DB                 db 0FFh
.eh_frame_hdr:00000000000083DC                 db 0A8h
.eh_frame_hdr:00000000000083DD                 db    9
.eh_frame_hdr:00000000000083DE                 db    0
.eh_frame_hdr:00000000000083DF                 db    0
.eh_frame_hdr:00000000000083E0                 db  44h ; D
.eh_frame_hdr:00000000000083E1                 db 0CFh
.eh_frame_hdr:00000000000083E2                 db 0FFh
.eh_frame_hdr:00000000000083E3                 db 0FFh
.eh_frame_hdr:00000000000083E4                 db 0BCh
.eh_frame_hdr:00000000000083E5                 db    9
.eh_frame_hdr:00000000000083E6                 db    0
.eh_frame_hdr:00000000000083E7                 db    0
.eh_frame_hdr:00000000000083E8                 db  64h ; d
.eh_frame_hdr:00000000000083E9                 db 0CFh
.eh_frame_hdr:00000000000083EA                 db 0FFh
.eh_frame_hdr:00000000000083EB                 db 0FFh
.eh_frame_hdr:00000000000083EC                 db 0D0h
.eh_frame_hdr:00000000000083ED                 db    9
.eh_frame_hdr:00000000000083EE                 db    0
.eh_frame_hdr:00000000000083EF                 db    0
.eh_frame_hdr:00000000000083F0                 db  74h ; t
.eh_frame_hdr:00000000000083F1                 db 0CFh
.eh_frame_hdr:00000000000083F2                 db 0FFh
.eh_frame_hdr:00000000000083F3                 db 0FFh
.eh_frame_hdr:00000000000083F4                 db 0E4h
.eh_frame_hdr:00000000000083F5                 db    9
.eh_frame_hdr:00000000000083F6                 db    0
.eh_frame_hdr:00000000000083F7                 db    0
.eh_frame_hdr:00000000000083F8                 db  94h
.eh_frame_hdr:00000000000083F9                 db 0CFh
.eh_frame_hdr:00000000000083FA                 db 0FFh
.eh_frame_hdr:00000000000083FB                 db 0FFh
.eh_frame_hdr:00000000000083FC                 db 0F8h
.eh_frame_hdr:00000000000083FD                 db    9
.eh_frame_hdr:00000000000083FE                 db    0
.eh_frame_hdr:00000000000083FF                 db    0
.eh_frame_hdr:0000000000008400                 db 0B4h
.eh_frame_hdr:0000000000008401                 db 0CFh
.eh_frame_hdr:0000000000008402                 db 0FFh
.eh_frame_hdr:0000000000008403                 db 0FFh
.eh_frame_hdr:0000000000008404                 db  0Ch
.eh_frame_hdr:0000000000008405                 db  0Ah
.eh_frame_hdr:0000000000008406                 db    0
.eh_frame_hdr:0000000000008407                 db    0
.eh_frame_hdr:0000000000008408                 db 0D4h
.eh_frame_hdr:0000000000008409                 db 0CFh
.eh_frame_hdr:000000000000840A                 db 0FFh
.eh_frame_hdr:000000000000840B                 db 0FFh
.eh_frame_hdr:000000000000840C                 db  24h ; $
.eh_frame_hdr:000000000000840D                 db  0Ah
.eh_frame_hdr:000000000000840E                 db    0
.eh_frame_hdr:000000000000840F                 db    0
.eh_frame_hdr:0000000000008410                 db 0F4h
.eh_frame_hdr:0000000000008411                 db 0D3h
.eh_frame_hdr:0000000000008412                 db 0FFh
.eh_frame_hdr:0000000000008413                 db 0FFh
.eh_frame_hdr:0000000000008414                 db  38h ; 8
.eh_frame_hdr:0000000000008415                 db  0Bh
.eh_frame_hdr:0000000000008416                 db    0
.eh_frame_hdr:0000000000008417                 db    0
.eh_frame_hdr:0000000000008418                 db  14h
.eh_frame_hdr:0000000000008419                 db 0D4h
.eh_frame_hdr:000000000000841A                 db 0FFh
.eh_frame_hdr:000000000000841B                 db 0FFh
.eh_frame_hdr:000000000000841C                 db  4Ch ; L
.eh_frame_hdr:000000000000841D                 db  0Bh
.eh_frame_hdr:000000000000841E                 db    0
.eh_frame_hdr:000000000000841F                 db    0
.eh_frame_hdr:0000000000008420                 db  94h
.eh_frame_hdr:0000000000008421                 db 0D4h
.eh_frame_hdr:0000000000008422                 db 0FFh
.eh_frame_hdr:0000000000008423                 db 0FFh
.eh_frame_hdr:0000000000008424                 db  68h ; h
.eh_frame_hdr:0000000000008425                 db  0Bh
.eh_frame_hdr:0000000000008426                 db    0
.eh_frame_hdr:0000000000008427                 db    0
.eh_frame_hdr:0000000000008428                 db  74h ; t
.eh_frame_hdr:0000000000008429                 db 0D5h
.eh_frame_hdr:000000000000842A                 db 0FFh
.eh_frame_hdr:000000000000842B                 db 0FFh
.eh_frame_hdr:000000000000842C                 db  94h
.eh_frame_hdr:000000000000842D                 db  0Bh
.eh_frame_hdr:000000000000842E                 db    0
.eh_frame_hdr:000000000000842F                 db    0
.eh_frame_hdr:0000000000008430                 db 0F4h
.eh_frame_hdr:0000000000008431                 db 0D5h
.eh_frame_hdr:0000000000008432                 db 0FFh
.eh_frame_hdr:0000000000008433                 db 0FFh
.eh_frame_hdr:0000000000008434                 db 0B4h
.eh_frame_hdr:0000000000008435                 db  0Bh
.eh_frame_hdr:0000000000008436                 db    0
.eh_frame_hdr:0000000000008437                 db    0
.eh_frame_hdr:0000000000008438                 db  14h
.eh_frame_hdr:0000000000008439                 db 0D6h
.eh_frame_hdr:000000000000843A                 db 0FFh
.eh_frame_hdr:000000000000843B                 db 0FFh
.eh_frame_hdr:000000000000843C                 db 0D0h
.eh_frame_hdr:000000000000843D                 db  0Bh
.eh_frame_hdr:000000000000843E                 db    0
.eh_frame_hdr:000000000000843F                 db    0
.eh_frame_hdr:0000000000008440                 db  44h ; D
.eh_frame_hdr:0000000000008441                 db 0D6h
.eh_frame_hdr:0000000000008442                 db 0FFh
.eh_frame_hdr:0000000000008443                 db 0FFh
.eh_frame_hdr:0000000000008444                 db 0E4h
.eh_frame_hdr:0000000000008445                 db  0Bh
.eh_frame_hdr:0000000000008446                 db    0
.eh_frame_hdr:0000000000008447                 db    0
.eh_frame_hdr:0000000000008448                 db  54h ; T
.eh_frame_hdr:0000000000008449                 db 0D6h
.eh_frame_hdr:000000000000844A                 db 0FFh
.eh_frame_hdr:000000000000844B                 db 0FFh
.eh_frame_hdr:000000000000844C                 db 0F8h
.eh_frame_hdr:000000000000844D                 db  0Bh
.eh_frame_hdr:000000000000844E                 db    0
.eh_frame_hdr:000000000000844F                 db    0
.eh_frame_hdr:0000000000008450                 db  94h
.eh_frame_hdr:0000000000008451                 db 0D6h
.eh_frame_hdr:0000000000008452                 db 0FFh
.eh_frame_hdr:0000000000008453                 db 0FFh
.eh_frame_hdr:0000000000008454                 db  1Ch
.eh_frame_hdr:0000000000008455                 db  0Ch
.eh_frame_hdr:0000000000008456                 db    0
.eh_frame_hdr:0000000000008457                 db    0
.eh_frame_hdr:0000000000008458                 db 0C4h
.eh_frame_hdr:0000000000008459                 db 0D6h
.eh_frame_hdr:000000000000845A                 db 0FFh
.eh_frame_hdr:000000000000845B                 db 0FFh
.eh_frame_hdr:000000000000845C                 db  30h ; 0
.eh_frame_hdr:000000000000845D                 db  0Ch
.eh_frame_hdr:000000000000845E                 db    0
.eh_frame_hdr:000000000000845F                 db    0
.eh_frame_hdr:0000000000008460                 db  54h ; T
.eh_frame_hdr:0000000000008461                 db 0D7h
.eh_frame_hdr:0000000000008462                 db 0FFh
.eh_frame_hdr:0000000000008463                 db 0FFh
.eh_frame_hdr:0000000000008464                 db  48h ; H
.eh_frame_hdr:0000000000008465                 db  0Ch
.eh_frame_hdr:0000000000008466                 db    0
.eh_frame_hdr:0000000000008467                 db    0
.eh_frame_hdr:0000000000008468                 db 0A4h
.eh_frame_hdr:0000000000008469                 db 0D7h
.eh_frame_hdr:000000000000846A                 db 0FFh
.eh_frame_hdr:000000000000846B                 db 0FFh
.eh_frame_hdr:000000000000846C                 db  60h ; `
.eh_frame_hdr:000000000000846D                 db  0Ch
.eh_frame_hdr:000000000000846E                 db    0
.eh_frame_hdr:000000000000846F                 db    0
.eh_frame_hdr:0000000000008470                 db 0C4h
.eh_frame_hdr:0000000000008471                 db 0D7h
.eh_frame_hdr:0000000000008472                 db 0FFh
.eh_frame_hdr:0000000000008473                 db 0FFh
.eh_frame_hdr:0000000000008474                 db  7Ch ; |
.eh_frame_hdr:0000000000008475                 db  0Ch
.eh_frame_hdr:0000000000008476                 db    0
.eh_frame_hdr:0000000000008477                 db    0
.eh_frame_hdr:0000000000008478                 db 0F4h
.eh_frame_hdr:0000000000008479                 db 0D7h
.eh_frame_hdr:000000000000847A                 db 0FFh
.eh_frame_hdr:000000000000847B                 db 0FFh
.eh_frame_hdr:000000000000847C                 db  98h
.eh_frame_hdr:000000000000847D                 db  0Ch
.eh_frame_hdr:000000000000847E                 db    0
.eh_frame_hdr:000000000000847F                 db    0
.eh_frame_hdr:0000000000008480                 db  24h ; $
.eh_frame_hdr:0000000000008481                 db 0D8h
.eh_frame_hdr:0000000000008482                 db 0FFh
.eh_frame_hdr:0000000000008483                 db 0FFh
.eh_frame_hdr:0000000000008484                 db 0C0h
.eh_frame_hdr:0000000000008485                 db  0Ch
.eh_frame_hdr:0000000000008486                 db    0
.eh_frame_hdr:0000000000008487                 db    0
.eh_frame_hdr:0000000000008488                 db  44h ; D
.eh_frame_hdr:0000000000008489                 db 0D8h
.eh_frame_hdr:000000000000848A                 db 0FFh
.eh_frame_hdr:000000000000848B                 db 0FFh
.eh_frame_hdr:000000000000848C                 db 0DCh
.eh_frame_hdr:000000000000848D                 db  0Ch
.eh_frame_hdr:000000000000848E                 db    0
.eh_frame_hdr:000000000000848F                 db    0
.eh_frame_hdr:0000000000008490                 db  84h
.eh_frame_hdr:0000000000008491                 db 0D8h
.eh_frame_hdr:0000000000008492                 db 0FFh
.eh_frame_hdr:0000000000008493                 db 0FFh
.eh_frame_hdr:0000000000008494                 db 0F4h
.eh_frame_hdr:0000000000008495                 db  0Ch
.eh_frame_hdr:0000000000008496                 db    0
.eh_frame_hdr:0000000000008497                 db    0
.eh_frame_hdr:0000000000008498                 db 0A4h
.eh_frame_hdr:0000000000008499                 db 0D8h
.eh_frame_hdr:000000000000849A                 db 0FFh
.eh_frame_hdr:000000000000849B                 db 0FFh
.eh_frame_hdr:000000000000849C                 db  14h
.eh_frame_hdr:000000000000849D                 db  0Dh
.eh_frame_hdr:000000000000849E                 db    0
.eh_frame_hdr:000000000000849F                 db    0
.eh_frame_hdr:00000000000084A0                 db  24h ; $
.eh_frame_hdr:00000000000084A1                 db 0D9h
.eh_frame_hdr:00000000000084A2                 db 0FFh
.eh_frame_hdr:00000000000084A3                 db 0FFh
.eh_frame_hdr:00000000000084A4                 db  4Ch ; L
.eh_frame_hdr:00000000000084A5                 db  0Dh
.eh_frame_hdr:00000000000084A6                 db    0
.eh_frame_hdr:00000000000084A7                 db    0
.eh_frame_hdr:00000000000084A8                 db  64h ; d
.eh_frame_hdr:00000000000084A9                 db 0D9h
.eh_frame_hdr:00000000000084AA                 db 0FFh
.eh_frame_hdr:00000000000084AB                 db 0FFh
.eh_frame_hdr:00000000000084AC                 db  6Ch ; l
.eh_frame_hdr:00000000000084AD                 db  0Dh
.eh_frame_hdr:00000000000084AE                 db    0
.eh_frame_hdr:00000000000084AF                 db    0
.eh_frame_hdr:00000000000084B0                 db 0C4h
.eh_frame_hdr:00000000000084B1                 db 0D9h
.eh_frame_hdr:00000000000084B2                 db 0FFh
.eh_frame_hdr:00000000000084B3                 db 0FFh
.eh_frame_hdr:00000000000084B4                 db  9Ch
.eh_frame_hdr:00000000000084B5                 db  0Dh
.eh_frame_hdr:00000000000084B6                 db    0
.eh_frame_hdr:00000000000084B7                 db    0
.eh_frame_hdr:00000000000084B8                 db  54h ; T
.eh_frame_hdr:00000000000084B9                 db 0DAh
.eh_frame_hdr:00000000000084BA                 db 0FFh
.eh_frame_hdr:00000000000084BB                 db 0FFh
.eh_frame_hdr:00000000000084BC                 db 0DCh
.eh_frame_hdr:00000000000084BD                 db  0Dh
.eh_frame_hdr:00000000000084BE                 db    0
.eh_frame_hdr:00000000000084BF                 db    0
.eh_frame_hdr:00000000000084C0                 db  94h
.eh_frame_hdr:00000000000084C1                 db 0DAh
.eh_frame_hdr:00000000000084C2                 db 0FFh
.eh_frame_hdr:00000000000084C3                 db 0FFh
.eh_frame_hdr:00000000000084C4                 db 0F0h
.eh_frame_hdr:00000000000084C5                 db  0Dh
.eh_frame_hdr:00000000000084C6                 db    0
.eh_frame_hdr:00000000000084C7                 db    0
.eh_frame_hdr:00000000000084C8                 db 0B4h
.eh_frame_hdr:00000000000084C9                 db 0DAh
.eh_frame_hdr:00000000000084CA                 db 0FFh
.eh_frame_hdr:00000000000084CB                 db 0FFh
.eh_frame_hdr:00000000000084CC                 db    4
.eh_frame_hdr:00000000000084CD                 db  0Eh
.eh_frame_hdr:00000000000084CE                 db    0
.eh_frame_hdr:00000000000084CF                 db    0
.eh_frame_hdr:00000000000084D0                 db 0D4h
.eh_frame_hdr:00000000000084D1                 db 0DAh
.eh_frame_hdr:00000000000084D2                 db 0FFh
.eh_frame_hdr:00000000000084D3                 db 0FFh
.eh_frame_hdr:00000000000084D4                 db  18h
.eh_frame_hdr:00000000000084D5                 db  0Eh
.eh_frame_hdr:00000000000084D6                 db    0
.eh_frame_hdr:00000000000084D7                 db    0
.eh_frame_hdr:00000000000084D8                 db  64h ; d
.eh_frame_hdr:00000000000084D9                 db 0DBh
.eh_frame_hdr:00000000000084DA                 db 0FFh
.eh_frame_hdr:00000000000084DB                 db 0FFh
.eh_frame_hdr:00000000000084DC                 db  48h ; H
.eh_frame_hdr:00000000000084DD                 db  0Eh
.eh_frame_hdr:00000000000084DE                 db    0
.eh_frame_hdr:00000000000084DF                 db    0
.eh_frame_hdr:00000000000084E0                 db  84h
.eh_frame_hdr:00000000000084E1                 db 0DBh
.eh_frame_hdr:00000000000084E2                 db 0FFh
.eh_frame_hdr:00000000000084E3                 db 0FFh
.eh_frame_hdr:00000000000084E4                 db  5Ch ; \
.eh_frame_hdr:00000000000084E5                 db  0Eh
.eh_frame_hdr:00000000000084E6                 db    0
.eh_frame_hdr:00000000000084E7                 db    0
.eh_frame_hdr:00000000000084E8                 db 0A4h
.eh_frame_hdr:00000000000084E9                 db 0DBh
.eh_frame_hdr:00000000000084EA                 db 0FFh
.eh_frame_hdr:00000000000084EB                 db 0FFh
.eh_frame_hdr:00000000000084EC                 db  70h ; p
.eh_frame_hdr:00000000000084ED                 db  0Eh
.eh_frame_hdr:00000000000084EE                 db    0
.eh_frame_hdr:00000000000084EF                 db    0
.eh_frame_hdr:00000000000084F0                 db  94h
.eh_frame_hdr:00000000000084F1                 db 0DCh
.eh_frame_hdr:00000000000084F2                 db 0FFh
.eh_frame_hdr:00000000000084F3                 db 0FFh
.eh_frame_hdr:00000000000084F4                 db 0B0h
.eh_frame_hdr:00000000000084F5                 db  0Eh
.eh_frame_hdr:00000000000084F6                 db    0
.eh_frame_hdr:00000000000084F7                 db    0
.eh_frame_hdr:00000000000084F8                 db 0D4h
.eh_frame_hdr:00000000000084F9                 db 0DCh
.eh_frame_hdr:00000000000084FA                 db 0FFh
.eh_frame_hdr:00000000000084FB                 db 0FFh
.eh_frame_hdr:00000000000084FC                 db 0C4h
.eh_frame_hdr:00000000000084FD                 db  0Eh
.eh_frame_hdr:00000000000084FE                 db    0
.eh_frame_hdr:00000000000084FF                 db    0
.eh_frame_hdr:0000000000008500                 db  44h ; D
.eh_frame_hdr:0000000000008501                 db 0DDh
.eh_frame_hdr:0000000000008502                 db 0FFh
.eh_frame_hdr:0000000000008503                 db 0FFh
.eh_frame_hdr:0000000000008504                 db 0FCh
.eh_frame_hdr:0000000000008505                 db  0Eh
.eh_frame_hdr:0000000000008506                 db    0
.eh_frame_hdr:0000000000008507                 db    0
.eh_frame_hdr:0000000000008508                 db  74h ; t
.eh_frame_hdr:0000000000008509                 db 0DDh
.eh_frame_hdr:000000000000850A                 db 0FFh
.eh_frame_hdr:000000000000850B                 db 0FFh
.eh_frame_hdr:000000000000850C                 db  14h
.eh_frame_hdr:000000000000850D                 db  0Fh
.eh_frame_hdr:000000000000850E                 db    0
.eh_frame_hdr:000000000000850F                 db    0
.eh_frame_hdr:0000000000008510                 db 0F4h
.eh_frame_hdr:0000000000008511                 db 0DDh
.eh_frame_hdr:0000000000008512                 db 0FFh
.eh_frame_hdr:0000000000008513                 db 0FFh
.eh_frame_hdr:0000000000008514                 db  64h ; d
.eh_frame_hdr:0000000000008515                 db  0Fh
.eh_frame_hdr:0000000000008516                 db    0
.eh_frame_hdr:0000000000008517                 db    0
.eh_frame_hdr:0000000000008518                 db  54h ; T
.eh_frame_hdr:0000000000008519                 db 0DEh
.eh_frame_hdr:000000000000851A                 db 0FFh
.eh_frame_hdr:000000000000851B                 db 0FFh
.eh_frame_hdr:000000000000851C                 db  84h
.eh_frame_hdr:000000000000851D                 db  0Fh
.eh_frame_hdr:000000000000851E                 db    0
.eh_frame_hdr:000000000000851F                 db    0
.eh_frame_hdr:0000000000008520                 db  94h
.eh_frame_hdr:0000000000008521                 db 0DEh
.eh_frame_hdr:0000000000008522                 db 0FFh
.eh_frame_hdr:0000000000008523                 db 0FFh
.eh_frame_hdr:0000000000008524                 db 0A4h
.eh_frame_hdr:0000000000008525                 db  0Fh
.eh_frame_hdr:0000000000008526                 db    0
.eh_frame_hdr:0000000000008527                 db    0
.eh_frame_hdr:0000000000008528                 db    4
.eh_frame_hdr:0000000000008529                 db 0DFh
.eh_frame_hdr:000000000000852A                 db 0FFh
.eh_frame_hdr:000000000000852B                 db 0FFh
.eh_frame_hdr:000000000000852C                 db 0ECh
.eh_frame_hdr:000000000000852D                 db  0Fh
.eh_frame_hdr:000000000000852E                 db    0
.eh_frame_hdr:000000000000852F                 db    0
.eh_frame_hdr:0000000000008530                 db  14h
.eh_frame_hdr:0000000000008531                 db 0DFh
.eh_frame_hdr:0000000000008532                 db 0FFh
.eh_frame_hdr:0000000000008533                 db 0FFh
.eh_frame_hdr:0000000000008534                 db    4
.eh_frame_hdr:0000000000008535                 db  10h
.eh_frame_hdr:0000000000008536                 db    0
.eh_frame_hdr:0000000000008537                 db    0
.eh_frame_hdr:0000000000008537 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000008537
.eh_frame:0000000000008538 ; ===========================================================================
.eh_frame:0000000000008538
.eh_frame:0000000000008538 ; Segment type: Pure data
.eh_frame:0000000000008538 ; Segment permissions: Read
.eh_frame:0000000000008538 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000008538                 assume cs:_eh_frame
.eh_frame:0000000000008538                 ;org 8538h
.eh_frame:0000000000008538                 db  14h
.eh_frame:0000000000008539                 db    0
.eh_frame:000000000000853A                 db    0
.eh_frame:000000000000853B                 db    0
.eh_frame:000000000000853C                 db    0
.eh_frame:000000000000853D                 db    0
.eh_frame:000000000000853E                 db    0
.eh_frame:000000000000853F                 db    0
.eh_frame:0000000000008540                 db    1
.eh_frame:0000000000008541                 db  7Ah ; z
.eh_frame:0000000000008542                 db  52h ; R
.eh_frame:0000000000008543                 db    0
.eh_frame:0000000000008544                 db    1
.eh_frame:0000000000008545                 db  78h ; x
.eh_frame:0000000000008546                 db  10h
.eh_frame:0000000000008547                 db    1
.eh_frame:0000000000008548                 db  1Bh
.eh_frame:0000000000008549                 db  0Ch
.eh_frame:000000000000854A                 db    7
.eh_frame:000000000000854B                 db    8
.eh_frame:000000000000854C                 db  90h
.eh_frame:000000000000854D                 db    1
.eh_frame:000000000000854E                 db    7
.eh_frame:000000000000854F                 db  10h
.eh_frame:0000000000008550                 db  14h
.eh_frame:0000000000008551                 db    0
.eh_frame:0000000000008552                 db    0
.eh_frame:0000000000008553                 db    0
.eh_frame:0000000000008554                 db  1Ch
.eh_frame:0000000000008555                 db    0
.eh_frame:0000000000008556                 db    0
.eh_frame:0000000000008557                 db    0
.eh_frame:0000000000008558                 db  48h ; H
.eh_frame:0000000000008559                 db  9Fh
.eh_frame:000000000000855A                 db 0FFh
.eh_frame:000000000000855B                 db 0FFh
.eh_frame:000000000000855C                 db  2Bh ; +
.eh_frame:000000000000855D                 db    0
.eh_frame:000000000000855E                 db    0
.eh_frame:000000000000855F                 db    0
.eh_frame:0000000000008560                 db    0
.eh_frame:0000000000008561                 db    0
.eh_frame:0000000000008562                 db    0
.eh_frame:0000000000008563                 db    0
.eh_frame:0000000000008564                 db    0
.eh_frame:0000000000008565                 db    0
.eh_frame:0000000000008566                 db    0
.eh_frame:0000000000008567                 db    0
.eh_frame:0000000000008568                 db  14h
.eh_frame:0000000000008569                 db    0
.eh_frame:000000000000856A                 db    0
.eh_frame:000000000000856B                 db    0
.eh_frame:000000000000856C                 db    0
.eh_frame:000000000000856D                 db    0
.eh_frame:000000000000856E                 db    0
.eh_frame:000000000000856F                 db    0
.eh_frame:0000000000008570                 db    1
.eh_frame:0000000000008571                 db  7Ah ; z
.eh_frame:0000000000008572                 db  52h ; R
.eh_frame:0000000000008573                 db    0
.eh_frame:0000000000008574                 db    1
.eh_frame:0000000000008575                 db  78h ; x
.eh_frame:0000000000008576                 db  10h
.eh_frame:0000000000008577                 db    1
.eh_frame:0000000000008578                 db  1Bh
.eh_frame:0000000000008579                 db  0Ch
.eh_frame:000000000000857A                 db    7
.eh_frame:000000000000857B                 db    8
.eh_frame:000000000000857C                 db  90h
.eh_frame:000000000000857D                 db    1
.eh_frame:000000000000857E                 db    0
.eh_frame:000000000000857F                 db    0
.eh_frame:0000000000008580                 db  24h ; $
.eh_frame:0000000000008581                 db    0
.eh_frame:0000000000008582                 db    0
.eh_frame:0000000000008583                 db    0
.eh_frame:0000000000008584                 db  1Ch
.eh_frame:0000000000008585                 db    0
.eh_frame:0000000000008586                 db    0
.eh_frame:0000000000008587                 db    0
.eh_frame:0000000000008588                 db  68h ; h
.eh_frame:0000000000008589                 db  97h
.eh_frame:000000000000858A                 db 0FFh
.eh_frame:000000000000858B                 db 0FFh
.eh_frame:000000000000858C                 db  10h
.eh_frame:000000000000858D                 db    3
.eh_frame:000000000000858E                 db    0
.eh_frame:000000000000858F                 db    0
.eh_frame:0000000000008590                 db    0
.eh_frame:0000000000008591                 db  0Eh
.eh_frame:0000000000008592                 db  10h
.eh_frame:0000000000008593                 db  46h ; F
.eh_frame:0000000000008594                 db  0Eh
.eh_frame:0000000000008595                 db  18h
.eh_frame:0000000000008596                 db  4Ah ; J
.eh_frame:0000000000008597                 db  0Fh
.eh_frame:0000000000008598                 db  0Bh
.eh_frame:0000000000008599                 db  77h ; w
.eh_frame:000000000000859A                 db    8
.eh_frame:000000000000859B                 db  80h
.eh_frame:000000000000859C                 db    0
.eh_frame:000000000000859D                 db  3Fh ; ?
.eh_frame:000000000000859E                 db  1Ah
.eh_frame:000000000000859F                 db  3Bh ; ;
.eh_frame:00000000000085A0                 db  2Ah ; *
.eh_frame:00000000000085A1                 db  33h ; 3
.eh_frame:00000000000085A2                 db  24h ; $
.eh_frame:00000000000085A3                 db  22h ; "
.eh_frame:00000000000085A4                 db    0
.eh_frame:00000000000085A5                 db    0
.eh_frame:00000000000085A6                 db    0
.eh_frame:00000000000085A7                 db    0
.eh_frame:00000000000085A8                 db  14h
.eh_frame:00000000000085A9                 db    0
.eh_frame:00000000000085AA                 db    0
.eh_frame:00000000000085AB                 db    0
.eh_frame:00000000000085AC                 db  44h ; D
.eh_frame:00000000000085AD                 db    0
.eh_frame:00000000000085AE                 db    0
.eh_frame:00000000000085AF                 db    0
.eh_frame:00000000000085B0                 db  50h ; P
.eh_frame:00000000000085B1                 db  9Ah
.eh_frame:00000000000085B2                 db 0FFh
.eh_frame:00000000000085B3                 db 0FFh
.eh_frame:00000000000085B4                 db  18h
.eh_frame:00000000000085B5                 db    0
.eh_frame:00000000000085B6                 db    0
.eh_frame:00000000000085B7                 db    0
.eh_frame:00000000000085B8                 db    0
.eh_frame:00000000000085B9                 db    0
.eh_frame:00000000000085BA                 db    0
.eh_frame:00000000000085BB                 db    0
.eh_frame:00000000000085BC                 db    0
.eh_frame:00000000000085BD                 db    0
.eh_frame:00000000000085BE                 db    0
.eh_frame:00000000000085BF                 db    0
.eh_frame:00000000000085C0                 db  3Ch ; <
.eh_frame:00000000000085C1                 db    0
.eh_frame:00000000000085C2                 db    0
.eh_frame:00000000000085C3                 db    0
.eh_frame:00000000000085C4                 db  5Ch ; \
.eh_frame:00000000000085C5                 db    0
.eh_frame:00000000000085C6                 db    0
.eh_frame:00000000000085C7                 db    0
.eh_frame:00000000000085C8                 db 0E8h
.eh_frame:00000000000085C9                 db  9Fh
.eh_frame:00000000000085CA                 db 0FFh
.eh_frame:00000000000085CB                 db 0FFh
.eh_frame:00000000000085CC                 db 0E1h
.eh_frame:00000000000085CD                 db    1
.eh_frame:00000000000085CE                 db    0
.eh_frame:00000000000085CF                 db    0
.eh_frame:00000000000085D0                 db    0
.eh_frame:00000000000085D1                 db  4Dh ; M
.eh_frame:00000000000085D2                 db  0Eh
.eh_frame:00000000000085D3                 db  10h
.eh_frame:00000000000085D4                 db  8Ch
.eh_frame:00000000000085D5                 db    2
.eh_frame:00000000000085D6                 db  47h ; G
.eh_frame:00000000000085D7                 db  0Eh
.eh_frame:00000000000085D8                 db  18h
.eh_frame:00000000000085D9                 db  86h
.eh_frame:00000000000085DA                 db    3
.eh_frame:00000000000085DB                 db  48h ; H
.eh_frame:00000000000085DC                 db  0Eh
.eh_frame:00000000000085DD                 db  20h
.eh_frame:00000000000085DE                 db  83h
.eh_frame:00000000000085DF                 db    4
.eh_frame:00000000000085E0                 db    3
.eh_frame:00000000000085E1                 db  45h ; E
.eh_frame:00000000000085E2                 db    1
.eh_frame:00000000000085E3                 db  0Ah
.eh_frame:00000000000085E4                 db  0Eh
.eh_frame:00000000000085E5                 db  18h
.eh_frame:00000000000085E6                 db  41h ; A
.eh_frame:00000000000085E7                 db  0Eh
.eh_frame:00000000000085E8                 db  10h
.eh_frame:00000000000085E9                 db  42h ; B
.eh_frame:00000000000085EA                 db  0Eh
.eh_frame:00000000000085EB                 db    8
.eh_frame:00000000000085EC                 db  44h ; D
.eh_frame:00000000000085ED                 db  0Bh
.eh_frame:00000000000085EE                 db    2
.eh_frame:00000000000085EF                 db  58h ; X
.eh_frame:00000000000085F0                 db  0Eh
.eh_frame:00000000000085F1                 db    8
.eh_frame:00000000000085F2                 db 0C3h
.eh_frame:00000000000085F3                 db 0C6h
.eh_frame:00000000000085F4                 db 0CCh
.eh_frame:00000000000085F5                 db  48h ; H
.eh_frame:00000000000085F6                 db  0Eh
.eh_frame:00000000000085F7                 db  20h
.eh_frame:00000000000085F8                 db  83h
.eh_frame:00000000000085F9                 db    4
.eh_frame:00000000000085FA                 db  86h
.eh_frame:00000000000085FB                 db    3
.eh_frame:00000000000085FC                 db  8Ch
.eh_frame:00000000000085FD                 db    2
.eh_frame:00000000000085FE                 db    0
.eh_frame:00000000000085FF                 db    0
.eh_frame:0000000000008600                 db  4Ch ; L
.eh_frame:0000000000008601                 db    0
.eh_frame:0000000000008602                 db    0
.eh_frame:0000000000008603                 db    0
.eh_frame:0000000000008604                 db  9Ch
.eh_frame:0000000000008605                 db    0
.eh_frame:0000000000008606                 db    0
.eh_frame:0000000000008607                 db    0
.eh_frame:0000000000008608                 db  98h
.eh_frame:0000000000008609                 db 0A1h
.eh_frame:000000000000860A                 db 0FFh
.eh_frame:000000000000860B                 db 0FFh
.eh_frame:000000000000860C                 db  23h ; #
.eh_frame:000000000000860D                 db    6
.eh_frame:000000000000860E                 db    0
.eh_frame:000000000000860F                 db    0
.eh_frame:0000000000008610                 db    0
.eh_frame:0000000000008611                 db  42h ; B
.eh_frame:0000000000008612                 db  0Eh
.eh_frame:0000000000008613                 db  10h
.eh_frame:0000000000008614                 db  8Fh
.eh_frame:0000000000008615                 db    2
.eh_frame:0000000000008616                 db  42h ; B
.eh_frame:0000000000008617                 db  0Eh
.eh_frame:0000000000008618                 db  18h
.eh_frame:0000000000008619                 db  8Eh
.eh_frame:000000000000861A                 db    3
.eh_frame:000000000000861B                 db  45h ; E
.eh_frame:000000000000861C                 db  0Eh
.eh_frame:000000000000861D                 db  20h
.eh_frame:000000000000861E                 db  8Dh
.eh_frame:000000000000861F                 db    4
.eh_frame:0000000000008620                 db  42h ; B
.eh_frame:0000000000008621                 db  0Eh
.eh_frame:0000000000008622                 db  28h ; (
.eh_frame:0000000000008623                 db  8Ch
.eh_frame:0000000000008624                 db    5
.eh_frame:0000000000008625                 db  48h ; H
.eh_frame:0000000000008626                 db  0Eh
.eh_frame:0000000000008627                 db  30h ; 0
.eh_frame:0000000000008628                 db  86h
.eh_frame:0000000000008629                 db    6
.eh_frame:000000000000862A                 db  41h ; A
.eh_frame:000000000000862B                 db  0Eh
.eh_frame:000000000000862C                 db  38h ; 8
.eh_frame:000000000000862D                 db  83h
.eh_frame:000000000000862E                 db    7
.eh_frame:000000000000862F                 db  44h ; D
.eh_frame:0000000000008630                 db  0Eh
.eh_frame:0000000000008631                 db  80h
.eh_frame:0000000000008632                 db    1
.eh_frame:0000000000008633                 db    3
.eh_frame:0000000000008634                 db 0BDh
.eh_frame:0000000000008635                 db    3
.eh_frame:0000000000008636                 db  0Ah
.eh_frame:0000000000008637                 db  0Eh
.eh_frame:0000000000008638                 db  38h ; 8
.eh_frame:0000000000008639                 db  41h ; A
.eh_frame:000000000000863A                 db  0Eh
.eh_frame:000000000000863B                 db  30h ; 0
.eh_frame:000000000000863C                 db  41h ; A
.eh_frame:000000000000863D                 db  0Eh
.eh_frame:000000000000863E                 db  28h ; (
.eh_frame:000000000000863F                 db  42h ; B
.eh_frame:0000000000008640                 db  0Eh
.eh_frame:0000000000008641                 db  20h
.eh_frame:0000000000008642                 db  42h ; B
.eh_frame:0000000000008643                 db  0Eh
.eh_frame:0000000000008644                 db  18h
.eh_frame:0000000000008645                 db  42h ; B
.eh_frame:0000000000008646                 db  0Eh
.eh_frame:0000000000008647                 db  10h
.eh_frame:0000000000008648                 db  42h ; B
.eh_frame:0000000000008649                 db  0Eh
.eh_frame:000000000000864A                 db    8
.eh_frame:000000000000864B                 db  41h ; A
.eh_frame:000000000000864C                 db  0Bh
.eh_frame:000000000000864D                 db    0
.eh_frame:000000000000864E                 db    0
.eh_frame:000000000000864F                 db    0
.eh_frame:0000000000008650                 db  28h ; (
.eh_frame:0000000000008651                 db    0
.eh_frame:0000000000008652                 db    0
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db 0ECh
.eh_frame:0000000000008655                 db    0
.eh_frame:0000000000008656                 db    0
.eh_frame:0000000000008657                 db    0
.eh_frame:0000000000008658                 db  78h ; x
.eh_frame:0000000000008659                 db 0A7h
.eh_frame:000000000000865A                 db 0FFh
.eh_frame:000000000000865B                 db 0FFh
.eh_frame:000000000000865C                 db  6Ah ; j
.eh_frame:000000000000865D                 db    3
.eh_frame:000000000000865E                 db    0
.eh_frame:000000000000865F                 db    0
.eh_frame:0000000000008660                 db    0
.eh_frame:0000000000008661                 db  42h ; B
.eh_frame:0000000000008662                 db  0Eh
.eh_frame:0000000000008663                 db  10h
.eh_frame:0000000000008664                 db  8Dh
.eh_frame:0000000000008665                 db    2
.eh_frame:0000000000008666                 db  42h ; B
.eh_frame:0000000000008667                 db  0Eh
.eh_frame:0000000000008668                 db  18h
.eh_frame:0000000000008669                 db  8Ch
.eh_frame:000000000000866A                 db    3
.eh_frame:000000000000866B                 db  46h ; F
.eh_frame:000000000000866C                 db  0Eh
.eh_frame:000000000000866D                 db  20h
.eh_frame:000000000000866E                 db  86h
.eh_frame:000000000000866F                 db    4
.eh_frame:0000000000008670                 db  41h ; A
.eh_frame:0000000000008671                 db  0Eh
.eh_frame:0000000000008672                 db  28h ; (
.eh_frame:0000000000008673                 db  83h
.eh_frame:0000000000008674                 db    5
.eh_frame:0000000000008675                 db  49h ; I
.eh_frame:0000000000008676                 db  0Eh
.eh_frame:0000000000008677                 db 0B0h
.eh_frame:0000000000008678                 db    1
.eh_frame:0000000000008679                 db    0
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db  40h ; @
.eh_frame:000000000000867D                 db    0
.eh_frame:000000000000867E                 db    0
.eh_frame:000000000000867F                 db    0
.eh_frame:0000000000008680                 db  18h
.eh_frame:0000000000008681                 db    1
.eh_frame:0000000000008682                 db    0
.eh_frame:0000000000008683                 db    0
.eh_frame:0000000000008684                 db  9Ch
.eh_frame:0000000000008685                 db  99h
.eh_frame:0000000000008686                 db 0FFh
.eh_frame:0000000000008687                 db 0FFh
.eh_frame:0000000000008688                 db  7Dh ; }
.eh_frame:0000000000008689                 db    4
.eh_frame:000000000000868A                 db    0
.eh_frame:000000000000868B                 db    0
.eh_frame:000000000000868C                 db    0
.eh_frame:000000000000868D                 db  42h ; B
.eh_frame:000000000000868E                 db  0Eh
.eh_frame:000000000000868F                 db  10h
.eh_frame:0000000000008690                 db  8Eh
.eh_frame:0000000000008691                 db    2
.eh_frame:0000000000008692                 db  42h ; B
.eh_frame:0000000000008693                 db  0Eh
.eh_frame:0000000000008694                 db  18h
.eh_frame:0000000000008695                 db  8Dh
.eh_frame:0000000000008696                 db    3
.eh_frame:0000000000008697                 db  48h ; H
.eh_frame:0000000000008698                 db  0Eh
.eh_frame:0000000000008699                 db  20h
.eh_frame:000000000000869A                 db  8Ch
.eh_frame:000000000000869B                 db    4
.eh_frame:000000000000869C                 db  41h ; A
.eh_frame:000000000000869D                 db  0Eh
.eh_frame:000000000000869E                 db  28h ; (
.eh_frame:000000000000869F                 db  86h
.eh_frame:00000000000086A0                 db    5
.eh_frame:00000000000086A1                 db  43h ; C
.eh_frame:00000000000086A2                 db  0Eh
.eh_frame:00000000000086A3                 db  30h ; 0
.eh_frame:00000000000086A4                 db  83h
.eh_frame:00000000000086A5                 db    6
.eh_frame:00000000000086A6                 db    3
.eh_frame:00000000000086A7                 db  5Bh ; [
.eh_frame:00000000000086A8                 db    1
.eh_frame:00000000000086A9                 db  0Ah
.eh_frame:00000000000086AA                 db  0Eh
.eh_frame:00000000000086AB                 db  28h ; (
.eh_frame:00000000000086AC                 db  45h ; E
.eh_frame:00000000000086AD                 db  0Eh
.eh_frame:00000000000086AE                 db  20h
.eh_frame:00000000000086AF                 db  42h ; B
.eh_frame:00000000000086B0                 db  0Eh
.eh_frame:00000000000086B1                 db  18h
.eh_frame:00000000000086B2                 db  42h ; B
.eh_frame:00000000000086B3                 db  0Eh
.eh_frame:00000000000086B4                 db  10h
.eh_frame:00000000000086B5                 db  42h ; B
.eh_frame:00000000000086B6                 db  0Eh
.eh_frame:00000000000086B7                 db    8
.eh_frame:00000000000086B8                 db  41h ; A
.eh_frame:00000000000086B9                 db  0Bh
.eh_frame:00000000000086BA                 db    0
.eh_frame:00000000000086BB                 db    0
.eh_frame:00000000000086BC                 db    0
.eh_frame:00000000000086BD                 db    0
.eh_frame:00000000000086BE                 db    0
.eh_frame:00000000000086BF                 db    0
.eh_frame:00000000000086C0                 db  14h
.eh_frame:00000000000086C1                 db    0
.eh_frame:00000000000086C2                 db    0
.eh_frame:00000000000086C3                 db    0
.eh_frame:00000000000086C4                 db  5Ch ; \
.eh_frame:00000000000086C5                 db    1
.eh_frame:00000000000086C6                 db    0
.eh_frame:00000000000086C7                 db    0
.eh_frame:00000000000086C8                 db  78h ; x
.eh_frame:00000000000086C9                 db 0AAh
.eh_frame:00000000000086CA                 db 0FFh
.eh_frame:00000000000086CB                 db 0FFh
.eh_frame:00000000000086CC                 db  4Eh ; N
.eh_frame:00000000000086CD                 db    0
.eh_frame:00000000000086CE                 db    0
.eh_frame:00000000000086CF                 db    0
.eh_frame:00000000000086D0                 db    0
.eh_frame:00000000000086D1                 db    0
.eh_frame:00000000000086D2                 db    0
.eh_frame:00000000000086D3                 db    0
.eh_frame:00000000000086D4                 db    0
.eh_frame:00000000000086D5                 db    0
.eh_frame:00000000000086D6                 db    0
.eh_frame:00000000000086D7                 db    0
.eh_frame:00000000000086D8                 db  10h
.eh_frame:00000000000086D9                 db    0
.eh_frame:00000000000086DA                 db    0
.eh_frame:00000000000086DB                 db    0
.eh_frame:00000000000086DC                 db  74h ; t
.eh_frame:00000000000086DD                 db    1
.eh_frame:00000000000086DE                 db    0
.eh_frame:00000000000086DF                 db    0
.eh_frame:00000000000086E0                 db 0B0h
.eh_frame:00000000000086E1                 db 0AAh
.eh_frame:00000000000086E2                 db 0FFh
.eh_frame:00000000000086E3                 db 0FFh
.eh_frame:00000000000086E4                 db    8
.eh_frame:00000000000086E5                 db    0
.eh_frame:00000000000086E6                 db    0
.eh_frame:00000000000086E7                 db    0
.eh_frame:00000000000086E8                 db    0
.eh_frame:00000000000086E9                 db    0
.eh_frame:00000000000086EA                 db    0
.eh_frame:00000000000086EB                 db    0
.eh_frame:00000000000086EC                 db  10h
.eh_frame:00000000000086ED                 db    0
.eh_frame:00000000000086EE                 db    0
.eh_frame:00000000000086EF                 db    0
.eh_frame:00000000000086F0                 db  88h
.eh_frame:00000000000086F1                 db    1
.eh_frame:00000000000086F2                 db    0
.eh_frame:00000000000086F3                 db    0
.eh_frame:00000000000086F4                 db 0ACh
.eh_frame:00000000000086F5                 db 0AAh
.eh_frame:00000000000086F6                 db 0FFh
.eh_frame:00000000000086F7                 db 0FFh
.eh_frame:00000000000086F8                 db    8
.eh_frame:00000000000086F9                 db    0
.eh_frame:00000000000086FA                 db    0
.eh_frame:00000000000086FB                 db    0
.eh_frame:00000000000086FC                 db    0
.eh_frame:00000000000086FD                 db    0
.eh_frame:00000000000086FE                 db    0
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db  2Ch ; ,
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db  9Ch
.eh_frame:0000000000008705                 db    1
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db 0A8h
.eh_frame:0000000000008709                 db 0AAh
.eh_frame:000000000000870A                 db 0FFh
.eh_frame:000000000000870B                 db 0FFh
.eh_frame:000000000000870C                 db 0A4h
.eh_frame:000000000000870D                 db    0
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db    0
.eh_frame:0000000000008711                 db  41h ; A
.eh_frame:0000000000008712                 db  0Eh
.eh_frame:0000000000008713                 db  10h
.eh_frame:0000000000008714                 db  86h
.eh_frame:0000000000008715                 db    2
.eh_frame:0000000000008716                 db  41h ; A
.eh_frame:0000000000008717                 db  0Eh
.eh_frame:0000000000008718                 db  18h
.eh_frame:0000000000008719                 db  83h
.eh_frame:000000000000871A                 db    3
.eh_frame:000000000000871B                 db  44h ; D
.eh_frame:000000000000871C                 db  0Eh
.eh_frame:000000000000871D                 db  20h
.eh_frame:000000000000871E                 db  7Ah ; z
.eh_frame:000000000000871F                 db  0Ah
.eh_frame:0000000000008720                 db  0Eh
.eh_frame:0000000000008721                 db  18h
.eh_frame:0000000000008722                 db  41h ; A
.eh_frame:0000000000008723                 db  0Eh
.eh_frame:0000000000008724                 db  10h
.eh_frame:0000000000008725                 db  41h ; A
.eh_frame:0000000000008726                 db  0Eh
.eh_frame:0000000000008727                 db    8
.eh_frame:0000000000008728                 db  41h ; A
.eh_frame:0000000000008729                 db  0Bh
.eh_frame:000000000000872A                 db    0
.eh_frame:000000000000872B                 db    0
.eh_frame:000000000000872C                 db    0
.eh_frame:000000000000872D                 db    0
.eh_frame:000000000000872E                 db    0
.eh_frame:000000000000872F                 db    0
.eh_frame:0000000000008730                 db  10h
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db 0CCh
.eh_frame:0000000000008735                 db    1
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db  28h ; (
.eh_frame:0000000000008739                 db 0ABh
.eh_frame:000000000000873A                 db 0FFh
.eh_frame:000000000000873B                 db 0FFh
.eh_frame:000000000000873C                 db  5Ch ; \
.eh_frame:000000000000873D                 db    0
.eh_frame:000000000000873E                 db    0
.eh_frame:000000000000873F                 db    0
.eh_frame:0000000000008740                 db    0
.eh_frame:0000000000008741                 db    0
.eh_frame:0000000000008742                 db    0
.eh_frame:0000000000008743                 db    0
.eh_frame:0000000000008744                 db  28h ; (
.eh_frame:0000000000008745                 db    0
.eh_frame:0000000000008746                 db    0
.eh_frame:0000000000008747                 db    0
.eh_frame:0000000000008748                 db 0E0h
.eh_frame:0000000000008749                 db    1
.eh_frame:000000000000874A                 db    0
.eh_frame:000000000000874B                 db    0
.eh_frame:000000000000874C                 db  74h ; t
.eh_frame:000000000000874D                 db 0ABh
.eh_frame:000000000000874E                 db 0FFh
.eh_frame:000000000000874F                 db 0FFh
.eh_frame:0000000000008750                 db  47h ; G
.eh_frame:0000000000008751                 db    0
.eh_frame:0000000000008752                 db    0
.eh_frame:0000000000008753                 db    0
.eh_frame:0000000000008754                 db    0
.eh_frame:0000000000008755                 db  41h ; A
.eh_frame:0000000000008756                 db  0Eh
.eh_frame:0000000000008757                 db  10h
.eh_frame:0000000000008758                 db  83h
.eh_frame:0000000000008759                 db    2
.eh_frame:000000000000875A                 db  5Ah ; Z
.eh_frame:000000000000875B                 db  0Ah
.eh_frame:000000000000875C                 db  0Eh
.eh_frame:000000000000875D                 db    8
.eh_frame:000000000000875E                 db  45h ; E
.eh_frame:000000000000875F                 db  0Bh
.eh_frame:0000000000008760                 db  5Dh ; ]
.eh_frame:0000000000008761                 db  0Ah
.eh_frame:0000000000008762                 db  0Eh
.eh_frame:0000000000008763                 db    8
.eh_frame:0000000000008764                 db  43h ; C
.eh_frame:0000000000008765                 db  0Bh
.eh_frame:0000000000008766                 db  46h ; F
.eh_frame:0000000000008767                 db  0Eh
.eh_frame:0000000000008768                 db    8
.eh_frame:0000000000008769                 db    0
.eh_frame:000000000000876A                 db    0
.eh_frame:000000000000876B                 db    0
.eh_frame:000000000000876C                 db    0
.eh_frame:000000000000876D                 db    0
.eh_frame:000000000000876E                 db    0
.eh_frame:000000000000876F                 db    0
.eh_frame:0000000000008770                 db  24h ; $
.eh_frame:0000000000008771                 db    0
.eh_frame:0000000000008772                 db    0
.eh_frame:0000000000008773                 db    0
.eh_frame:0000000000008774                 db  0Ch
.eh_frame:0000000000008775                 db    2
.eh_frame:0000000000008776                 db    0
.eh_frame:0000000000008777                 db    0
.eh_frame:0000000000008778                 db  98h
.eh_frame:0000000000008779                 db 0ABh
.eh_frame:000000000000877A                 db 0FFh
.eh_frame:000000000000877B                 db 0FFh
.eh_frame:000000000000877C                 db  42h ; B
.eh_frame:000000000000877D                 db    0
.eh_frame:000000000000877E                 db    0
.eh_frame:000000000000877F                 db    0
.eh_frame:0000000000008780                 db    0
.eh_frame:0000000000008781                 db  41h ; A
.eh_frame:0000000000008782                 db  0Eh
.eh_frame:0000000000008783                 db  10h
.eh_frame:0000000000008784                 db  86h
.eh_frame:0000000000008785                 db    2
.eh_frame:0000000000008786                 db  41h ; A
.eh_frame:0000000000008787                 db  0Eh
.eh_frame:0000000000008788                 db  18h
.eh_frame:0000000000008789                 db  83h
.eh_frame:000000000000878A                 db    3
.eh_frame:000000000000878B                 db  51h ; Q
.eh_frame:000000000000878C                 db  0Eh
.eh_frame:000000000000878D                 db  20h
.eh_frame:000000000000878E                 db  6Ah ; j
.eh_frame:000000000000878F                 db  0Eh
.eh_frame:0000000000008790                 db  18h
.eh_frame:0000000000008791                 db  43h ; C
.eh_frame:0000000000008792                 db  0Eh
.eh_frame:0000000000008793                 db  10h
.eh_frame:0000000000008794                 db  41h ; A
.eh_frame:0000000000008795                 db  0Eh
.eh_frame:0000000000008796                 db    8
.eh_frame:0000000000008797                 db    0
.eh_frame:0000000000008798                 db  4Ch ; L
.eh_frame:0000000000008799                 db    0
.eh_frame:000000000000879A                 db    0
.eh_frame:000000000000879B                 db    0
.eh_frame:000000000000879C                 db  34h ; 4
.eh_frame:000000000000879D                 db    2
.eh_frame:000000000000879E                 db    0
.eh_frame:000000000000879F                 db    0
.eh_frame:00000000000087A0                 db 0C0h
.eh_frame:00000000000087A1                 db 0ABh
.eh_frame:00000000000087A2                 db 0FFh
.eh_frame:00000000000087A3                 db 0FFh
.eh_frame:00000000000087A4                 db 0AEh
.eh_frame:00000000000087A5                 db    1
.eh_frame:00000000000087A6                 db    0
.eh_frame:00000000000087A7                 db    0
.eh_frame:00000000000087A8                 db    0
.eh_frame:00000000000087A9                 db  42h ; B
.eh_frame:00000000000087AA                 db  0Eh
.eh_frame:00000000000087AB                 db  10h
.eh_frame:00000000000087AC                 db  8Fh
.eh_frame:00000000000087AD                 db    2
.eh_frame:00000000000087AE                 db  42h ; B
.eh_frame:00000000000087AF                 db  0Eh
.eh_frame:00000000000087B0                 db  18h
.eh_frame:00000000000087B1                 db  8Eh
.eh_frame:00000000000087B2                 db    3
.eh_frame:00000000000087B3                 db  45h ; E
.eh_frame:00000000000087B4                 db  0Eh
.eh_frame:00000000000087B5                 db  20h
.eh_frame:00000000000087B6                 db  8Dh
.eh_frame:00000000000087B7                 db    4
.eh_frame:00000000000087B8                 db  42h ; B
.eh_frame:00000000000087B9                 db  0Eh
.eh_frame:00000000000087BA                 db  28h ; (
.eh_frame:00000000000087BB                 db  8Ch
.eh_frame:00000000000087BC                 db    5
.eh_frame:00000000000087BD                 db  44h ; D
.eh_frame:00000000000087BE                 db  0Eh
.eh_frame:00000000000087BF                 db  30h ; 0
.eh_frame:00000000000087C0                 db  86h
.eh_frame:00000000000087C1                 db    6
.eh_frame:00000000000087C2                 db  41h ; A
.eh_frame:00000000000087C3                 db  0Eh
.eh_frame:00000000000087C4                 db  38h ; 8
.eh_frame:00000000000087C5                 db  83h
.eh_frame:00000000000087C6                 db    7
.eh_frame:00000000000087C7                 db  44h ; D
.eh_frame:00000000000087C8                 db  0Eh
.eh_frame:00000000000087C9                 db  50h ; P
.eh_frame:00000000000087CA                 db    2
.eh_frame:00000000000087CB                 db 0D0h
.eh_frame:00000000000087CC                 db  0Ah
.eh_frame:00000000000087CD                 db  0Eh
.eh_frame:00000000000087CE                 db  38h ; 8
.eh_frame:00000000000087CF                 db  44h ; D
.eh_frame:00000000000087D0                 db  0Eh
.eh_frame:00000000000087D1                 db  30h ; 0
.eh_frame:00000000000087D2                 db  41h ; A
.eh_frame:00000000000087D3                 db  0Eh
.eh_frame:00000000000087D4                 db  28h ; (
.eh_frame:00000000000087D5                 db  42h ; B
.eh_frame:00000000000087D6                 db  0Eh
.eh_frame:00000000000087D7                 db  20h
.eh_frame:00000000000087D8                 db  42h ; B
.eh_frame:00000000000087D9                 db  0Eh
.eh_frame:00000000000087DA                 db  18h
.eh_frame:00000000000087DB                 db  42h ; B
.eh_frame:00000000000087DC                 db  0Eh
.eh_frame:00000000000087DD                 db  10h
.eh_frame:00000000000087DE                 db  42h ; B
.eh_frame:00000000000087DF                 db  0Eh
.eh_frame:00000000000087E0                 db    8
.eh_frame:00000000000087E1                 db  47h ; G
.eh_frame:00000000000087E2                 db  0Bh
.eh_frame:00000000000087E3                 db    0
.eh_frame:00000000000087E4                 db    0
.eh_frame:00000000000087E5                 db    0
.eh_frame:00000000000087E6                 db    0
.eh_frame:00000000000087E7                 db    0
.eh_frame:00000000000087E8                 db  1Ch
.eh_frame:00000000000087E9                 db    0
.eh_frame:00000000000087EA                 db    0
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db  84h
.eh_frame:00000000000087ED                 db    2
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db  20h
.eh_frame:00000000000087F1                 db 0ADh
.eh_frame:00000000000087F2                 db 0FFh
.eh_frame:00000000000087F3                 db 0FFh
.eh_frame:00000000000087F4                 db  9Fh
.eh_frame:00000000000087F5                 db    0
.eh_frame:00000000000087F6                 db    0
.eh_frame:00000000000087F7                 db    0
.eh_frame:00000000000087F8                 db    0
.eh_frame:00000000000087F9                 db  44h ; D
.eh_frame:00000000000087FA                 db  0Eh
.eh_frame:00000000000087FB                 db  10h
.eh_frame:00000000000087FC                 db  83h
.eh_frame:00000000000087FD                 db    2
.eh_frame:00000000000087FE                 db    2
.eh_frame:00000000000087FF                 db  78h ; x
.eh_frame:0000000000008800                 db  0Ah
.eh_frame:0000000000008801                 db  0Eh
.eh_frame:0000000000008802                 db    8
.eh_frame:0000000000008803                 db  41h ; A
.eh_frame:0000000000008804                 db  0Bh
.eh_frame:0000000000008805                 db    0
.eh_frame:0000000000008806                 db    0
.eh_frame:0000000000008807                 db    0
.eh_frame:0000000000008808                 db  40h ; @
.eh_frame:0000000000008809                 db    0
.eh_frame:000000000000880A                 db    0
.eh_frame:000000000000880B                 db    0
.eh_frame:000000000000880C                 db 0A4h
.eh_frame:000000000000880D                 db    2
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db 0A0h
.eh_frame:0000000000008811                 db 0ADh
.eh_frame:0000000000008812                 db 0FFh
.eh_frame:0000000000008813                 db 0FFh
.eh_frame:0000000000008814                 db 0E7h
.eh_frame:0000000000008815                 db    0
.eh_frame:0000000000008816                 db    0
.eh_frame:0000000000008817                 db    0
.eh_frame:0000000000008818                 db    0
.eh_frame:0000000000008819                 db  41h ; A
.eh_frame:000000000000881A                 db  0Eh
.eh_frame:000000000000881B                 db  10h
.eh_frame:000000000000881C                 db  86h
.eh_frame:000000000000881D                 db    2
.eh_frame:000000000000881E                 db  41h ; A
.eh_frame:000000000000881F                 db  0Eh
.eh_frame:0000000000008820                 db  18h
.eh_frame:0000000000008821                 db  83h
.eh_frame:0000000000008822                 db    3
.eh_frame:0000000000008823                 db  49h ; I
.eh_frame:0000000000008824                 db  0Eh
.eh_frame:0000000000008825                 db  20h
.eh_frame:0000000000008826                 db  6Eh ; n
.eh_frame:0000000000008827                 db  0Ah
.eh_frame:0000000000008828                 db  0Eh
.eh_frame:0000000000008829                 db  18h
.eh_frame:000000000000882A                 db  41h ; A
.eh_frame:000000000000882B                 db  0Eh
.eh_frame:000000000000882C                 db  10h
.eh_frame:000000000000882D                 db  41h ; A
.eh_frame:000000000000882E                 db  0Eh
.eh_frame:000000000000882F                 db    8
.eh_frame:0000000000008830                 db  45h ; E
.eh_frame:0000000000008831                 db  0Bh
.eh_frame:0000000000008832                 db    2
.eh_frame:0000000000008833                 db  4Ah ; J
.eh_frame:0000000000008834                 db  0Ah
.eh_frame:0000000000008835                 db  0Eh
.eh_frame:0000000000008836                 db  18h
.eh_frame:0000000000008837                 db  41h ; A
.eh_frame:0000000000008838                 db  0Eh
.eh_frame:0000000000008839                 db  10h
.eh_frame:000000000000883A                 db  41h ; A
.eh_frame:000000000000883B                 db  0Eh
.eh_frame:000000000000883C                 db    8
.eh_frame:000000000000883D                 db  44h ; D
.eh_frame:000000000000883E                 db  0Bh
.eh_frame:000000000000883F                 db    2
.eh_frame:0000000000008840                 db  54h ; T
.eh_frame:0000000000008841                 db  0Eh
.eh_frame:0000000000008842                 db  18h
.eh_frame:0000000000008843                 db  41h ; A
.eh_frame:0000000000008844                 db  0Eh
.eh_frame:0000000000008845                 db  10h
.eh_frame:0000000000008846                 db  41h ; A
.eh_frame:0000000000008847                 db  0Eh
.eh_frame:0000000000008848                 db    8
.eh_frame:0000000000008849                 db    0
.eh_frame:000000000000884A                 db    0
.eh_frame:000000000000884B                 db    0
.eh_frame:000000000000884C                 db  74h ; t
.eh_frame:000000000000884D                 db    0
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db 0E8h
.eh_frame:0000000000008851                 db    2
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db  4Ch ; L
.eh_frame:0000000000008855                 db 0AEh
.eh_frame:0000000000008856                 db 0FFh
.eh_frame:0000000000008857                 db 0FFh
.eh_frame:0000000000008858                 db  34h ; 4
.eh_frame:0000000000008859                 db  12h
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db    0
.eh_frame:000000000000885D                 db  42h ; B
.eh_frame:000000000000885E                 db  0Eh
.eh_frame:000000000000885F                 db  10h
.eh_frame:0000000000008860                 db  8Fh
.eh_frame:0000000000008861                 db    2
.eh_frame:0000000000008862                 db  42h ; B
.eh_frame:0000000000008863                 db  0Eh
.eh_frame:0000000000008864                 db  18h
.eh_frame:0000000000008865                 db  8Eh
.eh_frame:0000000000008866                 db    3
.eh_frame:0000000000008867                 db  45h ; E
.eh_frame:0000000000008868                 db  0Eh
.eh_frame:0000000000008869                 db  20h
.eh_frame:000000000000886A                 db  8Dh
.eh_frame:000000000000886B                 db    4
.eh_frame:000000000000886C                 db  42h ; B
.eh_frame:000000000000886D                 db  0Eh
.eh_frame:000000000000886E                 db  28h ; (
.eh_frame:000000000000886F                 db  8Ch
.eh_frame:0000000000008870                 db    5
.eh_frame:0000000000008871                 db  44h ; D
.eh_frame:0000000000008872                 db  0Eh
.eh_frame:0000000000008873                 db  30h ; 0
.eh_frame:0000000000008874                 db  86h
.eh_frame:0000000000008875                 db    6
.eh_frame:0000000000008876                 db  41h ; A
.eh_frame:0000000000008877                 db  0Eh
.eh_frame:0000000000008878                 db  38h ; 8
.eh_frame:0000000000008879                 db  83h
.eh_frame:000000000000887A                 db    7
.eh_frame:000000000000887B                 db  53h ; S
.eh_frame:000000000000887C                 db  0Eh
.eh_frame:000000000000887D                 db 0F0h
.eh_frame:000000000000887E                 db    1
.eh_frame:000000000000887F                 db    3
.eh_frame:0000000000008880                 db  81h
.eh_frame:0000000000008881                 db  0Bh
.eh_frame:0000000000008882                 db  0Eh
.eh_frame:0000000000008883                 db 0F8h
.eh_frame:0000000000008884                 db    1
.eh_frame:0000000000008885                 db  4Ah ; J
.eh_frame:0000000000008886                 db  0Eh
.eh_frame:0000000000008887                 db  80h
.eh_frame:0000000000008888                 db    2
.eh_frame:0000000000008889                 db  44h ; D
.eh_frame:000000000000888A                 db  0Eh
.eh_frame:000000000000888B                 db  88h
.eh_frame:000000000000888C                 db    2
.eh_frame:000000000000888D                 db  45h ; E
.eh_frame:000000000000888E                 db  0Eh
.eh_frame:000000000000888F                 db  90h
.eh_frame:0000000000008890                 db    2
.eh_frame:0000000000008891                 db  5Fh ; _
.eh_frame:0000000000008892                 db  0Eh
.eh_frame:0000000000008893                 db 0F0h
.eh_frame:0000000000008894                 db    1
.eh_frame:0000000000008895                 db  64h ; d
.eh_frame:0000000000008896                 db  0Ah
.eh_frame:0000000000008897                 db  0Eh
.eh_frame:0000000000008898                 db  38h ; 8
.eh_frame:0000000000008899                 db  41h ; A
.eh_frame:000000000000889A                 db  0Eh
.eh_frame:000000000000889B                 db  30h ; 0
.eh_frame:000000000000889C                 db  41h ; A
.eh_frame:000000000000889D                 db  0Eh
.eh_frame:000000000000889E                 db  28h ; (
.eh_frame:000000000000889F                 db  42h ; B
.eh_frame:00000000000088A0                 db  0Eh
.eh_frame:00000000000088A1                 db  20h
.eh_frame:00000000000088A2                 db  42h ; B
.eh_frame:00000000000088A3                 db  0Eh
.eh_frame:00000000000088A4                 db  18h
.eh_frame:00000000000088A5                 db  42h ; B
.eh_frame:00000000000088A6                 db  0Eh
.eh_frame:00000000000088A7                 db  10h
.eh_frame:00000000000088A8                 db  42h ; B
.eh_frame:00000000000088A9                 db  0Eh
.eh_frame:00000000000088AA                 db    8
.eh_frame:00000000000088AB                 db  44h ; D
.eh_frame:00000000000088AC                 db  0Bh
.eh_frame:00000000000088AD                 db    3
.eh_frame:00000000000088AE                 db  99h
.eh_frame:00000000000088AF                 db    5
.eh_frame:00000000000088B0                 db  0Eh
.eh_frame:00000000000088B1                 db 0F8h
.eh_frame:00000000000088B2                 db    1
.eh_frame:00000000000088B3                 db  4Dh ; M
.eh_frame:00000000000088B4                 db  0Eh
.eh_frame:00000000000088B5                 db  80h
.eh_frame:00000000000088B6                 db    2
.eh_frame:00000000000088B7                 db  44h ; D
.eh_frame:00000000000088B8                 db  0Eh
.eh_frame:00000000000088B9                 db  88h
.eh_frame:00000000000088BA                 db    2
.eh_frame:00000000000088BB                 db  47h ; G
.eh_frame:00000000000088BC                 db  0Eh
.eh_frame:00000000000088BD                 db  90h
.eh_frame:00000000000088BE                 db    2
.eh_frame:00000000000088BF                 db  5Bh ; [
.eh_frame:00000000000088C0                 db  0Eh
.eh_frame:00000000000088C1                 db 0F0h
.eh_frame:00000000000088C2                 db    1
.eh_frame:00000000000088C3                 db    0
.eh_frame:00000000000088C4                 db  68h ; h
.eh_frame:00000000000088C5                 db    0
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db  60h ; `
.eh_frame:00000000000088C9                 db    3
.eh_frame:00000000000088CA                 db    0
.eh_frame:00000000000088CB                 db    0
.eh_frame:00000000000088CC                 db  14h
.eh_frame:00000000000088CD                 db 0C0h
.eh_frame:00000000000088CE                 db 0FFh
.eh_frame:00000000000088CF                 db 0FFh
.eh_frame:00000000000088D0                 db 0ABh
.eh_frame:00000000000088D1                 db    1
.eh_frame:00000000000088D2                 db    0
.eh_frame:00000000000088D3                 db    0
.eh_frame:00000000000088D4                 db    0
.eh_frame:00000000000088D5                 db  42h ; B
.eh_frame:00000000000088D6                 db  0Eh
.eh_frame:00000000000088D7                 db  10h
.eh_frame:00000000000088D8                 db  8Fh
.eh_frame:00000000000088D9                 db    2
.eh_frame:00000000000088DA                 db  42h ; B
.eh_frame:00000000000088DB                 db  0Eh
.eh_frame:00000000000088DC                 db  18h
.eh_frame:00000000000088DD                 db  8Eh
.eh_frame:00000000000088DE                 db    3
.eh_frame:00000000000088DF                 db  45h ; E
.eh_frame:00000000000088E0                 db  0Eh
.eh_frame:00000000000088E1                 db  20h
.eh_frame:00000000000088E2                 db  8Dh
.eh_frame:00000000000088E3                 db    4
.eh_frame:00000000000088E4                 db  42h ; B
.eh_frame:00000000000088E5                 db  0Eh
.eh_frame:00000000000088E6                 db  28h ; (
.eh_frame:00000000000088E7                 db  8Ch
.eh_frame:00000000000088E8                 db    5
.eh_frame:00000000000088E9                 db  44h ; D
.eh_frame:00000000000088EA                 db  0Eh
.eh_frame:00000000000088EB                 db  30h ; 0
.eh_frame:00000000000088EC                 db  86h
.eh_frame:00000000000088ED                 db    6
.eh_frame:00000000000088EE                 db  41h ; A
.eh_frame:00000000000088EF                 db  0Eh
.eh_frame:00000000000088F0                 db  38h ; 8
.eh_frame:00000000000088F1                 db  83h
.eh_frame:00000000000088F2                 db    7
.eh_frame:00000000000088F3                 db  47h ; G
.eh_frame:00000000000088F4                 db  0Eh
.eh_frame:00000000000088F5                 db  60h ; `
.eh_frame:00000000000088F6                 db    2
.eh_frame:00000000000088F7                 db  99h
.eh_frame:00000000000088F8                 db  0Eh
.eh_frame:00000000000088F9                 db  68h ; h
.eh_frame:00000000000088FA                 db  5Fh ; _
.eh_frame:00000000000088FB                 db  0Eh
.eh_frame:00000000000088FC                 db  70h ; p
.eh_frame:00000000000088FD                 db  46h ; F
.eh_frame:00000000000088FE                 db  0Eh
.eh_frame:00000000000088FF                 db  78h ; x
.eh_frame:0000000000008900                 db  42h ; B
.eh_frame:0000000000008901                 db  0Eh
.eh_frame:0000000000008902                 db  80h
.eh_frame:0000000000008903                 db    1
.eh_frame:0000000000008904                 db  59h ; Y
.eh_frame:0000000000008905                 db  0Eh
.eh_frame:0000000000008906                 db  60h ; `
.eh_frame:0000000000008907                 db    2
.eh_frame:0000000000008908                 db  40h ; @
.eh_frame:0000000000008909                 db  0Eh
.eh_frame:000000000000890A                 db  68h ; h
.eh_frame:000000000000890B                 db  4Bh ; K
.eh_frame:000000000000890C                 db  0Eh
.eh_frame:000000000000890D                 db  70h ; p
.eh_frame:000000000000890E                 db  43h ; C
.eh_frame:000000000000890F                 db  0Eh
.eh_frame:0000000000008910                 db  78h ; x
.eh_frame:0000000000008911                 db  45h ; E
.eh_frame:0000000000008912                 db  0Eh
.eh_frame:0000000000008913                 db  80h
.eh_frame:0000000000008914                 db    1
.eh_frame:0000000000008915                 db  5Eh ; ^
.eh_frame:0000000000008916                 db  0Eh
.eh_frame:0000000000008917                 db  60h ; `
.eh_frame:0000000000008918                 db  4Ch ; L
.eh_frame:0000000000008919                 db  0Ah
.eh_frame:000000000000891A                 db  0Eh
.eh_frame:000000000000891B                 db  38h ; 8
.eh_frame:000000000000891C                 db  44h ; D
.eh_frame:000000000000891D                 db  0Eh
.eh_frame:000000000000891E                 db  30h ; 0
.eh_frame:000000000000891F                 db  41h ; A
.eh_frame:0000000000008920                 db  0Eh
.eh_frame:0000000000008921                 db  28h ; (
.eh_frame:0000000000008922                 db  42h ; B
.eh_frame:0000000000008923                 db  0Eh
.eh_frame:0000000000008924                 db  20h
.eh_frame:0000000000008925                 db  42h ; B
.eh_frame:0000000000008926                 db  0Eh
.eh_frame:0000000000008927                 db  18h
.eh_frame:0000000000008928                 db  42h ; B
.eh_frame:0000000000008929                 db  0Eh
.eh_frame:000000000000892A                 db  10h
.eh_frame:000000000000892B                 db  42h ; B
.eh_frame:000000000000892C                 db  0Eh
.eh_frame:000000000000892D                 db    8
.eh_frame:000000000000892E                 db  46h ; F
.eh_frame:000000000000892F                 db  0Bh
.eh_frame:0000000000008930                 db  28h ; (
.eh_frame:0000000000008931                 db    0
.eh_frame:0000000000008932                 db    0
.eh_frame:0000000000008933                 db    0
.eh_frame:0000000000008934                 db 0CCh
.eh_frame:0000000000008935                 db    3
.eh_frame:0000000000008936                 db    0
.eh_frame:0000000000008937                 db    0
.eh_frame:0000000000008938                 db  58h ; X
.eh_frame:0000000000008939                 db 0C1h
.eh_frame:000000000000893A                 db 0FFh
.eh_frame:000000000000893B                 db 0FFh
.eh_frame:000000000000893C                 db  36h ; 6
.eh_frame:000000000000893D                 db    0
.eh_frame:000000000000893E                 db    0
.eh_frame:000000000000893F                 db    0
.eh_frame:0000000000008940                 db    0
.eh_frame:0000000000008941                 db  42h ; B
.eh_frame:0000000000008942                 db  0Eh
.eh_frame:0000000000008943                 db  10h
.eh_frame:0000000000008944                 db  8Ch
.eh_frame:0000000000008945                 db    2
.eh_frame:0000000000008946                 db  41h ; A
.eh_frame:0000000000008947                 db  0Eh
.eh_frame:0000000000008948                 db  18h
.eh_frame:0000000000008949                 db  86h
.eh_frame:000000000000894A                 db    3
.eh_frame:000000000000894B                 db  41h ; A
.eh_frame:000000000000894C                 db  0Eh
.eh_frame:000000000000894D                 db  20h
.eh_frame:000000000000894E                 db  83h
.eh_frame:000000000000894F                 db    4
.eh_frame:0000000000008950                 db  6Eh ; n
.eh_frame:0000000000008951                 db  0Eh
.eh_frame:0000000000008952                 db  18h
.eh_frame:0000000000008953                 db  41h ; A
.eh_frame:0000000000008954                 db  0Eh
.eh_frame:0000000000008955                 db  10h
.eh_frame:0000000000008956                 db  42h ; B
.eh_frame:0000000000008957                 db  0Eh
.eh_frame:0000000000008958                 db    8
.eh_frame:0000000000008959                 db    0
.eh_frame:000000000000895A                 db    0
.eh_frame:000000000000895B                 db    0
.eh_frame:000000000000895C                 db  10h
.eh_frame:000000000000895D                 db    0
.eh_frame:000000000000895E                 db    0
.eh_frame:000000000000895F                 db    0
.eh_frame:0000000000008960                 db 0F8h
.eh_frame:0000000000008961                 db    3
.eh_frame:0000000000008962                 db    0
.eh_frame:0000000000008963                 db    0
.eh_frame:0000000000008964                 db  6Ch ; l
.eh_frame:0000000000008965                 db 0C1h
.eh_frame:0000000000008966                 db 0FFh
.eh_frame:0000000000008967                 db 0FFh
.eh_frame:0000000000008968                 db  11h
.eh_frame:0000000000008969                 db    0
.eh_frame:000000000000896A                 db    0
.eh_frame:000000000000896B                 db    0
.eh_frame:000000000000896C                 db    0
.eh_frame:000000000000896D                 db    0
.eh_frame:000000000000896E                 db    0
.eh_frame:000000000000896F                 db    0
.eh_frame:0000000000008970                 db  10h
.eh_frame:0000000000008971                 db    0
.eh_frame:0000000000008972                 db    0
.eh_frame:0000000000008973                 db    0
.eh_frame:0000000000008974                 db  0Ch
.eh_frame:0000000000008975                 db    4
.eh_frame:0000000000008976                 db    0
.eh_frame:0000000000008977                 db    0
.eh_frame:0000000000008978                 db  78h ; x
.eh_frame:0000000000008979                 db 0C1h
.eh_frame:000000000000897A                 db 0FFh
.eh_frame:000000000000897B                 db 0FFh
.eh_frame:000000000000897C                 db  11h
.eh_frame:000000000000897D                 db    0
.eh_frame:000000000000897E                 db    0
.eh_frame:000000000000897F                 db    0
.eh_frame:0000000000008980                 db    0
.eh_frame:0000000000008981                 db    0
.eh_frame:0000000000008982                 db    0
.eh_frame:0000000000008983                 db    0
.eh_frame:0000000000008984                 db  10h
.eh_frame:0000000000008985                 db    0
.eh_frame:0000000000008986                 db    0
.eh_frame:0000000000008987                 db    0
.eh_frame:0000000000008988                 db  20h
.eh_frame:0000000000008989                 db    4
.eh_frame:000000000000898A                 db    0
.eh_frame:000000000000898B                 db    0
.eh_frame:000000000000898C                 db  84h
.eh_frame:000000000000898D                 db 0C1h
.eh_frame:000000000000898E                 db 0FFh
.eh_frame:000000000000898F                 db 0FFh
.eh_frame:0000000000008990                 db  35h ; 5
.eh_frame:0000000000008991                 db    0
.eh_frame:0000000000008992                 db    0
.eh_frame:0000000000008993                 db    0
.eh_frame:0000000000008994                 db    0
.eh_frame:0000000000008995                 db    0
.eh_frame:0000000000008996                 db    0
.eh_frame:0000000000008997                 db    0
.eh_frame:0000000000008998                 db  10h
.eh_frame:0000000000008999                 db    0
.eh_frame:000000000000899A                 db    0
.eh_frame:000000000000899B                 db    0
.eh_frame:000000000000899C                 db  34h ; 4
.eh_frame:000000000000899D                 db    4
.eh_frame:000000000000899E                 db    0
.eh_frame:000000000000899F                 db    0
.eh_frame:00000000000089A0                 db 0B0h
.eh_frame:00000000000089A1                 db 0C1h
.eh_frame:00000000000089A2                 db 0FFh
.eh_frame:00000000000089A3                 db 0FFh
.eh_frame:00000000000089A4                 db  15h
.eh_frame:00000000000089A5                 db    0
.eh_frame:00000000000089A6                 db    0
.eh_frame:00000000000089A7                 db    0
.eh_frame:00000000000089A8                 db    0
.eh_frame:00000000000089A9                 db    0
.eh_frame:00000000000089AA                 db    0
.eh_frame:00000000000089AB                 db    0
.eh_frame:00000000000089AC                 db  10h
.eh_frame:00000000000089AD                 db    0
.eh_frame:00000000000089AE                 db    0
.eh_frame:00000000000089AF                 db    0
.eh_frame:00000000000089B0                 db  48h ; H
.eh_frame:00000000000089B1                 db    4
.eh_frame:00000000000089B2                 db    0
.eh_frame:00000000000089B3                 db    0
.eh_frame:00000000000089B4                 db 0BCh
.eh_frame:00000000000089B5                 db 0C1h
.eh_frame:00000000000089B6                 db 0FFh
.eh_frame:00000000000089B7                 db 0FFh
.eh_frame:00000000000089B8                 db  30h ; 0
.eh_frame:00000000000089B9                 db    0
.eh_frame:00000000000089BA                 db    0
.eh_frame:00000000000089BB                 db    0
.eh_frame:00000000000089BC                 db    0
.eh_frame:00000000000089BD                 db  6Bh ; k
.eh_frame:00000000000089BE                 db  0Eh
.eh_frame:00000000000089BF                 db  10h
.eh_frame:00000000000089C0                 db  50h ; P
.eh_frame:00000000000089C1                 db    0
.eh_frame:00000000000089C2                 db    0
.eh_frame:00000000000089C3                 db    0
.eh_frame:00000000000089C4                 db  5Ch ; \
.eh_frame:00000000000089C5                 db    4
.eh_frame:00000000000089C6                 db    0
.eh_frame:00000000000089C7                 db    0
.eh_frame:00000000000089C8                 db 0D8h
.eh_frame:00000000000089C9                 db 0C1h
.eh_frame:00000000000089CA                 db 0FFh
.eh_frame:00000000000089CB                 db 0FFh
.eh_frame:00000000000089CC                 db  74h ; t
.eh_frame:00000000000089CD                 db    0
.eh_frame:00000000000089CE                 db    0
.eh_frame:00000000000089CF                 db    0
.eh_frame:00000000000089D0                 db    0
.eh_frame:00000000000089D1                 db  42h ; B
.eh_frame:00000000000089D2                 db  0Eh
.eh_frame:00000000000089D3                 db  10h
.eh_frame:00000000000089D4                 db  8Fh
.eh_frame:00000000000089D5                 db    2
.eh_frame:00000000000089D6                 db  42h ; B
.eh_frame:00000000000089D7                 db  0Eh
.eh_frame:00000000000089D8                 db  18h
.eh_frame:00000000000089D9                 db  8Eh
.eh_frame:00000000000089DA                 db    3
.eh_frame:00000000000089DB                 db  49h ; I
.eh_frame:00000000000089DC                 db  0Eh
.eh_frame:00000000000089DD                 db  20h
.eh_frame:00000000000089DE                 db  8Dh
.eh_frame:00000000000089DF                 db    4
.eh_frame:00000000000089E0                 db  42h ; B
.eh_frame:00000000000089E1                 db  0Eh
.eh_frame:00000000000089E2                 db  28h ; (
.eh_frame:00000000000089E3                 db  8Ch
.eh_frame:00000000000089E4                 db    5
.eh_frame:00000000000089E5                 db  44h ; D
.eh_frame:00000000000089E6                 db  0Eh
.eh_frame:00000000000089E7                 db  30h ; 0
.eh_frame:00000000000089E8                 db  86h
.eh_frame:00000000000089E9                 db    6
.eh_frame:00000000000089EA                 db  41h ; A
.eh_frame:00000000000089EB                 db  0Eh
.eh_frame:00000000000089EC                 db  38h ; 8
.eh_frame:00000000000089ED                 db  83h
.eh_frame:00000000000089EE                 db    7
.eh_frame:00000000000089EF                 db  4Dh ; M
.eh_frame:00000000000089F0                 db  0Eh
.eh_frame:00000000000089F1                 db  50h ; P
.eh_frame:00000000000089F2                 db  5Fh ; _
.eh_frame:00000000000089F3                 db  0Eh
.eh_frame:00000000000089F4                 db  58h ; X
.eh_frame:00000000000089F5                 db  47h ; G
.eh_frame:00000000000089F6                 db  0Eh
.eh_frame:00000000000089F7                 db  60h ; `
.eh_frame:00000000000089F8                 db  46h ; F
.eh_frame:00000000000089F9                 db  0Eh
.eh_frame:00000000000089FA                 db  68h ; h
.eh_frame:00000000000089FB                 db  44h ; D
.eh_frame:00000000000089FC                 db  0Eh
.eh_frame:00000000000089FD                 db  70h ; p
.eh_frame:00000000000089FE                 db  58h ; X
.eh_frame:00000000000089FF                 db  0Eh
.eh_frame:0000000000008A00                 db  38h ; 8
.eh_frame:0000000000008A01                 db  41h ; A
.eh_frame:0000000000008A02                 db  0Eh
.eh_frame:0000000000008A03                 db  30h ; 0
.eh_frame:0000000000008A04                 db  41h ; A
.eh_frame:0000000000008A05                 db  0Eh
.eh_frame:0000000000008A06                 db  28h ; (
.eh_frame:0000000000008A07                 db  42h ; B
.eh_frame:0000000000008A08                 db  0Eh
.eh_frame:0000000000008A09                 db  20h
.eh_frame:0000000000008A0A                 db  42h ; B
.eh_frame:0000000000008A0B                 db  0Eh
.eh_frame:0000000000008A0C                 db  18h
.eh_frame:0000000000008A0D                 db  42h ; B
.eh_frame:0000000000008A0E                 db  0Eh
.eh_frame:0000000000008A0F                 db  10h
.eh_frame:0000000000008A10                 db  42h ; B
.eh_frame:0000000000008A11                 db  0Eh
.eh_frame:0000000000008A12                 db    8
.eh_frame:0000000000008A13                 db    0
.eh_frame:0000000000008A14                 db  68h ; h
.eh_frame:0000000000008A15                 db    0
.eh_frame:0000000000008A16                 db    0
.eh_frame:0000000000008A17                 db    0
.eh_frame:0000000000008A18                 db 0B0h
.eh_frame:0000000000008A19                 db    4
.eh_frame:0000000000008A1A                 db    0
.eh_frame:0000000000008A1B                 db    0
.eh_frame:0000000000008A1C                 db    4
.eh_frame:0000000000008A1D                 db 0C2h
.eh_frame:0000000000008A1E                 db 0FFh
.eh_frame:0000000000008A1F                 db 0FFh
.eh_frame:0000000000008A20                 db 0E3h
.eh_frame:0000000000008A21                 db    0
.eh_frame:0000000000008A22                 db    0
.eh_frame:0000000000008A23                 db    0
.eh_frame:0000000000008A24                 db    0
.eh_frame:0000000000008A25                 db  42h ; B
.eh_frame:0000000000008A26                 db  0Eh
.eh_frame:0000000000008A27                 db  10h
.eh_frame:0000000000008A28                 db  8Fh
.eh_frame:0000000000008A29                 db    2
.eh_frame:0000000000008A2A                 db  42h ; B
.eh_frame:0000000000008A2B                 db  0Eh
.eh_frame:0000000000008A2C                 db  18h
.eh_frame:0000000000008A2D                 db  8Eh
.eh_frame:0000000000008A2E                 db    3
.eh_frame:0000000000008A2F                 db  49h ; I
.eh_frame:0000000000008A30                 db  0Eh
.eh_frame:0000000000008A31                 db  20h
.eh_frame:0000000000008A32                 db  8Dh
.eh_frame:0000000000008A33                 db    4
.eh_frame:0000000000008A34                 db  42h ; B
.eh_frame:0000000000008A35                 db  0Eh
.eh_frame:0000000000008A36                 db  28h ; (
.eh_frame:0000000000008A37                 db  8Ch
.eh_frame:0000000000008A38                 db    5
.eh_frame:0000000000008A39                 db  44h ; D
.eh_frame:0000000000008A3A                 db  0Eh
.eh_frame:0000000000008A3B                 db  30h ; 0
.eh_frame:0000000000008A3C                 db  86h
.eh_frame:0000000000008A3D                 db    6
.eh_frame:0000000000008A3E                 db  41h ; A
.eh_frame:0000000000008A3F                 db  0Eh
.eh_frame:0000000000008A40                 db  38h ; 8
.eh_frame:0000000000008A41                 db  83h
.eh_frame:0000000000008A42                 db    7
.eh_frame:0000000000008A43                 db  4Dh ; M
.eh_frame:0000000000008A44                 db  0Eh
.eh_frame:0000000000008A45                 db  70h ; p
.eh_frame:0000000000008A46                 db  65h ; e
.eh_frame:0000000000008A47                 db  0Eh
.eh_frame:0000000000008A48                 db  78h ; x
.eh_frame:0000000000008A49                 db  4Dh ; M
.eh_frame:0000000000008A4A                 db  0Eh
.eh_frame:0000000000008A4B                 db  80h
.eh_frame:0000000000008A4C                 db    1
.eh_frame:0000000000008A4D                 db  46h ; F
.eh_frame:0000000000008A4E                 db  0Eh
.eh_frame:0000000000008A4F                 db  88h
.eh_frame:0000000000008A50                 db    1
.eh_frame:0000000000008A51                 db  42h ; B
.eh_frame:0000000000008A52                 db  0Eh
.eh_frame:0000000000008A53                 db  90h
.eh_frame:0000000000008A54                 db    1
.eh_frame:0000000000008A55                 db  5Eh ; ^
.eh_frame:0000000000008A56                 db  0Eh
.eh_frame:0000000000008A57                 db  70h ; p
.eh_frame:0000000000008A58                 db  56h ; V
.eh_frame:0000000000008A59                 db  0Eh
.eh_frame:0000000000008A5A                 db  78h ; x
.eh_frame:0000000000008A5B                 db  43h ; C
.eh_frame:0000000000008A5C                 db  0Eh
.eh_frame:0000000000008A5D                 db  80h
.eh_frame:0000000000008A5E                 db    1
.eh_frame:0000000000008A5F                 db  43h ; C
.eh_frame:0000000000008A60                 db  0Eh
.eh_frame:0000000000008A61                 db  88h
.eh_frame:0000000000008A62                 db    1
.eh_frame:0000000000008A63                 db  56h ; V
.eh_frame:0000000000008A64                 db  0Eh
.eh_frame:0000000000008A65                 db  90h
.eh_frame:0000000000008A66                 db    1
.eh_frame:0000000000008A67                 db  52h ; R
.eh_frame:0000000000008A68                 db  0Eh
.eh_frame:0000000000008A69                 db  70h ; p
.eh_frame:0000000000008A6A                 db  5Bh ; [
.eh_frame:0000000000008A6B                 db  0Eh
.eh_frame:0000000000008A6C                 db  38h ; 8
.eh_frame:0000000000008A6D                 db  41h ; A
.eh_frame:0000000000008A6E                 db  0Eh
.eh_frame:0000000000008A6F                 db  30h ; 0
.eh_frame:0000000000008A70                 db  41h ; A
.eh_frame:0000000000008A71                 db  0Eh
.eh_frame:0000000000008A72                 db  28h ; (
.eh_frame:0000000000008A73                 db  42h ; B
.eh_frame:0000000000008A74                 db  0Eh
.eh_frame:0000000000008A75                 db  20h
.eh_frame:0000000000008A76                 db  42h ; B
.eh_frame:0000000000008A77                 db  0Eh
.eh_frame:0000000000008A78                 db  18h
.eh_frame:0000000000008A79                 db  42h ; B
.eh_frame:0000000000008A7A                 db  0Eh
.eh_frame:0000000000008A7B                 db  10h
.eh_frame:0000000000008A7C                 db  42h ; B
.eh_frame:0000000000008A7D                 db  0Eh
.eh_frame:0000000000008A7E                 db    8
.eh_frame:0000000000008A7F                 db    0
.eh_frame:0000000000008A80                 db  10h
.eh_frame:0000000000008A81                 db    0
.eh_frame:0000000000008A82                 db    0
.eh_frame:0000000000008A83                 db    0
.eh_frame:0000000000008A84                 db  1Ch
.eh_frame:0000000000008A85                 db    5
.eh_frame:0000000000008A86                 db    0
.eh_frame:0000000000008A87                 db    0
.eh_frame:0000000000008A88                 db  88h
.eh_frame:0000000000008A89                 db 0C2h
.eh_frame:0000000000008A8A                 db 0FFh
.eh_frame:0000000000008A8B                 db 0FFh
.eh_frame:0000000000008A8C                 db  0Ah
.eh_frame:0000000000008A8D                 db    0
.eh_frame:0000000000008A8E                 db    0
.eh_frame:0000000000008A8F                 db    0
.eh_frame:0000000000008A90                 db    0
.eh_frame:0000000000008A91                 db    0
.eh_frame:0000000000008A92                 db    0
.eh_frame:0000000000008A93                 db    0
.eh_frame:0000000000008A94                 db  28h ; (
.eh_frame:0000000000008A95                 db    0
.eh_frame:0000000000008A96                 db    0
.eh_frame:0000000000008A97                 db    0
.eh_frame:0000000000008A98                 db  30h ; 0
.eh_frame:0000000000008A99                 db    5
.eh_frame:0000000000008A9A                 db    0
.eh_frame:0000000000008A9B                 db    0
.eh_frame:0000000000008A9C                 db  84h
.eh_frame:0000000000008A9D                 db 0C2h
.eh_frame:0000000000008A9E                 db 0FFh
.eh_frame:0000000000008A9F                 db 0FFh
.eh_frame:0000000000008AA0                 db  93h
.eh_frame:0000000000008AA1                 db    0
.eh_frame:0000000000008AA2                 db    0
.eh_frame:0000000000008AA3                 db    0
.eh_frame:0000000000008AA4                 db    0
.eh_frame:0000000000008AA5                 db  48h ; H
.eh_frame:0000000000008AA6                 db  0Eh
.eh_frame:0000000000008AA7                 db  10h
.eh_frame:0000000000008AA8                 db  8Ch
.eh_frame:0000000000008AA9                 db    2
.eh_frame:0000000000008AAA                 db  48h ; H
.eh_frame:0000000000008AAB                 db  0Eh
.eh_frame:0000000000008AAC                 db  18h
.eh_frame:0000000000008AAD                 db  86h
.eh_frame:0000000000008AAE                 db    3
.eh_frame:0000000000008AAF                 db  41h ; A
.eh_frame:0000000000008AB0                 db  0Eh
.eh_frame:0000000000008AB1                 db  20h
.eh_frame:0000000000008AB2                 db  83h
.eh_frame:0000000000008AB3                 db    4
.eh_frame:0000000000008AB4                 db    2
.eh_frame:0000000000008AB5                 db  74h ; t
.eh_frame:0000000000008AB6                 db  0Eh
.eh_frame:0000000000008AB7                 db  18h
.eh_frame:0000000000008AB8                 db  4Bh ; K
.eh_frame:0000000000008AB9                 db  0Eh
.eh_frame:0000000000008ABA                 db  10h
.eh_frame:0000000000008ABB                 db  42h ; B
.eh_frame:0000000000008ABC                 db  0Eh
.eh_frame:0000000000008ABD                 db    8
.eh_frame:0000000000008ABE                 db    0
.eh_frame:0000000000008ABF                 db    0
.eh_frame:0000000000008AC0                 db  10h
.eh_frame:0000000000008AC1                 db    0
.eh_frame:0000000000008AC2                 db    0
.eh_frame:0000000000008AC3                 db    0
.eh_frame:0000000000008AC4                 db  5Ch ; \
.eh_frame:0000000000008AC5                 db    5
.eh_frame:0000000000008AC6                 db    0
.eh_frame:0000000000008AC7                 db    0
.eh_frame:0000000000008AC8                 db 0F8h
.eh_frame:0000000000008AC9                 db 0C2h
.eh_frame:0000000000008ACA                 db 0FFh
.eh_frame:0000000000008ACB                 db 0FFh
.eh_frame:0000000000008ACC                 db  13h
.eh_frame:0000000000008ACD                 db    0
.eh_frame:0000000000008ACE                 db    0
.eh_frame:0000000000008ACF                 db    0
.eh_frame:0000000000008AD0                 db    0
.eh_frame:0000000000008AD1                 db    0
.eh_frame:0000000000008AD2                 db    0
.eh_frame:0000000000008AD3                 db    0
.eh_frame:0000000000008AD4                 db  10h
.eh_frame:0000000000008AD5                 db    0
.eh_frame:0000000000008AD6                 db    0
.eh_frame:0000000000008AD7                 db    0
.eh_frame:0000000000008AD8                 db  70h ; p
.eh_frame:0000000000008AD9                 db    5
.eh_frame:0000000000008ADA                 db    0
.eh_frame:0000000000008ADB                 db    0
.eh_frame:0000000000008ADC                 db    4
.eh_frame:0000000000008ADD                 db 0C3h
.eh_frame:0000000000008ADE                 db 0FFh
.eh_frame:0000000000008ADF                 db 0FFh
.eh_frame:0000000000008AE0                 db  0Ch
.eh_frame:0000000000008AE1                 db    0
.eh_frame:0000000000008AE2                 db    0
.eh_frame:0000000000008AE3                 db    0
.eh_frame:0000000000008AE4                 db    0
.eh_frame:0000000000008AE5                 db    0
.eh_frame:0000000000008AE6                 db    0
.eh_frame:0000000000008AE7                 db    0
.eh_frame:0000000000008AE8                 db  10h
.eh_frame:0000000000008AE9                 db    0
.eh_frame:0000000000008AEA                 db    0
.eh_frame:0000000000008AEB                 db    0
.eh_frame:0000000000008AEC                 db  84h
.eh_frame:0000000000008AED                 db    5
.eh_frame:0000000000008AEE                 db    0
.eh_frame:0000000000008AEF                 db    0
.eh_frame:0000000000008AF0                 db    0
.eh_frame:0000000000008AF1                 db 0C3h
.eh_frame:0000000000008AF2                 db 0FFh
.eh_frame:0000000000008AF3                 db 0FFh
.eh_frame:0000000000008AF4                 db  18h
.eh_frame:0000000000008AF5                 db    0
.eh_frame:0000000000008AF6                 db    0
.eh_frame:0000000000008AF7                 db    0
.eh_frame:0000000000008AF8                 db    0
.eh_frame:0000000000008AF9                 db    0
.eh_frame:0000000000008AFA                 db    0
.eh_frame:0000000000008AFB                 db    0
.eh_frame:0000000000008AFC                 db  10h
.eh_frame:0000000000008AFD                 db    0
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db  98h
.eh_frame:0000000000008B01                 db    5
.eh_frame:0000000000008B02                 db    0
.eh_frame:0000000000008B03                 db    0
.eh_frame:0000000000008B04                 db  0Ch
.eh_frame:0000000000008B05                 db 0C3h
.eh_frame:0000000000008B06                 db 0FFh
.eh_frame:0000000000008B07                 db 0FFh
.eh_frame:0000000000008B08                 db  14h
.eh_frame:0000000000008B09                 db    0
.eh_frame:0000000000008B0A                 db    0
.eh_frame:0000000000008B0B                 db    0
.eh_frame:0000000000008B0C                 db    0
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db  18h
.eh_frame:0000000000008B11                 db    0
.eh_frame:0000000000008B12                 db    0
.eh_frame:0000000000008B13                 db    0
.eh_frame:0000000000008B14                 db 0ACh
.eh_frame:0000000000008B15                 db    5
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db  18h
.eh_frame:0000000000008B19                 db 0C3h
.eh_frame:0000000000008B1A                 db 0FFh
.eh_frame:0000000000008B1B                 db 0FFh
.eh_frame:0000000000008B1C                 db  8Eh
.eh_frame:0000000000008B1D                 db    0
.eh_frame:0000000000008B1E                 db    0
.eh_frame:0000000000008B1F                 db    0
.eh_frame:0000000000008B20                 db    0
.eh_frame:0000000000008B21                 db  44h ; D
.eh_frame:0000000000008B22                 db  0Eh
.eh_frame:0000000000008B23                 db  50h ; P
.eh_frame:0000000000008B24                 db    2
.eh_frame:0000000000008B25                 db  7Fh ; 
.eh_frame:0000000000008B26                 db  0Ah
.eh_frame:0000000000008B27                 db  0Eh
.eh_frame:0000000000008B28                 db    8
.eh_frame:0000000000008B29                 db  41h ; A
.eh_frame:0000000000008B2A                 db  0Bh
.eh_frame:0000000000008B2B                 db    0
.eh_frame:0000000000008B2C                 db  18h
.eh_frame:0000000000008B2D                 db    0
.eh_frame:0000000000008B2E                 db    0
.eh_frame:0000000000008B2F                 db    0
.eh_frame:0000000000008B30                 db 0C8h
.eh_frame:0000000000008B31                 db    5
.eh_frame:0000000000008B32                 db    0
.eh_frame:0000000000008B33                 db    0
.eh_frame:0000000000008B34                 db  8Ch
.eh_frame:0000000000008B35                 db 0C3h
.eh_frame:0000000000008B36                 db 0FFh
.eh_frame:0000000000008B37                 db 0FFh
.eh_frame:0000000000008B38                 db  8Ah
.eh_frame:0000000000008B39                 db    0
.eh_frame:0000000000008B3A                 db    0
.eh_frame:0000000000008B3B                 db    0
.eh_frame:0000000000008B3C                 db    0
.eh_frame:0000000000008B3D                 db  44h ; D
.eh_frame:0000000000008B3E                 db  0Eh
.eh_frame:0000000000008B3F                 db  50h ; P
.eh_frame:0000000000008B40                 db    2
.eh_frame:0000000000008B41                 db  7Bh ; {
.eh_frame:0000000000008B42                 db  0Ah
.eh_frame:0000000000008B43                 db  0Eh
.eh_frame:0000000000008B44                 db    8
.eh_frame:0000000000008B45                 db  41h ; A
.eh_frame:0000000000008B46                 db  0Bh
.eh_frame:0000000000008B47                 db    0
.eh_frame:0000000000008B48                 db  10h
.eh_frame:0000000000008B49                 db    0
.eh_frame:0000000000008B4A                 db    0
.eh_frame:0000000000008B4B                 db    0
.eh_frame:0000000000008B4C                 db 0E4h
.eh_frame:0000000000008B4D                 db    5
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db    0
.eh_frame:0000000000008B51                 db 0C4h
.eh_frame:0000000000008B52                 db 0FFh
.eh_frame:0000000000008B53                 db 0FFh
.eh_frame:0000000000008B54                 db  0Ch
.eh_frame:0000000000008B55                 db    0
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db    0
.eh_frame:0000000000008B59                 db    0
.eh_frame:0000000000008B5A                 db    0
.eh_frame:0000000000008B5B                 db    0
.eh_frame:0000000000008B5C                 db  10h
.eh_frame:0000000000008B5D                 db    0
.eh_frame:0000000000008B5E                 db    0
.eh_frame:0000000000008B5F                 db    0
.eh_frame:0000000000008B60                 db 0F8h
.eh_frame:0000000000008B61                 db    5
.eh_frame:0000000000008B62                 db    0
.eh_frame:0000000000008B63                 db    0
.eh_frame:0000000000008B64                 db 0FCh
.eh_frame:0000000000008B65                 db 0C3h
.eh_frame:0000000000008B66                 db 0FFh
.eh_frame:0000000000008B67                 db 0FFh
.eh_frame:0000000000008B68                 db  0Fh
.eh_frame:0000000000008B69                 db    0
.eh_frame:0000000000008B6A                 db    0
.eh_frame:0000000000008B6B                 db    0
.eh_frame:0000000000008B6C                 db    0
.eh_frame:0000000000008B6D                 db    0
.eh_frame:0000000000008B6E                 db    0
.eh_frame:0000000000008B6F                 db    0
.eh_frame:0000000000008B70                 db  18h
.eh_frame:0000000000008B71                 db    0
.eh_frame:0000000000008B72                 db    0
.eh_frame:0000000000008B73                 db    0
.eh_frame:0000000000008B74                 db  0Ch
.eh_frame:0000000000008B75                 db    6
.eh_frame:0000000000008B76                 db    0
.eh_frame:0000000000008B77                 db    0
.eh_frame:0000000000008B78                 db 0F8h
.eh_frame:0000000000008B79                 db 0C3h
.eh_frame:0000000000008B7A                 db 0FFh
.eh_frame:0000000000008B7B                 db 0FFh
.eh_frame:0000000000008B7C                 db  98h
.eh_frame:0000000000008B7D                 db    0
.eh_frame:0000000000008B7E                 db    0
.eh_frame:0000000000008B7F                 db    0
.eh_frame:0000000000008B80                 db    0
.eh_frame:0000000000008B81                 db  44h ; D
.eh_frame:0000000000008B82                 db  0Eh
.eh_frame:0000000000008B83                 db  50h ; P
.eh_frame:0000000000008B84                 db    2
.eh_frame:0000000000008B85                 db  8Eh
.eh_frame:0000000000008B86                 db  0Ah
.eh_frame:0000000000008B87                 db  0Eh
.eh_frame:0000000000008B88                 db    8
.eh_frame:0000000000008B89                 db  41h ; A
.eh_frame:0000000000008B8A                 db  0Bh
.eh_frame:0000000000008B8B                 db    0
.eh_frame:0000000000008B8C                 db  10h
.eh_frame:0000000000008B8D                 db    0
.eh_frame:0000000000008B8E                 db    0
.eh_frame:0000000000008B8F                 db    0
.eh_frame:0000000000008B90                 db  28h ; (
.eh_frame:0000000000008B91                 db    6
.eh_frame:0000000000008B92                 db    0
.eh_frame:0000000000008B93                 db    0
.eh_frame:0000000000008B94                 db  7Ch ; |
.eh_frame:0000000000008B95                 db 0C4h
.eh_frame:0000000000008B96                 db 0FFh
.eh_frame:0000000000008B97                 db 0FFh
.eh_frame:0000000000008B98                 db  10h
.eh_frame:0000000000008B99                 db    0
.eh_frame:0000000000008B9A                 db    0
.eh_frame:0000000000008B9B                 db    0
.eh_frame:0000000000008B9C                 db    0
.eh_frame:0000000000008B9D                 db    0
.eh_frame:0000000000008B9E                 db    0
.eh_frame:0000000000008B9F                 db    0
.eh_frame:0000000000008BA0                 db  10h
.eh_frame:0000000000008BA1                 db    0
.eh_frame:0000000000008BA2                 db    0
.eh_frame:0000000000008BA3                 db    0
.eh_frame:0000000000008BA4                 db  3Ch ; <
.eh_frame:0000000000008BA5                 db    6
.eh_frame:0000000000008BA6                 db    0
.eh_frame:0000000000008BA7                 db    0
.eh_frame:0000000000008BA8                 db  78h ; x
.eh_frame:0000000000008BA9                 db 0C4h
.eh_frame:0000000000008BAA                 db 0FFh
.eh_frame:0000000000008BAB                 db 0FFh
.eh_frame:0000000000008BAC                 db  11h
.eh_frame:0000000000008BAD                 db    0
.eh_frame:0000000000008BAE                 db    0
.eh_frame:0000000000008BAF                 db    0
.eh_frame:0000000000008BB0                 db    0
.eh_frame:0000000000008BB1                 db    0
.eh_frame:0000000000008BB2                 db    0
.eh_frame:0000000000008BB3                 db    0
.eh_frame:0000000000008BB4                 db  10h
.eh_frame:0000000000008BB5                 db    0
.eh_frame:0000000000008BB6                 db    0
.eh_frame:0000000000008BB7                 db    0
.eh_frame:0000000000008BB8                 db  50h ; P
.eh_frame:0000000000008BB9                 db    6
.eh_frame:0000000000008BBA                 db    0
.eh_frame:0000000000008BBB                 db    0
.eh_frame:0000000000008BBC                 db  84h
.eh_frame:0000000000008BBD                 db 0C4h
.eh_frame:0000000000008BBE                 db 0FFh
.eh_frame:0000000000008BBF                 db 0FFh
.eh_frame:0000000000008BC0                 db  0Ah
.eh_frame:0000000000008BC1                 db    0
.eh_frame:0000000000008BC2                 db    0
.eh_frame:0000000000008BC3                 db    0
.eh_frame:0000000000008BC4                 db    0
.eh_frame:0000000000008BC5                 db    0
.eh_frame:0000000000008BC6                 db    0
.eh_frame:0000000000008BC7                 db    0
.eh_frame:0000000000008BC8                 db  18h
.eh_frame:0000000000008BC9                 db    0
.eh_frame:0000000000008BCA                 db    0
.eh_frame:0000000000008BCB                 db    0
.eh_frame:0000000000008BCC                 db  64h ; d
.eh_frame:0000000000008BCD                 db    6
.eh_frame:0000000000008BCE                 db    0
.eh_frame:0000000000008BCF                 db    0
.eh_frame:0000000000008BD0                 db  80h
.eh_frame:0000000000008BD1                 db 0C4h
.eh_frame:0000000000008BD2                 db 0FFh
.eh_frame:0000000000008BD3                 db 0FFh
.eh_frame:0000000000008BD4                 db  8Eh
.eh_frame:0000000000008BD5                 db    0
.eh_frame:0000000000008BD6                 db    0
.eh_frame:0000000000008BD7                 db    0
.eh_frame:0000000000008BD8                 db    0
.eh_frame:0000000000008BD9                 db  44h ; D
.eh_frame:0000000000008BDA                 db  0Eh
.eh_frame:0000000000008BDB                 db  50h ; P
.eh_frame:0000000000008BDC                 db    2
.eh_frame:0000000000008BDD                 db  7Fh ; 
.eh_frame:0000000000008BDE                 db  0Ah
.eh_frame:0000000000008BDF                 db  0Eh
.eh_frame:0000000000008BE0                 db    8
.eh_frame:0000000000008BE1                 db  41h ; A
.eh_frame:0000000000008BE2                 db  0Bh
.eh_frame:0000000000008BE3                 db    0
.eh_frame:0000000000008BE4                 db  18h
.eh_frame:0000000000008BE5                 db    0
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db  80h
.eh_frame:0000000000008BE9                 db    6
.eh_frame:0000000000008BEA                 db    0
.eh_frame:0000000000008BEB                 db    0
.eh_frame:0000000000008BEC                 db 0F4h
.eh_frame:0000000000008BED                 db 0C4h
.eh_frame:0000000000008BEE                 db 0FFh
.eh_frame:0000000000008BEF                 db 0FFh
.eh_frame:0000000000008BF0                 db  91h
.eh_frame:0000000000008BF1                 db    0
.eh_frame:0000000000008BF2                 db    0
.eh_frame:0000000000008BF3                 db    0
.eh_frame:0000000000008BF4                 db    0
.eh_frame:0000000000008BF5                 db  44h ; D
.eh_frame:0000000000008BF6                 db  0Eh
.eh_frame:0000000000008BF7                 db  50h ; P
.eh_frame:0000000000008BF8                 db    2
.eh_frame:0000000000008BF9                 db  82h
.eh_frame:0000000000008BFA                 db  0Ah
.eh_frame:0000000000008BFB                 db  0Eh
.eh_frame:0000000000008BFC                 db    8
.eh_frame:0000000000008BFD                 db  41h ; A
.eh_frame:0000000000008BFE                 db  0Bh
.eh_frame:0000000000008BFF                 db    0
.eh_frame:0000000000008C00                 db  10h
.eh_frame:0000000000008C01                 db    0
.eh_frame:0000000000008C02                 db    0
.eh_frame:0000000000008C03                 db    0
.eh_frame:0000000000008C04                 db  9Ch
.eh_frame:0000000000008C05                 db    6
.eh_frame:0000000000008C06                 db    0
.eh_frame:0000000000008C07                 db    0
.eh_frame:0000000000008C08                 db  78h ; x
.eh_frame:0000000000008C09                 db 0C5h
.eh_frame:0000000000008C0A                 db 0FFh
.eh_frame:0000000000008C0B                 db 0FFh
.eh_frame:0000000000008C0C                 db  0Ch
.eh_frame:0000000000008C0D                 db    0
.eh_frame:0000000000008C0E                 db    0
.eh_frame:0000000000008C0F                 db    0
.eh_frame:0000000000008C10                 db    0
.eh_frame:0000000000008C11                 db    0
.eh_frame:0000000000008C12                 db    0
.eh_frame:0000000000008C13                 db    0
.eh_frame:0000000000008C14                 db  10h
.eh_frame:0000000000008C15                 db    0
.eh_frame:0000000000008C16                 db    0
.eh_frame:0000000000008C17                 db    0
.eh_frame:0000000000008C18                 db 0B0h
.eh_frame:0000000000008C19                 db    6
.eh_frame:0000000000008C1A                 db    0
.eh_frame:0000000000008C1B                 db    0
.eh_frame:0000000000008C1C                 db  74h ; t
.eh_frame:0000000000008C1D                 db 0C5h
.eh_frame:0000000000008C1E                 db 0FFh
.eh_frame:0000000000008C1F                 db 0FFh
.eh_frame:0000000000008C20                 db  17h
.eh_frame:0000000000008C21                 db    0
.eh_frame:0000000000008C22                 db    0
.eh_frame:0000000000008C23                 db    0
.eh_frame:0000000000008C24                 db    0
.eh_frame:0000000000008C25                 db    0
.eh_frame:0000000000008C26                 db    0
.eh_frame:0000000000008C27                 db    0
.eh_frame:0000000000008C28                 db  10h
.eh_frame:0000000000008C29                 db    0
.eh_frame:0000000000008C2A                 db    0
.eh_frame:0000000000008C2B                 db    0
.eh_frame:0000000000008C2C                 db 0C4h
.eh_frame:0000000000008C2D                 db    6
.eh_frame:0000000000008C2E                 db    0
.eh_frame:0000000000008C2F                 db    0
.eh_frame:0000000000008C30                 db  80h
.eh_frame:0000000000008C31                 db 0C5h
.eh_frame:0000000000008C32                 db 0FFh
.eh_frame:0000000000008C33                 db 0FFh
.eh_frame:0000000000008C34                 db  13h
.eh_frame:0000000000008C35                 db    0
.eh_frame:0000000000008C36                 db    0
.eh_frame:0000000000008C37                 db    0
.eh_frame:0000000000008C38                 db    0
.eh_frame:0000000000008C39                 db    0
.eh_frame:0000000000008C3A                 db    0
.eh_frame:0000000000008C3B                 db    0
.eh_frame:0000000000008C3C                 db  10h
.eh_frame:0000000000008C3D                 db    0
.eh_frame:0000000000008C3E                 db    0
.eh_frame:0000000000008C3F                 db    0
.eh_frame:0000000000008C40                 db 0D8h
.eh_frame:0000000000008C41                 db    6
.eh_frame:0000000000008C42                 db    0
.eh_frame:0000000000008C43                 db    0
.eh_frame:0000000000008C44                 db  8Ch
.eh_frame:0000000000008C45                 db 0C5h
.eh_frame:0000000000008C46                 db 0FFh
.eh_frame:0000000000008C47                 db 0FFh
.eh_frame:0000000000008C48                 db  0Ch
.eh_frame:0000000000008C49                 db    0
.eh_frame:0000000000008C4A                 db    0
.eh_frame:0000000000008C4B                 db    0
.eh_frame:0000000000008C4C                 db    0
.eh_frame:0000000000008C4D                 db    0
.eh_frame:0000000000008C4E                 db    0
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db  10h
.eh_frame:0000000000008C51                 db    0
.eh_frame:0000000000008C52                 db    0
.eh_frame:0000000000008C53                 db    0
.eh_frame:0000000000008C54                 db 0ECh
.eh_frame:0000000000008C55                 db    6
.eh_frame:0000000000008C56                 db    0
.eh_frame:0000000000008C57                 db    0
.eh_frame:0000000000008C58                 db  88h
.eh_frame:0000000000008C59                 db 0C5h
.eh_frame:0000000000008C5A                 db 0FFh
.eh_frame:0000000000008C5B                 db 0FFh
.eh_frame:0000000000008C5C                 db  14h
.eh_frame:0000000000008C5D                 db    0
.eh_frame:0000000000008C5E                 db    0
.eh_frame:0000000000008C5F                 db    0
.eh_frame:0000000000008C60                 db    0
.eh_frame:0000000000008C61                 db    0
.eh_frame:0000000000008C62                 db    0
.eh_frame:0000000000008C63                 db    0
.eh_frame:0000000000008C64                 db  10h
.eh_frame:0000000000008C65                 db    0
.eh_frame:0000000000008C66                 db    0
.eh_frame:0000000000008C67                 db    0
.eh_frame:0000000000008C68                 db    0
.eh_frame:0000000000008C69                 db    7
.eh_frame:0000000000008C6A                 db    0
.eh_frame:0000000000008C6B                 db    0
.eh_frame:0000000000008C6C                 db  94h
.eh_frame:0000000000008C6D                 db 0C5h
.eh_frame:0000000000008C6E                 db 0FFh
.eh_frame:0000000000008C6F                 db 0FFh
.eh_frame:0000000000008C70                 db  13h
.eh_frame:0000000000008C71                 db    0
.eh_frame:0000000000008C72                 db    0
.eh_frame:0000000000008C73                 db    0
.eh_frame:0000000000008C74                 db    0
.eh_frame:0000000000008C75                 db    0
.eh_frame:0000000000008C76                 db    0
.eh_frame:0000000000008C77                 db    0
.eh_frame:0000000000008C78                 db  14h
.eh_frame:0000000000008C79                 db    0
.eh_frame:0000000000008C7A                 db    0
.eh_frame:0000000000008C7B                 db    0
.eh_frame:0000000000008C7C                 db  14h
.eh_frame:0000000000008C7D                 db    7
.eh_frame:0000000000008C7E                 db    0
.eh_frame:0000000000008C7F                 db    0
.eh_frame:0000000000008C80                 db 0A0h
.eh_frame:0000000000008C81                 db 0C5h
.eh_frame:0000000000008C82                 db 0FFh
.eh_frame:0000000000008C83                 db 0FFh
.eh_frame:0000000000008C84                 db  18h
.eh_frame:0000000000008C85                 db    0
.eh_frame:0000000000008C86                 db    0
.eh_frame:0000000000008C87                 db    0
.eh_frame:0000000000008C88                 db    0
.eh_frame:0000000000008C89                 db    0
.eh_frame:0000000000008C8A                 db    0
.eh_frame:0000000000008C8B                 db    0
.eh_frame:0000000000008C8C                 db    0
.eh_frame:0000000000008C8D                 db    0
.eh_frame:0000000000008C8E                 db    0
.eh_frame:0000000000008C8F                 db    0
.eh_frame:0000000000008C90                 db  10h
.eh_frame:0000000000008C91                 db    1
.eh_frame:0000000000008C92                 db    0
.eh_frame:0000000000008C93                 db    0
.eh_frame:0000000000008C94                 db  2Ch ; ,
.eh_frame:0000000000008C95                 db    7
.eh_frame:0000000000008C96                 db    0
.eh_frame:0000000000008C97                 db    0
.eh_frame:0000000000008C98                 db 0A8h
.eh_frame:0000000000008C99                 db 0C5h
.eh_frame:0000000000008C9A                 db 0FFh
.eh_frame:0000000000008C9B                 db 0FFh
.eh_frame:0000000000008C9C                 db  17h
.eh_frame:0000000000008C9D                 db    4
.eh_frame:0000000000008C9E                 db    0
.eh_frame:0000000000008C9F                 db    0
.eh_frame:0000000000008CA0                 db    0
.eh_frame:0000000000008CA1                 db  42h ; B
.eh_frame:0000000000008CA2                 db  0Eh
.eh_frame:0000000000008CA3                 db  10h
.eh_frame:0000000000008CA4                 db  8Fh
.eh_frame:0000000000008CA5                 db    2
.eh_frame:0000000000008CA6                 db  42h ; B
.eh_frame:0000000000008CA7                 db  0Eh
.eh_frame:0000000000008CA8                 db  18h
.eh_frame:0000000000008CA9                 db  8Eh
.eh_frame:0000000000008CAA                 db    3
.eh_frame:0000000000008CAB                 db  42h ; B
.eh_frame:0000000000008CAC                 db  0Eh
.eh_frame:0000000000008CAD                 db  20h
.eh_frame:0000000000008CAE                 db  8Dh
.eh_frame:0000000000008CAF                 db    4
.eh_frame:0000000000008CB0                 db  42h ; B
.eh_frame:0000000000008CB1                 db  0Eh
.eh_frame:0000000000008CB2                 db  28h ; (
.eh_frame:0000000000008CB3                 db  8Ch
.eh_frame:0000000000008CB4                 db    5
.eh_frame:0000000000008CB5                 db  44h ; D
.eh_frame:0000000000008CB6                 db  0Eh
.eh_frame:0000000000008CB7                 db  30h ; 0
.eh_frame:0000000000008CB8                 db  86h
.eh_frame:0000000000008CB9                 db    6
.eh_frame:0000000000008CBA                 db  41h ; A
.eh_frame:0000000000008CBB                 db  0Eh
.eh_frame:0000000000008CBC                 db  38h ; 8
.eh_frame:0000000000008CBD                 db  83h
.eh_frame:0000000000008CBE                 db    7
.eh_frame:0000000000008CBF                 db  4Ah ; J
.eh_frame:0000000000008CC0                 db  0Eh
.eh_frame:0000000000008CC1                 db  60h ; `
.eh_frame:0000000000008CC2                 db    2
.eh_frame:0000000000008CC3                 db 0DDh
.eh_frame:0000000000008CC4                 db  0Eh
.eh_frame:0000000000008CC5                 db  68h ; h
.eh_frame:0000000000008CC6                 db  57h ; W
.eh_frame:0000000000008CC7                 db  0Eh
.eh_frame:0000000000008CC8                 db  70h ; p
.eh_frame:0000000000008CC9                 db  42h ; B
.eh_frame:0000000000008CCA                 db  0Eh
.eh_frame:0000000000008CCB                 db  78h ; x
.eh_frame:0000000000008CCC                 db  42h ; B
.eh_frame:0000000000008CCD                 db  0Eh
.eh_frame:0000000000008CCE                 db  80h
.eh_frame:0000000000008CCF                 db    1
.eh_frame:0000000000008CD0                 db  42h ; B
.eh_frame:0000000000008CD1                 db  0Eh
.eh_frame:0000000000008CD2                 db  88h
.eh_frame:0000000000008CD3                 db    1
.eh_frame:0000000000008CD4                 db  42h ; B
.eh_frame:0000000000008CD5                 db  0Eh
.eh_frame:0000000000008CD6                 db  90h
.eh_frame:0000000000008CD7                 db    1
.eh_frame:0000000000008CD8                 db  53h ; S
.eh_frame:0000000000008CD9                 db  0Eh
.eh_frame:0000000000008CDA                 db  60h ; `
.eh_frame:0000000000008CDB                 db  44h ; D
.eh_frame:0000000000008CDC                 db  0Ah
.eh_frame:0000000000008CDD                 db  0Eh
.eh_frame:0000000000008CDE                 db  38h ; 8
.eh_frame:0000000000008CDF                 db  41h ; A
.eh_frame:0000000000008CE0                 db  0Eh
.eh_frame:0000000000008CE1                 db  30h ; 0
.eh_frame:0000000000008CE2                 db  41h ; A
.eh_frame:0000000000008CE3                 db  0Eh
.eh_frame:0000000000008CE4                 db  28h ; (
.eh_frame:0000000000008CE5                 db  42h ; B
.eh_frame:0000000000008CE6                 db  0Eh
.eh_frame:0000000000008CE7                 db  20h
.eh_frame:0000000000008CE8                 db  42h ; B
.eh_frame:0000000000008CE9                 db  0Eh
.eh_frame:0000000000008CEA                 db  18h
.eh_frame:0000000000008CEB                 db  42h ; B
.eh_frame:0000000000008CEC                 db  0Eh
.eh_frame:0000000000008CED                 db  10h
.eh_frame:0000000000008CEE                 db  42h ; B
.eh_frame:0000000000008CEF                 db  0Eh
.eh_frame:0000000000008CF0                 db    8
.eh_frame:0000000000008CF1                 db  44h ; D
.eh_frame:0000000000008CF2                 db  0Bh
.eh_frame:0000000000008CF3                 db    2
.eh_frame:0000000000008CF4                 db  78h ; x
.eh_frame:0000000000008CF5                 db  0Ah
.eh_frame:0000000000008CF6                 db  0Eh
.eh_frame:0000000000008CF7                 db  68h ; h
.eh_frame:0000000000008CF8                 db  48h ; H
.eh_frame:0000000000008CF9                 db  0Bh
.eh_frame:0000000000008CFA                 db  5Ah ; Z
.eh_frame:0000000000008CFB                 db  0Ah
.eh_frame:0000000000008CFC                 db  0Eh
.eh_frame:0000000000008CFD                 db  38h ; 8
.eh_frame:0000000000008CFE                 db  47h ; G
.eh_frame:0000000000008CFF                 db  0Eh
.eh_frame:0000000000008D00                 db  30h ; 0
.eh_frame:0000000000008D01                 db  41h ; A
.eh_frame:0000000000008D02                 db  0Eh
.eh_frame:0000000000008D03                 db  28h ; (
.eh_frame:0000000000008D04                 db  42h ; B
.eh_frame:0000000000008D05                 db  0Eh
.eh_frame:0000000000008D06                 db  20h
.eh_frame:0000000000008D07                 db  42h ; B
.eh_frame:0000000000008D08                 db  0Eh
.eh_frame:0000000000008D09                 db  18h
.eh_frame:0000000000008D0A                 db  42h ; B
.eh_frame:0000000000008D0B                 db  0Eh
.eh_frame:0000000000008D0C                 db  10h
.eh_frame:0000000000008D0D                 db  42h ; B
.eh_frame:0000000000008D0E                 db  0Eh
.eh_frame:0000000000008D0F                 db    8
.eh_frame:0000000000008D10                 db  56h ; V
.eh_frame:0000000000008D11                 db  0Bh
.eh_frame:0000000000008D12                 db  5Eh ; ^
.eh_frame:0000000000008D13                 db  0Ah
.eh_frame:0000000000008D14                 db  0Eh
.eh_frame:0000000000008D15                 db  38h ; 8
.eh_frame:0000000000008D16                 db  52h ; R
.eh_frame:0000000000008D17                 db  0Eh
.eh_frame:0000000000008D18                 db  30h ; 0
.eh_frame:0000000000008D19                 db  41h ; A
.eh_frame:0000000000008D1A                 db  0Eh
.eh_frame:0000000000008D1B                 db  28h ; (
.eh_frame:0000000000008D1C                 db  42h ; B
.eh_frame:0000000000008D1D                 db  0Eh
.eh_frame:0000000000008D1E                 db  20h
.eh_frame:0000000000008D1F                 db  42h ; B
.eh_frame:0000000000008D20                 db  0Eh
.eh_frame:0000000000008D21                 db  18h
.eh_frame:0000000000008D22                 db  42h ; B
.eh_frame:0000000000008D23                 db  0Eh
.eh_frame:0000000000008D24                 db  10h
.eh_frame:0000000000008D25                 db  42h ; B
.eh_frame:0000000000008D26                 db  0Eh
.eh_frame:0000000000008D27                 db    8
.eh_frame:0000000000008D28                 db  4Fh ; O
.eh_frame:0000000000008D29                 db  0Bh
.eh_frame:0000000000008D2A                 db  62h ; b
.eh_frame:0000000000008D2B                 db  0Ah
.eh_frame:0000000000008D2C                 db  0Eh
.eh_frame:0000000000008D2D                 db  38h ; 8
.eh_frame:0000000000008D2E                 db  50h ; P
.eh_frame:0000000000008D2F                 db  0Eh
.eh_frame:0000000000008D30                 db  30h ; 0
.eh_frame:0000000000008D31                 db  41h ; A
.eh_frame:0000000000008D32                 db  0Eh
.eh_frame:0000000000008D33                 db  28h ; (
.eh_frame:0000000000008D34                 db  42h ; B
.eh_frame:0000000000008D35                 db  0Eh
.eh_frame:0000000000008D36                 db  20h
.eh_frame:0000000000008D37                 db  42h ; B
.eh_frame:0000000000008D38                 db  0Eh
.eh_frame:0000000000008D39                 db  18h
.eh_frame:0000000000008D3A                 db  42h ; B
.eh_frame:0000000000008D3B                 db  0Eh
.eh_frame:0000000000008D3C                 db  10h
.eh_frame:0000000000008D3D                 db  42h ; B
.eh_frame:0000000000008D3E                 db  0Eh
.eh_frame:0000000000008D3F                 db    8
.eh_frame:0000000000008D40                 db  55h ; U
.eh_frame:0000000000008D41                 db  0Bh
.eh_frame:0000000000008D42                 db  66h ; f
.eh_frame:0000000000008D43                 db  0Eh
.eh_frame:0000000000008D44                 db  68h ; h
.eh_frame:0000000000008D45                 db  42h ; B
.eh_frame:0000000000008D46                 db  0Eh
.eh_frame:0000000000008D47                 db  70h ; p
.eh_frame:0000000000008D48                 db  5Ch ; \
.eh_frame:0000000000008D49                 db  0Eh
.eh_frame:0000000000008D4A                 db  68h ; h
.eh_frame:0000000000008D4B                 db  41h ; A
.eh_frame:0000000000008D4C                 db  0Eh
.eh_frame:0000000000008D4D                 db  60h ; `
.eh_frame:0000000000008D4E                 db  44h ; D
.eh_frame:0000000000008D4F                 db  0Ah
.eh_frame:0000000000008D50                 db  0Eh
.eh_frame:0000000000008D51                 db  38h ; 8
.eh_frame:0000000000008D52                 db  41h ; A
.eh_frame:0000000000008D53                 db  0Eh
.eh_frame:0000000000008D54                 db  30h ; 0
.eh_frame:0000000000008D55                 db  41h ; A
.eh_frame:0000000000008D56                 db  0Eh
.eh_frame:0000000000008D57                 db  28h ; (
.eh_frame:0000000000008D58                 db  42h ; B
.eh_frame:0000000000008D59                 db  0Eh
.eh_frame:0000000000008D5A                 db  20h
.eh_frame:0000000000008D5B                 db  42h ; B
.eh_frame:0000000000008D5C                 db  0Eh
.eh_frame:0000000000008D5D                 db  18h
.eh_frame:0000000000008D5E                 db  42h ; B
.eh_frame:0000000000008D5F                 db  0Eh
.eh_frame:0000000000008D60                 db  10h
.eh_frame:0000000000008D61                 db  42h ; B
.eh_frame:0000000000008D62                 db  0Eh
.eh_frame:0000000000008D63                 db    8
.eh_frame:0000000000008D64                 db  45h ; E
.eh_frame:0000000000008D65                 db  0Bh
.eh_frame:0000000000008D66                 db  68h ; h
.eh_frame:0000000000008D67                 db  0Ah
.eh_frame:0000000000008D68                 db  0Eh
.eh_frame:0000000000008D69                 db  68h ; h
.eh_frame:0000000000008D6A                 db  48h ; H
.eh_frame:0000000000008D6B                 db  0Bh
.eh_frame:0000000000008D6C                 db  72h ; r
.eh_frame:0000000000008D6D                 db  0Eh
.eh_frame:0000000000008D6E                 db  68h ; h
.eh_frame:0000000000008D6F                 db  45h ; E
.eh_frame:0000000000008D70                 db  0Eh
.eh_frame:0000000000008D71                 db  70h ; p
.eh_frame:0000000000008D72                 db  42h ; B
.eh_frame:0000000000008D73                 db  0Eh
.eh_frame:0000000000008D74                 db  78h ; x
.eh_frame:0000000000008D75                 db  42h ; B
.eh_frame:0000000000008D76                 db  0Eh
.eh_frame:0000000000008D77                 db  80h
.eh_frame:0000000000008D78                 db    1
.eh_frame:0000000000008D79                 db  5Eh ; ^
.eh_frame:0000000000008D7A                 db  0Eh
.eh_frame:0000000000008D7B                 db  60h ; `
.eh_frame:0000000000008D7C                 db  44h ; D
.eh_frame:0000000000008D7D                 db  0Ah
.eh_frame:0000000000008D7E                 db  0Eh
.eh_frame:0000000000008D7F                 db  38h ; 8
.eh_frame:0000000000008D80                 db  41h ; A
.eh_frame:0000000000008D81                 db  0Eh
.eh_frame:0000000000008D82                 db  30h ; 0
.eh_frame:0000000000008D83                 db  41h ; A
.eh_frame:0000000000008D84                 db  0Eh
.eh_frame:0000000000008D85                 db  28h ; (
.eh_frame:0000000000008D86                 db  42h ; B
.eh_frame:0000000000008D87                 db  0Eh
.eh_frame:0000000000008D88                 db  20h
.eh_frame:0000000000008D89                 db  42h ; B
.eh_frame:0000000000008D8A                 db  0Eh
.eh_frame:0000000000008D8B                 db  18h
.eh_frame:0000000000008D8C                 db  42h ; B
.eh_frame:0000000000008D8D                 db  0Eh
.eh_frame:0000000000008D8E                 db  10h
.eh_frame:0000000000008D8F                 db  42h ; B
.eh_frame:0000000000008D90                 db  0Eh
.eh_frame:0000000000008D91                 db    8
.eh_frame:0000000000008D92                 db  41h ; A
.eh_frame:0000000000008D93                 db  0Bh
.eh_frame:0000000000008D94                 db  79h ; y
.eh_frame:0000000000008D95                 db  0Ah
.eh_frame:0000000000008D96                 db  0Eh
.eh_frame:0000000000008D97                 db  68h ; h
.eh_frame:0000000000008D98                 db  42h ; B
.eh_frame:0000000000008D99                 db  0Eh
.eh_frame:0000000000008D9A                 db  70h ; p
.eh_frame:0000000000008D9B                 db  42h ; B
.eh_frame:0000000000008D9C                 db  0Eh
.eh_frame:0000000000008D9D                 db  78h ; x
.eh_frame:0000000000008D9E                 db  42h ; B
.eh_frame:0000000000008D9F                 db  0Eh
.eh_frame:0000000000008DA0                 db  80h
.eh_frame:0000000000008DA1                 db    1
.eh_frame:0000000000008DA2                 db  51h ; Q
.eh_frame:0000000000008DA3                 db  0Bh
.eh_frame:0000000000008DA4                 db  10h
.eh_frame:0000000000008DA5                 db    0
.eh_frame:0000000000008DA6                 db    0
.eh_frame:0000000000008DA7                 db    0
.eh_frame:0000000000008DA8                 db  40h ; @
.eh_frame:0000000000008DA9                 db    8
.eh_frame:0000000000008DAA                 db    0
.eh_frame:0000000000008DAB                 db    0
.eh_frame:0000000000008DAC                 db 0B4h
.eh_frame:0000000000008DAD                 db 0C8h
.eh_frame:0000000000008DAE                 db 0FFh
.eh_frame:0000000000008DAF                 db 0FFh
.eh_frame:0000000000008DB0                 db  20h
.eh_frame:0000000000008DB1                 db    0
.eh_frame:0000000000008DB2                 db    0
.eh_frame:0000000000008DB3                 db    0
.eh_frame:0000000000008DB4                 db    0
.eh_frame:0000000000008DB5                 db    0
.eh_frame:0000000000008DB6                 db    0
.eh_frame:0000000000008DB7                 db    0
.eh_frame:0000000000008DB8                 db  18h
.eh_frame:0000000000008DB9                 db    0
.eh_frame:0000000000008DBA                 db    0
.eh_frame:0000000000008DBB                 db    0
.eh_frame:0000000000008DBC                 db  54h ; T
.eh_frame:0000000000008DBD                 db    8
.eh_frame:0000000000008DBE                 db    0
.eh_frame:0000000000008DBF                 db    0
.eh_frame:0000000000008DC0                 db 0C0h
.eh_frame:0000000000008DC1                 db 0C8h
.eh_frame:0000000000008DC2                 db 0FFh
.eh_frame:0000000000008DC3                 db 0FFh
.eh_frame:0000000000008DC4                 db  78h ; x
.eh_frame:0000000000008DC5                 db    0
.eh_frame:0000000000008DC6                 db    0
.eh_frame:0000000000008DC7                 db    0
.eh_frame:0000000000008DC8                 db    0
.eh_frame:0000000000008DC9                 db  44h ; D
.eh_frame:0000000000008DCA                 db  0Eh
.eh_frame:0000000000008DCB                 db  70h ; p
.eh_frame:0000000000008DCC                 db    2
.eh_frame:0000000000008DCD                 db  60h ; `
.eh_frame:0000000000008DCE                 db  0Ah
.eh_frame:0000000000008DCF                 db  0Eh
.eh_frame:0000000000008DD0                 db    8
.eh_frame:0000000000008DD1                 db  41h ; A
.eh_frame:0000000000008DD2                 db  0Bh
.eh_frame:0000000000008DD3                 db    0
.eh_frame:0000000000008DD4                 db  28h ; (
.eh_frame:0000000000008DD5                 db    0
.eh_frame:0000000000008DD6                 db    0
.eh_frame:0000000000008DD7                 db    0
.eh_frame:0000000000008DD8                 db  70h ; p
.eh_frame:0000000000008DD9                 db    8
.eh_frame:0000000000008DDA                 db    0
.eh_frame:0000000000008DDB                 db    0
.eh_frame:0000000000008DDC                 db  24h ; $
.eh_frame:0000000000008DDD                 db 0C9h
.eh_frame:0000000000008DDE                 db 0FFh
.eh_frame:0000000000008DDF                 db 0FFh
.eh_frame:0000000000008DE0                 db 0D5h
.eh_frame:0000000000008DE1                 db    0
.eh_frame:0000000000008DE2                 db    0
.eh_frame:0000000000008DE3                 db    0
.eh_frame:0000000000008DE4                 db    0
.eh_frame:0000000000008DE5                 db  41h ; A
.eh_frame:0000000000008DE6                 db  0Eh
.eh_frame:0000000000008DE7                 db  10h
.eh_frame:0000000000008DE8                 db  86h
.eh_frame:0000000000008DE9                 db    2
.eh_frame:0000000000008DEA                 db  41h ; A
.eh_frame:0000000000008DEB                 db  0Eh
.eh_frame:0000000000008DEC                 db  18h
.eh_frame:0000000000008DED                 db  83h
.eh_frame:0000000000008DEE                 db    3
.eh_frame:0000000000008DEF                 db  50h ; P
.eh_frame:0000000000008DF0                 db  0Eh
.eh_frame:0000000000008DF1                 db 0D0h
.eh_frame:0000000000008DF2                 db    1
.eh_frame:0000000000008DF3                 db    2
.eh_frame:0000000000008DF4                 db 0ABh
.eh_frame:0000000000008DF5                 db  0Ah
.eh_frame:0000000000008DF6                 db  0Eh
.eh_frame:0000000000008DF7                 db  18h
.eh_frame:0000000000008DF8                 db  41h ; A
.eh_frame:0000000000008DF9                 db  0Eh
.eh_frame:0000000000008DFA                 db  10h
.eh_frame:0000000000008DFB                 db  41h ; A
.eh_frame:0000000000008DFC                 db  0Eh
.eh_frame:0000000000008DFD                 db    8
.eh_frame:0000000000008DFE                 db  41h ; A
.eh_frame:0000000000008DFF                 db  0Bh
.eh_frame:0000000000008E00                 db  1Ch
.eh_frame:0000000000008E01                 db    0
.eh_frame:0000000000008E02                 db    0
.eh_frame:0000000000008E03                 db    0
.eh_frame:0000000000008E04                 db  9Ch
.eh_frame:0000000000008E05                 db    8
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db 0D8h
.eh_frame:0000000000008E09                 db 0C9h
.eh_frame:0000000000008E0A                 db 0FFh
.eh_frame:0000000000008E0B                 db 0FFh
.eh_frame:0000000000008E0C                 db  80h
.eh_frame:0000000000008E0D                 db    0
.eh_frame:0000000000008E0E                 db    0
.eh_frame:0000000000008E0F                 db    0
.eh_frame:0000000000008E10                 db    0
.eh_frame:0000000000008E11                 db  41h ; A
.eh_frame:0000000000008E12                 db  0Eh
.eh_frame:0000000000008E13                 db  10h
.eh_frame:0000000000008E14                 db  83h
.eh_frame:0000000000008E15                 db    2
.eh_frame:0000000000008E16                 db    2
.eh_frame:0000000000008E17                 db  7Ah ; z
.eh_frame:0000000000008E18                 db  0Eh
.eh_frame:0000000000008E19                 db    8
.eh_frame:0000000000008E1A                 db    0
.eh_frame:0000000000008E1B                 db    0
.eh_frame:0000000000008E1C                 db    0
.eh_frame:0000000000008E1D                 db    0
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db  18h
.eh_frame:0000000000008E21                 db    0
.eh_frame:0000000000008E22                 db    0
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db 0BCh
.eh_frame:0000000000008E25                 db    8
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db  38h ; 8
.eh_frame:0000000000008E29                 db 0CAh
.eh_frame:0000000000008E2A                 db 0FFh
.eh_frame:0000000000008E2B                 db 0FFh
.eh_frame:0000000000008E2C                 db  1Ah
.eh_frame:0000000000008E2D                 db    0
.eh_frame:0000000000008E2E                 db    0
.eh_frame:0000000000008E2F                 db    0
.eh_frame:0000000000008E30                 db    0
.eh_frame:0000000000008E31                 db  41h ; A
.eh_frame:0000000000008E32                 db  0Eh
.eh_frame:0000000000008E33                 db  10h
.eh_frame:0000000000008E34                 db  83h
.eh_frame:0000000000008E35                 db    2
.eh_frame:0000000000008E36                 db  53h ; S
.eh_frame:0000000000008E37                 db  0Ah
.eh_frame:0000000000008E38                 db  0Eh
.eh_frame:0000000000008E39                 db    8
.eh_frame:0000000000008E3A                 db  41h ; A
.eh_frame:0000000000008E3B                 db  0Bh
.eh_frame:0000000000008E3C                 db  10h
.eh_frame:0000000000008E3D                 db    0
.eh_frame:0000000000008E3E                 db    0
.eh_frame:0000000000008E3F                 db    0
.eh_frame:0000000000008E40                 db 0D8h
.eh_frame:0000000000008E41                 db    8
.eh_frame:0000000000008E42                 db    0
.eh_frame:0000000000008E43                 db    0
.eh_frame:0000000000008E44                 db  3Ch ; <
.eh_frame:0000000000008E45                 db 0CAh
.eh_frame:0000000000008E46                 db 0FFh
.eh_frame:0000000000008E47                 db 0FFh
.eh_frame:0000000000008E48                 db  24h ; $
.eh_frame:0000000000008E49                 db    0
.eh_frame:0000000000008E4A                 db    0
.eh_frame:0000000000008E4B                 db    0
.eh_frame:0000000000008E4C                 db    0
.eh_frame:0000000000008E4D                 db  5Fh ; _
.eh_frame:0000000000008E4E                 db  0Eh
.eh_frame:0000000000008E4F                 db  10h
.eh_frame:0000000000008E50                 db  10h
.eh_frame:0000000000008E51                 db    0
.eh_frame:0000000000008E52                 db    0
.eh_frame:0000000000008E53                 db    0
.eh_frame:0000000000008E54                 db 0ECh
.eh_frame:0000000000008E55                 db    8
.eh_frame:0000000000008E56                 db    0
.eh_frame:0000000000008E57                 db    0
.eh_frame:0000000000008E58                 db  58h ; X
.eh_frame:0000000000008E59                 db 0CAh
.eh_frame:0000000000008E5A                 db 0FFh
.eh_frame:0000000000008E5B                 db 0FFh
.eh_frame:0000000000008E5C                 db    2
.eh_frame:0000000000008E5D                 db    0
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db    0
.eh_frame:0000000000008E61                 db    0
.eh_frame:0000000000008E62                 db    0
.eh_frame:0000000000008E63                 db    0
.eh_frame:0000000000008E64                 db  20h
.eh_frame:0000000000008E65                 db    0
.eh_frame:0000000000008E66                 db    0
.eh_frame:0000000000008E67                 db    0
.eh_frame:0000000000008E68                 db    0
.eh_frame:0000000000008E69                 db    9
.eh_frame:0000000000008E6A                 db    0
.eh_frame:0000000000008E6B                 db    0
.eh_frame:0000000000008E6C                 db  54h ; T
.eh_frame:0000000000008E6D                 db 0CAh
.eh_frame:0000000000008E6E                 db 0FFh
.eh_frame:0000000000008E6F                 db 0FFh
.eh_frame:0000000000008E70                 db  36h ; 6
.eh_frame:0000000000008E71                 db    0
.eh_frame:0000000000008E72                 db    0
.eh_frame:0000000000008E73                 db    0
.eh_frame:0000000000008E74                 db    0
.eh_frame:0000000000008E75                 db  44h ; D
.eh_frame:0000000000008E76                 db  0Eh
.eh_frame:0000000000008E77                 db  10h
.eh_frame:0000000000008E78                 db  83h
.eh_frame:0000000000008E79                 db    2
.eh_frame:0000000000008E7A                 db  5Dh ; ]
.eh_frame:0000000000008E7B                 db  0Ah
.eh_frame:0000000000008E7C                 db  0Eh
.eh_frame:0000000000008E7D                 db    8
.eh_frame:0000000000008E7E                 db  47h ; G
.eh_frame:0000000000008E7F                 db  0Bh
.eh_frame:0000000000008E80                 db  48h ; H
.eh_frame:0000000000008E81                 db  0Ah
.eh_frame:0000000000008E82                 db  0Eh
.eh_frame:0000000000008E83                 db    8
.eh_frame:0000000000008E84                 db  41h ; A
.eh_frame:0000000000008E85                 db  0Bh
.eh_frame:0000000000008E86                 db    0
.eh_frame:0000000000008E87                 db    0
.eh_frame:0000000000008E88                 db  10h
.eh_frame:0000000000008E89                 db    0
.eh_frame:0000000000008E8A                 db    0
.eh_frame:0000000000008E8B                 db    0
.eh_frame:0000000000008E8C                 db  24h ; $
.eh_frame:0000000000008E8D                 db    9
.eh_frame:0000000000008E8E                 db    0
.eh_frame:0000000000008E8F                 db    0
.eh_frame:0000000000008E90                 db  70h ; p
.eh_frame:0000000000008E91                 db 0CAh
.eh_frame:0000000000008E92                 db 0FFh
.eh_frame:0000000000008E93                 db 0FFh
.eh_frame:0000000000008E94                 db  24h ; $
.eh_frame:0000000000008E95                 db    0
.eh_frame:0000000000008E96                 db    0
.eh_frame:0000000000008E97                 db    0
.eh_frame:0000000000008E98                 db    0
.eh_frame:0000000000008E99                 db  5Fh ; _
.eh_frame:0000000000008E9A                 db  0Eh
.eh_frame:0000000000008E9B                 db  10h
.eh_frame:0000000000008E9C                 db  14h
.eh_frame:0000000000008E9D                 db    0
.eh_frame:0000000000008E9E                 db    0
.eh_frame:0000000000008E9F                 db    0
.eh_frame:0000000000008EA0                 db  38h ; 8
.eh_frame:0000000000008EA1                 db    9
.eh_frame:0000000000008EA2                 db    0
.eh_frame:0000000000008EA3                 db    0
.eh_frame:0000000000008EA4                 db  8Ch
.eh_frame:0000000000008EA5                 db 0CAh
.eh_frame:0000000000008EA6                 db 0FFh
.eh_frame:0000000000008EA7                 db 0FFh
.eh_frame:0000000000008EA8                 db  82h
.eh_frame:0000000000008EA9                 db    0
.eh_frame:0000000000008EAA                 db    0
.eh_frame:0000000000008EAB                 db    0
.eh_frame:0000000000008EAC                 db    0
.eh_frame:0000000000008EAD                 db    2
.eh_frame:0000000000008EAE                 db  5Fh ; _
.eh_frame:0000000000008EAF                 db  0Eh
.eh_frame:0000000000008EB0                 db  10h
.eh_frame:0000000000008EB1                 db  49h ; I
.eh_frame:0000000000008EB2                 db  0Eh
.eh_frame:0000000000008EB3                 db    8
.eh_frame:0000000000008EB4                 db  14h
.eh_frame:0000000000008EB5                 db    0
.eh_frame:0000000000008EB6                 db    0
.eh_frame:0000000000008EB7                 db    0
.eh_frame:0000000000008EB8                 db  50h ; P
.eh_frame:0000000000008EB9                 db    9
.eh_frame:0000000000008EBA                 db    0
.eh_frame:0000000000008EBB                 db    0
.eh_frame:0000000000008EBC                 db    4
.eh_frame:0000000000008EBD                 db 0CBh
.eh_frame:0000000000008EBE                 db 0FFh
.eh_frame:0000000000008EBF                 db 0FFh
.eh_frame:0000000000008EC0                 db  4Ah ; J
.eh_frame:0000000000008EC1                 db    0
.eh_frame:0000000000008EC2                 db    0
.eh_frame:0000000000008EC3                 db    0
.eh_frame:0000000000008EC4                 db    0
.eh_frame:0000000000008EC5                 db    2
.eh_frame:0000000000008EC6                 db  45h ; E
.eh_frame:0000000000008EC7                 db  0Eh
.eh_frame:0000000000008EC8                 db  10h
.eh_frame:0000000000008EC9                 db    0
.eh_frame:0000000000008ECA                 db    0
.eh_frame:0000000000008ECB                 db    0
.eh_frame:0000000000008ECC                 db  18h
.eh_frame:0000000000008ECD                 db    0
.eh_frame:0000000000008ECE                 db    0
.eh_frame:0000000000008ECF                 db    0
.eh_frame:0000000000008ED0                 db  68h ; h
.eh_frame:0000000000008ED1                 db    9
.eh_frame:0000000000008ED2                 db    0
.eh_frame:0000000000008ED3                 db    0
.eh_frame:0000000000008ED4                 db  3Ch ; <
.eh_frame:0000000000008ED5                 db 0CBh
.eh_frame:0000000000008ED6                 db 0FFh
.eh_frame:0000000000008ED7                 db 0FFh
.eh_frame:0000000000008ED8                 db  17h
.eh_frame:0000000000008ED9                 db    0
.eh_frame:0000000000008EDA                 db    0
.eh_frame:0000000000008EDB                 db    0
.eh_frame:0000000000008EDC                 db    0
.eh_frame:0000000000008EDD                 db  41h ; A
.eh_frame:0000000000008EDE                 db  0Eh
.eh_frame:0000000000008EDF                 db  10h
.eh_frame:0000000000008EE0                 db  83h
.eh_frame:0000000000008EE1                 db    2
.eh_frame:0000000000008EE2                 db  51h ; Q
.eh_frame:0000000000008EE3                 db  0Eh
.eh_frame:0000000000008EE4                 db    8
.eh_frame:0000000000008EE5                 db    0
.eh_frame:0000000000008EE6                 db    0
.eh_frame:0000000000008EE7                 db    0
.eh_frame:0000000000008EE8                 db  18h
.eh_frame:0000000000008EE9                 db    0
.eh_frame:0000000000008EEA                 db    0
.eh_frame:0000000000008EEB                 db    0
.eh_frame:0000000000008EEC                 db  84h
.eh_frame:0000000000008EED                 db    9
.eh_frame:0000000000008EEE                 db    0
.eh_frame:0000000000008EEF                 db    0
.eh_frame:0000000000008EF0                 db  40h ; @
.eh_frame:0000000000008EF1                 db 0CBh
.eh_frame:0000000000008EF2                 db 0FFh
.eh_frame:0000000000008EF3                 db 0FFh
.eh_frame:0000000000008EF4                 db  2Eh ; .
.eh_frame:0000000000008EF5                 db    0
.eh_frame:0000000000008EF6                 db    0
.eh_frame:0000000000008EF7                 db    0
.eh_frame:0000000000008EF8                 db    0
.eh_frame:0000000000008EF9                 db  47h ; G
.eh_frame:0000000000008EFA                 db  0Eh
.eh_frame:0000000000008EFB                 db  10h
.eh_frame:0000000000008EFC                 db  61h ; a
.eh_frame:0000000000008EFD                 db  0Ah
.eh_frame:0000000000008EFE                 db  0Eh
.eh_frame:0000000000008EFF                 db    8
.eh_frame:0000000000008F00                 db  41h ; A
.eh_frame:0000000000008F01                 db  0Bh
.eh_frame:0000000000008F02                 db    0
.eh_frame:0000000000008F03                 db    0
.eh_frame:0000000000008F04                 db  24h ; $
.eh_frame:0000000000008F05                 db    0
.eh_frame:0000000000008F06                 db    0
.eh_frame:0000000000008F07                 db    0
.eh_frame:0000000000008F08                 db 0A0h
.eh_frame:0000000000008F09                 db    9
.eh_frame:0000000000008F0A                 db    0
.eh_frame:0000000000008F0B                 db    0
.eh_frame:0000000000008F0C                 db  54h ; T
.eh_frame:0000000000008F0D                 db 0CBh
.eh_frame:0000000000008F0E                 db 0FFh
.eh_frame:0000000000008F0F                 db 0FFh
.eh_frame:0000000000008F10                 db  28h ; (
.eh_frame:0000000000008F11                 db    0
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14                 db    0
.eh_frame:0000000000008F15                 db  41h ; A
.eh_frame:0000000000008F16                 db  0Eh
.eh_frame:0000000000008F17                 db  10h
.eh_frame:0000000000008F18                 db  86h
.eh_frame:0000000000008F19                 db    2
.eh_frame:0000000000008F1A                 db  41h ; A
.eh_frame:0000000000008F1B                 db  0Eh
.eh_frame:0000000000008F1C                 db  18h
.eh_frame:0000000000008F1D                 db  83h
.eh_frame:0000000000008F1E                 db    3
.eh_frame:0000000000008F1F                 db  4Dh ; M
.eh_frame:0000000000008F20                 db  0Eh
.eh_frame:0000000000008F21                 db  20h
.eh_frame:0000000000008F22                 db  49h ; I
.eh_frame:0000000000008F23                 db  0Eh
.eh_frame:0000000000008F24                 db  18h
.eh_frame:0000000000008F25                 db  47h ; G
.eh_frame:0000000000008F26                 db  0Eh
.eh_frame:0000000000008F27                 db  10h
.eh_frame:0000000000008F28                 db  41h ; A
.eh_frame:0000000000008F29                 db  0Eh
.eh_frame:0000000000008F2A                 db    8
.eh_frame:0000000000008F2B                 db    0
.eh_frame:0000000000008F2C                 db  18h
.eh_frame:0000000000008F2D                 db    0
.eh_frame:0000000000008F2E                 db    0
.eh_frame:0000000000008F2F                 db    0
.eh_frame:0000000000008F30                 db 0C8h
.eh_frame:0000000000008F31                 db    9
.eh_frame:0000000000008F32                 db    0
.eh_frame:0000000000008F33                 db    0
.eh_frame:0000000000008F34                 db  5Ch ; \
.eh_frame:0000000000008F35                 db 0CBh
.eh_frame:0000000000008F36                 db 0FFh
.eh_frame:0000000000008F37                 db 0FFh
.eh_frame:0000000000008F38                 db  13h
.eh_frame:0000000000008F39                 db    0
.eh_frame:0000000000008F3A                 db    0
.eh_frame:0000000000008F3B                 db    0
.eh_frame:0000000000008F3C                 db    0
.eh_frame:0000000000008F3D                 db  41h ; A
.eh_frame:0000000000008F3E                 db  0Eh
.eh_frame:0000000000008F3F                 db  10h
.eh_frame:0000000000008F40                 db  83h
.eh_frame:0000000000008F41                 db    2
.eh_frame:0000000000008F42                 db  50h ; P
.eh_frame:0000000000008F43                 db  0Eh
.eh_frame:0000000000008F44                 db    8
.eh_frame:0000000000008F45                 db    0
.eh_frame:0000000000008F46                 db    0
.eh_frame:0000000000008F47                 db    0
.eh_frame:0000000000008F48                 db  14h
.eh_frame:0000000000008F49                 db    0
.eh_frame:0000000000008F4A                 db    0
.eh_frame:0000000000008F4B                 db    0
.eh_frame:0000000000008F4C                 db 0E4h
.eh_frame:0000000000008F4D                 db    9
.eh_frame:0000000000008F4E                 db    0
.eh_frame:0000000000008F4F                 db    0
.eh_frame:0000000000008F50                 db  60h ; `
.eh_frame:0000000000008F51                 db 0CBh
.eh_frame:0000000000008F52                 db 0FFh
.eh_frame:0000000000008F53                 db 0FFh
.eh_frame:0000000000008F54                 db  35h ; 5
.eh_frame:0000000000008F55                 db    0
.eh_frame:0000000000008F56                 db    0
.eh_frame:0000000000008F57                 db    0
.eh_frame:0000000000008F58                 db    0
.eh_frame:0000000000008F59                 db  4Bh ; K
.eh_frame:0000000000008F5A                 db  0Eh
.eh_frame:0000000000008F5B                 db  10h
.eh_frame:0000000000008F5C                 db    0
.eh_frame:0000000000008F5D                 db    0
.eh_frame:0000000000008F5E                 db    0
.eh_frame:0000000000008F5F                 db    0
.eh_frame:0000000000008F60                 db  1Ch
.eh_frame:0000000000008F61                 db    0
.eh_frame:0000000000008F62                 db    0
.eh_frame:0000000000008F63                 db    0
.eh_frame:0000000000008F64                 db 0FCh
.eh_frame:0000000000008F65                 db    9
.eh_frame:0000000000008F66                 db    0
.eh_frame:0000000000008F67                 db    0
.eh_frame:0000000000008F68                 db  88h
.eh_frame:0000000000008F69                 db 0CBh
.eh_frame:0000000000008F6A                 db 0FFh
.eh_frame:0000000000008F6B                 db 0FFh
.eh_frame:0000000000008F6C                 db  18h
.eh_frame:0000000000008F6D                 db    0
.eh_frame:0000000000008F6E                 db    0
.eh_frame:0000000000008F6F                 db    0
.eh_frame:0000000000008F70                 db    0
.eh_frame:0000000000008F71                 db  44h ; D
.eh_frame:0000000000008F72                 db  0Eh
.eh_frame:0000000000008F73                 db  10h
.eh_frame:0000000000008F74                 db  4Eh ; N
.eh_frame:0000000000008F75                 db  0Ah
.eh_frame:0000000000008F76                 db  0Eh
.eh_frame:0000000000008F77                 db    8
.eh_frame:0000000000008F78                 db  41h ; A
.eh_frame:0000000000008F79                 db  0Bh
.eh_frame:0000000000008F7A                 db    0
.eh_frame:0000000000008F7B                 db    0
.eh_frame:0000000000008F7C                 db    0
.eh_frame:0000000000008F7D                 db    0
.eh_frame:0000000000008F7E                 db    0
.eh_frame:0000000000008F7F                 db    0
.eh_frame:0000000000008F80                 db  34h ; 4
.eh_frame:0000000000008F81                 db    0
.eh_frame:0000000000008F82                 db    0
.eh_frame:0000000000008F83                 db    0
.eh_frame:0000000000008F84                 db  1Ch
.eh_frame:0000000000008F85                 db  0Ah
.eh_frame:0000000000008F86                 db    0
.eh_frame:0000000000008F87                 db    0
.eh_frame:0000000000008F88                 db  88h
.eh_frame:0000000000008F89                 db 0CBh
.eh_frame:0000000000008F8A                 db 0FFh
.eh_frame:0000000000008F8B                 db 0FFh
.eh_frame:0000000000008F8C                 db  7Bh ; {
.eh_frame:0000000000008F8D                 db    0
.eh_frame:0000000000008F8E                 db    0
.eh_frame:0000000000008F8F                 db    0
.eh_frame:0000000000008F90                 db    0
.eh_frame:0000000000008F91                 db  42h ; B
.eh_frame:0000000000008F92                 db  0Eh
.eh_frame:0000000000008F93                 db  10h
.eh_frame:0000000000008F94                 db  8Ch
.eh_frame:0000000000008F95                 db    2
.eh_frame:0000000000008F96                 db  41h ; A
.eh_frame:0000000000008F97                 db  0Eh
.eh_frame:0000000000008F98                 db  18h
.eh_frame:0000000000008F99                 db  86h
.eh_frame:0000000000008F9A                 db    3
.eh_frame:0000000000008F9B                 db  41h ; A
.eh_frame:0000000000008F9C                 db  0Eh
.eh_frame:0000000000008F9D                 db  20h
.eh_frame:0000000000008F9E                 db  83h
.eh_frame:0000000000008F9F                 db    4
.eh_frame:0000000000008FA0                 db  7Dh ; }
.eh_frame:0000000000008FA1                 db  0Ah
.eh_frame:0000000000008FA2                 db  0Eh
.eh_frame:0000000000008FA3                 db  18h
.eh_frame:0000000000008FA4                 db  41h ; A
.eh_frame:0000000000008FA5                 db  0Eh
.eh_frame:0000000000008FA6                 db  10h
.eh_frame:0000000000008FA7                 db  42h ; B
.eh_frame:0000000000008FA8                 db  0Eh
.eh_frame:0000000000008FA9                 db    8
.eh_frame:0000000000008FAA                 db  44h ; D
.eh_frame:0000000000008FAB                 db  0Bh
.eh_frame:0000000000008FAC                 db  60h ; `
.eh_frame:0000000000008FAD                 db  0Ah
.eh_frame:0000000000008FAE                 db  0Eh
.eh_frame:0000000000008FAF                 db  18h
.eh_frame:0000000000008FB0                 db  41h ; A
.eh_frame:0000000000008FB1                 db  0Eh
.eh_frame:0000000000008FB2                 db  10h
.eh_frame:0000000000008FB3                 db  42h ; B
.eh_frame:0000000000008FB4                 db  0Eh
.eh_frame:0000000000008FB5                 db    8
.eh_frame:0000000000008FB6                 db  45h ; E
.eh_frame:0000000000008FB7                 db  0Bh
.eh_frame:0000000000008FB8                 db  1Ch
.eh_frame:0000000000008FB9                 db    0
.eh_frame:0000000000008FBA                 db    0
.eh_frame:0000000000008FBB                 db    0
.eh_frame:0000000000008FBC                 db  54h ; T
.eh_frame:0000000000008FBD                 db  0Ah
.eh_frame:0000000000008FBE                 db    0
.eh_frame:0000000000008FBF                 db    0
.eh_frame:0000000000008FC0                 db 0D0h
.eh_frame:0000000000008FC1                 db 0CBh
.eh_frame:0000000000008FC2                 db 0FFh
.eh_frame:0000000000008FC3                 db 0FFh
.eh_frame:0000000000008FC4                 db  40h ; @
.eh_frame:0000000000008FC5                 db    0
.eh_frame:0000000000008FC6                 db    0
.eh_frame:0000000000008FC7                 db    0
.eh_frame:0000000000008FC8                 db    0
.eh_frame:0000000000008FC9                 db  44h ; D
.eh_frame:0000000000008FCA                 db  0Eh
.eh_frame:0000000000008FCB                 db  10h
.eh_frame:0000000000008FCC                 db  83h
.eh_frame:0000000000008FCD                 db    2
.eh_frame:0000000000008FCE                 db  5Ah ; Z
.eh_frame:0000000000008FCF                 db  0Ah
.eh_frame:0000000000008FD0                 db  0Eh
.eh_frame:0000000000008FD1                 db    8
.eh_frame:0000000000008FD2                 db  4Ah ; J
.eh_frame:0000000000008FD3                 db  0Bh
.eh_frame:0000000000008FD4                 db  53h ; S
.eh_frame:0000000000008FD5                 db  0Eh
.eh_frame:0000000000008FD6                 db    8
.eh_frame:0000000000008FD7                 db    0
.eh_frame:0000000000008FD8                 db  2Ch ; ,
.eh_frame:0000000000008FD9                 db    0
.eh_frame:0000000000008FDA                 db    0
.eh_frame:0000000000008FDB                 db    0
.eh_frame:0000000000008FDC                 db  74h ; t
.eh_frame:0000000000008FDD                 db  0Ah
.eh_frame:0000000000008FDE                 db    0
.eh_frame:0000000000008FDF                 db    0
.eh_frame:0000000000008FE0                 db 0F0h
.eh_frame:0000000000008FE1                 db 0CBh
.eh_frame:0000000000008FE2                 db 0FFh
.eh_frame:0000000000008FE3                 db 0FFh
.eh_frame:0000000000008FE4                 db  57h ; W
.eh_frame:0000000000008FE5                 db    0
.eh_frame:0000000000008FE6                 db    0
.eh_frame:0000000000008FE7                 db    0
.eh_frame:0000000000008FE8                 db    0
.eh_frame:0000000000008FE9                 db  63h ; c
.eh_frame:0000000000008FEA                 db  0Eh
.eh_frame:0000000000008FEB                 db  10h
.eh_frame:0000000000008FEC                 db  8Ch
.eh_frame:0000000000008FED                 db    2
.eh_frame:0000000000008FEE                 db  41h ; A
.eh_frame:0000000000008FEF                 db  0Eh
.eh_frame:0000000000008FF0                 db  18h
.eh_frame:0000000000008FF1                 db  86h
.eh_frame:0000000000008FF2                 db    3
.eh_frame:0000000000008FF3                 db  44h ; D
.eh_frame:0000000000008FF4                 db  0Eh
.eh_frame:0000000000008FF5                 db  20h
.eh_frame:0000000000008FF6                 db  83h
.eh_frame:0000000000008FF7                 db    4
.eh_frame:0000000000008FF8                 db  6Bh ; k
.eh_frame:0000000000008FF9                 db  0Eh
.eh_frame:0000000000008FFA                 db  18h
.eh_frame:0000000000008FFB                 db  41h ; A
.eh_frame:0000000000008FFC                 db  0Eh
.eh_frame:0000000000008FFD                 db  10h
.eh_frame:0000000000008FFE                 db  42h ; B
.eh_frame:0000000000008FFF                 db  0Eh
.eh_frame:0000000000009000                 db    8
.eh_frame:0000000000009001                 db    0
.eh_frame:0000000000009002                 db    0
.eh_frame:0000000000009003                 db    0
.eh_frame:0000000000009004                 db    0
.eh_frame:0000000000009005                 db    0
.eh_frame:0000000000009006                 db    0
.eh_frame:0000000000009007                 db    0
.eh_frame:0000000000009008                 db  3Ch ; <
.eh_frame:0000000000009009                 db    0
.eh_frame:000000000000900A                 db    0
.eh_frame:000000000000900B                 db    0
.eh_frame:000000000000900C                 db 0A4h
.eh_frame:000000000000900D                 db  0Ah
.eh_frame:000000000000900E                 db    0
.eh_frame:000000000000900F                 db    0
.eh_frame:0000000000009010                 db  20h
.eh_frame:0000000000009011                 db 0CCh
.eh_frame:0000000000009012                 db 0FFh
.eh_frame:0000000000009013                 db 0FFh
.eh_frame:0000000000009014                 db  83h
.eh_frame:0000000000009015                 db    0
.eh_frame:0000000000009016                 db    0
.eh_frame:0000000000009017                 db    0
.eh_frame:0000000000009018                 db    0
.eh_frame:0000000000009019                 db  42h ; B
.eh_frame:000000000000901A                 db  0Eh
.eh_frame:000000000000901B                 db  10h
.eh_frame:000000000000901C                 db  8Dh
.eh_frame:000000000000901D                 db    2
.eh_frame:000000000000901E                 db  42h ; B
.eh_frame:000000000000901F                 db  0Eh
.eh_frame:0000000000009020                 db  18h
.eh_frame:0000000000009021                 db  8Ch
.eh_frame:0000000000009022                 db    3
.eh_frame:0000000000009023                 db  44h ; D
.eh_frame:0000000000009024                 db  0Eh
.eh_frame:0000000000009025                 db  20h
.eh_frame:0000000000009026                 db  86h
.eh_frame:0000000000009027                 db    4
.eh_frame:0000000000009028                 db  41h ; A
.eh_frame:0000000000009029                 db  0Eh
.eh_frame:000000000000902A                 db  28h ; (
.eh_frame:000000000000902B                 db  83h
.eh_frame:000000000000902C                 db    5
.eh_frame:000000000000902D                 db  4Ah ; J
.eh_frame:000000000000902E                 db  0Eh
.eh_frame:000000000000902F                 db  40h ; @
.eh_frame:0000000000009030                 db    2
.eh_frame:0000000000009031                 db  64h ; d
.eh_frame:0000000000009032                 db  0Ah
.eh_frame:0000000000009033                 db  0Eh
.eh_frame:0000000000009034                 db  28h ; (
.eh_frame:0000000000009035                 db  41h ; A
.eh_frame:0000000000009036                 db  0Eh
.eh_frame:0000000000009037                 db  20h
.eh_frame:0000000000009038                 db  41h ; A
.eh_frame:0000000000009039                 db  0Eh
.eh_frame:000000000000903A                 db  18h
.eh_frame:000000000000903B                 db  42h ; B
.eh_frame:000000000000903C                 db  0Eh
.eh_frame:000000000000903D                 db  10h
.eh_frame:000000000000903E                 db  42h ; B
.eh_frame:000000000000903F                 db  0Eh
.eh_frame:0000000000009040                 db    8
.eh_frame:0000000000009041                 db  41h ; A
.eh_frame:0000000000009042                 db  0Bh
.eh_frame:0000000000009043                 db    0
.eh_frame:0000000000009044                 db    0
.eh_frame:0000000000009045                 db    0
.eh_frame:0000000000009046                 db    0
.eh_frame:0000000000009047                 db    0
.eh_frame:0000000000009048                 db  10h
.eh_frame:0000000000009049                 db    0
.eh_frame:000000000000904A                 db    0
.eh_frame:000000000000904B                 db    0
.eh_frame:000000000000904C                 db 0E4h
.eh_frame:000000000000904D                 db  0Ah
.eh_frame:000000000000904E                 db    0
.eh_frame:000000000000904F                 db    0
.eh_frame:0000000000009050                 db  70h ; p
.eh_frame:0000000000009051                 db 0CCh
.eh_frame:0000000000009052                 db 0FFh
.eh_frame:0000000000009053                 db 0FFh
.eh_frame:0000000000009054                 db  3Fh ; ?
.eh_frame:0000000000009055                 db    0
.eh_frame:0000000000009056                 db    0
.eh_frame:0000000000009057                 db    0
.eh_frame:0000000000009058                 db    0
.eh_frame:0000000000009059                 db  4Bh ; K
.eh_frame:000000000000905A                 db  0Eh
.eh_frame:000000000000905B                 db  10h
.eh_frame:000000000000905C                 db  10h
.eh_frame:000000000000905D                 db    0
.eh_frame:000000000000905E                 db    0
.eh_frame:000000000000905F                 db    0
.eh_frame:0000000000009060                 db 0F8h
.eh_frame:0000000000009061                 db  0Ah
.eh_frame:0000000000009062                 db    0
.eh_frame:0000000000009063                 db    0
.eh_frame:0000000000009064                 db  9Ch
.eh_frame:0000000000009065                 db 0CCh
.eh_frame:0000000000009066                 db 0FFh
.eh_frame:0000000000009067                 db 0FFh
.eh_frame:0000000000009068                 db  16h
.eh_frame:0000000000009069                 db    0
.eh_frame:000000000000906A                 db    0
.eh_frame:000000000000906B                 db    0
.eh_frame:000000000000906C                 db    0
.eh_frame:000000000000906D                 db    0
.eh_frame:000000000000906E                 db    0
.eh_frame:000000000000906F                 db    0
.eh_frame:0000000000009070                 db  10h
.eh_frame:0000000000009071                 db    0
.eh_frame:0000000000009072                 db    0
.eh_frame:0000000000009073                 db    0
.eh_frame:0000000000009074                 db  0Ch
.eh_frame:0000000000009075                 db  0Bh
.eh_frame:0000000000009076                 db    0
.eh_frame:0000000000009077                 db    0
.eh_frame:0000000000009078                 db 0A8h
.eh_frame:0000000000009079                 db 0CCh
.eh_frame:000000000000907A                 db 0FFh
.eh_frame:000000000000907B                 db 0FFh
.eh_frame:000000000000907C                 db  16h
.eh_frame:000000000000907D                 db    0
.eh_frame:000000000000907E                 db    0
.eh_frame:000000000000907F                 db    0
.eh_frame:0000000000009080                 db    0
.eh_frame:0000000000009081                 db    0
.eh_frame:0000000000009082                 db    0
.eh_frame:0000000000009083                 db    0
.eh_frame:0000000000009084                 db  2Ch ; ,
.eh_frame:0000000000009085                 db    0
.eh_frame:0000000000009086                 db    0
.eh_frame:0000000000009087                 db    0
.eh_frame:0000000000009088                 db  20h
.eh_frame:0000000000009089                 db  0Bh
.eh_frame:000000000000908A                 db    0
.eh_frame:000000000000908B                 db    0
.eh_frame:000000000000908C                 db 0B4h
.eh_frame:000000000000908D                 db 0CCh
.eh_frame:000000000000908E                 db 0FFh
.eh_frame:000000000000908F                 db 0FFh
.eh_frame:0000000000009090                 db  83h
.eh_frame:0000000000009091                 db    0
.eh_frame:0000000000009092                 db    0
.eh_frame:0000000000009093                 db    0
.eh_frame:0000000000009094                 db    0
.eh_frame:0000000000009095                 db  45h ; E
.eh_frame:0000000000009096                 db  0Eh
.eh_frame:0000000000009097                 db  10h
.eh_frame:0000000000009098                 db  8Ch
.eh_frame:0000000000009099                 db    2
.eh_frame:000000000000909A                 db  41h ; A
.eh_frame:000000000000909B                 db  0Eh
.eh_frame:000000000000909C                 db  18h
.eh_frame:000000000000909D                 db  86h
.eh_frame:000000000000909E                 db    3
.eh_frame:000000000000909F                 db  41h ; A
.eh_frame:00000000000090A0                 db  0Eh
.eh_frame:00000000000090A1                 db  20h
.eh_frame:00000000000090A2                 db  83h
.eh_frame:00000000000090A3                 db    4
.eh_frame:00000000000090A4                 db    2
.eh_frame:00000000000090A5                 db  62h ; b
.eh_frame:00000000000090A6                 db  0Ah
.eh_frame:00000000000090A7                 db  0Eh
.eh_frame:00000000000090A8                 db  18h
.eh_frame:00000000000090A9                 db  41h ; A
.eh_frame:00000000000090AA                 db  0Eh
.eh_frame:00000000000090AB                 db  10h
.eh_frame:00000000000090AC                 db  42h ; B
.eh_frame:00000000000090AD                 db  0Eh
.eh_frame:00000000000090AE                 db    8
.eh_frame:00000000000090AF                 db  44h ; D
.eh_frame:00000000000090B0                 db  0Bh
.eh_frame:00000000000090B1                 db    0
.eh_frame:00000000000090B2                 db    0
.eh_frame:00000000000090B3                 db    0
.eh_frame:00000000000090B4                 db  10h
.eh_frame:00000000000090B5                 db    0
.eh_frame:00000000000090B6                 db    0
.eh_frame:00000000000090B7                 db    0
.eh_frame:00000000000090B8                 db  50h ; P
.eh_frame:00000000000090B9                 db  0Bh
.eh_frame:00000000000090BA                 db    0
.eh_frame:00000000000090BB                 db    0
.eh_frame:00000000000090BC                 db  14h
.eh_frame:00000000000090BD                 db 0CDh
.eh_frame:00000000000090BE                 db 0FFh
.eh_frame:00000000000090BF                 db 0FFh
.eh_frame:00000000000090C0                 db  11h
.eh_frame:00000000000090C1                 db    0
.eh_frame:00000000000090C2                 db    0
.eh_frame:00000000000090C3                 db    0
.eh_frame:00000000000090C4                 db    0
.eh_frame:00000000000090C5                 db    0
.eh_frame:00000000000090C6                 db    0
.eh_frame:00000000000090C7                 db    0
.eh_frame:00000000000090C8                 db  10h
.eh_frame:00000000000090C9                 db    0
.eh_frame:00000000000090CA                 db    0
.eh_frame:00000000000090CB                 db    0
.eh_frame:00000000000090CC                 db  64h ; d
.eh_frame:00000000000090CD                 db  0Bh
.eh_frame:00000000000090CE                 db    0
.eh_frame:00000000000090CF                 db    0
.eh_frame:00000000000090D0                 db  20h
.eh_frame:00000000000090D1                 db 0CDh
.eh_frame:00000000000090D2                 db 0FFh
.eh_frame:00000000000090D3                 db 0FFh
.eh_frame:00000000000090D4                 db  15h
.eh_frame:00000000000090D5                 db    0
.eh_frame:00000000000090D6                 db    0
.eh_frame:00000000000090D7                 db    0
.eh_frame:00000000000090D8                 db    0
.eh_frame:00000000000090D9                 db    0
.eh_frame:00000000000090DA                 db    0
.eh_frame:00000000000090DB                 db    0
.eh_frame:00000000000090DC                 db  3Ch ; <
.eh_frame:00000000000090DD                 db    0
.eh_frame:00000000000090DE                 db    0
.eh_frame:00000000000090DF                 db    0
.eh_frame:00000000000090E0                 db  78h ; x
.eh_frame:00000000000090E1                 db  0Bh
.eh_frame:00000000000090E2                 db    0
.eh_frame:00000000000090E3                 db    0
.eh_frame:00000000000090E4                 db  2Ch ; ,
.eh_frame:00000000000090E5                 db 0CDh
.eh_frame:00000000000090E6                 db 0FFh
.eh_frame:00000000000090E7                 db 0FFh
.eh_frame:00000000000090E8                 db 0EBh
.eh_frame:00000000000090E9                 db    0
.eh_frame:00000000000090EA                 db    0
.eh_frame:00000000000090EB                 db    0
.eh_frame:00000000000090EC                 db    0
.eh_frame:00000000000090ED                 db  42h ; B
.eh_frame:00000000000090EE                 db  0Eh
.eh_frame:00000000000090EF                 db  10h
.eh_frame:00000000000090F0                 db  8Eh
.eh_frame:00000000000090F1                 db    2
.eh_frame:00000000000090F2                 db  42h ; B
.eh_frame:00000000000090F3                 db  0Eh
.eh_frame:00000000000090F4                 db  18h
.eh_frame:00000000000090F5                 db  8Dh
.eh_frame:00000000000090F6                 db    3
.eh_frame:00000000000090F7                 db  44h ; D
.eh_frame:00000000000090F8                 db  0Eh
.eh_frame:00000000000090F9                 db  20h
.eh_frame:00000000000090FA                 db  8Ch
.eh_frame:00000000000090FB                 db    4
.eh_frame:00000000000090FC                 db  41h ; A
.eh_frame:00000000000090FD                 db  0Eh
.eh_frame:00000000000090FE                 db  28h ; (
.eh_frame:00000000000090FF                 db  86h
.eh_frame:0000000000009100                 db    5
.eh_frame:0000000000009101                 db  41h ; A
.eh_frame:0000000000009102                 db  0Eh
.eh_frame:0000000000009103                 db  30h ; 0
.eh_frame:0000000000009104                 db  83h
.eh_frame:0000000000009105                 db    6
.eh_frame:0000000000009106                 db    2
.eh_frame:0000000000009107                 db 0BDh
.eh_frame:0000000000009108                 db  0Ah
.eh_frame:0000000000009109                 db  0Eh
.eh_frame:000000000000910A                 db  28h ; (
.eh_frame:000000000000910B                 db  41h ; A
.eh_frame:000000000000910C                 db  0Eh
.eh_frame:000000000000910D                 db  20h
.eh_frame:000000000000910E                 db  42h ; B
.eh_frame:000000000000910F                 db  0Eh
.eh_frame:0000000000009110                 db  18h
.eh_frame:0000000000009111                 db  42h ; B
.eh_frame:0000000000009112                 db  0Eh
.eh_frame:0000000000009113                 db  10h
.eh_frame:0000000000009114                 db  42h ; B
.eh_frame:0000000000009115                 db  0Eh
.eh_frame:0000000000009116                 db    8
.eh_frame:0000000000009117                 db  42h ; B
.eh_frame:0000000000009118                 db  0Bh
.eh_frame:0000000000009119                 db    0
.eh_frame:000000000000911A                 db    0
.eh_frame:000000000000911B                 db    0
.eh_frame:000000000000911C                 db  10h
.eh_frame:000000000000911D                 db    0
.eh_frame:000000000000911E                 db    0
.eh_frame:000000000000911F                 db    0
.eh_frame:0000000000009120                 db 0B8h
.eh_frame:0000000000009121                 db  0Bh
.eh_frame:0000000000009122                 db    0
.eh_frame:0000000000009123                 db    0
.eh_frame:0000000000009124                 db 0DCh
.eh_frame:0000000000009125                 db 0CDh
.eh_frame:0000000000009126                 db 0FFh
.eh_frame:0000000000009127                 db 0FFh
.eh_frame:0000000000009128                 db  38h ; 8
.eh_frame:0000000000009129                 db    0
.eh_frame:000000000000912A                 db    0
.eh_frame:000000000000912B                 db    0
.eh_frame:000000000000912C                 db    0
.eh_frame:000000000000912D                 db    0
.eh_frame:000000000000912E                 db    0
.eh_frame:000000000000912F                 db    0
.eh_frame:0000000000009130                 db  34h ; 4
.eh_frame:0000000000009131                 db    0
.eh_frame:0000000000009132                 db    0
.eh_frame:0000000000009133                 db    0
.eh_frame:0000000000009134                 db 0CCh
.eh_frame:0000000000009135                 db  0Bh
.eh_frame:0000000000009136                 db    0
.eh_frame:0000000000009137                 db    0
.eh_frame:0000000000009138                 db    8
.eh_frame:0000000000009139                 db 0CEh
.eh_frame:000000000000913A                 db 0FFh
.eh_frame:000000000000913B                 db 0FFh
.eh_frame:000000000000913C                 db  6Ah ; j
.eh_frame:000000000000913D                 db    0
.eh_frame:000000000000913E                 db    0
.eh_frame:000000000000913F                 db    0
.eh_frame:0000000000009140                 db    0
.eh_frame:0000000000009141                 db  42h ; B
.eh_frame:0000000000009142                 db  0Eh
.eh_frame:0000000000009143                 db  10h
.eh_frame:0000000000009144                 db  8Ch
.eh_frame:0000000000009145                 db    2
.eh_frame:0000000000009146                 db  41h ; A
.eh_frame:0000000000009147                 db  0Eh
.eh_frame:0000000000009148                 db  18h
.eh_frame:0000000000009149                 db  86h
.eh_frame:000000000000914A                 db    3
.eh_frame:000000000000914B                 db  44h ; D
.eh_frame:000000000000914C                 db  0Eh
.eh_frame:000000000000914D                 db  20h
.eh_frame:000000000000914E                 db  83h
.eh_frame:000000000000914F                 db    4
.eh_frame:0000000000009150                 db  7Ch ; |
.eh_frame:0000000000009151                 db  0Ah
.eh_frame:0000000000009152                 db  0Eh
.eh_frame:0000000000009153                 db  18h
.eh_frame:0000000000009154                 db  41h ; A
.eh_frame:0000000000009155                 db  0Eh
.eh_frame:0000000000009156                 db  10h
.eh_frame:0000000000009157                 db  42h ; B
.eh_frame:0000000000009158                 db  0Eh
.eh_frame:0000000000009159                 db    8
.eh_frame:000000000000915A                 db  4Ah ; J
.eh_frame:000000000000915B                 db  0Bh
.eh_frame:000000000000915C                 db  51h ; Q
.eh_frame:000000000000915D                 db  0Ah
.eh_frame:000000000000915E                 db  0Eh
.eh_frame:000000000000915F                 db  18h
.eh_frame:0000000000009160                 db  41h ; A
.eh_frame:0000000000009161                 db  0Eh
.eh_frame:0000000000009162                 db  10h
.eh_frame:0000000000009163                 db  42h ; B
.eh_frame:0000000000009164                 db  0Eh
.eh_frame:0000000000009165                 db    8
.eh_frame:0000000000009166                 db  41h ; A
.eh_frame:0000000000009167                 db  0Bh
.eh_frame:0000000000009168                 db  14h
.eh_frame:0000000000009169                 db    0
.eh_frame:000000000000916A                 db    0
.eh_frame:000000000000916B                 db    0
.eh_frame:000000000000916C                 db    4
.eh_frame:000000000000916D                 db  0Ch
.eh_frame:000000000000916E                 db    0
.eh_frame:000000000000916F                 db    0
.eh_frame:0000000000009170                 db  40h ; @
.eh_frame:0000000000009171                 db 0CEh
.eh_frame:0000000000009172                 db 0FFh
.eh_frame:0000000000009173                 db 0FFh
.eh_frame:0000000000009174                 db  2Ah ; *
.eh_frame:0000000000009175                 db    0
.eh_frame:0000000000009176                 db    0
.eh_frame:0000000000009177                 db    0
.eh_frame:0000000000009178                 db    0
.eh_frame:0000000000009179                 db    0
.eh_frame:000000000000917A                 db    0
.eh_frame:000000000000917B                 db    0
.eh_frame:000000000000917C                 db    0
.eh_frame:000000000000917D                 db    0
.eh_frame:000000000000917E                 db    0
.eh_frame:000000000000917F                 db    0
.eh_frame:0000000000009180                 db  4Ch ; L
.eh_frame:0000000000009181                 db    0
.eh_frame:0000000000009182                 db    0
.eh_frame:0000000000009183                 db    0
.eh_frame:0000000000009184                 db  1Ch
.eh_frame:0000000000009185                 db  0Ch
.eh_frame:0000000000009186                 db    0
.eh_frame:0000000000009187                 db    0
.eh_frame:0000000000009188                 db  58h ; X
.eh_frame:0000000000009189                 db 0CEh
.eh_frame:000000000000918A                 db 0FFh
.eh_frame:000000000000918B                 db 0FFh
.eh_frame:000000000000918C                 db  7Dh ; }
.eh_frame:000000000000918D                 db    0
.eh_frame:000000000000918E                 db    0
.eh_frame:000000000000918F                 db    0
.eh_frame:0000000000009190                 db    0
.eh_frame:0000000000009191                 db  42h ; B
.eh_frame:0000000000009192                 db  0Eh
.eh_frame:0000000000009193                 db  10h
.eh_frame:0000000000009194                 db  8Ch
.eh_frame:0000000000009195                 db    2
.eh_frame:0000000000009196                 db  41h ; A
.eh_frame:0000000000009197                 db  0Eh
.eh_frame:0000000000009198                 db  18h
.eh_frame:0000000000009199                 db  86h
.eh_frame:000000000000919A                 db    3
.eh_frame:000000000000919B                 db  44h ; D
.eh_frame:000000000000919C                 db  0Eh
.eh_frame:000000000000919D                 db  20h
.eh_frame:000000000000919E                 db  83h
.eh_frame:000000000000919F                 db    4
.eh_frame:00000000000091A0                 db  69h ; i
.eh_frame:00000000000091A1                 db  0Ah
.eh_frame:00000000000091A2                 db  0Eh
.eh_frame:00000000000091A3                 db  18h
.eh_frame:00000000000091A4                 db  41h ; A
.eh_frame:00000000000091A5                 db  0Eh
.eh_frame:00000000000091A6                 db  10h
.eh_frame:00000000000091A7                 db  42h ; B
.eh_frame:00000000000091A8                 db  0Eh
.eh_frame:00000000000091A9                 db    8
.eh_frame:00000000000091AA                 db  45h ; E
.eh_frame:00000000000091AB                 db  0Bh
.eh_frame:00000000000091AC                 db  55h ; U
.eh_frame:00000000000091AD                 db  0Ah
.eh_frame:00000000000091AE                 db  0Eh
.eh_frame:00000000000091AF                 db  18h
.eh_frame:00000000000091B0                 db  41h ; A
.eh_frame:00000000000091B1                 db  0Eh
.eh_frame:00000000000091B2                 db  10h
.eh_frame:00000000000091B3                 db  42h ; B
.eh_frame:00000000000091B4                 db  0Eh
.eh_frame:00000000000091B5                 db    8
.eh_frame:00000000000091B6                 db  48h ; H
.eh_frame:00000000000091B7                 db  0Bh
.eh_frame:00000000000091B8                 db  41h ; A
.eh_frame:00000000000091B9                 db  0Ah
.eh_frame:00000000000091BA                 db  0Eh
.eh_frame:00000000000091BB                 db  18h
.eh_frame:00000000000091BC                 db  46h ; F
.eh_frame:00000000000091BD                 db  0Eh
.eh_frame:00000000000091BE                 db  10h
.eh_frame:00000000000091BF                 db  42h ; B
.eh_frame:00000000000091C0                 db  0Eh
.eh_frame:00000000000091C1                 db    8
.eh_frame:00000000000091C2                 db  47h ; G
.eh_frame:00000000000091C3                 db  0Bh
.eh_frame:00000000000091C4                 db  49h ; I
.eh_frame:00000000000091C5                 db  0Eh
.eh_frame:00000000000091C6                 db  18h
.eh_frame:00000000000091C7                 db  41h ; A
.eh_frame:00000000000091C8                 db  0Eh
.eh_frame:00000000000091C9                 db  10h
.eh_frame:00000000000091CA                 db  42h ; B
.eh_frame:00000000000091CB                 db  0Eh
.eh_frame:00000000000091CC                 db    8
.eh_frame:00000000000091CD                 db    0
.eh_frame:00000000000091CE                 db    0
.eh_frame:00000000000091CF                 db    0
.eh_frame:00000000000091D0                 db  1Ch
.eh_frame:00000000000091D1                 db    0
.eh_frame:00000000000091D2                 db    0
.eh_frame:00000000000091D3                 db    0
.eh_frame:00000000000091D4                 db  6Ch ; l
.eh_frame:00000000000091D5                 db  0Ch
.eh_frame:00000000000091D6                 db    0
.eh_frame:00000000000091D7                 db    0
.eh_frame:00000000000091D8                 db  88h
.eh_frame:00000000000091D9                 db 0CEh
.eh_frame:00000000000091DA                 db 0FFh
.eh_frame:00000000000091DB                 db 0FFh
.eh_frame:00000000000091DC                 db  60h ; `
.eh_frame:00000000000091DD                 db    0
.eh_frame:00000000000091DE                 db    0
.eh_frame:00000000000091DF                 db    0
.eh_frame:00000000000091E0                 db    0
.eh_frame:00000000000091E1                 db  44h ; D
.eh_frame:00000000000091E2                 db  0Eh
.eh_frame:00000000000091E3                 db  10h
.eh_frame:00000000000091E4                 db  75h ; u
.eh_frame:00000000000091E5                 db  0Ah
.eh_frame:00000000000091E6                 db  0Eh
.eh_frame:00000000000091E7                 db    8
.eh_frame:00000000000091E8                 db  47h ; G
.eh_frame:00000000000091E9                 db  0Bh
.eh_frame:00000000000091EA                 db  5Fh ; _
.eh_frame:00000000000091EB                 db  0Eh
.eh_frame:00000000000091EC                 db    8
.eh_frame:00000000000091ED                 db    0
.eh_frame:00000000000091EE                 db    0
.eh_frame:00000000000091EF                 db    0
.eh_frame:00000000000091F0                 db  1Ch
.eh_frame:00000000000091F1                 db    0
.eh_frame:00000000000091F2                 db    0
.eh_frame:00000000000091F3                 db    0
.eh_frame:00000000000091F4                 db  8Ch
.eh_frame:00000000000091F5                 db  0Ch
.eh_frame:00000000000091F6                 db    0
.eh_frame:00000000000091F7                 db    0
.eh_frame:00000000000091F8                 db 0C8h
.eh_frame:00000000000091F9                 db 0CEh
.eh_frame:00000000000091FA                 db 0FFh
.eh_frame:00000000000091FB                 db 0FFh
.eh_frame:00000000000091FC                 db  3Ch ; <
.eh_frame:00000000000091FD                 db    0
.eh_frame:00000000000091FE                 db    0
.eh_frame:00000000000091FF                 db    0
.eh_frame:0000000000009200                 db    0
.eh_frame:0000000000009201                 db  44h ; D
.eh_frame:0000000000009202                 db  0Eh
.eh_frame:0000000000009203                 db  10h
.eh_frame:0000000000009204                 db  61h ; a
.eh_frame:0000000000009205                 db  0Ah
.eh_frame:0000000000009206                 db  0Eh
.eh_frame:0000000000009207                 db    8
.eh_frame:0000000000009208                 db  4Bh ; K
.eh_frame:0000000000009209                 db  0Bh
.eh_frame:000000000000920A                 db  4Bh ; K
.eh_frame:000000000000920B                 db  0Eh
.eh_frame:000000000000920C                 db    8
.eh_frame:000000000000920D                 db    0
.eh_frame:000000000000920E                 db    0
.eh_frame:000000000000920F                 db    0
.eh_frame:0000000000009210                 db  44h ; D
.eh_frame:0000000000009211                 db    0
.eh_frame:0000000000009212                 db    0
.eh_frame:0000000000009213                 db    0
.eh_frame:0000000000009214                 db 0ACh
.eh_frame:0000000000009215                 db  0Ch
.eh_frame:0000000000009216                 db    0
.eh_frame:0000000000009217                 db    0
.eh_frame:0000000000009218                 db 0E8h
.eh_frame:0000000000009219                 db 0CEh
.eh_frame:000000000000921A                 db 0FFh
.eh_frame:000000000000921B                 db 0FFh
.eh_frame:000000000000921C                 db  65h ; e
.eh_frame:000000000000921D                 db    0
.eh_frame:000000000000921E                 db    0
.eh_frame:000000000000921F                 db    0
.eh_frame:0000000000009220                 db    0
.eh_frame:0000000000009221                 db  42h ; B
.eh_frame:0000000000009222                 db  0Eh
.eh_frame:0000000000009223                 db  10h
.eh_frame:0000000000009224                 db  8Fh
.eh_frame:0000000000009225                 db    2
.eh_frame:0000000000009226                 db  42h ; B
.eh_frame:0000000000009227                 db  0Eh
.eh_frame:0000000000009228                 db  18h
.eh_frame:0000000000009229                 db  8Eh
.eh_frame:000000000000922A                 db    3
.eh_frame:000000000000922B                 db  45h ; E
.eh_frame:000000000000922C                 db  0Eh
.eh_frame:000000000000922D                 db  20h
.eh_frame:000000000000922E                 db  8Dh
.eh_frame:000000000000922F                 db    4
.eh_frame:0000000000009230                 db  42h ; B
.eh_frame:0000000000009231                 db  0Eh
.eh_frame:0000000000009232                 db  28h ; (
.eh_frame:0000000000009233                 db  8Ch
.eh_frame:0000000000009234                 db    5
.eh_frame:0000000000009235                 db  48h ; H
.eh_frame:0000000000009236                 db  0Eh
.eh_frame:0000000000009237                 db  30h ; 0
.eh_frame:0000000000009238                 db  86h
.eh_frame:0000000000009239                 db    6
.eh_frame:000000000000923A                 db  48h ; H
.eh_frame:000000000000923B                 db  0Eh
.eh_frame:000000000000923C                 db  38h ; 8
.eh_frame:000000000000923D                 db  83h
.eh_frame:000000000000923E                 db    7
.eh_frame:000000000000923F                 db  4Dh ; M
.eh_frame:0000000000009240                 db  0Eh
.eh_frame:0000000000009241                 db  40h ; @
.eh_frame:0000000000009242                 db  72h ; r
.eh_frame:0000000000009243                 db  0Eh
.eh_frame:0000000000009244                 db  38h ; 8
.eh_frame:0000000000009245                 db  41h ; A
.eh_frame:0000000000009246                 db  0Eh
.eh_frame:0000000000009247                 db  30h ; 0
.eh_frame:0000000000009248                 db  41h ; A
.eh_frame:0000000000009249                 db  0Eh
.eh_frame:000000000000924A                 db  28h ; (
.eh_frame:000000000000924B                 db  42h ; B
.eh_frame:000000000000924C                 db  0Eh
.eh_frame:000000000000924D                 db  20h
.eh_frame:000000000000924E                 db  42h ; B
.eh_frame:000000000000924F                 db  0Eh
.eh_frame:0000000000009250                 db  18h
.eh_frame:0000000000009251                 db  42h ; B
.eh_frame:0000000000009252                 db  0Eh
.eh_frame:0000000000009253                 db  10h
.eh_frame:0000000000009254                 db  42h ; B
.eh_frame:0000000000009255                 db  0Eh
.eh_frame:0000000000009256                 db    8
.eh_frame:0000000000009257                 db    0
.eh_frame:0000000000009258                 db  14h
.eh_frame:0000000000009259                 db    0
.eh_frame:000000000000925A                 db    0
.eh_frame:000000000000925B                 db    0
.eh_frame:000000000000925C                 db 0F4h
.eh_frame:000000000000925D                 db  0Ch
.eh_frame:000000000000925E                 db    0
.eh_frame:000000000000925F                 db    0
.eh_frame:0000000000009260                 db  10h
.eh_frame:0000000000009261                 db 0CFh
.eh_frame:0000000000009262                 db 0FFh
.eh_frame:0000000000009263                 db 0FFh
.eh_frame:0000000000009264                 db    2
.eh_frame:0000000000009265                 db    0
.eh_frame:0000000000009266                 db    0
.eh_frame:0000000000009267                 db    0
.eh_frame:0000000000009268                 db    0
.eh_frame:0000000000009269                 db    0
.eh_frame:000000000000926A                 db    0
.eh_frame:000000000000926B                 db    0
.eh_frame:000000000000926C                 db    0
.eh_frame:000000000000926D                 db    0
.eh_frame:000000000000926E                 db    0
.eh_frame:000000000000926F                 db    0
.eh_frame:0000000000009270                 db  10h
.eh_frame:0000000000009271                 db    0
.eh_frame:0000000000009272                 db    0
.eh_frame:0000000000009273                 db    0
.eh_frame:0000000000009274                 db  0Ch
.eh_frame:0000000000009275                 db  0Dh
.eh_frame:0000000000009276                 db    0
.eh_frame:0000000000009277                 db    0
.eh_frame:0000000000009278                 db    8
.eh_frame:0000000000009279                 db 0CFh
.eh_frame:000000000000927A                 db 0FFh
.eh_frame:000000000000927B                 db 0FFh
.eh_frame:000000000000927C                 db  0Eh
.eh_frame:000000000000927D                 db    0
.eh_frame:000000000000927E                 db    0
.eh_frame:000000000000927F                 db    0
.eh_frame:0000000000009280                 db    0
.eh_frame:0000000000009281                 db    0
.eh_frame:0000000000009282                 db    0
.eh_frame:0000000000009283                 db    0
.eh_frame:0000000000009284 __FRAME_END__   db    0
.eh_frame:0000000000009285                 db    0
.eh_frame:0000000000009286                 db    0
.eh_frame:0000000000009287                 db    0
.eh_frame:0000000000009287 _eh_frame       ends
.eh_frame:0000000000009287
.init_array:0000000000209850 ; ELF Initialization Function Table
.init_array:0000000000209850 ; ===========================================================================
.init_array:0000000000209850
.init_array:0000000000209850 ; Segment type: Pure data
.init_array:0000000000209850 ; Segment permissions: Read/Write
.init_array:0000000000209850 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209850                 assume cs:_init_array
.init_array:0000000000209850                 ;org 209850h
.init_array:0000000000209850 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209850                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209850                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209850 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209850
.fini_array:0000000000209858 ; ELF Termination Function Table
.fini_array:0000000000209858 ; ===========================================================================
.fini_array:0000000000209858
.fini_array:0000000000209858 ; Segment type: Pure data
.fini_array:0000000000209858 ; Segment permissions: Read/Write
.fini_array:0000000000209858 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209858                 assume cs:_fini_array
.fini_array:0000000000209858                 ;org 209858h
.fini_array:0000000000209858 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209858                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209858 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209858
.data.rel.ro:0000000000209860 ; ===========================================================================
.data.rel.ro:0000000000209860
.data.rel.ro:0000000000209860 ; Segment type: Pure data
.data.rel.ro:0000000000209860 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209860 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209860                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209860                 ;org 209860h
.data.rel.ro:0000000000209860 ; struct option long_options
.data.rel.ro:0000000000209860 long_options    dq offset aBourneShell  ; name
.data.rel.ro:0000000000209860                                         ; DATA XREF: main:loc_207A↑o
.data.rel.ro:0000000000209860                 dd 0                    ; has_arg ; "bourne-shell"
.data.rel.ro:0000000000209860                 db 4 dup(0)
.data.rel.ro:0000000000209860                 dq 0                    ; flag
.data.rel.ro:0000000000209860                 dd 62h                  ; val
.data.rel.ro:0000000000209860                 db 4 dup(0)
.data.rel.ro:0000000000209880                 dq offset s2+2          ; "sh"
.data.rel.ro:0000000000209888                 db    0
.data.rel.ro:0000000000209889                 db    0
.data.rel.ro:000000000020988A                 db    0
.data.rel.ro:000000000020988B                 db    0
.data.rel.ro:000000000020988C                 db    0
.data.rel.ro:000000000020988D                 db    0
.data.rel.ro:000000000020988E                 db    0
.data.rel.ro:000000000020988F                 db    0
.data.rel.ro:0000000000209890                 db    0
.data.rel.ro:0000000000209891                 db    0
.data.rel.ro:0000000000209892                 db    0
.data.rel.ro:0000000000209893                 db    0
.data.rel.ro:0000000000209894                 db    0
.data.rel.ro:0000000000209895                 db    0
.data.rel.ro:0000000000209896                 db    0
.data.rel.ro:0000000000209897                 db    0
.data.rel.ro:0000000000209898                 db  62h ; b
.data.rel.ro:0000000000209899                 db    0
.data.rel.ro:000000000020989A                 db    0
.data.rel.ro:000000000020989B                 db    0
.data.rel.ro:000000000020989C                 db    0
.data.rel.ro:000000000020989D                 db    0
.data.rel.ro:000000000020989E                 db    0
.data.rel.ro:000000000020989F                 db    0
.data.rel.ro:00000000002098A0                 dq offset s2+1          ; "csh"
.data.rel.ro:00000000002098A8                 db    0
.data.rel.ro:00000000002098A9                 db    0
.data.rel.ro:00000000002098AA                 db    0
.data.rel.ro:00000000002098AB                 db    0
.data.rel.ro:00000000002098AC                 db    0
.data.rel.ro:00000000002098AD                 db    0
.data.rel.ro:00000000002098AE                 db    0
.data.rel.ro:00000000002098AF                 db    0
.data.rel.ro:00000000002098B0                 db    0
.data.rel.ro:00000000002098B1                 db    0
.data.rel.ro:00000000002098B2                 db    0
.data.rel.ro:00000000002098B3                 db    0
.data.rel.ro:00000000002098B4                 db    0
.data.rel.ro:00000000002098B5                 db    0
.data.rel.ro:00000000002098B6                 db    0
.data.rel.ro:00000000002098B7                 db    0
.data.rel.ro:00000000002098B8                 db  63h ; c
.data.rel.ro:00000000002098B9                 db    0
.data.rel.ro:00000000002098BA                 db    0
.data.rel.ro:00000000002098BB                 db    0
.data.rel.ro:00000000002098BC                 db    0
.data.rel.ro:00000000002098BD                 db    0
.data.rel.ro:00000000002098BE                 db    0
.data.rel.ro:00000000002098BF                 db    0
.data.rel.ro:00000000002098C0                 dq offset aCShell       ; "c-shell"
.data.rel.ro:00000000002098C8                 db    0
.data.rel.ro:00000000002098C9                 db    0
.data.rel.ro:00000000002098CA                 db    0
.data.rel.ro:00000000002098CB                 db    0
.data.rel.ro:00000000002098CC                 db    0
.data.rel.ro:00000000002098CD                 db    0
.data.rel.ro:00000000002098CE                 db    0
.data.rel.ro:00000000002098CF                 db    0
.data.rel.ro:00000000002098D0                 db    0
.data.rel.ro:00000000002098D1                 db    0
.data.rel.ro:00000000002098D2                 db    0
.data.rel.ro:00000000002098D3                 db    0
.data.rel.ro:00000000002098D4                 db    0
.data.rel.ro:00000000002098D5                 db    0
.data.rel.ro:00000000002098D6                 db    0
.data.rel.ro:00000000002098D7                 db    0
.data.rel.ro:00000000002098D8                 db  63h ; c
.data.rel.ro:00000000002098D9                 db    0
.data.rel.ro:00000000002098DA                 db    0
.data.rel.ro:00000000002098DB                 db    0
.data.rel.ro:00000000002098DC                 db    0
.data.rel.ro:00000000002098DD                 db    0
.data.rel.ro:00000000002098DE                 db    0
.data.rel.ro:00000000002098DF                 db    0
.data.rel.ro:00000000002098E0                 dq offset aPrintDatabase ; "print-database"
.data.rel.ro:00000000002098E8                 db    0
.data.rel.ro:00000000002098E9                 db    0
.data.rel.ro:00000000002098EA                 db    0
.data.rel.ro:00000000002098EB                 db    0
.data.rel.ro:00000000002098EC                 db    0
.data.rel.ro:00000000002098ED                 db    0
.data.rel.ro:00000000002098EE                 db    0
.data.rel.ro:00000000002098EF                 db    0
.data.rel.ro:00000000002098F0                 db    0
.data.rel.ro:00000000002098F1                 db    0
.data.rel.ro:00000000002098F2                 db    0
.data.rel.ro:00000000002098F3                 db    0
.data.rel.ro:00000000002098F4                 db    0
.data.rel.ro:00000000002098F5                 db    0
.data.rel.ro:00000000002098F6                 db    0
.data.rel.ro:00000000002098F7                 db    0
.data.rel.ro:00000000002098F8                 db  70h ; p
.data.rel.ro:00000000002098F9                 db    0
.data.rel.ro:00000000002098FA                 db    0
.data.rel.ro:00000000002098FB                 db    0
.data.rel.ro:00000000002098FC                 db    0
.data.rel.ro:00000000002098FD                 db    0
.data.rel.ro:00000000002098FE                 db    0
.data.rel.ro:00000000002098FF                 db    0
.data.rel.ro:0000000000209900                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209908                 db    0
.data.rel.ro:0000000000209909                 db    0
.data.rel.ro:000000000020990A                 db    0
.data.rel.ro:000000000020990B                 db    0
.data.rel.ro:000000000020990C                 db    0
.data.rel.ro:000000000020990D                 db    0
.data.rel.ro:000000000020990E                 db    0
.data.rel.ro:000000000020990F                 db    0
.data.rel.ro:0000000000209910                 db    0
.data.rel.ro:0000000000209911                 db    0
.data.rel.ro:0000000000209912                 db    0
.data.rel.ro:0000000000209913                 db    0
.data.rel.ro:0000000000209914                 db    0
.data.rel.ro:0000000000209915                 db    0
.data.rel.ro:0000000000209916                 db    0
.data.rel.ro:0000000000209917                 db    0
.data.rel.ro:0000000000209918                 db  7Eh ; ~
.data.rel.ro:0000000000209919                 db 0FFh
.data.rel.ro:000000000020991A                 db 0FFh
.data.rel.ro:000000000020991B                 db 0FFh
.data.rel.ro:000000000020991C                 db    0
.data.rel.ro:000000000020991D                 db    0
.data.rel.ro:000000000020991E                 db    0
.data.rel.ro:000000000020991F                 db    0
.data.rel.ro:0000000000209920                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209928                 db    0
.data.rel.ro:0000000000209929                 db    0
.data.rel.ro:000000000020992A                 db    0
.data.rel.ro:000000000020992B                 db    0
.data.rel.ro:000000000020992C                 db    0
.data.rel.ro:000000000020992D                 db    0
.data.rel.ro:000000000020992E                 db    0
.data.rel.ro:000000000020992F                 db    0
.data.rel.ro:0000000000209930                 db    0
.data.rel.ro:0000000000209931                 db    0
.data.rel.ro:0000000000209932                 db    0
.data.rel.ro:0000000000209933                 db    0
.data.rel.ro:0000000000209934                 db    0
.data.rel.ro:0000000000209935                 db    0
.data.rel.ro:0000000000209936                 db    0
.data.rel.ro:0000000000209937                 db    0
.data.rel.ro:0000000000209938                 db  7Dh ; }
.data.rel.ro:0000000000209939                 db 0FFh
.data.rel.ro:000000000020993A                 db 0FFh
.data.rel.ro:000000000020993B                 db 0FFh
.data.rel.ro:000000000020993C                 db    0
.data.rel.ro:000000000020993D                 db    0
.data.rel.ro:000000000020993E                 db    0
.data.rel.ro:000000000020993F                 db    0
.data.rel.ro:0000000000209940                 db    0
.data.rel.ro:0000000000209941                 db    0
.data.rel.ro:0000000000209942                 db    0
.data.rel.ro:0000000000209943                 db    0
.data.rel.ro:0000000000209944                 db    0
.data.rel.ro:0000000000209945                 db    0
.data.rel.ro:0000000000209946                 db    0
.data.rel.ro:0000000000209947                 db    0
.data.rel.ro:0000000000209948                 db    0
.data.rel.ro:0000000000209949                 db    0
.data.rel.ro:000000000020994A                 db    0
.data.rel.ro:000000000020994B                 db    0
.data.rel.ro:000000000020994C                 db    0
.data.rel.ro:000000000020994D                 db    0
.data.rel.ro:000000000020994E                 db    0
.data.rel.ro:000000000020994F                 db    0
.data.rel.ro:0000000000209950                 db    0
.data.rel.ro:0000000000209951                 db    0
.data.rel.ro:0000000000209952                 db    0
.data.rel.ro:0000000000209953                 db    0
.data.rel.ro:0000000000209954                 db    0
.data.rel.ro:0000000000209955                 db    0
.data.rel.ro:0000000000209956                 db    0
.data.rel.ro:0000000000209957                 db    0
.data.rel.ro:0000000000209958                 db    0
.data.rel.ro:0000000000209959                 db    0
.data.rel.ro:000000000020995A                 db    0
.data.rel.ro:000000000020995B                 db    0
.data.rel.ro:000000000020995C                 db    0
.data.rel.ro:000000000020995D                 db    0
.data.rel.ro:000000000020995E                 db    0
.data.rel.ro:000000000020995F                 db    0
.data.rel.ro:0000000000209960 ls_codes        dq offset aNo           ; DATA XREF: dc_parse_stream:loc_2C90↑o
.data.rel.ro:0000000000209960                                         ; "no"
.data.rel.ro:0000000000209968                 dq offset aNo           ; "no"
.data.rel.ro:0000000000209970                 dq offset aFi           ; "fi"
.data.rel.ro:0000000000209978                 dq offset aDircolors+7  ; "rs"
.data.rel.ro:0000000000209980                 dq offset aDi           ; "di"
.data.rel.ro:0000000000209988                 dq offset aLn           ; "ln"
.data.rel.ro:0000000000209990                 dq offset aLn           ; "ln"
.data.rel.ro:0000000000209998                 dq offset aLn           ; "ln"
.data.rel.ro:00000000002099A0                 dq offset aWriteError+9 ; "or"
.data.rel.ro:00000000002099A8                 dq offset aMi           ; "mi"
.data.rel.ro:00000000002099B0                 dq offset aPi           ; "pi"
.data.rel.ro:00000000002099B8                 dq offset aPi           ; "pi"
.data.rel.ro:00000000002099C0                 dq offset aSo           ; "so"
.data.rel.ro:00000000002099C8                 dq offset aBd           ; "bd"
.data.rel.ro:00000000002099D0                 dq offset aBd           ; "bd"
.data.rel.ro:00000000002099D8                 dq offset aCd           ; "cd"
.data.rel.ro:00000000002099E0                 dq offset aCd           ; "cd"
.data.rel.ro:00000000002099E8                 dq offset aDo           ; "do"
.data.rel.ro:00000000002099F0                 dq offset aEx           ; "ex"
.data.rel.ro:00000000002099F8                 dq offset aLc           ; "lc"
.data.rel.ro:0000000000209A00                 dq offset aLc           ; "lc"
.data.rel.ro:0000000000209A08                 dq offset aRc           ; "rc"
.data.rel.ro:0000000000209A10                 dq offset aRc           ; "rc"
.data.rel.ro:0000000000209A18                 dq offset aEc           ; "ec"
.data.rel.ro:0000000000209A20                 dq offset aEc           ; "ec"
.data.rel.ro:0000000000209A28                 dq offset aSu           ; "su"
.data.rel.ro:0000000000209A30                 dq offset aSu           ; "su"
.data.rel.ro:0000000000209A38                 dq offset aSg           ; "sg"
.data.rel.ro:0000000000209A40                 dq offset aSg           ; "sg"
.data.rel.ro:0000000000209A48                 dq offset aSt           ; "st"
.data.rel.ro:0000000000209A50                 dq offset aOw           ; "ow"
.data.rel.ro:0000000000209A58                 dq offset aOw           ; "ow"
.data.rel.ro:0000000000209A60                 dq offset aTw           ; "tw"
.data.rel.ro:0000000000209A68                 dq offset aTw           ; "tw"
.data.rel.ro:0000000000209A70                 dq offset aCa           ; "ca"
.data.rel.ro:0000000000209A78                 dq offset aMh           ; "mh"
.data.rel.ro:0000000000209A80                 dq offset aCl           ; "cl"
.data.rel.ro:0000000000209A88                 align 20h
.data.rel.ro:0000000000209AA0 slack_codes     dq offset aNormal       ; DATA XREF: dc_parse_stream:loc_2C50↑o
.data.rel.ro:0000000000209AA0                                         ; "NORMAL"
.data.rel.ro:0000000000209AA8                 dq offset aNorm         ; "NORM"
.data.rel.ro:0000000000209AB0                 dq offset aFile         ; "FILE"
.data.rel.ro:0000000000209AB8                 dq offset aReset        ; "RESET"
.data.rel.ro:0000000000209AC0                 dq offset aDir          ; "DIR"
.data.rel.ro:0000000000209AC8                 dq offset aLnk          ; "LNK"
.data.rel.ro:0000000000209AD0                 dq offset aMultihardlink+9 ; "LINK"
.data.rel.ro:0000000000209AD8                 dq offset aSymlink      ; "SYMLINK"
.data.rel.ro:0000000000209AE0                 dq offset aOrphan       ; "ORPHAN"
.data.rel.ro:0000000000209AE8                 dq offset aMissing      ; "MISSING"
.data.rel.ro:0000000000209AF0                 dq offset aFifo         ; "FIFO"
.data.rel.ro:0000000000209AF8                 dq offset aPipe         ; "PIPE"
.data.rel.ro:0000000000209B00                 dq offset aSock         ; "SOCK"
.data.rel.ro:0000000000209B08                 dq offset aBlk          ; "BLK"
.data.rel.ro:0000000000209B10                 dq offset aBlock        ; "BLOCK"
.data.rel.ro:0000000000209B18                 dq offset aChr          ; "CHR"
.data.rel.ro:0000000000209B20                 dq offset aChar         ; "CHAR"
.data.rel.ro:0000000000209B28                 dq offset aDoor         ; "DOOR"
.data.rel.ro:0000000000209B30                 dq offset aExec         ; "EXEC"
.data.rel.ro:0000000000209B38                 dq offset aLeft         ; "LEFT"
.data.rel.ro:0000000000209B40                 dq offset aLeftcode     ; "LEFTCODE"
.data.rel.ro:0000000000209B48                 dq offset aRight        ; "RIGHT"
.data.rel.ro:0000000000209B50                 dq offset aRightcode    ; "RIGHTCODE"
.data.rel.ro:0000000000209B58                 dq offset aEnd          ; "END"
.data.rel.ro:0000000000209B60                 dq offset aEndcode      ; "ENDCODE"
.data.rel.ro:0000000000209B68                 dq offset aSuid         ; "SUID"
.data.rel.ro:0000000000209B70                 dq offset aSetuid       ; "SETUID"
.data.rel.ro:0000000000209B78                 dq offset aSgid         ; "SGID"
.data.rel.ro:0000000000209B80                 dq offset aSetgid       ; "SETGID"
.data.rel.ro:0000000000209B88                 dq offset aSticky       ; "STICKY"
.data.rel.ro:0000000000209B90                 dq offset aStickyOtherWri+7 ; "OTHER_WRITABLE"
.data.rel.ro:0000000000209B98                 dq offset aOwr          ; "OWR"
.data.rel.ro:0000000000209BA0                 dq offset aStickyOtherWri ; "STICKY_OTHER_WRITABLE"
.data.rel.ro:0000000000209BA8                 dq offset aOwt          ; "OWT"
.data.rel.ro:0000000000209BB0                 dq offset aCapability   ; "CAPABILITY"
.data.rel.ro:0000000000209BB8                 dq offset aMultihardlink ; "MULTIHARDLINK"
.data.rel.ro:0000000000209BC0                 dq offset aClrtoeol     ; "CLRTOEOL"
.data.rel.ro:0000000000209BC8                 align 20h
.data.rel.ro:0000000000209BE0                 public quoting_style_args
.data.rel.ro:0000000000209BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BE8                 dq offset aCShell+2     ; "shell"
.data.rel.ro:0000000000209BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209C08                 dq offset aEc+1         ; "c"
.data.rel.ro:0000000000209C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C30                 db    0
.data.rel.ro:0000000000209C31                 db    0
.data.rel.ro:0000000000209C32                 db    0
.data.rel.ro:0000000000209C33                 db    0
.data.rel.ro:0000000000209C34                 db    0
.data.rel.ro:0000000000209C35                 db    0
.data.rel.ro:0000000000209C36                 db    0
.data.rel.ro:0000000000209C37                 db    0
.data.rel.ro:0000000000209C37 _data_rel_ro    ends
.data.rel.ro:0000000000209C37
LOAD:0000000000209C38 ; ELF Dynamic Information
LOAD:0000000000209C38 ; ===========================================================================
LOAD:0000000000209C38
LOAD:0000000000209C38 ; Segment type: Pure data
LOAD:0000000000209C38 ; Segment permissions: Read/Write
LOAD:0000000000209C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C38                 assume cs:LOAD
LOAD:0000000000209C38                 ;org 209C38h
LOAD:0000000000209C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C48                 Elf64_Dyn <0Ch, 1CD0h>  ; DT_INIT
LOAD:0000000000209C58                 Elf64_Dyn <0Dh, 6190h>  ; DT_FINI
LOAD:0000000000209C68                 Elf64_Dyn <19h, 209850h> ; DT_INIT_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <1Ah, 209858h> ; DT_FINI_ARRAY
LOAD:0000000000209C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209CB8                 Elf64_Dyn <5, 9A8h>     ; DT_STRTAB
LOAD:0000000000209CC8                 Elf64_Dyn <6, 300h>     ; DT_SYMTAB
LOAD:0000000000209CD8                 Elf64_Dyn <0Ah, 34Bh>   ; DT_STRSZ
LOAD:0000000000209CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209D08                 Elf64_Dyn <3, 209E28h>  ; DT_PLTGOT
LOAD:0000000000209D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000209D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D38                 Elf64_Dyn <17h, 1850h>  ; DT_JMPREL
LOAD:0000000000209D48                 Elf64_Dyn <7, 0DE8h>    ; DT_RELA
LOAD:0000000000209D58                 Elf64_Dyn <8, 0A68h>    ; DT_RELASZ
LOAD:0000000000209D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFFEh, 0D88h> ; DT_VERNEED
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209DB8                 Elf64_Dyn <6FFFFFF0h, 0CF4h> ; DT_VERSYM
LOAD:0000000000209DC8                 Elf64_Dyn <6FFFFFF9h, 62h> ; DT_RELACOUNT
LOAD:0000000000209DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E08                 db    0
LOAD:0000000000209E09                 db    0
LOAD:0000000000209E0A                 db    0
LOAD:0000000000209E0B                 db    0
LOAD:0000000000209E0C                 db    0
LOAD:0000000000209E0D                 db    0
LOAD:0000000000209E0E                 db    0
LOAD:0000000000209E0F                 db    0
LOAD:0000000000209E10                 db    0
LOAD:0000000000209E11                 db    0
LOAD:0000000000209E12                 db    0
LOAD:0000000000209E13                 db    0
LOAD:0000000000209E14                 db    0
LOAD:0000000000209E15                 db    0
LOAD:0000000000209E16                 db    0
LOAD:0000000000209E17                 db    0
LOAD:0000000000209E18                 db    0
LOAD:0000000000209E19                 db    0
LOAD:0000000000209E1A                 db    0
LOAD:0000000000209E1B                 db    0
LOAD:0000000000209E1C                 db    0
LOAD:0000000000209E1D                 db    0
LOAD:0000000000209E1E                 db    0
LOAD:0000000000209E1F                 db    0
LOAD:0000000000209E20                 db    0
LOAD:0000000000209E21                 db    0
LOAD:0000000000209E22                 db    0
LOAD:0000000000209E23                 db    0
LOAD:0000000000209E24                 db    0
LOAD:0000000000209E25                 db    0
LOAD:0000000000209E26                 db    0
LOAD:0000000000209E27                 db    0
LOAD:0000000000209E27 LOAD            ends
LOAD:0000000000209E27
.got:0000000000209E28 ; ===========================================================================
.got:0000000000209E28
.got:0000000000209E28 ; Segment type: Pure data
.got:0000000000209E28 ; Segment permissions: Read/Write
.got:0000000000209E28 _got            segment qword public 'DATA' use64
.got:0000000000209E28                 assume cs:_got
.got:0000000000209E28                 ;org 209E28h
.got:0000000000209E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E30 qword_209E30    dq 0                    ; DATA XREF: sub_1CF0↑r
.got:0000000000209E38 qword_209E38    dq 0                    ; DATA XREF: sub_1CF0+6↑r
.got:0000000000209E40 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000209E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E50 __errno_location_ptr dq offset __errno_location
.got:0000000000209E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E70 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000209E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209EB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EC0 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000209EC8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209ED0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209ED8 fnmatch_ptr     dq offset fnmatch       ; DATA XREF: _fnmatch↑r
.got:0000000000209EE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EE8 freopen_ptr     dq offset freopen       ; DATA XREF: _freopen↑r
.got:0000000000209EF0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209EF8 strndup_ptr     dq offset strndup       ; DATA XREF: _strndup↑r
.got:0000000000209F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209F18 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000209F20 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F50 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000209F50                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000209F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000209F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FC0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:0000000000209FC0                                         ; main:loc_21A1↑r
.got:0000000000209FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FD0                                         ; DATA XREF: start+24↑r
.got:0000000000209FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FE0 malloc_ptr      dq offset __imp_malloc  ; DATA XREF: malloc↑r
.got:0000000000209FE0                                         ; main+188↑r
.got:0000000000209FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FF0 _got            ends
.got:0000000000209FF0
LOAD:0000000000209FF8 ; ===========================================================================
LOAD:0000000000209FF8
LOAD:0000000000209FF8 ; Segment type: Pure data
LOAD:0000000000209FF8 ; Segment permissions: Read/Write
LOAD:0000000000209FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FF8                 assume cs:LOAD
LOAD:0000000000209FF8                 ;org 209FF8h
LOAD:0000000000209FF8                 align 20h
LOAD:0000000000209FF8 LOAD            ends
LOAD:0000000000209FF8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+B2↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3232↑r
.data:000000000020A018                                         ; xalloc_die+17↑r ...
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_495D↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A080                 public obstack_alloc_failed_handler
.data:000000000020A080 obstack_alloc_failed_handler dq offset print_and_abort
.data:000000000020A080                                         ; DATA XREF: LOAD:0000000000000840↑o
.data:000000000020A080                                         ; _obstack_begin_worker:loc_5DBD↑r ...
.data:000000000020A080 _data           ends
.data:000000000020A080
LOAD:000000000020A088 ; ===========================================================================
LOAD:000000000020A088
LOAD:000000000020A088 ; Segment type: Pure data
LOAD:000000000020A088 ; Segment permissions: Read/Write
LOAD:000000000020A088 LOAD            segment byte public 'DATA' use64
LOAD:000000000020A088                 assume cs:LOAD
LOAD:000000000020A088                 ;org 20A088h
LOAD:000000000020A088                 public __bss_start
LOAD:000000000020A088 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:000000000020A088                                         ; deregister_tm_clones+8↑o ...
LOAD:000000000020A088                                         ; Alternative name is '_edata'
LOAD:000000000020A088                                         ; __TMC_END__
LOAD:000000000020A088                                         ; _edata
LOAD:000000000020A089                 db    ? ;
LOAD:000000000020A08A                 db    ? ;
LOAD:000000000020A08B                 db    ? ;
LOAD:000000000020A08C                 db    ? ;
LOAD:000000000020A08D                 db    ? ;
LOAD:000000000020A08E                 db    ? ;
LOAD:000000000020A08F                 db    ? ;
LOAD:000000000020A090                 db    ? ;
LOAD:000000000020A091                 db    ? ;
LOAD:000000000020A092                 db    ? ;
LOAD:000000000020A093                 db    ? ;
LOAD:000000000020A094                 db    ? ;
LOAD:000000000020A095                 db    ? ;
LOAD:000000000020A096                 db    ? ;
LOAD:000000000020A097                 db    ? ;
LOAD:000000000020A098                 db    ? ;
LOAD:000000000020A099                 db    ? ;
LOAD:000000000020A09A                 db    ? ;
LOAD:000000000020A09B                 db    ? ;
LOAD:000000000020A09C                 db    ? ;
LOAD:000000000020A09D                 db    ? ;
LOAD:000000000020A09E                 db    ? ;
LOAD:000000000020A09F                 db    ? ;
LOAD:000000000020A09F LOAD            ends
LOAD:000000000020A09F
.bss:000000000020A0A0 ; ===========================================================================
.bss:000000000020A0A0
.bss:000000000020A0A0 ; Segment type: Uninitialized
.bss:000000000020A0A0 ; Segment permissions: Read/Write
.bss:000000000020A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A0A0                 assume cs:_bss
.bss:000000000020A0A0                 ;org 20A0A0h
.bss:000000000020A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A0A0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0A0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0A0                                         ; DATA XREF: LOAD:00000000000008B8↑o
.bss:000000000020A0A0                                         ; LOAD:0000000000000948↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__progname'
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020A0A8 ; FILE *stdout
.bss:000000000020A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000870↑o
.bss:000000000020A0A8                                         ; main+AB↑r ...
.bss:000000000020A0A8                                         ; Alternative name is 'stdout'
.bss:000000000020A0A8                                         ; Copy of shared data
.bss:000000000020A0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020A0B0 ; FILE *stdin
.bss:000000000020A0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000008D0↑o
.bss:000000000020A0B0                                         ; main+1BD↑r ...
.bss:000000000020A0B0                                         ; Alternative name is 'stdin'
.bss:000000000020A0B0                                         ; Copy of shared data
.bss:000000000020A0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020A0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000978↑o
.bss:000000000020A0B8                                         ; main:loc_211B↑r
.bss:000000000020A0B8                                         ; Alternative name is 'optind'
.bss:000000000020A0B8                                         ; Copy of shared data
.bss:000000000020A0BC                 align 20h
.bss:000000000020A0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0C0                                         ; DATA XREF: LOAD:0000000000000900↑o
.bss:000000000020A0C0                                         ; LOAD:0000000000000930↑o ...
.bss:000000000020A0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8                 align 20h
.bss:000000000020A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0E0 ; FILE *stderr
.bss:000000000020A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000960↑o
.bss:000000000020A0E0                                         ; main+45B↑r ...
.bss:000000000020A0E0                                         ; Alternative name is 'stderr'
.bss:000000000020A0E0                                         ; Copy of shared data
.bss:000000000020A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0E9                 align 20h
.bss:000000000020A100 lsc_obstack     db    ? ;               ; DATA XREF: main+18F↑o
.bss:000000000020A100                                         ; append_quoted+14↑o ...
.bss:000000000020A101                 db    ? ;
.bss:000000000020A102                 db    ? ;
.bss:000000000020A103                 db    ? ;
.bss:000000000020A104                 db    ? ;
.bss:000000000020A105                 db    ? ;
.bss:000000000020A106                 db    ? ;
.bss:000000000020A107                 db    ? ;
.bss:000000000020A108 qword_20A108    dq ?                    ; DATA XREF: main+244↑r
.bss:000000000020A110 ; void *ptr
.bss:000000000020A110 ptr             dq ?                    ; DATA XREF: main+214↑r
.bss:000000000020A110                                         ; main+283↑w
.bss:000000000020A118 qword_20A118    dq ?                    ; DATA XREF: main+20D↑r
.bss:000000000020A118                                         ; main+24B↑w ...
.bss:000000000020A120 qword_20A120    dq ?                    ; DATA XREF: main+231↑r
.bss:000000000020A120                                         ; append_quoted+5A↑r ...
.bss:000000000020A128                 align 10h
.bss:000000000020A130 qword_20A130    dq ?                    ; DATA XREF: main:loc_224A↑r
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150 byte_20A150     db ?                    ; DATA XREF: main:loc_2395↑w
.bss:000000000020A151                 align 8
.bss:000000000020A158 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A158                                         ; close_stdout+1B↑r
.bss:000000000020A159                 align 20h
.bss:000000000020A160 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A160                                         ; close_stdout+56↑r
.bss:000000000020A168                 public program_name
.bss:000000000020A168 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A168                                         ; set_program_name:loc_357D↑w
.bss:000000000020A170                 align 20h
.bss:000000000020A180 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A180                                         ; quotearg_free+46↑o ...
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200                 db    ? ;
.bss:000000000020A201                 db    ? ;
.bss:000000000020A202                 db    ? ;
.bss:000000000020A203                 db    ? ;
.bss:000000000020A204                 db    ? ;
.bss:000000000020A205                 db    ? ;
.bss:000000000020A206                 db    ? ;
.bss:000000000020A207                 db    ? ;
.bss:000000000020A208                 db    ? ;
.bss:000000000020A209                 db    ? ;
.bss:000000000020A20A                 db    ? ;
.bss:000000000020A20B                 db    ? ;
.bss:000000000020A20C                 db    ? ;
.bss:000000000020A20D                 db    ? ;
.bss:000000000020A20E                 db    ? ;
.bss:000000000020A20F                 db    ? ;
.bss:000000000020A210                 db    ? ;
.bss:000000000020A211                 db    ? ;
.bss:000000000020A212                 db    ? ;
.bss:000000000020A213                 db    ? ;
.bss:000000000020A214                 db    ? ;
.bss:000000000020A215                 db    ? ;
.bss:000000000020A216                 db    ? ;
.bss:000000000020A217                 db    ? ;
.bss:000000000020A218                 db    ? ;
.bss:000000000020A219                 db    ? ;
.bss:000000000020A21A                 db    ? ;
.bss:000000000020A21B                 db    ? ;
.bss:000000000020A21C                 db    ? ;
.bss:000000000020A21D                 db    ? ;
.bss:000000000020A21E                 db    ? ;
.bss:000000000020A21F                 db    ? ;
.bss:000000000020A220                 db    ? ;
.bss:000000000020A221                 db    ? ;
.bss:000000000020A222                 db    ? ;
.bss:000000000020A223                 db    ? ;
.bss:000000000020A224                 db    ? ;
.bss:000000000020A225                 db    ? ;
.bss:000000000020A226                 db    ? ;
.bss:000000000020A227                 db    ? ;
.bss:000000000020A228                 db    ? ;
.bss:000000000020A229                 db    ? ;
.bss:000000000020A22A                 db    ? ;
.bss:000000000020A22B                 db    ? ;
.bss:000000000020A22C                 db    ? ;
.bss:000000000020A22D                 db    ? ;
.bss:000000000020A22E                 db    ? ;
.bss:000000000020A22F                 db    ? ;
.bss:000000000020A230                 db    ? ;
.bss:000000000020A231                 db    ? ;
.bss:000000000020A232                 db    ? ;
.bss:000000000020A233                 db    ? ;
.bss:000000000020A234                 db    ? ;
.bss:000000000020A235                 db    ? ;
.bss:000000000020A236                 db    ? ;
.bss:000000000020A237                 db    ? ;
.bss:000000000020A238                 db    ? ;
.bss:000000000020A239                 db    ? ;
.bss:000000000020A23A                 db    ? ;
.bss:000000000020A23B                 db    ? ;
.bss:000000000020A23C                 db    ? ;
.bss:000000000020A23D                 db    ? ;
.bss:000000000020A23E                 db    ? ;
.bss:000000000020A23F                 db    ? ;
.bss:000000000020A240                 db    ? ;
.bss:000000000020A241                 db    ? ;
.bss:000000000020A242                 db    ? ;
.bss:000000000020A243                 db    ? ;
.bss:000000000020A244                 db    ? ;
.bss:000000000020A245                 db    ? ;
.bss:000000000020A246                 db    ? ;
.bss:000000000020A247                 db    ? ;
.bss:000000000020A248                 db    ? ;
.bss:000000000020A249                 db    ? ;
.bss:000000000020A24A                 db    ? ;
.bss:000000000020A24B                 db    ? ;
.bss:000000000020A24C                 db    ? ;
.bss:000000000020A24D                 db    ? ;
.bss:000000000020A24E                 db    ? ;
.bss:000000000020A24F                 db    ? ;
.bss:000000000020A250                 db    ? ;
.bss:000000000020A251                 db    ? ;
.bss:000000000020A252                 db    ? ;
.bss:000000000020A253                 db    ? ;
.bss:000000000020A254                 db    ? ;
.bss:000000000020A255                 db    ? ;
.bss:000000000020A256                 db    ? ;
.bss:000000000020A257                 db    ? ;
.bss:000000000020A258                 db    ? ;
.bss:000000000020A259                 db    ? ;
.bss:000000000020A25A                 db    ? ;
.bss:000000000020A25B                 db    ? ;
.bss:000000000020A25C                 db    ? ;
.bss:000000000020A25D                 db    ? ;
.bss:000000000020A25E                 db    ? ;
.bss:000000000020A25F                 db    ? ;
.bss:000000000020A260                 db    ? ;
.bss:000000000020A261                 db    ? ;
.bss:000000000020A262                 db    ? ;
.bss:000000000020A263                 db    ? ;
.bss:000000000020A264                 db    ? ;
.bss:000000000020A265                 db    ? ;
.bss:000000000020A266                 db    ? ;
.bss:000000000020A267                 db    ? ;
.bss:000000000020A268                 db    ? ;
.bss:000000000020A269                 db    ? ;
.bss:000000000020A26A                 db    ? ;
.bss:000000000020A26B                 db    ? ;
.bss:000000000020A26C                 db    ? ;
.bss:000000000020A26D                 db    ? ;
.bss:000000000020A26E                 db    ? ;
.bss:000000000020A26F                 db    ? ;
.bss:000000000020A270                 db    ? ;
.bss:000000000020A271                 db    ? ;
.bss:000000000020A272                 db    ? ;
.bss:000000000020A273                 db    ? ;
.bss:000000000020A274                 db    ? ;
.bss:000000000020A275                 db    ? ;
.bss:000000000020A276                 db    ? ;
.bss:000000000020A277                 db    ? ;
.bss:000000000020A278                 db    ? ;
.bss:000000000020A279                 db    ? ;
.bss:000000000020A27A                 db    ? ;
.bss:000000000020A27B                 db    ? ;
.bss:000000000020A27C                 db    ? ;
.bss:000000000020A27D                 db    ? ;
.bss:000000000020A27E                 db    ? ;
.bss:000000000020A27F                 db    ? ;
.bss:000000000020A280 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A280                                         ; get_quoting_style↑o ...
.bss:000000000020A290 xmmword_20A290  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A290                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A2A0 xmmword_20A2A0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A2A0                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A2B0 qword_20A2B0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A2B0                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A2B0 _bss            ends
.bss:000000000020A2B0
.prgend:000000000020A2B8 ; ===========================================================================
.prgend:000000000020A2B8
.prgend:000000000020A2B8 ; Segment type: Zero-length
.prgend:000000000020A2B8 _prgend         segment byte public '' use64
.prgend:000000000020A2B8 _end            label byte
.prgend:000000000020A2B8 _prgend         ends
.prgend:000000000020A2B8
extern:000000000020A2C0 ; ===========================================================================
extern:000000000020A2C0
extern:000000000020A2C0 ; Segment type: Externs
extern:000000000020A2C0 ; extern
extern:000000000020A2C0 ; char *getenv(const char *name)
extern:000000000020A2C0                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020A2C8 ; void free(void *ptr)
extern:000000000020A2C8                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A2D0 ; void __noreturn abort(void)
extern:000000000020A2D0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A2D8 ; int *_errno_location(void)
extern:000000000020A2D8                 extrn __errno_location:near
extern:000000000020A2D8                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A2E0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A2E0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A2E8 ; void __noreturn exit(int status)
extern:000000000020A2E8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A2F0 ; size_t _fpending(FILE *fp)
extern:000000000020A2F0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A2F8 ; int puts(const char *s)
extern:000000000020A2F8                 extrn puts:near         ; CODE XREF: _puts↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:puts_ptr↑o
extern:000000000020A300 ; char *textdomain(const char *domainname)
extern:000000000020A300                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A300                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A308 ; int fclose(FILE *stream)
extern:000000000020A308                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A308                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A310 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A310                 extrn bindtextdomain:near
extern:000000000020A310                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A310                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A318 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A318                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A318                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A320 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A320                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A320                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A320                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A328 ; size_t strlen(const char *s)
extern:000000000020A328                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A328                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A330                 extrn __stack_chk_fail:near
extern:000000000020A330                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A330                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A338 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A338                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A338                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A340 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A340                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A340                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A348 ; int dup2(int fd, int fd2)
extern:000000000020A348                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:000000000020A348                                         ; DATA XREF: .got:dup2_ptr↑o
extern:000000000020A350 ; char *strrchr(const char *s, int c)
extern:000000000020A350                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A350                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A358 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A358                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A358                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A360 ; int fnmatch(const char *pattern, const char *name, int flags)
extern:000000000020A360                 extrn fnmatch:near      ; CODE XREF: _fnmatch↑j
extern:000000000020A360                                         ; DATA XREF: .got:fnmatch_ptr↑o
extern:000000000020A368 ; void *memset(void *s, int c, size_t n)
extern:000000000020A368                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A368                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A370 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
extern:000000000020A370                 extrn freopen:near      ; CODE XREF: _freopen↑j
extern:000000000020A370                                         ; DATA XREF: .got:freopen_ptr↑o
extern:000000000020A378 ; int close(int fd)
extern:000000000020A378                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A378                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A380 ; char *strndup(const char *string, size_t n)
extern:000000000020A380                 extrn strndup:near      ; CODE XREF: _strndup↑j
extern:000000000020A380                                         ; DATA XREF: .got:strndup_ptr↑o
extern:000000000020A388 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A388                 extrn __libc_start_main:near
extern:000000000020A388                                         ; CODE XREF: start+24↑p
extern:000000000020A388                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A390 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A390                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A390                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A398 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A398                 extrn fputs_unlocked:near
extern:000000000020A398                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A398                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A3A0 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A3A0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A3A8 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000020A3A8                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000020A3B0 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A3B0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A3B8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A3B8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A3C0 ; int fileno(FILE *stream)
extern:000000000020A3C0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A3C8 ; void *malloc(size_t size)
extern:000000000020A3C8                 extrn __imp_malloc:near ; CODE XREF: malloc↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A3D0 ; int fflush(FILE *stream)
extern:000000000020A3D0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A3D8 ; char *nl_langinfo(nl_item item)
extern:000000000020A3D8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A3E0 ; int _freading(FILE *fp)
extern:000000000020A3E0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A3E8 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020A3E8                 extrn fwrite_unlocked:near
extern:000000000020A3E8                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020A3F0 ; void *realloc(void *ptr, size_t size)
extern:000000000020A3F0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A3F8 ; char *setlocale(int category, const char *locale)
extern:000000000020A3F8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A400                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A400                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A408 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A408                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A408                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A410 ; int open(const char *file, int oflag, ...)
extern:000000000020A410                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020A410                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020A418 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A418                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A418                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A420 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A420                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A420                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A428 ; void __noreturn exit(int status)
extern:000000000020A428                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A428                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A430 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A430                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A430                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A438                 extrn __fprintf_chk:near
extern:000000000020A438                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A438                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A440 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A440                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A440                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A448 ; int iswprint(wint_t wc)
extern:000000000020A448                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A448                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A450 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A450                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A450                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A450                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A458 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A458                 extrn __ctype_b_loc:near
extern:000000000020A458                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A458                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A460                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A460                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A468                 extrn __gmon_start__:near ; weak
extern:000000000020A468                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A468                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A470                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A470                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A470
extern:000000000020A470
extern:000000000020A470                 end start
