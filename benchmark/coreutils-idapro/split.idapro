LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 32EEAFC7776A40FE86AE169D78DDC9A08D630AA0E0B71DD7050C873F5507E3CD
LOAD:0000000000000000 ; Input MD5    : 780CE5041E036B71607C74658E263F81
LOAD:0000000000000000 ; Input CRC32  : 2793300A
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/split
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'split.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'fd-reopen.c'
LOAD:0000000000000000 ; Source File : 'full-write.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'safe-write.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'sig2str.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 3C2B0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0B800h               ; Size in file image
LOAD:00000000000000D8                 dq 0B800h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0B8F0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20B8F0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 954h                 ; Size in file image
LOAD:0000000000000110                 dq 0D70h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0BB78h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20BB78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0A5ACh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0A5ACh               ; Physical address
LOAD:00000000000001B0                 dq 2ECh                 ; Size in file image
LOAD:00000000000001B8                 dq 2ECh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0B8F0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20B8F0h              ; Physical address
LOAD:0000000000000220                 dq 710h                 ; Size in file image
LOAD:0000000000000228                 dq 710h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0AFh, 1, 2Ch, 87h, 9Eh, 0B2h, 32h, 4Ah, 9Bh, 0Ch, 8Bh ; Desc
LOAD:0000000000000284                 db 22h, 33h, 95h, 25h, 27h, 76h, 0Ah, 1Fh, 0BCh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 50h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 50h, 51h, 56h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_B20, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aSigprocmask - offset byte_B20, 12h, 0, 0, \ ; "sigprocmask"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_B20, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_B20, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_B20, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_B20, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_B20, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_B20, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aStrcpy - offset byte_B20, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_B20, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aSigaction - offset byte_B20, 12h, 0, 0, \ ; "sigaction"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFcntl - offset byte_B20, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aSetenv - offset byte_B20, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aClearerrUnlock - offset byte_B20, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aFwrite+1 - offset byte_B20, 12h, 0, 0, \ ; "write"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B20, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFclose - offset byte_B20, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aBindtextdomain - offset byte_B20, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aDcgettext - offset byte_B20, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B20, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrlen - offset byte_B20, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStackChkFail - offset byte_B20, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetoptLong - offset byte_B20, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMbrtowc - offset byte_B20, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aDup2 - offset byte_B20, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:0000000000000538                            0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrchr - offset byte_B20, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aStrrchr - offset byte_B20, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFtruncate - offset byte_B20, 12h, 0, 0, \ ; "ftruncate"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLseek - offset byte_B20, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aAssertFail - offset byte_B20, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrtoulInterna - offset byte_B20, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemset - offset byte_B20, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFclose+1 - offset byte_B20, 12h, 0, 0, \ ; "close"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aPipe - offset byte_B20, 12h, 0, 0, offset dword_0, \ ; "pipe"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aStrspn - offset byte_B20, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemchr - offset byte_B20, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aRead - offset byte_B20, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aLibcStartMain - offset byte_B20, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcmp - offset byte_B20, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFputsUnlocked - offset byte_B20, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aCalloc - offset byte_B20, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrcmp - offset byte_B20, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aSigemptyset - offset byte_B20, 12h, 0, 0, \ ; "sigemptyset"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aGmonStart - offset byte_B20, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aStrtol - offset byte_B20, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMemcpy - offset byte_B20, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFileno - offset byte_B20, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aMalloc - offset byte_B20, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFflush - offset byte_B20, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aNlLanginfo - offset byte_B20, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFxstat - offset byte_B20, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFreading - offset byte_B20, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFwriteUnlocked - offset byte_B20, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aRealloc - offset byte_B20, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFdopen - offset byte_B20, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aSetlocale - offset byte_B20, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aPrintfChk - offset byte_B20, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aMemmove - offset byte_B20, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aError - offset byte_B20, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000868                            0>
LOAD:0000000000000880                 Elf64_Sym <offset aMemrchr - offset byte_B20, 12h, 0, 0, \ ; "memrchr"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aWaitpid - offset byte_B20, 12h, 0, 0, \ ; "waitpid"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFdopen+2 - offset byte_B20, 12h, 0, 0, \ ; "open"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFseeko - offset byte_B20, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCxaAtexit - offset byte_B20, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aGetpagesize - offset byte_B20, 12h, 0, 0, \ ; "getpagesize"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aLibcCurrentSig_0 - offset byte_B20, 12h, 0, 0, \ ; "__libc_current_sigrtmin"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aExit+1 - offset byte_B20, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aFwrite - offset byte_B20, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFprintfChk - offset byte_B20, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aLibcCurrentSig - offset byte_B20, 12h, 0, 0, \ ; "__libc_current_sigrtmax"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aItmRegistertmc - offset byte_B20, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aMbsinit - offset byte_B20, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aExecl - offset byte_B20, 12h, 0, 0, offset dword_0,\ ; "execl"
LOAD:00000000000009B8                            0>
LOAD:00000000000009D0                 Elf64_Sym <offset aIswprint - offset byte_B20, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aCxaFinalize - offset byte_B20, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aSigaddset - offset byte_B20, 12h, 0, 0, \ ; "sigaddset"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aFork - offset byte_B20, 12h, 0, 0, offset dword_0, \ ; "fork"
LOAD:0000000000000A18                            0>
LOAD:0000000000000A30                 Elf64_Sym <offset aCtypeBLoc - offset byte_B20, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aSprintfChk - offset byte_B20, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aStdout - offset byte_B20, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A60                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aProgname - offset byte_B20, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A78                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aProgramInvocat - offset byte_B20, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A90                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8                 Elf64_Sym <offset aPrognameFull - offset byte_B20, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000AA8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AC0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B20, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000AC0                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AD8                 Elf64_Sym <offset aStderr - offset byte_B20, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000AD8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000AF0                 Elf64_Sym <offset aOptind - offset byte_B20, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000AF0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B08                 Elf64_Sym <offset aOptarg - offset byte_B20, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000B08                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000B20 ; ELF String Table
LOAD:0000000000000B20 byte_B20        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B20                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000B21 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000F98↓o
LOAD:0000000000000B2B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B32 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B39 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B46 aExecl          db 'execl',0            ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000B4C aClearerrUnlock db 'clearerr_unlocked',0
LOAD:0000000000000B4C                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B5E aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B68 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000B70 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B78 aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B82 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000B89 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B91 aPipe           db 'pipe',0             ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000B96 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000BA0 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000BA6 aFork           db 'fork',0             ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000BAB aSigprocmask    db 'sigprocmask',0      ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000BB7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BC8 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000BD1 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000BD9 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000BDF aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BDF                                         ; LOAD:0000000000000928↑o
LOAD:0000000000000BE5 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000BEC aMemrchr        db 'memrchr',0          ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000BF4 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000BFB aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000BFB                                         ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000C13 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C21 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000C21                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000C38 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C3F aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000C46 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000C4D aSigemptyset    db 'sigemptyset',0      ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000C59 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C60 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000C71 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C76 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000C7D aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C89 aDup2           db 'dup2',0             ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C8E aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C9C aSigaddset      db 'sigaddset',0        ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000CA6 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000CAD aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000CB3 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000CBA aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000CBA                                         ; LOAD:00000000000005F8↑o
LOAD:0000000000000CC1 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000CC8 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000CD0 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000CDC aLibcCurrentSig db '__libc_current_sigrtmax',0
LOAD:0000000000000CDC                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000CF4 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000D02 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D09 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000D10 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000D1B aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000D22 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000D2E aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000D37 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000D3E aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000D3E                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000D45 aSigaction      db 'sigaction',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000D4F aWaitpid        db 'waitpid',0          ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D57 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000D62 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000D69 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D69                                         ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000D87 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000D87                                         ; LOAD:00000000000008B0↑o
LOAD:0000000000000D8E aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000D9D aLibcCurrentSig_0 db '__libc_current_sigrtmin',0
LOAD:0000000000000D9D                                         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000DB5 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000DBB aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000DC9 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000DD1 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000DD1                                         ; LOAD:0000000000000460↑o
LOAD:0000000000000DE0 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000DF0 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000DF7 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000DF7                                         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000E09 aSetenv         db 'setenv',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000E10 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000E17 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000E17                                         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000E2A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000E39 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000E3E aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000E49 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000E59 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000E66 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000FA8↓o
LOAD:0000000000000E70 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000FB8↓o
LOAD:0000000000000E7C aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000FC8↓o
LOAD:0000000000000E87 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000FD8↓o
LOAD:0000000000000E91 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000FE8↓o
LOAD:0000000000000E9D aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000E9D                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000EB9 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000EC8 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000EC8                                         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000EE2 ; ELF GNU Symbol Version Table
LOAD:0000000000000EE2                 dw 0
LOAD:0000000000000EE4                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000EE6                 dw 2                    ; sigprocmask@@GLIBC_2.2.5
LOAD:0000000000000EE8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000EEA                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000EEC                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000EEE                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000EF0                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000EF2                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000EF6                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000EF8                 dw 2                    ; sigaction@@GLIBC_2.2.5
LOAD:0000000000000EFA                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000EFC                 dw 2                    ; setenv@@GLIBC_2.2.5
LOAD:0000000000000EFE                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F00                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:0000000000000F02                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000F04                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000F06                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000F08                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000F0A                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000F0C                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000F0E                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000F10                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000F14                 dw 2                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000F16                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000F18                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000F1A                 dw 2                    ; ftruncate@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000F1E                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000F20                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000F22                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000F24                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000F26                 dw 2                    ; pipe@@GLIBC_2.2.5
LOAD:0000000000000F28                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000F2A                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000F2C                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000F2E                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000F30                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000F36                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000F38                 dw 2                    ; sigemptyset@@GLIBC_2.2.5
LOAD:0000000000000F3A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000F3C                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000F3E                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000F40                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000F42                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000F44                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000F46                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000F48                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000F4A                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000F4C                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F4E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000F50                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000F52                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000F54                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000F56                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000F58                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000F5A                 dw 2                    ; memrchr@@GLIBC_2.2.5
LOAD:0000000000000F5C                 dw 2                    ; waitpid@@GLIBC_2.2.5
LOAD:0000000000000F5E                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000F60                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000F62                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000F64                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:0000000000000F66                 dw 2                    ; __libc_current_sigrtmin@@GLIBC_2.2.5
LOAD:0000000000000F68                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000F6A                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000F6C                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F6E                 dw 2                    ; __libc_current_sigrtmax@@GLIBC_2.2.5
LOAD:0000000000000F70                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000F72                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F74                 dw 2                    ; execl@@GLIBC_2.2.5
LOAD:0000000000000F76                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F78                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F7A                 dw 2                    ; sigaddset@@GLIBC_2.2.5
LOAD:0000000000000F7C                 dw 2                    ; fork@@GLIBC_2.2.5
LOAD:0000000000000F7E                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000F80                 dw 5                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F82                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000F84                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000F86                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000F88                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000F8A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000F8C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000F8E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000F90                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 0
LOAD:0000000000000F94                 dw 0
LOAD:0000000000000F96                 dw 0
LOAD:0000000000000F98 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000F98                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_B20, 10h, 0> ; "libc.so.6"
LOAD:0000000000000FA8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_B20, \ ; "GLIBC_2.3"
LOAD:0000000000000FA8                                10h>
LOAD:0000000000000FB8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_B20, \ ; "GLIBC_2.3.4"
LOAD:0000000000000FB8                                10h>
LOAD:0000000000000FC8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_B20, \ ; "GLIBC_2.14"
LOAD:0000000000000FC8                                10h>
LOAD:0000000000000FD8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_B20, \ ; "GLIBC_2.4"
LOAD:0000000000000FD8                                10h>
LOAD:0000000000000FE8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_B20, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000FF8 ; ELF RELA Relocation Table
LOAD:0000000000000FF8                 Elf64_Rela <20B8F0h, 8, 3E10h> ; R_X86_64_RELATIVE +3E10h
LOAD:0000000000001010                 Elf64_Rela <20B8F8h, 8, 3DD0h> ; R_X86_64_RELATIVE +3DD0h
LOAD:0000000000001028                 Elf64_Rela <20B900h, 8, 8D09h> ; R_X86_64_RELATIVE +8D09h
LOAD:0000000000001040                 Elf64_Rela <20B920h, 8, 8D21h> ; R_X86_64_RELATIVE +8D21h
LOAD:0000000000001058                 Elf64_Rela <20B940h, 8, 8E47h> ; R_X86_64_RELATIVE +8E47h
LOAD:0000000000001070                 Elf64_Rela <20B960h, 8, 8D54h> ; R_X86_64_RELATIVE +8D54h
LOAD:0000000000001088                 Elf64_Rela <20B980h, 8, 8E52h> ; R_X86_64_RELATIVE +8E52h
LOAD:00000000000010A0                 Elf64_Rela <20B9A0h, 8, 8E64h> ; R_X86_64_RELATIVE +8E64h
LOAD:00000000000010B8                 Elf64_Rela <20B9C0h, 8, 8E6Fh> ; R_X86_64_RELATIVE +8E6Fh
LOAD:00000000000010D0                 Elf64_Rela <20B9E0h, 8, 8E7Dh> ; R_X86_64_RELATIVE +8E7Dh
LOAD:00000000000010E8                 Elf64_Rela <20BA00h, 8, 8E8Fh> ; R_X86_64_RELATIVE +8E8Fh
LOAD:0000000000001100                 Elf64_Rela <20BA20h, 8, 8EA0h> ; R_X86_64_RELATIVE +8EA0h
LOAD:0000000000001118                 Elf64_Rela <20BA40h, 8, 8EADh> ; R_X86_64_RELATIVE +8EADh
LOAD:0000000000001130                 Elf64_Rela <20BA60h, 8, 8EB4h> ; R_X86_64_RELATIVE +8EB4h
LOAD:0000000000001148                 Elf64_Rela <20BA80h, 8, 8D68h> ; R_X86_64_RELATIVE +8D68h
LOAD:0000000000001160                 Elf64_Rela <20BAA0h, 8, 8EBCh> ; R_X86_64_RELATIVE +8EBCh
LOAD:0000000000001178                 Elf64_Rela <20BAC0h, 8, 8EC8h> ; R_X86_64_RELATIVE +8EC8h
LOAD:0000000000001190                 Elf64_Rela <20BAE0h, 8, 8ECDh> ; R_X86_64_RELATIVE +8ECDh
LOAD:00000000000011A8                 Elf64_Rela <20BB20h, 8, 9C29h> ; R_X86_64_RELATIVE +9C29h
LOAD:00000000000011C0                 Elf64_Rela <20BB28h, 8, 9C31h> ; R_X86_64_RELATIVE +9C31h
LOAD:00000000000011D8                 Elf64_Rela <20BB30h, 8, 9C37h> ; R_X86_64_RELATIVE +9C37h
LOAD:00000000000011F0                 Elf64_Rela <20BB38h, 8, 9C44h> ; R_X86_64_RELATIVE +9C44h
LOAD:0000000000001208                 Elf64_Rela <20BB40h, 8, 9C51h> ; R_X86_64_RELATIVE +9C51h
LOAD:0000000000001220                 Elf64_Rela <20BB48h, 8, 8BB1h> ; R_X86_64_RELATIVE +8BB1h
LOAD:0000000000001238                 Elf64_Rela <20BB50h, 8, 9C65h> ; R_X86_64_RELATIVE +9C65h
LOAD:0000000000001250                 Elf64_Rela <20BB58h, 8, 9C4Ah> ; R_X86_64_RELATIVE +9C4Ah
LOAD:0000000000001268                 Elf64_Rela <20BB60h, 8, 8CBFh> ; R_X86_64_RELATIVE +8CBFh
LOAD:0000000000001280                 Elf64_Rela <20BB68h, 8, 9C6Dh> ; R_X86_64_RELATIVE +9C6Dh
LOAD:0000000000001298                 Elf64_Rela <20C008h, 8, 20C008h> ; R_X86_64_RELATIVE +20C008h
LOAD:00000000000012B0                 Elf64_Rela <20C020h, 8, 8ED5h> ; R_X86_64_RELATIVE +8ED5h
LOAD:00000000000012C8                 Elf64_Rela <20C028h, 8, 9BC5h> ; R_X86_64_RELATIVE +9BC5h
LOAD:00000000000012E0                 Elf64_Rela <20C080h, 8, 20C090h> ; R_X86_64_RELATIVE +20C090h
LOAD:00000000000012F8                 Elf64_Rela <20C098h, 8, 20C520h> ; R_X86_64_RELATIVE +20C520h
LOAD:0000000000001310                 Elf64_Rela <20BFD0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001328                 Elf64_Rela <20BFD8h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001340                 Elf64_Rela <20BFE0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001358                 Elf64_Rela <20BFE8h, 4700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001370                 Elf64_Rela <20BFF0h, 4B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001388                 Elf64_Rela <20C260h, 5100000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000013A0                 Elf64_Rela <20C268h, 5000000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000013B8                 Elf64_Rela <20C270h, 5600000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000013D0                 Elf64_Rela <20C278h, 5700000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000013E8                 Elf64_Rela <20C280h, 5300000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001400                 Elf64_Rela <20C2A0h, 5500000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001418 ; ELF JMPREL Relocation Table
LOAD:0000000000001418                 Elf64_Rela <20BD80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001430                 Elf64_Rela <20BD88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT sigprocmask
LOAD:0000000000001448                 Elf64_Rela <20BD90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001460                 Elf64_Rela <20BD98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001478                 Elf64_Rela <20BDA0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001490                 Elf64_Rela <20BDA8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000014A8                 Elf64_Rela <20BDB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000014C0                 Elf64_Rela <20BDB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000014D8                 Elf64_Rela <20BDC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000014F0                 Elf64_Rela <20BDC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT sigaction
LOAD:0000000000001508                 Elf64_Rela <20BDD0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001520                 Elf64_Rela <20BDD8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:0000000000001538                 Elf64_Rela <20BDE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001550                 Elf64_Rela <20BDE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000001568                 Elf64_Rela <20BDF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001580                 Elf64_Rela <20BDF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001598                 Elf64_Rela <20BE00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000015B0                 Elf64_Rela <20BE08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000015C8                 Elf64_Rela <20BE10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000015E0                 Elf64_Rela <20BE18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000015F8                 Elf64_Rela <20BE20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001610                 Elf64_Rela <20BE28h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001628                 Elf64_Rela <20BE30h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001640                 Elf64_Rela <20BE38h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000001658                 Elf64_Rela <20BE40h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001670                 Elf64_Rela <20BE48h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001688                 Elf64_Rela <20BE50h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:00000000000016A0                 Elf64_Rela <20BE58h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000016B8                 Elf64_Rela <20BE60h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000016D0                 Elf64_Rela <20BE68h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000016E8                 Elf64_Rela <20BE70h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001700                 Elf64_Rela <20BE78h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001718                 Elf64_Rela <20BE80h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT pipe
LOAD:0000000000001730                 Elf64_Rela <20BE88h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001748                 Elf64_Rela <20BE90h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001760                 Elf64_Rela <20BE98h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001778                 Elf64_Rela <20BEA0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001790                 Elf64_Rela <20BEA8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000017A8                 Elf64_Rela <20BEB0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000017C0                 Elf64_Rela <20BEB8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000017D8                 Elf64_Rela <20BEC0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT sigemptyset
LOAD:00000000000017F0                 Elf64_Rela <20BEC8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001808                 Elf64_Rela <20BED0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001820                 Elf64_Rela <20BED8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001838                 Elf64_Rela <20BEE0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001850                 Elf64_Rela <20BEE8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001868                 Elf64_Rela <20BEF0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001880                 Elf64_Rela <20BEF8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001898                 Elf64_Rela <20BF00h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000018B0                 Elf64_Rela <20BF08h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000018C8                 Elf64_Rela <20BF10h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000018E0                 Elf64_Rela <20BF18h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000018F8                 Elf64_Rela <20BF20h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001910                 Elf64_Rela <20BF28h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001928                 Elf64_Rela <20BF30h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001940                 Elf64_Rela <20BF38h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001958                 Elf64_Rela <20BF40h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT memrchr
LOAD:0000000000001970                 Elf64_Rela <20BF48h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT waitpid
LOAD:0000000000001988                 Elf64_Rela <20BF50h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000019A0                 Elf64_Rela <20BF58h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000019B8                 Elf64_Rela <20BF60h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000019D0                 Elf64_Rela <20BF68h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:00000000000019E8                 Elf64_Rela <20BF70h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmin
LOAD:0000000000001A00                 Elf64_Rela <20BF78h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001A18                 Elf64_Rela <20BF80h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001A30                 Elf64_Rela <20BF88h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001A48                 Elf64_Rela <20BF90h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmax
LOAD:0000000000001A60                 Elf64_Rela <20BF98h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001A78                 Elf64_Rela <20BFA0h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT execl
LOAD:0000000000001A90                 Elf64_Rela <20BFA8h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001AA8                 Elf64_Rela <20BFB0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT sigaddset
LOAD:0000000000001AC0                 Elf64_Rela <20BFB8h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT fork
LOAD:0000000000001AD8                 Elf64_Rela <20BFC0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001AF0                 Elf64_Rela <20BFC8h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001AF0 LOAD            ends
LOAD:0000000000001AF0
.init:0000000000001B08 ; ===========================================================================
.init:0000000000001B08
.init:0000000000001B08 ; Segment type: Pure code
.init:0000000000001B08 ; Segment permissions: Read/Execute
.init:0000000000001B08 _init           segment dword public 'CODE' use64
.init:0000000000001B08                 assume cs:_init
.init:0000000000001B08                 ;org 1B08h
.init:0000000000001B08                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001B08
.init:0000000000001B08 ; =============== S U B R O U T I N E =======================================
.init:0000000000001B08
.init:0000000000001B08
.init:0000000000001B08                 public _init_proc
.init:0000000000001B08 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001B08                 sub     rsp, 8          ; _init
.init:0000000000001B0C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001B13                 test    rax, rax
.init:0000000000001B16                 jz      short loc_1B1A
.init:0000000000001B18                 call    rax ; __gmon_start__
.init:0000000000001B1A
.init:0000000000001B1A loc_1B1A:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001B1A                 add     rsp, 8
.init:0000000000001B1E                 retn
.init:0000000000001B1E _init_proc      endp
.init:0000000000001B1E
.init:0000000000001B1E _init           ends
.init:0000000000001B1E
LOAD:0000000000001B1F ; ===========================================================================
LOAD:0000000000001B1F
LOAD:0000000000001B1F ; Segment type: Pure code
LOAD:0000000000001B1F ; Segment permissions: Read/Execute
LOAD:0000000000001B1F LOAD            segment byte public 'CODE' use64
LOAD:0000000000001B1F                 assume cs:LOAD
LOAD:0000000000001B1F                 ;org 1B1Fh
LOAD:0000000000001B1F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001B1F                 align 20h
LOAD:0000000000001B1F LOAD            ends
LOAD:0000000000001B1F
.plt:0000000000001B20 ; ===========================================================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Segment type: Pure code
.plt:0000000000001B20 ; Segment permissions: Read/Execute
.plt:0000000000001B20 _plt            segment para public 'CODE' use64
.plt:0000000000001B20                 assume cs:_plt
.plt:0000000000001B20                 ;org 1B20h
.plt:0000000000001B20                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20
.plt:0000000000001B20 sub_1B20        proc near               ; CODE XREF: .plt:0000000000001B3B↓j
.plt:0000000000001B20                                         ; .plt:0000000000001B4B↓j ...
.plt:0000000000001B20 ; __unwind {
.plt:0000000000001B20                 push    cs:qword_20BD70
.plt:0000000000001B26                 jmp     cs:qword_20BD78
.plt:0000000000001B26 sub_1B20        endp
.plt:0000000000001B26
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B2C                 align 10h
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; char *getenv(const char *name)
.plt:0000000000001B30 _getenv         proc near               ; CODE XREF: create+36↓p
.plt:0000000000001B30                 jmp     cs:getenv_ptr
.plt:0000000000001B30 _getenv         endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    0
.plt:0000000000001B3B                 jmp     sub_1B20
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
.plt:0000000000001B40 _sigprocmask    proc near               ; CODE XREF: main+8A7↓p
.plt:0000000000001B40                                         ; create+18D↓p
.plt:0000000000001B40                 jmp     cs:sigprocmask_ptr
.plt:0000000000001B40 _sigprocmask    endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    1
.plt:0000000000001B4B                 jmp     sub_1B20
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; void free(void *ptr)
.plt:0000000000001B50 _free           proc near               ; CODE XREF: main+10E0↓p
.plt:0000000000001B50                                         ; next_file_name+17C↓p ...
.plt:0000000000001B50                 jmp     cs:free_ptr
.plt:0000000000001B50 _free           endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    2
.plt:0000000000001B5B                 jmp     sub_1B20
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: noreturn thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; void __noreturn abort(void)
.plt:0000000000001B60 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001B60                                         ; quotearg_buffer_restyled:def_5831↓p ...
.plt:0000000000001B60                 jmp     cs:abort_ptr
.plt:0000000000001B60 _abort          endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    3
.plt:0000000000001B6B                 jmp     sub_1B20
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int *__errno_location(void)
.plt:0000000000001B70 ___errno_location proc near             ; CODE XREF: main:loc_2F6A↓p
.plt:0000000000001B70                                         ; main+FC6↓p ...
.plt:0000000000001B70                 jmp     cs:__errno_location_ptr
.plt:0000000000001B70 ___errno_location endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    4
.plt:0000000000001B7B                 jmp     sub_1B20
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001B80 _strncmp        proc near               ; CODE XREF: main+5B8↓p
.plt:0000000000001B80                                         ; usage+2EC↓p ...
.plt:0000000000001B80                 jmp     cs:strncmp_ptr
.plt:0000000000001B80 _strncmp        endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    5
.plt:0000000000001B8B                 jmp     sub_1B20
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: noreturn thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void __noreturn _exit(int status)
.plt:0000000000001B90 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001B90                 jmp     cs:_exit_ptr
.plt:0000000000001B90 __exit          endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    6
.plt:0000000000001B9B                 jmp     sub_1B20
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001BA0 _strcpy         proc near               ; CODE XREF: sig2str+39↓p
.plt:0000000000001BA0                 jmp     cs:strcpy_ptr
.plt:0000000000001BA0 _strcpy         endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    7
.plt:0000000000001BAB                 jmp     sub_1B20
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; size_t __fpending(FILE *fp)
.plt:0000000000001BB0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001BB0                 jmp     cs:__fpending_ptr
.plt:0000000000001BB0 ___fpending     endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    8
.plt:0000000000001BBB                 jmp     sub_1B20
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
.plt:0000000000001BC0 _sigaction      proc near               ; CODE XREF: main+876↓p
.plt:0000000000001BC0                 jmp     cs:sigaction_ptr
.plt:0000000000001BC0 _sigaction      endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    9
.plt:0000000000001BCB                 jmp     sub_1B20
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001BD0 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001BD0                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001BD0                 jmp     cs:fcntl_ptr
.plt:0000000000001BD0 _fcntl          endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    0Ah
.plt:0000000000001BDB                 jmp     sub_1B20
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int setenv(const char *name, const char *value, int replace)
.plt:0000000000001BE0 _setenv         proc near               ; CODE XREF: create+5B↓p
.plt:0000000000001BE0                 jmp     cs:setenv_ptr
.plt:0000000000001BE0 _setenv         endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    0Bh
.plt:0000000000001BEB                 jmp     sub_1B20
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001BF0 _clearerr_unlocked proc near            ; CODE XREF: main+1355↓p
.plt:0000000000001BF0                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001BF0 _clearerr_unlocked endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    0Ch
.plt:0000000000001BFB                 jmp     sub_1B20
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000001C00 _write          proc near               ; CODE XREF: safe_write+21↓p
.plt:0000000000001C00                 jmp     cs:write_ptr
.plt:0000000000001C00 _write          endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    0Dh
.plt:0000000000001C0B                 jmp     sub_1B20
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; char *textdomain(const char *domainname)
.plt:0000000000001C10 _textdomain     proc near               ; CODE XREF: main+6E↓p
.plt:0000000000001C10                 jmp     cs:textdomain_ptr
.plt:0000000000001C10 _textdomain     endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    0Eh
.plt:0000000000001C1B                 jmp     sub_1B20
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int fclose(FILE *stream)
.plt:0000000000001C20 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001C20                                         ; rpl_fclose+6B↓j
.plt:0000000000001C20                 jmp     cs:fclose_ptr
.plt:0000000000001C20 _fclose         endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    0Fh
.plt:0000000000001C2B                 jmp     sub_1B20
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001C30 _bindtextdomain proc near               ; CODE XREF: main+62↓p
.plt:0000000000001C30                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001C30 _bindtextdomain endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    10h
.plt:0000000000001C3B                 jmp     sub_1B20
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001C40 _dcgettext      proc near               ; CODE XREF: main+17E↓p
.plt:0000000000001C40                                         ; main+32E↓p ...
.plt:0000000000001C40                 jmp     cs:dcgettext_ptr
.plt:0000000000001C40 _dcgettext      endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    11h
.plt:0000000000001C4B                 jmp     sub_1B20
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001C50 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001C50                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001C50 ___ctype_get_mb_cur_max endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    12h
.plt:0000000000001C5B                 jmp     sub_1B20
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; size_t strlen(const char *s)
.plt:0000000000001C60 _strlen         proc near               ; CODE XREF: next_file_name+B3↓p
.plt:0000000000001C60                                         ; next_file_name+D0↓p ...
.plt:0000000000001C60                 jmp     cs:strlen_ptr
.plt:0000000000001C60 _strlen         endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    13h
.plt:0000000000001C6B                 jmp     sub_1B20
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: noreturn thunk
.plt:0000000000001C70
.plt:0000000000001C70 ___stack_chk_fail proc near             ; CODE XREF: main:loc_3B04↓p
.plt:0000000000001C70                                         ; create:loc_44FC↓p ...
.plt:0000000000001C70                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001C70 ___stack_chk_fail endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    14h
.plt:0000000000001C7B                 jmp     sub_1B20
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001C80 _getopt_long    proc near               ; CODE XREF: main+E1↓p
.plt:0000000000001C80                 jmp     cs:getopt_long_ptr
.plt:0000000000001C80 _getopt_long    endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    15h
.plt:0000000000001C8B                 jmp     sub_1B20
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001C90 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001C90                 jmp     cs:mbrtowc_ptr
.plt:0000000000001C90 _mbrtowc        endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    16h
.plt:0000000000001C9B                 jmp     sub_1B20
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int dup2(int fd, int fd2)
.plt:0000000000001CA0 _dup2           proc near               ; CODE XREF: create+162↓p
.plt:0000000000001CA0                                         ; fd_reopen+28↓p
.plt:0000000000001CA0                 jmp     cs:dup2_ptr
.plt:0000000000001CA0 _dup2           endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    17h
.plt:0000000000001CAB                 jmp     sub_1B20
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; char *strchr(const char *s, int c)
.plt:0000000000001CB0 _strchr         proc near               ; CODE XREF: main+3DD↓p
.plt:0000000000001CB0                                         ; xstrtoumax+123↓p ...
.plt:0000000000001CB0                 jmp     cs:strchr_ptr
.plt:0000000000001CB0 _strchr         endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    18h
.plt:0000000000001CBB                 jmp     sub_1B20
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; char *strrchr(const char *s, int c)
.plt:0000000000001CC0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001CC0                 jmp     cs:strrchr_ptr
.plt:0000000000001CC0 _strrchr        endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    19h
.plt:0000000000001CCB                 jmp     sub_1B20
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; int ftruncate(int fd, __off_t length)
.plt:0000000000001CD0 _ftruncate      proc near               ; CODE XREF: create+24D↓p
.plt:0000000000001CD0                 jmp     cs:ftruncate_ptr
.plt:0000000000001CD0 _ftruncate      endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    1Ah
.plt:0000000000001CDB                 jmp     sub_1B20
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001CE0 _lseek          proc near               ; CODE XREF: main+A18↓p
.plt:0000000000001CE0                                         ; main+1726↓p ...
.plt:0000000000001CE0                 jmp     cs:lseek_ptr
.plt:0000000000001CE0 _lseek          endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    1Bh
.plt:0000000000001CEB                 jmp     sub_1B20
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: noreturn thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001CF0 ___assert_fail  proc near               ; CODE XREF: main+1975↓p
.plt:0000000000001CF0                                         ; main+1BE2↓p ...
.plt:0000000000001CF0                 jmp     cs:__assert_fail_ptr
.plt:0000000000001CF0 ___assert_fail  endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    1Ch
.plt:0000000000001CFB                 jmp     sub_1B20
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001D00 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001D00                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001D00 ___strtoul_internal endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    1Dh
.plt:0000000000001D0B                 jmp     sub_1B20
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001D10 _memset         proc near               ; CODE XREF: next_file_name+14C↓p
.plt:0000000000001D10                                         ; quotearg_n_options+99↓p ...
.plt:0000000000001D10                 jmp     cs:memset_ptr
.plt:0000000000001D10 _memset         endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    1Eh
.plt:0000000000001D1B                 jmp     sub_1B20
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int close(int fd)
.plt:0000000000001D20 _close          proc near               ; CODE XREF: main+F38↓p
.plt:0000000000001D20                                         ; create+9C↓p ...
.plt:0000000000001D20                 jmp     cs:close_ptr
.plt:0000000000001D20 _close          endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    1Fh
.plt:0000000000001D2B                 jmp     sub_1B20
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; int pipe(int pipedes[2])
.plt:0000000000001D30 _pipe           proc near               ; CODE XREF: create+78↓p
.plt:0000000000001D30                 jmp     cs:pipe_ptr
.plt:0000000000001D30 _pipe           endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    20h ; ' '
.plt:0000000000001D3B                 jmp     sub_1B20
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001D40 _strspn         proc near               ; CODE XREF: main+61D↓p
.plt:0000000000001D40                 jmp     cs:strspn_ptr
.plt:0000000000001D40 _strspn         endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    21h ; '!'
.plt:0000000000001D4B                 jmp     sub_1B20
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001D50 _memchr         proc near               ; CODE XREF: main+B00↓p
.plt:0000000000001D50                                         ; main+E37↓p ...
.plt:0000000000001D50                 jmp     cs:memchr_ptr
.plt:0000000000001D50 _memchr         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    22h ; '"'
.plt:0000000000001D5B                 jmp     sub_1B20
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001D60 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001D60                 jmp     cs:read_ptr
.plt:0000000000001D60 _read           endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    23h ; '#'
.plt:0000000000001D6B                 jmp     sub_1B20
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001D70 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001D70                 jmp     cs:memcmp_ptr
.plt:0000000000001D70 _memcmp         endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    24h ; '$'
.plt:0000000000001D7B                 jmp     sub_1B20
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001D80 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001D80                                         ; usage+C2↓p ...
.plt:0000000000001D80                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001D80 _fputs_unlocked endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    25h ; '%'
.plt:0000000000001D8B                 jmp     sub_1B20
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001D90 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001D90                 jmp     cs:calloc_ptr
.plt:0000000000001D90 _calloc         endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    26h ; '&'
.plt:0000000000001D9B                 jmp     sub_1B20
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001DA0 _strcmp         proc near               ; CODE XREF: main+2D5↓p
.plt:0000000000001DA0                                         ; main+7A2↓p ...
.plt:0000000000001DA0                 jmp     cs:strcmp_ptr
.plt:0000000000001DA0 _strcmp         endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    27h ; '''
.plt:0000000000001DAB                 jmp     sub_1B20
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; int sigemptyset(sigset_t *set)
.plt:0000000000001DB0 _sigemptyset    proc near               ; CODE XREF: main+862↓p
.plt:0000000000001DB0                 jmp     cs:sigemptyset_ptr
.plt:0000000000001DB0 _sigemptyset    endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    28h ; '('
.plt:0000000000001DBB                 jmp     sub_1B20
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001DC0 _strtol         proc near               ; CODE XREF: str2sig+98↓p
.plt:0000000000001DC0                                         ; str2sig+117↓p ...
.plt:0000000000001DC0                 jmp     cs:strtol_ptr
.plt:0000000000001DC0 _strtol         endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    29h ; ')'
.plt:0000000000001DCB                 jmp     sub_1B20
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001DD0 _memcpy         proc near               ; CODE XREF: main+CF1↓p
.plt:0000000000001DD0                                         ; next_file_name+11E↓p ...
.plt:0000000000001DD0                 jmp     cs:memcpy_ptr
.plt:0000000000001DD0 _memcpy         endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    2Ah ; '*'
.plt:0000000000001DDB                 jmp     sub_1B20
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int fileno(FILE *stream)
.plt:0000000000001DE0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001DE0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001DE0                 jmp     cs:fileno_ptr
.plt:0000000000001DE0 _fileno         endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    2Bh ; '+'
.plt:0000000000001DEB                 jmp     sub_1B20
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; void *malloc(size_t size)
.plt:0000000000001DF0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001DF0                 jmp     cs:malloc_ptr
.plt:0000000000001DF0 _malloc         endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    2Ch ; ','
.plt:0000000000001DFB                 jmp     sub_1B20
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int fflush(FILE *stream)
.plt:0000000000001E00 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001E00                                         ; rpl_fflush+3B↓j
.plt:0000000000001E00                 jmp     cs:fflush_ptr
.plt:0000000000001E00 _fflush         endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    2Dh ; '-'
.plt:0000000000001E0B                 jmp     sub_1B20
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; char *nl_langinfo(nl_item item)
.plt:0000000000001E10 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001E10                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001E10 _nl_langinfo    endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    2Eh ; '.'
.plt:0000000000001E1B                 jmp     sub_1B20
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001E20 ___fxstat       proc near               ; CODE XREF: main+7CF↓p
.plt:0000000000001E20                                         ; create+21D↓p
.plt:0000000000001E20                 jmp     cs:__fxstat_ptr
.plt:0000000000001E20 ___fxstat       endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    2Fh ; '/'
.plt:0000000000001E2B                 jmp     sub_1B20
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; int __freading(FILE *fp)
.plt:0000000000001E30 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001E30                                         ; rpl_fflush+9↓p
.plt:0000000000001E30                 jmp     cs:__freading_ptr
.plt:0000000000001E30 ___freading     endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    30h ; '0'
.plt:0000000000001E3B                 jmp     sub_1B20
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001E40 _fwrite_unlocked proc near              ; CODE XREF: main+127F↓p
.plt:0000000000001E40                                         ; main+133F↓p
.plt:0000000000001E40                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001E40 _fwrite_unlocked endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    31h ; '1'
.plt:0000000000001E4B                 jmp     sub_1B20
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001E50 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001E50                 jmp     cs:realloc_ptr
.plt:0000000000001E50 _realloc        endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    32h ; '2'
.plt:0000000000001E5B                 jmp     sub_1B20
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001E60 _fdopen         proc near               ; CODE XREF: ofile_open+105↓p
.plt:0000000000001E60                 jmp     cs:fdopen_ptr
.plt:0000000000001E60 _fdopen         endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    33h ; '3'
.plt:0000000000001E6B                 jmp     sub_1B20
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; char *setlocale(int category, const char *locale)
.plt:0000000000001E70 _setlocale      proc near               ; CODE XREF: main+4F↓p
.plt:0000000000001E70                                         ; usage+2D3↓p ...
.plt:0000000000001E70                 jmp     cs:setlocale_ptr
.plt:0000000000001E70 _setlocale      endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    34h ; '4'
.plt:0000000000001E7B                 jmp     sub_1B20
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001E80                                         ; usage+2C7↓p ...
.plt:0000000000001E80                 jmp     cs:__printf_chk_ptr
.plt:0000000000001E80 ___printf_chk   endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    35h ; '5'
.plt:0000000000001E8B                 jmp     sub_1B20
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001E90 _memmove        proc near               ; CODE XREF: main+D7C↓p
.plt:0000000000001E90                                         ; main+160F↓p
.plt:0000000000001E90                 jmp     cs:memmove_ptr
.plt:0000000000001E90 _memmove        endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    36h ; '6'
.plt:0000000000001E9B                 jmp     sub_1B20
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001EA0 _error          proc near               ; CODE XREF: main+FDA↓p
.plt:0000000000001EA0                                         ; main+1388↓p ...
.plt:0000000000001EA0                 jmp     cs:error_ptr
.plt:0000000000001EA0 _error          endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    37h ; '7'
.plt:0000000000001EAB                 jmp     sub_1B20
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; void *memrchr(const void *s, int c, size_t n)
.plt:0000000000001EB0 _memrchr        proc near               ; CODE XREF: main+BAB↓p
.plt:0000000000001EB0                                         ; main+C34↓p
.plt:0000000000001EB0                 jmp     cs:memrchr_ptr
.plt:0000000000001EB0 _memrchr        endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    38h ; '8'
.plt:0000000000001EBB                 jmp     sub_1B20
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
.plt:0000000000001EC0 _waitpid        proc near               ; CODE XREF: closeout+97↓p
.plt:0000000000001EC0                 jmp     cs:waitpid_ptr
.plt:0000000000001EC0 _waitpid        endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    39h ; '9'
.plt:0000000000001ECB                 jmp     sub_1B20
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001ED0 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001ED0                                         ; fd_reopen+15↓p
.plt:0000000000001ED0                 jmp     cs:open_ptr
.plt:0000000000001ED0 _open           endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    3Ah ; ':'
.plt:0000000000001EDB                 jmp     sub_1B20
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001EE0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_830A↓j
.plt:0000000000001EE0                 jmp     cs:fseeko_ptr
.plt:0000000000001EE0 _fseeko         endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    3Bh ; ';'
.plt:0000000000001EEB                 jmp     sub_1B20
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001EF0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001EF0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001EF0 ___cxa_atexit   endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    3Ch ; '<'
.plt:0000000000001EFB                 jmp     sub_1B20
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; int getpagesize(void)
.plt:0000000000001F00 _getpagesize    proc near               ; CODE XREF: main+2F↓p
.plt:0000000000001F00                 jmp     cs:getpagesize_ptr
.plt:0000000000001F00 _getpagesize    endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    3Dh ; '='
.plt:0000000000001F0B                 jmp     sub_1B20
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int __libc_current_sigrtmin(void)
.plt:0000000000001F10 ___libc_current_sigrtmin proc near      ; CODE XREF: str2sig:loc_84B0↓p
.plt:0000000000001F10                                         ; sig2str+55↓p
.plt:0000000000001F10                 jmp     cs:__libc_current_sigrtmin_ptr
.plt:0000000000001F10 ___libc_current_sigrtmin endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    3Eh ; '>'
.plt:0000000000001F1B                 jmp     sub_1B20
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: noreturn thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; void __noreturn exit(int status)
.plt:0000000000001F20 _exit           proc near               ; CODE XREF: main+251↓p
.plt:0000000000001F20                                         ; usage+58↓p
.plt:0000000000001F20                 jmp     cs:exit_ptr
.plt:0000000000001F20 _exit           endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    3Fh ; '?'
.plt:0000000000001F2B                 jmp     sub_1B20
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001F30 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001F30                 jmp     cs:fwrite_ptr
.plt:0000000000001F30 _fwrite         endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    40h ; '@'
.plt:0000000000001F3B                 jmp     sub_1B20
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ___fprintf_chk  proc near               ; CODE XREF: create+2E9↓p
.plt:0000000000001F40                                         ; create+357↓p ...
.plt:0000000000001F40                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001F40 ___fprintf_chk  endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    41h ; 'A'
.plt:0000000000001F4B                 jmp     sub_1B20
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ; int __libc_current_sigrtmax(void)
.plt:0000000000001F50 ___libc_current_sigrtmax proc near      ; CODE XREF: str2sig+C7↓p
.plt:0000000000001F50                                         ; sig2str+5C↓p
.plt:0000000000001F50                 jmp     cs:__libc_current_sigrtmax_ptr
.plt:0000000000001F50 ___libc_current_sigrtmax endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    42h ; 'B'
.plt:0000000000001F5B                 jmp     sub_1B20
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001F60 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001F60                 jmp     cs:mbsinit_ptr
.plt:0000000000001F60 _mbsinit        endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    43h ; 'C'
.plt:0000000000001F6B                 jmp     sub_1B20
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; int execl(const char *path, const char *arg, ...)
.plt:0000000000001F70 _execl          proc near               ; CODE XREF: create+1B6↓p
.plt:0000000000001F70                 jmp     cs:execl_ptr
.plt:0000000000001F70 _execl          endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    44h ; 'D'
.plt:0000000000001F7B                 jmp     sub_1B20
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; int iswprint(wint_t wc)
.plt:0000000000001F80 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001F80                 jmp     cs:iswprint_ptr
.plt:0000000000001F80 _iswprint       endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    45h ; 'E'
.plt:0000000000001F8B                 jmp     sub_1B20
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; int sigaddset(sigset_t *set, int signo)
.plt:0000000000001F90 _sigaddset      proc near               ; CODE XREF: main+892↓p
.plt:0000000000001F90                 jmp     cs:sigaddset_ptr
.plt:0000000000001F90 _sigaddset      endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    46h ; 'F'
.plt:0000000000001F9B                 jmp     sub_1B20
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ; __pid_t fork(void)
.plt:0000000000001FA0 _fork           proc near               ; CODE XREF: create+85↓p
.plt:0000000000001FA0                 jmp     cs:fork_ptr
.plt:0000000000001FA0 _fork           endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    47h ; 'G'
.plt:0000000000001FAB                 jmp     sub_1B20
.plt:0000000000001FB0
.plt:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FB0
.plt:0000000000001FB0 ; Attributes: thunk
.plt:0000000000001FB0
.plt:0000000000001FB0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001FB0 ___ctype_b_loc  proc near               ; CODE XREF: main+371↓p
.plt:0000000000001FB0                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000001FB0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001FB0 ___ctype_b_loc  endp
.plt:0000000000001FB0
.plt:0000000000001FB6 ; ---------------------------------------------------------------------------
.plt:0000000000001FB6                 push    48h ; 'H'
.plt:0000000000001FBB                 jmp     sub_1B20
.plt:0000000000001FC0
.plt:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FC0
.plt:0000000000001FC0 ; Attributes: thunk
.plt:0000000000001FC0
.plt:0000000000001FC0 ___sprintf_chk  proc near               ; CODE XREF: closeout+2B9↓p
.plt:0000000000001FC0                                         ; sig2str+AD↓p
.plt:0000000000001FC0                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001FC0 ___sprintf_chk  endp
.plt:0000000000001FC0
.plt:0000000000001FC6 ; ---------------------------------------------------------------------------
.plt:0000000000001FC6                 push    49h ; 'I'
.plt:0000000000001FCB                 jmp     sub_1B20
.plt:0000000000001FCB ; } // starts at 1B20
.plt:0000000000001FCB _plt            ends
.plt:0000000000001FCB
.plt.got:0000000000001FD0 ; ===========================================================================
.plt.got:0000000000001FD0
.plt.got:0000000000001FD0 ; Segment type: Pure code
.plt.got:0000000000001FD0 ; Segment permissions: Read/Execute
.plt.got:0000000000001FD0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001FD0                 assume cs:_plt_got
.plt.got:0000000000001FD0                 ;org 1FD0h
.plt.got:0000000000001FD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001FD0
.plt.got:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001FD0
.plt.got:0000000000001FD0 ; Attributes: thunk
.plt.got:0000000000001FD0
.plt.got:0000000000001FD0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001FD0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001FD0 ; __unwind {
.plt.got:0000000000001FD0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001FD0 __cxa_finalize  endp
.plt.got:0000000000001FD0
.plt.got:0000000000001FD0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001FD6                 align 8
.plt.got:0000000000001FD6 ; } // starts at 1FD0
.plt.got:0000000000001FD6 _plt_got        ends
.plt.got:0000000000001FD6
LOAD:0000000000001FD8 ; ===========================================================================
LOAD:0000000000001FD8
LOAD:0000000000001FD8 ; Segment type: Pure code
LOAD:0000000000001FD8 ; Segment permissions: Read/Execute
LOAD:0000000000001FD8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001FD8                 assume cs:LOAD
LOAD:0000000000001FD8                 ;org 1FD8h
LOAD:0000000000001FD8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001FD8                 align 20h
LOAD:0000000000001FD8 LOAD            ends
LOAD:0000000000001FD8
.text:0000000000001FE0 ; ===========================================================================
.text:0000000000001FE0
.text:0000000000001FE0 ; Segment type: Pure code
.text:0000000000001FE0 ; Segment permissions: Read/Execute
.text:0000000000001FE0 _text           segment para public 'CODE' use64
.text:0000000000001FE0                 assume cs:_text
.text:0000000000001FE0                 ;org 1FE0h
.text:0000000000001FE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001FE0
.text:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FE0
.text:0000000000001FE0
.text:0000000000001FE0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001FE0                 public main
.text:0000000000001FE0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001FE0
.text:0000000000001FE0 offset          = qword ptr -178h
.text:0000000000001FE0 ptr             = qword ptr -170h
.text:0000000000001FE0 var_168         = qword ptr -168h
.text:0000000000001FE0 var_160         = qword ptr -160h
.text:0000000000001FE0 var_158         = qword ptr -158h
.text:0000000000001FE0 buf             = qword ptr -150h
.text:0000000000001FE0 var_148         = qword ptr -148h
.text:0000000000001FE0 var_140         = qword ptr -140h
.text:0000000000001FE0 nbytes          = qword ptr -138h
.text:0000000000001FE0 s               = qword ptr -130h
.text:0000000000001FE0 var_128         = qword ptr -128h
.text:0000000000001FE0 var_120         = qword ptr -120h
.text:0000000000001FE0 var_112         = byte ptr -112h
.text:0000000000001FE0 var_111         = byte ptr -111h
.text:0000000000001FE0 var_110         = qword ptr -110h
.text:0000000000001FE0 var_100         = qword ptr -100h
.text:0000000000001FE0 var_F8          = qword ptr -0F8h
.text:0000000000001FE0 var_58          = byte ptr -58h
.text:0000000000001FE0 var_40          = qword ptr -40h
.text:0000000000001FE0
.text:0000000000001FE0 ; __unwind {
.text:0000000000001FE0                 push    r15
.text:0000000000001FE2                 push    r14
.text:0000000000001FE4                 xor     r14d, r14d
.text:0000000000001FE7                 push    r13
.text:0000000000001FE9                 push    r12
.text:0000000000001FEB                 xor     r12d, r12d
.text:0000000000001FEE                 push    rbp
.text:0000000000001FEF                 push    rbx
.text:0000000000001FF0                 mov     rbx, rsi
.text:0000000000001FF3                 mov     ebp, edi
.text:0000000000001FF5                 sub     rsp, 148h
.text:0000000000001FFC                 mov     rax, fs:28h
.text:0000000000002005                 mov     [rsp+178h+var_40], rax
.text:000000000000200D                 xor     eax, eax
.text:000000000000200F                 call    _getpagesize
.text:0000000000002014                 mov     rdi, [rbx]
.text:0000000000002017                 cdqe
.text:0000000000002019                 mov     [rsp+178h+ptr], rax
.text:000000000000201E                 call    set_program_name
.text:0000000000002023                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000202A                 mov     edi, 6          ; category
.text:000000000000202F                 call    _setlocale
.text:0000000000002034                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000203B                 lea     rdi, domainname ; "coreutils"
.text:0000000000002042                 call    _bindtextdomain
.text:0000000000002047                 lea     rdi, domainname ; "coreutils"
.text:000000000000204E                 call    _textdomain
.text:0000000000002053                 lea     rdi, close_stdout
.text:000000000000205A                 call    atexit
.text:000000000000205F                 lea     rax, aLt+2      ; "-"
.text:0000000000002066                 mov     [rsp+178h+offset], 0
.text:000000000000206E                 mov     [rsp+178h+var_168], 0
.text:0000000000002077                 mov     [rsp+178h+nbytes], 0
.text:0000000000002080                 mov     cs:infile, rax
.text:0000000000002087                 lea     rax, aAdditionalSuff+10h ; "x"
.text:000000000000208E                 mov     cs:outbase, rax
.text:0000000000002095                 nop     dword ptr [rax]
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: main+134↓j
.text:0000000000002098                                         ; main+1AF↓j ...
.text:0000000000002098                 mov     r13d, cs:optind@@GLIBC_2_2_5
.text:000000000000209F                 mov     eax, 1
.text:00000000000020A4                 lea     rcx, longopts   ; longopts
.text:00000000000020AB                 lea     rdx, shortopts  ; "0123456789C:a:b:del:n:t:ux"
.text:00000000000020B2                 mov     rsi, rbx        ; argv
.text:00000000000020B5                 mov     edi, ebp        ; argc
.text:00000000000020B7                 test    r13d, r13d
.text:00000000000020BA                 cmovz   r13d, eax
.text:00000000000020BE                 xor     r8d, r8d        ; longind
.text:00000000000020C1                 call    _getopt_long
.text:00000000000020C6                 cmp     eax, 0FFFFFFFFh
.text:00000000000020C9                 mov     r15d, eax
.text:00000000000020CC                 jz      loc_2668
.text:00000000000020D2                 cmp     eax, 65h ; 'e'
.text:00000000000020D5                 jz      loc_2240
.text:00000000000020DB                 jle     short loc_2120
.text:00000000000020DD                 cmp     eax, 78h ; 'x'
.text:00000000000020E0                 jz      loc_25BB
.text:00000000000020E6                 jg      loc_2198
.text:00000000000020EC                 cmp     eax, 6Eh ; 'n'
.text:00000000000020EF                 jz      loc_2348
.text:00000000000020F5                 jle     loc_22E8
.text:00000000000020FB                 cmp     eax, 74h ; 't'
.text:00000000000020FE                 jz      loc_2290
.text:0000000000002104                 cmp     eax, 75h ; 'u'
.text:0000000000002107                 jnz     loc_392C
.text:000000000000210D                 mov     cs:unbuffered, 1
.text:0000000000002114                 jmp     short loc_2098
.text:0000000000002114 ; ---------------------------------------------------------------------------
.text:0000000000002116                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: main+FB↑j
.text:0000000000002120                 cmp     eax, 39h ; '9'
.text:0000000000002123                 jle     loc_21E8
.text:0000000000002129                 cmp     eax, 61h ; 'a'
.text:000000000000212C                 jz      loc_24C0
.text:0000000000002132                 jle     loc_2460
.text:0000000000002138                 cmp     eax, 62h ; 'b'
.text:000000000000213B                 jnz     loc_264C
.text:0000000000002141                 test    r12d, r12d
.text:0000000000002144                 jnz     loc_3CA8
.text:000000000000214A                 lea     rsi, msgid      ; "invalid number of bytes"
.text:0000000000002151                 mov     edx, 5          ; category
.text:0000000000002156                 xor     edi, edi        ; domainname
.text:0000000000002158                 mov     r12d, 1
.text:000000000000215E                 call    _dcgettext
.text:0000000000002163                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000216A                 lea     rcx, multipliers_7397 ; "bEGKkMmPTYZ0"
.text:0000000000002171                 mov     r8, rax
.text:0000000000002174                 xor     r9d, r9d
.text:0000000000002177                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:0000000000002181                 mov     esi, 1
.text:0000000000002186                 call    xdectoumax
.text:000000000000218B                 mov     [rsp+178h+offset], rax
.text:000000000000218F                 jmp     loc_2098
.text:000000000000218F ; ---------------------------------------------------------------------------
.text:0000000000002194                 align 8
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: main+106↑j
.text:0000000000002198                 cmp     eax, 81h
.text:000000000000219D                 jz      loc_2570
.text:00000000000021A3                 jle     loc_2550
.text:00000000000021A9                 cmp     eax, 82h
.text:00000000000021AE                 jz      loc_2508
.text:00000000000021B4                 cmp     eax, 83h
.text:00000000000021B9                 jnz     loc_392C
.text:00000000000021BF                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:00000000000021C6                 mov     rdi, r13
.text:00000000000021C9                 call    last_component
.text:00000000000021CE                 cmp     r13, rax
.text:00000000000021D1                 jnz     loc_3A9E
.text:00000000000021D7                 mov     cs:additional_suffix, r13
.text:00000000000021DE                 jmp     loc_2098
.text:00000000000021DE ; ---------------------------------------------------------------------------
.text:00000000000021E3                 align 8
.text:00000000000021E8
.text:00000000000021E8 loc_21E8:                               ; CODE XREF: main+143↑j
.text:00000000000021E8                 cmp     eax, 30h ; '0'
.text:00000000000021EB                 jge     short loc_2250
.text:00000000000021ED                 cmp     eax, 0FFFFFF7Dh
.text:00000000000021F2                 jnz     loc_3842
.text:00000000000021F8                 sub     rsp, 8
.text:00000000000021FC                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002203                 mov     rcx, cs:Version
.text:000000000000220A                 push    0
.text:000000000000220C                 lea     r9, aRichardMStallm ; "Richard M. Stallman"
.text:0000000000002213                 lea     r8, aTorbjornGranlu ; "Torbjorn Granlund"
.text:000000000000221A                 lea     rdx, unk_8C81
.text:0000000000002221                 lea     rsi, aSplit     ; "split"
.text:0000000000002228                 xor     eax, eax
.text:000000000000222A                 call    version_etc
.text:000000000000222F                 xor     edi, edi        ; status
.text:0000000000002231                 call    _exit
.text:0000000000002231 ; ---------------------------------------------------------------------------
.text:0000000000002236                 align 20h
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: main+F5↑j
.text:0000000000002240                 mov     cs:elide_empty_files, 1
.text:0000000000002247                 jmp     loc_2098
.text:0000000000002247 ; ---------------------------------------------------------------------------
.text:000000000000224C                 align 10h
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: main+20B↑j
.text:0000000000002250                 test    r12d, r12d
.text:0000000000002253                 jz      short loc_2271
.text:0000000000002255                 cmp     r12d, 4
.text:0000000000002259                 jnz     loc_3CA8
.text:000000000000225F                 test    r14d, r14d
.text:0000000000002262                 jz      loc_28ED
.text:0000000000002268                 cmp     r14d, r13d
.text:000000000000226B                 jz      loc_28ED
.text:0000000000002271
.text:0000000000002271 loc_2271:                               ; CODE XREF: main+273↑j
.text:0000000000002271                 sub     r15d, 30h ; '0'
.text:0000000000002275                 mov     r14d, r13d
.text:0000000000002278                 mov     r12d, 4
.text:000000000000227E                 movsxd  rax, r15d
.text:0000000000002281                 mov     [rsp+178h+offset], rax
.text:0000000000002285                 jmp     loc_2098
.text:0000000000002285 ; ---------------------------------------------------------------------------
.text:000000000000228A                 align 10h
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: main+11E↑j
.text:0000000000002290                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000002297                 movsx   eax, byte ptr [r13+0]
.text:000000000000229C                 test    al, al
.text:000000000000229E                 jz      loc_3C40
.text:00000000000022A4                 cmp     byte ptr [r13+1], 0
.text:00000000000022A9                 jz      short loc_22C4
.text:00000000000022AB                 lea     rsi, s2         ; "\\0"
.text:00000000000022B2                 mov     rdi, r13        ; s1
.text:00000000000022B5                 call    _strcmp
.text:00000000000022BA                 test    eax, eax
.text:00000000000022BC                 jnz     loc_3CDD
.text:00000000000022C2                 xor     eax, eax
.text:00000000000022C4
.text:00000000000022C4 loc_22C4:                               ; CODE XREF: main+2C9↑j
.text:00000000000022C4                 mov     edx, cs:eolchar
.text:00000000000022CA                 test    edx, edx
.text:00000000000022CC                 js      short loc_22D6
.text:00000000000022CE                 cmp     edx, eax
.text:00000000000022D0                 jnz     loc_3CB9
.text:00000000000022D6
.text:00000000000022D6 loc_22D6:                               ; CODE XREF: main+2EC↑j
.text:00000000000022D6                 mov     cs:eolchar, eax
.text:00000000000022DC                 jmp     loc_2098
.text:00000000000022DC ; ---------------------------------------------------------------------------
.text:00000000000022E1                 align 8
.text:00000000000022E8
.text:00000000000022E8 loc_22E8:                               ; CODE XREF: main+115↑j
.text:00000000000022E8                 cmp     eax, 6Ch ; 'l'
.text:00000000000022EB                 jnz     loc_392C
.text:00000000000022F1                 test    r12d, r12d
.text:00000000000022F4                 jnz     loc_3CA8
.text:00000000000022FA                 lea     rsi, aInvalidNumberO_0 ; "invalid number of lines"
.text:0000000000002301                 mov     edx, 5          ; category
.text:0000000000002306                 xor     edi, edi        ; domainname
.text:0000000000002308                 mov     r12d, 3
.text:000000000000230E                 call    _dcgettext
.text:0000000000002313                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000231A                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002321                 mov     r8, rax
.text:0000000000002324                 xor     r9d, r9d
.text:0000000000002327                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000232E                 mov     esi, 1
.text:0000000000002333                 call    xdectoumax
.text:0000000000002338                 mov     [rsp+178h+offset], rax
.text:000000000000233C                 jmp     loc_2098
.text:000000000000233C ; ---------------------------------------------------------------------------
.text:0000000000002341                 align 8
.text:0000000000002348
.text:0000000000002348 loc_2348:                               ; CODE XREF: main+10F↑j
.text:0000000000002348                 test    r12d, r12d
.text:000000000000234B                 jnz     loc_3CA8
.text:0000000000002351                 call    ___ctype_b_loc
.text:0000000000002356                 mov     rcx, [rax]
.text:0000000000002359                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002360                 jmp     short loc_236F
.text:0000000000002360 ; ---------------------------------------------------------------------------
.text:0000000000002362                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: main+3A0↓j
.text:0000000000002368                 mov     cs:optarg@@GLIBC_2_2_5, rax
.text:000000000000236F
.text:000000000000236F loc_236F:                               ; CODE XREF: main+380↑j
.text:000000000000236F                 mov     r13, rax
.text:0000000000002372                 add     rax, 1
.text:0000000000002376                 movzx   edx, byte ptr [r13+0]
.text:000000000000237B                 test    byte ptr [rcx+rdx*2+1], 20h
.text:0000000000002380                 jnz     short loc_2368
.text:0000000000002382                 lea     rdi, aR         ; "r/"
.text:0000000000002389                 mov     ecx, 2
.text:000000000000238E                 mov     rsi, r13
.text:0000000000002391                 repe cmpsb
.text:0000000000002393                 setnbe  al
.text:0000000000002396                 sbb     al, 0
.text:0000000000002398                 test    al, al
.text:000000000000239A                 jnz     loc_2583
.text:00000000000023A0                 add     r13, 2
.text:00000000000023A4                 mov     r12d, 7
.text:00000000000023AA                 mov     cs:optarg@@GLIBC_2_2_5, r13
.text:00000000000023B1
.text:00000000000023B1 loc_23B1:                               ; CODE XREF: main+5BF↓j
.text:00000000000023B1                                         ; main+5D6↓j
.text:00000000000023B1                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; s
.text:00000000000023B8                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000023BD                 call    _strchr
.text:00000000000023C2                 xor     edi, edi        ; domainname
.text:00000000000023C4                 test    rax, rax
.text:00000000000023C7                 mov     r13, rax
.text:00000000000023CA                 mov     edx, 5          ; category
.text:00000000000023CF                 lea     rsi, aInvalidNumberO_1 ; "invalid number of chunks"
.text:00000000000023D6                 jz      loc_28AA
.text:00000000000023DC                 call    _dcgettext
.text:00000000000023E1                 lea     rdi, [r13+1]
.text:00000000000023E5                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000023EC                 xor     r9d, r9d
.text:00000000000023EF                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000023F3                 mov     r8, rax
.text:00000000000023F6                 mov     esi, 1
.text:00000000000023FB                 call    xdectoumax
.text:0000000000002400                 cmp     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000002407                 mov     r15, rax
.text:000000000000240A                 mov     [rsp+178h+offset], rax
.text:000000000000240E                 jz      loc_2098
.text:0000000000002414                 lea     rsi, aInvalidChunkNu ; "invalid chunk number"
.text:000000000000241B                 mov     edx, 5          ; category
.text:0000000000002420                 xor     edi, edi        ; domainname
.text:0000000000002422                 mov     byte ptr [r13+0], 0
.text:0000000000002427                 call    _dcgettext
.text:000000000000242C                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002433                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000243A                 mov     r8, rax
.text:000000000000243D                 xor     r9d, r9d
.text:0000000000002440                 mov     rdx, r15
.text:0000000000002443                 mov     esi, 1
.text:0000000000002448                 call    xdectoumax
.text:000000000000244D                 mov     [rsp+178h+var_168], rax
.text:0000000000002452                 jmp     loc_2098
.text:0000000000002452 ; ---------------------------------------------------------------------------
.text:0000000000002457                 align 20h
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: main+152↑j
.text:0000000000002460                 cmp     eax, 43h ; 'C'
.text:0000000000002463                 jnz     loc_392C
.text:0000000000002469                 test    r12d, r12d
.text:000000000000246C                 jnz     loc_3CA8
.text:0000000000002472                 lea     rsi, msgid      ; "invalid number of bytes"
.text:0000000000002479                 mov     edx, 5          ; category
.text:000000000000247E                 xor     edi, edi        ; domainname
.text:0000000000002480                 mov     r12d, 2
.text:0000000000002486                 call    _dcgettext
.text:000000000000248B                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002492                 lea     rcx, multipliers_7397 ; "bEGKkMmPTYZ0"
.text:0000000000002499                 mov     r8, rax
.text:000000000000249C                 xor     r9d, r9d
.text:000000000000249F                 mov     rdx, 7FFFFFFFFFFFFFFFh
.text:00000000000024A9                 mov     esi, 1
.text:00000000000024AE                 call    xdectoumax
.text:00000000000024B3                 mov     [rsp+178h+offset], rax
.text:00000000000024B7                 jmp     loc_2098
.text:00000000000024B7 ; ---------------------------------------------------------------------------
.text:00000000000024BC                 align 20h
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: main+14C↑j
.text:00000000000024C0                 lea     rsi, aInvalidSuffixL ; "invalid suffix length"
.text:00000000000024C7                 mov     edx, 5          ; category
.text:00000000000024CC                 xor     edi, edi        ; domainname
.text:00000000000024CE                 call    _dcgettext
.text:00000000000024D3                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000024DA                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000024E1                 mov     r8, rax
.text:00000000000024E4                 xor     r9d, r9d
.text:00000000000024E7                 mov     rdx, 1FFFFFFFFFFFFFFFh
.text:00000000000024F1                 xor     esi, esi
.text:00000000000024F3                 call    xdectoumax
.text:00000000000024F8                 mov     cs:suffix_length, rax
.text:00000000000024FF                 jmp     loc_2098
.text:00000000000024FF ; ---------------------------------------------------------------------------
.text:0000000000002504                 align 8
.text:0000000000002508
.text:0000000000002508 loc_2508:                               ; CODE XREF: main+1CE↑j
.text:0000000000002508                 lea     rsi, aInvalidIoBlock ; "invalid IO block size"
.text:000000000000250F                 mov     edx, 5          ; category
.text:0000000000002514                 xor     edi, edi        ; domainname
.text:0000000000002516                 call    _dcgettext
.text:000000000000251B                 mov     rdx, [rsp+178h+ptr]
.text:0000000000002520                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002527                 lea     rcx, multipliers_7397 ; "bEGKkMmPTYZ0"
.text:000000000000252E                 mov     r8, rax
.text:0000000000002531                 xor     r9d, r9d
.text:0000000000002534                 mov     esi, 1
.text:0000000000002539                 not     rdx
.text:000000000000253C                 call    xdectoumax
.text:0000000000002541                 mov     [rsp+178h+nbytes], rax
.text:0000000000002546                 jmp     loc_2098
.text:0000000000002546 ; ---------------------------------------------------------------------------
.text:000000000000254B                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: main+1C3↑j
.text:0000000000002550                 add     r15d, 0FFFFFF80h
.text:0000000000002554                 jnz     loc_392C
.text:000000000000255A                 mov     cs:verbose, 1
.text:0000000000002561                 jmp     loc_2098
.text:0000000000002561 ; ---------------------------------------------------------------------------
.text:0000000000002566                 align 10h
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: main+1BD↑j
.text:0000000000002570                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002577                 mov     cs:filter_command, rax
.text:000000000000257E                 jmp     loc_2098
.text:0000000000002583 ; ---------------------------------------------------------------------------
.text:0000000000002583
.text:0000000000002583 loc_2583:                               ; CODE XREF: main+3BA↑j
.text:0000000000002583                 lea     rsi, asc_8D2A   ; "l/"
.text:000000000000258A                 mov     edx, 2          ; n
.text:000000000000258F                 mov     rdi, r13        ; s1
.text:0000000000002592                 mov     r12d, 5
.text:0000000000002598                 call    _strncmp
.text:000000000000259D                 test    eax, eax
.text:000000000000259F                 jnz     loc_23B1
.text:00000000000025A5                 add     r13, 2
.text:00000000000025A9                 mov     r12d, 6
.text:00000000000025AF                 mov     cs:optarg@@GLIBC_2_2_5, r13
.text:00000000000025B6                 jmp     loc_23B1
.text:00000000000025BB ; ---------------------------------------------------------------------------
.text:00000000000025BB
.text:00000000000025BB loc_25BB:                               ; CODE XREF: main+100↑j
.text:00000000000025BB                 lea     rax, a0123456789abcd ; "0123456789abcdef"
.text:00000000000025C2                 mov     cs:suffix_alphabet, rax
.text:00000000000025C9
.text:00000000000025C9 loc_25C9:                               ; CODE XREF: main+683↓j
.text:00000000000025C9                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:00000000000025D0                 test    r13, r13
.text:00000000000025D3                 jz      loc_2098
.text:00000000000025D9                 xor     eax, eax
.text:00000000000025DB                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000025DF                 mov     rdi, r13
.text:00000000000025E2                 repne scasb
.text:00000000000025E4                 mov     rdi, r13        ; s
.text:00000000000025E7                 mov     rsi, rcx
.text:00000000000025EA                 not     rsi
.text:00000000000025ED                 lea     rax, [rsi-1]
.text:00000000000025F1                 mov     rsi, cs:suffix_alphabet ; accept
.text:00000000000025F8                 mov     [rsp+178h+var_160], rax
.text:00000000000025FD                 call    _strspn
.text:0000000000002602                 cmp     [rsp+178h+var_160], rax
.text:0000000000002607                 jnz     loc_3C04
.text:000000000000260D                 cmp     byte ptr [r13+0], 30h ; '0'
.text:0000000000002612                 jnz     short loc_2640
.text:0000000000002614                 cmp     byte ptr [r13+1], 0
.text:0000000000002619                 lea     rax, [r13+1]
.text:000000000000261D                 jnz     short loc_2631
.text:000000000000261F                 jmp     short loc_2640
.text:000000000000261F ; ---------------------------------------------------------------------------
.text:0000000000002621                 align 8
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: main+65E↓j
.text:0000000000002628                 add     rax, 1
.text:000000000000262C                 cmp     byte ptr [rax], 0
.text:000000000000262F                 jz      short loc_2640
.text:0000000000002631
.text:0000000000002631 loc_2631:                               ; CODE XREF: main+63D↑j
.text:0000000000002631                 mov     cs:optarg@@GLIBC_2_2_5, rax
.text:0000000000002638                 cmp     byte ptr [rax], 30h ; '0'
.text:000000000000263B                 mov     r13, rax
.text:000000000000263E                 jz      short loc_2628
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: main+632↑j
.text:0000000000002640                                         ; main+63F↑j ...
.text:0000000000002640                 mov     cs:numeric_suffix_start, r13
.text:0000000000002647                 jmp     loc_2098
.text:000000000000264C ; ---------------------------------------------------------------------------
.text:000000000000264C
.text:000000000000264C loc_264C:                               ; CODE XREF: main+15B↑j
.text:000000000000264C                 cmp     eax, 64h ; 'd'
.text:000000000000264F                 jnz     loc_392C
.text:0000000000002655                 lea     rax, a0123456789 ; "0123456789"
.text:000000000000265C                 mov     cs:suffix_alphabet, rax
.text:0000000000002663                 jmp     loc_25C9
.text:0000000000002668 ; ---------------------------------------------------------------------------
.text:0000000000002668
.text:0000000000002668 loc_2668:                               ; CODE XREF: main+EC↑j
.text:0000000000002668                 cmp     [rsp+178h+var_168], 0
.text:000000000000266E                 jz      short loc_267E
.text:0000000000002670                 cmp     cs:filter_command, 0
.text:0000000000002678                 jnz     loc_390B
.text:000000000000267E
.text:000000000000267E loc_267E:                               ; CODE XREF: main+68E↑j
.text:000000000000267E                 test    r12d, r12d
.text:0000000000002681                 jz      loc_28DA
.text:0000000000002687                 cmp     [rsp+178h+offset], 0
.text:000000000000268C                 jz      loc_3C64
.text:0000000000002692
.text:0000000000002692 loc_2692:                               ; CODE XREF: main+908↓j
.text:0000000000002692                 cmp     cs:eolchar, 0
.text:0000000000002699                 jns     short loc_26A5
.text:000000000000269B                 mov     cs:eolchar, 0Ah
.text:00000000000026A5
.text:00000000000026A5 loc_26A5:                               ; CODE XREF: main+6B9↑j
.text:00000000000026A5                 mov     rdi, cs:numeric_suffix_start ; nptr
.text:00000000000026AC                 lea     r13d, [r12-5]
.text:00000000000026B1                 test    rdi, rdi
.text:00000000000026B4                 jz      loc_2927
.text:00000000000026BA                 cmp     r13d, 2
.text:00000000000026BE                 mov     cs:suffix_auto, 0
.text:00000000000026C5                 jbe     loc_29A6
.text:00000000000026CB
.text:00000000000026CB loc_26CB:                               ; CODE XREF: main+94F↓j
.text:00000000000026CB                 xor     r14d, r14d
.text:00000000000026CE                 cmp     cs:suffix_length, 0
.text:00000000000026D6                 jnz     loc_299A
.text:00000000000026DC
.text:00000000000026DC loc_26DC:                               ; CODE XREF: main+9AB↓j
.text:00000000000026DC                 cmp     r14, 2
.text:00000000000026E0                 mov     eax, 2
.text:00000000000026E5                 cmovnb  rax, r14
.text:00000000000026E9                 mov     cs:suffix_length, rax
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: main+9C1↓j
.text:00000000000026F0                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000026F6                 cmp     eax, ebp
.text:00000000000026F8                 jge     short loc_273A
.text:00000000000026FA                 movsxd  rcx, eax
.text:00000000000026FD                 lea     edx, [rax+1]
.text:0000000000002700                 lea     rsi, ds:0[rcx*8]
.text:0000000000002708                 mov     rcx, [rbx+rcx*8]
.text:000000000000270C                 cmp     edx, ebp
.text:000000000000270E                 mov     cs:optind@@GLIBC_2_2_5, edx
.text:0000000000002714                 mov     cs:infile, rcx
.text:000000000000271B                 jge     short loc_273A
.text:000000000000271D                 mov     rdx, [rbx+rsi+8]
.text:0000000000002722                 add     eax, 2
.text:0000000000002725                 cmp     eax, ebp
.text:0000000000002727                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:000000000000272D                 mov     cs:outbase, rdx
.text:0000000000002734                 jl      loc_3A62
.text:000000000000273A
.text:000000000000273A loc_273A:                               ; CODE XREF: main+718↑j
.text:000000000000273A                                         ; main+73B↑j
.text:000000000000273A                 mov     rdi, cs:numeric_suffix_start
.text:0000000000002741                 test    rdi, rdi
.text:0000000000002744                 jz      short loc_2771
.text:0000000000002746                 xor     eax, eax
.text:0000000000002748                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000274C                 mov     edx, 5
.text:0000000000002751                 repne scasb
.text:0000000000002753                 lea     rsi, aNumericalSuffi ; "numerical suffix start value is too lar"...
.text:000000000000275A                 mov     rax, rcx
.text:000000000000275D                 not     rax
.text:0000000000002760                 sub     rax, 1
.text:0000000000002764                 cmp     rax, cs:suffix_length
.text:000000000000276B                 ja      loc_3917
.text:0000000000002771
.text:0000000000002771 loc_2771:                               ; CODE XREF: main+764↑j
.text:0000000000002771                 mov     rbx, cs:infile
.text:0000000000002778                 lea     rsi, aLt+2      ; s2
.text:000000000000277F                 mov     rdi, rbx        ; s1
.text:0000000000002782                 call    _strcmp
.text:0000000000002787                 test    eax, eax
.text:0000000000002789                 jz      short loc_27A1
.text:000000000000278B                 xor     ecx, ecx
.text:000000000000278D                 xor     edx, edx        ; oflag
.text:000000000000278F                 xor     edi, edi        ; fd2
.text:0000000000002791                 mov     rsi, rbx        ; file
.text:0000000000002794                 call    fd_reopen
.text:0000000000002799                 test    eax, eax
.text:000000000000279B                 js      loc_3A1F
.text:00000000000027A1
.text:00000000000027A1 loc_27A1:                               ; CODE XREF: main+7A9↑j
.text:00000000000027A1                 lea     rdx, in_stat_buf ; stat_buf
.text:00000000000027A8                 xor     esi, esi        ; fildes
.text:00000000000027AA                 mov     edi, 1          ; ver
.text:00000000000027AF                 call    ___fxstat
.text:00000000000027B4                 test    eax, eax
.text:00000000000027B6                 jnz     loc_39EC
.text:00000000000027BC                 cmp     [rsp+178h+nbytes], 0
.text:00000000000027C2                 jnz     short loc_27ED
.text:00000000000027C4                 mov     rsi, cs:in_stat_buf.st_blksize
.text:00000000000027CB                 mov     rax, 1FFFFFFFFFFE0000h
.text:00000000000027D5                 lea     rdx, [rsi-20000h]
.text:00000000000027DC                 cmp     rdx, rax
.text:00000000000027DF                 mov     eax, 20000h
.text:00000000000027E4                 cmovbe  rax, rsi
.text:00000000000027E8                 mov     [rsp+178h+nbytes], rax
.text:00000000000027ED
.text:00000000000027ED loc_27ED:                               ; CODE XREF: main+7E2↑j
.text:00000000000027ED                 mov     rbx, [rsp+178h+ptr]
.text:00000000000027F2                 mov     rdi, [rsp+178h+nbytes]
.text:00000000000027F7                 or      rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000027FB                 add     rdi, rbx
.text:00000000000027FE                 call    xmalloc
.text:0000000000002803                 lea     rcx, [rax+rbx-1]
.text:0000000000002808                 xor     edx, edx
.text:000000000000280A                 mov     rax, rcx
.text:000000000000280D                 div     rbx
.text:0000000000002810                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000281A                 mov     [rsp+178h+var_160], rax
.text:000000000000281F                 sub     rcx, rdx
.text:0000000000002822                 cmp     r13d, 1
.text:0000000000002826                 mov     [rsp+178h+s], rcx
.text:000000000000282B                 jbe     loc_29EF
.text:0000000000002831
.text:0000000000002831 loc_2831:                               ; CODE XREF: main+A9C↓j
.text:0000000000002831                 cmp     cs:filter_command, 0
.text:0000000000002839                 jz      short loc_288C
.text:000000000000283B                 lea     rdi, newblocked ; set
.text:0000000000002842                 call    _sigemptyset
.text:0000000000002847                 lea     rdx, [rsp+178h+var_F8] ; oact
.text:000000000000284F                 xor     esi, esi        ; act
.text:0000000000002851                 mov     edi, 0Dh        ; sig
.text:0000000000002856                 call    _sigaction
.text:000000000000285B                 cmp     [rsp+178h+var_F8], 1
.text:0000000000002864                 jz      short loc_2877
.text:0000000000002866                 lea     rdi, newblocked ; set
.text:000000000000286D                 mov     esi, 0Dh        ; signo
.text:0000000000002872                 call    _sigaddset
.text:0000000000002877
.text:0000000000002877 loc_2877:                               ; CODE XREF: main+884↑j
.text:0000000000002877                 lea     rdx, oldblocked ; oset
.text:000000000000287E                 lea     rsi, newblocked ; set
.text:0000000000002885                 xor     edi, edi        ; how
.text:0000000000002887                 call    _sigprocmask
.text:000000000000288C
.text:000000000000288C loc_288C:                               ; CODE XREF: main+859↑j
.text:000000000000288C                 sub     r12d, 2         ; switch 6 cases
.text:0000000000002890                 cmp     r12d, 5
.text:0000000000002894                 ja      def_28A8        ; jumptable 00000000000028A8 default case
.text:000000000000289A                 lea     rdx, jpt_28A8
.text:00000000000028A1                 movsxd  rax, ds:(jpt_28A8 - 9B50h)[rdx+r12*4]
.text:00000000000028A5                 add     rax, rdx
.text:00000000000028A8                 jmp     rax             ; switch jump
.text:00000000000028AA ; ---------------------------------------------------------------------------
.text:00000000000028AA
.text:00000000000028AA loc_28AA:                               ; CODE XREF: main+3F6↑j
.text:00000000000028AA                 call    _dcgettext
.text:00000000000028AF                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000028B6                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000028BD                 mov     r8, rax
.text:00000000000028C0                 xor     r9d, r9d
.text:00000000000028C3                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000028C7                 mov     esi, 1
.text:00000000000028CC                 call    xdectoumax
.text:00000000000028D1                 mov     [rsp+178h+offset], rax
.text:00000000000028D5                 jmp     loc_2098
.text:00000000000028DA ; ---------------------------------------------------------------------------
.text:00000000000028DA
.text:00000000000028DA loc_28DA:                               ; CODE XREF: main+6A1↑j
.text:00000000000028DA                 mov     [rsp+178h+offset], 3E8h
.text:00000000000028E2                 mov     r12d, 3
.text:00000000000028E8                 jmp     loc_2692
.text:00000000000028ED ; ---------------------------------------------------------------------------
.text:00000000000028ED
.text:00000000000028ED loc_28ED:                               ; CODE XREF: main+282↑j
.text:00000000000028ED                                         ; main+28B↑j
.text:00000000000028ED                 mov     rdi, [rsp+178h+offset]
.text:00000000000028F1                 mov     rax, 1999999999999999h
.text:00000000000028FB                 cmp     rdi, rax
.text:00000000000028FE                 ja      loc_3B63
.text:0000000000002904                 imul    rax, rdi, 0Ah
.text:0000000000002908                 lea     edx, [r15-30h]
.text:000000000000290C                 movsxd  rdx, edx
.text:000000000000290F                 add     rax, rdx
.text:0000000000002912                 cmp     rax, rdi
.text:0000000000002915                 jb      loc_3B63
.text:000000000000291B                 mov     [rsp+178h+offset], rax
.text:000000000000291F                 mov     r14d, r13d
.text:0000000000002922                 jmp     loc_2098
.text:0000000000002927 ; ---------------------------------------------------------------------------
.text:0000000000002927
.text:0000000000002927 loc_2927:                               ; CODE XREF: main+6D4↑j
.text:0000000000002927                 cmp     r13d, 2
.text:000000000000292B                 mov     rdx, [rsp+178h+offset]
.text:000000000000292F                 ja      loc_26CB
.text:0000000000002935
.text:0000000000002935 loc_2935:                               ; CODE XREF: main+9E7↓j
.text:0000000000002935                                         ; main+A0A↓j ...
.text:0000000000002935                 mov     rdi, cs:suffix_alphabet
.text:000000000000293C                 xor     eax, eax
.text:000000000000293E                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002942                 repne scasb
.text:0000000000002944                 mov     rax, rdx
.text:0000000000002947                 xor     edx, edx
.text:0000000000002949                 not     rcx
.text:000000000000294C                 sub     rcx, 1
.text:0000000000002950                 div     rcx
.text:0000000000002953                 test    rdx, rdx
.text:0000000000002956                 setnz   dil
.text:000000000000295A                 test    rax, rax
.text:000000000000295D                 jz      short loc_2972
.text:000000000000295F                 xor     esi, esi
.text:0000000000002961
.text:0000000000002961 loc_2961:                               ; CODE XREF: main+98D↓j
.text:0000000000002961                 xor     edx, edx
.text:0000000000002963                 add     rsi, 1
.text:0000000000002967                 div     rcx
.text:000000000000296A                 test    rax, rax
.text:000000000000296D                 jnz     short loc_2961
.text:000000000000296F                 mov     rax, rsi
.text:0000000000002972
.text:0000000000002972 loc_2972:                               ; CODE XREF: main+97D↑j
.text:0000000000002972                 movzx   edi, dil
.text:0000000000002976                 mov     cs:suffix_auto, 0
.text:000000000000297D                 lea     r14, [rdi+rax]
.text:0000000000002981                 mov     rax, cs:suffix_length
.text:0000000000002988                 test    rax, rax
.text:000000000000298B                 jz      loc_26DC
.text:0000000000002991                 cmp     r14, rax
.text:0000000000002994                 ja      loc_3B3C
.text:000000000000299A
.text:000000000000299A loc_299A:                               ; CODE XREF: main+6F6↑j
.text:000000000000299A                 mov     cs:suffix_auto, 0
.text:00000000000029A1                 jmp     loc_26F0
.text:00000000000029A6 ; ---------------------------------------------------------------------------
.text:00000000000029A6
.text:00000000000029A6 loc_29A6:                               ; CODE XREF: main+6E5↑j
.text:00000000000029A6                 lea     rcx, [rsp+178h+var_100]
.text:00000000000029AB                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:00000000000029B2                 mov     edx, 0Ah
.text:00000000000029B7                 xor     esi, esi
.text:00000000000029B9                 call    xstrtoumax
.text:00000000000029BE                 mov     rcx, [rsp+178h+offset]
.text:00000000000029C2                 test    eax, eax
.text:00000000000029C4                 mov     rdx, rcx
.text:00000000000029C7                 jnz     loc_2935
.text:00000000000029CD                 mov     rdx, [rsp+178h+var_100]
.text:00000000000029D2                 mov     rax, rcx
.text:00000000000029D5                 not     rax
.text:00000000000029D8                 cmp     rax, rdx
.text:00000000000029DB                 jb      short loc_29E6
.text:00000000000029DD                 cmp     rdx, rcx
.text:00000000000029E0                 jb      loc_3854
.text:00000000000029E6
.text:00000000000029E6 loc_29E6:                               ; CODE XREF: main+9FB↑j
.text:00000000000029E6                 mov     rdx, [rsp+178h+offset]
.text:00000000000029EA                 jmp     loc_2935
.text:00000000000029EF ; ---------------------------------------------------------------------------
.text:00000000000029EF
.text:00000000000029EF loc_29EF:                               ; CODE XREF: main+84B↑j
.text:00000000000029EF                 xor     esi, esi        ; offset
.text:00000000000029F1                 xor     edi, edi        ; fd
.text:00000000000029F3                 mov     edx, 1          ; whence
.text:00000000000029F8                 call    _lseek
.text:00000000000029FD                 xor     r13d, r13d
.text:0000000000002A00                 test    rax, rax
.text:0000000000002A03                 mov     rbx, rax
.text:0000000000002A06                 js      loc_2F6A
.text:0000000000002A0C                 mov     r14, [rsp+178h+nbytes]
.text:0000000000002A11                 mov     r15, [rsp+178h+s]
.text:0000000000002A16                 jmp     short loc_2A33
.text:0000000000002A18 ; ---------------------------------------------------------------------------
.text:0000000000002A18
.text:0000000000002A18 loc_2A18:                               ; CODE XREF: main+A67↓j
.text:0000000000002A18                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A1C                 jz      loc_2F7A
.text:0000000000002A22                 lea     rbp, [r13+rax+0]
.text:0000000000002A27                 cmp     r14, rbp
.text:0000000000002A2A                 mov     r13, rbp
.text:0000000000002A2D                 jbe     loc_37B5
.text:0000000000002A33
.text:0000000000002A33 loc_2A33:                               ; CODE XREF: main+A36↑j
.text:0000000000002A33                 mov     rdx, r14
.text:0000000000002A36                 lea     rsi, [r15+r13]  ; buf
.text:0000000000002A3A                 xor     edi, edi        ; fd
.text:0000000000002A3C                 sub     rdx, r13        ; nbytes
.text:0000000000002A3F                 call    safe_read
.text:0000000000002A44                 test    rax, rax
.text:0000000000002A47                 jnz     short loc_2A18
.text:0000000000002A49
.text:0000000000002A49 loc_2A49:                               ; CODE XREF: main+184C↓j
.text:0000000000002A49                 test    r13, r13
.text:0000000000002A4C                 js      loc_2F7A
.text:0000000000002A52                 mov     rax, [rsp+178h+nbytes]
.text:0000000000002A57                 cmp     r13, rax
.text:0000000000002A5A                 mov     rbp, rax
.text:0000000000002A5D                 cmovbe  rbp, r13
.text:0000000000002A61                 cmp     [rsp+178h+offset], 0
.text:0000000000002A66                 js      loc_3AB7
.text:0000000000002A6C                 mov     rax, [rsp+178h+offset]
.text:0000000000002A70                 cmp     r13, rax
.text:0000000000002A73                 cmovb   r13, rax
.text:0000000000002A77                 mov     [rsp+178h+var_160], r13
.text:0000000000002A7C                 jmp     loc_2831
.text:0000000000002A81 ; ---------------------------------------------------------------------------
.text:0000000000002A81
.text:0000000000002A81 loc_2A81:                               ; CODE XREF: main+8C8↑j
.text:0000000000002A81                                         ; DATA XREF: .rodata:jpt_28A8↓o
.text:0000000000002A81                 mov     r15, [rsp+178h+offset] ; jumptable 00000000000028A8 cases 3,4
.text:0000000000002A85                 xor     ebx, ebx
.text:0000000000002A87                 mov     r13d, 1
.text:0000000000002A8D
.text:0000000000002A8D loc_2A8D:                               ; CODE XREF: main+10A0↓j
.text:0000000000002A8D                 mov     rdx, [rsp+178h+nbytes] ; nbytes
.text:0000000000002A92                 mov     rsi, [rsp+178h+s] ; buf
.text:0000000000002A97                 xor     edi, edi        ; fd
.text:0000000000002A99                 call    safe_read
.text:0000000000002A9E                 mov     [rsp+178h+ptr], rax
.text:0000000000002AA3                 add     rax, 1
.text:0000000000002AA7                 jz      loc_395A
.text:0000000000002AAD                 mov     rax, [rsp+178h+s]
.text:0000000000002AB2                 mov     rbp, [rsp+178h+ptr]
.text:0000000000002AB7                 mov     r12d, cs:eolchar
.text:0000000000002ABE                 add     rbp, rax
.text:0000000000002AC1                 mov     r14, rax
.text:0000000000002AC4                 mov     rcx, rax
.text:0000000000002AC7                 mov     [rbp+0], r12b
.text:0000000000002ACB                 nop     dword ptr [rax+rax+00h]
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: main+B19↓j
.text:0000000000002AD0                                         ; main+B47↓j
.text:0000000000002AD0                 mov     rdx, rbp
.text:0000000000002AD3                 mov     esi, r12d       ; c
.text:0000000000002AD6                 mov     rdi, rcx        ; s
.text:0000000000002AD9                 sub     rdx, rcx
.text:0000000000002ADC                 add     rdx, 1          ; n
.text:0000000000002AE0                 call    _memchr
.text:0000000000002AE5                 cmp     rbp, rax
.text:0000000000002AE8                 jz      loc_3060
.text:0000000000002AEE                 add     rbx, 1
.text:0000000000002AF2                 lea     rcx, [rax+1]
.text:0000000000002AF6                 cmp     rbx, r15
.text:0000000000002AF9                 jb      short loc_2AD0
.text:0000000000002AFB                 mov     rdx, rcx
.text:0000000000002AFE                 movzx   edi, r13b
.text:0000000000002B02                 mov     rsi, r14
.text:0000000000002B05                 sub     rdx, r14
.text:0000000000002B08                 mov     [rsp+178h+offset], rcx
.text:0000000000002B0C                 xor     ebx, ebx
.text:0000000000002B0E                 call    cwrite
.text:0000000000002B13                 mov     rcx, [rsp+178h+offset]
.text:0000000000002B17                 mov     r12d, cs:eolchar
.text:0000000000002B1E                 mov     r13d, 1
.text:0000000000002B24                 mov     r14, rcx
.text:0000000000002B27                 jmp     short loc_2AD0
.text:0000000000002B29 ; ---------------------------------------------------------------------------
.text:0000000000002B29
.text:0000000000002B29 loc_2B29:                               ; CODE XREF: main+8C8↑j
.text:0000000000002B29                                         ; DATA XREF: .rodata:jpt_28A8↓o
.text:0000000000002B29                 mov     byte ptr [rsp+178h+var_168], 0 ; jumptable 00000000000028A8 case 2
.text:0000000000002B2E                 mov     [rsp+178h+var_160], 0
.text:0000000000002B37                 xor     r12d, r12d
.text:0000000000002B3A                 mov     [rsp+178h+ptr], 0
.text:0000000000002B43                 xor     r13d, r13d
.text:0000000000002B46                 db      2Eh
.text:0000000000002B46                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: main+C09↓j
.text:0000000000002B50                                         ; main+106E↓j
.text:0000000000002B50                 mov     rdx, [rsp+178h+nbytes] ; nbytes
.text:0000000000002B55                 mov     rsi, [rsp+178h+s] ; buf
.text:0000000000002B5A                 xor     edi, edi        ; fd
.text:0000000000002B5C                 call    safe_read
.text:0000000000002B61                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B65                 mov     rbp, rax
.text:0000000000002B68                 jz      loc_39B9
.text:0000000000002B6E                 test    rax, rax
.text:0000000000002B71                 jz      loc_30B2
.text:0000000000002B77                 mov     rbx, [rsp+178h+s]
.text:0000000000002B7C                 jmp     short loc_2BEF
.text:0000000000002B7C ; ---------------------------------------------------------------------------
.text:0000000000002B7E                 align 20h
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: main+C25↓j
.text:0000000000002B80                 mov     rdx, rcx        ; n
.text:0000000000002B83                 mov     rdi, rbx        ; s
.text:0000000000002B86                 lea     r14, [rbx+rcx-1]
.text:0000000000002B8B                 call    _memrchr
.text:0000000000002B90                 test    r12, r12
.text:0000000000002B93                 mov     r8, rax
.text:0000000000002B96                 jz      loc_2C28
.text:0000000000002B9C
.text:0000000000002B9C loc_2B9C:                               ; CODE XREF: main+C42↓j
.text:0000000000002B9C                 test    r13, r13
.text:0000000000002B9F                 setz    dil
.text:0000000000002BA3                 test    r8, r8
.text:0000000000002BA6                 jnz     loc_2FE8
.text:0000000000002BAC                 test    dil, dil
.text:0000000000002BAF                 jnz     loc_2FE8
.text:0000000000002BB5
.text:0000000000002BB5 loc_2BB5:                               ; CODE XREF: main+107B↓j
.text:0000000000002BB5                 cmp     byte ptr [rsp+178h+var_168], 0
.text:0000000000002BBA                 jnz     loc_2C69
.text:0000000000002BC0                 xor     edi, edi
.text:0000000000002BC2                 test    r13, r13
.text:0000000000002BC5                 setz    dil
.text:0000000000002BC9                 test    r14, r14
.text:0000000000002BCC                 jz      loc_3040
.text:0000000000002BD2                 mov     rsi, rbx
.text:0000000000002BD5                 mov     rdx, r15
.text:0000000000002BD8                 sub     rbp, r15
.text:0000000000002BDB                 add     rbx, r15
.text:0000000000002BDE                 xor     r13d, r13d
.text:0000000000002BE1                 call    cwrite
.text:0000000000002BE6
.text:0000000000002BE6 loc_2BE6:                               ; CODE XREF: main+D14↓j
.text:0000000000002BE6                 test    rbp, rbp
.text:0000000000002BE9                 jz      loc_2B50
.text:0000000000002BEF
.text:0000000000002BEF loc_2BEF:                               ; CODE XREF: main+B9C↑j
.text:0000000000002BEF                 mov     rcx, [rsp+178h+offset]
.text:0000000000002BF3                 mov     esi, cs:eolchar ; c
.text:0000000000002BF9                 sub     rcx, r13
.text:0000000000002BFC                 sub     rcx, r12
.text:0000000000002BFF                 cmp     rbp, rcx
.text:0000000000002C02                 mov     r15, rcx
.text:0000000000002C05                 jnb     loc_2B80
.text:0000000000002C0B                 mov     rdx, rbp        ; n
.text:0000000000002C0E                 mov     rdi, rbx        ; s
.text:0000000000002C11                 xor     r14d, r14d
.text:0000000000002C14                 call    _memrchr
.text:0000000000002C19                 xor     r15d, r15d
.text:0000000000002C1C                 test    r12, r12
.text:0000000000002C1F                 mov     r8, rax
.text:0000000000002C22                 jnz     loc_2B9C
.text:0000000000002C28
.text:0000000000002C28 loc_2C28:                               ; CODE XREF: main+BB6↑j
.text:0000000000002C28                                         ; main+1033↓j ...
.text:0000000000002C28                 test    r8, r8
.text:0000000000002C2B                 jz      loc_3058
.text:0000000000002C31                 sub     r8, rbx
.text:0000000000002C34                 xor     edi, edi
.text:0000000000002C36                 test    r13, r13
.text:0000000000002C39                 lea     r12, [r8+1]
.text:0000000000002C3D                 setz    dil
.text:0000000000002C41                 mov     rsi, rbx
.text:0000000000002C44                 mov     rdx, r12
.text:0000000000002C47                 add     r13, r12
.text:0000000000002C4A                 sub     rbp, r12
.text:0000000000002C4D                 call    cwrite
.text:0000000000002C52                 add     rbx, r12
.text:0000000000002C55                 test    r14, r14
.text:0000000000002C58                 jz      loc_2FC0
.text:0000000000002C5E                 sub     r15, r12
.text:0000000000002C61                 mov     byte ptr [rsp+178h+var_168], 1
.text:0000000000002C66                 xor     r12d, r12d
.text:0000000000002C69
.text:0000000000002C69 loc_2C69:                               ; CODE XREF: main+BDA↑j
.text:0000000000002C69                 test    r14, r14
.text:0000000000002C6C                 jz      loc_2FC8
.text:0000000000002C72                 test    r15, r15
.text:0000000000002C75                 jz      loc_2FC8
.text:0000000000002C7B
.text:0000000000002C7B loc_2C7B:                               ; CODE XREF: main+FFD↓j
.text:0000000000002C7B                 mov     rcx, [rsp+178h+var_160]
.text:0000000000002C80                 mov     rax, rcx
.text:0000000000002C83                 sub     rax, r12
.text:0000000000002C86                 cmp     rax, r15
.text:0000000000002C89                 jnb     short loc_2CB9
.text:0000000000002C8B                 mov     rsi, [rsp+178h+nbytes]
.text:0000000000002C90                 mov     rax, rsi
.text:0000000000002C93                 not     rax
.text:0000000000002C96                 cmp     rax, rcx
.text:0000000000002C99                 jb      loc_3936
.text:0000000000002C9F                 mov     rdi, [rsp+178h+ptr]
.text:0000000000002CA4                 add     rcx, rsi
.text:0000000000002CA7                 mov     rsi, rcx
.text:0000000000002CAA                 mov     [rsp+178h+var_160], rcx
.text:0000000000002CAF                 call    xrealloc
.text:0000000000002CB4                 mov     [rsp+178h+ptr], rax
.text:0000000000002CB9
.text:0000000000002CB9 loc_2CB9:                               ; CODE XREF: main+CA9↑j
.text:0000000000002CB9                 mov     rax, [rsp+178h+ptr]
.text:0000000000002CBE                 mov     rsi, rbx        ; src
.text:0000000000002CC1                 mov     rdx, r15        ; n
.text:0000000000002CC4                 sub     rbp, r15
.text:0000000000002CC7                 add     rbx, r15
.text:0000000000002CCA                 lea     rdi, [rax+r12]  ; dest
.text:0000000000002CCE                 add     r12, r15
.text:0000000000002CD1                 call    _memcpy
.text:0000000000002CD6
.text:0000000000002CD6 loc_2CD6:                               ; CODE XREF: main+FEB↓j
.text:0000000000002CD6                                         ; main+FF4↓j
.text:0000000000002CD6                 movzx   edi, byte ptr [rsp+178h+var_168]
.text:0000000000002CDB                 test    r14, r14
.text:0000000000002CDE                 mov     eax, 0
.text:0000000000002CE3                 cmovnz  edi, eax
.text:0000000000002CE6                 mov     eax, 0
.text:0000000000002CEB                 mov     byte ptr [rsp+178h+var_168], dil
.text:0000000000002CF0                 cmovnz  r13, rax
.text:0000000000002CF4                 jmp     loc_2BE6
.text:0000000000002CF9 ; ---------------------------------------------------------------------------
.text:0000000000002CF9
.text:0000000000002CF9 loc_2CF9:                               ; CODE XREF: main+8C8↑j
.text:0000000000002CF9                                         ; DATA XREF: .rodata:jpt_28A8↓o
.text:0000000000002CF9                 mov     rax, [rsp+178h+offset] ; jumptable 00000000000028A8 case 6
.text:0000000000002CFD                 cmp     [rsp+178h+var_168], rax
.text:0000000000002D02                 ja      loc_3BA8
.text:0000000000002D08                 cmp     [rsp+178h+var_160], rax
.text:0000000000002D0D                 jb      loc_3BA8
.text:0000000000002D13                 mov     rax, [rsp+178h+var_160]
.text:0000000000002D18                 xor     edx, edx
.text:0000000000002D1A                 mov     rsi, [rsp+178h+var_168]
.text:0000000000002D1F                 div     [rsp+178h+offset]
.text:0000000000002D23                 cmp     rsi, 1
.text:0000000000002D27                 mov     [rsp+178h+ptr], rax
.text:0000000000002D2C                 jbe     loc_374C
.text:0000000000002D32                 lea     r12, [rsi-1]
.text:0000000000002D36                 imul    rax, r12
.text:0000000000002D3A                 mov     rbx, rax
.text:0000000000002D3D                 sub     rbx, 1
.text:0000000000002D41                 cmp     rbp, rbx
.text:0000000000002D44                 mov     r13, rbx
.text:0000000000002D47                 jbe     loc_36F5
.text:0000000000002D4D                 mov     rdi, [rsp+178h+s] ; dest
.text:0000000000002D52                 sub     rbp, rbx
.text:0000000000002D55                 mov     rdx, rbp        ; n
.text:0000000000002D58                 lea     rsi, [rdi+rbx]  ; src
.text:0000000000002D5C                 call    _memmove
.text:0000000000002D61                 mov     [rsp+178h+var_158], rbx
.text:0000000000002D66
.text:0000000000002D66 loc_2D66:                               ; CODE XREF: main+1733↓j
.text:0000000000002D66                                         ; main+1784↓j
.text:0000000000002D66                 mov     rax, [rsp+178h+var_160]
.text:0000000000002D6B                 mov     rbx, [rsp+178h+var_168]
.text:0000000000002D70                 mov     [rsp+178h+var_111], 0
.text:0000000000002D75                 mov     byte ptr [rsp+178h+var_128], 1
.text:0000000000002D7A                 sub     rax, 1
.text:0000000000002D7E                 mov     [rsp+178h+var_110], rax
.text:0000000000002D83
.text:0000000000002D83 loc_2D83:                               ; CODE XREF: main+18F1↓j
.text:0000000000002D83                 mov     rdi, [rsp+178h+var_158]
.text:0000000000002D88                 cmp     [rsp+178h+var_160], rdi
.text:0000000000002D8D                 jle     loc_38D6
.text:0000000000002D93                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D97                 jz      loc_385C
.text:0000000000002D9D
.text:0000000000002D9D loc_2D9D:                               ; CODE XREF: main+1894↓j
.text:0000000000002D9D                 test    rbp, rbp
.text:0000000000002DA0                 jz      loc_38D6
.text:0000000000002DA6                 mov     rax, [rsp+178h+var_160]
.text:0000000000002DAB                 sub     rax, [rsp+178h+var_158]
.text:0000000000002DB0                 mov     r8, [rsp+178h+s]
.text:0000000000002DB5                 mov     [rsp+178h+var_111], 0
.text:0000000000002DBA                 cmp     rax, rbp
.text:0000000000002DBD                 mov     r14, r8
.text:0000000000002DC0                 cmovbe  rbp, rax
.text:0000000000002DC4                 add     r14, rbp
.text:0000000000002DC7                 mov     [rsp+178h+var_140], rbp
.text:0000000000002DCC                 mov     rbp, [rsp+178h+offset]
.text:0000000000002DD0                 mov     r15, r14
.text:0000000000002DD3                 mov     r14, [rsp+178h+var_110]
.text:0000000000002DD8
.text:0000000000002DD8 loc_2DD8:                               ; CODE XREF: main+10CD↓j
.text:0000000000002DD8                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002DDC                 cmp     r15, r8
.text:0000000000002DDF                 jz      loc_38CE
.text:0000000000002DE5                 mov     rax, r13
.text:0000000000002DE8                 sub     rax, [rsp+178h+var_158]
.text:0000000000002DED                 mov     rsi, [rsp+178h+var_140]
.text:0000000000002DF2                 mov     edx, 0
.text:0000000000002DF7                 mov     [rsp+178h+buf], r8
.text:0000000000002DFC                 cmovs   rax, rdx
.text:0000000000002E00                 cmp     rax, rsi
.text:0000000000002E03                 cmova   rax, rsi
.text:0000000000002E07                 sub     rsi, rax
.text:0000000000002E0A                 lea     rdi, [r8+rax]   ; s
.text:0000000000002E0E                 mov     rdx, rsi        ; n
.text:0000000000002E11                 mov     esi, cs:eolchar ; c
.text:0000000000002E17                 call    _memchr
.text:0000000000002E1C                 test    rax, rax
.text:0000000000002E1F                 mov     r8, [rsp+178h+buf]
.text:0000000000002E24                 jz      loc_34AB
.text:0000000000002E2A                 lea     r9, [rax+1]
.text:0000000000002E2E                 mov     byte ptr [rsp+178h+var_148], 1
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: main+14D3↓j
.text:0000000000002E33                 mov     rax, r9
.text:0000000000002E36                 sub     rax, r8
.text:0000000000002E39                 cmp     r12, rbx
.text:0000000000002E3C                 mov     [rsp+178h+buf], rax
.text:0000000000002E41                 jz      loc_34D9
.text:0000000000002E47                 test    rbx, rbx
.text:0000000000002E4A                 jz      loc_34B8
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: main+14F4↓j
.text:0000000000002E50                                         ; main+1518↓j
.text:0000000000002E50                 mov     rcx, [rsp+178h+var_158]
.text:0000000000002E55                 add     rcx, [rsp+178h+buf]
.text:0000000000002E5A                 movzx   r8d, byte ptr [rsp+178h+var_148]
.text:0000000000002E60                 mov     [rsp+178h+var_158], rcx
.text:0000000000002E65                 nop     dword ptr [rax]
.text:0000000000002E68
.text:0000000000002E68 loc_2E68:                               ; CODE XREF: main+ED6↓j
.text:0000000000002E68                                         ; main+F05↓j ...
.text:0000000000002E68                 cmp     rcx, r13
.text:0000000000002E6B                 jg      short loc_2E76
.text:0000000000002E6D                 test    r8b, r8b
.text:0000000000002E70                 jz      loc_3097
.text:0000000000002E76
.text:0000000000002E76 loc_2E76:                               ; CODE XREF: main+E8B↑j
.text:0000000000002E76                 mov     eax, r8d
.text:0000000000002E79                 xor     eax, 1
.text:0000000000002E7C                 cmp     r15, r9
.text:0000000000002E7F                 setz    dl
.text:0000000000002E82                 and     al, dl
.text:0000000000002E84                 jnz     loc_3093
.text:0000000000002E8A                 add     r12, 1
.text:0000000000002E8E                 test    rbx, rbx
.text:0000000000002E91                 setnz   dl
.text:0000000000002E94                 cmp     r12, rbx
.text:0000000000002E97                 setnbe  al
.text:0000000000002E9A                 test    dl, al
.text:0000000000002E9C                 jnz     short loc_2F16
.text:0000000000002E9E                 add     r13, [rsp+178h+ptr]
.text:0000000000002EA3                 cmp     r12, rbp
.text:0000000000002EA6                 cmovz   r13, r14
.text:0000000000002EAA                 cmp     rcx, r13
.text:0000000000002EAD                 jle     loc_308B
.text:0000000000002EB3                 test    rbx, rbx
.text:0000000000002EB6                 jnz     short loc_2E68
.text:0000000000002EB8                 xor     edx, edx
.text:0000000000002EBA                 xor     esi, esi
.text:0000000000002EBC                 mov     edi, 1
.text:0000000000002EC1                 mov     [rsp+178h+var_112], r8b
.text:0000000000002EC6                 mov     [rsp+178h+var_120], rcx
.text:0000000000002ECB                 mov     [rsp+178h+var_128], r9
.text:0000000000002ED0                 call    cwrite
.text:0000000000002ED5                 mov     r9, [rsp+178h+var_128]
.text:0000000000002EDA                 mov     rcx, [rsp+178h+var_120]
.text:0000000000002EDF                 movzx   r8d, [rsp+178h+var_112]
.text:0000000000002EE5                 jmp     short loc_2E68
.text:0000000000002EE7 ; ---------------------------------------------------------------------------
.text:0000000000002EE7
.text:0000000000002EE7 loc_2EE7:                               ; CODE XREF: main+8C8↑j
.text:0000000000002EE7                                         ; DATA XREF: .rodata:jpt_28A8↓o
.text:0000000000002EE7                 cmp     [rsp+178h+var_168], 0 ; jumptable 00000000000028A8 case 5
.text:0000000000002EED                 jnz     loc_358F
.text:0000000000002EF3                 mov     rax, [rsp+178h+var_160]
.text:0000000000002EF8                 mov     r8, [rsp+178h+offset]
.text:0000000000002EFC                 xor     edx, edx
.text:0000000000002EFE                 mov     rsi, [rsp+178h+s]
.text:0000000000002F03                 mov     rcx, rbp
.text:0000000000002F06                 div     r8
.text:0000000000002F09                 mov     rdx, [rsp+178h+nbytes]
.text:0000000000002F0E                 mov     rdi, rax        ; offset
.text:0000000000002F11                 call    bytes_split
.text:0000000000002F16
.text:0000000000002F16 loc_2F16:                               ; CODE XREF: main+EBC↑j
.text:0000000000002F16                                         ; main+10A6↓j ...
.text:0000000000002F16                 xor     edi, edi        ; fd
.text:0000000000002F18                 call    _close
.text:0000000000002F1D                 test    eax, eax
.text:0000000000002F1F                 jnz     loc_3B09
.text:0000000000002F25                 mov     rcx, cs:outfile
.text:0000000000002F2C                 mov     edx, cs:filter_pid
.text:0000000000002F32                 xor     edi, edi
.text:0000000000002F34                 mov     esi, cs:output_desc
.text:0000000000002F3A                 call    closeout
.text:0000000000002F3F                 xor     eax, eax
.text:0000000000002F41                 mov     rcx, [rsp+178h+var_40]
.text:0000000000002F49                 xor     rcx, fs:28h
.text:0000000000002F52                 jnz     loc_3B04
.text:0000000000002F58                 add     rsp, 148h
.text:0000000000002F5F                 pop     rbx
.text:0000000000002F60                 pop     rbp
.text:0000000000002F61                 pop     r12
.text:0000000000002F63                 pop     r13
.text:0000000000002F65                 pop     r14
.text:0000000000002F67                 pop     r15
.text:0000000000002F69                 retn
.text:0000000000002F6A ; ---------------------------------------------------------------------------
.text:0000000000002F6A
.text:0000000000002F6A loc_2F6A:                               ; CODE XREF: main+A26↑j
.text:0000000000002F6A                 call    ___errno_location
.text:0000000000002F6F                 cmp     dword ptr [rax], 1Dh
.text:0000000000002F72                 jnz     short loc_2F7A
.text:0000000000002F74                 mov     dword ptr [rax], 0
.text:0000000000002F7A
.text:0000000000002F7A loc_2F7A:                               ; CODE XREF: main+A3C↑j
.text:0000000000002F7A                                         ; main+A6C↑j ...
.text:0000000000002F7A                 mov     rdx, cs:infile
.text:0000000000002F81                 mov     esi, 3
.text:0000000000002F86                 xor     edi, edi
.text:0000000000002F88                 call    quotearg_n_style_colon
.text:0000000000002F8D                 lea     rsi, aSCannotDetermi ; "%s: cannot determine file size"
.text:0000000000002F94                 mov     edx, 5          ; category
.text:0000000000002F99                 xor     edi, edi        ; domainname
.text:0000000000002F9B                 mov     rbp, rax
.text:0000000000002F9E                 call    _dcgettext
.text:0000000000002FA3                 mov     rbx, rax
.text:0000000000002FA6                 call    ___errno_location
.text:0000000000002FAB                 mov     esi, [rax]      ; errnum
.text:0000000000002FAD                 mov     rcx, rbp
.text:0000000000002FB0                 mov     rdx, rbx        ; format
.text:0000000000002FB3                 mov     edi, 1          ; status
.text:0000000000002FB8                 xor     eax, eax
.text:0000000000002FBA                 call    _error
.text:0000000000002FBF                 nop
.text:0000000000002FC0
.text:0000000000002FC0 loc_2FC0:                               ; CODE XREF: main+C78↑j
.text:0000000000002FC0                 xor     r12d, r12d
.text:0000000000002FC3                 mov     byte ptr [rsp+178h+var_168], 1
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: main+C8C↑j
.text:0000000000002FC8                                         ; main+C95↑j
.text:0000000000002FC8                 test    r14, r14
.text:0000000000002FCB                 jnz     loc_2CD6
.text:0000000000002FD1                 test    rbp, rbp
.text:0000000000002FD4                 jz      loc_2CD6
.text:0000000000002FDA                 mov     r15, rbp
.text:0000000000002FDD                 jmp     loc_2C7B
.text:0000000000002FDD ; ---------------------------------------------------------------------------
.text:0000000000002FE2                 align 8
.text:0000000000002FE8
.text:0000000000002FE8 loc_2FE8:                               ; CODE XREF: main+BC6↑j
.text:0000000000002FE8                                         ; main+BCF↑j
.text:0000000000002FE8                 mov     rsi, [rsp+178h+ptr]
.text:0000000000002FED                 movzx   edi, dil
.text:0000000000002FF1                 mov     rdx, r12
.text:0000000000002FF4                 mov     [rsp+178h+var_158], r8
.text:0000000000002FF9                 add     r13, r12
.text:0000000000002FFC                 call    cwrite
.text:0000000000003001                 mov     rax, [rsp+178h+nbytes]
.text:0000000000003006                 mov     r8, [rsp+178h+var_158]
.text:000000000000300B                 cmp     rax, r12
.text:000000000000300E                 mov     [rsp+178h+var_160], rax
.text:0000000000003013                 jnb     loc_2C28
.text:0000000000003019                 mov     rdi, [rsp+178h+ptr]
.text:000000000000301E                 mov     r12, rax
.text:0000000000003021                 mov     rsi, rax
.text:0000000000003024                 call    xrealloc
.text:0000000000003029                 mov     [rsp+178h+var_160], r12
.text:000000000000302E                 mov     [rsp+178h+ptr], rax
.text:0000000000003033                 mov     r8, [rsp+178h+var_158]
.text:0000000000003038                 jmp     loc_2C28
.text:0000000000003038 ; ---------------------------------------------------------------------------
.text:000000000000303D                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: main+BEC↑j
.text:0000000000003040                 mov     rdx, rbp
.text:0000000000003043                 mov     rsi, rbx
.text:0000000000003046                 add     r13, rbp
.text:0000000000003049                 call    cwrite
.text:000000000000304E                 jmp     loc_2B50
.text:000000000000304E ; ---------------------------------------------------------------------------
.text:0000000000003053                 align 8
.text:0000000000003058
.text:0000000000003058 loc_3058:                               ; CODE XREF: main+C4B↑j
.text:0000000000003058                 xor     r12d, r12d
.text:000000000000305B                 jmp     loc_2BB5
.text:0000000000003060 ; ---------------------------------------------------------------------------
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: main+B08↑j
.text:0000000000003060                 cmp     rbp, r14
.text:0000000000003063                 jz      short loc_307A
.text:0000000000003065                 mov     rdx, rbp
.text:0000000000003068                 movzx   edi, r13b
.text:000000000000306C                 mov     rsi, r14
.text:000000000000306F                 sub     rdx, r14
.text:0000000000003072                 xor     r13d, r13d
.text:0000000000003075                 call    cwrite
.text:000000000000307A
.text:000000000000307A loc_307A:                               ; CODE XREF: main+1083↑j
.text:000000000000307A                 cmp     [rsp+178h+ptr], 0
.text:0000000000003080                 jnz     loc_2A8D
.text:0000000000003086                 jmp     loc_2F16
.text:000000000000308B ; ---------------------------------------------------------------------------
.text:000000000000308B
.text:000000000000308B loc_308B:                               ; CODE XREF: main+ECD↑j
.text:000000000000308B                 xor     r8d, r8d
.text:000000000000308E                 jmp     loc_2E68
.text:0000000000003093 ; ---------------------------------------------------------------------------
.text:0000000000003093
.text:0000000000003093 loc_3093:                               ; CODE XREF: main+EA4↑j
.text:0000000000003093                 mov     [rsp+178h+var_111], al
.text:0000000000003097
.text:0000000000003097 loc_3097:                               ; CODE XREF: main+E90↑j
.text:0000000000003097                 movzx   eax, byte ptr [rsp+178h+var_148]
.text:000000000000309C                 mov     rcx, [rsp+178h+buf]
.text:00000000000030A1                 mov     r8, r9
.text:00000000000030A4                 sub     [rsp+178h+var_140], rcx
.text:00000000000030A9                 mov     byte ptr [rsp+178h+var_128], al
.text:00000000000030AD                 jmp     loc_2DD8
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B2
.text:00000000000030B2 loc_30B2:                               ; CODE XREF: main+B91↑j
.text:00000000000030B2                 test    r12, r12
.text:00000000000030B5                 jnz     loc_36DA
.text:00000000000030BB
.text:00000000000030BB loc_30BB:                               ; CODE XREF: main+1710↓j
.text:00000000000030BB                 mov     rdi, [rsp+178h+ptr] ; ptr
.text:00000000000030C0                 call    _free
.text:00000000000030C5                 jmp     loc_2F16
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CA
.text:00000000000030CA loc_30CA:                               ; CODE XREF: main+8C8↑j
.text:00000000000030CA                                         ; DATA XREF: .rodata:jpt_28A8↓o
.text:00000000000030CA                 cmp     [rsp+178h+var_168], 0 ; jumptable 00000000000028A8 case 7
.text:00000000000030D0                 jnz     short loc_314A
.text:00000000000030D2                 mov     edx, 20h ; ' '
.text:00000000000030D7                 xor     ecx, ecx
.text:00000000000030D9                 mov     rax, rdx
.text:00000000000030DC                 mul     [rsp+178h+offset]
.text:00000000000030E0                 jo      loc_3BFA
.text:00000000000030E6
.text:00000000000030E6 loc_30E6:                               ; CODE XREF: main+1C1F↓j
.text:00000000000030E6                 test    rax, rax
.text:00000000000030E9                 js      loc_3936
.text:00000000000030EF                 test    rcx, rcx
.text:00000000000030F2                 jnz     loc_3936
.text:00000000000030F8                 mov     r12, [rsp+178h+offset]
.text:00000000000030FC                 xor     ebp, ebp
.text:00000000000030FE                 mov     rdi, r12
.text:0000000000003101                 shl     rdi, 5
.text:0000000000003105                 call    xmalloc
.text:000000000000310A                 mov     [rsp+178h+var_148], rax
.text:000000000000310F                 mov     rbx, rax
.text:0000000000003112
.text:0000000000003112 loc_3112:                               ; CODE XREF: main+1168↓j
.text:0000000000003112                 call    next_file_name
.text:0000000000003117                 mov     rdi, cs:outfile ; src
.text:000000000000311E                 add     rbp, 1
.text:0000000000003122                 add     rbx, 20h ; ' '
.text:0000000000003126                 call    xstrdup
.text:000000000000312B                 mov     dword ptr [rbx-18h], 0FFFFFFFFh
.text:0000000000003132                 mov     [rbx-20h], rax
.text:0000000000003136                 mov     qword ptr [rbx-10h], 0
.text:000000000000313E                 mov     dword ptr [rbx-8], 0
.text:0000000000003145                 cmp     rbp, r12
.text:0000000000003148                 jnz     short loc_3112
.text:000000000000314A
.text:000000000000314A loc_314A:                               ; CODE XREF: main+10F0↑j
.text:000000000000314A                 mov     [rsp+178h+ptr], 1
.text:0000000000003153                 mov     [rsp+178h+var_160], 0
.text:000000000000315C                 mov     byte ptr [rsp+178h+var_140], 0
.text:0000000000003161                 mov     byte ptr [rsp+178h+buf], 0
.text:0000000000003166                 mov     byte ptr [rsp+178h+var_128], 0
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: main+11BB↓j
.text:000000000000316B                                         ; main+11FA↓j
.text:000000000000316B                 mov     rdx, [rsp+178h+nbytes] ; nbytes
.text:0000000000003170                 mov     rsi, [rsp+178h+s] ; buf
.text:0000000000003175                 xor     edi, edi        ; fd
.text:0000000000003177                 call    safe_read
.text:000000000000317C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003180                 jz      loc_3BC7
.text:0000000000003186                 test    rax, rax
.text:0000000000003189                 jz      loc_38AD
.text:000000000000318F                 mov     rdi, [rsp+178h+s]
.text:0000000000003194                 lea     rbp, [rdi+rax]
.text:0000000000003198                 cmp     rdi, rbp
.text:000000000000319B                 jz      short loc_316B
.text:000000000000319D                 mov     r13, rdi
.text:00000000000031A0                 jmp     short loc_31DC
.text:00000000000031A0 ; ---------------------------------------------------------------------------
.text:00000000000031A2                 align 8
.text:00000000000031A8
.text:00000000000031A8 loc_31A8:                               ; CODE XREF: main+1234↓j
.text:00000000000031A8                 cmp     [rsp+178h+ptr], rax
.text:00000000000031AD                 jz      loc_3300
.text:00000000000031B3
.text:00000000000031B3 loc_31B3:                               ; CODE XREF: main+1348↓j
.text:00000000000031B3                                         ; main+1473↓j
.text:00000000000031B3                 test    r15b, r15b
.text:00000000000031B6                 jz      short loc_31D4
.text:00000000000031B8                 mov     rdx, [rsp+178h+ptr]
.text:00000000000031BD                 cmp     rdx, [rsp+178h+offset]
.text:00000000000031C1                 mov     r13d, 1
.text:00000000000031C7                 lea     rax, [rdx+1]
.text:00000000000031CB                 cmovnz  r13, rax
.text:00000000000031CF                 mov     [rsp+178h+ptr], r13
.text:00000000000031D4
.text:00000000000031D4 loc_31D4:                               ; CODE XREF: main+11D6↑j
.text:00000000000031D4                                         ; main+12C7↓j ...
.text:00000000000031D4                 cmp     rbp, r12
.text:00000000000031D7                 mov     r13, r12
.text:00000000000031DA                 jz      short loc_316B
.text:00000000000031DC
.text:00000000000031DC loc_31DC:                               ; CODE XREF: main+11C0↑j
.text:00000000000031DC                 mov     rbx, rbp
.text:00000000000031DF                 mov     esi, cs:eolchar ; c
.text:00000000000031E5                 mov     rdi, r13        ; s
.text:00000000000031E8                 sub     rbx, r13
.text:00000000000031EB                 mov     rdx, rbx        ; n
.text:00000000000031EE                 call    _memchr
.text:00000000000031F3                 test    rax, rax
.text:00000000000031F6                 jz      loc_32F0
.text:00000000000031FC                 lea     r12, [rax+1]
.text:0000000000003200                 mov     r15d, 1
.text:0000000000003206                 mov     rbx, r12
.text:0000000000003209                 sub     rbx, r13
.text:000000000000320C
.text:000000000000320C loc_320C:                               ; CODE XREF: main+1316↓j
.text:000000000000320C                 mov     rax, [rsp+178h+var_168]
.text:0000000000003211                 test    rax, rax
.text:0000000000003214                 jnz     short loc_31A8
.text:0000000000003216                 mov     r14, [rsp+178h+var_160]
.text:000000000000321B                 mov     rdx, [rsp+178h+offset]
.text:000000000000321F                 mov     rdi, [rsp+178h+var_148]
.text:0000000000003224                 mov     rsi, r14
.text:0000000000003227                 shl     r14, 5
.text:000000000000322B                 call    ofile_open
.text:0000000000003230                 add     r14, [rsp+178h+var_148]
.text:0000000000003235                 or      byte ptr [rsp+178h+var_140], al
.text:0000000000003239                 call    ___errno_location
.text:000000000000323E                 cmp     cs:unbuffered, 0
.text:0000000000003245                 mov     [rsp+178h+var_158], rax
.text:000000000000324A                 jnz     loc_33E0
.text:0000000000003250                 mov     rcx, [r14+10h]  ; stream
.text:0000000000003254                 mov     edx, 1          ; n
.text:0000000000003259                 mov     rsi, rbx        ; size
.text:000000000000325C                 mov     rdi, r13        ; ptr
.text:000000000000325F                 call    _fwrite_unlocked
.text:0000000000003264                 cmp     rax, 1
.text:0000000000003268                 mov     rax, [rsp+178h+var_158]
.text:000000000000326D                 jnz     loc_3370
.text:0000000000003273
.text:0000000000003273 loc_3273:                               ; CODE XREF: main+1417↓j
.text:0000000000003273                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003276                 setz    al
.text:0000000000003279                 cmp     cs:filter_command, 0
.text:0000000000003281                 setnz   dl
.text:0000000000003284                 and     eax, edx
.text:0000000000003286                 mov     edx, 1
.text:000000000000328B                 test    al, al
.text:000000000000328D                 movzx   eax, byte ptr [rsp+178h+buf]
.text:0000000000003292                 cmovz   eax, edx
.text:0000000000003295                 mov     byte ptr [rsp+178h+buf], al
.text:0000000000003299
.text:0000000000003299 loc_3299:                               ; CODE XREF: main+139D↓j
.text:0000000000003299                                         ; main+142A↓j
.text:0000000000003299                 cmp     byte ptr [rsp+178h+var_140], 0
.text:000000000000329E                 jnz     loc_33B0
.text:00000000000032A4
.text:00000000000032A4 loc_32A4:                               ; CODE XREF: main+13F1↓j
.text:00000000000032A4                 test    r15b, r15b
.text:00000000000032A7                 jz      loc_31D4
.text:00000000000032AD                 add     [rsp+178h+var_160], 1
.text:00000000000032B3                 mov     rax, [rsp+178h+var_160]
.text:00000000000032B8                 cmp     rax, [rsp+178h+offset]
.text:00000000000032BC                 jnz     loc_31D4
.text:00000000000032C2                 cmp     byte ptr [rsp+178h+buf], 0
.text:00000000000032C7                 jz      loc_3531
.text:00000000000032CD                 movzx   eax, byte ptr [rsp+178h+buf]
.text:00000000000032D2                 mov     [rsp+178h+var_160], 0
.text:00000000000032DB                 mov     byte ptr [rsp+178h+buf], 0
.text:00000000000032E0                 mov     byte ptr [rsp+178h+var_128], al
.text:00000000000032E4                 jmp     loc_31D4
.text:00000000000032E4 ; ---------------------------------------------------------------------------
.text:00000000000032E9                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: main+1216↑j
.text:00000000000032F0                 mov     r12, rbp
.text:00000000000032F3                 xor     r15d, r15d
.text:00000000000032F6                 jmp     loc_320C
.text:00000000000032F6 ; ---------------------------------------------------------------------------
.text:00000000000032FB                 align 20h
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: main+11CD↑j
.text:0000000000003300                 cmp     cs:unbuffered, 0
.text:0000000000003307                 jnz     loc_3440
.text:000000000000330D                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003314                 mov     edx, 1          ; n
.text:0000000000003319                 mov     rsi, rbx        ; size
.text:000000000000331C                 mov     rdi, r13        ; ptr
.text:000000000000331F                 call    _fwrite_unlocked
.text:0000000000003324                 cmp     rax, 1
.text:0000000000003328                 jz      loc_31B3
.text:000000000000332E                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003335                 call    _clearerr_unlocked
.text:000000000000333A                 lea     rsi, aWriteError ; "write error"
.text:0000000000003341                 mov     edx, 5          ; category
.text:0000000000003346                 xor     edi, edi        ; domainname
.text:0000000000003348                 call    _dcgettext
.text:000000000000334D                 mov     rbx, rax
.text:0000000000003350                 call    ___errno_location
.text:0000000000003355                 mov     esi, [rax]      ; errnum
.text:0000000000003357                 lea     rdx, format+4   ; format
.text:000000000000335E                 mov     rcx, rbx
.text:0000000000003361                 mov     edi, 1          ; status
.text:0000000000003366                 xor     eax, eax
.text:0000000000003368                 call    _error
.text:000000000000336D                 nop     dword ptr [rax]
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: main+128D↑j
.text:0000000000003370                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003373                 jnz     short loc_3383
.text:0000000000003375                 cmp     cs:filter_command, 0
.text:000000000000337D                 jnz     loc_3299
.text:0000000000003383
.text:0000000000003383 loc_3383:                               ; CODE XREF: main+1393↑j
.text:0000000000003383                 mov     rdx, [r14]
.text:0000000000003386                 mov     esi, 3
.text:000000000000338B                 xor     edi, edi
.text:000000000000338D                 call    quotearg_n_style_colon
.text:0000000000003392                 mov     rcx, rax
.text:0000000000003395                 mov     rax, [rsp+178h+var_158]
.text:000000000000339A                 lea     rdx, format+4   ; format
.text:00000000000033A1                 mov     edi, 1          ; status
.text:00000000000033A6                 mov     esi, [rax]      ; errnum
.text:00000000000033A8                 xor     eax, eax
.text:00000000000033AA                 call    _error
.text:00000000000033AF                 nop
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: main+12BE↑j
.text:00000000000033B0                 mov     rdi, [r14+10h]  ; stream
.text:00000000000033B4                 call    rpl_fclose
.text:00000000000033B9                 test    eax, eax
.text:00000000000033BB                 jnz     loc_398D
.text:00000000000033C1                 mov     qword ptr [r14+10h], 0
.text:00000000000033C9                 mov     dword ptr [r14+8], 0FFFFFFFEh
.text:00000000000033D1                 jmp     loc_32A4
.text:00000000000033D1 ; ---------------------------------------------------------------------------
.text:00000000000033D6                 align 20h
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: main+126A↑j
.text:00000000000033E0                 mov     edi, [r14+8]    ; fd
.text:00000000000033E4                 mov     rdx, rbx        ; n
.text:00000000000033E7                 mov     rsi, r13        ; buf
.text:00000000000033EA                 call    full_write
.text:00000000000033EF                 cmp     rax, rbx
.text:00000000000033F2                 mov     rax, [rsp+178h+var_158]
.text:00000000000033F7                 jz      loc_3273
.text:00000000000033FD                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003400                 jnz     short loc_3410
.text:0000000000003402                 cmp     cs:filter_command, 0
.text:000000000000340A                 jnz     loc_3299
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: main+1420↑j
.text:0000000000003410                 mov     rdx, [r14]
.text:0000000000003413                 mov     esi, 3
.text:0000000000003418                 xor     edi, edi
.text:000000000000341A                 call    quotearg_n_style_colon
.text:000000000000341F                 mov     rcx, rax
.text:0000000000003422                 mov     rax, [rsp+178h+var_158]
.text:0000000000003427                 lea     rdx, format+4   ; format
.text:000000000000342E                 mov     edi, 1          ; status
.text:0000000000003433                 mov     esi, [rax]      ; errnum
.text:0000000000003435                 xor     eax, eax
.text:0000000000003437                 call    _error
.text:000000000000343C                 nop     dword ptr [rax+00h]
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: main+1327↑j
.text:0000000000003440                 mov     rdx, rbx        ; n
.text:0000000000003443                 mov     rsi, r13        ; buf
.text:0000000000003446                 mov     edi, 1          ; fd
.text:000000000000344B                 call    full_write
.text:0000000000003450                 cmp     rax, rbx
.text:0000000000003453                 jz      loc_31B3
.text:0000000000003459                 lea     rsi, aWriteError ; "write error"
.text:0000000000003460                 mov     edx, 5          ; category
.text:0000000000003465                 xor     edi, edi        ; domainname
.text:0000000000003467                 call    _dcgettext
.text:000000000000346C                 mov     rbx, rax
.text:000000000000346F                 call    ___errno_location
.text:0000000000003474                 mov     esi, [rax]      ; errnum
.text:0000000000003476                 lea     rdx, format+4   ; format
.text:000000000000347D                 mov     rcx, rbx
.text:0000000000003480                 mov     edi, 1          ; status
.text:0000000000003485                 xor     eax, eax
.text:0000000000003487                 call    _error
.text:000000000000348C
.text:000000000000348C def_28A8:                               ; CODE XREF: main+8B4↑j
.text:000000000000348C                 mov     rdx, [rsp+178h+nbytes] ; jumptable 00000000000028A8 default case
.text:0000000000003491                 mov     rsi, [rsp+178h+s]
.text:0000000000003496                 xor     r8d, r8d
.text:0000000000003499                 mov     rdi, [rsp+178h+offset] ; offset
.text:000000000000349D                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000034A1                 call    bytes_split
.text:00000000000034A6                 jmp     loc_2F16
.text:00000000000034AB ; ---------------------------------------------------------------------------
.text:00000000000034AB
.text:00000000000034AB loc_34AB:                               ; CODE XREF: main+E44↑j
.text:00000000000034AB                 mov     r9, r15
.text:00000000000034AE                 mov     byte ptr [rsp+178h+var_148], 0
.text:00000000000034B3                 jmp     loc_2E33
.text:00000000000034B8 ; ---------------------------------------------------------------------------
.text:00000000000034B8
.text:00000000000034B8 loc_34B8:                               ; CODE XREF: main+E6A↑j
.text:00000000000034B8                 movzx   edi, byte ptr [rsp+178h+var_128]
.text:00000000000034BD                 mov     rdx, [rsp+178h+buf]
.text:00000000000034C2                 mov     rsi, r8
.text:00000000000034C5                 mov     [rsp+178h+var_120], r9
.text:00000000000034CA                 call    cwrite
.text:00000000000034CF                 mov     r9, [rsp+178h+var_120]
.text:00000000000034D4                 jmp     loc_2E50
.text:00000000000034D9 ; ---------------------------------------------------------------------------
.text:00000000000034D9
.text:00000000000034D9 loc_34D9:                               ; CODE XREF: main+E61↑j
.text:00000000000034D9                 mov     rdx, rax        ; n
.text:00000000000034DC                 mov     rsi, r8         ; buf
.text:00000000000034DF                 mov     edi, 1          ; fd
.text:00000000000034E4                 mov     [rsp+178h+var_128], r9
.text:00000000000034E9                 call    full_write
.text:00000000000034EE                 cmp     [rsp+178h+buf], rax
.text:00000000000034F3                 mov     r9, [rsp+178h+var_128]
.text:00000000000034F8                 jz      loc_2E50
.text:00000000000034FE                 lea     rsi, aWriteError ; "write error"
.text:0000000000003505                 mov     edx, 5          ; category
.text:000000000000350A                 xor     edi, edi        ; domainname
.text:000000000000350C                 call    _dcgettext
.text:0000000000003511                 mov     rbx, rax
.text:0000000000003514                 call    ___errno_location
.text:0000000000003519                 mov     esi, [rax]      ; errnum
.text:000000000000351B                 lea     rdx, format+4   ; format
.text:0000000000003522                 mov     rcx, rbx
.text:0000000000003525                 mov     edi, 1          ; status
.text:000000000000352A                 xor     eax, eax
.text:000000000000352C                 call    _error
.text:0000000000003531
.text:0000000000003531 loc_3531:                               ; CODE XREF: main+12E7↑j
.text:0000000000003531                                         ; main+18DE↓j
.text:0000000000003531                 movsxd  rbx, dword ptr [rsp+178h+offset]
.text:0000000000003535
.text:0000000000003535 loc_3535:                               ; CODE XREF: main+18E9↓j
.text:0000000000003535                 mov     rbp, [rsp+178h+var_148]
.text:000000000000353A                 mov     r13, [rsp+178h+offset]
.text:000000000000353E                 xor     r12d, r12d
.text:0000000000003541
.text:0000000000003541 loc_3541:                               ; CODE XREF: main+15A8↓j
.text:0000000000003541                 cmp     rbx, r12
.text:0000000000003544                 ja      short loc_355F
.text:0000000000003546                 cmp     cs:elide_empty_files, 0
.text:000000000000354D                 jnz     short loc_355F
.text:000000000000354F                 mov     rdi, [rsp+178h+var_148]
.text:0000000000003554                 mov     rdx, r13
.text:0000000000003557                 mov     rsi, r12
.text:000000000000355A                 call    ofile_open
.text:000000000000355F
.text:000000000000355F loc_355F:                               ; CODE XREF: main+1564↑j
.text:000000000000355F                                         ; main+156D↑j
.text:000000000000355F                 mov     esi, [rbp+8]
.text:0000000000003562                 test    esi, esi
.text:0000000000003564                 js      short loc_3576
.text:0000000000003566                 mov     edx, [rbp+18h]
.text:0000000000003569                 mov     rdi, [rbp+10h]
.text:000000000000356D                 mov     rcx, [rbp+0]
.text:0000000000003571                 call    closeout
.text:0000000000003576
.text:0000000000003576 loc_3576:                               ; CODE XREF: main+1584↑j
.text:0000000000003576                 add     r12, 1
.text:000000000000357A                 mov     dword ptr [rbp+8], 0FFFFFFFEh
.text:0000000000003581                 add     rbp, 20h ; ' '
.text:0000000000003585                 cmp     r12, r13
.text:0000000000003588                 jnz     short loc_3541
.text:000000000000358A                 jmp     loc_2F16
.text:000000000000358F ; ---------------------------------------------------------------------------
.text:000000000000358F
.text:000000000000358F loc_358F:                               ; CODE XREF: main+F0D↑j
.text:000000000000358F                 mov     rax, [rsp+178h+offset]
.text:0000000000003593                 cmp     [rsp+178h+var_168], rax
.text:0000000000003598                 ja      loc_393B
.text:000000000000359E                 mov     rcx, [rsp+178h+var_160]
.text:00000000000035A3                 cmp     rax, rcx
.text:00000000000035A6                 ja      loc_393B
.text:00000000000035AC                 mov     rdi, [rsp+178h+offset]
.text:00000000000035B0                 mov     rax, [rsp+178h+var_160]
.text:00000000000035B5                 xor     edx, edx
.text:00000000000035B7                 mov     rcx, [rsp+178h+var_168]
.text:00000000000035BC                 div     rdi
.text:00000000000035BF                 lea     rsi, [rcx-1]
.text:00000000000035C3                 imul    rsi, rax        ; offset
.text:00000000000035C7                 cmp     rcx, rdi
.text:00000000000035CA                 mov     rbx, rsi
.text:00000000000035CD                 jz      short loc_35D8
.text:00000000000035CF                 imul    rax, rcx
.text:00000000000035D3                 mov     [rsp+178h+var_160], rax
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: main+15ED↑j
.text:00000000000035D8                 cmp     rbp, rsi
.text:00000000000035DB                 jbe     loc_3769
.text:00000000000035E1                 mov     rdi, [rsp+178h+s] ; dest
.text:00000000000035E6                 sub     rbp, rsi
.text:00000000000035E9                 mov     rdx, rbp        ; n
.text:00000000000035EC                 add     rsi, rdi        ; src
.text:00000000000035EF                 call    _memmove
.text:00000000000035F4
.text:00000000000035F4 loc_35F4:                               ; CODE XREF: main+179C↓j
.text:00000000000035F4                 mov     r14, [rsp+178h+var_160]
.text:00000000000035F9                 mov     r15, [rsp+178h+s]
.text:00000000000035FE                 or      r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000003602                 mov     rax, rbp
.text:0000000000003605
.text:0000000000003605 loc_3605:                               ; CODE XREF: main+16A9↓j
.text:0000000000003605                 cmp     r14, rbx
.text:0000000000003608                 jle     loc_2F16
.text:000000000000360E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003612                 jz      short loc_368E
.text:0000000000003614
.text:0000000000003614 loc_3614:                               ; CODE XREF: main+16C1↓j
.text:0000000000003614                 test    rax, rax
.text:0000000000003617                 jz      loc_2F16
.text:000000000000361D                 mov     rbp, r14
.text:0000000000003620                 mov     rsi, r15        ; buf
.text:0000000000003623                 mov     edi, 1          ; fd
.text:0000000000003628                 sub     rbp, rbx
.text:000000000000362B                 cmp     rbp, rax
.text:000000000000362E                 cmova   rbp, rax
.text:0000000000003632                 mov     rdx, rbp        ; n
.text:0000000000003635                 call    full_write
.text:000000000000363A                 cmp     rbp, rax
.text:000000000000363D                 jz      short loc_3683
.text:000000000000363F                 call    ___errno_location
.text:0000000000003644                 cmp     cs:filter_command, 0
.text:000000000000364C                 jz      short loc_3653
.text:000000000000364E                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003651                 jz      short loc_3683
.text:0000000000003653
.text:0000000000003653 loc_3653:                               ; CODE XREF: main+166C↑j
.text:0000000000003653                 lea     rdx, aLt+2      ; "-"
.text:000000000000365A                 mov     r13, rax
.text:000000000000365D                 mov     esi, 3
.text:0000000000003662                 xor     edi, edi
.text:0000000000003664                 call    quotearg_n_style_colon
.text:0000000000003669                 mov     esi, [r13+0]    ; errnum
.text:000000000000366D                 lea     rdx, format+4   ; format
.text:0000000000003674                 mov     rcx, rax
.text:0000000000003677                 mov     edi, 1          ; status
.text:000000000000367C                 xor     eax, eax
.text:000000000000367E                 call    _error
.text:0000000000003683
.text:0000000000003683 loc_3683:                               ; CODE XREF: main+165D↑j
.text:0000000000003683                                         ; main+1671↑j
.text:0000000000003683                 add     rbx, rbp
.text:0000000000003686                 mov     rax, r12
.text:0000000000003689                 jmp     loc_3605
.text:000000000000368E ; ---------------------------------------------------------------------------
.text:000000000000368E
.text:000000000000368E loc_368E:                               ; CODE XREF: main+1632↑j
.text:000000000000368E                 mov     rdx, [rsp+178h+nbytes] ; nbytes
.text:0000000000003693                 xor     edi, edi        ; fd
.text:0000000000003695                 mov     rsi, r15        ; buf
.text:0000000000003698                 call    safe_read
.text:000000000000369D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000036A1                 jnz     loc_3614
.text:00000000000036A7                 mov     rdx, cs:infile
.text:00000000000036AE                 mov     esi, 3
.text:00000000000036B3                 xor     edi, edi
.text:00000000000036B5                 call    quotearg_n_style_colon
.text:00000000000036BA                 mov     rbx, rax
.text:00000000000036BD                 call    ___errno_location
.text:00000000000036C2                 mov     esi, [rax]      ; errnum
.text:00000000000036C4                 lea     rdx, format+4   ; format
.text:00000000000036CB                 mov     rcx, rbx
.text:00000000000036CE                 mov     edi, 1          ; status
.text:00000000000036D3                 xor     eax, eax
.text:00000000000036D5                 call    _error
.text:00000000000036DA
.text:00000000000036DA loc_36DA:                               ; CODE XREF: main+10D5↑j
.text:00000000000036DA                 mov     rsi, [rsp+178h+ptr]
.text:00000000000036DF                 xor     edi, edi
.text:00000000000036E1                 test    r13, r13
.text:00000000000036E4                 setz    dil
.text:00000000000036E8                 mov     rdx, r12
.text:00000000000036EB                 call    cwrite
.text:00000000000036F0                 jmp     loc_30BB
.text:00000000000036F5 ; ---------------------------------------------------------------------------
.text:00000000000036F5
.text:00000000000036F5 loc_36F5:                               ; CODE XREF: main+D67↑j
.text:00000000000036F5                 mov     rsi, rbx
.text:00000000000036F8                 xor     edi, edi        ; fd
.text:00000000000036FA                 mov     edx, 1          ; whence
.text:00000000000036FF                 sub     rsi, rbp        ; offset
.text:0000000000003702                 or      rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000003706                 call    _lseek
.text:000000000000370B                 test    rax, rax
.text:000000000000370E                 mov     [rsp+178h+var_158], rbx
.text:0000000000003713                 jns     loc_2D66
.text:0000000000003719                 mov     rdx, cs:infile
.text:0000000000003720                 mov     esi, 3
.text:0000000000003725                 xor     edi, edi
.text:0000000000003727                 call    quotearg_n_style_colon
.text:000000000000372C                 mov     rbx, rax
.text:000000000000372F                 call    ___errno_location
.text:0000000000003734                 mov     esi, [rax]      ; errnum
.text:0000000000003736                 lea     rdx, format+4   ; format
.text:000000000000373D                 mov     rcx, rbx
.text:0000000000003740                 mov     edi, 1          ; status
.text:0000000000003745                 xor     eax, eax
.text:0000000000003747                 call    _error
.text:000000000000374C
.text:000000000000374C loc_374C:                               ; CODE XREF: main+D4C↑j
.text:000000000000374C                 mov     rax, [rsp+178h+ptr]
.text:0000000000003751                 mov     [rsp+178h+var_158], 0
.text:000000000000375A                 mov     r12d, 1
.text:0000000000003760                 lea     r13, [rax-1]
.text:0000000000003764                 jmp     loc_2D66
.text:0000000000003769 ; ---------------------------------------------------------------------------
.text:0000000000003769
.text:0000000000003769 loc_3769:                               ; CODE XREF: main+15FB↑j
.text:0000000000003769                 xor     edi, edi        ; fd
.text:000000000000376B                 mov     edx, 1          ; whence
.text:0000000000003770                 or      rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000003774                 call    _lseek
.text:0000000000003779                 test    rax, rax
.text:000000000000377C                 jns     loc_35F4
.text:0000000000003782                 mov     rdx, cs:infile
.text:0000000000003789                 mov     esi, 3
.text:000000000000378E                 xor     edi, edi
.text:0000000000003790                 call    quotearg_n_style_colon
.text:0000000000003795                 mov     rbx, rax
.text:0000000000003798                 call    ___errno_location
.text:000000000000379D                 mov     esi, [rax]      ; errnum
.text:000000000000379F                 lea     rdx, format+4   ; format
.text:00000000000037A6                 mov     rcx, rbx
.text:00000000000037A9                 mov     edi, 1          ; status
.text:00000000000037AE                 xor     eax, eax
.text:00000000000037B0                 call    _error
.text:00000000000037B5
.text:00000000000037B5 loc_37B5:                               ; CODE XREF: main+A4D↑j
.text:00000000000037B5                 mov     r14, cs:in_stat_buf.st_size
.text:00000000000037BC                 test    r14, r14
.text:00000000000037BF                 jz      short loc_3832
.text:00000000000037C1                 mov     eax, cs:in_stat_buf.st_mode
.text:00000000000037C7                 add     rbx, rbp
.text:00000000000037CA                 and     eax, 0D000h
.text:00000000000037CF                 cmp     eax, 8000h
.text:00000000000037D4                 jnz     short loc_37DB
.text:00000000000037D6                 cmp     r14, rbx
.text:00000000000037D9                 jge     short loc_3816
.text:00000000000037DB
.text:00000000000037DB loc_37DB:                               ; CODE XREF: main+17F4↑j
.text:00000000000037DB                 xor     esi, esi        ; offset
.text:00000000000037DD                 xor     edi, edi        ; fd
.text:00000000000037DF                 mov     edx, 2          ; whence
.text:00000000000037E4                 call    _lseek
.text:00000000000037E9                 test    rax, rax
.text:00000000000037EC                 mov     r14, rax
.text:00000000000037EF                 js      loc_2F7A
.text:00000000000037F5                 cmp     rbx, rax
.text:00000000000037F8                 jz      short loc_3816
.text:00000000000037FA                 xor     edx, edx        ; whence
.text:00000000000037FC                 xor     edi, edi        ; fd
.text:00000000000037FE                 mov     rsi, rbx        ; offset
.text:0000000000003801                 call    _lseek
.text:0000000000003806                 test    rax, rax
.text:0000000000003809                 js      loc_2F7A
.text:000000000000380F                 cmp     r14, rbx
.text:0000000000003812                 cmovl   r14, rbx
.text:0000000000003816
.text:0000000000003816 loc_3816:                               ; CODE XREF: main+17F9↑j
.text:0000000000003816                                         ; main+1818↑j
.text:0000000000003816                 sub     r14, rbx
.text:0000000000003819                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000003823                 mov     r13, r14
.text:0000000000003826                 add     r13, rbp
.text:0000000000003829                 cmp     r13, rax
.text:000000000000382C                 jnz     loc_2A49
.text:0000000000003832
.text:0000000000003832 loc_3832:                               ; CODE XREF: main+17DF↑j
.text:0000000000003832                 call    ___errno_location
.text:0000000000003837                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000383D                 jmp     loc_2F7A
.text:0000000000003842 ; ---------------------------------------------------------------------------
.text:0000000000003842
.text:0000000000003842 loc_3842:                               ; CODE XREF: main+212↑j
.text:0000000000003842                 cmp     eax, 0FFFFFF7Eh
.text:0000000000003847                 jnz     loc_392C
.text:000000000000384D                 xor     edi, edi        ; status
.text:000000000000384F                 call    usage
.text:0000000000003854 ; ---------------------------------------------------------------------------
.text:0000000000003854
.text:0000000000003854 loc_3854:                               ; CODE XREF: main+A00↑j
.text:0000000000003854                 add     rdx, rcx
.text:0000000000003857                 jmp     loc_2935
.text:000000000000385C ; ---------------------------------------------------------------------------
.text:000000000000385C
.text:000000000000385C loc_385C:                               ; CODE XREF: main+DB7↑j
.text:000000000000385C                 mov     rdx, [rsp+178h+nbytes] ; nbytes
.text:0000000000003861                 mov     rsi, [rsp+178h+s] ; buf
.text:0000000000003866                 xor     edi, edi        ; fd
.text:0000000000003868                 call    safe_read
.text:000000000000386D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003871                 mov     rbp, rax
.text:0000000000003874                 jnz     loc_2D9D
.text:000000000000387A                 mov     rdx, cs:infile
.text:0000000000003881                 mov     esi, 3
.text:0000000000003886                 xor     edi, edi
.text:0000000000003888                 call    quotearg_n_style_colon
.text:000000000000388D                 mov     rbx, rax
.text:0000000000003890                 call    ___errno_location
.text:0000000000003895                 mov     esi, [rax]      ; errnum
.text:0000000000003897                 lea     rdx, format+4   ; format
.text:000000000000389E                 mov     rcx, rbx
.text:00000000000038A1                 mov     edi, 1          ; status
.text:00000000000038A6                 xor     eax, eax
.text:00000000000038A8                 call    _error
.text:00000000000038AD
.text:00000000000038AD loc_38AD:                               ; CODE XREF: main+11A9↑j
.text:00000000000038AD                 cmp     [rsp+178h+var_168], 0
.text:00000000000038B3                 jnz     loc_2F16
.text:00000000000038B9                 cmp     byte ptr [rsp+178h+var_128], 0
.text:00000000000038BE                 jnz     loc_3531
.text:00000000000038C4                 movsxd  rbx, dword ptr [rsp+178h+var_160]
.text:00000000000038C9                 jmp     loc_3535
.text:00000000000038CE ; ---------------------------------------------------------------------------
.text:00000000000038CE
.text:00000000000038CE loc_38CE:                               ; CODE XREF: main+DFF↑j
.text:00000000000038CE                 mov     rbp, rax
.text:00000000000038D1                 jmp     loc_2D83
.text:00000000000038D6 ; ---------------------------------------------------------------------------
.text:00000000000038D6
.text:00000000000038D6 loc_38D6:                               ; CODE XREF: main+DAD↑j
.text:00000000000038D6                                         ; main+DC0↑j
.text:00000000000038D6                 cmp     [rsp+178h+var_111], 0
.text:00000000000038DB                 jz      short loc_38E1
.text:00000000000038DD                 add     r12, 1
.text:00000000000038E1
.text:00000000000038E1 loc_38E1:                               ; CODE XREF: main+18FB↑j
.text:00000000000038E1                 cmp     [rsp+178h+var_168], 0
.text:00000000000038E7                 jz      short loc_3900
.text:00000000000038E9                 jmp     loc_2F16
.text:00000000000038EE ; ---------------------------------------------------------------------------
.text:00000000000038EE
.text:00000000000038EE loc_38EE:                               ; CODE XREF: main+1924↓j
.text:00000000000038EE                 xor     edx, edx
.text:00000000000038F0                 xor     esi, esi
.text:00000000000038F2                 mov     edi, 1
.text:00000000000038F7                 add     r12, 1
.text:00000000000038FB                 call    cwrite
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: main+1907↑j
.text:0000000000003900                 cmp     r12, [rsp+178h+offset]
.text:0000000000003904                 jbe     short loc_38EE
.text:0000000000003906                 jmp     loc_2F16
.text:000000000000390B ; ---------------------------------------------------------------------------
.text:000000000000390B
.text:000000000000390B loc_390B:                               ; CODE XREF: main+698↑j
.text:000000000000390B                 lea     rsi, aFilterDoesNotP ; "--filter does not process a chunk extra"...
.text:0000000000003912                 mov     edx, 5          ; category
.text:0000000000003917
.text:0000000000003917 loc_3917:                               ; CODE XREF: main+78B↑j
.text:0000000000003917                                         ; main+1CD4↓j
.text:0000000000003917                 xor     edi, edi        ; domainname
.text:0000000000003919                 call    _dcgettext
.text:000000000000391E                 xor     esi, esi        ; errnum
.text:0000000000003920                 mov     rdx, rax        ; format
.text:0000000000003923                 xor     edi, edi        ; status
.text:0000000000003925                 xor     eax, eax
.text:0000000000003927                 call    _error
.text:000000000000392C
.text:000000000000392C loc_392C:                               ; CODE XREF: main+127↑j
.text:000000000000392C                                         ; main+1D9↑j ...
.text:000000000000392C                 mov     edi, 1          ; status
.text:0000000000003931                 call    usage
.text:0000000000003936 ; ---------------------------------------------------------------------------
.text:0000000000003936
.text:0000000000003936 loc_3936:                               ; CODE XREF: main+CB9↑j
.text:0000000000003936                                         ; main+1109↑j ...
.text:0000000000003936                 call    xalloc_die
.text:000000000000393B ; ---------------------------------------------------------------------------
.text:000000000000393B
.text:000000000000393B loc_393B:                               ; CODE XREF: main+15B8↑j
.text:000000000000393B                                         ; main+15C6↑j
.text:000000000000393B                 lea     rcx, __PRETTY_FUNCTION___7285 ; "bytes_chunk_extract"
.text:0000000000003942                 lea     rsi, file       ; "../coreutils-8.31/src/split.c"
.text:0000000000003949                 lea     rdi, assertion  ; "k && n && k <= n && n <= file_size"
.text:0000000000003950                 mov     edx, 3E0h       ; line
.text:0000000000003955                 call    ___assert_fail
.text:000000000000395A ; ---------------------------------------------------------------------------
.text:000000000000395A
.text:000000000000395A loc_395A:                               ; CODE XREF: main+AC7↑j
.text:000000000000395A                 mov     rdx, cs:infile
.text:0000000000003961                 mov     esi, 3
.text:0000000000003966                 xor     edi, edi
.text:0000000000003968                 call    quotearg_n_style_colon
.text:000000000000396D                 mov     rbx, rax
.text:0000000000003970                 call    ___errno_location
.text:0000000000003975                 mov     esi, [rax]      ; errnum
.text:0000000000003977                 lea     rdx, format+4   ; format
.text:000000000000397E                 mov     rcx, rbx
.text:0000000000003981                 mov     edi, 1          ; status
.text:0000000000003986                 xor     eax, eax
.text:0000000000003988                 call    _error
.text:000000000000398D
.text:000000000000398D loc_398D:                               ; CODE XREF: main+13DB↑j
.text:000000000000398D                 mov     rdx, [r14]
.text:0000000000003990                 mov     esi, 3
.text:0000000000003995                 xor     edi, edi
.text:0000000000003997                 call    quotearg_n_style_colon
.text:000000000000399C                 mov     rcx, rax
.text:000000000000399F                 mov     rax, [rsp+178h+var_158]
.text:00000000000039A4                 lea     rdx, format+4   ; format
.text:00000000000039AB                 mov     edi, 1          ; status
.text:00000000000039B0                 mov     esi, [rax]      ; errnum
.text:00000000000039B2                 xor     eax, eax
.text:00000000000039B4                 call    _error
.text:00000000000039B9
.text:00000000000039B9 loc_39B9:                               ; CODE XREF: main+B88↑j
.text:00000000000039B9                 mov     rdx, cs:infile
.text:00000000000039C0                 mov     esi, 3
.text:00000000000039C5                 xor     edi, edi
.text:00000000000039C7                 call    quotearg_n_style_colon
.text:00000000000039CC                 mov     rbx, rax
.text:00000000000039CF                 call    ___errno_location
.text:00000000000039D4                 mov     esi, [rax]      ; errnum
.text:00000000000039D6                 lea     rdx, format+4   ; format
.text:00000000000039DD                 mov     rcx, rbx
.text:00000000000039E0                 mov     edi, 1          ; status
.text:00000000000039E5                 xor     eax, eax
.text:00000000000039E7                 call    _error
.text:00000000000039EC
.text:00000000000039EC loc_39EC:                               ; CODE XREF: main+7D6↑j
.text:00000000000039EC                 mov     rdx, cs:infile
.text:00000000000039F3                 mov     esi, 3
.text:00000000000039F8                 xor     edi, edi
.text:00000000000039FA                 call    quotearg_n_style_colon
.text:00000000000039FF                 mov     rbx, rax
.text:0000000000003A02                 call    ___errno_location
.text:0000000000003A07                 mov     esi, [rax]      ; errnum
.text:0000000000003A09                 lea     rdx, format+4   ; format
.text:0000000000003A10                 mov     rcx, rbx
.text:0000000000003A13                 mov     edi, 1          ; status
.text:0000000000003A18                 xor     eax, eax
.text:0000000000003A1A                 call    _error
.text:0000000000003A1F
.text:0000000000003A1F loc_3A1F:                               ; CODE XREF: main+7BB↑j
.text:0000000000003A1F                 mov     rsi, cs:infile
.text:0000000000003A26                 mov     edi, 4
.text:0000000000003A2B                 call    quotearg_style
.text:0000000000003A30                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:0000000000003A37                 mov     edx, 5          ; category
.text:0000000000003A3C                 xor     edi, edi        ; domainname
.text:0000000000003A3E                 mov     rbp, rax
.text:0000000000003A41                 call    _dcgettext
.text:0000000000003A46                 mov     rbx, rax
.text:0000000000003A49                 call    ___errno_location
.text:0000000000003A4E                 mov     esi, [rax]      ; errnum
.text:0000000000003A50                 mov     rcx, rbp
.text:0000000000003A53                 mov     rdx, rbx        ; format
.text:0000000000003A56                 mov     edi, 1          ; status
.text:0000000000003A5B                 xor     eax, eax
.text:0000000000003A5D                 call    _error
.text:0000000000003A62
.text:0000000000003A62 loc_3A62:                               ; CODE XREF: main+754↑j
.text:0000000000003A62                 cdqe
.text:0000000000003A64                 mov     rdi, [rbx+rax*8]
.text:0000000000003A68                 call    quote
.text:0000000000003A6D                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000003A74                 mov     rbx, rax
.text:0000000000003A77                 mov     edx, 5          ; category
.text:0000000000003A7C
.text:0000000000003A7C loc_3A7C:                               ; CODE XREF: main+1AD5↓j
.text:0000000000003A7C                                         ; main+1C47↓j
.text:0000000000003A7C                 xor     edi, edi        ; domainname
.text:0000000000003A7E                 call    _dcgettext
.text:0000000000003A83
.text:0000000000003A83 loc_3A83:                               ; CODE XREF: main+1C5B↓j
.text:0000000000003A83                 mov     rdx, rax        ; format
.text:0000000000003A86                 xor     edi, edi        ; status
.text:0000000000003A88                 mov     rcx, rbx
.text:0000000000003A8B                 xor     esi, esi        ; errnum
.text:0000000000003A8D                 xor     eax, eax
.text:0000000000003A8F                 call    _error
.text:0000000000003A94                 mov     edi, 1          ; status
.text:0000000000003A99                 call    usage
.text:0000000000003A9E ; ---------------------------------------------------------------------------
.text:0000000000003A9E
.text:0000000000003A9E loc_3A9E:                               ; CODE XREF: main+1F1↑j
.text:0000000000003A9E                 mov     rdi, r13
.text:0000000000003AA1                 call    quote
.text:0000000000003AA6                 mov     edx, 5
.text:0000000000003AAB                 mov     rbx, rax
.text:0000000000003AAE                 lea     rsi, aInvalidSuffixS ; "invalid suffix %s, contains directory s"...
.text:0000000000003AB5                 jmp     short loc_3A7C
.text:0000000000003AB7 ; ---------------------------------------------------------------------------
.text:0000000000003AB7
.text:0000000000003AB7 loc_3AB7:                               ; CODE XREF: main+A86↑j
.text:0000000000003AB7                 mov     rdi, [rsp+178h+offset]
.text:0000000000003ABB                 lea     rsi, [rsp+178h+var_58]
.text:0000000000003AC3                 call    umaxtostr
.text:0000000000003AC8                 mov     rdi, rax
.text:0000000000003ACB                 call    quote
.text:0000000000003AD0                 lea     rsi, aInvalidNumberO_1 ; "invalid number of chunks"
.text:0000000000003AD7                 mov     edx, 5          ; category
.text:0000000000003ADC                 xor     edi, edi        ; domainname
.text:0000000000003ADE                 mov     rbx, rax
.text:0000000000003AE1                 call    _dcgettext
.text:0000000000003AE6                 lea     rdx, format     ; "%s: %s"
.text:0000000000003AED                 mov     rcx, rax
.text:0000000000003AF0                 mov     r8, rbx
.text:0000000000003AF3                 mov     esi, 4Bh ; 'K'  ; errnum
.text:0000000000003AF8                 mov     edi, 1          ; status
.text:0000000000003AFD                 xor     eax, eax
.text:0000000000003AFF                 call    _error
.text:0000000000003B04
.text:0000000000003B04 loc_3B04:                               ; CODE XREF: main+F72↑j
.text:0000000000003B04                 call    ___stack_chk_fail
.text:0000000000003B09 ; ---------------------------------------------------------------------------
.text:0000000000003B09
.text:0000000000003B09 loc_3B09:                               ; CODE XREF: main+F3F↑j
.text:0000000000003B09                 mov     rdx, cs:infile
.text:0000000000003B10                 mov     esi, 3
.text:0000000000003B15                 xor     edi, edi
.text:0000000000003B17                 call    quotearg_n_style_colon
.text:0000000000003B1C                 mov     rbx, rax
.text:0000000000003B1F                 call    ___errno_location
.text:0000000000003B24                 mov     esi, [rax]      ; errnum
.text:0000000000003B26                 lea     rdx, format+4   ; format
.text:0000000000003B2D                 mov     rcx, rbx
.text:0000000000003B30                 mov     edi, 1          ; status
.text:0000000000003B35                 xor     eax, eax
.text:0000000000003B37                 call    _error
.text:0000000000003B3C
.text:0000000000003B3C loc_3B3C:                               ; CODE XREF: main+9B4↑j
.text:0000000000003B3C                 lea     rsi, aTheSuffixLengt ; "the suffix length needs to be at least "...
.text:0000000000003B43                 mov     edx, 5          ; category
.text:0000000000003B48                 xor     edi, edi        ; domainname
.text:0000000000003B4A                 call    _dcgettext
.text:0000000000003B4F                 mov     rcx, r14
.text:0000000000003B52                 mov     rdx, rax        ; format
.text:0000000000003B55                 xor     esi, esi        ; errnum
.text:0000000000003B57                 mov     edi, 1          ; status
.text:0000000000003B5C                 xor     eax, eax
.text:0000000000003B5E                 call    _error
.text:0000000000003B63
.text:0000000000003B63 loc_3B63:                               ; CODE XREF: main+91E↑j
.text:0000000000003B63                                         ; main+935↑j
.text:0000000000003B63                 mov     rdi, [rsp+178h+offset]
.text:0000000000003B67                 lea     rsi, [rsp+178h+var_58]
.text:0000000000003B6F                 mov     dword ptr [rsp+178h+ptr], r15d
.text:0000000000003B74                 call    umaxtostr
.text:0000000000003B79                 lea     rsi, aLineCountOptio ; "line count option -%s%c... is too large"
.text:0000000000003B80                 mov     edx, 5          ; category
.text:0000000000003B85                 xor     edi, edi        ; domainname
.text:0000000000003B87                 mov     rbx, rax
.text:0000000000003B8A                 call    _dcgettext
.text:0000000000003B8F                 mov     r8d, dword ptr [rsp+178h+ptr]
.text:0000000000003B94                 mov     rdx, rax        ; format
.text:0000000000003B97                 mov     rcx, rbx
.text:0000000000003B9A                 xor     esi, esi        ; errnum
.text:0000000000003B9C                 mov     edi, 1          ; status
.text:0000000000003BA1                 xor     eax, eax
.text:0000000000003BA3                 call    _error
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: main+D22↑j
.text:0000000000003BA8                                         ; main+D2D↑j
.text:0000000000003BA8                 lea     rcx, __PRETTY_FUNCTION___7242 ; "lines_chunk_split"
.text:0000000000003BAF                 lea     rsi, file       ; "../coreutils-8.31/src/split.c"
.text:0000000000003BB6                 lea     rdi, aNKNNFileSize ; "n && k <= n && n <= file_size"
.text:0000000000003BBD                 mov     edx, 362h       ; line
.text:0000000000003BC2                 call    ___assert_fail
.text:0000000000003BC7 ; ---------------------------------------------------------------------------
.text:0000000000003BC7
.text:0000000000003BC7 loc_3BC7:                               ; CODE XREF: main+11A0↑j
.text:0000000000003BC7                 mov     rdx, cs:infile
.text:0000000000003BCE                 mov     esi, 3
.text:0000000000003BD3                 xor     edi, edi
.text:0000000000003BD5                 call    quotearg_n_style_colon
.text:0000000000003BDA                 mov     rbx, rax
.text:0000000000003BDD                 call    ___errno_location
.text:0000000000003BE2                 mov     esi, [rax]      ; errnum
.text:0000000000003BE4                 lea     rdx, format+4   ; format
.text:0000000000003BEB                 mov     rcx, rbx
.text:0000000000003BEE                 mov     edi, 1          ; status
.text:0000000000003BF3                 xor     eax, eax
.text:0000000000003BF5                 call    _error
.text:0000000000003BFA
.text:0000000000003BFA loc_3BFA:                               ; CODE XREF: main+1100↑j
.text:0000000000003BFA                 mov     ecx, 1
.text:0000000000003BFF                 jmp     loc_30E6
.text:0000000000003C04 ; ---------------------------------------------------------------------------
.text:0000000000003C04
.text:0000000000003C04 loc_3C04:                               ; CODE XREF: main+627↑j
.text:0000000000003C04                 mov     rdi, r13
.text:0000000000003C07                 mov     dword ptr [rsp+178h+offset], r15d
.text:0000000000003C0B                 call    quote
.text:0000000000003C10                 mov     r8d, dword ptr [rsp+178h+offset]
.text:0000000000003C14                 mov     rbx, rax
.text:0000000000003C17                 mov     edx, 5          ; category
.text:0000000000003C1C                 lea     rsi, aSInvalidStartV ; "%s: invalid start value for hexadecimal"...
.text:0000000000003C23                 cmp     r8d, 64h ; 'd'
.text:0000000000003C27                 jnz     loc_3A7C
.text:0000000000003C2D                 lea     rsi, aSInvalidStartV_0 ; "%s: invalid start value for numerical s"...
.text:0000000000003C34                 xor     edi, edi        ; domainname
.text:0000000000003C36                 call    _dcgettext
.text:0000000000003C3B                 jmp     loc_3A83
.text:0000000000003C40 ; ---------------------------------------------------------------------------
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: main+2BE↑j
.text:0000000000003C40                 lea     rsi, aEmptyRecordSep ; "empty record separator"
.text:0000000000003C47                 mov     edx, 5          ; category
.text:0000000000003C4C                 xor     edi, edi        ; domainname
.text:0000000000003C4E                 call    _dcgettext
.text:0000000000003C53                 xor     esi, esi        ; errnum
.text:0000000000003C55                 mov     rdx, rax        ; format
.text:0000000000003C58                 mov     edi, 1          ; status
.text:0000000000003C5D                 xor     eax, eax
.text:0000000000003C5F                 call    _error
.text:0000000000003C64
.text:0000000000003C64 loc_3C64:                               ; CODE XREF: main+6AC↑j
.text:0000000000003C64                 lea     rdi, s2+1       ; "0"
.text:0000000000003C6B                 call    quote
.text:0000000000003C70                 lea     rsi, aInvalidNumberO_0 ; "invalid number of lines"
.text:0000000000003C77                 mov     edx, 5          ; category
.text:0000000000003C7C                 xor     edi, edi        ; domainname
.text:0000000000003C7E                 mov     rbx, rax
.text:0000000000003C81                 call    _dcgettext
.text:0000000000003C86                 lea     rdx, format     ; "%s: %s"
.text:0000000000003C8D                 mov     rcx, rax
.text:0000000000003C90                 xor     edi, edi        ; status
.text:0000000000003C92                 mov     r8, rbx
.text:0000000000003C95                 xor     esi, esi        ; errnum
.text:0000000000003C97                 xor     eax, eax
.text:0000000000003C99                 call    _error
.text:0000000000003C9E                 mov     edi, 1          ; status
.text:0000000000003CA3                 call    usage
.text:0000000000003CA8 ; ---------------------------------------------------------------------------
.text:0000000000003CA8
.text:0000000000003CA8 loc_3CA8:                               ; CODE XREF: main+164↑j
.text:0000000000003CA8                                         ; main+279↑j ...
.text:0000000000003CA8                 mov     edx, 5
.text:0000000000003CAD                 lea     rsi, aCannotSplitInM ; "cannot split in more than one way"
.text:0000000000003CB4                 jmp     loc_3917
.text:0000000000003CB9 ; ---------------------------------------------------------------------------
.text:0000000000003CB9
.text:0000000000003CB9 loc_3CB9:                               ; CODE XREF: main+2F0↑j
.text:0000000000003CB9                 lea     rsi, aMultipleSepara ; "multiple separator characters specified"
.text:0000000000003CC0                 mov     edx, 5          ; category
.text:0000000000003CC5                 xor     edi, edi        ; domainname
.text:0000000000003CC7                 call    _dcgettext
.text:0000000000003CCC                 xor     esi, esi        ; errnum
.text:0000000000003CCE                 mov     rdx, rax        ; format
.text:0000000000003CD1                 mov     edi, 1          ; status
.text:0000000000003CD6                 xor     eax, eax
.text:0000000000003CD8                 call    _error
.text:0000000000003CDD
.text:0000000000003CDD loc_3CDD:                               ; CODE XREF: main+2DC↑j
.text:0000000000003CDD                 mov     rdi, r13
.text:0000000000003CE0                 call    quote
.text:0000000000003CE5                 lea     rsi, aMultiCharacter ; "multi-character separator %s"
.text:0000000000003CEC                 mov     rbx, rax
.text:0000000000003CEF                 mov     edx, 5          ; category
.text:0000000000003CF4                 xor     edi, edi        ; domainname
.text:0000000000003CF6                 call    _dcgettext
.text:0000000000003CFB                 mov     rcx, rbx
.text:0000000000003CFE                 mov     rdx, rax        ; format
.text:0000000000003D01                 xor     esi, esi        ; errnum
.text:0000000000003D03                 mov     edi, 1          ; status
.text:0000000000003D08                 xor     eax, eax
.text:0000000000003D0A                 call    _error
.text:0000000000003D0A ; } // starts at 1FE0
.text:0000000000003D0F                 nop
.text:0000000000003D0F main            endp ; sp-analysis failed
.text:0000000000003D0F
.text:0000000000003D10
.text:0000000000003D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D10
.text:0000000000003D10 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003D10
.text:0000000000003D10 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003D10                 public start
.text:0000000000003D10 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003D10 ; __unwind {
.text:0000000000003D10                 xor     ebp, ebp
.text:0000000000003D12                 mov     r9, rdx         ; rtld_fini
.text:0000000000003D15                 pop     rsi             ; argc
.text:0000000000003D16                 mov     rdx, rsp        ; ubp_av
.text:0000000000003D19                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000003D1D                 push    rax
.text:0000000000003D1E                 push    rsp             ; stack_end
.text:0000000000003D1F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003D26                 lea     rcx, __libc_csu_init ; init
.text:0000000000003D2D                 lea     rdi, main       ; main
.text:0000000000003D34                 call    cs:__libc_start_main_ptr
.text:0000000000003D3A                 hlt
.text:0000000000003D3A ; } // starts at 3D10
.text:0000000000003D3A start           endp
.text:0000000000003D3A
.text:0000000000003D3A ; ---------------------------------------------------------------------------
.text:0000000000003D3B                 align 20h
.text:0000000000003D40
.text:0000000000003D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D40
.text:0000000000003D40 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003D40
.text:0000000000003D40 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3DF3↓p
.text:0000000000003D40                 lea     rdi, __TMC_END__
.text:0000000000003D47                 push    rbp
.text:0000000000003D48                 lea     rax, __TMC_END__
.text:0000000000003D4F                 cmp     rax, rdi
.text:0000000000003D52                 mov     rbp, rsp
.text:0000000000003D55                 jz      short loc_3D70
.text:0000000000003D57                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000003D5E                 test    rax, rax
.text:0000000000003D61                 jz      short loc_3D70
.text:0000000000003D63                 pop     rbp
.text:0000000000003D64                 jmp     rax
.text:0000000000003D64 ; ---------------------------------------------------------------------------
.text:0000000000003D66                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003D70                                         ; deregister_tm_clones+21↑j
.text:0000000000003D70                 pop     rbp
.text:0000000000003D71                 retn
.text:0000000000003D71 deregister_tm_clones endp
.text:0000000000003D71
.text:0000000000003D71 ; ---------------------------------------------------------------------------
.text:0000000000003D72                 align 20h
.text:0000000000003D80
.text:0000000000003D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D80
.text:0000000000003D80 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003D80
.text:0000000000003D80 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003D80                 lea     rdi, __TMC_END__
.text:0000000000003D87                 lea     rsi, __TMC_END__
.text:0000000000003D8E                 push    rbp
.text:0000000000003D8F                 sub     rsi, rdi
.text:0000000000003D92                 mov     rbp, rsp
.text:0000000000003D95                 sar     rsi, 3
.text:0000000000003D99                 mov     rax, rsi
.text:0000000000003D9C                 shr     rax, 3Fh
.text:0000000000003DA0                 add     rsi, rax
.text:0000000000003DA3                 sar     rsi, 1
.text:0000000000003DA6                 jz      short loc_3DC0
.text:0000000000003DA8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000003DAF                 test    rax, rax
.text:0000000000003DB2                 jz      short loc_3DC0
.text:0000000000003DB4                 pop     rbp
.text:0000000000003DB5                 jmp     rax
.text:0000000000003DB5 ; ---------------------------------------------------------------------------
.text:0000000000003DB7                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003DC0                                         ; register_tm_clones+32↑j
.text:0000000000003DC0                 pop     rbp
.text:0000000000003DC1                 retn
.text:0000000000003DC1 register_tm_clones endp
.text:0000000000003DC1
.text:0000000000003DC1 ; ---------------------------------------------------------------------------
.text:0000000000003DC2                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DD0
.text:0000000000003DD0 ; Attributes: info_from_lumina
.text:0000000000003DD0
.text:0000000000003DD0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003DD0                 cmp     cs:completed_7697, 0
.text:0000000000003DD7                 jnz     short locret_3E08
.text:0000000000003DD9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003DE1                 push    rbp
.text:0000000000003DE2                 mov     rbp, rsp
.text:0000000000003DE5                 jz      short loc_3DF3
.text:0000000000003DE7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000003DEE                 call    __cxa_finalize
.text:0000000000003DF3
.text:0000000000003DF3 loc_3DF3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003DF3                 call    deregister_tm_clones
.text:0000000000003DF8                 mov     cs:completed_7697, 1
.text:0000000000003DFF                 pop     rbp
.text:0000000000003E00                 retn
.text:0000000000003E00 ; ---------------------------------------------------------------------------
.text:0000000000003E01                 align 8
.text:0000000000003E08
.text:0000000000003E08 locret_3E08:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003E08                 rep retn
.text:0000000000003E08 __do_global_dtors_aux endp
.text:0000000000003E08
.text:0000000000003E08 ; ---------------------------------------------------------------------------
.text:0000000000003E0A                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10 ; Attributes: bp-based frame
.text:0000000000003E10
.text:0000000000003E10 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003E10                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003E10                 push    rbp
.text:0000000000003E11                 mov     rbp, rsp
.text:0000000000003E14                 pop     rbp
.text:0000000000003E15                 jmp     register_tm_clones
.text:0000000000003E15 frame_dummy     endp
.text:0000000000003E15
.text:0000000000003E15 ; ---------------------------------------------------------------------------
.text:0000000000003E1A                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20
.text:0000000000003E20 next_file_name  proc near               ; CODE XREF: main:loc_3112↑p
.text:0000000000003E20                                         ; cwrite+46↓p
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 push    r13
.text:0000000000003E22                 push    r12
.text:0000000000003E24                 push    rbp
.text:0000000000003E25                 push    rbx
.text:0000000000003E26                 sub     rsp, 8
.text:0000000000003E2A                 mov     r12, cs:outfile
.text:0000000000003E31                 mov     rbx, cs:suffix_length
.text:0000000000003E38                 test    r12, r12
.text:0000000000003E3B                 jz      short loc_3EBC
.text:0000000000003E3D                 test    rbx, rbx
.text:0000000000003E40                 lea     rax, [rbx-1]
.text:0000000000003E44                 jz      loc_409E
.text:0000000000003E4A                 mov     rcx, cs:sufindex_7081
.text:0000000000003E51                 movzx   r8d, cs:suffix_auto
.text:0000000000003E59                 mov     rsi, cs:suffix_alphabet
.text:0000000000003E60                 mov     rdi, cs:outfile_mid
.text:0000000000003E67                 jmp     short loc_3E9B
.text:0000000000003E67 ; ---------------------------------------------------------------------------
.text:0000000000003E69                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: next_file_name+8A↓j
.text:0000000000003E70                                         ; next_file_name+8F↓j ...
.text:0000000000003E70                 movzx   edx, byte ptr [rsi+rdx]
.text:0000000000003E74                 test    dl, dl
.text:0000000000003E76                 mov     [rdi+rax], dl
.text:0000000000003E79                 jnz     loc_4029
.text:0000000000003E7F                 mov     qword ptr [rcx+rax*8], 0
.text:0000000000003E87                 movzx   edx, byte ptr [rsi]
.text:0000000000003E8A                 mov     [rdi+rax], dl
.text:0000000000003E8D                 sub     rax, 1
.text:0000000000003E91                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E95                 jz      loc_409E
.text:0000000000003E9B
.text:0000000000003E9B loc_3E9B:                               ; CODE XREF: next_file_name+47↑j
.text:0000000000003E9B                 mov     rdx, [rcx+rax*8]
.text:0000000000003E9F                 add     rdx, 1
.text:0000000000003EA3                 test    rax, rax
.text:0000000000003EA6                 mov     [rcx+rax*8], rdx
.text:0000000000003EAA                 jnz     short loc_3E70
.text:0000000000003EAC                 test    r8b, r8b
.text:0000000000003EAF                 jz      short loc_3E70
.text:0000000000003EB1                 mov     r9, [rcx]
.text:0000000000003EB4                 cmp     byte ptr [rsi+r9+1], 0
.text:0000000000003EBA                 jnz     short loc_3E70
.text:0000000000003EBC
.text:0000000000003EBC loc_3EBC:                               ; CODE XREF: next_file_name+1B↑j
.text:0000000000003EBC                 mov     rbp, cs:outfile_length_7083
.text:0000000000003EC3                 test    rbp, rbp
.text:0000000000003EC6                 jnz     loc_4038
.text:0000000000003ECC                 mov     rdi, cs:outbase ; s
.text:0000000000003ED3                 call    _strlen
.text:0000000000003ED8                 mov     rdi, cs:additional_suffix ; s
.text:0000000000003EDF                 mov     r13, rax
.text:0000000000003EE2                 mov     cs:outbase_length_7082, rax
.text:0000000000003EE9                 xor     eax, eax
.text:0000000000003EEB                 test    rdi, rdi
.text:0000000000003EEE                 jz      short loc_3EF5
.text:0000000000003EF0                 call    _strlen
.text:0000000000003EF5
.text:0000000000003EF5 loc_3EF5:                               ; CODE XREF: next_file_name+CE↑j
.text:0000000000003EF5                 lea     rsi, [r13+rbx+0]
.text:0000000000003EFA                 mov     cs:addsuf_length_7084, rax
.text:0000000000003F01                 add     rsi, rax
.text:0000000000003F04                 mov     cs:outfile_length_7083, rsi
.text:0000000000003F0B                 add     rsi, 1
.text:0000000000003F0F                 cmp     r13, rsi
.text:0000000000003F12                 ja      loc_40C2
.text:0000000000003F18                 mov     rdi, r12
.text:0000000000003F1B                 call    xrealloc
.text:0000000000003F20                 mov     rbx, cs:outbase_length_7082
.text:0000000000003F27                 mov     rsi, cs:outbase ; src
.text:0000000000003F2E                 mov     rdi, rax        ; dest
.text:0000000000003F31                 mov     r12, rax
.text:0000000000003F34                 mov     cs:outfile, rax
.text:0000000000003F3B                 mov     rdx, rbx        ; n
.text:0000000000003F3E                 call    _memcpy
.text:0000000000003F43                 mov     rax, cs:suffix_alphabet
.text:0000000000003F4A                 mov     r13, cs:sufindex_7081
.text:0000000000003F51
.text:0000000000003F51 loc_3F51:                               ; CODE XREF: next_file_name+279↓j
.text:0000000000003F51                 lea     rcx, [r12+rbx]
.text:0000000000003F55                 movsx   esi, byte ptr [rax] ; c
.text:0000000000003F58                 mov     rbx, cs:suffix_length
.text:0000000000003F5F                 mov     rdi, rcx        ; s
.text:0000000000003F62                 mov     cs:outfile_mid, rcx
.text:0000000000003F69                 mov     rdx, rbx        ; n
.text:0000000000003F6C                 call    _memset
.text:0000000000003F71                 mov     rsi, cs:additional_suffix ; src
.text:0000000000003F78                 test    rsi, rsi
.text:0000000000003F7B                 jz      short loc_3F8D
.text:0000000000003F7D                 mov     rdx, cs:addsuf_length_7084 ; n
.text:0000000000003F84                 lea     rdi, [rax+rbx]  ; dest
.text:0000000000003F88                 call    _memcpy
.text:0000000000003F8D
.text:0000000000003F8D loc_3F8D:                               ; CODE XREF: next_file_name+15B↑j
.text:0000000000003F8D                 mov     rax, cs:outfile_length_7083
.text:0000000000003F94                 mov     rdi, r13        ; ptr
.text:0000000000003F97                 mov     byte ptr [r12+rax], 0
.text:0000000000003F9C                 call    _free
.text:0000000000003FA1                 mov     rdi, rbx
.text:0000000000003FA4                 mov     esi, 8
.text:0000000000003FA9                 call    xcalloc
.text:0000000000003FAE                 mov     r12, cs:numeric_suffix_start
.text:0000000000003FB5                 mov     rbx, rax
.text:0000000000003FB8                 mov     cs:sufindex_7081, rax
.text:0000000000003FBF                 test    r12, r12
.text:0000000000003FC2                 jz      short loc_4029
.text:0000000000003FC4                 test    rbp, rbp
.text:0000000000003FC7                 jnz     loc_40C7
.text:0000000000003FCD                 mov     rdi, r12        ; s
.text:0000000000003FD0                 call    _strlen
.text:0000000000003FD5                 mov     r13, cs:suffix_length
.text:0000000000003FDC                 mov     rbp, rax
.text:0000000000003FDF                 mov     rdx, rax        ; n
.text:0000000000003FE2                 mov     rsi, r12        ; src
.text:0000000000003FE5                 mov     rdi, r13
.text:0000000000003FE8                 shl     r13, 3
.text:0000000000003FEC                 sub     rdi, rax
.text:0000000000003FEF                 add     rdi, cs:outfile_mid ; dest
.text:0000000000003FF6                 call    _memcpy
.text:0000000000003FFB                 test    rbp, rbp
.text:0000000000003FFE                 lea     rcx, [rbp-1]
.text:0000000000004002                 jz      short loc_4029
.text:0000000000004004                 neg     rbp
.text:0000000000004007                 lea     rax, [r13+rbp*8+0]
.text:000000000000400C                 add     rax, rbx
.text:000000000000400F                 nop
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: next_file_name+207↓j
.text:0000000000004010                 movsx   edx, byte ptr [r12+rcx]
.text:0000000000004015                 sub     edx, 30h ; '0'
.text:0000000000004018                 movsxd  rdx, edx
.text:000000000000401B                 mov     [rax+rcx*8], rdx
.text:000000000000401F                 sub     rcx, 1
.text:0000000000004023                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004027                 jnz     short loc_4010
.text:0000000000004029
.text:0000000000004029 loc_4029:                               ; CODE XREF: next_file_name+59↑j
.text:0000000000004029                                         ; next_file_name+1A2↑j ...
.text:0000000000004029                 add     rsp, 8
.text:000000000000402D                 pop     rbx
.text:000000000000402E                 pop     rbp
.text:000000000000402F                 pop     r12
.text:0000000000004031                 pop     r13
.text:0000000000004033                 retn
.text:0000000000004033 ; ---------------------------------------------------------------------------
.text:0000000000004034                 align 8
.text:0000000000004038
.text:0000000000004038 loc_4038:                               ; CODE XREF: next_file_name+A6↑j
.text:0000000000004038                 add     rbx, 1
.text:000000000000403C                 lea     rsi, [rbp+3]
.text:0000000000004040                 cmp     rsi, cs:outbase_length_7082
.text:0000000000004047                 lea     rax, [rbp+2]
.text:000000000000404B                 mov     cs:suffix_length, rbx
.text:0000000000004052                 mov     cs:outfile_length_7083, rax
.text:0000000000004059                 jb      short loc_40C2
.text:000000000000405B                 mov     rdi, r12
.text:000000000000405E                 call    xrealloc
.text:0000000000004063                 mov     r13, cs:sufindex_7081
.text:000000000000406A                 mov     r12, rax
.text:000000000000406D                 mov     cs:outfile, rax
.text:0000000000004074                 mov     rax, cs:suffix_alphabet
.text:000000000000407B                 mov     rcx, cs:outbase_length_7082
.text:0000000000004082                 mov     rdx, [r13+0]
.text:0000000000004086                 lea     rbx, [rcx+1]
.text:000000000000408A                 movzx   edx, byte ptr [rax+rdx]
.text:000000000000408E                 mov     cs:outbase_length_7082, rbx
.text:0000000000004095                 mov     [r12+rcx], dl
.text:0000000000004099                 jmp     loc_3F51
.text:000000000000409E ; ---------------------------------------------------------------------------
.text:000000000000409E
.text:000000000000409E loc_409E:                               ; CODE XREF: next_file_name+24↑j
.text:000000000000409E                                         ; next_file_name+75↑j
.text:000000000000409E                 lea     rsi, aOutputFileSuff ; "output file suffixes exhausted"
.text:00000000000040A5                 mov     edx, 5          ; category
.text:00000000000040AA                 xor     edi, edi        ; domainname
.text:00000000000040AC                 call    _dcgettext
.text:00000000000040B1                 xor     esi, esi        ; errnum
.text:00000000000040B3                 mov     rdx, rax        ; format
.text:00000000000040B6                 mov     edi, 1          ; status
.text:00000000000040BB                 xor     eax, eax
.text:00000000000040BD                 call    _error
.text:00000000000040C2
.text:00000000000040C2 loc_40C2:                               ; CODE XREF: next_file_name+F2↑j
.text:00000000000040C2                                         ; next_file_name+239↑j
.text:00000000000040C2                 call    xalloc_die
.text:00000000000040C7 ; ---------------------------------------------------------------------------
.text:00000000000040C7
.text:00000000000040C7 loc_40C7:                               ; CODE XREF: next_file_name+1A7↑j
.text:00000000000040C7                 lea     rcx, __PRETTY_FUNCTION___7087 ; "next_file_name"
.text:00000000000040CE                 lea     rsi, file       ; "../coreutils-8.31/src/split.c"
.text:00000000000040D5                 lea     rdi, aWiden     ; "! widen"
.text:00000000000040DC                 mov     edx, 198h       ; line
.text:00000000000040E1                 call    ___assert_fail
.text:00000000000040E1 ; } // starts at 3E20
.text:00000000000040E1 next_file_name  endp
.text:00000000000040E1
.text:00000000000040E1 ; ---------------------------------------------------------------------------
.text:00000000000040E6                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0
.text:00000000000040F0 ; __int64 __fastcall create(char *value)
.text:00000000000040F0 create          proc near               ; CODE XREF: ofile_open:loc_476B↓p
.text:00000000000040F0                                         ; cwrite+52↓p
.text:00000000000040F0
.text:00000000000040F0 fd              = dword ptr -0B8h
.text:00000000000040F0 var_B0          = qword ptr -0B0h
.text:00000000000040F0 var_A0          = dword ptr -0A0h
.text:00000000000040F0 var_20          = qword ptr -20h
.text:00000000000040F0
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    r12
.text:00000000000040F2                 push    rbp
.text:00000000000040F3                 mov     r12, rdi
.text:00000000000040F6                 push    rbx
.text:00000000000040F7                 sub     rsp, 0A0h
.text:00000000000040FE                 mov     rax, fs:28h
.text:0000000000004107                 mov     [rsp+0B8h+var_20], rax
.text:000000000000410F                 xor     eax, eax
.text:0000000000004111                 cmp     cs:filter_command, 0
.text:0000000000004119                 jz      loc_42D8
.text:000000000000411F                 lea     rdi, name       ; "SHELL"
.text:0000000000004126                 call    _getenv
.text:000000000000412B                 lea     rdi, aFile      ; "FILE"
.text:0000000000004132                 test    rax, rax
.text:0000000000004135                 mov     rbp, rax
.text:0000000000004138                 lea     rax, path       ; "/bin/sh"
.text:000000000000413F                 mov     edx, 1          ; replace
.text:0000000000004144                 mov     rsi, r12        ; value
.text:0000000000004147                 cmovz   rbp, rax
.text:000000000000414B                 call    _setenv
.text:0000000000004150                 test    eax, eax
.text:0000000000004152                 jnz     loc_4501
.text:0000000000004158                 cmp     cs:verbose, 0
.text:000000000000415F                 jnz     loc_43A0
.text:0000000000004165
.text:0000000000004165 loc_4165:                               ; CODE XREF: create+2EE↓j
.text:0000000000004165                 mov     rdi, rsp        ; pipedes
.text:0000000000004168                 call    _pipe
.text:000000000000416D                 test    eax, eax
.text:000000000000416F                 jnz     loc_452D
.text:0000000000004175                 call    _fork
.text:000000000000417A                 test    eax, eax
.text:000000000000417C                 mov     ebx, eax
.text:000000000000417E                 jz      short loc_41F8
.text:0000000000004180                 cmp     eax, 0FFFFFFFFh
.text:0000000000004183                 jz      loc_464D
.text:0000000000004189                 mov     edi, [rsp+0B8h+fd] ; fd
.text:000000000000418C                 call    _close
.text:0000000000004191                 test    eax, eax
.text:0000000000004193                 jnz     loc_4621
.text:0000000000004199                 mov     rcx, cs:n_open_pipes
.text:00000000000041A0                 cmp     rcx, cs:open_pipes_alloc
.text:00000000000041A7                 mov     cs:filter_pid, ebx
.text:00000000000041AD                 mov     rdi, cs:open_pipes
.text:00000000000041B4                 jz      loc_4458
.text:00000000000041BA
.text:00000000000041BA loc_41BA:                               ; CODE XREF: create+3AC↓j
.text:00000000000041BA                 lea     rax, [rcx+1]
.text:00000000000041BE                 mov     cs:n_open_pipes, rax
.text:00000000000041C5                 mov     eax, [rsp+0B8h+fd+4]
.text:00000000000041C9                 mov     [rdi+rcx*4], eax
.text:00000000000041CC                 mov     ebx, [rsp+0B8h+fd+4]
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: create+20D↓j
.text:00000000000041D0                                         ; create+254↓j ...
.text:00000000000041D0                 mov     rcx, [rsp+0B8h+var_20]
.text:00000000000041D8                 xor     rcx, fs:28h
.text:00000000000041E1                 mov     eax, ebx
.text:00000000000041E3                 jnz     loc_44FC
.text:00000000000041E9                 add     rsp, 0A0h
.text:00000000000041F0                 pop     rbx
.text:00000000000041F1                 pop     rbp
.text:00000000000041F2                 pop     r12
.text:00000000000041F4                 retn
.text:00000000000041F4 ; ---------------------------------------------------------------------------
.text:00000000000041F5                 align 8
.text:00000000000041F8
.text:00000000000041F8 loc_41F8:                               ; CODE XREF: create+8E↑j
.text:00000000000041F8                 cmp     cs:n_open_pipes, 0
.text:0000000000004200                 jz      short loc_422C
.text:0000000000004202                 xor     ebx, ebx
.text:0000000000004204                 nop     dword ptr [rax+00h]
.text:0000000000004208
.text:0000000000004208 loc_4208:                               ; CODE XREF: create+13A↓j
.text:0000000000004208                 mov     rax, cs:open_pipes
.text:000000000000420F                 mov     edi, [rax+rbx*4] ; fd
.text:0000000000004212                 call    _close
.text:0000000000004217                 test    eax, eax
.text:0000000000004219                 jnz     loc_44D0
.text:000000000000421F                 add     rbx, 1
.text:0000000000004223                 cmp     cs:n_open_pipes, rbx
.text:000000000000422A                 ja      short loc_4208
.text:000000000000422C
.text:000000000000422C loc_422C:                               ; CODE XREF: create+110↑j
.text:000000000000422C                 mov     edi, [rsp+0B8h+fd+4] ; fd
.text:0000000000004230                 call    _close
.text:0000000000004235                 mov     r12d, eax
.text:0000000000004238                 call    ___errno_location
.text:000000000000423D                 test    r12d, r12d
.text:0000000000004240                 mov     rbx, rax
.text:0000000000004243                 jnz     loc_459A
.text:0000000000004249                 mov     edi, [rsp+0B8h+fd] ; fd
.text:000000000000424C                 test    edi, edi
.text:000000000000424E                 jz      short loc_426F
.text:0000000000004250                 xor     esi, esi        ; fd2
.text:0000000000004252                 call    _dup2
.text:0000000000004257                 test    eax, eax
.text:0000000000004259                 jnz     loc_45BE
.text:000000000000425F                 mov     edi, [rsp+0B8h+fd] ; fd
.text:0000000000004262                 call    _close
.text:0000000000004267                 test    eax, eax
.text:0000000000004269                 jnz     loc_43E8
.text:000000000000426F
.text:000000000000426F loc_426F:                               ; CODE XREF: create+15E↑j
.text:000000000000426F                 lea     rsi, oldblocked ; set
.text:0000000000004276                 xor     edx, edx        ; oset
.text:0000000000004278                 mov     edi, 2          ; how
.text:000000000000427D                 call    _sigprocmask
.text:0000000000004282                 mov     r12, cs:filter_command
.text:0000000000004289                 mov     rdi, rbp
.text:000000000000428C                 call    last_component
.text:0000000000004291                 lea     rdx, aC_0       ; "-c"
.text:0000000000004298                 xor     r8d, r8d
.text:000000000000429B                 mov     rsi, rax        ; arg
.text:000000000000429E                 mov     rcx, r12
.text:00000000000042A1                 mov     rdi, rbp        ; path
.text:00000000000042A4                 xor     eax, eax
.text:00000000000042A6                 call    _execl
.text:00000000000042AB                 lea     rsi, aFailedToRunCom ; "failed to run command: \"%s -c %s\""
.text:00000000000042B2                 mov     edx, 5          ; category
.text:00000000000042B7                 xor     edi, edi        ; domainname
.text:00000000000042B9                 call    _dcgettext
.text:00000000000042BE                 mov     esi, [rbx]      ; errnum
.text:00000000000042C0                 mov     rdx, rax        ; format
.text:00000000000042C3                 mov     r8, r12
.text:00000000000042C6                 mov     rcx, rbp
.text:00000000000042C9                 mov     edi, 1          ; status
.text:00000000000042CE                 xor     eax, eax
.text:00000000000042D0                 call    _error
.text:00000000000042D5                 nop     dword ptr [rax]
.text:00000000000042D8
.text:00000000000042D8 loc_42D8:                               ; CODE XREF: create+29↑j
.text:00000000000042D8                 cmp     cs:verbose, 0
.text:00000000000042DF                 jnz     loc_4410
.text:00000000000042E5
.text:00000000000042E5 loc_42E5:                               ; CODE XREF: create+35C↓j
.text:00000000000042E5                 xor     eax, eax
.text:00000000000042E7                 mov     edx, 1B6h
.text:00000000000042EC                 mov     esi, 41h ; 'A'
.text:00000000000042F1                 mov     rdi, r12
.text:00000000000042F4                 call    open_safer
.text:00000000000042F9                 test    eax, eax
.text:00000000000042FB                 mov     ebx, eax
.text:00000000000042FD                 js      loc_41D0
.text:0000000000004303                 mov     rdx, rsp        ; stat_buf
.text:0000000000004306                 mov     esi, eax        ; fildes
.text:0000000000004308                 mov     edi, 1          ; ver
.text:000000000000430D                 call    ___fxstat
.text:0000000000004312                 test    eax, eax
.text:0000000000004314                 jnz     loc_45E2
.text:000000000000431A                 mov     rax, [rsp+0B8h+var_B0]
.text:000000000000431F                 cmp     cs:in_stat_buf.st_ino, rax
.text:0000000000004326                 jnz     short loc_4339
.text:0000000000004328                 mov     rax, qword ptr [rsp+0B8h+fd]
.text:000000000000432C                 cmp     cs:in_stat_buf.st_dev, rax
.text:0000000000004333                 jz      loc_4563
.text:0000000000004339
.text:0000000000004339 loc_4339:                               ; CODE XREF: create+236↑j
.text:0000000000004339                 xor     esi, esi        ; length
.text:000000000000433B                 mov     edi, ebx        ; fd
.text:000000000000433D                 call    _ftruncate
.text:0000000000004342                 test    eax, eax
.text:0000000000004344                 jz      loc_41D0
.text:000000000000434A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000434E                 and     eax, 0F000h
.text:0000000000004353                 cmp     eax, 8000h
.text:0000000000004358                 jnz     loc_41D0
.text:000000000000435E                 mov     rdx, r12
.text:0000000000004361                 mov     esi, 3
.text:0000000000004366                 xor     edi, edi
.text:0000000000004368                 call    quotearg_n_style_colon
.text:000000000000436D                 lea     rsi, aSErrorTruncati ; "%s: error truncating"
.text:0000000000004374                 mov     edx, 5          ; category
.text:0000000000004379                 xor     edi, edi        ; domainname
.text:000000000000437B                 mov     rbp, rax
.text:000000000000437E                 call    _dcgettext
.text:0000000000004383                 mov     rbx, rax
.text:0000000000004386                 call    ___errno_location
.text:000000000000438B                 mov     esi, [rax]      ; errnum
.text:000000000000438D                 mov     rcx, rbp
.text:0000000000004390                 mov     rdx, rbx        ; format
.text:0000000000004393                 mov     edi, 1          ; status
.text:0000000000004398                 xor     eax, eax
.text:000000000000439A                 call    _error
.text:000000000000439F                 nop
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: create+6F↑j
.text:00000000000043A0                 mov     rdx, r12
.text:00000000000043A3                 xor     edi, edi
.text:00000000000043A5                 mov     esi, 3
.text:00000000000043AA                 call    quotearg_n_style_colon
.text:00000000000043AF                 lea     rsi, aExecutingWithF ; "executing with FILE=%s\n"
.text:00000000000043B6                 xor     edi, edi        ; domainname
.text:00000000000043B8                 mov     edx, 5          ; category
.text:00000000000043BD                 mov     rbx, rax
.text:00000000000043C0                 call    _dcgettext
.text:00000000000043C5                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000043CC                 mov     rdx, rax
.text:00000000000043CF                 mov     rcx, rbx
.text:00000000000043D2                 mov     esi, 1
.text:00000000000043D7                 xor     eax, eax
.text:00000000000043D9                 call    ___fprintf_chk
.text:00000000000043DE                 jmp     loc_4165
.text:00000000000043DE ; ---------------------------------------------------------------------------
.text:00000000000043E3                 align 8
.text:00000000000043E8
.text:00000000000043E8 loc_43E8:                               ; CODE XREF: create+179↑j
.text:00000000000043E8                 lea     rsi, aClosingInputPi ; "closing input pipe"
.text:00000000000043EF                 mov     edx, 5          ; category
.text:00000000000043F4                 xor     edi, edi        ; domainname
.text:00000000000043F6                 call    _dcgettext
.text:00000000000043FB                 mov     esi, [rbx]      ; errnum
.text:00000000000043FD                 mov     rdx, rax        ; format
.text:0000000000004400                 mov     edi, 1          ; status
.text:0000000000004405                 xor     eax, eax
.text:0000000000004407                 call    _error
.text:000000000000440C                 nop     dword ptr [rax+00h]
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: create+1EF↑j
.text:0000000000004410                 mov     rsi, rdi
.text:0000000000004413                 mov     edi, 4
.text:0000000000004418                 call    quotearg_style
.text:000000000000441D                 lea     rsi, aCreatingFileS ; "creating file %s\n"
.text:0000000000004424                 xor     edi, edi        ; domainname
.text:0000000000004426                 mov     edx, 5          ; category
.text:000000000000442B                 mov     rbx, rax
.text:000000000000442E                 call    _dcgettext
.text:0000000000004433                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000443A                 mov     rdx, rax
.text:000000000000443D                 mov     rcx, rbx
.text:0000000000004440                 mov     esi, 1
.text:0000000000004445                 xor     eax, eax
.text:0000000000004447                 call    ___fprintf_chk
.text:000000000000444C                 jmp     loc_42E5
.text:000000000000444C ; ---------------------------------------------------------------------------
.text:0000000000004451                 align 8
.text:0000000000004458
.text:0000000000004458 loc_4458:                               ; CODE XREF: create+C4↑j
.text:0000000000004458                 test    rdi, rdi
.text:000000000000445B                 jz      short loc_44A1
.text:000000000000445D                 mov     rax, 1555555555555554h
.text:0000000000004467                 cmp     rcx, rax
.text:000000000000446A                 ja      short loc_44CA
.text:000000000000446C                 mov     rax, rcx
.text:000000000000446F                 shr     rax, 1
.text:0000000000004472                 lea     rcx, [rcx+rax+1]
.text:0000000000004477
.text:0000000000004477 loc_4477:                               ; CODE XREF: create+3D8↓j
.text:0000000000004477                 lea     rsi, ds:0[rcx*4]
.text:000000000000447F                 mov     cs:open_pipes_alloc, rcx
.text:0000000000004486                 call    xrealloc
.text:000000000000448B                 mov     rcx, cs:n_open_pipes
.text:0000000000004492                 mov     rdi, rax
.text:0000000000004495                 mov     cs:open_pipes, rax
.text:000000000000449C                 jmp     loc_41BA
.text:00000000000044A1 ; ---------------------------------------------------------------------------
.text:00000000000044A1
.text:00000000000044A1 loc_44A1:                               ; CODE XREF: create+36B↑j
.text:00000000000044A1                 test    rcx, rcx
.text:00000000000044A4                 mov     eax, 20h ; ' '
.text:00000000000044A9                 mov     edx, 4
.text:00000000000044AE                 cmovz   rcx, rax
.text:00000000000044B2                 mov     rax, rdx
.text:00000000000044B5                 xor     esi, esi
.text:00000000000044B7                 mul     rcx
.text:00000000000044BA                 jo      loc_4559
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: create+46E↓j
.text:00000000000044C0                 test    rax, rax
.text:00000000000044C3                 js      short loc_44CA
.text:00000000000044C5                 test    rsi, rsi
.text:00000000000044C8                 jz      short loc_4477
.text:00000000000044CA
.text:00000000000044CA loc_44CA:                               ; CODE XREF: create+37A↑j
.text:00000000000044CA                                         ; create+3D3↑j
.text:00000000000044CA                 call    xalloc_die
.text:00000000000044CA ; ---------------------------------------------------------------------------
.text:00000000000044CF                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: create+129↑j
.text:00000000000044D0                 lea     rsi, aClosingPriorPi ; "closing prior pipe"
.text:00000000000044D7                 mov     edx, 5          ; category
.text:00000000000044DC                 xor     edi, edi        ; domainname
.text:00000000000044DE                 call    _dcgettext
.text:00000000000044E3                 mov     rbx, rax
.text:00000000000044E6                 call    ___errno_location
.text:00000000000044EB                 mov     esi, [rax]      ; errnum
.text:00000000000044ED                 mov     rdx, rbx        ; format
.text:00000000000044F0                 mov     edi, 1          ; status
.text:00000000000044F5                 xor     eax, eax
.text:00000000000044F7                 call    _error
.text:00000000000044FC
.text:00000000000044FC loc_44FC:                               ; CODE XREF: create+F3↑j
.text:00000000000044FC                 call    ___stack_chk_fail
.text:0000000000004501 ; ---------------------------------------------------------------------------
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: create+62↑j
.text:0000000000004501                 lea     rsi, aFailedToSetFil ; "failed to set FILE environment variable"
.text:0000000000004508                 mov     edx, 5          ; category
.text:000000000000450D                 xor     edi, edi        ; domainname
.text:000000000000450F                 call    _dcgettext
.text:0000000000004514                 mov     rbx, rax
.text:0000000000004517                 call    ___errno_location
.text:000000000000451C                 mov     esi, [rax]      ; errnum
.text:000000000000451E                 mov     rdx, rbx        ; format
.text:0000000000004521                 mov     edi, 1          ; status
.text:0000000000004526                 xor     eax, eax
.text:0000000000004528                 call    _error
.text:000000000000452D
.text:000000000000452D loc_452D:                               ; CODE XREF: create+7F↑j
.text:000000000000452D                 lea     rsi, aFailedToCreate ; "failed to create pipe"
.text:0000000000004534                 mov     edx, 5          ; category
.text:0000000000004539                 xor     edi, edi        ; domainname
.text:000000000000453B                 call    _dcgettext
.text:0000000000004540                 mov     rbx, rax
.text:0000000000004543                 call    ___errno_location
.text:0000000000004548                 mov     esi, [rax]      ; errnum
.text:000000000000454A                 mov     rdx, rbx        ; format
.text:000000000000454D                 mov     edi, 1          ; status
.text:0000000000004552                 xor     eax, eax
.text:0000000000004554                 call    _error
.text:0000000000004559
.text:0000000000004559 loc_4559:                               ; CODE XREF: create+3CA↑j
.text:0000000000004559                 mov     esi, 1
.text:000000000000455E                 jmp     loc_44C0
.text:0000000000004563 ; ---------------------------------------------------------------------------
.text:0000000000004563
.text:0000000000004563 loc_4563:                               ; CODE XREF: create+243↑j
.text:0000000000004563                 mov     rsi, r12
.text:0000000000004566                 mov     edi, 4
.text:000000000000456B                 call    quotearg_style
.text:0000000000004570                 lea     rsi, aSWouldOverwrit ; "%s would overwrite input; aborting"
.text:0000000000004577                 mov     rbx, rax
.text:000000000000457A                 mov     edx, 5          ; category
.text:000000000000457F                 xor     edi, edi        ; domainname
.text:0000000000004581                 call    _dcgettext
.text:0000000000004586                 mov     rcx, rbx
.text:0000000000004589                 mov     rdx, rax        ; format
.text:000000000000458C                 xor     esi, esi        ; errnum
.text:000000000000458E                 mov     edi, 1          ; status
.text:0000000000004593                 xor     eax, eax
.text:0000000000004595                 call    _error
.text:000000000000459A
.text:000000000000459A loc_459A:                               ; CODE XREF: create+153↑j
.text:000000000000459A                 lea     rsi, aClosingOutputP ; "closing output pipe"
.text:00000000000045A1                 mov     edx, 5          ; category
.text:00000000000045A6                 xor     edi, edi        ; domainname
.text:00000000000045A8                 call    _dcgettext
.text:00000000000045AD                 mov     esi, [rbx]      ; errnum
.text:00000000000045AF                 mov     rdx, rax        ; format
.text:00000000000045B2                 mov     edi, 1          ; status
.text:00000000000045B7                 xor     eax, eax
.text:00000000000045B9                 call    _error
.text:00000000000045BE
.text:00000000000045BE loc_45BE:                               ; CODE XREF: create+169↑j
.text:00000000000045BE                 lea     rsi, aMovingInputPip ; "moving input pipe"
.text:00000000000045C5                 mov     edx, 5          ; category
.text:00000000000045CA                 xor     edi, edi        ; domainname
.text:00000000000045CC                 call    _dcgettext
.text:00000000000045D1                 mov     esi, [rbx]      ; errnum
.text:00000000000045D3                 mov     rdx, rax        ; format
.text:00000000000045D6                 mov     edi, 1          ; status
.text:00000000000045DB                 xor     eax, eax
.text:00000000000045DD                 call    _error
.text:00000000000045E2
.text:00000000000045E2 loc_45E2:                               ; CODE XREF: create+224↑j
.text:00000000000045E2                 mov     rsi, r12
.text:00000000000045E5                 mov     edi, 4
.text:00000000000045EA                 call    quotearg_style
.text:00000000000045EF                 lea     rsi, aFailedToStatS ; "failed to stat %s"
.text:00000000000045F6                 mov     edx, 5          ; category
.text:00000000000045FB                 xor     edi, edi        ; domainname
.text:00000000000045FD                 mov     rbp, rax
.text:0000000000004600                 call    _dcgettext
.text:0000000000004605                 mov     rbx, rax
.text:0000000000004608                 call    ___errno_location
.text:000000000000460D                 mov     esi, [rax]      ; errnum
.text:000000000000460F                 mov     rcx, rbp
.text:0000000000004612                 mov     rdx, rbx        ; format
.text:0000000000004615                 mov     edi, 1          ; status
.text:000000000000461A                 xor     eax, eax
.text:000000000000461C                 call    _error
.text:0000000000004621
.text:0000000000004621 loc_4621:                               ; CODE XREF: create+A3↑j
.text:0000000000004621                 lea     rsi, aFailedToCloseI ; "failed to close input pipe"
.text:0000000000004628                 mov     edx, 5          ; category
.text:000000000000462D                 xor     edi, edi        ; domainname
.text:000000000000462F                 call    _dcgettext
.text:0000000000004634                 mov     rbx, rax
.text:0000000000004637                 call    ___errno_location
.text:000000000000463C                 mov     esi, [rax]      ; errnum
.text:000000000000463E                 mov     rdx, rbx        ; format
.text:0000000000004641                 mov     edi, 1          ; status
.text:0000000000004646                 xor     eax, eax
.text:0000000000004648                 call    _error
.text:000000000000464D
.text:000000000000464D loc_464D:                               ; CODE XREF: create+93↑j
.text:000000000000464D                 lea     rsi, aForkSystemCall ; "fork system call failed"
.text:0000000000004654                 mov     edx, 5          ; category
.text:0000000000004659                 xor     edi, edi        ; domainname
.text:000000000000465B                 call    _dcgettext
.text:0000000000004660                 mov     rbx, rax
.text:0000000000004663                 call    ___errno_location
.text:0000000000004668                 mov     esi, [rax]      ; errnum
.text:000000000000466A                 mov     rdx, rbx        ; format
.text:000000000000466D                 mov     edi, 1          ; status
.text:0000000000004672                 xor     eax, eax
.text:0000000000004674                 call    _error
.text:0000000000004674 ; } // starts at 40F0
.text:0000000000004679                 nop     dword ptr [rax+00000000h]
.text:0000000000004679 create          endp ; sp-analysis failed
.text:0000000000004679
.text:0000000000004680
.text:0000000000004680 ; =============== S U B R O U T I N E =======================================
.text:0000000000004680
.text:0000000000004680
.text:0000000000004680 ofile_open      proc near               ; CODE XREF: main+124B↑p
.text:0000000000004680                                         ; main+157A↑p
.text:0000000000004680
.text:0000000000004680 var_40          = qword ptr -40h
.text:0000000000004680
.text:0000000000004680 ; __unwind {
.text:0000000000004680                 push    r15
.text:0000000000004682                 push    r14
.text:0000000000004684                 push    r13
.text:0000000000004686                 mov     r13, rsi
.text:0000000000004689                 push    r12
.text:000000000000468B                 shl     r13, 5
.text:000000000000468F                 push    rbp
.text:0000000000004690                 push    rbx
.text:0000000000004691                 add     r13, rdi
.text:0000000000004694                 xor     ebp, ebp
.text:0000000000004696                 sub     rsp, 18h
.text:000000000000469A                 mov     eax, [r13+8]
.text:000000000000469E                 test    eax, eax
.text:00000000000046A0                 js      short loc_46B3
.text:00000000000046A2
.text:00000000000046A2 loc_46A2:                               ; CODE XREF: ofile_open+12B↓j
.text:00000000000046A2                 add     rsp, 18h
.text:00000000000046A6                 mov     eax, ebp
.text:00000000000046A8                 pop     rbx
.text:00000000000046A9                 pop     rbp
.text:00000000000046AA                 pop     r12
.text:00000000000046AC                 pop     r13
.text:00000000000046AE                 pop     r14
.text:00000000000046B0                 pop     r15
.text:00000000000046B2                 retn
.text:00000000000046B3 ; ---------------------------------------------------------------------------
.text:00000000000046B3
.text:00000000000046B3 loc_46B3:                               ; CODE XREF: ofile_open+20↑j
.text:00000000000046B3                 lea     rbx, [rsi-1]
.text:00000000000046B7                 lea     r14, [rdx-1]
.text:00000000000046BB                 test    rsi, rsi
.text:00000000000046BE                 mov     r12, rdi
.text:00000000000046C1                 mov     r15, rsi
.text:00000000000046C4                 mov     rdi, [r13+0]
.text:00000000000046C8                 cmovz   rbx, r14
.text:00000000000046CC                 cmp     eax, 0FFFFFFFFh
.text:00000000000046CF                 jz      loc_476B
.text:00000000000046D5                 nop     dword ptr [rax]
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: ofile_open+E5↓j
.text:00000000000046D8                 xor     eax, eax
.text:00000000000046DA                 mov     esi, 0C01h
.text:00000000000046DF                 call    open_safer
.text:00000000000046E4                 test    eax, eax
.text:00000000000046E6                 jns     loc_4778
.text:00000000000046EC
.text:00000000000046EC loc_46EC:                               ; CODE XREF: ofile_open+F2↓j
.text:00000000000046EC                 call    ___errno_location
.text:00000000000046F1                 mov     r8, rax
.text:00000000000046F4                 mov     eax, [rax]
.text:00000000000046F6                 sub     eax, 17h
.text:00000000000046F9                 cmp     eax, 1
.text:00000000000046FC                 jbe     short loc_471F
.text:00000000000046FE                 jmp     loc_47E3
.text:00000000000046FE ; ---------------------------------------------------------------------------
.text:0000000000004703                 align 8
.text:0000000000004708
.text:0000000000004708 loc_4708:                               ; CODE XREF: ofile_open+AE↓j
.text:0000000000004708                 lea     rax, [rbx-1]
.text:000000000000470C                 test    rbx, rbx
.text:000000000000470F                 cmovz   rax, r14
.text:0000000000004713                 cmp     rax, r15
.text:0000000000004716                 mov     rbx, rax
.text:0000000000004719                 jz      loc_47B0
.text:000000000000471F
.text:000000000000471F loc_471F:                               ; CODE XREF: ofile_open+7C↑j
.text:000000000000471F                 mov     rbp, rbx
.text:0000000000004722                 shl     rbp, 5
.text:0000000000004726                 add     rbp, r12
.text:0000000000004729                 mov     eax, [rbp+8]
.text:000000000000472C                 test    eax, eax
.text:000000000000472E                 js      short loc_4708
.text:0000000000004730                 mov     rdi, [rbp+10h]  ; stream
.text:0000000000004734                 mov     [rsp+48h+var_40], r8
.text:0000000000004739                 call    rpl_fclose
.text:000000000000473E                 test    eax, eax
.text:0000000000004740                 jnz     loc_4816
.text:0000000000004746                 mov     dword ptr [rbp+8], 0FFFFFFFEh
.text:000000000000474D                 mov     eax, [r13+8]
.text:0000000000004751                 mov     qword ptr [rbp+10h], 0
.text:0000000000004759                 mov     rdi, [r13+0]    ; value
.text:000000000000475D                 mov     ebp, 1
.text:0000000000004762                 cmp     eax, 0FFFFFFFFh
.text:0000000000004765                 jnz     loc_46D8
.text:000000000000476B
.text:000000000000476B loc_476B:                               ; CODE XREF: ofile_open+4F↑j
.text:000000000000476B                 call    create
.text:0000000000004770                 test    eax, eax
.text:0000000000004772                 js      loc_46EC
.text:0000000000004778
.text:0000000000004778 loc_4778:                               ; CODE XREF: ofile_open+66↑j
.text:0000000000004778                 lea     rsi, modes      ; "a"
.text:000000000000477F                 mov     [r13+8], eax
.text:0000000000004783                 mov     edi, eax        ; fd
.text:0000000000004785                 call    _fdopen
.text:000000000000478A                 test    rax, rax
.text:000000000000478D                 mov     [r13+10h], rax
.text:0000000000004791                 jz      loc_4844
.text:0000000000004797                 mov     eax, cs:filter_pid
.text:000000000000479D                 mov     cs:filter_pid, 0
.text:00000000000047A7                 mov     [r13+18h], eax
.text:00000000000047AB                 jmp     loc_46A2
.text:00000000000047B0 ; ---------------------------------------------------------------------------
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: ofile_open+99↑j
.text:00000000000047B0                 mov     rdx, [r13+0]
.text:00000000000047B4                 mov     esi, 3
.text:00000000000047B9                 xor     edi, edi
.text:00000000000047BB                 mov     [rsp+48h+var_40], r8
.text:00000000000047C0                 call    quotearg_n_style_colon
.text:00000000000047C5                 mov     r8, [rsp+48h+var_40]
.text:00000000000047CA                 lea     rdx, format+4   ; format
.text:00000000000047D1                 mov     rcx, rax
.text:00000000000047D4                 mov     edi, 1          ; status
.text:00000000000047D9                 xor     eax, eax
.text:00000000000047DB                 mov     esi, [r8]       ; errnum
.text:00000000000047DE                 call    _error
.text:00000000000047E3
.text:00000000000047E3 loc_47E3:                               ; CODE XREF: ofile_open+7E↑j
.text:00000000000047E3                 mov     rdx, [r13+0]
.text:00000000000047E7                 mov     esi, 3
.text:00000000000047EC                 xor     edi, edi
.text:00000000000047EE                 mov     [rsp+48h+var_40], r8
.text:00000000000047F3                 call    quotearg_n_style_colon
.text:00000000000047F8                 mov     r8, [rsp+48h+var_40]
.text:00000000000047FD                 lea     rdx, format+4   ; format
.text:0000000000004804                 mov     rcx, rax
.text:0000000000004807                 mov     edi, 1          ; status
.text:000000000000480C                 xor     eax, eax
.text:000000000000480E                 mov     esi, [r8]       ; errnum
.text:0000000000004811                 call    _error
.text:0000000000004816
.text:0000000000004816 loc_4816:                               ; CODE XREF: ofile_open+C0↑j
.text:0000000000004816                 mov     rdx, [rbp+0]
.text:000000000000481A                 mov     esi, 3
.text:000000000000481F                 xor     edi, edi
.text:0000000000004821                 call    quotearg_n_style_colon
.text:0000000000004826                 mov     r8, [rsp+48h+var_40]
.text:000000000000482B                 lea     rdx, format+4   ; format
.text:0000000000004832                 mov     rcx, rax
.text:0000000000004835                 mov     edi, 1          ; status
.text:000000000000483A                 xor     eax, eax
.text:000000000000483C                 mov     esi, [r8]       ; errnum
.text:000000000000483F                 call    _error
.text:0000000000004844
.text:0000000000004844 loc_4844:                               ; CODE XREF: ofile_open+111↑j
.text:0000000000004844                 mov     rdx, [r13+0]
.text:0000000000004848                 mov     esi, 3
.text:000000000000484D                 xor     edi, edi
.text:000000000000484F                 call    quotearg_n_style_colon
.text:0000000000004854                 mov     rbx, rax
.text:0000000000004857                 call    ___errno_location
.text:000000000000485C                 mov     esi, [rax]      ; errnum
.text:000000000000485E                 lea     rdx, format+4   ; format
.text:0000000000004865                 mov     rcx, rbx
.text:0000000000004868                 mov     edi, 1          ; status
.text:000000000000486D                 xor     eax, eax
.text:000000000000486F                 call    _error
.text:000000000000486F ; } // starts at 4680
.text:0000000000004874                 xchg    ax, ax
.text:0000000000004876                 db      2Eh
.text:0000000000004876                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004876 ofile_open      endp ; sp-analysis failed
.text:0000000000004876
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880
.text:0000000000004880 closeout        proc near               ; CODE XREF: main+F5A↑p
.text:0000000000004880                                         ; main+1591↑p ...
.text:0000000000004880
.text:0000000000004880 var_5C          = dword ptr -5Ch
.text:0000000000004880 stat_loc        = dword ptr -4Ch
.text:0000000000004880 var_48          = byte ptr -48h
.text:0000000000004880 var_30          = qword ptr -30h
.text:0000000000004880
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 push    r13
.text:0000000000004882                 push    r12
.text:0000000000004884                 mov     r12d, edx
.text:0000000000004887                 push    rbp
.text:0000000000004888                 push    rbx
.text:0000000000004889                 mov     ebp, esi
.text:000000000000488B                 mov     rbx, rcx
.text:000000000000488E                 sub     rsp, 48h
.text:0000000000004892                 mov     rax, fs:28h
.text:000000000000489B                 mov     [rsp+68h+var_30], rax
.text:00000000000048A0                 xor     eax, eax
.text:00000000000048A2                 test    rdi, rdi
.text:00000000000048A5                 jz      loc_49B8
.text:00000000000048AB                 call    rpl_fclose
.text:00000000000048B0                 test    eax, eax
.text:00000000000048B2                 jnz     loc_4970
.text:00000000000048B8
.text:00000000000048B8 loc_48B8:                               ; CODE XREF: closeout+105↓j
.text:00000000000048B8                 test    ebp, ebp
.text:00000000000048BA                 js      short loc_4900
.text:00000000000048BC
.text:00000000000048BC loc_48BC:                               ; CODE XREF: closeout+149↓j
.text:00000000000048BC                 mov     rdi, cs:n_open_pipes
.text:00000000000048C3                 test    rdi, rdi
.text:00000000000048C6                 jz      short loc_4900
.text:00000000000048C8                 mov     rsi, cs:open_pipes
.text:00000000000048CF                 cmp     ebp, [rsi]
.text:00000000000048D1                 jz      loc_4A00
.text:00000000000048D7                 lea     rdx, [rsi+4]
.text:00000000000048DB                 sub     rdi, 1
.text:00000000000048DF                 xor     eax, eax
.text:00000000000048E1                 jmp     short loc_48FB
.text:00000000000048E1 ; ---------------------------------------------------------------------------
.text:00000000000048E3                 align 8
.text:00000000000048E8
.text:00000000000048E8 loc_48E8:                               ; CODE XREF: closeout+7E↓j
.text:00000000000048E8                 mov     rcx, rdx
.text:00000000000048EB                 add     rax, 1
.text:00000000000048EF                 add     rdx, 4
.text:00000000000048F3                 cmp     [rcx], ebp
.text:00000000000048F5                 jz      loc_4A10
.text:00000000000048FB
.text:00000000000048FB loc_48FB:                               ; CODE XREF: closeout+61↑j
.text:00000000000048FB                 cmp     rdi, rax
.text:00000000000048FE                 jnz     short loc_48E8
.text:0000000000004900
.text:0000000000004900 loc_4900:                               ; CODE XREF: closeout+3A↑j
.text:0000000000004900                                         ; closeout+46↑j ...
.text:0000000000004900                 test    r12d, r12d
.text:0000000000004903                 jle     short loc_4948
.text:0000000000004905                 lea     rsi, [rsp+68h+stat_loc] ; stat_loc
.text:000000000000490A                 xor     edx, edx        ; options
.text:000000000000490C                 mov     edi, r12d       ; pid
.text:000000000000490F                 mov     [rsp+68h+stat_loc], 0
.text:0000000000004917                 call    _waitpid
.text:000000000000491C                 cmp     eax, 0FFFFFFFFh
.text:000000000000491F                 jz      loc_4A88
.text:0000000000004925
.text:0000000000004925 loc_4925:                               ; CODE XREF: closeout+213↓j
.text:0000000000004925                 mov     ecx, [rsp+68h+stat_loc]
.text:0000000000004929                 mov     ebp, ecx
.text:000000000000492B                 and     ebp, 7Fh
.text:000000000000492E                 lea     eax, [rbp+1]
.text:0000000000004931                 cmp     al, 1
.text:0000000000004933                 jle     loc_4A28
.text:0000000000004939                 cmp     ebp, 0Dh
.text:000000000000493C                 jnz     loc_4AC0
.text:0000000000004942                 nop     word ptr [rax+rax+00h]
.text:0000000000004948
.text:0000000000004948 loc_4948:                               ; CODE XREF: closeout+83↑j
.text:0000000000004948                                         ; closeout+1B5↓j ...
.text:0000000000004948                 mov     rax, [rsp+68h+var_30]
.text:000000000000494D                 xor     rax, fs:28h
.text:0000000000004956                 jnz     loc_4B40
.text:000000000000495C                 add     rsp, 48h
.text:0000000000004960                 pop     rbx
.text:0000000000004961                 pop     rbp
.text:0000000000004962                 pop     r12
.text:0000000000004964                 pop     r13
.text:0000000000004966                 retn
.text:0000000000004966 ; ---------------------------------------------------------------------------
.text:0000000000004967                 align 10h
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: closeout+32↑j
.text:0000000000004970                 call    ___errno_location
.text:0000000000004975                 cmp     cs:filter_command, 0
.text:000000000000497D                 mov     r13, rax
.text:0000000000004980                 jz      short loc_498B
.text:0000000000004982                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000004985                 jz      loc_48B8
.text:000000000000498B
.text:000000000000498B loc_498B:                               ; CODE XREF: closeout+100↑j
.text:000000000000498B                 mov     rdx, rbx
.text:000000000000498E                 mov     esi, 3
.text:0000000000004993                 xor     edi, edi
.text:0000000000004995                 call    quotearg_n_style_colon
.text:000000000000499A                 mov     esi, [r13+0]    ; errnum
.text:000000000000499E                 lea     rdx, format+4   ; format
.text:00000000000049A5                 mov     rcx, rax
.text:00000000000049A8                 mov     edi, 1          ; status
.text:00000000000049AD                 xor     eax, eax
.text:00000000000049AF                 call    _error
.text:00000000000049B4                 nop     dword ptr [rax+00h]
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: closeout+25↑j
.text:00000000000049B8                 test    esi, esi
.text:00000000000049BA                 js      loc_4900
.text:00000000000049C0                 mov     edi, ebp        ; fd
.text:00000000000049C2                 call    _close
.text:00000000000049C7                 test    eax, eax
.text:00000000000049C9                 jns     loc_48BC
.text:00000000000049CF                 mov     rdx, rbx
.text:00000000000049D2                 mov     esi, 3
.text:00000000000049D7                 xor     edi, edi
.text:00000000000049D9                 call    quotearg_n_style_colon
.text:00000000000049DE                 mov     rbx, rax
.text:00000000000049E1                 call    ___errno_location
.text:00000000000049E6                 mov     esi, [rax]      ; errnum
.text:00000000000049E8                 lea     rdx, format+4   ; format
.text:00000000000049EF                 mov     rcx, rbx
.text:00000000000049F2                 mov     edi, 1          ; status
.text:00000000000049F7                 xor     eax, eax
.text:00000000000049F9                 call    _error
.text:00000000000049FE                 xchg    ax, ax
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: closeout+51↑j
.text:0000000000004A00                 mov     rcx, rsi
.text:0000000000004A03                 sub     rdi, 1
.text:0000000000004A07                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004A10
.text:0000000000004A10 loc_4A10:                               ; CODE XREF: closeout+75↑j
.text:0000000000004A10                 mov     eax, [rsi+rdi*4]
.text:0000000000004A13                 mov     cs:n_open_pipes, rdi
.text:0000000000004A1A                 mov     [rcx], eax
.text:0000000000004A1C                 jmp     loc_4900
.text:0000000000004A1C ; ---------------------------------------------------------------------------
.text:0000000000004A21                 align 8
.text:0000000000004A28
.text:0000000000004A28 loc_4A28:                               ; CODE XREF: closeout+B3↑j
.text:0000000000004A28                 test    ebp, ebp
.text:0000000000004A2A                 jnz     loc_4B45
.text:0000000000004A30                 movzx   ebp, ch
.text:0000000000004A33                 test    ebp, ebp
.text:0000000000004A35                 jz      loc_4948
.text:0000000000004A3B                 mov     r12, cs:filter_command
.text:0000000000004A42                 mov     rdx, rbx
.text:0000000000004A45                 xor     edi, edi
.text:0000000000004A47                 mov     esi, 3
.text:0000000000004A4C                 call    quotearg_n_style_colon
.text:0000000000004A51                 lea     rsi, aWithFileSExitD ; "with FILE=%s, exit %d from command: %s"
.text:0000000000004A58                 mov     rbx, rax
.text:0000000000004A5B                 xor     edi, edi        ; domainname
.text:0000000000004A5D                 mov     edx, 5          ; category
.text:0000000000004A62                 call    _dcgettext
.text:0000000000004A67                 mov     r9, r12
.text:0000000000004A6A                 mov     rdx, rax        ; format
.text:0000000000004A6D                 mov     r8d, ebp
.text:0000000000004A70                 mov     rcx, rbx
.text:0000000000004A73                 xor     esi, esi        ; errnum
.text:0000000000004A75                 mov     edi, ebp        ; status
.text:0000000000004A77                 xor     eax, eax
.text:0000000000004A79                 call    _error
.text:0000000000004A7E                 jmp     loc_4948
.text:0000000000004A7E ; ---------------------------------------------------------------------------
.text:0000000000004A83                 align 8
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: closeout+9F↑j
.text:0000000000004A88                 call    ___errno_location
.text:0000000000004A8D                 cmp     dword ptr [rax], 0Ah
.text:0000000000004A90                 mov     rbp, rax
.text:0000000000004A93                 jz      loc_4925
.text:0000000000004A99                 lea     rsi, aWaitingForChil ; "waiting for child process"
.text:0000000000004AA0                 mov     edx, 5          ; category
.text:0000000000004AA5                 xor     edi, edi        ; domainname
.text:0000000000004AA7                 call    _dcgettext
.text:0000000000004AAC                 mov     esi, [rbp+0]    ; errnum
.text:0000000000004AAF                 mov     rdx, rax        ; format
.text:0000000000004AB2                 mov     edi, 1          ; status
.text:0000000000004AB7                 xor     eax, eax
.text:0000000000004AB9                 call    _error
.text:0000000000004ABE                 xchg    ax, ax
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: closeout+BC↑j
.text:0000000000004AC0                 lea     r12, [rsp+68h+var_48]
.text:0000000000004AC5                 mov     edi, ebp
.text:0000000000004AC7                 mov     rsi, r12
.text:0000000000004ACA                 call    sig2str
.text:0000000000004ACF                 test    eax, eax
.text:0000000000004AD1                 jnz     short loc_4B20
.text:0000000000004AD3
.text:0000000000004AD3 loc_4AD3:                               ; CODE XREF: closeout+2BE↓j
.text:0000000000004AD3                 mov     rdx, rbx
.text:0000000000004AD6                 xor     edi, edi
.text:0000000000004AD8                 mov     esi, 3
.text:0000000000004ADD                 mov     r13, cs:filter_command
.text:0000000000004AE4                 call    quotearg_n_style_colon
.text:0000000000004AE9                 lea     rsi, aWithFileSSigna ; "with FILE=%s, signal %s from command: %"...
.text:0000000000004AF0                 xor     edi, edi        ; domainname
.text:0000000000004AF2                 mov     edx, 5          ; category
.text:0000000000004AF7                 mov     rbx, rax
.text:0000000000004AFA                 call    _dcgettext
.text:0000000000004AFF                 lea     edi, [rbp+80h]  ; status
.text:0000000000004B05                 mov     rdx, rax        ; format
.text:0000000000004B08                 mov     r9, r13
.text:0000000000004B0B                 mov     r8, r12
.text:0000000000004B0E                 mov     rcx, rbx
.text:0000000000004B11                 xor     esi, esi        ; errnum
.text:0000000000004B13                 xor     eax, eax
.text:0000000000004B15                 call    _error
.text:0000000000004B1A                 jmp     loc_4948
.text:0000000000004B1A ; ---------------------------------------------------------------------------
.text:0000000000004B1F                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: closeout+251↑j
.text:0000000000004B20                 lea     rcx, aD         ; "%d"
.text:0000000000004B27                 mov     r8d, ebp
.text:0000000000004B2A                 mov     edx, 13h
.text:0000000000004B2F                 mov     esi, 1
.text:0000000000004B34                 mov     rdi, r12
.text:0000000000004B37                 xor     eax, eax
.text:0000000000004B39                 call    ___sprintf_chk
.text:0000000000004B3E                 jmp     short loc_4AD3
.text:0000000000004B40 ; ---------------------------------------------------------------------------
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: closeout+D6↑j
.text:0000000000004B40                 call    ___stack_chk_fail
.text:0000000000004B45 ; ---------------------------------------------------------------------------
.text:0000000000004B45
.text:0000000000004B45 loc_4B45:                               ; CODE XREF: closeout+1AA↑j
.text:0000000000004B45                 lea     rsi, aUnknownStatusF ; "unknown status from command (0x%X)"
.text:0000000000004B4C                 mov     edx, 5          ; category
.text:0000000000004B51                 xor     edi, edi        ; domainname
.text:0000000000004B53                 mov     [rsp+68h+var_5C], ecx
.text:0000000000004B57                 call    _dcgettext
.text:0000000000004B5C                 mov     ecx, [rsp+68h+var_5C]
.text:0000000000004B60                 mov     rdx, rax        ; format
.text:0000000000004B63                 xor     esi, esi        ; errnum
.text:0000000000004B65                 mov     edi, 1          ; status
.text:0000000000004B6A                 xor     eax, eax
.text:0000000000004B6C                 call    _error
.text:0000000000004B6C ; } // starts at 4880
.text:0000000000004B71                 nop     dword ptr [rax+rax+00h]
.text:0000000000004B76                 db      2Eh
.text:0000000000004B76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004B76 closeout        endp ; sp-analysis failed
.text:0000000000004B76
.text:0000000000004B80
.text:0000000000004B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B80
.text:0000000000004B80
.text:0000000000004B80 cwrite          proc near               ; CODE XREF: main+B2E↑p
.text:0000000000004B80                                         ; main+C01↑p ...
.text:0000000000004B80 ; __unwind {
.text:0000000000004B80                 push    rbp
.text:0000000000004B81                 push    rbx
.text:0000000000004B82                 mov     rbp, rsi
.text:0000000000004B85                 mov     rbx, rdx
.text:0000000000004B88                 sub     rsp, 8
.text:0000000000004B8C                 test    dil, dil
.text:0000000000004B8F                 jz      loc_4C50
.text:0000000000004B95                 test    rsi, rsi
.text:0000000000004B98                 jnz     short loc_4BAC
.text:0000000000004B9A                 test    rdx, rdx
.text:0000000000004B9D                 jnz     short loc_4BAC
.text:0000000000004B9F                 cmp     cs:elide_empty_files, 0
.text:0000000000004BA6                 jnz     loc_4C40
.text:0000000000004BAC
.text:0000000000004BAC loc_4BAC:                               ; CODE XREF: cwrite+18↑j
.text:0000000000004BAC                                         ; cwrite+1D↑j
.text:0000000000004BAC                 mov     rcx, cs:outfile
.text:0000000000004BB3                 mov     edx, cs:filter_pid
.text:0000000000004BB9                 xor     edi, edi
.text:0000000000004BBB                 mov     esi, cs:output_desc
.text:0000000000004BC1                 call    closeout
.text:0000000000004BC6                 call    next_file_name
.text:0000000000004BCB                 mov     rdi, cs:outfile ; value
.text:0000000000004BD2                 call    create
.text:0000000000004BD7                 test    eax, eax
.text:0000000000004BD9                 mov     edi, eax        ; fd
.text:0000000000004BDB                 mov     cs:output_desc, eax
.text:0000000000004BE1                 js      short loc_4C58
.text:0000000000004BE3
.text:0000000000004BE3 loc_4BE3:                               ; CODE XREF: cwrite+D6↓j
.text:0000000000004BE3                 mov     rdx, rbx        ; n
.text:0000000000004BE6                 mov     rsi, rbp        ; buf
.text:0000000000004BE9                 call    full_write
.text:0000000000004BEE                 cmp     rax, rbx
.text:0000000000004BF1                 jz      short loc_4C40
.text:0000000000004BF3                 call    ___errno_location
.text:0000000000004BF8                 cmp     cs:filter_command, 0
.text:0000000000004C00                 mov     rbx, rax
.text:0000000000004C03                 jz      short loc_4C0C
.text:0000000000004C05                 xor     eax, eax
.text:0000000000004C07                 cmp     dword ptr [rbx], 20h ; ' '
.text:0000000000004C0A                 jz      short loc_4C45
.text:0000000000004C0C
.text:0000000000004C0C loc_4C0C:                               ; CODE XREF: cwrite+83↑j
.text:0000000000004C0C                 mov     rdx, cs:outfile
.text:0000000000004C13                 mov     esi, 3
.text:0000000000004C18                 xor     edi, edi
.text:0000000000004C1A                 call    quotearg_n_style_colon
.text:0000000000004C1F                 mov     esi, [rbx]      ; errnum
.text:0000000000004C21                 lea     rdx, format+4   ; format
.text:0000000000004C28                 mov     rcx, rax
.text:0000000000004C2B                 mov     edi, 1          ; status
.text:0000000000004C30                 xor     eax, eax
.text:0000000000004C32                 call    _error
.text:0000000000004C37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: cwrite+26↑j
.text:0000000000004C40                                         ; cwrite+71↑j
.text:0000000000004C40                 mov     eax, 1
.text:0000000000004C45
.text:0000000000004C45 loc_4C45:                               ; CODE XREF: cwrite+8A↑j
.text:0000000000004C45                 add     rsp, 8
.text:0000000000004C49                 pop     rbx
.text:0000000000004C4A                 pop     rbp
.text:0000000000004C4B                 retn
.text:0000000000004C4B ; ---------------------------------------------------------------------------
.text:0000000000004C4C                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: cwrite+F↑j
.text:0000000000004C50                 mov     edi, cs:output_desc
.text:0000000000004C56                 jmp     short loc_4BE3
.text:0000000000004C58 ; ---------------------------------------------------------------------------
.text:0000000000004C58
.text:0000000000004C58 loc_4C58:                               ; CODE XREF: cwrite+61↑j
.text:0000000000004C58                 mov     rdx, cs:outfile
.text:0000000000004C5F                 mov     esi, 3
.text:0000000000004C64                 xor     edi, edi
.text:0000000000004C66                 call    quotearg_n_style_colon
.text:0000000000004C6B                 mov     rbx, rax
.text:0000000000004C6E                 call    ___errno_location
.text:0000000000004C73                 mov     esi, [rax]      ; errnum
.text:0000000000004C75                 lea     rdx, format+4   ; format
.text:0000000000004C7C                 mov     rcx, rbx
.text:0000000000004C7F                 mov     edi, 1          ; status
.text:0000000000004C84                 xor     eax, eax
.text:0000000000004C86                 call    _error
.text:0000000000004C86 ; } // starts at 4B80
.text:0000000000004C8B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004C8B cwrite          endp ; sp-analysis failed
.text:0000000000004C8B
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90
.text:0000000000004C90 ; __int64 __fastcall bytes_split(__off_t offset)
.text:0000000000004C90 bytes_split     proc near               ; CODE XREF: main+F31↑p
.text:0000000000004C90                                         ; main+14C1↑p
.text:0000000000004C90
.text:0000000000004C90 var_60          = qword ptr -60h
.text:0000000000004C90 var_58          = qword ptr -58h
.text:0000000000004C90 var_4A          = byte ptr -4Ah
.text:0000000000004C90 var_49          = byte ptr -49h
.text:0000000000004C90 buf             = qword ptr -48h
.text:0000000000004C90 nbytes          = qword ptr -40h
.text:0000000000004C90
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 push    r15
.text:0000000000004C92                 push    r14
.text:0000000000004C94                 xor     r14d, r14d
.text:0000000000004C97                 push    r13
.text:0000000000004C99                 push    r12
.text:0000000000004C9B                 mov     r15, rdi
.text:0000000000004C9E                 push    rbp
.text:0000000000004C9F                 push    rbx
.text:0000000000004CA0                 mov     r12, rdi
.text:0000000000004CA3                 mov     ebp, 1
.text:0000000000004CA8                 mov     ebx, 1
.text:0000000000004CAD                 sub     rsp, 38h
.text:0000000000004CB1                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CB5                 mov     [rsp+68h+buf], rsi
.text:0000000000004CBA                 mov     [rsp+68h+nbytes], rdx
.text:0000000000004CBF                 jz      loc_4D64
.text:0000000000004CC5                 cmp     rcx, rdx
.text:0000000000004CC8                 mov     r13, rcx
.text:0000000000004CCB                 setb    [rsp+68h+var_49]
.text:0000000000004CD0                 cmp     r13, r12
.text:0000000000004CD3                 jb      loc_4DA6
.text:0000000000004CD9
.text:0000000000004CD9 loc_4CD9:                               ; CODE XREF: bytes_split+110↓j
.text:0000000000004CD9                 test    r8, r8
.text:0000000000004CDC                 mov     r9, [rsp+68h+buf]
.text:0000000000004CE1                 setz    r11b
.text:0000000000004CE5                 jmp     short loc_4D18
.text:0000000000004CE5 ; ---------------------------------------------------------------------------
.text:0000000000004CE7                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: bytes_split+8B↓j
.text:0000000000004CF0                                         ; bytes_split+BC↓j
.text:0000000000004CF0                 movzx   ebx, bl
.text:0000000000004CF3                 add     r14, rbx
.text:0000000000004CF6                 cmp     r14, r8
.text:0000000000004CF9                 setb    bl
.text:0000000000004CFC                 or      bl, r11b
.text:0000000000004CFF                 jnz     short loc_4D0A
.text:0000000000004D01                 test    bpl, bpl
.text:0000000000004D04                 jz      loc_4DC8
.text:0000000000004D0A
.text:0000000000004D0A loc_4D0A:                               ; CODE XREF: bytes_split+6F↑j
.text:0000000000004D0A                 sub     r13, r12
.text:0000000000004D0D                 add     r9, r12
.text:0000000000004D10                 mov     r12, r15
.text:0000000000004D13                 cmp     r15, r13
.text:0000000000004D16                 ja      short loc_4D50
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: bytes_split+55↑j
.text:0000000000004D18                 or      bpl, bl
.text:0000000000004D1B                 jz      short loc_4CF0
.text:0000000000004D1D                 mov     rsi, r9
.text:0000000000004D20                 movzx   edi, bl
.text:0000000000004D23                 mov     rdx, r12
.text:0000000000004D26                 mov     [rsp+68h+var_58], r8
.text:0000000000004D2B                 mov     [rsp+68h+var_4A], r11b
.text:0000000000004D30                 mov     [rsp+68h+var_60], r9
.text:0000000000004D35                 call    cwrite
.text:0000000000004D3A                 mov     r8, [rsp+68h+var_58]
.text:0000000000004D3F                 mov     ebp, eax
.text:0000000000004D41                 movzx   r11d, [rsp+68h+var_4A]
.text:0000000000004D47                 mov     r9, [rsp+68h+var_60]
.text:0000000000004D4C                 jmp     short loc_4CF0
.text:0000000000004D4C ; ---------------------------------------------------------------------------
.text:0000000000004D4E                 align 10h
.text:0000000000004D50
.text:0000000000004D50 loc_4D50:                               ; CODE XREF: bytes_split+86↑j
.text:0000000000004D50                 test    r13, r13
.text:0000000000004D53                 jnz     loc_4DE0
.text:0000000000004D59
.text:0000000000004D59 loc_4D59:                               ; CODE XREF: bytes_split+119↓j
.text:0000000000004D59                                         ; bytes_split+184↓j
.text:0000000000004D59                 cmp     [rsp+68h+var_49], 0
.text:0000000000004D5E                 jnz     loc_4E4E
.text:0000000000004D64
.text:0000000000004D64 loc_4D64:                               ; CODE XREF: bytes_split+2F↑j
.text:0000000000004D64                 test    bpl, bpl
.text:0000000000004D67                 jz      loc_4E20
.text:0000000000004D6D
.text:0000000000004D6D loc_4D6D:                               ; CODE XREF: bytes_split+1B9↓j
.text:0000000000004D6D                 mov     rdx, [rsp+68h+nbytes] ; nbytes
.text:0000000000004D72                 mov     rsi, [rsp+68h+buf] ; buf
.text:0000000000004D77                 xor     edi, edi        ; fd
.text:0000000000004D79                 mov     [rsp+68h+var_60], r8
.text:0000000000004D7E                 call    safe_read
.text:0000000000004D83                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D87                 mov     r13, rax
.text:0000000000004D8A                 mov     r8, [rsp+68h+var_60]
.text:0000000000004D8F                 jz      loc_4E86
.text:0000000000004D95                 test    rax, rax
.text:0000000000004D98                 setz    [rsp+68h+var_49]
.text:0000000000004D9D                 cmp     r13, r12
.text:0000000000004DA0                 jnb     loc_4CD9
.text:0000000000004DA6
.text:0000000000004DA6 loc_4DA6:                               ; CODE XREF: bytes_split+43↑j
.text:0000000000004DA6                 test    r13, r13
.text:0000000000004DA9                 jz      short loc_4D59
.text:0000000000004DAB                 mov     eax, ebp
.text:0000000000004DAD                 or      al, bl
.text:0000000000004DAF                 jnz     short loc_4DD7
.text:0000000000004DB1                 movzx   eax, al
.text:0000000000004DB4                 xor     ebp, ebp
.text:0000000000004DB6                 mov     edx, 1
.text:0000000000004DBB                 add     r14, rax
.text:0000000000004DBE                 cmp     r8, r14
.text:0000000000004DC1                 setz    bl
.text:0000000000004DC4                 and     bl, dl
.text:0000000000004DC6                 jz      short loc_4E11
.text:0000000000004DC8
.text:0000000000004DC8 loc_4DC8:                               ; CODE XREF: bytes_split+74↑j
.text:0000000000004DC8                                         ; bytes_split+17F↓j ...
.text:0000000000004DC8                 add     rsp, 38h
.text:0000000000004DCC                 pop     rbx
.text:0000000000004DCD                 pop     rbp
.text:0000000000004DCE                 pop     r12
.text:0000000000004DD0                 pop     r13
.text:0000000000004DD2                 pop     r14
.text:0000000000004DD4                 pop     r15
.text:0000000000004DD6                 retn
.text:0000000000004DD7 ; ---------------------------------------------------------------------------
.text:0000000000004DD7
.text:0000000000004DD7 loc_4DD7:                               ; CODE XREF: bytes_split+11F↑j
.text:0000000000004DD7                 mov     r9, [rsp+68h+buf]
.text:0000000000004DDC                 nop     dword ptr [rax+00h]
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: bytes_split+C3↑j
.text:0000000000004DE0                 movzx   edi, bl
.text:0000000000004DE3                 mov     rdx, r13
.text:0000000000004DE6                 mov     rsi, r9
.text:0000000000004DE9                 mov     [rsp+68h+var_60], r8
.text:0000000000004DEE                 call    cwrite
.text:0000000000004DF3                 mov     r8, [rsp+68h+var_60]
.text:0000000000004DF8                 mov     edx, eax
.text:0000000000004DFA                 mov     ebp, eax
.text:0000000000004DFC                 mov     eax, ebx
.text:0000000000004DFE                 xor     edx, 1
.text:0000000000004E01                 movzx   eax, al
.text:0000000000004E04                 add     r14, rax
.text:0000000000004E07                 cmp     r8, r14
.text:0000000000004E0A                 setz    bl
.text:0000000000004E0D                 and     bl, dl
.text:0000000000004E0F                 jnz     short loc_4DC8
.text:0000000000004E11
.text:0000000000004E11 loc_4E11:                               ; CODE XREF: bytes_split+136↑j
.text:0000000000004E11                 sub     r12, r13
.text:0000000000004E14                 jmp     loc_4D59
.text:0000000000004E14 ; ---------------------------------------------------------------------------
.text:0000000000004E19                 align 20h
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: bytes_split+D7↑j
.text:0000000000004E20                 mov     rsi, r12        ; offset
.text:0000000000004E23                 xor     edi, edi        ; fd
.text:0000000000004E25                 mov     edx, 1          ; whence
.text:0000000000004E2A                 mov     [rsp+68h+var_60], r8
.text:0000000000004E2F                 call    _lseek
.text:0000000000004E34                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E38                 mov     eax, 1
.text:0000000000004E3D                 mov     r8, [rsp+68h+var_60]
.text:0000000000004E42                 cmovnz  r12, r15
.text:0000000000004E46                 cmovnz  ebx, eax
.text:0000000000004E49                 jmp     loc_4D6D
.text:0000000000004E4E ; ---------------------------------------------------------------------------
.text:0000000000004E4E
.text:0000000000004E4E loc_4E4E:                               ; CODE XREF: bytes_split+CE↑j
.text:0000000000004E4E                 cmp     r14, r8
.text:0000000000004E51                 lea     rbx, [r14+1]
.text:0000000000004E55                 jnb     loc_4DC8
.text:0000000000004E5B                 lea     rbp, [r8+1]
.text:0000000000004E5F                 nop
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: bytes_split+1E5↓j
.text:0000000000004E60                 xor     edx, edx
.text:0000000000004E62                 xor     esi, esi
.text:0000000000004E64                 mov     edi, 1
.text:0000000000004E69                 add     rbx, 1
.text:0000000000004E6D                 call    cwrite
.text:0000000000004E72                 cmp     rbp, rbx
.text:0000000000004E75                 jnz     short loc_4E60
.text:0000000000004E77                 add     rsp, 38h
.text:0000000000004E7B                 pop     rbx
.text:0000000000004E7C                 pop     rbp
.text:0000000000004E7D                 pop     r12
.text:0000000000004E7F                 pop     r13
.text:0000000000004E81                 pop     r14
.text:0000000000004E83                 pop     r15
.text:0000000000004E85                 retn
.text:0000000000004E86 ; ---------------------------------------------------------------------------
.text:0000000000004E86
.text:0000000000004E86 loc_4E86:                               ; CODE XREF: bytes_split+FF↑j
.text:0000000000004E86                 mov     rdx, cs:infile
.text:0000000000004E8D                 mov     esi, 3
.text:0000000000004E92                 xor     edi, edi
.text:0000000000004E94                 call    quotearg_n_style_colon
.text:0000000000004E99                 mov     rbx, rax
.text:0000000000004E9C                 call    ___errno_location
.text:0000000000004EA1                 mov     esi, [rax]      ; errnum
.text:0000000000004EA3                 lea     rdx, format+4   ; format
.text:0000000000004EAA                 mov     rcx, rbx
.text:0000000000004EAD                 mov     edi, 1          ; status
.text:0000000000004EB2                 xor     eax, eax
.text:0000000000004EB4                 call    _error
.text:0000000000004EB4 ; } // starts at 4C90
.text:0000000000004EB9                 nop     dword ptr [rax+00000000h]
.text:0000000000004EB9 bytes_split     endp ; sp-analysis failed
.text:0000000000004EB9
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0 ; Attributes: noreturn
.text:0000000000004EC0
.text:0000000000004EC0 ; void __fastcall __noreturn usage(int status)
.text:0000000000004EC0                 public usage
.text:0000000000004EC0 usage           proc near               ; CODE XREF: main+186F↑p
.text:0000000000004EC0                                         ; main+1951↑p ...
.text:0000000000004EC0
.text:0000000000004EC0 var_A8          = qword ptr -0A8h
.text:0000000000004EC0 var_A0          = qword ptr -0A0h
.text:0000000000004EC0 var_98          = qword ptr -98h
.text:0000000000004EC0 var_90          = qword ptr -90h
.text:0000000000004EC0 var_88          = qword ptr -88h
.text:0000000000004EC0 var_80          = qword ptr -80h
.text:0000000000004EC0 var_78          = qword ptr -78h
.text:0000000000004EC0 var_70          = qword ptr -70h
.text:0000000000004EC0 var_68          = qword ptr -68h
.text:0000000000004EC0 var_60          = qword ptr -60h
.text:0000000000004EC0 var_58          = qword ptr -58h
.text:0000000000004EC0 var_50          = qword ptr -50h
.text:0000000000004EC0 var_48          = qword ptr -48h
.text:0000000000004EC0 var_40          = qword ptr -40h
.text:0000000000004EC0 var_30          = qword ptr -30h
.text:0000000000004EC0
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 push    r13
.text:0000000000004EC2                 push    r12
.text:0000000000004EC4                 mov     edx, 5          ; category
.text:0000000000004EC9                 push    rbp
.text:0000000000004ECA                 push    rbx
.text:0000000000004ECB                 mov     ebp, edi
.text:0000000000004ECD                 sub     rsp, 88h
.text:0000000000004ED4                 mov     rbx, cs:program_name
.text:0000000000004EDB                 mov     rax, fs:28h
.text:0000000000004EE4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004EE9                 xor     eax, eax
.text:0000000000004EEB                 test    edi, edi
.text:0000000000004EED                 jz      short loc_4F1D
.text:0000000000004EEF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004EF6                 xor     edi, edi        ; domainname
.text:0000000000004EF8                 call    _dcgettext
.text:0000000000004EFD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004F04                 mov     rdx, rax
.text:0000000000004F07                 mov     rcx, rbx
.text:0000000000004F0A                 mov     esi, 1
.text:0000000000004F0F                 xor     eax, eax
.text:0000000000004F11                 call    ___fprintf_chk
.text:0000000000004F16
.text:0000000000004F16 loc_4F16:                               ; CODE XREF: usage+366↓j
.text:0000000000004F16                 mov     edi, ebp        ; status
.text:0000000000004F18                 call    _exit
.text:0000000000004F1D ; ---------------------------------------------------------------------------
.text:0000000000004F1D
.text:0000000000004F1D loc_4F1D:                               ; CODE XREF: usage+2D↑j
.text:0000000000004F1D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE [PREFIX]]\n"
.text:0000000000004F24                 xor     edi, edi        ; domainname
.text:0000000000004F26                 call    _dcgettext
.text:0000000000004F2B                 mov     rdx, rbx
.text:0000000000004F2E                 mov     rsi, rax
.text:0000000000004F31                 mov     edi, 1
.text:0000000000004F36                 xor     eax, eax
.text:0000000000004F38                 call    ___printf_chk
.text:0000000000004F3D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F44                 lea     rsi, aOutputPiecesOf ; "Output pieces of FILE to PREFIXaa, PREF"...
.text:0000000000004F4B                 mov     edx, 5          ; category
.text:0000000000004F50                 xor     edi, edi        ; domainname
.text:0000000000004F52                 call    _dcgettext
.text:0000000000004F57                 mov     rsi, rbx        ; stream
.text:0000000000004F5A                 mov     rdi, rax        ; s
.text:0000000000004F5D                 call    _fputs_unlocked
.text:0000000000004F62                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F69                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000004F70                 mov     edx, 5          ; category
.text:0000000000004F75                 xor     edi, edi        ; domainname
.text:0000000000004F77                 call    _dcgettext
.text:0000000000004F7C                 mov     rsi, rbx        ; stream
.text:0000000000004F7F                 mov     rdi, rax        ; s
.text:0000000000004F82                 call    _fputs_unlocked
.text:0000000000004F87                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004F8E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000004F95                 mov     edx, 5          ; category
.text:0000000000004F9A                 xor     edi, edi        ; domainname
.text:0000000000004F9C                 call    _dcgettext
.text:0000000000004FA1                 mov     rsi, rbx        ; stream
.text:0000000000004FA4                 mov     rdi, rax        ; s
.text:0000000000004FA7                 call    _fputs_unlocked
.text:0000000000004FAC                 lea     rsi, aASuffixLengthN ; "  -a, --suffix-length=N   generate suff"...
.text:0000000000004FB3                 mov     edx, 5          ; category
.text:0000000000004FB8                 xor     edi, edi        ; domainname
.text:0000000000004FBA                 call    _dcgettext
.text:0000000000004FBF                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000004FC6                 mov     ecx, 2
.text:0000000000004FCB                 mov     rdx, rax
.text:0000000000004FCE                 mov     esi, 1
.text:0000000000004FD3                 xor     eax, eax
.text:0000000000004FD5                 call    ___fprintf_chk
.text:0000000000004FDA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004FE1                 lea     rsi, aVerbosePrintAD ; "      --verbose           print a diagn"...
.text:0000000000004FE8                 mov     edx, 5          ; category
.text:0000000000004FED                 xor     edi, edi        ; domainname
.text:0000000000004FEF                 call    _dcgettext
.text:0000000000004FF4                 mov     rsi, rbx        ; stream
.text:0000000000004FF7                 mov     rdi, rax        ; s
.text:0000000000004FFA                 call    _fputs_unlocked
.text:0000000000004FFF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005006                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000500D                 mov     edx, 5          ; category
.text:0000000000005012                 xor     edi, edi        ; domainname
.text:0000000000005014                 call    _dcgettext
.text:0000000000005019                 mov     rsi, rbx        ; stream
.text:000000000000501C                 mov     rdi, rax        ; s
.text:000000000000501F                 call    _fputs_unlocked
.text:0000000000005024                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000502B                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000005032                 mov     edx, 5          ; category
.text:0000000000005037                 xor     edi, edi        ; domainname
.text:0000000000005039                 call    _dcgettext
.text:000000000000503E                 mov     rsi, rbx        ; stream
.text:0000000000005041                 mov     rdi, rax        ; s
.text:0000000000005044                 call    _fputs_unlocked
.text:0000000000005049                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005050                 lea     rsi, aTheSizeArgumen ; "\nThe SIZE argument is an integer and o"...
.text:0000000000005057                 mov     edx, 5          ; category
.text:000000000000505C                 xor     edi, edi        ; domainname
.text:000000000000505E                 call    _dcgettext
.text:0000000000005063                 mov     rsi, rbx        ; stream
.text:0000000000005066                 mov     rdi, rax        ; s
.text:0000000000005069                 call    _fputs_unlocked
.text:000000000000506E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005075                 lea     rsi, aChunksMayBeNSp ; "\nCHUNKS may be:\n  N       split into "...
.text:000000000000507C                 mov     edx, 5          ; category
.text:0000000000005081                 xor     edi, edi        ; domainname
.text:0000000000005083                 call    _dcgettext
.text:0000000000005088                 mov     rsi, rbx        ; stream
.text:000000000000508B                 mov     rdi, rax        ; s
.text:000000000000508E                 lea     rbx, aSplit     ; "split"
.text:0000000000005095                 call    _fputs_unlocked
.text:000000000000509A                 lea     rax, asc_8C0B   ; "["
.text:00000000000050A1                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000050A8                 mov     [rsp+0A8h+var_48], 0
.text:00000000000050B1                 mov     [rsp+0A8h+var_40], 0
.text:00000000000050BA                 mov     rdx, rsp
.text:00000000000050BD                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000050C1                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000050C8                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000050CD                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000050D4                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000050D9                 lea     rax, domainname ; "coreutils"
.text:00000000000050E0                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000050E5                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000050EC                 mov     [rsp+0A8h+var_98], rax
.text:00000000000050F1                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000050F8                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000050FD                 mov     [rsp+0A8h+var_90], rax
.text:0000000000005102                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000005109                 mov     [rsp+0A8h+var_88], rax
.text:000000000000510E                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000005115                 mov     [rsp+0A8h+var_80], rax
.text:000000000000511A                 mov     [rsp+0A8h+var_70], rax
.text:000000000000511F                 mov     [rsp+0A8h+var_60], rax
.text:0000000000005124                 mov     [rsp+0A8h+var_50], rax
.text:0000000000005129                 nop     dword ptr [rax+00000000h]
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: usage+28D↓j
.text:0000000000005130                 add     rdx, 10h
.text:0000000000005134                 mov     rdi, [rdx]
.text:0000000000005137                 test    rdi, rdi
.text:000000000000513A                 jz      short loc_514F
.text:000000000000513C                 mov     ecx, 6
.text:0000000000005141                 mov     rsi, rbx
.text:0000000000005144                 repe cmpsb
.text:0000000000005146                 setnbe  al
.text:0000000000005149                 sbb     al, 0
.text:000000000000514B                 test    al, al
.text:000000000000514D                 jnz     short loc_5130
.text:000000000000514F
.text:000000000000514F loc_514F:                               ; CODE XREF: usage+27A↑j
.text:000000000000514F                 mov     r12, [rdx+8]
.text:0000000000005153                 xor     edi, edi        ; domainname
.text:0000000000005155                 mov     edx, 5          ; category
.text:000000000000515A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000005161                 test    r12, r12
.text:0000000000005164                 jz      loc_522B
.text:000000000000516A                 call    _dcgettext
.text:000000000000516F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005176                 lea     rdx, unk_8C81
.text:000000000000517D                 mov     rsi, rax
.text:0000000000005180                 mov     edi, 1
.text:0000000000005185                 xor     eax, eax
.text:0000000000005187                 call    ___printf_chk
.text:000000000000518C                 xor     esi, esi        ; locale
.text:000000000000518E                 mov     edi, 5          ; category
.text:0000000000005193                 call    _setlocale
.text:0000000000005198                 test    rax, rax
.text:000000000000519B                 jz      short loc_51B9
.text:000000000000519D                 lea     rsi, aEn        ; "en_"
.text:00000000000051A4                 mov     edx, 3          ; n
.text:00000000000051A9                 mov     rdi, rax        ; s1
.text:00000000000051AC                 call    _strncmp
.text:00000000000051B1                 test    eax, eax
.text:00000000000051B3                 jnz     loc_52C0
.text:00000000000051B9
.text:00000000000051B9 loc_51B9:                               ; CODE XREF: usage+2DB↑j
.text:00000000000051B9                                         ; usage+425↓j
.text:00000000000051B9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000051C0                 xor     edi, edi        ; domainname
.text:00000000000051C2                 mov     edx, 5          ; category
.text:00000000000051C7                 call    _dcgettext
.text:00000000000051CC                 lea     rcx, aSplit     ; "split"
.text:00000000000051D3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000051DA                 mov     rsi, rax
.text:00000000000051DD                 mov     edi, 1
.text:00000000000051E2                 xor     eax, eax
.text:00000000000051E4                 call    ___printf_chk
.text:00000000000051E9                 cmp     r12, rbx
.text:00000000000051EC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000051F3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000051FA                 cmovz   rbx, rcx
.text:00000000000051FE
.text:00000000000051FE loc_51FE:                               ; CODE XREF: usage+3F4↓j
.text:00000000000051FE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000005205                 xor     edi, edi        ; domainname
.text:0000000000005207                 mov     edx, 5          ; category
.text:000000000000520C                 call    _dcgettext
.text:0000000000005211                 mov     rcx, rbx
.text:0000000000005214                 mov     rsi, rax
.text:0000000000005217                 mov     rdx, r12
.text:000000000000521A                 mov     edi, 1
.text:000000000000521F                 xor     eax, eax
.text:0000000000005221                 call    ___printf_chk
.text:0000000000005226                 jmp     loc_4F16
.text:000000000000522B ; ---------------------------------------------------------------------------
.text:000000000000522B
.text:000000000000522B loc_522B:                               ; CODE XREF: usage+2A4↑j
.text:000000000000522B                 call    _dcgettext
.text:0000000000005230                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005237                 lea     rdx, unk_8C81
.text:000000000000523E                 mov     rsi, rax
.text:0000000000005241                 mov     edi, 1
.text:0000000000005246                 xor     eax, eax
.text:0000000000005248                 call    ___printf_chk
.text:000000000000524D                 xor     esi, esi        ; locale
.text:000000000000524F                 mov     edi, 5          ; category
.text:0000000000005254                 call    _setlocale
.text:0000000000005259                 test    rax, rax
.text:000000000000525C                 jz      short loc_5276
.text:000000000000525E                 lea     rsi, aEn        ; "en_"
.text:0000000000005265                 mov     edx, 3          ; n
.text:000000000000526A                 mov     rdi, rax        ; s1
.text:000000000000526D                 call    _strncmp
.text:0000000000005272                 test    eax, eax
.text:0000000000005274                 jnz     short loc_52B9
.text:0000000000005276
.text:0000000000005276 loc_5276:                               ; CODE XREF: usage+39C↑j
.text:0000000000005276                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000527D                 mov     edx, 5          ; category
.text:0000000000005282                 xor     edi, edi        ; domainname
.text:0000000000005284                 lea     r12, aSplit     ; "split"
.text:000000000000528B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000005292                 call    _dcgettext
.text:0000000000005297                 lea     rcx, aSplit     ; "split"
.text:000000000000529E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000052A5                 mov     rsi, rax
.text:00000000000052A8                 mov     edi, 1
.text:00000000000052AD                 xor     eax, eax
.text:00000000000052AF                 call    ___printf_chk
.text:00000000000052B4                 jmp     loc_51FE
.text:00000000000052B9 ; ---------------------------------------------------------------------------
.text:00000000000052B9
.text:00000000000052B9 loc_52B9:                               ; CODE XREF: usage+3B4↑j
.text:00000000000052B9                 lea     r12, aSplit     ; "split"
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: usage+2F3↑j
.text:00000000000052C0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000052C7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000052CE                 xor     edi, edi        ; domainname
.text:00000000000052D0                 mov     edx, 5          ; category
.text:00000000000052D5                 call    _dcgettext
.text:00000000000052DA                 mov     rsi, r13        ; stream
.text:00000000000052DD                 mov     rdi, rax        ; s
.text:00000000000052E0                 call    _fputs_unlocked
.text:00000000000052E5                 jmp     loc_51B9
.text:00000000000052E5 ; } // starts at 4EC0
.text:00000000000052E5 usage           endp
.text:00000000000052E5
.text:00000000000052E5 ; ---------------------------------------------------------------------------
.text:00000000000052EA                 align 10h
.text:00000000000052F0
.text:00000000000052F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052F0
.text:00000000000052F0
.text:00000000000052F0                 public close_stdout_set_file_name
.text:00000000000052F0 close_stdout_set_file_name proc near
.text:00000000000052F0 ; __unwind {
.text:00000000000052F0                 mov     cs:file_name, rdi
.text:00000000000052F7                 retn
.text:00000000000052F7 ; } // starts at 52F0
.text:00000000000052F7 close_stdout_set_file_name endp
.text:00000000000052F7
.text:00000000000052F7 ; ---------------------------------------------------------------------------
.text:00000000000052F8                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300
.text:0000000000005300                 public close_stdout_set_ignore_EPIPE
.text:0000000000005300 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 mov     cs:ignore_EPIPE, dil
.text:0000000000005307                 retn
.text:0000000000005307 ; } // starts at 5300
.text:0000000000005307 close_stdout_set_ignore_EPIPE endp
.text:0000000000005307
.text:0000000000005307 ; ---------------------------------------------------------------------------
.text:0000000000005308                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310 ; Attributes: info_from_lumina
.text:0000000000005310
.text:0000000000005310 ; void __cdecl close_stdout()
.text:0000000000005310                 public close_stdout
.text:0000000000005310 close_stdout    proc near               ; DATA XREF: main+73↑o
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 push    rbp
.text:0000000000005311                 push    rbx
.text:0000000000005312                 sub     rsp, 8
.text:0000000000005316                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000531D                 call    close_stream
.text:0000000000005322                 test    eax, eax
.text:0000000000005324                 jz      short loc_533C
.text:0000000000005326                 call    ___errno_location
.text:000000000000532B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005332                 mov     rbx, rax
.text:0000000000005335                 jz      short loc_5353
.text:0000000000005337                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000533A                 jnz     short loc_5353
.text:000000000000533C
.text:000000000000533C loc_533C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000533C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005343                 call    close_stream
.text:0000000000005348                 test    eax, eax
.text:000000000000534A                 jnz     short loc_5392
.text:000000000000534C                 add     rsp, 8
.text:0000000000005350                 pop     rbx
.text:0000000000005351                 pop     rbp
.text:0000000000005352                 retn
.text:0000000000005353 ; ---------------------------------------------------------------------------
.text:0000000000005353
.text:0000000000005353 loc_5353:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005353                                         ; close_stdout+2A↑j
.text:0000000000005353                 lea     rsi, aWriteError ; "write error"
.text:000000000000535A                 xor     edi, edi        ; domainname
.text:000000000000535C                 mov     edx, 5          ; category
.text:0000000000005361                 call    _dcgettext
.text:0000000000005366                 mov     rdi, cs:file_name
.text:000000000000536D                 mov     rbp, rax
.text:0000000000005370                 test    rdi, rdi
.text:0000000000005373                 jz      short loc_539D
.text:0000000000005375                 call    quotearg_colon
.text:000000000000537A                 mov     esi, [rbx]      ; errnum
.text:000000000000537C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005383                 mov     rcx, rax
.text:0000000000005386                 mov     r8, rbp
.text:0000000000005389                 xor     edi, edi        ; status
.text:000000000000538B                 xor     eax, eax
.text:000000000000538D                 call    _error
.text:0000000000005392
.text:0000000000005392 loc_5392:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005392                                         ; close_stdout+A2↓j
.text:0000000000005392                 mov     edi, cs:exit_failure ; status
.text:0000000000005398                 call    __exit
.text:000000000000539D ; ---------------------------------------------------------------------------
.text:000000000000539D
.text:000000000000539D loc_539D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000539D                 mov     esi, [rbx]      ; errnum
.text:000000000000539F                 lea     rdx, format+4   ; format
.text:00000000000053A6                 mov     rcx, rax
.text:00000000000053A9                 xor     edi, edi        ; status
.text:00000000000053AB                 xor     eax, eax
.text:00000000000053AD                 call    _error
.text:00000000000053B2                 jmp     short loc_5392
.text:00000000000053B2 ; } // starts at 5310
.text:00000000000053B2 close_stdout    endp
.text:00000000000053B2
.text:00000000000053B2 ; ---------------------------------------------------------------------------
.text:00000000000053B4                 align 20h
.text:00000000000053C0
.text:00000000000053C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053C0
.text:00000000000053C0 ; Attributes: info_from_lumina
.text:00000000000053C0
.text:00000000000053C0 ; char *__fastcall last_component(const char *name)
.text:00000000000053C0                 public last_component
.text:00000000000053C0 last_component  proc near               ; CODE XREF: main+1E9↑p
.text:00000000000053C0                                         ; create+19C↑p
.text:00000000000053C0 ; __unwind {
.text:00000000000053C0                 movzx   edx, byte ptr [rdi]
.text:00000000000053C3                 mov     rax, rdi
.text:00000000000053C6                 cmp     dl, 2Fh ; '/'
.text:00000000000053C9                 jnz     short loc_53DC
.text:00000000000053CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000053D0
.text:00000000000053D0 loc_53D0:                               ; CODE XREF: last_component+1A↓j
.text:00000000000053D0                 add     rax, 1
.text:00000000000053D4                 movzx   edx, byte ptr [rax]
.text:00000000000053D7                 cmp     dl, 2Fh ; '/'
.text:00000000000053DA                 jz      short loc_53D0
.text:00000000000053DC
.text:00000000000053DC loc_53DC:                               ; CODE XREF: last_component+9↑j
.text:00000000000053DC                 test    dl, dl
.text:00000000000053DE                 jz      short locret_541A
.text:00000000000053E0                 mov     rcx, rax
.text:00000000000053E3                 xor     esi, esi
.text:00000000000053E5                 jmp     short loc_5405
.text:00000000000053E5 ; ---------------------------------------------------------------------------
.text:00000000000053E7                 align 10h
.text:00000000000053F0
.text:00000000000053F0 loc_53F0:                               ; CODE XREF: last_component+48↓j
.text:00000000000053F0                 test    sil, sil
.text:00000000000053F3                 jz      short loc_53FA
.text:00000000000053F5                 mov     rax, rcx
.text:00000000000053F8                 xor     esi, esi
.text:00000000000053FA
.text:00000000000053FA loc_53FA:                               ; CODE XREF: last_component+33↑j
.text:00000000000053FA                 add     rcx, 1
.text:00000000000053FE                 movzx   edx, byte ptr [rcx]
.text:0000000000005401                 test    dl, dl
.text:0000000000005403                 jz      short locret_541A
.text:0000000000005405
.text:0000000000005405 loc_5405:                               ; CODE XREF: last_component+25↑j
.text:0000000000005405                                         ; last_component+58↓j
.text:0000000000005405                 cmp     dl, 2Fh ; '/'
.text:0000000000005408                 jnz     short loc_53F0
.text:000000000000540A                 add     rcx, 1
.text:000000000000540E                 movzx   edx, byte ptr [rcx]
.text:0000000000005411                 mov     esi, 1
.text:0000000000005416                 test    dl, dl
.text:0000000000005418                 jnz     short loc_5405
.text:000000000000541A
.text:000000000000541A locret_541A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000541A                                         ; last_component+43↑j
.text:000000000000541A                 rep retn
.text:000000000000541A ; } // starts at 53C0
.text:000000000000541A last_component  endp
.text:000000000000541A
.text:000000000000541A ; ---------------------------------------------------------------------------
.text:000000000000541C                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420 ; Attributes: info_from_lumina
.text:0000000000005420
.text:0000000000005420 ; size_t __fastcall base_len(const char *name)
.text:0000000000005420                 public base_len
.text:0000000000005420 base_len        proc near
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 push    rbx
.text:0000000000005421                 mov     rbx, rdi
.text:0000000000005424                 call    _strlen
.text:0000000000005429                 cmp     rax, 1
.text:000000000000542D                 jbe     short loc_543A
.text:000000000000542F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000005434                 lea     rdx, [rax-1]
.text:0000000000005438                 jz      short loc_5448
.text:000000000000543A
.text:000000000000543A loc_543A:                               ; CODE XREF: base_len+D↑j
.text:000000000000543A                 pop     rbx
.text:000000000000543B                 retn
.text:000000000000543B ; ---------------------------------------------------------------------------
.text:000000000000543C                 align 20h
.text:0000000000005440
.text:0000000000005440 loc_5440:                               ; CODE XREF: base_len+37↓j
.text:0000000000005440                 mov     rdx, rax
.text:0000000000005443                 nop     dword ptr [rax+rax+00h]
.text:0000000000005448
.text:0000000000005448 loc_5448:                               ; CODE XREF: base_len+18↑j
.text:0000000000005448                 cmp     rdx, 1
.text:000000000000544C                 jz      short loc_5460
.text:000000000000544E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000005453                 lea     rax, [rdx-1]
.text:0000000000005457                 jz      short loc_5440
.text:0000000000005459                 mov     rax, rdx
.text:000000000000545C                 pop     rbx
.text:000000000000545D                 retn
.text:000000000000545D ; ---------------------------------------------------------------------------
.text:000000000000545E                 align 20h
.text:0000000000005460
.text:0000000000005460 loc_5460:                               ; CODE XREF: base_len+2C↑j
.text:0000000000005460                 mov     eax, 1
.text:0000000000005465                 pop     rbx
.text:0000000000005466                 retn
.text:0000000000005466 ; } // starts at 5420
.text:0000000000005466 base_len        endp
.text:0000000000005466
.text:0000000000005466 ; ---------------------------------------------------------------------------
.text:0000000000005467                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470
.text:0000000000005470                 public open_safer
.text:0000000000005470 open_safer      proc near               ; CODE XREF: create+204↑p
.text:0000000000005470                                         ; ofile_open+5F↑p
.text:0000000000005470
.text:0000000000005470 var_58          = dword ptr -58h
.text:0000000000005470 var_50          = qword ptr -50h
.text:0000000000005470 var_48          = qword ptr -48h
.text:0000000000005470 var_40          = qword ptr -40h
.text:0000000000005470 var_38          = byte ptr -38h
.text:0000000000005470 var_28          = qword ptr -28h
.text:0000000000005470 arg_0           = byte ptr  8
.text:0000000000005470
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 sub     rsp, 58h
.text:0000000000005474                 mov     [rsp+58h+var_28], rdx
.text:0000000000005479                 xor     edx, edx
.text:000000000000547B                 mov     rax, fs:28h
.text:0000000000005484                 mov     [rsp+58h+var_40], rax
.text:0000000000005489                 xor     eax, eax
.text:000000000000548B                 test    sil, 40h
.text:000000000000548F                 jnz     short loc_54B8
.text:0000000000005491
.text:0000000000005491 loc_5491:                               ; CODE XREF: open_safer+67↓j
.text:0000000000005491                 xor     eax, eax
.text:0000000000005493                 call    _open
.text:0000000000005498                 mov     edi, eax        ; fd
.text:000000000000549A                 call    fd_safer_flag
.text:000000000000549F                 mov     rcx, [rsp+58h+var_40]
.text:00000000000054A4                 xor     rcx, fs:28h
.text:00000000000054AD                 jnz     short loc_54D9
.text:00000000000054AF                 add     rsp, 58h
.text:00000000000054B3                 retn
.text:00000000000054B3 ; ---------------------------------------------------------------------------
.text:00000000000054B4                 align 8
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: open_safer+1F↑j
.text:00000000000054B8                 lea     rax, [rsp+58h+arg_0]
.text:00000000000054BD                 mov     [rsp+58h+var_58], 10h
.text:00000000000054C4                 mov     edx, dword ptr [rsp+58h+var_28]
.text:00000000000054C8                 mov     [rsp+58h+var_50], rax
.text:00000000000054CD                 lea     rax, [rsp+58h+var_38]
.text:00000000000054D2                 mov     [rsp+58h+var_48], rax
.text:00000000000054D7                 jmp     short loc_5491
.text:00000000000054D9 ; ---------------------------------------------------------------------------
.text:00000000000054D9
.text:00000000000054D9 loc_54D9:                               ; CODE XREF: open_safer+3D↑j
.text:00000000000054D9                 call    ___stack_chk_fail
.text:00000000000054D9 ; } // starts at 5470
.text:00000000000054D9 open_safer      endp
.text:00000000000054D9
.text:00000000000054D9 ; ---------------------------------------------------------------------------
.text:00000000000054DE                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0 ; __int64 __fastcall fd_reopen(int fd2, char *file, int oflag)
.text:00000000000054E0                 public fd_reopen
.text:00000000000054E0 fd_reopen       proc near               ; CODE XREF: main+7B4↑p
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 push    r13
.text:00000000000054E2                 push    r12
.text:00000000000054E4                 xor     eax, eax
.text:00000000000054E6                 push    rbp
.text:00000000000054E7                 push    rbx
.text:00000000000054E8                 mov     ebp, edi
.text:00000000000054EA                 mov     rdi, rsi        ; file
.text:00000000000054ED                 mov     esi, edx        ; oflag
.text:00000000000054EF                 mov     edx, ecx
.text:00000000000054F1                 sub     rsp, 8
.text:00000000000054F5                 call    _open
.text:00000000000054FA                 cmp     ebp, eax
.text:00000000000054FC                 mov     ebx, eax
.text:00000000000054FE                 jz      short loc_5529
.text:0000000000005500                 test    eax, eax
.text:0000000000005502                 js      short loc_5529
.text:0000000000005504                 mov     esi, ebp        ; fd2
.text:0000000000005506                 mov     edi, eax        ; fd
.text:0000000000005508                 call    _dup2
.text:000000000000550D                 mov     r12d, eax
.text:0000000000005510                 call    ___errno_location
.text:0000000000005515                 mov     r13d, [rax]
.text:0000000000005518                 mov     rbp, rax
.text:000000000000551B                 mov     edi, ebx        ; fd
.text:000000000000551D                 call    _close
.text:0000000000005522                 mov     ebx, r12d
.text:0000000000005525                 mov     [rbp+0], r13d
.text:0000000000005529
.text:0000000000005529 loc_5529:                               ; CODE XREF: fd_reopen+1E↑j
.text:0000000000005529                                         ; fd_reopen+22↑j
.text:0000000000005529                 add     rsp, 8
.text:000000000000552D                 mov     eax, ebx
.text:000000000000552F                 pop     rbx
.text:0000000000005530                 pop     rbp
.text:0000000000005531                 pop     r12
.text:0000000000005533                 pop     r13
.text:0000000000005535                 retn
.text:0000000000005535 ; } // starts at 54E0
.text:0000000000005535 fd_reopen       endp
.text:0000000000005535
.text:0000000000005535 ; ---------------------------------------------------------------------------
.text:0000000000005536                 align 20h
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540
.text:0000000000005540 ; __int64 __fastcall full_write(int fd, void *buf, size_t n)
.text:0000000000005540                 public full_write
.text:0000000000005540 full_write      proc near               ; CODE XREF: main+140A↑p
.text:0000000000005540                                         ; main+146B↑p ...
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 push    r13
.text:0000000000005542                 push    r12
.text:0000000000005544                 push    rbp
.text:0000000000005545                 push    rbx
.text:0000000000005546                 sub     rsp, 8
.text:000000000000554A                 test    rdx, rdx
.text:000000000000554D                 jz      short loc_55B1
.text:000000000000554F                 mov     r13d, edi
.text:0000000000005552                 mov     rbp, rsi
.text:0000000000005555                 mov     rbx, rdx
.text:0000000000005558                 xor     r12d, r12d
.text:000000000000555B                 jmp     short loc_5570
.text:000000000000555B ; ---------------------------------------------------------------------------
.text:000000000000555D                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: full_write+42↓j
.text:0000000000005560                 test    rax, rax
.text:0000000000005563                 jz      short loc_5598
.text:0000000000005565                 add     r12, rax
.text:0000000000005568                 add     rbp, rax
.text:000000000000556B                 sub     rbx, rax
.text:000000000000556E                 jz      short loc_5584
.text:0000000000005570
.text:0000000000005570 loc_5570:                               ; CODE XREF: full_write+1B↑j
.text:0000000000005570                 mov     rdx, rbx        ; n
.text:0000000000005573                 mov     rsi, rbp        ; buf
.text:0000000000005576                 mov     edi, r13d       ; fd
.text:0000000000005579                 call    safe_write
.text:000000000000557E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005582                 jnz     short loc_5560
.text:0000000000005584
.text:0000000000005584 loc_5584:                               ; CODE XREF: full_write+2E↑j
.text:0000000000005584                                         ; full_write+74↓j
.text:0000000000005584                 add     rsp, 8
.text:0000000000005588                 mov     rax, r12
.text:000000000000558B                 pop     rbx
.text:000000000000558C                 pop     rbp
.text:000000000000558D                 pop     r12
.text:000000000000558F                 pop     r13
.text:0000000000005591                 retn
.text:0000000000005591 ; ---------------------------------------------------------------------------
.text:0000000000005592                 align 8
.text:0000000000005598
.text:0000000000005598 loc_5598:                               ; CODE XREF: full_write+23↑j
.text:0000000000005598                 call    ___errno_location
.text:000000000000559D                 mov     dword ptr [rax], 1Ch
.text:00000000000055A3                 add     rsp, 8
.text:00000000000055A7                 mov     rax, r12
.text:00000000000055AA                 pop     rbx
.text:00000000000055AB                 pop     rbp
.text:00000000000055AC                 pop     r12
.text:00000000000055AE                 pop     r13
.text:00000000000055B0                 retn
.text:00000000000055B1 ; ---------------------------------------------------------------------------
.text:00000000000055B1
.text:00000000000055B1 loc_55B1:                               ; CODE XREF: full_write+D↑j
.text:00000000000055B1                 xor     r12d, r12d
.text:00000000000055B4                 jmp     short loc_5584
.text:00000000000055B4 ; } // starts at 5540
.text:00000000000055B4 full_write      endp
.text:00000000000055B4
.text:00000000000055B4 ; ---------------------------------------------------------------------------
.text:00000000000055B6                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0 ; Attributes: info_from_lumina
.text:00000000000055C0
.text:00000000000055C0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:00000000000055C0                 public umaxtostr
.text:00000000000055C0 umaxtostr       proc near               ; CODE XREF: main+1AE3↑p
.text:00000000000055C0                                         ; main+1B94↑p
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 lea     rcx, [rsi+14h]
.text:00000000000055C4                 mov     byte ptr [rsi+14h], 0
.text:00000000000055C8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:00000000000055D2                 nop     word ptr [rax+rax+00h]
.text:00000000000055D8
.text:00000000000055D8 loc_55D8:                               ; CODE XREF: umaxtostr+3C↓j
.text:00000000000055D8                 mov     rax, rdi
.text:00000000000055DB                 sub     rcx, 1
.text:00000000000055DF                 mul     rsi
.text:00000000000055E2                 shr     rdx, 3
.text:00000000000055E6                 lea     rax, [rdx+rdx*4]
.text:00000000000055EA                 add     rax, rax
.text:00000000000055ED                 sub     rdi, rax
.text:00000000000055F0                 add     edi, 30h ; '0'
.text:00000000000055F3                 test    rdx, rdx
.text:00000000000055F6                 mov     [rcx], dil
.text:00000000000055F9                 mov     rdi, rdx
.text:00000000000055FC                 jnz     short loc_55D8
.text:00000000000055FE                 mov     rax, rcx
.text:0000000000005601                 retn
.text:0000000000005601 ; } // starts at 55C0
.text:0000000000005601 umaxtostr       endp
.text:0000000000005601
.text:0000000000005601 ; ---------------------------------------------------------------------------
.text:0000000000005602                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610
.text:0000000000005610                 public set_program_name
.text:0000000000005610 set_program_name proc near              ; CODE XREF: main+3E↑p
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 test    rdi, rdi
.text:0000000000005613                 push    rbx
.text:0000000000005614                 jz      short loc_568D
.text:0000000000005616                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000561B                 mov     rbx, rdi
.text:000000000000561E                 call    _strrchr
.text:0000000000005623                 test    rax, rax
.text:0000000000005626                 jz      short loc_567D
.text:0000000000005628                 lea     r8, [rax+1]
.text:000000000000562C                 mov     rdx, r8
.text:000000000000562F                 sub     rdx, rbx
.text:0000000000005632                 cmp     rdx, 6
.text:0000000000005636                 jle     short loc_567D
.text:0000000000005638                 lea     rsi, [rax-6]
.text:000000000000563C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000005643                 mov     ecx, 7
.text:0000000000005648                 repe cmpsb
.text:000000000000564A                 setnbe  dl
.text:000000000000564D                 sbb     dl, 0
.text:0000000000005650                 test    dl, dl
.text:0000000000005652                 jnz     short loc_567D
.text:0000000000005654                 lea     rdi, aLt        ; "lt-"
.text:000000000000565B                 mov     ecx, 3
.text:0000000000005660                 mov     rsi, r8
.text:0000000000005663                 mov     rbx, r8
.text:0000000000005666                 repe cmpsb
.text:0000000000005668                 setnbe  dl
.text:000000000000566B                 sbb     dl, 0
.text:000000000000566E                 test    dl, dl
.text:0000000000005670                 jnz     short loc_567D
.text:0000000000005672                 lea     rbx, [rax+4]
.text:0000000000005676                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000567D
.text:000000000000567D loc_567D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000567D                                         ; set_program_name+26↑j ...
.text:000000000000567D                 mov     cs:program_name, rbx
.text:0000000000005684                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000568B                 pop     rbx
.text:000000000000568C                 retn
.text:000000000000568D ; ---------------------------------------------------------------------------
.text:000000000000568D
.text:000000000000568D loc_568D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000568D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000005694                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000569B                 mov     edx, 37h ; '7'  ; n
.text:00000000000056A0                 mov     esi, 1          ; size
.text:00000000000056A5                 call    _fwrite
.text:00000000000056AA                 call    _abort
.text:00000000000056AA ; } // starts at 5610
.text:00000000000056AA set_program_name endp
.text:00000000000056AA
.text:00000000000056AA ; ---------------------------------------------------------------------------
.text:00000000000056AF                 align 10h
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0 ; Attributes: info_from_lumina
.text:00000000000056B0
.text:00000000000056B0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000056B0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000056B0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 push    rbp
.text:00000000000056B1                 push    rbx
.text:00000000000056B2                 mov     rbp, rdi
.text:00000000000056B5                 mov     ebx, esi
.text:00000000000056B7                 sub     rsp, 8
.text:00000000000056BB                 call    locale_charset
.text:00000000000056C0                 movzx   edx, byte ptr [rax]
.text:00000000000056C3                 and     edx, 0FFFFFFDFh
.text:00000000000056C6                 cmp     dl, 55h ; 'U'
.text:00000000000056C9                 jz      short loc_5740
.text:00000000000056CB                 cmp     dl, 47h ; 'G'
.text:00000000000056CE                 jz      short loc_56F0
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000056D0                                         ; gettext_quote+50↓j ...
.text:00000000000056D0                 lea     rax, unk_9C23
.text:00000000000056D7                 lea     rdx, asc_9C25   ; "'"
.text:00000000000056DE                 cmp     ebx, 9
.text:00000000000056E1                 cmovnz  rax, rdx
.text:00000000000056E5                 add     rsp, 8
.text:00000000000056E9                 pop     rbx
.text:00000000000056EA                 pop     rbp
.text:00000000000056EB                 retn
.text:00000000000056EB ; ---------------------------------------------------------------------------
.text:00000000000056EC                 align 10h
.text:00000000000056F0
.text:00000000000056F0 loc_56F0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000056F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000056F4                 and     edx, 0FFFFFFDFh
.text:00000000000056F7                 cmp     dl, 42h ; 'B'
.text:00000000000056FA                 jnz     short loc_56D0
.text:00000000000056FC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000005700                 jnz     short loc_56D0
.text:0000000000005702                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000005706                 jnz     short loc_56D0
.text:0000000000005708                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000570C                 jnz     short loc_56D0
.text:000000000000570E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000005712                 jnz     short loc_56D0
.text:0000000000005714                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000005718                 jnz     short loc_56D0
.text:000000000000571A                 cmp     byte ptr [rax+7], 0
.text:000000000000571E                 jnz     short loc_56D0
.text:0000000000005720                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005724                 lea     rax, unk_9C1C
.text:000000000000572B                 lea     rdx, unk_9C20
.text:0000000000005732                 cmovnz  rax, rdx
.text:0000000000005736                 add     rsp, 8
.text:000000000000573A                 pop     rbx
.text:000000000000573B                 pop     rbp
.text:000000000000573C                 retn
.text:000000000000573C ; ---------------------------------------------------------------------------
.text:000000000000573D                 align 20h
.text:0000000000005740
.text:0000000000005740 loc_5740:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000005740                 movzx   edx, byte ptr [rax+1]
.text:0000000000005744                 and     edx, 0FFFFFFDFh
.text:0000000000005747                 cmp     dl, 54h ; 'T'
.text:000000000000574A                 jnz     short loc_56D0
.text:000000000000574C                 movzx   edx, byte ptr [rax+2]
.text:0000000000005750                 and     edx, 0FFFFFFDFh
.text:0000000000005753                 cmp     dl, 46h ; 'F'
.text:0000000000005756                 jnz     loc_56D0
.text:000000000000575C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000005760                 jnz     loc_56D0
.text:0000000000005766                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000576A                 jnz     loc_56D0
.text:0000000000005770                 cmp     byte ptr [rax+5], 0
.text:0000000000005774                 jnz     loc_56D0
.text:000000000000577A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000577E                 lea     rax, unk_9C14
.text:0000000000005785                 lea     rdx, unk_9C18
.text:000000000000578C                 cmovnz  rax, rdx
.text:0000000000005790                 add     rsp, 8
.text:0000000000005794                 pop     rbx
.text:0000000000005795                 pop     rbp
.text:0000000000005796                 retn
.text:0000000000005796 ; } // starts at 56B0
.text:0000000000005796 gettext_quote   endp
.text:0000000000005796
.text:0000000000005796 ; ---------------------------------------------------------------------------
.text:0000000000005797                 align 20h
.text:00000000000057A0
.text:00000000000057A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057A0
.text:00000000000057A0 ; Attributes: info_from_lumina
.text:00000000000057A0
.text:00000000000057A0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000057A0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000057A0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000057A0
.text:00000000000057A0 var_E0          = dword ptr -0E0h
.text:00000000000057A0 var_DB          = byte ptr -0DBh
.text:00000000000057A0 var_DA          = byte ptr -0DAh
.text:00000000000057A0 var_D9          = byte ptr -0D9h
.text:00000000000057A0 s               = qword ptr -0D8h
.text:00000000000057A0 n               = qword ptr -0D0h
.text:00000000000057A0 var_C8          = qword ptr -0C8h
.text:00000000000057A0 ps              = qword ptr -0C0h
.text:00000000000057A0 var_B8          = qword ptr -0B8h
.text:00000000000057A0 var_B0          = qword ptr -0B0h
.text:00000000000057A0 var_A8          = qword ptr -0A8h
.text:00000000000057A0 s2              = qword ptr -0A0h
.text:00000000000057A0 var_98          = qword ptr -98h
.text:00000000000057A0 var_90          = qword ptr -90h
.text:00000000000057A0 var_88          = qword ptr -88h
.text:00000000000057A0 var_80          = qword ptr -80h
.text:00000000000057A0 var_78          = qword ptr -78h
.text:00000000000057A0 var_70          = dword ptr -70h
.text:00000000000057A0 var_6C          = byte ptr -6Ch
.text:00000000000057A0 var_6B          = byte ptr -6Bh
.text:00000000000057A0 var_6A          = byte ptr -6Ah
.text:00000000000057A0 var_69          = byte ptr -69h
.text:00000000000057A0 var_68          = qword ptr -68h
.text:00000000000057A0 var_60          = qword ptr -60h
.text:00000000000057A0 wc              = dword ptr -4Ch
.text:00000000000057A0 var_48          = qword ptr -48h
.text:00000000000057A0 var_40          = qword ptr -40h
.text:00000000000057A0 arg_0           = qword ptr  8
.text:00000000000057A0 arg_8           = qword ptr  10h
.text:00000000000057A0 arg_10          = qword ptr  18h
.text:00000000000057A0
.text:00000000000057A0 ; __unwind {
.text:00000000000057A0                 push    r15
.text:00000000000057A2                 push    r14
.text:00000000000057A4                 mov     r15d, r8d
.text:00000000000057A7                 push    r13
.text:00000000000057A9                 push    r12
.text:00000000000057AB                 mov     r14, rdi
.text:00000000000057AE                 push    rbp
.text:00000000000057AF                 push    rbx
.text:00000000000057B0                 mov     ebx, r9d
.text:00000000000057B3                 mov     r13, rsi
.text:00000000000057B6                 mov     rbp, rcx
.text:00000000000057B9                 and     ebx, 2
.text:00000000000057BC                 sub     rsp, 0B8h
.text:00000000000057C3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000057CB                 mov     [rsp+0E8h+s], rdx
.text:00000000000057D0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000057D5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000057DA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000057DF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000057E7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000057EC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000057F4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000057F9                 mov     rax, fs:28h
.text:0000000000005802                 mov     [rsp+0E8h+var_40], rax
.text:000000000000580A                 xor     eax, eax
.text:000000000000580C                 call    ___ctype_get_mb_cur_max
.text:0000000000005811                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000005815                 mov     [rsp+0E8h+var_90], rax
.text:000000000000581A                 ja      def_5831        ; jumptable 00000000000121F1 default case
.text:0000000000005820                 lea     rcx, jpt_5831
.text:0000000000005827                 mov     edx, r15d
.text:000000000000582A                 movsxd  rax, ds:(jpt_5831 - 9C80h)[rcx+rdx*4]
.text:000000000000582E                 add     rax, rcx
.text:0000000000005831                 jmp     rax             ; switch jump
.text:0000000000005833 ; ---------------------------------------------------------------------------
.text:0000000000005833
.text:0000000000005833 loc_5833:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005833                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000005833                                         ; DATA XREF: ...
.text:0000000000005833                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000005838                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000583D                 xor     r12d, r12d
.text:0000000000005840                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005849                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000584E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005853
.text:0000000000005853 loc_5853:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000005853                 lea     rax, asc_9C25   ; "'"
.text:000000000000585A                 mov     [rsp+0E8h+n], 1
.text:0000000000005863                 xor     r15d, r15d
.text:0000000000005866                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000586E                 mov     [rsp+0E8h+s2], rax
.text:0000000000005873
.text:0000000000005873 loc_5873:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000005873                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000005873                 xor     r11d, r11d
.text:0000000000005876                 mov     rax, rbp
.text:0000000000005879                 mov     r8d, r12d
.text:000000000000587C                 mov     rbp, r11
.text:000000000000587F                 mov     r11, rax
.text:0000000000005882                 nop     word ptr [rax+rax+00h]
.text:0000000000005888
.text:0000000000005888 loc_5888:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000005888                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000005888                 cmp     r11, rbp
.text:000000000000588B                 setnz   r12b
.text:000000000000588F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005893                 jnz     short loc_58A2
.text:0000000000005895                 mov     rax, [rsp+0E8h+s]
.text:000000000000589A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000589E                 setnz   r12b
.text:00000000000058A2
.text:00000000000058A2 loc_58A2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000058A2                 test    r12b, r12b
.text:00000000000058A5                 jz      loc_5F00
.text:00000000000058AB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000058B0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000058B5                 lea     r9, [rdi+rbp]
.text:00000000000058B9                 setnz   al
.text:00000000000058BC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000058C0                 mov     r10d, eax
.text:00000000000058C3                 jz      loc_5970
.text:00000000000058C9                 mov     rax, [rsp+0E8h+n]
.text:00000000000058CE                 test    rax, rax
.text:00000000000058D1                 jz      loc_5D00
.text:00000000000058D7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000058DB                 lea     rbx, [rbp+rax+0]
.text:00000000000058E0                 jnz     short loc_5910
.text:00000000000058E2                 cmp     rax, 1
.text:00000000000058E6                 jbe     short loc_5910
.text:00000000000058E8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000058ED                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000058F2                 mov     [rsp+0E8h+ps], r9
.text:00000000000058F7                 call    _strlen
.text:00000000000058FC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005902                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005908                 mov     r11, rax
.text:000000000000590B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000005910                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000005910                 cmp     rbx, r11
.text:0000000000005913                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005918                 ja      loc_5ED0
.text:000000000000591E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000005923                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000005928                 mov     rdi, r9         ; s1
.text:000000000000592B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000005930                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005935                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000593A                 call    _memcmp
.text:000000000000593F                 test    eax, eax
.text:0000000000005941                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005946                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000594C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000005951                 jnz     loc_5ED0
.text:0000000000005957                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000595C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000005962                 jnz     loc_68E5
.text:0000000000005968                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000005970                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000005970                 movzx   ebx, byte ptr [r9]
.text:0000000000005974                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000005977                 ja      def_598E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000597D                 lea     rcx, jpt_598E
.text:0000000000005984                 movzx   edx, bl
.text:0000000000005987                 movsxd  rax, ds:(jpt_598E - 9CACh)[rcx+rdx*4]
.text:000000000000598B                 add     rax, rcx
.text:000000000000598E                 jmp     rax             ; switch jump
.text:0000000000005990 ; ---------------------------------------------------------------------------
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005990                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005990                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000005993
.text:0000000000005993 loc_5993:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005993                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005993                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000005997                 setnz   al
.text:000000000000599A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000599E                 jnz     short loc_59AC
.text:00000000000059A0                 mov     rax, [rsp+0E8h+s]
.text:00000000000059A5                 cmp     byte ptr [rax+1], 0
.text:00000000000059A9                 setnz   al
.text:00000000000059AC
.text:00000000000059AC loc_59AC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000059AC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000059B1                 setz    dl
.text:00000000000059B4                 test    al, al
.text:00000000000059B6                 jz      loc_5C08
.text:00000000000059BC
.text:00000000000059BC loc_59BC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000059BC                 xor     r12d, r12d
.text:00000000000059BF                 xor     eax, eax
.text:00000000000059C1                 nop     dword ptr [rax+00000000h]
.text:00000000000059C8
.text:00000000000059C8 loc_59C8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000059C8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000059C8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000059CD                 jnz     loc_5AE2
.text:00000000000059D3                 test    dl, dl
.text:00000000000059D5                 jnz     loc_5AE2
.text:00000000000059DB
.text:00000000000059DB loc_59DB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000059DB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000059E0                 test    rsi, rsi
.text:00000000000059E3                 jz      short loc_59F9
.text:00000000000059E5                 mov     edx, ebx
.text:00000000000059E7                 shr     dl, 5
.text:00000000000059EA                 movzx   edx, dl
.text:00000000000059ED                 mov     edx, [rsi+rdx*4]
.text:00000000000059F0                 bt      edx, ebx
.text:00000000000059F3                 jb      loc_5B43
.text:00000000000059F9
.text:00000000000059F9 loc_59F9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000059F9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000059F9                 test    r10b, r10b
.text:00000000000059FC                 jnz     loc_5B43
.text:0000000000005A02                 xor     eax, 1
.text:0000000000005A05                 add     rbp, 1
.text:0000000000005A09                 and     eax, r8d
.text:0000000000005A0C
.text:0000000000005A0C loc_5A0C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000005A0C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000005A0C                 test    al, al
.text:0000000000005A0E                 jz      short loc_5A30
.text:0000000000005A10                 cmp     r13, r15
.text:0000000000005A13                 jbe     short loc_5A1A
.text:0000000000005A15                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005A1A
.text:0000000000005A1A loc_5A1A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000005A1A                 lea     rax, [r15+1]
.text:0000000000005A1E                 cmp     r13, rax
.text:0000000000005A21                 jbe     short loc_5A29
.text:0000000000005A23                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000005A29
.text:0000000000005A29 loc_5A29:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000005A29                 add     r15, 2
.text:0000000000005A2D                 xor     r8d, r8d
.text:0000000000005A30
.text:0000000000005A30 loc_5A30:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000005A30                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000005A30                 cmp     r15, r13
.text:0000000000005A33                 jnb     short loc_5A39
.text:0000000000005A35                 mov     [r14+r15], bl
.text:0000000000005A39
.text:0000000000005A39 loc_5A39:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000005A39                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000005A3E                 add     r15, 1
.text:0000000000005A42                 mov     eax, 0
.text:0000000000005A47                 test    r12b, r12b
.text:0000000000005A4A                 cmovz   edi, eax
.text:0000000000005A4D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000005A52                 jmp     loc_5888
.text:0000000000005A52 ; ---------------------------------------------------------------------------
.text:0000000000005A57                 align 20h
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005A60                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005A60                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000005A63
.text:0000000000005A63 loc_5A63:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A63                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005A63                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000005A67                 cmp     eax, 2
.text:0000000000005A6A                 jz      loc_6028
.text:0000000000005A70                 cmp     eax, 5
.text:0000000000005A73                 jz      loc_5FE8
.text:0000000000005A79                 cmp     eax, 2
.text:0000000000005A7C                 mov     ebx, 3Fh ; '?'
.text:0000000000005A81                 setz    dl
.text:0000000000005A84                 xor     r12d, r12d
.text:0000000000005A87                 xor     eax, eax
.text:0000000000005A89                 jmp     loc_59C8
.text:0000000000005A89 ; ---------------------------------------------------------------------------
.text:0000000000005A8E                 align 10h
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005A90                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005A90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000005A93
.text:0000000000005A93 loc_5A93:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005A93                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005A93                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000005A98                 jz      loc_5FA0
.text:0000000000005A9E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000005AA3                 xor     edx, edx
.text:0000000000005AA5                 xor     eax, eax
.text:0000000000005AA7                 mov     ebx, 27h ; '''
.text:0000000000005AAC                 jmp     loc_59C8
.text:0000000000005AAC ; ---------------------------------------------------------------------------
.text:0000000000005AB1                 align 8
.text:0000000000005AB8
.text:0000000000005AB8 loc_5AB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005AB8                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005AB8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000005ABD                 mov     ebx, 74h ; 't'
.text:0000000000005AC2
.text:0000000000005AC2 loc_5AC2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000005AC2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000005AC2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005AC7                 setz    al
.text:0000000000005ACA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005ACE                 jnz     loc_5C1E
.text:0000000000005AD4
.text:0000000000005AD4 loc_5AD4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000005AD4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000005AD4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005AD9                 jnz     short loc_5B40
.text:0000000000005ADB
.text:0000000000005ADB loc_5ADB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000005ADB                 mov     ebx, edx
.text:0000000000005ADD                 xor     r12d, r12d
.text:0000000000005AE0                 xor     eax, eax
.text:0000000000005AE2
.text:0000000000005AE2 loc_5AE2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000005AE2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000005AE2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005AE7                 jnz     loc_59DB
.text:0000000000005AED                 jmp     loc_59F9
.text:0000000000005AED ; ---------------------------------------------------------------------------
.text:0000000000005AF2                 align 8
.text:0000000000005AF8
.text:0000000000005AF8 loc_5AF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005AF8                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005AF8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000005AFD                 mov     ebx, 62h ; 'b'
.text:0000000000005B02                 jmp     short loc_5AD4
.text:0000000000005B02 ; ---------------------------------------------------------------------------
.text:0000000000005B04                 align 8
.text:0000000000005B08
.text:0000000000005B08 loc_5B08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005B08                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005B08                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000005B0D                 jz      loc_5EE0
.text:0000000000005B13                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005B18                 jz      loc_5D30
.text:0000000000005B1E
.text:0000000000005B1E loc_5B1E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000005B1E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005B23                 jz      loc_5D30
.text:0000000000005B29                 cmp     [rsp+0E8h+n], 0
.text:0000000000005B2F                 jnz     loc_5EEB
.text:0000000000005B35                 mov     ebx, 5Ch ; '\'
.text:0000000000005B3A                 nop     word ptr [rax+rax+00h]
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000005B40                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000005B40                 xor     r12d, r12d
.text:0000000000005B43
.text:0000000000005B43 loc_5B43:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000005B43                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000005B43                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005B48                 setz    dl
.text:0000000000005B4B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005B50                 mov     eax, edx
.text:0000000000005B52                 jnz     loc_63A8
.text:0000000000005B58                 mov     eax, r8d
.text:0000000000005B5B                 xor     eax, 1
.text:0000000000005B5E                 and     al, dl
.text:0000000000005B60                 jz      short loc_5B91
.text:0000000000005B62                 cmp     r13, r15
.text:0000000000005B65                 jbe     short loc_5B6C
.text:0000000000005B67                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005B6C
.text:0000000000005B6C loc_5B6C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000005B6C                 lea     rdx, [r15+1]
.text:0000000000005B70                 cmp     r13, rdx
.text:0000000000005B73                 jbe     short loc_5B7B
.text:0000000000005B75                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005B7B
.text:0000000000005B7B loc_5B7B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000005B7B                 lea     rdx, [r15+2]
.text:0000000000005B7F                 cmp     r13, rdx
.text:0000000000005B82                 jbe     short loc_5B8A
.text:0000000000005B84                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000005B8A
.text:0000000000005B8A loc_5B8A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000005B8A                 add     r15, 3
.text:0000000000005B8E                 mov     r8d, eax
.text:0000000000005B91
.text:0000000000005B91 loc_5B91:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000005B91                 cmp     r13, r15
.text:0000000000005B94                 jbe     short loc_5B9B
.text:0000000000005B96                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000005B9B
.text:0000000000005B9B loc_5B9B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000005B9B                 add     r15, 1
.text:0000000000005B9F                 add     rbp, 1
.text:0000000000005BA3                 jmp     loc_5A30
.text:0000000000005BA3 ; ---------------------------------------------------------------------------
.text:0000000000005BA8                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 loc_5BB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005BB0                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005BB0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000005BB5                 jnz     loc_5D83
.text:0000000000005BBB                 xor     edx, edx
.text:0000000000005BBD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000005BC2                 jz      loc_5ADB
.text:0000000000005BC8                 add     rbp, 1
.text:0000000000005BCC                 jmp     loc_5888
.text:0000000000005BCC ; ---------------------------------------------------------------------------
.text:0000000000005BD1                 align 8
.text:0000000000005BD8
.text:0000000000005BD8 loc_5BD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005BD8                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005BD8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000005BDD                 setz    dl
.text:0000000000005BE0                 xor     eax, eax
.text:0000000000005BE2                 jmp     loc_59C8
.text:0000000000005BE2 ; ---------------------------------------------------------------------------
.text:0000000000005BE7                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005BF0                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005BF0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000005BF5                 mov     ebx, 61h ; 'a'
.text:0000000000005BFA                 jmp     loc_5AD4
.text:0000000000005BFA ; ---------------------------------------------------------------------------
.text:0000000000005BFF                 align 20h
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C00                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000005C05                 setz    dl
.text:0000000000005C08
.text:0000000000005C08 loc_5C08:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000005C08                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000005C08                 test    rbp, rbp
.text:0000000000005C0B                 jnz     loc_59BC
.text:0000000000005C11
.text:0000000000005C11 loc_5C11:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000005C11                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000005C11                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005C16                 and     al, dl
.text:0000000000005C18                 jz      loc_59C8
.text:0000000000005C1E
.text:0000000000005C1E loc_5C1E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000005C1E                 mov     rbp, r11
.text:0000000000005C21                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005C29                 jmp     loc_6329
.text:0000000000005C29 ; ---------------------------------------------------------------------------
.text:0000000000005C2E                 align 10h
.text:0000000000005C30
.text:0000000000005C30 loc_5C30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C30                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000005C35                 setz    dl
.text:0000000000005C38                 xor     r12d, r12d
.text:0000000000005C3B                 jmp     short loc_5C11
.text:0000000000005C3B ; ---------------------------------------------------------------------------
.text:0000000000005C3D                 align 20h
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C40                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000005C45                 mov     ebx, 20h ; ' '
.text:0000000000005C4A                 setz    dl
.text:0000000000005C4D                 jmp     short loc_5C11
.text:0000000000005C4D ; ---------------------------------------------------------------------------
.text:0000000000005C4F                 align 10h
.text:0000000000005C50
.text:0000000000005C50 loc_5C50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C50                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C50                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000005C55                 mov     ebx, 72h ; 'r'
.text:0000000000005C5A                 jmp     loc_5AC2
.text:0000000000005C5A ; ---------------------------------------------------------------------------
.text:0000000000005C5F                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C60                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C60                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000005C65                 mov     ebx, 66h ; 'f'
.text:0000000000005C6A                 jmp     loc_5AD4
.text:0000000000005C6A ; ---------------------------------------------------------------------------
.text:0000000000005C6F                 align 10h
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C70                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C70                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000005C75                 mov     ebx, 76h ; 'v'
.text:0000000000005C7A                 jmp     loc_5AD4
.text:0000000000005C7A ; ---------------------------------------------------------------------------
.text:0000000000005C7F                 align 20h
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005C80                                         ; DATA XREF: .rodata:jpt_598E↓o
.text:0000000000005C80                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000005C85                 mov     ebx, 6Eh ; 'n'
.text:0000000000005C8A                 jmp     loc_5AC2
.text:0000000000005C8A ; ---------------------------------------------------------------------------
.text:0000000000005C8F                 align 10h
.text:0000000000005C90
.text:0000000000005C90 def_5D1A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000005C90                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000005C90                                         ; DATA XREF: ...
.text:0000000000005C90                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000005C93                 nop     dword ptr [rax+rax+00h]
.text:0000000000005C98
.text:0000000000005C98 def_598E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000005C98                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000005C98                                         ; DATA XREF: ...
.text:0000000000005C98                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000005C9E                 jnz     loc_6048
.text:0000000000005CA4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000005CA9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000005CAE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005CB3                 call    ___ctype_b_loc
.text:0000000000005CB8                 mov     rcx, [rax]
.text:0000000000005CBB                 movzx   edx, bl
.text:0000000000005CBE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000005CC4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005CCA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000005CCF                 mov     edi, 1
.text:0000000000005CD4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000005CD8                 and     ax, 4000h
.text:0000000000005CDC                 setnz   r12b
.text:0000000000005CE0                 setz    al
.text:0000000000005CE3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000005CE7
.text:0000000000005CE7 loc_5CE7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000005CE7                 test    al, al
.text:0000000000005CE9                 jnz     loc_6681
.text:0000000000005CEF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005CF4                 setz    dl
.text:0000000000005CF7                 jmp     loc_59C8
.text:0000000000005CF7 ; ---------------------------------------------------------------------------
.text:0000000000005CFC                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000005D00                 movzx   ebx, byte ptr [r9]
.text:0000000000005D04                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000005D07                 ja      short def_5D1A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000005D09                 lea     rcx, jpt_5D1A
.text:0000000000005D10                 movzx   edx, bl
.text:0000000000005D13                 movsxd  rax, ds:(jpt_5D1A - 9EA8h)[rcx+rdx*4]
.text:0000000000005D17                 add     rax, rcx
.text:0000000000005D1A                 jmp     rax             ; switch jump
.text:0000000000005D1A ; ---------------------------------------------------------------------------
.text:0000000000005D1C                 align 20h
.text:0000000000005D20
.text:0000000000005D20 loc_5D20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005D20                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005D20                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000005D23                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005D28                 jnz     loc_5B1E
.text:0000000000005D2E                 xchg    ax, ax
.text:0000000000005D30
.text:0000000000005D30 loc_5D30:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000005D30                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000005D30                 mov     edx, 5Ch ; '\'
.text:0000000000005D35                 mov     ebx, 5Ch ; '\'
.text:0000000000005D3A                 jmp     loc_5AD4
.text:0000000000005D3A ; ---------------------------------------------------------------------------
.text:0000000000005D3F                 align 20h
.text:0000000000005D40
.text:0000000000005D40 loc_5D40:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005D40                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005D40                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000005D45                 xor     r10d, r10d
.text:0000000000005D48                 mov     ebx, 66h ; 'f'
.text:0000000000005D4D                 jmp     loc_5AD4
.text:0000000000005D4D ; ---------------------------------------------------------------------------
.text:0000000000005D52                 align 8
.text:0000000000005D58
.text:0000000000005D58 loc_5D58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005D58                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005D58                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000005D5D                 xor     r10d, r10d
.text:0000000000005D60                 mov     ebx, 6Eh ; 'n'
.text:0000000000005D65                 jmp     loc_5AC2
.text:0000000000005D65 ; ---------------------------------------------------------------------------
.text:0000000000005D6A                 align 10h
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005D70                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005D70                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000005D75                 jmp     loc_5B40
.text:0000000000005D75 ; ---------------------------------------------------------------------------
.text:0000000000005D7A                 align 20h
.text:0000000000005D80
.text:0000000000005D80 loc_5D80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005D80                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005D80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000005D83
.text:0000000000005D83 loc_5D83:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000005D83                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005D88                 setz    dl
.text:0000000000005D8B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005D90                 jnz     loc_692A
.text:0000000000005D96                 mov     eax, r8d
.text:0000000000005D99                 mov     rcx, r15
.text:0000000000005D9C                 xor     eax, 1
.text:0000000000005D9F                 and     al, dl
.text:0000000000005DA1                 jz      short loc_5DD0
.text:0000000000005DA3                 cmp     r13, r15
.text:0000000000005DA6                 jbe     short loc_5DAD
.text:0000000000005DA8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005DAD
.text:0000000000005DAD loc_5DAD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000005DAD                 lea     rcx, [r15+1]
.text:0000000000005DB1                 cmp     r13, rcx
.text:0000000000005DB4                 jbe     short loc_5DBC
.text:0000000000005DB6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005DBC
.text:0000000000005DBC loc_5DBC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000005DBC                 lea     rcx, [r15+2]
.text:0000000000005DC0                 cmp     r13, rcx
.text:0000000000005DC3                 ja      loc_63F9
.text:0000000000005DC9
.text:0000000000005DC9 loc_5DC9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000005DC9                 lea     rcx, [r15+3]
.text:0000000000005DCD                 mov     r8d, eax
.text:0000000000005DD0
.text:0000000000005DD0 loc_5DD0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000005DD0                 cmp     r13, rcx
.text:0000000000005DD3                 jbe     short loc_5DDA
.text:0000000000005DD5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000005DDA
.text:0000000000005DDA loc_5DDA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000005DDA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005DDF                 lea     r15, [rcx+1]
.text:0000000000005DE3                 jz      loc_63E9
.text:0000000000005DE9                 lea     rax, [rbp+1]
.text:0000000000005DED                 cmp     rax, r11
.text:0000000000005DF0                 jnb     short loc_5E0B
.text:0000000000005DF2                 mov     rax, [rsp+0E8h+s]
.text:0000000000005DF7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000005DFC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000005E00                 sub     eax, 30h ; '0'
.text:0000000000005E03                 cmp     al, 9
.text:0000000000005E05                 jbe     loc_6639
.text:0000000000005E0B
.text:0000000000005E0B loc_5E0B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000005E0B                 mov     eax, r12d
.text:0000000000005E0E                 mov     ebx, 30h ; '0'
.text:0000000000005E13                 xor     r12d, r12d
.text:0000000000005E16                 jmp     loc_59C8
.text:0000000000005E16 ; ---------------------------------------------------------------------------
.text:0000000000005E1B                 align 20h
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005E20                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005E20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000005E25                 mov     r12d, r10d
.text:0000000000005E28                 setz    dl
.text:0000000000005E2B                 xor     r10d, r10d
.text:0000000000005E2E                 xor     eax, eax
.text:0000000000005E30                 jmp     loc_59C8
.text:0000000000005E30 ; ---------------------------------------------------------------------------
.text:0000000000005E35                 align 8
.text:0000000000005E38
.text:0000000000005E38 loc_5E38:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005E38                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005E38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000005E3D                 setz    dl
.text:0000000000005E40                 xor     r10d, r10d
.text:0000000000005E43                 jmp     loc_5C08
.text:0000000000005E43 ; ---------------------------------------------------------------------------
.text:0000000000005E48                 align 10h
.text:0000000000005E50
.text:0000000000005E50 loc_5E50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005E50                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005E50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000005E55                 setz    dl
.text:0000000000005E58                 xor     r10d, r10d
.text:0000000000005E5B                 xor     r12d, r12d
.text:0000000000005E5E                 jmp     loc_5C11
.text:0000000000005E5E ; ---------------------------------------------------------------------------
.text:0000000000005E63                 align 8
.text:0000000000005E68
.text:0000000000005E68 loc_5E68:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005E68                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005E68                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000005E6D                 mov     r12d, r10d
.text:0000000000005E70                 mov     ebx, 20h ; ' '
.text:0000000000005E75                 setz    dl
.text:0000000000005E78                 xor     r10d, r10d
.text:0000000000005E7B                 jmp     loc_5C11
.text:0000000000005E80 ; ---------------------------------------------------------------------------
.text:0000000000005E80
.text:0000000000005E80 loc_5E80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005E80                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005E80                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000005E85                 xor     r10d, r10d
.text:0000000000005E88                 mov     ebx, 72h ; 'r'
.text:0000000000005E8D                 jmp     loc_5AC2
.text:0000000000005E8D ; ---------------------------------------------------------------------------
.text:0000000000005E92                 align 8
.text:0000000000005E98
.text:0000000000005E98 loc_5E98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005E98                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005E98                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000005E9D                 jmp     loc_5B40
.text:0000000000005E9D ; ---------------------------------------------------------------------------
.text:0000000000005EA2                 align 8
.text:0000000000005EA8
.text:0000000000005EA8 loc_5EA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005EA8                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005EA8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000005EAD                 xor     r10d, r10d
.text:0000000000005EB0                 mov     ebx, 74h ; 't'
.text:0000000000005EB5                 jmp     loc_5AC2
.text:0000000000005EB5 ; ---------------------------------------------------------------------------
.text:0000000000005EBA                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 loc_5EC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005EC0                                         ; DATA XREF: .rodata:jpt_5D1A↓o
.text:0000000000005EC0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000005EC5                 jmp     loc_5B40
.text:0000000000005EC5 ; ---------------------------------------------------------------------------
.text:0000000000005ECA                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 loc_5ED0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000005ED0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000005ED0                 xor     r10d, r10d
.text:0000000000005ED3                 jmp     loc_5970
.text:0000000000005ED3 ; ---------------------------------------------------------------------------
.text:0000000000005ED8                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000005EE0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005EE5                 jnz     loc_6850
.text:0000000000005EEB
.text:0000000000005EEB loc_5EEB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000005EEB                 add     rbp, 1
.text:0000000000005EEF                 mov     eax, r8d
.text:0000000000005EF2                 xor     r12d, r12d
.text:0000000000005EF5                 mov     ebx, 5Ch ; '\'
.text:0000000000005EFA                 jmp     loc_5A0C
.text:0000000000005EFA ; ---------------------------------------------------------------------------
.text:0000000000005EFF                 align 20h
.text:0000000000005F00
.text:0000000000005F00 loc_5F00:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000005F00                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005F05                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005F0A                 mov     r12d, r8d
.text:0000000000005F0D                 mov     rbp, r11
.text:0000000000005F10                 setz    dl
.text:0000000000005F13                 mov     eax, ebx
.text:0000000000005F15                 test    r15, r15
.text:0000000000005F18                 setz    cl
.text:0000000000005F1B                 and     eax, edx
.text:0000000000005F1D                 and     al, cl
.text:0000000000005F1F                 jnz     loc_6986
.text:0000000000005F25                 mov     eax, ebx
.text:0000000000005F27                 xor     eax, 1
.text:0000000000005F2A                 and     dl, al
.text:0000000000005F2C                 jz      loc_689C
.text:0000000000005F32                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000005F37                 jz      loc_689A
.text:0000000000005F3D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000005F42                 jnz     loc_693D
.text:0000000000005F48                 test    r13, r13
.text:0000000000005F4B                 setz    al
.text:0000000000005F4E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000005F54                 setnz   dl
.text:0000000000005F57                 and     al, dl
.text:0000000000005F59                 jz      loc_697C
.text:0000000000005F5F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005F64
.text:0000000000005F64 loc_5F64:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000005F64                 lea     rbx, asc_9C25   ; "'"
.text:0000000000005F6B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000005F6F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005F77                 mov     r15d, 1
.text:0000000000005F7D                 mov     [rsp+0E8h+n], 1
.text:0000000000005F86                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005F8B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005F90                 mov     [rsp+0E8h+var_6C], al
.text:0000000000005F94                 jmp     loc_5873
.text:0000000000005F94 ; ---------------------------------------------------------------------------
.text:0000000000005F99                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000005FA0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005FA5                 jnz     loc_6850
.text:0000000000005FAB                 test    r13, r13
.text:0000000000005FAE                 jz      loc_63B0
.text:0000000000005FB4                 xor     edx, edx
.text:0000000000005FB6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000005FBC                 jnz     loc_63B0
.text:0000000000005FC2
.text:0000000000005FC2 loc_5FC2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000005FC2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000005FC2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000005FC7                 add     r15, 3
.text:0000000000005FCB                 xor     eax, eax
.text:0000000000005FCD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000005FD2                 xor     r8d, r8d
.text:0000000000005FD5                 mov     r13, rdx
.text:0000000000005FD8                 mov     ebx, 27h ; '''
.text:0000000000005FDD                 jmp     loc_59F9
.text:0000000000005FDD ; ---------------------------------------------------------------------------
.text:0000000000005FE2                 align 8
.text:0000000000005FE8
.text:0000000000005FE8 loc_5FE8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000005FE8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000005FED                 jz      short loc_6010
.text:0000000000005FEF                 lea     rcx, [rbp+2]
.text:0000000000005FF3                 cmp     rcx, r11
.text:0000000000005FF6                 jnb     short loc_6010
.text:0000000000005FF8                 mov     rax, [rsp+0E8h+s]
.text:0000000000005FFD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000006002                 jz      loc_6792
.text:0000000000006008                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000006010                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000006010                 xor     edx, edx
.text:0000000000006012                 xor     r12d, r12d
.text:0000000000006015                 xor     eax, eax
.text:0000000000006017                 mov     ebx, 3Fh ; '?'
.text:000000000000601C                 jmp     loc_59C8
.text:000000000000601C ; ---------------------------------------------------------------------------
.text:0000000000006021                 align 8
.text:0000000000006028
.text:0000000000006028 loc_6028:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000006028                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000602D                 jnz     loc_6850
.text:0000000000006033                 xor     r12d, r12d
.text:0000000000006036                 xor     eax, eax
.text:0000000000006038                 mov     ebx, 3Fh ; '?'
.text:000000000000603D                 jmp     loc_59F9
.text:000000000000603D ; ---------------------------------------------------------------------------
.text:0000000000006042                 align 8
.text:0000000000006048
.text:0000000000006048 loc_6048:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000006048                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000006050                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006054                 mov     [rsp+0E8h+var_48], 0
.text:0000000000006060                 mov     [rsp+0E8h+ps], rax
.text:0000000000006065                 jnz     short loc_6094
.text:0000000000006067                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000606C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000006071                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000006076                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000607B                 call    _strlen
.text:0000000000006080                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000006086                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000608C                 mov     r11, rax
.text:000000000000608F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006094
.text:0000000000006094 loc_6094:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000006094                 lea     rax, [rsp+0E8h+wc]
.text:000000000000609C                 xor     ecx, ecx
.text:000000000000609E                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000060A2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000060A7                 mov     rbx, rcx
.text:00000000000060AA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000060B2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000060B7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000060BC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000060C4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000060C9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000060CE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000060D3
.text:00000000000060D3 loc_60D3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000060D3                 mov     rax, [rsp+0E8h+s]
.text:00000000000060D8                 lea     r14, [rbp+rbx+0]
.text:00000000000060DD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000060E2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000060E7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000060EC                 lea     r13, [rax+r14]
.text:00000000000060F0                 sub     rdx, r14
.text:00000000000060F3                 mov     rsi, r13
.text:00000000000060F6                 call    rpl_mbrtowc
.text:00000000000060FB                 test    rax, rax
.text:00000000000060FE                 mov     r15, rax
.text:0000000000006101                 jz      short loc_6151
.text:0000000000006103                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006107                 jz      loc_6725
.text:000000000000610D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006111                 jz      loc_66B1
.text:0000000000006117                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000611C                 setz    al
.text:000000000000611F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000006123                 jnz     loc_62C0
.text:0000000000006129
.text:0000000000006129 loc_6129:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000006129                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000006129                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000006130                 call    _iswprint
.text:0000000000006135                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000613A                 test    eax, eax
.text:000000000000613C                 mov     eax, 0
.text:0000000000006141                 cmovz   r12d, eax
.text:0000000000006145                 add     rbx, r15
.text:0000000000006148                 call    _mbsinit
.text:000000000000614D                 test    eax, eax
.text:000000000000614F                 jz      short loc_60D3
.text:0000000000006151
.text:0000000000006151 loc_6151:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000006151                 mov     edx, r12d
.text:0000000000006154                 mov     rdi, rbx
.text:0000000000006157                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000615D                 xor     edx, 1
.text:0000000000006160                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006165                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000616B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000616F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006177                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000617C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006181                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006186
.text:0000000000006186 loc_6186:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000006186                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000006186                 cmp     rdi, 1
.text:000000000000618A                 jbe     loc_678B
.text:0000000000006190
.text:0000000000006190 loc_6190:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000006190                 mov     rcx, rdi
.text:0000000000006193                 xor     esi, esi
.text:0000000000006195                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000619B                 add     rcx, rbp
.text:000000000000619E                 mov     rdi, [rsp+0E8h+s]
.text:00000000000061A3                 jmp     loc_625E
.text:00000000000061A3 ; ---------------------------------------------------------------------------
.text:00000000000061A8                 align 10h
.text:00000000000061B0
.text:00000000000061B0 loc_61B0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000061B0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000061B5                 setz    al
.text:00000000000061B8                 test    r9b, r9b
.text:00000000000061BB                 jnz     loc_6670
.text:00000000000061C1                 mov     esi, r8d
.text:00000000000061C4                 xor     esi, 1
.text:00000000000061C7                 and     al, sil
.text:00000000000061CA                 jz      short loc_61FB
.text:00000000000061CC                 cmp     r13, r15
.text:00000000000061CF                 jbe     short loc_61D6
.text:00000000000061D1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000061D6
.text:00000000000061D6 loc_61D6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000061D6                 lea     rsi, [r15+1]
.text:00000000000061DA                 cmp     r13, rsi
.text:00000000000061DD                 jbe     short loc_61E5
.text:00000000000061DF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000061E5
.text:00000000000061E5 loc_61E5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000061E5                 lea     rsi, [r15+2]
.text:00000000000061E9                 cmp     r13, rsi
.text:00000000000061EC                 jbe     short loc_61F4
.text:00000000000061EE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000061F4
.text:00000000000061F4 loc_61F4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000061F4                 add     r15, 3
.text:00000000000061F8                 mov     r8d, eax
.text:00000000000061FB
.text:00000000000061FB loc_61FB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000061FB                 cmp     r13, r15
.text:00000000000061FE                 jbe     short loc_6205
.text:0000000000006200                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006205
.text:0000000000006205 loc_6205:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000006205                 lea     rax, [r15+1]
.text:0000000000006209                 cmp     r13, rax
.text:000000000000620C                 jbe     short loc_621B
.text:000000000000620E                 mov     eax, ebx
.text:0000000000006210                 shr     al, 6
.text:0000000000006213                 add     eax, 30h ; '0'
.text:0000000000006216                 mov     [r14+r15+1], al
.text:000000000000621B
.text:000000000000621B loc_621B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000621B                 lea     rax, [r15+2]
.text:000000000000621F                 cmp     r13, rax
.text:0000000000006222                 jbe     short loc_6234
.text:0000000000006224                 mov     eax, ebx
.text:0000000000006226                 shr     al, 3
.text:0000000000006229                 and     eax, 7
.text:000000000000622C                 add     eax, 30h ; '0'
.text:000000000000622F                 mov     [r14+r15+2], al
.text:0000000000006234
.text:0000000000006234 loc_6234:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000006234                 and     ebx, 7
.text:0000000000006237                 add     rbp, 1
.text:000000000000623B                 add     r15, 3
.text:000000000000623F                 add     ebx, 30h ; '0'
.text:0000000000006242                 cmp     rbp, rcx
.text:0000000000006245                 jnb     loc_5A30
.text:000000000000624B                 mov     esi, edx
.text:000000000000624D
.text:000000000000624D loc_624D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000624D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000624D                 cmp     r13, r15
.text:0000000000006250                 jbe     short loc_6256
.text:0000000000006252                 mov     [r14+r15], bl
.text:0000000000006256
.text:0000000000006256 loc_6256:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000006256                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000625A                 add     r15, 1
.text:000000000000625E
.text:000000000000625E loc_625E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000625E                 test    dl, dl
.text:0000000000006260                 jnz     loc_61B0
.text:0000000000006266                 mov     eax, esi
.text:0000000000006268                 xor     eax, 1
.text:000000000000626B                 and     eax, r8d
.text:000000000000626E                 test    r10b, r10b
.text:0000000000006271                 jz      short loc_6281
.text:0000000000006273                 cmp     r13, r15
.text:0000000000006276                 jbe     short loc_627D
.text:0000000000006278                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000627D
.text:000000000000627D loc_627D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000627D                 add     r15, 1
.text:0000000000006281
.text:0000000000006281 loc_6281:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000006281                 add     rbp, 1
.text:0000000000006285                 cmp     rbp, rcx
.text:0000000000006288                 jnb     loc_5A0C
.text:000000000000628E                 test    al, al
.text:0000000000006290                 jz      loc_668E
.text:0000000000006296                 cmp     r13, r15
.text:0000000000006299                 jbe     short loc_62A0
.text:000000000000629B                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000062A0
.text:00000000000062A0 loc_62A0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000062A0                 lea     rax, [r15+1]
.text:00000000000062A4                 cmp     r13, rax
.text:00000000000062A7                 jbe     short loc_62AF
.text:00000000000062A9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000062AF
.text:00000000000062AF loc_62AF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000062AF                 add     r15, 2
.text:00000000000062B3                 xor     r10d, r10d
.text:00000000000062B6                 xor     r8d, r8d
.text:00000000000062B9                 jmp     short loc_624D
.text:00000000000062B9 ; ---------------------------------------------------------------------------
.text:00000000000062BB                 align 20h
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000062C0                 cmp     r15, 1
.text:00000000000062C4                 jz      loc_6129
.text:00000000000062CA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000062CF                 lea     rcx, [rdi+r15]
.text:00000000000062D3                 lea     rdx, [rdi+r14+1]
.text:00000000000062D8                 lea     r8, [rcx+r14]
.text:00000000000062DC                 jmp     short loc_62ED
.text:00000000000062DC ; ---------------------------------------------------------------------------
.text:00000000000062DE                 align 20h
.text:00000000000062E0
.text:00000000000062E0 loc_62E0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000062E0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000062E0                 add     rdx, 1
.text:00000000000062E4                 cmp     r8, rdx
.text:00000000000062E7                 jz      loc_6129
.text:00000000000062ED
.text:00000000000062ED loc_62ED:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000062ED                 movzx   ecx, byte ptr [rdx]
.text:00000000000062F0                 sub     ecx, 5Bh ; '['
.text:00000000000062F3                 cmp     cl, 21h ; '!'
.text:00000000000062F6                 ja      short loc_62E0
.text:00000000000062F8                 mov     esi, 1
.text:00000000000062FD                 shl     rsi, cl
.text:0000000000006300                 mov     rcx, rsi
.text:0000000000006303                 mov     rsi, 20000002Bh
.text:000000000000630D                 test    rcx, rsi
.text:0000000000006310                 jz      short loc_62E0
.text:0000000000006312                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006317                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000631C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000006321                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006329
.text:0000000000006329 loc_6329:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000006329                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000006329                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000632E                 jz      short loc_6340
.text:0000000000006330                 test    al, al
.text:0000000000006332                 mov     eax, 4
.text:0000000000006337                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000633C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000006340
.text:0000000000006340 loc_6340:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000006340                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000006340                 sub     rsp, 8
.text:0000000000006344                 mov     rcx, rbp
.text:0000000000006347                 mov     rsi, r13
.text:000000000000634A                 push    [rsp+0F0h+var_88]
.text:000000000000634E                 push    [rsp+0F8h+var_80]
.text:0000000000006352                 mov     rdi, r14
.text:0000000000006355                 push    0
.text:0000000000006357                 mov     r9d, [rsp+108h+var_70]
.text:000000000000635F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000006364                 mov     rdx, [rsp+108h+s]
.text:0000000000006369                 and     r9d, 0FFFFFFFDh
.text:000000000000636D                 call    quotearg_buffer_restyled
.text:0000000000006372                 add     rsp, 20h
.text:0000000000006376                 mov     r15, rax
.text:0000000000006379
.text:0000000000006379 loc_6379:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000006379                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000006379                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000006381                 xor     rbx, fs:28h
.text:000000000000638A                 mov     rax, r15
.text:000000000000638D                 jnz     loc_6993
.text:0000000000006393                 add     rsp, 0B8h
.text:000000000000639A                 pop     rbx
.text:000000000000639B                 pop     rbp
.text:000000000000639C                 pop     r12
.text:000000000000639E                 pop     r13
.text:00000000000063A0                 pop     r14
.text:00000000000063A2                 pop     r15
.text:00000000000063A4                 retn
.text:00000000000063A4 ; ---------------------------------------------------------------------------
.text:00000000000063A5                 align 8
.text:00000000000063A8
.text:00000000000063A8 loc_63A8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000063A8                 mov     rbp, r11
.text:00000000000063AB                 jmp     loc_6329
.text:00000000000063B0 ; ---------------------------------------------------------------------------
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000063B0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000063B0                 cmp     r13, r15
.text:00000000000063B3                 jbe     short loc_63BA
.text:00000000000063B5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000063BA
.text:00000000000063BA loc_63BA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000063BA                 lea     rax, [r15+1]
.text:00000000000063BE                 cmp     r13, rax
.text:00000000000063C1                 jbe     short loc_63C9
.text:00000000000063C3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000063C9
.text:00000000000063C9 loc_63C9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000063C9                 lea     rax, [r15+2]
.text:00000000000063CD                 cmp     r13, rax
.text:00000000000063D0                 jbe     loc_69C2
.text:00000000000063D6                 mov     rdx, r13
.text:00000000000063D9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000063DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000063E4                 jmp     loc_5FC2
.text:00000000000063E9 ; ---------------------------------------------------------------------------
.text:00000000000063E9
.text:00000000000063E9 loc_63E9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000063E9                 mov     eax, r12d
.text:00000000000063EC                 mov     ebx, 30h ; '0'
.text:00000000000063F1                 xor     r12d, r12d
.text:00000000000063F4                 jmp     loc_59F9
.text:00000000000063F9 ; ---------------------------------------------------------------------------
.text:00000000000063F9
.text:00000000000063F9 loc_63F9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000063F9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000063FF                 jmp     loc_5DC9
.text:0000000000006404 ; ---------------------------------------------------------------------------
.text:0000000000006404
.text:0000000000006404 loc_6404:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006404                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:0000000000006404                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000006406                 jnz     loc_5833        ; jumptable 00000000000121F1 case 1
.text:000000000000640C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006411
.text:0000000000006411 loc_6411:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000006411                 test    r13, r13
.text:0000000000006414                 jnz     loc_69AA
.text:000000000000641A                 lea     rax, asc_9C25   ; "'"
.text:0000000000006421                 mov     [rsp+0E8h+var_98], 0
.text:000000000000642A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000642F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006434                 xor     r12d, r12d
.text:0000000000006437                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000643C                 mov     [rsp+0E8h+n], 1
.text:0000000000006445                 mov     [rsp+0E8h+s2], rax
.text:000000000000644A                 mov     r15d, 1
.text:0000000000006450                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006458                 jmp     loc_5873
.text:0000000000006458 ; ---------------------------------------------------------------------------
.text:000000000000645D                 align 20h
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006460                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:0000000000006460                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000006462                 jnz     loc_685D
.text:0000000000006468                 test    r13, r13
.text:000000000000646B                 jz      loc_6696
.text:0000000000006471                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000006475                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000647A                 xor     r12d, r12d
.text:000000000000647D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006482                 mov     [rsp+0E8h+var_98], 0
.text:000000000000648B
.text:000000000000648B loc_648B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000648B                 lea     rax, unk_9C23
.text:0000000000006492                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006497                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000649C                 mov     [rsp+0E8h+n], 1
.text:00000000000064A5                 mov     r15d, 1
.text:00000000000064AB                 mov     [rsp+0E8h+s2], rax
.text:00000000000064B0                 jmp     loc_5873
.text:00000000000064B5 ; ---------------------------------------------------------------------------
.text:00000000000064B5
.text:00000000000064B5 loc_64B5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000064B5                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:00000000000064B5                 lea     rax, unk_9C23   ; jumptable 00000000000121F1 case 6
.text:00000000000064BC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000064C1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000064C6                 xor     r12d, r12d
.text:00000000000064C9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000064D2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000064D7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000064DC                 mov     [rsp+0E8h+n], 1
.text:00000000000064E5                 xor     r15d, r15d
.text:00000000000064E8                 mov     [rsp+0E8h+s2], rax
.text:00000000000064ED                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000064F5                 jmp     loc_5873
.text:00000000000064FA ; ---------------------------------------------------------------------------
.text:00000000000064FA
.text:00000000000064FA loc_64FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000064FA                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:00000000000064FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000064FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006504                 xor     r12d, r12d
.text:0000000000006507                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006510                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006515                 xor     r15d, r15d
.text:0000000000006518                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000651D                 mov     [rsp+0E8h+n], 0
.text:0000000000006526                 mov     [rsp+0E8h+s2], 0
.text:000000000000652F                 jmp     loc_5873
.text:0000000000006534 ; ---------------------------------------------------------------------------
.text:0000000000006534
.text:0000000000006534 loc_6534:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006534                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:0000000000006534                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000006539                 jz      short loc_6591
.text:000000000000653B                 lea     rsi, asc_9C27   ; "`"
.text:0000000000006542                 xor     edi, edi        ; domainname
.text:0000000000006544                 mov     edx, 5          ; category
.text:0000000000006549                 call    _dcgettext
.text:000000000000654E                 mov     rcx, rax
.text:0000000000006551                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006556                 lea     rax, asc_9C27   ; "`"
.text:000000000000655D                 cmp     rcx, rax
.text:0000000000006560                 jz      loc_68FE
.text:0000000000006566
.text:0000000000006566 loc_6566:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000006566                 lea     rsi, asc_9C25   ; "'"
.text:000000000000656D                 xor     edi, edi        ; domainname
.text:000000000000656F                 mov     edx, 5          ; category
.text:0000000000006574                 call    _dcgettext
.text:0000000000006579                 mov     rcx, rax
.text:000000000000657C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006581                 lea     rax, asc_9C25   ; "'"
.text:0000000000006588                 cmp     rcx, rax
.text:000000000000658B                 jz      loc_6914
.text:0000000000006591
.text:0000000000006591 loc_6591:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000006591                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000006591                 xor     r15d, r15d
.text:0000000000006594                 test    ebx, ebx
.text:0000000000006596                 jz      loc_675D
.text:000000000000659C
.text:000000000000659C loc_659C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000659C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000659C                 test    ebx, ebx
.text:000000000000659E                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000065A3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000065A8                 xor     r12d, r12d
.text:00000000000065AB                 mov     rdi, rbx        ; s
.text:00000000000065AE                 call    _strlen
.text:00000000000065B3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000065B8                 mov     [rsp+0E8h+n], rax
.text:00000000000065BD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000065C2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000065C7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000065D0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000065D5                 jmp     loc_5873
.text:00000000000065DA ; ---------------------------------------------------------------------------
.text:00000000000065DA
.text:00000000000065DA loc_65DA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000065DA                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:00000000000065DA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000065DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000065E4                 xor     r12d, r12d
.text:00000000000065E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000065F0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000065F5                 xor     r15d, r15d
.text:00000000000065F8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000065FD                 mov     [rsp+0E8h+n], 0
.text:0000000000006606                 mov     [rsp+0E8h+s2], 0
.text:000000000000660F                 jmp     loc_5873
.text:0000000000006614 ; ---------------------------------------------------------------------------
.text:0000000000006614
.text:0000000000006614 loc_6614:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006614                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:0000000000006614                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000006619                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000661E                 xor     r12d, r12d
.text:0000000000006621                 mov     [rsp+0E8h+var_98], 0
.text:000000000000662A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000662F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006634                 jmp     loc_5853
.text:0000000000006639 ; ---------------------------------------------------------------------------
.text:0000000000006639
.text:0000000000006639 loc_6639:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000006639                 cmp     r13, r15
.text:000000000000663C                 jbe     short loc_6643
.text:000000000000663E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000006643
.text:0000000000006643 loc_6643:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000006643                 lea     rax, [rcx+2]
.text:0000000000006647                 cmp     r13, rax
.text:000000000000664A                 jbe     short loc_6652
.text:000000000000664C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000006652
.text:0000000000006652 loc_6652:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000006652                 mov     eax, r12d
.text:0000000000006655                 lea     r15, [rcx+3]
.text:0000000000006659                 xor     r12d, r12d
.text:000000000000665C                 mov     ebx, 30h ; '0'
.text:0000000000006661                 jmp     loc_59C8
.text:0000000000006661 ; ---------------------------------------------------------------------------
.text:0000000000006666                 align 10h
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000006670                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006675                 mov     rbp, r11
.text:0000000000006678                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000667C                 jmp     loc_6329
.text:0000000000006681 ; ---------------------------------------------------------------------------
.text:0000000000006681
.text:0000000000006681 loc_6681:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000006681                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006686                 xor     r12d, r12d
.text:0000000000006689                 jmp     loc_6190
.text:000000000000668E ; ---------------------------------------------------------------------------
.text:000000000000668E
.text:000000000000668E loc_668E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000668E                 xor     r10d, r10d
.text:0000000000006691                 jmp     loc_624D
.text:0000000000006696 ; ---------------------------------------------------------------------------
.text:0000000000006696
.text:0000000000006696 loc_6696:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000006696                 mov     [rsp+0E8h+var_98], 0
.text:000000000000669F                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000066A4                 xor     r12d, r12d
.text:00000000000066A7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000066AC                 jmp     loc_648B
.text:00000000000066B1 ; ---------------------------------------------------------------------------
.text:00000000000066B1
.text:00000000000066B1 loc_66B1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000066B1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000066B6                 mov     rsi, r14
.text:00000000000066B9                 mov     rcx, r13
.text:00000000000066BC                 mov     rax, rbx
.text:00000000000066BF                 mov     rdi, rbx
.text:00000000000066C2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000066C8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000066CD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000066D5                 cmp     rsi, r11
.text:00000000000066D8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000066DE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000066E6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000066EB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000066F0                 jnb     short loc_6718
.text:00000000000066F2                 cmp     byte ptr [rcx], 0
.text:00000000000066F5                 jnz     short loc_6707
.text:00000000000066F7                 jmp     short loc_6718
.text:00000000000066F7 ; ---------------------------------------------------------------------------
.text:00000000000066F9                 align 20h
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000006700                 cmp     byte ptr [r9+rax], 0
.text:0000000000006705                 jz      short loc_6715
.text:0000000000006707
.text:0000000000006707 loc_6707:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000006707                 add     rax, 1
.text:000000000000670B                 lea     rdx, [rbp+rax+0]
.text:0000000000006710                 cmp     r11, rdx
.text:0000000000006713                 ja      short loc_6700
.text:0000000000006715
.text:0000000000006715 loc_6715:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000006715                 mov     rdi, rax
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000006718                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000006718                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000671D                 xor     r12d, r12d
.text:0000000000006720                 jmp     loc_6186
.text:0000000000006725 ; ---------------------------------------------------------------------------
.text:0000000000006725
.text:0000000000006725 loc_6725:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000006725                 mov     rdi, rbx
.text:0000000000006728                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000672E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006733                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006739                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006741                 xor     r12d, r12d
.text:0000000000006744                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006749                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000674E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006753                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006758                 jmp     loc_6186
.text:000000000000675D ; ---------------------------------------------------------------------------
.text:000000000000675D
.text:000000000000675D loc_675D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000675D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000006762                 movzx   eax, byte ptr [rdx]
.text:0000000000006765                 test    al, al
.text:0000000000006767                 jz      loc_659C
.text:000000000000676D                 nop     dword ptr [rax]
.text:0000000000006770
.text:0000000000006770 loc_6770:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000006770                 cmp     r13, r15
.text:0000000000006773                 jbe     short loc_6779
.text:0000000000006775                 mov     [r14+r15], al
.text:0000000000006779
.text:0000000000006779 loc_6779:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000006779                 add     r15, 1
.text:000000000000677D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000006782                 test    al, al
.text:0000000000006784                 jnz     short loc_6770
.text:0000000000006786                 jmp     loc_659C
.text:000000000000678B ; ---------------------------------------------------------------------------
.text:000000000000678B
.text:000000000000678B loc_678B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000678B                 mov     eax, edx
.text:000000000000678D                 jmp     loc_5CE7
.text:0000000000006792 ; ---------------------------------------------------------------------------
.text:0000000000006792
.text:0000000000006792 loc_6792:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000006792                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000006796                 cmp     bl, 3Eh ; '>'
.text:0000000000006799                 ja      loc_6010
.text:000000000000679F                 mov     rax, 7000A38200000000h
.text:00000000000067A9                 bt      rax, rbx
.text:00000000000067AD                 jnb     loc_6010
.text:00000000000067B3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000067B8                 jnz     loc_69A2
.text:00000000000067BE                 cmp     r13, r15
.text:00000000000067C1                 jbe     short loc_67C8
.text:00000000000067C3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000067C8
.text:00000000000067C8 loc_67C8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000067C8                 lea     rax, [r15+1]
.text:00000000000067CC                 cmp     r13, rax
.text:00000000000067CF                 jbe     short loc_67D7
.text:00000000000067D1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000067D7
.text:00000000000067D7 loc_67D7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000067D7                 lea     rax, [r15+2]
.text:00000000000067DB                 cmp     r13, rax
.text:00000000000067DE                 jbe     short loc_67E6
.text:00000000000067E0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000067E6
.text:00000000000067E6 loc_67E6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000067E6                 lea     rax, [r15+3]
.text:00000000000067EA                 cmp     r13, rax
.text:00000000000067ED                 jbe     short loc_67F5
.text:00000000000067EF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000067F5
.text:00000000000067F5 loc_67F5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000067F5                 add     r15, 4
.text:00000000000067F9                 xor     edx, edx
.text:00000000000067FB                 xor     r12d, r12d
.text:00000000000067FE                 xor     eax, eax
.text:0000000000006800                 mov     rbp, rcx
.text:0000000000006803                 jmp     loc_59C8
.text:0000000000006808 ; ---------------------------------------------------------------------------
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006808                                         ; DATA XREF: .rodata:jpt_5831↓o
.text:0000000000006808                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000680A                 jz      loc_6998
.text:0000000000006810                 lea     rax, asc_9C25   ; "'"
.text:0000000000006817                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000681C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006821                 xor     r12d, r12d
.text:0000000000006824                 mov     [rsp+0E8h+var_98], 0
.text:000000000000682D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006832                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006837                 mov     [rsp+0E8h+n], 1
.text:0000000000006840                 xor     r15d, r15d
.text:0000000000006843                 mov     [rsp+0E8h+s2], rax
.text:0000000000006848                 jmp     loc_5873
.text:0000000000006848 ; ---------------------------------------------------------------------------
.text:000000000000684D                 align 10h
.text:0000000000006850
.text:0000000000006850 loc_6850:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000006850                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000006850                 mov     rbp, r11
.text:0000000000006853                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006858                 jmp     loc_6329
.text:000000000000685D ; ---------------------------------------------------------------------------
.text:000000000000685D
.text:000000000000685D loc_685D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000685D                 lea     rax, unk_9C23
.text:0000000000006864                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006869                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000686E                 xor     r12d, r12d
.text:0000000000006871                 mov     [rsp+0E8h+var_98], 0
.text:000000000000687A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000687F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006884                 mov     [rsp+0E8h+n], 1
.text:000000000000688D                 xor     r15d, r15d
.text:0000000000006890                 mov     [rsp+0E8h+s2], rax
.text:0000000000006895                 jmp     loc_5873
.text:000000000000689A ; ---------------------------------------------------------------------------
.text:000000000000689A
.text:000000000000689A loc_689A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000689A                 mov     eax, edx
.text:000000000000689C
.text:000000000000689C loc_689C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000689C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000689C                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000068A1                 test    rbx, rbx
.text:00000000000068A4                 jz      short loc_68D2
.text:00000000000068A6                 test    al, al
.text:00000000000068A8                 jz      short loc_68D2
.text:00000000000068AA                 movzx   ecx, byte ptr [rbx]
.text:00000000000068AD                 mov     rax, rbx
.text:00000000000068B0                 test    cl, cl
.text:00000000000068B2                 jz      short loc_68D2
.text:00000000000068B4                 mov     rdx, r15
.text:00000000000068B7                 sub     rax, r15
.text:00000000000068BA
.text:00000000000068BA loc_68BA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000068BA                 cmp     r13, rdx
.text:00000000000068BD                 jbe     short loc_68C3
.text:00000000000068BF                 mov     [r14+rdx], cl
.text:00000000000068C3
.text:00000000000068C3 loc_68C3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000068C3                 add     rdx, 1
.text:00000000000068C7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000068CB                 test    cl, cl
.text:00000000000068CD                 jnz     short loc_68BA
.text:00000000000068CF                 mov     r15, rdx
.text:00000000000068D2
.text:00000000000068D2 loc_68D2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000068D2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000068D2                 cmp     r13, r15
.text:00000000000068D5                 jbe     loc_6379
.text:00000000000068DB                 mov     byte ptr [r14+r15], 0
.text:00000000000068E0                 jmp     loc_6379
.text:00000000000068E5 ; ---------------------------------------------------------------------------
.text:00000000000068E5
.text:00000000000068E5 loc_68E5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000068E5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000068EA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000068EF                 mov     rbp, r11
.text:00000000000068F2                 setz    al
.text:00000000000068F5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000068F9                 jmp     loc_6329
.text:00000000000068FE ; ---------------------------------------------------------------------------
.text:00000000000068FE
.text:00000000000068FE loc_68FE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000068FE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006902                 mov     rdi, rcx
.text:0000000000006905                 call    gettext_quote
.text:000000000000690A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000690F                 jmp     loc_6566
.text:0000000000006914 ; ---------------------------------------------------------------------------
.text:0000000000006914
.text:0000000000006914 loc_6914:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000006914                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006918                 mov     rdi, rcx
.text:000000000000691B                 call    gettext_quote
.text:0000000000006920                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006925                 jmp     loc_6591
.text:000000000000692A ; ---------------------------------------------------------------------------
.text:000000000000692A
.text:000000000000692A loc_692A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000692A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000692F                 mov     rbp, r11
.text:0000000000006932                 mov     eax, edx
.text:0000000000006934                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006938                 jmp     loc_6329
.text:000000000000693D ; ---------------------------------------------------------------------------
.text:000000000000693D
.text:000000000000693D loc_693D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000693D                 sub     rsp, 8
.text:0000000000006941                 mov     r8d, 5
.text:0000000000006947                 mov     rcx, r11
.text:000000000000694A                 push    [rsp+0F0h+var_88]
.text:000000000000694E                 push    [rsp+0F8h+var_80]
.text:0000000000006952                 mov     rdi, r14
.text:0000000000006955                 push    [rsp+100h+var_C8]
.text:0000000000006959                 mov     r9d, [rsp+108h+var_70]
.text:0000000000006961                 mov     rdx, [rsp+108h+s]
.text:0000000000006966                 mov     rsi, [rsp+108h+var_98]
.text:000000000000696B                 call    quotearg_buffer_restyled
.text:0000000000006970                 add     rsp, 20h
.text:0000000000006974                 mov     r15, rax
.text:0000000000006977                 jmp     loc_6379
.text:000000000000697C ; ---------------------------------------------------------------------------
.text:000000000000697C
.text:000000000000697C loc_697C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000697C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000006981                 jmp     loc_689C
.text:0000000000006986 ; ---------------------------------------------------------------------------
.text:0000000000006986
.text:0000000000006986 loc_6986:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000006986                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000698E                 jmp     loc_6329
.text:0000000000006993 ; ---------------------------------------------------------------------------
.text:0000000000006993
.text:0000000000006993 loc_6993:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000006993                 call    ___stack_chk_fail
.text:0000000000006998 ; ---------------------------------------------------------------------------
.text:0000000000006998
.text:0000000000006998 loc_6998:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000006998                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000699D                 jmp     loc_6411
.text:00000000000069A2 ; ---------------------------------------------------------------------------
.text:00000000000069A2
.text:00000000000069A2 loc_69A2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000069A2                 mov     rbp, r11
.text:00000000000069A5                 jmp     loc_6340
.text:00000000000069AA ; ---------------------------------------------------------------------------
.text:00000000000069AA
.text:00000000000069AA loc_69AA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000069AA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000069AF                 xor     eax, eax
.text:00000000000069B1                 xor     r12d, r12d
.text:00000000000069B4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000069BD                 jmp     loc_5F64
.text:00000000000069C2 ; ---------------------------------------------------------------------------
.text:00000000000069C2
.text:00000000000069C2 loc_69C2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000069C2                 mov     rdx, r13
.text:00000000000069C5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000069CA                 jmp     loc_5FC2
.text:00000000000069CF ; ---------------------------------------------------------------------------
.text:00000000000069CF
.text:00000000000069CF def_5831:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000069CF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000069CF ; } // starts at 57A0
.text:00000000000069CF quotearg_buffer_restyled endp
.text:00000000000069CF
.text:00000000000069CF ; ---------------------------------------------------------------------------
.text:00000000000069D4                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0
.text:00000000000069E0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000069E0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000069E0
.text:00000000000069E0 var_50          = qword ptr -50h
.text:00000000000069E0 var_48          = qword ptr -48h
.text:00000000000069E0 var_40          = dword ptr -40h
.text:00000000000069E0 var_3C          = dword ptr -3Ch
.text:00000000000069E0
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 push    r15
.text:00000000000069E2                 push    r14
.text:00000000000069E4                 movsxd  r15, edi
.text:00000000000069E7                 push    r13
.text:00000000000069E9                 push    r12
.text:00000000000069EB                 mov     r14, rdx
.text:00000000000069EE                 push    rbp
.text:00000000000069EF                 push    rbx
.text:00000000000069F0                 mov     rbp, rcx
.text:00000000000069F3                 sub     rsp, 28h
.text:00000000000069F7                 mov     [rsp+58h+var_50], rsi
.text:00000000000069FC                 call    ___errno_location
.text:0000000000006A01                 mov     r13, rax
.text:0000000000006A04                 mov     eax, [rax]
.text:0000000000006A06                 test    r15d, r15d
.text:0000000000006A09                 mov     rbx, cs:slotvec
.text:0000000000006A10                 mov     [rsp+58h+var_40], eax
.text:0000000000006A14                 js      loc_6B81
.text:0000000000006A1A                 cmp     cs:nslots, r15d
.text:0000000000006A21                 jg      short loc_6A85
.text:0000000000006A23                 cmp     r15d, 7FFFFFFFh
.text:0000000000006A2A                 jz      loc_6B86
.text:0000000000006A30                 lea     r12d, [r15+1]
.text:0000000000006A34                 lea     rax, slotvec0
.text:0000000000006A3B                 movsxd  rsi, r12d
.text:0000000000006A3E                 shl     rsi, 4
.text:0000000000006A42                 cmp     rbx, rax
.text:0000000000006A45                 jz      loc_6B60
.text:0000000000006A4B                 mov     rdi, rbx
.text:0000000000006A4E                 call    xrealloc
.text:0000000000006A53                 mov     rbx, rax
.text:0000000000006A56                 mov     cs:slotvec, rax
.text:0000000000006A5D
.text:0000000000006A5D loc_6A5D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000006A5D                 movsxd  rdi, cs:nslots
.text:0000000000006A64                 mov     edx, r12d
.text:0000000000006A67                 xor     esi, esi        ; c
.text:0000000000006A69                 sub     edx, edi
.text:0000000000006A6B                 shl     rdi, 4
.text:0000000000006A6F                 movsxd  rdx, edx
.text:0000000000006A72                 add     rdi, rbx        ; s
.text:0000000000006A75                 shl     rdx, 4          ; n
.text:0000000000006A79                 call    _memset
.text:0000000000006A7E                 mov     cs:nslots, r12d
.text:0000000000006A85
.text:0000000000006A85 loc_6A85:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000006A85                 mov     eax, [rbp+4]
.text:0000000000006A88                 shl     r15, 4
.text:0000000000006A8C                 sub     rsp, 8
.text:0000000000006A90                 add     rbx, r15
.text:0000000000006A93                 lea     r15, [rbp+8]
.text:0000000000006A97                 mov     r8d, [rbp+0]
.text:0000000000006A9B                 mov     r11, [rbx]
.text:0000000000006A9E                 mov     r12, [rbx+8]
.text:0000000000006AA2                 mov     rcx, r14
.text:0000000000006AA5                 or      eax, 1
.text:0000000000006AA8                 mov     [rsp+60h+var_3C], eax
.text:0000000000006AAC                 push    qword ptr [rbp+30h]
.text:0000000000006AAF                 mov     r9d, eax
.text:0000000000006AB2                 push    qword ptr [rbp+28h]
.text:0000000000006AB5                 push    r15
.text:0000000000006AB7                 mov     rsi, r11
.text:0000000000006ABA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000006ABF                 mov     rdi, r12
.text:0000000000006AC2                 mov     [rsp+78h+var_48], r11
.text:0000000000006AC7                 call    quotearg_buffer_restyled
.text:0000000000006ACC                 add     rsp, 20h
.text:0000000000006AD0                 mov     r11, [rsp+58h+var_48]
.text:0000000000006AD5                 cmp     r11, rax
.text:0000000000006AD8                 ja      short loc_6B41
.text:0000000000006ADA                 lea     rsi, [rax+1]
.text:0000000000006ADE                 lea     rax, slot0
.text:0000000000006AE5                 cmp     r12, rax
.text:0000000000006AE8                 mov     [rbx], rsi
.text:0000000000006AEB                 jz      short loc_6AFF
.text:0000000000006AED                 mov     rdi, r12        ; ptr
.text:0000000000006AF0                 mov     [rsp+58h+var_48], rsi
.text:0000000000006AF5                 call    _free
.text:0000000000006AFA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000006AFF
.text:0000000000006AFF loc_6AFF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000006AFF                 mov     rdi, rsi
.text:0000000000006B02                 mov     [rsp+58h+var_48], rsi
.text:0000000000006B07                 call    xmalloc
.text:0000000000006B0C                 sub     rsp, 8
.text:0000000000006B10                 mov     [rbx+8], rax
.text:0000000000006B14                 mov     r8d, [rbp+0]
.text:0000000000006B18                 push    qword ptr [rbp+30h]
.text:0000000000006B1B                 push    qword ptr [rbp+28h]
.text:0000000000006B1E                 mov     rcx, r14
.text:0000000000006B21                 push    r15
.text:0000000000006B23                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000006B28                 mov     rdi, rax
.text:0000000000006B2B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000006B30                 mov     rsi, [rsp+78h+var_48]
.text:0000000000006B35                 mov     r12, rax
.text:0000000000006B38                 call    quotearg_buffer_restyled
.text:0000000000006B3D                 add     rsp, 20h
.text:0000000000006B41
.text:0000000000006B41 loc_6B41:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000006B41                 mov     eax, [rsp+58h+var_40]
.text:0000000000006B45                 mov     [r13+0], eax
.text:0000000000006B49                 add     rsp, 28h
.text:0000000000006B4D                 mov     rax, r12
.text:0000000000006B50                 pop     rbx
.text:0000000000006B51                 pop     rbp
.text:0000000000006B52                 pop     r12
.text:0000000000006B54                 pop     r13
.text:0000000000006B56                 pop     r14
.text:0000000000006B58                 pop     r15
.text:0000000000006B5A                 retn
.text:0000000000006B5A ; ---------------------------------------------------------------------------
.text:0000000000006B5B                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000006B60                 xor     edi, edi
.text:0000000000006B62                 call    xrealloc
.text:0000000000006B67                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000006B6F                 mov     rbx, rax
.text:0000000000006B72                 mov     cs:slotvec, rax
.text:0000000000006B79                 movups  xmmword ptr [rax], xmm0
.text:0000000000006B7C                 jmp     loc_6A5D
.text:0000000000006B81 ; ---------------------------------------------------------------------------
.text:0000000000006B81
.text:0000000000006B81 loc_6B81:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000006B81                 call    _abort
.text:0000000000006B86 ; ---------------------------------------------------------------------------
.text:0000000000006B86
.text:0000000000006B86 loc_6B86:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000006B86                 call    xalloc_die
.text:0000000000006B86 ; } // starts at 69E0
.text:0000000000006B86 quotearg_n_options endp
.text:0000000000006B86
.text:0000000000006B86 ; ---------------------------------------------------------------------------
.text:0000000000006B8B                 align 10h
.text:0000000000006B90
.text:0000000000006B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B90
.text:0000000000006B90 ; Attributes: info_from_lumina
.text:0000000000006B90
.text:0000000000006B90 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000006B90                 public clone_quoting_options
.text:0000000000006B90 clone_quoting_options proc near
.text:0000000000006B90 ; __unwind {
.text:0000000000006B90                 push    r12
.text:0000000000006B92                 push    rbp
.text:0000000000006B93                 push    rbx
.text:0000000000006B94                 mov     rbx, rdi
.text:0000000000006B97                 call    ___errno_location
.text:0000000000006B9C                 mov     r12d, [rax]
.text:0000000000006B9F                 mov     rbp, rax
.text:0000000000006BA2                 lea     rax, default_quoting_options
.text:0000000000006BA9                 test    rbx, rbx
.text:0000000000006BAC                 mov     esi, 38h ; '8'  ; n
.text:0000000000006BB1                 cmovz   rbx, rax
.text:0000000000006BB5                 mov     rdi, rbx        ; src
.text:0000000000006BB8                 call    xmemdup
.text:0000000000006BBD                 mov     [rbp+0], r12d
.text:0000000000006BC1                 pop     rbx
.text:0000000000006BC2                 pop     rbp
.text:0000000000006BC3                 pop     r12
.text:0000000000006BC5                 retn
.text:0000000000006BC5 ; } // starts at 6B90
.text:0000000000006BC5 clone_quoting_options endp
.text:0000000000006BC5
.text:0000000000006BC5 ; ---------------------------------------------------------------------------
.text:0000000000006BC6                 align 10h
.text:0000000000006BD0
.text:0000000000006BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BD0
.text:0000000000006BD0
.text:0000000000006BD0                 public get_quoting_style
.text:0000000000006BD0 get_quoting_style proc near
.text:0000000000006BD0 ; __unwind {
.text:0000000000006BD0                 lea     rax, default_quoting_options
.text:0000000000006BD7                 test    rdi, rdi
.text:0000000000006BDA                 cmovz   rdi, rax
.text:0000000000006BDE                 mov     eax, [rdi]
.text:0000000000006BE0                 retn
.text:0000000000006BE0 ; } // starts at 6BD0
.text:0000000000006BE0 get_quoting_style endp
.text:0000000000006BE0
.text:0000000000006BE0 ; ---------------------------------------------------------------------------
.text:0000000000006BE1                 align 10h
.text:0000000000006BF0
.text:0000000000006BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BF0
.text:0000000000006BF0
.text:0000000000006BF0                 public set_quoting_style
.text:0000000000006BF0 set_quoting_style proc near
.text:0000000000006BF0 ; __unwind {
.text:0000000000006BF0                 lea     rax, default_quoting_options
.text:0000000000006BF7                 test    rdi, rdi
.text:0000000000006BFA                 cmovz   rdi, rax
.text:0000000000006BFE                 mov     [rdi], esi
.text:0000000000006C00                 retn
.text:0000000000006C00 ; } // starts at 6BF0
.text:0000000000006C00 set_quoting_style endp
.text:0000000000006C00
.text:0000000000006C00 ; ---------------------------------------------------------------------------
.text:0000000000006C01                 align 10h
.text:0000000000006C10
.text:0000000000006C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C10
.text:0000000000006C10 ; Attributes: info_from_lumina
.text:0000000000006C10
.text:0000000000006C10 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000006C10                 public set_char_quoting
.text:0000000000006C10 set_char_quoting proc near
.text:0000000000006C10 ; __unwind {
.text:0000000000006C10                 lea     rax, default_quoting_options
.text:0000000000006C17                 test    rdi, rdi
.text:0000000000006C1A                 mov     ecx, esi
.text:0000000000006C1C                 cmovz   rdi, rax
.text:0000000000006C20                 mov     eax, esi
.text:0000000000006C22                 and     ecx, 1Fh
.text:0000000000006C25                 shr     al, 5
.text:0000000000006C28                 movzx   eax, al
.text:0000000000006C2B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000006C30                 mov     esi, [rdi]
.text:0000000000006C32                 mov     eax, esi
.text:0000000000006C34                 shr     eax, cl
.text:0000000000006C36                 xor     edx, eax
.text:0000000000006C38                 and     eax, 1
.text:0000000000006C3B                 and     edx, 1
.text:0000000000006C3E                 shl     edx, cl
.text:0000000000006C40                 xor     edx, esi
.text:0000000000006C42                 mov     [rdi], edx
.text:0000000000006C44                 retn
.text:0000000000006C44 ; } // starts at 6C10
.text:0000000000006C44 set_char_quoting endp
.text:0000000000006C44
.text:0000000000006C44 ; ---------------------------------------------------------------------------
.text:0000000000006C45                 align 10h
.text:0000000000006C50
.text:0000000000006C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C50
.text:0000000000006C50
.text:0000000000006C50                 public set_quoting_flags
.text:0000000000006C50 set_quoting_flags proc near
.text:0000000000006C50 ; __unwind {
.text:0000000000006C50                 lea     rax, default_quoting_options
.text:0000000000006C57                 test    rdi, rdi
.text:0000000000006C5A                 cmovz   rdi, rax
.text:0000000000006C5E                 mov     eax, [rdi+4]
.text:0000000000006C61                 mov     [rdi+4], esi
.text:0000000000006C64                 retn
.text:0000000000006C64 ; } // starts at 6C50
.text:0000000000006C64 set_quoting_flags endp
.text:0000000000006C64
.text:0000000000006C64 ; ---------------------------------------------------------------------------
.text:0000000000006C65                 align 10h
.text:0000000000006C70
.text:0000000000006C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C70
.text:0000000000006C70 ; Attributes: info_from_lumina
.text:0000000000006C70
.text:0000000000006C70 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000006C70                 public set_custom_quoting
.text:0000000000006C70 set_custom_quoting proc near
.text:0000000000006C70 ; __unwind {
.text:0000000000006C70                 lea     rax, default_quoting_options
.text:0000000000006C77                 test    rdi, rdi
.text:0000000000006C7A                 cmovz   rdi, rax
.text:0000000000006C7E                 test    rsi, rsi
.text:0000000000006C81                 mov     dword ptr [rdi], 0Ah
.text:0000000000006C87                 jz      short loc_6C97
.text:0000000000006C89                 test    rdx, rdx
.text:0000000000006C8C                 jz      short loc_6C97
.text:0000000000006C8E                 mov     [rdi+28h], rsi
.text:0000000000006C92                 mov     [rdi+30h], rdx
.text:0000000000006C96                 retn
.text:0000000000006C97 ; ---------------------------------------------------------------------------
.text:0000000000006C97
.text:0000000000006C97 loc_6C97:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000006C97                                         ; set_custom_quoting+1C↑j
.text:0000000000006C97                 sub     rsp, 8
.text:0000000000006C9B                 call    _abort
.text:0000000000006C9B ; } // starts at 6C70
.text:0000000000006C9B set_custom_quoting endp
.text:0000000000006C9B
.text:0000000000006CA0
.text:0000000000006CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CA0
.text:0000000000006CA0 ; Attributes: info_from_lumina
.text:0000000000006CA0
.text:0000000000006CA0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000006CA0                 public quotearg_buffer
.text:0000000000006CA0 quotearg_buffer proc near
.text:0000000000006CA0
.text:0000000000006CA0 var_40          = qword ptr -40h
.text:0000000000006CA0
.text:0000000000006CA0 ; __unwind {
.text:0000000000006CA0                 push    r15
.text:0000000000006CA2                 push    r14
.text:0000000000006CA4                 lea     rax, default_quoting_options
.text:0000000000006CAB                 push    r13
.text:0000000000006CAD                 push    r12
.text:0000000000006CAF                 mov     r13, rdi
.text:0000000000006CB2                 push    rbp
.text:0000000000006CB3                 push    rbx
.text:0000000000006CB4                 mov     rbx, r8
.text:0000000000006CB7                 mov     r14, rsi
.text:0000000000006CBA                 mov     r15, rdx
.text:0000000000006CBD                 sub     rsp, 18h
.text:0000000000006CC1                 test    r8, r8
.text:0000000000006CC4                 cmovz   rbx, rax
.text:0000000000006CC8                 mov     [rsp+48h+var_40], rcx
.text:0000000000006CCD                 call    ___errno_location
.text:0000000000006CD2                 mov     r12d, [rax]
.text:0000000000006CD5                 mov     rbp, rax
.text:0000000000006CD8                 lea     rax, [rbx+8]
.text:0000000000006CDC                 sub     rsp, 8
.text:0000000000006CE0                 mov     r9d, [rbx+4]
.text:0000000000006CE4                 push    qword ptr [rbx+30h]
.text:0000000000006CE7                 mov     r8d, [rbx]
.text:0000000000006CEA                 push    qword ptr [rbx+28h]
.text:0000000000006CED                 mov     rdx, r15
.text:0000000000006CF0                 push    rax
.text:0000000000006CF1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000006CF6                 mov     rsi, r14
.text:0000000000006CF9                 mov     rdi, r13
.text:0000000000006CFC                 call    quotearg_buffer_restyled
.text:0000000000006D01                 mov     [rbp+0], r12d
.text:0000000000006D05                 add     rsp, 38h
.text:0000000000006D09                 pop     rbx
.text:0000000000006D0A                 pop     rbp
.text:0000000000006D0B                 pop     r12
.text:0000000000006D0D                 pop     r13
.text:0000000000006D0F                 pop     r14
.text:0000000000006D11                 pop     r15
.text:0000000000006D13                 retn
.text:0000000000006D13 ; } // starts at 6CA0
.text:0000000000006D13 quotearg_buffer endp
.text:0000000000006D13
.text:0000000000006D13 ; ---------------------------------------------------------------------------
.text:0000000000006D14                 align 20h
.text:0000000000006D20
.text:0000000000006D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D20
.text:0000000000006D20 ; Attributes: info_from_lumina
.text:0000000000006D20
.text:0000000000006D20 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000006D20                 public quotearg_alloc_mem
.text:0000000000006D20 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000006D20
.text:0000000000006D20 var_5C          = dword ptr -5Ch
.text:0000000000006D20 var_58          = qword ptr -58h
.text:0000000000006D20 var_50          = qword ptr -50h
.text:0000000000006D20 var_48          = qword ptr -48h
.text:0000000000006D20 var_40          = qword ptr -40h
.text:0000000000006D20
.text:0000000000006D20 ; __unwind {
.text:0000000000006D20                 push    r15
.text:0000000000006D22                 push    r14
.text:0000000000006D24                 lea     rax, default_quoting_options
.text:0000000000006D2B                 push    r13
.text:0000000000006D2D                 push    r12
.text:0000000000006D2F                 mov     r12, rdx
.text:0000000000006D32                 push    rbp
.text:0000000000006D33                 push    rbx
.text:0000000000006D34                 mov     rbx, rcx
.text:0000000000006D37                 mov     r14, rdi
.text:0000000000006D3A                 mov     r15, rsi
.text:0000000000006D3D                 sub     rsp, 38h
.text:0000000000006D41                 test    rcx, rcx
.text:0000000000006D44                 cmovz   rbx, rax
.text:0000000000006D48                 xor     ebp, ebp
.text:0000000000006D4A                 call    ___errno_location
.text:0000000000006D4F                 test    r12, r12
.text:0000000000006D52                 mov     r13, rax
.text:0000000000006D55                 mov     eax, [rax]
.text:0000000000006D57                 setz    bpl
.text:0000000000006D5B                 or      ebp, [rbx+4]
.text:0000000000006D5E                 lea     r10, [rbx+8]
.text:0000000000006D62                 sub     rsp, 8
.text:0000000000006D66                 mov     r8d, [rbx]
.text:0000000000006D69                 mov     rcx, r15
.text:0000000000006D6C                 mov     [rsp+70h+var_5C], eax
.text:0000000000006D70                 push    qword ptr [rbx+30h]
.text:0000000000006D73                 mov     rdx, r14
.text:0000000000006D76                 push    qword ptr [rbx+28h]
.text:0000000000006D79                 push    r10
.text:0000000000006D7B                 xor     esi, esi
.text:0000000000006D7D                 mov     r9d, ebp
.text:0000000000006D80                 xor     edi, edi
.text:0000000000006D82                 mov     [rsp+88h+var_48], r10
.text:0000000000006D87                 call    quotearg_buffer_restyled
.text:0000000000006D8C                 lea     rsi, [rax+1]
.text:0000000000006D90                 mov     [rsp+88h+var_40], rax
.text:0000000000006D95                 add     rsp, 20h
.text:0000000000006D99                 mov     rdi, rsi
.text:0000000000006D9C                 mov     [rsp+68h+var_50], rsi
.text:0000000000006DA1                 call    xmalloc
.text:0000000000006DA6                 mov     [rsp+68h+var_58], rax
.text:0000000000006DAB                 sub     rsp, 8
.text:0000000000006DAF                 push    qword ptr [rbx+30h]
.text:0000000000006DB2                 push    qword ptr [rbx+28h]
.text:0000000000006DB5                 mov     r10, [rsp+80h+var_48]
.text:0000000000006DBA                 mov     r9d, ebp
.text:0000000000006DBD                 mov     r8d, [rbx]
.text:0000000000006DC0                 mov     rcx, r15
.text:0000000000006DC3                 mov     rdx, r14
.text:0000000000006DC6                 mov     rdi, rax
.text:0000000000006DC9                 push    r10
.text:0000000000006DCB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000006DD0                 call    quotearg_buffer_restyled
.text:0000000000006DD5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000006DD9                 add     rsp, 20h
.text:0000000000006DDD                 test    r12, r12
.text:0000000000006DE0                 mov     [r13+0], eax
.text:0000000000006DE4                 jz      short loc_6DEF
.text:0000000000006DE6                 mov     r11, [rsp+68h+var_40]
.text:0000000000006DEB                 mov     [r12], r11
.text:0000000000006DEF
.text:0000000000006DEF loc_6DEF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000006DEF                 mov     rax, [rsp+68h+var_58]
.text:0000000000006DF4                 add     rsp, 38h
.text:0000000000006DF8                 pop     rbx
.text:0000000000006DF9                 pop     rbp
.text:0000000000006DFA                 pop     r12
.text:0000000000006DFC                 pop     r13
.text:0000000000006DFE                 pop     r14
.text:0000000000006E00                 pop     r15
.text:0000000000006E02                 retn
.text:0000000000006E02 ; } // starts at 6D20
.text:0000000000006E02 quotearg_alloc_mem endp
.text:0000000000006E02
.text:0000000000006E02 ; ---------------------------------------------------------------------------
.text:0000000000006E03                 align 10h
.text:0000000000006E10
.text:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E10
.text:0000000000006E10
.text:0000000000006E10                 public quotearg_alloc
.text:0000000000006E10 quotearg_alloc  proc near
.text:0000000000006E10 ; __unwind {
.text:0000000000006E10                 mov     rcx, rdx
.text:0000000000006E13                 xor     edx, edx
.text:0000000000006E15                 jmp     quotearg_alloc_mem
.text:0000000000006E15 ; } // starts at 6E10
.text:0000000000006E15 quotearg_alloc  endp
.text:0000000000006E15
.text:0000000000006E15 ; ---------------------------------------------------------------------------
.text:0000000000006E1A                 align 20h
.text:0000000000006E20
.text:0000000000006E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E20
.text:0000000000006E20 ; Attributes: info_from_lumina
.text:0000000000006E20
.text:0000000000006E20 ; void __cdecl quotearg_free()
.text:0000000000006E20                 public quotearg_free
.text:0000000000006E20 quotearg_free   proc near
.text:0000000000006E20 ; __unwind {
.text:0000000000006E20                 mov     eax, cs:nslots
.text:0000000000006E26                 push    r12
.text:0000000000006E28                 mov     r12, cs:slotvec
.text:0000000000006E2F                 push    rbp
.text:0000000000006E30                 push    rbx
.text:0000000000006E31                 cmp     eax, 1
.text:0000000000006E34                 jle     short loc_6E61
.text:0000000000006E36                 sub     eax, 2
.text:0000000000006E39                 lea     rbx, [r12+18h]
.text:0000000000006E3E                 shl     rax, 4
.text:0000000000006E42                 lea     rbp, [r12+rax+28h]
.text:0000000000006E47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006E50
.text:0000000000006E50 loc_6E50:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000006E50                 mov     rdi, [rbx]      ; ptr
.text:0000000000006E53                 add     rbx, 10h
.text:0000000000006E57                 call    _free
.text:0000000000006E5C                 cmp     rbx, rbp
.text:0000000000006E5F                 jnz     short loc_6E50
.text:0000000000006E61
.text:0000000000006E61 loc_6E61:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000006E61                 mov     rdi, [r12+8]    ; ptr
.text:0000000000006E66                 lea     rbx, slot0
.text:0000000000006E6D                 cmp     rdi, rbx
.text:0000000000006E70                 jz      short loc_6E89
.text:0000000000006E72                 call    _free
.text:0000000000006E77                 mov     cs:slotvec0, 100h
.text:0000000000006E82                 mov     cs:off_20C098, rbx
.text:0000000000006E89
.text:0000000000006E89 loc_6E89:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000006E89                 lea     rbx, slotvec0
.text:0000000000006E90                 cmp     r12, rbx
.text:0000000000006E93                 jz      short loc_6EA4
.text:0000000000006E95                 mov     rdi, r12        ; ptr
.text:0000000000006E98                 call    _free
.text:0000000000006E9D                 mov     cs:slotvec, rbx
.text:0000000000006EA4
.text:0000000000006EA4 loc_6EA4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000006EA4                 pop     rbx
.text:0000000000006EA5                 mov     cs:nslots, 1
.text:0000000000006EAF                 pop     rbp
.text:0000000000006EB0                 pop     r12
.text:0000000000006EB2                 retn
.text:0000000000006EB2 ; } // starts at 6E20
.text:0000000000006EB2 quotearg_free   endp
.text:0000000000006EB2
.text:0000000000006EB2 ; ---------------------------------------------------------------------------
.text:0000000000006EB3                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EC0
.text:0000000000006EC0
.text:0000000000006EC0                 public quotearg_n
.text:0000000000006EC0 quotearg_n      proc near
.text:0000000000006EC0 ; __unwind {
.text:0000000000006EC0                 lea     rcx, default_quoting_options
.text:0000000000006EC7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006ECE                 jmp     quotearg_n_options
.text:0000000000006ECE ; } // starts at 6EC0
.text:0000000000006ECE quotearg_n      endp
.text:0000000000006ECE
.text:0000000000006ECE ; ---------------------------------------------------------------------------
.text:0000000000006ED3                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EE0
.text:0000000000006EE0
.text:0000000000006EE0                 public quotearg_n_mem
.text:0000000000006EE0 quotearg_n_mem  proc near
.text:0000000000006EE0 ; __unwind {
.text:0000000000006EE0                 lea     rcx, default_quoting_options
.text:0000000000006EE7                 jmp     quotearg_n_options
.text:0000000000006EE7 ; } // starts at 6EE0
.text:0000000000006EE7 quotearg_n_mem  endp
.text:0000000000006EE7
.text:0000000000006EE7 ; ---------------------------------------------------------------------------
.text:0000000000006EEC                 align 10h
.text:0000000000006EF0
.text:0000000000006EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EF0
.text:0000000000006EF0
.text:0000000000006EF0                 public quotearg
.text:0000000000006EF0 quotearg        proc near
.text:0000000000006EF0 ; __unwind {
.text:0000000000006EF0                 lea     rcx, default_quoting_options
.text:0000000000006EF7                 mov     rsi, rdi
.text:0000000000006EFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F01                 xor     edi, edi
.text:0000000000006F03                 jmp     quotearg_n_options
.text:0000000000006F03 ; } // starts at 6EF0
.text:0000000000006F03 quotearg        endp
.text:0000000000006F03
.text:0000000000006F03 ; ---------------------------------------------------------------------------
.text:0000000000006F08                 align 10h
.text:0000000000006F10
.text:0000000000006F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F10
.text:0000000000006F10
.text:0000000000006F10                 public quotearg_mem
.text:0000000000006F10 quotearg_mem    proc near
.text:0000000000006F10 ; __unwind {
.text:0000000000006F10                 lea     rcx, default_quoting_options
.text:0000000000006F17                 mov     rdx, rsi
.text:0000000000006F1A                 mov     rsi, rdi
.text:0000000000006F1D                 xor     edi, edi
.text:0000000000006F1F                 jmp     quotearg_n_options
.text:0000000000006F1F ; } // starts at 6F10
.text:0000000000006F1F quotearg_mem    endp
.text:0000000000006F1F
.text:0000000000006F1F ; ---------------------------------------------------------------------------
.text:0000000000006F24                 align 10h
.text:0000000000006F30
.text:0000000000006F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F30
.text:0000000000006F30 ; Attributes: info_from_lumina
.text:0000000000006F30
.text:0000000000006F30 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000006F30                 public quotearg_n_style
.text:0000000000006F30 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000006F30
.text:0000000000006F30 var_48          = dword ptr -48h
.text:0000000000006F30 var_44          = qword ptr -44h
.text:0000000000006F30 var_3C          = qword ptr -3Ch
.text:0000000000006F30 var_34          = qword ptr -34h
.text:0000000000006F30 var_2C          = qword ptr -2Ch
.text:0000000000006F30 var_24          = qword ptr -24h
.text:0000000000006F30 var_1C          = qword ptr -1Ch
.text:0000000000006F30 var_14          = dword ptr -14h
.text:0000000000006F30 var_10          = qword ptr -10h
.text:0000000000006F30
.text:0000000000006F30 ; __unwind {
.text:0000000000006F30                 sub     rsp, 48h
.text:0000000000006F34                 mov     rax, rdx
.text:0000000000006F37                 mov     rdx, fs:28h
.text:0000000000006F40                 mov     [rsp+48h+var_10], rdx
.text:0000000000006F45                 xor     edx, edx
.text:0000000000006F47                 cmp     esi, 0Ah
.text:0000000000006F4A                 jz      short loc_6FB4
.text:0000000000006F4C                 mov     [rsp+48h+var_48], esi
.text:0000000000006F4F                 mov     rcx, rsp
.text:0000000000006F52                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F59                 mov     rsi, rax
.text:0000000000006F5C                 mov     [rsp+48h+var_44], 0
.text:0000000000006F65                 mov     [rsp+48h+var_3C], 0
.text:0000000000006F6E                 mov     [rsp+48h+var_34], 0
.text:0000000000006F77                 mov     [rsp+48h+var_2C], 0
.text:0000000000006F80                 mov     [rsp+48h+var_24], 0
.text:0000000000006F89                 mov     [rsp+48h+var_1C], 0
.text:0000000000006F92                 mov     [rsp+48h+var_14], 0
.text:0000000000006F9A                 call    quotearg_n_options
.text:0000000000006F9F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006FA4                 xor     rcx, fs:28h
.text:0000000000006FAD                 jnz     short loc_6FB9
.text:0000000000006FAF                 add     rsp, 48h
.text:0000000000006FB3                 retn
.text:0000000000006FB4 ; ---------------------------------------------------------------------------
.text:0000000000006FB4
.text:0000000000006FB4 loc_6FB4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000006FB4                 call    _abort
.text:0000000000006FB9 ; ---------------------------------------------------------------------------
.text:0000000000006FB9
.text:0000000000006FB9 loc_6FB9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000006FB9                 call    ___stack_chk_fail
.text:0000000000006FB9 ; } // starts at 6F30
.text:0000000000006FB9 quotearg_n_style endp
.text:0000000000006FB9
.text:0000000000006FB9 ; ---------------------------------------------------------------------------
.text:0000000000006FBE                 align 20h
.text:0000000000006FC0
.text:0000000000006FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FC0
.text:0000000000006FC0 ; Attributes: info_from_lumina
.text:0000000000006FC0
.text:0000000000006FC0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000006FC0                 public quotearg_n_style_mem
.text:0000000000006FC0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000006FC0
.text:0000000000006FC0 var_48          = dword ptr -48h
.text:0000000000006FC0 var_44          = qword ptr -44h
.text:0000000000006FC0 var_3C          = qword ptr -3Ch
.text:0000000000006FC0 var_34          = qword ptr -34h
.text:0000000000006FC0 var_2C          = qword ptr -2Ch
.text:0000000000006FC0 var_24          = qword ptr -24h
.text:0000000000006FC0 var_1C          = qword ptr -1Ch
.text:0000000000006FC0 var_14          = dword ptr -14h
.text:0000000000006FC0 var_10          = qword ptr -10h
.text:0000000000006FC0
.text:0000000000006FC0 ; __unwind {
.text:0000000000006FC0                 sub     rsp, 48h
.text:0000000000006FC4                 mov     rax, rdx
.text:0000000000006FC7                 mov     rdx, rcx
.text:0000000000006FCA                 mov     rcx, fs:28h
.text:0000000000006FD3                 mov     [rsp+48h+var_10], rcx
.text:0000000000006FD8                 xor     ecx, ecx
.text:0000000000006FDA                 cmp     esi, 0Ah
.text:0000000000006FDD                 jz      short loc_7040
.text:0000000000006FDF                 mov     [rsp+48h+var_48], esi
.text:0000000000006FE2                 mov     rcx, rsp
.text:0000000000006FE5                 mov     rsi, rax
.text:0000000000006FE8                 mov     [rsp+48h+var_44], 0
.text:0000000000006FF1                 mov     [rsp+48h+var_3C], 0
.text:0000000000006FFA                 mov     [rsp+48h+var_34], 0
.text:0000000000007003                 mov     [rsp+48h+var_2C], 0
.text:000000000000700C                 mov     [rsp+48h+var_24], 0
.text:0000000000007015                 mov     [rsp+48h+var_1C], 0
.text:000000000000701E                 mov     [rsp+48h+var_14], 0
.text:0000000000007026                 call    quotearg_n_options
.text:000000000000702B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000007030                 xor     rdx, fs:28h
.text:0000000000007039                 jnz     short loc_7045
.text:000000000000703B                 add     rsp, 48h
.text:000000000000703F                 retn
.text:0000000000007040 ; ---------------------------------------------------------------------------
.text:0000000000007040
.text:0000000000007040 loc_7040:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000007040                 call    _abort
.text:0000000000007045 ; ---------------------------------------------------------------------------
.text:0000000000007045
.text:0000000000007045 loc_7045:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000007045                 call    ___stack_chk_fail
.text:0000000000007045 ; } // starts at 6FC0
.text:0000000000007045 quotearg_n_style_mem endp
.text:0000000000007045
.text:0000000000007045 ; ---------------------------------------------------------------------------
.text:000000000000704A                 align 10h
.text:0000000000007050
.text:0000000000007050 ; =============== S U B R O U T I N E =======================================
.text:0000000000007050
.text:0000000000007050
.text:0000000000007050                 public quotearg_style
.text:0000000000007050 quotearg_style  proc near               ; CODE XREF: main+1A4B↑p
.text:0000000000007050                                         ; create+328↑p ...
.text:0000000000007050 ; __unwind {
.text:0000000000007050                 mov     rdx, rsi
.text:0000000000007053                 mov     esi, edi
.text:0000000000007055                 xor     edi, edi
.text:0000000000007057                 jmp     quotearg_n_style
.text:0000000000007057 ; } // starts at 7050
.text:0000000000007057 quotearg_style  endp
.text:0000000000007057
.text:0000000000007057 ; ---------------------------------------------------------------------------
.text:000000000000705C                 align 20h
.text:0000000000007060
.text:0000000000007060 ; =============== S U B R O U T I N E =======================================
.text:0000000000007060
.text:0000000000007060
.text:0000000000007060                 public quotearg_style_mem
.text:0000000000007060 quotearg_style_mem proc near
.text:0000000000007060 ; __unwind {
.text:0000000000007060                 mov     rcx, rdx
.text:0000000000007063                 mov     rdx, rsi
.text:0000000000007066                 mov     esi, edi
.text:0000000000007068                 xor     edi, edi
.text:000000000000706A                 jmp     quotearg_n_style_mem
.text:000000000000706A ; } // starts at 7060
.text:000000000000706A quotearg_style_mem endp
.text:000000000000706A
.text:000000000000706A ; ---------------------------------------------------------------------------
.text:000000000000706F                 align 10h
.text:0000000000007070
.text:0000000000007070 ; =============== S U B R O U T I N E =======================================
.text:0000000000007070
.text:0000000000007070 ; Attributes: info_from_lumina
.text:0000000000007070
.text:0000000000007070 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000007070                 public quotearg_char_mem
.text:0000000000007070 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000007070                                         ; quotearg_colon+C↓j ...
.text:0000000000007070
.text:0000000000007070 var_48          = xmmword ptr -48h
.text:0000000000007070 var_38          = xmmword ptr -38h
.text:0000000000007070 var_28          = xmmword ptr -28h
.text:0000000000007070 var_18          = qword ptr -18h
.text:0000000000007070 var_10          = qword ptr -10h
.text:0000000000007070
.text:0000000000007070 ; __unwind {
.text:0000000000007070                 sub     rsp, 48h
.text:0000000000007074                 mov     ecx, edx
.text:0000000000007076                 mov     rax, fs:28h
.text:000000000000707F                 mov     [rsp+48h+var_10], rax
.text:0000000000007084                 xor     eax, eax
.text:0000000000007086                 mov     rax, cs:qword_20C650
.text:000000000000708D                 mov     r8, rsp
.text:0000000000007090                 and     ecx, 1Fh
.text:0000000000007093                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000709B                 mov     [rsp+48h+var_18], rax
.text:00000000000070A0                 mov     eax, edx
.text:00000000000070A2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000070A6                 shr     al, 5
.text:00000000000070A9                 movzx   eax, al
.text:00000000000070AC                 lea     r9, [r8+rax*4+8]
.text:00000000000070B1                 movdqa  xmm0, cs:xmmword_20C630
.text:00000000000070B9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000070BE                 movdqa  xmm0, cs:xmmword_20C640
.text:00000000000070C6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000070CB                 mov     edx, [r9]
.text:00000000000070CE                 mov     eax, edx
.text:00000000000070D0                 shr     eax, cl
.text:00000000000070D2                 not     eax
.text:00000000000070D4                 and     eax, 1
.text:00000000000070D7                 shl     eax, cl
.text:00000000000070D9                 mov     rcx, r8
.text:00000000000070DC                 xor     eax, edx
.text:00000000000070DE                 mov     rdx, rsi
.text:00000000000070E1                 mov     rsi, rdi
.text:00000000000070E4                 mov     [r9], eax
.text:00000000000070E7                 xor     edi, edi
.text:00000000000070E9                 call    quotearg_n_options
.text:00000000000070EE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000070F3                 xor     rsi, fs:28h
.text:00000000000070FC                 jnz     short loc_7103
.text:00000000000070FE                 add     rsp, 48h
.text:0000000000007102                 retn
.text:0000000000007103 ; ---------------------------------------------------------------------------
.text:0000000000007103
.text:0000000000007103 loc_7103:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000007103                 call    ___stack_chk_fail
.text:0000000000007103 ; } // starts at 7070
.text:0000000000007103 quotearg_char_mem endp
.text:0000000000007103
.text:0000000000007103 ; ---------------------------------------------------------------------------
.text:0000000000007108                 align 10h
.text:0000000000007110
.text:0000000000007110 ; =============== S U B R O U T I N E =======================================
.text:0000000000007110
.text:0000000000007110
.text:0000000000007110                 public quotearg_char
.text:0000000000007110 quotearg_char   proc near
.text:0000000000007110 ; __unwind {
.text:0000000000007110                 movsx   edx, sil
.text:0000000000007114                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000711B                 jmp     quotearg_char_mem
.text:000000000000711B ; } // starts at 7110
.text:000000000000711B quotearg_char   endp
.text:000000000000711B
.text:0000000000007120
.text:0000000000007120 ; =============== S U B R O U T I N E =======================================
.text:0000000000007120
.text:0000000000007120
.text:0000000000007120                 public quotearg_colon
.text:0000000000007120 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000007120 ; __unwind {
.text:0000000000007120                 mov     edx, 3Ah ; ':'
.text:0000000000007125                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000712C                 jmp     quotearg_char_mem
.text:000000000000712C ; } // starts at 7120
.text:000000000000712C quotearg_colon  endp
.text:000000000000712C
.text:000000000000712C ; ---------------------------------------------------------------------------
.text:0000000000007131                 align 20h
.text:0000000000007140
.text:0000000000007140 ; =============== S U B R O U T I N E =======================================
.text:0000000000007140
.text:0000000000007140
.text:0000000000007140                 public quotearg_colon_mem
.text:0000000000007140 quotearg_colon_mem proc near
.text:0000000000007140 ; __unwind {
.text:0000000000007140                 mov     edx, 3Ah ; ':'
.text:0000000000007145                 jmp     quotearg_char_mem
.text:0000000000007145 ; } // starts at 7140
.text:0000000000007145 quotearg_colon_mem endp
.text:0000000000007145
.text:0000000000007145 ; ---------------------------------------------------------------------------
.text:000000000000714A                 align 10h
.text:0000000000007150
.text:0000000000007150 ; =============== S U B R O U T I N E =======================================
.text:0000000000007150
.text:0000000000007150 ; Attributes: info_from_lumina
.text:0000000000007150
.text:0000000000007150 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000007150                 public quotearg_n_style_colon
.text:0000000000007150 quotearg_n_style_colon proc near        ; CODE XREF: main+FA8↑p
.text:0000000000007150                                         ; main+13AD↑p ...
.text:0000000000007150
.text:0000000000007150 var_48          = dword ptr -48h
.text:0000000000007150 var_44          = qword ptr -44h
.text:0000000000007150 var_3C          = qword ptr -3Ch
.text:0000000000007150 var_34          = qword ptr -34h
.text:0000000000007150 var_2C          = qword ptr -2Ch
.text:0000000000007150 var_24          = qword ptr -24h
.text:0000000000007150 var_1C          = qword ptr -1Ch
.text:0000000000007150 var_14          = dword ptr -14h
.text:0000000000007150 var_10          = qword ptr -10h
.text:0000000000007150
.text:0000000000007150 ; __unwind {
.text:0000000000007150                 sub     rsp, 48h
.text:0000000000007154                 mov     rax, rdx
.text:0000000000007157                 mov     rdx, fs:28h
.text:0000000000007160                 mov     [rsp+48h+var_10], rdx
.text:0000000000007165                 xor     edx, edx
.text:0000000000007167                 cmp     esi, 0Ah
.text:000000000000716A                 jz      short loc_71D4
.text:000000000000716C                 mov     [rsp+48h+var_48], esi
.text:000000000000716F                 mov     rcx, rsp
.text:0000000000007172                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007179                 mov     rsi, rax
.text:000000000000717C                 mov     [rsp+48h+var_44], 0
.text:0000000000007185                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000718E                 mov     [rsp+48h+var_34], 0
.text:0000000000007197                 mov     [rsp+48h+var_2C], 0
.text:00000000000071A0                 mov     [rsp+48h+var_24], 0
.text:00000000000071A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000071B2                 mov     [rsp+48h+var_14], 0
.text:00000000000071BA                 call    quotearg_n_options
.text:00000000000071BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000071C4                 xor     rcx, fs:28h
.text:00000000000071CD                 jnz     short loc_71D9
.text:00000000000071CF                 add     rsp, 48h
.text:00000000000071D3                 retn
.text:00000000000071D4 ; ---------------------------------------------------------------------------
.text:00000000000071D4
.text:00000000000071D4 loc_71D4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000071D4                 call    _abort
.text:00000000000071D9 ; ---------------------------------------------------------------------------
.text:00000000000071D9
.text:00000000000071D9 loc_71D9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000071D9                 call    ___stack_chk_fail
.text:00000000000071D9 ; } // starts at 7150
.text:00000000000071D9 quotearg_n_style_colon endp
.text:00000000000071D9
.text:00000000000071D9 ; ---------------------------------------------------------------------------
.text:00000000000071DE                 align 20h
.text:00000000000071E0
.text:00000000000071E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071E0
.text:00000000000071E0 ; Attributes: info_from_lumina
.text:00000000000071E0
.text:00000000000071E0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000071E0                 public quotearg_n_custom_mem
.text:00000000000071E0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000071E0                                         ; quotearg_custom+12↓j ...
.text:00000000000071E0
.text:00000000000071E0 var_48          = xmmword ptr -48h
.text:00000000000071E0 var_38          = xmmword ptr -38h
.text:00000000000071E0 var_28          = xmmword ptr -28h
.text:00000000000071E0 var_18          = qword ptr -18h
.text:00000000000071E0 var_10          = qword ptr -10h
.text:00000000000071E0
.text:00000000000071E0 ; __unwind {
.text:00000000000071E0                 sub     rsp, 48h
.text:00000000000071E4                 mov     r9, rcx
.text:00000000000071E7                 mov     rcx, cs:qword_20C650
.text:00000000000071EE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000071F6                 mov     rax, fs:28h
.text:00000000000071FF                 mov     [rsp+48h+var_10], rax
.text:0000000000007204                 xor     eax, eax
.text:0000000000007206                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000720A                 test    rsi, rsi
.text:000000000000720D                 mov     [rsp+48h+var_18], rcx
.text:0000000000007212                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000007219                 movdqa  xmm0, cs:xmmword_20C630
.text:0000000000007221                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000007226                 movdqa  xmm0, cs:xmmword_20C640
.text:000000000000722E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000007233                 jz      short loc_7267
.text:0000000000007235                 test    rdx, rdx
.text:0000000000007238                 jz      short loc_7267
.text:000000000000723A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000723F                 mov     [rsp+48h+var_18], rdx
.text:0000000000007244                 mov     rcx, rsp
.text:0000000000007247                 mov     rdx, r8
.text:000000000000724A                 mov     rsi, r9
.text:000000000000724D                 call    quotearg_n_options
.text:0000000000007252                 mov     rdi, [rsp+48h+var_10]
.text:0000000000007257                 xor     rdi, fs:28h
.text:0000000000007260                 jnz     short loc_726C
.text:0000000000007262                 add     rsp, 48h
.text:0000000000007266                 retn
.text:0000000000007267 ; ---------------------------------------------------------------------------
.text:0000000000007267
.text:0000000000007267 loc_7267:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000007267                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000007267                 call    _abort
.text:000000000000726C ; ---------------------------------------------------------------------------
.text:000000000000726C
.text:000000000000726C loc_726C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000726C                 call    ___stack_chk_fail
.text:000000000000726C ; } // starts at 71E0
.text:000000000000726C quotearg_n_custom_mem endp
.text:000000000000726C
.text:000000000000726C ; ---------------------------------------------------------------------------
.text:0000000000007271                 align 20h
.text:0000000000007280
.text:0000000000007280 ; =============== S U B R O U T I N E =======================================
.text:0000000000007280
.text:0000000000007280
.text:0000000000007280                 public quotearg_n_custom
.text:0000000000007280 quotearg_n_custom proc near
.text:0000000000007280 ; __unwind {
.text:0000000000007280                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007287                 jmp     quotearg_n_custom_mem
.text:0000000000007287 ; } // starts at 7280
.text:0000000000007287 quotearg_n_custom endp
.text:0000000000007287
.text:0000000000007287 ; ---------------------------------------------------------------------------
.text:000000000000728C                 align 10h
.text:0000000000007290
.text:0000000000007290 ; =============== S U B R O U T I N E =======================================
.text:0000000000007290
.text:0000000000007290
.text:0000000000007290                 public quotearg_custom
.text:0000000000007290 quotearg_custom proc near
.text:0000000000007290 ; __unwind {
.text:0000000000007290                 mov     rcx, rdx
.text:0000000000007293                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000729A                 mov     rdx, rsi
.text:000000000000729D                 mov     rsi, rdi
.text:00000000000072A0                 xor     edi, edi
.text:00000000000072A2                 jmp     quotearg_n_custom_mem
.text:00000000000072A2 ; } // starts at 7290
.text:00000000000072A2 quotearg_custom endp
.text:00000000000072A2
.text:00000000000072A2 ; ---------------------------------------------------------------------------
.text:00000000000072A7                 align 10h
.text:00000000000072B0
.text:00000000000072B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072B0
.text:00000000000072B0
.text:00000000000072B0                 public quotearg_custom_mem
.text:00000000000072B0 quotearg_custom_mem proc near
.text:00000000000072B0 ; __unwind {
.text:00000000000072B0                 mov     r8, rcx
.text:00000000000072B3                 mov     rcx, rdx
.text:00000000000072B6                 mov     rdx, rsi
.text:00000000000072B9                 mov     rsi, rdi
.text:00000000000072BC                 xor     edi, edi
.text:00000000000072BE                 jmp     quotearg_n_custom_mem
.text:00000000000072BE ; } // starts at 72B0
.text:00000000000072BE quotearg_custom_mem endp
.text:00000000000072BE
.text:00000000000072BE ; ---------------------------------------------------------------------------
.text:00000000000072C3                 align 10h
.text:00000000000072D0
.text:00000000000072D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072D0
.text:00000000000072D0
.text:00000000000072D0                 public quote_n_mem
.text:00000000000072D0 quote_n_mem     proc near
.text:00000000000072D0 ; __unwind {
.text:00000000000072D0                 lea     rcx, quote_quoting_options
.text:00000000000072D7                 jmp     quotearg_n_options
.text:00000000000072D7 ; } // starts at 72D0
.text:00000000000072D7 quote_n_mem     endp
.text:00000000000072D7
.text:00000000000072D7 ; ---------------------------------------------------------------------------
.text:00000000000072DC                 align 20h
.text:00000000000072E0
.text:00000000000072E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072E0
.text:00000000000072E0
.text:00000000000072E0                 public quote_mem
.text:00000000000072E0 quote_mem       proc near
.text:00000000000072E0 ; __unwind {
.text:00000000000072E0                 lea     rcx, quote_quoting_options
.text:00000000000072E7                 mov     rdx, rsi
.text:00000000000072EA                 mov     rsi, rdi
.text:00000000000072ED                 xor     edi, edi
.text:00000000000072EF                 jmp     quotearg_n_options
.text:00000000000072EF ; } // starts at 72E0
.text:00000000000072EF quote_mem       endp
.text:00000000000072EF
.text:00000000000072EF ; ---------------------------------------------------------------------------
.text:00000000000072F4                 align 20h
.text:0000000000007300
.text:0000000000007300 ; =============== S U B R O U T I N E =======================================
.text:0000000000007300
.text:0000000000007300
.text:0000000000007300                 public quote_n
.text:0000000000007300 quote_n         proc near
.text:0000000000007300 ; __unwind {
.text:0000000000007300                 lea     rcx, quote_quoting_options
.text:0000000000007307                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000730E                 jmp     quotearg_n_options
.text:000000000000730E ; } // starts at 7300
.text:000000000000730E quote_n         endp
.text:000000000000730E
.text:000000000000730E ; ---------------------------------------------------------------------------
.text:0000000000007313                 align 20h
.text:0000000000007320
.text:0000000000007320 ; =============== S U B R O U T I N E =======================================
.text:0000000000007320
.text:0000000000007320
.text:0000000000007320                 public quote
.text:0000000000007320 quote           proc near               ; CODE XREF: main+1A88↑p
.text:0000000000007320                                         ; main+1AC1↑p ...
.text:0000000000007320 ; __unwind {
.text:0000000000007320                 lea     rcx, quote_quoting_options
.text:0000000000007327                 mov     rsi, rdi
.text:000000000000732A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007331                 xor     edi, edi
.text:0000000000007333                 jmp     quotearg_n_options
.text:0000000000007333 ; } // starts at 7320
.text:0000000000007333 quote           endp
.text:0000000000007333
.text:0000000000007333 ; ---------------------------------------------------------------------------
.text:0000000000007338                 align 20h
.text:0000000000007340
.text:0000000000007340 ; =============== S U B R O U T I N E =======================================
.text:0000000000007340
.text:0000000000007340
.text:0000000000007340 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000007340                 public safe_read
.text:0000000000007340 safe_read       proc near               ; CODE XREF: main+A5F↑p
.text:0000000000007340                                         ; main+AB9↑p ...
.text:0000000000007340 ; __unwind {
.text:0000000000007340                 push    r13
.text:0000000000007342                 push    r12
.text:0000000000007344                 mov     r13d, edi
.text:0000000000007347                 push    rbp
.text:0000000000007348                 push    rbx
.text:0000000000007349                 mov     r12, rsi
.text:000000000000734C                 mov     rbx, rdx
.text:000000000000734F                 sub     rsp, 8
.text:0000000000007353                 nop     dword ptr [rax+rax+00h]
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: safe_read+38↓j
.text:0000000000007358                                         ; safe_read+4D↓j
.text:0000000000007358                 mov     rdx, rbx        ; nbytes
.text:000000000000735B                 mov     rsi, r12        ; buf
.text:000000000000735E                 mov     edi, r13d       ; fd
.text:0000000000007361                 call    _read
.text:0000000000007366                 test    rax, rax
.text:0000000000007369                 mov     rbp, rax
.text:000000000000736C                 jns     short loc_7390
.text:000000000000736E                 call    ___errno_location
.text:0000000000007373                 mov     eax, [rax]
.text:0000000000007375                 cmp     eax, 4
.text:0000000000007378                 jz      short loc_7358
.text:000000000000737A                 cmp     rbx, 7FF00000h
.text:0000000000007381                 jbe     short loc_7390
.text:0000000000007383                 cmp     eax, 16h
.text:0000000000007386                 jnz     short loc_7390
.text:0000000000007388                 mov     ebx, 7FF00000h
.text:000000000000738D                 jmp     short loc_7358
.text:000000000000738D ; ---------------------------------------------------------------------------
.text:000000000000738F                 align 10h
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000007390                                         ; safe_read+41↑j ...
.text:0000000000007390                 add     rsp, 8
.text:0000000000007394                 mov     rax, rbp
.text:0000000000007397                 pop     rbx
.text:0000000000007398                 pop     rbp
.text:0000000000007399                 pop     r12
.text:000000000000739B                 pop     r13
.text:000000000000739D                 retn
.text:000000000000739D ; } // starts at 7340
.text:000000000000739D safe_read       endp
.text:000000000000739D
.text:000000000000739D ; ---------------------------------------------------------------------------
.text:000000000000739E                 align 20h
.text:00000000000073A0
.text:00000000000073A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073A0
.text:00000000000073A0
.text:00000000000073A0 ; __int64 __fastcall safe_write(int fd, void *buf, size_t n)
.text:00000000000073A0                 public safe_write
.text:00000000000073A0 safe_write      proc near               ; CODE XREF: full_write+39↑p
.text:00000000000073A0 ; __unwind {
.text:00000000000073A0                 push    r13
.text:00000000000073A2                 push    r12
.text:00000000000073A4                 mov     r13d, edi
.text:00000000000073A7                 push    rbp
.text:00000000000073A8                 push    rbx
.text:00000000000073A9                 mov     r12, rsi
.text:00000000000073AC                 mov     rbx, rdx
.text:00000000000073AF                 sub     rsp, 8
.text:00000000000073B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000073B8
.text:00000000000073B8 loc_73B8:                               ; CODE XREF: safe_write+38↓j
.text:00000000000073B8                                         ; safe_write+4D↓j
.text:00000000000073B8                 mov     rdx, rbx        ; n
.text:00000000000073BB                 mov     rsi, r12        ; buf
.text:00000000000073BE                 mov     edi, r13d       ; fd
.text:00000000000073C1                 call    _write
.text:00000000000073C6                 test    rax, rax
.text:00000000000073C9                 mov     rbp, rax
.text:00000000000073CC                 jns     short loc_73F0
.text:00000000000073CE                 call    ___errno_location
.text:00000000000073D3                 mov     eax, [rax]
.text:00000000000073D5                 cmp     eax, 4
.text:00000000000073D8                 jz      short loc_73B8
.text:00000000000073DA                 cmp     eax, 16h
.text:00000000000073DD                 jnz     short loc_73F0
.text:00000000000073DF                 cmp     rbx, 7FF00000h
.text:00000000000073E6                 jbe     short loc_73F0
.text:00000000000073E8                 mov     ebx, 7FF00000h
.text:00000000000073ED                 jmp     short loc_73B8
.text:00000000000073ED ; ---------------------------------------------------------------------------
.text:00000000000073EF                 align 10h
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: safe_write+2C↑j
.text:00000000000073F0                                         ; safe_write+3D↑j ...
.text:00000000000073F0                 add     rsp, 8
.text:00000000000073F4                 mov     rax, rbp
.text:00000000000073F7                 pop     rbx
.text:00000000000073F8                 pop     rbp
.text:00000000000073F9                 pop     r12
.text:00000000000073FB                 pop     r13
.text:00000000000073FD                 retn
.text:00000000000073FD ; } // starts at 73A0
.text:00000000000073FD safe_write      endp
.text:00000000000073FD
.text:00000000000073FD ; ---------------------------------------------------------------------------
.text:00000000000073FE                 align 20h
.text:0000000000007400
.text:0000000000007400 ; =============== S U B R O U T I N E =======================================
.text:0000000000007400
.text:0000000000007400 ; Attributes: info_from_lumina
.text:0000000000007400
.text:0000000000007400 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000007400                 public fd_safer_flag
.text:0000000000007400 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000007400 ; __unwind {
.text:0000000000007400                 push    r13
.text:0000000000007402                 push    r12
.text:0000000000007404                 push    rbp
.text:0000000000007405                 push    rbx
.text:0000000000007406                 mov     ebx, edi
.text:0000000000007408                 sub     rsp, 8
.text:000000000000740C                 cmp     edi, 2
.text:000000000000740F                 ja      short loc_7432
.text:0000000000007411                 call    dup_safer
.text:0000000000007416                 mov     r12d, eax
.text:0000000000007419                 call    ___errno_location
.text:000000000000741E                 mov     r13d, [rax]
.text:0000000000007421                 mov     rbp, rax
.text:0000000000007424                 mov     edi, ebx        ; fd
.text:0000000000007426                 call    _close
.text:000000000000742B                 mov     ebx, r12d
.text:000000000000742E                 mov     [rbp+0], r13d
.text:0000000000007432
.text:0000000000007432 loc_7432:                               ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000007432                 add     rsp, 8
.text:0000000000007436                 mov     eax, ebx
.text:0000000000007438                 pop     rbx
.text:0000000000007439                 pop     rbp
.text:000000000000743A                 pop     r12
.text:000000000000743C                 pop     r13
.text:000000000000743E                 retn
.text:000000000000743E ; } // starts at 7400
.text:000000000000743E fd_safer_flag   endp
.text:000000000000743E
.text:000000000000743E ; ---------------------------------------------------------------------------
.text:000000000000743F                 align 20h
.text:0000000000007440
.text:0000000000007440 ; =============== S U B R O U T I N E =======================================
.text:0000000000007440
.text:0000000000007440
.text:0000000000007440 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000007440                 public version_etc_arn
.text:0000000000007440 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_787B↓j
.text:0000000000007440                                         ; version_etc_va:loc_78CB↓p ...
.text:0000000000007440
.text:0000000000007440 var_58          = qword ptr -58h
.text:0000000000007440 var_50          = qword ptr -50h
.text:0000000000007440 var_48          = qword ptr -48h
.text:0000000000007440 var_40          = qword ptr -40h
.text:0000000000007440
.text:0000000000007440 ; __unwind {
.text:0000000000007440                 push    r15
.text:0000000000007442                 push    r14
.text:0000000000007444                 push    r13
.text:0000000000007446                 push    r12
.text:0000000000007448                 mov     r12, r9
.text:000000000000744B                 push    rbp
.text:000000000000744C                 push    rbx
.text:000000000000744D                 mov     rbp, rdi
.text:0000000000007450                 mov     rbx, r8
.text:0000000000007453                 sub     rsp, 28h
.text:0000000000007457                 test    rsi, rsi
.text:000000000000745A                 jz      loc_7578
.text:0000000000007460                 mov     r8, rdx
.text:0000000000007463                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000746A                 mov     r9, rcx
.text:000000000000746D                 xor     eax, eax
.text:000000000000746F                 mov     rcx, rsi
.text:0000000000007472                 mov     esi, 1
.text:0000000000007477                 call    ___fprintf_chk
.text:000000000000747C
.text:000000000000747C loc_747C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000747C                 lea     rsi, aC_1       ; "(C)"
.text:0000000000007483                 xor     edi, edi        ; domainname
.text:0000000000007485                 mov     edx, 5          ; category
.text:000000000000748A                 call    _dcgettext
.text:000000000000748F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000007496                 mov     rcx, rax
.text:0000000000007499                 mov     r8d, 7E3h
.text:000000000000749F                 mov     esi, 1
.text:00000000000074A4                 mov     rdi, rbp
.text:00000000000074A7                 xor     eax, eax
.text:00000000000074A9                 call    ___fprintf_chk
.text:00000000000074AE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000074B5                 xor     edi, edi        ; domainname
.text:00000000000074B7                 mov     edx, 5          ; category
.text:00000000000074BC                 call    _dcgettext
.text:00000000000074C1                 mov     rsi, rbp        ; stream
.text:00000000000074C4                 mov     rdi, rax        ; s
.text:00000000000074C7                 call    _fputs_unlocked
.text:00000000000074CC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000074D0                 ja      def_74E4        ; jumptable 00000000000074E4 default case
.text:00000000000074D6                 lea     rdx, jpt_74E4
.text:00000000000074DD                 movsxd  rax, ds:(jpt_74E4 - 0A3E4h)[rdx+r12*4]
.text:00000000000074E1                 add     rax, rdx
.text:00000000000074E4                 jmp     rax             ; switch jump
.text:00000000000074E4 ; ---------------------------------------------------------------------------
.text:00000000000074E6                 align 10h
.text:00000000000074F0
.text:00000000000074F0 loc_74F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000074F0                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:00000000000074F0                 mov     r9, [rbx+38h]   ; jumptable 00000000000074E4 case 8
.text:00000000000074F4                 mov     rax, [rbx+10h]
.text:00000000000074F8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000074FF                 mov     r8, [rbx+8]
.text:0000000000007503                 mov     edx, 5          ; category
.text:0000000000007508                 xor     edi, edi        ; domainname
.text:000000000000750A                 mov     r13, [rbx+30h]
.text:000000000000750E                 mov     r12, [rbx+28h]
.text:0000000000007512                 mov     [rsp+58h+var_48], r9
.text:0000000000007517                 mov     r15, [rbx+20h]
.text:000000000000751B                 mov     r14, [rbx+18h]
.text:000000000000751F                 mov     [rsp+58h+var_58], rax
.text:0000000000007523                 mov     [rsp+58h+var_50], r8
.text:0000000000007528                 mov     rbx, [rbx]
.text:000000000000752B                 call    _dcgettext
.text:0000000000007530                 sub     rsp, 8
.text:0000000000007534
.text:0000000000007534 loc_7534:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000007534                 mov     r9, [rsp+60h+var_48]
.text:0000000000007539                 mov     rdx, rax
.text:000000000000753C                 mov     rcx, rbx
.text:000000000000753F                 mov     esi, 1
.text:0000000000007544                 mov     rdi, rbp
.text:0000000000007547                 xor     eax, eax
.text:0000000000007549                 push    r9
.text:000000000000754B                 push    r13
.text:000000000000754D                 push    r12
.text:000000000000754F                 push    r15
.text:0000000000007551                 push    r14
.text:0000000000007553                 mov     r9, [rsp+88h+var_58]
.text:0000000000007558                 mov     r8, [rsp+88h+var_50]
.text:000000000000755D                 call    ___fprintf_chk
.text:0000000000007562                 add     rsp, 30h
.text:0000000000007566
.text:0000000000007566 loc_7566:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007566                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:0000000000007566                 add     rsp, 28h        ; jumptable 00000000000074E4 case 0
.text:000000000000756A                 pop     rbx
.text:000000000000756B                 pop     rbp
.text:000000000000756C                 pop     r12
.text:000000000000756E                 pop     r13
.text:0000000000007570                 pop     r14
.text:0000000000007572                 pop     r15
.text:0000000000007574                 retn
.text:0000000000007574 ; ---------------------------------------------------------------------------
.text:0000000000007575                 align 8
.text:0000000000007578
.text:0000000000007578 loc_7578:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000007578                 mov     r8, rcx
.text:000000000000757B                 mov     rcx, rdx
.text:000000000000757E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000007585                 mov     esi, 1
.text:000000000000758A                 xor     eax, eax
.text:000000000000758C                 call    ___fprintf_chk
.text:0000000000007591                 jmp     loc_747C
.text:0000000000007591 ; ---------------------------------------------------------------------------
.text:0000000000007596                 align 20h
.text:00000000000075A0
.text:00000000000075A0 loc_75A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000075A0                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:00000000000075A0                 mov     r10, [rbx+40h]  ; jumptable 00000000000074E4 case 9
.text:00000000000075A4                 mov     r9, [rbx+38h]
.text:00000000000075A8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000075AF                 mov     rax, [rbx+10h]
.text:00000000000075B3                 mov     r8, [rbx+8]
.text:00000000000075B7                 mov     edx, 5          ; category
.text:00000000000075BC                 mov     r13, [rbx+30h]
.text:00000000000075C0                 mov     r12, [rbx+28h]
.text:00000000000075C4                 mov     r15, [rbx+20h]
.text:00000000000075C8                 mov     r14, [rbx+18h]
.text:00000000000075CC                 mov     rbx, [rbx]
.text:00000000000075CF                 mov     [rsp+58h+var_40], r10
.text:00000000000075D4                 mov     [rsp+58h+var_48], r9
.text:00000000000075D9                 mov     [rsp+58h+var_58], rax
.text:00000000000075DD                 mov     [rsp+58h+var_50], r8
.text:00000000000075E2
.text:00000000000075E2 loc_75E2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000075E2                 xor     edi, edi        ; domainname
.text:00000000000075E4                 call    _dcgettext
.text:00000000000075E9                 mov     r10, [rsp+58h+var_40]
.text:00000000000075EE                 push    r10
.text:00000000000075F0                 jmp     loc_7534
.text:00000000000075F0 ; ---------------------------------------------------------------------------
.text:00000000000075F5                 align 8
.text:00000000000075F8
.text:00000000000075F8 loc_75F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000075F8                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:00000000000075F8                 mov     rbx, [rbx]      ; jumptable 00000000000074E4 case 1
.text:00000000000075FB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000007602                 mov     edx, 5          ; category
.text:0000000000007607                 xor     edi, edi        ; domainname
.text:0000000000007609                 call    _dcgettext
.text:000000000000760E                 add     rsp, 28h
.text:0000000000007612                 mov     rcx, rbx
.text:0000000000007615                 mov     rdi, rbp
.text:0000000000007618                 pop     rbx
.text:0000000000007619                 pop     rbp
.text:000000000000761A                 pop     r12
.text:000000000000761C                 pop     r13
.text:000000000000761E                 pop     r14
.text:0000000000007620                 pop     r15
.text:0000000000007622                 mov     rdx, rax
.text:0000000000007625                 mov     esi, 1
.text:000000000000762A                 xor     eax, eax
.text:000000000000762C                 jmp     ___fprintf_chk
.text:000000000000762C ; ---------------------------------------------------------------------------
.text:0000000000007631                 align 8
.text:0000000000007638
.text:0000000000007638 loc_7638:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007638                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:0000000000007638                 mov     r12, [rbx+8]    ; jumptable 00000000000074E4 case 2
.text:000000000000763C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000007643                 mov     rbx, [rbx]
.text:0000000000007646                 mov     edx, 5          ; category
.text:000000000000764B                 xor     edi, edi        ; domainname
.text:000000000000764D                 call    _dcgettext
.text:0000000000007652                 add     rsp, 28h
.text:0000000000007656                 mov     r8, r12
.text:0000000000007659                 mov     rcx, rbx
.text:000000000000765C                 mov     rdi, rbp
.text:000000000000765F                 mov     rdx, rax
.text:0000000000007662                 mov     esi, 1
.text:0000000000007667                 pop     rbx
.text:0000000000007668                 pop     rbp
.text:0000000000007669                 pop     r12
.text:000000000000766B                 pop     r13
.text:000000000000766D                 pop     r14
.text:000000000000766F                 pop     r15
.text:0000000000007671                 xor     eax, eax
.text:0000000000007673                 jmp     ___fprintf_chk
.text:0000000000007673 ; ---------------------------------------------------------------------------
.text:0000000000007678                 align 20h
.text:0000000000007680
.text:0000000000007680 loc_7680:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007680                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:0000000000007680                 mov     r13, [rbx+10h]  ; jumptable 00000000000074E4 case 3
.text:0000000000007684                 mov     r12, [rbx+8]
.text:0000000000007688                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000768F                 mov     rbx, [rbx]
.text:0000000000007692                 mov     edx, 5          ; category
.text:0000000000007697                 xor     edi, edi        ; domainname
.text:0000000000007699                 call    _dcgettext
.text:000000000000769E                 add     rsp, 28h
.text:00000000000076A2                 mov     r9, r13
.text:00000000000076A5                 mov     r8, r12
.text:00000000000076A8                 mov     rcx, rbx
.text:00000000000076AB                 mov     rdi, rbp
.text:00000000000076AE                 mov     rdx, rax
.text:00000000000076B1                 pop     rbx
.text:00000000000076B2                 pop     rbp
.text:00000000000076B3                 pop     r12
.text:00000000000076B5                 pop     r13
.text:00000000000076B7                 pop     r14
.text:00000000000076B9                 pop     r15
.text:00000000000076BB                 mov     esi, 1
.text:00000000000076C0                 xor     eax, eax
.text:00000000000076C2                 jmp     ___fprintf_chk
.text:00000000000076C2 ; ---------------------------------------------------------------------------
.text:00000000000076C7                 align 10h
.text:00000000000076D0
.text:00000000000076D0 loc_76D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000076D0                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:00000000000076D0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000074E4 case 4
.text:00000000000076D7                 mov     edx, 5          ; category
.text:00000000000076DC                 xor     edi, edi        ; domainname
.text:00000000000076DE                 mov     r14, [rbx+18h]
.text:00000000000076E2                 mov     r13, [rbx+10h]
.text:00000000000076E6                 mov     r12, [rbx+8]
.text:00000000000076EA                 mov     rbx, [rbx]
.text:00000000000076ED                 call    _dcgettext
.text:00000000000076F2                 sub     rsp, 8
.text:00000000000076F6
.text:00000000000076F6 loc_76F6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000076F6                 push    r14
.text:00000000000076F8                 mov     rdx, rax
.text:00000000000076FB                 mov     r9, r13
.text:00000000000076FE                 mov     r8, r12
.text:0000000000007701                 mov     rcx, rbx
.text:0000000000007704                 mov     rdi, rbp
.text:0000000000007707                 mov     esi, 1
.text:000000000000770C                 xor     eax, eax
.text:000000000000770E                 call    ___fprintf_chk
.text:0000000000007713                 pop     rax
.text:0000000000007714                 pop     rdx
.text:0000000000007715                 add     rsp, 28h
.text:0000000000007719                 pop     rbx
.text:000000000000771A                 pop     rbp
.text:000000000000771B                 pop     r12
.text:000000000000771D                 pop     r13
.text:000000000000771F                 pop     r14
.text:0000000000007721                 pop     r15
.text:0000000000007723                 retn
.text:0000000000007723 ; ---------------------------------------------------------------------------
.text:0000000000007724                 align 8
.text:0000000000007728
.text:0000000000007728 loc_7728:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007728                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:0000000000007728                 mov     r15, [rbx+20h]  ; jumptable 00000000000074E4 case 5
.text:000000000000772C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000007733                 mov     edx, 5          ; category
.text:0000000000007738                 xor     edi, edi        ; domainname
.text:000000000000773A                 mov     r14, [rbx+18h]
.text:000000000000773E                 mov     r13, [rbx+10h]
.text:0000000000007742                 mov     r12, [rbx+8]
.text:0000000000007746                 mov     rbx, [rbx]
.text:0000000000007749                 call    _dcgettext
.text:000000000000774E                 push    r15
.text:0000000000007750                 jmp     short loc_76F6
.text:0000000000007750 ; ---------------------------------------------------------------------------
.text:0000000000007752                 align 8
.text:0000000000007758
.text:0000000000007758 loc_7758:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007758                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:0000000000007758                 mov     r8, [rbx+8]     ; jumptable 00000000000074E4 case 6
.text:000000000000775C                 mov     r12, [rbx+28h]
.text:0000000000007760                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000007767                 mov     r15, [rbx+20h]
.text:000000000000776B                 mov     r14, [rbx+18h]
.text:000000000000776F                 mov     edx, 5          ; category
.text:0000000000007774                 mov     r13, [rbx+10h]
.text:0000000000007778                 xor     edi, edi        ; domainname
.text:000000000000777A                 mov     rbx, [rbx]
.text:000000000000777D                 mov     [rsp+58h+var_58], r8
.text:0000000000007781                 call    _dcgettext
.text:0000000000007786                 sub     rsp, 8
.text:000000000000778A                 mov     r9, r13
.text:000000000000778D                 push    r12
.text:000000000000778F                 push    r15
.text:0000000000007791                 push    r14
.text:0000000000007793
.text:0000000000007793 loc_7793:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000007793                 mov     r8, [rsp+78h+var_58]
.text:0000000000007798                 mov     rcx, rbx
.text:000000000000779B                 mov     rdx, rax
.text:000000000000779E                 mov     rdi, rbp
.text:00000000000077A1                 mov     esi, 1
.text:00000000000077A6                 xor     eax, eax
.text:00000000000077A8                 call    ___fprintf_chk
.text:00000000000077AD                 add     rsp, 20h
.text:00000000000077B1                 add     rsp, 28h
.text:00000000000077B5                 pop     rbx
.text:00000000000077B6                 pop     rbp
.text:00000000000077B7                 pop     r12
.text:00000000000077B9                 pop     r13
.text:00000000000077BB                 pop     r14
.text:00000000000077BD                 pop     r15
.text:00000000000077BF                 retn
.text:00000000000077C0 ; ---------------------------------------------------------------------------
.text:00000000000077C0
.text:00000000000077C0 loc_77C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000077C0                                         ; DATA XREF: .rodata:jpt_74E4↓o
.text:00000000000077C0                 mov     r9, [rbx+10h]   ; jumptable 00000000000074E4 case 7
.text:00000000000077C4                 mov     r13, [rbx+30h]
.text:00000000000077C8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000077CF                 mov     r12, [rbx+28h]
.text:00000000000077D3                 mov     r15, [rbx+20h]
.text:00000000000077D7                 mov     edx, 5          ; category
.text:00000000000077DC                 mov     r14, [rbx+18h]
.text:00000000000077E0                 mov     r8, [rbx+8]
.text:00000000000077E4                 xor     edi, edi        ; domainname
.text:00000000000077E6                 mov     [rsp+58h+var_50], r9
.text:00000000000077EB                 mov     rbx, [rbx]
.text:00000000000077EE                 mov     [rsp+58h+var_58], r8
.text:00000000000077F2                 call    _dcgettext
.text:00000000000077F7                 push    r13
.text:00000000000077F9                 push    r12
.text:00000000000077FB                 push    r15
.text:00000000000077FD                 push    r14
.text:00000000000077FF                 mov     r9, [rsp+78h+var_50]
.text:0000000000007804                 jmp     short loc_7793
.text:0000000000007804 ; ---------------------------------------------------------------------------
.text:0000000000007806                 align 10h
.text:0000000000007810
.text:0000000000007810 def_74E4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000007810                 mov     r10, [rbx+40h]  ; jumptable 00000000000074E4 default case
.text:0000000000007814                 mov     r9, [rbx+38h]
.text:0000000000007818                 mov     edx, 5
.text:000000000000781D                 mov     rax, [rbx+10h]
.text:0000000000007821                 mov     r8, [rbx+8]
.text:0000000000007825                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000782C                 mov     r13, [rbx+30h]
.text:0000000000007830                 mov     r12, [rbx+28h]
.text:0000000000007834                 mov     r15, [rbx+20h]
.text:0000000000007838                 mov     r14, [rbx+18h]
.text:000000000000783C                 mov     [rsp+58h+var_40], r10
.text:0000000000007841                 mov     [rsp+58h+var_48], r9
.text:0000000000007846                 mov     [rsp+58h+var_58], rax
.text:000000000000784A                 mov     [rsp+58h+var_50], r8
.text:000000000000784F                 mov     rbx, [rbx]
.text:0000000000007852                 jmp     loc_75E2
.text:0000000000007852 ; } // starts at 7440
.text:0000000000007852 version_etc_arn endp
.text:0000000000007852
.text:0000000000007852 ; ---------------------------------------------------------------------------
.text:0000000000007857                 align 20h
.text:0000000000007860
.text:0000000000007860 ; =============== S U B R O U T I N E =======================================
.text:0000000000007860
.text:0000000000007860 ; Attributes: info_from_lumina
.text:0000000000007860
.text:0000000000007860 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000007860                 public version_etc_ar
.text:0000000000007860 version_etc_ar  proc near
.text:0000000000007860 ; __unwind {
.text:0000000000007860                 xor     r9d, r9d
.text:0000000000007863                 cmp     qword ptr [r8], 0
.text:0000000000007867                 jz      short loc_787B
.text:0000000000007869                 nop     dword ptr [rax+00000000h]
.text:0000000000007870
.text:0000000000007870 loc_7870:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000007870                 add     r9, 1
.text:0000000000007874                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000007879                 jnz     short loc_7870
.text:000000000000787B
.text:000000000000787B loc_787B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000787B                 jmp     version_etc_arn
.text:000000000000787B ; } // starts at 7860
.text:000000000000787B version_etc_ar  endp
.text:000000000000787B
.text:0000000000007880
.text:0000000000007880 ; =============== S U B R O U T I N E =======================================
.text:0000000000007880
.text:0000000000007880 ; Attributes: info_from_lumina
.text:0000000000007880
.text:0000000000007880 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000007880                 public version_etc_va
.text:0000000000007880 version_etc_va  proc near
.text:0000000000007880
.text:0000000000007880 authtab         = qword ptr -68h
.text:0000000000007880 var_10          = qword ptr -10h
.text:0000000000007880
.text:0000000000007880 ; __unwind {
.text:0000000000007880                 sub     rsp, 68h
.text:0000000000007884                 mov     r10, r8
.text:0000000000007887                 xor     r9d, r9d
.text:000000000000788A                 mov     rax, fs:28h
.text:0000000000007893                 mov     [rsp+68h+var_10], rax
.text:0000000000007898                 xor     eax, eax
.text:000000000000789A                 mov     r8, rsp
.text:000000000000789D                 nop     dword ptr [rax]
.text:00000000000078A0
.text:00000000000078A0 loc_78A0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000078A0                 mov     eax, [r10]
.text:00000000000078A3                 cmp     eax, 2Fh ; '/'
.text:00000000000078A6                 ja      short loc_78EA
.text:00000000000078A8                 mov     r11d, eax
.text:00000000000078AB                 add     r11, [r10+10h]
.text:00000000000078AF                 add     eax, 8
.text:00000000000078B2                 mov     [r10], eax
.text:00000000000078B5
.text:00000000000078B5 loc_78B5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000078B5                 mov     rax, [r11]
.text:00000000000078B8                 test    rax, rax
.text:00000000000078BB                 mov     [r8+r9*8], rax
.text:00000000000078BF                 jz      short loc_78CB
.text:00000000000078C1                 add     r9, 1
.text:00000000000078C5                 cmp     r9, 0Ah
.text:00000000000078C9                 jnz     short loc_78A0
.text:00000000000078CB
.text:00000000000078CB loc_78CB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000078CB                 call    version_etc_arn
.text:00000000000078D0                 mov     rax, [rsp+68h+var_10]
.text:00000000000078D5                 xor     rax, fs:28h
.text:00000000000078DE                 jnz     short loc_78E5
.text:00000000000078E0                 add     rsp, 68h
.text:00000000000078E4                 retn
.text:00000000000078E5 ; ---------------------------------------------------------------------------
.text:00000000000078E5
.text:00000000000078E5 loc_78E5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000078E5                 call    ___stack_chk_fail
.text:00000000000078EA ; ---------------------------------------------------------------------------
.text:00000000000078EA
.text:00000000000078EA loc_78EA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000078EA                 mov     r11, [r10+8]
.text:00000000000078EE                 lea     rax, [r11+8]
.text:00000000000078F2                 mov     [r10+8], rax
.text:00000000000078F6                 jmp     short loc_78B5
.text:00000000000078F6 ; } // starts at 7880
.text:00000000000078F6 version_etc_va  endp
.text:00000000000078F6
.text:00000000000078F6 ; ---------------------------------------------------------------------------
.text:00000000000078F8                 align 20h
.text:0000000000007900
.text:0000000000007900 ; =============== S U B R O U T I N E =======================================
.text:0000000000007900
.text:0000000000007900 ; Attributes: info_from_lumina
.text:0000000000007900
.text:0000000000007900 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000007900                 public version_etc
.text:0000000000007900 version_etc     proc near               ; CODE XREF: main+24A↑p
.text:0000000000007900
.text:0000000000007900 var_C0          = dword ptr -0C0h
.text:0000000000007900 var_B8          = qword ptr -0B8h
.text:0000000000007900 var_B0          = qword ptr -0B0h
.text:0000000000007900 var_A8          = byte ptr -0A8h
.text:0000000000007900 var_50          = qword ptr -50h
.text:0000000000007900 var_48          = byte ptr -48h
.text:0000000000007900 var_28          = qword ptr -28h
.text:0000000000007900 var_20          = qword ptr -20h
.text:0000000000007900 arg_0           = byte ptr  8
.text:0000000000007900
.text:0000000000007900 ; __unwind {
.text:0000000000007900                 push    rbp
.text:0000000000007901                 push    rbx
.text:0000000000007902                 mov     r10d, 20h ; ' '
.text:0000000000007908                 xor     r11d, r11d
.text:000000000000790B                 sub     rsp, 0B8h
.text:0000000000007912                 mov     rax, fs:28h
.text:000000000000791B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000007920                 xor     eax, eax
.text:0000000000007922                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000792A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000007932                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000793A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000793F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000007947                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000794F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000007954                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000795C                 xor     r9d, r9d
.text:000000000000795F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000007964                 mov     rbp, rax
.text:0000000000007967                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007970
.text:0000000000007970 loc_7970:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000007970                 cmp     r10d, 2Fh ; '/'
.text:0000000000007974                 ja      short loc_79CC
.text:0000000000007976                 mov     eax, r10d
.text:0000000000007979                 mov     r11d, 1
.text:000000000000797F                 add     r10d, 8
.text:0000000000007983                 add     rax, rbp
.text:0000000000007986
.text:0000000000007986 loc_7986:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000007986                 mov     rax, [rax]
.text:0000000000007989                 test    rax, rax
.text:000000000000798C                 mov     [r8+r9*8], rax
.text:0000000000007990                 jz      short loc_799C
.text:0000000000007992                 add     r9, 1
.text:0000000000007996                 cmp     r9, 0Ah
.text:000000000000799A                 jnz     short loc_7970
.text:000000000000799C
.text:000000000000799C loc_799C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000799C                 test    r11b, r11b
.text:000000000000799F                 jnz     short loc_79C5
.text:00000000000079A1
.text:00000000000079A1 loc_79A1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000079A1                 call    version_etc_arn
.text:00000000000079A6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000079AB                 xor     rax, fs:28h
.text:00000000000079B4                 jnz     short loc_79C0
.text:00000000000079B6                 add     rsp, 0B8h
.text:00000000000079BD                 pop     rbx
.text:00000000000079BE                 pop     rbp
.text:00000000000079BF                 retn
.text:00000000000079C0 ; ---------------------------------------------------------------------------
.text:00000000000079C0
.text:00000000000079C0 loc_79C0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000079C0                 call    ___stack_chk_fail
.text:00000000000079C5 ; ---------------------------------------------------------------------------
.text:00000000000079C5
.text:00000000000079C5 loc_79C5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000079C5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000079CA                 jmp     short loc_79A1
.text:00000000000079CC ; ---------------------------------------------------------------------------
.text:00000000000079CC
.text:00000000000079CC loc_79CC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000079CC                 mov     rax, rbx
.text:00000000000079CF                 add     rbx, 8
.text:00000000000079D3                 jmp     short loc_7986
.text:00000000000079D3 ; } // starts at 7900
.text:00000000000079D3 version_etc     endp
.text:00000000000079D3
.text:00000000000079D3 ; ---------------------------------------------------------------------------
.text:00000000000079D5                 align 20h
.text:00000000000079E0
.text:00000000000079E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079E0
.text:00000000000079E0 ; Attributes: info_from_lumina
.text:00000000000079E0
.text:00000000000079E0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000079E0                 public emit_bug_reporting_address
.text:00000000000079E0 emit_bug_reporting_address proc near
.text:00000000000079E0 ; __unwind {
.text:00000000000079E0                 push    rbx
.text:00000000000079E1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000079E8                 mov     edx, 5          ; category
.text:00000000000079ED                 xor     edi, edi        ; domainname
.text:00000000000079EF                 call    _dcgettext
.text:00000000000079F4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000079FB                 mov     rsi, rax
.text:00000000000079FE                 mov     edi, 1
.text:0000000000007A03                 xor     eax, eax
.text:0000000000007A05                 call    ___printf_chk
.text:0000000000007A0A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000007A11                 mov     edx, 5          ; category
.text:0000000000007A16                 xor     edi, edi        ; domainname
.text:0000000000007A18                 call    _dcgettext
.text:0000000000007A1D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000007A24                 lea     rdx, unk_8C81
.text:0000000000007A2B                 mov     rsi, rax
.text:0000000000007A2E                 mov     edi, 1
.text:0000000000007A33                 xor     eax, eax
.text:0000000000007A35                 call    ___printf_chk
.text:0000000000007A3A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000007A41                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000007A48                 xor     edi, edi        ; domainname
.text:0000000000007A4A                 mov     edx, 5          ; category
.text:0000000000007A4F                 call    _dcgettext
.text:0000000000007A54                 mov     rsi, rbx        ; stream
.text:0000000000007A57                 mov     rdi, rax        ; s
.text:0000000000007A5A                 pop     rbx
.text:0000000000007A5B                 jmp     _fputs_unlocked
.text:0000000000007A5B ; } // starts at 79E0
.text:0000000000007A5B emit_bug_reporting_address endp
.text:0000000000007A5B
.text:0000000000007A60
.text:0000000000007A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A60
.text:0000000000007A60
.text:0000000000007A60                 public xmalloc
.text:0000000000007A60 xmalloc         proc near               ; CODE XREF: main+81E↑p
.text:0000000000007A60                                         ; main+1125↑p ...
.text:0000000000007A60 ; __unwind {
.text:0000000000007A60                 push    rbx
.text:0000000000007A61                 mov     rbx, rdi
.text:0000000000007A64                 call    _malloc
.text:0000000000007A69                 test    rax, rax
.text:0000000000007A6C                 jnz     short loc_7A73
.text:0000000000007A6E                 test    rbx, rbx
.text:0000000000007A71                 jnz     short loc_7A75
.text:0000000000007A73
.text:0000000000007A73 loc_7A73:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000007A73                 pop     rbx
.text:0000000000007A74                 retn
.text:0000000000007A75 ; ---------------------------------------------------------------------------
.text:0000000000007A75
.text:0000000000007A75 loc_7A75:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000007A75                 call    xalloc_die
.text:0000000000007A75 ; } // starts at 7A60
.text:0000000000007A75 xmalloc         endp
.text:0000000000007A75
.text:0000000000007A75 ; ---------------------------------------------------------------------------
.text:0000000000007A7A                 align 20h
.text:0000000000007A80
.text:0000000000007A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A80
.text:0000000000007A80 ; Attributes: info_from_lumina
.text:0000000000007A80
.text:0000000000007A80 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000007A80                 public xnmalloc
.text:0000000000007A80 xnmalloc        proc near
.text:0000000000007A80 ; __unwind {
.text:0000000000007A80                 mov     rax, rdi
.text:0000000000007A83                 mul     rsi
.text:0000000000007A86                 mov     rdi, rax
.text:0000000000007A89                 seto    al
.text:0000000000007A8C                 test    rdi, rdi
.text:0000000000007A8F                 js      short loc_7A9B
.text:0000000000007A91                 movzx   eax, al
.text:0000000000007A94                 test    rax, rax
.text:0000000000007A97                 jnz     short loc_7A9B
.text:0000000000007A99                 jmp     short xmalloc
.text:0000000000007A9B ; ---------------------------------------------------------------------------
.text:0000000000007A9B
.text:0000000000007A9B loc_7A9B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000007A9B                                         ; xnmalloc+17↑j
.text:0000000000007A9B                 sub     rsp, 8
.text:0000000000007A9F                 call    xalloc_die
.text:0000000000007A9F ; } // starts at 7A80
.text:0000000000007A9F xnmalloc        endp
.text:0000000000007A9F
.text:0000000000007A9F ; ---------------------------------------------------------------------------
.text:0000000000007AA4                 align 10h
.text:0000000000007AB0
.text:0000000000007AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AB0
.text:0000000000007AB0
.text:0000000000007AB0                 public xcharalloc
.text:0000000000007AB0 xcharalloc      proc near
.text:0000000000007AB0 ; __unwind {
.text:0000000000007AB0                 jmp     short xmalloc
.text:0000000000007AB0 ; } // starts at 7AB0
.text:0000000000007AB0 xcharalloc      endp
.text:0000000000007AB0
.text:0000000000007AB0 ; ---------------------------------------------------------------------------
.text:0000000000007AB2                 align 20h
.text:0000000000007AC0
.text:0000000000007AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AC0
.text:0000000000007AC0 ; Attributes: info_from_lumina
.text:0000000000007AC0
.text:0000000000007AC0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000007AC0                 public xrealloc
.text:0000000000007AC0 xrealloc        proc near               ; CODE XREF: main+CCF↑p
.text:0000000000007AC0                                         ; main+1044↑p ...
.text:0000000000007AC0 ; __unwind {
.text:0000000000007AC0                 test    rsi, rsi
.text:0000000000007AC3                 push    rbx
.text:0000000000007AC4                 mov     rbx, rsi
.text:0000000000007AC7                 jnz     short loc_7ACE
.text:0000000000007AC9                 test    rdi, rdi
.text:0000000000007ACC                 jnz     short loc_7AE8
.text:0000000000007ACE
.text:0000000000007ACE loc_7ACE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000007ACE                 mov     rsi, rbx        ; size
.text:0000000000007AD1                 call    _realloc
.text:0000000000007AD6                 test    rax, rax
.text:0000000000007AD9                 jnz     short loc_7AE0
.text:0000000000007ADB                 test    rbx, rbx
.text:0000000000007ADE                 jnz     short loc_7AF1
.text:0000000000007AE0
.text:0000000000007AE0 loc_7AE0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000007AE0                 pop     rbx
.text:0000000000007AE1                 retn
.text:0000000000007AE1 ; ---------------------------------------------------------------------------
.text:0000000000007AE2                 align 8
.text:0000000000007AE8
.text:0000000000007AE8 loc_7AE8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000007AE8                 call    _free
.text:0000000000007AED                 xor     eax, eax
.text:0000000000007AEF                 pop     rbx
.text:0000000000007AF0                 retn
.text:0000000000007AF1 ; ---------------------------------------------------------------------------
.text:0000000000007AF1
.text:0000000000007AF1 loc_7AF1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000007AF1                 call    xalloc_die
.text:0000000000007AF1 ; } // starts at 7AC0
.text:0000000000007AF1 xrealloc        endp
.text:0000000000007AF1
.text:0000000000007AF1 ; ---------------------------------------------------------------------------
.text:0000000000007AF6                 align 20h
.text:0000000000007B00
.text:0000000000007B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B00
.text:0000000000007B00 ; Attributes: info_from_lumina
.text:0000000000007B00
.text:0000000000007B00 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000007B00                 public xnrealloc
.text:0000000000007B00 xnrealloc       proc near
.text:0000000000007B00 ; __unwind {
.text:0000000000007B00                 mov     rax, rsi
.text:0000000000007B03                 mul     rdx
.text:0000000000007B06                 mov     rsi, rax
.text:0000000000007B09                 seto    al
.text:0000000000007B0C                 test    rsi, rsi
.text:0000000000007B0F                 js      short loc_7B1B
.text:0000000000007B11                 movzx   eax, al
.text:0000000000007B14                 test    rax, rax
.text:0000000000007B17                 jnz     short loc_7B1B
.text:0000000000007B19                 jmp     short xrealloc
.text:0000000000007B1B ; ---------------------------------------------------------------------------
.text:0000000000007B1B
.text:0000000000007B1B loc_7B1B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000007B1B                                         ; xnrealloc+17↑j
.text:0000000000007B1B                 sub     rsp, 8
.text:0000000000007B1F                 call    xalloc_die
.text:0000000000007B1F ; } // starts at 7B00
.text:0000000000007B1F xnrealloc       endp
.text:0000000000007B1F
.text:0000000000007B1F ; ---------------------------------------------------------------------------
.text:0000000000007B24                 align 10h
.text:0000000000007B30
.text:0000000000007B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B30
.text:0000000000007B30 ; Attributes: info_from_lumina
.text:0000000000007B30
.text:0000000000007B30 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000007B30                 public x2nrealloc
.text:0000000000007B30 x2nrealloc      proc near
.text:0000000000007B30 ; __unwind {
.text:0000000000007B30                 test    rdi, rdi
.text:0000000000007B33                 mov     r9, rdx
.text:0000000000007B36                 mov     rcx, [rsi]
.text:0000000000007B39                 jz      short loc_7B70
.text:0000000000007B3B                 xor     edx, edx
.text:0000000000007B3D                 mov     rax, 5555555555555554h
.text:0000000000007B47                 div     r9
.text:0000000000007B4A                 cmp     rax, rcx
.text:0000000000007B4D                 jbe     short loc_7B8B
.text:0000000000007B4F                 mov     rax, rcx
.text:0000000000007B52                 shr     rax, 1
.text:0000000000007B55                 lea     rcx, [rax+rcx+1]
.text:0000000000007B5A
.text:0000000000007B5A loc_7B5A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000007B5A                 mov     [rsi], rcx
.text:0000000000007B5D                 imul    rcx, r9
.text:0000000000007B61                 mov     rsi, rcx
.text:0000000000007B64                 jmp     xrealloc
.text:0000000000007B64 ; ---------------------------------------------------------------------------
.text:0000000000007B69                 align 10h
.text:0000000000007B70
.text:0000000000007B70 loc_7B70:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000007B70                 test    rcx, rcx
.text:0000000000007B73                 jz      short loc_7B98
.text:0000000000007B75
.text:0000000000007B75 loc_7B75:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000007B75                 mov     rax, rcx
.text:0000000000007B78                 mul     r9
.text:0000000000007B7B                 seto    dl
.text:0000000000007B7E                 test    rax, rax
.text:0000000000007B81                 movzx   edx, dl
.text:0000000000007B84                 js      short loc_7B8B
.text:0000000000007B86                 test    rdx, rdx
.text:0000000000007B89                 jz      short loc_7B5A
.text:0000000000007B8B
.text:0000000000007B8B loc_7B8B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000007B8B                                         ; x2nrealloc+54↑j
.text:0000000000007B8B                 sub     rsp, 8
.text:0000000000007B8F                 call    xalloc_die
.text:0000000000007B8F ; ---------------------------------------------------------------------------
.text:0000000000007B94                 align 8
.text:0000000000007B98
.text:0000000000007B98 loc_7B98:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000007B98                 xor     edx, edx
.text:0000000000007B9A                 mov     eax, 80h
.text:0000000000007B9F                 xor     r8d, r8d
.text:0000000000007BA2                 div     r9
.text:0000000000007BA5                 test    rax, rax
.text:0000000000007BA8                 setz    r8b
.text:0000000000007BAC                 lea     rcx, [r8+rax]
.text:0000000000007BB0                 jmp     short loc_7B75
.text:0000000000007BB0 ; } // starts at 7B30
.text:0000000000007BB0 x2nrealloc      endp
.text:0000000000007BB0
.text:0000000000007BB0 ; ---------------------------------------------------------------------------
.text:0000000000007BB2                 align 20h
.text:0000000000007BC0
.text:0000000000007BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BC0
.text:0000000000007BC0 ; Attributes: info_from_lumina
.text:0000000000007BC0
.text:0000000000007BC0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000007BC0                 public x2realloc
.text:0000000000007BC0 x2realloc       proc near
.text:0000000000007BC0 ; __unwind {
.text:0000000000007BC0                 test    rdi, rdi
.text:0000000000007BC3                 mov     rax, [rsi]
.text:0000000000007BC6                 jz      short loc_7BF0
.text:0000000000007BC8                 mov     rdx, 5555555555555553h
.text:0000000000007BD2                 cmp     rax, rdx
.text:0000000000007BD5                 ja      short loc_7C01
.text:0000000000007BD7                 mov     rdx, rax
.text:0000000000007BDA                 shr     rdx, 1
.text:0000000000007BDD                 lea     rax, [rdx+rax+1]
.text:0000000000007BE2
.text:0000000000007BE2 loc_7BE2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000007BE2                 mov     [rsi], rax
.text:0000000000007BE5                 mov     rsi, rax
.text:0000000000007BE8                 jmp     xrealloc
.text:0000000000007BE8 ; ---------------------------------------------------------------------------
.text:0000000000007BED                 align 10h
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000007BF0                 test    rax, rax
.text:0000000000007BF3                 mov     edx, 80h
.text:0000000000007BF8                 cmovz   rax, rdx
.text:0000000000007BFC                 test    rax, rax
.text:0000000000007BFF                 jns     short loc_7BE2
.text:0000000000007C01
.text:0000000000007C01 loc_7C01:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000007C01                 sub     rsp, 8
.text:0000000000007C05                 call    xalloc_die
.text:0000000000007C05 ; } // starts at 7BC0
.text:0000000000007C05 x2realloc       endp
.text:0000000000007C05
.text:0000000000007C05 ; ---------------------------------------------------------------------------
.text:0000000000007C0A                 align 10h
.text:0000000000007C10
.text:0000000000007C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C10
.text:0000000000007C10
.text:0000000000007C10 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000007C10                 public xzalloc
.text:0000000000007C10 xzalloc         proc near
.text:0000000000007C10 ; __unwind {
.text:0000000000007C10                 push    rbx
.text:0000000000007C11                 mov     rbx, rdi
.text:0000000000007C14                 call    xmalloc
.text:0000000000007C19                 mov     rdx, rbx        ; n
.text:0000000000007C1C                 xor     esi, esi        ; c
.text:0000000000007C1E                 mov     rdi, rax        ; s
.text:0000000000007C21                 pop     rbx
.text:0000000000007C22                 jmp     _memset
.text:0000000000007C22 ; } // starts at 7C10
.text:0000000000007C22 xzalloc         endp
.text:0000000000007C22
.text:0000000000007C22 ; ---------------------------------------------------------------------------
.text:0000000000007C27                 align 10h
.text:0000000000007C30
.text:0000000000007C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C30
.text:0000000000007C30 ; Attributes: info_from_lumina
.text:0000000000007C30
.text:0000000000007C30 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000007C30                 public xcalloc
.text:0000000000007C30 xcalloc         proc near               ; CODE XREF: next_file_name+189↑p
.text:0000000000007C30 ; __unwind {
.text:0000000000007C30                 mov     rax, rdi
.text:0000000000007C33                 sub     rsp, 8
.text:0000000000007C37                 mul     rsi
.text:0000000000007C3A                 seto    dl
.text:0000000000007C3D                 test    rax, rax
.text:0000000000007C40                 js      short loc_7C59
.text:0000000000007C42                 movzx   edx, dl
.text:0000000000007C45                 test    rdx, rdx
.text:0000000000007C48                 jnz     short loc_7C59
.text:0000000000007C4A                 call    _calloc
.text:0000000000007C4F                 test    rax, rax
.text:0000000000007C52                 jz      short loc_7C59
.text:0000000000007C54                 add     rsp, 8
.text:0000000000007C58                 retn
.text:0000000000007C59 ; ---------------------------------------------------------------------------
.text:0000000000007C59
.text:0000000000007C59 loc_7C59:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000007C59                                         ; xcalloc+18↑j ...
.text:0000000000007C59                 call    xalloc_die
.text:0000000000007C59 ; } // starts at 7C30
.text:0000000000007C59 xcalloc         endp
.text:0000000000007C59
.text:0000000000007C59 ; ---------------------------------------------------------------------------
.text:0000000000007C5E                 align 20h
.text:0000000000007C60
.text:0000000000007C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C60
.text:0000000000007C60 ; Attributes: info_from_lumina
.text:0000000000007C60
.text:0000000000007C60 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000007C60                 public xmemdup
.text:0000000000007C60 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000007C60                                         ; xstrdup+11↓j
.text:0000000000007C60 ; __unwind {
.text:0000000000007C60                 push    rbp
.text:0000000000007C61                 push    rbx
.text:0000000000007C62                 mov     rbp, rdi
.text:0000000000007C65                 mov     rdi, rsi
.text:0000000000007C68                 mov     rbx, rsi
.text:0000000000007C6B                 sub     rsp, 8
.text:0000000000007C6F                 call    xmalloc
.text:0000000000007C74                 add     rsp, 8
.text:0000000000007C78                 mov     rdx, rbx        ; n
.text:0000000000007C7B                 mov     rsi, rbp        ; src
.text:0000000000007C7E                 pop     rbx
.text:0000000000007C7F                 pop     rbp
.text:0000000000007C80                 mov     rdi, rax        ; dest
.text:0000000000007C83                 jmp     _memcpy
.text:0000000000007C83 ; } // starts at 7C60
.text:0000000000007C83 xmemdup         endp
.text:0000000000007C83
.text:0000000000007C83 ; ---------------------------------------------------------------------------
.text:0000000000007C88                 align 10h
.text:0000000000007C90
.text:0000000000007C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C90
.text:0000000000007C90
.text:0000000000007C90 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000007C90                 public xstrdup
.text:0000000000007C90 xstrdup         proc near               ; CODE XREF: main+1146↑p
.text:0000000000007C90 ; __unwind {
.text:0000000000007C90                 push    rbx
.text:0000000000007C91                 mov     rbx, rdi
.text:0000000000007C94                 call    _strlen
.text:0000000000007C99                 mov     rdi, rbx        ; src
.text:0000000000007C9C                 lea     rsi, [rax+1]    ; n
.text:0000000000007CA0                 pop     rbx
.text:0000000000007CA1                 jmp     short xmemdup
.text:0000000000007CA1 ; } // starts at 7C90
.text:0000000000007CA1 xstrdup         endp
.text:0000000000007CA1
.text:0000000000007CA1 ; ---------------------------------------------------------------------------
.text:0000000000007CA3                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CB0
.text:0000000000007CB0 ; Attributes: noreturn info_from_lumina
.text:0000000000007CB0
.text:0000000000007CB0 ; void __cdecl xalloc_die()
.text:0000000000007CB0                 public xalloc_die
.text:0000000000007CB0 xalloc_die      proc near               ; CODE XREF: main:loc_3936↑p
.text:0000000000007CB0                                         ; next_file_name:loc_40C2↑p ...
.text:0000000000007CB0 ; __unwind {
.text:0000000000007CB0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000007CB7                 sub     rsp, 8
.text:0000000000007CBB                 mov     edx, 5          ; category
.text:0000000000007CC0                 xor     edi, edi        ; domainname
.text:0000000000007CC2                 call    _dcgettext
.text:0000000000007CC7                 mov     edi, cs:exit_failure ; status
.text:0000000000007CCD                 lea     rdx, format+4   ; format
.text:0000000000007CD4                 mov     rcx, rax
.text:0000000000007CD7                 xor     esi, esi        ; errnum
.text:0000000000007CD9                 xor     eax, eax
.text:0000000000007CDB                 call    _error
.text:0000000000007CE0                 call    _abort
.text:0000000000007CE0 ; } // starts at 7CB0
.text:0000000000007CE0 xalloc_die      endp
.text:0000000000007CE0
.text:0000000000007CE0 ; ---------------------------------------------------------------------------
.text:0000000000007CE5                 align 10h
.text:0000000000007CF0
.text:0000000000007CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CF0
.text:0000000000007CF0 ; Attributes: info_from_lumina
.text:0000000000007CF0
.text:0000000000007CF0 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000007CF0                 public xnumtoumax
.text:0000000000007CF0 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000007CF0
.text:0000000000007CF0 var_48          = qword ptr -48h
.text:0000000000007CF0 var_40          = qword ptr -40h
.text:0000000000007CF0 arg_0           = dword ptr  8
.text:0000000000007CF0
.text:0000000000007CF0 ; __unwind {
.text:0000000000007CF0                 push    r15
.text:0000000000007CF2                 push    r14
.text:0000000000007CF4                 mov     r15, rcx
.text:0000000000007CF7                 push    r13
.text:0000000000007CF9                 push    r12
.text:0000000000007CFB                 mov     r14, rdx
.text:0000000000007CFE                 push    rbp
.text:0000000000007CFF                 push    rbx
.text:0000000000007D00                 mov     edx, esi
.text:0000000000007D02                 xor     esi, esi
.text:0000000000007D04                 mov     r12, rdi
.text:0000000000007D07                 mov     r13, r9
.text:0000000000007D0A                 sub     rsp, 18h
.text:0000000000007D0E                 mov     rcx, rsp
.text:0000000000007D11                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000007D15                 mov     rax, fs:28h
.text:0000000000007D1E                 mov     [rsp+48h+var_40], rax
.text:0000000000007D23                 xor     eax, eax
.text:0000000000007D25                 call    xstrtoumax
.text:0000000000007D2A                 test    eax, eax
.text:0000000000007D2C                 jnz     loc_7DC0
.text:0000000000007D32                 mov     rbp, [rsp+48h+var_48]
.text:0000000000007D36                 cmp     rbp, r14
.text:0000000000007D39                 jb      short loc_7D40
.text:0000000000007D3B                 cmp     rbp, r15
.text:0000000000007D3E                 jbe     short loc_7D94
.text:0000000000007D40
.text:0000000000007D40 loc_7D40:                               ; CODE XREF: xnumtoumax+49↑j
.text:0000000000007D40                 call    ___errno_location
.text:0000000000007D45                 cmp     rbp, 40000000h
.text:0000000000007D4C                 mov     r14, rax
.text:0000000000007D4F                 sbb     eax, eax
.text:0000000000007D51                 and     eax, 0FFFFFFD7h
.text:0000000000007D54                 add     eax, 4Bh ; 'K'
.text:0000000000007D57                 mov     [r14], eax
.text:0000000000007D5A
.text:0000000000007D5A loc_7D5A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:0000000000007D5A                                         ; xnumtoumax+EA↓j ...
.text:0000000000007D5A                 mov     rdi, r12
.text:0000000000007D5D                 call    quote
.text:0000000000007D62                 mov     esi, [r14]
.text:0000000000007D65                 mov     r8, rax
.text:0000000000007D68                 mov     eax, 0
.text:0000000000007D6D                 lea     rdx, format     ; "%s: %s"
.text:0000000000007D74                 mov     rcx, r13
.text:0000000000007D77                 cmp     esi, 16h
.text:0000000000007D7A                 cmovz   esi, eax        ; errnum
.text:0000000000007D7D                 test    ebx, ebx
.text:0000000000007D7F                 mov     eax, 1
.text:0000000000007D84                 cmovz   ebx, eax
.text:0000000000007D87                 xor     eax, eax
.text:0000000000007D89                 mov     edi, ebx        ; status
.text:0000000000007D8B                 call    _error
.text:0000000000007D90                 mov     rbp, [rsp+48h+var_48]
.text:0000000000007D94
.text:0000000000007D94 loc_7D94:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000007D94                 mov     rdx, [rsp+48h+var_40]
.text:0000000000007D99                 xor     rdx, fs:28h
.text:0000000000007DA2                 mov     rax, rbp
.text:0000000000007DA5                 jnz     short loc_7DEB
.text:0000000000007DA7                 add     rsp, 18h
.text:0000000000007DAB                 pop     rbx
.text:0000000000007DAC                 pop     rbp
.text:0000000000007DAD                 pop     r12
.text:0000000000007DAF                 pop     r13
.text:0000000000007DB1                 pop     r14
.text:0000000000007DB3                 pop     r15
.text:0000000000007DB5                 retn
.text:0000000000007DB5 ; ---------------------------------------------------------------------------
.text:0000000000007DB6                 align 20h
.text:0000000000007DC0
.text:0000000000007DC0 loc_7DC0:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000007DC0                 mov     ebp, eax
.text:0000000000007DC2                 call    ___errno_location
.text:0000000000007DC7                 cmp     ebp, 1
.text:0000000000007DCA                 mov     r14, rax
.text:0000000000007DCD                 jz      short loc_7DE0
.text:0000000000007DCF                 cmp     ebp, 3
.text:0000000000007DD2                 jnz     short loc_7D5A
.text:0000000000007DD4                 mov     dword ptr [rax], 0
.text:0000000000007DDA                 jmp     loc_7D5A
.text:0000000000007DDA ; ---------------------------------------------------------------------------
.text:0000000000007DDF                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 loc_7DE0:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000007DE0                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000007DE6                 jmp     loc_7D5A
.text:0000000000007DEB ; ---------------------------------------------------------------------------
.text:0000000000007DEB
.text:0000000000007DEB loc_7DEB:                               ; CODE XREF: xnumtoumax+B5↑j
.text:0000000000007DEB                 call    ___stack_chk_fail
.text:0000000000007DEB ; } // starts at 7CF0
.text:0000000000007DEB xnumtoumax      endp
.text:0000000000007DEB
.text:0000000000007DF0
.text:0000000000007DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DF0
.text:0000000000007DF0 ; Attributes: info_from_lumina
.text:0000000000007DF0
.text:0000000000007DF0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000007DF0                 public xdectoumax
.text:0000000000007DF0 xdectoumax      proc near               ; CODE XREF: main+1A6↑p
.text:0000000000007DF0                                         ; main+353↑p ...
.text:0000000000007DF0 ; __unwind {
.text:0000000000007DF0                 sub     rsp, 10h
.text:0000000000007DF4                 push    r9
.text:0000000000007DF6                 mov     r9, r8
.text:0000000000007DF9                 mov     r8, rcx
.text:0000000000007DFC                 mov     rcx, rdx
.text:0000000000007DFF                 mov     rdx, rsi
.text:0000000000007E02                 mov     esi, 0Ah
.text:0000000000007E07                 call    xnumtoumax
.text:0000000000007E0C                 add     rsp, 18h
.text:0000000000007E10                 retn
.text:0000000000007E10 ; } // starts at 7DF0
.text:0000000000007E10 xdectoumax      endp
.text:0000000000007E10
.text:0000000000007E10 ; ---------------------------------------------------------------------------
.text:0000000000007E11                 align 20h
.text:0000000000007E20
.text:0000000000007E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E20
.text:0000000000007E20
.text:0000000000007E20 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000007E20                 public xstrtoumax
.text:0000000000007E20 xstrtoumax      proc near               ; CODE XREF: main+9D9↑p
.text:0000000000007E20                                         ; xnumtoumax+35↑p
.text:0000000000007E20
.text:0000000000007E20 base            = dword ptr -50h
.text:0000000000007E20 endptr          = qword ptr -48h
.text:0000000000007E20 var_40          = qword ptr -40h
.text:0000000000007E20
.text:0000000000007E20 ; __unwind {
.text:0000000000007E20                 push    r15
.text:0000000000007E22                 push    r14
.text:0000000000007E24                 push    r13
.text:0000000000007E26                 push    r12
.text:0000000000007E28                 push    rbp
.text:0000000000007E29                 push    rbx
.text:0000000000007E2A                 sub     rsp, 28h
.text:0000000000007E2E                 mov     rax, fs:28h
.text:0000000000007E37                 mov     [rsp+58h+var_40], rax
.text:0000000000007E3C                 xor     eax, eax
.text:0000000000007E3E                 cmp     edx, 24h ; '$'
.text:0000000000007E41                 ja      loc_81A5
.text:0000000000007E47                 lea     rax, [rsp+58h+endptr]
.text:0000000000007E4C                 mov     r15, rsi
.text:0000000000007E4F                 test    rsi, rsi
.text:0000000000007E52                 mov     rbp, rdi
.text:0000000000007E55                 mov     [rsp+58h+base], edx
.text:0000000000007E59                 mov     r14, rcx
.text:0000000000007E5C                 mov     r13, r8
.text:0000000000007E5F                 cmovz   r15, rax
.text:0000000000007E63                 call    ___errno_location
.text:0000000000007E68                 mov     dword ptr [rax], 0
.text:0000000000007E6E                 mov     r12, rax
.text:0000000000007E71                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007E75                 call    ___ctype_b_loc
.text:0000000000007E7A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000007E7E                 mov     rsi, [rax]
.text:0000000000007E81                 mov     rax, rbp
.text:0000000000007E84                 jmp     short loc_7E97
.text:0000000000007E84 ; ---------------------------------------------------------------------------
.text:0000000000007E86                 align 10h
.text:0000000000007E90
.text:0000000000007E90 loc_7E90:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000007E90                 add     rax, 1
.text:0000000000007E94                 movzx   ebx, byte ptr [rax]
.text:0000000000007E97
.text:0000000000007E97 loc_7E97:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000007E97                 movzx   ecx, bl
.text:0000000000007E9A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000007E9F                 jnz     short loc_7E90
.text:0000000000007EA1                 cmp     bl, 2Dh ; '-'
.text:0000000000007EA4                 jz      short loc_7EF8
.text:0000000000007EA6                 xor     ecx, ecx        ; group
.text:0000000000007EA8                 mov     rsi, r15        ; endptr
.text:0000000000007EAB                 mov     rdi, rbp        ; nptr
.text:0000000000007EAE                 call    ___strtoul_internal
.text:0000000000007EB3                 mov     rcx, [r15]
.text:0000000000007EB6                 mov     rbx, rax
.text:0000000000007EB9                 cmp     rcx, rbp
.text:0000000000007EBC                 jz      short loc_7EE8
.text:0000000000007EBE                 mov     eax, [r12]
.text:0000000000007EC2                 test    eax, eax
.text:0000000000007EC4                 jz      short loc_7F28
.text:0000000000007EC6                 cmp     eax, 22h ; '"'
.text:0000000000007EC9                 mov     ebp, 1
.text:0000000000007ECE                 jnz     short loc_7EF8
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000007ED0                 test    r13, r13
.text:0000000000007ED3                 jz      short loc_7EDE
.text:0000000000007ED5                 movzx   r12d, byte ptr [rcx]
.text:0000000000007ED9                 test    r12b, r12b
.text:0000000000007EDC                 jnz     short loc_7F57
.text:0000000000007EDE
.text:0000000000007EDE loc_7EDE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000007EDE                 mov     [r14], rbx
.text:0000000000007EE1                 jmp     short loc_7EFD
.text:0000000000007EE1 ; ---------------------------------------------------------------------------
.text:0000000000007EE3                 align 8
.text:0000000000007EE8
.text:0000000000007EE8 loc_7EE8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000007EE8                 test    r13, r13
.text:0000000000007EEB                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007EF0                 jnz     short loc_7F30
.text:0000000000007EF2                 nop     word ptr [rax+rax+00h]
.text:0000000000007EF8
.text:0000000000007EF8 loc_7EF8:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000007EF8                                         ; xstrtoumax+AE↑j ...
.text:0000000000007EF8                 mov     ebp, 4
.text:0000000000007EFD
.text:0000000000007EFD loc_7EFD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000007EFD                                         ; xstrtoumax+217↓j ...
.text:0000000000007EFD                 mov     rdi, [rsp+58h+var_40]
.text:0000000000007F02                 xor     rdi, fs:28h
.text:0000000000007F0B                 mov     eax, ebp
.text:0000000000007F0D                 jnz     loc_81A0
.text:0000000000007F13                 add     rsp, 28h
.text:0000000000007F17                 pop     rbx
.text:0000000000007F18                 pop     rbp
.text:0000000000007F19                 pop     r12
.text:0000000000007F1B                 pop     r13
.text:0000000000007F1D                 pop     r14
.text:0000000000007F1F                 pop     r15
.text:0000000000007F21                 retn
.text:0000000000007F21 ; ---------------------------------------------------------------------------
.text:0000000000007F22                 align 8
.text:0000000000007F28
.text:0000000000007F28 loc_7F28:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000007F28                 xor     ebp, ebp
.text:0000000000007F2A                 jmp     short loc_7ED0
.text:0000000000007F2A ; ---------------------------------------------------------------------------
.text:0000000000007F2C                 align 10h
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000007F30                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000007F35                 test    r12b, r12b
.text:0000000000007F38                 jz      short loc_7EF8
.text:0000000000007F3A                 movsx   esi, r12b       ; c
.text:0000000000007F3E                 mov     rdi, r13        ; s
.text:0000000000007F41                 xor     ebp, ebp
.text:0000000000007F43                 call    _strchr
.text:0000000000007F48                 test    rax, rax
.text:0000000000007F4B                 mov     ebx, 1
.text:0000000000007F50                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000007F55                 jz      short loc_7EF8
.text:0000000000007F57
.text:0000000000007F57 loc_7F57:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000007F57                 movsx   esi, r12b       ; c
.text:0000000000007F5B                 mov     rdi, r13        ; s
.text:0000000000007F5E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007F63                 call    _strchr
.text:0000000000007F68                 test    rax, rax
.text:0000000000007F6B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000007F70                 jz      def_7FF6        ; jumptable 0000000000007FF6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000007F76                 lea     eax, [r12-45h]
.text:0000000000007F7B                 cmp     al, 2Fh ; '/'
.text:0000000000007F7D                 ja      short loc_7FD0
.text:0000000000007F7F                 mov     rdx, 814400308945h
.text:0000000000007F89                 bt      rdx, rax
.text:0000000000007F8D                 jnb     short loc_7FD0
.text:0000000000007F8F                 mov     esi, 30h ; '0'  ; c
.text:0000000000007F94                 mov     rdi, r13        ; s
.text:0000000000007F97                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000007F9C                 call    _strchr
.text:0000000000007FA1                 test    rax, rax
.text:0000000000007FA4                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000007FA9                 jz      short loc_7FD0
.text:0000000000007FAB                 movzx   eax, byte ptr [rcx+1]
.text:0000000000007FAF                 cmp     al, 44h ; 'D'
.text:0000000000007FB1                 jz      short loc_7FBF
.text:0000000000007FB3                 cmp     al, 69h ; 'i'
.text:0000000000007FB5                 jz      loc_8188
.text:0000000000007FBB                 cmp     al, 42h ; 'B'
.text:0000000000007FBD                 jnz     short loc_7FD0
.text:0000000000007FBF
.text:0000000000007FBF loc_7FBF:                               ; CODE XREF: xstrtoumax+191↑j
.text:0000000000007FBF                 mov     edi, 2
.text:0000000000007FC4                 mov     esi, 3E8h
.text:0000000000007FC9                 jmp     short loc_7FDA
.text:0000000000007FC9 ; ---------------------------------------------------------------------------
.text:0000000000007FCB                 align 10h
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000007FD0                                         ; xstrtoumax+16D↑j ...
.text:0000000000007FD0                 mov     edi, 1
.text:0000000000007FD5                 mov     esi, 400h
.text:0000000000007FDA
.text:0000000000007FDA loc_7FDA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:0000000000007FDA                                         ; xstrtoumax+37B↓j
.text:0000000000007FDA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000007FDE                 cmp     r12b, 35h
.text:0000000000007FE2                 ja      short def_7FF6  ; jumptable 0000000000007FF6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000007FE4                 lea     rdx, jpt_7FF6
.text:0000000000007FEB                 movzx   r12d, r12b
.text:0000000000007FEF                 movsxd  rax, ds:(jpt_7FF6 - 0A4A8h)[rdx+r12*4]
.text:0000000000007FF3                 add     rax, rdx
.text:0000000000007FF6                 jmp     rax             ; switch jump
.text:0000000000007FF8 ; ---------------------------------------------------------------------------
.text:0000000000007FF8
.text:0000000000007FF8 loc_7FF8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000007FF8                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:0000000000007FF8                 mov     rax, rbx        ; jumptable 0000000000007FF6 cases 77,109
.text:0000000000007FFB                 mul     rsi
.text:0000000000007FFE                 jo      loc_81F1
.text:0000000000008004                 xor     r8d, r8d
.text:0000000000008007
.text:0000000000008007 loc_8007:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000008007                                         ; xstrtoumax+35E↓j ...
.text:0000000000008007                 mul     rsi
.text:000000000000800A                 jo      loc_81E2
.text:0000000000008010                 mov     rbx, rax
.text:0000000000008013
.text:0000000000008013 loc_8013:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000008013                 or      ebp, r8d
.text:0000000000008016                 db      2Eh
.text:0000000000008016                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008020
.text:0000000000008020 loc_8020:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008020                                         ; xstrtoumax+23B↓j ...
.text:0000000000008020                 movsxd  rdi, edi        ; jumptable 0000000000007FF6 case 99
.text:0000000000008023                 mov     eax, ebp
.text:0000000000008025                 add     rcx, rdi
.text:0000000000008028                 or      eax, 2
.text:000000000000802B                 mov     [r15], rcx
.text:000000000000802E                 cmp     byte ptr [rcx], 0
.text:0000000000008031                 mov     [r14], rbx
.text:0000000000008034                 cmovnz  ebp, eax
.text:0000000000008037                 jmp     loc_7EFD
.text:000000000000803C ; ---------------------------------------------------------------------------
.text:000000000000803C
.text:000000000000803C def_7FF6:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000803C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000803C                 mov     [r14], rbx      ; jumptable 0000000000007FF6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000803F                 or      ebp, 2
.text:0000000000008042                 jmp     loc_7EFD
.text:0000000000008047 ; ---------------------------------------------------------------------------
.text:0000000000008047
.text:0000000000008047 loc_8047:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008047                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:0000000000008047                 mov     edx, 2          ; jumptable 0000000000007FF6 case 119
.text:000000000000804C                 mov     rax, rdx
.text:000000000000804F                 mul     rbx
.text:0000000000008052                 jo      loc_80EE
.text:0000000000008058                 add     rbx, rbx
.text:000000000000805B                 jmp     short loc_8020  ; jumptable 0000000000007FF6 case 99
.text:000000000000805D ; ---------------------------------------------------------------------------
.text:000000000000805D
.text:000000000000805D loc_805D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000805D                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:000000000000805D                 mov     edx, 200h       ; jumptable 0000000000007FF6 case 98
.text:0000000000008062                 mov     rax, rdx
.text:0000000000008065                 mul     rbx
.text:0000000000008068                 jo      loc_80EE
.text:000000000000806E                 shl     rbx, 9
.text:0000000000008072                 jmp     short loc_8020  ; jumptable 0000000000007FF6 case 99
.text:0000000000008074 ; ---------------------------------------------------------------------------
.text:0000000000008074
.text:0000000000008074 loc_8074:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008074                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:0000000000008074                 mov     r8d, 7          ; jumptable 0000000000007FF6 case 90
.text:000000000000807A                 xor     r9d, r9d
.text:000000000000807D                 nop     dword ptr [rax]
.text:0000000000008080
.text:0000000000008080 loc_8080:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000008080                 mov     rax, rbx
.text:0000000000008083                 mul     rsi
.text:0000000000008086                 mov     rbx, rax
.text:0000000000008089                 jo      loc_821E
.text:000000000000808F
.text:000000000000808F loc_808F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000808F                 sub     r8d, 1
.text:0000000000008093                 jnz     short loc_8080
.text:0000000000008095
.text:0000000000008095 loc_8095:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000008095                                         ; xstrtoumax+2BD↓j ...
.text:0000000000008095                 or      ebp, r9d
.text:0000000000008098                 jmp     short loc_8020  ; jumptable 0000000000007FF6 case 99
.text:000000000000809A ; ---------------------------------------------------------------------------
.text:000000000000809A
.text:000000000000809A loc_809A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000809A                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:000000000000809A                 mov     r8d, 8          ; jumptable 0000000000007FF6 case 89
.text:00000000000080A0                 xor     r9d, r9d
.text:00000000000080A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000080A8
.text:00000000000080A8 loc_80A8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000080A8                 mov     rax, rbx
.text:00000000000080AB                 mul     rsi
.text:00000000000080AE                 mov     rbx, rax
.text:00000000000080B1                 jo      loc_8200
.text:00000000000080B7
.text:00000000000080B7 loc_80B7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000080B7                 sub     r8d, 1
.text:00000000000080BB                 jnz     short loc_80A8
.text:00000000000080BD                 jmp     short loc_8095
.text:00000000000080BF ; ---------------------------------------------------------------------------
.text:00000000000080BF
.text:00000000000080BF loc_80BF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000080BF                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:00000000000080BF                 mov     r8d, 4          ; jumptable 0000000000007FF6 cases 84,116
.text:00000000000080C5                 xor     r9d, r9d
.text:00000000000080C8
.text:00000000000080C8 loc_80C8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:00000000000080C8                 mov     rax, rbx
.text:00000000000080CB                 mul     rsi
.text:00000000000080CE                 mov     rbx, rax
.text:00000000000080D1                 jo      loc_81D3
.text:00000000000080D7
.text:00000000000080D7 loc_80D7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:00000000000080D7                 sub     r8d, 1
.text:00000000000080DB                 jnz     short loc_80C8
.text:00000000000080DD                 jmp     short loc_8095
.text:00000000000080DF ; ---------------------------------------------------------------------------
.text:00000000000080DF
.text:00000000000080DF loc_80DF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000080DF                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:00000000000080DF                 mov     rax, rbx        ; jumptable 0000000000007FF6 cases 75,107
.text:00000000000080E2                 mul     rsi
.text:00000000000080E5                 mov     rbx, rax
.text:00000000000080E8                 jno     loc_8020        ; jumptable 0000000000007FF6 case 99
.text:00000000000080EE
.text:00000000000080EE loc_80EE:                               ; CODE XREF: xstrtoumax+232↑j
.text:00000000000080EE                                         ; xstrtoumax+248↑j ...
.text:00000000000080EE                 mov     ebp, 1
.text:00000000000080F3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000080F7                 jmp     loc_8020        ; jumptable 0000000000007FF6 case 99
.text:00000000000080F7 ; ---------------------------------------------------------------------------
.text:00000000000080FC                 align 20h
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008100                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:0000000000008100                 mov     r8d, 5          ; jumptable 0000000000007FF6 case 80
.text:0000000000008106                 xor     r9d, r9d
.text:0000000000008109
.text:0000000000008109 loc_8109:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000008109                 mov     rax, rbx
.text:000000000000810C                 mul     rsi
.text:000000000000810F                 mov     rbx, rax
.text:0000000000008112                 jo      loc_820F
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000008118                 sub     r8d, 1
.text:000000000000811C                 jnz     short loc_8109
.text:000000000000811E                 jmp     loc_8095
.text:0000000000008123 ; ---------------------------------------------------------------------------
.text:0000000000008123
.text:0000000000008123 loc_8123:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008123                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:0000000000008123                 mov     r8d, 6          ; jumptable 0000000000007FF6 case 69
.text:0000000000008129                 xor     r9d, r9d
.text:000000000000812C
.text:000000000000812C loc_812C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000812C                 mov     rax, rbx
.text:000000000000812F                 mul     rsi
.text:0000000000008132                 mov     rbx, rax
.text:0000000000008135                 jo      loc_81C4
.text:000000000000813B
.text:000000000000813B loc_813B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000813B                 sub     r8d, 1
.text:000000000000813F                 jnz     short loc_812C
.text:0000000000008141                 jmp     loc_8095
.text:0000000000008146 ; ---------------------------------------------------------------------------
.text:0000000000008146
.text:0000000000008146 loc_8146:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008146                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:0000000000008146                 mov     edx, 400h       ; jumptable 0000000000007FF6 case 66
.text:000000000000814B                 mov     rax, rdx
.text:000000000000814E                 mul     rbx
.text:0000000000008151                 jo      short loc_80EE
.text:0000000000008153                 shl     rbx, 0Ah
.text:0000000000008157                 jmp     loc_8020        ; jumptable 0000000000007FF6 case 99
.text:000000000000815C ; ---------------------------------------------------------------------------
.text:000000000000815C
.text:000000000000815C loc_815C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000815C                                         ; DATA XREF: .rodata:jpt_7FF6↓o
.text:000000000000815C                 mov     rax, rbx        ; jumptable 0000000000007FF6 cases 71,103
.text:000000000000815F                 mul     rsi
.text:0000000000008162                 jo      loc_822D
.text:0000000000008168                 xor     r8d, r8d
.text:000000000000816B
.text:000000000000816B loc_816B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000816B                 mul     rsi
.text:000000000000816E                 jno     loc_8007
.text:0000000000008174                 mov     r8d, 1
.text:000000000000817A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000817E                 jmp     loc_8007
.text:000000000000817E ; ---------------------------------------------------------------------------
.text:0000000000008183                 align 8
.text:0000000000008188
.text:0000000000008188 loc_8188:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000008188                 xor     edi, edi
.text:000000000000818A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000818E                 mov     esi, 400h
.text:0000000000008193                 setz    dil
.text:0000000000008197                 lea     edi, [rdi+rdi+1]
.text:000000000000819B                 jmp     loc_7FDA
.text:00000000000081A0 ; ---------------------------------------------------------------------------
.text:00000000000081A0
.text:00000000000081A0 loc_81A0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000081A0                 call    ___stack_chk_fail
.text:00000000000081A5 ; ---------------------------------------------------------------------------
.text:00000000000081A5
.text:00000000000081A5 loc_81A5:                               ; CODE XREF: xstrtoumax+21↑j
.text:00000000000081A5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:00000000000081AC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000081B3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000081BA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000081BF                 call    ___assert_fail
.text:00000000000081C4 ; ---------------------------------------------------------------------------
.text:00000000000081C4
.text:00000000000081C4 loc_81C4:                               ; CODE XREF: xstrtoumax+315↑j
.text:00000000000081C4                 mov     r9d, 1
.text:00000000000081CA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000081CE                 jmp     loc_813B
.text:00000000000081D3 ; ---------------------------------------------------------------------------
.text:00000000000081D3
.text:00000000000081D3 loc_81D3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:00000000000081D3                 mov     r9d, 1
.text:00000000000081D9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000081DD                 jmp     loc_80D7
.text:00000000000081E2 ; ---------------------------------------------------------------------------
.text:00000000000081E2
.text:00000000000081E2 loc_81E2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000081E2                 mov     r8d, 1
.text:00000000000081E8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000081EC                 jmp     loc_8013
.text:00000000000081F1 ; ---------------------------------------------------------------------------
.text:00000000000081F1
.text:00000000000081F1 loc_81F1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:00000000000081F1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000081F5                 mov     r8d, 1
.text:00000000000081FB                 jmp     loc_8007
.text:0000000000008200 ; ---------------------------------------------------------------------------
.text:0000000000008200
.text:0000000000008200 loc_8200:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000008200                 mov     r9d, 1
.text:0000000000008206                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000820A                 jmp     loc_80B7
.text:000000000000820F ; ---------------------------------------------------------------------------
.text:000000000000820F
.text:000000000000820F loc_820F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000820F                 mov     r9d, 1
.text:0000000000008215                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008219                 jmp     loc_8118
.text:000000000000821E ; ---------------------------------------------------------------------------
.text:000000000000821E
.text:000000000000821E loc_821E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000821E                 mov     r9d, 1
.text:0000000000008224                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008228                 jmp     loc_808F
.text:000000000000822D ; ---------------------------------------------------------------------------
.text:000000000000822D
.text:000000000000822D loc_822D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000822D                 mov     r8d, 1
.text:0000000000008233                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008237                 jmp     loc_816B
.text:0000000000008237 ; } // starts at 7E20
.text:0000000000008237 xstrtoumax      endp
.text:0000000000008237
.text:0000000000008237 ; ---------------------------------------------------------------------------
.text:000000000000823C                 align 20h
.text:0000000000008240
.text:0000000000008240 ; =============== S U B R O U T I N E =======================================
.text:0000000000008240
.text:0000000000008240 ; Attributes: info_from_lumina
.text:0000000000008240
.text:0000000000008240 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000008240                 public rpl_fclose
.text:0000000000008240 rpl_fclose      proc near               ; CODE XREF: main+13D4↑p
.text:0000000000008240                                         ; ofile_open+B9↑p ...
.text:0000000000008240 ; __unwind {
.text:0000000000008240                 push    r12
.text:0000000000008242                 push    rbp
.text:0000000000008243                 push    rbx
.text:0000000000008244                 mov     rbx, rdi
.text:0000000000008247                 call    _fileno
.text:000000000000824C                 test    eax, eax
.text:000000000000824E                 mov     rdi, rbx        ; fp
.text:0000000000008251                 js      short loc_82A7
.text:0000000000008253                 call    ___freading
.text:0000000000008258                 test    eax, eax
.text:000000000000825A                 jnz     short loc_8288
.text:000000000000825C
.text:000000000000825C loc_825C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000825C                 mov     rdi, rbx        ; stream
.text:000000000000825F                 call    rpl_fflush
.text:0000000000008264                 test    eax, eax
.text:0000000000008266                 jz      short loc_82A4
.text:0000000000008268                 call    ___errno_location
.text:000000000000826D                 mov     r12d, [rax]
.text:0000000000008270                 mov     rdi, rbx        ; stream
.text:0000000000008273                 mov     rbp, rax
.text:0000000000008276                 call    _fclose
.text:000000000000827B                 test    r12d, r12d
.text:000000000000827E                 jnz     short loc_82B0
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000008280                 pop     rbx
.text:0000000000008281                 pop     rbp
.text:0000000000008282                 pop     r12
.text:0000000000008284                 retn
.text:0000000000008284 ; ---------------------------------------------------------------------------
.text:0000000000008285                 align 8
.text:0000000000008288
.text:0000000000008288 loc_8288:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000008288                 mov     rdi, rbx        ; stream
.text:000000000000828B                 call    _fileno
.text:0000000000008290                 xor     esi, esi        ; offset
.text:0000000000008292                 mov     edx, 1          ; whence
.text:0000000000008297                 mov     edi, eax        ; fd
.text:0000000000008299                 call    _lseek
.text:000000000000829E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000082A2                 jnz     short loc_825C
.text:00000000000082A4
.text:00000000000082A4 loc_82A4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000082A4                 mov     rdi, rbx        ; stream
.text:00000000000082A7
.text:00000000000082A7 loc_82A7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000082A7                 pop     rbx
.text:00000000000082A8                 pop     rbp
.text:00000000000082A9                 pop     r12
.text:00000000000082AB                 jmp     _fclose
.text:00000000000082B0 ; ---------------------------------------------------------------------------
.text:00000000000082B0
.text:00000000000082B0 loc_82B0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000082B0                 mov     [rbp+0], r12d
.text:00000000000082B4                 mov     eax, 0FFFFFFFFh
.text:00000000000082B9                 jmp     short loc_8280
.text:00000000000082B9 ; } // starts at 8240
.text:00000000000082B9 rpl_fclose      endp
.text:00000000000082B9
.text:00000000000082B9 ; ---------------------------------------------------------------------------
.text:00000000000082BB                 align 20h
.text:00000000000082C0
.text:00000000000082C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082C0
.text:00000000000082C0 ; Attributes: info_from_lumina
.text:00000000000082C0
.text:00000000000082C0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000082C0                 public rpl_fflush
.text:00000000000082C0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000082C0 ; __unwind {
.text:00000000000082C0                 test    rdi, rdi
.text:00000000000082C3                 push    rbx
.text:00000000000082C4                 mov     rbx, rdi
.text:00000000000082C7                 jz      short loc_82DA
.text:00000000000082C9                 call    ___freading
.text:00000000000082CE                 test    eax, eax
.text:00000000000082D0                 jz      short loc_82DA
.text:00000000000082D2                 test    dword ptr [rbx], 100h
.text:00000000000082D8                 jnz     short loc_82E8
.text:00000000000082DA
.text:00000000000082DA loc_82DA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000082DA                                         ; rpl_fflush+10↑j
.text:00000000000082DA                 mov     rdi, rbx        ; stream
.text:00000000000082DD                 pop     rbx
.text:00000000000082DE                 jmp     _fflush
.text:00000000000082DE ; ---------------------------------------------------------------------------
.text:00000000000082E3                 align 8
.text:00000000000082E8
.text:00000000000082E8 loc_82E8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000082E8                 mov     rdi, rbx
.text:00000000000082EB                 mov     edx, 1
.text:00000000000082F0                 xor     esi, esi
.text:00000000000082F2                 call    rpl_fseeko
.text:00000000000082F7                 mov     rdi, rbx        ; stream
.text:00000000000082FA                 pop     rbx
.text:00000000000082FB                 jmp     _fflush
.text:00000000000082FB ; } // starts at 82C0
.text:00000000000082FB rpl_fflush      endp
.text:00000000000082FB
.text:0000000000008300
.text:0000000000008300 ; =============== S U B R O U T I N E =======================================
.text:0000000000008300
.text:0000000000008300 ; Attributes: info_from_lumina
.text:0000000000008300
.text:0000000000008300 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000008300                 public rpl_fseeko
.text:0000000000008300 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000008300 ; __unwind {
.text:0000000000008300                 mov     rax, [rdi+8]
.text:0000000000008304                 cmp     [rdi+10h], rax
.text:0000000000008308                 jz      short loc_8310
.text:000000000000830A
.text:000000000000830A loc_830A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000830A                                         ; rpl_fseeko+1F↓j
.text:000000000000830A                 jmp     _fseeko
.text:000000000000830A ; ---------------------------------------------------------------------------
.text:000000000000830F                 align 10h
.text:0000000000008310
.text:0000000000008310 loc_8310:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000008310                 mov     rax, [rdi+20h]
.text:0000000000008314                 cmp     [rdi+28h], rax
.text:0000000000008318                 jnz     short loc_830A
.text:000000000000831A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000831F                 jnz     short loc_830A
.text:0000000000008321                 push    r12
.text:0000000000008323                 push    rbp
.text:0000000000008324                 mov     r12d, edx
.text:0000000000008327                 push    rbx
.text:0000000000008328                 mov     rbp, rsi
.text:000000000000832B                 mov     rbx, rdi
.text:000000000000832E                 call    _fileno
.text:0000000000008333                 mov     edx, r12d       ; whence
.text:0000000000008336                 mov     rsi, rbp        ; offset
.text:0000000000008339                 mov     edi, eax        ; fd
.text:000000000000833B                 call    _lseek
.text:0000000000008340                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008344                 jz      short loc_8352
.text:0000000000008346                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000008349                 mov     [rbx+90h], rax
.text:0000000000008350                 xor     eax, eax
.text:0000000000008352
.text:0000000000008352 loc_8352:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000008352                 pop     rbx
.text:0000000000008353                 pop     rbp
.text:0000000000008354                 pop     r12
.text:0000000000008356                 retn
.text:0000000000008356 ; } // starts at 8300
.text:0000000000008356 rpl_fseeko      endp
.text:0000000000008356
.text:0000000000008356 ; ---------------------------------------------------------------------------
.text:0000000000008357                 align 20h
.text:0000000000008360
.text:0000000000008360 ; =============== S U B R O U T I N E =======================================
.text:0000000000008360
.text:0000000000008360 ; Attributes: info_from_lumina
.text:0000000000008360
.text:0000000000008360 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008360                 public rpl_mbrtowc
.text:0000000000008360 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008360
.text:0000000000008360 pwc             = dword ptr -34h
.text:0000000000008360 var_30          = qword ptr -30h
.text:0000000000008360
.text:0000000000008360 ; __unwind {
.text:0000000000008360                 push    r13
.text:0000000000008362                 push    r12
.text:0000000000008364                 mov     r13, rsi
.text:0000000000008367                 push    rbp
.text:0000000000008368                 push    rbx
.text:0000000000008369                 mov     rbx, rdi
.text:000000000000836C                 mov     r12, rdx
.text:000000000000836F                 sub     rsp, 18h
.text:0000000000008373                 mov     rax, fs:28h
.text:000000000000837C                 mov     [rsp+38h+var_30], rax
.text:0000000000008381                 xor     eax, eax
.text:0000000000008383                 lea     rax, [rsp+38h+pwc]
.text:0000000000008388                 test    rdi, rdi
.text:000000000000838B                 cmovz   rbx, rax
.text:000000000000838F                 mov     rdi, rbx        ; pwc
.text:0000000000008392                 call    _mbrtowc
.text:0000000000008397                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000839B                 mov     rbp, rax
.text:000000000000839E                 jbe     short loc_83C0
.text:00000000000083A0                 test    r12, r12
.text:00000000000083A3                 jz      short loc_83C0
.text:00000000000083A5                 xor     edi, edi
.text:00000000000083A7                 call    hard_locale
.text:00000000000083AC                 test    al, al
.text:00000000000083AE                 jnz     short loc_83C0
.text:00000000000083B0                 movzx   eax, byte ptr [r13+0]
.text:00000000000083B5                 mov     ebp, 1
.text:00000000000083BA                 mov     [rbx], eax
.text:00000000000083BC                 nop     dword ptr [rax+00h]
.text:00000000000083C0
.text:00000000000083C0 loc_83C0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000083C0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000083C0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000083C5                 xor     rdx, fs:28h
.text:00000000000083CE                 mov     rax, rbp
.text:00000000000083D1                 jnz     short loc_83DE
.text:00000000000083D3                 add     rsp, 18h
.text:00000000000083D7                 pop     rbx
.text:00000000000083D8                 pop     rbp
.text:00000000000083D9                 pop     r12
.text:00000000000083DB                 pop     r13
.text:00000000000083DD                 retn
.text:00000000000083DE ; ---------------------------------------------------------------------------
.text:00000000000083DE
.text:00000000000083DE loc_83DE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000083DE                 call    ___stack_chk_fail
.text:00000000000083DE ; } // starts at 8360
.text:00000000000083DE rpl_mbrtowc     endp
.text:00000000000083DE
.text:00000000000083DE ; ---------------------------------------------------------------------------
.text:00000000000083E3                 align 10h
.text:00000000000083F0
.text:00000000000083F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083F0
.text:00000000000083F0
.text:00000000000083F0 ; __int64 __fastcall str2sig(char *s2)
.text:00000000000083F0                 public str2sig
.text:00000000000083F0 str2sig         proc near
.text:00000000000083F0
.text:00000000000083F0 var_38          = qword ptr -38h
.text:00000000000083F0 var_30          = qword ptr -30h
.text:00000000000083F0
.text:00000000000083F0 ; __unwind {
.text:00000000000083F0                 push    r13
.text:00000000000083F2                 push    r12
.text:00000000000083F4                 mov     r13, rsi
.text:00000000000083F7                 push    rbp
.text:00000000000083F8                 push    rbx
.text:00000000000083F9                 xor     ebx, ebx
.text:00000000000083FB                 mov     r12, rdi
.text:00000000000083FE                 lea     rbp, nptr       ; "HUP"
.text:0000000000008405                 sub     rsp, 18h
.text:0000000000008409                 mov     rax, fs:28h
.text:0000000000008412                 mov     [rsp+38h+var_30], rax
.text:0000000000008417                 xor     eax, eax
.text:0000000000008419                 movsx   eax, byte ptr [rdi]
.text:000000000000841C                 sub     eax, 30h ; '0'
.text:000000000000841F                 cmp     eax, 9
.text:0000000000008422                 ja      short loc_843C
.text:0000000000008424                 jmp     short loc_8480
.text:0000000000008424 ; ---------------------------------------------------------------------------
.text:0000000000008426                 align 10h
.text:0000000000008430
.text:0000000000008430 loc_8430:                               ; CODE XREF: str2sig+59↓j
.text:0000000000008430                 add     ebx, 1
.text:0000000000008433                 add     rbp, 0Ch
.text:0000000000008437                 cmp     ebx, 23h ; '#'
.text:000000000000843A                 jz      short loc_84B0
.text:000000000000843C
.text:000000000000843C loc_843C:                               ; CODE XREF: str2sig+32↑j
.text:000000000000843C                 mov     rsi, r12        ; s2
.text:000000000000843F                 mov     rdi, rbp        ; nptr
.text:0000000000008442                 call    _strcmp
.text:0000000000008447                 test    eax, eax
.text:0000000000008449                 jnz     short loc_8430
.text:000000000000844B                 lea     rdx, [rbx+rbx*2]
.text:000000000000844F                 lea     rax, numname_table
.text:0000000000008456                 mov     eax, [rax+rdx*4]
.text:0000000000008459
.text:0000000000008459 loc_8459:                               ; CODE XREF: str2sig+AA↓j
.text:0000000000008459                                         ; str2sig+13E↓j ...
.text:0000000000008459                 mov     [r13+0], eax
.text:000000000000845D                 sar     eax, 1Fh
.text:0000000000008460
.text:0000000000008460 loc_8460:                               ; CODE XREF: str2sig+B9↓j
.text:0000000000008460                 mov     rcx, [rsp+38h+var_30]
.text:0000000000008465                 xor     rcx, fs:28h
.text:000000000000846E                 jnz     loc_8570
.text:0000000000008474                 add     rsp, 18h
.text:0000000000008478                 pop     rbx
.text:0000000000008479                 pop     rbp
.text:000000000000847A                 pop     r12
.text:000000000000847C                 pop     r13
.text:000000000000847E                 retn
.text:000000000000847E ; ---------------------------------------------------------------------------
.text:000000000000847F                 align 20h
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: str2sig+34↑j
.text:0000000000008480                 mov     edx, 0Ah        ; base
.text:0000000000008485                 mov     rsi, rsp        ; endptr
.text:0000000000008488                 call    _strtol
.text:000000000000848D                 mov     rdx, [rsp+38h+var_38]
.text:0000000000008491                 cmp     byte ptr [rdx], 0
.text:0000000000008494                 jnz     short loc_849C
.text:0000000000008496                 cmp     rax, 40h ; '@'
.text:000000000000849A                 jle     short loc_8459
.text:000000000000849C
.text:000000000000849C loc_849C:                               ; CODE XREF: str2sig+A4↑j
.text:000000000000849C                                         ; str2sig+EE↓j ...
.text:000000000000849C                 mov     dword ptr [r13+0], 0FFFFFFFFh
.text:00000000000084A4                 mov     eax, 0FFFFFFFFh
.text:00000000000084A9                 jmp     short loc_8460
.text:00000000000084A9 ; ---------------------------------------------------------------------------
.text:00000000000084AB                 align 10h
.text:00000000000084B0
.text:00000000000084B0 loc_84B0:                               ; CODE XREF: str2sig+4A↑j
.text:00000000000084B0                 call    ___libc_current_sigrtmin
.text:00000000000084B5                 mov     ebp, eax
.text:00000000000084B7                 call    ___libc_current_sigrtmax
.text:00000000000084BC                 test    ebp, ebp
.text:00000000000084BE                 mov     ebx, eax
.text:00000000000084C0                 jle     short loc_84DC
.text:00000000000084C2                 lea     rdi, aRtmin     ; "RTMIN"
.text:00000000000084C9                 mov     ecx, 5
.text:00000000000084CE                 mov     rsi, r12
.text:00000000000084D1                 repe cmpsb
.text:00000000000084D3                 setnbe  al
.text:00000000000084D6                 sbb     al, 0
.text:00000000000084D8                 test    al, al
.text:00000000000084DA                 jz      short loc_8533
.text:00000000000084DC
.text:00000000000084DC loc_84DC:                               ; CODE XREF: str2sig+D0↑j
.text:00000000000084DC                 test    ebx, ebx
.text:00000000000084DE                 jle     short loc_849C
.text:00000000000084E0                 lea     rdi, aRtmax     ; "RTMAX"
.text:00000000000084E7                 mov     ecx, 5
.text:00000000000084EC                 mov     rsi, r12
.text:00000000000084EF                 repe cmpsb
.text:00000000000084F1                 setnbe  al
.text:00000000000084F4                 sbb     al, 0
.text:00000000000084F6                 test    al, al
.text:00000000000084F8                 jnz     short loc_849C
.text:00000000000084FA                 lea     rdi, [r12+5]    ; nptr
.text:00000000000084FF                 mov     edx, 0Ah        ; base
.text:0000000000008504                 mov     rsi, rsp        ; endptr
.text:0000000000008507                 call    _strtol
.text:000000000000850C                 mov     rdx, [rsp+38h+var_38]
.text:0000000000008510                 cmp     byte ptr [rdx], 0
.text:0000000000008513                 jnz     short loc_849C
.text:0000000000008515                 sub     ebp, ebx
.text:0000000000008517                 movsxd  rbp, ebp
.text:000000000000851A                 cmp     rax, rbp
.text:000000000000851D                 jl      loc_849C
.text:0000000000008523                 test    rax, rax
.text:0000000000008526                 jg      loc_849C
.text:000000000000852C                 add     eax, ebx
.text:000000000000852E                 jmp     loc_8459
.text:0000000000008533 ; ---------------------------------------------------------------------------
.text:0000000000008533
.text:0000000000008533 loc_8533:                               ; CODE XREF: str2sig+EA↑j
.text:0000000000008533                 lea     rdi, [r12+5]    ; nptr
.text:0000000000008538                 mov     edx, 0Ah        ; base
.text:000000000000853D                 mov     rsi, rsp        ; endptr
.text:0000000000008540                 call    _strtol
.text:0000000000008545                 mov     rdx, [rsp+38h+var_38]
.text:0000000000008549                 cmp     byte ptr [rdx], 0
.text:000000000000854C                 jnz     loc_849C
.text:0000000000008552                 test    rax, rax
.text:0000000000008555                 js      loc_849C
.text:000000000000855B                 sub     ebx, ebp
.text:000000000000855D                 movsxd  rdx, ebx
.text:0000000000008560                 cmp     rax, rdx
.text:0000000000008563                 jg      loc_849C
.text:0000000000008569                 add     eax, ebp
.text:000000000000856B                 jmp     loc_8459
.text:0000000000008570 ; ---------------------------------------------------------------------------
.text:0000000000008570
.text:0000000000008570 loc_8570:                               ; CODE XREF: str2sig+7E↑j
.text:0000000000008570                 call    ___stack_chk_fail
.text:0000000000008570 ; } // starts at 83F0
.text:0000000000008570 str2sig         endp
.text:0000000000008570
.text:0000000000008570 ; ---------------------------------------------------------------------------
.text:0000000000008575                 align 20h
.text:0000000000008580
.text:0000000000008580 ; =============== S U B R O U T I N E =======================================
.text:0000000000008580
.text:0000000000008580
.text:0000000000008580                 public sig2str
.text:0000000000008580 sig2str         proc near               ; CODE XREF: closeout+24A↑p
.text:0000000000008580
.text:0000000000008580 var_20          = qword ptr -20h
.text:0000000000008580
.text:0000000000008580 ; __unwind {
.text:0000000000008580                 push    rbp
.text:0000000000008581                 lea     rax, numname_table
.text:0000000000008588                 push    rbx
.text:0000000000008589                 xor     edx, edx
.text:000000000000858B                 mov     ebx, edi
.text:000000000000858D                 mov     rdi, rsi        ; dest
.text:0000000000008590                 sub     rsp, 18h
.text:0000000000008594                 mov     rcx, rax
.text:0000000000008597                 jmp     short loc_85AC
.text:0000000000008597 ; ---------------------------------------------------------------------------
.text:0000000000008599                 align 20h
.text:00000000000085A0
.text:00000000000085A0 loc_85A0:                               ; CODE XREF: sig2str+2E↓j
.text:00000000000085A0                 add     edx, 1
.text:00000000000085A3                 add     rcx, 0Ch
.text:00000000000085A7                 cmp     edx, 23h ; '#'
.text:00000000000085AA                 jz      short loc_85D0
.text:00000000000085AC
.text:00000000000085AC loc_85AC:                               ; CODE XREF: sig2str+17↑j
.text:00000000000085AC                 cmp     [rcx], ebx
.text:00000000000085AE                 jnz     short loc_85A0
.text:00000000000085B0                 lea     rdx, [rdx+rdx*2]
.text:00000000000085B4                 lea     rsi, [rax+rdx*4+4] ; src
.text:00000000000085B9                 call    _strcpy
.text:00000000000085BE                 xor     eax, eax
.text:00000000000085C0
.text:00000000000085C0 loc_85C0:                               ; CODE XREF: sig2str+8F↓j
.text:00000000000085C0                                         ; sig2str+D6↓j
.text:00000000000085C0                 add     rsp, 18h
.text:00000000000085C4                 pop     rbx
.text:00000000000085C5                 pop     rbp
.text:00000000000085C6                 retn
.text:00000000000085C6 ; ---------------------------------------------------------------------------
.text:00000000000085C7                 align 10h
.text:00000000000085D0
.text:00000000000085D0 loc_85D0:                               ; CODE XREF: sig2str+2A↑j
.text:00000000000085D0                 mov     [rsp+28h+var_20], rdi
.text:00000000000085D5                 call    ___libc_current_sigrtmin
.text:00000000000085DA                 mov     ebp, eax
.text:00000000000085DC                 call    ___libc_current_sigrtmax
.text:00000000000085E1                 cmp     ebp, ebx
.text:00000000000085E3                 jg      short loc_8651
.text:00000000000085E5                 cmp     eax, ebx
.text:00000000000085E7                 jl      short loc_8651
.text:00000000000085E9                 mov     edx, eax
.text:00000000000085EB                 mov     rdi, [rsp+28h+var_20]
.text:00000000000085F0                 sub     edx, ebp
.text:00000000000085F2                 sar     edx, 1
.text:00000000000085F4                 add     edx, ebp
.text:00000000000085F6                 cmp     edx, ebx
.text:00000000000085F8                 jge     short loc_8640
.text:00000000000085FA                 mov     edx, 58h ; 'X'
.text:00000000000085FF                 mov     dword ptr [rdi], 414D5452h
.text:0000000000008605                 mov     ebp, eax
.text:0000000000008607                 mov     [rdi+4], dx
.text:000000000000860B
.text:000000000000860B loc_860B:                               ; CODE XREF: sig2str+CF↓j
.text:000000000000860B                 mov     eax, ebx
.text:000000000000860D                 sub     eax, ebp
.text:000000000000860F                 jz      short loc_85C0
.text:0000000000008611                 lea     rcx, aD_0       ; "%+d"
.text:0000000000008618                 mov     r8d, eax
.text:000000000000861B                 add     rdi, 5
.text:000000000000861F                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008626                 mov     esi, 1
.text:000000000000862B                 xor     eax, eax
.text:000000000000862D                 call    ___sprintf_chk
.text:0000000000008632                 add     rsp, 18h
.text:0000000000008636                 xor     eax, eax
.text:0000000000008638                 pop     rbx
.text:0000000000008639                 pop     rbp
.text:000000000000863A                 retn
.text:000000000000863A ; ---------------------------------------------------------------------------
.text:000000000000863B                 align 20h
.text:0000000000008640
.text:0000000000008640 loc_8640:                               ; CODE XREF: sig2str+78↑j
.text:0000000000008640                 mov     ecx, 4Eh ; 'N'
.text:0000000000008645                 mov     dword ptr [rdi], 494D5452h
.text:000000000000864B                 mov     [rdi+4], cx
.text:000000000000864F                 jmp     short loc_860B
.text:0000000000008651 ; ---------------------------------------------------------------------------
.text:0000000000008651
.text:0000000000008651 loc_8651:                               ; CODE XREF: sig2str+63↑j
.text:0000000000008651                                         ; sig2str+67↑j
.text:0000000000008651                 mov     eax, 0FFFFFFFFh
.text:0000000000008656                 jmp     loc_85C0
.text:0000000000008656 ; } // starts at 8580
.text:0000000000008656 sig2str         endp
.text:0000000000008656
.text:0000000000008656 ; ---------------------------------------------------------------------------
.text:000000000000865B                 align 20h
.text:0000000000008660
.text:0000000000008660 ; =============== S U B R O U T I N E =======================================
.text:0000000000008660
.text:0000000000008660 ; Attributes: info_from_lumina
.text:0000000000008660
.text:0000000000008660 ; int __fastcall close_stream(FILE *stream)
.text:0000000000008660                 public close_stream
.text:0000000000008660 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000008660                                         ; close_stdout+33↑p
.text:0000000000008660 ; __unwind {
.text:0000000000008660                 push    r12
.text:0000000000008662                 push    rbp
.text:0000000000008663                 mov     rbp, rdi
.text:0000000000008666                 push    rbx
.text:0000000000008667                 call    ___fpending
.text:000000000000866C                 mov     ebx, [rbp+0]
.text:000000000000866F                 mov     rdi, rbp        ; stream
.text:0000000000008672                 mov     r12, rax
.text:0000000000008675                 call    rpl_fclose
.text:000000000000867A                 and     ebx, 20h
.text:000000000000867D                 test    ebx, ebx
.text:000000000000867F                 jnz     short loc_8698
.text:0000000000008681                 test    eax, eax
.text:0000000000008683                 jz      short loc_868F
.text:0000000000008685                 test    r12, r12
.text:0000000000008688                 mov     eax, 0FFFFFFFFh
.text:000000000000868D                 jz      short loc_86C8
.text:000000000000868F
.text:000000000000868F loc_868F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000868F                 pop     rbx
.text:0000000000008690                 pop     rbp
.text:0000000000008691                 pop     r12
.text:0000000000008693                 retn
.text:0000000000008693 ; ---------------------------------------------------------------------------
.text:0000000000008694                 align 8
.text:0000000000008698
.text:0000000000008698 loc_8698:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000008698                 test    eax, eax
.text:000000000000869A                 jnz     short loc_86B8
.text:000000000000869C                 call    ___errno_location
.text:00000000000086A1                 mov     dword ptr [rax], 0
.text:00000000000086A7                 mov     eax, 0FFFFFFFFh
.text:00000000000086AC                 pop     rbx
.text:00000000000086AD                 pop     rbp
.text:00000000000086AE                 pop     r12
.text:00000000000086B0                 retn
.text:00000000000086B0 ; ---------------------------------------------------------------------------
.text:00000000000086B1                 align 8
.text:00000000000086B8
.text:00000000000086B8 loc_86B8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000086B8                 pop     rbx
.text:00000000000086B9                 mov     eax, 0FFFFFFFFh
.text:00000000000086BE                 pop     rbp
.text:00000000000086BF                 pop     r12
.text:00000000000086C1                 retn
.text:00000000000086C1 ; ---------------------------------------------------------------------------
.text:00000000000086C2                 align 8
.text:00000000000086C8
.text:00000000000086C8 loc_86C8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000086C8                 call    ___errno_location
.text:00000000000086CD                 cmp     dword ptr [rax], 9
.text:00000000000086D0                 pop     rbx
.text:00000000000086D1                 pop     rbp
.text:00000000000086D2                 pop     r12
.text:00000000000086D4                 setnz   al
.text:00000000000086D7                 movzx   eax, al
.text:00000000000086DA                 neg     eax
.text:00000000000086DC                 retn
.text:00000000000086DC ; } // starts at 8660
.text:00000000000086DC close_stream    endp
.text:00000000000086DC
.text:00000000000086DC ; ---------------------------------------------------------------------------
.text:00000000000086DD                 align 20h
.text:00000000000086E0
.text:00000000000086E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086E0
.text:00000000000086E0
.text:00000000000086E0                 public hard_locale
.text:00000000000086E0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000086E0 ; __unwind {
.text:00000000000086E0                 sub     rsp, 8
.text:00000000000086E4                 xor     esi, esi        ; locale
.text:00000000000086E6                 call    _setlocale
.text:00000000000086EB                 mov     rdx, rax
.text:00000000000086EE                 mov     eax, 1
.text:00000000000086F3                 test    rdx, rdx
.text:00000000000086F6                 jz      short loc_8715
.text:00000000000086F8                 lea     rdi, aC         ; "C"
.text:00000000000086FF                 mov     ecx, 2
.text:0000000000008704                 mov     rsi, rdx
.text:0000000000008707                 repe cmpsb
.text:0000000000008709                 setnbe  cl
.text:000000000000870C                 sbb     cl, 0
.text:000000000000870F                 xor     eax, eax
.text:0000000000008711                 test    cl, cl
.text:0000000000008713                 jnz     short loc_8720
.text:0000000000008715
.text:0000000000008715 loc_8715:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000008715                 add     rsp, 8
.text:0000000000008719                 retn
.text:0000000000008719 ; ---------------------------------------------------------------------------
.text:000000000000871A                 align 20h
.text:0000000000008720
.text:0000000000008720 loc_8720:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000008720                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000008727                 mov     ecx, 6
.text:000000000000872C                 mov     rsi, rdx
.text:000000000000872F                 repe cmpsb
.text:0000000000008731                 setnbe  al
.text:0000000000008734                 sbb     al, 0
.text:0000000000008736                 test    al, al
.text:0000000000008738                 setnz   al
.text:000000000000873B                 add     rsp, 8
.text:000000000000873F                 retn
.text:000000000000873F ; } // starts at 86E0
.text:000000000000873F hard_locale     endp
.text:000000000000873F
.text:0000000000008740
.text:0000000000008740 ; =============== S U B R O U T I N E =======================================
.text:0000000000008740
.text:0000000000008740
.text:0000000000008740                 public locale_charset
.text:0000000000008740 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000008740 ; __unwind {
.text:0000000000008740                 sub     rsp, 8
.text:0000000000008744                 mov     edi, 0Eh        ; item
.text:0000000000008749                 call    _nl_langinfo
.text:000000000000874E                 test    rax, rax
.text:0000000000008751                 jz      short loc_8770
.text:0000000000008753                 cmp     byte ptr [rax], 0
.text:0000000000008756                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000875D                 cmovz   rax, rdx
.text:0000000000008761                 add     rsp, 8
.text:0000000000008765                 retn
.text:0000000000008765 ; ---------------------------------------------------------------------------
.text:0000000000008766                 align 10h
.text:0000000000008770
.text:0000000000008770 loc_8770:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000008770                 lea     rax, aAscii     ; "ASCII"
.text:0000000000008777                 add     rsp, 8
.text:000000000000877B                 retn
.text:000000000000877B ; } // starts at 8740
.text:000000000000877B locale_charset  endp
.text:000000000000877B
.text:000000000000877B ; ---------------------------------------------------------------------------
.text:000000000000877C                 align 20h
.text:0000000000008780
.text:0000000000008780 ; =============== S U B R O U T I N E =======================================
.text:0000000000008780
.text:0000000000008780
.text:0000000000008780                 public dup_safer
.text:0000000000008780 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000008780 ; __unwind {
.text:0000000000008780                 mov     edx, 3
.text:0000000000008785                 xor     esi, esi
.text:0000000000008787                 xor     eax, eax
.text:0000000000008789                 jmp     rpl_fcntl
.text:0000000000008789 ; } // starts at 8780
.text:0000000000008789 dup_safer       endp
.text:0000000000008789
.text:0000000000008789 ; ---------------------------------------------------------------------------
.text:000000000000878E                 align 10h
.text:0000000000008790
.text:0000000000008790 ; =============== S U B R O U T I N E =======================================
.text:0000000000008790
.text:0000000000008790
.text:0000000000008790 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000008790                 public rpl_fcntl
.text:0000000000008790 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000008790
.text:0000000000008790 var_68          = dword ptr -68h
.text:0000000000008790 var_60          = qword ptr -60h
.text:0000000000008790 var_58          = qword ptr -58h
.text:0000000000008790 var_50          = qword ptr -50h
.text:0000000000008790 var_48          = byte ptr -48h
.text:0000000000008790 var_38          = qword ptr -38h
.text:0000000000008790 var_30          = qword ptr -30h
.text:0000000000008790 var_28          = qword ptr -28h
.text:0000000000008790 var_20          = qword ptr -20h
.text:0000000000008790 arg_0           = byte ptr  8
.text:0000000000008790
.text:0000000000008790 ; __unwind {
.text:0000000000008790                 push    r12
.text:0000000000008792                 push    rbp
.text:0000000000008793                 mov     ebp, edi
.text:0000000000008795                 push    rbx
.text:0000000000008796                 sub     rsp, 50h
.text:000000000000879A                 mov     rax, fs:28h
.text:00000000000087A3                 mov     [rsp+68h+var_50], rax
.text:00000000000087A8                 xor     eax, eax
.text:00000000000087AA                 lea     rax, [rsp+68h+arg_0]
.text:00000000000087AF                 test    esi, esi
.text:00000000000087B1                 mov     [rsp+68h+var_38], rdx
.text:00000000000087B6                 mov     [rsp+68h+var_30], rcx
.text:00000000000087BB                 mov     [rsp+68h+var_28], r8
.text:00000000000087C0                 mov     [rsp+68h+var_60], rax
.text:00000000000087C5                 lea     rax, [rsp+68h+var_48]
.text:00000000000087CA                 mov     [rsp+68h+var_20], r9
.text:00000000000087CF                 mov     [rsp+68h+var_68], 10h
.text:00000000000087D6                 mov     [rsp+68h+var_58], rax
.text:00000000000087DB                 jz      loc_89E2
.text:00000000000087E1                 cmp     esi, 406h
.text:00000000000087E7                 jnz     short loc_8830
.text:00000000000087E9                 mov     rax, [rsp+68h+var_58]
.text:00000000000087EE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:00000000000087F5                 mov     [rsp+68h+var_68], 18h
.text:00000000000087FC                 mov     r12d, [rax+10h]
.text:0000000000008800                 mov     edx, r12d
.text:0000000000008803                 js      loc_8933
.text:0000000000008809                 xor     eax, eax
.text:000000000000880B                 mov     esi, 406h       ; cmd
.text:0000000000008810                 call    _fcntl
.text:0000000000008815                 test    eax, eax
.text:0000000000008817                 mov     ebx, eax
.text:0000000000008819                 js      loc_89A8
.text:000000000000881F
.text:000000000000881F loc_881F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000881F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000008829                 jmp     short loc_8870
.text:0000000000008829 ; ---------------------------------------------------------------------------
.text:000000000000882B                 align 10h
.text:0000000000008830
.text:0000000000008830 loc_8830:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000008830                 cmp     esi, 0Bh
.text:0000000000008833                 jz      short loc_8860
.text:0000000000008835                 jg      short loc_8890
.text:0000000000008837                 cmp     esi, 4
.text:000000000000883A                 jz      loc_8910
.text:0000000000008840                 jg      loc_8900
.text:0000000000008846                 cmp     esi, 2
.text:0000000000008849                 jz      loc_8910
.text:000000000000884F                 jg      short loc_8860
.text:0000000000008851                 cmp     esi, 1
.text:0000000000008854                 jnz     short loc_88B8
.text:0000000000008856                 db      2Eh
.text:0000000000008856                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008860
.text:0000000000008860 loc_8860:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000008860                                         ; rpl_fcntl+BF↑j ...
.text:0000000000008860                 mov     edi, ebp        ; fd
.text:0000000000008862                 xor     eax, eax
.text:0000000000008864                 call    _fcntl
.text:0000000000008869                 mov     ebx, eax
.text:000000000000886B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008870
.text:0000000000008870 loc_8870:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000008870                                         ; rpl_fcntl+147↓j ...
.text:0000000000008870                 mov     rcx, [rsp+68h+var_50]
.text:0000000000008875                 xor     rcx, fs:28h
.text:000000000000887E                 mov     eax, ebx
.text:0000000000008880                 jnz     loc_89DD
.text:0000000000008886                 add     rsp, 50h
.text:000000000000888A                 pop     rbx
.text:000000000000888B                 pop     rbp
.text:000000000000888C                 pop     r12
.text:000000000000888E                 retn
.text:000000000000888E ; ---------------------------------------------------------------------------
.text:000000000000888F                 align 10h
.text:0000000000008890
.text:0000000000008890 loc_8890:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000008890                 cmp     esi, 407h
.text:0000000000008896                 jg      short loc_88E0
.text:0000000000008898                 cmp     esi, 406h
.text:000000000000889E                 jge     short loc_8910
.text:00000000000088A0                 cmp     esi, 401h
.text:00000000000088A6                 jz      short loc_8860
.text:00000000000088A8                 cmp     esi, 402h
.text:00000000000088AE                 jz      short loc_8910
.text:00000000000088B0                 cmp     esi, 400h
.text:00000000000088B6                 jz      short loc_8910
.text:00000000000088B8
.text:00000000000088B8 loc_88B8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:00000000000088B8                                         ; rpl_fcntl+164↓j ...
.text:00000000000088B8                 mov     eax, [rsp+68h+var_68]
.text:00000000000088BB                 cmp     eax, 2Fh ; '/'
.text:00000000000088BE                 ja      loc_89FA
.text:00000000000088C4                 add     rax, [rsp+68h+var_58]
.text:00000000000088C9
.text:00000000000088C9 loc_88C9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:00000000000088C9                 mov     rdx, [rax]
.text:00000000000088CC                 mov     edi, ebp        ; fd
.text:00000000000088CE                 xor     eax, eax
.text:00000000000088D0                 call    _fcntl
.text:00000000000088D5                 mov     ebx, eax
.text:00000000000088D7                 jmp     short loc_8870
.text:00000000000088D7 ; ---------------------------------------------------------------------------
.text:00000000000088D9                 align 20h
.text:00000000000088E0
.text:00000000000088E0 loc_88E0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:00000000000088E0                 cmp     esi, 409h
.text:00000000000088E6                 jz      short loc_8910
.text:00000000000088E8                 jl      loc_8860
.text:00000000000088EE                 cmp     esi, 40Ah
.text:00000000000088F4                 jnz     short loc_88B8
.text:00000000000088F6                 jmp     loc_8860
.text:00000000000088F6 ; ---------------------------------------------------------------------------
.text:00000000000088FB                 align 20h
.text:0000000000008900
.text:0000000000008900 loc_8900:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000008900                 cmp     esi, 9
.text:0000000000008903                 jz      loc_8860
.text:0000000000008909                 jg      short loc_8910
.text:000000000000890B                 cmp     esi, 8
.text:000000000000890E                 jnz     short loc_88B8
.text:0000000000008910
.text:0000000000008910 loc_8910:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000008910                                         ; rpl_fcntl+B9↑j ...
.text:0000000000008910                 mov     eax, [rsp+68h+var_68]
.text:0000000000008913                 cmp     eax, 2Fh ; '/'
.text:0000000000008916                 ja      loc_8A04
.text:000000000000891C                 add     rax, [rsp+68h+var_58]
.text:0000000000008921
.text:0000000000008921 loc_8921:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000008921                 mov     edx, [rax]
.text:0000000000008923                 mov     edi, ebp        ; fd
.text:0000000000008925                 xor     eax, eax
.text:0000000000008927                 call    _fcntl
.text:000000000000892C                 mov     ebx, eax
.text:000000000000892E                 jmp     loc_8870
.text:0000000000008933 ; ---------------------------------------------------------------------------
.text:0000000000008933
.text:0000000000008933 loc_8933:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000008933                 xor     esi, esi        ; cmd
.text:0000000000008935                 xor     eax, eax
.text:0000000000008937                 call    _fcntl
.text:000000000000893C                 test    eax, eax
.text:000000000000893E                 mov     ebx, eax
.text:0000000000008940                 js      loc_8870
.text:0000000000008946                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000894D                 jnz     loc_8870
.text:0000000000008953
.text:0000000000008953 loc_8953:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000008953                 xor     eax, eax
.text:0000000000008955                 mov     esi, 1          ; cmd
.text:000000000000895A                 mov     edi, ebx        ; fd
.text:000000000000895C                 call    _fcntl
.text:0000000000008961                 test    eax, eax
.text:0000000000008963                 js      short loc_8981
.text:0000000000008965                 or      eax, 1
.text:0000000000008968                 mov     esi, 2          ; cmd
.text:000000000000896D                 mov     edi, ebx        ; fd
.text:000000000000896F                 mov     edx, eax
.text:0000000000008971                 xor     eax, eax
.text:0000000000008973                 call    _fcntl
.text:0000000000008978                 cmp     eax, 0FFFFFFFFh
.text:000000000000897B                 jnz     loc_8870
.text:0000000000008981
.text:0000000000008981 loc_8981:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000008981                 call    ___errno_location
.text:0000000000008986                 mov     r12d, [rax]
.text:0000000000008989                 mov     rbp, rax
.text:000000000000898C                 mov     edi, ebx        ; fd
.text:000000000000898E                 call    _close
.text:0000000000008993                 mov     ebx, 0FFFFFFFFh
.text:0000000000008998                 mov     [rbp+0], r12d
.text:000000000000899C                 jmp     loc_8870
.text:000000000000899C ; ---------------------------------------------------------------------------
.text:00000000000089A1                 align 8
.text:00000000000089A8
.text:00000000000089A8 loc_89A8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:00000000000089A8                 call    ___errno_location
.text:00000000000089AD                 cmp     dword ptr [rax], 16h
.text:00000000000089B0                 jnz     loc_881F
.text:00000000000089B6                 xor     esi, esi        ; cmd
.text:00000000000089B8                 xor     eax, eax
.text:00000000000089BA                 mov     edx, r12d
.text:00000000000089BD                 mov     edi, ebp        ; fd
.text:00000000000089BF                 call    _fcntl
.text:00000000000089C4                 test    eax, eax
.text:00000000000089C6                 mov     ebx, eax
.text:00000000000089C8                 js      loc_8870
.text:00000000000089CE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000089D8                 jmp     loc_8953
.text:00000000000089DD ; ---------------------------------------------------------------------------
.text:00000000000089DD
.text:00000000000089DD loc_89DD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:00000000000089DD                 call    ___stack_chk_fail
.text:00000000000089E2 ; ---------------------------------------------------------------------------
.text:00000000000089E2
.text:00000000000089E2 loc_89E2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:00000000000089E2                 mov     rax, [rsp+68h+var_58]
.text:00000000000089E7                 xor     esi, esi        ; cmd
.text:00000000000089E9                 mov     edx, [rax+10h]
.text:00000000000089EC                 xor     eax, eax
.text:00000000000089EE                 call    _fcntl
.text:00000000000089F3                 mov     ebx, eax
.text:00000000000089F5                 jmp     loc_8870
.text:00000000000089FA ; ---------------------------------------------------------------------------
.text:00000000000089FA
.text:00000000000089FA loc_89FA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:00000000000089FA                 mov     rax, [rsp+68h+var_60]
.text:00000000000089FF                 jmp     loc_88C9
.text:0000000000008A04 ; ---------------------------------------------------------------------------
.text:0000000000008A04
.text:0000000000008A04 loc_8A04:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000008A04                 mov     rax, [rsp+68h+var_60]
.text:0000000000008A09                 jmp     loc_8921
.text:0000000000008A09 ; } // starts at 8790
.text:0000000000008A09 rpl_fcntl       endp
.text:0000000000008A09
.text:0000000000008A09 ; ---------------------------------------------------------------------------
.text:0000000000008A0E                 align 10h
.text:0000000000008A10
.text:0000000000008A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A10
.text:0000000000008A10 ; Attributes: info_from_lumina
.text:0000000000008A10
.text:0000000000008A10 ; void _libc_csu_init(void)
.text:0000000000008A10                 public __libc_csu_init
.text:0000000000008A10 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000008A10 ; __unwind {
.text:0000000000008A10                 push    r15
.text:0000000000008A12                 push    r14
.text:0000000000008A14                 mov     r15, rdx
.text:0000000000008A17                 push    r13
.text:0000000000008A19                 push    r12
.text:0000000000008A1B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000008A22                 push    rbp
.text:0000000000008A23                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000008A2A                 push    rbx
.text:0000000000008A2B                 mov     r13d, edi
.text:0000000000008A2E                 mov     r14, rsi
.text:0000000000008A31                 sub     rbp, r12
.text:0000000000008A34                 sub     rsp, 8
.text:0000000000008A38                 sar     rbp, 3
.text:0000000000008A3C                 call    _init_proc
.text:0000000000008A41                 test    rbp, rbp
.text:0000000000008A44                 jz      short loc_8A66
.text:0000000000008A46                 xor     ebx, ebx
.text:0000000000008A48                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008A50
.text:0000000000008A50 loc_8A50:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000008A50                 mov     rdx, r15
.text:0000000000008A53                 mov     rsi, r14
.text:0000000000008A56                 mov     edi, r13d
.text:0000000000008A59                 call    ds:(__frame_dummy_init_array_entry - 20B8F0h)[r12+rbx*8]
.text:0000000000008A5D                 add     rbx, 1
.text:0000000000008A61                 cmp     rbp, rbx
.text:0000000000008A64                 jnz     short loc_8A50
.text:0000000000008A66
.text:0000000000008A66 loc_8A66:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000008A66                 add     rsp, 8
.text:0000000000008A6A                 pop     rbx
.text:0000000000008A6B                 pop     rbp
.text:0000000000008A6C                 pop     r12
.text:0000000000008A6E                 pop     r13
.text:0000000000008A70                 pop     r14
.text:0000000000008A72                 pop     r15
.text:0000000000008A74                 retn
.text:0000000000008A74 ; } // starts at 8A10
.text:0000000000008A74 __libc_csu_init endp
.text:0000000000008A74
.text:0000000000008A74 ; ---------------------------------------------------------------------------
.text:0000000000008A75                 align 20h
.text:0000000000008A80
.text:0000000000008A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A80
.text:0000000000008A80
.text:0000000000008A80 ; void _libc_csu_fini(void)
.text:0000000000008A80                 public __libc_csu_fini
.text:0000000000008A80 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000008A80 ; __unwind {
.text:0000000000008A80                 rep retn
.text:0000000000008A80 ; } // starts at 8A80
.text:0000000000008A80 __libc_csu_fini endp
.text:0000000000008A80
.text:0000000000008A80 ; ---------------------------------------------------------------------------
.text:0000000000008A82                 align 10h
.text:0000000000008A90
.text:0000000000008A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A90
.text:0000000000008A90
.text:0000000000008A90 atexit          proc near               ; CODE XREF: main+7A↑p
.text:0000000000008A90 ; __unwind {
.text:0000000000008A90                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000008A97                 xor     esi, esi        ; obj
.text:0000000000008A99                 jmp     ___cxa_atexit
.text:0000000000008A99 ; } // starts at 8A90
.text:0000000000008A99 atexit          endp
.text:0000000000008A99
.text:0000000000008A99 _text           ends
.text:0000000000008A99
LOAD:0000000000008A9E ; ===========================================================================
LOAD:0000000000008A9E
LOAD:0000000000008A9E ; Segment type: Pure code
LOAD:0000000000008A9E ; Segment permissions: Read/Execute
LOAD:0000000000008A9E LOAD            segment byte public 'CODE' use64
LOAD:0000000000008A9E                 assume cs:LOAD
LOAD:0000000000008A9E                 ;org 8A9Eh
LOAD:0000000000008A9E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008A9E                 align 20h
LOAD:0000000000008A9E LOAD            ends
LOAD:0000000000008A9E
.fini:0000000000008AA0 ; ===========================================================================
.fini:0000000000008AA0
.fini:0000000000008AA0 ; Segment type: Pure code
.fini:0000000000008AA0 ; Segment permissions: Read/Execute
.fini:0000000000008AA0 _fini           segment dword public 'CODE' use64
.fini:0000000000008AA0                 assume cs:_fini
.fini:0000000000008AA0                 ;org 8AA0h
.fini:0000000000008AA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000008AA0
.fini:0000000000008AA0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000008AA0
.fini:0000000000008AA0
.fini:0000000000008AA0                 public _term_proc
.fini:0000000000008AA0 _term_proc      proc near
.fini:0000000000008AA0                 sub     rsp, 8          ; _fini
.fini:0000000000008AA4                 add     rsp, 8
.fini:0000000000008AA8                 retn
.fini:0000000000008AA8 _term_proc      endp
.fini:0000000000008AA8
.fini:0000000000008AA8 _fini           ends
.fini:0000000000008AA8
LOAD:0000000000008AA9 ; ===========================================================================
LOAD:0000000000008AA9
LOAD:0000000000008AA9 ; Segment type: Pure code
LOAD:0000000000008AA9 ; Segment permissions: Read/Execute
LOAD:0000000000008AA9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000008AA9                 assume cs:LOAD
LOAD:0000000000008AA9                 ;org 8AA9h
LOAD:0000000000008AA9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008AA9                 align 20h
LOAD:0000000000008AA9 LOAD            ends
LOAD:0000000000008AA9
.rodata:0000000000008AC0 ; ===========================================================================
.rodata:0000000000008AC0
.rodata:0000000000008AC0 ; Segment type: Pure data
.rodata:0000000000008AC0 ; Segment permissions: Read
.rodata:0000000000008AC0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000008AC0                 assume cs:_rodata
.rodata:0000000000008AC0                 ;org 8AC0h
.rodata:0000000000008AC0                 public _IO_stdin_used
.rodata:0000000000008AC0 _IO_stdin_used  db    1
.rodata:0000000000008AC1                 db    0
.rodata:0000000000008AC2                 db    2
.rodata:0000000000008AC3                 db    0
.rodata:0000000000008AC4 ; const char file[]
.rodata:0000000000008AC4 file            db '../coreutils-8.31/src/split.c',0
.rodata:0000000000008AC4                                         ; DATA XREF: main+1962↑o
.rodata:0000000000008AC4                                         ; main+1BCF↑o ...
.rodata:0000000000008AE2 ; const char aWiden[]
.rodata:0000000000008AE2 aWiden          db '! widen',0          ; DATA XREF: next_file_name+2B5↑o
.rodata:0000000000008AEA ; const char path[]
.rodata:0000000000008AEA path            db '/bin/sh',0          ; DATA XREF: create+48↑o
.rodata:0000000000008AF2 ; const char aCreatingFileS[]
.rodata:0000000000008AF2 aCreatingFileS  db 'creating file %s',0Ah,0
.rodata:0000000000008AF2                                         ; DATA XREF: create+32D↑o
.rodata:0000000000008B04 ; const char aFailedToStatS[]
.rodata:0000000000008B04 aFailedToStatS  db 'failed to stat %s',0
.rodata:0000000000008B04                                         ; DATA XREF: create+4FF↑o
.rodata:0000000000008B16 ; const char aSErrorTruncati[]
.rodata:0000000000008B16 aSErrorTruncati db '%s: error truncating',0
.rodata:0000000000008B16                                         ; DATA XREF: create+27D↑o
.rodata:0000000000008B2B ; const char name[]
.rodata:0000000000008B2B name            db 'SHELL',0            ; DATA XREF: create+2F↑o
.rodata:0000000000008B31 ; const char aFile[]
.rodata:0000000000008B31 aFile           db 'FILE',0             ; DATA XREF: create+3B↑o
.rodata:0000000000008B36 ; const char aExecutingWithF[]
.rodata:0000000000008B36 aExecutingWithF db 'executing with FILE=%s',0Ah,0
.rodata:0000000000008B36                                         ; DATA XREF: create+2BF↑o
.rodata:0000000000008B4E ; const char aFailedToCreate[]
.rodata:0000000000008B4E aFailedToCreate db 'failed to create pipe',0
.rodata:0000000000008B4E                                         ; DATA XREF: create:loc_452D↑o
.rodata:0000000000008B64 ; const char aClosingPriorPi[]
.rodata:0000000000008B64 aClosingPriorPi db 'closing prior pipe',0
.rodata:0000000000008B64                                         ; DATA XREF: create:loc_44D0↑o
.rodata:0000000000008B77 ; const char aClosingOutputP[]
.rodata:0000000000008B77 aClosingOutputP db 'closing output pipe',0
.rodata:0000000000008B77                                         ; DATA XREF: create:loc_459A↑o
.rodata:0000000000008B8B ; const char aMovingInputPip[]
.rodata:0000000000008B8B aMovingInputPip db 'moving input pipe',0
.rodata:0000000000008B8B                                         ; DATA XREF: create:loc_45BE↑o
.rodata:0000000000008B9D ; const char aClosingInputPi[]
.rodata:0000000000008B9D aClosingInputPi db 'closing input pipe',0
.rodata:0000000000008B9D                                         ; DATA XREF: create:loc_43E8↑o
.rodata:0000000000008BB0 aC_0            db '-c',0               ; DATA XREF: create+1A1↑o
.rodata:0000000000008BB0                                         ; .data.rel.ro:000000000020BB48↓o
.rodata:0000000000008BB3 ; const char aForkSystemCall[]
.rodata:0000000000008BB3 aForkSystemCall db 'fork system call failed',0
.rodata:0000000000008BB3                                         ; DATA XREF: create:loc_464D↑o
.rodata:0000000000008BCB ; const char aFailedToCloseI[]
.rodata:0000000000008BCB aFailedToCloseI db 'failed to close input pipe',0
.rodata:0000000000008BCB                                         ; DATA XREF: create:loc_4621↑o
.rodata:0000000000008BE6 ; const char modes[]
.rodata:0000000000008BE6 modes           db 'a',0                ; DATA XREF: ofile_open:loc_4778↑o
.rodata:0000000000008BE8 ; const char aWaitingForChil[]
.rodata:0000000000008BE8 aWaitingForChil db 'waiting for child process',0
.rodata:0000000000008BE8                                         ; DATA XREF: closeout+219↑o
.rodata:0000000000008C02 aD              db '%d',0               ; DATA XREF: closeout:loc_4B20↑o
.rodata:0000000000008C05 aSplit          db 'split',0            ; DATA XREF: main+241↑o
.rodata:0000000000008C05                                         ; usage+1CE↑o ...
.rodata:0000000000008C0B asc_8C0B        db '[',0                ; DATA XREF: usage+1DA↑o
.rodata:0000000000008C0D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+201↑o
.rodata:0000000000008C1D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000008C1D                                         ; DATA XREF: usage+231↑o
.rodata:0000000000008C1D                                         ; usage+32C↑o ...
.rodata:0000000000008C33 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+242↑o
.rodata:0000000000008C3D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+24E↑o
.rodata:0000000000008C4C aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1E1↑o
.rodata:0000000000008C56 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+20D↑o
.rodata:0000000000008C60 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+225↑o
.rodata:0000000000008C6A ; const char aSOnlineHelpS[]
.rodata:0000000000008C6A aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+29A↑o
.rodata:0000000000008C6A                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000008C81 unk_8C81        db  47h ; G             ; DATA XREF: main+23A↑o
.rodata:0000000000008C81                                         ; usage+2B6↑o ...
.rodata:0000000000008C82                 db  4Eh ; N
.rodata:0000000000008C83                 db  55h ; U
.rodata:0000000000008C84                 db  20h
.rodata:0000000000008C85 ; const char domainname[]
.rodata:0000000000008C85 domainname      db 'coreutils',0        ; DATA XREF: main+5B↑o
.rodata:0000000000008C85                                         ; main+67↑o ...
.rodata:0000000000008C8F ; const char aEn[]
.rodata:0000000000008C8F aEn             db 'en_',0              ; DATA XREF: usage+2DD↑o
.rodata:0000000000008C8F                                         ; usage+39E↑o
.rodata:0000000000008C93 ; const char aFullDocumentat[]
.rodata:0000000000008C93 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000008C93                                         ; DATA XREF: usage:loc_51B9↑o
.rodata:0000000000008C93                                         ; usage:loc_5276↑o
.rodata:0000000000008CAE ; const char dirname[]
.rodata:0000000000008CAE dirname         db '/usr/local/share/locale',0
.rodata:0000000000008CAE                                         ; DATA XREF: main+54↑o
.rodata:0000000000008CC6 ; const char shortopts[]
.rodata:0000000000008CC6 shortopts       db '0123456789C:a:b:del:n:t:ux',0
.rodata:0000000000008CC6                                         ; DATA XREF: main+CB↑o
.rodata:0000000000008CE1 ; const char aInvalidSuffixL[]
.rodata:0000000000008CE1 aInvalidSuffixL db 'invalid suffix length',0
.rodata:0000000000008CE1                                         ; DATA XREF: main:loc_24C0↑o
.rodata:0000000000008CF7 ; const char msgid[]
.rodata:0000000000008CF7 msgid           db 'invalid number of bytes',0
.rodata:0000000000008CF7                                         ; DATA XREF: main+16A↑o
.rodata:0000000000008CF7                                         ; main+492↑o
.rodata:0000000000008D0F ; const char aInvalidNumberO_0[]
.rodata:0000000000008D0F aInvalidNumberO_0 db 'invalid number of lines',0
.rodata:0000000000008D0F                                         ; DATA XREF: main+31A↑o
.rodata:0000000000008D0F                                         ; main+1C90↑o
.rodata:0000000000008D27 aR              db 'r/',0               ; DATA XREF: main+3A2↑o
.rodata:0000000000008D2A ; const char asc_8D2A[]
.rodata:0000000000008D2A asc_8D2A        db 'l/',0               ; DATA XREF: main:loc_2583↑o
.rodata:0000000000008D2D ; const char aInvalidNumberO_1[]
.rodata:0000000000008D2D aInvalidNumberO_1 db 'invalid number of chunks',0
.rodata:0000000000008D2D                                         ; DATA XREF: main+3EF↑o
.rodata:0000000000008D2D                                         ; main+1AF0↑o
.rodata:0000000000008D46 ; const char aInvalidChunkNu[]
.rodata:0000000000008D46 aInvalidChunkNu db 'invalid chunk number',0
.rodata:0000000000008D46                                         ; DATA XREF: main+434↑o
.rodata:0000000000008D46                                         ; .data.rel.ro:000000000020B960↓o
.rodata:0000000000008D5B ; const char aEmptyRecordSep[]
.rodata:0000000000008D5B aEmptyRecordSep db 'empty record separator',0
.rodata:0000000000008D5B                                         ; DATA XREF: main:loc_3C40↑o
.rodata:0000000000008D5B                                         ; .data.rel.ro:000000000020BA80↓o
.rodata:0000000000008D72 ; const char s2[]
.rodata:0000000000008D72 s2              db '\0',0               ; DATA XREF: main+2CB↑o
.rodata:0000000000008D72                                         ; main:loc_3C64↑o
.rodata:0000000000008D75 ; const char aMultiCharacter[]
.rodata:0000000000008D75 aMultiCharacter db 'multi-character separator %s',0
.rodata:0000000000008D75                                         ; DATA XREF: main+1D05↑o
.rodata:0000000000008D92 a0123456789     db '0123456789',0       ; DATA XREF: main+675↑o
.rodata:0000000000008D9D a0123456789abcd db '0123456789abcdef',0 ; DATA XREF: main:loc_25BB↑o
.rodata:0000000000008DAE ; const char aInvalidIoBlock[]
.rodata:0000000000008DAE aInvalidIoBlock db 'invalid IO block size',0
.rodata:0000000000008DAE                                         ; DATA XREF: main:loc_2508↑o
.rodata:0000000000008DC4 aRichardMStallm db 'Richard M. Stallman',0
.rodata:0000000000008DC4                                         ; DATA XREF: main+22C↑o
.rodata:0000000000008DD8 aTorbjornGranlu db 'Torbjorn Granlund',0
.rodata:0000000000008DD8                                         ; DATA XREF: main+233↑o
.rodata:0000000000008DEA ; const char format[]
.rodata:0000000000008DEA format          db '%s: %s',0           ; DATA XREF: main+1B06↑o
.rodata:0000000000008DEA                                         ; main+1CA6↑o ...
.rodata:0000000000008DF1 ; const char aExtraOperandS[]
.rodata:0000000000008DF1 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+1A8D↑o
.rodata:0000000000008E02 ; const char aCannotOpenSFor[]
.rodata:0000000000008E02 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:0000000000008E02                                         ; DATA XREF: main+1A50↑o
.rodata:0000000000008E1D ; const char aNKNNFileSize[]
.rodata:0000000000008E1D aNKNNFileSize   db 'n && k <= n && n <= file_size',0
.rodata:0000000000008E1D                                         ; DATA XREF: main+1BD6↑o
.rodata:0000000000008E3B ; const char aWriteError[]
.rodata:0000000000008E3B aWriteError     db 'write error',0      ; DATA XREF: main+135A↑o
.rodata:0000000000008E3B                                         ; main+1479↑o ...
.rodata:0000000000008E47 aLineBytes      db 'line-bytes',0       ; DATA XREF: .data.rel.ro:000000000020B940↓o
.rodata:0000000000008E52 aElideEmptyFile db 'elide-empty-files',0
.rodata:0000000000008E52                                         ; DATA XREF: .data.rel.ro:000000000020B980↓o
.rodata:0000000000008E64 aUnbuffered     db 'unbuffered',0       ; DATA XREF: .data.rel.ro:000000000020B9A0↓o
.rodata:0000000000008E6F aSuffixLength   db 'suffix-length',0    ; DATA XREF: .data.rel.ro:000000000020B9C0↓o
.rodata:0000000000008E7D aAdditionalSuff db 'additional-suffix',0
.rodata:0000000000008E7D                                         ; DATA XREF: .data.rel.ro:000000000020B9E0↓o
.rodata:0000000000008E8F aNumericSuffixe db 'numeric-suffixes',0 ; DATA XREF: .data.rel.ro:000000000020BA00↓o
.rodata:0000000000008EA0 aHexSuffixes    db 'hex-suffixes',0     ; DATA XREF: .data.rel.ro:000000000020BA20↓o
.rodata:0000000000008EAD aFilter         db 'filter',0           ; DATA XREF: .data.rel.ro:000000000020BA40↓o
.rodata:0000000000008EB4 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020BA60↓o
.rodata:0000000000008EBC aIoBlksize      db '-io-blksize',0      ; DATA XREF: .data.rel.ro:000000000020BAA0↓o
.rodata:0000000000008EC8 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020BAC0↓o
.rodata:0000000000008ECD aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020BAE0↓o
.rodata:0000000000008ED5 aAbcdefghijklmn db 'abcdefghijklmnopqrstuvwxyz',0
.rodata:0000000000008ED5                                         ; DATA XREF: .data:suffix_alphabet↓o
.rodata:0000000000008EF0 ; const char aOutputFileSuff[]
.rodata:0000000000008EF0 aOutputFileSuff db 'output file suffixes exhausted',0
.rodata:0000000000008EF0                                         ; DATA XREF: next_file_name:loc_409E↑o
.rodata:0000000000008F0F                 align 10h
.rodata:0000000000008F10 ; const char aSWouldOverwrit[]
.rodata:0000000000008F10 aSWouldOverwrit db '%s would overwrite input; aborting',0
.rodata:0000000000008F10                                         ; DATA XREF: create+480↑o
.rodata:0000000000008F33                 align 8
.rodata:0000000000008F38 ; const char aFailedToSetFil[]
.rodata:0000000000008F38 aFailedToSetFil db 'failed to set FILE environment variable',0
.rodata:0000000000008F38                                         ; DATA XREF: create:loc_4501↑o
.rodata:0000000000008F60 ; const char aFailedToRunCom[]
.rodata:0000000000008F60 aFailedToRunCom db 'failed to run command: "%s -c %s"',0
.rodata:0000000000008F60                                         ; DATA XREF: create+1BB↑o
.rodata:0000000000008F82                 align 8
.rodata:0000000000008F88 ; const char aWithFileSSigna[]
.rodata:0000000000008F88 aWithFileSSigna db 'with FILE=%s, signal %s from command: %s',0
.rodata:0000000000008F88                                         ; DATA XREF: closeout+269↑o
.rodata:0000000000008FB1                 align 8
.rodata:0000000000008FB8 ; const char aWithFileSExitD[]
.rodata:0000000000008FB8 aWithFileSExitD db 'with FILE=%s, exit %d from command: %s',0
.rodata:0000000000008FB8                                         ; DATA XREF: closeout+1D1↑o
.rodata:0000000000008FDF                 align 20h
.rodata:0000000000008FE0 ; const char aUnknownStatusF[]
.rodata:0000000000008FE0 aUnknownStatusF db 'unknown status from command (0x%X)',0
.rodata:0000000000008FE0                                         ; DATA XREF: closeout:loc_4B45↑o
.rodata:0000000000009003                 align 8
.rodata:0000000000009008 ; const char aTrySHelpForMor[]
.rodata:0000000000009008 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000009008                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000902F                 align 10h
.rodata:0000000000009030 ; const char aUsageSOptionFi[]
.rodata:0000000000009030 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE [PREFIX]]',0Ah,0
.rodata:0000000000009030                                         ; DATA XREF: usage:loc_4F1D↑o
.rodata:0000000000009057                 align 8
.rodata:0000000000009058 ; const char aOutputPiecesOf[]
.rodata:0000000000009058 aOutputPiecesOf db 'Output pieces of FILE to PREFIXaa, PREFIXab, ...;',0Ah
.rodata:0000000000009058                                         ; DATA XREF: usage+84↑o
.rodata:0000000000009058                 db 'default size is 1000 lines, and default PREFIX is ',27h,'x',27h,'.'
.rodata:0000000000009058                 db 0Ah,0
.rodata:00000000000090C2                 align 8
.rodata:00000000000090C8 ; const char aWithNoFileOrWh[]
.rodata:00000000000090C8 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:00000000000090C8                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000009100 ; const char aMandatoryArgum[]
.rodata:0000000000009100 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000009100                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000009100                 db 'ns too.',0Ah,0
.rodata:000000000000914B                 align 10h
.rodata:0000000000009150 ; const char aASuffixLengthN[]
.rodata:0000000000009150 aASuffixLengthN db '  -a, --suffix-length=N   generate suffixes of length N (default '
.rodata:0000000000009150                                         ; DATA XREF: usage+EC↑o
.rodata:0000000000009150                 db '%d)',0Ah
.rodata:0000000000009150                 db '      --additional-suffix=SUFFIX  append an additional SUFFIX to '
.rodata:0000000000009150                 db 'file names',0Ah
.rodata:0000000000009150                 db '  -b, --bytes=SIZE        put SIZE bytes per output file',0Ah
.rodata:0000000000009150                 db '  -C, --line-bytes=SIZE   put at most SIZE bytes of records per o'
.rodata:0000000000009150                 db 'utput file',0Ah
.rodata:0000000000009150                 db '  -d                      use numeric suffixes starting at 0, not'
.rodata:0000000000009150                 db ' alphabetic',0Ah
.rodata:0000000000009150                 db '      --numeric-suffixes[=FROM]  same as -d, but allow setting th'
.rodata:0000000000009150                 db 'e start value',0Ah
.rodata:0000000000009150                 db '  -x                      use hex suffixes starting at 0, not alp'
.rodata:0000000000009150                 db 'habetic',0Ah
.rodata:0000000000009150                 db '      --hex-suffixes[=FROM]  same as -x, but allow setting the st'
.rodata:0000000000009150                 db 'art value',0Ah
.rodata:0000000000009150                 db '  -e, --elide-empty-files  do not generate empty output files wit'
.rodata:0000000000009150                 db 'h ',27h,'-n',27h,0Ah
.rodata:0000000000009150                 db '      --filter=COMMAND    write to shell COMMAND; file name is $F'
.rodata:0000000000009150                 db 'ILE',0Ah
.rodata:0000000000009150                 db '  -l, --lines=NUMBER      put NUMBER lines/records per output fil'
.rodata:0000000000009150                 db 'e',0Ah
.rodata:0000000000009150                 db '  -n, --number=CHUNKS     generate CHUNKS output files; see expla'
.rodata:0000000000009150                 db 'nation below',0Ah
.rodata:0000000000009150                 db '  -t, --separator=SEP     use SEP instead of newline as the recor'
.rodata:0000000000009150                 db 'd separator;',0Ah
.rodata:0000000000009150                 db '                            ',27h,'\0',27h,' (zero) specifies the'
.rodata:0000000000009150                 db ' NUL character',0Ah
.rodata:0000000000009150                 db '  -u, --unbuffered        immediately copy input to output with ',27h
.rodata:0000000000009150                 db '-n r/...',27h,0Ah,0
.rodata:0000000000009592                 align 8
.rodata:0000000000009598 ; const char aVerbosePrintAD[]
.rodata:0000000000009598 aVerbosePrintAD db '      --verbose           print a diagnostic just before each',0Ah
.rodata:0000000000009598                                         ; DATA XREF: usage+121↑o
.rodata:0000000000009598                 db '                            output file is opened',0Ah,0
.rodata:0000000000009609                 align 10h
.rodata:0000000000009610 ; const char aHelpDisplayThi[]
.rodata:0000000000009610 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000009610                                         ; DATA XREF: usage+146↑o
.rodata:000000000000963D                 align 20h
.rodata:0000000000009640 ; const char aVersionOutputV[]
.rodata:0000000000009640 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000009640                                         ; DATA XREF: usage+16B↑o
.rodata:0000000000009676                 align 8
.rodata:0000000000009678 ; const char aTheSizeArgumen[]
.rodata:0000000000009678 aTheSizeArgumen db 0Ah                  ; DATA XREF: usage+190↑o
.rodata:0000000000009678                 db 'The SIZE argument is an integer and optional unit (example: 10K i'
.rodata:0000000000009678                 db 's 10*1024).',0Ah
.rodata:0000000000009678                 db 'Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers o'
.rodata:0000000000009678                 db 'f 1000).',0Ah
.rodata:0000000000009678                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:000000000000974C                 align 10h
.rodata:0000000000009750 ; const char aChunksMayBeNSp[]
.rodata:0000000000009750 aChunksMayBeNSp db 0Ah                  ; DATA XREF: usage+1B5↑o
.rodata:0000000000009750                 db 'CHUNKS may be:',0Ah
.rodata:0000000000009750                 db '  N       split into N files based on size of input',0Ah
.rodata:0000000000009750                 db '  K/N     output Kth of N to stdout',0Ah
.rodata:0000000000009750                 db '  l/N     split into N files without splitting lines/records',0Ah
.rodata:0000000000009750                 db '  l/K/N   output Kth of N to stdout without splitting lines/recor'
.rodata:0000000000009750                 db 'ds',0Ah
.rodata:0000000000009750                 db '  r/N     like ',27h,'l',27h,' but use round robin distribution',0Ah
.rodata:0000000000009750                 db '  r/K/N   likewise but only output Kth of N to stdout',0Ah,0
.rodata:00000000000098A4                 align 8
.rodata:00000000000098A8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000098A8                                         ; DATA XREF: usage+2AF↑o
.rodata:00000000000098A8                                         ; usage+313↑o ...
.rodata:00000000000098D0 ; const char aReportAnyTrans[]
.rodata:00000000000098D0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000098D0                                         ; DATA XREF: usage+407↑o
.rodata:00000000000098D0                 db 'am/>',0Ah,0
.rodata:0000000000009917                 align 8
.rodata:0000000000009918 ; const char aOrAvailableLoc[]
.rodata:0000000000009918 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000009918                                         ; DATA XREF: usage:loc_51FE↑o
.rodata:000000000000994B                 align 10h
.rodata:0000000000009950 aInvalidSuffixS db 'invalid suffix %s, contains directory separator',0
.rodata:0000000000009950                                         ; DATA XREF: main+1ACE↑o
.rodata:0000000000009980 aCannotSplitInM db 'cannot split in more than one way',0
.rodata:0000000000009980                                         ; DATA XREF: main+1CCD↑o
.rodata:00000000000099A2                 align 8
.rodata:00000000000099A8 ; const char aMultipleSepara[]
.rodata:00000000000099A8 aMultipleSepara db 'multiple separator characters specified',0
.rodata:00000000000099A8                                         ; DATA XREF: main:loc_3CB9↑o
.rodata:00000000000099D0 ; const char aLineCountOptio[]
.rodata:00000000000099D0 aLineCountOptio db 'line count option -%s%c... is too large',0
.rodata:00000000000099D0                                         ; DATA XREF: main+1B99↑o
.rodata:00000000000099F8 ; const char aSInvalidStartV_0[]
.rodata:00000000000099F8 aSInvalidStartV_0 db '%s: invalid start value for numerical suffix',0
.rodata:00000000000099F8                                         ; DATA XREF: main+1C4D↑o
.rodata:0000000000009A25                 align 8
.rodata:0000000000009A28 aSInvalidStartV db '%s: invalid start value for hexadecimal suffix',0
.rodata:0000000000009A28                                         ; DATA XREF: main+1C3C↑o
.rodata:0000000000009A57                 align 8
.rodata:0000000000009A58 ; const char aFilterDoesNotP[]
.rodata:0000000000009A58 aFilterDoesNotP db '--filter does not process a chunk extracted to stdout',0
.rodata:0000000000009A58                                         ; DATA XREF: main:loc_390B↑o
.rodata:0000000000009A8E                 align 10h
.rodata:0000000000009A90 ; const char aTheSuffixLengt[]
.rodata:0000000000009A90 aTheSuffixLengt db 'the suffix length needs to be at least %lu',0
.rodata:0000000000009A90                                         ; DATA XREF: main:loc_3B3C↑o
.rodata:0000000000009ABB                 align 20h
.rodata:0000000000009AC0 aNumericalSuffi db 'numerical suffix start value is too large for the suffix length',0
.rodata:0000000000009AC0                                         ; DATA XREF: main+773↑o
.rodata:0000000000009B00 ; const char aSCannotDetermi[]
.rodata:0000000000009B00 aSCannotDetermi db '%s: cannot determine file size',0
.rodata:0000000000009B00                                         ; DATA XREF: main+FAD↑o
.rodata:0000000000009B1F                 align 20h
.rodata:0000000000009B20 ; const char assertion[]
.rodata:0000000000009B20 assertion       db 'k && n && k <= n && n <= file_size',0
.rodata:0000000000009B20                                         ; DATA XREF: main+1969↑o
.rodata:0000000000009B43                 align 10h
.rodata:0000000000009B50 jpt_28A8        dd offset loc_2B29 - 9B50h
.rodata:0000000000009B50                                         ; DATA XREF: main+8BA↑o
.rodata:0000000000009B50                                         ; main+8C1↑r
.rodata:0000000000009B50                 dd offset loc_2A81 - 9B50h ; jump table for switch statement
.rodata:0000000000009B50                 dd offset loc_2A81 - 9B50h
.rodata:0000000000009B50                 dd offset loc_2EE7 - 9B50h
.rodata:0000000000009B50                 dd offset loc_2CF9 - 9B50h
.rodata:0000000000009B50                 dd offset loc_30CA - 9B50h
.rodata:0000000000009B68                 align 10h
.rodata:0000000000009B70 ; const char _PRETTY_FUNCTION___7242[]
.rodata:0000000000009B70 __PRETTY_FUNCTION___7242 db 'lines_chunk_split',0
.rodata:0000000000009B70                                         ; DATA XREF: main:loc_3BA8↑o
.rodata:0000000000009B82                 align 10h
.rodata:0000000000009B90 ; const char _PRETTY_FUNCTION___7285[]
.rodata:0000000000009B90 __PRETTY_FUNCTION___7285 db 'bytes_chunk_extract',0
.rodata:0000000000009B90                                         ; DATA XREF: main:loc_393B↑o
.rodata:0000000000009BA4                 align 8
.rodata:0000000000009BA8 ; const char _PRETTY_FUNCTION___7087[]
.rodata:0000000000009BA8 __PRETTY_FUNCTION___7087 db 'next_file_name',0
.rodata:0000000000009BA8                                         ; DATA XREF: next_file_name:loc_40C7↑o
.rodata:0000000000009BB7                 align 8
.rodata:0000000000009BB8 multipliers_7397 db 'bEGKkMmPTYZ0',0    ; DATA XREF: main+18A↑o
.rodata:0000000000009BB8                                         ; main+4B2↑o ...
.rodata:0000000000009BC5 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000009BCA                 align 10h
.rodata:0000000000009BD0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000009BD0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000009C08 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000009C10 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000009C10                                         ; main+7F↑o ...
.rodata:0000000000009C14 unk_9C14        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000009C15                 db  80h
.rodata:0000000000009C16                 db  98h
.rodata:0000000000009C17                 db    0
.rodata:0000000000009C18 unk_9C18        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000009C19                 db  80h
.rodata:0000000000009C1A                 db  99h
.rodata:0000000000009C1B                 db    0
.rodata:0000000000009C1C unk_9C1C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000009C1D                 db    7
.rodata:0000000000009C1E                 db  65h ; e
.rodata:0000000000009C1F                 db    0
.rodata:0000000000009C20 unk_9C20        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000009C21                 db 0AFh
.rodata:0000000000009C22                 db    0
.rodata:0000000000009C23 unk_9C23        db  22h ; "             ; DATA XREF: gettext_quote:loc_56D0↑o
.rodata:0000000000009C23                                         ; quotearg_buffer_restyled:loc_648B↑o ...
.rodata:0000000000009C24                 db    0
.rodata:0000000000009C25 ; const char asc_9C25[2]
.rodata:0000000000009C25 asc_9C25        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000009C25                                         ; quotearg_buffer_restyled:loc_5853↑o ...
.rodata:0000000000009C27 ; const char asc_9C27[2]
.rodata:0000000000009C27 asc_9C27        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000009C27                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000009C29 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000009C31 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020BB28↓o
.rodata:0000000000009C37 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020BB30↓o
.rodata:0000000000009C44 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020BB38↓o
.rodata:0000000000009C44                                         ; .data.rel.ro:000000000020BB58↓o
.rodata:0000000000009C51 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000009C51                                         ; DATA XREF: .data.rel.ro:000000000020BB40↓o
.rodata:0000000000009C65 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020BB50↓o
.rodata:0000000000009C6D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020BB68↓o
.rodata:0000000000009C75                 align 20h
.rodata:0000000000009C80 jpt_5831        dd offset loc_65DA - 9C80h
.rodata:0000000000009C80                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000009C80                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000009C80                 dd offset loc_5833 - 9C80h ; jump table for switch statement
.rodata:0000000000009C80                 dd offset loc_6808 - 9C80h
.rodata:0000000000009C80                 dd offset loc_6614 - 9C80h
.rodata:0000000000009C80                 dd offset loc_6404 - 9C80h
.rodata:0000000000009C80                 dd offset loc_6460 - 9C80h
.rodata:0000000000009C80                 dd offset loc_64B5 - 9C80h
.rodata:0000000000009C80                 dd offset loc_64FA - 9C80h
.rodata:0000000000009C80                 dd offset loc_6534 - 9C80h
.rodata:0000000000009C80                 dd offset loc_6534 - 9C80h
.rodata:0000000000009C80                 dd offset loc_6534 - 9C80h
.rodata:0000000000009CAC jpt_598E        dd offset loc_5BB0 - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000009CAC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh ; jump table for switch statement
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset loc_5BF0 - 9CACh, offset loc_5AF8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5AB8 - 9CACh, offset loc_5C80 - 9CACh, offset loc_5C70 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C60 - 9CACh, offset loc_5C50 - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset def_598E - 9CACh
.rodata:0000000000009CAC                 dd offset def_598E - 9CACh, offset def_598E - 9CACh, offset loc_5C40 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C30 - 9CACh, offset loc_5C30 - 9CACh, offset loc_5C00 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C30 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5C30 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5A93 - 9CACh, offset loc_5C30 - 9CACh, offset loc_5C30 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C30 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5C30 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C30 - 9CACh, offset loc_5C30 - 9CACh, offset loc_5C30 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5A63 - 9CACh, offset def_598E - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5C30 - 9CACh, offset loc_5B08 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5C30 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C30 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh, offset loc_5BD8 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5993 - 9CACh, offset loc_5C30 - 9CACh, offset loc_5993 - 9CACh
.rodata:0000000000009CAC                 dd offset loc_5C00 - 9CACh
.rodata:0000000000009EA8 jpt_5D1A        dd offset loc_5D80 - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000009EA8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h ; jump table for switch statement
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset loc_5D70 - 9EA8h, offset loc_5EC0 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5EA8 - 9EA8h, offset loc_5D58 - 9EA8h, offset loc_5E98 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5D40 - 9EA8h, offset loc_5E80 - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h
.rodata:0000000000009EA8                 dd offset def_5D1A - 9EA8h, offset def_5D1A - 9EA8h, offset loc_5E68 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E50 - 9EA8h, offset loc_5E50 - 9EA8h, offset loc_5E38 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E50 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E50 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5A90 - 9EA8h, offset loc_5E50 - 9EA8h, offset loc_5E50 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E50 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E50 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E50 - 9EA8h, offset loc_5E50 - 9EA8h, offset loc_5E50 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5A60 - 9EA8h, offset def_5D1A - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E50 - 9EA8h, offset loc_5D20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E50 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E50 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h, offset loc_5E20 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5990 - 9EA8h, offset loc_5E50 - 9EA8h, offset loc_5990 - 9EA8h
.rodata:0000000000009EA8                 dd offset loc_5E38 - 9EA8h
.rodata:000000000000A0A4                 align 20h
.rodata:000000000000A0C0                 public quoting_style_vals
.rodata:000000000000A0C0 quoting_style_vals db    0
.rodata:000000000000A0C1                 db    0
.rodata:000000000000A0C2                 db    0
.rodata:000000000000A0C3                 db    0
.rodata:000000000000A0C4                 db    1
.rodata:000000000000A0C5                 db    0
.rodata:000000000000A0C6                 db    0
.rodata:000000000000A0C7                 db    0
.rodata:000000000000A0C8                 db    2
.rodata:000000000000A0C9                 db    0
.rodata:000000000000A0CA                 db    0
.rodata:000000000000A0CB                 db    0
.rodata:000000000000A0CC                 db    3
.rodata:000000000000A0CD                 db    0
.rodata:000000000000A0CE                 db    0
.rodata:000000000000A0CF                 db    0
.rodata:000000000000A0D0                 db    4
.rodata:000000000000A0D1                 db    0
.rodata:000000000000A0D2                 db    0
.rodata:000000000000A0D3                 db    0
.rodata:000000000000A0D4                 db    5
.rodata:000000000000A0D5                 db    0
.rodata:000000000000A0D6                 db    0
.rodata:000000000000A0D7                 db    0
.rodata:000000000000A0D8                 db    6
.rodata:000000000000A0D9                 db    0
.rodata:000000000000A0DA                 db    0
.rodata:000000000000A0DB                 db    0
.rodata:000000000000A0DC                 db    7
.rodata:000000000000A0DD                 db    0
.rodata:000000000000A0DE                 db    0
.rodata:000000000000A0DF                 db    0
.rodata:000000000000A0E0                 db    8
.rodata:000000000000A0E1                 db    0
.rodata:000000000000A0E2                 db    0
.rodata:000000000000A0E3                 db    0
.rodata:000000000000A0E4                 db    9
.rodata:000000000000A0E5                 db    0
.rodata:000000000000A0E6                 db    0
.rodata:000000000000A0E7                 db    0
.rodata:000000000000A0E8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000A0F4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000A0FB ; const char aC_1[]
.rodata:000000000000A0FB aC_1            db '(C)',0              ; DATA XREF: version_etc_arn:loc_747C↑o
.rodata:000000000000A0FF ; const char aWrittenByS[]
.rodata:000000000000A0FF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000A0FF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000A10F ; const char aWrittenBySAndS[]
.rodata:000000000000A10F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000A10F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000A126 ; const char aWrittenBySSAnd[]
.rodata:000000000000A126 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000A126                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000A142 ; const char aReportBugsToS[]
.rodata:000000000000A142 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000A142                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000A157 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000A157                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000A16D ; const char aSHomePageS[]
.rodata:000000000000A16D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000A16D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000A181                 align 8
.rodata:000000000000A188 ; const char aLicenseGplv3Gn[]
.rodata:000000000000A188 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000A188                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000A188                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000A188                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000A188                 db '.',0Ah
.rodata:000000000000A188                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000A188                 db 0Ah,0
.rodata:000000000000A254                 align 8
.rodata:000000000000A258 ; const char aWrittenBySSSAn[]
.rodata:000000000000A258 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A258                                         ; DATA XREF: version_etc_arn:loc_76D0↑o
.rodata:000000000000A258                 db 'and %s.',0Ah,0
.rodata:000000000000A278 ; const char aWrittenBySSSSA[]
.rodata:000000000000A278 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A278                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000A278                 db '%s, and %s.',0Ah,0
.rodata:000000000000A29C                 align 20h
.rodata:000000000000A2A0 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000A2A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A2A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000A2A0                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000A2C8 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000A2C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A2C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000A2C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000A2F4                 align 8
.rodata:000000000000A2F8 ; const char aWrittenBySSSSS[]
.rodata:000000000000A2F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A2F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000A2F8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000A2F8                 db 'and %s.',0Ah,0
.rodata:000000000000A328 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000A328 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A328                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000A328                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000A328                 db '%s, and %s.',0Ah,0
.rodata:000000000000A35C                 align 20h
.rodata:000000000000A360 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A360                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000A360                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000A360                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000A39C                 align 20h
.rodata:000000000000A3A0 ; const char aGeneralHelpUsi[]
.rodata:000000000000A3A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000A3A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000A3A0                 db 0
.rodata:000000000000A3E1                 align 4
.rodata:000000000000A3E4 jpt_74E4        dd offset loc_7566 - 0A3E4h
.rodata:000000000000A3E4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000A3E4                                         ; version_etc_arn+9D↑r
.rodata:000000000000A3E4                 dd offset loc_75F8 - 0A3E4h ; jump table for switch statement
.rodata:000000000000A3E4                 dd offset loc_7638 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_7680 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_76D0 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_7728 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_7758 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_77C0 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_74F0 - 0A3E4h
.rodata:000000000000A3E4                 dd offset loc_75A0 - 0A3E4h
.rodata:000000000000A40C                 align 20h
.rodata:000000000000A420                 public version_etc_copyright
.rodata:000000000000A420 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000A420                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000A44F ; const char aMemoryExhauste[]
.rodata:000000000000A44F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000A460 ; const char aCoreutils831Li[]
.rodata:000000000000A460 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000A460                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:000000000000A480 ; const char a0StrtolBaseStr[]
.rodata:000000000000A480 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000A480                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:000000000000A4A6                 align 8
.rodata:000000000000A4A8 jpt_7FF6        dd offset loc_8146 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000A4A8                                         ; xstrtoumax+1CF↑r
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_8123 - 0A4A8h ; jump table for switch statement
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_815C - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_80DF - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_7FF8 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset loc_8100 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset loc_80BF - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_809A - 0A4A8h
.rodata:000000000000A4A8                 dd offset loc_8074 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset loc_805D - 0A4A8h, offset loc_8020 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_815C - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_80DF - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_7FF8 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset loc_80BF - 0A4A8h, offset def_7FF6 - 0A4A8h
.rodata:000000000000A4A8                 dd offset def_7FF6 - 0A4A8h, offset loc_8047 - 0A4A8h
.rodata:000000000000A580 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000A580 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:000000000000A580                                         ; DATA XREF: xstrtoumax:loc_81A5↑o
.rodata:000000000000A58B aRtmin          db 'RTMIN',0            ; DATA XREF: str2sig+D2↑o
.rodata:000000000000A591 aRtmax          db 'RTMAX',0            ; DATA XREF: str2sig+F0↑o
.rodata:000000000000A597 aD_0            db '%+d',0              ; DATA XREF: sig2str+91↑o
.rodata:000000000000A59B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000A59D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_8720↑o
.rodata:000000000000A5A3 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000A5A3                                         ; locale_charset:loc_8770↑o
.rodata:000000000000A5A3 _rodata         ends
.rodata:000000000000A5A3
LOAD:000000000000A5A9 ; ===========================================================================
LOAD:000000000000A5A9
LOAD:000000000000A5A9 ; Segment type: Pure code
LOAD:000000000000A5A9 ; Segment permissions: Read/Execute
LOAD:000000000000A5A9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000A5A9                 assume cs:LOAD
LOAD:000000000000A5A9                 ;org 0A5A9h
LOAD:000000000000A5A9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A5A9                 align 4
LOAD:000000000000A5A9 LOAD            ends
LOAD:000000000000A5A9
.eh_frame_hdr:000000000000A5AC ; ===========================================================================
.eh_frame_hdr:000000000000A5AC
.eh_frame_hdr:000000000000A5AC ; Segment type: Pure data
.eh_frame_hdr:000000000000A5AC ; Segment permissions: Read
.eh_frame_hdr:000000000000A5AC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000A5AC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000A5AC                 ;org 0A5ACh
.eh_frame_hdr:000000000000A5AC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000A5AD                 db  1Bh
.eh_frame_hdr:000000000000A5AE                 db    3
.eh_frame_hdr:000000000000A5AF                 db  3Bh ; ;
.eh_frame_hdr:000000000000A5B0                 db 0E8h
.eh_frame_hdr:000000000000A5B1                 db    2
.eh_frame_hdr:000000000000A5B2                 db    0
.eh_frame_hdr:000000000000A5B3                 db    0
.eh_frame_hdr:000000000000A5B4                 db  5Ch ; \
.eh_frame_hdr:000000000000A5B5                 db    0
.eh_frame_hdr:000000000000A5B6                 db    0
.eh_frame_hdr:000000000000A5B7                 db    0
.eh_frame_hdr:000000000000A5B8                 db  74h ; t
.eh_frame_hdr:000000000000A5B9                 db  75h ; u
.eh_frame_hdr:000000000000A5BA                 db 0FFh
.eh_frame_hdr:000000000000A5BB                 db 0FFh
.eh_frame_hdr:000000000000A5BC                 db  34h ; 4
.eh_frame_hdr:000000000000A5BD                 db    3
.eh_frame_hdr:000000000000A5BE                 db    0
.eh_frame_hdr:000000000000A5BF                 db    0
.eh_frame_hdr:000000000000A5C0                 db  24h ; $
.eh_frame_hdr:000000000000A5C1                 db  7Ah ; z
.eh_frame_hdr:000000000000A5C2                 db 0FFh
.eh_frame_hdr:000000000000A5C3                 db 0FFh
.eh_frame_hdr:000000000000A5C4                 db  5Ch ; \
.eh_frame_hdr:000000000000A5C5                 db    3
.eh_frame_hdr:000000000000A5C6                 db    0
.eh_frame_hdr:000000000000A5C7                 db    0
.eh_frame_hdr:000000000000A5C8                 db  34h ; 4
.eh_frame_hdr:000000000000A5C9                 db  7Ah ; z
.eh_frame_hdr:000000000000A5CA                 db 0FFh
.eh_frame_hdr:000000000000A5CB                 db 0FFh
.eh_frame_hdr:000000000000A5CC                 db  2Ch ; ,
.eh_frame_hdr:000000000000A5CD                 db    5
.eh_frame_hdr:000000000000A5CE                 db    0
.eh_frame_hdr:000000000000A5CF                 db    0
.eh_frame_hdr:000000000000A5D0                 db  64h ; d
.eh_frame_hdr:000000000000A5D1                 db  97h
.eh_frame_hdr:000000000000A5D2                 db 0FFh
.eh_frame_hdr:000000000000A5D3                 db 0FFh
.eh_frame_hdr:000000000000A5D4                 db    4
.eh_frame_hdr:000000000000A5D5                 db    3
.eh_frame_hdr:000000000000A5D6                 db    0
.eh_frame_hdr:000000000000A5D7                 db    0
.eh_frame_hdr:000000000000A5D8                 db  74h ; t
.eh_frame_hdr:000000000000A5D9                 db  98h
.eh_frame_hdr:000000000000A5DA                 db 0FFh
.eh_frame_hdr:000000000000A5DB                 db 0FFh
.eh_frame_hdr:000000000000A5DC                 db  74h ; t
.eh_frame_hdr:000000000000A5DD                 db    3
.eh_frame_hdr:000000000000A5DE                 db    0
.eh_frame_hdr:000000000000A5DF                 db    0
.eh_frame_hdr:000000000000A5E0                 db  44h ; D
.eh_frame_hdr:000000000000A5E1                 db  9Bh
.eh_frame_hdr:000000000000A5E2                 db 0FFh
.eh_frame_hdr:000000000000A5E3                 db 0FFh
.eh_frame_hdr:000000000000A5E4                 db 0B0h
.eh_frame_hdr:000000000000A5E5                 db    3
.eh_frame_hdr:000000000000A5E6                 db    0
.eh_frame_hdr:000000000000A5E7                 db    0
.eh_frame_hdr:000000000000A5E8                 db 0D4h
.eh_frame_hdr:000000000000A5E9                 db 0A0h
.eh_frame_hdr:000000000000A5EA                 db 0FFh
.eh_frame_hdr:000000000000A5EB                 db 0FFh
.eh_frame_hdr:000000000000A5EC                 db 0E4h
.eh_frame_hdr:000000000000A5ED                 db    3
.eh_frame_hdr:000000000000A5EE                 db    0
.eh_frame_hdr:000000000000A5EF                 db    0
.eh_frame_hdr:000000000000A5F0                 db 0D4h
.eh_frame_hdr:000000000000A5F1                 db 0A2h
.eh_frame_hdr:000000000000A5F2                 db 0FFh
.eh_frame_hdr:000000000000A5F3                 db 0FFh
.eh_frame_hdr:000000000000A5F4                 db  30h ; 0
.eh_frame_hdr:000000000000A5F5                 db    4
.eh_frame_hdr:000000000000A5F6                 db    0
.eh_frame_hdr:000000000000A5F7                 db    0
.eh_frame_hdr:000000000000A5F8                 db 0D4h
.eh_frame_hdr:000000000000A5F9                 db 0A5h
.eh_frame_hdr:000000000000A5FA                 db 0FFh
.eh_frame_hdr:000000000000A5FB                 db 0FFh
.eh_frame_hdr:000000000000A5FC                 db  6Ch ; l
.eh_frame_hdr:000000000000A5FD                 db    4
.eh_frame_hdr:000000000000A5FE                 db    0
.eh_frame_hdr:000000000000A5FF                 db    0
.eh_frame_hdr:000000000000A600                 db 0E4h
.eh_frame_hdr:000000000000A601                 db 0A6h
.eh_frame_hdr:000000000000A602                 db 0FFh
.eh_frame_hdr:000000000000A603                 db 0FFh
.eh_frame_hdr:000000000000A604                 db  98h
.eh_frame_hdr:000000000000A605                 db    4
.eh_frame_hdr:000000000000A606                 db    0
.eh_frame_hdr:000000000000A607                 db    0
.eh_frame_hdr:000000000000A608                 db  14h
.eh_frame_hdr:000000000000A609                 db 0A9h
.eh_frame_hdr:000000000000A60A                 db 0FFh
.eh_frame_hdr:000000000000A60B                 db 0FFh
.eh_frame_hdr:000000000000A60C                 db    0
.eh_frame_hdr:000000000000A60D                 db    5
.eh_frame_hdr:000000000000A60E                 db    0
.eh_frame_hdr:000000000000A60F                 db    0
.eh_frame_hdr:000000000000A610                 db  44h ; D
.eh_frame_hdr:000000000000A611                 db 0ADh
.eh_frame_hdr:000000000000A612                 db 0FFh
.eh_frame_hdr:000000000000A613                 db 0FFh
.eh_frame_hdr:000000000000A614                 db  8Ch
.eh_frame_hdr:000000000000A615                 db    5
.eh_frame_hdr:000000000000A616                 db    0
.eh_frame_hdr:000000000000A617                 db    0
.eh_frame_hdr:000000000000A618                 db  54h ; T
.eh_frame_hdr:000000000000A619                 db 0ADh
.eh_frame_hdr:000000000000A61A                 db 0FFh
.eh_frame_hdr:000000000000A61B                 db 0FFh
.eh_frame_hdr:000000000000A61C                 db 0A0h
.eh_frame_hdr:000000000000A61D                 db    5
.eh_frame_hdr:000000000000A61E                 db    0
.eh_frame_hdr:000000000000A61F                 db    0
.eh_frame_hdr:000000000000A620                 db  64h ; d
.eh_frame_hdr:000000000000A621                 db 0ADh
.eh_frame_hdr:000000000000A622                 db 0FFh
.eh_frame_hdr:000000000000A623                 db 0FFh
.eh_frame_hdr:000000000000A624                 db 0B4h
.eh_frame_hdr:000000000000A625                 db    5
.eh_frame_hdr:000000000000A626                 db    0
.eh_frame_hdr:000000000000A627                 db    0
.eh_frame_hdr:000000000000A628                 db  14h
.eh_frame_hdr:000000000000A629                 db 0AEh
.eh_frame_hdr:000000000000A62A                 db 0FFh
.eh_frame_hdr:000000000000A62B                 db 0FFh
.eh_frame_hdr:000000000000A62C                 db 0E4h
.eh_frame_hdr:000000000000A62D                 db    5
.eh_frame_hdr:000000000000A62E                 db    0
.eh_frame_hdr:000000000000A62F                 db    0
.eh_frame_hdr:000000000000A630                 db  74h ; t
.eh_frame_hdr:000000000000A631                 db 0AEh
.eh_frame_hdr:000000000000A632                 db 0FFh
.eh_frame_hdr:000000000000A633                 db 0FFh
.eh_frame_hdr:000000000000A634                 db 0F8h
.eh_frame_hdr:000000000000A635                 db    5
.eh_frame_hdr:000000000000A636                 db    0
.eh_frame_hdr:000000000000A637                 db    0
.eh_frame_hdr:000000000000A638                 db 0C4h
.eh_frame_hdr:000000000000A639                 db 0AEh
.eh_frame_hdr:000000000000A63A                 db 0FFh
.eh_frame_hdr:000000000000A63B                 db 0FFh
.eh_frame_hdr:000000000000A63C                 db  24h ; $
.eh_frame_hdr:000000000000A63D                 db    6
.eh_frame_hdr:000000000000A63E                 db    0
.eh_frame_hdr:000000000000A63F                 db    0
.eh_frame_hdr:000000000000A640                 db  34h ; 4
.eh_frame_hdr:000000000000A641                 db 0AFh
.eh_frame_hdr:000000000000A642                 db 0FFh
.eh_frame_hdr:000000000000A643                 db 0FFh
.eh_frame_hdr:000000000000A644                 db  44h ; D
.eh_frame_hdr:000000000000A645                 db    6
.eh_frame_hdr:000000000000A646                 db    0
.eh_frame_hdr:000000000000A647                 db    0
.eh_frame_hdr:000000000000A648                 db  94h
.eh_frame_hdr:000000000000A649                 db 0AFh
.eh_frame_hdr:000000000000A64A                 db 0FFh
.eh_frame_hdr:000000000000A64B                 db 0FFh
.eh_frame_hdr:000000000000A64C                 db  7Ch ; |
.eh_frame_hdr:000000000000A64D                 db    6
.eh_frame_hdr:000000000000A64E                 db    0
.eh_frame_hdr:000000000000A64F                 db    0
.eh_frame_hdr:000000000000A650                 db  14h
.eh_frame_hdr:000000000000A651                 db 0B0h
.eh_frame_hdr:000000000000A652                 db 0FFh
.eh_frame_hdr:000000000000A653                 db 0FFh
.eh_frame_hdr:000000000000A654                 db 0CCh
.eh_frame_hdr:000000000000A655                 db    6
.eh_frame_hdr:000000000000A656                 db    0
.eh_frame_hdr:000000000000A657                 db    0
.eh_frame_hdr:000000000000A658                 db  64h ; d
.eh_frame_hdr:000000000000A659                 db 0B0h
.eh_frame_hdr:000000000000A65A                 db 0FFh
.eh_frame_hdr:000000000000A65B                 db 0FFh
.eh_frame_hdr:000000000000A65C                 db 0E4h
.eh_frame_hdr:000000000000A65D                 db    6
.eh_frame_hdr:000000000000A65E                 db    0
.eh_frame_hdr:000000000000A65F                 db    0
.eh_frame_hdr:000000000000A660                 db    4
.eh_frame_hdr:000000000000A661                 db 0B1h
.eh_frame_hdr:000000000000A662                 db 0FFh
.eh_frame_hdr:000000000000A663                 db 0FFh
.eh_frame_hdr:000000000000A664                 db    4
.eh_frame_hdr:000000000000A665                 db    7
.eh_frame_hdr:000000000000A666                 db    0
.eh_frame_hdr:000000000000A667                 db    0
.eh_frame_hdr:000000000000A668                 db 0F4h
.eh_frame_hdr:000000000000A669                 db 0B1h
.eh_frame_hdr:000000000000A66A                 db 0FFh
.eh_frame_hdr:000000000000A66B                 db 0FFh
.eh_frame_hdr:000000000000A66C                 db  48h ; H
.eh_frame_hdr:000000000000A66D                 db    7
.eh_frame_hdr:000000000000A66E                 db    0
.eh_frame_hdr:000000000000A66F                 db    0
.eh_frame_hdr:000000000000A670                 db  34h ; 4
.eh_frame_hdr:000000000000A671                 db 0C4h
.eh_frame_hdr:000000000000A672                 db 0FFh
.eh_frame_hdr:000000000000A673                 db 0FFh
.eh_frame_hdr:000000000000A674                 db 0C0h
.eh_frame_hdr:000000000000A675                 db    7
.eh_frame_hdr:000000000000A676                 db    0
.eh_frame_hdr:000000000000A677                 db    0
.eh_frame_hdr:000000000000A678                 db 0E4h
.eh_frame_hdr:000000000000A679                 db 0C5h
.eh_frame_hdr:000000000000A67A                 db 0FFh
.eh_frame_hdr:000000000000A67B                 db 0FFh
.eh_frame_hdr:000000000000A67C                 db  2Ch ; ,
.eh_frame_hdr:000000000000A67D                 db    8
.eh_frame_hdr:000000000000A67E                 db    0
.eh_frame_hdr:000000000000A67F                 db    0
.eh_frame_hdr:000000000000A680                 db  24h ; $
.eh_frame_hdr:000000000000A681                 db 0C6h
.eh_frame_hdr:000000000000A682                 db 0FFh
.eh_frame_hdr:000000000000A683                 db 0FFh
.eh_frame_hdr:000000000000A684                 db  58h ; X
.eh_frame_hdr:000000000000A685                 db    8
.eh_frame_hdr:000000000000A686                 db    0
.eh_frame_hdr:000000000000A687                 db    0
.eh_frame_hdr:000000000000A688                 db  44h ; D
.eh_frame_hdr:000000000000A689                 db 0C6h
.eh_frame_hdr:000000000000A68A                 db 0FFh
.eh_frame_hdr:000000000000A68B                 db 0FFh
.eh_frame_hdr:000000000000A68C                 db  6Ch ; l
.eh_frame_hdr:000000000000A68D                 db    8
.eh_frame_hdr:000000000000A68E                 db    0
.eh_frame_hdr:000000000000A68F                 db    0
.eh_frame_hdr:000000000000A690                 db  64h ; d
.eh_frame_hdr:000000000000A691                 db 0C6h
.eh_frame_hdr:000000000000A692                 db 0FFh
.eh_frame_hdr:000000000000A693                 db 0FFh
.eh_frame_hdr:000000000000A694                 db  80h
.eh_frame_hdr:000000000000A695                 db    8
.eh_frame_hdr:000000000000A696                 db    0
.eh_frame_hdr:000000000000A697                 db    0
.eh_frame_hdr:000000000000A698                 db 0A4h
.eh_frame_hdr:000000000000A699                 db 0C6h
.eh_frame_hdr:000000000000A69A                 db 0FFh
.eh_frame_hdr:000000000000A69B                 db 0FFh
.eh_frame_hdr:000000000000A69C                 db  94h
.eh_frame_hdr:000000000000A69D                 db    8
.eh_frame_hdr:000000000000A69E                 db    0
.eh_frame_hdr:000000000000A69F                 db    0
.eh_frame_hdr:000000000000A6A0                 db 0C4h
.eh_frame_hdr:000000000000A6A1                 db 0C6h
.eh_frame_hdr:000000000000A6A2                 db 0FFh
.eh_frame_hdr:000000000000A6A3                 db 0FFh
.eh_frame_hdr:000000000000A6A4                 db 0A8h
.eh_frame_hdr:000000000000A6A5                 db    8
.eh_frame_hdr:000000000000A6A6                 db    0
.eh_frame_hdr:000000000000A6A7                 db    0
.eh_frame_hdr:000000000000A6A8                 db 0F4h
.eh_frame_hdr:000000000000A6A9                 db 0C6h
.eh_frame_hdr:000000000000A6AA                 db 0FFh
.eh_frame_hdr:000000000000A6AB                 db 0FFh
.eh_frame_hdr:000000000000A6AC                 db 0BCh
.eh_frame_hdr:000000000000A6AD                 db    8
.eh_frame_hdr:000000000000A6AE                 db    0
.eh_frame_hdr:000000000000A6AF                 db    0
.eh_frame_hdr:000000000000A6B0                 db  74h ; t
.eh_frame_hdr:000000000000A6B1                 db 0C7h
.eh_frame_hdr:000000000000A6B2                 db 0FFh
.eh_frame_hdr:000000000000A6B3                 db 0FFh
.eh_frame_hdr:000000000000A6B4                 db  10h
.eh_frame_hdr:000000000000A6B5                 db    9
.eh_frame_hdr:000000000000A6B6                 db    0
.eh_frame_hdr:000000000000A6B7                 db    0
.eh_frame_hdr:000000000000A6B8                 db  64h ; d
.eh_frame_hdr:000000000000A6B9                 db 0C8h
.eh_frame_hdr:000000000000A6BA                 db 0FFh
.eh_frame_hdr:000000000000A6BB                 db 0FFh
.eh_frame_hdr:000000000000A6BC                 db  7Ch ; |
.eh_frame_hdr:000000000000A6BD                 db    9
.eh_frame_hdr:000000000000A6BE                 db    0
.eh_frame_hdr:000000000000A6BF                 db    0
.eh_frame_hdr:000000000000A6C0                 db  74h ; t
.eh_frame_hdr:000000000000A6C1                 db 0C8h
.eh_frame_hdr:000000000000A6C2                 db 0FFh
.eh_frame_hdr:000000000000A6C3                 db 0FFh
.eh_frame_hdr:000000000000A6C4                 db  90h
.eh_frame_hdr:000000000000A6C5                 db    9
.eh_frame_hdr:000000000000A6C6                 db    0
.eh_frame_hdr:000000000000A6C7                 db    0
.eh_frame_hdr:000000000000A6C8                 db  14h
.eh_frame_hdr:000000000000A6C9                 db 0C9h
.eh_frame_hdr:000000000000A6CA                 db 0FFh
.eh_frame_hdr:000000000000A6CB                 db 0FFh
.eh_frame_hdr:000000000000A6CC                 db 0BCh
.eh_frame_hdr:000000000000A6CD                 db    9
.eh_frame_hdr:000000000000A6CE                 db    0
.eh_frame_hdr:000000000000A6CF                 db    0
.eh_frame_hdr:000000000000A6D0                 db  34h ; 4
.eh_frame_hdr:000000000000A6D1                 db 0C9h
.eh_frame_hdr:000000000000A6D2                 db 0FFh
.eh_frame_hdr:000000000000A6D3                 db 0FFh
.eh_frame_hdr:000000000000A6D4                 db 0D0h
.eh_frame_hdr:000000000000A6D5                 db    9
.eh_frame_hdr:000000000000A6D6                 db    0
.eh_frame_hdr:000000000000A6D7                 db    0
.eh_frame_hdr:000000000000A6D8                 db  44h ; D
.eh_frame_hdr:000000000000A6D9                 db 0C9h
.eh_frame_hdr:000000000000A6DA                 db 0FFh
.eh_frame_hdr:000000000000A6DB                 db 0FFh
.eh_frame_hdr:000000000000A6DC                 db 0E4h
.eh_frame_hdr:000000000000A6DD                 db    9
.eh_frame_hdr:000000000000A6DE                 db    0
.eh_frame_hdr:000000000000A6DF                 db    0
.eh_frame_hdr:000000000000A6E0                 db  64h ; d
.eh_frame_hdr:000000000000A6E1                 db 0C9h
.eh_frame_hdr:000000000000A6E2                 db 0FFh
.eh_frame_hdr:000000000000A6E3                 db 0FFh
.eh_frame_hdr:000000000000A6E4                 db 0F8h
.eh_frame_hdr:000000000000A6E5                 db    9
.eh_frame_hdr:000000000000A6E6                 db    0
.eh_frame_hdr:000000000000A6E7                 db    0
.eh_frame_hdr:000000000000A6E8                 db  84h
.eh_frame_hdr:000000000000A6E9                 db 0C9h
.eh_frame_hdr:000000000000A6EA                 db 0FFh
.eh_frame_hdr:000000000000A6EB                 db 0FFh
.eh_frame_hdr:000000000000A6EC                 db  0Ch
.eh_frame_hdr:000000000000A6ED                 db  0Ah
.eh_frame_hdr:000000000000A6EE                 db    0
.eh_frame_hdr:000000000000A6EF                 db    0
.eh_frame_hdr:000000000000A6F0                 db  14h
.eh_frame_hdr:000000000000A6F1                 db 0CAh
.eh_frame_hdr:000000000000A6F2                 db 0FFh
.eh_frame_hdr:000000000000A6F3                 db 0FFh
.eh_frame_hdr:000000000000A6F4                 db  28h ; (
.eh_frame_hdr:000000000000A6F5                 db  0Ah
.eh_frame_hdr:000000000000A6F6                 db    0
.eh_frame_hdr:000000000000A6F7                 db    0
.eh_frame_hdr:000000000000A6F8                 db 0A4h
.eh_frame_hdr:000000000000A6F9                 db 0CAh
.eh_frame_hdr:000000000000A6FA                 db 0FFh
.eh_frame_hdr:000000000000A6FB                 db 0FFh
.eh_frame_hdr:000000000000A6FC                 db  44h ; D
.eh_frame_hdr:000000000000A6FD                 db  0Ah
.eh_frame_hdr:000000000000A6FE                 db    0
.eh_frame_hdr:000000000000A6FF                 db    0
.eh_frame_hdr:000000000000A700                 db 0B4h
.eh_frame_hdr:000000000000A701                 db 0CAh
.eh_frame_hdr:000000000000A702                 db 0FFh
.eh_frame_hdr:000000000000A703                 db 0FFh
.eh_frame_hdr:000000000000A704                 db  58h ; X
.eh_frame_hdr:000000000000A705                 db  0Ah
.eh_frame_hdr:000000000000A706                 db    0
.eh_frame_hdr:000000000000A707                 db    0
.eh_frame_hdr:000000000000A708                 db 0C4h
.eh_frame_hdr:000000000000A709                 db 0CAh
.eh_frame_hdr:000000000000A70A                 db 0FFh
.eh_frame_hdr:000000000000A70B                 db 0FFh
.eh_frame_hdr:000000000000A70C                 db  6Ch ; l
.eh_frame_hdr:000000000000A70D                 db  0Ah
.eh_frame_hdr:000000000000A70E                 db    0
.eh_frame_hdr:000000000000A70F                 db    0
.eh_frame_hdr:000000000000A710                 db  64h ; d
.eh_frame_hdr:000000000000A711                 db 0CBh
.eh_frame_hdr:000000000000A712                 db 0FFh
.eh_frame_hdr:000000000000A713                 db 0FFh
.eh_frame_hdr:000000000000A714                 db  88h
.eh_frame_hdr:000000000000A715                 db  0Ah
.eh_frame_hdr:000000000000A716                 db    0
.eh_frame_hdr:000000000000A717                 db    0
.eh_frame_hdr:000000000000A718                 db  74h ; t
.eh_frame_hdr:000000000000A719                 db 0CBh
.eh_frame_hdr:000000000000A71A                 db 0FFh
.eh_frame_hdr:000000000000A71B                 db 0FFh
.eh_frame_hdr:000000000000A71C                 db  9Ch
.eh_frame_hdr:000000000000A71D                 db  0Ah
.eh_frame_hdr:000000000000A71E                 db    0
.eh_frame_hdr:000000000000A71F                 db    0
.eh_frame_hdr:000000000000A720                 db  94h
.eh_frame_hdr:000000000000A721                 db 0CBh
.eh_frame_hdr:000000000000A722                 db 0FFh
.eh_frame_hdr:000000000000A723                 db 0FFh
.eh_frame_hdr:000000000000A724                 db 0B0h
.eh_frame_hdr:000000000000A725                 db  0Ah
.eh_frame_hdr:000000000000A726                 db    0
.eh_frame_hdr:000000000000A727                 db    0
.eh_frame_hdr:000000000000A728                 db 0A4h
.eh_frame_hdr:000000000000A729                 db 0CBh
.eh_frame_hdr:000000000000A72A                 db 0FFh
.eh_frame_hdr:000000000000A72B                 db 0FFh
.eh_frame_hdr:000000000000A72C                 db 0C4h
.eh_frame_hdr:000000000000A72D                 db  0Ah
.eh_frame_hdr:000000000000A72E                 db    0
.eh_frame_hdr:000000000000A72F                 db    0
.eh_frame_hdr:000000000000A730                 db  34h ; 4
.eh_frame_hdr:000000000000A731                 db 0CCh
.eh_frame_hdr:000000000000A732                 db 0FFh
.eh_frame_hdr:000000000000A733                 db 0FFh
.eh_frame_hdr:000000000000A734                 db 0E0h
.eh_frame_hdr:000000000000A735                 db  0Ah
.eh_frame_hdr:000000000000A736                 db    0
.eh_frame_hdr:000000000000A737                 db    0
.eh_frame_hdr:000000000000A738                 db 0D4h
.eh_frame_hdr:000000000000A739                 db 0CCh
.eh_frame_hdr:000000000000A73A                 db 0FFh
.eh_frame_hdr:000000000000A73B                 db 0FFh
.eh_frame_hdr:000000000000A73C                 db 0FCh
.eh_frame_hdr:000000000000A73D                 db  0Ah
.eh_frame_hdr:000000000000A73E                 db    0
.eh_frame_hdr:000000000000A73F                 db    0
.eh_frame_hdr:000000000000A740                 db 0E4h
.eh_frame_hdr:000000000000A741                 db 0CCh
.eh_frame_hdr:000000000000A742                 db 0FFh
.eh_frame_hdr:000000000000A743                 db 0FFh
.eh_frame_hdr:000000000000A744                 db  10h
.eh_frame_hdr:000000000000A745                 db  0Bh
.eh_frame_hdr:000000000000A746                 db    0
.eh_frame_hdr:000000000000A747                 db    0
.eh_frame_hdr:000000000000A748                 db    4
.eh_frame_hdr:000000000000A749                 db 0CDh
.eh_frame_hdr:000000000000A74A                 db 0FFh
.eh_frame_hdr:000000000000A74B                 db 0FFh
.eh_frame_hdr:000000000000A74C                 db  24h ; $
.eh_frame_hdr:000000000000A74D                 db  0Bh
.eh_frame_hdr:000000000000A74E                 db    0
.eh_frame_hdr:000000000000A74F                 db    0
.eh_frame_hdr:000000000000A750                 db  24h ; $
.eh_frame_hdr:000000000000A751                 db 0CDh
.eh_frame_hdr:000000000000A752                 db 0FFh
.eh_frame_hdr:000000000000A753                 db 0FFh
.eh_frame_hdr:000000000000A754                 db  38h ; 8
.eh_frame_hdr:000000000000A755                 db  0Bh
.eh_frame_hdr:000000000000A756                 db    0
.eh_frame_hdr:000000000000A757                 db    0
.eh_frame_hdr:000000000000A758                 db  34h ; 4
.eh_frame_hdr:000000000000A759                 db 0CDh
.eh_frame_hdr:000000000000A75A                 db 0FFh
.eh_frame_hdr:000000000000A75B                 db 0FFh
.eh_frame_hdr:000000000000A75C                 db  4Ch ; L
.eh_frame_hdr:000000000000A75D                 db  0Bh
.eh_frame_hdr:000000000000A75E                 db    0
.eh_frame_hdr:000000000000A75F                 db    0
.eh_frame_hdr:000000000000A760                 db  54h ; T
.eh_frame_hdr:000000000000A761                 db 0CDh
.eh_frame_hdr:000000000000A762                 db 0FFh
.eh_frame_hdr:000000000000A763                 db 0FFh
.eh_frame_hdr:000000000000A764                 db  60h ; `
.eh_frame_hdr:000000000000A765                 db  0Bh
.eh_frame_hdr:000000000000A766                 db    0
.eh_frame_hdr:000000000000A767                 db    0
.eh_frame_hdr:000000000000A768                 db  74h ; t
.eh_frame_hdr:000000000000A769                 db 0CDh
.eh_frame_hdr:000000000000A76A                 db 0FFh
.eh_frame_hdr:000000000000A76B                 db 0FFh
.eh_frame_hdr:000000000000A76C                 db  74h ; t
.eh_frame_hdr:000000000000A76D                 db  0Bh
.eh_frame_hdr:000000000000A76E                 db    0
.eh_frame_hdr:000000000000A76F                 db    0
.eh_frame_hdr:000000000000A770                 db  94h
.eh_frame_hdr:000000000000A771                 db 0CDh
.eh_frame_hdr:000000000000A772                 db 0FFh
.eh_frame_hdr:000000000000A773                 db 0FFh
.eh_frame_hdr:000000000000A774                 db  8Ch
.eh_frame_hdr:000000000000A775                 db  0Bh
.eh_frame_hdr:000000000000A776                 db    0
.eh_frame_hdr:000000000000A777                 db    0
.eh_frame_hdr:000000000000A778                 db 0F4h
.eh_frame_hdr:000000000000A779                 db 0CDh
.eh_frame_hdr:000000000000A77A                 db 0FFh
.eh_frame_hdr:000000000000A77B                 db 0FFh
.eh_frame_hdr:000000000000A77C                 db 0C4h
.eh_frame_hdr:000000000000A77D                 db  0Bh
.eh_frame_hdr:000000000000A77E                 db    0
.eh_frame_hdr:000000000000A77F                 db    0
.eh_frame_hdr:000000000000A780                 db  54h ; T
.eh_frame_hdr:000000000000A781                 db 0CEh
.eh_frame_hdr:000000000000A782                 db 0FFh
.eh_frame_hdr:000000000000A783                 db 0FFh
.eh_frame_hdr:000000000000A784                 db 0FCh
.eh_frame_hdr:000000000000A785                 db  0Bh
.eh_frame_hdr:000000000000A786                 db    0
.eh_frame_hdr:000000000000A787                 db    0
.eh_frame_hdr:000000000000A788                 db  94h
.eh_frame_hdr:000000000000A789                 db 0CEh
.eh_frame_hdr:000000000000A78A                 db 0FFh
.eh_frame_hdr:000000000000A78B                 db 0FFh
.eh_frame_hdr:000000000000A78C                 db  34h ; 4
.eh_frame_hdr:000000000000A78D                 db  0Ch
.eh_frame_hdr:000000000000A78E                 db    0
.eh_frame_hdr:000000000000A78F                 db    0
.eh_frame_hdr:000000000000A790                 db 0B4h
.eh_frame_hdr:000000000000A791                 db 0D2h
.eh_frame_hdr:000000000000A792                 db 0FFh
.eh_frame_hdr:000000000000A793                 db 0FFh
.eh_frame_hdr:000000000000A794                 db  48h ; H
.eh_frame_hdr:000000000000A795                 db  0Dh
.eh_frame_hdr:000000000000A796                 db    0
.eh_frame_hdr:000000000000A797                 db    0
.eh_frame_hdr:000000000000A798                 db 0D4h
.eh_frame_hdr:000000000000A799                 db 0D2h
.eh_frame_hdr:000000000000A79A                 db 0FFh
.eh_frame_hdr:000000000000A79B                 db 0FFh
.eh_frame_hdr:000000000000A79C                 db  5Ch ; \
.eh_frame_hdr:000000000000A79D                 db  0Dh
.eh_frame_hdr:000000000000A79E                 db    0
.eh_frame_hdr:000000000000A79F                 db    0
.eh_frame_hdr:000000000000A7A0                 db  54h ; T
.eh_frame_hdr:000000000000A7A1                 db 0D3h
.eh_frame_hdr:000000000000A7A2                 db 0FFh
.eh_frame_hdr:000000000000A7A3                 db 0FFh
.eh_frame_hdr:000000000000A7A4                 db  78h ; x
.eh_frame_hdr:000000000000A7A5                 db  0Dh
.eh_frame_hdr:000000000000A7A6                 db    0
.eh_frame_hdr:000000000000A7A7                 db    0
.eh_frame_hdr:000000000000A7A8                 db  34h ; 4
.eh_frame_hdr:000000000000A7A9                 db 0D4h
.eh_frame_hdr:000000000000A7AA                 db 0FFh
.eh_frame_hdr:000000000000A7AB                 db 0FFh
.eh_frame_hdr:000000000000A7AC                 db 0A4h
.eh_frame_hdr:000000000000A7AD                 db  0Dh
.eh_frame_hdr:000000000000A7AE                 db    0
.eh_frame_hdr:000000000000A7AF                 db    0
.eh_frame_hdr:000000000000A7B0                 db 0B4h
.eh_frame_hdr:000000000000A7B1                 db 0D4h
.eh_frame_hdr:000000000000A7B2                 db 0FFh
.eh_frame_hdr:000000000000A7B3                 db 0FFh
.eh_frame_hdr:000000000000A7B4                 db 0C4h
.eh_frame_hdr:000000000000A7B5                 db  0Dh
.eh_frame_hdr:000000000000A7B6                 db    0
.eh_frame_hdr:000000000000A7B7                 db    0
.eh_frame_hdr:000000000000A7B8                 db 0D4h
.eh_frame_hdr:000000000000A7B9                 db 0D4h
.eh_frame_hdr:000000000000A7BA                 db 0FFh
.eh_frame_hdr:000000000000A7BB                 db 0FFh
.eh_frame_hdr:000000000000A7BC                 db 0E0h
.eh_frame_hdr:000000000000A7BD                 db  0Dh
.eh_frame_hdr:000000000000A7BE                 db    0
.eh_frame_hdr:000000000000A7BF                 db    0
.eh_frame_hdr:000000000000A7C0                 db    4
.eh_frame_hdr:000000000000A7C1                 db 0D5h
.eh_frame_hdr:000000000000A7C2                 db 0FFh
.eh_frame_hdr:000000000000A7C3                 db 0FFh
.eh_frame_hdr:000000000000A7C4                 db 0F4h
.eh_frame_hdr:000000000000A7C5                 db  0Dh
.eh_frame_hdr:000000000000A7C6                 db    0
.eh_frame_hdr:000000000000A7C7                 db    0
.eh_frame_hdr:000000000000A7C8                 db  14h
.eh_frame_hdr:000000000000A7C9                 db 0D5h
.eh_frame_hdr:000000000000A7CA                 db 0FFh
.eh_frame_hdr:000000000000A7CB                 db 0FFh
.eh_frame_hdr:000000000000A7CC                 db    8
.eh_frame_hdr:000000000000A7CD                 db  0Eh
.eh_frame_hdr:000000000000A7CE                 db    0
.eh_frame_hdr:000000000000A7CF                 db    0
.eh_frame_hdr:000000000000A7D0                 db  54h ; T
.eh_frame_hdr:000000000000A7D1                 db 0D5h
.eh_frame_hdr:000000000000A7D2                 db 0FFh
.eh_frame_hdr:000000000000A7D3                 db 0FFh
.eh_frame_hdr:000000000000A7D4                 db  2Ch ; ,
.eh_frame_hdr:000000000000A7D5                 db  0Eh
.eh_frame_hdr:000000000000A7D6                 db    0
.eh_frame_hdr:000000000000A7D7                 db    0
.eh_frame_hdr:000000000000A7D8                 db  84h
.eh_frame_hdr:000000000000A7D9                 db 0D5h
.eh_frame_hdr:000000000000A7DA                 db 0FFh
.eh_frame_hdr:000000000000A7DB                 db 0FFh
.eh_frame_hdr:000000000000A7DC                 db  40h ; @
.eh_frame_hdr:000000000000A7DD                 db  0Eh
.eh_frame_hdr:000000000000A7DE                 db    0
.eh_frame_hdr:000000000000A7DF                 db    0
.eh_frame_hdr:000000000000A7E0                 db  14h
.eh_frame_hdr:000000000000A7E1                 db 0D6h
.eh_frame_hdr:000000000000A7E2                 db 0FFh
.eh_frame_hdr:000000000000A7E3                 db 0FFh
.eh_frame_hdr:000000000000A7E4                 db  58h ; X
.eh_frame_hdr:000000000000A7E5                 db  0Eh
.eh_frame_hdr:000000000000A7E6                 db    0
.eh_frame_hdr:000000000000A7E7                 db    0
.eh_frame_hdr:000000000000A7E8                 db  64h ; d
.eh_frame_hdr:000000000000A7E9                 db 0D6h
.eh_frame_hdr:000000000000A7EA                 db 0FFh
.eh_frame_hdr:000000000000A7EB                 db 0FFh
.eh_frame_hdr:000000000000A7EC                 db  70h ; p
.eh_frame_hdr:000000000000A7ED                 db  0Eh
.eh_frame_hdr:000000000000A7EE                 db    0
.eh_frame_hdr:000000000000A7EF                 db    0
.eh_frame_hdr:000000000000A7F0                 db  84h
.eh_frame_hdr:000000000000A7F1                 db 0D6h
.eh_frame_hdr:000000000000A7F2                 db 0FFh
.eh_frame_hdr:000000000000A7F3                 db 0FFh
.eh_frame_hdr:000000000000A7F4                 db  8Ch
.eh_frame_hdr:000000000000A7F5                 db  0Eh
.eh_frame_hdr:000000000000A7F6                 db    0
.eh_frame_hdr:000000000000A7F7                 db    0
.eh_frame_hdr:000000000000A7F8                 db 0B4h
.eh_frame_hdr:000000000000A7F9                 db 0D6h
.eh_frame_hdr:000000000000A7FA                 db 0FFh
.eh_frame_hdr:000000000000A7FB                 db 0FFh
.eh_frame_hdr:000000000000A7FC                 db 0A8h
.eh_frame_hdr:000000000000A7FD                 db  0Eh
.eh_frame_hdr:000000000000A7FE                 db    0
.eh_frame_hdr:000000000000A7FF                 db    0
.eh_frame_hdr:000000000000A800                 db 0E4h
.eh_frame_hdr:000000000000A801                 db 0D6h
.eh_frame_hdr:000000000000A802                 db 0FFh
.eh_frame_hdr:000000000000A803                 db 0FFh
.eh_frame_hdr:000000000000A804                 db 0D0h
.eh_frame_hdr:000000000000A805                 db  0Eh
.eh_frame_hdr:000000000000A806                 db    0
.eh_frame_hdr:000000000000A807                 db    0
.eh_frame_hdr:000000000000A808                 db    4
.eh_frame_hdr:000000000000A809                 db 0D7h
.eh_frame_hdr:000000000000A80A                 db 0FFh
.eh_frame_hdr:000000000000A80B                 db 0FFh
.eh_frame_hdr:000000000000A80C                 db 0ECh
.eh_frame_hdr:000000000000A80D                 db  0Eh
.eh_frame_hdr:000000000000A80E                 db    0
.eh_frame_hdr:000000000000A80F                 db    0
.eh_frame_hdr:000000000000A810                 db  44h ; D
.eh_frame_hdr:000000000000A811                 db 0D7h
.eh_frame_hdr:000000000000A812                 db 0FFh
.eh_frame_hdr:000000000000A813                 db 0FFh
.eh_frame_hdr:000000000000A814                 db    4
.eh_frame_hdr:000000000000A815                 db  0Fh
.eh_frame_hdr:000000000000A816                 db    0
.eh_frame_hdr:000000000000A817                 db    0
.eh_frame_hdr:000000000000A818                 db  44h ; D
.eh_frame_hdr:000000000000A819                 db 0D8h
.eh_frame_hdr:000000000000A81A                 db 0FFh
.eh_frame_hdr:000000000000A81B                 db 0FFh
.eh_frame_hdr:000000000000A81C                 db  50h ; P
.eh_frame_hdr:000000000000A81D                 db  0Fh
.eh_frame_hdr:000000000000A81E                 db    0
.eh_frame_hdr:000000000000A81F                 db    0
.eh_frame_hdr:000000000000A820                 db  74h ; t
.eh_frame_hdr:000000000000A821                 db 0D8h
.eh_frame_hdr:000000000000A822                 db 0FFh
.eh_frame_hdr:000000000000A823                 db 0FFh
.eh_frame_hdr:000000000000A824                 db  6Ch ; l
.eh_frame_hdr:000000000000A825                 db  0Fh
.eh_frame_hdr:000000000000A826                 db    0
.eh_frame_hdr:000000000000A827                 db    0
.eh_frame_hdr:000000000000A828                 db  94h
.eh_frame_hdr:000000000000A829                 db 0DCh
.eh_frame_hdr:000000000000A82A                 db 0FFh
.eh_frame_hdr:000000000000A82B                 db 0FFh
.eh_frame_hdr:000000000000A82C                 db 0BCh
.eh_frame_hdr:000000000000A82D                 db  0Fh
.eh_frame_hdr:000000000000A82E                 db    0
.eh_frame_hdr:000000000000A82F                 db    0
.eh_frame_hdr:000000000000A830                 db  14h
.eh_frame_hdr:000000000000A831                 db 0DDh
.eh_frame_hdr:000000000000A832                 db 0FFh
.eh_frame_hdr:000000000000A833                 db 0FFh
.eh_frame_hdr:000000000000A834                 db 0F4h
.eh_frame_hdr:000000000000A835                 db  0Fh
.eh_frame_hdr:000000000000A836                 db    0
.eh_frame_hdr:000000000000A837                 db    0
.eh_frame_hdr:000000000000A838                 db  54h ; T
.eh_frame_hdr:000000000000A839                 db 0DDh
.eh_frame_hdr:000000000000A83A                 db 0FFh
.eh_frame_hdr:000000000000A83B                 db 0FFh
.eh_frame_hdr:000000000000A83C                 db  14h
.eh_frame_hdr:000000000000A83D                 db  10h
.eh_frame_hdr:000000000000A83E                 db    0
.eh_frame_hdr:000000000000A83F                 db    0
.eh_frame_hdr:000000000000A840                 db 0B4h
.eh_frame_hdr:000000000000A841                 db 0DDh
.eh_frame_hdr:000000000000A842                 db 0FFh
.eh_frame_hdr:000000000000A843                 db 0FFh
.eh_frame_hdr:000000000000A844                 db  44h ; D
.eh_frame_hdr:000000000000A845                 db  10h
.eh_frame_hdr:000000000000A846                 db    0
.eh_frame_hdr:000000000000A847                 db    0
.eh_frame_hdr:000000000000A848                 db  44h ; D
.eh_frame_hdr:000000000000A849                 db 0DEh
.eh_frame_hdr:000000000000A84A                 db 0FFh
.eh_frame_hdr:000000000000A84B                 db 0FFh
.eh_frame_hdr:000000000000A84C                 db  84h
.eh_frame_hdr:000000000000A84D                 db  10h
.eh_frame_hdr:000000000000A84E                 db    0
.eh_frame_hdr:000000000000A84F                 db    0
.eh_frame_hdr:000000000000A850                 db 0D4h
.eh_frame_hdr:000000000000A851                 db 0DFh
.eh_frame_hdr:000000000000A852                 db 0FFh
.eh_frame_hdr:000000000000A853                 db 0FFh
.eh_frame_hdr:000000000000A854                 db 0C0h
.eh_frame_hdr:000000000000A855                 db  10h
.eh_frame_hdr:000000000000A856                 db    0
.eh_frame_hdr:000000000000A857                 db    0
.eh_frame_hdr:000000000000A858                 db 0B4h
.eh_frame_hdr:000000000000A859                 db 0E0h
.eh_frame_hdr:000000000000A85A                 db 0FFh
.eh_frame_hdr:000000000000A85B                 db 0FFh
.eh_frame_hdr:000000000000A85C                 db 0FCh
.eh_frame_hdr:000000000000A85D                 db  10h
.eh_frame_hdr:000000000000A85E                 db    0
.eh_frame_hdr:000000000000A85F                 db    0
.eh_frame_hdr:000000000000A860                 db  34h ; 4
.eh_frame_hdr:000000000000A861                 db 0E1h
.eh_frame_hdr:000000000000A862                 db 0FFh
.eh_frame_hdr:000000000000A863                 db 0FFh
.eh_frame_hdr:000000000000A864                 db  4Ch ; L
.eh_frame_hdr:000000000000A865                 db  11h
.eh_frame_hdr:000000000000A866                 db    0
.eh_frame_hdr:000000000000A867                 db    0
.eh_frame_hdr:000000000000A868                 db  94h
.eh_frame_hdr:000000000000A869                 db 0E1h
.eh_frame_hdr:000000000000A86A                 db 0FFh
.eh_frame_hdr:000000000000A86B                 db 0FFh
.eh_frame_hdr:000000000000A86C                 db  6Ch ; l
.eh_frame_hdr:000000000000A86D                 db  11h
.eh_frame_hdr:000000000000A86E                 db    0
.eh_frame_hdr:000000000000A86F                 db    0
.eh_frame_hdr:000000000000A870                 db 0D4h
.eh_frame_hdr:000000000000A871                 db 0E1h
.eh_frame_hdr:000000000000A872                 db 0FFh
.eh_frame_hdr:000000000000A873                 db 0FFh
.eh_frame_hdr:000000000000A874                 db  8Ch
.eh_frame_hdr:000000000000A875                 db  11h
.eh_frame_hdr:000000000000A876                 db    0
.eh_frame_hdr:000000000000A877                 db    0
.eh_frame_hdr:000000000000A878                 db 0E4h
.eh_frame_hdr:000000000000A879                 db 0E1h
.eh_frame_hdr:000000000000A87A                 db 0FFh
.eh_frame_hdr:000000000000A87B                 db 0FFh
.eh_frame_hdr:000000000000A87C                 db 0A4h
.eh_frame_hdr:000000000000A87D                 db  11h
.eh_frame_hdr:000000000000A87E                 db    0
.eh_frame_hdr:000000000000A87F                 db    0
.eh_frame_hdr:000000000000A880                 db  64h ; d
.eh_frame_hdr:000000000000A881                 db 0E4h
.eh_frame_hdr:000000000000A882                 db 0FFh
.eh_frame_hdr:000000000000A883                 db 0FFh
.eh_frame_hdr:000000000000A884                 db 0DCh
.eh_frame_hdr:000000000000A885                 db  11h
.eh_frame_hdr:000000000000A886                 db    0
.eh_frame_hdr:000000000000A887                 db    0
.eh_frame_hdr:000000000000A888                 db 0D4h
.eh_frame_hdr:000000000000A889                 db 0E4h
.eh_frame_hdr:000000000000A88A                 db 0FFh
.eh_frame_hdr:000000000000A88B                 db 0FFh
.eh_frame_hdr:000000000000A88C                 db  24h ; $
.eh_frame_hdr:000000000000A88D                 db  12h
.eh_frame_hdr:000000000000A88E                 db    0
.eh_frame_hdr:000000000000A88F                 db    0
.eh_frame_hdr:000000000000A890                 db 0E4h
.eh_frame_hdr:000000000000A891                 db 0E4h
.eh_frame_hdr:000000000000A892                 db 0FFh
.eh_frame_hdr:000000000000A893                 db 0FFh
.eh_frame_hdr:000000000000A894                 db  3Ch ; <
.eh_frame_hdr:000000000000A895                 db  12h
.eh_frame_hdr:000000000000A896                 db    0
.eh_frame_hdr:000000000000A897                 db    0
.eh_frame_hdr:000000000000A897 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000A897
.eh_frame:000000000000A898 ; ===========================================================================
.eh_frame:000000000000A898
.eh_frame:000000000000A898 ; Segment type: Pure data
.eh_frame:000000000000A898 ; Segment permissions: Read
.eh_frame:000000000000A898 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000A898                 assume cs:_eh_frame
.eh_frame:000000000000A898                 ;org 0A898h
.eh_frame:000000000000A898                 db  14h
.eh_frame:000000000000A899                 db    0
.eh_frame:000000000000A89A                 db    0
.eh_frame:000000000000A89B                 db    0
.eh_frame:000000000000A89C                 db    0
.eh_frame:000000000000A89D                 db    0
.eh_frame:000000000000A89E                 db    0
.eh_frame:000000000000A89F                 db    0
.eh_frame:000000000000A8A0                 db    1
.eh_frame:000000000000A8A1                 db  7Ah ; z
.eh_frame:000000000000A8A2                 db  52h ; R
.eh_frame:000000000000A8A3                 db    0
.eh_frame:000000000000A8A4                 db    1
.eh_frame:000000000000A8A5                 db  78h ; x
.eh_frame:000000000000A8A6                 db  10h
.eh_frame:000000000000A8A7                 db    1
.eh_frame:000000000000A8A8                 db  1Bh
.eh_frame:000000000000A8A9                 db  0Ch
.eh_frame:000000000000A8AA                 db    7
.eh_frame:000000000000A8AB                 db    8
.eh_frame:000000000000A8AC                 db  90h
.eh_frame:000000000000A8AD                 db    1
.eh_frame:000000000000A8AE                 db    7
.eh_frame:000000000000A8AF                 db  10h
.eh_frame:000000000000A8B0                 db  14h
.eh_frame:000000000000A8B1                 db    0
.eh_frame:000000000000A8B2                 db    0
.eh_frame:000000000000A8B3                 db    0
.eh_frame:000000000000A8B4                 db  1Ch
.eh_frame:000000000000A8B5                 db    0
.eh_frame:000000000000A8B6                 db    0
.eh_frame:000000000000A8B7                 db    0
.eh_frame:000000000000A8B8                 db  58h ; X
.eh_frame:000000000000A8B9                 db  94h
.eh_frame:000000000000A8BA                 db 0FFh
.eh_frame:000000000000A8BB                 db 0FFh
.eh_frame:000000000000A8BC                 db  2Bh ; +
.eh_frame:000000000000A8BD                 db    0
.eh_frame:000000000000A8BE                 db    0
.eh_frame:000000000000A8BF                 db    0
.eh_frame:000000000000A8C0                 db    0
.eh_frame:000000000000A8C1                 db    0
.eh_frame:000000000000A8C2                 db    0
.eh_frame:000000000000A8C3                 db    0
.eh_frame:000000000000A8C4                 db    0
.eh_frame:000000000000A8C5                 db    0
.eh_frame:000000000000A8C6                 db    0
.eh_frame:000000000000A8C7                 db    0
.eh_frame:000000000000A8C8                 db  14h
.eh_frame:000000000000A8C9                 db    0
.eh_frame:000000000000A8CA                 db    0
.eh_frame:000000000000A8CB                 db    0
.eh_frame:000000000000A8CC                 db    0
.eh_frame:000000000000A8CD                 db    0
.eh_frame:000000000000A8CE                 db    0
.eh_frame:000000000000A8CF                 db    0
.eh_frame:000000000000A8D0                 db    1
.eh_frame:000000000000A8D1                 db  7Ah ; z
.eh_frame:000000000000A8D2                 db  52h ; R
.eh_frame:000000000000A8D3                 db    0
.eh_frame:000000000000A8D4                 db    1
.eh_frame:000000000000A8D5                 db  78h ; x
.eh_frame:000000000000A8D6                 db  10h
.eh_frame:000000000000A8D7                 db    1
.eh_frame:000000000000A8D8                 db  1Bh
.eh_frame:000000000000A8D9                 db  0Ch
.eh_frame:000000000000A8DA                 db    7
.eh_frame:000000000000A8DB                 db    8
.eh_frame:000000000000A8DC                 db  90h
.eh_frame:000000000000A8DD                 db    1
.eh_frame:000000000000A8DE                 db    0
.eh_frame:000000000000A8DF                 db    0
.eh_frame:000000000000A8E0                 db  24h ; $
.eh_frame:000000000000A8E1                 db    0
.eh_frame:000000000000A8E2                 db    0
.eh_frame:000000000000A8E3                 db    0
.eh_frame:000000000000A8E4                 db  1Ch
.eh_frame:000000000000A8E5                 db    0
.eh_frame:000000000000A8E6                 db    0
.eh_frame:000000000000A8E7                 db    0
.eh_frame:000000000000A8E8                 db  38h ; 8
.eh_frame:000000000000A8E9                 db  72h ; r
.eh_frame:000000000000A8EA                 db 0FFh
.eh_frame:000000000000A8EB                 db 0FFh
.eh_frame:000000000000A8EC                 db 0B0h
.eh_frame:000000000000A8ED                 db    4
.eh_frame:000000000000A8EE                 db    0
.eh_frame:000000000000A8EF                 db    0
.eh_frame:000000000000A8F0                 db    0
.eh_frame:000000000000A8F1                 db  0Eh
.eh_frame:000000000000A8F2                 db  10h
.eh_frame:000000000000A8F3                 db  46h ; F
.eh_frame:000000000000A8F4                 db  0Eh
.eh_frame:000000000000A8F5                 db  18h
.eh_frame:000000000000A8F6                 db  4Ah ; J
.eh_frame:000000000000A8F7                 db  0Fh
.eh_frame:000000000000A8F8                 db  0Bh
.eh_frame:000000000000A8F9                 db  77h ; w
.eh_frame:000000000000A8FA                 db    8
.eh_frame:000000000000A8FB                 db  80h
.eh_frame:000000000000A8FC                 db    0
.eh_frame:000000000000A8FD                 db  3Fh ; ?
.eh_frame:000000000000A8FE                 db  1Ah
.eh_frame:000000000000A8FF                 db  3Bh ; ;
.eh_frame:000000000000A900                 db  2Ah ; *
.eh_frame:000000000000A901                 db  33h ; 3
.eh_frame:000000000000A902                 db  24h ; $
.eh_frame:000000000000A903                 db  22h ; "
.eh_frame:000000000000A904                 db    0
.eh_frame:000000000000A905                 db    0
.eh_frame:000000000000A906                 db    0
.eh_frame:000000000000A907                 db    0
.eh_frame:000000000000A908                 db  14h
.eh_frame:000000000000A909                 db    0
.eh_frame:000000000000A90A                 db    0
.eh_frame:000000000000A90B                 db    0
.eh_frame:000000000000A90C                 db  44h ; D
.eh_frame:000000000000A90D                 db    0
.eh_frame:000000000000A90E                 db    0
.eh_frame:000000000000A90F                 db    0
.eh_frame:000000000000A910                 db 0C0h
.eh_frame:000000000000A911                 db  76h ; v
.eh_frame:000000000000A912                 db 0FFh
.eh_frame:000000000000A913                 db 0FFh
.eh_frame:000000000000A914                 db    8
.eh_frame:000000000000A915                 db    0
.eh_frame:000000000000A916                 db    0
.eh_frame:000000000000A917                 db    0
.eh_frame:000000000000A918                 db    0
.eh_frame:000000000000A919                 db    0
.eh_frame:000000000000A91A                 db    0
.eh_frame:000000000000A91B                 db    0
.eh_frame:000000000000A91C                 db    0
.eh_frame:000000000000A91D                 db    0
.eh_frame:000000000000A91E                 db    0
.eh_frame:000000000000A91F                 db    0
.eh_frame:000000000000A920                 db  38h ; 8
.eh_frame:000000000000A921                 db    0
.eh_frame:000000000000A922                 db    0
.eh_frame:000000000000A923                 db    0
.eh_frame:000000000000A924                 db  5Ch ; \
.eh_frame:000000000000A925                 db    0
.eh_frame:000000000000A926                 db    0
.eh_frame:000000000000A927                 db    0
.eh_frame:000000000000A928                 db 0F8h
.eh_frame:000000000000A929                 db  94h
.eh_frame:000000000000A92A                 db 0FFh
.eh_frame:000000000000A92B                 db 0FFh
.eh_frame:000000000000A92C                 db 0C6h
.eh_frame:000000000000A92D                 db    2
.eh_frame:000000000000A92E                 db    0
.eh_frame:000000000000A92F                 db    0
.eh_frame:000000000000A930                 db    0
.eh_frame:000000000000A931                 db  42h ; B
.eh_frame:000000000000A932                 db  0Eh
.eh_frame:000000000000A933                 db  10h
.eh_frame:000000000000A934                 db  8Dh
.eh_frame:000000000000A935                 db    2
.eh_frame:000000000000A936                 db  42h ; B
.eh_frame:000000000000A937                 db  0Eh
.eh_frame:000000000000A938                 db  18h
.eh_frame:000000000000A939                 db  8Ch
.eh_frame:000000000000A93A                 db    3
.eh_frame:000000000000A93B                 db  41h ; A
.eh_frame:000000000000A93C                 db  0Eh
.eh_frame:000000000000A93D                 db  20h
.eh_frame:000000000000A93E                 db  86h
.eh_frame:000000000000A93F                 db    4
.eh_frame:000000000000A940                 db  41h ; A
.eh_frame:000000000000A941                 db  0Eh
.eh_frame:000000000000A942                 db  28h ; (
.eh_frame:000000000000A943                 db  83h
.eh_frame:000000000000A944                 db    5
.eh_frame:000000000000A945                 db  44h ; D
.eh_frame:000000000000A946                 db  0Eh
.eh_frame:000000000000A947                 db  30h ; 0
.eh_frame:000000000000A948                 db    3
.eh_frame:000000000000A949                 db    3
.eh_frame:000000000000A94A                 db    2
.eh_frame:000000000000A94B                 db  0Ah
.eh_frame:000000000000A94C                 db  0Eh
.eh_frame:000000000000A94D                 db  28h ; (
.eh_frame:000000000000A94E                 db  41h ; A
.eh_frame:000000000000A94F                 db  0Eh
.eh_frame:000000000000A950                 db  20h
.eh_frame:000000000000A951                 db  41h ; A
.eh_frame:000000000000A952                 db  0Eh
.eh_frame:000000000000A953                 db  18h
.eh_frame:000000000000A954                 db  42h ; B
.eh_frame:000000000000A955                 db  0Eh
.eh_frame:000000000000A956                 db  10h
.eh_frame:000000000000A957                 db  42h ; B
.eh_frame:000000000000A958                 db  0Eh
.eh_frame:000000000000A959                 db    8
.eh_frame:000000000000A95A                 db  45h ; E
.eh_frame:000000000000A95B                 db  0Bh
.eh_frame:000000000000A95C                 db  30h ; 0
.eh_frame:000000000000A95D                 db    0
.eh_frame:000000000000A95E                 db    0
.eh_frame:000000000000A95F                 db    0
.eh_frame:000000000000A960                 db  98h
.eh_frame:000000000000A961                 db    0
.eh_frame:000000000000A962                 db    0
.eh_frame:000000000000A963                 db    0
.eh_frame:000000000000A964                 db  8Ch
.eh_frame:000000000000A965                 db  97h
.eh_frame:000000000000A966                 db 0FFh
.eh_frame:000000000000A967                 db 0FFh
.eh_frame:000000000000A968                 db  89h
.eh_frame:000000000000A969                 db    5
.eh_frame:000000000000A96A                 db    0
.eh_frame:000000000000A96B                 db    0
.eh_frame:000000000000A96C                 db    0
.eh_frame:000000000000A96D                 db  42h ; B
.eh_frame:000000000000A96E                 db  0Eh
.eh_frame:000000000000A96F                 db  10h
.eh_frame:000000000000A970                 db  8Ch
.eh_frame:000000000000A971                 db    2
.eh_frame:000000000000A972                 db  41h ; A
.eh_frame:000000000000A973                 db  0Eh
.eh_frame:000000000000A974                 db  18h
.eh_frame:000000000000A975                 db  86h
.eh_frame:000000000000A976                 db    3
.eh_frame:000000000000A977                 db  44h ; D
.eh_frame:000000000000A978                 db  0Eh
.eh_frame:000000000000A979                 db  20h
.eh_frame:000000000000A97A                 db  83h
.eh_frame:000000000000A97B                 db    4
.eh_frame:000000000000A97C                 db  47h ; G
.eh_frame:000000000000A97D                 db  0Eh
.eh_frame:000000000000A97E                 db 0C0h
.eh_frame:000000000000A97F                 db    1
.eh_frame:000000000000A980                 db    2
.eh_frame:000000000000A981                 db 0F2h
.eh_frame:000000000000A982                 db  0Ah
.eh_frame:000000000000A983                 db  0Eh
.eh_frame:000000000000A984                 db  20h
.eh_frame:000000000000A985                 db  41h ; A
.eh_frame:000000000000A986                 db  0Eh
.eh_frame:000000000000A987                 db  18h
.eh_frame:000000000000A988                 db  41h ; A
.eh_frame:000000000000A989                 db  0Eh
.eh_frame:000000000000A98A                 db  10h
.eh_frame:000000000000A98B                 db  42h ; B
.eh_frame:000000000000A98C                 db  0Eh
.eh_frame:000000000000A98D                 db    8
.eh_frame:000000000000A98E                 db  44h ; D
.eh_frame:000000000000A98F                 db  0Bh
.eh_frame:000000000000A990                 db  48h ; H
.eh_frame:000000000000A991                 db    0
.eh_frame:000000000000A992                 db    0
.eh_frame:000000000000A993                 db    0
.eh_frame:000000000000A994                 db 0CCh
.eh_frame:000000000000A995                 db    0
.eh_frame:000000000000A996                 db    0
.eh_frame:000000000000A997                 db    0
.eh_frame:000000000000A998                 db 0E8h
.eh_frame:000000000000A999                 db  9Ch
.eh_frame:000000000000A99A                 db 0FFh
.eh_frame:000000000000A99B                 db 0FFh
.eh_frame:000000000000A99C                 db 0F4h
.eh_frame:000000000000A99D                 db    1
.eh_frame:000000000000A99E                 db    0
.eh_frame:000000000000A99F                 db    0
.eh_frame:000000000000A9A0                 db    0
.eh_frame:000000000000A9A1                 db  42h ; B
.eh_frame:000000000000A9A2                 db  0Eh
.eh_frame:000000000000A9A3                 db  10h
.eh_frame:000000000000A9A4                 db  8Fh
.eh_frame:000000000000A9A5                 db    2
.eh_frame:000000000000A9A6                 db  42h ; B
.eh_frame:000000000000A9A7                 db  0Eh
.eh_frame:000000000000A9A8                 db  18h
.eh_frame:000000000000A9A9                 db  8Eh
.eh_frame:000000000000A9AA                 db    3
.eh_frame:000000000000A9AB                 db  42h ; B
.eh_frame:000000000000A9AC                 db  0Eh
.eh_frame:000000000000A9AD                 db  20h
.eh_frame:000000000000A9AE                 db  8Dh
.eh_frame:000000000000A9AF                 db    4
.eh_frame:000000000000A9B0                 db  45h ; E
.eh_frame:000000000000A9B1                 db  0Eh
.eh_frame:000000000000A9B2                 db  28h ; (
.eh_frame:000000000000A9B3                 db  8Ch
.eh_frame:000000000000A9B4                 db    5
.eh_frame:000000000000A9B5                 db  45h ; E
.eh_frame:000000000000A9B6                 db  0Eh
.eh_frame:000000000000A9B7                 db  30h ; 0
.eh_frame:000000000000A9B8                 db  86h
.eh_frame:000000000000A9B9                 db    6
.eh_frame:000000000000A9BA                 db  41h ; A
.eh_frame:000000000000A9BB                 db  0Eh
.eh_frame:000000000000A9BC                 db  38h ; 8
.eh_frame:000000000000A9BD                 db  83h
.eh_frame:000000000000A9BE                 db    7
.eh_frame:000000000000A9BF                 db  49h ; I
.eh_frame:000000000000A9C0                 db  0Eh
.eh_frame:000000000000A9C1                 db  50h ; P
.eh_frame:000000000000A9C2                 db  4Ch ; L
.eh_frame:000000000000A9C3                 db  0Ah
.eh_frame:000000000000A9C4                 db  0Eh
.eh_frame:000000000000A9C5                 db  38h ; 8
.eh_frame:000000000000A9C6                 db  43h ; C
.eh_frame:000000000000A9C7                 db  0Eh
.eh_frame:000000000000A9C8                 db  30h ; 0
.eh_frame:000000000000A9C9                 db  41h ; A
.eh_frame:000000000000A9CA                 db  0Eh
.eh_frame:000000000000A9CB                 db  28h ; (
.eh_frame:000000000000A9CC                 db  42h ; B
.eh_frame:000000000000A9CD                 db  0Eh
.eh_frame:000000000000A9CE                 db  20h
.eh_frame:000000000000A9CF                 db  42h ; B
.eh_frame:000000000000A9D0                 db  0Eh
.eh_frame:000000000000A9D1                 db  18h
.eh_frame:000000000000A9D2                 db  42h ; B
.eh_frame:000000000000A9D3                 db  0Eh
.eh_frame:000000000000A9D4                 db  10h
.eh_frame:000000000000A9D5                 db  42h ; B
.eh_frame:000000000000A9D6                 db  0Eh
.eh_frame:000000000000A9D7                 db    8
.eh_frame:000000000000A9D8                 db  41h ; A
.eh_frame:000000000000A9D9                 db  0Bh
.eh_frame:000000000000A9DA                 db    0
.eh_frame:000000000000A9DB                 db    0
.eh_frame:000000000000A9DC                 db  38h ; 8
.eh_frame:000000000000A9DD                 db    0
.eh_frame:000000000000A9DE                 db    0
.eh_frame:000000000000A9DF                 db    0
.eh_frame:000000000000A9E0                 db  18h
.eh_frame:000000000000A9E1                 db    1
.eh_frame:000000000000A9E2                 db    0
.eh_frame:000000000000A9E3                 db    0
.eh_frame:000000000000A9E4                 db  9Ch
.eh_frame:000000000000A9E5                 db  9Eh
.eh_frame:000000000000A9E6                 db 0FFh
.eh_frame:000000000000A9E7                 db 0FFh
.eh_frame:000000000000A9E8                 db 0F1h
.eh_frame:000000000000A9E9                 db    2
.eh_frame:000000000000A9EA                 db    0
.eh_frame:000000000000A9EB                 db    0
.eh_frame:000000000000A9EC                 db    0
.eh_frame:000000000000A9ED                 db  42h ; B
.eh_frame:000000000000A9EE                 db  0Eh
.eh_frame:000000000000A9EF                 db  10h
.eh_frame:000000000000A9F0                 db  8Dh
.eh_frame:000000000000A9F1                 db    2
.eh_frame:000000000000A9F2                 db  42h ; B
.eh_frame:000000000000A9F3                 db  0Eh
.eh_frame:000000000000A9F4                 db  18h
.eh_frame:000000000000A9F5                 db  8Ch
.eh_frame:000000000000A9F6                 db    3
.eh_frame:000000000000A9F7                 db  44h ; D
.eh_frame:000000000000A9F8                 db  0Eh
.eh_frame:000000000000A9F9                 db  20h
.eh_frame:000000000000A9FA                 db  86h
.eh_frame:000000000000A9FB                 db    4
.eh_frame:000000000000A9FC                 db  41h ; A
.eh_frame:000000000000A9FD                 db  0Eh
.eh_frame:000000000000A9FE                 db  28h ; (
.eh_frame:000000000000A9FF                 db  83h
.eh_frame:000000000000AA00                 db    5
.eh_frame:000000000000AA01                 db  49h ; I
.eh_frame:000000000000AA02                 db  0Eh
.eh_frame:000000000000AA03                 db  70h ; p
.eh_frame:000000000000AA04                 db    2
.eh_frame:000000000000AA05                 db 0CEh
.eh_frame:000000000000AA06                 db  0Ah
.eh_frame:000000000000AA07                 db  0Eh
.eh_frame:000000000000AA08                 db  28h ; (
.eh_frame:000000000000AA09                 db  41h ; A
.eh_frame:000000000000AA0A                 db  0Eh
.eh_frame:000000000000AA0B                 db  20h
.eh_frame:000000000000AA0C                 db  41h ; A
.eh_frame:000000000000AA0D                 db  0Eh
.eh_frame:000000000000AA0E                 db  18h
.eh_frame:000000000000AA0F                 db  42h ; B
.eh_frame:000000000000AA10                 db  0Eh
.eh_frame:000000000000AA11                 db  10h
.eh_frame:000000000000AA12                 db  42h ; B
.eh_frame:000000000000AA13                 db  0Eh
.eh_frame:000000000000AA14                 db    8
.eh_frame:000000000000AA15                 db  4Ah ; J
.eh_frame:000000000000AA16                 db  0Bh
.eh_frame:000000000000AA17                 db    0
.eh_frame:000000000000AA18                 db  28h ; (
.eh_frame:000000000000AA19                 db    0
.eh_frame:000000000000AA1A                 db    0
.eh_frame:000000000000AA1B                 db    0
.eh_frame:000000000000AA1C                 db  54h ; T
.eh_frame:000000000000AA1D                 db    1
.eh_frame:000000000000AA1E                 db    0
.eh_frame:000000000000AA1F                 db    0
.eh_frame:000000000000AA20                 db  60h ; `
.eh_frame:000000000000AA21                 db 0A1h
.eh_frame:000000000000AA22                 db 0FFh
.eh_frame:000000000000AA23                 db 0FFh
.eh_frame:000000000000AA24                 db  0Bh
.eh_frame:000000000000AA25                 db    1
.eh_frame:000000000000AA26                 db    0
.eh_frame:000000000000AA27                 db    0
.eh_frame:000000000000AA28                 db    0
.eh_frame:000000000000AA29                 db  41h ; A
.eh_frame:000000000000AA2A                 db  0Eh
.eh_frame:000000000000AA2B                 db  10h
.eh_frame:000000000000AA2C                 db  86h
.eh_frame:000000000000AA2D                 db    2
.eh_frame:000000000000AA2E                 db  41h ; A
.eh_frame:000000000000AA2F                 db  0Eh
.eh_frame:000000000000AA30                 db  18h
.eh_frame:000000000000AA31                 db  83h
.eh_frame:000000000000AA32                 db    3
.eh_frame:000000000000AA33                 db  4Ah ; J
.eh_frame:000000000000AA34                 db  0Eh
.eh_frame:000000000000AA35                 db  20h
.eh_frame:000000000000AA36                 db    2
.eh_frame:000000000000AA37                 db 0BDh
.eh_frame:000000000000AA38                 db  0Ah
.eh_frame:000000000000AA39                 db  0Eh
.eh_frame:000000000000AA3A                 db  18h
.eh_frame:000000000000AA3B                 db  41h ; A
.eh_frame:000000000000AA3C                 db  0Eh
.eh_frame:000000000000AA3D                 db  10h
.eh_frame:000000000000AA3E                 db  41h ; A
.eh_frame:000000000000AA3F                 db  0Eh
.eh_frame:000000000000AA40                 db    8
.eh_frame:000000000000AA41                 db  45h ; E
.eh_frame:000000000000AA42                 db  0Bh
.eh_frame:000000000000AA43                 db    0
.eh_frame:000000000000AA44                 db  64h ; d
.eh_frame:000000000000AA45                 db    0
.eh_frame:000000000000AA46                 db    0
.eh_frame:000000000000AA47                 db    0
.eh_frame:000000000000AA48                 db  80h
.eh_frame:000000000000AA49                 db    1
.eh_frame:000000000000AA4A                 db    0
.eh_frame:000000000000AA4B                 db    0
.eh_frame:000000000000AA4C                 db  44h ; D
.eh_frame:000000000000AA4D                 db 0A2h
.eh_frame:000000000000AA4E                 db 0FFh
.eh_frame:000000000000AA4F                 db 0FFh
.eh_frame:000000000000AA50                 db  29h ; )
.eh_frame:000000000000AA51                 db    2
.eh_frame:000000000000AA52                 db    0
.eh_frame:000000000000AA53                 db    0
.eh_frame:000000000000AA54                 db    0
.eh_frame:000000000000AA55                 db  42h ; B
.eh_frame:000000000000AA56                 db  0Eh
.eh_frame:000000000000AA57                 db  10h
.eh_frame:000000000000AA58                 db  8Fh
.eh_frame:000000000000AA59                 db    2
.eh_frame:000000000000AA5A                 db  42h ; B
.eh_frame:000000000000AA5B                 db  0Eh
.eh_frame:000000000000AA5C                 db  18h
.eh_frame:000000000000AA5D                 db  8Eh
.eh_frame:000000000000AA5E                 db    3
.eh_frame:000000000000AA5F                 db  45h ; E
.eh_frame:000000000000AA60                 db  0Eh
.eh_frame:000000000000AA61                 db  20h
.eh_frame:000000000000AA62                 db  8Dh
.eh_frame:000000000000AA63                 db    4
.eh_frame:000000000000AA64                 db  42h ; B
.eh_frame:000000000000AA65                 db  0Eh
.eh_frame:000000000000AA66                 db  28h ; (
.eh_frame:000000000000AA67                 db  8Ch
.eh_frame:000000000000AA68                 db    5
.eh_frame:000000000000AA69                 db  44h ; D
.eh_frame:000000000000AA6A                 db  0Eh
.eh_frame:000000000000AA6B                 db  30h ; 0
.eh_frame:000000000000AA6C                 db  86h
.eh_frame:000000000000AA6D                 db    6
.eh_frame:000000000000AA6E                 db  41h ; A
.eh_frame:000000000000AA6F                 db  0Eh
.eh_frame:000000000000AA70                 db  38h ; 8
.eh_frame:000000000000AA71                 db  83h
.eh_frame:000000000000AA72                 db    7
.eh_frame:000000000000AA73                 db  51h ; Q
.eh_frame:000000000000AA74                 db  0Eh
.eh_frame:000000000000AA75                 db  70h ; p
.eh_frame:000000000000AA76                 db    3
.eh_frame:000000000000AA77                 db  1Bh
.eh_frame:000000000000AA78                 db    1
.eh_frame:000000000000AA79                 db  0Ah
.eh_frame:000000000000AA7A                 db  0Eh
.eh_frame:000000000000AA7B                 db  38h ; 8
.eh_frame:000000000000AA7C                 db  41h ; A
.eh_frame:000000000000AA7D                 db  0Eh
.eh_frame:000000000000AA7E                 db  30h ; 0
.eh_frame:000000000000AA7F                 db  41h ; A
.eh_frame:000000000000AA80                 db  0Eh
.eh_frame:000000000000AA81                 db  28h ; (
.eh_frame:000000000000AA82                 db  42h ; B
.eh_frame:000000000000AA83                 db  0Eh
.eh_frame:000000000000AA84                 db  20h
.eh_frame:000000000000AA85                 db  42h ; B
.eh_frame:000000000000AA86                 db  0Eh
.eh_frame:000000000000AA87                 db  18h
.eh_frame:000000000000AA88                 db  42h ; B
.eh_frame:000000000000AA89                 db  0Eh
.eh_frame:000000000000AA8A                 db  10h
.eh_frame:000000000000AA8B                 db  42h ; B
.eh_frame:000000000000AA8C                 db  0Eh
.eh_frame:000000000000AA8D                 db    8
.eh_frame:000000000000AA8E                 db  41h ; A
.eh_frame:000000000000AA8F                 db  0Bh
.eh_frame:000000000000AA90                 db    2
.eh_frame:000000000000AA91                 db 0A4h
.eh_frame:000000000000AA92                 db  0Ah
.eh_frame:000000000000AA93                 db  0Eh
.eh_frame:000000000000AA94                 db  38h ; 8
.eh_frame:000000000000AA95                 db  41h ; A
.eh_frame:000000000000AA96                 db  0Eh
.eh_frame:000000000000AA97                 db  30h ; 0
.eh_frame:000000000000AA98                 db  41h ; A
.eh_frame:000000000000AA99                 db  0Eh
.eh_frame:000000000000AA9A                 db  28h ; (
.eh_frame:000000000000AA9B                 db  42h ; B
.eh_frame:000000000000AA9C                 db  0Eh
.eh_frame:000000000000AA9D                 db  20h
.eh_frame:000000000000AA9E                 db  42h ; B
.eh_frame:000000000000AA9F                 db  0Eh
.eh_frame:000000000000AAA0                 db  18h
.eh_frame:000000000000AAA1                 db  42h ; B
.eh_frame:000000000000AAA2                 db  0Eh
.eh_frame:000000000000AAA3                 db  10h
.eh_frame:000000000000AAA4                 db  42h ; B
.eh_frame:000000000000AAA5                 db  0Eh
.eh_frame:000000000000AAA6                 db    8
.eh_frame:000000000000AAA7                 db  41h ; A
.eh_frame:000000000000AAA8                 db  0Bh
.eh_frame:000000000000AAA9                 db    0
.eh_frame:000000000000AAAA                 db    0
.eh_frame:000000000000AAAB                 db    0
.eh_frame:000000000000AAAC                 db  28h ; (
.eh_frame:000000000000AAAD                 db    0
.eh_frame:000000000000AAAE                 db    0
.eh_frame:000000000000AAAF                 db    0
.eh_frame:000000000000AAB0                 db 0E8h
.eh_frame:000000000000AAB1                 db    1
.eh_frame:000000000000AAB2                 db    0
.eh_frame:000000000000AAB3                 db    0
.eh_frame:000000000000AAB4                 db  0Ch
.eh_frame:000000000000AAB5                 db 0A4h
.eh_frame:000000000000AAB6                 db 0FFh
.eh_frame:000000000000AAB7                 db 0FFh
.eh_frame:000000000000AAB8                 db  2Ah ; *
.eh_frame:000000000000AAB9                 db    4
.eh_frame:000000000000AABA                 db    0
.eh_frame:000000000000AABB                 db    0
.eh_frame:000000000000AABC                 db    0
.eh_frame:000000000000AABD                 db  42h ; B
.eh_frame:000000000000AABE                 db  0Eh
.eh_frame:000000000000AABF                 db  10h
.eh_frame:000000000000AAC0                 db  8Dh
.eh_frame:000000000000AAC1                 db    2
.eh_frame:000000000000AAC2                 db  42h ; B
.eh_frame:000000000000AAC3                 db  0Eh
.eh_frame:000000000000AAC4                 db  18h
.eh_frame:000000000000AAC5                 db  8Ch
.eh_frame:000000000000AAC6                 db    3
.eh_frame:000000000000AAC7                 db  46h ; F
.eh_frame:000000000000AAC8                 db  0Eh
.eh_frame:000000000000AAC9                 db  20h
.eh_frame:000000000000AACA                 db  86h
.eh_frame:000000000000AACB                 db    4
.eh_frame:000000000000AACC                 db  41h ; A
.eh_frame:000000000000AACD                 db  0Eh
.eh_frame:000000000000AACE                 db  28h ; (
.eh_frame:000000000000AACF                 db  83h
.eh_frame:000000000000AAD0                 db    5
.eh_frame:000000000000AAD1                 db  49h ; I
.eh_frame:000000000000AAD2                 db  0Eh
.eh_frame:000000000000AAD3                 db 0B0h
.eh_frame:000000000000AAD4                 db    1
.eh_frame:000000000000AAD5                 db    0
.eh_frame:000000000000AAD6                 db    0
.eh_frame:000000000000AAD7                 db    0
.eh_frame:000000000000AAD8                 db  5Ch ; \
.eh_frame:000000000000AAD9                 db    0
.eh_frame:000000000000AADA                 db    0
.eh_frame:000000000000AADB                 db    0
.eh_frame:000000000000AADC                 db  14h
.eh_frame:000000000000AADD                 db    2
.eh_frame:000000000000AADE                 db    0
.eh_frame:000000000000AADF                 db    0
.eh_frame:000000000000AAE0                 db    0
.eh_frame:000000000000AAE1                 db  75h ; u
.eh_frame:000000000000AAE2                 db 0FFh
.eh_frame:000000000000AAE3                 db 0FFh
.eh_frame:000000000000AAE4                 db  2Fh ; /
.eh_frame:000000000000AAE5                 db  1Dh
.eh_frame:000000000000AAE6                 db    0
.eh_frame:000000000000AAE7                 db    0
.eh_frame:000000000000AAE8                 db    0
.eh_frame:000000000000AAE9                 db  42h ; B
.eh_frame:000000000000AAEA                 db  0Eh
.eh_frame:000000000000AAEB                 db  10h
.eh_frame:000000000000AAEC                 db  8Fh
.eh_frame:000000000000AAED                 db    2
.eh_frame:000000000000AAEE                 db  42h ; B
.eh_frame:000000000000AAEF                 db  0Eh
.eh_frame:000000000000AAF0                 db  18h
.eh_frame:000000000000AAF1                 db  8Eh
.eh_frame:000000000000AAF2                 db    3
.eh_frame:000000000000AAF3                 db  45h ; E
.eh_frame:000000000000AAF4                 db  0Eh
.eh_frame:000000000000AAF5                 db  20h
.eh_frame:000000000000AAF6                 db  8Dh
.eh_frame:000000000000AAF7                 db    4
.eh_frame:000000000000AAF8                 db  42h ; B
.eh_frame:000000000000AAF9                 db  0Eh
.eh_frame:000000000000AAFA                 db  28h ; (
.eh_frame:000000000000AAFB                 db  8Ch
.eh_frame:000000000000AAFC                 db    5
.eh_frame:000000000000AAFD                 db  44h ; D
.eh_frame:000000000000AAFE                 db  0Eh
.eh_frame:000000000000AAFF                 db  30h ; 0
.eh_frame:000000000000AB00                 db  86h
.eh_frame:000000000000AB01                 db    6
.eh_frame:000000000000AB02                 db  41h ; A
.eh_frame:000000000000AB03                 db  0Eh
.eh_frame:000000000000AB04                 db  38h ; 8
.eh_frame:000000000000AB05                 db  83h
.eh_frame:000000000000AB06                 db    7
.eh_frame:000000000000AB07                 db  4Ch ; L
.eh_frame:000000000000AB08                 db  0Eh
.eh_frame:000000000000AB09                 db  80h
.eh_frame:000000000000AB0A                 db    3
.eh_frame:000000000000AB0B                 db    3
.eh_frame:000000000000AB0C                 db    0
.eh_frame:000000000000AB0D                 db    2
.eh_frame:000000000000AB0E                 db  0Ah
.eh_frame:000000000000AB0F                 db  0Eh
.eh_frame:000000000000AB10                 db  88h
.eh_frame:000000000000AB11                 db    3
.eh_frame:000000000000AB12                 db  50h ; P
.eh_frame:000000000000AB13                 db  0Eh
.eh_frame:000000000000AB14                 db  90h
.eh_frame:000000000000AB15                 db    3
.eh_frame:000000000000AB16                 db  74h ; t
.eh_frame:000000000000AB17                 db  0Bh
.eh_frame:000000000000AB18                 db    3
.eh_frame:000000000000AB19                 db  1Fh
.eh_frame:000000000000AB1A                 db  0Dh
.eh_frame:000000000000AB1B                 db  0Ah
.eh_frame:000000000000AB1C                 db  0Eh
.eh_frame:000000000000AB1D                 db  38h ; 8
.eh_frame:000000000000AB1E                 db  41h ; A
.eh_frame:000000000000AB1F                 db  0Eh
.eh_frame:000000000000AB20                 db  30h ; 0
.eh_frame:000000000000AB21                 db  41h ; A
.eh_frame:000000000000AB22                 db  0Eh
.eh_frame:000000000000AB23                 db  28h ; (
.eh_frame:000000000000AB24                 db  42h ; B
.eh_frame:000000000000AB25                 db  0Eh
.eh_frame:000000000000AB26                 db  20h
.eh_frame:000000000000AB27                 db  42h ; B
.eh_frame:000000000000AB28                 db  0Eh
.eh_frame:000000000000AB29                 db  18h
.eh_frame:000000000000AB2A                 db  42h ; B
.eh_frame:000000000000AB2B                 db  0Eh
.eh_frame:000000000000AB2C                 db  10h
.eh_frame:000000000000AB2D                 db  42h ; B
.eh_frame:000000000000AB2E                 db  0Eh
.eh_frame:000000000000AB2F                 db    8
.eh_frame:000000000000AB30                 db  41h ; A
.eh_frame:000000000000AB31                 db  0Bh
.eh_frame:000000000000AB32                 db    0
.eh_frame:000000000000AB33                 db    0
.eh_frame:000000000000AB34                 db    0
.eh_frame:000000000000AB35                 db    0
.eh_frame:000000000000AB36                 db    0
.eh_frame:000000000000AB37                 db    0
.eh_frame:000000000000AB38                 db  10h
.eh_frame:000000000000AB39                 db    0
.eh_frame:000000000000AB3A                 db    0
.eh_frame:000000000000AB3B                 db    0
.eh_frame:000000000000AB3C                 db  74h ; t
.eh_frame:000000000000AB3D                 db    2
.eh_frame:000000000000AB3E                 db    0
.eh_frame:000000000000AB3F                 db    0
.eh_frame:000000000000AB40                 db 0B0h
.eh_frame:000000000000AB41                 db 0A7h
.eh_frame:000000000000AB42                 db 0FFh
.eh_frame:000000000000AB43                 db 0FFh
.eh_frame:000000000000AB44                 db    8
.eh_frame:000000000000AB45                 db    0
.eh_frame:000000000000AB46                 db    0
.eh_frame:000000000000AB47                 db    0
.eh_frame:000000000000AB48                 db    0
.eh_frame:000000000000AB49                 db    0
.eh_frame:000000000000AB4A                 db    0
.eh_frame:000000000000AB4B                 db    0
.eh_frame:000000000000AB4C                 db  10h
.eh_frame:000000000000AB4D                 db    0
.eh_frame:000000000000AB4E                 db    0
.eh_frame:000000000000AB4F                 db    0
.eh_frame:000000000000AB50                 db  88h
.eh_frame:000000000000AB51                 db    2
.eh_frame:000000000000AB52                 db    0
.eh_frame:000000000000AB53                 db    0
.eh_frame:000000000000AB54                 db 0ACh
.eh_frame:000000000000AB55                 db 0A7h
.eh_frame:000000000000AB56                 db 0FFh
.eh_frame:000000000000AB57                 db 0FFh
.eh_frame:000000000000AB58                 db    8
.eh_frame:000000000000AB59                 db    0
.eh_frame:000000000000AB5A                 db    0
.eh_frame:000000000000AB5B                 db    0
.eh_frame:000000000000AB5C                 db    0
.eh_frame:000000000000AB5D                 db    0
.eh_frame:000000000000AB5E                 db    0
.eh_frame:000000000000AB5F                 db    0
.eh_frame:000000000000AB60                 db  2Ch ; ,
.eh_frame:000000000000AB61                 db    0
.eh_frame:000000000000AB62                 db    0
.eh_frame:000000000000AB63                 db    0
.eh_frame:000000000000AB64                 db  9Ch
.eh_frame:000000000000AB65                 db    2
.eh_frame:000000000000AB66                 db    0
.eh_frame:000000000000AB67                 db    0
.eh_frame:000000000000AB68                 db 0A8h
.eh_frame:000000000000AB69                 db 0A7h
.eh_frame:000000000000AB6A                 db 0FFh
.eh_frame:000000000000AB6B                 db 0FFh
.eh_frame:000000000000AB6C                 db 0A4h
.eh_frame:000000000000AB6D                 db    0
.eh_frame:000000000000AB6E                 db    0
.eh_frame:000000000000AB6F                 db    0
.eh_frame:000000000000AB70                 db    0
.eh_frame:000000000000AB71                 db  41h ; A
.eh_frame:000000000000AB72                 db  0Eh
.eh_frame:000000000000AB73                 db  10h
.eh_frame:000000000000AB74                 db  86h
.eh_frame:000000000000AB75                 db    2
.eh_frame:000000000000AB76                 db  41h ; A
.eh_frame:000000000000AB77                 db  0Eh
.eh_frame:000000000000AB78                 db  18h
.eh_frame:000000000000AB79                 db  83h
.eh_frame:000000000000AB7A                 db    3
.eh_frame:000000000000AB7B                 db  44h ; D
.eh_frame:000000000000AB7C                 db  0Eh
.eh_frame:000000000000AB7D                 db  20h
.eh_frame:000000000000AB7E                 db  7Ah ; z
.eh_frame:000000000000AB7F                 db  0Ah
.eh_frame:000000000000AB80                 db  0Eh
.eh_frame:000000000000AB81                 db  18h
.eh_frame:000000000000AB82                 db  41h ; A
.eh_frame:000000000000AB83                 db  0Eh
.eh_frame:000000000000AB84                 db  10h
.eh_frame:000000000000AB85                 db  41h ; A
.eh_frame:000000000000AB86                 db  0Eh
.eh_frame:000000000000AB87                 db    8
.eh_frame:000000000000AB88                 db  41h ; A
.eh_frame:000000000000AB89                 db  0Bh
.eh_frame:000000000000AB8A                 db    0
.eh_frame:000000000000AB8B                 db    0
.eh_frame:000000000000AB8C                 db    0
.eh_frame:000000000000AB8D                 db    0
.eh_frame:000000000000AB8E                 db    0
.eh_frame:000000000000AB8F                 db    0
.eh_frame:000000000000AB90                 db  10h
.eh_frame:000000000000AB91                 db    0
.eh_frame:000000000000AB92                 db    0
.eh_frame:000000000000AB93                 db    0
.eh_frame:000000000000AB94                 db 0CCh
.eh_frame:000000000000AB95                 db    2
.eh_frame:000000000000AB96                 db    0
.eh_frame:000000000000AB97                 db    0
.eh_frame:000000000000AB98                 db  28h ; (
.eh_frame:000000000000AB99                 db 0A8h
.eh_frame:000000000000AB9A                 db 0FFh
.eh_frame:000000000000AB9B                 db 0FFh
.eh_frame:000000000000AB9C                 db  5Ch ; \
.eh_frame:000000000000AB9D                 db    0
.eh_frame:000000000000AB9E                 db    0
.eh_frame:000000000000AB9F                 db    0
.eh_frame:000000000000ABA0                 db    0
.eh_frame:000000000000ABA1                 db    0
.eh_frame:000000000000ABA2                 db    0
.eh_frame:000000000000ABA3                 db    0
.eh_frame:000000000000ABA4                 db  28h ; (
.eh_frame:000000000000ABA5                 db    0
.eh_frame:000000000000ABA6                 db    0
.eh_frame:000000000000ABA7                 db    0
.eh_frame:000000000000ABA8                 db 0E0h
.eh_frame:000000000000ABA9                 db    2
.eh_frame:000000000000ABAA                 db    0
.eh_frame:000000000000ABAB                 db    0
.eh_frame:000000000000ABAC                 db  74h ; t
.eh_frame:000000000000ABAD                 db 0A8h
.eh_frame:000000000000ABAE                 db 0FFh
.eh_frame:000000000000ABAF                 db 0FFh
.eh_frame:000000000000ABB0                 db  47h ; G
.eh_frame:000000000000ABB1                 db    0
.eh_frame:000000000000ABB2                 db    0
.eh_frame:000000000000ABB3                 db    0
.eh_frame:000000000000ABB4                 db    0
.eh_frame:000000000000ABB5                 db  41h ; A
.eh_frame:000000000000ABB6                 db  0Eh
.eh_frame:000000000000ABB7                 db  10h
.eh_frame:000000000000ABB8                 db  83h
.eh_frame:000000000000ABB9                 db    2
.eh_frame:000000000000ABBA                 db  5Ah ; Z
.eh_frame:000000000000ABBB                 db  0Ah
.eh_frame:000000000000ABBC                 db  0Eh
.eh_frame:000000000000ABBD                 db    8
.eh_frame:000000000000ABBE                 db  45h ; E
.eh_frame:000000000000ABBF                 db  0Bh
.eh_frame:000000000000ABC0                 db  5Dh ; ]
.eh_frame:000000000000ABC1                 db  0Ah
.eh_frame:000000000000ABC2                 db  0Eh
.eh_frame:000000000000ABC3                 db    8
.eh_frame:000000000000ABC4                 db  43h ; C
.eh_frame:000000000000ABC5                 db  0Bh
.eh_frame:000000000000ABC6                 db  46h ; F
.eh_frame:000000000000ABC7                 db  0Eh
.eh_frame:000000000000ABC8                 db    8
.eh_frame:000000000000ABC9                 db    0
.eh_frame:000000000000ABCA                 db    0
.eh_frame:000000000000ABCB                 db    0
.eh_frame:000000000000ABCC                 db    0
.eh_frame:000000000000ABCD                 db    0
.eh_frame:000000000000ABCE                 db    0
.eh_frame:000000000000ABCF                 db    0
.eh_frame:000000000000ABD0                 db  1Ch
.eh_frame:000000000000ABD1                 db    0
.eh_frame:000000000000ABD2                 db    0
.eh_frame:000000000000ABD3                 db    0
.eh_frame:000000000000ABD4                 db  0Ch
.eh_frame:000000000000ABD5                 db    3
.eh_frame:000000000000ABD6                 db    0
.eh_frame:000000000000ABD7                 db    0
.eh_frame:000000000000ABD8                 db  98h
.eh_frame:000000000000ABD9                 db 0A8h
.eh_frame:000000000000ABDA                 db 0FFh
.eh_frame:000000000000ABDB                 db 0FFh
.eh_frame:000000000000ABDC                 db  6Eh ; n
.eh_frame:000000000000ABDD                 db    0
.eh_frame:000000000000ABDE                 db    0
.eh_frame:000000000000ABDF                 db    0
.eh_frame:000000000000ABE0                 db    0
.eh_frame:000000000000ABE1                 db  44h ; D
.eh_frame:000000000000ABE2                 db  0Eh
.eh_frame:000000000000ABE3                 db  60h ; `
.eh_frame:000000000000ABE4                 db  7Fh ; 
.eh_frame:000000000000ABE5                 db  0Ah
.eh_frame:000000000000ABE6                 db  0Eh
.eh_frame:000000000000ABE7                 db    8
.eh_frame:000000000000ABE8                 db  45h ; E
.eh_frame:000000000000ABE9                 db  0Bh
.eh_frame:000000000000ABEA                 db    0
.eh_frame:000000000000ABEB                 db    0
.eh_frame:000000000000ABEC                 db    0
.eh_frame:000000000000ABED                 db    0
.eh_frame:000000000000ABEE                 db    0
.eh_frame:000000000000ABEF                 db    0
.eh_frame:000000000000ABF0                 db  34h ; 4
.eh_frame:000000000000ABF1                 db    0
.eh_frame:000000000000ABF2                 db    0
.eh_frame:000000000000ABF3                 db    0
.eh_frame:000000000000ABF4                 db  2Ch ; ,
.eh_frame:000000000000ABF5                 db    3
.eh_frame:000000000000ABF6                 db    0
.eh_frame:000000000000ABF7                 db    0
.eh_frame:000000000000ABF8                 db 0E8h
.eh_frame:000000000000ABF9                 db 0A8h
.eh_frame:000000000000ABFA                 db 0FFh
.eh_frame:000000000000ABFB                 db 0FFh
.eh_frame:000000000000ABFC                 db  56h ; V
.eh_frame:000000000000ABFD                 db    0
.eh_frame:000000000000ABFE                 db    0
.eh_frame:000000000000ABFF                 db    0
.eh_frame:000000000000AC00                 db    0
.eh_frame:000000000000AC01                 db  42h ; B
.eh_frame:000000000000AC02                 db  0Eh
.eh_frame:000000000000AC03                 db  10h
.eh_frame:000000000000AC04                 db  8Dh
.eh_frame:000000000000AC05                 db    2
.eh_frame:000000000000AC06                 db  42h ; B
.eh_frame:000000000000AC07                 db  0Eh
.eh_frame:000000000000AC08                 db  18h
.eh_frame:000000000000AC09                 db  8Ch
.eh_frame:000000000000AC0A                 db    3
.eh_frame:000000000000AC0B                 db  43h ; C
.eh_frame:000000000000AC0C                 db  0Eh
.eh_frame:000000000000AC0D                 db  20h
.eh_frame:000000000000AC0E                 db  86h
.eh_frame:000000000000AC0F                 db    4
.eh_frame:000000000000AC10                 db  41h ; A
.eh_frame:000000000000AC11                 db  0Eh
.eh_frame:000000000000AC12                 db  28h ; (
.eh_frame:000000000000AC13                 db  83h
.eh_frame:000000000000AC14                 db    5
.eh_frame:000000000000AC15                 db  4Dh ; M
.eh_frame:000000000000AC16                 db  0Eh
.eh_frame:000000000000AC17                 db  30h ; 0
.eh_frame:000000000000AC18                 db  78h ; x
.eh_frame:000000000000AC19                 db  0Eh
.eh_frame:000000000000AC1A                 db  28h ; (
.eh_frame:000000000000AC1B                 db  43h ; C
.eh_frame:000000000000AC1C                 db  0Eh
.eh_frame:000000000000AC1D                 db  20h
.eh_frame:000000000000AC1E                 db  41h ; A
.eh_frame:000000000000AC1F                 db  0Eh
.eh_frame:000000000000AC20                 db  18h
.eh_frame:000000000000AC21                 db  42h ; B
.eh_frame:000000000000AC22                 db  0Eh
.eh_frame:000000000000AC23                 db  10h
.eh_frame:000000000000AC24                 db  42h ; B
.eh_frame:000000000000AC25                 db  0Eh
.eh_frame:000000000000AC26                 db    8
.eh_frame:000000000000AC27                 db    0
.eh_frame:000000000000AC28                 db  4Ch ; L
.eh_frame:000000000000AC29                 db    0
.eh_frame:000000000000AC2A                 db    0
.eh_frame:000000000000AC2B                 db    0
.eh_frame:000000000000AC2C                 db  64h ; d
.eh_frame:000000000000AC2D                 db    3
.eh_frame:000000000000AC2E                 db    0
.eh_frame:000000000000AC2F                 db    0
.eh_frame:000000000000AC30                 db  10h
.eh_frame:000000000000AC31                 db 0A9h
.eh_frame:000000000000AC32                 db 0FFh
.eh_frame:000000000000AC33                 db 0FFh
.eh_frame:000000000000AC34                 db  76h ; v
.eh_frame:000000000000AC35                 db    0
.eh_frame:000000000000AC36                 db    0
.eh_frame:000000000000AC37                 db    0
.eh_frame:000000000000AC38                 db    0
.eh_frame:000000000000AC39                 db  42h ; B
.eh_frame:000000000000AC3A                 db  0Eh
.eh_frame:000000000000AC3B                 db  10h
.eh_frame:000000000000AC3C                 db  8Dh
.eh_frame:000000000000AC3D                 db    2
.eh_frame:000000000000AC3E                 db  42h ; B
.eh_frame:000000000000AC3F                 db  0Eh
.eh_frame:000000000000AC40                 db  18h
.eh_frame:000000000000AC41                 db  8Ch
.eh_frame:000000000000AC42                 db    3
.eh_frame:000000000000AC43                 db  41h ; A
.eh_frame:000000000000AC44                 db  0Eh
.eh_frame:000000000000AC45                 db  20h
.eh_frame:000000000000AC46                 db  86h
.eh_frame:000000000000AC47                 db    4
.eh_frame:000000000000AC48                 db  41h ; A
.eh_frame:000000000000AC49                 db  0Eh
.eh_frame:000000000000AC4A                 db  28h ; (
.eh_frame:000000000000AC4B                 db  83h
.eh_frame:000000000000AC4C                 db    5
.eh_frame:000000000000AC4D                 db  44h ; D
.eh_frame:000000000000AC4E                 db  0Eh
.eh_frame:000000000000AC4F                 db  30h ; 0
.eh_frame:000000000000AC50                 db  7Eh ; ~
.eh_frame:000000000000AC51                 db  0Ah
.eh_frame:000000000000AC52                 db  0Eh
.eh_frame:000000000000AC53                 db  28h ; (
.eh_frame:000000000000AC54                 db  44h ; D
.eh_frame:000000000000AC55                 db  0Eh
.eh_frame:000000000000AC56                 db  20h
.eh_frame:000000000000AC57                 db  41h ; A
.eh_frame:000000000000AC58                 db  0Eh
.eh_frame:000000000000AC59                 db  18h
.eh_frame:000000000000AC5A                 db  42h ; B
.eh_frame:000000000000AC5B                 db  0Eh
.eh_frame:000000000000AC5C                 db  10h
.eh_frame:000000000000AC5D                 db  42h ; B
.eh_frame:000000000000AC5E                 db  0Eh
.eh_frame:000000000000AC5F                 db    8
.eh_frame:000000000000AC60                 db  47h ; G
.eh_frame:000000000000AC61                 db  0Bh
.eh_frame:000000000000AC62                 db  4Fh ; O
.eh_frame:000000000000AC63                 db  0Ah
.eh_frame:000000000000AC64                 db  0Eh
.eh_frame:000000000000AC65                 db  28h ; (
.eh_frame:000000000000AC66                 db  44h ; D
.eh_frame:000000000000AC67                 db  0Eh
.eh_frame:000000000000AC68                 db  20h
.eh_frame:000000000000AC69                 db  41h ; A
.eh_frame:000000000000AC6A                 db  0Eh
.eh_frame:000000000000AC6B                 db  18h
.eh_frame:000000000000AC6C                 db  42h ; B
.eh_frame:000000000000AC6D                 db  0Eh
.eh_frame:000000000000AC6E                 db  10h
.eh_frame:000000000000AC6F                 db  42h ; B
.eh_frame:000000000000AC70                 db  0Eh
.eh_frame:000000000000AC71                 db    8
.eh_frame:000000000000AC72                 db  41h ; A
.eh_frame:000000000000AC73                 db  0Bh
.eh_frame:000000000000AC74                 db    0
.eh_frame:000000000000AC75                 db    0
.eh_frame:000000000000AC76                 db    0
.eh_frame:000000000000AC77                 db    0
.eh_frame:000000000000AC78                 db  14h
.eh_frame:000000000000AC79                 db    0
.eh_frame:000000000000AC7A                 db    0
.eh_frame:000000000000AC7B                 db    0
.eh_frame:000000000000AC7C                 db 0B4h
.eh_frame:000000000000AC7D                 db    3
.eh_frame:000000000000AC7E                 db    0
.eh_frame:000000000000AC7F                 db    0
.eh_frame:000000000000AC80                 db  40h ; @
.eh_frame:000000000000AC81                 db 0A9h
.eh_frame:000000000000AC82                 db 0FFh
.eh_frame:000000000000AC83                 db 0FFh
.eh_frame:000000000000AC84                 db  42h ; B
.eh_frame:000000000000AC85                 db    0
.eh_frame:000000000000AC86                 db    0
.eh_frame:000000000000AC87                 db    0
.eh_frame:000000000000AC88                 db    0
.eh_frame:000000000000AC89                 db    0
.eh_frame:000000000000AC8A                 db    0
.eh_frame:000000000000AC8B                 db    0
.eh_frame:000000000000AC8C                 db    0
.eh_frame:000000000000AC8D                 db    0
.eh_frame:000000000000AC8E                 db    0
.eh_frame:000000000000AC8F                 db    0
.eh_frame:000000000000AC90                 db  1Ch
.eh_frame:000000000000AC91                 db    0
.eh_frame:000000000000AC92                 db    0
.eh_frame:000000000000AC93                 db    0
.eh_frame:000000000000AC94                 db 0CCh
.eh_frame:000000000000AC95                 db    3
.eh_frame:000000000000AC96                 db    0
.eh_frame:000000000000AC97                 db    0
.eh_frame:000000000000AC98                 db  78h ; x
.eh_frame:000000000000AC99                 db 0A9h
.eh_frame:000000000000AC9A                 db 0FFh
.eh_frame:000000000000AC9B                 db 0FFh
.eh_frame:000000000000AC9C                 db  9Fh
.eh_frame:000000000000AC9D                 db    0
.eh_frame:000000000000AC9E                 db    0
.eh_frame:000000000000AC9F                 db    0
.eh_frame:000000000000ACA0                 db    0
.eh_frame:000000000000ACA1                 db  44h ; D
.eh_frame:000000000000ACA2                 db  0Eh
.eh_frame:000000000000ACA3                 db  10h
.eh_frame:000000000000ACA4                 db  83h
.eh_frame:000000000000ACA5                 db    2
.eh_frame:000000000000ACA6                 db    2
.eh_frame:000000000000ACA7                 db  78h ; x
.eh_frame:000000000000ACA8                 db  0Ah
.eh_frame:000000000000ACA9                 db  0Eh
.eh_frame:000000000000ACAA                 db    8
.eh_frame:000000000000ACAB                 db  41h ; A
.eh_frame:000000000000ACAC                 db  0Bh
.eh_frame:000000000000ACAD                 db    0
.eh_frame:000000000000ACAE                 db    0
.eh_frame:000000000000ACAF                 db    0
.eh_frame:000000000000ACB0                 db  40h ; @
.eh_frame:000000000000ACB1                 db    0
.eh_frame:000000000000ACB2                 db    0
.eh_frame:000000000000ACB3                 db    0
.eh_frame:000000000000ACB4                 db 0ECh
.eh_frame:000000000000ACB5                 db    3
.eh_frame:000000000000ACB6                 db    0
.eh_frame:000000000000ACB7                 db    0
.eh_frame:000000000000ACB8                 db 0F8h
.eh_frame:000000000000ACB9                 db 0A9h
.eh_frame:000000000000ACBA                 db 0FFh
.eh_frame:000000000000ACBB                 db 0FFh
.eh_frame:000000000000ACBC                 db 0E7h
.eh_frame:000000000000ACBD                 db    0
.eh_frame:000000000000ACBE                 db    0
.eh_frame:000000000000ACBF                 db    0
.eh_frame:000000000000ACC0                 db    0
.eh_frame:000000000000ACC1                 db  41h ; A
.eh_frame:000000000000ACC2                 db  0Eh
.eh_frame:000000000000ACC3                 db  10h
.eh_frame:000000000000ACC4                 db  86h
.eh_frame:000000000000ACC5                 db    2
.eh_frame:000000000000ACC6                 db  41h ; A
.eh_frame:000000000000ACC7                 db  0Eh
.eh_frame:000000000000ACC8                 db  18h
.eh_frame:000000000000ACC9                 db  83h
.eh_frame:000000000000ACCA                 db    3
.eh_frame:000000000000ACCB                 db  49h ; I
.eh_frame:000000000000ACCC                 db  0Eh
.eh_frame:000000000000ACCD                 db  20h
.eh_frame:000000000000ACCE                 db  6Eh ; n
.eh_frame:000000000000ACCF                 db  0Ah
.eh_frame:000000000000ACD0                 db  0Eh
.eh_frame:000000000000ACD1                 db  18h
.eh_frame:000000000000ACD2                 db  41h ; A
.eh_frame:000000000000ACD3                 db  0Eh
.eh_frame:000000000000ACD4                 db  10h
.eh_frame:000000000000ACD5                 db  41h ; A
.eh_frame:000000000000ACD6                 db  0Eh
.eh_frame:000000000000ACD7                 db    8
.eh_frame:000000000000ACD8                 db  45h ; E
.eh_frame:000000000000ACD9                 db  0Bh
.eh_frame:000000000000ACDA                 db    2
.eh_frame:000000000000ACDB                 db  4Ah ; J
.eh_frame:000000000000ACDC                 db  0Ah
.eh_frame:000000000000ACDD                 db  0Eh
.eh_frame:000000000000ACDE                 db  18h
.eh_frame:000000000000ACDF                 db  41h ; A
.eh_frame:000000000000ACE0                 db  0Eh
.eh_frame:000000000000ACE1                 db  10h
.eh_frame:000000000000ACE2                 db  41h ; A
.eh_frame:000000000000ACE3                 db  0Eh
.eh_frame:000000000000ACE4                 db    8
.eh_frame:000000000000ACE5                 db  44h ; D
.eh_frame:000000000000ACE6                 db  0Bh
.eh_frame:000000000000ACE7                 db    2
.eh_frame:000000000000ACE8                 db  54h ; T
.eh_frame:000000000000ACE9                 db  0Eh
.eh_frame:000000000000ACEA                 db  18h
.eh_frame:000000000000ACEB                 db  41h ; A
.eh_frame:000000000000ACEC                 db  0Eh
.eh_frame:000000000000ACED                 db  10h
.eh_frame:000000000000ACEE                 db  41h ; A
.eh_frame:000000000000ACEF                 db  0Eh
.eh_frame:000000000000ACF0                 db    8
.eh_frame:000000000000ACF1                 db    0
.eh_frame:000000000000ACF2                 db    0
.eh_frame:000000000000ACF3                 db    0
.eh_frame:000000000000ACF4                 db  74h ; t
.eh_frame:000000000000ACF5                 db    0
.eh_frame:000000000000ACF6                 db    0
.eh_frame:000000000000ACF7                 db    0
.eh_frame:000000000000ACF8                 db  30h ; 0
.eh_frame:000000000000ACF9                 db    4
.eh_frame:000000000000ACFA                 db    0
.eh_frame:000000000000ACFB                 db    0
.eh_frame:000000000000ACFC                 db 0A4h
.eh_frame:000000000000ACFD                 db 0AAh
.eh_frame:000000000000ACFE                 db 0FFh
.eh_frame:000000000000ACFF                 db 0FFh
.eh_frame:000000000000AD00                 db  34h ; 4
.eh_frame:000000000000AD01                 db  12h
.eh_frame:000000000000AD02                 db    0
.eh_frame:000000000000AD03                 db    0
.eh_frame:000000000000AD04                 db    0
.eh_frame:000000000000AD05                 db  42h ; B
.eh_frame:000000000000AD06                 db  0Eh
.eh_frame:000000000000AD07                 db  10h
.eh_frame:000000000000AD08                 db  8Fh
.eh_frame:000000000000AD09                 db    2
.eh_frame:000000000000AD0A                 db  42h ; B
.eh_frame:000000000000AD0B                 db  0Eh
.eh_frame:000000000000AD0C                 db  18h
.eh_frame:000000000000AD0D                 db  8Eh
.eh_frame:000000000000AD0E                 db    3
.eh_frame:000000000000AD0F                 db  45h ; E
.eh_frame:000000000000AD10                 db  0Eh
.eh_frame:000000000000AD11                 db  20h
.eh_frame:000000000000AD12                 db  8Dh
.eh_frame:000000000000AD13                 db    4
.eh_frame:000000000000AD14                 db  42h ; B
.eh_frame:000000000000AD15                 db  0Eh
.eh_frame:000000000000AD16                 db  28h ; (
.eh_frame:000000000000AD17                 db  8Ch
.eh_frame:000000000000AD18                 db    5
.eh_frame:000000000000AD19                 db  44h ; D
.eh_frame:000000000000AD1A                 db  0Eh
.eh_frame:000000000000AD1B                 db  30h ; 0
.eh_frame:000000000000AD1C                 db  86h
.eh_frame:000000000000AD1D                 db    6
.eh_frame:000000000000AD1E                 db  41h ; A
.eh_frame:000000000000AD1F                 db  0Eh
.eh_frame:000000000000AD20                 db  38h ; 8
.eh_frame:000000000000AD21                 db  83h
.eh_frame:000000000000AD22                 db    7
.eh_frame:000000000000AD23                 db  53h ; S
.eh_frame:000000000000AD24                 db  0Eh
.eh_frame:000000000000AD25                 db 0F0h
.eh_frame:000000000000AD26                 db    1
.eh_frame:000000000000AD27                 db    3
.eh_frame:000000000000AD28                 db  81h
.eh_frame:000000000000AD29                 db  0Bh
.eh_frame:000000000000AD2A                 db  0Eh
.eh_frame:000000000000AD2B                 db 0F8h
.eh_frame:000000000000AD2C                 db    1
.eh_frame:000000000000AD2D                 db  4Ah ; J
.eh_frame:000000000000AD2E                 db  0Eh
.eh_frame:000000000000AD2F                 db  80h
.eh_frame:000000000000AD30                 db    2
.eh_frame:000000000000AD31                 db  44h ; D
.eh_frame:000000000000AD32                 db  0Eh
.eh_frame:000000000000AD33                 db  88h
.eh_frame:000000000000AD34                 db    2
.eh_frame:000000000000AD35                 db  45h ; E
.eh_frame:000000000000AD36                 db  0Eh
.eh_frame:000000000000AD37                 db  90h
.eh_frame:000000000000AD38                 db    2
.eh_frame:000000000000AD39                 db  5Fh ; _
.eh_frame:000000000000AD3A                 db  0Eh
.eh_frame:000000000000AD3B                 db 0F0h
.eh_frame:000000000000AD3C                 db    1
.eh_frame:000000000000AD3D                 db  64h ; d
.eh_frame:000000000000AD3E                 db  0Ah
.eh_frame:000000000000AD3F                 db  0Eh
.eh_frame:000000000000AD40                 db  38h ; 8
.eh_frame:000000000000AD41                 db  41h ; A
.eh_frame:000000000000AD42                 db  0Eh
.eh_frame:000000000000AD43                 db  30h ; 0
.eh_frame:000000000000AD44                 db  41h ; A
.eh_frame:000000000000AD45                 db  0Eh
.eh_frame:000000000000AD46                 db  28h ; (
.eh_frame:000000000000AD47                 db  42h ; B
.eh_frame:000000000000AD48                 db  0Eh
.eh_frame:000000000000AD49                 db  20h
.eh_frame:000000000000AD4A                 db  42h ; B
.eh_frame:000000000000AD4B                 db  0Eh
.eh_frame:000000000000AD4C                 db  18h
.eh_frame:000000000000AD4D                 db  42h ; B
.eh_frame:000000000000AD4E                 db  0Eh
.eh_frame:000000000000AD4F                 db  10h
.eh_frame:000000000000AD50                 db  42h ; B
.eh_frame:000000000000AD51                 db  0Eh
.eh_frame:000000000000AD52                 db    8
.eh_frame:000000000000AD53                 db  44h ; D
.eh_frame:000000000000AD54                 db  0Bh
.eh_frame:000000000000AD55                 db    3
.eh_frame:000000000000AD56                 db  99h
.eh_frame:000000000000AD57                 db    5
.eh_frame:000000000000AD58                 db  0Eh
.eh_frame:000000000000AD59                 db 0F8h
.eh_frame:000000000000AD5A                 db    1
.eh_frame:000000000000AD5B                 db  4Dh ; M
.eh_frame:000000000000AD5C                 db  0Eh
.eh_frame:000000000000AD5D                 db  80h
.eh_frame:000000000000AD5E                 db    2
.eh_frame:000000000000AD5F                 db  44h ; D
.eh_frame:000000000000AD60                 db  0Eh
.eh_frame:000000000000AD61                 db  88h
.eh_frame:000000000000AD62                 db    2
.eh_frame:000000000000AD63                 db  47h ; G
.eh_frame:000000000000AD64                 db  0Eh
.eh_frame:000000000000AD65                 db  90h
.eh_frame:000000000000AD66                 db    2
.eh_frame:000000000000AD67                 db  5Bh ; [
.eh_frame:000000000000AD68                 db  0Eh
.eh_frame:000000000000AD69                 db 0F0h
.eh_frame:000000000000AD6A                 db    1
.eh_frame:000000000000AD6B                 db    0
.eh_frame:000000000000AD6C                 db  68h ; h
.eh_frame:000000000000AD6D                 db    0
.eh_frame:000000000000AD6E                 db    0
.eh_frame:000000000000AD6F                 db    0
.eh_frame:000000000000AD70                 db 0A8h
.eh_frame:000000000000AD71                 db    4
.eh_frame:000000000000AD72                 db    0
.eh_frame:000000000000AD73                 db    0
.eh_frame:000000000000AD74                 db  6Ch ; l
.eh_frame:000000000000AD75                 db 0BCh
.eh_frame:000000000000AD76                 db 0FFh
.eh_frame:000000000000AD77                 db 0FFh
.eh_frame:000000000000AD78                 db 0ABh
.eh_frame:000000000000AD79                 db    1
.eh_frame:000000000000AD7A                 db    0
.eh_frame:000000000000AD7B                 db    0
.eh_frame:000000000000AD7C                 db    0
.eh_frame:000000000000AD7D                 db  42h ; B
.eh_frame:000000000000AD7E                 db  0Eh
.eh_frame:000000000000AD7F                 db  10h
.eh_frame:000000000000AD80                 db  8Fh
.eh_frame:000000000000AD81                 db    2
.eh_frame:000000000000AD82                 db  42h ; B
.eh_frame:000000000000AD83                 db  0Eh
.eh_frame:000000000000AD84                 db  18h
.eh_frame:000000000000AD85                 db  8Eh
.eh_frame:000000000000AD86                 db    3
.eh_frame:000000000000AD87                 db  45h ; E
.eh_frame:000000000000AD88                 db  0Eh
.eh_frame:000000000000AD89                 db  20h
.eh_frame:000000000000AD8A                 db  8Dh
.eh_frame:000000000000AD8B                 db    4
.eh_frame:000000000000AD8C                 db  42h ; B
.eh_frame:000000000000AD8D                 db  0Eh
.eh_frame:000000000000AD8E                 db  28h ; (
.eh_frame:000000000000AD8F                 db  8Ch
.eh_frame:000000000000AD90                 db    5
.eh_frame:000000000000AD91                 db  44h ; D
.eh_frame:000000000000AD92                 db  0Eh
.eh_frame:000000000000AD93                 db  30h ; 0
.eh_frame:000000000000AD94                 db  86h
.eh_frame:000000000000AD95                 db    6
.eh_frame:000000000000AD96                 db  41h ; A
.eh_frame:000000000000AD97                 db  0Eh
.eh_frame:000000000000AD98                 db  38h ; 8
.eh_frame:000000000000AD99                 db  83h
.eh_frame:000000000000AD9A                 db    7
.eh_frame:000000000000AD9B                 db  47h ; G
.eh_frame:000000000000AD9C                 db  0Eh
.eh_frame:000000000000AD9D                 db  60h ; `
.eh_frame:000000000000AD9E                 db    2
.eh_frame:000000000000AD9F                 db  99h
.eh_frame:000000000000ADA0                 db  0Eh
.eh_frame:000000000000ADA1                 db  68h ; h
.eh_frame:000000000000ADA2                 db  5Fh ; _
.eh_frame:000000000000ADA3                 db  0Eh
.eh_frame:000000000000ADA4                 db  70h ; p
.eh_frame:000000000000ADA5                 db  46h ; F
.eh_frame:000000000000ADA6                 db  0Eh
.eh_frame:000000000000ADA7                 db  78h ; x
.eh_frame:000000000000ADA8                 db  42h ; B
.eh_frame:000000000000ADA9                 db  0Eh
.eh_frame:000000000000ADAA                 db  80h
.eh_frame:000000000000ADAB                 db    1
.eh_frame:000000000000ADAC                 db  59h ; Y
.eh_frame:000000000000ADAD                 db  0Eh
.eh_frame:000000000000ADAE                 db  60h ; `
.eh_frame:000000000000ADAF                 db    2
.eh_frame:000000000000ADB0                 db  40h ; @
.eh_frame:000000000000ADB1                 db  0Eh
.eh_frame:000000000000ADB2                 db  68h ; h
.eh_frame:000000000000ADB3                 db  4Bh ; K
.eh_frame:000000000000ADB4                 db  0Eh
.eh_frame:000000000000ADB5                 db  70h ; p
.eh_frame:000000000000ADB6                 db  43h ; C
.eh_frame:000000000000ADB7                 db  0Eh
.eh_frame:000000000000ADB8                 db  78h ; x
.eh_frame:000000000000ADB9                 db  45h ; E
.eh_frame:000000000000ADBA                 db  0Eh
.eh_frame:000000000000ADBB                 db  80h
.eh_frame:000000000000ADBC                 db    1
.eh_frame:000000000000ADBD                 db  5Eh ; ^
.eh_frame:000000000000ADBE                 db  0Eh
.eh_frame:000000000000ADBF                 db  60h ; `
.eh_frame:000000000000ADC0                 db  4Ch ; L
.eh_frame:000000000000ADC1                 db  0Ah
.eh_frame:000000000000ADC2                 db  0Eh
.eh_frame:000000000000ADC3                 db  38h ; 8
.eh_frame:000000000000ADC4                 db  44h ; D
.eh_frame:000000000000ADC5                 db  0Eh
.eh_frame:000000000000ADC6                 db  30h ; 0
.eh_frame:000000000000ADC7                 db  41h ; A
.eh_frame:000000000000ADC8                 db  0Eh
.eh_frame:000000000000ADC9                 db  28h ; (
.eh_frame:000000000000ADCA                 db  42h ; B
.eh_frame:000000000000ADCB                 db  0Eh
.eh_frame:000000000000ADCC                 db  20h
.eh_frame:000000000000ADCD                 db  42h ; B
.eh_frame:000000000000ADCE                 db  0Eh
.eh_frame:000000000000ADCF                 db  18h
.eh_frame:000000000000ADD0                 db  42h ; B
.eh_frame:000000000000ADD1                 db  0Eh
.eh_frame:000000000000ADD2                 db  10h
.eh_frame:000000000000ADD3                 db  42h ; B
.eh_frame:000000000000ADD4                 db  0Eh
.eh_frame:000000000000ADD5                 db    8
.eh_frame:000000000000ADD6                 db  46h ; F
.eh_frame:000000000000ADD7                 db  0Bh
.eh_frame:000000000000ADD8                 db  28h ; (
.eh_frame:000000000000ADD9                 db    0
.eh_frame:000000000000ADDA                 db    0
.eh_frame:000000000000ADDB                 db    0
.eh_frame:000000000000ADDC                 db  14h
.eh_frame:000000000000ADDD                 db    5
.eh_frame:000000000000ADDE                 db    0
.eh_frame:000000000000ADDF                 db    0
.eh_frame:000000000000ADE0                 db 0B0h
.eh_frame:000000000000ADE1                 db 0BDh
.eh_frame:000000000000ADE2                 db 0FFh
.eh_frame:000000000000ADE3                 db 0FFh
.eh_frame:000000000000ADE4                 db  36h ; 6
.eh_frame:000000000000ADE5                 db    0
.eh_frame:000000000000ADE6                 db    0
.eh_frame:000000000000ADE7                 db    0
.eh_frame:000000000000ADE8                 db    0
.eh_frame:000000000000ADE9                 db  42h ; B
.eh_frame:000000000000ADEA                 db  0Eh
.eh_frame:000000000000ADEB                 db  10h
.eh_frame:000000000000ADEC                 db  8Ch
.eh_frame:000000000000ADED                 db    2
.eh_frame:000000000000ADEE                 db  41h ; A
.eh_frame:000000000000ADEF                 db  0Eh
.eh_frame:000000000000ADF0                 db  18h
.eh_frame:000000000000ADF1                 db  86h
.eh_frame:000000000000ADF2                 db    3
.eh_frame:000000000000ADF3                 db  41h ; A
.eh_frame:000000000000ADF4                 db  0Eh
.eh_frame:000000000000ADF5                 db  20h
.eh_frame:000000000000ADF6                 db  83h
.eh_frame:000000000000ADF7                 db    4
.eh_frame:000000000000ADF8                 db  6Eh ; n
.eh_frame:000000000000ADF9                 db  0Eh
.eh_frame:000000000000ADFA                 db  18h
.eh_frame:000000000000ADFB                 db  41h ; A
.eh_frame:000000000000ADFC                 db  0Eh
.eh_frame:000000000000ADFD                 db  10h
.eh_frame:000000000000ADFE                 db  42h ; B
.eh_frame:000000000000ADFF                 db  0Eh
.eh_frame:000000000000AE00                 db    8
.eh_frame:000000000000AE01                 db    0
.eh_frame:000000000000AE02                 db    0
.eh_frame:000000000000AE03                 db    0
.eh_frame:000000000000AE04                 db  10h
.eh_frame:000000000000AE05                 db    0
.eh_frame:000000000000AE06                 db    0
.eh_frame:000000000000AE07                 db    0
.eh_frame:000000000000AE08                 db  40h ; @
.eh_frame:000000000000AE09                 db    5
.eh_frame:000000000000AE0A                 db    0
.eh_frame:000000000000AE0B                 db    0
.eh_frame:000000000000AE0C                 db 0C4h
.eh_frame:000000000000AE0D                 db 0BDh
.eh_frame:000000000000AE0E                 db 0FFh
.eh_frame:000000000000AE0F                 db 0FFh
.eh_frame:000000000000AE10                 db  11h
.eh_frame:000000000000AE11                 db    0
.eh_frame:000000000000AE12                 db    0
.eh_frame:000000000000AE13                 db    0
.eh_frame:000000000000AE14                 db    0
.eh_frame:000000000000AE15                 db    0
.eh_frame:000000000000AE16                 db    0
.eh_frame:000000000000AE17                 db    0
.eh_frame:000000000000AE18                 db  10h
.eh_frame:000000000000AE19                 db    0
.eh_frame:000000000000AE1A                 db    0
.eh_frame:000000000000AE1B                 db    0
.eh_frame:000000000000AE1C                 db  54h ; T
.eh_frame:000000000000AE1D                 db    5
.eh_frame:000000000000AE1E                 db    0
.eh_frame:000000000000AE1F                 db    0
.eh_frame:000000000000AE20                 db 0D0h
.eh_frame:000000000000AE21                 db 0BDh
.eh_frame:000000000000AE22                 db 0FFh
.eh_frame:000000000000AE23                 db 0FFh
.eh_frame:000000000000AE24                 db  11h
.eh_frame:000000000000AE25                 db    0
.eh_frame:000000000000AE26                 db    0
.eh_frame:000000000000AE27                 db    0
.eh_frame:000000000000AE28                 db    0
.eh_frame:000000000000AE29                 db    0
.eh_frame:000000000000AE2A                 db    0
.eh_frame:000000000000AE2B                 db    0
.eh_frame:000000000000AE2C                 db  10h
.eh_frame:000000000000AE2D                 db    0
.eh_frame:000000000000AE2E                 db    0
.eh_frame:000000000000AE2F                 db    0
.eh_frame:000000000000AE30                 db  68h ; h
.eh_frame:000000000000AE31                 db    5
.eh_frame:000000000000AE32                 db    0
.eh_frame:000000000000AE33                 db    0
.eh_frame:000000000000AE34                 db 0DCh
.eh_frame:000000000000AE35                 db 0BDh
.eh_frame:000000000000AE36                 db 0FFh
.eh_frame:000000000000AE37                 db 0FFh
.eh_frame:000000000000AE38                 db  35h ; 5
.eh_frame:000000000000AE39                 db    0
.eh_frame:000000000000AE3A                 db    0
.eh_frame:000000000000AE3B                 db    0
.eh_frame:000000000000AE3C                 db    0
.eh_frame:000000000000AE3D                 db    0
.eh_frame:000000000000AE3E                 db    0
.eh_frame:000000000000AE3F                 db    0
.eh_frame:000000000000AE40                 db  10h
.eh_frame:000000000000AE41                 db    0
.eh_frame:000000000000AE42                 db    0
.eh_frame:000000000000AE43                 db    0
.eh_frame:000000000000AE44                 db  7Ch ; |
.eh_frame:000000000000AE45                 db    5
.eh_frame:000000000000AE46                 db    0
.eh_frame:000000000000AE47                 db    0
.eh_frame:000000000000AE48                 db    8
.eh_frame:000000000000AE49                 db 0BEh
.eh_frame:000000000000AE4A                 db 0FFh
.eh_frame:000000000000AE4B                 db 0FFh
.eh_frame:000000000000AE4C                 db  15h
.eh_frame:000000000000AE4D                 db    0
.eh_frame:000000000000AE4E                 db    0
.eh_frame:000000000000AE4F                 db    0
.eh_frame:000000000000AE50                 db    0
.eh_frame:000000000000AE51                 db    0
.eh_frame:000000000000AE52                 db    0
.eh_frame:000000000000AE53                 db    0
.eh_frame:000000000000AE54                 db  10h
.eh_frame:000000000000AE55                 db    0
.eh_frame:000000000000AE56                 db    0
.eh_frame:000000000000AE57                 db    0
.eh_frame:000000000000AE58                 db  90h
.eh_frame:000000000000AE59                 db    5
.eh_frame:000000000000AE5A                 db    0
.eh_frame:000000000000AE5B                 db    0
.eh_frame:000000000000AE5C                 db  14h
.eh_frame:000000000000AE5D                 db 0BEh
.eh_frame:000000000000AE5E                 db 0FFh
.eh_frame:000000000000AE5F                 db 0FFh
.eh_frame:000000000000AE60                 db  30h ; 0
.eh_frame:000000000000AE61                 db    0
.eh_frame:000000000000AE62                 db    0
.eh_frame:000000000000AE63                 db    0
.eh_frame:000000000000AE64                 db    0
.eh_frame:000000000000AE65                 db  6Bh ; k
.eh_frame:000000000000AE66                 db  0Eh
.eh_frame:000000000000AE67                 db  10h
.eh_frame:000000000000AE68                 db  50h ; P
.eh_frame:000000000000AE69                 db    0
.eh_frame:000000000000AE6A                 db    0
.eh_frame:000000000000AE6B                 db    0
.eh_frame:000000000000AE6C                 db 0A4h
.eh_frame:000000000000AE6D                 db    5
.eh_frame:000000000000AE6E                 db    0
.eh_frame:000000000000AE6F                 db    0
.eh_frame:000000000000AE70                 db  30h ; 0
.eh_frame:000000000000AE71                 db 0BEh
.eh_frame:000000000000AE72                 db 0FFh
.eh_frame:000000000000AE73                 db 0FFh
.eh_frame:000000000000AE74                 db  74h ; t
.eh_frame:000000000000AE75                 db    0
.eh_frame:000000000000AE76                 db    0
.eh_frame:000000000000AE77                 db    0
.eh_frame:000000000000AE78                 db    0
.eh_frame:000000000000AE79                 db  42h ; B
.eh_frame:000000000000AE7A                 db  0Eh
.eh_frame:000000000000AE7B                 db  10h
.eh_frame:000000000000AE7C                 db  8Fh
.eh_frame:000000000000AE7D                 db    2
.eh_frame:000000000000AE7E                 db  42h ; B
.eh_frame:000000000000AE7F                 db  0Eh
.eh_frame:000000000000AE80                 db  18h
.eh_frame:000000000000AE81                 db  8Eh
.eh_frame:000000000000AE82                 db    3
.eh_frame:000000000000AE83                 db  49h ; I
.eh_frame:000000000000AE84                 db  0Eh
.eh_frame:000000000000AE85                 db  20h
.eh_frame:000000000000AE86                 db  8Dh
.eh_frame:000000000000AE87                 db    4
.eh_frame:000000000000AE88                 db  42h ; B
.eh_frame:000000000000AE89                 db  0Eh
.eh_frame:000000000000AE8A                 db  28h ; (
.eh_frame:000000000000AE8B                 db  8Ch
.eh_frame:000000000000AE8C                 db    5
.eh_frame:000000000000AE8D                 db  44h ; D
.eh_frame:000000000000AE8E                 db  0Eh
.eh_frame:000000000000AE8F                 db  30h ; 0
.eh_frame:000000000000AE90                 db  86h
.eh_frame:000000000000AE91                 db    6
.eh_frame:000000000000AE92                 db  41h ; A
.eh_frame:000000000000AE93                 db  0Eh
.eh_frame:000000000000AE94                 db  38h ; 8
.eh_frame:000000000000AE95                 db  83h
.eh_frame:000000000000AE96                 db    7
.eh_frame:000000000000AE97                 db  4Dh ; M
.eh_frame:000000000000AE98                 db  0Eh
.eh_frame:000000000000AE99                 db  50h ; P
.eh_frame:000000000000AE9A                 db  5Fh ; _
.eh_frame:000000000000AE9B                 db  0Eh
.eh_frame:000000000000AE9C                 db  58h ; X
.eh_frame:000000000000AE9D                 db  47h ; G
.eh_frame:000000000000AE9E                 db  0Eh
.eh_frame:000000000000AE9F                 db  60h ; `
.eh_frame:000000000000AEA0                 db  46h ; F
.eh_frame:000000000000AEA1                 db  0Eh
.eh_frame:000000000000AEA2                 db  68h ; h
.eh_frame:000000000000AEA3                 db  44h ; D
.eh_frame:000000000000AEA4                 db  0Eh
.eh_frame:000000000000AEA5                 db  70h ; p
.eh_frame:000000000000AEA6                 db  58h ; X
.eh_frame:000000000000AEA7                 db  0Eh
.eh_frame:000000000000AEA8                 db  38h ; 8
.eh_frame:000000000000AEA9                 db  41h ; A
.eh_frame:000000000000AEAA                 db  0Eh
.eh_frame:000000000000AEAB                 db  30h ; 0
.eh_frame:000000000000AEAC                 db  41h ; A
.eh_frame:000000000000AEAD                 db  0Eh
.eh_frame:000000000000AEAE                 db  28h ; (
.eh_frame:000000000000AEAF                 db  42h ; B
.eh_frame:000000000000AEB0                 db  0Eh
.eh_frame:000000000000AEB1                 db  20h
.eh_frame:000000000000AEB2                 db  42h ; B
.eh_frame:000000000000AEB3                 db  0Eh
.eh_frame:000000000000AEB4                 db  18h
.eh_frame:000000000000AEB5                 db  42h ; B
.eh_frame:000000000000AEB6                 db  0Eh
.eh_frame:000000000000AEB7                 db  10h
.eh_frame:000000000000AEB8                 db  42h ; B
.eh_frame:000000000000AEB9                 db  0Eh
.eh_frame:000000000000AEBA                 db    8
.eh_frame:000000000000AEBB                 db    0
.eh_frame:000000000000AEBC                 db  68h ; h
.eh_frame:000000000000AEBD                 db    0
.eh_frame:000000000000AEBE                 db    0
.eh_frame:000000000000AEBF                 db    0
.eh_frame:000000000000AEC0                 db 0F8h
.eh_frame:000000000000AEC1                 db    5
.eh_frame:000000000000AEC2                 db    0
.eh_frame:000000000000AEC3                 db    0
.eh_frame:000000000000AEC4                 db  5Ch ; \
.eh_frame:000000000000AEC5                 db 0BEh
.eh_frame:000000000000AEC6                 db 0FFh
.eh_frame:000000000000AEC7                 db 0FFh
.eh_frame:000000000000AEC8                 db 0E3h
.eh_frame:000000000000AEC9                 db    0
.eh_frame:000000000000AECA                 db    0
.eh_frame:000000000000AECB                 db    0
.eh_frame:000000000000AECC                 db    0
.eh_frame:000000000000AECD                 db  42h ; B
.eh_frame:000000000000AECE                 db  0Eh
.eh_frame:000000000000AECF                 db  10h
.eh_frame:000000000000AED0                 db  8Fh
.eh_frame:000000000000AED1                 db    2
.eh_frame:000000000000AED2                 db  42h ; B
.eh_frame:000000000000AED3                 db  0Eh
.eh_frame:000000000000AED4                 db  18h
.eh_frame:000000000000AED5                 db  8Eh
.eh_frame:000000000000AED6                 db    3
.eh_frame:000000000000AED7                 db  49h ; I
.eh_frame:000000000000AED8                 db  0Eh
.eh_frame:000000000000AED9                 db  20h
.eh_frame:000000000000AEDA                 db  8Dh
.eh_frame:000000000000AEDB                 db    4
.eh_frame:000000000000AEDC                 db  42h ; B
.eh_frame:000000000000AEDD                 db  0Eh
.eh_frame:000000000000AEDE                 db  28h ; (
.eh_frame:000000000000AEDF                 db  8Ch
.eh_frame:000000000000AEE0                 db    5
.eh_frame:000000000000AEE1                 db  44h ; D
.eh_frame:000000000000AEE2                 db  0Eh
.eh_frame:000000000000AEE3                 db  30h ; 0
.eh_frame:000000000000AEE4                 db  86h
.eh_frame:000000000000AEE5                 db    6
.eh_frame:000000000000AEE6                 db  41h ; A
.eh_frame:000000000000AEE7                 db  0Eh
.eh_frame:000000000000AEE8                 db  38h ; 8
.eh_frame:000000000000AEE9                 db  83h
.eh_frame:000000000000AEEA                 db    7
.eh_frame:000000000000AEEB                 db  4Dh ; M
.eh_frame:000000000000AEEC                 db  0Eh
.eh_frame:000000000000AEED                 db  70h ; p
.eh_frame:000000000000AEEE                 db  65h ; e
.eh_frame:000000000000AEEF                 db  0Eh
.eh_frame:000000000000AEF0                 db  78h ; x
.eh_frame:000000000000AEF1                 db  4Dh ; M
.eh_frame:000000000000AEF2                 db  0Eh
.eh_frame:000000000000AEF3                 db  80h
.eh_frame:000000000000AEF4                 db    1
.eh_frame:000000000000AEF5                 db  46h ; F
.eh_frame:000000000000AEF6                 db  0Eh
.eh_frame:000000000000AEF7                 db  88h
.eh_frame:000000000000AEF8                 db    1
.eh_frame:000000000000AEF9                 db  42h ; B
.eh_frame:000000000000AEFA                 db  0Eh
.eh_frame:000000000000AEFB                 db  90h
.eh_frame:000000000000AEFC                 db    1
.eh_frame:000000000000AEFD                 db  5Eh ; ^
.eh_frame:000000000000AEFE                 db  0Eh
.eh_frame:000000000000AEFF                 db  70h ; p
.eh_frame:000000000000AF00                 db  56h ; V
.eh_frame:000000000000AF01                 db  0Eh
.eh_frame:000000000000AF02                 db  78h ; x
.eh_frame:000000000000AF03                 db  43h ; C
.eh_frame:000000000000AF04                 db  0Eh
.eh_frame:000000000000AF05                 db  80h
.eh_frame:000000000000AF06                 db    1
.eh_frame:000000000000AF07                 db  43h ; C
.eh_frame:000000000000AF08                 db  0Eh
.eh_frame:000000000000AF09                 db  88h
.eh_frame:000000000000AF0A                 db    1
.eh_frame:000000000000AF0B                 db  56h ; V
.eh_frame:000000000000AF0C                 db  0Eh
.eh_frame:000000000000AF0D                 db  90h
.eh_frame:000000000000AF0E                 db    1
.eh_frame:000000000000AF0F                 db  52h ; R
.eh_frame:000000000000AF10                 db  0Eh
.eh_frame:000000000000AF11                 db  70h ; p
.eh_frame:000000000000AF12                 db  5Bh ; [
.eh_frame:000000000000AF13                 db  0Eh
.eh_frame:000000000000AF14                 db  38h ; 8
.eh_frame:000000000000AF15                 db  41h ; A
.eh_frame:000000000000AF16                 db  0Eh
.eh_frame:000000000000AF17                 db  30h ; 0
.eh_frame:000000000000AF18                 db  41h ; A
.eh_frame:000000000000AF19                 db  0Eh
.eh_frame:000000000000AF1A                 db  28h ; (
.eh_frame:000000000000AF1B                 db  42h ; B
.eh_frame:000000000000AF1C                 db  0Eh
.eh_frame:000000000000AF1D                 db  20h
.eh_frame:000000000000AF1E                 db  42h ; B
.eh_frame:000000000000AF1F                 db  0Eh
.eh_frame:000000000000AF20                 db  18h
.eh_frame:000000000000AF21                 db  42h ; B
.eh_frame:000000000000AF22                 db  0Eh
.eh_frame:000000000000AF23                 db  10h
.eh_frame:000000000000AF24                 db  42h ; B
.eh_frame:000000000000AF25                 db  0Eh
.eh_frame:000000000000AF26                 db    8
.eh_frame:000000000000AF27                 db    0
.eh_frame:000000000000AF28                 db  10h
.eh_frame:000000000000AF29                 db    0
.eh_frame:000000000000AF2A                 db    0
.eh_frame:000000000000AF2B                 db    0
.eh_frame:000000000000AF2C                 db  64h ; d
.eh_frame:000000000000AF2D                 db    6
.eh_frame:000000000000AF2E                 db    0
.eh_frame:000000000000AF2F                 db    0
.eh_frame:000000000000AF30                 db 0E0h
.eh_frame:000000000000AF31                 db 0BEh
.eh_frame:000000000000AF32                 db 0FFh
.eh_frame:000000000000AF33                 db 0FFh
.eh_frame:000000000000AF34                 db  0Ah
.eh_frame:000000000000AF35                 db    0
.eh_frame:000000000000AF36                 db    0
.eh_frame:000000000000AF37                 db    0
.eh_frame:000000000000AF38                 db    0
.eh_frame:000000000000AF39                 db    0
.eh_frame:000000000000AF3A                 db    0
.eh_frame:000000000000AF3B                 db    0
.eh_frame:000000000000AF3C                 db  28h ; (
.eh_frame:000000000000AF3D                 db    0
.eh_frame:000000000000AF3E                 db    0
.eh_frame:000000000000AF3F                 db    0
.eh_frame:000000000000AF40                 db  78h ; x
.eh_frame:000000000000AF41                 db    6
.eh_frame:000000000000AF42                 db    0
.eh_frame:000000000000AF43                 db    0
.eh_frame:000000000000AF44                 db 0DCh
.eh_frame:000000000000AF45                 db 0BEh
.eh_frame:000000000000AF46                 db 0FFh
.eh_frame:000000000000AF47                 db 0FFh
.eh_frame:000000000000AF48                 db  93h
.eh_frame:000000000000AF49                 db    0
.eh_frame:000000000000AF4A                 db    0
.eh_frame:000000000000AF4B                 db    0
.eh_frame:000000000000AF4C                 db    0
.eh_frame:000000000000AF4D                 db  48h ; H
.eh_frame:000000000000AF4E                 db  0Eh
.eh_frame:000000000000AF4F                 db  10h
.eh_frame:000000000000AF50                 db  8Ch
.eh_frame:000000000000AF51                 db    2
.eh_frame:000000000000AF52                 db  48h ; H
.eh_frame:000000000000AF53                 db  0Eh
.eh_frame:000000000000AF54                 db  18h
.eh_frame:000000000000AF55                 db  86h
.eh_frame:000000000000AF56                 db    3
.eh_frame:000000000000AF57                 db  41h ; A
.eh_frame:000000000000AF58                 db  0Eh
.eh_frame:000000000000AF59                 db  20h
.eh_frame:000000000000AF5A                 db  83h
.eh_frame:000000000000AF5B                 db    4
.eh_frame:000000000000AF5C                 db    2
.eh_frame:000000000000AF5D                 db  74h ; t
.eh_frame:000000000000AF5E                 db  0Eh
.eh_frame:000000000000AF5F                 db  18h
.eh_frame:000000000000AF60                 db  4Bh ; K
.eh_frame:000000000000AF61                 db  0Eh
.eh_frame:000000000000AF62                 db  10h
.eh_frame:000000000000AF63                 db  42h ; B
.eh_frame:000000000000AF64                 db  0Eh
.eh_frame:000000000000AF65                 db    8
.eh_frame:000000000000AF66                 db    0
.eh_frame:000000000000AF67                 db    0
.eh_frame:000000000000AF68                 db  10h
.eh_frame:000000000000AF69                 db    0
.eh_frame:000000000000AF6A                 db    0
.eh_frame:000000000000AF6B                 db    0
.eh_frame:000000000000AF6C                 db 0A4h
.eh_frame:000000000000AF6D                 db    6
.eh_frame:000000000000AF6E                 db    0
.eh_frame:000000000000AF6F                 db    0
.eh_frame:000000000000AF70                 db  50h ; P
.eh_frame:000000000000AF71                 db 0BFh
.eh_frame:000000000000AF72                 db 0FFh
.eh_frame:000000000000AF73                 db 0FFh
.eh_frame:000000000000AF74                 db  13h
.eh_frame:000000000000AF75                 db    0
.eh_frame:000000000000AF76                 db    0
.eh_frame:000000000000AF77                 db    0
.eh_frame:000000000000AF78                 db    0
.eh_frame:000000000000AF79                 db    0
.eh_frame:000000000000AF7A                 db    0
.eh_frame:000000000000AF7B                 db    0
.eh_frame:000000000000AF7C                 db  10h
.eh_frame:000000000000AF7D                 db    0
.eh_frame:000000000000AF7E                 db    0
.eh_frame:000000000000AF7F                 db    0
.eh_frame:000000000000AF80                 db 0B8h
.eh_frame:000000000000AF81                 db    6
.eh_frame:000000000000AF82                 db    0
.eh_frame:000000000000AF83                 db    0
.eh_frame:000000000000AF84                 db  5Ch ; \
.eh_frame:000000000000AF85                 db 0BFh
.eh_frame:000000000000AF86                 db 0FFh
.eh_frame:000000000000AF87                 db 0FFh
.eh_frame:000000000000AF88                 db  0Ch
.eh_frame:000000000000AF89                 db    0
.eh_frame:000000000000AF8A                 db    0
.eh_frame:000000000000AF8B                 db    0
.eh_frame:000000000000AF8C                 db    0
.eh_frame:000000000000AF8D                 db    0
.eh_frame:000000000000AF8E                 db    0
.eh_frame:000000000000AF8F                 db    0
.eh_frame:000000000000AF90                 db  10h
.eh_frame:000000000000AF91                 db    0
.eh_frame:000000000000AF92                 db    0
.eh_frame:000000000000AF93                 db    0
.eh_frame:000000000000AF94                 db 0CCh
.eh_frame:000000000000AF95                 db    6
.eh_frame:000000000000AF96                 db    0
.eh_frame:000000000000AF97                 db    0
.eh_frame:000000000000AF98                 db  58h ; X
.eh_frame:000000000000AF99                 db 0BFh
.eh_frame:000000000000AF9A                 db 0FFh
.eh_frame:000000000000AF9B                 db 0FFh
.eh_frame:000000000000AF9C                 db  18h
.eh_frame:000000000000AF9D                 db    0
.eh_frame:000000000000AF9E                 db    0
.eh_frame:000000000000AF9F                 db    0
.eh_frame:000000000000AFA0                 db    0
.eh_frame:000000000000AFA1                 db    0
.eh_frame:000000000000AFA2                 db    0
.eh_frame:000000000000AFA3                 db    0
.eh_frame:000000000000AFA4                 db  10h
.eh_frame:000000000000AFA5                 db    0
.eh_frame:000000000000AFA6                 db    0
.eh_frame:000000000000AFA7                 db    0
.eh_frame:000000000000AFA8                 db 0E0h
.eh_frame:000000000000AFA9                 db    6
.eh_frame:000000000000AFAA                 db    0
.eh_frame:000000000000AFAB                 db    0
.eh_frame:000000000000AFAC                 db  64h ; d
.eh_frame:000000000000AFAD                 db 0BFh
.eh_frame:000000000000AFAE                 db 0FFh
.eh_frame:000000000000AFAF                 db 0FFh
.eh_frame:000000000000AFB0                 db  14h
.eh_frame:000000000000AFB1                 db    0
.eh_frame:000000000000AFB2                 db    0
.eh_frame:000000000000AFB3                 db    0
.eh_frame:000000000000AFB4                 db    0
.eh_frame:000000000000AFB5                 db    0
.eh_frame:000000000000AFB6                 db    0
.eh_frame:000000000000AFB7                 db    0
.eh_frame:000000000000AFB8                 db  18h
.eh_frame:000000000000AFB9                 db    0
.eh_frame:000000000000AFBA                 db    0
.eh_frame:000000000000AFBB                 db    0
.eh_frame:000000000000AFBC                 db 0F4h
.eh_frame:000000000000AFBD                 db    6
.eh_frame:000000000000AFBE                 db    0
.eh_frame:000000000000AFBF                 db    0
.eh_frame:000000000000AFC0                 db  70h ; p
.eh_frame:000000000000AFC1                 db 0BFh
.eh_frame:000000000000AFC2                 db 0FFh
.eh_frame:000000000000AFC3                 db 0FFh
.eh_frame:000000000000AFC4                 db  8Eh
.eh_frame:000000000000AFC5                 db    0
.eh_frame:000000000000AFC6                 db    0
.eh_frame:000000000000AFC7                 db    0
.eh_frame:000000000000AFC8                 db    0
.eh_frame:000000000000AFC9                 db  44h ; D
.eh_frame:000000000000AFCA                 db  0Eh
.eh_frame:000000000000AFCB                 db  50h ; P
.eh_frame:000000000000AFCC                 db    2
.eh_frame:000000000000AFCD                 db  7Fh ; 
.eh_frame:000000000000AFCE                 db  0Ah
.eh_frame:000000000000AFCF                 db  0Eh
.eh_frame:000000000000AFD0                 db    8
.eh_frame:000000000000AFD1                 db  41h ; A
.eh_frame:000000000000AFD2                 db  0Bh
.eh_frame:000000000000AFD3                 db    0
.eh_frame:000000000000AFD4                 db  18h
.eh_frame:000000000000AFD5                 db    0
.eh_frame:000000000000AFD6                 db    0
.eh_frame:000000000000AFD7                 db    0
.eh_frame:000000000000AFD8                 db  10h
.eh_frame:000000000000AFD9                 db    7
.eh_frame:000000000000AFDA                 db    0
.eh_frame:000000000000AFDB                 db    0
.eh_frame:000000000000AFDC                 db 0E4h
.eh_frame:000000000000AFDD                 db 0BFh
.eh_frame:000000000000AFDE                 db 0FFh
.eh_frame:000000000000AFDF                 db 0FFh
.eh_frame:000000000000AFE0                 db  8Ah
.eh_frame:000000000000AFE1                 db    0
.eh_frame:000000000000AFE2                 db    0
.eh_frame:000000000000AFE3                 db    0
.eh_frame:000000000000AFE4                 db    0
.eh_frame:000000000000AFE5                 db  44h ; D
.eh_frame:000000000000AFE6                 db  0Eh
.eh_frame:000000000000AFE7                 db  50h ; P
.eh_frame:000000000000AFE8                 db    2
.eh_frame:000000000000AFE9                 db  7Bh ; {
.eh_frame:000000000000AFEA                 db  0Ah
.eh_frame:000000000000AFEB                 db  0Eh
.eh_frame:000000000000AFEC                 db    8
.eh_frame:000000000000AFED                 db  41h ; A
.eh_frame:000000000000AFEE                 db  0Bh
.eh_frame:000000000000AFEF                 db    0
.eh_frame:000000000000AFF0                 db  10h
.eh_frame:000000000000AFF1                 db    0
.eh_frame:000000000000AFF2                 db    0
.eh_frame:000000000000AFF3                 db    0
.eh_frame:000000000000AFF4                 db  2Ch ; ,
.eh_frame:000000000000AFF5                 db    7
.eh_frame:000000000000AFF6                 db    0
.eh_frame:000000000000AFF7                 db    0
.eh_frame:000000000000AFF8                 db  58h ; X
.eh_frame:000000000000AFF9                 db 0C0h
.eh_frame:000000000000AFFA                 db 0FFh
.eh_frame:000000000000AFFB                 db 0FFh
.eh_frame:000000000000AFFC                 db  0Ch
.eh_frame:000000000000AFFD                 db    0
.eh_frame:000000000000AFFE                 db    0
.eh_frame:000000000000AFFF                 db    0
.eh_frame:000000000000B000                 db    0
.eh_frame:000000000000B001                 db    0
.eh_frame:000000000000B002                 db    0
.eh_frame:000000000000B003                 db    0
.eh_frame:000000000000B004                 db  10h
.eh_frame:000000000000B005                 db    0
.eh_frame:000000000000B006                 db    0
.eh_frame:000000000000B007                 db    0
.eh_frame:000000000000B008                 db  40h ; @
.eh_frame:000000000000B009                 db    7
.eh_frame:000000000000B00A                 db    0
.eh_frame:000000000000B00B                 db    0
.eh_frame:000000000000B00C                 db  54h ; T
.eh_frame:000000000000B00D                 db 0C0h
.eh_frame:000000000000B00E                 db 0FFh
.eh_frame:000000000000B00F                 db 0FFh
.eh_frame:000000000000B010                 db  0Fh
.eh_frame:000000000000B011                 db    0
.eh_frame:000000000000B012                 db    0
.eh_frame:000000000000B013                 db    0
.eh_frame:000000000000B014                 db    0
.eh_frame:000000000000B015                 db    0
.eh_frame:000000000000B016                 db    0
.eh_frame:000000000000B017                 db    0
.eh_frame:000000000000B018                 db  18h
.eh_frame:000000000000B019                 db    0
.eh_frame:000000000000B01A                 db    0
.eh_frame:000000000000B01B                 db    0
.eh_frame:000000000000B01C                 db  54h ; T
.eh_frame:000000000000B01D                 db    7
.eh_frame:000000000000B01E                 db    0
.eh_frame:000000000000B01F                 db    0
.eh_frame:000000000000B020                 db  50h ; P
.eh_frame:000000000000B021                 db 0C0h
.eh_frame:000000000000B022                 db 0FFh
.eh_frame:000000000000B023                 db 0FFh
.eh_frame:000000000000B024                 db  98h
.eh_frame:000000000000B025                 db    0
.eh_frame:000000000000B026                 db    0
.eh_frame:000000000000B027                 db    0
.eh_frame:000000000000B028                 db    0
.eh_frame:000000000000B029                 db  44h ; D
.eh_frame:000000000000B02A                 db  0Eh
.eh_frame:000000000000B02B                 db  50h ; P
.eh_frame:000000000000B02C                 db    2
.eh_frame:000000000000B02D                 db  8Eh
.eh_frame:000000000000B02E                 db  0Ah
.eh_frame:000000000000B02F                 db  0Eh
.eh_frame:000000000000B030                 db    8
.eh_frame:000000000000B031                 db  41h ; A
.eh_frame:000000000000B032                 db  0Bh
.eh_frame:000000000000B033                 db    0
.eh_frame:000000000000B034                 db  10h
.eh_frame:000000000000B035                 db    0
.eh_frame:000000000000B036                 db    0
.eh_frame:000000000000B037                 db    0
.eh_frame:000000000000B038                 db  70h ; p
.eh_frame:000000000000B039                 db    7
.eh_frame:000000000000B03A                 db    0
.eh_frame:000000000000B03B                 db    0
.eh_frame:000000000000B03C                 db 0D4h
.eh_frame:000000000000B03D                 db 0C0h
.eh_frame:000000000000B03E                 db 0FFh
.eh_frame:000000000000B03F                 db 0FFh
.eh_frame:000000000000B040                 db  10h
.eh_frame:000000000000B041                 db    0
.eh_frame:000000000000B042                 db    0
.eh_frame:000000000000B043                 db    0
.eh_frame:000000000000B044                 db    0
.eh_frame:000000000000B045                 db    0
.eh_frame:000000000000B046                 db    0
.eh_frame:000000000000B047                 db    0
.eh_frame:000000000000B048                 db  10h
.eh_frame:000000000000B049                 db    0
.eh_frame:000000000000B04A                 db    0
.eh_frame:000000000000B04B                 db    0
.eh_frame:000000000000B04C                 db  84h
.eh_frame:000000000000B04D                 db    7
.eh_frame:000000000000B04E                 db    0
.eh_frame:000000000000B04F                 db    0
.eh_frame:000000000000B050                 db 0D0h
.eh_frame:000000000000B051                 db 0C0h
.eh_frame:000000000000B052                 db 0FFh
.eh_frame:000000000000B053                 db 0FFh
.eh_frame:000000000000B054                 db  11h
.eh_frame:000000000000B055                 db    0
.eh_frame:000000000000B056                 db    0
.eh_frame:000000000000B057                 db    0
.eh_frame:000000000000B058                 db    0
.eh_frame:000000000000B059                 db    0
.eh_frame:000000000000B05A                 db    0
.eh_frame:000000000000B05B                 db    0
.eh_frame:000000000000B05C                 db  10h
.eh_frame:000000000000B05D                 db    0
.eh_frame:000000000000B05E                 db    0
.eh_frame:000000000000B05F                 db    0
.eh_frame:000000000000B060                 db  98h
.eh_frame:000000000000B061                 db    7
.eh_frame:000000000000B062                 db    0
.eh_frame:000000000000B063                 db    0
.eh_frame:000000000000B064                 db 0DCh
.eh_frame:000000000000B065                 db 0C0h
.eh_frame:000000000000B066                 db 0FFh
.eh_frame:000000000000B067                 db 0FFh
.eh_frame:000000000000B068                 db  0Ah
.eh_frame:000000000000B069                 db    0
.eh_frame:000000000000B06A                 db    0
.eh_frame:000000000000B06B                 db    0
.eh_frame:000000000000B06C                 db    0
.eh_frame:000000000000B06D                 db    0
.eh_frame:000000000000B06E                 db    0
.eh_frame:000000000000B06F                 db    0
.eh_frame:000000000000B070                 db  18h
.eh_frame:000000000000B071                 db    0
.eh_frame:000000000000B072                 db    0
.eh_frame:000000000000B073                 db    0
.eh_frame:000000000000B074                 db 0ACh
.eh_frame:000000000000B075                 db    7
.eh_frame:000000000000B076                 db    0
.eh_frame:000000000000B077                 db    0
.eh_frame:000000000000B078                 db 0D8h
.eh_frame:000000000000B079                 db 0C0h
.eh_frame:000000000000B07A                 db 0FFh
.eh_frame:000000000000B07B                 db 0FFh
.eh_frame:000000000000B07C                 db  8Eh
.eh_frame:000000000000B07D                 db    0
.eh_frame:000000000000B07E                 db    0
.eh_frame:000000000000B07F                 db    0
.eh_frame:000000000000B080                 db    0
.eh_frame:000000000000B081                 db  44h ; D
.eh_frame:000000000000B082                 db  0Eh
.eh_frame:000000000000B083                 db  50h ; P
.eh_frame:000000000000B084                 db    2
.eh_frame:000000000000B085                 db  7Fh ; 
.eh_frame:000000000000B086                 db  0Ah
.eh_frame:000000000000B087                 db  0Eh
.eh_frame:000000000000B088                 db    8
.eh_frame:000000000000B089                 db  41h ; A
.eh_frame:000000000000B08A                 db  0Bh
.eh_frame:000000000000B08B                 db    0
.eh_frame:000000000000B08C                 db  18h
.eh_frame:000000000000B08D                 db    0
.eh_frame:000000000000B08E                 db    0
.eh_frame:000000000000B08F                 db    0
.eh_frame:000000000000B090                 db 0C8h
.eh_frame:000000000000B091                 db    7
.eh_frame:000000000000B092                 db    0
.eh_frame:000000000000B093                 db    0
.eh_frame:000000000000B094                 db  4Ch ; L
.eh_frame:000000000000B095                 db 0C1h
.eh_frame:000000000000B096                 db 0FFh
.eh_frame:000000000000B097                 db 0FFh
.eh_frame:000000000000B098                 db  91h
.eh_frame:000000000000B099                 db    0
.eh_frame:000000000000B09A                 db    0
.eh_frame:000000000000B09B                 db    0
.eh_frame:000000000000B09C                 db    0
.eh_frame:000000000000B09D                 db  44h ; D
.eh_frame:000000000000B09E                 db  0Eh
.eh_frame:000000000000B09F                 db  50h ; P
.eh_frame:000000000000B0A0                 db    2
.eh_frame:000000000000B0A1                 db  82h
.eh_frame:000000000000B0A2                 db  0Ah
.eh_frame:000000000000B0A3                 db  0Eh
.eh_frame:000000000000B0A4                 db    8
.eh_frame:000000000000B0A5                 db  41h ; A
.eh_frame:000000000000B0A6                 db  0Bh
.eh_frame:000000000000B0A7                 db    0
.eh_frame:000000000000B0A8                 db  10h
.eh_frame:000000000000B0A9                 db    0
.eh_frame:000000000000B0AA                 db    0
.eh_frame:000000000000B0AB                 db    0
.eh_frame:000000000000B0AC                 db 0E4h
.eh_frame:000000000000B0AD                 db    7
.eh_frame:000000000000B0AE                 db    0
.eh_frame:000000000000B0AF                 db    0
.eh_frame:000000000000B0B0                 db 0D0h
.eh_frame:000000000000B0B1                 db 0C1h
.eh_frame:000000000000B0B2                 db 0FFh
.eh_frame:000000000000B0B3                 db 0FFh
.eh_frame:000000000000B0B4                 db  0Ch
.eh_frame:000000000000B0B5                 db    0
.eh_frame:000000000000B0B6                 db    0
.eh_frame:000000000000B0B7                 db    0
.eh_frame:000000000000B0B8                 db    0
.eh_frame:000000000000B0B9                 db    0
.eh_frame:000000000000B0BA                 db    0
.eh_frame:000000000000B0BB                 db    0
.eh_frame:000000000000B0BC                 db  10h
.eh_frame:000000000000B0BD                 db    0
.eh_frame:000000000000B0BE                 db    0
.eh_frame:000000000000B0BF                 db    0
.eh_frame:000000000000B0C0                 db 0F8h
.eh_frame:000000000000B0C1                 db    7
.eh_frame:000000000000B0C2                 db    0
.eh_frame:000000000000B0C3                 db    0
.eh_frame:000000000000B0C4                 db 0CCh
.eh_frame:000000000000B0C5                 db 0C1h
.eh_frame:000000000000B0C6                 db 0FFh
.eh_frame:000000000000B0C7                 db 0FFh
.eh_frame:000000000000B0C8                 db  17h
.eh_frame:000000000000B0C9                 db    0
.eh_frame:000000000000B0CA                 db    0
.eh_frame:000000000000B0CB                 db    0
.eh_frame:000000000000B0CC                 db    0
.eh_frame:000000000000B0CD                 db    0
.eh_frame:000000000000B0CE                 db    0
.eh_frame:000000000000B0CF                 db    0
.eh_frame:000000000000B0D0                 db  10h
.eh_frame:000000000000B0D1                 db    0
.eh_frame:000000000000B0D2                 db    0
.eh_frame:000000000000B0D3                 db    0
.eh_frame:000000000000B0D4                 db  0Ch
.eh_frame:000000000000B0D5                 db    8
.eh_frame:000000000000B0D6                 db    0
.eh_frame:000000000000B0D7                 db    0
.eh_frame:000000000000B0D8                 db 0D8h
.eh_frame:000000000000B0D9                 db 0C1h
.eh_frame:000000000000B0DA                 db 0FFh
.eh_frame:000000000000B0DB                 db 0FFh
.eh_frame:000000000000B0DC                 db  13h
.eh_frame:000000000000B0DD                 db    0
.eh_frame:000000000000B0DE                 db    0
.eh_frame:000000000000B0DF                 db    0
.eh_frame:000000000000B0E0                 db    0
.eh_frame:000000000000B0E1                 db    0
.eh_frame:000000000000B0E2                 db    0
.eh_frame:000000000000B0E3                 db    0
.eh_frame:000000000000B0E4                 db  10h
.eh_frame:000000000000B0E5                 db    0
.eh_frame:000000000000B0E6                 db    0
.eh_frame:000000000000B0E7                 db    0
.eh_frame:000000000000B0E8                 db  20h
.eh_frame:000000000000B0E9                 db    8
.eh_frame:000000000000B0EA                 db    0
.eh_frame:000000000000B0EB                 db    0
.eh_frame:000000000000B0EC                 db 0E4h
.eh_frame:000000000000B0ED                 db 0C1h
.eh_frame:000000000000B0EE                 db 0FFh
.eh_frame:000000000000B0EF                 db 0FFh
.eh_frame:000000000000B0F0                 db  0Ch
.eh_frame:000000000000B0F1                 db    0
.eh_frame:000000000000B0F2                 db    0
.eh_frame:000000000000B0F3                 db    0
.eh_frame:000000000000B0F4                 db    0
.eh_frame:000000000000B0F5                 db    0
.eh_frame:000000000000B0F6                 db    0
.eh_frame:000000000000B0F7                 db    0
.eh_frame:000000000000B0F8                 db  10h
.eh_frame:000000000000B0F9                 db    0
.eh_frame:000000000000B0FA                 db    0
.eh_frame:000000000000B0FB                 db    0
.eh_frame:000000000000B0FC                 db  34h ; 4
.eh_frame:000000000000B0FD                 db    8
.eh_frame:000000000000B0FE                 db    0
.eh_frame:000000000000B0FF                 db    0
.eh_frame:000000000000B100                 db 0E0h
.eh_frame:000000000000B101                 db 0C1h
.eh_frame:000000000000B102                 db 0FFh
.eh_frame:000000000000B103                 db 0FFh
.eh_frame:000000000000B104                 db  14h
.eh_frame:000000000000B105                 db    0
.eh_frame:000000000000B106                 db    0
.eh_frame:000000000000B107                 db    0
.eh_frame:000000000000B108                 db    0
.eh_frame:000000000000B109                 db    0
.eh_frame:000000000000B10A                 db    0
.eh_frame:000000000000B10B                 db    0
.eh_frame:000000000000B10C                 db  10h
.eh_frame:000000000000B10D                 db    0
.eh_frame:000000000000B10E                 db    0
.eh_frame:000000000000B10F                 db    0
.eh_frame:000000000000B110                 db  48h ; H
.eh_frame:000000000000B111                 db    8
.eh_frame:000000000000B112                 db    0
.eh_frame:000000000000B113                 db    0
.eh_frame:000000000000B114                 db 0ECh
.eh_frame:000000000000B115                 db 0C1h
.eh_frame:000000000000B116                 db 0FFh
.eh_frame:000000000000B117                 db 0FFh
.eh_frame:000000000000B118                 db  13h
.eh_frame:000000000000B119                 db    0
.eh_frame:000000000000B11A                 db    0
.eh_frame:000000000000B11B                 db    0
.eh_frame:000000000000B11C                 db    0
.eh_frame:000000000000B11D                 db    0
.eh_frame:000000000000B11E                 db    0
.eh_frame:000000000000B11F                 db    0
.eh_frame:000000000000B120                 db  14h
.eh_frame:000000000000B121                 db    0
.eh_frame:000000000000B122                 db    0
.eh_frame:000000000000B123                 db    0
.eh_frame:000000000000B124                 db  5Ch ; \
.eh_frame:000000000000B125                 db    8
.eh_frame:000000000000B126                 db    0
.eh_frame:000000000000B127                 db    0
.eh_frame:000000000000B128                 db 0F8h
.eh_frame:000000000000B129                 db 0C1h
.eh_frame:000000000000B12A                 db 0FFh
.eh_frame:000000000000B12B                 db 0FFh
.eh_frame:000000000000B12C                 db  18h
.eh_frame:000000000000B12D                 db    0
.eh_frame:000000000000B12E                 db    0
.eh_frame:000000000000B12F                 db    0
.eh_frame:000000000000B130                 db    0
.eh_frame:000000000000B131                 db    0
.eh_frame:000000000000B132                 db    0
.eh_frame:000000000000B133                 db    0
.eh_frame:000000000000B134                 db    0
.eh_frame:000000000000B135                 db    0
.eh_frame:000000000000B136                 db    0
.eh_frame:000000000000B137                 db    0
.eh_frame:000000000000B138                 db  34h ; 4
.eh_frame:000000000000B139                 db    0
.eh_frame:000000000000B13A                 db    0
.eh_frame:000000000000B13B                 db    0
.eh_frame:000000000000B13C                 db  74h ; t
.eh_frame:000000000000B13D                 db    8
.eh_frame:000000000000B13E                 db    0
.eh_frame:000000000000B13F                 db    0
.eh_frame:000000000000B140                 db    0
.eh_frame:000000000000B141                 db 0C2h
.eh_frame:000000000000B142                 db 0FFh
.eh_frame:000000000000B143                 db 0FFh
.eh_frame:000000000000B144                 db  5Eh ; ^
.eh_frame:000000000000B145                 db    0
.eh_frame:000000000000B146                 db    0
.eh_frame:000000000000B147                 db    0
.eh_frame:000000000000B148                 db    0
.eh_frame:000000000000B149                 db  42h ; B
.eh_frame:000000000000B14A                 db  0Eh
.eh_frame:000000000000B14B                 db  10h
.eh_frame:000000000000B14C                 db  8Dh
.eh_frame:000000000000B14D                 db    2
.eh_frame:000000000000B14E                 db  42h ; B
.eh_frame:000000000000B14F                 db  0Eh
.eh_frame:000000000000B150                 db  18h
.eh_frame:000000000000B151                 db  8Ch
.eh_frame:000000000000B152                 db    3
.eh_frame:000000000000B153                 db  44h ; D
.eh_frame:000000000000B154                 db  0Eh
.eh_frame:000000000000B155                 db  20h
.eh_frame:000000000000B156                 db  86h
.eh_frame:000000000000B157                 db    4
.eh_frame:000000000000B158                 db  41h ; A
.eh_frame:000000000000B159                 db  0Eh
.eh_frame:000000000000B15A                 db  28h ; (
.eh_frame:000000000000B15B                 db  83h
.eh_frame:000000000000B15C                 db    5
.eh_frame:000000000000B15D                 db  4Ah ; J
.eh_frame:000000000000B15E                 db  0Eh
.eh_frame:000000000000B15F                 db  30h ; 0
.eh_frame:000000000000B160                 db    2
.eh_frame:000000000000B161                 db  41h ; A
.eh_frame:000000000000B162                 db  0Eh
.eh_frame:000000000000B163                 db  28h ; (
.eh_frame:000000000000B164                 db  44h ; D
.eh_frame:000000000000B165                 db  0Eh
.eh_frame:000000000000B166                 db  20h
.eh_frame:000000000000B167                 db  41h ; A
.eh_frame:000000000000B168                 db  0Eh
.eh_frame:000000000000B169                 db  18h
.eh_frame:000000000000B16A                 db  42h ; B
.eh_frame:000000000000B16B                 db  0Eh
.eh_frame:000000000000B16C                 db  10h
.eh_frame:000000000000B16D                 db  42h ; B
.eh_frame:000000000000B16E                 db  0Eh
.eh_frame:000000000000B16F                 db    8
.eh_frame:000000000000B170                 db  34h ; 4
.eh_frame:000000000000B171                 db    0
.eh_frame:000000000000B172                 db    0
.eh_frame:000000000000B173                 db    0
.eh_frame:000000000000B174                 db 0ACh
.eh_frame:000000000000B175                 db    8
.eh_frame:000000000000B176                 db    0
.eh_frame:000000000000B177                 db    0
.eh_frame:000000000000B178                 db  28h ; (
.eh_frame:000000000000B179                 db 0C2h
.eh_frame:000000000000B17A                 db 0FFh
.eh_frame:000000000000B17B                 db 0FFh
.eh_frame:000000000000B17C                 db  5Eh ; ^
.eh_frame:000000000000B17D                 db    0
.eh_frame:000000000000B17E                 db    0
.eh_frame:000000000000B17F                 db    0
.eh_frame:000000000000B180                 db    0
.eh_frame:000000000000B181                 db  42h ; B
.eh_frame:000000000000B182                 db  0Eh
.eh_frame:000000000000B183                 db  10h
.eh_frame:000000000000B184                 db  8Dh
.eh_frame:000000000000B185                 db    2
.eh_frame:000000000000B186                 db  42h ; B
.eh_frame:000000000000B187                 db  0Eh
.eh_frame:000000000000B188                 db  18h
.eh_frame:000000000000B189                 db  8Ch
.eh_frame:000000000000B18A                 db    3
.eh_frame:000000000000B18B                 db  44h ; D
.eh_frame:000000000000B18C                 db  0Eh
.eh_frame:000000000000B18D                 db  20h
.eh_frame:000000000000B18E                 db  86h
.eh_frame:000000000000B18F                 db    4
.eh_frame:000000000000B190                 db  41h ; A
.eh_frame:000000000000B191                 db  0Eh
.eh_frame:000000000000B192                 db  28h ; (
.eh_frame:000000000000B193                 db  83h
.eh_frame:000000000000B194                 db    5
.eh_frame:000000000000B195                 db  4Ah ; J
.eh_frame:000000000000B196                 db  0Eh
.eh_frame:000000000000B197                 db  30h ; 0
.eh_frame:000000000000B198                 db    2
.eh_frame:000000000000B199                 db  41h ; A
.eh_frame:000000000000B19A                 db  0Eh
.eh_frame:000000000000B19B                 db  28h ; (
.eh_frame:000000000000B19C                 db  44h ; D
.eh_frame:000000000000B19D                 db  0Eh
.eh_frame:000000000000B19E                 db  20h
.eh_frame:000000000000B19F                 db  41h ; A
.eh_frame:000000000000B1A0                 db  0Eh
.eh_frame:000000000000B1A1                 db  18h
.eh_frame:000000000000B1A2                 db  42h ; B
.eh_frame:000000000000B1A3                 db  0Eh
.eh_frame:000000000000B1A4                 db  10h
.eh_frame:000000000000B1A5                 db  42h ; B
.eh_frame:000000000000B1A6                 db  0Eh
.eh_frame:000000000000B1A7                 db    8
.eh_frame:000000000000B1A8                 db  34h ; 4
.eh_frame:000000000000B1A9                 db    0
.eh_frame:000000000000B1AA                 db    0
.eh_frame:000000000000B1AB                 db    0
.eh_frame:000000000000B1AC                 db 0E4h
.eh_frame:000000000000B1AD                 db    8
.eh_frame:000000000000B1AE                 db    0
.eh_frame:000000000000B1AF                 db    0
.eh_frame:000000000000B1B0                 db  50h ; P
.eh_frame:000000000000B1B1                 db 0C2h
.eh_frame:000000000000B1B2                 db 0FFh
.eh_frame:000000000000B1B3                 db 0FFh
.eh_frame:000000000000B1B4                 db  3Fh ; ?
.eh_frame:000000000000B1B5                 db    0
.eh_frame:000000000000B1B6                 db    0
.eh_frame:000000000000B1B7                 db    0
.eh_frame:000000000000B1B8                 db    0
.eh_frame:000000000000B1B9                 db  42h ; B
.eh_frame:000000000000B1BA                 db  0Eh
.eh_frame:000000000000B1BB                 db  10h
.eh_frame:000000000000B1BC                 db  8Dh
.eh_frame:000000000000B1BD                 db    2
.eh_frame:000000000000B1BE                 db  42h ; B
.eh_frame:000000000000B1BF                 db  0Eh
.eh_frame:000000000000B1C0                 db  18h
.eh_frame:000000000000B1C1                 db  8Ch
.eh_frame:000000000000B1C2                 db    3
.eh_frame:000000000000B1C3                 db  41h ; A
.eh_frame:000000000000B1C4                 db  0Eh
.eh_frame:000000000000B1C5                 db  20h
.eh_frame:000000000000B1C6                 db  86h
.eh_frame:000000000000B1C7                 db    4
.eh_frame:000000000000B1C8                 db  41h ; A
.eh_frame:000000000000B1C9                 db  0Eh
.eh_frame:000000000000B1CA                 db  28h ; (
.eh_frame:000000000000B1CB                 db  83h
.eh_frame:000000000000B1CC                 db    5
.eh_frame:000000000000B1CD                 db  46h ; F
.eh_frame:000000000000B1CE                 db  0Eh
.eh_frame:000000000000B1CF                 db  30h ; 0
.eh_frame:000000000000B1D0                 db  6Ah ; j
.eh_frame:000000000000B1D1                 db  0Eh
.eh_frame:000000000000B1D2                 db  28h ; (
.eh_frame:000000000000B1D3                 db  43h ; C
.eh_frame:000000000000B1D4                 db  0Eh
.eh_frame:000000000000B1D5                 db  20h
.eh_frame:000000000000B1D6                 db  41h ; A
.eh_frame:000000000000B1D7                 db  0Eh
.eh_frame:000000000000B1D8                 db  18h
.eh_frame:000000000000B1D9                 db  42h ; B
.eh_frame:000000000000B1DA                 db  0Eh
.eh_frame:000000000000B1DB                 db  10h
.eh_frame:000000000000B1DC                 db  42h ; B
.eh_frame:000000000000B1DD                 db  0Eh
.eh_frame:000000000000B1DE                 db    8
.eh_frame:000000000000B1DF                 db    0
.eh_frame:000000000000B1E0                 db  10h
.eh_frame:000000000000B1E1                 db    1
.eh_frame:000000000000B1E2                 db    0
.eh_frame:000000000000B1E3                 db    0
.eh_frame:000000000000B1E4                 db  1Ch
.eh_frame:000000000000B1E5                 db    9
.eh_frame:000000000000B1E6                 db    0
.eh_frame:000000000000B1E7                 db    0
.eh_frame:000000000000B1E8                 db  58h ; X
.eh_frame:000000000000B1E9                 db 0C2h
.eh_frame:000000000000B1EA                 db 0FFh
.eh_frame:000000000000B1EB                 db 0FFh
.eh_frame:000000000000B1EC                 db  17h
.eh_frame:000000000000B1ED                 db    4
.eh_frame:000000000000B1EE                 db    0
.eh_frame:000000000000B1EF                 db    0
.eh_frame:000000000000B1F0                 db    0
.eh_frame:000000000000B1F1                 db  42h ; B
.eh_frame:000000000000B1F2                 db  0Eh
.eh_frame:000000000000B1F3                 db  10h
.eh_frame:000000000000B1F4                 db  8Fh
.eh_frame:000000000000B1F5                 db    2
.eh_frame:000000000000B1F6                 db  42h ; B
.eh_frame:000000000000B1F7                 db  0Eh
.eh_frame:000000000000B1F8                 db  18h
.eh_frame:000000000000B1F9                 db  8Eh
.eh_frame:000000000000B1FA                 db    3
.eh_frame:000000000000B1FB                 db  42h ; B
.eh_frame:000000000000B1FC                 db  0Eh
.eh_frame:000000000000B1FD                 db  20h
.eh_frame:000000000000B1FE                 db  8Dh
.eh_frame:000000000000B1FF                 db    4
.eh_frame:000000000000B200                 db  42h ; B
.eh_frame:000000000000B201                 db  0Eh
.eh_frame:000000000000B202                 db  28h ; (
.eh_frame:000000000000B203                 db  8Ch
.eh_frame:000000000000B204                 db    5
.eh_frame:000000000000B205                 db  44h ; D
.eh_frame:000000000000B206                 db  0Eh
.eh_frame:000000000000B207                 db  30h ; 0
.eh_frame:000000000000B208                 db  86h
.eh_frame:000000000000B209                 db    6
.eh_frame:000000000000B20A                 db  41h ; A
.eh_frame:000000000000B20B                 db  0Eh
.eh_frame:000000000000B20C                 db  38h ; 8
.eh_frame:000000000000B20D                 db  83h
.eh_frame:000000000000B20E                 db    7
.eh_frame:000000000000B20F                 db  4Ah ; J
.eh_frame:000000000000B210                 db  0Eh
.eh_frame:000000000000B211                 db  60h ; `
.eh_frame:000000000000B212                 db    2
.eh_frame:000000000000B213                 db 0DDh
.eh_frame:000000000000B214                 db  0Eh
.eh_frame:000000000000B215                 db  68h ; h
.eh_frame:000000000000B216                 db  57h ; W
.eh_frame:000000000000B217                 db  0Eh
.eh_frame:000000000000B218                 db  70h ; p
.eh_frame:000000000000B219                 db  42h ; B
.eh_frame:000000000000B21A                 db  0Eh
.eh_frame:000000000000B21B                 db  78h ; x
.eh_frame:000000000000B21C                 db  42h ; B
.eh_frame:000000000000B21D                 db  0Eh
.eh_frame:000000000000B21E                 db  80h
.eh_frame:000000000000B21F                 db    1
.eh_frame:000000000000B220                 db  42h ; B
.eh_frame:000000000000B221                 db  0Eh
.eh_frame:000000000000B222                 db  88h
.eh_frame:000000000000B223                 db    1
.eh_frame:000000000000B224                 db  42h ; B
.eh_frame:000000000000B225                 db  0Eh
.eh_frame:000000000000B226                 db  90h
.eh_frame:000000000000B227                 db    1
.eh_frame:000000000000B228                 db  53h ; S
.eh_frame:000000000000B229                 db  0Eh
.eh_frame:000000000000B22A                 db  60h ; `
.eh_frame:000000000000B22B                 db  44h ; D
.eh_frame:000000000000B22C                 db  0Ah
.eh_frame:000000000000B22D                 db  0Eh
.eh_frame:000000000000B22E                 db  38h ; 8
.eh_frame:000000000000B22F                 db  41h ; A
.eh_frame:000000000000B230                 db  0Eh
.eh_frame:000000000000B231                 db  30h ; 0
.eh_frame:000000000000B232                 db  41h ; A
.eh_frame:000000000000B233                 db  0Eh
.eh_frame:000000000000B234                 db  28h ; (
.eh_frame:000000000000B235                 db  42h ; B
.eh_frame:000000000000B236                 db  0Eh
.eh_frame:000000000000B237                 db  20h
.eh_frame:000000000000B238                 db  42h ; B
.eh_frame:000000000000B239                 db  0Eh
.eh_frame:000000000000B23A                 db  18h
.eh_frame:000000000000B23B                 db  42h ; B
.eh_frame:000000000000B23C                 db  0Eh
.eh_frame:000000000000B23D                 db  10h
.eh_frame:000000000000B23E                 db  42h ; B
.eh_frame:000000000000B23F                 db  0Eh
.eh_frame:000000000000B240                 db    8
.eh_frame:000000000000B241                 db  44h ; D
.eh_frame:000000000000B242                 db  0Bh
.eh_frame:000000000000B243                 db    2
.eh_frame:000000000000B244                 db  78h ; x
.eh_frame:000000000000B245                 db  0Ah
.eh_frame:000000000000B246                 db  0Eh
.eh_frame:000000000000B247                 db  68h ; h
.eh_frame:000000000000B248                 db  48h ; H
.eh_frame:000000000000B249                 db  0Bh
.eh_frame:000000000000B24A                 db  5Ah ; Z
.eh_frame:000000000000B24B                 db  0Ah
.eh_frame:000000000000B24C                 db  0Eh
.eh_frame:000000000000B24D                 db  38h ; 8
.eh_frame:000000000000B24E                 db  47h ; G
.eh_frame:000000000000B24F                 db  0Eh
.eh_frame:000000000000B250                 db  30h ; 0
.eh_frame:000000000000B251                 db  41h ; A
.eh_frame:000000000000B252                 db  0Eh
.eh_frame:000000000000B253                 db  28h ; (
.eh_frame:000000000000B254                 db  42h ; B
.eh_frame:000000000000B255                 db  0Eh
.eh_frame:000000000000B256                 db  20h
.eh_frame:000000000000B257                 db  42h ; B
.eh_frame:000000000000B258                 db  0Eh
.eh_frame:000000000000B259                 db  18h
.eh_frame:000000000000B25A                 db  42h ; B
.eh_frame:000000000000B25B                 db  0Eh
.eh_frame:000000000000B25C                 db  10h
.eh_frame:000000000000B25D                 db  42h ; B
.eh_frame:000000000000B25E                 db  0Eh
.eh_frame:000000000000B25F                 db    8
.eh_frame:000000000000B260                 db  56h ; V
.eh_frame:000000000000B261                 db  0Bh
.eh_frame:000000000000B262                 db  5Eh ; ^
.eh_frame:000000000000B263                 db  0Ah
.eh_frame:000000000000B264                 db  0Eh
.eh_frame:000000000000B265                 db  38h ; 8
.eh_frame:000000000000B266                 db  52h ; R
.eh_frame:000000000000B267                 db  0Eh
.eh_frame:000000000000B268                 db  30h ; 0
.eh_frame:000000000000B269                 db  41h ; A
.eh_frame:000000000000B26A                 db  0Eh
.eh_frame:000000000000B26B                 db  28h ; (
.eh_frame:000000000000B26C                 db  42h ; B
.eh_frame:000000000000B26D                 db  0Eh
.eh_frame:000000000000B26E                 db  20h
.eh_frame:000000000000B26F                 db  42h ; B
.eh_frame:000000000000B270                 db  0Eh
.eh_frame:000000000000B271                 db  18h
.eh_frame:000000000000B272                 db  42h ; B
.eh_frame:000000000000B273                 db  0Eh
.eh_frame:000000000000B274                 db  10h
.eh_frame:000000000000B275                 db  42h ; B
.eh_frame:000000000000B276                 db  0Eh
.eh_frame:000000000000B277                 db    8
.eh_frame:000000000000B278                 db  4Fh ; O
.eh_frame:000000000000B279                 db  0Bh
.eh_frame:000000000000B27A                 db  62h ; b
.eh_frame:000000000000B27B                 db  0Ah
.eh_frame:000000000000B27C                 db  0Eh
.eh_frame:000000000000B27D                 db  38h ; 8
.eh_frame:000000000000B27E                 db  50h ; P
.eh_frame:000000000000B27F                 db  0Eh
.eh_frame:000000000000B280                 db  30h ; 0
.eh_frame:000000000000B281                 db  41h ; A
.eh_frame:000000000000B282                 db  0Eh
.eh_frame:000000000000B283                 db  28h ; (
.eh_frame:000000000000B284                 db  42h ; B
.eh_frame:000000000000B285                 db  0Eh
.eh_frame:000000000000B286                 db  20h
.eh_frame:000000000000B287                 db  42h ; B
.eh_frame:000000000000B288                 db  0Eh
.eh_frame:000000000000B289                 db  18h
.eh_frame:000000000000B28A                 db  42h ; B
.eh_frame:000000000000B28B                 db  0Eh
.eh_frame:000000000000B28C                 db  10h
.eh_frame:000000000000B28D                 db  42h ; B
.eh_frame:000000000000B28E                 db  0Eh
.eh_frame:000000000000B28F                 db    8
.eh_frame:000000000000B290                 db  55h ; U
.eh_frame:000000000000B291                 db  0Bh
.eh_frame:000000000000B292                 db  66h ; f
.eh_frame:000000000000B293                 db  0Eh
.eh_frame:000000000000B294                 db  68h ; h
.eh_frame:000000000000B295                 db  42h ; B
.eh_frame:000000000000B296                 db  0Eh
.eh_frame:000000000000B297                 db  70h ; p
.eh_frame:000000000000B298                 db  5Ch ; \
.eh_frame:000000000000B299                 db  0Eh
.eh_frame:000000000000B29A                 db  68h ; h
.eh_frame:000000000000B29B                 db  41h ; A
.eh_frame:000000000000B29C                 db  0Eh
.eh_frame:000000000000B29D                 db  60h ; `
.eh_frame:000000000000B29E                 db  44h ; D
.eh_frame:000000000000B29F                 db  0Ah
.eh_frame:000000000000B2A0                 db  0Eh
.eh_frame:000000000000B2A1                 db  38h ; 8
.eh_frame:000000000000B2A2                 db  41h ; A
.eh_frame:000000000000B2A3                 db  0Eh
.eh_frame:000000000000B2A4                 db  30h ; 0
.eh_frame:000000000000B2A5                 db  41h ; A
.eh_frame:000000000000B2A6                 db  0Eh
.eh_frame:000000000000B2A7                 db  28h ; (
.eh_frame:000000000000B2A8                 db  42h ; B
.eh_frame:000000000000B2A9                 db  0Eh
.eh_frame:000000000000B2AA                 db  20h
.eh_frame:000000000000B2AB                 db  42h ; B
.eh_frame:000000000000B2AC                 db  0Eh
.eh_frame:000000000000B2AD                 db  18h
.eh_frame:000000000000B2AE                 db  42h ; B
.eh_frame:000000000000B2AF                 db  0Eh
.eh_frame:000000000000B2B0                 db  10h
.eh_frame:000000000000B2B1                 db  42h ; B
.eh_frame:000000000000B2B2                 db  0Eh
.eh_frame:000000000000B2B3                 db    8
.eh_frame:000000000000B2B4                 db  45h ; E
.eh_frame:000000000000B2B5                 db  0Bh
.eh_frame:000000000000B2B6                 db  68h ; h
.eh_frame:000000000000B2B7                 db  0Ah
.eh_frame:000000000000B2B8                 db  0Eh
.eh_frame:000000000000B2B9                 db  68h ; h
.eh_frame:000000000000B2BA                 db  48h ; H
.eh_frame:000000000000B2BB                 db  0Bh
.eh_frame:000000000000B2BC                 db  72h ; r
.eh_frame:000000000000B2BD                 db  0Eh
.eh_frame:000000000000B2BE                 db  68h ; h
.eh_frame:000000000000B2BF                 db  45h ; E
.eh_frame:000000000000B2C0                 db  0Eh
.eh_frame:000000000000B2C1                 db  70h ; p
.eh_frame:000000000000B2C2                 db  42h ; B
.eh_frame:000000000000B2C3                 db  0Eh
.eh_frame:000000000000B2C4                 db  78h ; x
.eh_frame:000000000000B2C5                 db  42h ; B
.eh_frame:000000000000B2C6                 db  0Eh
.eh_frame:000000000000B2C7                 db  80h
.eh_frame:000000000000B2C8                 db    1
.eh_frame:000000000000B2C9                 db  5Eh ; ^
.eh_frame:000000000000B2CA                 db  0Eh
.eh_frame:000000000000B2CB                 db  60h ; `
.eh_frame:000000000000B2CC                 db  44h ; D
.eh_frame:000000000000B2CD                 db  0Ah
.eh_frame:000000000000B2CE                 db  0Eh
.eh_frame:000000000000B2CF                 db  38h ; 8
.eh_frame:000000000000B2D0                 db  41h ; A
.eh_frame:000000000000B2D1                 db  0Eh
.eh_frame:000000000000B2D2                 db  30h ; 0
.eh_frame:000000000000B2D3                 db  41h ; A
.eh_frame:000000000000B2D4                 db  0Eh
.eh_frame:000000000000B2D5                 db  28h ; (
.eh_frame:000000000000B2D6                 db  42h ; B
.eh_frame:000000000000B2D7                 db  0Eh
.eh_frame:000000000000B2D8                 db  20h
.eh_frame:000000000000B2D9                 db  42h ; B
.eh_frame:000000000000B2DA                 db  0Eh
.eh_frame:000000000000B2DB                 db  18h
.eh_frame:000000000000B2DC                 db  42h ; B
.eh_frame:000000000000B2DD                 db  0Eh
.eh_frame:000000000000B2DE                 db  10h
.eh_frame:000000000000B2DF                 db  42h ; B
.eh_frame:000000000000B2E0                 db  0Eh
.eh_frame:000000000000B2E1                 db    8
.eh_frame:000000000000B2E2                 db  41h ; A
.eh_frame:000000000000B2E3                 db  0Bh
.eh_frame:000000000000B2E4                 db  79h ; y
.eh_frame:000000000000B2E5                 db  0Ah
.eh_frame:000000000000B2E6                 db  0Eh
.eh_frame:000000000000B2E7                 db  68h ; h
.eh_frame:000000000000B2E8                 db  42h ; B
.eh_frame:000000000000B2E9                 db  0Eh
.eh_frame:000000000000B2EA                 db  70h ; p
.eh_frame:000000000000B2EB                 db  42h ; B
.eh_frame:000000000000B2EC                 db  0Eh
.eh_frame:000000000000B2ED                 db  78h ; x
.eh_frame:000000000000B2EE                 db  42h ; B
.eh_frame:000000000000B2EF                 db  0Eh
.eh_frame:000000000000B2F0                 db  80h
.eh_frame:000000000000B2F1                 db    1
.eh_frame:000000000000B2F2                 db  51h ; Q
.eh_frame:000000000000B2F3                 db  0Bh
.eh_frame:000000000000B2F4                 db  10h
.eh_frame:000000000000B2F5                 db    0
.eh_frame:000000000000B2F6                 db    0
.eh_frame:000000000000B2F7                 db    0
.eh_frame:000000000000B2F8                 db  30h ; 0
.eh_frame:000000000000B2F9                 db  0Ah
.eh_frame:000000000000B2FA                 db    0
.eh_frame:000000000000B2FB                 db    0
.eh_frame:000000000000B2FC                 db  64h ; d
.eh_frame:000000000000B2FD                 db 0C5h
.eh_frame:000000000000B2FE                 db 0FFh
.eh_frame:000000000000B2FF                 db 0FFh
.eh_frame:000000000000B300                 db  20h
.eh_frame:000000000000B301                 db    0
.eh_frame:000000000000B302                 db    0
.eh_frame:000000000000B303                 db    0
.eh_frame:000000000000B304                 db    0
.eh_frame:000000000000B305                 db    0
.eh_frame:000000000000B306                 db    0
.eh_frame:000000000000B307                 db    0
.eh_frame:000000000000B308                 db  18h
.eh_frame:000000000000B309                 db    0
.eh_frame:000000000000B30A                 db    0
.eh_frame:000000000000B30B                 db    0
.eh_frame:000000000000B30C                 db  44h ; D
.eh_frame:000000000000B30D                 db  0Ah
.eh_frame:000000000000B30E                 db    0
.eh_frame:000000000000B30F                 db    0
.eh_frame:000000000000B310                 db  70h ; p
.eh_frame:000000000000B311                 db 0C5h
.eh_frame:000000000000B312                 db 0FFh
.eh_frame:000000000000B313                 db 0FFh
.eh_frame:000000000000B314                 db  78h ; x
.eh_frame:000000000000B315                 db    0
.eh_frame:000000000000B316                 db    0
.eh_frame:000000000000B317                 db    0
.eh_frame:000000000000B318                 db    0
.eh_frame:000000000000B319                 db  44h ; D
.eh_frame:000000000000B31A                 db  0Eh
.eh_frame:000000000000B31B                 db  70h ; p
.eh_frame:000000000000B31C                 db    2
.eh_frame:000000000000B31D                 db  60h ; `
.eh_frame:000000000000B31E                 db  0Ah
.eh_frame:000000000000B31F                 db  0Eh
.eh_frame:000000000000B320                 db    8
.eh_frame:000000000000B321                 db  41h ; A
.eh_frame:000000000000B322                 db  0Bh
.eh_frame:000000000000B323                 db    0
.eh_frame:000000000000B324                 db  28h ; (
.eh_frame:000000000000B325                 db    0
.eh_frame:000000000000B326                 db    0
.eh_frame:000000000000B327                 db    0
.eh_frame:000000000000B328                 db  60h ; `
.eh_frame:000000000000B329                 db  0Ah
.eh_frame:000000000000B32A                 db    0
.eh_frame:000000000000B32B                 db    0
.eh_frame:000000000000B32C                 db 0D4h
.eh_frame:000000000000B32D                 db 0C5h
.eh_frame:000000000000B32E                 db 0FFh
.eh_frame:000000000000B32F                 db 0FFh
.eh_frame:000000000000B330                 db 0D5h
.eh_frame:000000000000B331                 db    0
.eh_frame:000000000000B332                 db    0
.eh_frame:000000000000B333                 db    0
.eh_frame:000000000000B334                 db    0
.eh_frame:000000000000B335                 db  41h ; A
.eh_frame:000000000000B336                 db  0Eh
.eh_frame:000000000000B337                 db  10h
.eh_frame:000000000000B338                 db  86h
.eh_frame:000000000000B339                 db    2
.eh_frame:000000000000B33A                 db  41h ; A
.eh_frame:000000000000B33B                 db  0Eh
.eh_frame:000000000000B33C                 db  18h
.eh_frame:000000000000B33D                 db  83h
.eh_frame:000000000000B33E                 db    3
.eh_frame:000000000000B33F                 db  50h ; P
.eh_frame:000000000000B340                 db  0Eh
.eh_frame:000000000000B341                 db 0D0h
.eh_frame:000000000000B342                 db    1
.eh_frame:000000000000B343                 db    2
.eh_frame:000000000000B344                 db 0ABh
.eh_frame:000000000000B345                 db  0Ah
.eh_frame:000000000000B346                 db  0Eh
.eh_frame:000000000000B347                 db  18h
.eh_frame:000000000000B348                 db  41h ; A
.eh_frame:000000000000B349                 db  0Eh
.eh_frame:000000000000B34A                 db  10h
.eh_frame:000000000000B34B                 db  41h ; A
.eh_frame:000000000000B34C                 db  0Eh
.eh_frame:000000000000B34D                 db    8
.eh_frame:000000000000B34E                 db  41h ; A
.eh_frame:000000000000B34F                 db  0Bh
.eh_frame:000000000000B350                 db  1Ch
.eh_frame:000000000000B351                 db    0
.eh_frame:000000000000B352                 db    0
.eh_frame:000000000000B353                 db    0
.eh_frame:000000000000B354                 db  8Ch
.eh_frame:000000000000B355                 db  0Ah
.eh_frame:000000000000B356                 db    0
.eh_frame:000000000000B357                 db    0
.eh_frame:000000000000B358                 db  88h
.eh_frame:000000000000B359                 db 0C6h
.eh_frame:000000000000B35A                 db 0FFh
.eh_frame:000000000000B35B                 db 0FFh
.eh_frame:000000000000B35C                 db  80h
.eh_frame:000000000000B35D                 db    0
.eh_frame:000000000000B35E                 db    0
.eh_frame:000000000000B35F                 db    0
.eh_frame:000000000000B360                 db    0
.eh_frame:000000000000B361                 db  41h ; A
.eh_frame:000000000000B362                 db  0Eh
.eh_frame:000000000000B363                 db  10h
.eh_frame:000000000000B364                 db  83h
.eh_frame:000000000000B365                 db    2
.eh_frame:000000000000B366                 db    2
.eh_frame:000000000000B367                 db  7Ah ; z
.eh_frame:000000000000B368                 db  0Eh
.eh_frame:000000000000B369                 db    8
.eh_frame:000000000000B36A                 db    0
.eh_frame:000000000000B36B                 db    0
.eh_frame:000000000000B36C                 db    0
.eh_frame:000000000000B36D                 db    0
.eh_frame:000000000000B36E                 db    0
.eh_frame:000000000000B36F                 db    0
.eh_frame:000000000000B370                 db  18h
.eh_frame:000000000000B371                 db    0
.eh_frame:000000000000B372                 db    0
.eh_frame:000000000000B373                 db    0
.eh_frame:000000000000B374                 db 0ACh
.eh_frame:000000000000B375                 db  0Ah
.eh_frame:000000000000B376                 db    0
.eh_frame:000000000000B377                 db    0
.eh_frame:000000000000B378                 db 0E8h
.eh_frame:000000000000B379                 db 0C6h
.eh_frame:000000000000B37A                 db 0FFh
.eh_frame:000000000000B37B                 db 0FFh
.eh_frame:000000000000B37C                 db  1Ah
.eh_frame:000000000000B37D                 db    0
.eh_frame:000000000000B37E                 db    0
.eh_frame:000000000000B37F                 db    0
.eh_frame:000000000000B380                 db    0
.eh_frame:000000000000B381                 db  41h ; A
.eh_frame:000000000000B382                 db  0Eh
.eh_frame:000000000000B383                 db  10h
.eh_frame:000000000000B384                 db  83h
.eh_frame:000000000000B385                 db    2
.eh_frame:000000000000B386                 db  53h ; S
.eh_frame:000000000000B387                 db  0Ah
.eh_frame:000000000000B388                 db  0Eh
.eh_frame:000000000000B389                 db    8
.eh_frame:000000000000B38A                 db  41h ; A
.eh_frame:000000000000B38B                 db  0Bh
.eh_frame:000000000000B38C                 db  10h
.eh_frame:000000000000B38D                 db    0
.eh_frame:000000000000B38E                 db    0
.eh_frame:000000000000B38F                 db    0
.eh_frame:000000000000B390                 db 0C8h
.eh_frame:000000000000B391                 db  0Ah
.eh_frame:000000000000B392                 db    0
.eh_frame:000000000000B393                 db    0
.eh_frame:000000000000B394                 db 0ECh
.eh_frame:000000000000B395                 db 0C6h
.eh_frame:000000000000B396                 db 0FFh
.eh_frame:000000000000B397                 db 0FFh
.eh_frame:000000000000B398                 db  24h ; $
.eh_frame:000000000000B399                 db    0
.eh_frame:000000000000B39A                 db    0
.eh_frame:000000000000B39B                 db    0
.eh_frame:000000000000B39C                 db    0
.eh_frame:000000000000B39D                 db  5Fh ; _
.eh_frame:000000000000B39E                 db  0Eh
.eh_frame:000000000000B39F                 db  10h
.eh_frame:000000000000B3A0                 db  10h
.eh_frame:000000000000B3A1                 db    0
.eh_frame:000000000000B3A2                 db    0
.eh_frame:000000000000B3A3                 db    0
.eh_frame:000000000000B3A4                 db 0DCh
.eh_frame:000000000000B3A5                 db  0Ah
.eh_frame:000000000000B3A6                 db    0
.eh_frame:000000000000B3A7                 db    0
.eh_frame:000000000000B3A8                 db    8
.eh_frame:000000000000B3A9                 db 0C7h
.eh_frame:000000000000B3AA                 db 0FFh
.eh_frame:000000000000B3AB                 db 0FFh
.eh_frame:000000000000B3AC                 db    2
.eh_frame:000000000000B3AD                 db    0
.eh_frame:000000000000B3AE                 db    0
.eh_frame:000000000000B3AF                 db    0
.eh_frame:000000000000B3B0                 db    0
.eh_frame:000000000000B3B1                 db    0
.eh_frame:000000000000B3B2                 db    0
.eh_frame:000000000000B3B3                 db    0
.eh_frame:000000000000B3B4                 db  20h
.eh_frame:000000000000B3B5                 db    0
.eh_frame:000000000000B3B6                 db    0
.eh_frame:000000000000B3B7                 db    0
.eh_frame:000000000000B3B8                 db 0F0h
.eh_frame:000000000000B3B9                 db  0Ah
.eh_frame:000000000000B3BA                 db    0
.eh_frame:000000000000B3BB                 db    0
.eh_frame:000000000000B3BC                 db    4
.eh_frame:000000000000B3BD                 db 0C7h
.eh_frame:000000000000B3BE                 db 0FFh
.eh_frame:000000000000B3BF                 db 0FFh
.eh_frame:000000000000B3C0                 db  36h ; 6
.eh_frame:000000000000B3C1                 db    0
.eh_frame:000000000000B3C2                 db    0
.eh_frame:000000000000B3C3                 db    0
.eh_frame:000000000000B3C4                 db    0
.eh_frame:000000000000B3C5                 db  44h ; D
.eh_frame:000000000000B3C6                 db  0Eh
.eh_frame:000000000000B3C7                 db  10h
.eh_frame:000000000000B3C8                 db  83h
.eh_frame:000000000000B3C9                 db    2
.eh_frame:000000000000B3CA                 db  5Dh ; ]
.eh_frame:000000000000B3CB                 db  0Ah
.eh_frame:000000000000B3CC                 db  0Eh
.eh_frame:000000000000B3CD                 db    8
.eh_frame:000000000000B3CE                 db  47h ; G
.eh_frame:000000000000B3CF                 db  0Bh
.eh_frame:000000000000B3D0                 db  48h ; H
.eh_frame:000000000000B3D1                 db  0Ah
.eh_frame:000000000000B3D2                 db  0Eh
.eh_frame:000000000000B3D3                 db    8
.eh_frame:000000000000B3D4                 db  41h ; A
.eh_frame:000000000000B3D5                 db  0Bh
.eh_frame:000000000000B3D6                 db    0
.eh_frame:000000000000B3D7                 db    0
.eh_frame:000000000000B3D8                 db  10h
.eh_frame:000000000000B3D9                 db    0
.eh_frame:000000000000B3DA                 db    0
.eh_frame:000000000000B3DB                 db    0
.eh_frame:000000000000B3DC                 db  14h
.eh_frame:000000000000B3DD                 db  0Bh
.eh_frame:000000000000B3DE                 db    0
.eh_frame:000000000000B3DF                 db    0
.eh_frame:000000000000B3E0                 db  20h
.eh_frame:000000000000B3E1                 db 0C7h
.eh_frame:000000000000B3E2                 db 0FFh
.eh_frame:000000000000B3E3                 db 0FFh
.eh_frame:000000000000B3E4                 db  24h ; $
.eh_frame:000000000000B3E5                 db    0
.eh_frame:000000000000B3E6                 db    0
.eh_frame:000000000000B3E7                 db    0
.eh_frame:000000000000B3E8                 db    0
.eh_frame:000000000000B3E9                 db  5Fh ; _
.eh_frame:000000000000B3EA                 db  0Eh
.eh_frame:000000000000B3EB                 db  10h
.eh_frame:000000000000B3EC                 db  14h
.eh_frame:000000000000B3ED                 db    0
.eh_frame:000000000000B3EE                 db    0
.eh_frame:000000000000B3EF                 db    0
.eh_frame:000000000000B3F0                 db  28h ; (
.eh_frame:000000000000B3F1                 db  0Bh
.eh_frame:000000000000B3F2                 db    0
.eh_frame:000000000000B3F3                 db    0
.eh_frame:000000000000B3F4                 db  3Ch ; <
.eh_frame:000000000000B3F5                 db 0C7h
.eh_frame:000000000000B3F6                 db 0FFh
.eh_frame:000000000000B3F7                 db 0FFh
.eh_frame:000000000000B3F8                 db  82h
.eh_frame:000000000000B3F9                 db    0
.eh_frame:000000000000B3FA                 db    0
.eh_frame:000000000000B3FB                 db    0
.eh_frame:000000000000B3FC                 db    0
.eh_frame:000000000000B3FD                 db    2
.eh_frame:000000000000B3FE                 db  5Fh ; _
.eh_frame:000000000000B3FF                 db  0Eh
.eh_frame:000000000000B400                 db  10h
.eh_frame:000000000000B401                 db  49h ; I
.eh_frame:000000000000B402                 db  0Eh
.eh_frame:000000000000B403                 db    8
.eh_frame:000000000000B404                 db  14h
.eh_frame:000000000000B405                 db    0
.eh_frame:000000000000B406                 db    0
.eh_frame:000000000000B407                 db    0
.eh_frame:000000000000B408                 db  40h ; @
.eh_frame:000000000000B409                 db  0Bh
.eh_frame:000000000000B40A                 db    0
.eh_frame:000000000000B40B                 db    0
.eh_frame:000000000000B40C                 db 0B4h
.eh_frame:000000000000B40D                 db 0C7h
.eh_frame:000000000000B40E                 db 0FFh
.eh_frame:000000000000B40F                 db 0FFh
.eh_frame:000000000000B410                 db  4Ah ; J
.eh_frame:000000000000B411                 db    0
.eh_frame:000000000000B412                 db    0
.eh_frame:000000000000B413                 db    0
.eh_frame:000000000000B414                 db    0
.eh_frame:000000000000B415                 db    2
.eh_frame:000000000000B416                 db  45h ; E
.eh_frame:000000000000B417                 db  0Eh
.eh_frame:000000000000B418                 db  10h
.eh_frame:000000000000B419                 db    0
.eh_frame:000000000000B41A                 db    0
.eh_frame:000000000000B41B                 db    0
.eh_frame:000000000000B41C                 db  18h
.eh_frame:000000000000B41D                 db    0
.eh_frame:000000000000B41E                 db    0
.eh_frame:000000000000B41F                 db    0
.eh_frame:000000000000B420                 db  58h ; X
.eh_frame:000000000000B421                 db  0Bh
.eh_frame:000000000000B422                 db    0
.eh_frame:000000000000B423                 db    0
.eh_frame:000000000000B424                 db 0ECh
.eh_frame:000000000000B425                 db 0C7h
.eh_frame:000000000000B426                 db 0FFh
.eh_frame:000000000000B427                 db 0FFh
.eh_frame:000000000000B428                 db  17h
.eh_frame:000000000000B429                 db    0
.eh_frame:000000000000B42A                 db    0
.eh_frame:000000000000B42B                 db    0
.eh_frame:000000000000B42C                 db    0
.eh_frame:000000000000B42D                 db  41h ; A
.eh_frame:000000000000B42E                 db  0Eh
.eh_frame:000000000000B42F                 db  10h
.eh_frame:000000000000B430                 db  83h
.eh_frame:000000000000B431                 db    2
.eh_frame:000000000000B432                 db  51h ; Q
.eh_frame:000000000000B433                 db  0Eh
.eh_frame:000000000000B434                 db    8
.eh_frame:000000000000B435                 db    0
.eh_frame:000000000000B436                 db    0
.eh_frame:000000000000B437                 db    0
.eh_frame:000000000000B438                 db  18h
.eh_frame:000000000000B439                 db    0
.eh_frame:000000000000B43A                 db    0
.eh_frame:000000000000B43B                 db    0
.eh_frame:000000000000B43C                 db  74h ; t
.eh_frame:000000000000B43D                 db  0Bh
.eh_frame:000000000000B43E                 db    0
.eh_frame:000000000000B43F                 db    0
.eh_frame:000000000000B440                 db 0F0h
.eh_frame:000000000000B441                 db 0C7h
.eh_frame:000000000000B442                 db 0FFh
.eh_frame:000000000000B443                 db 0FFh
.eh_frame:000000000000B444                 db  2Eh ; .
.eh_frame:000000000000B445                 db    0
.eh_frame:000000000000B446                 db    0
.eh_frame:000000000000B447                 db    0
.eh_frame:000000000000B448                 db    0
.eh_frame:000000000000B449                 db  47h ; G
.eh_frame:000000000000B44A                 db  0Eh
.eh_frame:000000000000B44B                 db  10h
.eh_frame:000000000000B44C                 db  61h ; a
.eh_frame:000000000000B44D                 db  0Ah
.eh_frame:000000000000B44E                 db  0Eh
.eh_frame:000000000000B44F                 db    8
.eh_frame:000000000000B450                 db  41h ; A
.eh_frame:000000000000B451                 db  0Bh
.eh_frame:000000000000B452                 db    0
.eh_frame:000000000000B453                 db    0
.eh_frame:000000000000B454                 db  24h ; $
.eh_frame:000000000000B455                 db    0
.eh_frame:000000000000B456                 db    0
.eh_frame:000000000000B457                 db    0
.eh_frame:000000000000B458                 db  90h
.eh_frame:000000000000B459                 db  0Bh
.eh_frame:000000000000B45A                 db    0
.eh_frame:000000000000B45B                 db    0
.eh_frame:000000000000B45C                 db    4
.eh_frame:000000000000B45D                 db 0C8h
.eh_frame:000000000000B45E                 db 0FFh
.eh_frame:000000000000B45F                 db 0FFh
.eh_frame:000000000000B460                 db  28h ; (
.eh_frame:000000000000B461                 db    0
.eh_frame:000000000000B462                 db    0
.eh_frame:000000000000B463                 db    0
.eh_frame:000000000000B464                 db    0
.eh_frame:000000000000B465                 db  41h ; A
.eh_frame:000000000000B466                 db  0Eh
.eh_frame:000000000000B467                 db  10h
.eh_frame:000000000000B468                 db  86h
.eh_frame:000000000000B469                 db    2
.eh_frame:000000000000B46A                 db  41h ; A
.eh_frame:000000000000B46B                 db  0Eh
.eh_frame:000000000000B46C                 db  18h
.eh_frame:000000000000B46D                 db  83h
.eh_frame:000000000000B46E                 db    3
.eh_frame:000000000000B46F                 db  4Dh ; M
.eh_frame:000000000000B470                 db  0Eh
.eh_frame:000000000000B471                 db  20h
.eh_frame:000000000000B472                 db  49h ; I
.eh_frame:000000000000B473                 db  0Eh
.eh_frame:000000000000B474                 db  18h
.eh_frame:000000000000B475                 db  47h ; G
.eh_frame:000000000000B476                 db  0Eh
.eh_frame:000000000000B477                 db  10h
.eh_frame:000000000000B478                 db  41h ; A
.eh_frame:000000000000B479                 db  0Eh
.eh_frame:000000000000B47A                 db    8
.eh_frame:000000000000B47B                 db    0
.eh_frame:000000000000B47C                 db  18h
.eh_frame:000000000000B47D                 db    0
.eh_frame:000000000000B47E                 db    0
.eh_frame:000000000000B47F                 db    0
.eh_frame:000000000000B480                 db 0B8h
.eh_frame:000000000000B481                 db  0Bh
.eh_frame:000000000000B482                 db    0
.eh_frame:000000000000B483                 db    0
.eh_frame:000000000000B484                 db  0Ch
.eh_frame:000000000000B485                 db 0C8h
.eh_frame:000000000000B486                 db 0FFh
.eh_frame:000000000000B487                 db 0FFh
.eh_frame:000000000000B488                 db  13h
.eh_frame:000000000000B489                 db    0
.eh_frame:000000000000B48A                 db    0
.eh_frame:000000000000B48B                 db    0
.eh_frame:000000000000B48C                 db    0
.eh_frame:000000000000B48D                 db  41h ; A
.eh_frame:000000000000B48E                 db  0Eh
.eh_frame:000000000000B48F                 db  10h
.eh_frame:000000000000B490                 db  83h
.eh_frame:000000000000B491                 db    2
.eh_frame:000000000000B492                 db  50h ; P
.eh_frame:000000000000B493                 db  0Eh
.eh_frame:000000000000B494                 db    8
.eh_frame:000000000000B495                 db    0
.eh_frame:000000000000B496                 db    0
.eh_frame:000000000000B497                 db    0
.eh_frame:000000000000B498                 db  14h
.eh_frame:000000000000B499                 db    0
.eh_frame:000000000000B49A                 db    0
.eh_frame:000000000000B49B                 db    0
.eh_frame:000000000000B49C                 db 0D4h
.eh_frame:000000000000B49D                 db  0Bh
.eh_frame:000000000000B49E                 db    0
.eh_frame:000000000000B49F                 db    0
.eh_frame:000000000000B4A0                 db  10h
.eh_frame:000000000000B4A1                 db 0C8h
.eh_frame:000000000000B4A2                 db 0FFh
.eh_frame:000000000000B4A3                 db 0FFh
.eh_frame:000000000000B4A4                 db  35h ; 5
.eh_frame:000000000000B4A5                 db    0
.eh_frame:000000000000B4A6                 db    0
.eh_frame:000000000000B4A7                 db    0
.eh_frame:000000000000B4A8                 db    0
.eh_frame:000000000000B4A9                 db  4Bh ; K
.eh_frame:000000000000B4AA                 db  0Eh
.eh_frame:000000000000B4AB                 db  10h
.eh_frame:000000000000B4AC                 db    0
.eh_frame:000000000000B4AD                 db    0
.eh_frame:000000000000B4AE                 db    0
.eh_frame:000000000000B4AF                 db    0
.eh_frame:000000000000B4B0                 db  48h ; H
.eh_frame:000000000000B4B1                 db    0
.eh_frame:000000000000B4B2                 db    0
.eh_frame:000000000000B4B3                 db    0
.eh_frame:000000000000B4B4                 db 0ECh
.eh_frame:000000000000B4B5                 db  0Bh
.eh_frame:000000000000B4B6                 db    0
.eh_frame:000000000000B4B7                 db    0
.eh_frame:000000000000B4B8                 db  38h ; 8
.eh_frame:000000000000B4B9                 db 0C8h
.eh_frame:000000000000B4BA                 db 0FFh
.eh_frame:000000000000B4BB                 db 0FFh
.eh_frame:000000000000B4BC                 db    0
.eh_frame:000000000000B4BD                 db    1
.eh_frame:000000000000B4BE                 db    0
.eh_frame:000000000000B4BF                 db    0
.eh_frame:000000000000B4C0                 db    0
.eh_frame:000000000000B4C1                 db  42h ; B
.eh_frame:000000000000B4C2                 db  0Eh
.eh_frame:000000000000B4C3                 db  10h
.eh_frame:000000000000B4C4                 db  8Fh
.eh_frame:000000000000B4C5                 db    2
.eh_frame:000000000000B4C6                 db  42h ; B
.eh_frame:000000000000B4C7                 db  0Eh
.eh_frame:000000000000B4C8                 db  18h
.eh_frame:000000000000B4C9                 db  8Eh
.eh_frame:000000000000B4CA                 db    3
.eh_frame:000000000000B4CB                 db  45h ; E
.eh_frame:000000000000B4CC                 db  0Eh
.eh_frame:000000000000B4CD                 db  20h
.eh_frame:000000000000B4CE                 db  8Dh
.eh_frame:000000000000B4CF                 db    4
.eh_frame:000000000000B4D0                 db  42h ; B
.eh_frame:000000000000B4D1                 db  0Eh
.eh_frame:000000000000B4D2                 db  28h ; (
.eh_frame:000000000000B4D3                 db  8Ch
.eh_frame:000000000000B4D4                 db    5
.eh_frame:000000000000B4D5                 db  44h ; D
.eh_frame:000000000000B4D6                 db  0Eh
.eh_frame:000000000000B4D7                 db  30h ; 0
.eh_frame:000000000000B4D8                 db  86h
.eh_frame:000000000000B4D9                 db    6
.eh_frame:000000000000B4DA                 db  41h ; A
.eh_frame:000000000000B4DB                 db  0Eh
.eh_frame:000000000000B4DC                 db  38h ; 8
.eh_frame:000000000000B4DD                 db  83h
.eh_frame:000000000000B4DE                 db    7
.eh_frame:000000000000B4DF                 db  4Eh ; N
.eh_frame:000000000000B4E0                 db  0Eh
.eh_frame:000000000000B4E1                 db  50h ; P
.eh_frame:000000000000B4E2                 db    2
.eh_frame:000000000000B4E3                 db  9Dh
.eh_frame:000000000000B4E4                 db  0Ah
.eh_frame:000000000000B4E5                 db  0Eh
.eh_frame:000000000000B4E6                 db  38h ; 8
.eh_frame:000000000000B4E7                 db  41h ; A
.eh_frame:000000000000B4E8                 db  0Eh
.eh_frame:000000000000B4E9                 db  30h ; 0
.eh_frame:000000000000B4EA                 db  41h ; A
.eh_frame:000000000000B4EB                 db  0Eh
.eh_frame:000000000000B4EC                 db  28h ; (
.eh_frame:000000000000B4ED                 db  42h ; B
.eh_frame:000000000000B4EE                 db  0Eh
.eh_frame:000000000000B4EF                 db  20h
.eh_frame:000000000000B4F0                 db  42h ; B
.eh_frame:000000000000B4F1                 db  0Eh
.eh_frame:000000000000B4F2                 db  18h
.eh_frame:000000000000B4F3                 db  42h ; B
.eh_frame:000000000000B4F4                 db  0Eh
.eh_frame:000000000000B4F5                 db  10h
.eh_frame:000000000000B4F6                 db  42h ; B
.eh_frame:000000000000B4F7                 db  0Eh
.eh_frame:000000000000B4F8                 db    8
.eh_frame:000000000000B4F9                 db  4Bh ; K
.eh_frame:000000000000B4FA                 db  0Bh
.eh_frame:000000000000B4FB                 db    0
.eh_frame:000000000000B4FC                 db  18h
.eh_frame:000000000000B4FD                 db    0
.eh_frame:000000000000B4FE                 db    0
.eh_frame:000000000000B4FF                 db    0
.eh_frame:000000000000B500                 db  38h ; 8
.eh_frame:000000000000B501                 db  0Ch
.eh_frame:000000000000B502                 db    0
.eh_frame:000000000000B503                 db    0
.eh_frame:000000000000B504                 db 0ECh
.eh_frame:000000000000B505                 db 0C8h
.eh_frame:000000000000B506                 db 0FFh
.eh_frame:000000000000B507                 db 0FFh
.eh_frame:000000000000B508                 db  21h ; !
.eh_frame:000000000000B509                 db    0
.eh_frame:000000000000B50A                 db    0
.eh_frame:000000000000B50B                 db    0
.eh_frame:000000000000B50C                 db    0
.eh_frame:000000000000B50D                 db  44h ; D
.eh_frame:000000000000B50E                 db  0Eh
.eh_frame:000000000000B50F                 db  18h
.eh_frame:000000000000B510                 db  42h ; B
.eh_frame:000000000000B511                 db  0Eh
.eh_frame:000000000000B512                 db  20h
.eh_frame:000000000000B513                 db  5Ah ; Z
.eh_frame:000000000000B514                 db  0Eh
.eh_frame:000000000000B515                 db    8
.eh_frame:000000000000B516                 db    0
.eh_frame:000000000000B517                 db    0
.eh_frame:000000000000B518                 db  4Ch ; L
.eh_frame:000000000000B519                 db    0
.eh_frame:000000000000B51A                 db    0
.eh_frame:000000000000B51B                 db    0
.eh_frame:000000000000B51C                 db  54h ; T
.eh_frame:000000000000B51D                 db  0Ch
.eh_frame:000000000000B51E                 db    0
.eh_frame:000000000000B51F                 db    0
.eh_frame:000000000000B520                 db    0
.eh_frame:000000000000B521                 db 0C9h
.eh_frame:000000000000B522                 db 0FFh
.eh_frame:000000000000B523                 db 0FFh
.eh_frame:000000000000B524                 db  1Ch
.eh_frame:000000000000B525                 db    4
.eh_frame:000000000000B526                 db    0
.eh_frame:000000000000B527                 db    0
.eh_frame:000000000000B528                 db    0
.eh_frame:000000000000B529                 db  42h ; B
.eh_frame:000000000000B52A                 db  0Eh
.eh_frame:000000000000B52B                 db  10h
.eh_frame:000000000000B52C                 db  8Fh
.eh_frame:000000000000B52D                 db    2
.eh_frame:000000000000B52E                 db  42h ; B
.eh_frame:000000000000B52F                 db  0Eh
.eh_frame:000000000000B530                 db  18h
.eh_frame:000000000000B531                 db  8Eh
.eh_frame:000000000000B532                 db    3
.eh_frame:000000000000B533                 db  42h ; B
.eh_frame:000000000000B534                 db  0Eh
.eh_frame:000000000000B535                 db  20h
.eh_frame:000000000000B536                 db  8Dh
.eh_frame:000000000000B537                 db    4
.eh_frame:000000000000B538                 db  42h ; B
.eh_frame:000000000000B539                 db  0Eh
.eh_frame:000000000000B53A                 db  28h ; (
.eh_frame:000000000000B53B                 db  8Ch
.eh_frame:000000000000B53C                 db    5
.eh_frame:000000000000B53D                 db  41h ; A
.eh_frame:000000000000B53E                 db  0Eh
.eh_frame:000000000000B53F                 db  30h ; 0
.eh_frame:000000000000B540                 db  86h
.eh_frame:000000000000B541                 db    6
.eh_frame:000000000000B542                 db  41h ; A
.eh_frame:000000000000B543                 db  0Eh
.eh_frame:000000000000B544                 db  38h ; 8
.eh_frame:000000000000B545                 db  83h
.eh_frame:000000000000B546                 db    7
.eh_frame:000000000000B547                 db  44h ; D
.eh_frame:000000000000B548                 db  0Eh
.eh_frame:000000000000B549                 db  60h ; `
.eh_frame:000000000000B54A                 db    2
.eh_frame:000000000000B54B                 db 0E9h
.eh_frame:000000000000B54C                 db  0Ah
.eh_frame:000000000000B54D                 db  0Eh
.eh_frame:000000000000B54E                 db  38h ; 8
.eh_frame:000000000000B54F                 db  41h ; A
.eh_frame:000000000000B550                 db  0Eh
.eh_frame:000000000000B551                 db  30h ; 0
.eh_frame:000000000000B552                 db  41h ; A
.eh_frame:000000000000B553                 db  0Eh
.eh_frame:000000000000B554                 db  28h ; (
.eh_frame:000000000000B555                 db  42h ; B
.eh_frame:000000000000B556                 db  0Eh
.eh_frame:000000000000B557                 db  20h
.eh_frame:000000000000B558                 db  42h ; B
.eh_frame:000000000000B559                 db  0Eh
.eh_frame:000000000000B55A                 db  18h
.eh_frame:000000000000B55B                 db  42h ; B
.eh_frame:000000000000B55C                 db  0Eh
.eh_frame:000000000000B55D                 db  10h
.eh_frame:000000000000B55E                 db  42h ; B
.eh_frame:000000000000B55F                 db  0Eh
.eh_frame:000000000000B560                 db    8
.eh_frame:000000000000B561                 db  47h ; G
.eh_frame:000000000000B562                 db  0Bh
.eh_frame:000000000000B563                 db    0
.eh_frame:000000000000B564                 db    0
.eh_frame:000000000000B565                 db    0
.eh_frame:000000000000B566                 db    0
.eh_frame:000000000000B567                 db    0
.eh_frame:000000000000B568                 db  34h ; 4
.eh_frame:000000000000B569                 db    0
.eh_frame:000000000000B56A                 db    0
.eh_frame:000000000000B56B                 db    0
.eh_frame:000000000000B56C                 db 0A4h
.eh_frame:000000000000B56D                 db  0Ch
.eh_frame:000000000000B56E                 db    0
.eh_frame:000000000000B56F                 db    0
.eh_frame:000000000000B570                 db 0D0h
.eh_frame:000000000000B571                 db 0CCh
.eh_frame:000000000000B572                 db 0FFh
.eh_frame:000000000000B573                 db 0FFh
.eh_frame:000000000000B574                 db  7Bh ; {
.eh_frame:000000000000B575                 db    0
.eh_frame:000000000000B576                 db    0
.eh_frame:000000000000B577                 db    0
.eh_frame:000000000000B578                 db    0
.eh_frame:000000000000B579                 db  42h ; B
.eh_frame:000000000000B57A                 db  0Eh
.eh_frame:000000000000B57B                 db  10h
.eh_frame:000000000000B57C                 db  8Ch
.eh_frame:000000000000B57D                 db    2
.eh_frame:000000000000B57E                 db  41h ; A
.eh_frame:000000000000B57F                 db  0Eh
.eh_frame:000000000000B580                 db  18h
.eh_frame:000000000000B581                 db  86h
.eh_frame:000000000000B582                 db    3
.eh_frame:000000000000B583                 db  41h ; A
.eh_frame:000000000000B584                 db  0Eh
.eh_frame:000000000000B585                 db  20h
.eh_frame:000000000000B586                 db  83h
.eh_frame:000000000000B587                 db    4
.eh_frame:000000000000B588                 db  7Dh ; }
.eh_frame:000000000000B589                 db  0Ah
.eh_frame:000000000000B58A                 db  0Eh
.eh_frame:000000000000B58B                 db  18h
.eh_frame:000000000000B58C                 db  41h ; A
.eh_frame:000000000000B58D                 db  0Eh
.eh_frame:000000000000B58E                 db  10h
.eh_frame:000000000000B58F                 db  42h ; B
.eh_frame:000000000000B590                 db  0Eh
.eh_frame:000000000000B591                 db    8
.eh_frame:000000000000B592                 db  44h ; D
.eh_frame:000000000000B593                 db  0Bh
.eh_frame:000000000000B594                 db  60h ; `
.eh_frame:000000000000B595                 db  0Ah
.eh_frame:000000000000B596                 db  0Eh
.eh_frame:000000000000B597                 db  18h
.eh_frame:000000000000B598                 db  41h ; A
.eh_frame:000000000000B599                 db  0Eh
.eh_frame:000000000000B59A                 db  10h
.eh_frame:000000000000B59B                 db  42h ; B
.eh_frame:000000000000B59C                 db  0Eh
.eh_frame:000000000000B59D                 db    8
.eh_frame:000000000000B59E                 db  45h ; E
.eh_frame:000000000000B59F                 db  0Bh
.eh_frame:000000000000B5A0                 db  1Ch
.eh_frame:000000000000B5A1                 db    0
.eh_frame:000000000000B5A2                 db    0
.eh_frame:000000000000B5A3                 db    0
.eh_frame:000000000000B5A4                 db 0DCh
.eh_frame:000000000000B5A5                 db  0Ch
.eh_frame:000000000000B5A6                 db    0
.eh_frame:000000000000B5A7                 db    0
.eh_frame:000000000000B5A8                 db  18h
.eh_frame:000000000000B5A9                 db 0CDh
.eh_frame:000000000000B5AA                 db 0FFh
.eh_frame:000000000000B5AB                 db 0FFh
.eh_frame:000000000000B5AC                 db  40h ; @
.eh_frame:000000000000B5AD                 db    0
.eh_frame:000000000000B5AE                 db    0
.eh_frame:000000000000B5AF                 db    0
.eh_frame:000000000000B5B0                 db    0
.eh_frame:000000000000B5B1                 db  44h ; D
.eh_frame:000000000000B5B2                 db  0Eh
.eh_frame:000000000000B5B3                 db  10h
.eh_frame:000000000000B5B4                 db  83h
.eh_frame:000000000000B5B5                 db    2
.eh_frame:000000000000B5B6                 db  5Ah ; Z
.eh_frame:000000000000B5B7                 db  0Ah
.eh_frame:000000000000B5B8                 db  0Eh
.eh_frame:000000000000B5B9                 db    8
.eh_frame:000000000000B5BA                 db  4Ah ; J
.eh_frame:000000000000B5BB                 db  0Bh
.eh_frame:000000000000B5BC                 db  53h ; S
.eh_frame:000000000000B5BD                 db  0Eh
.eh_frame:000000000000B5BE                 db    8
.eh_frame:000000000000B5BF                 db    0
.eh_frame:000000000000B5C0                 db  2Ch ; ,
.eh_frame:000000000000B5C1                 db    0
.eh_frame:000000000000B5C2                 db    0
.eh_frame:000000000000B5C3                 db    0
.eh_frame:000000000000B5C4                 db 0FCh
.eh_frame:000000000000B5C5                 db  0Ch
.eh_frame:000000000000B5C6                 db    0
.eh_frame:000000000000B5C7                 db    0
.eh_frame:000000000000B5C8                 db  38h ; 8
.eh_frame:000000000000B5C9                 db 0CDh
.eh_frame:000000000000B5CA                 db 0FFh
.eh_frame:000000000000B5CB                 db 0FFh
.eh_frame:000000000000B5CC                 db  57h ; W
.eh_frame:000000000000B5CD                 db    0
.eh_frame:000000000000B5CE                 db    0
.eh_frame:000000000000B5CF                 db    0
.eh_frame:000000000000B5D0                 db    0
.eh_frame:000000000000B5D1                 db  63h ; c
.eh_frame:000000000000B5D2                 db  0Eh
.eh_frame:000000000000B5D3                 db  10h
.eh_frame:000000000000B5D4                 db  8Ch
.eh_frame:000000000000B5D5                 db    2
.eh_frame:000000000000B5D6                 db  41h ; A
.eh_frame:000000000000B5D7                 db  0Eh
.eh_frame:000000000000B5D8                 db  18h
.eh_frame:000000000000B5D9                 db  86h
.eh_frame:000000000000B5DA                 db    3
.eh_frame:000000000000B5DB                 db  44h ; D
.eh_frame:000000000000B5DC                 db  0Eh
.eh_frame:000000000000B5DD                 db  20h
.eh_frame:000000000000B5DE                 db  83h
.eh_frame:000000000000B5DF                 db    4
.eh_frame:000000000000B5E0                 db  6Bh ; k
.eh_frame:000000000000B5E1                 db  0Eh
.eh_frame:000000000000B5E2                 db  18h
.eh_frame:000000000000B5E3                 db  41h ; A
.eh_frame:000000000000B5E4                 db  0Eh
.eh_frame:000000000000B5E5                 db  10h
.eh_frame:000000000000B5E6                 db  42h ; B
.eh_frame:000000000000B5E7                 db  0Eh
.eh_frame:000000000000B5E8                 db    8
.eh_frame:000000000000B5E9                 db    0
.eh_frame:000000000000B5EA                 db    0
.eh_frame:000000000000B5EB                 db    0
.eh_frame:000000000000B5EC                 db    0
.eh_frame:000000000000B5ED                 db    0
.eh_frame:000000000000B5EE                 db    0
.eh_frame:000000000000B5EF                 db    0
.eh_frame:000000000000B5F0                 db  3Ch ; <
.eh_frame:000000000000B5F1                 db    0
.eh_frame:000000000000B5F2                 db    0
.eh_frame:000000000000B5F3                 db    0
.eh_frame:000000000000B5F4                 db  2Ch ; ,
.eh_frame:000000000000B5F5                 db  0Dh
.eh_frame:000000000000B5F6                 db    0
.eh_frame:000000000000B5F7                 db    0
.eh_frame:000000000000B5F8                 db  68h ; h
.eh_frame:000000000000B5F9                 db 0CDh
.eh_frame:000000000000B5FA                 db 0FFh
.eh_frame:000000000000B5FB                 db 0FFh
.eh_frame:000000000000B5FC                 db  83h
.eh_frame:000000000000B5FD                 db    0
.eh_frame:000000000000B5FE                 db    0
.eh_frame:000000000000B5FF                 db    0
.eh_frame:000000000000B600                 db    0
.eh_frame:000000000000B601                 db  42h ; B
.eh_frame:000000000000B602                 db  0Eh
.eh_frame:000000000000B603                 db  10h
.eh_frame:000000000000B604                 db  8Dh
.eh_frame:000000000000B605                 db    2
.eh_frame:000000000000B606                 db  42h ; B
.eh_frame:000000000000B607                 db  0Eh
.eh_frame:000000000000B608                 db  18h
.eh_frame:000000000000B609                 db  8Ch
.eh_frame:000000000000B60A                 db    3
.eh_frame:000000000000B60B                 db  44h ; D
.eh_frame:000000000000B60C                 db  0Eh
.eh_frame:000000000000B60D                 db  20h
.eh_frame:000000000000B60E                 db  86h
.eh_frame:000000000000B60F                 db    4
.eh_frame:000000000000B610                 db  41h ; A
.eh_frame:000000000000B611                 db  0Eh
.eh_frame:000000000000B612                 db  28h ; (
.eh_frame:000000000000B613                 db  83h
.eh_frame:000000000000B614                 db    5
.eh_frame:000000000000B615                 db  4Ah ; J
.eh_frame:000000000000B616                 db  0Eh
.eh_frame:000000000000B617                 db  40h ; @
.eh_frame:000000000000B618                 db    2
.eh_frame:000000000000B619                 db  64h ; d
.eh_frame:000000000000B61A                 db  0Ah
.eh_frame:000000000000B61B                 db  0Eh
.eh_frame:000000000000B61C                 db  28h ; (
.eh_frame:000000000000B61D                 db  41h ; A
.eh_frame:000000000000B61E                 db  0Eh
.eh_frame:000000000000B61F                 db  20h
.eh_frame:000000000000B620                 db  41h ; A
.eh_frame:000000000000B621                 db  0Eh
.eh_frame:000000000000B622                 db  18h
.eh_frame:000000000000B623                 db  42h ; B
.eh_frame:000000000000B624                 db  0Eh
.eh_frame:000000000000B625                 db  10h
.eh_frame:000000000000B626                 db  42h ; B
.eh_frame:000000000000B627                 db  0Eh
.eh_frame:000000000000B628                 db    8
.eh_frame:000000000000B629                 db  41h ; A
.eh_frame:000000000000B62A                 db  0Bh
.eh_frame:000000000000B62B                 db    0
.eh_frame:000000000000B62C                 db    0
.eh_frame:000000000000B62D                 db    0
.eh_frame:000000000000B62E                 db    0
.eh_frame:000000000000B62F                 db    0
.eh_frame:000000000000B630                 db  38h ; 8
.eh_frame:000000000000B631                 db    0
.eh_frame:000000000000B632                 db    0
.eh_frame:000000000000B633                 db    0
.eh_frame:000000000000B634                 db  6Ch ; l
.eh_frame:000000000000B635                 db  0Dh
.eh_frame:000000000000B636                 db    0
.eh_frame:000000000000B637                 db    0
.eh_frame:000000000000B638                 db 0B8h
.eh_frame:000000000000B639                 db 0CDh
.eh_frame:000000000000B63A                 db 0FFh
.eh_frame:000000000000B63B                 db 0FFh
.eh_frame:000000000000B63C                 db  85h
.eh_frame:000000000000B63D                 db    1
.eh_frame:000000000000B63E                 db    0
.eh_frame:000000000000B63F                 db    0
.eh_frame:000000000000B640                 db    0
.eh_frame:000000000000B641                 db  42h ; B
.eh_frame:000000000000B642                 db  0Eh
.eh_frame:000000000000B643                 db  10h
.eh_frame:000000000000B644                 db  8Dh
.eh_frame:000000000000B645                 db    2
.eh_frame:000000000000B646                 db  42h ; B
.eh_frame:000000000000B647                 db  0Eh
.eh_frame:000000000000B648                 db  18h
.eh_frame:000000000000B649                 db  8Ch
.eh_frame:000000000000B64A                 db    3
.eh_frame:000000000000B64B                 db  44h ; D
.eh_frame:000000000000B64C                 db  0Eh
.eh_frame:000000000000B64D                 db  20h
.eh_frame:000000000000B64E                 db  86h
.eh_frame:000000000000B64F                 db    4
.eh_frame:000000000000B650                 db  41h ; A
.eh_frame:000000000000B651                 db  0Eh
.eh_frame:000000000000B652                 db  28h ; (
.eh_frame:000000000000B653                 db  83h
.eh_frame:000000000000B654                 db    5
.eh_frame:000000000000B655                 db  50h ; P
.eh_frame:000000000000B656                 db  0Eh
.eh_frame:000000000000B657                 db  40h ; @
.eh_frame:000000000000B658                 db    2
.eh_frame:000000000000B659                 db  6Fh ; o
.eh_frame:000000000000B65A                 db  0Ah
.eh_frame:000000000000B65B                 db  0Eh
.eh_frame:000000000000B65C                 db  28h ; (
.eh_frame:000000000000B65D                 db  41h ; A
.eh_frame:000000000000B65E                 db  0Eh
.eh_frame:000000000000B65F                 db  20h
.eh_frame:000000000000B660                 db  41h ; A
.eh_frame:000000000000B661                 db  0Eh
.eh_frame:000000000000B662                 db  18h
.eh_frame:000000000000B663                 db  42h ; B
.eh_frame:000000000000B664                 db  0Eh
.eh_frame:000000000000B665                 db  10h
.eh_frame:000000000000B666                 db  42h ; B
.eh_frame:000000000000B667                 db  0Eh
.eh_frame:000000000000B668                 db    8
.eh_frame:000000000000B669                 db  42h ; B
.eh_frame:000000000000B66A                 db  0Bh
.eh_frame:000000000000B66B                 db    0
.eh_frame:000000000000B66C                 db  38h ; 8
.eh_frame:000000000000B66D                 db    0
.eh_frame:000000000000B66E                 db    0
.eh_frame:000000000000B66F                 db    0
.eh_frame:000000000000B670                 db 0A8h
.eh_frame:000000000000B671                 db  0Dh
.eh_frame:000000000000B672                 db    0
.eh_frame:000000000000B673                 db    0
.eh_frame:000000000000B674                 db  0Ch
.eh_frame:000000000000B675                 db 0CFh
.eh_frame:000000000000B676                 db 0FFh
.eh_frame:000000000000B677                 db 0FFh
.eh_frame:000000000000B678                 db 0DBh
.eh_frame:000000000000B679                 db    0
.eh_frame:000000000000B67A                 db    0
.eh_frame:000000000000B67B                 db    0
.eh_frame:000000000000B67C                 db    0
.eh_frame:000000000000B67D                 db  41h ; A
.eh_frame:000000000000B67E                 db  0Eh
.eh_frame:000000000000B67F                 db  10h
.eh_frame:000000000000B680                 db  86h
.eh_frame:000000000000B681                 db    2
.eh_frame:000000000000B682                 db  48h ; H
.eh_frame:000000000000B683                 db  0Eh
.eh_frame:000000000000B684                 db  18h
.eh_frame:000000000000B685                 db  83h
.eh_frame:000000000000B686                 db    3
.eh_frame:000000000000B687                 db  4Bh ; K
.eh_frame:000000000000B688                 db  0Eh
.eh_frame:000000000000B689                 db  30h ; 0
.eh_frame:000000000000B68A                 db  70h ; p
.eh_frame:000000000000B68B                 db  0Ah
.eh_frame:000000000000B68C                 db  0Eh
.eh_frame:000000000000B68D                 db  18h
.eh_frame:000000000000B68E                 db  41h ; A
.eh_frame:000000000000B68F                 db  0Eh
.eh_frame:000000000000B690                 db  10h
.eh_frame:000000000000B691                 db  41h ; A
.eh_frame:000000000000B692                 db  0Eh
.eh_frame:000000000000B693                 db    8
.eh_frame:000000000000B694                 db  4Ah ; J
.eh_frame:000000000000B695                 db  0Bh
.eh_frame:000000000000B696                 db    2
.eh_frame:000000000000B697                 db  66h ; f
.eh_frame:000000000000B698                 db  0Ah
.eh_frame:000000000000B699                 db  0Eh
.eh_frame:000000000000B69A                 db  18h
.eh_frame:000000000000B69B                 db  43h ; C
.eh_frame:000000000000B69C                 db  0Eh
.eh_frame:000000000000B69D                 db  10h
.eh_frame:000000000000B69E                 db  41h ; A
.eh_frame:000000000000B69F                 db  0Eh
.eh_frame:000000000000B6A0                 db    8
.eh_frame:000000000000B6A1                 db  46h ; F
.eh_frame:000000000000B6A2                 db  0Bh
.eh_frame:000000000000B6A3                 db    0
.eh_frame:000000000000B6A4                 db    0
.eh_frame:000000000000B6A5                 db    0
.eh_frame:000000000000B6A6                 db    0
.eh_frame:000000000000B6A7                 db    0
.eh_frame:000000000000B6A8                 db  4Ch ; L
.eh_frame:000000000000B6A9                 db    0
.eh_frame:000000000000B6AA                 db    0
.eh_frame:000000000000B6AB                 db    0
.eh_frame:000000000000B6AC                 db 0E4h
.eh_frame:000000000000B6AD                 db  0Dh
.eh_frame:000000000000B6AE                 db    0
.eh_frame:000000000000B6AF                 db    0
.eh_frame:000000000000B6B0                 db 0B0h
.eh_frame:000000000000B6B1                 db 0CFh
.eh_frame:000000000000B6B2                 db 0FFh
.eh_frame:000000000000B6B3                 db 0FFh
.eh_frame:000000000000B6B4                 db  7Dh ; }
.eh_frame:000000000000B6B5                 db    0
.eh_frame:000000000000B6B6                 db    0
.eh_frame:000000000000B6B7                 db    0
.eh_frame:000000000000B6B8                 db    0
.eh_frame:000000000000B6B9                 db  42h ; B
.eh_frame:000000000000B6BA                 db  0Eh
.eh_frame:000000000000B6BB                 db  10h
.eh_frame:000000000000B6BC                 db  8Ch
.eh_frame:000000000000B6BD                 db    2
.eh_frame:000000000000B6BE                 db  41h ; A
.eh_frame:000000000000B6BF                 db  0Eh
.eh_frame:000000000000B6C0                 db  18h
.eh_frame:000000000000B6C1                 db  86h
.eh_frame:000000000000B6C2                 db    3
.eh_frame:000000000000B6C3                 db  44h ; D
.eh_frame:000000000000B6C4                 db  0Eh
.eh_frame:000000000000B6C5                 db  20h
.eh_frame:000000000000B6C6                 db  83h
.eh_frame:000000000000B6C7                 db    4
.eh_frame:000000000000B6C8                 db  69h ; i
.eh_frame:000000000000B6C9                 db  0Ah
.eh_frame:000000000000B6CA                 db  0Eh
.eh_frame:000000000000B6CB                 db  18h
.eh_frame:000000000000B6CC                 db  41h ; A
.eh_frame:000000000000B6CD                 db  0Eh
.eh_frame:000000000000B6CE                 db  10h
.eh_frame:000000000000B6CF                 db  42h ; B
.eh_frame:000000000000B6D0                 db  0Eh
.eh_frame:000000000000B6D1                 db    8
.eh_frame:000000000000B6D2                 db  45h ; E
.eh_frame:000000000000B6D3                 db  0Bh
.eh_frame:000000000000B6D4                 db  55h ; U
.eh_frame:000000000000B6D5                 db  0Ah
.eh_frame:000000000000B6D6                 db  0Eh
.eh_frame:000000000000B6D7                 db  18h
.eh_frame:000000000000B6D8                 db  41h ; A
.eh_frame:000000000000B6D9                 db  0Eh
.eh_frame:000000000000B6DA                 db  10h
.eh_frame:000000000000B6DB                 db  42h ; B
.eh_frame:000000000000B6DC                 db  0Eh
.eh_frame:000000000000B6DD                 db    8
.eh_frame:000000000000B6DE                 db  48h ; H
.eh_frame:000000000000B6DF                 db  0Bh
.eh_frame:000000000000B6E0                 db  41h ; A
.eh_frame:000000000000B6E1                 db  0Ah
.eh_frame:000000000000B6E2                 db  0Eh
.eh_frame:000000000000B6E3                 db  18h
.eh_frame:000000000000B6E4                 db  46h ; F
.eh_frame:000000000000B6E5                 db  0Eh
.eh_frame:000000000000B6E6                 db  10h
.eh_frame:000000000000B6E7                 db  42h ; B
.eh_frame:000000000000B6E8                 db  0Eh
.eh_frame:000000000000B6E9                 db    8
.eh_frame:000000000000B6EA                 db  47h ; G
.eh_frame:000000000000B6EB                 db  0Bh
.eh_frame:000000000000B6EC                 db  49h ; I
.eh_frame:000000000000B6ED                 db  0Eh
.eh_frame:000000000000B6EE                 db  18h
.eh_frame:000000000000B6EF                 db  41h ; A
.eh_frame:000000000000B6F0                 db  0Eh
.eh_frame:000000000000B6F1                 db  10h
.eh_frame:000000000000B6F2                 db  42h ; B
.eh_frame:000000000000B6F3                 db  0Eh
.eh_frame:000000000000B6F4                 db    8
.eh_frame:000000000000B6F5                 db    0
.eh_frame:000000000000B6F6                 db    0
.eh_frame:000000000000B6F7                 db    0
.eh_frame:000000000000B6F8                 db  1Ch
.eh_frame:000000000000B6F9                 db    0
.eh_frame:000000000000B6FA                 db    0
.eh_frame:000000000000B6FB                 db    0
.eh_frame:000000000000B6FC                 db  34h ; 4
.eh_frame:000000000000B6FD                 db  0Eh
.eh_frame:000000000000B6FE                 db    0
.eh_frame:000000000000B6FF                 db    0
.eh_frame:000000000000B700                 db 0E0h
.eh_frame:000000000000B701                 db 0CFh
.eh_frame:000000000000B702                 db 0FFh
.eh_frame:000000000000B703                 db 0FFh
.eh_frame:000000000000B704                 db  60h ; `
.eh_frame:000000000000B705                 db    0
.eh_frame:000000000000B706                 db    0
.eh_frame:000000000000B707                 db    0
.eh_frame:000000000000B708                 db    0
.eh_frame:000000000000B709                 db  44h ; D
.eh_frame:000000000000B70A                 db  0Eh
.eh_frame:000000000000B70B                 db  10h
.eh_frame:000000000000B70C                 db  75h ; u
.eh_frame:000000000000B70D                 db  0Ah
.eh_frame:000000000000B70E                 db  0Eh
.eh_frame:000000000000B70F                 db    8
.eh_frame:000000000000B710                 db  47h ; G
.eh_frame:000000000000B711                 db  0Bh
.eh_frame:000000000000B712                 db  5Fh ; _
.eh_frame:000000000000B713                 db  0Eh
.eh_frame:000000000000B714                 db    8
.eh_frame:000000000000B715                 db    0
.eh_frame:000000000000B716                 db    0
.eh_frame:000000000000B717                 db    0
.eh_frame:000000000000B718                 db  1Ch
.eh_frame:000000000000B719                 db    0
.eh_frame:000000000000B71A                 db    0
.eh_frame:000000000000B71B                 db    0
.eh_frame:000000000000B71C                 db  54h ; T
.eh_frame:000000000000B71D                 db  0Eh
.eh_frame:000000000000B71E                 db    0
.eh_frame:000000000000B71F                 db    0
.eh_frame:000000000000B720                 db  20h
.eh_frame:000000000000B721                 db 0D0h
.eh_frame:000000000000B722                 db 0FFh
.eh_frame:000000000000B723                 db 0FFh
.eh_frame:000000000000B724                 db  3Ch ; <
.eh_frame:000000000000B725                 db    0
.eh_frame:000000000000B726                 db    0
.eh_frame:000000000000B727                 db    0
.eh_frame:000000000000B728                 db    0
.eh_frame:000000000000B729                 db  44h ; D
.eh_frame:000000000000B72A                 db  0Eh
.eh_frame:000000000000B72B                 db  10h
.eh_frame:000000000000B72C                 db  61h ; a
.eh_frame:000000000000B72D                 db  0Ah
.eh_frame:000000000000B72E                 db  0Eh
.eh_frame:000000000000B72F                 db    8
.eh_frame:000000000000B730                 db  4Bh ; K
.eh_frame:000000000000B731                 db  0Bh
.eh_frame:000000000000B732                 db  4Bh ; K
.eh_frame:000000000000B733                 db  0Eh
.eh_frame:000000000000B734                 db    8
.eh_frame:000000000000B735                 db    0
.eh_frame:000000000000B736                 db    0
.eh_frame:000000000000B737                 db    0
.eh_frame:000000000000B738                 db  14h
.eh_frame:000000000000B739                 db    0
.eh_frame:000000000000B73A                 db    0
.eh_frame:000000000000B73B                 db    0
.eh_frame:000000000000B73C                 db  74h ; t
.eh_frame:000000000000B73D                 db  0Eh
.eh_frame:000000000000B73E                 db    0
.eh_frame:000000000000B73F                 db    0
.eh_frame:000000000000B740                 db  40h ; @
.eh_frame:000000000000B741                 db 0D0h
.eh_frame:000000000000B742                 db 0FFh
.eh_frame:000000000000B743                 db 0FFh
.eh_frame:000000000000B744                 db  0Eh
.eh_frame:000000000000B745                 db    0
.eh_frame:000000000000B746                 db    0
.eh_frame:000000000000B747                 db    0
.eh_frame:000000000000B748                 db    0
.eh_frame:000000000000B749                 db    0
.eh_frame:000000000000B74A                 db    0
.eh_frame:000000000000B74B                 db    0
.eh_frame:000000000000B74C                 db    0
.eh_frame:000000000000B74D                 db    0
.eh_frame:000000000000B74E                 db    0
.eh_frame:000000000000B74F                 db    0
.eh_frame:000000000000B750                 db  34h ; 4
.eh_frame:000000000000B751                 db    0
.eh_frame:000000000000B752                 db    0
.eh_frame:000000000000B753                 db    0
.eh_frame:000000000000B754                 db  8Ch
.eh_frame:000000000000B755                 db  0Eh
.eh_frame:000000000000B756                 db    0
.eh_frame:000000000000B757                 db    0
.eh_frame:000000000000B758                 db  38h ; 8
.eh_frame:000000000000B759                 db 0D0h
.eh_frame:000000000000B75A                 db 0FFh
.eh_frame:000000000000B75B                 db 0FFh
.eh_frame:000000000000B75C                 db  7Eh ; ~
.eh_frame:000000000000B75D                 db    2
.eh_frame:000000000000B75E                 db    0
.eh_frame:000000000000B75F                 db    0
.eh_frame:000000000000B760                 db    0
.eh_frame:000000000000B761                 db  42h ; B
.eh_frame:000000000000B762                 db  0Eh
.eh_frame:000000000000B763                 db  10h
.eh_frame:000000000000B764                 db  8Ch
.eh_frame:000000000000B765                 db    2
.eh_frame:000000000000B766                 db  41h ; A
.eh_frame:000000000000B767                 db  0Eh
.eh_frame:000000000000B768                 db  18h
.eh_frame:000000000000B769                 db  86h
.eh_frame:000000000000B76A                 db    3
.eh_frame:000000000000B76B                 db  43h ; C
.eh_frame:000000000000B76C                 db  0Eh
.eh_frame:000000000000B76D                 db  20h
.eh_frame:000000000000B76E                 db  83h
.eh_frame:000000000000B76F                 db    4
.eh_frame:000000000000B770                 db  44h ; D
.eh_frame:000000000000B771                 db  0Eh
.eh_frame:000000000000B772                 db  70h ; p
.eh_frame:000000000000B773                 db    2
.eh_frame:000000000000B774                 db 0F0h
.eh_frame:000000000000B775                 db  0Ah
.eh_frame:000000000000B776                 db  0Eh
.eh_frame:000000000000B777                 db  20h
.eh_frame:000000000000B778                 db  41h ; A
.eh_frame:000000000000B779                 db  0Eh
.eh_frame:000000000000B77A                 db  18h
.eh_frame:000000000000B77B                 db  41h ; A
.eh_frame:000000000000B77C                 db  0Eh
.eh_frame:000000000000B77D                 db  10h
.eh_frame:000000000000B77E                 db  42h ; B
.eh_frame:000000000000B77F                 db  0Eh
.eh_frame:000000000000B780                 db    8
.eh_frame:000000000000B781                 db  42h ; B
.eh_frame:000000000000B782                 db  0Bh
.eh_frame:000000000000B783                 db    0
.eh_frame:000000000000B784                 db    0
.eh_frame:000000000000B785                 db    0
.eh_frame:000000000000B786                 db    0
.eh_frame:000000000000B787                 db    0
.eh_frame:000000000000B788                 db  44h ; D
.eh_frame:000000000000B789                 db    0
.eh_frame:000000000000B78A                 db    0
.eh_frame:000000000000B78B                 db    0
.eh_frame:000000000000B78C                 db 0C4h
.eh_frame:000000000000B78D                 db  0Eh
.eh_frame:000000000000B78E                 db    0
.eh_frame:000000000000B78F                 db    0
.eh_frame:000000000000B790                 db  80h
.eh_frame:000000000000B791                 db 0D2h
.eh_frame:000000000000B792                 db 0FFh
.eh_frame:000000000000B793                 db 0FFh
.eh_frame:000000000000B794                 db  65h ; e
.eh_frame:000000000000B795                 db    0
.eh_frame:000000000000B796                 db    0
.eh_frame:000000000000B797                 db    0
.eh_frame:000000000000B798                 db    0
.eh_frame:000000000000B799                 db  42h ; B
.eh_frame:000000000000B79A                 db  0Eh
.eh_frame:000000000000B79B                 db  10h
.eh_frame:000000000000B79C                 db  8Fh
.eh_frame:000000000000B79D                 db    2
.eh_frame:000000000000B79E                 db  42h ; B
.eh_frame:000000000000B79F                 db  0Eh
.eh_frame:000000000000B7A0                 db  18h
.eh_frame:000000000000B7A1                 db  8Eh
.eh_frame:000000000000B7A2                 db    3
.eh_frame:000000000000B7A3                 db  45h ; E
.eh_frame:000000000000B7A4                 db  0Eh
.eh_frame:000000000000B7A5                 db  20h
.eh_frame:000000000000B7A6                 db  8Dh
.eh_frame:000000000000B7A7                 db    4
.eh_frame:000000000000B7A8                 db  42h ; B
.eh_frame:000000000000B7A9                 db  0Eh
.eh_frame:000000000000B7AA                 db  28h ; (
.eh_frame:000000000000B7AB                 db  8Ch
.eh_frame:000000000000B7AC                 db    5
.eh_frame:000000000000B7AD                 db  48h ; H
.eh_frame:000000000000B7AE                 db  0Eh
.eh_frame:000000000000B7AF                 db  30h ; 0
.eh_frame:000000000000B7B0                 db  86h
.eh_frame:000000000000B7B1                 db    6
.eh_frame:000000000000B7B2                 db  48h ; H
.eh_frame:000000000000B7B3                 db  0Eh
.eh_frame:000000000000B7B4                 db  38h ; 8
.eh_frame:000000000000B7B5                 db  83h
.eh_frame:000000000000B7B6                 db    7
.eh_frame:000000000000B7B7                 db  4Dh ; M
.eh_frame:000000000000B7B8                 db  0Eh
.eh_frame:000000000000B7B9                 db  40h ; @
.eh_frame:000000000000B7BA                 db  72h ; r
.eh_frame:000000000000B7BB                 db  0Eh
.eh_frame:000000000000B7BC                 db  38h ; 8
.eh_frame:000000000000B7BD                 db  41h ; A
.eh_frame:000000000000B7BE                 db  0Eh
.eh_frame:000000000000B7BF                 db  30h ; 0
.eh_frame:000000000000B7C0                 db  41h ; A
.eh_frame:000000000000B7C1                 db  0Eh
.eh_frame:000000000000B7C2                 db  28h ; (
.eh_frame:000000000000B7C3                 db  42h ; B
.eh_frame:000000000000B7C4                 db  0Eh
.eh_frame:000000000000B7C5                 db  20h
.eh_frame:000000000000B7C6                 db  42h ; B
.eh_frame:000000000000B7C7                 db  0Eh
.eh_frame:000000000000B7C8                 db  18h
.eh_frame:000000000000B7C9                 db  42h ; B
.eh_frame:000000000000B7CA                 db  0Eh
.eh_frame:000000000000B7CB                 db  10h
.eh_frame:000000000000B7CC                 db  42h ; B
.eh_frame:000000000000B7CD                 db  0Eh
.eh_frame:000000000000B7CE                 db    8
.eh_frame:000000000000B7CF                 db    0
.eh_frame:000000000000B7D0                 db  14h
.eh_frame:000000000000B7D1                 db    0
.eh_frame:000000000000B7D2                 db    0
.eh_frame:000000000000B7D3                 db    0
.eh_frame:000000000000B7D4                 db  0Ch
.eh_frame:000000000000B7D5                 db  0Fh
.eh_frame:000000000000B7D6                 db    0
.eh_frame:000000000000B7D7                 db    0
.eh_frame:000000000000B7D8                 db 0A8h
.eh_frame:000000000000B7D9                 db 0D2h
.eh_frame:000000000000B7DA                 db 0FFh
.eh_frame:000000000000B7DB                 db 0FFh
.eh_frame:000000000000B7DC                 db    2
.eh_frame:000000000000B7DD                 db    0
.eh_frame:000000000000B7DE                 db    0
.eh_frame:000000000000B7DF                 db    0
.eh_frame:000000000000B7E0                 db    0
.eh_frame:000000000000B7E1                 db    0
.eh_frame:000000000000B7E2                 db    0
.eh_frame:000000000000B7E3                 db    0
.eh_frame:000000000000B7E4                 db    0
.eh_frame:000000000000B7E5                 db    0
.eh_frame:000000000000B7E6                 db    0
.eh_frame:000000000000B7E7                 db    0
.eh_frame:000000000000B7E8                 db  10h
.eh_frame:000000000000B7E9                 db    0
.eh_frame:000000000000B7EA                 db    0
.eh_frame:000000000000B7EB                 db    0
.eh_frame:000000000000B7EC                 db  24h ; $
.eh_frame:000000000000B7ED                 db  0Fh
.eh_frame:000000000000B7EE                 db    0
.eh_frame:000000000000B7EF                 db    0
.eh_frame:000000000000B7F0                 db 0A0h
.eh_frame:000000000000B7F1                 db 0D2h
.eh_frame:000000000000B7F2                 db 0FFh
.eh_frame:000000000000B7F3                 db 0FFh
.eh_frame:000000000000B7F4                 db  0Eh
.eh_frame:000000000000B7F5                 db    0
.eh_frame:000000000000B7F6                 db    0
.eh_frame:000000000000B7F7                 db    0
.eh_frame:000000000000B7F8                 db    0
.eh_frame:000000000000B7F9                 db    0
.eh_frame:000000000000B7FA                 db    0
.eh_frame:000000000000B7FB                 db    0
.eh_frame:000000000000B7FC __FRAME_END__   db    0
.eh_frame:000000000000B7FD                 db    0
.eh_frame:000000000000B7FE                 db    0
.eh_frame:000000000000B7FF                 db    0
.eh_frame:000000000000B7FF _eh_frame       ends
.eh_frame:000000000000B7FF
.init_array:000000000020B8F0 ; ELF Initialization Function Table
.init_array:000000000020B8F0 ; ===========================================================================
.init_array:000000000020B8F0
.init_array:000000000020B8F0 ; Segment type: Pure data
.init_array:000000000020B8F0 ; Segment permissions: Read/Write
.init_array:000000000020B8F0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020B8F0                 assume cs:_init_array
.init_array:000000000020B8F0                 ;org 20B8F0h
.init_array:000000000020B8F0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020B8F0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020B8F0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020B8F0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020B8F0
.fini_array:000000000020B8F8 ; ELF Termination Function Table
.fini_array:000000000020B8F8 ; ===========================================================================
.fini_array:000000000020B8F8
.fini_array:000000000020B8F8 ; Segment type: Pure data
.fini_array:000000000020B8F8 ; Segment permissions: Read/Write
.fini_array:000000000020B8F8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020B8F8                 assume cs:_fini_array
.fini_array:000000000020B8F8                 ;org 20B8F8h
.fini_array:000000000020B8F8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020B8F8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020B8F8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020B8F8
.data.rel.ro:000000000020B900 ; ===========================================================================
.data.rel.ro:000000000020B900
.data.rel.ro:000000000020B900 ; Segment type: Pure data
.data.rel.ro:000000000020B900 ; Segment permissions: Read/Write
.data.rel.ro:000000000020B900 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020B900                 assume cs:_data_rel_ro
.data.rel.ro:000000000020B900                 ;org 20B900h
.data.rel.ro:000000000020B900 ; struct option longopts
.data.rel.ro:000000000020B900 longopts        dq offset msgid+12h     ; name
.data.rel.ro:000000000020B900                                         ; DATA XREF: main+C4↑o
.data.rel.ro:000000000020B900                 dd 1                    ; has_arg ; "bytes"
.data.rel.ro:000000000020B900                 db 4 dup(0)
.data.rel.ro:000000000020B900                 dq 0                    ; flag
.data.rel.ro:000000000020B900                 dd 62h                  ; val
.data.rel.ro:000000000020B900                 db 4 dup(0)
.data.rel.ro:000000000020B920                 dq offset aInvalidNumberO_0+12h ; "lines"
.data.rel.ro:000000000020B928                 db    1
.data.rel.ro:000000000020B929                 db    0
.data.rel.ro:000000000020B92A                 db    0
.data.rel.ro:000000000020B92B                 db    0
.data.rel.ro:000000000020B92C                 db    0
.data.rel.ro:000000000020B92D                 db    0
.data.rel.ro:000000000020B92E                 db    0
.data.rel.ro:000000000020B92F                 db    0
.data.rel.ro:000000000020B930                 db    0
.data.rel.ro:000000000020B931                 db    0
.data.rel.ro:000000000020B932                 db    0
.data.rel.ro:000000000020B933                 db    0
.data.rel.ro:000000000020B934                 db    0
.data.rel.ro:000000000020B935                 db    0
.data.rel.ro:000000000020B936                 db    0
.data.rel.ro:000000000020B937                 db    0
.data.rel.ro:000000000020B938                 db  6Ch ; l
.data.rel.ro:000000000020B939                 db    0
.data.rel.ro:000000000020B93A                 db    0
.data.rel.ro:000000000020B93B                 db    0
.data.rel.ro:000000000020B93C                 db    0
.data.rel.ro:000000000020B93D                 db    0
.data.rel.ro:000000000020B93E                 db    0
.data.rel.ro:000000000020B93F                 db    0
.data.rel.ro:000000000020B940                 dq offset aLineBytes    ; "line-bytes"
.data.rel.ro:000000000020B948                 db    1
.data.rel.ro:000000000020B949                 db    0
.data.rel.ro:000000000020B94A                 db    0
.data.rel.ro:000000000020B94B                 db    0
.data.rel.ro:000000000020B94C                 db    0
.data.rel.ro:000000000020B94D                 db    0
.data.rel.ro:000000000020B94E                 db    0
.data.rel.ro:000000000020B94F                 db    0
.data.rel.ro:000000000020B950                 db    0
.data.rel.ro:000000000020B951                 db    0
.data.rel.ro:000000000020B952                 db    0
.data.rel.ro:000000000020B953                 db    0
.data.rel.ro:000000000020B954                 db    0
.data.rel.ro:000000000020B955                 db    0
.data.rel.ro:000000000020B956                 db    0
.data.rel.ro:000000000020B957                 db    0
.data.rel.ro:000000000020B958                 db  43h ; C
.data.rel.ro:000000000020B959                 db    0
.data.rel.ro:000000000020B95A                 db    0
.data.rel.ro:000000000020B95B                 db    0
.data.rel.ro:000000000020B95C                 db    0
.data.rel.ro:000000000020B95D                 db    0
.data.rel.ro:000000000020B95E                 db    0
.data.rel.ro:000000000020B95F                 db    0
.data.rel.ro:000000000020B960                 dq offset aInvalidChunkNu+0Eh ; "number"
.data.rel.ro:000000000020B968                 db    1
.data.rel.ro:000000000020B969                 db    0
.data.rel.ro:000000000020B96A                 db    0
.data.rel.ro:000000000020B96B                 db    0
.data.rel.ro:000000000020B96C                 db    0
.data.rel.ro:000000000020B96D                 db    0
.data.rel.ro:000000000020B96E                 db    0
.data.rel.ro:000000000020B96F                 db    0
.data.rel.ro:000000000020B970                 db    0
.data.rel.ro:000000000020B971                 db    0
.data.rel.ro:000000000020B972                 db    0
.data.rel.ro:000000000020B973                 db    0
.data.rel.ro:000000000020B974                 db    0
.data.rel.ro:000000000020B975                 db    0
.data.rel.ro:000000000020B976                 db    0
.data.rel.ro:000000000020B977                 db    0
.data.rel.ro:000000000020B978                 db  6Eh ; n
.data.rel.ro:000000000020B979                 db    0
.data.rel.ro:000000000020B97A                 db    0
.data.rel.ro:000000000020B97B                 db    0
.data.rel.ro:000000000020B97C                 db    0
.data.rel.ro:000000000020B97D                 db    0
.data.rel.ro:000000000020B97E                 db    0
.data.rel.ro:000000000020B97F                 db    0
.data.rel.ro:000000000020B980                 dq offset aElideEmptyFile ; "elide-empty-files"
.data.rel.ro:000000000020B988                 db    0
.data.rel.ro:000000000020B989                 db    0
.data.rel.ro:000000000020B98A                 db    0
.data.rel.ro:000000000020B98B                 db    0
.data.rel.ro:000000000020B98C                 db    0
.data.rel.ro:000000000020B98D                 db    0
.data.rel.ro:000000000020B98E                 db    0
.data.rel.ro:000000000020B98F                 db    0
.data.rel.ro:000000000020B990                 db    0
.data.rel.ro:000000000020B991                 db    0
.data.rel.ro:000000000020B992                 db    0
.data.rel.ro:000000000020B993                 db    0
.data.rel.ro:000000000020B994                 db    0
.data.rel.ro:000000000020B995                 db    0
.data.rel.ro:000000000020B996                 db    0
.data.rel.ro:000000000020B997                 db    0
.data.rel.ro:000000000020B998                 db  65h ; e
.data.rel.ro:000000000020B999                 db    0
.data.rel.ro:000000000020B99A                 db    0
.data.rel.ro:000000000020B99B                 db    0
.data.rel.ro:000000000020B99C                 db    0
.data.rel.ro:000000000020B99D                 db    0
.data.rel.ro:000000000020B99E                 db    0
.data.rel.ro:000000000020B99F                 db    0
.data.rel.ro:000000000020B9A0                 dq offset aUnbuffered   ; "unbuffered"
.data.rel.ro:000000000020B9A8                 db    0
.data.rel.ro:000000000020B9A9                 db    0
.data.rel.ro:000000000020B9AA                 db    0
.data.rel.ro:000000000020B9AB                 db    0
.data.rel.ro:000000000020B9AC                 db    0
.data.rel.ro:000000000020B9AD                 db    0
.data.rel.ro:000000000020B9AE                 db    0
.data.rel.ro:000000000020B9AF                 db    0
.data.rel.ro:000000000020B9B0                 db    0
.data.rel.ro:000000000020B9B1                 db    0
.data.rel.ro:000000000020B9B2                 db    0
.data.rel.ro:000000000020B9B3                 db    0
.data.rel.ro:000000000020B9B4                 db    0
.data.rel.ro:000000000020B9B5                 db    0
.data.rel.ro:000000000020B9B6                 db    0
.data.rel.ro:000000000020B9B7                 db    0
.data.rel.ro:000000000020B9B8                 db  75h ; u
.data.rel.ro:000000000020B9B9                 db    0
.data.rel.ro:000000000020B9BA                 db    0
.data.rel.ro:000000000020B9BB                 db    0
.data.rel.ro:000000000020B9BC                 db    0
.data.rel.ro:000000000020B9BD                 db    0
.data.rel.ro:000000000020B9BE                 db    0
.data.rel.ro:000000000020B9BF                 db    0
.data.rel.ro:000000000020B9C0                 dq offset aSuffixLength ; "suffix-length"
.data.rel.ro:000000000020B9C8                 db    1
.data.rel.ro:000000000020B9C9                 db    0
.data.rel.ro:000000000020B9CA                 db    0
.data.rel.ro:000000000020B9CB                 db    0
.data.rel.ro:000000000020B9CC                 db    0
.data.rel.ro:000000000020B9CD                 db    0
.data.rel.ro:000000000020B9CE                 db    0
.data.rel.ro:000000000020B9CF                 db    0
.data.rel.ro:000000000020B9D0                 db    0
.data.rel.ro:000000000020B9D1                 db    0
.data.rel.ro:000000000020B9D2                 db    0
.data.rel.ro:000000000020B9D3                 db    0
.data.rel.ro:000000000020B9D4                 db    0
.data.rel.ro:000000000020B9D5                 db    0
.data.rel.ro:000000000020B9D6                 db    0
.data.rel.ro:000000000020B9D7                 db    0
.data.rel.ro:000000000020B9D8                 db  61h ; a
.data.rel.ro:000000000020B9D9                 db    0
.data.rel.ro:000000000020B9DA                 db    0
.data.rel.ro:000000000020B9DB                 db    0
.data.rel.ro:000000000020B9DC                 db    0
.data.rel.ro:000000000020B9DD                 db    0
.data.rel.ro:000000000020B9DE                 db    0
.data.rel.ro:000000000020B9DF                 db    0
.data.rel.ro:000000000020B9E0                 dq offset aAdditionalSuff ; "additional-suffix"
.data.rel.ro:000000000020B9E8                 db    1
.data.rel.ro:000000000020B9E9                 db    0
.data.rel.ro:000000000020B9EA                 db    0
.data.rel.ro:000000000020B9EB                 db    0
.data.rel.ro:000000000020B9EC                 db    0
.data.rel.ro:000000000020B9ED                 db    0
.data.rel.ro:000000000020B9EE                 db    0
.data.rel.ro:000000000020B9EF                 db    0
.data.rel.ro:000000000020B9F0                 db    0
.data.rel.ro:000000000020B9F1                 db    0
.data.rel.ro:000000000020B9F2                 db    0
.data.rel.ro:000000000020B9F3                 db    0
.data.rel.ro:000000000020B9F4                 db    0
.data.rel.ro:000000000020B9F5                 db    0
.data.rel.ro:000000000020B9F6                 db    0
.data.rel.ro:000000000020B9F7                 db    0
.data.rel.ro:000000000020B9F8                 db  83h
.data.rel.ro:000000000020B9F9                 db    0
.data.rel.ro:000000000020B9FA                 db    0
.data.rel.ro:000000000020B9FB                 db    0
.data.rel.ro:000000000020B9FC                 db    0
.data.rel.ro:000000000020B9FD                 db    0
.data.rel.ro:000000000020B9FE                 db    0
.data.rel.ro:000000000020B9FF                 db    0
.data.rel.ro:000000000020BA00                 dq offset aNumericSuffixe ; "numeric-suffixes"
.data.rel.ro:000000000020BA08                 db    2
.data.rel.ro:000000000020BA09                 db    0
.data.rel.ro:000000000020BA0A                 db    0
.data.rel.ro:000000000020BA0B                 db    0
.data.rel.ro:000000000020BA0C                 db    0
.data.rel.ro:000000000020BA0D                 db    0
.data.rel.ro:000000000020BA0E                 db    0
.data.rel.ro:000000000020BA0F                 db    0
.data.rel.ro:000000000020BA10                 db    0
.data.rel.ro:000000000020BA11                 db    0
.data.rel.ro:000000000020BA12                 db    0
.data.rel.ro:000000000020BA13                 db    0
.data.rel.ro:000000000020BA14                 db    0
.data.rel.ro:000000000020BA15                 db    0
.data.rel.ro:000000000020BA16                 db    0
.data.rel.ro:000000000020BA17                 db    0
.data.rel.ro:000000000020BA18                 db  64h ; d
.data.rel.ro:000000000020BA19                 db    0
.data.rel.ro:000000000020BA1A                 db    0
.data.rel.ro:000000000020BA1B                 db    0
.data.rel.ro:000000000020BA1C                 db    0
.data.rel.ro:000000000020BA1D                 db    0
.data.rel.ro:000000000020BA1E                 db    0
.data.rel.ro:000000000020BA1F                 db    0
.data.rel.ro:000000000020BA20                 dq offset aHexSuffixes  ; "hex-suffixes"
.data.rel.ro:000000000020BA28                 db    2
.data.rel.ro:000000000020BA29                 db    0
.data.rel.ro:000000000020BA2A                 db    0
.data.rel.ro:000000000020BA2B                 db    0
.data.rel.ro:000000000020BA2C                 db    0
.data.rel.ro:000000000020BA2D                 db    0
.data.rel.ro:000000000020BA2E                 db    0
.data.rel.ro:000000000020BA2F                 db    0
.data.rel.ro:000000000020BA30                 db    0
.data.rel.ro:000000000020BA31                 db    0
.data.rel.ro:000000000020BA32                 db    0
.data.rel.ro:000000000020BA33                 db    0
.data.rel.ro:000000000020BA34                 db    0
.data.rel.ro:000000000020BA35                 db    0
.data.rel.ro:000000000020BA36                 db    0
.data.rel.ro:000000000020BA37                 db    0
.data.rel.ro:000000000020BA38                 db  78h ; x
.data.rel.ro:000000000020BA39                 db    0
.data.rel.ro:000000000020BA3A                 db    0
.data.rel.ro:000000000020BA3B                 db    0
.data.rel.ro:000000000020BA3C                 db    0
.data.rel.ro:000000000020BA3D                 db    0
.data.rel.ro:000000000020BA3E                 db    0
.data.rel.ro:000000000020BA3F                 db    0
.data.rel.ro:000000000020BA40                 dq offset aFilter       ; "filter"
.data.rel.ro:000000000020BA48                 db    1
.data.rel.ro:000000000020BA49                 db    0
.data.rel.ro:000000000020BA4A                 db    0
.data.rel.ro:000000000020BA4B                 db    0
.data.rel.ro:000000000020BA4C                 db    0
.data.rel.ro:000000000020BA4D                 db    0
.data.rel.ro:000000000020BA4E                 db    0
.data.rel.ro:000000000020BA4F                 db    0
.data.rel.ro:000000000020BA50                 db    0
.data.rel.ro:000000000020BA51                 db    0
.data.rel.ro:000000000020BA52                 db    0
.data.rel.ro:000000000020BA53                 db    0
.data.rel.ro:000000000020BA54                 db    0
.data.rel.ro:000000000020BA55                 db    0
.data.rel.ro:000000000020BA56                 db    0
.data.rel.ro:000000000020BA57                 db    0
.data.rel.ro:000000000020BA58                 db  81h
.data.rel.ro:000000000020BA59                 db    0
.data.rel.ro:000000000020BA5A                 db    0
.data.rel.ro:000000000020BA5B                 db    0
.data.rel.ro:000000000020BA5C                 db    0
.data.rel.ro:000000000020BA5D                 db    0
.data.rel.ro:000000000020BA5E                 db    0
.data.rel.ro:000000000020BA5F                 db    0
.data.rel.ro:000000000020BA60                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020BA68                 db    0
.data.rel.ro:000000000020BA69                 db    0
.data.rel.ro:000000000020BA6A                 db    0
.data.rel.ro:000000000020BA6B                 db    0
.data.rel.ro:000000000020BA6C                 db    0
.data.rel.ro:000000000020BA6D                 db    0
.data.rel.ro:000000000020BA6E                 db    0
.data.rel.ro:000000000020BA6F                 db    0
.data.rel.ro:000000000020BA70                 db    0
.data.rel.ro:000000000020BA71                 db    0
.data.rel.ro:000000000020BA72                 db    0
.data.rel.ro:000000000020BA73                 db    0
.data.rel.ro:000000000020BA74                 db    0
.data.rel.ro:000000000020BA75                 db    0
.data.rel.ro:000000000020BA76                 db    0
.data.rel.ro:000000000020BA77                 db    0
.data.rel.ro:000000000020BA78                 db  80h
.data.rel.ro:000000000020BA79                 db    0
.data.rel.ro:000000000020BA7A                 db    0
.data.rel.ro:000000000020BA7B                 db    0
.data.rel.ro:000000000020BA7C                 db    0
.data.rel.ro:000000000020BA7D                 db    0
.data.rel.ro:000000000020BA7E                 db    0
.data.rel.ro:000000000020BA7F                 db    0
.data.rel.ro:000000000020BA80                 dq offset aEmptyRecordSep+0Dh ; "separator"
.data.rel.ro:000000000020BA88                 db    1
.data.rel.ro:000000000020BA89                 db    0
.data.rel.ro:000000000020BA8A                 db    0
.data.rel.ro:000000000020BA8B                 db    0
.data.rel.ro:000000000020BA8C                 db    0
.data.rel.ro:000000000020BA8D                 db    0
.data.rel.ro:000000000020BA8E                 db    0
.data.rel.ro:000000000020BA8F                 db    0
.data.rel.ro:000000000020BA90                 db    0
.data.rel.ro:000000000020BA91                 db    0
.data.rel.ro:000000000020BA92                 db    0
.data.rel.ro:000000000020BA93                 db    0
.data.rel.ro:000000000020BA94                 db    0
.data.rel.ro:000000000020BA95                 db    0
.data.rel.ro:000000000020BA96                 db    0
.data.rel.ro:000000000020BA97                 db    0
.data.rel.ro:000000000020BA98                 db  74h ; t
.data.rel.ro:000000000020BA99                 db    0
.data.rel.ro:000000000020BA9A                 db    0
.data.rel.ro:000000000020BA9B                 db    0
.data.rel.ro:000000000020BA9C                 db    0
.data.rel.ro:000000000020BA9D                 db    0
.data.rel.ro:000000000020BA9E                 db    0
.data.rel.ro:000000000020BA9F                 db    0
.data.rel.ro:000000000020BAA0                 dq offset aIoBlksize    ; "-io-blksize"
.data.rel.ro:000000000020BAA8                 db    1
.data.rel.ro:000000000020BAA9                 db    0
.data.rel.ro:000000000020BAAA                 db    0
.data.rel.ro:000000000020BAAB                 db    0
.data.rel.ro:000000000020BAAC                 db    0
.data.rel.ro:000000000020BAAD                 db    0
.data.rel.ro:000000000020BAAE                 db    0
.data.rel.ro:000000000020BAAF                 db    0
.data.rel.ro:000000000020BAB0                 db    0
.data.rel.ro:000000000020BAB1                 db    0
.data.rel.ro:000000000020BAB2                 db    0
.data.rel.ro:000000000020BAB3                 db    0
.data.rel.ro:000000000020BAB4                 db    0
.data.rel.ro:000000000020BAB5                 db    0
.data.rel.ro:000000000020BAB6                 db    0
.data.rel.ro:000000000020BAB7                 db    0
.data.rel.ro:000000000020BAB8                 db  82h
.data.rel.ro:000000000020BAB9                 db    0
.data.rel.ro:000000000020BABA                 db    0
.data.rel.ro:000000000020BABB                 db    0
.data.rel.ro:000000000020BABC                 db    0
.data.rel.ro:000000000020BABD                 db    0
.data.rel.ro:000000000020BABE                 db    0
.data.rel.ro:000000000020BABF                 db    0
.data.rel.ro:000000000020BAC0                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020BAC8                 db    0
.data.rel.ro:000000000020BAC9                 db    0
.data.rel.ro:000000000020BACA                 db    0
.data.rel.ro:000000000020BACB                 db    0
.data.rel.ro:000000000020BACC                 db    0
.data.rel.ro:000000000020BACD                 db    0
.data.rel.ro:000000000020BACE                 db    0
.data.rel.ro:000000000020BACF                 db    0
.data.rel.ro:000000000020BAD0                 db    0
.data.rel.ro:000000000020BAD1                 db    0
.data.rel.ro:000000000020BAD2                 db    0
.data.rel.ro:000000000020BAD3                 db    0
.data.rel.ro:000000000020BAD4                 db    0
.data.rel.ro:000000000020BAD5                 db    0
.data.rel.ro:000000000020BAD6                 db    0
.data.rel.ro:000000000020BAD7                 db    0
.data.rel.ro:000000000020BAD8                 db  7Eh ; ~
.data.rel.ro:000000000020BAD9                 db 0FFh
.data.rel.ro:000000000020BADA                 db 0FFh
.data.rel.ro:000000000020BADB                 db 0FFh
.data.rel.ro:000000000020BADC                 db    0
.data.rel.ro:000000000020BADD                 db    0
.data.rel.ro:000000000020BADE                 db    0
.data.rel.ro:000000000020BADF                 db    0
.data.rel.ro:000000000020BAE0                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020BAE8                 db    0
.data.rel.ro:000000000020BAE9                 db    0
.data.rel.ro:000000000020BAEA                 db    0
.data.rel.ro:000000000020BAEB                 db    0
.data.rel.ro:000000000020BAEC                 db    0
.data.rel.ro:000000000020BAED                 db    0
.data.rel.ro:000000000020BAEE                 db    0
.data.rel.ro:000000000020BAEF                 db    0
.data.rel.ro:000000000020BAF0                 db    0
.data.rel.ro:000000000020BAF1                 db    0
.data.rel.ro:000000000020BAF2                 db    0
.data.rel.ro:000000000020BAF3                 db    0
.data.rel.ro:000000000020BAF4                 db    0
.data.rel.ro:000000000020BAF5                 db    0
.data.rel.ro:000000000020BAF6                 db    0
.data.rel.ro:000000000020BAF7                 db    0
.data.rel.ro:000000000020BAF8                 db  7Dh ; }
.data.rel.ro:000000000020BAF9                 db 0FFh
.data.rel.ro:000000000020BAFA                 db 0FFh
.data.rel.ro:000000000020BAFB                 db 0FFh
.data.rel.ro:000000000020BAFC                 db    0
.data.rel.ro:000000000020BAFD                 db    0
.data.rel.ro:000000000020BAFE                 db    0
.data.rel.ro:000000000020BAFF                 db    0
.data.rel.ro:000000000020BB00                 db    0
.data.rel.ro:000000000020BB01                 db    0
.data.rel.ro:000000000020BB02                 db    0
.data.rel.ro:000000000020BB03                 db    0
.data.rel.ro:000000000020BB04                 db    0
.data.rel.ro:000000000020BB05                 db    0
.data.rel.ro:000000000020BB06                 db    0
.data.rel.ro:000000000020BB07                 db    0
.data.rel.ro:000000000020BB08                 db    0
.data.rel.ro:000000000020BB09                 db    0
.data.rel.ro:000000000020BB0A                 db    0
.data.rel.ro:000000000020BB0B                 db    0
.data.rel.ro:000000000020BB0C                 db    0
.data.rel.ro:000000000020BB0D                 db    0
.data.rel.ro:000000000020BB0E                 db    0
.data.rel.ro:000000000020BB0F                 db    0
.data.rel.ro:000000000020BB10                 db    0
.data.rel.ro:000000000020BB11                 db    0
.data.rel.ro:000000000020BB12                 db    0
.data.rel.ro:000000000020BB13                 db    0
.data.rel.ro:000000000020BB14                 db    0
.data.rel.ro:000000000020BB15                 db    0
.data.rel.ro:000000000020BB16                 db    0
.data.rel.ro:000000000020BB17                 db    0
.data.rel.ro:000000000020BB18                 db    0
.data.rel.ro:000000000020BB19                 db    0
.data.rel.ro:000000000020BB1A                 db    0
.data.rel.ro:000000000020BB1B                 db    0
.data.rel.ro:000000000020BB1C                 db    0
.data.rel.ro:000000000020BB1D                 db    0
.data.rel.ro:000000000020BB1E                 db    0
.data.rel.ro:000000000020BB1F                 db    0
.data.rel.ro:000000000020BB20                 public quoting_style_args
.data.rel.ro:000000000020BB20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020BB28                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020BB30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020BB38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020BB40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020BB48                 dq offset aC_0+1        ; "c"
.data.rel.ro:000000000020BB50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020BB58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020BB60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020BB68                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020BB70                 db    0
.data.rel.ro:000000000020BB71                 db    0
.data.rel.ro:000000000020BB72                 db    0
.data.rel.ro:000000000020BB73                 db    0
.data.rel.ro:000000000020BB74                 db    0
.data.rel.ro:000000000020BB75                 db    0
.data.rel.ro:000000000020BB76                 db    0
.data.rel.ro:000000000020BB77                 db    0
.data.rel.ro:000000000020BB77 _data_rel_ro    ends
.data.rel.ro:000000000020BB77
LOAD:000000000020BB78 ; ELF Dynamic Information
LOAD:000000000020BB78 ; ===========================================================================
LOAD:000000000020BB78
LOAD:000000000020BB78 ; Segment type: Pure data
LOAD:000000000020BB78 ; Segment permissions: Read/Write
LOAD:000000000020BB78 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BB78                 assume cs:LOAD
LOAD:000000000020BB78                 ;org 20BB78h
LOAD:000000000020BB78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020BB78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020BB78                                         ; DT_NEEDED libc.so.6
LOAD:000000000020BB88                 Elf64_Dyn <0Ch, 1B08h>  ; DT_INIT
LOAD:000000000020BB98                 Elf64_Dyn <0Dh, 8AA0h>  ; DT_FINI
LOAD:000000000020BBA8                 Elf64_Dyn <19h, 20B8F0h> ; DT_INIT_ARRAY
LOAD:000000000020BBB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020BBC8                 Elf64_Dyn <1Ah, 20B8F8h> ; DT_FINI_ARRAY
LOAD:000000000020BBD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020BBE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020BBF8                 Elf64_Dyn <5, 0B20h>    ; DT_STRTAB
LOAD:000000000020BC08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020BC18                 Elf64_Dyn <0Ah, 3C2h>   ; DT_STRSZ
LOAD:000000000020BC28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020BC38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020BC48                 Elf64_Dyn <3, 20BD68h>  ; DT_PLTGOT
LOAD:000000000020BC58                 Elf64_Dyn <2, 6F0h>     ; DT_PLTRELSZ
LOAD:000000000020BC68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020BC78                 Elf64_Dyn <17h, 1418h>  ; DT_JMPREL
LOAD:000000000020BC88                 Elf64_Dyn <7, 0FF8h>    ; DT_RELA
LOAD:000000000020BC98                 Elf64_Dyn <8, 420h>     ; DT_RELASZ
LOAD:000000000020BCA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020BCB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020BCC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020BCD8                 Elf64_Dyn <6FFFFFFEh, 0F98h> ; DT_VERNEED
LOAD:000000000020BCE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020BCF8                 Elf64_Dyn <6FFFFFF0h, 0EE2h> ; DT_VERSYM
LOAD:000000000020BD08                 Elf64_Dyn <6FFFFFF9h, 21h> ; DT_RELACOUNT
LOAD:000000000020BD18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020BD28                 db    0
LOAD:000000000020BD29                 db    0
LOAD:000000000020BD2A                 db    0
LOAD:000000000020BD2B                 db    0
LOAD:000000000020BD2C                 db    0
LOAD:000000000020BD2D                 db    0
LOAD:000000000020BD2E                 db    0
LOAD:000000000020BD2F                 db    0
LOAD:000000000020BD30                 db    0
LOAD:000000000020BD31                 db    0
LOAD:000000000020BD32                 db    0
LOAD:000000000020BD33                 db    0
LOAD:000000000020BD34                 db    0
LOAD:000000000020BD35                 db    0
LOAD:000000000020BD36                 db    0
LOAD:000000000020BD37                 db    0
LOAD:000000000020BD38                 db    0
LOAD:000000000020BD39                 db    0
LOAD:000000000020BD3A                 db    0
LOAD:000000000020BD3B                 db    0
LOAD:000000000020BD3C                 db    0
LOAD:000000000020BD3D                 db    0
LOAD:000000000020BD3E                 db    0
LOAD:000000000020BD3F                 db    0
LOAD:000000000020BD40                 db    0
LOAD:000000000020BD41                 db    0
LOAD:000000000020BD42                 db    0
LOAD:000000000020BD43                 db    0
LOAD:000000000020BD44                 db    0
LOAD:000000000020BD45                 db    0
LOAD:000000000020BD46                 db    0
LOAD:000000000020BD47                 db    0
LOAD:000000000020BD48                 db    0
LOAD:000000000020BD49                 db    0
LOAD:000000000020BD4A                 db    0
LOAD:000000000020BD4B                 db    0
LOAD:000000000020BD4C                 db    0
LOAD:000000000020BD4D                 db    0
LOAD:000000000020BD4E                 db    0
LOAD:000000000020BD4F                 db    0
LOAD:000000000020BD50                 db    0
LOAD:000000000020BD51                 db    0
LOAD:000000000020BD52                 db    0
LOAD:000000000020BD53                 db    0
LOAD:000000000020BD54                 db    0
LOAD:000000000020BD55                 db    0
LOAD:000000000020BD56                 db    0
LOAD:000000000020BD57                 db    0
LOAD:000000000020BD58                 db    0
LOAD:000000000020BD59                 db    0
LOAD:000000000020BD5A                 db    0
LOAD:000000000020BD5B                 db    0
LOAD:000000000020BD5C                 db    0
LOAD:000000000020BD5D                 db    0
LOAD:000000000020BD5E                 db    0
LOAD:000000000020BD5F                 db    0
LOAD:000000000020BD60                 db    0
LOAD:000000000020BD61                 db    0
LOAD:000000000020BD62                 db    0
LOAD:000000000020BD63                 db    0
LOAD:000000000020BD64                 db    0
LOAD:000000000020BD65                 db    0
LOAD:000000000020BD66                 db    0
LOAD:000000000020BD67                 db    0
LOAD:000000000020BD67 LOAD            ends
LOAD:000000000020BD67
.got:000000000020BD68 ; ===========================================================================
.got:000000000020BD68
.got:000000000020BD68 ; Segment type: Pure data
.got:000000000020BD68 ; Segment permissions: Read/Write
.got:000000000020BD68 _got            segment qword public 'DATA' use64
.got:000000000020BD68                 assume cs:_got
.got:000000000020BD68                 ;org 20BD68h
.got:000000000020BD68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020BD70 qword_20BD70    dq 0                    ; DATA XREF: sub_1B20↑r
.got:000000000020BD78 qword_20BD78    dq 0                    ; DATA XREF: sub_1B20+6↑r
.got:000000000020BD80 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000020BD88 sigprocmask_ptr dq offset sigprocmask   ; DATA XREF: _sigprocmask↑r
.got:000000000020BD90 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020BD98 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020BDA0 __errno_location_ptr dq offset __errno_location
.got:000000000020BDA0                                         ; DATA XREF: ___errno_location↑r
.got:000000000020BDA8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020BDB0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020BDB8 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020BDC0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020BDC8 sigaction_ptr   dq offset sigaction     ; DATA XREF: _sigaction↑r
.got:000000000020BDD0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020BDD8 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:000000000020BDE0 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:000000000020BDE0                                         ; DATA XREF: _clearerr_unlocked↑r
.got:000000000020BDE8 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:000000000020BDF0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020BDF8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020BE00 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020BE00                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020BE08 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020BE10 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020BE10                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020BE18 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020BE20 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020BE20                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020BE28 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020BE30 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020BE38 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:000000000020BE40 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020BE48 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020BE50 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:000000000020BE58 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020BE60 __assert_fail_ptr dq offset __assert_fail
.got:000000000020BE60                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020BE68 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020BE68                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020BE70 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020BE78 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020BE80 pipe_ptr        dq offset pipe          ; DATA XREF: _pipe↑r
.got:000000000020BE88 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000020BE90 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000020BE98 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:000000000020BEA0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020BEA8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020BEA8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020BEB0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020BEB8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020BEC0 sigemptyset_ptr dq offset sigemptyset   ; DATA XREF: _sigemptyset↑r
.got:000000000020BEC8 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:000000000020BED0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020BED8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020BEE0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020BEE8 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020BEF0 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020BEF8 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020BF00 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020BF08 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020BF08                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020BF10 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020BF18 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000020BF20 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020BF28 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020BF30 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020BF38 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020BF40 memrchr_ptr     dq offset memrchr       ; DATA XREF: _memrchr↑r
.got:000000000020BF48 waitpid_ptr     dq offset waitpid       ; DATA XREF: _waitpid↑r
.got:000000000020BF50 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020BF58 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020BF60 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020BF68 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:000000000020BF70 __libc_current_sigrtmin_ptr dq offset __libc_current_sigrtmin
.got:000000000020BF70                                         ; DATA XREF: ___libc_current_sigrtmin↑r
.got:000000000020BF78 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020BF80 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020BF88 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020BF88                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020BF90 __libc_current_sigrtmax_ptr dq offset __libc_current_sigrtmax
.got:000000000020BF90                                         ; DATA XREF: ___libc_current_sigrtmax↑r
.got:000000000020BF98 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020BFA0 execl_ptr       dq offset execl         ; DATA XREF: _execl↑r
.got:000000000020BFA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020BFB0 sigaddset_ptr   dq offset sigaddset     ; DATA XREF: _sigaddset↑r
.got:000000000020BFB8 fork_ptr        dq offset fork          ; DATA XREF: _fork↑r
.got:000000000020BFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020BFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020BFC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000020BFC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000020BFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020BFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020BFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020BFD8                                         ; DATA XREF: start+24↑r
.got:000000000020BFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020BFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020BFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020BFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020BFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020BFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020BFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020BFF0 _got            ends
.got:000000000020BFF0
LOAD:000000000020BFF8 ; ===========================================================================
LOAD:000000000020BFF8
LOAD:000000000020BFF8 ; Segment type: Pure data
LOAD:000000000020BFF8 ; Segment permissions: Read/Write
LOAD:000000000020BFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BFF8                 assume cs:LOAD
LOAD:000000000020BFF8                 ;org 20BFF8h
LOAD:000000000020BFF8                 align 20h
LOAD:000000000020BFF8 LOAD            ends
LOAD:000000000020BFF8
.data:000000000020C000 ; ===========================================================================
.data:000000000020C000
.data:000000000020C000 ; Segment type: Pure data
.data:000000000020C000 ; Segment permissions: Read/Write
.data:000000000020C000 _data           segment align_32 public 'DATA' use64
.data:000000000020C000                 assume cs:_data
.data:000000000020C000                 ;org 20C000h
.data:000000000020C000                 public __data_start ; weak
.data:000000000020C000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020C000                                         ; data_start
.data:000000000020C001                 db    0
.data:000000000020C002                 db    0
.data:000000000020C003                 db    0
.data:000000000020C004                 db    0
.data:000000000020C005                 db    0
.data:000000000020C006                 db    0
.data:000000000020C007                 db    0
.data:000000000020C008                 public __dso_handle
.data:000000000020C008 ; void *_dso_handle
.data:000000000020C008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020C008                                         ; atexit↑r ...
.data:000000000020C010 ; int eolchar
.data:000000000020C010 eolchar         dd 0FFFFFFFFh           ; DATA XREF: main:loc_22C4↑r
.data:000000000020C010                                         ; main:loc_22D6↑w ...
.data:000000000020C014 output_desc     dd 0FFFFFFFFh           ; DATA XREF: main+F54↑r
.data:000000000020C014                                         ; cwrite+3B↑r ...
.data:000000000020C018 suffix_auto     db 1                    ; DATA XREF: main+6DE↑w
.data:000000000020C018                                         ; main+996↑w ...
.data:000000000020C019                 align 20h
.data:000000000020C020 ; char *suffix_alphabet
.data:000000000020C020 suffix_alphabet dq offset aAbcdefghijklmn
.data:000000000020C020                                         ; DATA XREF: main+5E2↑w
.data:000000000020C020                                         ; main+611↑r ...
.data:000000000020C020                                         ; "abcdefghijklmnopqrstuvwxyz"
.data:000000000020C028                 public Version
.data:000000000020C028 Version         dq offset a831          ; DATA XREF: main+223↑r
.data:000000000020C028                                         ; "8.31"
.data:000000000020C030                 public exit_failure
.data:000000000020C030 ; int exit_failure
.data:000000000020C030 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5392↑r
.data:000000000020C030                                         ; xalloc_die+17↑r
.data:000000000020C034                 align 20h
.data:000000000020C040                 public quote_quoting_options
.data:000000000020C040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020C040                                         ; quote_mem↑o ...
.data:000000000020C041                 db    0
.data:000000000020C042                 db    0
.data:000000000020C043                 db    0
.data:000000000020C044                 db    0
.data:000000000020C045                 db    0
.data:000000000020C046                 db    0
.data:000000000020C047                 db    0
.data:000000000020C048                 db    0
.data:000000000020C049                 db    0
.data:000000000020C04A                 db    0
.data:000000000020C04B                 db    0
.data:000000000020C04C                 db    0
.data:000000000020C04D                 db    0
.data:000000000020C04E                 db    0
.data:000000000020C04F                 db    0
.data:000000000020C050                 db    0
.data:000000000020C051                 db    0
.data:000000000020C052                 db    0
.data:000000000020C053                 db    0
.data:000000000020C054                 db    0
.data:000000000020C055                 db    0
.data:000000000020C056                 db    0
.data:000000000020C057                 db    0
.data:000000000020C058                 db    0
.data:000000000020C059                 db    0
.data:000000000020C05A                 db    0
.data:000000000020C05B                 db    0
.data:000000000020C05C                 db    0
.data:000000000020C05D                 db    0
.data:000000000020C05E                 db    0
.data:000000000020C05F                 db    0
.data:000000000020C060                 db    0
.data:000000000020C061                 db    0
.data:000000000020C062                 db    0
.data:000000000020C063                 db    0
.data:000000000020C064                 db    0
.data:000000000020C065                 db    0
.data:000000000020C066                 db    0
.data:000000000020C067                 db    0
.data:000000000020C068                 db    0
.data:000000000020C069                 db    0
.data:000000000020C06A                 db    0
.data:000000000020C06B                 db    0
.data:000000000020C06C                 db    0
.data:000000000020C06D                 db    0
.data:000000000020C06E                 db    0
.data:000000000020C06F                 db    0
.data:000000000020C070                 db    0
.data:000000000020C071                 db    0
.data:000000000020C072                 db    0
.data:000000000020C073                 db    0
.data:000000000020C074                 db    0
.data:000000000020C075                 db    0
.data:000000000020C076                 db    0
.data:000000000020C077                 db    0
.data:000000000020C078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020C078                                         ; quotearg_n_options:loc_6A5D↑r ...
.data:000000000020C07C                 align 20h
.data:000000000020C080 ; void *slotvec
.data:000000000020C080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020C080                                         ; quotearg_n_options+76↑w ...
.data:000000000020C088                 align 10h
.data:000000000020C090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020C090                                         ; quotearg_n_options+187↑r ...
.data:000000000020C098 off_20C098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020C0A0 numname_table   db    1                 ; DATA XREF: str2sig+5F↑o
.data:000000000020C0A0                                         ; sig2str+1↑o
.data:000000000020C0A1                 db    0
.data:000000000020C0A2                 db    0
.data:000000000020C0A3                 db    0
.data:000000000020C0A4 ; char nptr[4]
.data:000000000020C0A4 nptr            db 'HUP',0              ; DATA XREF: str2sig+E↑o
.data:000000000020C0A8                 db    0
.data:000000000020C0A9                 db    0
.data:000000000020C0AA                 db    0
.data:000000000020C0AB                 db    0
.data:000000000020C0AC                 db    2
.data:000000000020C0AD                 db    0
.data:000000000020C0AE                 db    0
.data:000000000020C0AF                 db    0
.data:000000000020C0B0                 db  49h ; I
.data:000000000020C0B1                 db  4Eh ; N
.data:000000000020C0B2                 db  54h ; T
.data:000000000020C0B3                 db    0
.data:000000000020C0B4                 db    0
.data:000000000020C0B5                 db    0
.data:000000000020C0B6                 db    0
.data:000000000020C0B7                 db    0
.data:000000000020C0B8                 db    3
.data:000000000020C0B9                 db    0
.data:000000000020C0BA                 db    0
.data:000000000020C0BB                 db    0
.data:000000000020C0BC                 db  51h ; Q
.data:000000000020C0BD                 db  55h ; U
.data:000000000020C0BE                 db  49h ; I
.data:000000000020C0BF                 db  54h ; T
.data:000000000020C0C0                 db    0
.data:000000000020C0C1                 db    0
.data:000000000020C0C2                 db    0
.data:000000000020C0C3                 db    0
.data:000000000020C0C4                 db    4
.data:000000000020C0C5                 db    0
.data:000000000020C0C6                 db    0
.data:000000000020C0C7                 db    0
.data:000000000020C0C8                 db  49h ; I
.data:000000000020C0C9                 db  4Ch ; L
.data:000000000020C0CA                 db  4Ch ; L
.data:000000000020C0CB                 db    0
.data:000000000020C0CC                 db    0
.data:000000000020C0CD                 db    0
.data:000000000020C0CE                 db    0
.data:000000000020C0CF                 db    0
.data:000000000020C0D0                 db    5
.data:000000000020C0D1                 db    0
.data:000000000020C0D2                 db    0
.data:000000000020C0D3                 db    0
.data:000000000020C0D4                 db  54h ; T
.data:000000000020C0D5                 db  52h ; R
.data:000000000020C0D6                 db  41h ; A
.data:000000000020C0D7                 db  50h ; P
.data:000000000020C0D8                 db    0
.data:000000000020C0D9                 db    0
.data:000000000020C0DA                 db    0
.data:000000000020C0DB                 db    0
.data:000000000020C0DC                 db    6
.data:000000000020C0DD                 db    0
.data:000000000020C0DE                 db    0
.data:000000000020C0DF                 db    0
.data:000000000020C0E0                 db  41h ; A
.data:000000000020C0E1                 db  42h ; B
.data:000000000020C0E2                 db  52h ; R
.data:000000000020C0E3                 db  54h ; T
.data:000000000020C0E4                 db    0
.data:000000000020C0E5                 db    0
.data:000000000020C0E6                 db    0
.data:000000000020C0E7                 db    0
.data:000000000020C0E8                 db    8
.data:000000000020C0E9                 db    0
.data:000000000020C0EA                 db    0
.data:000000000020C0EB                 db    0
.data:000000000020C0EC                 db  46h ; F
.data:000000000020C0ED                 db  50h ; P
.data:000000000020C0EE                 db  45h ; E
.data:000000000020C0EF                 db    0
.data:000000000020C0F0                 db    0
.data:000000000020C0F1                 db    0
.data:000000000020C0F2                 db    0
.data:000000000020C0F3                 db    0
.data:000000000020C0F4                 db    9
.data:000000000020C0F5                 db    0
.data:000000000020C0F6                 db    0
.data:000000000020C0F7                 db    0
.data:000000000020C0F8                 db  4Bh ; K
.data:000000000020C0F9                 db  49h ; I
.data:000000000020C0FA                 db  4Ch ; L
.data:000000000020C0FB                 db  4Ch ; L
.data:000000000020C0FC                 db    0
.data:000000000020C0FD                 db    0
.data:000000000020C0FE                 db    0
.data:000000000020C0FF                 db    0
.data:000000000020C100                 db  0Bh
.data:000000000020C101                 db    0
.data:000000000020C102                 db    0
.data:000000000020C103                 db    0
.data:000000000020C104                 db  53h ; S
.data:000000000020C105                 db  45h ; E
.data:000000000020C106                 db  47h ; G
.data:000000000020C107                 db  56h ; V
.data:000000000020C108                 db    0
.data:000000000020C109                 db    0
.data:000000000020C10A                 db    0
.data:000000000020C10B                 db    0
.data:000000000020C10C                 db    7
.data:000000000020C10D                 db    0
.data:000000000020C10E                 db    0
.data:000000000020C10F                 db    0
.data:000000000020C110                 db  42h ; B
.data:000000000020C111                 db  55h ; U
.data:000000000020C112                 db  53h ; S
.data:000000000020C113                 db    0
.data:000000000020C114                 db    0
.data:000000000020C115                 db    0
.data:000000000020C116                 db    0
.data:000000000020C117                 db    0
.data:000000000020C118                 db  0Dh
.data:000000000020C119                 db    0
.data:000000000020C11A                 db    0
.data:000000000020C11B                 db    0
.data:000000000020C11C                 db  50h ; P
.data:000000000020C11D                 db  49h ; I
.data:000000000020C11E                 db  50h ; P
.data:000000000020C11F                 db  45h ; E
.data:000000000020C120                 db    0
.data:000000000020C121                 db    0
.data:000000000020C122                 db    0
.data:000000000020C123                 db    0
.data:000000000020C124                 db  0Eh
.data:000000000020C125                 db    0
.data:000000000020C126                 db    0
.data:000000000020C127                 db    0
.data:000000000020C128                 db  41h ; A
.data:000000000020C129                 db  4Ch ; L
.data:000000000020C12A                 db  52h ; R
.data:000000000020C12B                 db  4Dh ; M
.data:000000000020C12C                 db    0
.data:000000000020C12D                 db    0
.data:000000000020C12E                 db    0
.data:000000000020C12F                 db    0
.data:000000000020C130                 db  0Fh
.data:000000000020C131                 db    0
.data:000000000020C132                 db    0
.data:000000000020C133                 db    0
.data:000000000020C134                 db  54h ; T
.data:000000000020C135                 db  45h ; E
.data:000000000020C136                 db  52h ; R
.data:000000000020C137                 db  4Dh ; M
.data:000000000020C138                 db    0
.data:000000000020C139                 db    0
.data:000000000020C13A                 db    0
.data:000000000020C13B                 db    0
.data:000000000020C13C                 db  0Ah
.data:000000000020C13D                 db    0
.data:000000000020C13E                 db    0
.data:000000000020C13F                 db    0
.data:000000000020C140                 db  55h ; U
.data:000000000020C141                 db  53h ; S
.data:000000000020C142                 db  52h ; R
.data:000000000020C143                 db  31h ; 1
.data:000000000020C144                 db    0
.data:000000000020C145                 db    0
.data:000000000020C146                 db    0
.data:000000000020C147                 db    0
.data:000000000020C148                 db  0Ch
.data:000000000020C149                 db    0
.data:000000000020C14A                 db    0
.data:000000000020C14B                 db    0
.data:000000000020C14C                 db  55h ; U
.data:000000000020C14D                 db  53h ; S
.data:000000000020C14E                 db  52h ; R
.data:000000000020C14F                 db  32h ; 2
.data:000000000020C150                 db    0
.data:000000000020C151                 db    0
.data:000000000020C152                 db    0
.data:000000000020C153                 db    0
.data:000000000020C154                 db  11h
.data:000000000020C155                 db    0
.data:000000000020C156                 db    0
.data:000000000020C157                 db    0
.data:000000000020C158                 db  43h ; C
.data:000000000020C159                 db  48h ; H
.data:000000000020C15A                 db  4Ch ; L
.data:000000000020C15B                 db  44h ; D
.data:000000000020C15C                 db    0
.data:000000000020C15D                 db    0
.data:000000000020C15E                 db    0
.data:000000000020C15F                 db    0
.data:000000000020C160                 db  17h
.data:000000000020C161                 db    0
.data:000000000020C162                 db    0
.data:000000000020C163                 db    0
.data:000000000020C164                 db  55h ; U
.data:000000000020C165                 db  52h ; R
.data:000000000020C166                 db  47h ; G
.data:000000000020C167                 db    0
.data:000000000020C168                 db    0
.data:000000000020C169                 db    0
.data:000000000020C16A                 db    0
.data:000000000020C16B                 db    0
.data:000000000020C16C                 db  13h
.data:000000000020C16D                 db    0
.data:000000000020C16E                 db    0
.data:000000000020C16F                 db    0
.data:000000000020C170                 db  53h ; S
.data:000000000020C171                 db  54h ; T
.data:000000000020C172                 db  4Fh ; O
.data:000000000020C173                 db  50h ; P
.data:000000000020C174                 db    0
.data:000000000020C175                 db    0
.data:000000000020C176                 db    0
.data:000000000020C177                 db    0
.data:000000000020C178                 db  14h
.data:000000000020C179                 db    0
.data:000000000020C17A                 db    0
.data:000000000020C17B                 db    0
.data:000000000020C17C                 db  54h ; T
.data:000000000020C17D                 db  53h ; S
.data:000000000020C17E                 db  54h ; T
.data:000000000020C17F                 db  50h ; P
.data:000000000020C180                 db    0
.data:000000000020C181                 db    0
.data:000000000020C182                 db    0
.data:000000000020C183                 db    0
.data:000000000020C184                 db  12h
.data:000000000020C185                 db    0
.data:000000000020C186                 db    0
.data:000000000020C187                 db    0
.data:000000000020C188                 db  43h ; C
.data:000000000020C189                 db  4Fh ; O
.data:000000000020C18A                 db  4Eh ; N
.data:000000000020C18B                 db  54h ; T
.data:000000000020C18C                 db    0
.data:000000000020C18D                 db    0
.data:000000000020C18E                 db    0
.data:000000000020C18F                 db    0
.data:000000000020C190                 db  15h
.data:000000000020C191                 db    0
.data:000000000020C192                 db    0
.data:000000000020C193                 db    0
.data:000000000020C194                 db  54h ; T
.data:000000000020C195                 db  54h ; T
.data:000000000020C196                 db  49h ; I
.data:000000000020C197                 db  4Eh ; N
.data:000000000020C198                 db    0
.data:000000000020C199                 db    0
.data:000000000020C19A                 db    0
.data:000000000020C19B                 db    0
.data:000000000020C19C                 db  16h
.data:000000000020C19D                 db    0
.data:000000000020C19E                 db    0
.data:000000000020C19F                 db    0
.data:000000000020C1A0                 db  54h ; T
.data:000000000020C1A1                 db  54h ; T
.data:000000000020C1A2                 db  4Fh ; O
.data:000000000020C1A3                 db  55h ; U
.data:000000000020C1A4                 db    0
.data:000000000020C1A5                 db    0
.data:000000000020C1A6                 db    0
.data:000000000020C1A7                 db    0
.data:000000000020C1A8                 db  1Fh
.data:000000000020C1A9                 db    0
.data:000000000020C1AA                 db    0
.data:000000000020C1AB                 db    0
.data:000000000020C1AC                 db  53h ; S
.data:000000000020C1AD                 db  59h ; Y
.data:000000000020C1AE                 db  53h ; S
.data:000000000020C1AF                 db    0
.data:000000000020C1B0                 db    0
.data:000000000020C1B1                 db    0
.data:000000000020C1B2                 db    0
.data:000000000020C1B3                 db    0
.data:000000000020C1B4                 db  1Dh
.data:000000000020C1B5                 db    0
.data:000000000020C1B6                 db    0
.data:000000000020C1B7                 db    0
.data:000000000020C1B8                 db  50h ; P
.data:000000000020C1B9                 db  4Fh ; O
.data:000000000020C1BA                 db  4Ch ; L
.data:000000000020C1BB                 db  4Ch ; L
.data:000000000020C1BC                 db    0
.data:000000000020C1BD                 db    0
.data:000000000020C1BE                 db    0
.data:000000000020C1BF                 db    0
.data:000000000020C1C0                 db  1Ah
.data:000000000020C1C1                 db    0
.data:000000000020C1C2                 db    0
.data:000000000020C1C3                 db    0
.data:000000000020C1C4                 db  56h ; V
.data:000000000020C1C5                 db  54h ; T
.data:000000000020C1C6                 db  41h ; A
.data:000000000020C1C7                 db  4Ch ; L
.data:000000000020C1C8                 db  52h ; R
.data:000000000020C1C9                 db  4Dh ; M
.data:000000000020C1CA                 db    0
.data:000000000020C1CB                 db    0
.data:000000000020C1CC                 db  1Bh
.data:000000000020C1CD                 db    0
.data:000000000020C1CE                 db    0
.data:000000000020C1CF                 db    0
.data:000000000020C1D0                 db  50h ; P
.data:000000000020C1D1                 db  52h ; R
.data:000000000020C1D2                 db  4Fh ; O
.data:000000000020C1D3                 db  46h ; F
.data:000000000020C1D4                 db    0
.data:000000000020C1D5                 db    0
.data:000000000020C1D6                 db    0
.data:000000000020C1D7                 db    0
.data:000000000020C1D8                 db  18h
.data:000000000020C1D9                 db    0
.data:000000000020C1DA                 db    0
.data:000000000020C1DB                 db    0
.data:000000000020C1DC                 db  58h ; X
.data:000000000020C1DD                 db  43h ; C
.data:000000000020C1DE                 db  50h ; P
.data:000000000020C1DF                 db  55h ; U
.data:000000000020C1E0                 db    0
.data:000000000020C1E1                 db    0
.data:000000000020C1E2                 db    0
.data:000000000020C1E3                 db    0
.data:000000000020C1E4                 db  19h
.data:000000000020C1E5                 db    0
.data:000000000020C1E6                 db    0
.data:000000000020C1E7                 db    0
.data:000000000020C1E8                 db  58h ; X
.data:000000000020C1E9                 db  46h ; F
.data:000000000020C1EA                 db  53h ; S
.data:000000000020C1EB                 db  5Ah ; Z
.data:000000000020C1EC                 db    0
.data:000000000020C1ED                 db    0
.data:000000000020C1EE                 db    0
.data:000000000020C1EF                 db    0
.data:000000000020C1F0                 db    6
.data:000000000020C1F1                 db    0
.data:000000000020C1F2                 db    0
.data:000000000020C1F3                 db    0
.data:000000000020C1F4                 db  49h ; I
.data:000000000020C1F5                 db  4Fh ; O
.data:000000000020C1F6                 db  54h ; T
.data:000000000020C1F7                 db    0
.data:000000000020C1F8                 db    0
.data:000000000020C1F9                 db    0
.data:000000000020C1FA                 db    0
.data:000000000020C1FB                 db    0
.data:000000000020C1FC                 db  11h
.data:000000000020C1FD                 db    0
.data:000000000020C1FE                 db    0
.data:000000000020C1FF                 db    0
.data:000000000020C200                 db  43h ; C
.data:000000000020C201                 db  4Ch ; L
.data:000000000020C202                 db  44h ; D
.data:000000000020C203                 db    0
.data:000000000020C204                 db    0
.data:000000000020C205                 db    0
.data:000000000020C206                 db    0
.data:000000000020C207                 db    0
.data:000000000020C208                 db  1Eh
.data:000000000020C209                 db    0
.data:000000000020C20A                 db    0
.data:000000000020C20B                 db    0
.data:000000000020C20C                 db  50h ; P
.data:000000000020C20D                 db  57h ; W
.data:000000000020C20E                 db  52h ; R
.data:000000000020C20F                 db    0
.data:000000000020C210                 db    0
.data:000000000020C211                 db    0
.data:000000000020C212                 db    0
.data:000000000020C213                 db    0
.data:000000000020C214                 db  1Ch
.data:000000000020C215                 db    0
.data:000000000020C216                 db    0
.data:000000000020C217                 db    0
.data:000000000020C218                 db  57h ; W
.data:000000000020C219                 db  49h ; I
.data:000000000020C21A                 db  4Eh ; N
.data:000000000020C21B                 db  43h ; C
.data:000000000020C21C                 db  48h ; H
.data:000000000020C21D                 db    0
.data:000000000020C21E                 db    0
.data:000000000020C21F                 db    0
.data:000000000020C220                 db  1Dh
.data:000000000020C221                 db    0
.data:000000000020C222                 db    0
.data:000000000020C223                 db    0
.data:000000000020C224                 db  49h ; I
.data:000000000020C225                 db  4Fh ; O
.data:000000000020C226                 db    0
.data:000000000020C227                 db    0
.data:000000000020C228                 db    0
.data:000000000020C229                 db    0
.data:000000000020C22A                 db    0
.data:000000000020C22B                 db    0
.data:000000000020C22C                 db  10h
.data:000000000020C22D                 db    0
.data:000000000020C22E                 db    0
.data:000000000020C22F                 db    0
.data:000000000020C230                 db  53h ; S
.data:000000000020C231                 db  54h ; T
.data:000000000020C232                 db  4Bh ; K
.data:000000000020C233                 db  46h ; F
.data:000000000020C234                 db  4Ch ; L
.data:000000000020C235                 db  54h ; T
.data:000000000020C236                 db    0
.data:000000000020C237                 db    0
.data:000000000020C238                 db    0
.data:000000000020C239                 db    0
.data:000000000020C23A                 db    0
.data:000000000020C23B                 db    0
.data:000000000020C23C                 db  45h ; E
.data:000000000020C23D                 db  58h ; X
.data:000000000020C23E                 db  49h ; I
.data:000000000020C23F                 db  54h ; T
.data:000000000020C240                 db    0
.data:000000000020C241                 db    0
.data:000000000020C242                 db    0
.data:000000000020C243                 db    0
.data:000000000020C243 _data           ends
.data:000000000020C243
LOAD:000000000020C244 ; ===========================================================================
LOAD:000000000020C244
LOAD:000000000020C244 ; Segment type: Pure data
LOAD:000000000020C244 ; Segment permissions: Read/Write
LOAD:000000000020C244 LOAD            segment byte public 'DATA' use64
LOAD:000000000020C244                 assume cs:LOAD
LOAD:000000000020C244                 ;org 20C244h
LOAD:000000000020C244                 public __bss_start
LOAD:000000000020C244 __bss_start     db    ? ;               ; Alternative name is '__bss_start'
LOAD:000000000020C244                                         ; _edata
LOAD:000000000020C245                 db    ? ;
LOAD:000000000020C246                 db    ? ;
LOAD:000000000020C247                 db    ? ;
LOAD:000000000020C248                 public __TMC_END__
LOAD:000000000020C248 __TMC_END__     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:000000000020C248                                         ; deregister_tm_clones+8↑o ...
LOAD:000000000020C249                 db    ? ;
LOAD:000000000020C24A                 db    ? ;
LOAD:000000000020C24B                 db    ? ;
LOAD:000000000020C24C                 db    ? ;
LOAD:000000000020C24D                 db    ? ;
LOAD:000000000020C24E                 db    ? ;
LOAD:000000000020C24F                 db    ? ;
LOAD:000000000020C250                 db    ? ;
LOAD:000000000020C251                 db    ? ;
LOAD:000000000020C252                 db    ? ;
LOAD:000000000020C253                 db    ? ;
LOAD:000000000020C254                 db    ? ;
LOAD:000000000020C255                 db    ? ;
LOAD:000000000020C256                 db    ? ;
LOAD:000000000020C257                 db    ? ;
LOAD:000000000020C258                 db    ? ;
LOAD:000000000020C259                 db    ? ;
LOAD:000000000020C25A                 db    ? ;
LOAD:000000000020C25B                 db    ? ;
LOAD:000000000020C25C                 db    ? ;
LOAD:000000000020C25D                 db    ? ;
LOAD:000000000020C25E                 db    ? ;
LOAD:000000000020C25F                 db    ? ;
LOAD:000000000020C25F LOAD            ends
LOAD:000000000020C25F
.bss:000000000020C260 ; ===========================================================================
.bss:000000000020C260
.bss:000000000020C260 ; Segment type: Uninitialized
.bss:000000000020C260 ; Segment permissions: Read/Write
.bss:000000000020C260 _bss            segment align_32 public 'BSS' use64
.bss:000000000020C260                 assume cs:_bss
.bss:000000000020C260                 ;org 20C260h
.bss:000000000020C260                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020C260                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:000000000020C260 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:000000000020C260                                         ; DATA XREF: LOAD:0000000000000A78↑o
.bss:000000000020C260                                         ; LOAD:0000000000000AC0↑o ...
.bss:000000000020C260                                         ; Alternative name is '__progname'
.bss:000000000020C260                                         ; Copy of shared data
.bss:000000000020C268                 public stdout@@GLIBC_2_2_5
.bss:000000000020C268 ; FILE *stdout
.bss:000000000020C268 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:000000000020C268                                         ; main+21C↑r ...
.bss:000000000020C268                                         ; Alternative name is 'stdout'
.bss:000000000020C268                                         ; Copy of shared data
.bss:000000000020C270                 public optind@@GLIBC_2_2_5
.bss:000000000020C270 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AF0↑o
.bss:000000000020C270                                         ; main:loc_2098↑r ...
.bss:000000000020C270                                         ; Alternative name is 'optind'
.bss:000000000020C270                                         ; Copy of shared data
.bss:000000000020C274                 align 8
.bss:000000000020C278                 public optarg@@GLIBC_2_2_5
.bss:000000000020C278 ; char *optarg
.bss:000000000020C278 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B08↑o
.bss:000000000020C278                                         ; main+183↑r ...
.bss:000000000020C278                                         ; Alternative name is 'optarg'
.bss:000000000020C278                                         ; Copy of shared data
.bss:000000000020C280                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020C280 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020C280                                         ; DATA XREF: LOAD:0000000000000A90↑o
.bss:000000000020C280                                         ; LOAD:0000000000000AA8↑o ...
.bss:000000000020C280                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020C280                                         ; Copy of shared data
.bss:000000000020C288                 align 20h
.bss:000000000020C2A0                 public stderr@@GLIBC_2_2_5
.bss:000000000020C2A0 ; FILE *stderr
.bss:000000000020C2A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AD8↑o
.bss:000000000020C2A0                                         ; usage+3D↑r ...
.bss:000000000020C2A0                                         ; Alternative name is 'stderr'
.bss:000000000020C2A0                                         ; Copy of shared data
.bss:000000000020C2A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020C2A8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020C2A9                 align 20h
.bss:000000000020C2C0 ; void *sufindex_7081
.bss:000000000020C2C0 sufindex_7081   dq ?                    ; DATA XREF: next_file_name+2A↑r
.bss:000000000020C2C0                                         ; next_file_name+12A↑r ...
.bss:000000000020C2C8 ; size_t addsuf_length_7084
.bss:000000000020C2C8 addsuf_length_7084 dq ?                 ; DATA XREF: next_file_name+DA↑w
.bss:000000000020C2C8                                         ; next_file_name+15D↑r
.bss:000000000020C2D0 ; size_t outbase_length_7082
.bss:000000000020C2D0 outbase_length_7082 dq ?                ; DATA XREF: next_file_name+C2↑w
.bss:000000000020C2D0                                         ; next_file_name+100↑r ...
.bss:000000000020C2D8 outfile_length_7083 dq ?                ; DATA XREF: next_file_name:loc_3EBC↑r
.bss:000000000020C2D8                                         ; next_file_name+E4↑w ...
.bss:000000000020C2E0 unbuffered      db ?                    ; DATA XREF: main+12D↑w
.bss:000000000020C2E0                                         ; main+125E↑r ...
.bss:000000000020C2E1 elide_empty_files db ?                  ; DATA XREF: main:loc_2240↑w
.bss:000000000020C2E1                                         ; main+1566↑r ...
.bss:000000000020C2E2 verbose         db ?                    ; DATA XREF: main+57A↑w
.bss:000000000020C2E2                                         ; create+68↑r ...
.bss:000000000020C2E3                 align 20h
.bss:000000000020C300 ; struct stat in_stat_buf
.bss:000000000020C300 in_stat_buf     stat <?>                ; DATA XREF: main:loc_27A1↑o
.bss:000000000020C300                                         ; create+23C↑r ...
.bss:000000000020C390 ; char *infile
.bss:000000000020C390 infile          dq ?                    ; DATA XREF: main+A0↑w
.bss:000000000020C390                                         ; main+734↑w ...
.bss:000000000020C398 ; char *additional_suffix
.bss:000000000020C398 additional_suffix dq ?                  ; DATA XREF: main+1F7↑w
.bss:000000000020C398                                         ; next_file_name+B8↑r ...
.bss:000000000020C3A0 ; char *numeric_suffix_start
.bss:000000000020C3A0 numeric_suffix_start dq ?               ; DATA XREF: main:loc_2640↑w
.bss:000000000020C3A0                                         ; main:loc_26A5↑r ...
.bss:000000000020C3A8 ; size_t suffix_length
.bss:000000000020C3A8 suffix_length   dq ?                    ; DATA XREF: main+518↑w
.bss:000000000020C3A8                                         ; main+6EE↑r ...
.bss:000000000020C3B0 outfile_mid     dq ?                    ; DATA XREF: next_file_name+40↑r
.bss:000000000020C3B0                                         ; next_file_name+142↑w ...
.bss:000000000020C3B8 ; char *outfile
.bss:000000000020C3B8 outfile         dq ?                    ; DATA XREF: main+F45↑r
.bss:000000000020C3B8                                         ; main+1137↑r ...
.bss:000000000020C3C0 ; char *outbase
.bss:000000000020C3C0 outbase         dq ?                    ; DATA XREF: main+AE↑w
.bss:000000000020C3C0                                         ; main+74D↑w ...
.bss:000000000020C3C8                 align 20h
.bss:000000000020C3E0 ; sigset_t newblocked
.bss:000000000020C3E0 newblocked      sigset_t <?>            ; DATA XREF: main+85B↑o
.bss:000000000020C3E0                                         ; main+886↑o ...
.bss:000000000020C460 ; sigset_t oldblocked
.bss:000000000020C460 oldblocked      sigset_t <?>            ; DATA XREF: main:loc_2877↑o
.bss:000000000020C460                                         ; create:loc_426F↑o
.bss:000000000020C4E0 n_open_pipes    dq ?                    ; DATA XREF: create+A9↑r
.bss:000000000020C4E0                                         ; create+CE↑w ...
.bss:000000000020C4E8 open_pipes_alloc dq ?                   ; DATA XREF: create+B0↑r
.bss:000000000020C4E8                                         ; create+38F↑w
.bss:000000000020C4F0 open_pipes      dq ?                    ; DATA XREF: create+BD↑r
.bss:000000000020C4F0                                         ; create:loc_4208↑r ...
.bss:000000000020C4F8 filter_pid      dd ?                    ; DATA XREF: main+F4C↑r
.bss:000000000020C4F8                                         ; create+B7↑w ...
.bss:000000000020C4FC                 align 20h
.bss:000000000020C500 filter_command  dq ?                    ; DATA XREF: main+597↑w
.bss:000000000020C500                                         ; main+690↑r ...
.bss:000000000020C508 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020C508                                         ; close_stdout+1B↑r
.bss:000000000020C509                 align 10h
.bss:000000000020C510 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020C510                                         ; close_stdout+56↑r
.bss:000000000020C518                 public program_name
.bss:000000000020C518 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020C518                                         ; set_program_name:loc_567D↑w
.bss:000000000020C520 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020C520                                         ; quotearg_free+46↑o ...
.bss:000000000020C521                 db    ? ;
.bss:000000000020C522                 db    ? ;
.bss:000000000020C523                 db    ? ;
.bss:000000000020C524                 db    ? ;
.bss:000000000020C525                 db    ? ;
.bss:000000000020C526                 db    ? ;
.bss:000000000020C527                 db    ? ;
.bss:000000000020C528                 db    ? ;
.bss:000000000020C529                 db    ? ;
.bss:000000000020C52A                 db    ? ;
.bss:000000000020C52B                 db    ? ;
.bss:000000000020C52C                 db    ? ;
.bss:000000000020C52D                 db    ? ;
.bss:000000000020C52E                 db    ? ;
.bss:000000000020C52F                 db    ? ;
.bss:000000000020C530                 db    ? ;
.bss:000000000020C531                 db    ? ;
.bss:000000000020C532                 db    ? ;
.bss:000000000020C533                 db    ? ;
.bss:000000000020C534                 db    ? ;
.bss:000000000020C535                 db    ? ;
.bss:000000000020C536                 db    ? ;
.bss:000000000020C537                 db    ? ;
.bss:000000000020C538                 db    ? ;
.bss:000000000020C539                 db    ? ;
.bss:000000000020C53A                 db    ? ;
.bss:000000000020C53B                 db    ? ;
.bss:000000000020C53C                 db    ? ;
.bss:000000000020C53D                 db    ? ;
.bss:000000000020C53E                 db    ? ;
.bss:000000000020C53F                 db    ? ;
.bss:000000000020C540                 db    ? ;
.bss:000000000020C541                 db    ? ;
.bss:000000000020C542                 db    ? ;
.bss:000000000020C543                 db    ? ;
.bss:000000000020C544                 db    ? ;
.bss:000000000020C545                 db    ? ;
.bss:000000000020C546                 db    ? ;
.bss:000000000020C547                 db    ? ;
.bss:000000000020C548                 db    ? ;
.bss:000000000020C549                 db    ? ;
.bss:000000000020C54A                 db    ? ;
.bss:000000000020C54B                 db    ? ;
.bss:000000000020C54C                 db    ? ;
.bss:000000000020C54D                 db    ? ;
.bss:000000000020C54E                 db    ? ;
.bss:000000000020C54F                 db    ? ;
.bss:000000000020C550                 db    ? ;
.bss:000000000020C551                 db    ? ;
.bss:000000000020C552                 db    ? ;
.bss:000000000020C553                 db    ? ;
.bss:000000000020C554                 db    ? ;
.bss:000000000020C555                 db    ? ;
.bss:000000000020C556                 db    ? ;
.bss:000000000020C557                 db    ? ;
.bss:000000000020C558                 db    ? ;
.bss:000000000020C559                 db    ? ;
.bss:000000000020C55A                 db    ? ;
.bss:000000000020C55B                 db    ? ;
.bss:000000000020C55C                 db    ? ;
.bss:000000000020C55D                 db    ? ;
.bss:000000000020C55E                 db    ? ;
.bss:000000000020C55F                 db    ? ;
.bss:000000000020C560                 db    ? ;
.bss:000000000020C561                 db    ? ;
.bss:000000000020C562                 db    ? ;
.bss:000000000020C563                 db    ? ;
.bss:000000000020C564                 db    ? ;
.bss:000000000020C565                 db    ? ;
.bss:000000000020C566                 db    ? ;
.bss:000000000020C567                 db    ? ;
.bss:000000000020C568                 db    ? ;
.bss:000000000020C569                 db    ? ;
.bss:000000000020C56A                 db    ? ;
.bss:000000000020C56B                 db    ? ;
.bss:000000000020C56C                 db    ? ;
.bss:000000000020C56D                 db    ? ;
.bss:000000000020C56E                 db    ? ;
.bss:000000000020C56F                 db    ? ;
.bss:000000000020C570                 db    ? ;
.bss:000000000020C571                 db    ? ;
.bss:000000000020C572                 db    ? ;
.bss:000000000020C573                 db    ? ;
.bss:000000000020C574                 db    ? ;
.bss:000000000020C575                 db    ? ;
.bss:000000000020C576                 db    ? ;
.bss:000000000020C577                 db    ? ;
.bss:000000000020C578                 db    ? ;
.bss:000000000020C579                 db    ? ;
.bss:000000000020C57A                 db    ? ;
.bss:000000000020C57B                 db    ? ;
.bss:000000000020C57C                 db    ? ;
.bss:000000000020C57D                 db    ? ;
.bss:000000000020C57E                 db    ? ;
.bss:000000000020C57F                 db    ? ;
.bss:000000000020C580                 db    ? ;
.bss:000000000020C581                 db    ? ;
.bss:000000000020C582                 db    ? ;
.bss:000000000020C583                 db    ? ;
.bss:000000000020C584                 db    ? ;
.bss:000000000020C585                 db    ? ;
.bss:000000000020C586                 db    ? ;
.bss:000000000020C587                 db    ? ;
.bss:000000000020C588                 db    ? ;
.bss:000000000020C589                 db    ? ;
.bss:000000000020C58A                 db    ? ;
.bss:000000000020C58B                 db    ? ;
.bss:000000000020C58C                 db    ? ;
.bss:000000000020C58D                 db    ? ;
.bss:000000000020C58E                 db    ? ;
.bss:000000000020C58F                 db    ? ;
.bss:000000000020C590                 db    ? ;
.bss:000000000020C591                 db    ? ;
.bss:000000000020C592                 db    ? ;
.bss:000000000020C593                 db    ? ;
.bss:000000000020C594                 db    ? ;
.bss:000000000020C595                 db    ? ;
.bss:000000000020C596                 db    ? ;
.bss:000000000020C597                 db    ? ;
.bss:000000000020C598                 db    ? ;
.bss:000000000020C599                 db    ? ;
.bss:000000000020C59A                 db    ? ;
.bss:000000000020C59B                 db    ? ;
.bss:000000000020C59C                 db    ? ;
.bss:000000000020C59D                 db    ? ;
.bss:000000000020C59E                 db    ? ;
.bss:000000000020C59F                 db    ? ;
.bss:000000000020C5A0                 db    ? ;
.bss:000000000020C5A1                 db    ? ;
.bss:000000000020C5A2                 db    ? ;
.bss:000000000020C5A3                 db    ? ;
.bss:000000000020C5A4                 db    ? ;
.bss:000000000020C5A5                 db    ? ;
.bss:000000000020C5A6                 db    ? ;
.bss:000000000020C5A7                 db    ? ;
.bss:000000000020C5A8                 db    ? ;
.bss:000000000020C5A9                 db    ? ;
.bss:000000000020C5AA                 db    ? ;
.bss:000000000020C5AB                 db    ? ;
.bss:000000000020C5AC                 db    ? ;
.bss:000000000020C5AD                 db    ? ;
.bss:000000000020C5AE                 db    ? ;
.bss:000000000020C5AF                 db    ? ;
.bss:000000000020C5B0                 db    ? ;
.bss:000000000020C5B1                 db    ? ;
.bss:000000000020C5B2                 db    ? ;
.bss:000000000020C5B3                 db    ? ;
.bss:000000000020C5B4                 db    ? ;
.bss:000000000020C5B5                 db    ? ;
.bss:000000000020C5B6                 db    ? ;
.bss:000000000020C5B7                 db    ? ;
.bss:000000000020C5B8                 db    ? ;
.bss:000000000020C5B9                 db    ? ;
.bss:000000000020C5BA                 db    ? ;
.bss:000000000020C5BB                 db    ? ;
.bss:000000000020C5BC                 db    ? ;
.bss:000000000020C5BD                 db    ? ;
.bss:000000000020C5BE                 db    ? ;
.bss:000000000020C5BF                 db    ? ;
.bss:000000000020C5C0                 db    ? ;
.bss:000000000020C5C1                 db    ? ;
.bss:000000000020C5C2                 db    ? ;
.bss:000000000020C5C3                 db    ? ;
.bss:000000000020C5C4                 db    ? ;
.bss:000000000020C5C5                 db    ? ;
.bss:000000000020C5C6                 db    ? ;
.bss:000000000020C5C7                 db    ? ;
.bss:000000000020C5C8                 db    ? ;
.bss:000000000020C5C9                 db    ? ;
.bss:000000000020C5CA                 db    ? ;
.bss:000000000020C5CB                 db    ? ;
.bss:000000000020C5CC                 db    ? ;
.bss:000000000020C5CD                 db    ? ;
.bss:000000000020C5CE                 db    ? ;
.bss:000000000020C5CF                 db    ? ;
.bss:000000000020C5D0                 db    ? ;
.bss:000000000020C5D1                 db    ? ;
.bss:000000000020C5D2                 db    ? ;
.bss:000000000020C5D3                 db    ? ;
.bss:000000000020C5D4                 db    ? ;
.bss:000000000020C5D5                 db    ? ;
.bss:000000000020C5D6                 db    ? ;
.bss:000000000020C5D7                 db    ? ;
.bss:000000000020C5D8                 db    ? ;
.bss:000000000020C5D9                 db    ? ;
.bss:000000000020C5DA                 db    ? ;
.bss:000000000020C5DB                 db    ? ;
.bss:000000000020C5DC                 db    ? ;
.bss:000000000020C5DD                 db    ? ;
.bss:000000000020C5DE                 db    ? ;
.bss:000000000020C5DF                 db    ? ;
.bss:000000000020C5E0                 db    ? ;
.bss:000000000020C5E1                 db    ? ;
.bss:000000000020C5E2                 db    ? ;
.bss:000000000020C5E3                 db    ? ;
.bss:000000000020C5E4                 db    ? ;
.bss:000000000020C5E5                 db    ? ;
.bss:000000000020C5E6                 db    ? ;
.bss:000000000020C5E7                 db    ? ;
.bss:000000000020C5E8                 db    ? ;
.bss:000000000020C5E9                 db    ? ;
.bss:000000000020C5EA                 db    ? ;
.bss:000000000020C5EB                 db    ? ;
.bss:000000000020C5EC                 db    ? ;
.bss:000000000020C5ED                 db    ? ;
.bss:000000000020C5EE                 db    ? ;
.bss:000000000020C5EF                 db    ? ;
.bss:000000000020C5F0                 db    ? ;
.bss:000000000020C5F1                 db    ? ;
.bss:000000000020C5F2                 db    ? ;
.bss:000000000020C5F3                 db    ? ;
.bss:000000000020C5F4                 db    ? ;
.bss:000000000020C5F5                 db    ? ;
.bss:000000000020C5F6                 db    ? ;
.bss:000000000020C5F7                 db    ? ;
.bss:000000000020C5F8                 db    ? ;
.bss:000000000020C5F9                 db    ? ;
.bss:000000000020C5FA                 db    ? ;
.bss:000000000020C5FB                 db    ? ;
.bss:000000000020C5FC                 db    ? ;
.bss:000000000020C5FD                 db    ? ;
.bss:000000000020C5FE                 db    ? ;
.bss:000000000020C5FF                 db    ? ;
.bss:000000000020C600                 db    ? ;
.bss:000000000020C601                 db    ? ;
.bss:000000000020C602                 db    ? ;
.bss:000000000020C603                 db    ? ;
.bss:000000000020C604                 db    ? ;
.bss:000000000020C605                 db    ? ;
.bss:000000000020C606                 db    ? ;
.bss:000000000020C607                 db    ? ;
.bss:000000000020C608                 db    ? ;
.bss:000000000020C609                 db    ? ;
.bss:000000000020C60A                 db    ? ;
.bss:000000000020C60B                 db    ? ;
.bss:000000000020C60C                 db    ? ;
.bss:000000000020C60D                 db    ? ;
.bss:000000000020C60E                 db    ? ;
.bss:000000000020C60F                 db    ? ;
.bss:000000000020C610                 db    ? ;
.bss:000000000020C611                 db    ? ;
.bss:000000000020C612                 db    ? ;
.bss:000000000020C613                 db    ? ;
.bss:000000000020C614                 db    ? ;
.bss:000000000020C615                 db    ? ;
.bss:000000000020C616                 db    ? ;
.bss:000000000020C617                 db    ? ;
.bss:000000000020C618                 db    ? ;
.bss:000000000020C619                 db    ? ;
.bss:000000000020C61A                 db    ? ;
.bss:000000000020C61B                 db    ? ;
.bss:000000000020C61C                 db    ? ;
.bss:000000000020C61D                 db    ? ;
.bss:000000000020C61E                 db    ? ;
.bss:000000000020C61F                 db    ? ;
.bss:000000000020C620 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020C620                                         ; get_quoting_style↑o ...
.bss:000000000020C630 xmmword_20C630  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020C630                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020C640 xmmword_20C640  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020C640                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020C650 qword_20C650    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020C650                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020C658 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020C658                                         ; rpl_fcntl:loc_881F↑w ...
.bss:000000000020C65C                 align 20h
.bss:000000000020C65C _bss            ends
.bss:000000000020C65C
.prgend:000000000020C660 ; ===========================================================================
.prgend:000000000020C660
.prgend:000000000020C660 ; Segment type: Zero-length
.prgend:000000000020C660 _prgend         segment byte public '' use64
.prgend:000000000020C660 _end            label byte
.prgend:000000000020C660 _prgend         ends
.prgend:000000000020C660
extern:000000000020C668 ; ===========================================================================
extern:000000000020C668
extern:000000000020C668 ; Segment type: Externs
extern:000000000020C668 ; extern
extern:000000000020C668 ; char *getenv(const char *name)
extern:000000000020C668                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020C668                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020C670 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
extern:000000000020C670                 extrn sigprocmask:near  ; CODE XREF: _sigprocmask↑j
extern:000000000020C670                                         ; DATA XREF: .got:sigprocmask_ptr↑o
extern:000000000020C678 ; void free(void *ptr)
extern:000000000020C678                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020C678                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020C680 ; void __noreturn abort(void)
extern:000000000020C680                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020C680                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020C688 ; int *_errno_location(void)
extern:000000000020C688                 extrn __errno_location:near
extern:000000000020C688                                         ; CODE XREF: ___errno_location↑j
extern:000000000020C688                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020C690 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020C690                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020C690                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020C698 ; void __noreturn exit(int status)
extern:000000000020C698                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020C698                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020C6A0 ; char *strcpy(char *dest, const char *src)
extern:000000000020C6A0                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020C6A0                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020C6A8 ; size_t _fpending(FILE *fp)
extern:000000000020C6A8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020C6A8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020C6B0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
extern:000000000020C6B0                 extrn sigaction:near    ; CODE XREF: _sigaction↑j
extern:000000000020C6B0                                         ; DATA XREF: .got:sigaction_ptr↑o
extern:000000000020C6B8 ; int fcntl(int fd, int cmd, ...)
extern:000000000020C6B8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020C6B8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020C6C0 ; int setenv(const char *name, const char *value, int replace)
extern:000000000020C6C0                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:000000000020C6C0                                         ; DATA XREF: .got:setenv_ptr↑o
extern:000000000020C6C8 ; void clearerr_unlocked(FILE *stream)
extern:000000000020C6C8                 extrn clearerr_unlocked:near
extern:000000000020C6C8                                         ; CODE XREF: _clearerr_unlocked↑j
extern:000000000020C6C8                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:000000000020C6D0 ; ssize_t write(int fd, const void *buf, size_t n)
extern:000000000020C6D0                 extrn write:near        ; CODE XREF: _write↑j
extern:000000000020C6D0                                         ; DATA XREF: .got:write_ptr↑o
extern:000000000020C6D8 ; char *textdomain(const char *domainname)
extern:000000000020C6D8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020C6D8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020C6E0 ; int fclose(FILE *stream)
extern:000000000020C6E0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020C6E0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020C6E8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020C6E8                 extrn bindtextdomain:near
extern:000000000020C6E8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020C6E8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020C6F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020C6F0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020C6F0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020C6F8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020C6F8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020C6F8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020C6F8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020C700 ; size_t strlen(const char *s)
extern:000000000020C700                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020C700                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020C708                 extrn __stack_chk_fail:near
extern:000000000020C708                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020C708                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020C710 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020C710                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020C710                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020C718 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020C718                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020C718                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020C720 ; int dup2(int fd, int fd2)
extern:000000000020C720                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:000000000020C720                                         ; DATA XREF: .got:dup2_ptr↑o
extern:000000000020C728 ; char *strchr(const char *s, int c)
extern:000000000020C728                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020C728                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020C730 ; char *strrchr(const char *s, int c)
extern:000000000020C730                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020C730                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020C738 ; int ftruncate(int fd, __off_t length)
extern:000000000020C738                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:000000000020C738                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:000000000020C740 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020C740                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020C740                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020C748 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020C748                 extrn __assert_fail:near
extern:000000000020C748                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020C748                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020C750 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020C750                 extrn __strtoul_internal:near
extern:000000000020C750                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020C750                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020C758 ; void *memset(void *s, int c, size_t n)
extern:000000000020C758                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020C758                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020C760 ; int close(int fd)
extern:000000000020C760                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020C760                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020C768 ; int pipe(int pipedes[2])
extern:000000000020C768                 extrn pipe:near         ; CODE XREF: _pipe↑j
extern:000000000020C768                                         ; DATA XREF: .got:pipe_ptr↑o
extern:000000000020C770 ; size_t strspn(const char *s, const char *accept)
extern:000000000020C770                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020C770                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020C778 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020C778                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020C778                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020C780 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000020C780                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000020C780                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000020C788 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020C788                 extrn __libc_start_main:near
extern:000000000020C788                                         ; CODE XREF: start+24↑p
extern:000000000020C788                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020C790 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020C790                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020C790                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020C798 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020C798                 extrn fputs_unlocked:near
extern:000000000020C798                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020C798                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020C7A0 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020C7A0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020C7A0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020C7A8 ; int strcmp(const char *s1, const char *s2)
extern:000000000020C7A8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020C7A8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020C7B0 ; int sigemptyset(sigset_t *set)
extern:000000000020C7B0                 extrn sigemptyset:near  ; CODE XREF: _sigemptyset↑j
extern:000000000020C7B0                                         ; DATA XREF: .got:sigemptyset_ptr↑o
extern:000000000020C7B8 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020C7B8                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020C7B8                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020C7C0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020C7C0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020C7C0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020C7C8 ; int fileno(FILE *stream)
extern:000000000020C7C8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020C7C8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020C7D0 ; void *malloc(size_t size)
extern:000000000020C7D0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020C7D0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020C7D8 ; int fflush(FILE *stream)
extern:000000000020C7D8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020C7D8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020C7E0 ; char *nl_langinfo(nl_item item)
extern:000000000020C7E0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020C7E0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020C7E8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020C7E8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020C7E8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020C7F0 ; int _freading(FILE *fp)
extern:000000000020C7F0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020C7F0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020C7F8 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020C7F8                 extrn fwrite_unlocked:near
extern:000000000020C7F8                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020C7F8                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020C800 ; void *realloc(void *ptr, size_t size)
extern:000000000020C800                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020C800                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020C808 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020C808                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020C808                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020C810 ; char *setlocale(int category, const char *locale)
extern:000000000020C810                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020C810                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020C818                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020C818                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020C820 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020C820                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020C820                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020C828 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020C828                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020C828                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020C830 ; void *memrchr(const void *s, int c, size_t n)
extern:000000000020C830                 extrn memrchr:near      ; CODE XREF: _memrchr↑j
extern:000000000020C830                                         ; DATA XREF: .got:memrchr_ptr↑o
extern:000000000020C838 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
extern:000000000020C838                 extrn waitpid:near      ; CODE XREF: _waitpid↑j
extern:000000000020C838                                         ; DATA XREF: .got:waitpid_ptr↑o
extern:000000000020C840 ; int open(const char *file, int oflag, ...)
extern:000000000020C840                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020C840                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020C848 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020C848                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020C848                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020C850 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020C850                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020C850                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020C858 ; int getpagesize(void)
extern:000000000020C858                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:000000000020C858                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:000000000020C860 ; int _libc_current_sigrtmin(void)
extern:000000000020C860                 extrn __libc_current_sigrtmin:near
extern:000000000020C860                                         ; CODE XREF: ___libc_current_sigrtmin↑j
extern:000000000020C860                                         ; DATA XREF: .got:__libc_current_sigrtmin_ptr↑o
extern:000000000020C868 ; void __noreturn exit(int status)
extern:000000000020C868                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020C868                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020C870 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020C870                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020C870                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020C878                 extrn __fprintf_chk:near
extern:000000000020C878                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020C878                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020C880 ; int _libc_current_sigrtmax(void)
extern:000000000020C880                 extrn __libc_current_sigrtmax:near
extern:000000000020C880                                         ; CODE XREF: ___libc_current_sigrtmax↑j
extern:000000000020C880                                         ; DATA XREF: .got:__libc_current_sigrtmax_ptr↑o
extern:000000000020C888 ; int mbsinit(const mbstate_t *ps)
extern:000000000020C888                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020C888                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020C890 ; int execl(const char *path, const char *arg, ...)
extern:000000000020C890                 extrn execl:near        ; CODE XREF: _execl↑j
extern:000000000020C890                                         ; DATA XREF: .got:execl_ptr↑o
extern:000000000020C898 ; int iswprint(wint_t wc)
extern:000000000020C898                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020C898                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020C8A0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020C8A0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020C8A0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020C8A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020C8A8 ; int sigaddset(sigset_t *set, int signo)
extern:000000000020C8A8                 extrn sigaddset:near    ; CODE XREF: _sigaddset↑j
extern:000000000020C8A8                                         ; DATA XREF: .got:sigaddset_ptr↑o
extern:000000000020C8B0 ; __pid_t fork(void)
extern:000000000020C8B0                 extrn fork:near         ; CODE XREF: _fork↑j
extern:000000000020C8B0                                         ; DATA XREF: .got:fork_ptr↑o
extern:000000000020C8B8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020C8B8                 extrn __ctype_b_loc:near
extern:000000000020C8B8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020C8B8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020C8C0                 extrn __sprintf_chk:near
extern:000000000020C8C0                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000020C8C0                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000020C8C8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020C8C8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020C8D0                 extrn __gmon_start__:near ; weak
extern:000000000020C8D0                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020C8D0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020C8D8                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020C8D8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020C8D8
extern:000000000020C8D8
extern:000000000020C8D8                 end start
