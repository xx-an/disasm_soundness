LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : B2925AC31A636048ACEEBB6B925DB816349B97873F7F165D9772F94013C163BE
LOAD:0000000000000000 ; Input MD5    : EBBC52EF468C0B9AB3AF081BCF39A7AA
LOAD:0000000000000000 ; Input CRC32  : 75DCAC91
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/rm
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'rm.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'remove.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closein.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-type.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'write-any-file.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'yesno.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'freadahead.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 4B0B8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0E200h               ; Size in file image
LOAD:00000000000000D8                 dq 0E200h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0E990h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20E990h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 710h                 ; Size in file image
LOAD:0000000000000110                 dq 8D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0EBB8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20EBB8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0C328h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0C328h               ; Physical address
LOAD:00000000000001B0                 dq 4FCh                 ; Size in file image
LOAD:00000000000001B8                 dq 4FCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0E990h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20E990h              ; Physical address
LOAD:0000000000000220                 dq 670h                 ; Size in file image
LOAD:0000000000000228                 dq 670h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 86h, 0E1h, 0A1h, 7Dh, 0CAh, 0F0h, 9Eh, 27h, 0C4h, 91h ; Desc
LOAD:0000000000000284                 db 27h, 1Eh, 52h, 68h, 79h, 0AEh, 0CAh, 0B2h, 0F9h, 0A9h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 48h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 48h, 49h, 4Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_A78, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_A78, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_A78, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_A78, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aUnlinkat - offset byte_A78, 12h, 0, 0, \ ; "unlinkat"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aQsort - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aIsatty - offset byte_A78, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFaccessat - offset byte_A78, 12h, 0, 0, \ ; "faccessat"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFcntl - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A78, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aFclose - offset byte_A78, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain - offset byte_A78, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aDcgettext - offset byte_A78, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A78, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrlen - offset byte_A78, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aLxstat - offset byte_A78, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aOpenat - offset byte_A78, 12h, 0, 0, \ ; "openat"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStackChkFail - offset byte_A78, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGetoptLong - offset byte_A78, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMbrtowc - offset byte_A78, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFxstatat - offset byte_A78, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aOverflow - offset byte_A78, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrrchr - offset byte_A78, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLseek - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aAssertFail - offset byte_A78, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemset - offset byte_A78, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGeteuid - offset byte_A78, 12h, 0, 0, \ ; "geteuid"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFclose+1 - offset byte_A78, 12h, 0, 0, \ ; "close"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aClosedir - offset byte_A78, 12h, 0, 0, \ ; "closedir"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aLibcStartMain - offset byte_A78, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemcmp - offset byte_A78, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFputsUnlocked - offset byte_A78, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aCalloc - offset byte_A78, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGetdelim - offset byte_A78, 12h, 0, 0, \ ; "__getdelim"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrcmp - offset byte_A78, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aDirfd - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aRpmatch - offset byte_A78, 12h, 0, 0, \ ; "rpmatch"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aGmonStart - offset byte_A78, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMemcpy - offset byte_A78, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFileno - offset byte_A78, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aXstat - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aReaddir - offset byte_A78, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMalloc - offset byte_A78, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFflush - offset byte_A78, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aNlLanginfo - offset byte_A78, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFxstat - offset byte_A78, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFreading - offset byte_A78, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFchdir - offset byte_A78, 12h, 0, 0, \ ; "fchdir"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aRealloc - offset byte_A78, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aSetlocale - offset byte_A78, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aPrintfChk - offset byte_A78, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aMempcpy - offset byte_A78, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aMemmove - offset byte_A78, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aError - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000838                            0>
LOAD:0000000000000850                 Elf64_Sym <offset aOpen - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:0000000000000850                            0>
LOAD:0000000000000868                 Elf64_Sym <offset aFseeko - offset byte_A78, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aDcngettext - offset byte_A78, 12h, 0, 0, \ ; "dcngettext"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aFdopendir - offset byte_A78, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFstatfs - offset byte_A78, 12h, 0, 0, \ ; "fstatfs"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCxaAtexit - offset byte_A78, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aExit+1 - offset byte_A78, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFwrite - offset byte_A78, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFprintfChk - offset byte_A78, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aItmRegistertmc - offset byte_A78, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aMbsinit - offset byte_A78, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aIswprint - offset byte_A78, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aCxaFinalize - offset byte_A78, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aCtypeBLoc - offset byte_A78, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aStdout - offset byte_A78, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009A0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009B8                 Elf64_Sym <offset aProgname - offset byte_A78, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009B8                            offset __bss_start, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aStdin - offset byte_A78, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000009D0                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aProgramInvocat - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009E8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aPrognameFull - offset byte_A78, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A00                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A18                            offset __bss_start, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aStderr - offset byte_A78, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A30                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aOptind - offset byte_A78, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A48                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A60                 Elf64_Sym <offset aOptarg - offset byte_A78, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A60                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78 ; ELF String Table
LOAD:0000000000000A78 byte_A78        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A78                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A79 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E80↓o
LOAD:0000000000000A83 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A8A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A97 aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A9F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000AA9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AB1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000AB9 aDcngettext     db 'dcngettext',0       ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AC4 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000ACB aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AD3 aRpmatch        db 'rpmatch',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000ADB aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000AE5 aUnlinkat       db 'unlinkat',0         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AEE aClosedir       db 'closedir',0         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000AF7 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000AFE aError          db 'error',0            ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B04 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B15 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B1E aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000B27 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B2F aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B37 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B3D aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000B43 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B43                                         ; LOAD:00000000000008E0↑o
LOAD:0000000000000B49 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B49                                         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000B61 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B6F aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B6F                                         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000B86 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B8D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000B94 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B9B aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BA2 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000BB3 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000BBA aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000BC2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BD0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000BD7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000BDD aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000BE4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000BE4                                         ; LOAD:00000000000005C8↑o
LOAD:0000000000000BEB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000BF2 aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BFC aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C04 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C10 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000C1E aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000C25 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C30 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000C37 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C43 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C4C aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000C53 aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C5E aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C65 aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C6D aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000C78 aOpen           db 'open',0             ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000C7D aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C7D                                         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000C9B aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000CA1 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000CB0 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000CB6 aOpenat         db 'openat',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000CBD aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000CC5 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000CCD aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000CCD                                         ; LOAD:0000000000000418↑o
LOAD:0000000000000CDC aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000CE7 aFaccessat      db 'faccessat',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000CF1 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000CF8 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000CF8                                         ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000D0A aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D10 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000D17 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000D22 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000D31 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D36 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000D41 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000D51 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000D5E aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000E90↓o
LOAD:0000000000000D68 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000EA0↓o
LOAD:0000000000000D74 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000EB0↓o
LOAD:0000000000000D7F aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000EC0↓o
LOAD:0000000000000D89 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000ED0↓o
LOAD:0000000000000D95 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D95                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000DB1 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000DC0 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000DC0                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000DDA ; ELF GNU Symbol Version Table
LOAD:0000000000000DDA                 dw 0
LOAD:0000000000000DDC                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000DDE                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000DE0                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000DE2                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000DE6                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000DE8                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000DEA                 dw 3                    ; unlinkat@@GLIBC_2.4
LOAD:0000000000000DEC                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000DEE                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000DF0                 dw 3                    ; faccessat@@GLIBC_2.4
LOAD:0000000000000DF2                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000DF4                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000DF6                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000DF8                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000DFA                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000E02                 dw 3                    ; openat@@GLIBC_2.4
LOAD:0000000000000E04                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E06                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E08                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E0A                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000E0C                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000E0E                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E10                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E12                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000E14                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E16                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:0000000000000E18                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000E1A                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000E1C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E1E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E20                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E22                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E24                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000E28                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:0000000000000E2A                 dw 2                    ; rpmatch@@GLIBC_2.2.5
LOAD:0000000000000E2C                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E2E                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E30                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E32                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000E34                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000E36                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E38                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E3A                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E3C                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E40                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E44                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E46                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000E48                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000E4A                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000E4C                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000E4E                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000E50                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 2                    ; dcngettext@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 3                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000000E56                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000E5A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E60                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000E62                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000E6A                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 0
LOAD:0000000000000E7E                 dw 0
LOAD:0000000000000E80 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E80                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_A78, 10h, 0> ; "libc.so.6"
LOAD:0000000000000E90                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_A78, \ ; "GLIBC_2.3"
LOAD:0000000000000E90                                10h>
LOAD:0000000000000EA0                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_A78, \ ; "GLIBC_2.3.4"
LOAD:0000000000000EA0                                10h>
LOAD:0000000000000EB0                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_A78, \ ; "GLIBC_2.14"
LOAD:0000000000000EB0                                10h>
LOAD:0000000000000EC0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_A78, \ ; "GLIBC_2.4"
LOAD:0000000000000EC0                                10h>
LOAD:0000000000000ED0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_A78, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000EE0 ; ELF RELA Relocation Table
LOAD:0000000000000EE0                 Elf64_Rela <20E990h, 8, 2490h> ; R_X86_64_RELATIVE +2490h
LOAD:0000000000000EF8                 Elf64_Rela <20E998h, 8, 2450h> ; R_X86_64_RELATIVE +2450h
LOAD:0000000000000F10                 Elf64_Rela <20E9A0h, 8, 0AAC1h> ; R_X86_64_RELATIVE +0AAC1h
LOAD:0000000000000F28                 Elf64_Rela <20E9A8h, 8, 0AAC7h> ; R_X86_64_RELATIVE +0AAC7h
LOAD:0000000000000F40                 Elf64_Rela <20E9B0h, 8, 0AACAh> ; R_X86_64_RELATIVE +0AACAh
LOAD:0000000000000F58                 Elf64_Rela <20E9B8h, 8, 0AACFh> ; R_X86_64_RELATIVE +0AACFh
LOAD:0000000000000F70                 Elf64_Rela <20E9C0h, 8, 0B9C6h> ; R_X86_64_RELATIVE +0B9C6h
LOAD:0000000000000F88                 Elf64_Rela <20E9C8h, 8, 0AAD4h> ; R_X86_64_RELATIVE +0AAD4h
LOAD:0000000000000FA0                 Elf64_Rela <20E9E0h, 8, 0AAD8h> ; R_X86_64_RELATIVE +0AAD8h
LOAD:0000000000000FB8                 Elf64_Rela <20EA00h, 8, 0A9E4h> ; R_X86_64_RELATIVE +0A9E4h
LOAD:0000000000000FD0                 Elf64_Rela <20EA20h, 8, 0AADEh> ; R_X86_64_RELATIVE +0AADEh
LOAD:0000000000000FE8                 Elf64_Rela <20EA40h, 8, 0A9F2h> ; R_X86_64_RELATIVE +0A9F2h
LOAD:0000000000001000                 Elf64_Rela <20EA60h, 8, 0A9F5h> ; R_X86_64_RELATIVE +0A9F5h
LOAD:0000000000001018                 Elf64_Rela <20EA80h, 8, 0AAEEh> ; R_X86_64_RELATIVE +0AAEEh
LOAD:0000000000001030                 Elf64_Rela <20EAA0h, 8, 0AB01h> ; R_X86_64_RELATIVE +0AB01h
LOAD:0000000000001048                 Elf64_Rela <20EAC0h, 8, 0AB0Bh> ; R_X86_64_RELATIVE +0AB0Bh
LOAD:0000000000001060                 Elf64_Rela <20EAE0h, 8, 0AB0Fh> ; R_X86_64_RELATIVE +0AB0Fh
LOAD:0000000000001078                 Elf64_Rela <20EB00h, 8, 0AB17h> ; R_X86_64_RELATIVE +0AB17h
LOAD:0000000000001090                 Elf64_Rela <20EB20h, 8, 0AB1Ch> ; R_X86_64_RELATIVE +0AB1Ch
LOAD:00000000000010A8                 Elf64_Rela <20EB60h, 8, 0B991h> ; R_X86_64_RELATIVE +0B991h
LOAD:00000000000010C0                 Elf64_Rela <20EB68h, 8, 0B999h> ; R_X86_64_RELATIVE +0B999h
LOAD:00000000000010D8                 Elf64_Rela <20EB70h, 8, 0B99Fh> ; R_X86_64_RELATIVE +0B99Fh
LOAD:00000000000010F0                 Elf64_Rela <20EB78h, 8, 0B9ACh> ; R_X86_64_RELATIVE +0B9ACh
LOAD:0000000000001108                 Elf64_Rela <20EB80h, 8, 0B9B9h> ; R_X86_64_RELATIVE +0B9B9h
LOAD:0000000000001120                 Elf64_Rela <20EB88h, 8, 0AA74h> ; R_X86_64_RELATIVE +0AA74h
LOAD:0000000000001138                 Elf64_Rela <20EB90h, 8, 0B9CDh> ; R_X86_64_RELATIVE +0B9CDh
LOAD:0000000000001150                 Elf64_Rela <20EB98h, 8, 0B9B2h> ; R_X86_64_RELATIVE +0B9B2h
LOAD:0000000000001168                 Elf64_Rela <20EBA0h, 8, 0A9DBh> ; R_X86_64_RELATIVE +0A9DBh
LOAD:0000000000001180                 Elf64_Rela <20EBA8h, 8, 0B9D5h> ; R_X86_64_RELATIVE +0B9D5h
LOAD:0000000000001198                 Elf64_Rela <20F008h, 8, 20F008h> ; R_X86_64_RELATIVE +20F008h
LOAD:00000000000011B0                 Elf64_Rela <20F010h, 8, 0B833h> ; R_X86_64_RELATIVE +0B833h
LOAD:00000000000011C8                 Elf64_Rela <20F018h, 8, 38F0h> ; R_X86_64_RELATIVE +38F0h
LOAD:00000000000011E0                 Elf64_Rela <20F080h, 8, 20F090h> ; R_X86_64_RELATIVE +20F090h
LOAD:00000000000011F8                 Elf64_Rela <20F098h, 8, 20F120h> ; R_X86_64_RELATIVE +20F120h
LOAD:0000000000001210                 Elf64_Rela <20EFC8h, 100000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001228                 Elf64_Rela <20EFD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001240                 Elf64_Rela <20EFD8h, 2100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001258                 Elf64_Rela <20EFE0h, 2900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001270                 Elf64_Rela <20EFE8h, 4300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001288                 Elf64_Rela <20EFF0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000012A0                 Elf64_Rela <20F0A0h, 4900000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000012B8                 Elf64_Rela <20F0A8h, 4800000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000012D0                 Elf64_Rela <20F0B0h, 4A00000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000012E8                 Elf64_Rela <20F0B8h, 4F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001300                 Elf64_Rela <20F0C0h, 5000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001318                 Elf64_Rela <20F0C8h, 4C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001330                 Elf64_Rela <20F0E0h, 4E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001348 ; ELF JMPREL Relocation Table
LOAD:0000000000001348                 Elf64_Rela <20EDC0h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001360                 Elf64_Rela <20EDC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001378                 Elf64_Rela <20EDD0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001390                 Elf64_Rela <20EDD8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000013A8                 Elf64_Rela <20EDE0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000013C0                 Elf64_Rela <20EDE8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT unlinkat
LOAD:00000000000013D8                 Elf64_Rela <20EDF0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:00000000000013F0                 Elf64_Rela <20EDF8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000001408                 Elf64_Rela <20EE00h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT faccessat
LOAD:0000000000001420                 Elf64_Rela <20EE08h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001438                 Elf64_Rela <20EE10h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001450                 Elf64_Rela <20EE18h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001468                 Elf64_Rela <20EE20h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001480                 Elf64_Rela <20EE28h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001498                 Elf64_Rela <20EE30h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000014B0                 Elf64_Rela <20EE38h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000014C8                 Elf64_Rela <20EE40h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000014E0                 Elf64_Rela <20EE48h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:00000000000014F8                 Elf64_Rela <20EE50h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001510                 Elf64_Rela <20EE58h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001528                 Elf64_Rela <20EE60h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001540                 Elf64_Rela <20EE68h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001558                 Elf64_Rela <20EE70h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001570                 Elf64_Rela <20EE78h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001588                 Elf64_Rela <20EE80h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000015A0                 Elf64_Rela <20EE88h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000015B8                 Elf64_Rela <20EE90h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000015D0                 Elf64_Rela <20EE98h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:00000000000015E8                 Elf64_Rela <20EEA0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001600                 Elf64_Rela <20EEA8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001618                 Elf64_Rela <20EEB0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001630                 Elf64_Rela <20EEB8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001648                 Elf64_Rela <20EEC0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001660                 Elf64_Rela <20EEC8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001678                 Elf64_Rela <20EED0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001690                 Elf64_Rela <20EED8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:00000000000016A8                 Elf64_Rela <20EEE0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT rpmatch
LOAD:00000000000016C0                 Elf64_Rela <20EEE8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000016D8                 Elf64_Rela <20EEF0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000016F0                 Elf64_Rela <20EEF8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001708                 Elf64_Rela <20EF00h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001720                 Elf64_Rela <20EF08h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001738                 Elf64_Rela <20EF10h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001750                 Elf64_Rela <20EF18h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001768                 Elf64_Rela <20EF20h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001780                 Elf64_Rela <20EF28h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001798                 Elf64_Rela <20EF30h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:00000000000017B0                 Elf64_Rela <20EF38h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000017C8                 Elf64_Rela <20EF40h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000017E0                 Elf64_Rela <20EF48h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000017F8                 Elf64_Rela <20EF50h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001810                 Elf64_Rela <20EF58h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001828                 Elf64_Rela <20EF60h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001840                 Elf64_Rela <20EF68h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001858                 Elf64_Rela <20EF70h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001870                 Elf64_Rela <20EF78h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT dcngettext
LOAD:0000000000001888                 Elf64_Rela <20EF80h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:00000000000018A0                 Elf64_Rela <20EF88h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:00000000000018B8                 Elf64_Rela <20EF90h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000018D0                 Elf64_Rela <20EF98h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000018E8                 Elf64_Rela <20EFA0h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001900                 Elf64_Rela <20EFA8h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001918                 Elf64_Rela <20EFB0h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001930                 Elf64_Rela <20EFB8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001948                 Elf64_Rela <20EFC0h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001948 LOAD            ends
LOAD:0000000000001948
.init:0000000000001960 ; ===========================================================================
.init:0000000000001960
.init:0000000000001960 ; Segment type: Pure code
.init:0000000000001960 ; Segment permissions: Read/Execute
.init:0000000000001960 _init           segment dword public 'CODE' use64
.init:0000000000001960                 assume cs:_init
.init:0000000000001960                 ;org 1960h
.init:0000000000001960                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001960
.init:0000000000001960 ; =============== S U B R O U T I N E =======================================
.init:0000000000001960
.init:0000000000001960
.init:0000000000001960                 public _init_proc
.init:0000000000001960 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001960                 sub     rsp, 8          ; _init
.init:0000000000001964                 mov     rax, cs:__gmon_start___ptr
.init:000000000000196B                 test    rax, rax
.init:000000000000196E                 jz      short loc_1972
.init:0000000000001970                 call    rax ; __gmon_start__
.init:0000000000001972
.init:0000000000001972 loc_1972:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001972                 add     rsp, 8
.init:0000000000001976                 retn
.init:0000000000001976 _init_proc      endp
.init:0000000000001976
.init:0000000000001976 _init           ends
.init:0000000000001976
LOAD:0000000000001977 ; ===========================================================================
LOAD:0000000000001977
LOAD:0000000000001977 ; Segment type: Pure code
LOAD:0000000000001977 ; Segment permissions: Read/Execute
LOAD:0000000000001977 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001977                 assume cs:LOAD
LOAD:0000000000001977                 ;org 1977h
LOAD:0000000000001977                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001977                 align 20h
LOAD:0000000000001977 LOAD            ends
LOAD:0000000000001977
.plt:0000000000001980 ; ===========================================================================
.plt:0000000000001980
.plt:0000000000001980 ; Segment type: Pure code
.plt:0000000000001980 ; Segment permissions: Read/Execute
.plt:0000000000001980 _plt            segment para public 'CODE' use64
.plt:0000000000001980                 assume cs:_plt
.plt:0000000000001980                 ;org 1980h
.plt:0000000000001980                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980
.plt:0000000000001980 sub_1980        proc near               ; CODE XREF: .plt:000000000000199B↓j
.plt:0000000000001980                                         ; .plt:00000000000019AB↓j ...
.plt:0000000000001980 ; __unwind {
.plt:0000000000001980                 push    cs:qword_20EDB0
.plt:0000000000001986                 jmp     cs:qword_20EDB8
.plt:0000000000001986 sub_1980        endp
.plt:0000000000001986
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:000000000000198C                 align 10h
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: noreturn thunk
.plt:0000000000001990
.plt:0000000000001990 ; void __noreturn abort(void)
.plt:0000000000001990 _abort          proc near               ; CODE XREF: rm+82C↓p
.plt:0000000000001990                                         ; set_program_name+9A↓p ...
.plt:0000000000001990                 jmp     cs:abort_ptr
.plt:0000000000001990 _abort          endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    0
.plt:000000000000199B                 jmp     sub_1980
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; int *__errno_location(void)
.plt:00000000000019A0 ___errno_location proc near             ; CODE XREF: main+528↓p
.plt:00000000000019A0                                         ; excise:loc_2970↓p ...
.plt:00000000000019A0                 jmp     cs:__errno_location_ptr
.plt:00000000000019A0 ___errno_location endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    1
.plt:00000000000019AB                 jmp     sub_1980
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000019B0 _strncmp        proc near               ; CODE XREF: usage+30C↓p
.plt:00000000000019B0                                         ; usage+3CD↓p ...
.plt:00000000000019B0                 jmp     cs:strncmp_ptr
.plt:00000000000019B0 _strncmp        endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    2
.plt:00000000000019BB                 jmp     sub_1980
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: noreturn thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void __noreturn _exit(int status)
.plt:00000000000019C0 __exit          proc near               ; CODE XREF: close_stdin+AE↓p
.plt:00000000000019C0                                         ; close_stdout+88↓p
.plt:00000000000019C0                 jmp     cs:_exit_ptr
.plt:00000000000019C0 __exit          endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    3
.plt:00000000000019CB                 jmp     sub_1980
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; size_t __fpending(FILE *fp)
.plt:00000000000019D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000019D0                 jmp     cs:__fpending_ptr
.plt:00000000000019D0 ___fpending     endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    4
.plt:00000000000019DB                 jmp     sub_1980
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int unlinkat(int fd, const char *name, int flag)
.plt:00000000000019E0 _unlinkat       proc near               ; CODE XREF: excise+3C↓p
.plt:00000000000019E0                 jmp     cs:unlinkat_ptr
.plt:00000000000019E0 _unlinkat       endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    5
.plt:00000000000019EB                 jmp     sub_1980
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:00000000000019F0 _qsort          proc near               ; CODE XREF: fts_sort+7C↓p
.plt:00000000000019F0                 jmp     cs:qsort_ptr
.plt:00000000000019F0 _qsort          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    6
.plt:00000000000019FB                 jmp     sub_1980
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int isatty(int fd)
.plt:0000000000001A00 _isatty         proc near               ; CODE XREF: main+A3↓p
.plt:0000000000001A00                 jmp     cs:isatty_ptr
.plt:0000000000001A00 _isatty         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    7
.plt:0000000000001A0B                 jmp     sub_1980
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int faccessat(int fd, const char *file, int type, int flag)
.plt:0000000000001A10 _faccessat      proc near               ; CODE XREF: prompt+429↓p
.plt:0000000000001A10                 jmp     cs:faccessat_ptr
.plt:0000000000001A10 _faccessat      endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    8
.plt:0000000000001A1B                 jmp     sub_1980
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001A20 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001A20                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001A20                 jmp     cs:fcntl_ptr
.plt:0000000000001A20 _fcntl          endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    9
.plt:0000000000001A2B                 jmp     sub_1980
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; char *textdomain(const char *domainname)
.plt:0000000000001A30 _textdomain     proc near               ; CODE XREF: main+67↓p
.plt:0000000000001A30                 jmp     cs:textdomain_ptr
.plt:0000000000001A30 _textdomain     endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    0Ah
.plt:0000000000001A3B                 jmp     sub_1980
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int fclose(FILE *stream)
.plt:0000000000001A40 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A40                                         ; rpl_fclose+6B↓j
.plt:0000000000001A40                 jmp     cs:fclose_ptr
.plt:0000000000001A40 _fclose         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    0Bh
.plt:0000000000001A4B                 jmp     sub_1980
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A50 _bindtextdomain proc near               ; CODE XREF: main+5B↓p
.plt:0000000000001A50                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A50 _bindtextdomain endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    0Ch
.plt:0000000000001A5B                 jmp     sub_1980
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001A60 _dcgettext      proc near               ; CODE XREF: main+48C↓p
.plt:0000000000001A60                                         ; main+520↓p ...
.plt:0000000000001A60                 jmp     cs:dcgettext_ptr
.plt:0000000000001A60 _dcgettext      endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    0Dh
.plt:0000000000001A6B                 jmp     sub_1980
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001A70 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001A70                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001A70 ___ctype_get_mb_cur_max endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    0Eh
.plt:0000000000001A7B                 jmp     sub_1980
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; size_t strlen(const char *s)
.plt:0000000000001A80 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000001A80                                         ; argmatch+AE↓p ...
.plt:0000000000001A80                 jmp     cs:strlen_ptr
.plt:0000000000001A80 _strlen         endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    0Fh
.plt:0000000000001A8B                 jmp     sub_1980
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001A90 ___lxstat       proc near               ; CODE XREF: main+44D↓p
.plt:0000000000001A90                                         ; rm+53E↓p ...
.plt:0000000000001A90                 jmp     cs:__lxstat_ptr
.plt:0000000000001A90 ___lxstat       endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    10h
.plt:0000000000001A9B                 jmp     sub_1980
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000001AA0 _openat         proc near               ; CODE XREF: prompt+74↓p
.plt:0000000000001AA0                                         ; rm+24C↓p ...
.plt:0000000000001AA0                 jmp     cs:openat_ptr
.plt:0000000000001AA0 _openat         endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    11h
.plt:0000000000001AAB                 jmp     sub_1980
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: noreturn thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2303↓p
.plt:0000000000001AB0                                         ; excise:loc_2B38↓p ...
.plt:0000000000001AB0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001AB0 ___stack_chk_fail endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    12h
.plt:0000000000001ABB                 jmp     sub_1980
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001AC0 _getopt_long    proc near               ; CODE XREF: main+D6↓p
.plt:0000000000001AC0                 jmp     cs:getopt_long_ptr
.plt:0000000000001AC0 _getopt_long    endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    13h
.plt:0000000000001ACB                 jmp     sub_1980
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001AD0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001AD0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001AD0 _mbrtowc        endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    14h
.plt:0000000000001ADB                 jmp     sub_1980
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001AE0 ___fxstatat     proc near               ; CODE XREF: excise+19F↓p
.plt:0000000000001AE0                                         ; cache_fstatat_constprop_3+33↓p ...
.plt:0000000000001AE0                 jmp     cs:__fxstatat_ptr
.plt:0000000000001AE0 ___fxstatat     endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    15h
.plt:0000000000001AEB                 jmp     sub_1980
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001AF0 ___overflow     proc near               ; CODE XREF: argmatch_valid+11B↓j
.plt:0000000000001AF0                 jmp     cs:__overflow_ptr
.plt:0000000000001AF0 ___overflow     endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    16h
.plt:0000000000001AFB                 jmp     sub_1980
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; char *strrchr(const char *s, int c)
.plt:0000000000001B00 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001B00                                         ; rpl_fts_read+2F6↓p
.plt:0000000000001B00                 jmp     cs:strrchr_ptr
.plt:0000000000001B00 _strrchr        endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    17h
.plt:0000000000001B0B                 jmp     sub_1980
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001B10 _lseek          proc near               ; CODE XREF: rpl_fseeko+3B↓p
.plt:0000000000001B10                                         ; rpl_fclose+59↓p
.plt:0000000000001B10                 jmp     cs:lseek_ptr
.plt:0000000000001B10 _lseek          endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    18h
.plt:0000000000001B1B                 jmp     sub_1980
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: noreturn thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001B20 ___assert_fail  proc near               ; CODE XREF: main+3D0↓p
.plt:0000000000001B20                                         ; rm+84B↓p ...
.plt:0000000000001B20                 jmp     cs:__assert_fail_ptr
.plt:0000000000001B20 ___assert_fail  endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    19h
.plt:0000000000001B2B                 jmp     sub_1980
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001B30 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001B30                                         ; xzalloc+12↓j
.plt:0000000000001B30                 jmp     cs:memset_ptr
.plt:0000000000001B30 _memset         endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    1Ah
.plt:0000000000001B3B                 jmp     sub_1980
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; __uid_t geteuid(void)
.plt:0000000000001B40 _geteuid        proc near               ; CODE XREF: can_write_any_file+1C↓p
.plt:0000000000001B40                 jmp     cs:geteuid_ptr
.plt:0000000000001B40 _geteuid        endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    1Bh
.plt:0000000000001B4B                 jmp     sub_1980
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int close(int fd)
.plt:0000000000001B50 _close          proc near               ; CODE XREF: prompt+2F2↓p
.plt:0000000000001B50                                         ; rm+7A4↓p ...
.plt:0000000000001B50                 jmp     cs:close_ptr
.plt:0000000000001B50 _close          endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    1Ch
.plt:0000000000001B5B                 jmp     sub_1980
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; int closedir(DIR *dirp)
.plt:0000000000001B60 _closedir       proc near               ; CODE XREF: prompt+E0↓p
.plt:0000000000001B60                                         ; prompt+316↓p ...
.plt:0000000000001B60                 jmp     cs:closedir_ptr
.plt:0000000000001B60 _closedir       endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    1Dh
.plt:0000000000001B6B                 jmp     sub_1980
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001B70 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000001B70                                         ; argmatch_valid+96↓p ...
.plt:0000000000001B70                 jmp     cs:memcmp_ptr
.plt:0000000000001B70 _memcmp         endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1Eh
.plt:0000000000001B7B                 jmp     sub_1980
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001B80 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001B80                                         ; usage+C2↓p ...
.plt:0000000000001B80                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001B80 _fputs_unlocked endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    1Fh
.plt:0000000000001B8B                 jmp     sub_1980
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001B90 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001B90                                         ; rpl_fts_open+48↓p ...
.plt:0000000000001B90                 jmp     cs:calloc_ptr
.plt:0000000000001B90 _calloc         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    20h ; ' '
.plt:0000000000001B9B                 jmp     sub_1980
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000001BA0 ___getdelim     proc near               ; CODE XREF: yesno+3F↓p
.plt:0000000000001BA0                 jmp     cs:__getdelim_ptr
.plt:0000000000001BA0 ___getdelim     endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    21h ; '!'
.plt:0000000000001BAB                 jmp     sub_1980
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001BB0 _strcmp         proc near               ; CODE XREF: main+2AA↓p
.plt:0000000000001BB0                 jmp     cs:strcmp_ptr
.plt:0000000000001BB0 _strcmp         endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    22h ; '"'
.plt:0000000000001BBB                 jmp     sub_1980
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int dirfd(DIR *dirp)
.plt:0000000000001BC0 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:0000000000001BC0                 jmp     cs:dirfd_ptr
.plt:0000000000001BC0 _dirfd          endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    23h ; '#'
.plt:0000000000001BCB                 jmp     sub_1980
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int rpmatch(const char *response)
.plt:0000000000001BD0 _rpmatch        proc near               ; CODE XREF: yesno:loc_68A8↓p
.plt:0000000000001BD0                 jmp     cs:rpmatch_ptr
.plt:0000000000001BD0 _rpmatch        endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    24h ; '$'
.plt:0000000000001BDB                 jmp     sub_1980
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001BE0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001BE0                                         ; fts_alloc+38↓p
.plt:0000000000001BE0                 jmp     cs:memcpy_ptr
.plt:0000000000001BE0 _memcpy         endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    25h ; '%'
.plt:0000000000001BEB                 jmp     sub_1980
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; int fileno(FILE *stream)
.plt:0000000000001BF0 _fileno         proc near               ; CODE XREF: rpl_fseeko+2E↓p
.plt:0000000000001BF0                                         ; rpl_fclose+7↓p ...
.plt:0000000000001BF0                 jmp     cs:fileno_ptr
.plt:0000000000001BF0 _fileno         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    26h ; '&'
.plt:0000000000001BFB                 jmp     sub_1980
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001C00 ___xstat        proc near               ; CODE XREF: fts_stat+28↓p
.plt:0000000000001C00                 jmp     cs:__xstat_ptr
.plt:0000000000001C00 ___xstat        endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    27h ; '''
.plt:0000000000001C0B                 jmp     sub_1980
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000001C10 _readdir        proc near               ; CODE XREF: prompt+B3↓p
.plt:0000000000001C10                                         ; rm+283↓p ...
.plt:0000000000001C10                 jmp     cs:readdir_ptr
.plt:0000000000001C10 _readdir        endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    28h ; '('
.plt:0000000000001C1B                 jmp     sub_1980
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; void *malloc(size_t size)
.plt:0000000000001C20 _malloc         proc near               ; CODE XREF: mfile_name_concat+97↓p
.plt:0000000000001C20                                         ; xmalloc+4↓p ...
.plt:0000000000001C20                 jmp     cs:malloc_ptr
.plt:0000000000001C20 _malloc         endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    29h ; ')'
.plt:0000000000001C2B                 jmp     sub_1980
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int fflush(FILE *stream)
.plt:0000000000001C30 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001C30                                         ; rpl_fflush+3B↓j
.plt:0000000000001C30                 jmp     cs:fflush_ptr
.plt:0000000000001C30 _fflush         endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    2Ah ; '*'
.plt:0000000000001C3B                 jmp     sub_1980
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *nl_langinfo(nl_item item)
.plt:0000000000001C40 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001C40                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001C40 _nl_langinfo    endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    2Bh ; '+'
.plt:0000000000001C4B                 jmp     sub_1980
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001C50 ___fxstat       proc near               ; CODE XREF: fts_safe_changedir+BD↓p
.plt:0000000000001C50                 jmp     cs:__fxstat_ptr
.plt:0000000000001C50 ___fxstat       endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    2Ch ; ','
.plt:0000000000001C5B                 jmp     sub_1980
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int __freading(FILE *fp)
.plt:0000000000001C60 ___freading     proc near               ; CODE XREF: rpl_fflush+9↓p
.plt:0000000000001C60                                         ; rpl_fclose+13↓p
.plt:0000000000001C60                 jmp     cs:__freading_ptr
.plt:0000000000001C60 ___freading     endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    2Dh ; '-'
.plt:0000000000001C6B                 jmp     sub_1980
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int fchdir(int fd)
.plt:0000000000001C70 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000001C70                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000001C70                 jmp     cs:fchdir_ptr
.plt:0000000000001C70 _fchdir         endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2Eh ; '.'
.plt:0000000000001C7B                 jmp     sub_1980
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001C80 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001C80                                         ; fts_sort+40↓p ...
.plt:0000000000001C80                 jmp     cs:realloc_ptr
.plt:0000000000001C80 _realloc        endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    2Fh ; '/'
.plt:0000000000001C8B                 jmp     sub_1980
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; char *setlocale(int category, const char *locale)
.plt:0000000000001C90 _setlocale      proc near               ; CODE XREF: main+48↓p
.plt:0000000000001C90                                         ; usage+2F3↓p ...
.plt:0000000000001C90                 jmp     cs:setlocale_ptr
.plt:0000000000001C90 _setlocale      endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    30h ; '0'
.plt:0000000000001C9B                 jmp     sub_1980
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001CA0                                         ; usage+1CF↓p ...
.plt:0000000000001CA0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001CA0 ___printf_chk   endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    31h ; '1'
.plt:0000000000001CAB                 jmp     sub_1980
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001CB0 _mempcpy        proc near               ; CODE XREF: mfile_name_concat+AD↓p
.plt:0000000000001CB0                                         ; mfile_name_concat+CE↓p
.plt:0000000000001CB0                 jmp     cs:mempcpy_ptr
.plt:0000000000001CB0 _mempcpy        endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    32h ; '2'
.plt:0000000000001CBB                 jmp     sub_1980
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001CC0 _memmove        proc near               ; CODE XREF: fts_build+3B5↓p
.plt:0000000000001CC0                                         ; rpl_fts_read+2E9↓p ...
.plt:0000000000001CC0                 jmp     cs:memmove_ptr
.plt:0000000000001CC0 _memmove        endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    33h ; '3'
.plt:0000000000001CCB                 jmp     sub_1980
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001CD0 _error          proc near               ; CODE XREF: main+53C↓p
.plt:0000000000001CD0                                         ; main+574↓p ...
.plt:0000000000001CD0                 jmp     cs:error_ptr
.plt:0000000000001CD0 _error          endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    34h ; '4'
.plt:0000000000001CDB                 jmp     sub_1980
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001CE0 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001CE0                 jmp     cs:open_ptr
.plt:0000000000001CE0 _open           endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    35h ; '5'
.plt:0000000000001CEB                 jmp     sub_1980
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001CF0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_696A↓j
.plt:0000000000001CF0                 jmp     cs:fseeko_ptr
.plt:0000000000001CF0 _fseeko         endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    36h ; '6'
.plt:0000000000001CFB                 jmp     sub_1980
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
.plt:0000000000001D00 _dcngettext     proc near               ; CODE XREF: main+370↓p
.plt:0000000000001D00                                         ; main+4DA↓p
.plt:0000000000001D00                 jmp     cs:dcngettext_ptr
.plt:0000000000001D00 _dcngettext     endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    37h ; '7'
.plt:0000000000001D0B                 jmp     sub_1980
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; DIR *fdopendir(int fd)
.plt:0000000000001D10 _fdopendir      proc near               ; CODE XREF: prompt+83↓p
.plt:0000000000001D10                                         ; rm+25B↓p ...
.plt:0000000000001D10                 jmp     cs:fdopendir_ptr
.plt:0000000000001D10 _fdopendir      endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    38h ; '8'
.plt:0000000000001D1B                 jmp     sub_1980
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000001D20 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000001D20                 jmp     cs:fstatfs_ptr
.plt:0000000000001D20 _fstatfs        endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    39h ; '9'
.plt:0000000000001D2B                 jmp     sub_1980
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001D30 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001D30                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001D30 ___cxa_atexit   endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    3Ah ; ':'
.plt:0000000000001D3B                 jmp     sub_1980
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: noreturn thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; void __noreturn exit(int status)
.plt:0000000000001D40 _exit           proc near               ; CODE XREF: main+248↓p
.plt:0000000000001D40                                         ; usage+58↓p
.plt:0000000000001D40                 jmp     cs:exit_ptr
.plt:0000000000001D40 _exit           endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    3Bh ; ';'
.plt:0000000000001D4B                 jmp     sub_1980
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001D50 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001D50                 jmp     cs:fwrite_ptr
.plt:0000000000001D50 _fwrite         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    3Ch ; '<'
.plt:0000000000001D5B                 jmp     sub_1980
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ___fprintf_chk  proc near               ; CODE XREF: main+38C↓p
.plt:0000000000001D60                                         ; main+4AB↓p ...
.plt:0000000000001D60                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001D60 ___fprintf_chk  endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    3Dh ; '='
.plt:0000000000001D6B                 jmp     sub_1980
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001D70 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001D70                 jmp     cs:mbsinit_ptr
.plt:0000000000001D70 _mbsinit        endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    3Eh ; '>'
.plt:0000000000001D7B                 jmp     sub_1980
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int iswprint(wint_t wc)
.plt:0000000000001D80 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001D80                 jmp     cs:iswprint_ptr
.plt:0000000000001D80 _iswprint       endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    3Fh ; '?'
.plt:0000000000001D8B                 jmp     sub_1980
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001D90 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001D90                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001D90 ___ctype_b_loc  endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    40h ; '@'
.plt:0000000000001D9B                 jmp     sub_1980
.plt:0000000000001D9B ; } // starts at 1980
.plt:0000000000001D9B _plt            ends
.plt:0000000000001D9B
.plt.got:0000000000001DA0 ; ===========================================================================
.plt.got:0000000000001DA0
.plt.got:0000000000001DA0 ; Segment type: Pure code
.plt.got:0000000000001DA0 ; Segment permissions: Read/Execute
.plt.got:0000000000001DA0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001DA0                 assume cs:_plt_got
.plt.got:0000000000001DA0                 ;org 1DA0h
.plt.got:0000000000001DA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001DA0
.plt.got:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DA0
.plt.got:0000000000001DA0 ; Attributes: thunk
.plt.got:0000000000001DA0
.plt.got:0000000000001DA0 ; void free(void *ptr)
.plt.got:0000000000001DA0 free            proc near               ; CODE XREF: rm+59D↓p
.plt.got:0000000000001DA0                                         ; rm+5B3↓p ...
.plt.got:0000000000001DA0 ; __unwind {
.plt.got:0000000000001DA0                 jmp     cs:free_ptr
.plt.got:0000000000001DA0 free            endp
.plt.got:0000000000001DA0
.plt.got:0000000000001DA0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DA6                 align 8
.plt.got:0000000000001DA8
.plt.got:0000000000001DA8 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DA8
.plt.got:0000000000001DA8 ; Attributes: thunk
.plt.got:0000000000001DA8
.plt.got:0000000000001DA8 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001DA8 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001DA8                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001DA8 __cxa_finalize  endp
.plt.got:0000000000001DA8
.plt.got:0000000000001DA8 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DAE                 align 10h
.plt.got:0000000000001DAE ; } // starts at 1DA0
.plt.got:0000000000001DAE _plt_got        ends
.plt.got:0000000000001DAE
.text:0000000000001DB0 ; ===========================================================================
.text:0000000000001DB0
.text:0000000000001DB0 ; Segment type: Pure code
.text:0000000000001DB0 ; Segment permissions: Read/Execute
.text:0000000000001DB0 _text           segment para public 'CODE' use64
.text:0000000000001DB0                 assume cs:_text
.text:0000000000001DB0                 ;org 1DB0h
.text:0000000000001DB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001DB0
.text:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DB0
.text:0000000000001DB0
.text:0000000000001DB0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001DB0                 public main
.text:0000000000001DB0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001DB0
.text:0000000000001DB0 var_E8          = byte ptr -0E8h
.text:0000000000001DB0 var_E4          = dword ptr -0E4h
.text:0000000000001DB0 var_E0          = byte ptr -0E0h
.text:0000000000001DB0 var_DF          = byte ptr -0DFh
.text:0000000000001DB0 var_DE          = byte ptr -0DEh
.text:0000000000001DB0 var_D8          = qword ptr -0D8h
.text:0000000000001DB0 var_D0          = byte ptr -0D0h
.text:0000000000001DB0 var_CF          = byte ptr -0CFh
.text:0000000000001DB0 var_CE          = byte ptr -0CEh
.text:0000000000001DB0 var_CD          = byte ptr -0CDh
.text:0000000000001DB0 stat_buf        = stat ptr -0C8h
.text:0000000000001DB0 var_30          = qword ptr -30h
.text:0000000000001DB0
.text:0000000000001DB0 ; __unwind {
.text:0000000000001DB0                 push    r14
.text:0000000000001DB2                 push    r13
.text:0000000000001DB4                 lea     r13, aNoPreserveRoot ; "--no-preserve-root"
.text:0000000000001DBB                 push    r12
.text:0000000000001DBD                 push    rbp
.text:0000000000001DBE                 mov     ebp, edi
.text:0000000000001DC0                 push    rbx
.text:0000000000001DC1                 mov     rbx, rsi
.text:0000000000001DC4                 mov     r14d, 1
.text:0000000000001DCA                 sub     rsp, 0C0h
.text:0000000000001DD1                 mov     rdi, [rsi]
.text:0000000000001DD4                 mov     rax, fs:28h
.text:0000000000001DDD                 mov     [rsp+0E8h+var_30], rax
.text:0000000000001DE5                 xor     eax, eax
.text:0000000000001DE7                 call    set_program_name
.text:0000000000001DEC                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001DF3                 mov     edi, 6          ; category
.text:0000000000001DF8                 call    _setlocale
.text:0000000000001DFD                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001E04                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E0B                 call    _bindtextdomain
.text:0000000000001E10                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E17                 call    _textdomain
.text:0000000000001E1C                 lea     rdi, close_stdin
.text:0000000000001E23                 call    atexit
.text:0000000000001E28                 xor     edi, edi        ; fd
.text:0000000000001E2A                 mov     [rsp+0E8h+var_E8], 0
.text:0000000000001E2E                 mov     [rsp+0E8h+var_E4], 4
.text:0000000000001E36                 mov     [rsp+0E8h+var_E0], 0
.text:0000000000001E3B                 mov     [rsp+0E8h+var_DE], 0
.text:0000000000001E40                 mov     [rsp+0E8h+var_DF], 0
.text:0000000000001E45                 mov     [rsp+0E8h+var_D8], 0
.text:0000000000001E4E                 mov     [rsp+0E8h+var_D0], 0
.text:0000000000001E53                 call    _isatty
.text:0000000000001E58                 test    eax, eax
.text:0000000000001E5A                 mov     [rsp+0E8h+var_CE], 0
.text:0000000000001E5F                 mov     [rsp+0E8h+var_CD], 0
.text:0000000000001E64                 setnz   [rsp+0E8h+var_CF]
.text:0000000000001E69                 xor     r12d, r12d
.text:0000000000001E6C                 nop     dword ptr [rax+00h]
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: main+11D↓j
.text:0000000000001E70                                         ; main+150↓j ...
.text:0000000000001E70                 lea     rcx, long_opts  ; longopts
.text:0000000000001E77                 lea     rdx, shortopts  ; "dfirvIR"
.text:0000000000001E7E                 xor     r8d, r8d        ; longind
.text:0000000000001E81                 mov     rsi, rbx        ; argv
.text:0000000000001E84                 mov     edi, ebp        ; argc
.text:0000000000001E86                 call    _getopt_long
.text:0000000000001E8B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001E8E                 jz      loc_20BE
.text:0000000000001E94                 cmp     eax, 69h ; 'i'
.text:0000000000001E97                 jz      loc_1F70
.text:0000000000001E9D                 jle     short loc_1ED0
.text:0000000000001E9F                 cmp     eax, 81h
.text:0000000000001EA4                 jz      loc_2080
.text:0000000000001EAA                 jle     short loc_1F08
.text:0000000000001EAC                 cmp     eax, 83h
.text:0000000000001EB1                 jz      loc_2040
.text:0000000000001EB7                 jl      loc_2010
.text:0000000000001EBD                 cmp     eax, 84h
.text:0000000000001EC2                 jnz     loc_209F
.text:0000000000001EC8                 mov     [rsp+0E8h+var_CF], 1
.text:0000000000001ECD                 jmp     short loc_1E70
.text:0000000000001ECD ; ---------------------------------------------------------------------------
.text:0000000000001ECF                 align 10h
.text:0000000000001ED0
.text:0000000000001ED0 loc_1ED0:                               ; CODE XREF: main+ED↑j
.text:0000000000001ED0                 cmp     eax, 49h ; 'I'
.text:0000000000001ED3                 jz      loc_1F88
.text:0000000000001ED9                 jle     loc_1FA0
.text:0000000000001EDF                 cmp     eax, 64h ; 'd'
.text:0000000000001EE2                 jz      loc_2090
.text:0000000000001EE8                 cmp     eax, 66h ; 'f'
.text:0000000000001EEB                 jnz     loc_20AF
.text:0000000000001EF1                 mov     [rsp+0E8h+var_E4], 5
.text:0000000000001EF9                 mov     [rsp+0E8h+var_E8], 1
.text:0000000000001EFD                 xor     r12d, r12d
.text:0000000000001F00                 jmp     loc_1E70
.text:0000000000001F00 ; ---------------------------------------------------------------------------
.text:0000000000001F05                 align 8
.text:0000000000001F08
.text:0000000000001F08 loc_1F08:                               ; CODE XREF: main+FA↑j
.text:0000000000001F08                 cmp     eax, 76h ; 'v'
.text:0000000000001F0B                 jz      loc_2000
.text:0000000000001F11                 cmp     eax, 80h
.text:0000000000001F16                 jnz     loc_209A
.text:0000000000001F1C                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F23                 test    rsi, rsi
.text:0000000000001F26                 jz      short loc_1F70
.text:0000000000001F28                 mov     r9, cs:argmatch_die
.text:0000000000001F2F                 lea     rdx, interactive_args
.text:0000000000001F36                 lea     rcx, interactive_types
.text:0000000000001F3D                 lea     rdi, aInteractive ; "--interactive"
.text:0000000000001F44                 mov     r8d, 4
.text:0000000000001F4A                 call    __xargmatch_internal
.text:0000000000001F4F                 lea     rdx, interactive_types
.text:0000000000001F56                 mov     eax, [rdx+rax*4]
.text:0000000000001F59                 cmp     eax, 1
.text:0000000000001F5C                 jz      short loc_1F88
.text:0000000000001F5E                 jb      loc_21C3
.text:0000000000001F64                 cmp     eax, 2
.text:0000000000001F67                 jnz     loc_1E70
.text:0000000000001F6D                 nop     dword ptr [rax]
.text:0000000000001F70
.text:0000000000001F70 loc_1F70:                               ; CODE XREF: main+E7↑j
.text:0000000000001F70                                         ; main+176↑j
.text:0000000000001F70                 mov     [rsp+0E8h+var_E4], 3
.text:0000000000001F78                 mov     [rsp+0E8h+var_E8], 0
.text:0000000000001F7C                 xor     r12d, r12d
.text:0000000000001F7F                 jmp     loc_1E70
.text:0000000000001F7F ; ---------------------------------------------------------------------------
.text:0000000000001F84                 align 8
.text:0000000000001F88
.text:0000000000001F88 loc_1F88:                               ; CODE XREF: main+123↑j
.text:0000000000001F88                                         ; main+1AC↑j
.text:0000000000001F88                 mov     [rsp+0E8h+var_E4], 4
.text:0000000000001F90                 mov     [rsp+0E8h+var_E8], 0
.text:0000000000001F94                 mov     r12d, 1
.text:0000000000001F9A                 jmp     loc_1E70
.text:0000000000001F9A ; ---------------------------------------------------------------------------
.text:0000000000001F9F                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: main+129↑j
.text:0000000000001FA0                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001FA5                 jnz     loc_22F1
.text:0000000000001FAB                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:0000000000001FB2                 sub     rsp, 8
.text:0000000000001FB6                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FBD                 push    0
.text:0000000000001FBF                 mov     rcx, cs:Version
.text:0000000000001FC6                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001FCD                 push    rax
.text:0000000000001FCE                 lea     rax, aRichardMStallm ; "Richard M. Stallman"
.text:0000000000001FD5                 lea     r8, aPaulRubin  ; "Paul Rubin"
.text:0000000000001FDC                 lea     rdx, unk_A99D
.text:0000000000001FE3                 lea     rsi, unk_A924
.text:0000000000001FEA                 push    rax
.text:0000000000001FEB                 xor     eax, eax
.text:0000000000001FED                 call    version_etc
.text:0000000000001FF2                 add     rsp, 20h
.text:0000000000001FF6                 xor     edi, edi        ; status
.text:0000000000001FF8                 call    _exit
.text:0000000000001FF8 ; ---------------------------------------------------------------------------
.text:0000000000001FFD                 align 20h
.text:0000000000002000
.text:0000000000002000 loc_2000:                               ; CODE XREF: main+15B↑j
.text:0000000000002000                 mov     [rsp+0E8h+var_CE], 1
.text:0000000000002005                 jmp     loc_1E70
.text:0000000000002005 ; ---------------------------------------------------------------------------
.text:000000000000200A                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: main+107↑j
.text:0000000000002010                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002017                 mov     ecx, 13h
.text:000000000000201C                 mov     rdi, r13
.text:000000000000201F                 mov     rsi, [rbx+rax*8-8]
.text:0000000000002024                 repe cmpsb
.text:0000000000002026                 setnbe  al
.text:0000000000002029                 sbb     al, 0
.text:000000000000202B                 test    al, al
.text:000000000000202D                 jnz     loc_2365
.text:0000000000002033                 xor     r14d, r14d
.text:0000000000002036                 jmp     loc_1E70
.text:0000000000002036 ; ---------------------------------------------------------------------------
.text:000000000000203B                 align 20h
.text:0000000000002040
.text:0000000000002040 loc_2040:                               ; CODE XREF: main+101↑j
.text:0000000000002040                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:0000000000002047                 test    r14, r14
.text:000000000000204A                 jz      loc_2185
.text:0000000000002050                 lea     rsi, s2         ; "all"
.text:0000000000002057                 mov     rdi, r14        ; s1
.text:000000000000205A                 call    _strcmp
.text:000000000000205F                 test    eax, eax
.text:0000000000002061                 jnz     loc_232E
.text:0000000000002067                 mov     [rsp+0E8h+var_D0], 1
.text:000000000000206C                 mov     r14d, 1
.text:0000000000002072                 jmp     loc_1E70
.text:0000000000002072 ; ---------------------------------------------------------------------------
.text:0000000000002077                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: main+F4↑j
.text:0000000000002080                 mov     [rsp+0E8h+var_E0], 1
.text:0000000000002085                 jmp     loc_1E70
.text:0000000000002085 ; ---------------------------------------------------------------------------
.text:000000000000208A                 align 10h
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: main+132↑j
.text:0000000000002090                 mov     [rsp+0E8h+var_DE], 1
.text:0000000000002095                 jmp     loc_1E70
.text:000000000000209A ; ---------------------------------------------------------------------------
.text:000000000000209A
.text:000000000000209A loc_209A:                               ; CODE XREF: main+166↑j
.text:000000000000209A                 cmp     eax, 72h ; 'r'
.text:000000000000209D                 jz      short loc_20B4
.text:000000000000209F
.text:000000000000209F loc_209F:                               ; CODE XREF: main+112↑j
.text:000000000000209F                                         ; main+302↓j ...
.text:000000000000209F                 mov     r12d, 1
.text:00000000000020A5                 lea     r14, [rsp+0E8h+stat_buf]
.text:00000000000020AA                 jmp     loc_21D7
.text:00000000000020AF ; ---------------------------------------------------------------------------
.text:00000000000020AF
.text:00000000000020AF loc_20AF:                               ; CODE XREF: main+13B↑j
.text:00000000000020AF                 cmp     eax, 52h ; 'R'
.text:00000000000020B2                 jnz     short loc_209F
.text:00000000000020B4
.text:00000000000020B4 loc_20B4:                               ; CODE XREF: main+2ED↑j
.text:00000000000020B4                 mov     [rsp+0E8h+var_DF], 1
.text:00000000000020B9                 jmp     loc_1E70
.text:00000000000020BE ; ---------------------------------------------------------------------------
.text:00000000000020BE
.text:00000000000020BE loc_20BE:                               ; CODE XREF: main+DE↑j
.text:00000000000020BE                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:00000000000020C4                 jge     loc_2190
.text:00000000000020CA                 cmp     [rsp+0E8h+var_DF], 0
.text:00000000000020CF                 jz      short loc_20DA
.text:00000000000020D1                 test    r14b, r14b
.text:00000000000020D4                 jnz     loc_2294
.text:00000000000020DA
.text:00000000000020DA loc_20DA:                               ; CODE XREF: main+31F↑j
.text:00000000000020DA                                         ; main+4F8↓j
.text:00000000000020DA                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:00000000000020E1                 test    r12b, r12b
.text:00000000000020E4                 lea     r13, [rbx+rdx*8]
.text:00000000000020E8                 jz      short loc_214A
.text:00000000000020EA                 sub     ebp, edx
.text:00000000000020EC                 cmp     [rsp+0E8h+var_DF], 0
.text:00000000000020F1                 movsxd  rbx, ebp
.text:00000000000020F4                 jnz     loc_226A
.text:00000000000020FA                 cmp     rbx, 3
.text:00000000000020FE                 jbe     short loc_214A
.text:0000000000002100                 lea     rdx, msgid2     ; "%s: remove %lu arguments? "
.text:0000000000002107                 lea     rsi, msgid1     ; "%s: remove %lu argument? "
.text:000000000000210E                 mov     r8d, 5          ; category
.text:0000000000002114                 mov     rcx, rbx        ; n
.text:0000000000002117                 xor     edi, edi        ; domainname
.text:0000000000002119                 mov     rbp, cs:program_name
.text:0000000000002120                 call    _dcngettext
.text:0000000000002125
.text:0000000000002125 loc_2125:                               ; CODE XREF: main+4DF↓j
.text:0000000000002125                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000212C                 mov     rdx, rax
.text:000000000000212F                 mov     r8, rbx
.text:0000000000002132                 mov     rcx, rbp
.text:0000000000002135                 mov     esi, 1
.text:000000000000213A                 xor     eax, eax
.text:000000000000213C                 call    ___fprintf_chk
.text:0000000000002141                 call    yesno
.text:0000000000002146                 test    al, al
.text:0000000000002148                 jz      short loc_219A
.text:000000000000214A
.text:000000000000214A loc_214A:                               ; CODE XREF: main+338↑j
.text:000000000000214A                                         ; main+34E↑j
.text:000000000000214A                 mov     rsi, rsp
.text:000000000000214D                 mov     rdi, r13
.text:0000000000002150                 call    rm
.text:0000000000002155                 lea     edx, [rax-2]
.text:0000000000002158                 cmp     eax, 4
.text:000000000000215B                 setz    al
.text:000000000000215E                 cmp     edx, 2
.text:0000000000002161                 movzx   eax, al
.text:0000000000002164                 jbe     short loc_219C
.text:0000000000002166                 lea     rcx, __PRETTY_FUNCTION___6977 ; "main"
.text:000000000000216D                 lea     rsi, file       ; "../coreutils-8.31/src/rm.c"
.text:0000000000002174                 lea     rdi, assertion  ; "VALID_STATUS (status)"
.text:000000000000217B                 mov     edx, 173h       ; line
.text:0000000000002180                 call    ___assert_fail
.text:0000000000002185 ; ---------------------------------------------------------------------------
.text:0000000000002185
.text:0000000000002185 loc_2185:                               ; CODE XREF: main+29A↑j
.text:0000000000002185                 mov     r14d, 1
.text:000000000000218B                 jmp     loc_1E70
.text:0000000000002190 ; ---------------------------------------------------------------------------
.text:0000000000002190
.text:0000000000002190 loc_2190:                               ; CODE XREF: main+314↑j
.text:0000000000002190                 cmp     [rsp+0E8h+var_E8], 0
.text:0000000000002194                 jz      loc_2308
.text:000000000000219A
.text:000000000000219A loc_219A:                               ; CODE XREF: main+398↑j
.text:000000000000219A                 xor     eax, eax
.text:000000000000219C
.text:000000000000219C loc_219C:                               ; CODE XREF: main+3B4↑j
.text:000000000000219C                 mov     rdx, [rsp+0E8h+var_30]
.text:00000000000021A4                 xor     rdx, fs:28h
.text:00000000000021AD                 jnz     loc_2303
.text:00000000000021B3                 add     rsp, 0C0h
.text:00000000000021BA                 pop     rbx
.text:00000000000021BB                 pop     rbp
.text:00000000000021BC                 pop     r12
.text:00000000000021BE                 pop     r13
.text:00000000000021C0                 pop     r14
.text:00000000000021C2                 retn
.text:00000000000021C3 ; ---------------------------------------------------------------------------
.text:00000000000021C3
.text:00000000000021C3 loc_21C3:                               ; CODE XREF: main+1AE↑j
.text:00000000000021C3                 mov     [rsp+0E8h+var_E4], 5
.text:00000000000021CB                 xor     r12d, r12d
.text:00000000000021CE                 jmp     loc_1E70
.text:00000000000021D3 ; ---------------------------------------------------------------------------
.text:00000000000021D3
.text:00000000000021D3 loc_21D3:                               ; CODE XREF: main+439↓j
.text:00000000000021D3                                         ; main+440↓j ...
.text:00000000000021D3                 add     r12, 1
.text:00000000000021D7
.text:00000000000021D7 loc_21D7:                               ; CODE XREF: main+2FA↑j
.text:00000000000021D7                 cmp     ebp, r12d
.text:00000000000021DA                 jle     loc_2260
.text:00000000000021E0                 mov     r13, [rbx+r12*8]
.text:00000000000021E4                 cmp     byte ptr [r13+0], 2Dh ; '-'
.text:00000000000021E9                 jnz     short loc_21D3
.text:00000000000021EB                 cmp     byte ptr [r13+1], 0
.text:00000000000021F0                 jz      short loc_21D3
.text:00000000000021F2                 mov     rdx, r14        ; stat_buf
.text:00000000000021F5                 mov     rsi, r13        ; filename
.text:00000000000021F8                 mov     edi, 1          ; ver
.text:00000000000021FD                 call    ___lxstat
.text:0000000000002202                 test    eax, eax
.text:0000000000002204                 jnz     short loc_21D3
.text:0000000000002206                 mov     rsi, r13
.text:0000000000002209                 mov     edi, 4
.text:000000000000220E                 call    quotearg_style
.text:0000000000002213                 mov     rdx, r13
.text:0000000000002216                 mov     esi, 3
.text:000000000000221B                 mov     edi, 1
.text:0000000000002220                 mov     r12, rax
.text:0000000000002223                 call    quotearg_n_style
.text:0000000000002228                 lea     rsi, msgid      ; "Try '%s ./%s' to remove the file %s.\n"
.text:000000000000222F                 mov     rbx, [rbx]
.text:0000000000002232                 mov     edx, 5          ; category
.text:0000000000002237                 xor     edi, edi        ; domainname
.text:0000000000002239                 mov     rbp, rax
.text:000000000000223C                 call    _dcgettext
.text:0000000000002241                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002248                 mov     rdx, rax
.text:000000000000224B                 mov     r9, r12
.text:000000000000224E                 mov     r8, rbp
.text:0000000000002251                 mov     rcx, rbx
.text:0000000000002254                 mov     esi, 1
.text:0000000000002259                 xor     eax, eax
.text:000000000000225B                 call    ___fprintf_chk
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: main+42A↑j
.text:0000000000002260                                         ; main+579↓j
.text:0000000000002260                 mov     edi, 1          ; status
.text:0000000000002265                 call    usage
.text:000000000000226A ; ---------------------------------------------------------------------------
.text:000000000000226A
.text:000000000000226A loc_226A:                               ; CODE XREF: main+344↑j
.text:000000000000226A                 lea     rdx, aSRemoveLuArgum_1 ; "%s: remove %lu arguments recursively? "
.text:0000000000002271                 lea     rsi, aSRemoveLuArgum_2 ; "%s: remove %lu argument recursively? "
.text:0000000000002278                 mov     r8d, 5          ; category
.text:000000000000227E                 mov     rcx, rbx        ; n
.text:0000000000002281                 xor     edi, edi        ; domainname
.text:0000000000002283                 mov     rbp, cs:program_name
.text:000000000000228A                 call    _dcngettext
.text:000000000000228F                 jmp     loc_2125
.text:0000000000002294 ; ---------------------------------------------------------------------------
.text:0000000000002294
.text:0000000000002294 loc_2294:                               ; CODE XREF: main+324↑j
.text:0000000000002294                 lea     rdi, dev_ino_buf_6971
.text:000000000000229B                 call    get_root_dev_ino
.text:00000000000022A0                 test    rax, rax
.text:00000000000022A3                 mov     [rsp+0E8h+var_D8], rax
.text:00000000000022A8                 jnz     loc_20DA
.text:00000000000022AE                 lea     rsi, aLibs+6    ; "/"
.text:00000000000022B5                 mov     edi, 4
.text:00000000000022BA                 call    quotearg_style
.text:00000000000022BF                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:00000000000022C6                 mov     edx, 5          ; category
.text:00000000000022CB                 xor     edi, edi        ; domainname
.text:00000000000022CD                 mov     rbp, rax
.text:00000000000022D0                 call    _dcgettext
.text:00000000000022D5                 mov     rbx, rax
.text:00000000000022D8                 call    ___errno_location
.text:00000000000022DD                 mov     esi, [rax]      ; errnum
.text:00000000000022DF                 mov     rcx, rbp
.text:00000000000022E2                 mov     rdx, rbx        ; format
.text:00000000000022E5                 mov     edi, 1          ; status
.text:00000000000022EA                 xor     eax, eax
.text:00000000000022EC                 call    _error
.text:00000000000022F1
.text:00000000000022F1 loc_22F1:                               ; CODE XREF: main+1F5↑j
.text:00000000000022F1                 cmp     eax, 0FFFFFF7Eh
.text:00000000000022F6                 jnz     loc_209F
.text:00000000000022FC                 xor     edi, edi        ; status
.text:00000000000022FE                 call    usage
.text:0000000000002303 ; ---------------------------------------------------------------------------
.text:0000000000002303
.text:0000000000002303 loc_2303:                               ; CODE XREF: main+3FD↑j
.text:0000000000002303                 call    ___stack_chk_fail
.text:0000000000002308 ; ---------------------------------------------------------------------------
.text:0000000000002308
.text:0000000000002308 loc_2308:                               ; CODE XREF: main+3E4↑j
.text:0000000000002308                 lea     rsi, aMissingOperand ; "missing operand"
.text:000000000000230F                 xor     edi, edi        ; domainname
.text:0000000000002311                 mov     edx, 5          ; category
.text:0000000000002316                 call    _dcgettext
.text:000000000000231B                 xor     esi, esi        ; errnum
.text:000000000000231D                 mov     rdx, rax        ; format
.text:0000000000002320                 xor     edi, edi        ; status
.text:0000000000002322                 xor     eax, eax
.text:0000000000002324                 call    _error
.text:0000000000002329                 jmp     loc_2260
.text:000000000000232E ; ---------------------------------------------------------------------------
.text:000000000000232E
.text:000000000000232E loc_232E:                               ; CODE XREF: main+2B1↑j
.text:000000000000232E                 mov     rsi, r14
.text:0000000000002331                 mov     edi, 4
.text:0000000000002336                 call    quotearg_style
.text:000000000000233B                 lea     rsi, aUnrecognizedPr ; "unrecognized --preserve-root argument: "...
.text:0000000000002342                 mov     rbx, rax
.text:0000000000002345                 mov     edx, 5          ; category
.text:000000000000234A                 xor     edi, edi        ; domainname
.text:000000000000234C                 call    _dcgettext
.text:0000000000002351                 mov     rcx, rbx
.text:0000000000002354                 mov     rdx, rax        ; format
.text:0000000000002357                 xor     esi, esi        ; errnum
.text:0000000000002359                 mov     edi, 1          ; status
.text:000000000000235E                 xor     eax, eax
.text:0000000000002360                 call    _error
.text:0000000000002365
.text:0000000000002365 loc_2365:                               ; CODE XREF: main+27D↑j
.text:0000000000002365                 lea     rsi, aYouMayNotAbbre ; "you may not abbreviate the --no-preserv"...
.text:000000000000236C                 mov     edx, 5          ; category
.text:0000000000002371                 xor     edi, edi        ; domainname
.text:0000000000002373                 call    _dcgettext
.text:0000000000002378                 xor     esi, esi        ; errnum
.text:000000000000237A                 mov     rdx, rax        ; format
.text:000000000000237D                 mov     edi, 1          ; status
.text:0000000000002382                 xor     eax, eax
.text:0000000000002384                 call    _error
.text:0000000000002384 ; } // starts at 1DB0
.text:0000000000002389                 nop     dword ptr [rax+00000000h]
.text:0000000000002389 main            endp ; sp-analysis failed
.text:0000000000002389
.text:0000000000002390
.text:0000000000002390 ; =============== S U B R O U T I N E =======================================
.text:0000000000002390
.text:0000000000002390 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002390
.text:0000000000002390 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002390                 public start
.text:0000000000002390 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002390 ; __unwind {
.text:0000000000002390                 xor     ebp, ebp
.text:0000000000002392                 mov     r9, rdx         ; rtld_fini
.text:0000000000002395                 pop     rsi             ; argc
.text:0000000000002396                 mov     rdx, rsp        ; ubp_av
.text:0000000000002399                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000239D                 push    rax
.text:000000000000239E                 push    rsp             ; stack_end
.text:000000000000239F                 lea     r8, __libc_csu_fini ; fini
.text:00000000000023A6                 lea     rcx, __libc_csu_init ; init
.text:00000000000023AD                 lea     rdi, main       ; main
.text:00000000000023B4                 call    cs:__libc_start_main_ptr
.text:00000000000023BA                 hlt
.text:00000000000023BA ; } // starts at 2390
.text:00000000000023BA start           endp
.text:00000000000023BA
.text:00000000000023BA ; ---------------------------------------------------------------------------
.text:00000000000023BB                 align 20h
.text:00000000000023C0
.text:00000000000023C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023C0
.text:00000000000023C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000023C0
.text:00000000000023C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2473↓p
.text:00000000000023C0                 lea     rdi, __bss_start
.text:00000000000023C7                 push    rbp
.text:00000000000023C8                 lea     rax, __bss_start
.text:00000000000023CF                 cmp     rax, rdi
.text:00000000000023D2                 mov     rbp, rsp
.text:00000000000023D5                 jz      short loc_23F0
.text:00000000000023D7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000023DE                 test    rax, rax
.text:00000000000023E1                 jz      short loc_23F0
.text:00000000000023E3                 pop     rbp
.text:00000000000023E4                 jmp     rax
.text:00000000000023E4 ; ---------------------------------------------------------------------------
.text:00000000000023E6                 align 10h
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000023F0                                         ; deregister_tm_clones+21↑j
.text:00000000000023F0                 pop     rbp
.text:00000000000023F1                 retn
.text:00000000000023F1 deregister_tm_clones endp
.text:00000000000023F1
.text:00000000000023F1 ; ---------------------------------------------------------------------------
.text:00000000000023F2                 align 20h
.text:0000000000002400
.text:0000000000002400 ; =============== S U B R O U T I N E =======================================
.text:0000000000002400
.text:0000000000002400 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002400
.text:0000000000002400 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002400                 lea     rdi, __bss_start
.text:0000000000002407                 lea     rsi, __bss_start
.text:000000000000240E                 push    rbp
.text:000000000000240F                 sub     rsi, rdi
.text:0000000000002412                 mov     rbp, rsp
.text:0000000000002415                 sar     rsi, 3
.text:0000000000002419                 mov     rax, rsi
.text:000000000000241C                 shr     rax, 3Fh
.text:0000000000002420                 add     rsi, rax
.text:0000000000002423                 sar     rsi, 1
.text:0000000000002426                 jz      short loc_2440
.text:0000000000002428                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000242F                 test    rax, rax
.text:0000000000002432                 jz      short loc_2440
.text:0000000000002434                 pop     rbp
.text:0000000000002435                 jmp     rax
.text:0000000000002435 ; ---------------------------------------------------------------------------
.text:0000000000002437                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002440                                         ; register_tm_clones+32↑j
.text:0000000000002440                 pop     rbp
.text:0000000000002441                 retn
.text:0000000000002441 register_tm_clones endp
.text:0000000000002441
.text:0000000000002441 ; ---------------------------------------------------------------------------
.text:0000000000002442                 align 10h
.text:0000000000002450
.text:0000000000002450 ; =============== S U B R O U T I N E =======================================
.text:0000000000002450
.text:0000000000002450 ; Attributes: info_from_lumina
.text:0000000000002450
.text:0000000000002450 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002450                 cmp     cs:completed_7697, 0
.text:0000000000002457                 jnz     short locret_2488
.text:0000000000002459                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002461                 push    rbp
.text:0000000000002462                 mov     rbp, rsp
.text:0000000000002465                 jz      short loc_2473
.text:0000000000002467                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000246E                 call    __cxa_finalize
.text:0000000000002473
.text:0000000000002473 loc_2473:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002473                 call    deregister_tm_clones
.text:0000000000002478                 mov     cs:completed_7697, 1
.text:000000000000247F                 pop     rbp
.text:0000000000002480                 retn
.text:0000000000002480 ; ---------------------------------------------------------------------------
.text:0000000000002481                 align 8
.text:0000000000002488
.text:0000000000002488 locret_2488:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002488                 rep retn
.text:0000000000002488 __do_global_dtors_aux endp
.text:0000000000002488
.text:0000000000002488 ; ---------------------------------------------------------------------------
.text:000000000000248A                 align 10h
.text:0000000000002490
.text:0000000000002490 ; =============== S U B R O U T I N E =======================================
.text:0000000000002490
.text:0000000000002490 ; Attributes: bp-based frame
.text:0000000000002490
.text:0000000000002490 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002490                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002490                 push    rbp
.text:0000000000002491                 mov     rbp, rsp
.text:0000000000002494                 pop     rbp
.text:0000000000002495                 jmp     register_tm_clones
.text:0000000000002495 frame_dummy     endp
.text:0000000000002495
.text:0000000000002495 ; ---------------------------------------------------------------------------
.text:000000000000249A                 align 20h
.text:00000000000024A0
.text:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024A0
.text:00000000000024A0 ; Attributes: noreturn
.text:00000000000024A0
.text:00000000000024A0 ; void __fastcall __noreturn usage(int status)
.text:00000000000024A0                 public usage
.text:00000000000024A0 usage           proc near               ; CODE XREF: main+4B5↑p
.text:00000000000024A0                                         ; main+54E↑p ...
.text:00000000000024A0
.text:00000000000024A0 var_A8          = qword ptr -0A8h
.text:00000000000024A0 var_A0          = qword ptr -0A0h
.text:00000000000024A0 var_98          = qword ptr -98h
.text:00000000000024A0 var_90          = qword ptr -90h
.text:00000000000024A0 var_88          = qword ptr -88h
.text:00000000000024A0 var_80          = qword ptr -80h
.text:00000000000024A0 var_78          = qword ptr -78h
.text:00000000000024A0 var_70          = qword ptr -70h
.text:00000000000024A0 var_68          = qword ptr -68h
.text:00000000000024A0 var_60          = qword ptr -60h
.text:00000000000024A0 var_58          = qword ptr -58h
.text:00000000000024A0 var_50          = qword ptr -50h
.text:00000000000024A0 var_48          = qword ptr -48h
.text:00000000000024A0 var_40          = qword ptr -40h
.text:00000000000024A0 var_30          = qword ptr -30h
.text:00000000000024A0
.text:00000000000024A0 ; __unwind {
.text:00000000000024A0                 push    r13
.text:00000000000024A2                 push    r12
.text:00000000000024A4                 mov     edx, 5          ; category
.text:00000000000024A9                 push    rbp
.text:00000000000024AA                 push    rbx
.text:00000000000024AB                 mov     ebp, edi
.text:00000000000024AD                 sub     rsp, 88h
.text:00000000000024B4                 mov     rbx, cs:program_name
.text:00000000000024BB                 mov     rax, fs:28h
.text:00000000000024C4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000024C9                 xor     eax, eax
.text:00000000000024CB                 test    edi, edi
.text:00000000000024CD                 jz      short loc_24FD
.text:00000000000024CF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000024D6                 xor     edi, edi        ; domainname
.text:00000000000024D8                 call    _dcgettext
.text:00000000000024DD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000024E4                 mov     rdx, rax
.text:00000000000024E7                 mov     rcx, rbx
.text:00000000000024EA                 mov     esi, 1
.text:00000000000024EF                 xor     eax, eax
.text:00000000000024F1                 call    ___fprintf_chk
.text:00000000000024F6
.text:00000000000024F6 loc_24F6:                               ; CODE XREF: usage+386↓j
.text:00000000000024F6                 mov     edi, ebp        ; status
.text:00000000000024F8                 call    _exit
.text:00000000000024FD ; ---------------------------------------------------------------------------
.text:00000000000024FD
.text:00000000000024FD loc_24FD:                               ; CODE XREF: usage+2D↑j
.text:00000000000024FD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000002504                 xor     edi, edi        ; domainname
.text:0000000000002506                 call    _dcgettext
.text:000000000000250B                 mov     rdx, rbx
.text:000000000000250E                 mov     rsi, rax
.text:0000000000002511                 mov     edi, 1
.text:0000000000002516                 xor     eax, eax
.text:0000000000002518                 call    ___printf_chk
.text:000000000000251D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002524                 lea     rsi, aRemoveUnlinkTh ; "Remove (unlink) the FILE(s).\n\n  -f, -"...
.text:000000000000252B                 mov     edx, 5          ; category
.text:0000000000002530                 xor     edi, edi        ; domainname
.text:0000000000002532                 call    _dcgettext
.text:0000000000002537                 mov     rsi, rbx        ; stream
.text:000000000000253A                 mov     rdi, rax        ; s
.text:000000000000253D                 call    _fputs_unlocked
.text:0000000000002542                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002549                 lea     rsi, aIPromptOnceBef ; "  -I                    prompt once bef"...
.text:0000000000002550                 mov     edx, 5          ; category
.text:0000000000002555                 xor     edi, edi        ; domainname
.text:0000000000002557                 call    _dcgettext
.text:000000000000255C                 mov     rsi, rbx        ; stream
.text:000000000000255F                 mov     rdi, rax        ; s
.text:0000000000002562                 call    _fputs_unlocked
.text:0000000000002567                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000256E                 lea     rsi, aOneFileSystemW ; "      --one-file-system  when removing "...
.text:0000000000002575                 mov     edx, 5          ; category
.text:000000000000257A                 xor     edi, edi        ; domainname
.text:000000000000257C                 call    _dcgettext
.text:0000000000002581                 mov     rsi, rbx        ; stream
.text:0000000000002584                 mov     rdi, rax        ; s
.text:0000000000002587                 call    _fputs_unlocked
.text:000000000000258C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002593                 lea     rsi, aNoPreserveRoot_0 ; "      --no-preserve-root  do not treat "...
.text:000000000000259A                 mov     edx, 5          ; category
.text:000000000000259F                 xor     edi, edi        ; domainname
.text:00000000000025A1                 call    _dcgettext
.text:00000000000025A6                 mov     rsi, rbx        ; stream
.text:00000000000025A9                 mov     rdi, rax        ; s
.text:00000000000025AC                 call    _fputs_unlocked
.text:00000000000025B1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000025B8                 lea     rsi, aRRRecursiveRem ; "  -r, -R, --recursive   remove director"...
.text:00000000000025BF                 mov     edx, 5          ; category
.text:00000000000025C4                 xor     edi, edi        ; domainname
.text:00000000000025C6                 call    _dcgettext
.text:00000000000025CB                 mov     rsi, rbx        ; stream
.text:00000000000025CE                 mov     rdi, rax        ; s
.text:00000000000025D1                 call    _fputs_unlocked
.text:00000000000025D6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000025DD                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000025E4                 mov     edx, 5          ; category
.text:00000000000025E9                 xor     edi, edi        ; domainname
.text:00000000000025EB                 call    _dcgettext
.text:00000000000025F0                 mov     rsi, rbx        ; stream
.text:00000000000025F3                 mov     rdi, rax        ; s
.text:00000000000025F6                 call    _fputs_unlocked
.text:00000000000025FB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002602                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002609                 mov     edx, 5          ; category
.text:000000000000260E                 xor     edi, edi        ; domainname
.text:0000000000002610                 call    _dcgettext
.text:0000000000002615                 mov     rsi, rbx        ; stream
.text:0000000000002618                 mov     rdi, rax        ; s
.text:000000000000261B                 call    _fputs_unlocked
.text:0000000000002620                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002627                 lea     rsi, aByDefaultRmDoe ; "\nBy default, rm does not remove direct"...
.text:000000000000262E                 mov     edx, 5          ; category
.text:0000000000002633                 xor     edi, edi        ; domainname
.text:0000000000002635                 call    _dcgettext
.text:000000000000263A                 mov     rsi, rbx        ; stream
.text:000000000000263D                 mov     rdi, rax        ; s
.text:0000000000002640                 call    _fputs_unlocked
.text:0000000000002645                 mov     rbx, cs:program_name
.text:000000000000264C                 lea     rsi, aToRemoveAFileW ; "\nTo remove a file whose name starts wi"...
.text:0000000000002653                 xor     edi, edi        ; domainname
.text:0000000000002655                 mov     edx, 5          ; category
.text:000000000000265A                 call    _dcgettext
.text:000000000000265F                 mov     rcx, rbx
.text:0000000000002662                 mov     rdx, rbx
.text:0000000000002665                 mov     rsi, rax
.text:0000000000002668                 mov     edi, 1
.text:000000000000266D                 xor     eax, eax
.text:000000000000266F                 call    ___printf_chk
.text:0000000000002674                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000267B                 lea     rsi, aNoteThatIfYouU ; "\nNote that if you use rm to remove a f"...
.text:0000000000002682                 mov     edx, 5          ; category
.text:0000000000002687                 xor     edi, edi        ; domainname
.text:0000000000002689                 call    _dcgettext
.text:000000000000268E                 mov     rsi, rbx        ; stream
.text:0000000000002691                 mov     rdi, rax        ; s
.text:0000000000002694                 lea     rbx, unk_A924
.text:000000000000269B                 call    _fputs_unlocked
.text:00000000000026A0                 lea     rax, unk_A927
.text:00000000000026A7                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000026AE                 mov     [rsp+0A8h+var_48], 0
.text:00000000000026B7                 mov     [rsp+0A8h+var_40], 0
.text:00000000000026C0                 mov     rdx, rsp
.text:00000000000026C3                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000026C7                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000026CE                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000026D3                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000026DA                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000026DF                 lea     rax, domainname ; "coreutils"
.text:00000000000026E6                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000026EB                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000026F2                 mov     [rsp+0A8h+var_98], rax
.text:00000000000026F7                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000026FE                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002703                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002708                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000270F                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002714                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000271B                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002720                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002725                 mov     [rsp+0A8h+var_60], rax
.text:000000000000272A                 mov     [rsp+0A8h+var_50], rax
.text:000000000000272F                 nop
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: usage+2AD↓j
.text:0000000000002730                 add     rdx, 10h
.text:0000000000002734                 mov     rdi, [rdx]
.text:0000000000002737                 test    rdi, rdi
.text:000000000000273A                 jz      short loc_274F
.text:000000000000273C                 mov     ecx, 3
.text:0000000000002741                 mov     rsi, rbx
.text:0000000000002744                 repe cmpsb
.text:0000000000002746                 setnbe  al
.text:0000000000002749                 sbb     al, 0
.text:000000000000274B                 test    al, al
.text:000000000000274D                 jnz     short loc_2730
.text:000000000000274F
.text:000000000000274F loc_274F:                               ; CODE XREF: usage+29A↑j
.text:000000000000274F                 mov     r12, [rdx+8]
.text:0000000000002753                 xor     edi, edi        ; domainname
.text:0000000000002755                 mov     edx, 5          ; category
.text:000000000000275A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002761                 test    r12, r12
.text:0000000000002764                 jz      loc_282B
.text:000000000000276A                 call    _dcgettext
.text:000000000000276F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002776                 lea     rdx, unk_A99D
.text:000000000000277D                 mov     rsi, rax
.text:0000000000002780                 mov     edi, 1
.text:0000000000002785                 xor     eax, eax
.text:0000000000002787                 call    ___printf_chk
.text:000000000000278C                 xor     esi, esi        ; locale
.text:000000000000278E                 mov     edi, 5          ; category
.text:0000000000002793                 call    _setlocale
.text:0000000000002798                 test    rax, rax
.text:000000000000279B                 jz      short loc_27B9
.text:000000000000279D                 lea     rsi, aEn        ; "en_"
.text:00000000000027A4                 mov     edx, 3          ; n
.text:00000000000027A9                 mov     rdi, rax        ; s1
.text:00000000000027AC                 call    _strncmp
.text:00000000000027B1                 test    eax, eax
.text:00000000000027B3                 jnz     loc_28C0
.text:00000000000027B9
.text:00000000000027B9 loc_27B9:                               ; CODE XREF: usage+2FB↑j
.text:00000000000027B9                                         ; usage+445↓j
.text:00000000000027B9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000027C0                 xor     edi, edi        ; domainname
.text:00000000000027C2                 mov     edx, 5          ; category
.text:00000000000027C7                 call    _dcgettext
.text:00000000000027CC                 lea     rcx, unk_A924
.text:00000000000027D3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000027DA                 mov     rsi, rax
.text:00000000000027DD                 mov     edi, 1
.text:00000000000027E2                 xor     eax, eax
.text:00000000000027E4                 call    ___printf_chk
.text:00000000000027E9                 cmp     r12, rbx
.text:00000000000027EC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000027F3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000027FA                 cmovz   rbx, rcx
.text:00000000000027FE
.text:00000000000027FE loc_27FE:                               ; CODE XREF: usage+414↓j
.text:00000000000027FE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002805                 xor     edi, edi        ; domainname
.text:0000000000002807                 mov     edx, 5          ; category
.text:000000000000280C                 call    _dcgettext
.text:0000000000002811                 mov     rcx, rbx
.text:0000000000002814                 mov     rsi, rax
.text:0000000000002817                 mov     rdx, r12
.text:000000000000281A                 mov     edi, 1
.text:000000000000281F                 xor     eax, eax
.text:0000000000002821                 call    ___printf_chk
.text:0000000000002826                 jmp     loc_24F6
.text:000000000000282B ; ---------------------------------------------------------------------------
.text:000000000000282B
.text:000000000000282B loc_282B:                               ; CODE XREF: usage+2C4↑j
.text:000000000000282B                 call    _dcgettext
.text:0000000000002830                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002837                 lea     rdx, unk_A99D
.text:000000000000283E                 mov     rsi, rax
.text:0000000000002841                 mov     edi, 1
.text:0000000000002846                 xor     eax, eax
.text:0000000000002848                 call    ___printf_chk
.text:000000000000284D                 xor     esi, esi        ; locale
.text:000000000000284F                 mov     edi, 5          ; category
.text:0000000000002854                 call    _setlocale
.text:0000000000002859                 test    rax, rax
.text:000000000000285C                 jz      short loc_2876
.text:000000000000285E                 lea     rsi, aEn        ; "en_"
.text:0000000000002865                 mov     edx, 3          ; n
.text:000000000000286A                 mov     rdi, rax        ; s1
.text:000000000000286D                 call    _strncmp
.text:0000000000002872                 test    eax, eax
.text:0000000000002874                 jnz     short loc_28B9
.text:0000000000002876
.text:0000000000002876 loc_2876:                               ; CODE XREF: usage+3BC↑j
.text:0000000000002876                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000287D                 mov     edx, 5          ; category
.text:0000000000002882                 xor     edi, edi        ; domainname
.text:0000000000002884                 lea     r12, unk_A924
.text:000000000000288B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002892                 call    _dcgettext
.text:0000000000002897                 lea     rcx, unk_A924
.text:000000000000289E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000028A5                 mov     rsi, rax
.text:00000000000028A8                 mov     edi, 1
.text:00000000000028AD                 xor     eax, eax
.text:00000000000028AF                 call    ___printf_chk
.text:00000000000028B4                 jmp     loc_27FE
.text:00000000000028B9 ; ---------------------------------------------------------------------------
.text:00000000000028B9
.text:00000000000028B9 loc_28B9:                               ; CODE XREF: usage+3D4↑j
.text:00000000000028B9                 lea     r12, unk_A924
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: usage+313↑j
.text:00000000000028C0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000028C7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000028CE                 xor     edi, edi        ; domainname
.text:00000000000028D0                 mov     edx, 5          ; category
.text:00000000000028D5                 call    _dcgettext
.text:00000000000028DA                 mov     rsi, r13        ; stream
.text:00000000000028DD                 mov     rdi, rax        ; s
.text:00000000000028E0                 call    _fputs_unlocked
.text:00000000000028E5                 jmp     loc_27B9
.text:00000000000028E5 ; } // starts at 24A0
.text:00000000000028E5 usage           endp
.text:00000000000028E5
.text:00000000000028E5 ; ---------------------------------------------------------------------------
.text:00000000000028EA                 align 10h
.text:00000000000028F0
.text:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028F0
.text:00000000000028F0
.text:00000000000028F0 excise          proc near               ; CODE XREF: rm+424↓p
.text:00000000000028F0                                         ; rm+449↓p
.text:00000000000028F0
.text:00000000000028F0 var_30          = qword ptr -30h
.text:00000000000028F0
.text:00000000000028F0 ; __unwind {
.text:00000000000028F0                 push    r13
.text:00000000000028F2                 push    r12
.text:00000000000028F4                 mov     r13, rdx
.text:00000000000028F7                 push    rbp
.text:00000000000028F8                 push    rbx
.text:00000000000028F9                 xor     edx, edx
.text:00000000000028FB                 mov     r12, rdi
.text:00000000000028FE                 mov     rbx, rsi
.text:0000000000002901                 mov     ebp, ecx
.text:0000000000002903                 sub     rsp, 0A8h
.text:000000000000290A                 mov     rsi, [rsi+30h]  ; name
.text:000000000000290E                 mov     edi, [rdi+2Ch]  ; fd
.text:0000000000002911                 mov     rax, fs:28h
.text:000000000000291A                 mov     [rsp+0C8h+var_30], rax
.text:0000000000002922                 xor     eax, eax
.text:0000000000002924                 test    cl, cl
.text:0000000000002926                 setnz   dl
.text:0000000000002929                 shl     edx, 9          ; flag
.text:000000000000292C                 call    _unlinkat
.text:0000000000002931                 test    eax, eax
.text:0000000000002933                 jnz     short loc_2970
.text:0000000000002935                 cmp     byte ptr [r13+1Ah], 0
.text:000000000000293A                 mov     eax, 2
.text:000000000000293F                 jnz     loc_2A28
.text:0000000000002945
.text:0000000000002945 loc_2945:                               ; CODE XREF: excise+12F↓j
.text:0000000000002945                                         ; excise+17C↓j ...
.text:0000000000002945                 mov     rcx, [rsp+0C8h+var_30]
.text:000000000000294D                 xor     rcx, fs:28h
.text:0000000000002956                 jnz     loc_2B38
.text:000000000000295C                 add     rsp, 0A8h
.text:0000000000002963                 pop     rbx
.text:0000000000002964                 pop     rbp
.text:0000000000002965                 pop     r12
.text:0000000000002967                 pop     r13
.text:0000000000002969                 retn
.text:0000000000002969 ; ---------------------------------------------------------------------------
.text:000000000000296A                 align 10h
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: excise+43↑j
.text:0000000000002970                 call    ___errno_location
.text:0000000000002975                 mov     edx, [rax]
.text:0000000000002977                 mov     rbp, rax
.text:000000000000297A                 cmp     edx, 1Eh
.text:000000000000297D                 jz      loc_2A78
.text:0000000000002983                 cmp     byte ptr [r13+0], 0
.text:0000000000002988                 jz      short loc_29B0
.text:000000000000298A                 cmp     edx, 14h
.text:000000000000298D                 jz      loc_2AF9
.text:0000000000002993                 jle     loc_2AF0
.text:0000000000002999                 cmp     edx, 16h
.text:000000000000299C                 jz      loc_2AF9
.text:00000000000029A2                 cmp     edx, 54h ; 'T'
.text:00000000000029A5                 jz      loc_2AF9
.text:00000000000029AB                 nop     dword ptr [rax+rax+00h]
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: excise+98↑j
.text:00000000000029B0                                         ; excise+203↓j
.text:00000000000029B0                 cmp     word ptr [rbx+70h], 4
.text:00000000000029B5                 jz      loc_2AB0
.text:00000000000029BB
.text:00000000000029BB loc_29BB:                               ; CODE XREF: excise+1B7↓j
.text:00000000000029BB                                         ; excise+1C3↓j ...
.text:00000000000029BB                 mov     rsi, [rbx+38h]
.text:00000000000029BF                 mov     edi, 4
.text:00000000000029C4                 call    quotearg_style
.text:00000000000029C9                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:00000000000029D0                 xor     edi, edi        ; domainname
.text:00000000000029D2                 mov     edx, 5          ; category
.text:00000000000029D7                 mov     r12, rax
.text:00000000000029DA                 call    _dcgettext
.text:00000000000029DF                 mov     esi, [rbp+0]    ; errnum
.text:00000000000029E2                 mov     rdx, rax        ; format
.text:00000000000029E5                 xor     edi, edi        ; status
.text:00000000000029E7                 xor     eax, eax
.text:00000000000029E9                 mov     rcx, r12
.text:00000000000029EC                 call    _error
.text:00000000000029F1                 mov     rax, [rbx+8]
.text:00000000000029F5                 cmp     qword ptr [rax+58h], 0
.text:00000000000029FA                 jns     short loc_2A13
.text:00000000000029FC                 jmp     short loc_2A1A
.text:00000000000029FC ; ---------------------------------------------------------------------------
.text:00000000000029FE                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: excise+128↓j
.text:0000000000002A00                 mov     qword ptr [rax+20h], 1
.text:0000000000002A08                 mov     rax, [rax+8]
.text:0000000000002A0C                 cmp     qword ptr [rax+58h], 0
.text:0000000000002A11                 js      short loc_2A1A
.text:0000000000002A13
.text:0000000000002A13 loc_2A13:                               ; CODE XREF: excise+10A↑j
.text:0000000000002A13                 cmp     qword ptr [rax+20h], 0
.text:0000000000002A18                 jz      short loc_2A00
.text:0000000000002A1A
.text:0000000000002A1A loc_2A1A:                               ; CODE XREF: excise+10C↑j
.text:0000000000002A1A                                         ; excise+121↑j
.text:0000000000002A1A                 mov     eax, 4
.text:0000000000002A1F                 jmp     loc_2945
.text:0000000000002A1F ; ---------------------------------------------------------------------------
.text:0000000000002A24                 align 8
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: excise+4F↑j
.text:0000000000002A28                 mov     rsi, [rbx+38h]
.text:0000000000002A2C                 mov     edi, 4
.text:0000000000002A31                 call    quotearg_style
.text:0000000000002A36                 test    bpl, bpl
.text:0000000000002A39                 mov     rbx, rax
.text:0000000000002A3C                 mov     edx, 5          ; category
.text:0000000000002A41                 jz      loc_2B08
.text:0000000000002A47                 lea     rsi, aRemovedDirecto ; "removed directory %s\n"
.text:0000000000002A4E                 xor     edi, edi        ; domainname
.text:0000000000002A50                 call    _dcgettext
.text:0000000000002A55
.text:0000000000002A55 loc_2A55:                               ; CODE XREF: excise+226↓j
.text:0000000000002A55                 mov     rsi, rax
.text:0000000000002A58                 mov     rdx, rbx
.text:0000000000002A5B                 mov     edi, 1
.text:0000000000002A60                 xor     eax, eax
.text:0000000000002A62                 call    ___printf_chk
.text:0000000000002A67                 mov     eax, 2
.text:0000000000002A6C                 jmp     loc_2945
.text:0000000000002A6C ; ---------------------------------------------------------------------------
.text:0000000000002A71                 align 8
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: excise+8D↑j
.text:0000000000002A78                 mov     rdx, [rbx+30h]  ; filename
.text:0000000000002A7C                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000002A81                 mov     rcx, rsp        ; stat_buf
.text:0000000000002A84                 mov     r8d, 100h       ; flag
.text:0000000000002A8A                 mov     edi, 1          ; ver
.text:0000000000002A8F                 call    ___fxstatat
.text:0000000000002A94                 test    eax, eax
.text:0000000000002A96                 jz      short loc_2AA0
.text:0000000000002A98                 mov     edx, [rbp+0]
.text:0000000000002A9B                 cmp     edx, 2
.text:0000000000002A9E                 jz      short loc_2B1B
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: excise+1A6↑j
.text:0000000000002AA0                 mov     dword ptr [rbp+0], 1Eh
.text:0000000000002AA7                 jmp     loc_29BB
.text:0000000000002AA7 ; ---------------------------------------------------------------------------
.text:0000000000002AAC                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: excise+C5↑j
.text:0000000000002AB0                 cmp     edx, 27h ; '''
.text:0000000000002AB3                 ja      loc_29BB
.text:0000000000002AB9
.text:0000000000002AB9 loc_2AB9:                               ; CODE XREF: excise+246↓j
.text:0000000000002AB9                 mov     rax, 8000320000h
.text:0000000000002AC3                 bt      rax, rdx
.text:0000000000002AC7                 jnb     loc_29BB
.text:0000000000002ACD                 mov     eax, [rbx+40h]
.text:0000000000002AD0                 cmp     eax, 1
.text:0000000000002AD3                 jz      short loc_2ADE
.text:0000000000002AD5                 cmp     eax, 0Dh
.text:0000000000002AD8                 jnz     loc_29BB
.text:0000000000002ADE
.text:0000000000002ADE loc_2ADE:                               ; CODE XREF: excise+1E3↑j
.text:0000000000002ADE                 mov     [rbp+0], eax
.text:0000000000002AE1                 jmp     loc_29BB
.text:0000000000002AE1 ; ---------------------------------------------------------------------------
.text:0000000000002AE6                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: excise+A3↑j
.text:0000000000002AF0                 cmp     edx, 2
.text:0000000000002AF3                 jnz     loc_29B0
.text:0000000000002AF9
.text:0000000000002AF9 loc_2AF9:                               ; CODE XREF: excise+9D↑j
.text:0000000000002AF9                                         ; excise+AC↑j ...
.text:0000000000002AF9                 mov     eax, 2
.text:0000000000002AFE                 jmp     loc_2945
.text:0000000000002AFE ; ---------------------------------------------------------------------------
.text:0000000000002B03                 align 8
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: excise+151↑j
.text:0000000000002B08                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000002B0F                 xor     edi, edi        ; domainname
.text:0000000000002B11                 call    _dcgettext
.text:0000000000002B16                 jmp     loc_2A55
.text:0000000000002B1B ; ---------------------------------------------------------------------------
.text:0000000000002B1B
.text:0000000000002B1B loc_2B1B:                               ; CODE XREF: excise+1AE↑j
.text:0000000000002B1B                 cmp     byte ptr [r13+0], 0
.text:0000000000002B20                 mov     eax, 2
.text:0000000000002B25                 jnz     loc_2945
.text:0000000000002B2B                 cmp     word ptr [rbx+70h], 4
.text:0000000000002B30                 jnz     loc_29BB
.text:0000000000002B36                 jmp     short loc_2AB9
.text:0000000000002B38 ; ---------------------------------------------------------------------------
.text:0000000000002B38
.text:0000000000002B38 loc_2B38:                               ; CODE XREF: excise+66↑j
.text:0000000000002B38                 call    ___stack_chk_fail
.text:0000000000002B38 ; } // starts at 28F0
.text:0000000000002B38 excise          endp
.text:0000000000002B38
.text:0000000000002B38 ; ---------------------------------------------------------------------------
.text:0000000000002B3D                 align 20h
.text:0000000000002B40
.text:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B40
.text:0000000000002B40
.text:0000000000002B40 ; __int64 __fastcall cache_fstatat_constprop_3(int fildes, char *filename, struct stat *stat_buf)
.text:0000000000002B40 cache_fstatat_constprop_3 proc near     ; CODE XREF: prompt+16F↓p
.text:0000000000002B40                                         ; prompt+1B7↓p ...
.text:0000000000002B40 ; __unwind {
.text:0000000000002B40                 push    rbx
.text:0000000000002B41                 mov     rax, [rdx+30h]
.text:0000000000002B45                 mov     rbx, rdx
.text:0000000000002B48                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B4C                 jz      short loc_2B60
.text:0000000000002B4E
.text:0000000000002B4E loc_2B4E:                               ; CODE XREF: cache_fstatat_constprop_3+64↓j
.text:0000000000002B4E                 test    rax, rax
.text:0000000000002B51                 js      short loc_2BA6
.text:0000000000002B53                 xor     eax, eax
.text:0000000000002B55                 pop     rbx
.text:0000000000002B56                 retn
.text:0000000000002B56 ; ---------------------------------------------------------------------------
.text:0000000000002B57                 align 20h
.text:0000000000002B60
.text:0000000000002B60 loc_2B60:                               ; CODE XREF: cache_fstatat_constprop_3+C↑j
.text:0000000000002B60                 mov     rcx, rdx        ; stat_buf
.text:0000000000002B63                 mov     r8d, 100h       ; flag
.text:0000000000002B69                 mov     rdx, rsi        ; filename
.text:0000000000002B6C                 mov     esi, edi        ; fildes
.text:0000000000002B6E                 mov     edi, 1          ; ver
.text:0000000000002B73                 call    ___fxstatat
.text:0000000000002B78                 test    eax, eax
.text:0000000000002B7A                 jz      short loc_2BA0
.text:0000000000002B7C                 mov     qword ptr [rbx+30h], 0FFFFFFFFFFFFFFFEh
.text:0000000000002B84                 call    ___errno_location
.text:0000000000002B89                 movsxd  rdx, dword ptr [rax]
.text:0000000000002B8C                 mov     [rbx+8], rdx
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: cache_fstatat_constprop_3+6F↓j
.text:0000000000002B90                 mov     [rax], edx
.text:0000000000002B92                 mov     eax, 0FFFFFFFFh
.text:0000000000002B97                 pop     rbx
.text:0000000000002B98                 retn
.text:0000000000002B98 ; ---------------------------------------------------------------------------
.text:0000000000002B99                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: cache_fstatat_constprop_3+3A↑j
.text:0000000000002BA0                 mov     rax, [rbx+30h]
.text:0000000000002BA4                 jmp     short loc_2B4E
.text:0000000000002BA6 ; ---------------------------------------------------------------------------
.text:0000000000002BA6
.text:0000000000002BA6 loc_2BA6:                               ; CODE XREF: cache_fstatat_constprop_3+11↑j
.text:0000000000002BA6                 call    ___errno_location
.text:0000000000002BAB                 mov     rdx, [rbx+8]
.text:0000000000002BAF                 jmp     short loc_2B90
.text:0000000000002BAF ; } // starts at 2B40
.text:0000000000002BAF cache_fstatat_constprop_3 endp
.text:0000000000002BAF
.text:0000000000002BAF ; ---------------------------------------------------------------------------
.text:0000000000002BB1                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0
.text:0000000000002BC0 prompt          proc near               ; CODE XREF: rm+1AB↓p
.text:0000000000002BC0                                         ; rm+341↓p
.text:0000000000002BC0
.text:0000000000002BC0 var_F0          = qword ptr -0F0h
.text:0000000000002BC0 fildes          = dword ptr -0E8h
.text:0000000000002BC0 var_E4          = dword ptr -0E4h
.text:0000000000002BC0 fd              = dword ptr -0E0h
.text:0000000000002BC0 stat_buf        = stat ptr -0D8h
.text:0000000000002BC0 var_40          = qword ptr -40h
.text:0000000000002BC0
.text:0000000000002BC0 ; __unwind {
.text:0000000000002BC0                 push    r15
.text:0000000000002BC2                 push    r14
.text:0000000000002BC4                 push    r13
.text:0000000000002BC6                 push    r12
.text:0000000000002BC8                 mov     r13, rcx
.text:0000000000002BCB                 push    rbp
.text:0000000000002BCC                 push    rbx
.text:0000000000002BCD                 mov     rbx, rsi
.text:0000000000002BD0                 sub     rsp, 0C8h
.text:0000000000002BD7                 mov     edi, [rdi+2Ch]  ; fd
.text:0000000000002BDA                 mov     r15, [rsi+30h]
.text:0000000000002BDE                 mov     rax, fs:28h
.text:0000000000002BE7                 mov     [rsp+0F8h+var_40], rax
.text:0000000000002BEF                 xor     eax, eax
.text:0000000000002BF1                 mov     rax, [rsi+38h]
.text:0000000000002BF5                 test    r9, r9
.text:0000000000002BF8                 mov     [rsp+0F8h+var_E4], r8d
.text:0000000000002BFD                 mov     [rsp+0F8h+fildes], edi
.text:0000000000002C01                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000002C06                 jz      loc_2DF0
.text:0000000000002C0C                 xor     ebp, ebp
.text:0000000000002C0E                 test    dl, dl
.text:0000000000002C10                 mov     dword ptr [r9], 2
.text:0000000000002C17                 setnz   bpl
.text:0000000000002C1B                 mov     edx, 30900h     ; oflag
.text:0000000000002C20                 xor     eax, eax
.text:0000000000002C22                 mov     rsi, r15        ; file
.text:0000000000002C25                 mov     r12, r9
.text:0000000000002C28                 mov     [rsp+0F8h+stat_buf.st_size], 0FFFFFFFFFFFFFFFFh
.text:0000000000002C31                 shl     ebp, 2
.text:0000000000002C34                 call    _openat
.text:0000000000002C39                 test    eax, eax
.text:0000000000002C3B                 js      short loc_2CA5
.text:0000000000002C3D                 mov     edi, eax        ; fd
.text:0000000000002C3F                 mov     [rsp+0F8h+fd], eax
.text:0000000000002C43                 call    _fdopendir
.text:0000000000002C48                 test    rax, rax
.text:0000000000002C4B                 mov     r14, rax
.text:0000000000002C4E                 mov     edx, [rsp+0F8h+fd]
.text:0000000000002C52                 jz      loc_2EB0
.text:0000000000002C58                 call    ___errno_location
.text:0000000000002C5D                 mov     qword ptr [rsp+0F8h+fd], rax
.text:0000000000002C62                 mov     dword ptr [rax], 0
.text:0000000000002C68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: prompt+D7↓j
.text:0000000000002C70                                         ; prompt+DB↓j
.text:0000000000002C70                 mov     rdi, r14        ; dirp
.text:0000000000002C73                 call    _readdir
.text:0000000000002C78                 test    rax, rax
.text:0000000000002C7B                 jz      loc_2EC8
.text:0000000000002C81                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000002C85                 jnz     short loc_2C9D
.text:0000000000002C87                 xor     edx, edx
.text:0000000000002C89                 cmp     byte ptr [rax+14h], 2Eh ; '.'
.text:0000000000002C8D                 setz    dl
.text:0000000000002C90                 movzx   eax, byte ptr [rax+rdx+14h]
.text:0000000000002C95                 test    al, al
.text:0000000000002C97                 jz      short loc_2C70
.text:0000000000002C99                 cmp     al, 2Fh ; '/'
.text:0000000000002C9B                 jz      short loc_2C70
.text:0000000000002C9D
.text:0000000000002C9D loc_2C9D:                               ; CODE XREF: prompt+C5↑j
.text:0000000000002C9D                 mov     rdi, r14        ; dirp
.text:0000000000002CA0                 call    _closedir
.text:0000000000002CA5
.text:0000000000002CA5 loc_2CA5:                               ; CODE XREF: prompt+7B↑j
.text:0000000000002CA5                                         ; prompt+321↓j
.text:0000000000002CA5                 xor     r14d, r14d
.text:0000000000002CA8                 mov     eax, 3
.text:0000000000002CAD
.text:0000000000002CAD loc_2CAD:                               ; CODE XREF: prompt+2FC↓j
.text:0000000000002CAD                                         ; prompt+332↓j
.text:0000000000002CAD                 mov     [r12], eax
.text:0000000000002CB1
.text:0000000000002CB1 loc_2CB1:                               ; CODE XREF: prompt+251↓j
.text:0000000000002CB1                 cmp     qword ptr [rbx+20h], 0
.text:0000000000002CB6                 jnz     loc_2DE0
.text:0000000000002CBC                 mov     eax, [r13+4]
.text:0000000000002CC0                 cmp     eax, 5
.text:0000000000002CC3                 jz      short loc_2CF2
.text:0000000000002CC5                 cmp     byte ptr [r13+0], 0
.text:0000000000002CCA                 jnz     short loc_2CE9
.text:0000000000002CCC                 cmp     eax, 3
.text:0000000000002CCF                 jz      short loc_2CD8
.text:0000000000002CD1                 cmp     byte ptr [r13+19h], 0
.text:0000000000002CD6                 jz      short loc_2CF2
.text:0000000000002CD8
.text:0000000000002CD8 loc_2CD8:                               ; CODE XREF: prompt+10F↑j
.text:0000000000002CD8                 call    can_write_any_file
.text:0000000000002CDD                 test    al, al
.text:0000000000002CDF                 jz      loc_2FA8
.text:0000000000002CE5
.text:0000000000002CE5 loc_2CE5:                               ; CODE XREF: prompt+412↓j
.text:0000000000002CE5                                         ; prompt+430↓j
.text:0000000000002CE5                 mov     eax, [r13+4]
.text:0000000000002CE9
.text:0000000000002CE9 loc_2CE9:                               ; CODE XREF: prompt+10A↑j
.text:0000000000002CE9                 cmp     eax, 3
.text:0000000000002CEC                 jz      loc_2E20
.text:0000000000002CF2
.text:0000000000002CF2 loc_2CF2:                               ; CODE XREF: prompt+103↑j
.text:0000000000002CF2                                         ; prompt+116↑j ...
.text:0000000000002CF2                 mov     eax, 2
.text:0000000000002CF7
.text:0000000000002CF7 loc_2CF7:                               ; CODE XREF: prompt+225↓j
.text:0000000000002CF7                                         ; prompt+382↓j ...
.text:0000000000002CF7                 mov     rcx, [rsp+0F8h+var_40]
.text:0000000000002CFF                 xor     rcx, fs:28h
.text:0000000000002D08                 jnz     loc_3083
.text:0000000000002D0E                 add     rsp, 0C8h
.text:0000000000002D15                 pop     rbx
.text:0000000000002D16                 pop     rbp
.text:0000000000002D17                 pop     r12
.text:0000000000002D19                 pop     r13
.text:0000000000002D1B                 pop     r14
.text:0000000000002D1D                 pop     r15
.text:0000000000002D1F                 retn
.text:0000000000002D20 ; ---------------------------------------------------------------------------
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: prompt+265↓j
.text:0000000000002D20                 lea     rbx, [rsp+0F8h+stat_buf]
.text:0000000000002D25                 mov     edi, [rsp+0F8h+fildes] ; fildes
.text:0000000000002D29                 mov     rsi, r15        ; filename
.text:0000000000002D2C                 mov     rdx, rbx        ; stat_buf
.text:0000000000002D2F                 call    cache_fstatat_constprop_3
.text:0000000000002D34                 test    eax, eax
.text:0000000000002D36                 jnz     loc_2F00
.text:0000000000002D3C                 mov     eax, [rsp+0F8h+stat_buf.st_mode]
.text:0000000000002D40                 and     eax, 0F000h
.text:0000000000002D45                 cmp     eax, 0A000h
.text:0000000000002D4A                 jz      loc_2F94
.text:0000000000002D50                 cmp     eax, 4000h
.text:0000000000002D55                 jz      loc_2E34
.text:0000000000002D5B
.text:0000000000002D5B loc_2D5B:                               ; CODE XREF: prompt+3DF↓j
.text:0000000000002D5B                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000002D60                 mov     edi, 4
.text:0000000000002D65                 call    quotearg_style
.text:0000000000002D6A                 mov     rbp, rax
.text:0000000000002D6D
.text:0000000000002D6D loc_2D6D:                               ; CODE XREF: prompt+3CF↓j
.text:0000000000002D6D                 mov     edi, [rsp+0F8h+fildes] ; fildes
.text:0000000000002D71                 mov     rdx, rbx        ; stat_buf
.text:0000000000002D74                 mov     rsi, r15        ; filename
.text:0000000000002D77                 call    cache_fstatat_constprop_3
.text:0000000000002D7C                 test    eax, eax
.text:0000000000002D7E                 jnz     loc_3030
.text:0000000000002D84                 mov     rdi, rbx
.text:0000000000002D87                 call    file_type
.text:0000000000002D8C                 test    r12d, r12d
.text:0000000000002D8F                 mov     r13, rax
.text:0000000000002D92                 mov     rbx, cs:program_name
.text:0000000000002D99                 mov     edx, 5          ; category
.text:0000000000002D9E                 jz      loc_3018
.text:0000000000002DA4                 lea     rsi, aSRemoveWritePr ; "%s: remove write-protected %s %s? "
.text:0000000000002DAB                 xor     edi, edi        ; domainname
.text:0000000000002DAD                 call    _dcgettext
.text:0000000000002DB2
.text:0000000000002DB2 loc_2DB2:                               ; CODE XREF: prompt+466↓j
.text:0000000000002DB2                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002DB9                 mov     rdx, rax
.text:0000000000002DBC                 mov     r9, rbp
.text:0000000000002DBF                 mov     r8, r13
.text:0000000000002DC2                 mov     rcx, rbx
.text:0000000000002DC5                 mov     esi, 1
.text:0000000000002DCA                 xor     eax, eax
.text:0000000000002DCC                 call    ___fprintf_chk
.text:0000000000002DD1
.text:0000000000002DD1 loc_2DD1:                               ; CODE XREF: prompt+2E4↓j
.text:0000000000002DD1                 call    yesno
.text:0000000000002DD6                 test    al, al
.text:0000000000002DD8                 jnz     loc_2CF2
.text:0000000000002DDE                 xchg    ax, ax
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: prompt+F6↑j
.text:0000000000002DE0                 mov     eax, 3
.text:0000000000002DE5                 jmp     loc_2CF7
.text:0000000000002DE5 ; ---------------------------------------------------------------------------
.text:0000000000002DEA                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: prompt+46↑j
.text:0000000000002DF0                 cmp     dl, 1
.text:0000000000002DF3                 mov     r14d, edx
.text:0000000000002DF6                 mov     eax, 0
.text:0000000000002DFB                 sbb     ebp, ebp
.text:0000000000002DFD                 mov     [rsp+0F8h+stat_buf.st_size], 0FFFFFFFFFFFFFFFFh
.text:0000000000002E06                 not     ebp
.text:0000000000002E08                 and     ebp, 4
.text:0000000000002E0B                 test    dl, dl
.text:0000000000002E0D                 cmovnz  r14d, eax
.text:0000000000002E11                 jmp     loc_2CB1
.text:0000000000002E11 ; ---------------------------------------------------------------------------
.text:0000000000002E16                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: prompt+12C↑j
.text:0000000000002E20                 xor     r12d, r12d
.text:0000000000002E23
.text:0000000000002E23 loc_2E23:                               ; CODE XREF: prompt+446↓j
.text:0000000000002E23                 test    ebp, ebp
.text:0000000000002E25                 jz      loc_2D20
.text:0000000000002E2B                 cmp     ebp, 4
.text:0000000000002E2E                 jnz     loc_2F78
.text:0000000000002E34
.text:0000000000002E34 loc_2E34:                               ; CODE XREF: prompt+195↑j
.text:0000000000002E34                 cmp     byte ptr [r13+9], 0
.text:0000000000002E39                 jz      loc_2F50
.text:0000000000002E3F                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000002E44                 mov     edi, 4
.text:0000000000002E49                 call    quotearg_style
.text:0000000000002E4E                 cmp     [rsp+0F8h+var_E4], 2
.text:0000000000002E53                 mov     rbp, rax
.text:0000000000002E56                 jnz     loc_2F8A
.text:0000000000002E5C                 test    r14b, r14b
.text:0000000000002E5F                 jnz     loc_2F8A
.text:0000000000002E65                 test    r12d, r12d
.text:0000000000002E68                 mov     rbx, cs:program_name
.text:0000000000002E6F                 mov     edx, 5          ; category
.text:0000000000002E74                 jz      loc_3070
.text:0000000000002E7A                 lea     rsi, aSDescendIntoWr ; "%s: descend into write-protected direct"...
.text:0000000000002E81                 xor     edi, edi        ; domainname
.text:0000000000002E83                 call    _dcgettext
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: prompt+4BE↓j
.text:0000000000002E88                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002E8F                 mov     rdx, rax
.text:0000000000002E92                 mov     r8, rbp
.text:0000000000002E95                 mov     rcx, rbx
.text:0000000000002E98                 mov     esi, 1
.text:0000000000002E9D                 xor     eax, eax
.text:0000000000002E9F                 call    ___fprintf_chk
.text:0000000000002EA4                 jmp     loc_2DD1
.text:0000000000002EA4 ; ---------------------------------------------------------------------------
.text:0000000000002EA9                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: prompt+92↑j
.text:0000000000002EB0                 mov     edi, edx        ; fd
.text:0000000000002EB2                 call    _close
.text:0000000000002EB7                 mov     eax, 3
.text:0000000000002EBC                 jmp     loc_2CAD
.text:0000000000002EBC ; ---------------------------------------------------------------------------
.text:0000000000002EC1                 align 8
.text:0000000000002EC8
.text:0000000000002EC8 loc_2EC8:                               ; CODE XREF: prompt+BB↑j
.text:0000000000002EC8                 mov     rax, qword ptr [rsp+0F8h+fd]
.text:0000000000002ECD                 mov     rdi, r14        ; dirp
.text:0000000000002ED0                 mov     edx, [rax]
.text:0000000000002ED2                 mov     [rsp+0F8h+fd], edx
.text:0000000000002ED6                 call    _closedir
.text:0000000000002EDB                 mov     edx, [rsp+0F8h+fd]
.text:0000000000002EDF                 test    edx, edx
.text:0000000000002EE1                 jnz     loc_2CA5
.text:0000000000002EE7                 mov     r14d, 1
.text:0000000000002EED                 mov     eax, 4
.text:0000000000002EF2                 jmp     loc_2CAD
.text:0000000000002EF2 ; ---------------------------------------------------------------------------
.text:0000000000002EF7                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: prompt+176↑j
.text:0000000000002F00                                         ; prompt+3FE↓j
.text:0000000000002F00                 call    ___errno_location
.text:0000000000002F05                 mov     ebx, [rax]
.text:0000000000002F07
.text:0000000000002F07 loc_2F07:                               ; CODE XREF: prompt+44C↓j
.text:0000000000002F07                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000002F0C                 mov     edi, 4
.text:0000000000002F11                 call    quotearg_style
.text:0000000000002F16                 mov     rbp, rax
.text:0000000000002F19
.text:0000000000002F19 loc_2F19:                               ; CODE XREF: prompt+3B3↓j
.text:0000000000002F19                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000002F20                 mov     edx, 5          ; category
.text:0000000000002F25                 xor     edi, edi        ; domainname
.text:0000000000002F27                 call    _dcgettext
.text:0000000000002F2C                 mov     rcx, rbp
.text:0000000000002F2F                 mov     rdx, rax        ; format
.text:0000000000002F32                 mov     esi, ebx        ; errnum
.text:0000000000002F34                 xor     eax, eax
.text:0000000000002F36                 xor     edi, edi        ; status
.text:0000000000002F38                 call    _error
.text:0000000000002F3D                 mov     eax, 4
.text:0000000000002F42                 jmp     loc_2CF7
.text:0000000000002F42 ; ---------------------------------------------------------------------------
.text:0000000000002F47                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: prompt+279↑j
.text:0000000000002F50                 cmp     byte ptr [r13+0Ah], 0
.text:0000000000002F55                 jz      short loc_2F5C
.text:0000000000002F57                 test    r14b, r14b
.text:0000000000002F5A                 jnz     short loc_2F78
.text:0000000000002F5C
.text:0000000000002F5C loc_2F5C:                               ; CODE XREF: prompt+395↑j
.text:0000000000002F5C                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000002F61                 mov     edi, 4
.text:0000000000002F66                 mov     ebx, 15h
.text:0000000000002F6B                 call    quotearg_style
.text:0000000000002F70                 mov     rbp, rax
.text:0000000000002F73                 jmp     short loc_2F19
.text:0000000000002F73 ; ---------------------------------------------------------------------------
.text:0000000000002F75                 align 8
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: prompt+26E↑j
.text:0000000000002F78                                         ; prompt+39A↑j
.text:0000000000002F78                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000002F7D                 mov     edi, 4
.text:0000000000002F82                 call    quotearg_style
.text:0000000000002F87                 mov     rbp, rax
.text:0000000000002F8A
.text:0000000000002F8A loc_2F8A:                               ; CODE XREF: prompt+296↑j
.text:0000000000002F8A                                         ; prompt+29F↑j
.text:0000000000002F8A                 lea     rbx, [rsp+0F8h+stat_buf]
.text:0000000000002F8F                 jmp     loc_2D6D
.text:0000000000002F94 ; ---------------------------------------------------------------------------
.text:0000000000002F94
.text:0000000000002F94 loc_2F94:                               ; CODE XREF: prompt+18A↑j
.text:0000000000002F94                 cmp     dword ptr [r13+4], 3
.text:0000000000002F99                 jnz     loc_2CF2
.text:0000000000002F9F                 jmp     loc_2D5B
.text:0000000000002F9F ; ---------------------------------------------------------------------------
.text:0000000000002FA4                 align 8
.text:0000000000002FA8
.text:0000000000002FA8 loc_2FA8:                               ; CODE XREF: prompt+11F↑j
.text:0000000000002FA8                 lea     rbx, [rsp+0F8h+stat_buf]
.text:0000000000002FAD                 mov     edi, [rsp+0F8h+fildes] ; fildes
.text:0000000000002FB1                 mov     rsi, r15        ; filename
.text:0000000000002FB4                 mov     rdx, rbx        ; stat_buf
.text:0000000000002FB7                 call    cache_fstatat_constprop_3
.text:0000000000002FBC                 test    eax, eax
.text:0000000000002FBE                 jnz     loc_2F00
.text:0000000000002FC4                 mov     eax, [rsp+0F8h+stat_buf.st_mode]
.text:0000000000002FC8                 and     eax, 0F000h
.text:0000000000002FCD                 cmp     eax, 0A000h
.text:0000000000002FD2                 jz      loc_2CE5
.text:0000000000002FD8                 mov     edi, [rsp+0F8h+fildes] ; fd
.text:0000000000002FDC                 mov     ecx, 200h       ; flag
.text:0000000000002FE1                 mov     edx, 2          ; type
.text:0000000000002FE6                 mov     rsi, r15        ; file
.text:0000000000002FE9                 call    _faccessat
.text:0000000000002FEE                 test    eax, eax
.text:0000000000002FF0                 jz      loc_2CE5
.text:0000000000002FF6                 call    ___errno_location
.text:0000000000002FFB                 mov     ebx, [rax]
.text:0000000000002FFD                 mov     r12d, 1
.text:0000000000003003                 cmp     ebx, 0Dh
.text:0000000000003006                 jz      loc_2E23
.text:000000000000300C                 jmp     loc_2F07
.text:000000000000300C ; ---------------------------------------------------------------------------
.text:0000000000003011                 align 8
.text:0000000000003018
.text:0000000000003018 loc_3018:                               ; CODE XREF: prompt+1DE↑j
.text:0000000000003018                 lea     rsi, aSRemoveSS ; "%s: remove %s %s? "
.text:000000000000301F                 xor     edi, edi        ; domainname
.text:0000000000003021                 call    _dcgettext
.text:0000000000003026                 jmp     loc_2DB2
.text:0000000000003026 ; ---------------------------------------------------------------------------
.text:000000000000302B                 align 10h
.text:0000000000003030
.text:0000000000003030 loc_3030:                               ; CODE XREF: prompt+1BE↑j
.text:0000000000003030                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000003037                 mov     edx, 5          ; category
.text:000000000000303C                 xor     edi, edi        ; domainname
.text:000000000000303E                 call    _dcgettext
.text:0000000000003043                 mov     rbx, rax
.text:0000000000003046                 call    ___errno_location
.text:000000000000304B                 mov     esi, [rax]      ; errnum
.text:000000000000304D                 mov     rcx, rbp
.text:0000000000003050                 xor     eax, eax
.text:0000000000003052                 mov     rdx, rbx        ; format
.text:0000000000003055                 xor     edi, edi        ; status
.text:0000000000003057                 call    _error
.text:000000000000305C                 mov     eax, 4
.text:0000000000003061                 jmp     loc_2CF7
.text:0000000000003061 ; ---------------------------------------------------------------------------
.text:0000000000003066                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: prompt+2B4↑j
.text:0000000000003070                 lea     rsi, aSDescendIntoDi ; "%s: descend into directory %s? "
.text:0000000000003077                 xor     edi, edi        ; domainname
.text:0000000000003079                 call    _dcgettext
.text:000000000000307E                 jmp     loc_2E88
.text:0000000000003083 ; ---------------------------------------------------------------------------
.text:0000000000003083
.text:0000000000003083 loc_3083:                               ; CODE XREF: prompt+148↑j
.text:0000000000003083                 call    ___stack_chk_fail
.text:0000000000003083 ; } // starts at 2BC0
.text:0000000000003083 prompt          endp
.text:0000000000003083
.text:0000000000003083 ; ---------------------------------------------------------------------------
.text:0000000000003088                 align 10h
.text:0000000000003090
.text:0000000000003090 ; =============== S U B R O U T I N E =======================================
.text:0000000000003090
.text:0000000000003090
.text:0000000000003090                 public rm
.text:0000000000003090 rm              proc near               ; CODE XREF: main+3A0↑p
.text:0000000000003090
.text:0000000000003090 fd              = dword ptr -100h
.text:0000000000003090 var_F8          = qword ptr -0F8h
.text:0000000000003090 stat_buf        = qword ptr -0F0h
.text:0000000000003090 var_DC          = dword ptr -0DCh
.text:0000000000003090 var_D8          = qword ptr -0D8h
.text:0000000000003090 var_40          = qword ptr -40h
.text:0000000000003090
.text:0000000000003090 ; __unwind {
.text:0000000000003090                 push    r15
.text:0000000000003092                 push    r14
.text:0000000000003094                 push    r13
.text:0000000000003096                 push    r12
.text:0000000000003098                 push    rbp
.text:0000000000003099                 push    rbx
.text:000000000000309A                 sub     rsp, 0D8h
.text:00000000000030A1                 mov     rax, fs:28h
.text:00000000000030AA                 mov     [rsp+108h+var_40], rax
.text:00000000000030B2                 xor     eax, eax
.text:00000000000030B4                 cmp     qword ptr [rdi], 0
.text:00000000000030B8                 jz      loc_3828
.text:00000000000030BE                 cmp     byte ptr [rsi+8], 1
.text:00000000000030C2                 mov     r13, rsi
.text:00000000000030C5                 lea     r12, jpt_312C
.text:00000000000030CC                 mov     ebp, 2
.text:00000000000030D1                 sbb     esi, esi
.text:00000000000030D3                 xor     edx, edx
.text:00000000000030D5                 and     esi, 0FFFFFFC0h
.text:00000000000030D8                 add     esi, 258h
.text:00000000000030DE                 call    xfts_open
.text:00000000000030E3                 mov     rbx, rax
.text:00000000000030E6                 lea     rax, [rsp+108h+var_DC]
.text:00000000000030EB                 mov     [rsp+108h+var_F8], rax
.text:00000000000030F0                 lea     rax, [rsp+108h+var_D8]
.text:00000000000030F5                 mov     [rsp+108h+stat_buf], rax
.text:00000000000030FA                 nop     word ptr [rax+rax+00h]
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: rm+1D3↓j
.text:0000000000003100                                         ; rm+1E4↓j ...
.text:0000000000003100                 mov     rdi, rbx
.text:0000000000003103                 call    rpl_fts_read
.text:0000000000003108                 test    rax, rax
.text:000000000000310B                 mov     r15, rax
.text:000000000000310E                 jz      loc_319A
.text:0000000000003114
.text:0000000000003114 loc_3114:                               ; CODE XREF: rm+104↓j
.text:0000000000003114                 movzx   edx, word ptr [rax+70h]
.text:0000000000003118                 cmp     dx, 0Dh         ; switch 14 cases
.text:000000000000311C                 ja      def_312C        ; jumptable 000000000000312C default case, cases 0,5,9
.text:0000000000003122                 movzx   eax, dx
.text:0000000000003125                 movsxd  rax, ds:(jpt_312C - 0B7F8h)[r12+rax*4]
.text:0000000000003129                 add     rax, r12
.text:000000000000312C                 jmp     rax             ; switch jump
.text:000000000000312C ; ---------------------------------------------------------------------------
.text:000000000000312E                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: rm+9C↑j
.text:0000000000003130                                         ; DATA XREF: .rodata:jpt_312C↓o
.text:0000000000003130                 mov     rdx, [r15+38h]  ; jumptable 000000000000312C case 7
.text:0000000000003134                 mov     esi, 3
.text:0000000000003139                 xor     edi, edi
.text:000000000000313B                 call    quotearg_n_style_colon
.text:0000000000003140                 lea     rsi, aTraversalFaile ; "traversal failed: %s"
.text:0000000000003147                 mov     edx, 5          ; category
.text:000000000000314C                 xor     edi, edi        ; domainname
.text:000000000000314E                 mov     rbp, rax
.text:0000000000003151                 call    _dcgettext
.text:0000000000003156                 mov     esi, [r15+40h]  ; errnum
.text:000000000000315A                 mov     rcx, rbp
.text:000000000000315D                 mov     rdx, rax        ; format
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: rm+21E↓j
.text:0000000000003160                 xor     edi, edi        ; status
.text:0000000000003162                 xor     eax, eax
.text:0000000000003164                 call    _error
.text:0000000000003169
.text:0000000000003169 loc_3169:                               ; CODE XREF: rm+3E5↓j
.text:0000000000003169                                         ; rm+401↓j ...
.text:0000000000003169                 mov     rsi, r15
.text:000000000000316C                 mov     edx, 4
.text:0000000000003171                 mov     rdi, rbx
.text:0000000000003174                 call    rpl_fts_set
.text:0000000000003179                 mov     rdi, rbx
.text:000000000000317C                 mov     ebp, 4
.text:0000000000003181                 call    rpl_fts_read
.text:0000000000003186                 mov     rdi, rbx
.text:0000000000003189                 call    rpl_fts_read
.text:000000000000318E                 test    rax, rax
.text:0000000000003191                 mov     r15, rax
.text:0000000000003194                 jnz     loc_3114
.text:000000000000319A
.text:000000000000319A loc_319A:                               ; CODE XREF: rm+7E↑j
.text:000000000000319A                 call    ___errno_location
.text:000000000000319F                 mov     r12, rax
.text:00000000000031A2                 mov     eax, [rax]
.text:00000000000031A4                 test    eax, eax
.text:00000000000031A6                 jnz     loc_36B8
.text:00000000000031AC                 mov     rdi, rbx        ; ptr
.text:00000000000031AF                 call    rpl_fts_close
.text:00000000000031B4                 test    eax, eax
.text:00000000000031B6                 jnz     loc_36F0
.text:00000000000031BC
.text:00000000000031BC loc_31BC:                               ; CODE XREF: rm+65A↓j
.text:00000000000031BC                                         ; rm+688↓j ...
.text:00000000000031BC                 mov     rbx, [rsp+108h+var_40]
.text:00000000000031C4                 xor     rbx, fs:28h
.text:00000000000031CD                 mov     eax, ebp
.text:00000000000031CF                 jnz     loc_38E0
.text:00000000000031D5                 add     rsp, 0D8h
.text:00000000000031DC                 pop     rbx
.text:00000000000031DD                 pop     rbp
.text:00000000000031DE                 pop     r12
.text:00000000000031E0                 pop     r13
.text:00000000000031E2                 pop     r14
.text:00000000000031E4                 pop     r15
.text:00000000000031E6                 retn
.text:00000000000031E6 ; ---------------------------------------------------------------------------
.text:00000000000031E7                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: rm+9C↑j
.text:00000000000031F0                                         ; DATA XREF: .rodata:jpt_312C↓o
.text:00000000000031F0                 cmp     dx, 6           ; jumptable 000000000000312C cases 3,4,6,8,10-13
.text:00000000000031F4                 jnz     short loc_3218
.text:00000000000031F6                 cmp     byte ptr [r13+8], 0
.text:00000000000031FB                 jz      short loc_3218
.text:00000000000031FD                 cmp     qword ptr [r15+58h], 0
.text:0000000000003202                 jle     short loc_3218
.text:0000000000003204                 mov     rax, [rbx+18h]
.text:0000000000003208                 cmp     [r15+78h], rax
.text:000000000000320C                 jnz     loc_37B8
.text:0000000000003212                 nop     word ptr [rax+rax+00h]
.text:0000000000003218
.text:0000000000003218 loc_3218:                               ; CODE XREF: rm+164↑j
.text:0000000000003218                                         ; rm+16B↑j ...
.text:0000000000003218                 and     edx, 0FFFFFFFDh
.text:000000000000321B                 xor     r14d, r14d
.text:000000000000321E                 mov     rcx, r13
.text:0000000000003221                 cmp     dx, 4
.text:0000000000003225                 mov     r8d, 3
.text:000000000000322B                 mov     rsi, r15
.text:000000000000322E                 setz    r14b
.text:0000000000003232                 mov     rdi, rbx
.text:0000000000003235                 xor     r9d, r9d
.text:0000000000003238                 mov     edx, r14d
.text:000000000000323B                 call    prompt
.text:0000000000003240                 cmp     eax, 2
.text:0000000000003243                 mov     ecx, eax
.text:0000000000003245                 jz      loc_34A8
.text:000000000000324B
.text:000000000000324B loc_324B:                               ; CODE XREF: rm+39A↓j
.text:000000000000324B                                         ; rm+42B↓j
.text:000000000000324B                 lea     eax, [rcx-2]
.text:000000000000324E                 cmp     eax, 2
.text:0000000000003251                 ja      loc_38C1
.text:0000000000003257                 cmp     ecx, 4
.text:000000000000325A                 jz      loc_38E5
.text:0000000000003260                 cmp     ecx, 3
.text:0000000000003263                 jnz     loc_3100
.text:0000000000003269                 cmp     ebp, 2
.text:000000000000326C                 mov     eax, 3
.text:0000000000003271                 cmovz   ebp, eax
.text:0000000000003274                 jmp     loc_3100
.text:0000000000003274 ; ---------------------------------------------------------------------------
.text:0000000000003279                 align 20h
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: rm+9C↑j
.text:0000000000003280                                         ; DATA XREF: .rodata:jpt_312C↓o
.text:0000000000003280                 mov     rdx, [r15+38h]  ; jumptable 000000000000312C case 2
.text:0000000000003284                 mov     esi, 3
.text:0000000000003289                 xor     edi, edi
.text:000000000000328B                 call    quotearg_n_style_colon
.text:0000000000003290                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:0000000000003297                 mov     rbp, rax
.text:000000000000329A                 mov     edx, 5          ; category
.text:000000000000329F                 xor     edi, edi        ; domainname
.text:00000000000032A1                 call    _dcgettext
.text:00000000000032A6                 mov     rcx, rbp
.text:00000000000032A9                 mov     rdx, rax
.text:00000000000032AC                 xor     esi, esi
.text:00000000000032AE                 jmp     loc_3160
.text:00000000000032AE ; ---------------------------------------------------------------------------
.text:00000000000032B3                 align 8
.text:00000000000032B8
.text:00000000000032B8 loc_32B8:                               ; CODE XREF: rm+9C↑j
.text:00000000000032B8                                         ; DATA XREF: .rodata:jpt_312C↓o
.text:00000000000032B8                 cmp     byte ptr [r13+9], 0 ; jumptable 000000000000312C case 1
.text:00000000000032BD                 jnz     loc_3378
.text:00000000000032C3                 cmp     byte ptr [r13+0Ah], 0
.text:00000000000032C8                 jz      loc_3430
.text:00000000000032CE                 mov     rsi, [r15+30h]  ; file
.text:00000000000032D2                 mov     edi, [rbx+2Ch]  ; fd
.text:00000000000032D5                 xor     eax, eax
.text:00000000000032D7                 mov     edx, 30900h     ; oflag
.text:00000000000032DC                 call    _openat
.text:00000000000032E1                 test    eax, eax
.text:00000000000032E3                 js      short loc_3341
.text:00000000000032E5                 mov     edi, eax        ; fd
.text:00000000000032E7                 mov     [rsp+108h+fd], eax
.text:00000000000032EB                 call    _fdopendir
.text:00000000000032F0                 test    rax, rax
.text:00000000000032F3                 mov     r14, rax
.text:00000000000032F6                 mov     edx, [rsp+108h+fd]
.text:00000000000032FA                 jz      loc_3832
.text:0000000000003300                 call    ___errno_location
.text:0000000000003305                 mov     qword ptr [rsp+108h+fd], rax
.text:000000000000330A                 mov     dword ptr [rax], 0
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: rm+2A3↓j
.text:0000000000003310                                         ; rm+2A7↓j
.text:0000000000003310                 mov     rdi, r14        ; dirp
.text:0000000000003313                 call    _readdir
.text:0000000000003318                 test    rax, rax
.text:000000000000331B                 jz      short loc_3356
.text:000000000000331D                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000003321                 jnz     short loc_3339
.text:0000000000003323                 xor     edx, edx
.text:0000000000003325                 cmp     byte ptr [rax+14h], 2Eh ; '.'
.text:0000000000003329                 setz    dl
.text:000000000000332C                 movzx   eax, byte ptr [rax+rdx+14h]
.text:0000000000003331                 test    al, al
.text:0000000000003333                 jz      short loc_3310
.text:0000000000003335                 cmp     al, 2Fh ; '/'
.text:0000000000003337                 jz      short loc_3310
.text:0000000000003339
.text:0000000000003339 loc_3339:                               ; CODE XREF: rm+291↑j
.text:0000000000003339                 mov     rdi, r14        ; dirp
.text:000000000000333C                 call    _closedir
.text:0000000000003341
.text:0000000000003341 loc_3341:                               ; CODE XREF: rm+253↑j
.text:0000000000003341                                         ; rm+2DF↓j ...
.text:0000000000003341                 cmp     byte ptr [r13+0Ah], 0
.text:0000000000003346                 jz      loc_3430
.text:000000000000334C                 mov     ebp, 27h ; '''
.text:0000000000003351                 jmp     loc_3435
.text:0000000000003356 ; ---------------------------------------------------------------------------
.text:0000000000003356
.text:0000000000003356 loc_3356:                               ; CODE XREF: rm+28B↑j
.text:0000000000003356                 mov     rax, qword ptr [rsp+108h+fd]
.text:000000000000335B                 mov     rdi, r14        ; dirp
.text:000000000000335E                 mov     edx, [rax]
.text:0000000000003360                 mov     [rsp+108h+fd], edx
.text:0000000000003364                 call    _closedir
.text:0000000000003369                 mov     edx, [rsp+108h+fd]
.text:000000000000336D                 test    edx, edx
.text:000000000000336F                 jnz     short loc_3341
.text:0000000000003371                 nop     dword ptr [rax+00000000h]
.text:0000000000003378
.text:0000000000003378 loc_3378:                               ; CODE XREF: rm+22D↑j
.text:0000000000003378                 cmp     qword ptr [r15+58h], 0
.text:000000000000337D                 jnz     short loc_33B8
.text:000000000000337F                 mov     r14, [r15+30h]
.text:0000000000003383                 mov     rdi, r14
.text:0000000000003386                 call    last_component
.text:000000000000338B                 cmp     byte ptr [rax], 2Eh ; '.'
.text:000000000000338E                 jz      loc_3510
.text:0000000000003394
.text:0000000000003394 loc_3394:                               ; CODE XREF: rm+494↓j
.text:0000000000003394                 mov     rax, [r13+10h]
.text:0000000000003398                 test    rax, rax
.text:000000000000339B                 jz      short loc_33AD
.text:000000000000339D                 mov     rcx, [rax]
.text:00000000000033A0                 cmp     [r15+80h], rcx
.text:00000000000033A7                 jz      loc_3720
.text:00000000000033AD
.text:00000000000033AD loc_33AD:                               ; CODE XREF: rm+30B↑j
.text:00000000000033AD                                         ; rm+698↓j
.text:00000000000033AD                 cmp     byte ptr [r13+18h], 0
.text:00000000000033B2                 jnz     loc_35A8
.text:00000000000033B8
.text:00000000000033B8 loc_33B8:                               ; CODE XREF: rm+2ED↑j
.text:00000000000033B8                                         ; rm+5C1↓j
.text:00000000000033B8                 mov     r9, [rsp+108h+var_F8]
.text:00000000000033BD                 mov     rcx, r13
.text:00000000000033C0                 mov     r8d, 2
.text:00000000000033C6                 mov     edx, 1
.text:00000000000033CB                 mov     rsi, r15
.text:00000000000033CE                 mov     rdi, rbx
.text:00000000000033D1                 call    prompt
.text:00000000000033D6                 cmp     eax, 2
.text:00000000000033D9                 mov     ecx, eax
.text:00000000000033DB                 jz      loc_34C0
.text:00000000000033E1
.text:00000000000033E1 loc_33E1:                               ; CODE XREF: rm+477↓j
.text:00000000000033E1                 mov     rax, [r15+8]
.text:00000000000033E5                 cmp     qword ptr [rax+58h], 0
.text:00000000000033EA                 jns     short loc_3403
.text:00000000000033EC                 jmp     short loc_340A
.text:00000000000033EC ; ---------------------------------------------------------------------------
.text:00000000000033EE                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: rm+378↓j
.text:00000000000033F0                 mov     qword ptr [rax+20h], 1
.text:00000000000033F8                 mov     rax, [rax+8]
.text:00000000000033FC                 cmp     qword ptr [rax+58h], 0
.text:0000000000003401                 js      short loc_340A
.text:0000000000003403
.text:0000000000003403 loc_3403:                               ; CODE XREF: rm+35A↑j
.text:0000000000003403                 cmp     qword ptr [rax+20h], 0
.text:0000000000003408                 jz      short loc_33F0
.text:000000000000340A
.text:000000000000340A loc_340A:                               ; CODE XREF: rm+35C↑j
.text:000000000000340A                                         ; rm+371↑j
.text:000000000000340A                 mov     edx, 4
.text:000000000000340F                 mov     rsi, r15
.text:0000000000003412                 mov     rdi, rbx
.text:0000000000003415                 mov     [rsp+108h+fd], ecx
.text:0000000000003419                 call    rpl_fts_set
.text:000000000000341E                 mov     rdi, rbx
.text:0000000000003421                 call    rpl_fts_read
.text:0000000000003426                 mov     ecx, [rsp+108h+fd]
.text:000000000000342A                 jmp     loc_324B
.text:000000000000342A ; ---------------------------------------------------------------------------
.text:000000000000342F                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: rm+238↑j
.text:0000000000003430                                         ; rm+2B6↑j
.text:0000000000003430                 mov     ebp, 15h
.text:0000000000003435
.text:0000000000003435 loc_3435:                               ; CODE XREF: rm+2C1↑j
.text:0000000000003435                 mov     rsi, [r15+38h]
.text:0000000000003439                 mov     edi, 4
.text:000000000000343E                 call    quotearg_style
.text:0000000000003443                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:000000000000344A                 xor     edi, edi        ; domainname
.text:000000000000344C                 mov     r14, rax
.text:000000000000344F                 mov     edx, 5          ; category
.text:0000000000003454                 call    _dcgettext
.text:0000000000003459                 xor     edi, edi        ; status
.text:000000000000345B                 mov     rdx, rax        ; format
.text:000000000000345E                 mov     rcx, r14
.text:0000000000003461                 xor     eax, eax
.text:0000000000003463                 mov     esi, ebp        ; errnum
.text:0000000000003465                 call    _error
.text:000000000000346A                 mov     rax, [r15+8]
.text:000000000000346E                 cmp     qword ptr [rax+58h], 0
.text:0000000000003473                 jns     short loc_3497
.text:0000000000003475                 jmp     loc_3169
.text:0000000000003475 ; ---------------------------------------------------------------------------
.text:000000000000347A                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: rm+40C↓j
.text:0000000000003480                 mov     qword ptr [rax+20h], 1
.text:0000000000003488                 mov     rax, [rax+8]
.text:000000000000348C                 cmp     qword ptr [rax+58h], 0
.text:0000000000003491                 js      loc_3169
.text:0000000000003497
.text:0000000000003497 loc_3497:                               ; CODE XREF: rm+3E3↑j
.text:0000000000003497                 cmp     qword ptr [rax+20h], 0
.text:000000000000349C                 jz      short loc_3480
.text:000000000000349E                 jmp     loc_3169
.text:000000000000349E ; ---------------------------------------------------------------------------
.text:00000000000034A3                 align 8
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: rm+1B5↑j
.text:00000000000034A8                 mov     ecx, r14d
.text:00000000000034AB                 mov     rdx, r13
.text:00000000000034AE                 mov     rsi, r15
.text:00000000000034B1                 mov     rdi, rbx
.text:00000000000034B4                 call    excise
.text:00000000000034B9                 mov     ecx, eax
.text:00000000000034BB                 jmp     loc_324B
.text:00000000000034C0 ; ---------------------------------------------------------------------------
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: rm+34B↑j
.text:00000000000034C0                 cmp     [rsp+108h+var_DC], 4
.text:00000000000034C5                 jnz     loc_3100
.text:00000000000034CB                 mov     ecx, 1
.text:00000000000034D0                 mov     rdx, r13
.text:00000000000034D3                 mov     rsi, r15
.text:00000000000034D6                 mov     rdi, rbx
.text:00000000000034D9                 call    excise
.text:00000000000034DE                 mov     edx, 4
.text:00000000000034E3                 mov     rsi, r15
.text:00000000000034E6                 mov     rdi, rbx
.text:00000000000034E9                 mov     [rsp+108h+fd], eax
.text:00000000000034ED                 call    rpl_fts_set
.text:00000000000034F2                 mov     rdi, rbx
.text:00000000000034F5                 call    rpl_fts_read
.text:00000000000034FA                 mov     ecx, [rsp+108h+fd]
.text:00000000000034FE                 cmp     ecx, 2
.text:0000000000003501                 jz      loc_3100
.text:0000000000003507                 jmp     loc_33E1
.text:0000000000003507 ; ---------------------------------------------------------------------------
.text:000000000000350C                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: rm+2FE↑j
.text:0000000000003510                 xor     edx, edx
.text:0000000000003512                 cmp     byte ptr [rax+1], 2Eh ; '.'
.text:0000000000003516                 setz    dl
.text:0000000000003519                 movzx   eax, byte ptr [rax+rdx+1]
.text:000000000000351E                 test    al, al
.text:0000000000003520                 jz      short loc_352A
.text:0000000000003522                 cmp     al, 2Fh ; '/'
.text:0000000000003524                 jnz     loc_3394
.text:000000000000352A
.text:000000000000352A loc_352A:                               ; CODE XREF: rm+490↑j
.text:000000000000352A                 mov     rdx, [r15+38h]
.text:000000000000352E                 mov     esi, 4
.text:0000000000003533                 mov     edi, 2
.text:0000000000003538                 call    quotearg_n_style
.text:000000000000353D                 lea     rdx, asc_B4BE   ; ".."
.text:0000000000003544                 mov     esi, 4
.text:0000000000003549                 mov     edi, 1
.text:000000000000354E                 mov     rbp, rax
.text:0000000000003551                 call    quotearg_n_style
.text:0000000000003556                 lea     rdx, asc_B4BE+1 ; "."
.text:000000000000355D                 xor     edi, edi
.text:000000000000355F                 mov     esi, 4
.text:0000000000003564                 mov     r14, rax
.text:0000000000003567                 call    quotearg_n_style
.text:000000000000356C                 lea     rsi, aRefusingToRemo ; "refusing to remove %s or %s directory: "...
.text:0000000000003573                 xor     edi, edi        ; domainname
.text:0000000000003575                 mov     edx, 5          ; category
.text:000000000000357A                 mov     qword ptr [rsp+108h+fd], rax
.text:000000000000357F                 call    _dcgettext
.text:0000000000003584                 mov     rcx, qword ptr [rsp+108h+fd]
.text:0000000000003589                 mov     rdx, rax        ; format
.text:000000000000358C                 mov     r9, rbp
.text:000000000000358F                 mov     r8, r14
.text:0000000000003592                 xor     esi, esi        ; errnum
.text:0000000000003594                 xor     edi, edi        ; status
.text:0000000000003596                 xor     eax, eax
.text:0000000000003598                 call    _error
.text:000000000000359D                 jmp     loc_3169
.text:000000000000359D ; ---------------------------------------------------------------------------
.text:00000000000035A2                 align 8
.text:00000000000035A8
.text:00000000000035A8 loc_35A8:                               ; CODE XREF: rm+322↑j
.text:00000000000035A8                 lea     rsi, asc_B4BE   ; ".."
.text:00000000000035AF                 xor     edx, edx
.text:00000000000035B1                 mov     rdi, r14
.text:00000000000035B4                 call    file_name_concat
.text:00000000000035B9                 test    rax, rax
.text:00000000000035BC                 mov     r14, rax
.text:00000000000035BF                 jz      short loc_35D7
.text:00000000000035C1                 mov     rdx, [rsp+108h+stat_buf] ; stat_buf
.text:00000000000035C6                 mov     rsi, rax        ; filename
.text:00000000000035C9                 mov     edi, 1          ; ver
.text:00000000000035CE                 call    ___lxstat
.text:00000000000035D3                 test    eax, eax
.text:00000000000035D5                 jz      short loc_3640
.text:00000000000035D7
.text:00000000000035D7 loc_35D7:                               ; CODE XREF: rm+52F↑j
.text:00000000000035D7                 mov     rdx, [r15+30h]
.text:00000000000035DB                 mov     esi, 4
.text:00000000000035E0                 mov     edi, 1
.text:00000000000035E5                 call    quotearg_n_style
.text:00000000000035EA                 mov     rdx, r14
.text:00000000000035ED                 xor     edi, edi
.text:00000000000035EF                 mov     esi, 4
.text:00000000000035F4                 mov     rbp, rax
.text:00000000000035F7                 call    quotearg_n_style
.text:00000000000035FC                 lea     rsi, aFailedToStatSS ; "failed to stat %s: skipping %s"
.text:0000000000003603                 xor     edi, edi        ; domainname
.text:0000000000003605                 mov     edx, 5          ; category
.text:000000000000360A                 mov     qword ptr [rsp+108h+fd], rax
.text:000000000000360F                 call    _dcgettext
.text:0000000000003614                 mov     rcx, qword ptr [rsp+108h+fd]
.text:0000000000003619                 mov     rdx, rax        ; format
.text:000000000000361C                 xor     edi, edi        ; status
.text:000000000000361E                 mov     r8, rbp
.text:0000000000003621                 xor     esi, esi        ; errnum
.text:0000000000003623                 xor     eax, eax
.text:0000000000003625                 call    _error
.text:000000000000362A                 mov     rdi, r14        ; ptr
.text:000000000000362D                 call    free
.text:0000000000003632                 jmp     loc_3169
.text:0000000000003632 ; ---------------------------------------------------------------------------
.text:0000000000003637                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: rm+545↑j
.text:0000000000003640                 mov     rdi, r14        ; ptr
.text:0000000000003643                 call    free
.text:0000000000003648                 mov     rax, [rsp+108h+var_D8]
.text:000000000000364D                 cmp     [rbx+18h], rax
.text:0000000000003651                 jz      loc_33B8
.text:0000000000003657                 mov     rsi, [r15+38h]
.text:000000000000365B                 mov     edi, 4
.text:0000000000003660                 call    quotearg_style
.text:0000000000003665                 lea     rsi, aSkippingSSince ; "skipping %s, since it's on a different "...
.text:000000000000366C                 mov     rbp, rax
.text:000000000000366F                 mov     edx, 5          ; category
.text:0000000000003674                 xor     edi, edi        ; domainname
.text:0000000000003676                 call    _dcgettext
.text:000000000000367B                 xor     esi, esi        ; errnum
.text:000000000000367D                 mov     rdx, rax        ; format
.text:0000000000003680                 mov     rcx, rbp
.text:0000000000003683                 xor     edi, edi        ; status
.text:0000000000003685                 xor     eax, eax
.text:0000000000003687                 call    _error
.text:000000000000368C                 lea     rsi, aAndPreserveRoo ; "and --preserve-root=all is in effect"
.text:0000000000003693                 mov     edx, 5          ; category
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: rm+71F↓j
.text:0000000000003698                 xor     edi, edi        ; domainname
.text:000000000000369A                 call    _dcgettext
.text:000000000000369F                 xor     esi, esi        ; errnum
.text:00000000000036A1                 mov     rdx, rax        ; format
.text:00000000000036A4                 xor     edi, edi        ; status
.text:00000000000036A6                 xor     eax, eax
.text:00000000000036A8                 call    _error
.text:00000000000036AD                 jmp     loc_3169
.text:00000000000036AD ; ---------------------------------------------------------------------------
.text:00000000000036B2                 align 8
.text:00000000000036B8
.text:00000000000036B8 loc_36B8:                               ; CODE XREF: rm+116↑j
.text:00000000000036B8                 lea     rsi, aFtsReadFailed ; "fts_read failed"
.text:00000000000036BF                 xor     edi, edi        ; domainname
.text:00000000000036C1                 mov     edx, 5          ; category
.text:00000000000036C6                 mov     ebp, 4
.text:00000000000036CB                 call    _dcgettext
.text:00000000000036D0                 mov     esi, [r12]      ; errnum
.text:00000000000036D4                 mov     rdx, rax        ; format
.text:00000000000036D7                 xor     edi, edi        ; status
.text:00000000000036D9                 xor     eax, eax
.text:00000000000036DB                 call    _error
.text:00000000000036E0                 mov     rdi, rbx        ; ptr
.text:00000000000036E3                 call    rpl_fts_close
.text:00000000000036E8                 test    eax, eax
.text:00000000000036EA                 jz      loc_31BC
.text:00000000000036F0
.text:00000000000036F0 loc_36F0:                               ; CODE XREF: rm+126↑j
.text:00000000000036F0                 lea     rsi, aFtsCloseFailed ; "fts_close failed"
.text:00000000000036F7                 mov     edx, 5          ; category
.text:00000000000036FC                 xor     edi, edi        ; domainname
.text:00000000000036FE                 mov     ebp, 4
.text:0000000000003703                 call    _dcgettext
.text:0000000000003708                 mov     esi, [r12]      ; errnum
.text:000000000000370C                 mov     rdx, rax        ; format
.text:000000000000370F                 xor     edi, edi        ; status
.text:0000000000003711                 xor     eax, eax
.text:0000000000003713                 call    _error
.text:0000000000003718                 jmp     loc_31BC
.text:0000000000003718 ; ---------------------------------------------------------------------------
.text:000000000000371D                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: rm+317↑j
.text:0000000000003720                 mov     rax, [rax+8]
.text:0000000000003724                 cmp     [r15+78h], rax
.text:0000000000003728                 jnz     loc_33AD
.text:000000000000372E                 mov     rdx, [r15+38h]
.text:0000000000003732                 lea     rdi, aLibs+6    ; "/"
.text:0000000000003739                 mov     ecx, 2
.text:000000000000373E                 mov     rsi, rdx
.text:0000000000003741                 repe cmpsb
.text:0000000000003743                 setnbe  al
.text:0000000000003746                 sbb     al, 0
.text:0000000000003748                 test    al, al
.text:000000000000374A                 jz      loc_383E
.text:0000000000003750                 lea     rdx, aLibs+6    ; "/"
.text:0000000000003757                 mov     esi, 4
.text:000000000000375C                 mov     edi, 1
.text:0000000000003761                 call    quotearg_n_style
.text:0000000000003766                 mov     rdx, [r15+38h]
.text:000000000000376A                 mov     esi, 4
.text:000000000000376F                 xor     edi, edi
.text:0000000000003771                 mov     rbp, rax
.text:0000000000003774                 call    quotearg_n_style
.text:0000000000003779                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0000000000003780                 mov     r14, rax
.text:0000000000003783                 mov     edx, 5          ; category
.text:0000000000003788                 xor     edi, edi        ; domainname
.text:000000000000378A                 call    _dcgettext
.text:000000000000378F                 mov     r8, rbp
.text:0000000000003792                 mov     rdx, rax        ; format
.text:0000000000003795                 mov     rcx, r14
.text:0000000000003798                 xor     esi, esi        ; errnum
.text:000000000000379A                 xor     edi, edi        ; status
.text:000000000000379C                 xor     eax, eax
.text:000000000000379E                 call    _error
.text:00000000000037A3
.text:00000000000037A3 loc_37A3:                               ; CODE XREF: rm+7E2↓j
.text:00000000000037A3                 mov     edx, 5
.text:00000000000037A8                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00000000000037AF                 jmp     loc_3698
.text:00000000000037AF ; ---------------------------------------------------------------------------
.text:00000000000037B4                 align 8
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: rm+17C↑j
.text:00000000000037B8                 mov     rax, [r15+8]
.text:00000000000037BC                 cmp     qword ptr [rax+58h], 0
.text:00000000000037C1                 jns     short loc_37DB
.text:00000000000037C3                 jmp     short loc_37E2
.text:00000000000037C3 ; ---------------------------------------------------------------------------
.text:00000000000037C5                 align 8
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: rm+750↓j
.text:00000000000037C8                 mov     qword ptr [rax+20h], 1
.text:00000000000037D0                 mov     rax, [rax+8]
.text:00000000000037D4                 cmp     qword ptr [rax+58h], 0
.text:00000000000037D9                 js      short loc_37E2
.text:00000000000037DB
.text:00000000000037DB loc_37DB:                               ; CODE XREF: rm+731↑j
.text:00000000000037DB                 cmp     qword ptr [rax+20h], 0
.text:00000000000037E0                 jz      short loc_37C8
.text:00000000000037E2
.text:00000000000037E2 loc_37E2:                               ; CODE XREF: rm+733↑j
.text:00000000000037E2                                         ; rm+749↑j
.text:00000000000037E2                 mov     rsi, [r15+38h]
.text:00000000000037E6                 mov     edi, 4
.text:00000000000037EB                 call    quotearg_style
.text:00000000000037F0                 lea     rsi, aSkippingSSince ; "skipping %s, since it's on a different "...
.text:00000000000037F7                 mov     rbp, rax
.text:00000000000037FA                 mov     edx, 5          ; category
.text:00000000000037FF                 xor     edi, edi        ; domainname
.text:0000000000003801                 call    _dcgettext
.text:0000000000003806                 mov     rcx, rbp
.text:0000000000003809                 mov     rdx, rax        ; format
.text:000000000000380C                 xor     esi, esi        ; errnum
.text:000000000000380E                 xor     edi, edi        ; status
.text:0000000000003810                 xor     eax, eax
.text:0000000000003812                 mov     ebp, 4
.text:0000000000003817                 call    _error
.text:000000000000381C                 jmp     loc_3100
.text:000000000000381C ; ---------------------------------------------------------------------------
.text:0000000000003821                 align 8
.text:0000000000003828
.text:0000000000003828 loc_3828:                               ; CODE XREF: rm+28↑j
.text:0000000000003828                 mov     ebp, 2
.text:000000000000382D                 jmp     loc_31BC
.text:0000000000003832 ; ---------------------------------------------------------------------------
.text:0000000000003832
.text:0000000000003832 loc_3832:                               ; CODE XREF: rm+26A↑j
.text:0000000000003832                 mov     edi, edx        ; fd
.text:0000000000003834                 call    _close
.text:0000000000003839                 jmp     loc_3341
.text:000000000000383E ; ---------------------------------------------------------------------------
.text:000000000000383E
.text:000000000000383E loc_383E:                               ; CODE XREF: rm+6BA↑j
.text:000000000000383E                 mov     rsi, rdx
.text:0000000000003841                 mov     edi, 4
.text:0000000000003846                 call    quotearg_style
.text:000000000000384B                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:0000000000003852                 mov     rbp, rax
.text:0000000000003855                 xor     edi, edi        ; domainname
.text:0000000000003857                 mov     edx, 5          ; category
.text:000000000000385C                 call    _dcgettext
.text:0000000000003861                 mov     rcx, rbp
.text:0000000000003864                 mov     rdx, rax        ; format
.text:0000000000003867                 xor     esi, esi        ; errnum
.text:0000000000003869                 xor     edi, edi        ; status
.text:000000000000386B                 xor     eax, eax
.text:000000000000386D                 call    _error
.text:0000000000003872                 jmp     loc_37A3
.text:0000000000003877 ; ---------------------------------------------------------------------------
.text:0000000000003877
.text:0000000000003877 def_312C:                               ; CODE XREF: rm+8C↑j
.text:0000000000003877                                         ; rm+9C↑j
.text:0000000000003877                                         ; DATA XREF: ...
.text:0000000000003877                 mov     rdx, [r15+38h]  ; jumptable 000000000000312C default case, cases 0,5,9
.text:000000000000387B                 mov     esi, 3
.text:0000000000003880                 xor     edi, edi
.text:0000000000003882                 call    quotearg_n_style_colon
.text:0000000000003887                 movzx   ebx, word ptr [r15+70h]
.text:000000000000388C                 lea     rsi, aUnexpectedFail ; "unexpected failure: fts_info=%d: %s\npl"...
.text:0000000000003893                 mov     edx, 5          ; category
.text:0000000000003898                 xor     edi, edi        ; domainname
.text:000000000000389A                 mov     rbp, rax
.text:000000000000389D                 call    _dcgettext
.text:00000000000038A2                 lea     r9, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000038A9                 mov     rdx, rax        ; format
.text:00000000000038AC                 mov     r8, rbp
.text:00000000000038AF                 mov     ecx, ebx
.text:00000000000038B1                 xor     esi, esi        ; errnum
.text:00000000000038B3                 xor     edi, edi        ; status
.text:00000000000038B5                 xor     eax, eax
.text:00000000000038B7                 call    _error
.text:00000000000038BC                 call    _abort
.text:00000000000038C1 ; ---------------------------------------------------------------------------
.text:00000000000038C1
.text:00000000000038C1 loc_38C1:                               ; CODE XREF: rm+1C1↑j
.text:00000000000038C1                 lea     rcx, __PRETTY_FUNCTION___7067 ; "rm"
.text:00000000000038C8                 lea     rsi, aCoreutils831Sr_0 ; "../coreutils-8.31/src/remove.c"
.text:00000000000038CF                 lea     rdi, aValidStatusS ; "VALID_STATUS (s)"
.text:00000000000038D6                 mov     edx, 261h       ; line
.text:00000000000038DB                 call    ___assert_fail
.text:00000000000038E0 ; ---------------------------------------------------------------------------
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: rm+13F↑j
.text:00000000000038E0                 call    ___stack_chk_fail
.text:00000000000038E5 ; ---------------------------------------------------------------------------
.text:00000000000038E5
.text:00000000000038E5 loc_38E5:                               ; CODE XREF: rm+1CA↑j
.text:00000000000038E5                 mov     ebp, 4
.text:00000000000038EA                 jmp     loc_3100
.text:00000000000038EA ; } // starts at 3090
.text:00000000000038EA rm              endp
.text:00000000000038EA
.text:00000000000038EA ; ---------------------------------------------------------------------------
.text:00000000000038EF                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0 ; Attributes: noreturn
.text:00000000000038F0
.text:00000000000038F0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 mov     edi, 1          ; status
.text:00000000000038F5                 jmp     usage
.text:00000000000038F5 ; } // starts at 38F0
.text:00000000000038F5 __argmatch_die  endp
.text:00000000000038F5
.text:00000000000038F5 ; ---------------------------------------------------------------------------
.text:00000000000038FA                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900 ; Attributes: info_from_lumina
.text:0000000000003900
.text:0000000000003900 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003900                 public argmatch
.text:0000000000003900 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000003900
.text:0000000000003900 var_58          = qword ptr -58h
.text:0000000000003900 s2              = qword ptr -50h
.text:0000000000003900 var_41          = byte ptr -41h
.text:0000000000003900 var_40          = qword ptr -40h
.text:0000000000003900
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 push    r15
.text:0000000000003902                 push    r14
.text:0000000000003904                 mov     r15, rsi
.text:0000000000003907                 push    r13
.text:0000000000003909                 push    r12
.text:000000000000390B                 mov     r13, rcx
.text:000000000000390E                 push    rbp
.text:000000000000390F                 push    rbx
.text:0000000000003910                 mov     rbp, rdx
.text:0000000000003913                 sub     rsp, 28h
.text:0000000000003917                 mov     [rsp+58h+s2], rdi
.text:000000000000391C                 mov     [rsp+58h+var_40], rdx
.text:0000000000003921                 call    _strlen
.text:0000000000003926                 mov     r14, [r15]
.text:0000000000003929                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000003931                 test    r14, r14
.text:0000000000003934                 jz      loc_39ED
.text:000000000000393A                 mov     r12, rax
.text:000000000000393D                 mov     [rsp+58h+var_41], 0
.text:0000000000003942                 xor     ebx, ebx
.text:0000000000003944                 jmp     short loc_3997
.text:0000000000003944 ; ---------------------------------------------------------------------------
.text:0000000000003946                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000003950                 mov     rax, [rsp+58h+var_40]
.text:0000000000003955                 test    rax, rax
.text:0000000000003958                 jz      loc_3A00
.text:000000000000395E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000003962                 mov     rdx, r13        ; n
.text:0000000000003965                 mov     rsi, rbp        ; s2
.text:0000000000003968                 imul    rdi, r13
.text:000000000000396C                 add     rdi, rax        ; s1
.text:000000000000396F                 call    _memcmp
.text:0000000000003974                 test    eax, eax
.text:0000000000003976                 movzx   eax, [rsp+58h+var_41]
.text:000000000000397B                 mov     ecx, 1
.text:0000000000003980                 cmovnz  eax, ecx
.text:0000000000003983                 mov     [rsp+58h+var_41], al
.text:0000000000003987
.text:0000000000003987 loc_3987:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000003987                                         ; argmatch+105↓j
.text:0000000000003987                 add     rbx, 1
.text:000000000000398B                 add     rbp, r13
.text:000000000000398E                 mov     r14, [r15+rbx*8]
.text:0000000000003992                 test    r14, r14
.text:0000000000003995                 jz      short loc_39D8
.text:0000000000003997
.text:0000000000003997 loc_3997:                               ; CODE XREF: argmatch+44↑j
.text:0000000000003997                                         ; argmatch+D1↓j
.text:0000000000003997                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000399C                 mov     rdx, r12        ; n
.text:000000000000399F                 mov     rdi, r14        ; s1
.text:00000000000039A2                 call    _strncmp
.text:00000000000039A7                 test    eax, eax
.text:00000000000039A9                 jnz     short loc_3987
.text:00000000000039AB                 mov     rdi, r14        ; s
.text:00000000000039AE                 call    _strlen
.text:00000000000039B3                 cmp     rax, r12
.text:00000000000039B6                 jz      short loc_3A10
.text:00000000000039B8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000039BD                 jnz     short loc_3950
.text:00000000000039BF                 mov     [rsp+58h+var_58], rbx
.text:00000000000039C3                 add     rbx, 1
.text:00000000000039C7                 add     rbp, r13
.text:00000000000039CA                 mov     r14, [r15+rbx*8]
.text:00000000000039CE                 test    r14, r14
.text:00000000000039D1                 jnz     short loc_3997
.text:00000000000039D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: argmatch+95↑j
.text:00000000000039D8                 cmp     [rsp+58h+var_41], 0
.text:00000000000039DD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000039E4                 cmovz   rax, [rsp+58h+var_58]
.text:00000000000039E9                 mov     [rsp+58h+var_58], rax
.text:00000000000039ED
.text:00000000000039ED loc_39ED:                               ; CODE XREF: argmatch+34↑j
.text:00000000000039ED                                         ; argmatch+114↓j
.text:00000000000039ED                 mov     rax, [rsp+58h+var_58]
.text:00000000000039F1                 add     rsp, 28h
.text:00000000000039F5                 pop     rbx
.text:00000000000039F6                 pop     rbp
.text:00000000000039F7                 pop     r12
.text:00000000000039F9                 pop     r13
.text:00000000000039FB                 pop     r14
.text:00000000000039FD                 pop     r15
.text:00000000000039FF                 retn
.text:0000000000003A00 ; ---------------------------------------------------------------------------
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: argmatch+58↑j
.text:0000000000003A00                 mov     [rsp+58h+var_41], 1
.text:0000000000003A05                 jmp     short loc_3987
.text:0000000000003A05 ; ---------------------------------------------------------------------------
.text:0000000000003A07                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000003A10                 mov     [rsp+58h+var_58], rbx
.text:0000000000003A14                 jmp     short loc_39ED
.text:0000000000003A14 ; } // starts at 3900
.text:0000000000003A14 argmatch        endp
.text:0000000000003A14
.text:0000000000003A14 ; ---------------------------------------------------------------------------
.text:0000000000003A16                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20 ; Attributes: info_from_lumina
.text:0000000000003A20
.text:0000000000003A20 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000003A20                 public argmatch_invalid
.text:0000000000003A20 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A24                 push    r12
.text:0000000000003A26                 mov     edx, 5          ; category
.text:0000000000003A2B                 push    rbp
.text:0000000000003A2C                 mov     r12, rsi
.text:0000000000003A2F                 push    rbx
.text:0000000000003A30                 mov     rbp, rdi
.text:0000000000003A33                 jz      short loc_3A80
.text:0000000000003A35                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000003A3C                 xor     edi, edi        ; domainname
.text:0000000000003A3E                 call    _dcgettext
.text:0000000000003A43                 mov     rbx, rax
.text:0000000000003A46
.text:0000000000003A46 loc_3A46:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000003A46                 mov     rsi, rbp
.text:0000000000003A49                 mov     edi, 1
.text:0000000000003A4E                 call    quote_n
.text:0000000000003A53                 mov     rdx, r12
.text:0000000000003A56                 mov     rbp, rax
.text:0000000000003A59                 mov     esi, 8
.text:0000000000003A5E                 xor     edi, edi
.text:0000000000003A60                 call    quotearg_n_style
.text:0000000000003A65                 mov     r8, rbp
.text:0000000000003A68                 mov     rdx, rbx        ; format
.text:0000000000003A6B                 mov     rcx, rax
.text:0000000000003A6E                 pop     rbx
.text:0000000000003A6F                 pop     rbp
.text:0000000000003A70                 pop     r12
.text:0000000000003A72                 xor     esi, esi        ; errnum
.text:0000000000003A74                 xor     edi, edi        ; status
.text:0000000000003A76                 xor     eax, eax
.text:0000000000003A78                 jmp     _error
.text:0000000000003A78 ; ---------------------------------------------------------------------------
.text:0000000000003A7D                 align 20h
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000003A80                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000003A87                 xor     edi, edi        ; domainname
.text:0000000000003A89                 call    _dcgettext
.text:0000000000003A8E                 mov     rbx, rax
.text:0000000000003A91                 jmp     short loc_3A46
.text:0000000000003A91 ; } // starts at 3A20
.text:0000000000003A91 argmatch_invalid endp
.text:0000000000003A91
.text:0000000000003A91 ; ---------------------------------------------------------------------------
.text:0000000000003A93                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0 ; Attributes: info_from_lumina
.text:0000000000003AA0
.text:0000000000003AA0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003AA0                 public argmatch_valid
.text:0000000000003AA0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 push    r15
.text:0000000000003AA2                 push    r14
.text:0000000000003AA4                 mov     r14, rdi
.text:0000000000003AA7                 push    r13
.text:0000000000003AA9                 push    r12
.text:0000000000003AAB                 xor     edi, edi        ; domainname
.text:0000000000003AAD                 push    rbp
.text:0000000000003AAE                 push    rbx
.text:0000000000003AAF                 mov     rbp, rsi
.text:0000000000003AB2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000003AB9                 mov     r12, rdx
.text:0000000000003ABC                 mov     edx, 5          ; category
.text:0000000000003AC1                 sub     rsp, 8
.text:0000000000003AC5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000003ACC                 call    _dcgettext
.text:0000000000003AD1                 mov     rdi, rax        ; s
.text:0000000000003AD4                 mov     rsi, rbx        ; stream
.text:0000000000003AD7                 call    _fputs_unlocked
.text:0000000000003ADC                 mov     r15, [r14]
.text:0000000000003ADF                 test    r15, r15
.text:0000000000003AE2                 jz      loc_3B78
.text:0000000000003AE8                 xor     r13d, r13d
.text:0000000000003AEB                 xor     ebx, ebx
.text:0000000000003AED                 jmp     short loc_3B28
.text:0000000000003AED ; ---------------------------------------------------------------------------
.text:0000000000003AEF                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000003AF0                                         ; argmatch_valid+9D↓j
.text:0000000000003AF0                 mov     rdi, r15
.text:0000000000003AF3                 add     rbx, 1
.text:0000000000003AF7                 mov     r13, rbp
.text:0000000000003AFA                 call    quote
.text:0000000000003AFF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003B06                 lea     rdx, aS         ; "\n  - %s"
.text:0000000000003B0D                 mov     rcx, rax
.text:0000000000003B10                 mov     esi, 1
.text:0000000000003B15                 xor     eax, eax
.text:0000000000003B17                 add     rbp, r12
.text:0000000000003B1A                 call    ___fprintf_chk
.text:0000000000003B1F                 mov     r15, [r14+rbx*8]
.text:0000000000003B23                 test    r15, r15
.text:0000000000003B26                 jz      short loc_3B78
.text:0000000000003B28
.text:0000000000003B28 loc_3B28:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000003B28                                         ; argmatch_valid+D2↓j
.text:0000000000003B28                 test    rbx, rbx
.text:0000000000003B2B                 jz      short loc_3AF0
.text:0000000000003B2D                 mov     rdx, r12        ; n
.text:0000000000003B30                 mov     rsi, rbp        ; s2
.text:0000000000003B33                 mov     rdi, r13        ; s1
.text:0000000000003B36                 call    _memcmp
.text:0000000000003B3B                 test    eax, eax
.text:0000000000003B3D                 jnz     short loc_3AF0
.text:0000000000003B3F                 mov     rdi, r15
.text:0000000000003B42                 add     rbx, 1
.text:0000000000003B46                 add     rbp, r12
.text:0000000000003B49                 call    quote
.text:0000000000003B4E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003B55                 lea     rdx, aS_0       ; ", %s"
.text:0000000000003B5C                 mov     rcx, rax
.text:0000000000003B5F                 mov     esi, 1
.text:0000000000003B64                 xor     eax, eax
.text:0000000000003B66                 call    ___fprintf_chk
.text:0000000000003B6B                 mov     r15, [r14+rbx*8]
.text:0000000000003B6F                 test    r15, r15
.text:0000000000003B72                 jnz     short loc_3B28
.text:0000000000003B74                 nop     dword ptr [rax+00h]
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000003B78                                         ; argmatch_valid+86↑j
.text:0000000000003B78                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003B7F                 mov     rax, [rdi+28h]
.text:0000000000003B83                 cmp     rax, [rdi+30h]
.text:0000000000003B87                 jnb     short loc_3BA8
.text:0000000000003B89                 lea     rdx, [rax+1]
.text:0000000000003B8D                 mov     [rdi+28h], rdx
.text:0000000000003B91                 mov     byte ptr [rax], 0Ah
.text:0000000000003B94                 add     rsp, 8
.text:0000000000003B98                 pop     rbx
.text:0000000000003B99                 pop     rbp
.text:0000000000003B9A                 pop     r12
.text:0000000000003B9C                 pop     r13
.text:0000000000003B9E                 pop     r14
.text:0000000000003BA0                 pop     r15
.text:0000000000003BA2                 retn
.text:0000000000003BA2 ; ---------------------------------------------------------------------------
.text:0000000000003BA3                 align 8
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000003BA8                 add     rsp, 8
.text:0000000000003BAC                 mov     esi, 0Ah        ; int
.text:0000000000003BB1                 pop     rbx
.text:0000000000003BB2                 pop     rbp
.text:0000000000003BB3                 pop     r12
.text:0000000000003BB5                 pop     r13
.text:0000000000003BB7                 pop     r14
.text:0000000000003BB9                 pop     r15
.text:0000000000003BBB                 jmp     ___overflow
.text:0000000000003BBB ; } // starts at 3AA0
.text:0000000000003BBB argmatch_valid  endp
.text:0000000000003BBB
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0 ; Attributes: info_from_lumina
.text:0000000000003BC0
.text:0000000000003BC0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000003BC0                 public __xargmatch_internal
.text:0000000000003BC0 __xargmatch_internal proc near          ; CODE XREF: main+19A↑p
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 push    r15
.text:0000000000003BC2                 push    r14
.text:0000000000003BC4                 mov     r14, rdi
.text:0000000000003BC7                 push    r13
.text:0000000000003BC9                 push    r12
.text:0000000000003BCB                 mov     r12, rsi
.text:0000000000003BCE                 push    rbp
.text:0000000000003BCF                 push    rbx
.text:0000000000003BD0                 mov     rbp, rcx
.text:0000000000003BD3                 mov     rbx, rdx
.text:0000000000003BD6                 mov     rcx, r8
.text:0000000000003BD9                 mov     rdx, rbp
.text:0000000000003BDC                 sub     rsp, 8
.text:0000000000003BE0                 mov     rsi, rbx
.text:0000000000003BE3                 mov     rdi, r12
.text:0000000000003BE6                 mov     r15, r8
.text:0000000000003BE9                 mov     r13, r9
.text:0000000000003BEC                 call    argmatch
.text:0000000000003BF1                 test    rax, rax
.text:0000000000003BF4                 js      short loc_3C05
.text:0000000000003BF6
.text:0000000000003BF6 loc_3BF6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000003BF6                 add     rsp, 8
.text:0000000000003BFA                 pop     rbx
.text:0000000000003BFB                 pop     rbp
.text:0000000000003BFC                 pop     r12
.text:0000000000003BFE                 pop     r13
.text:0000000000003C00                 pop     r14
.text:0000000000003C02                 pop     r15
.text:0000000000003C04                 retn
.text:0000000000003C05 ; ---------------------------------------------------------------------------
.text:0000000000003C05
.text:0000000000003C05 loc_3C05:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000003C05                 mov     rdx, rax
.text:0000000000003C08                 mov     rsi, r12
.text:0000000000003C0B                 mov     rdi, r14
.text:0000000000003C0E                 call    argmatch_invalid
.text:0000000000003C13                 mov     rdx, r15
.text:0000000000003C16                 mov     rsi, rbp
.text:0000000000003C19                 mov     rdi, rbx
.text:0000000000003C1C                 call    argmatch_valid
.text:0000000000003C21                 call    r13
.text:0000000000003C24                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C2B                 jmp     short loc_3BF6
.text:0000000000003C2B ; } // starts at 3BC0
.text:0000000000003C2B __xargmatch_internal endp
.text:0000000000003C2B
.text:0000000000003C2B ; ---------------------------------------------------------------------------
.text:0000000000003C2D                 align 10h
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30 ; Attributes: info_from_lumina
.text:0000000000003C30
.text:0000000000003C30 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003C30                 public argmatch_to_argument
.text:0000000000003C30 argmatch_to_argument proc near
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 push    r14
.text:0000000000003C32                 push    r13
.text:0000000000003C34                 push    r12
.text:0000000000003C36                 push    rbp
.text:0000000000003C37                 push    rbx
.text:0000000000003C38                 mov     r14, [rsi]
.text:0000000000003C3B                 test    r14, r14
.text:0000000000003C3E                 jz      short loc_3C71
.text:0000000000003C40                 mov     r12, rcx
.text:0000000000003C43                 mov     r13, rdi
.text:0000000000003C46                 mov     rbp, rdx
.text:0000000000003C49                 lea     rbx, [rsi+8]
.text:0000000000003C4D                 jmp     short loc_3C5F
.text:0000000000003C4D ; ---------------------------------------------------------------------------
.text:0000000000003C4F                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000003C50                 mov     r14, [rbx]
.text:0000000000003C53                 add     rbp, r12
.text:0000000000003C56                 add     rbx, 8
.text:0000000000003C5A                 test    r14, r14
.text:0000000000003C5D                 jz      short loc_3C71
.text:0000000000003C5F
.text:0000000000003C5F loc_3C5F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000003C5F                 mov     rdx, r12        ; n
.text:0000000000003C62                 mov     rsi, rbp        ; s2
.text:0000000000003C65                 mov     rdi, r13        ; s1
.text:0000000000003C68                 call    _memcmp
.text:0000000000003C6D                 test    eax, eax
.text:0000000000003C6F                 jnz     short loc_3C50
.text:0000000000003C71
.text:0000000000003C71 loc_3C71:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000003C71                                         ; argmatch_to_argument+2D↑j
.text:0000000000003C71                 pop     rbx
.text:0000000000003C72                 mov     rax, r14
.text:0000000000003C75                 pop     rbp
.text:0000000000003C76                 pop     r12
.text:0000000000003C78                 pop     r13
.text:0000000000003C7A                 pop     r14
.text:0000000000003C7C                 retn
.text:0000000000003C7C ; } // starts at 3C30
.text:0000000000003C7C argmatch_to_argument endp
.text:0000000000003C7C
.text:0000000000003C7C ; ---------------------------------------------------------------------------
.text:0000000000003C7D                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80                 public close_stdin_set_file_name
.text:0000000000003C80 close_stdin_set_file_name proc near
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 mov     cs:file_name, rdi
.text:0000000000003C87                 retn
.text:0000000000003C87 ; } // starts at 3C80
.text:0000000000003C87 close_stdin_set_file_name endp
.text:0000000000003C87
.text:0000000000003C87 ; ---------------------------------------------------------------------------
.text:0000000000003C88                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90                 public close_stdin
.text:0000000000003C90 close_stdin     proc near               ; DATA XREF: main+6C↑o
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 push    r12
.text:0000000000003C92                 push    rbp
.text:0000000000003C93                 push    rbx
.text:0000000000003C94                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:0000000000003C9B                 mov     rdi, rbx
.text:0000000000003C9E                 call    freadahead
.text:0000000000003CA3                 test    rax, rax
.text:0000000000003CA6                 jnz     loc_3D48
.text:0000000000003CAC                 mov     rdi, rbx        ; stream
.text:0000000000003CAF                 call    close_stream
.text:0000000000003CB4                 test    eax, eax
.text:0000000000003CB6                 jnz     short loc_3CE8
.text:0000000000003CB8                 pop     rbx
.text:0000000000003CB9                 pop     rbp
.text:0000000000003CBA                 pop     r12
.text:0000000000003CBC                 jmp     close_stdout
.text:0000000000003CBC ; ---------------------------------------------------------------------------
.text:0000000000003CC1                 align 8
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: close_stdin+D0↓j
.text:0000000000003CC8                 call    rpl_fflush
.text:0000000000003CCD                 test    eax, eax
.text:0000000000003CCF                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000003CD6                 jz      loc_3D66
.text:0000000000003CDC                 call    close_stream
.text:0000000000003CE1                 nop     dword ptr [rax+00000000h]
.text:0000000000003CE8
.text:0000000000003CE8 loc_3CE8:                               ; CODE XREF: close_stdin+26↑j
.text:0000000000003CE8                                         ; close_stdin+DD↓j
.text:0000000000003CE8                 lea     rsi, aErrorClosingFi ; "error closing file"
.text:0000000000003CEF                 xor     edi, edi        ; domainname
.text:0000000000003CF1                 mov     edx, 5          ; category
.text:0000000000003CF6                 call    _dcgettext
.text:0000000000003CFB                 mov     rbx, cs:file_name
.text:0000000000003D02                 mov     r12, rax
.text:0000000000003D05                 call    ___errno_location
.text:0000000000003D0A                 mov     rbp, rax
.text:0000000000003D0D                 test    rbx, rbx
.text:0000000000003D10                 jz      short loc_3D80
.text:0000000000003D12                 mov     rdi, rbx
.text:0000000000003D15                 call    quotearg_colon
.text:0000000000003D1A                 mov     esi, [rbp+0]    ; errnum
.text:0000000000003D1D                 lea     rdx, format     ; "%s: %s"
.text:0000000000003D24                 mov     rcx, rax
.text:0000000000003D27                 mov     r8, r12
.text:0000000000003D2A                 xor     edi, edi        ; status
.text:0000000000003D2C                 xor     eax, eax
.text:0000000000003D2E                 call    _error
.text:0000000000003D33
.text:0000000000003D33 loc_3D33:                               ; CODE XREF: close_stdin+105↓j
.text:0000000000003D33                 call    close_stdout
.text:0000000000003D38                 mov     edi, cs:exit_failure ; status
.text:0000000000003D3E                 call    __exit
.text:0000000000003D3E ; ---------------------------------------------------------------------------
.text:0000000000003D43                 align 8
.text:0000000000003D48
.text:0000000000003D48 loc_3D48:                               ; CODE XREF: close_stdin+16↑j
.text:0000000000003D48                 xor     esi, esi
.text:0000000000003D4A                 mov     rdi, rbx
.text:0000000000003D4D                 mov     edx, 1
.text:0000000000003D52                 call    rpl_fseeko
.text:0000000000003D57                 test    eax, eax
.text:0000000000003D59                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000003D60                 jz      loc_3CC8
.text:0000000000003D66
.text:0000000000003D66 loc_3D66:                               ; CODE XREF: close_stdin+46↑j
.text:0000000000003D66                 call    close_stream
.text:0000000000003D6B                 test    eax, eax
.text:0000000000003D6D                 jnz     loc_3CE8
.text:0000000000003D73                 pop     rbx
.text:0000000000003D74                 pop     rbp
.text:0000000000003D75                 pop     r12
.text:0000000000003D77                 jmp     close_stdout
.text:0000000000003D77 ; ---------------------------------------------------------------------------
.text:0000000000003D7C                 align 20h
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: close_stdin+80↑j
.text:0000000000003D80                 mov     esi, [rax]      ; errnum
.text:0000000000003D82                 lea     rdx, aS_0+2     ; format
.text:0000000000003D89                 mov     rcx, r12
.text:0000000000003D8C                 xor     edi, edi        ; status
.text:0000000000003D8E                 xor     eax, eax
.text:0000000000003D90                 call    _error
.text:0000000000003D95                 jmp     short loc_3D33
.text:0000000000003D95 ; } // starts at 3C90
.text:0000000000003D95 close_stdin     endp
.text:0000000000003D95
.text:0000000000003D95 ; ---------------------------------------------------------------------------
.text:0000000000003D97                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DA0
.text:0000000000003DA0
.text:0000000000003DA0                 public close_stdout_set_file_name
.text:0000000000003DA0 close_stdout_set_file_name proc near
.text:0000000000003DA0 ; __unwind {
.text:0000000000003DA0                 mov     cs:file_name_0, rdi
.text:0000000000003DA7                 retn
.text:0000000000003DA7 ; } // starts at 3DA0
.text:0000000000003DA7 close_stdout_set_file_name endp
.text:0000000000003DA7
.text:0000000000003DA7 ; ---------------------------------------------------------------------------
.text:0000000000003DA8                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DB0
.text:0000000000003DB0
.text:0000000000003DB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000003DB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003DB0 ; __unwind {
.text:0000000000003DB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000003DB7                 retn
.text:0000000000003DB7 ; } // starts at 3DB0
.text:0000000000003DB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000003DB7
.text:0000000000003DB7 ; ---------------------------------------------------------------------------
.text:0000000000003DB8                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DC0
.text:0000000000003DC0 ; Attributes: info_from_lumina
.text:0000000000003DC0
.text:0000000000003DC0 ; void __cdecl close_stdout()
.text:0000000000003DC0                 public close_stdout
.text:0000000000003DC0 close_stdout    proc near               ; CODE XREF: close_stdin+2C↑j
.text:0000000000003DC0                                         ; close_stdin:loc_3D33↑p ...
.text:0000000000003DC0 ; __unwind {
.text:0000000000003DC0                 push    rbp
.text:0000000000003DC1                 push    rbx
.text:0000000000003DC2                 sub     rsp, 8
.text:0000000000003DC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003DCD                 call    close_stream
.text:0000000000003DD2                 test    eax, eax
.text:0000000000003DD4                 jz      short loc_3DEC
.text:0000000000003DD6                 call    ___errno_location
.text:0000000000003DDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003DE2                 mov     rbx, rax
.text:0000000000003DE5                 jz      short loc_3E03
.text:0000000000003DE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003DEA                 jnz     short loc_3E03
.text:0000000000003DEC
.text:0000000000003DEC loc_3DEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000003DEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003DF3                 call    close_stream
.text:0000000000003DF8                 test    eax, eax
.text:0000000000003DFA                 jnz     short loc_3E42
.text:0000000000003DFC                 add     rsp, 8
.text:0000000000003E00                 pop     rbx
.text:0000000000003E01                 pop     rbp
.text:0000000000003E02                 retn
.text:0000000000003E03 ; ---------------------------------------------------------------------------
.text:0000000000003E03
.text:0000000000003E03 loc_3E03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003E03                                         ; close_stdout+2A↑j
.text:0000000000003E03                 lea     rsi, aWriteError ; "write error"
.text:0000000000003E0A                 xor     edi, edi        ; domainname
.text:0000000000003E0C                 mov     edx, 5          ; category
.text:0000000000003E11                 call    _dcgettext
.text:0000000000003E16                 mov     rdi, cs:file_name_0
.text:0000000000003E1D                 mov     rbp, rax
.text:0000000000003E20                 test    rdi, rdi
.text:0000000000003E23                 jz      short loc_3E4D
.text:0000000000003E25                 call    quotearg_colon
.text:0000000000003E2A                 mov     esi, [rbx]      ; errnum
.text:0000000000003E2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003E33                 mov     rcx, rax
.text:0000000000003E36                 mov     r8, rbp
.text:0000000000003E39                 xor     edi, edi        ; status
.text:0000000000003E3B                 xor     eax, eax
.text:0000000000003E3D                 call    _error
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003E42                                         ; close_stdout+A2↓j
.text:0000000000003E42                 mov     edi, cs:exit_failure ; status
.text:0000000000003E48                 call    __exit
.text:0000000000003E4D ; ---------------------------------------------------------------------------
.text:0000000000003E4D
.text:0000000000003E4D loc_3E4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003E4D                 mov     esi, [rbx]      ; errnum
.text:0000000000003E4F                 lea     rdx, aS_0+2     ; format
.text:0000000000003E56                 mov     rcx, rax
.text:0000000000003E59                 xor     edi, edi        ; status
.text:0000000000003E5B                 xor     eax, eax
.text:0000000000003E5D                 call    _error
.text:0000000000003E62                 jmp     short loc_3E42
.text:0000000000003E62 ; } // starts at 3DC0
.text:0000000000003E62 close_stdout    endp
.text:0000000000003E62
.text:0000000000003E62 ; ---------------------------------------------------------------------------
.text:0000000000003E64                 align 10h
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70 ; Attributes: info_from_lumina
.text:0000000000003E70
.text:0000000000003E70 ; char *__fastcall last_component(const char *name)
.text:0000000000003E70                 public last_component
.text:0000000000003E70 last_component  proc near               ; CODE XREF: rm+2F6↑p
.text:0000000000003E70                                         ; mfile_name_concat+17↓p
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 movzx   edx, byte ptr [rdi]
.text:0000000000003E73                 mov     rax, rdi
.text:0000000000003E76                 cmp     dl, 2Fh ; '/'
.text:0000000000003E79                 jnz     short loc_3E8C
.text:0000000000003E7B                 nop     dword ptr [rax+rax+00h]
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: last_component+1A↓j
.text:0000000000003E80                 add     rax, 1
.text:0000000000003E84                 movzx   edx, byte ptr [rax]
.text:0000000000003E87                 cmp     dl, 2Fh ; '/'
.text:0000000000003E8A                 jz      short loc_3E80
.text:0000000000003E8C
.text:0000000000003E8C loc_3E8C:                               ; CODE XREF: last_component+9↑j
.text:0000000000003E8C                 test    dl, dl
.text:0000000000003E8E                 jz      short locret_3ECA
.text:0000000000003E90                 mov     rcx, rax
.text:0000000000003E93                 xor     esi, esi
.text:0000000000003E95                 jmp     short loc_3EB5
.text:0000000000003E95 ; ---------------------------------------------------------------------------
.text:0000000000003E97                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: last_component+48↓j
.text:0000000000003EA0                 test    sil, sil
.text:0000000000003EA3                 jz      short loc_3EAA
.text:0000000000003EA5                 mov     rax, rcx
.text:0000000000003EA8                 xor     esi, esi
.text:0000000000003EAA
.text:0000000000003EAA loc_3EAA:                               ; CODE XREF: last_component+33↑j
.text:0000000000003EAA                 add     rcx, 1
.text:0000000000003EAE                 movzx   edx, byte ptr [rcx]
.text:0000000000003EB1                 test    dl, dl
.text:0000000000003EB3                 jz      short locret_3ECA
.text:0000000000003EB5
.text:0000000000003EB5 loc_3EB5:                               ; CODE XREF: last_component+25↑j
.text:0000000000003EB5                                         ; last_component+58↓j
.text:0000000000003EB5                 cmp     dl, 2Fh ; '/'
.text:0000000000003EB8                 jnz     short loc_3EA0
.text:0000000000003EBA                 add     rcx, 1
.text:0000000000003EBE                 movzx   edx, byte ptr [rcx]
.text:0000000000003EC1                 mov     esi, 1
.text:0000000000003EC6                 test    dl, dl
.text:0000000000003EC8                 jnz     short loc_3EB5
.text:0000000000003ECA
.text:0000000000003ECA locret_3ECA:                            ; CODE XREF: last_component+1E↑j
.text:0000000000003ECA                                         ; last_component+43↑j
.text:0000000000003ECA                 rep retn
.text:0000000000003ECA ; } // starts at 3E70
.text:0000000000003ECA last_component  endp
.text:0000000000003ECA
.text:0000000000003ECA ; ---------------------------------------------------------------------------
.text:0000000000003ECC                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0 ; Attributes: info_from_lumina
.text:0000000000003ED0
.text:0000000000003ED0 ; size_t __fastcall base_len(const char *name)
.text:0000000000003ED0                 public base_len
.text:0000000000003ED0 base_len        proc near               ; CODE XREF: mfile_name_concat+22↓p
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 push    rbx
.text:0000000000003ED1                 mov     rbx, rdi
.text:0000000000003ED4                 call    _strlen
.text:0000000000003ED9                 cmp     rax, 1
.text:0000000000003EDD                 jbe     short loc_3EEA
.text:0000000000003EDF                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000003EE4                 lea     rdx, [rax-1]
.text:0000000000003EE8                 jz      short loc_3EF8
.text:0000000000003EEA
.text:0000000000003EEA loc_3EEA:                               ; CODE XREF: base_len+D↑j
.text:0000000000003EEA                 pop     rbx
.text:0000000000003EEB                 retn
.text:0000000000003EEB ; ---------------------------------------------------------------------------
.text:0000000000003EEC                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: base_len+37↓j
.text:0000000000003EF0                 mov     rdx, rax
.text:0000000000003EF3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003EF8
.text:0000000000003EF8 loc_3EF8:                               ; CODE XREF: base_len+18↑j
.text:0000000000003EF8                 cmp     rdx, 1
.text:0000000000003EFC                 jz      short loc_3F10
.text:0000000000003EFE                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000003F03                 lea     rax, [rdx-1]
.text:0000000000003F07                 jz      short loc_3EF0
.text:0000000000003F09                 mov     rax, rdx
.text:0000000000003F0C                 pop     rbx
.text:0000000000003F0D                 retn
.text:0000000000003F0D ; ---------------------------------------------------------------------------
.text:0000000000003F0E                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: base_len+2C↑j
.text:0000000000003F10                 mov     eax, 1
.text:0000000000003F15                 pop     rbx
.text:0000000000003F16                 retn
.text:0000000000003F16 ; } // starts at 3ED0
.text:0000000000003F16 base_len        endp
.text:0000000000003F16
.text:0000000000003F16 ; ---------------------------------------------------------------------------
.text:0000000000003F17                 align 20h
.text:0000000000003F20
.text:0000000000003F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F20
.text:0000000000003F20
.text:0000000000003F20                 public file_type
.text:0000000000003F20 file_type       proc near               ; CODE XREF: prompt+1C7↑p
.text:0000000000003F20 ; __unwind {
.text:0000000000003F20                 mov     eax, [rdi+18h]
.text:0000000000003F23                 mov     edx, 5          ; category
.text:0000000000003F28                 and     eax, 0F000h
.text:0000000000003F2D                 cmp     eax, 8000h
.text:0000000000003F32                 jz      short loc_3F80
.text:0000000000003F34                 cmp     eax, 4000h
.text:0000000000003F39                 jz      loc_3FD0
.text:0000000000003F3F                 cmp     eax, 0A000h
.text:0000000000003F44                 jz      short loc_3FB0
.text:0000000000003F46                 cmp     eax, 6000h
.text:0000000000003F4B                 jz      loc_3FE0
.text:0000000000003F51                 cmp     eax, 2000h
.text:0000000000003F56                 jz      loc_3FF0
.text:0000000000003F5C                 cmp     eax, 1000h
.text:0000000000003F61                 jz      loc_4000
.text:0000000000003F67                 cmp     eax, 0C000h
.text:0000000000003F6C                 jz      short loc_3FC0
.text:0000000000003F6E                 lea     rsi, aWeirdFile ; "weird file"
.text:0000000000003F75                 xor     edi, edi        ; domainname
.text:0000000000003F77                 jmp     _dcgettext
.text:0000000000003F77 ; ---------------------------------------------------------------------------
.text:0000000000003F7C                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: file_type+12↑j
.text:0000000000003F80                 cmp     qword ptr [rdi+30h], 0
.text:0000000000003F85                 jnz     short loc_3F98
.text:0000000000003F87                 lea     rsi, aRegularEmptyFi ; "regular empty file"
.text:0000000000003F8E                 xor     edi, edi        ; domainname
.text:0000000000003F90                 jmp     _dcgettext
.text:0000000000003F90 ; ---------------------------------------------------------------------------
.text:0000000000003F95                 align 8
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: file_type+65↑j
.text:0000000000003F98                 lea     rsi, aRegularFile ; "regular file"
.text:0000000000003F9F                 xor     edi, edi        ; domainname
.text:0000000000003FA1                 jmp     _dcgettext
.text:0000000000003FA1 ; ---------------------------------------------------------------------------
.text:0000000000003FA6                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: file_type+24↑j
.text:0000000000003FB0                 lea     rsi, aSymbolicLink ; "symbolic link"
.text:0000000000003FB7                 xor     edi, edi        ; domainname
.text:0000000000003FB9                 jmp     _dcgettext
.text:0000000000003FB9 ; ---------------------------------------------------------------------------
.text:0000000000003FBE                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: file_type+4C↑j
.text:0000000000003FC0                 lea     rsi, aSocket    ; "socket"
.text:0000000000003FC7                 xor     edi, edi        ; domainname
.text:0000000000003FC9                 jmp     _dcgettext
.text:0000000000003FC9 ; ---------------------------------------------------------------------------
.text:0000000000003FCE                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 loc_3FD0:                               ; CODE XREF: file_type+19↑j
.text:0000000000003FD0                 lea     rsi, aDirectory ; "directory"
.text:0000000000003FD7                 xor     edi, edi        ; domainname
.text:0000000000003FD9                 jmp     _dcgettext
.text:0000000000003FD9 ; ---------------------------------------------------------------------------
.text:0000000000003FDE                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: file_type+2B↑j
.text:0000000000003FE0                 lea     rsi, aBlockSpecialFi ; "block special file"
.text:0000000000003FE7                 xor     edi, edi        ; domainname
.text:0000000000003FE9                 jmp     _dcgettext
.text:0000000000003FE9 ; ---------------------------------------------------------------------------
.text:0000000000003FEE                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: file_type+36↑j
.text:0000000000003FF0                 lea     rsi, aCharacterSpeci ; "character special file"
.text:0000000000003FF7                 xor     edi, edi        ; domainname
.text:0000000000003FF9                 jmp     _dcgettext
.text:0000000000003FF9 ; ---------------------------------------------------------------------------
.text:0000000000003FFE                 align 20h
.text:0000000000004000
.text:0000000000004000 loc_4000:                               ; CODE XREF: file_type+41↑j
.text:0000000000004000                 lea     rsi, aFifo      ; "fifo"
.text:0000000000004007                 xor     edi, edi        ; domainname
.text:0000000000004009                 jmp     _dcgettext
.text:0000000000004009 ; } // starts at 3F20
.text:0000000000004009 file_type       endp
.text:0000000000004009
.text:0000000000004009 ; ---------------------------------------------------------------------------
.text:000000000000400E                 align 10h
.text:0000000000004010
.text:0000000000004010 ; =============== S U B R O U T I N E =======================================
.text:0000000000004010
.text:0000000000004010
.text:0000000000004010                 public file_name_concat
.text:0000000000004010 file_name_concat proc near              ; CODE XREF: rm+524↑p
.text:0000000000004010 ; __unwind {
.text:0000000000004010                 sub     rsp, 8
.text:0000000000004014                 call    mfile_name_concat
.text:0000000000004019                 test    rax, rax
.text:000000000000401C                 jz      short loc_4023
.text:000000000000401E                 add     rsp, 8
.text:0000000000004022                 retn
.text:0000000000004023 ; ---------------------------------------------------------------------------
.text:0000000000004023
.text:0000000000004023 loc_4023:                               ; CODE XREF: file_name_concat+C↑j
.text:0000000000004023                 call    xalloc_die
.text:0000000000004023 ; } // starts at 4010
.text:0000000000004023 file_name_concat endp
.text:0000000000004023
.text:0000000000004023 ; ---------------------------------------------------------------------------
.text:0000000000004028                 align 10h
.text:0000000000004030
.text:0000000000004030 ; =============== S U B R O U T I N E =======================================
.text:0000000000004030
.text:0000000000004030
.text:0000000000004030 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:0000000000004030                 public mfile_name_concat
.text:0000000000004030 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:0000000000004030
.text:0000000000004030 var_48          = qword ptr -48h
.text:0000000000004030 var_39          = byte ptr -39h
.text:0000000000004030
.text:0000000000004030 ; __unwind {
.text:0000000000004030                 push    r15
.text:0000000000004032                 push    r14
.text:0000000000004034                 mov     r15, rdx
.text:0000000000004037                 push    r13
.text:0000000000004039                 push    r12
.text:000000000000403B                 mov     r12, rdi
.text:000000000000403E                 push    rbp
.text:000000000000403F                 push    rbx
.text:0000000000004040                 mov     rbp, rsi
.text:0000000000004043                 sub     rsp, 18h
.text:0000000000004047                 call    last_component
.text:000000000000404C                 mov     rbx, rax
.text:000000000000404F                 mov     rdi, rax
.text:0000000000004052                 call    base_len
.text:0000000000004057                 sub     rbx, r12
.text:000000000000405A                 mov     r13, rax
.text:000000000000405D                 mov     rdi, rbp        ; s
.text:0000000000004060                 add     rbx, rax
.text:0000000000004063                 call    _strlen
.text:0000000000004068                 test    r13, r13
.text:000000000000406B                 mov     r14, rax
.text:000000000000406E                 jz      short loc_40A0
.text:0000000000004070                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:0000000000004076                 jz      loc_4120
.text:000000000000407C                 xor     eax, eax
.text:000000000000407E                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000004082                 mov     edx, 0
.text:0000000000004087                 setnz   al
.text:000000000000408A                 mov     [rsp+48h+var_48], rax
.text:000000000000408E                 mov     eax, 2Fh ; '/'
.text:0000000000004093                 cmovz   eax, edx
.text:0000000000004096                 mov     [rsp+48h+var_39], al
.text:000000000000409A                 jmp     short loc_40BE
.text:000000000000409A ; ---------------------------------------------------------------------------
.text:000000000000409C                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:00000000000040A0                 xor     eax, eax
.text:00000000000040A2                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000040A6                 mov     edx, 0
.text:00000000000040AB                 setz    al
.text:00000000000040AE                 mov     [rsp+48h+var_48], rax
.text:00000000000040B2                 mov     eax, 2Eh ; '.'
.text:00000000000040B7                 cmovnz  eax, edx
.text:00000000000040BA                 mov     [rsp+48h+var_39], al
.text:00000000000040BE
.text:00000000000040BE loc_40BE:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:00000000000040BE                                         ; mfile_name_concat+FD↓j
.text:00000000000040BE                 lea     rdi, [rbx+r14+1]
.text:00000000000040C3                 add     rdi, [rsp+48h+var_48] ; size
.text:00000000000040C7                 call    _malloc
.text:00000000000040CC                 test    rax, rax
.text:00000000000040CF                 mov     r13, rax
.text:00000000000040D2                 jz      short loc_4106
.text:00000000000040D4                 mov     rdi, rax        ; dest
.text:00000000000040D7                 mov     rdx, rbx        ; n
.text:00000000000040DA                 mov     rsi, r12        ; src
.text:00000000000040DD                 call    _mempcpy
.text:00000000000040E2                 movzx   ecx, [rsp+48h+var_39]
.text:00000000000040E7                 mov     rdi, [rsp+48h+var_48]
.text:00000000000040EB                 add     rdi, rax        ; dest
.text:00000000000040EE                 test    r15, r15
.text:00000000000040F1                 mov     [rax], cl
.text:00000000000040F3                 jz      short loc_40F8
.text:00000000000040F5                 mov     [r15], rdi
.text:00000000000040F8
.text:00000000000040F8 loc_40F8:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:00000000000040F8                 mov     rdx, r14        ; n
.text:00000000000040FB                 mov     rsi, rbp        ; src
.text:00000000000040FE                 call    _mempcpy
.text:0000000000004103                 mov     byte ptr [rax], 0
.text:0000000000004106
.text:0000000000004106 loc_4106:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:0000000000004106                 add     rsp, 18h
.text:000000000000410A                 mov     rax, r13
.text:000000000000410D                 pop     rbx
.text:000000000000410E                 pop     rbp
.text:000000000000410F                 pop     r12
.text:0000000000004111                 pop     r13
.text:0000000000004113                 pop     r14
.text:0000000000004115                 pop     r15
.text:0000000000004117                 retn
.text:0000000000004117 ; ---------------------------------------------------------------------------
.text:0000000000004118                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: mfile_name_concat+46↑j
.text:0000000000004120                 mov     [rsp+48h+var_48], 0
.text:0000000000004128                 mov     [rsp+48h+var_39], 0
.text:000000000000412D                 jmp     short loc_40BE
.text:000000000000412D ; } // starts at 4030
.text:000000000000412D mfile_name_concat endp
.text:000000000000412D
.text:000000000000412D ; ---------------------------------------------------------------------------
.text:000000000000412F                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130
.text:0000000000004130                 public set_program_name
.text:0000000000004130 set_program_name proc near              ; CODE XREF: main+37↑p
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 test    rdi, rdi
.text:0000000000004133                 push    rbx
.text:0000000000004134                 jz      short loc_41AD
.text:0000000000004136                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000413B                 mov     rbx, rdi
.text:000000000000413E                 call    _strrchr
.text:0000000000004143                 test    rax, rax
.text:0000000000004146                 jz      short loc_419D
.text:0000000000004148                 lea     r8, [rax+1]
.text:000000000000414C                 mov     rdx, r8
.text:000000000000414F                 sub     rdx, rbx
.text:0000000000004152                 cmp     rdx, 6
.text:0000000000004156                 jle     short loc_419D
.text:0000000000004158                 lea     rsi, [rax-6]
.text:000000000000415C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000004163                 mov     ecx, 7
.text:0000000000004168                 repe cmpsb
.text:000000000000416A                 setnbe  dl
.text:000000000000416D                 sbb     dl, 0
.text:0000000000004170                 test    dl, dl
.text:0000000000004172                 jnz     short loc_419D
.text:0000000000004174                 lea     rdi, aLt        ; "lt-"
.text:000000000000417B                 mov     ecx, 3
.text:0000000000004180                 mov     rsi, r8
.text:0000000000004183                 mov     rbx, r8
.text:0000000000004186                 repe cmpsb
.text:0000000000004188                 setnbe  dl
.text:000000000000418B                 sbb     dl, 0
.text:000000000000418E                 test    dl, dl
.text:0000000000004190                 jnz     short loc_419D
.text:0000000000004192                 lea     rbx, [rax+4]
.text:0000000000004196                 mov     cs:__bss_start, rbx
.text:000000000000419D
.text:000000000000419D loc_419D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000419D                                         ; set_program_name+26↑j ...
.text:000000000000419D                 mov     cs:program_name, rbx
.text:00000000000041A4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000041AB                 pop     rbx
.text:00000000000041AC                 retn
.text:00000000000041AD ; ---------------------------------------------------------------------------
.text:00000000000041AD
.text:00000000000041AD loc_41AD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000041AD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000041B4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000041BB                 mov     edx, 37h ; '7'  ; n
.text:00000000000041C0                 mov     esi, 1          ; size
.text:00000000000041C5                 call    _fwrite
.text:00000000000041CA                 call    _abort
.text:00000000000041CA ; } // starts at 4130
.text:00000000000041CA set_program_name endp
.text:00000000000041CA
.text:00000000000041CA ; ---------------------------------------------------------------------------
.text:00000000000041CF                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0 ; Attributes: info_from_lumina
.text:00000000000041D0
.text:00000000000041D0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000041D0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000041D0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 push    rbp
.text:00000000000041D1                 push    rbx
.text:00000000000041D2                 mov     rbp, rdi
.text:00000000000041D5                 mov     ebx, esi
.text:00000000000041D7                 sub     rsp, 8
.text:00000000000041DB                 call    locale_charset
.text:00000000000041E0                 movzx   edx, byte ptr [rax]
.text:00000000000041E3                 and     edx, 0FFFFFFDFh
.text:00000000000041E6                 cmp     dl, 55h ; 'U'
.text:00000000000041E9                 jz      short loc_4260
.text:00000000000041EB                 cmp     dl, 47h ; 'G'
.text:00000000000041EE                 jz      short loc_4210
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000041F0                                         ; gettext_quote+50↓j ...
.text:00000000000041F0                 lea     rax, unk_B98B
.text:00000000000041F7                 lea     rdx, asc_B98D   ; "'"
.text:00000000000041FE                 cmp     ebx, 9
.text:0000000000004201                 cmovnz  rax, rdx
.text:0000000000004205                 add     rsp, 8
.text:0000000000004209                 pop     rbx
.text:000000000000420A                 pop     rbp
.text:000000000000420B                 retn
.text:000000000000420B ; ---------------------------------------------------------------------------
.text:000000000000420C                 align 10h
.text:0000000000004210
.text:0000000000004210 loc_4210:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004210                 movzx   edx, byte ptr [rax+1]
.text:0000000000004214                 and     edx, 0FFFFFFDFh
.text:0000000000004217                 cmp     dl, 42h ; 'B'
.text:000000000000421A                 jnz     short loc_41F0
.text:000000000000421C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004220                 jnz     short loc_41F0
.text:0000000000004222                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004226                 jnz     short loc_41F0
.text:0000000000004228                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000422C                 jnz     short loc_41F0
.text:000000000000422E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004232                 jnz     short loc_41F0
.text:0000000000004234                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004238                 jnz     short loc_41F0
.text:000000000000423A                 cmp     byte ptr [rax+7], 0
.text:000000000000423E                 jnz     short loc_41F0
.text:0000000000004240                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004244                 lea     rax, unk_B984
.text:000000000000424B                 lea     rdx, unk_B988
.text:0000000000004252                 cmovnz  rax, rdx
.text:0000000000004256                 add     rsp, 8
.text:000000000000425A                 pop     rbx
.text:000000000000425B                 pop     rbp
.text:000000000000425C                 retn
.text:000000000000425C ; ---------------------------------------------------------------------------
.text:000000000000425D                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004260                 movzx   edx, byte ptr [rax+1]
.text:0000000000004264                 and     edx, 0FFFFFFDFh
.text:0000000000004267                 cmp     dl, 54h ; 'T'
.text:000000000000426A                 jnz     short loc_41F0
.text:000000000000426C                 movzx   edx, byte ptr [rax+2]
.text:0000000000004270                 and     edx, 0FFFFFFDFh
.text:0000000000004273                 cmp     dl, 46h ; 'F'
.text:0000000000004276                 jnz     loc_41F0
.text:000000000000427C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000004280                 jnz     loc_41F0
.text:0000000000004286                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000428A                 jnz     loc_41F0
.text:0000000000004290                 cmp     byte ptr [rax+5], 0
.text:0000000000004294                 jnz     loc_41F0
.text:000000000000429A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000429E                 lea     rax, unk_B97C
.text:00000000000042A5                 lea     rdx, unk_B980
.text:00000000000042AC                 cmovnz  rax, rdx
.text:00000000000042B0                 add     rsp, 8
.text:00000000000042B4                 pop     rbx
.text:00000000000042B5                 pop     rbp
.text:00000000000042B6                 retn
.text:00000000000042B6 ; } // starts at 41D0
.text:00000000000042B6 gettext_quote   endp
.text:00000000000042B6
.text:00000000000042B6 ; ---------------------------------------------------------------------------
.text:00000000000042B7                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0 ; Attributes: info_from_lumina
.text:00000000000042C0
.text:00000000000042C0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000042C0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000042C0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000042C0
.text:00000000000042C0 var_E0          = dword ptr -0E0h
.text:00000000000042C0 var_DB          = byte ptr -0DBh
.text:00000000000042C0 var_DA          = byte ptr -0DAh
.text:00000000000042C0 var_D9          = byte ptr -0D9h
.text:00000000000042C0 s               = qword ptr -0D8h
.text:00000000000042C0 n               = qword ptr -0D0h
.text:00000000000042C0 var_C8          = qword ptr -0C8h
.text:00000000000042C0 ps              = qword ptr -0C0h
.text:00000000000042C0 var_B8          = qword ptr -0B8h
.text:00000000000042C0 var_B0          = qword ptr -0B0h
.text:00000000000042C0 var_A8          = qword ptr -0A8h
.text:00000000000042C0 s2              = qword ptr -0A0h
.text:00000000000042C0 var_98          = qword ptr -98h
.text:00000000000042C0 var_90          = qword ptr -90h
.text:00000000000042C0 var_88          = qword ptr -88h
.text:00000000000042C0 var_80          = qword ptr -80h
.text:00000000000042C0 var_78          = qword ptr -78h
.text:00000000000042C0 var_70          = dword ptr -70h
.text:00000000000042C0 var_6C          = byte ptr -6Ch
.text:00000000000042C0 var_6B          = byte ptr -6Bh
.text:00000000000042C0 var_6A          = byte ptr -6Ah
.text:00000000000042C0 var_69          = byte ptr -69h
.text:00000000000042C0 var_68          = qword ptr -68h
.text:00000000000042C0 var_60          = qword ptr -60h
.text:00000000000042C0 wc              = dword ptr -4Ch
.text:00000000000042C0 var_48          = qword ptr -48h
.text:00000000000042C0 var_40          = qword ptr -40h
.text:00000000000042C0 arg_0           = qword ptr  8
.text:00000000000042C0 arg_8           = qword ptr  10h
.text:00000000000042C0 arg_10          = qword ptr  18h
.text:00000000000042C0
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 push    r15
.text:00000000000042C2                 push    r14
.text:00000000000042C4                 mov     r15d, r8d
.text:00000000000042C7                 push    r13
.text:00000000000042C9                 push    r12
.text:00000000000042CB                 mov     r14, rdi
.text:00000000000042CE                 push    rbp
.text:00000000000042CF                 push    rbx
.text:00000000000042D0                 mov     ebx, r9d
.text:00000000000042D3                 mov     r13, rsi
.text:00000000000042D6                 mov     rbp, rcx
.text:00000000000042D9                 and     ebx, 2
.text:00000000000042DC                 sub     rsp, 0B8h
.text:00000000000042E3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000042EB                 mov     [rsp+0E8h+s], rdx
.text:00000000000042F0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000042F5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000042FA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000042FF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004307                 mov     [rsp+0E8h+var_80], rax
.text:000000000000430C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004314                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004319                 mov     rax, fs:28h
.text:0000000000004322                 mov     [rsp+0E8h+var_40], rax
.text:000000000000432A                 xor     eax, eax
.text:000000000000432C                 call    ___ctype_get_mb_cur_max
.text:0000000000004331                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004335                 mov     [rsp+0E8h+var_90], rax
.text:000000000000433A                 ja      def_4351        ; jumptable 00000000000121F1 default case
.text:0000000000004340                 lea     rcx, jpt_4351
.text:0000000000004347                 mov     edx, r15d
.text:000000000000434A                 movsxd  rax, ds:(jpt_4351 - 0B9E0h)[rcx+rdx*4]
.text:000000000000434E                 add     rax, rcx
.text:0000000000004351                 jmp     rax             ; switch jump
.text:0000000000004353 ; ---------------------------------------------------------------------------
.text:0000000000004353
.text:0000000000004353 loc_4353:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004353                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004353                                         ; DATA XREF: ...
.text:0000000000004353                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004358                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000435D                 xor     r12d, r12d
.text:0000000000004360                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004369                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000436E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004373
.text:0000000000004373 loc_4373:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000004373                 lea     rax, asc_B98D   ; "'"
.text:000000000000437A                 mov     [rsp+0E8h+n], 1
.text:0000000000004383                 xor     r15d, r15d
.text:0000000000004386                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000438E                 mov     [rsp+0E8h+s2], rax
.text:0000000000004393
.text:0000000000004393 loc_4393:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000004393                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000004393                 xor     r11d, r11d
.text:0000000000004396                 mov     rax, rbp
.text:0000000000004399                 mov     r8d, r12d
.text:000000000000439C                 mov     rbp, r11
.text:000000000000439F                 mov     r11, rax
.text:00000000000043A2                 nop     word ptr [rax+rax+00h]
.text:00000000000043A8
.text:00000000000043A8 loc_43A8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000043A8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000043A8                 cmp     r11, rbp
.text:00000000000043AB                 setnz   r12b
.text:00000000000043AF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000043B3                 jnz     short loc_43C2
.text:00000000000043B5                 mov     rax, [rsp+0E8h+s]
.text:00000000000043BA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000043BE                 setnz   r12b
.text:00000000000043C2
.text:00000000000043C2 loc_43C2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000043C2                 test    r12b, r12b
.text:00000000000043C5                 jz      loc_4A20
.text:00000000000043CB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000043D0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000043D5                 lea     r9, [rdi+rbp]
.text:00000000000043D9                 setnz   al
.text:00000000000043DC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000043E0                 mov     r10d, eax
.text:00000000000043E3                 jz      loc_4490
.text:00000000000043E9                 mov     rax, [rsp+0E8h+n]
.text:00000000000043EE                 test    rax, rax
.text:00000000000043F1                 jz      loc_4820
.text:00000000000043F7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000043FB                 lea     rbx, [rbp+rax+0]
.text:0000000000004400                 jnz     short loc_4430
.text:0000000000004402                 cmp     rax, 1
.text:0000000000004406                 jbe     short loc_4430
.text:0000000000004408                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000440D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004412                 mov     [rsp+0E8h+ps], r9
.text:0000000000004417                 call    _strlen
.text:000000000000441C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004422                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004428                 mov     r11, rax
.text:000000000000442B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004430
.text:0000000000004430 loc_4430:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004430                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004430                 cmp     rbx, r11
.text:0000000000004433                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004438                 ja      loc_49F0
.text:000000000000443E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004443                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004448                 mov     rdi, r9         ; s1
.text:000000000000444B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004450                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004455                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000445A                 call    _memcmp
.text:000000000000445F                 test    eax, eax
.text:0000000000004461                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004466                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000446C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004471                 jnz     loc_49F0
.text:0000000000004477                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000447C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004482                 jnz     loc_5405
.text:0000000000004488                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000004490                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000004490                 movzx   ebx, byte ptr [r9]
.text:0000000000004494                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004497                 ja      def_44AE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000449D                 lea     rcx, jpt_44AE
.text:00000000000044A4                 movzx   edx, bl
.text:00000000000044A7                 movsxd  rax, ds:(jpt_44AE - 0BA0Ch)[rcx+rdx*4]
.text:00000000000044AB                 add     rax, rcx
.text:00000000000044AE                 jmp     rax             ; switch jump
.text:00000000000044B0 ; ---------------------------------------------------------------------------
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000044B0                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000044B0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000044B3
.text:00000000000044B3 loc_44B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000044B3                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:00000000000044B3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000044B7                 setnz   al
.text:00000000000044BA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000044BE                 jnz     short loc_44CC
.text:00000000000044C0                 mov     rax, [rsp+0E8h+s]
.text:00000000000044C5                 cmp     byte ptr [rax+1], 0
.text:00000000000044C9                 setnz   al
.text:00000000000044CC
.text:00000000000044CC loc_44CC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000044CC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044D1                 setz    dl
.text:00000000000044D4                 test    al, al
.text:00000000000044D6                 jz      loc_4728
.text:00000000000044DC
.text:00000000000044DC loc_44DC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000044DC                 xor     r12d, r12d
.text:00000000000044DF                 xor     eax, eax
.text:00000000000044E1                 nop     dword ptr [rax+00000000h]
.text:00000000000044E8
.text:00000000000044E8 loc_44E8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000044E8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000044E8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000044ED                 jnz     loc_4602
.text:00000000000044F3                 test    dl, dl
.text:00000000000044F5                 jnz     loc_4602
.text:00000000000044FB
.text:00000000000044FB loc_44FB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000044FB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004500                 test    rsi, rsi
.text:0000000000004503                 jz      short loc_4519
.text:0000000000004505                 mov     edx, ebx
.text:0000000000004507                 shr     dl, 5
.text:000000000000450A                 movzx   edx, dl
.text:000000000000450D                 mov     edx, [rsi+rdx*4]
.text:0000000000004510                 bt      edx, ebx
.text:0000000000004513                 jb      loc_4663
.text:0000000000004519
.text:0000000000004519 loc_4519:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004519                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004519                 test    r10b, r10b
.text:000000000000451C                 jnz     loc_4663
.text:0000000000004522                 xor     eax, 1
.text:0000000000004525                 add     rbp, 1
.text:0000000000004529                 and     eax, r8d
.text:000000000000452C
.text:000000000000452C loc_452C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000452C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000452C                 test    al, al
.text:000000000000452E                 jz      short loc_4550
.text:0000000000004530                 cmp     r13, r15
.text:0000000000004533                 jbe     short loc_453A
.text:0000000000004535                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000453A
.text:000000000000453A loc_453A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000453A                 lea     rax, [r15+1]
.text:000000000000453E                 cmp     r13, rax
.text:0000000000004541                 jbe     short loc_4549
.text:0000000000004543                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004549
.text:0000000000004549 loc_4549:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004549                 add     r15, 2
.text:000000000000454D                 xor     r8d, r8d
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004550                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004550                 cmp     r15, r13
.text:0000000000004553                 jnb     short loc_4559
.text:0000000000004555                 mov     [r14+r15], bl
.text:0000000000004559
.text:0000000000004559 loc_4559:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004559                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000455E                 add     r15, 1
.text:0000000000004562                 mov     eax, 0
.text:0000000000004567                 test    r12b, r12b
.text:000000000000456A                 cmovz   edi, eax
.text:000000000000456D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004572                 jmp     loc_43A8
.text:0000000000004572 ; ---------------------------------------------------------------------------
.text:0000000000004577                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004580                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004580                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000004583
.text:0000000000004583 loc_4583:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004583                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004583                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000004587                 cmp     eax, 2
.text:000000000000458A                 jz      loc_4B48
.text:0000000000004590                 cmp     eax, 5
.text:0000000000004593                 jz      loc_4B08
.text:0000000000004599                 cmp     eax, 2
.text:000000000000459C                 mov     ebx, 3Fh ; '?'
.text:00000000000045A1                 setz    dl
.text:00000000000045A4                 xor     r12d, r12d
.text:00000000000045A7                 xor     eax, eax
.text:00000000000045A9                 jmp     loc_44E8
.text:00000000000045A9 ; ---------------------------------------------------------------------------
.text:00000000000045AE                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000045B0                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000045B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000045B3
.text:00000000000045B3 loc_45B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045B3                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:00000000000045B3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000045B8                 jz      loc_4AC0
.text:00000000000045BE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000045C3                 xor     edx, edx
.text:00000000000045C5                 xor     eax, eax
.text:00000000000045C7                 mov     ebx, 27h ; '''
.text:00000000000045CC                 jmp     loc_44E8
.text:00000000000045CC ; ---------------------------------------------------------------------------
.text:00000000000045D1                 align 8
.text:00000000000045D8
.text:00000000000045D8 loc_45D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045D8                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:00000000000045D8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000045DD                 mov     ebx, 74h ; 't'
.text:00000000000045E2
.text:00000000000045E2 loc_45E2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000045E2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000045E2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000045E7                 setz    al
.text:00000000000045EA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000045EE                 jnz     loc_473E
.text:00000000000045F4
.text:00000000000045F4 loc_45F4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000045F4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000045F4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000045F9                 jnz     short loc_4660
.text:00000000000045FB
.text:00000000000045FB loc_45FB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000045FB                 mov     ebx, edx
.text:00000000000045FD                 xor     r12d, r12d
.text:0000000000004600                 xor     eax, eax
.text:0000000000004602
.text:0000000000004602 loc_4602:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004602                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004602                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004607                 jnz     loc_44FB
.text:000000000000460D                 jmp     loc_4519
.text:000000000000460D ; ---------------------------------------------------------------------------
.text:0000000000004612                 align 8
.text:0000000000004618
.text:0000000000004618 loc_4618:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004618                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004618                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000461D                 mov     ebx, 62h ; 'b'
.text:0000000000004622                 jmp     short loc_45F4
.text:0000000000004622 ; ---------------------------------------------------------------------------
.text:0000000000004624                 align 8
.text:0000000000004628
.text:0000000000004628 loc_4628:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004628                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004628                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000462D                 jz      loc_4A00
.text:0000000000004633                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004638                 jz      loc_4850
.text:000000000000463E
.text:000000000000463E loc_463E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000463E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004643                 jz      loc_4850
.text:0000000000004649                 cmp     [rsp+0E8h+n], 0
.text:000000000000464F                 jnz     loc_4A0B
.text:0000000000004655                 mov     ebx, 5Ch ; '\'
.text:000000000000465A                 nop     word ptr [rax+rax+00h]
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004660                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004660                 xor     r12d, r12d
.text:0000000000004663
.text:0000000000004663 loc_4663:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004663                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004663                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004668                 setz    dl
.text:000000000000466B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004670                 mov     eax, edx
.text:0000000000004672                 jnz     loc_4EC8
.text:0000000000004678                 mov     eax, r8d
.text:000000000000467B                 xor     eax, 1
.text:000000000000467E                 and     al, dl
.text:0000000000004680                 jz      short loc_46B1
.text:0000000000004682                 cmp     r13, r15
.text:0000000000004685                 jbe     short loc_468C
.text:0000000000004687                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000468C
.text:000000000000468C loc_468C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000468C                 lea     rdx, [r15+1]
.text:0000000000004690                 cmp     r13, rdx
.text:0000000000004693                 jbe     short loc_469B
.text:0000000000004695                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000469B
.text:000000000000469B loc_469B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000469B                 lea     rdx, [r15+2]
.text:000000000000469F                 cmp     r13, rdx
.text:00000000000046A2                 jbe     short loc_46AA
.text:00000000000046A4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000046AA
.text:00000000000046AA loc_46AA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000046AA                 add     r15, 3
.text:00000000000046AE                 mov     r8d, eax
.text:00000000000046B1
.text:00000000000046B1 loc_46B1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000046B1                 cmp     r13, r15
.text:00000000000046B4                 jbe     short loc_46BB
.text:00000000000046B6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000046BB
.text:00000000000046BB loc_46BB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000046BB                 add     r15, 1
.text:00000000000046BF                 add     rbp, 1
.text:00000000000046C3                 jmp     loc_4550
.text:00000000000046C3 ; ---------------------------------------------------------------------------
.text:00000000000046C8                 align 10h
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046D0                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:00000000000046D0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000046D5                 jnz     loc_48A3
.text:00000000000046DB                 xor     edx, edx
.text:00000000000046DD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000046E2                 jz      loc_45FB
.text:00000000000046E8                 add     rbp, 1
.text:00000000000046EC                 jmp     loc_43A8
.text:00000000000046EC ; ---------------------------------------------------------------------------
.text:00000000000046F1                 align 8
.text:00000000000046F8
.text:00000000000046F8 loc_46F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046F8                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:00000000000046F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000046FD                 setz    dl
.text:0000000000004700                 xor     eax, eax
.text:0000000000004702                 jmp     loc_44E8
.text:0000000000004702 ; ---------------------------------------------------------------------------
.text:0000000000004707                 align 10h
.text:0000000000004710
.text:0000000000004710 loc_4710:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004710                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004710                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004715                 mov     ebx, 61h ; 'a'
.text:000000000000471A                 jmp     loc_45F4
.text:000000000000471A ; ---------------------------------------------------------------------------
.text:000000000000471F                 align 20h
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004720                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004720                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004725                 setz    dl
.text:0000000000004728
.text:0000000000004728 loc_4728:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004728                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004728                 test    rbp, rbp
.text:000000000000472B                 jnz     loc_44DC
.text:0000000000004731
.text:0000000000004731 loc_4731:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004731                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004731                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004736                 and     al, dl
.text:0000000000004738                 jz      loc_44E8
.text:000000000000473E
.text:000000000000473E loc_473E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000473E                 mov     rbp, r11
.text:0000000000004741                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004749                 jmp     loc_4E49
.text:0000000000004749 ; ---------------------------------------------------------------------------
.text:000000000000474E                 align 10h
.text:0000000000004750
.text:0000000000004750 loc_4750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004750                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004750                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004755                 setz    dl
.text:0000000000004758                 xor     r12d, r12d
.text:000000000000475B                 jmp     short loc_4731
.text:000000000000475B ; ---------------------------------------------------------------------------
.text:000000000000475D                 align 20h
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004760                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004760                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004765                 mov     ebx, 20h ; ' '
.text:000000000000476A                 setz    dl
.text:000000000000476D                 jmp     short loc_4731
.text:000000000000476D ; ---------------------------------------------------------------------------
.text:000000000000476F                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004770                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004770                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004775                 mov     ebx, 72h ; 'r'
.text:000000000000477A                 jmp     loc_45E2
.text:000000000000477A ; ---------------------------------------------------------------------------
.text:000000000000477F                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004780                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004780                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004785                 mov     ebx, 66h ; 'f'
.text:000000000000478A                 jmp     loc_45F4
.text:000000000000478A ; ---------------------------------------------------------------------------
.text:000000000000478F                 align 10h
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004790                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:0000000000004790                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004795                 mov     ebx, 76h ; 'v'
.text:000000000000479A                 jmp     loc_45F4
.text:000000000000479A ; ---------------------------------------------------------------------------
.text:000000000000479F                 align 20h
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000047A0                                         ; DATA XREF: .rodata:jpt_44AE↓o
.text:00000000000047A0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000047A5                 mov     ebx, 6Eh ; 'n'
.text:00000000000047AA                 jmp     loc_45E2
.text:00000000000047AA ; ---------------------------------------------------------------------------
.text:00000000000047AF                 align 10h
.text:00000000000047B0
.text:00000000000047B0 def_483A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000047B0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000047B0                                         ; DATA XREF: ...
.text:00000000000047B0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000047B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000047B8
.text:00000000000047B8 def_44AE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000047B8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000047B8                                         ; DATA XREF: ...
.text:00000000000047B8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000047BE                 jnz     loc_4B68
.text:00000000000047C4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000047C9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000047CE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000047D3                 call    ___ctype_b_loc
.text:00000000000047D8                 mov     rcx, [rax]
.text:00000000000047DB                 movzx   edx, bl
.text:00000000000047DE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000047E4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000047EA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000047EF                 mov     edi, 1
.text:00000000000047F4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000047F8                 and     ax, 4000h
.text:00000000000047FC                 setnz   r12b
.text:0000000000004800                 setz    al
.text:0000000000004803                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004807
.text:0000000000004807 loc_4807:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004807                 test    al, al
.text:0000000000004809                 jnz     loc_51A1
.text:000000000000480F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004814                 setz    dl
.text:0000000000004817                 jmp     loc_44E8
.text:0000000000004817 ; ---------------------------------------------------------------------------
.text:000000000000481C                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004820                 movzx   ebx, byte ptr [r9]
.text:0000000000004824                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004827                 ja      short def_483A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004829                 lea     rcx, jpt_483A
.text:0000000000004830                 movzx   edx, bl
.text:0000000000004833                 movsxd  rax, ds:(jpt_483A - 0BC08h)[rcx+rdx*4]
.text:0000000000004837                 add     rax, rcx
.text:000000000000483A                 jmp     rax             ; switch jump
.text:000000000000483A ; ---------------------------------------------------------------------------
.text:000000000000483C                 align 20h
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004840                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004840                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004843                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004848                 jnz     loc_463E
.text:000000000000484E                 xchg    ax, ax
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004850                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004850                 mov     edx, 5Ch ; '\'
.text:0000000000004855                 mov     ebx, 5Ch ; '\'
.text:000000000000485A                 jmp     loc_45F4
.text:000000000000485A ; ---------------------------------------------------------------------------
.text:000000000000485F                 align 20h
.text:0000000000004860
.text:0000000000004860 loc_4860:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004860                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004860                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004865                 xor     r10d, r10d
.text:0000000000004868                 mov     ebx, 66h ; 'f'
.text:000000000000486D                 jmp     loc_45F4
.text:000000000000486D ; ---------------------------------------------------------------------------
.text:0000000000004872                 align 8
.text:0000000000004878
.text:0000000000004878 loc_4878:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004878                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004878                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000487D                 xor     r10d, r10d
.text:0000000000004880                 mov     ebx, 6Eh ; 'n'
.text:0000000000004885                 jmp     loc_45E2
.text:0000000000004885 ; ---------------------------------------------------------------------------
.text:000000000000488A                 align 10h
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004890                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004890                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004895                 jmp     loc_4660
.text:0000000000004895 ; ---------------------------------------------------------------------------
.text:000000000000489A                 align 20h
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000048A0                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000048A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000048A3
.text:00000000000048A3 loc_48A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000048A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000048A8                 setz    dl
.text:00000000000048AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000048B0                 jnz     loc_544A
.text:00000000000048B6                 mov     eax, r8d
.text:00000000000048B9                 mov     rcx, r15
.text:00000000000048BC                 xor     eax, 1
.text:00000000000048BF                 and     al, dl
.text:00000000000048C1                 jz      short loc_48F0
.text:00000000000048C3                 cmp     r13, r15
.text:00000000000048C6                 jbe     short loc_48CD
.text:00000000000048C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000048CD
.text:00000000000048CD loc_48CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000048CD                 lea     rcx, [r15+1]
.text:00000000000048D1                 cmp     r13, rcx
.text:00000000000048D4                 jbe     short loc_48DC
.text:00000000000048D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000048DC
.text:00000000000048DC loc_48DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000048DC                 lea     rcx, [r15+2]
.text:00000000000048E0                 cmp     r13, rcx
.text:00000000000048E3                 ja      loc_4F19
.text:00000000000048E9
.text:00000000000048E9 loc_48E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000048E9                 lea     rcx, [r15+3]
.text:00000000000048ED                 mov     r8d, eax
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000048F0                 cmp     r13, rcx
.text:00000000000048F3                 jbe     short loc_48FA
.text:00000000000048F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000048FA
.text:00000000000048FA loc_48FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000048FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000048FF                 lea     r15, [rcx+1]
.text:0000000000004903                 jz      loc_4F09
.text:0000000000004909                 lea     rax, [rbp+1]
.text:000000000000490D                 cmp     rax, r11
.text:0000000000004910                 jnb     short loc_492B
.text:0000000000004912                 mov     rax, [rsp+0E8h+s]
.text:0000000000004917                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000491C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004920                 sub     eax, 30h ; '0'
.text:0000000000004923                 cmp     al, 9
.text:0000000000004925                 jbe     loc_5159
.text:000000000000492B
.text:000000000000492B loc_492B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000492B                 mov     eax, r12d
.text:000000000000492E                 mov     ebx, 30h ; '0'
.text:0000000000004933                 xor     r12d, r12d
.text:0000000000004936                 jmp     loc_44E8
.text:0000000000004936 ; ---------------------------------------------------------------------------
.text:000000000000493B                 align 20h
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004940                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004940                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004945                 mov     r12d, r10d
.text:0000000000004948                 setz    dl
.text:000000000000494B                 xor     r10d, r10d
.text:000000000000494E                 xor     eax, eax
.text:0000000000004950                 jmp     loc_44E8
.text:0000000000004950 ; ---------------------------------------------------------------------------
.text:0000000000004955                 align 8
.text:0000000000004958
.text:0000000000004958 loc_4958:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004958                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004958                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000495D                 setz    dl
.text:0000000000004960                 xor     r10d, r10d
.text:0000000000004963                 jmp     loc_4728
.text:0000000000004963 ; ---------------------------------------------------------------------------
.text:0000000000004968                 align 10h
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004970                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004970                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004975                 setz    dl
.text:0000000000004978                 xor     r10d, r10d
.text:000000000000497B                 xor     r12d, r12d
.text:000000000000497E                 jmp     loc_4731
.text:000000000000497E ; ---------------------------------------------------------------------------
.text:0000000000004983                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004988                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:0000000000004988                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000498D                 mov     r12d, r10d
.text:0000000000004990                 mov     ebx, 20h ; ' '
.text:0000000000004995                 setz    dl
.text:0000000000004998                 xor     r10d, r10d
.text:000000000000499B                 jmp     loc_4731
.text:00000000000049A0 ; ---------------------------------------------------------------------------
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049A0                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000049A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000049A5                 xor     r10d, r10d
.text:00000000000049A8                 mov     ebx, 72h ; 'r'
.text:00000000000049AD                 jmp     loc_45E2
.text:00000000000049AD ; ---------------------------------------------------------------------------
.text:00000000000049B2                 align 8
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049B8                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000049B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000049BD                 jmp     loc_4660
.text:00000000000049BD ; ---------------------------------------------------------------------------
.text:00000000000049C2                 align 8
.text:00000000000049C8
.text:00000000000049C8 loc_49C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049C8                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000049C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000049CD                 xor     r10d, r10d
.text:00000000000049D0                 mov     ebx, 74h ; 't'
.text:00000000000049D5                 jmp     loc_45E2
.text:00000000000049D5 ; ---------------------------------------------------------------------------
.text:00000000000049DA                 align 20h
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000049E0                                         ; DATA XREF: .rodata:jpt_483A↓o
.text:00000000000049E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000049E5                 jmp     loc_4660
.text:00000000000049E5 ; ---------------------------------------------------------------------------
.text:00000000000049EA                 align 10h
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000049F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000049F0                 xor     r10d, r10d
.text:00000000000049F3                 jmp     loc_4490
.text:00000000000049F3 ; ---------------------------------------------------------------------------
.text:00000000000049F8                 align 20h
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004A00                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004A05                 jnz     loc_5370
.text:0000000000004A0B
.text:0000000000004A0B loc_4A0B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000004A0B                 add     rbp, 1
.text:0000000000004A0F                 mov     eax, r8d
.text:0000000000004A12                 xor     r12d, r12d
.text:0000000000004A15                 mov     ebx, 5Ch ; '\'
.text:0000000000004A1A                 jmp     loc_452C
.text:0000000000004A1A ; ---------------------------------------------------------------------------
.text:0000000000004A1F                 align 20h
.text:0000000000004A20
.text:0000000000004A20 loc_4A20:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004A20                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A25                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004A2A                 mov     r12d, r8d
.text:0000000000004A2D                 mov     rbp, r11
.text:0000000000004A30                 setz    dl
.text:0000000000004A33                 mov     eax, ebx
.text:0000000000004A35                 test    r15, r15
.text:0000000000004A38                 setz    cl
.text:0000000000004A3B                 and     eax, edx
.text:0000000000004A3D                 and     al, cl
.text:0000000000004A3F                 jnz     loc_54A6
.text:0000000000004A45                 mov     eax, ebx
.text:0000000000004A47                 xor     eax, 1
.text:0000000000004A4A                 and     dl, al
.text:0000000000004A4C                 jz      loc_53BC
.text:0000000000004A52                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004A57                 jz      loc_53BA
.text:0000000000004A5D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004A62                 jnz     loc_545D
.text:0000000000004A68                 test    r13, r13
.text:0000000000004A6B                 setz    al
.text:0000000000004A6E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004A74                 setnz   dl
.text:0000000000004A77                 and     al, dl
.text:0000000000004A79                 jz      loc_549C
.text:0000000000004A7F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004A84
.text:0000000000004A84 loc_4A84:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004A84                 lea     rbx, asc_B98D   ; "'"
.text:0000000000004A8B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000004A8F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004A97                 mov     r15d, 1
.text:0000000000004A9D                 mov     [rsp+0E8h+n], 1
.text:0000000000004AA6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004AAB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004AB0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004AB4                 jmp     loc_4393
.text:0000000000004AB4 ; ---------------------------------------------------------------------------
.text:0000000000004AB9                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004AC0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004AC5                 jnz     loc_5370
.text:0000000000004ACB                 test    r13, r13
.text:0000000000004ACE                 jz      loc_4ED0
.text:0000000000004AD4                 xor     edx, edx
.text:0000000000004AD6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004ADC                 jnz     loc_4ED0
.text:0000000000004AE2
.text:0000000000004AE2 loc_4AE2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004AE2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004AE2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004AE7                 add     r15, 3
.text:0000000000004AEB                 xor     eax, eax
.text:0000000000004AED                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004AF2                 xor     r8d, r8d
.text:0000000000004AF5                 mov     r13, rdx
.text:0000000000004AF8                 mov     ebx, 27h ; '''
.text:0000000000004AFD                 jmp     loc_4519
.text:0000000000004AFD ; ---------------------------------------------------------------------------
.text:0000000000004B02                 align 8
.text:0000000000004B08
.text:0000000000004B08 loc_4B08:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004B08                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000004B0D                 jz      short loc_4B30
.text:0000000000004B0F                 lea     rcx, [rbp+2]
.text:0000000000004B13                 cmp     rcx, r11
.text:0000000000004B16                 jnb     short loc_4B30
.text:0000000000004B18                 mov     rax, [rsp+0E8h+s]
.text:0000000000004B1D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004B22                 jz      loc_52B2
.text:0000000000004B28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004B30                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004B30                 xor     edx, edx
.text:0000000000004B32                 xor     r12d, r12d
.text:0000000000004B35                 xor     eax, eax
.text:0000000000004B37                 mov     ebx, 3Fh ; '?'
.text:0000000000004B3C                 jmp     loc_44E8
.text:0000000000004B3C ; ---------------------------------------------------------------------------
.text:0000000000004B41                 align 8
.text:0000000000004B48
.text:0000000000004B48 loc_4B48:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004B48                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004B4D                 jnz     loc_5370
.text:0000000000004B53                 xor     r12d, r12d
.text:0000000000004B56                 xor     eax, eax
.text:0000000000004B58                 mov     ebx, 3Fh ; '?'
.text:0000000000004B5D                 jmp     loc_4519
.text:0000000000004B5D ; ---------------------------------------------------------------------------
.text:0000000000004B62                 align 8
.text:0000000000004B68
.text:0000000000004B68 loc_4B68:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004B68                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004B70                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B74                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004B80                 mov     [rsp+0E8h+ps], rax
.text:0000000000004B85                 jnz     short loc_4BB4
.text:0000000000004B87                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004B8C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004B91                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004B96                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004B9B                 call    _strlen
.text:0000000000004BA0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004BA6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004BAC                 mov     r11, rax
.text:0000000000004BAF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004BB4
.text:0000000000004BB4 loc_4BB4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004BB4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004BBC                 xor     ecx, ecx
.text:0000000000004BBE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004BC2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004BC7                 mov     rbx, rcx
.text:0000000000004BCA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004BD2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004BD7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004BDC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004BE4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004BE9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004BEE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004BF3
.text:0000000000004BF3 loc_4BF3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004BF3                 mov     rax, [rsp+0E8h+s]
.text:0000000000004BF8                 lea     r14, [rbp+rbx+0]
.text:0000000000004BFD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004C02                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004C07                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004C0C                 lea     r13, [rax+r14]
.text:0000000000004C10                 sub     rdx, r14
.text:0000000000004C13                 mov     rsi, r13
.text:0000000000004C16                 call    rpl_mbrtowc
.text:0000000000004C1B                 test    rax, rax
.text:0000000000004C1E                 mov     r15, rax
.text:0000000000004C21                 jz      short loc_4C71
.text:0000000000004C23                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C27                 jz      loc_5245
.text:0000000000004C2D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004C31                 jz      loc_51D1
.text:0000000000004C37                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C3C                 setz    al
.text:0000000000004C3F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004C43                 jnz     loc_4DE0
.text:0000000000004C49
.text:0000000000004C49 loc_4C49:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004C49                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004C49                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004C50                 call    _iswprint
.text:0000000000004C55                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004C5A                 test    eax, eax
.text:0000000000004C5C                 mov     eax, 0
.text:0000000000004C61                 cmovz   r12d, eax
.text:0000000000004C65                 add     rbx, r15
.text:0000000000004C68                 call    _mbsinit
.text:0000000000004C6D                 test    eax, eax
.text:0000000000004C6F                 jz      short loc_4BF3
.text:0000000000004C71
.text:0000000000004C71 loc_4C71:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004C71                 mov     edx, r12d
.text:0000000000004C74                 mov     rdi, rbx
.text:0000000000004C77                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004C7D                 xor     edx, 1
.text:0000000000004C80                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004C85                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004C8B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004C8F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004C97                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004C9C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004CA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004CA6
.text:0000000000004CA6 loc_4CA6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004CA6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004CA6                 cmp     rdi, 1
.text:0000000000004CAA                 jbe     loc_52AB
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004CB0                 mov     rcx, rdi
.text:0000000000004CB3                 xor     esi, esi
.text:0000000000004CB5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004CBB                 add     rcx, rbp
.text:0000000000004CBE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004CC3                 jmp     loc_4D7E
.text:0000000000004CC3 ; ---------------------------------------------------------------------------
.text:0000000000004CC8                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004CD0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004CD5                 setz    al
.text:0000000000004CD8                 test    r9b, r9b
.text:0000000000004CDB                 jnz     loc_5190
.text:0000000000004CE1                 mov     esi, r8d
.text:0000000000004CE4                 xor     esi, 1
.text:0000000000004CE7                 and     al, sil
.text:0000000000004CEA                 jz      short loc_4D1B
.text:0000000000004CEC                 cmp     r13, r15
.text:0000000000004CEF                 jbe     short loc_4CF6
.text:0000000000004CF1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004CF6
.text:0000000000004CF6 loc_4CF6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004CF6                 lea     rsi, [r15+1]
.text:0000000000004CFA                 cmp     r13, rsi
.text:0000000000004CFD                 jbe     short loc_4D05
.text:0000000000004CFF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004D05
.text:0000000000004D05 loc_4D05:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004D05                 lea     rsi, [r15+2]
.text:0000000000004D09                 cmp     r13, rsi
.text:0000000000004D0C                 jbe     short loc_4D14
.text:0000000000004D0E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004D14
.text:0000000000004D14 loc_4D14:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004D14                 add     r15, 3
.text:0000000000004D18                 mov     r8d, eax
.text:0000000000004D1B
.text:0000000000004D1B loc_4D1B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000004D1B                 cmp     r13, r15
.text:0000000000004D1E                 jbe     short loc_4D25
.text:0000000000004D20                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004D25
.text:0000000000004D25 loc_4D25:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004D25                 lea     rax, [r15+1]
.text:0000000000004D29                 cmp     r13, rax
.text:0000000000004D2C                 jbe     short loc_4D3B
.text:0000000000004D2E                 mov     eax, ebx
.text:0000000000004D30                 shr     al, 6
.text:0000000000004D33                 add     eax, 30h ; '0'
.text:0000000000004D36                 mov     [r14+r15+1], al
.text:0000000000004D3B
.text:0000000000004D3B loc_4D3B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000004D3B                 lea     rax, [r15+2]
.text:0000000000004D3F                 cmp     r13, rax
.text:0000000000004D42                 jbe     short loc_4D54
.text:0000000000004D44                 mov     eax, ebx
.text:0000000000004D46                 shr     al, 3
.text:0000000000004D49                 and     eax, 7
.text:0000000000004D4C                 add     eax, 30h ; '0'
.text:0000000000004D4F                 mov     [r14+r15+2], al
.text:0000000000004D54
.text:0000000000004D54 loc_4D54:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004D54                 and     ebx, 7
.text:0000000000004D57                 add     rbp, 1
.text:0000000000004D5B                 add     r15, 3
.text:0000000000004D5F                 add     ebx, 30h ; '0'
.text:0000000000004D62                 cmp     rbp, rcx
.text:0000000000004D65                 jnb     loc_4550
.text:0000000000004D6B                 mov     esi, edx
.text:0000000000004D6D
.text:0000000000004D6D loc_4D6D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000004D6D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000004D6D                 cmp     r13, r15
.text:0000000000004D70                 jbe     short loc_4D76
.text:0000000000004D72                 mov     [r14+r15], bl
.text:0000000000004D76
.text:0000000000004D76 loc_4D76:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004D76                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000004D7A                 add     r15, 1
.text:0000000000004D7E
.text:0000000000004D7E loc_4D7E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000004D7E                 test    dl, dl
.text:0000000000004D80                 jnz     loc_4CD0
.text:0000000000004D86                 mov     eax, esi
.text:0000000000004D88                 xor     eax, 1
.text:0000000000004D8B                 and     eax, r8d
.text:0000000000004D8E                 test    r10b, r10b
.text:0000000000004D91                 jz      short loc_4DA1
.text:0000000000004D93                 cmp     r13, r15
.text:0000000000004D96                 jbe     short loc_4D9D
.text:0000000000004D98                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004D9D
.text:0000000000004D9D loc_4D9D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000004D9D                 add     r15, 1
.text:0000000000004DA1
.text:0000000000004DA1 loc_4DA1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004DA1                 add     rbp, 1
.text:0000000000004DA5                 cmp     rbp, rcx
.text:0000000000004DA8                 jnb     loc_452C
.text:0000000000004DAE                 test    al, al
.text:0000000000004DB0                 jz      loc_51AE
.text:0000000000004DB6                 cmp     r13, r15
.text:0000000000004DB9                 jbe     short loc_4DC0
.text:0000000000004DBB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004DC0                 lea     rax, [r15+1]
.text:0000000000004DC4                 cmp     r13, rax
.text:0000000000004DC7                 jbe     short loc_4DCF
.text:0000000000004DC9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004DCF
.text:0000000000004DCF loc_4DCF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000004DCF                 add     r15, 2
.text:0000000000004DD3                 xor     r10d, r10d
.text:0000000000004DD6                 xor     r8d, r8d
.text:0000000000004DD9                 jmp     short loc_4D6D
.text:0000000000004DD9 ; ---------------------------------------------------------------------------
.text:0000000000004DDB                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004DE0                 cmp     r15, 1
.text:0000000000004DE4                 jz      loc_4C49
.text:0000000000004DEA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004DEF                 lea     rcx, [rdi+r15]
.text:0000000000004DF3                 lea     rdx, [rdi+r14+1]
.text:0000000000004DF8                 lea     r8, [rcx+r14]
.text:0000000000004DFC                 jmp     short loc_4E0D
.text:0000000000004DFC ; ---------------------------------------------------------------------------
.text:0000000000004DFE                 align 20h
.text:0000000000004E00
.text:0000000000004E00 loc_4E00:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004E00                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004E00                 add     rdx, 1
.text:0000000000004E04                 cmp     r8, rdx
.text:0000000000004E07                 jz      loc_4C49
.text:0000000000004E0D
.text:0000000000004E0D loc_4E0D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000004E0D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004E10                 sub     ecx, 5Bh ; '['
.text:0000000000004E13                 cmp     cl, 21h ; '!'
.text:0000000000004E16                 ja      short loc_4E00
.text:0000000000004E18                 mov     esi, 1
.text:0000000000004E1D                 shl     rsi, cl
.text:0000000000004E20                 mov     rcx, rsi
.text:0000000000004E23                 mov     rsi, 20000002Bh
.text:0000000000004E2D                 test    rcx, rsi
.text:0000000000004E30                 jz      short loc_4E00
.text:0000000000004E32                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004E37                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004E3C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004E41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004E49
.text:0000000000004E49 loc_4E49:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004E49                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004E49                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004E4E                 jz      short loc_4E60
.text:0000000000004E50                 test    al, al
.text:0000000000004E52                 mov     eax, 4
.text:0000000000004E57                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000004E5C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004E60                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004E60                 sub     rsp, 8
.text:0000000000004E64                 mov     rcx, rbp
.text:0000000000004E67                 mov     rsi, r13
.text:0000000000004E6A                 push    [rsp+0F0h+var_88]
.text:0000000000004E6E                 push    [rsp+0F8h+var_80]
.text:0000000000004E72                 mov     rdi, r14
.text:0000000000004E75                 push    0
.text:0000000000004E77                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004E7F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004E84                 mov     rdx, [rsp+108h+s]
.text:0000000000004E89                 and     r9d, 0FFFFFFFDh
.text:0000000000004E8D                 call    quotearg_buffer_restyled
.text:0000000000004E92                 add     rsp, 20h
.text:0000000000004E96                 mov     r15, rax
.text:0000000000004E99
.text:0000000000004E99 loc_4E99:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004E99                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004E99                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004EA1                 xor     rbx, fs:28h
.text:0000000000004EAA                 mov     rax, r15
.text:0000000000004EAD                 jnz     loc_54B3
.text:0000000000004EB3                 add     rsp, 0B8h
.text:0000000000004EBA                 pop     rbx
.text:0000000000004EBB                 pop     rbp
.text:0000000000004EBC                 pop     r12
.text:0000000000004EBE                 pop     r13
.text:0000000000004EC0                 pop     r14
.text:0000000000004EC2                 pop     r15
.text:0000000000004EC4                 retn
.text:0000000000004EC4 ; ---------------------------------------------------------------------------
.text:0000000000004EC5                 align 8
.text:0000000000004EC8
.text:0000000000004EC8 loc_4EC8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004EC8                 mov     rbp, r11
.text:0000000000004ECB                 jmp     loc_4E49
.text:0000000000004ED0 ; ---------------------------------------------------------------------------
.text:0000000000004ED0
.text:0000000000004ED0 loc_4ED0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004ED0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004ED0                 cmp     r13, r15
.text:0000000000004ED3                 jbe     short loc_4EDA
.text:0000000000004ED5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004EDA
.text:0000000000004EDA loc_4EDA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000004EDA                 lea     rax, [r15+1]
.text:0000000000004EDE                 cmp     r13, rax
.text:0000000000004EE1                 jbe     short loc_4EE9
.text:0000000000004EE3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004EE9
.text:0000000000004EE9 loc_4EE9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004EE9                 lea     rax, [r15+2]
.text:0000000000004EED                 cmp     r13, rax
.text:0000000000004EF0                 jbe     loc_54E2
.text:0000000000004EF6                 mov     rdx, r13
.text:0000000000004EF9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004EFF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004F04                 jmp     loc_4AE2
.text:0000000000004F09 ; ---------------------------------------------------------------------------
.text:0000000000004F09
.text:0000000000004F09 loc_4F09:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004F09                 mov     eax, r12d
.text:0000000000004F0C                 mov     ebx, 30h ; '0'
.text:0000000000004F11                 xor     r12d, r12d
.text:0000000000004F14                 jmp     loc_4519
.text:0000000000004F19 ; ---------------------------------------------------------------------------
.text:0000000000004F19
.text:0000000000004F19 loc_4F19:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004F19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004F1F                 jmp     loc_48E9
.text:0000000000004F24 ; ---------------------------------------------------------------------------
.text:0000000000004F24
.text:0000000000004F24 loc_4F24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F24                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:0000000000004F24                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004F26                 jnz     loc_4353        ; jumptable 00000000000121F1 case 1
.text:0000000000004F2C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F31
.text:0000000000004F31 loc_4F31:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004F31                 test    r13, r13
.text:0000000000004F34                 jnz     loc_54CA
.text:0000000000004F3A                 lea     rax, asc_B98D   ; "'"
.text:0000000000004F41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F54                 xor     r12d, r12d
.text:0000000000004F57                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004F5C                 mov     [rsp+0E8h+n], 1
.text:0000000000004F65                 mov     [rsp+0E8h+s2], rax
.text:0000000000004F6A                 mov     r15d, 1
.text:0000000000004F70                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004F78                 jmp     loc_4393
.text:0000000000004F78 ; ---------------------------------------------------------------------------
.text:0000000000004F7D                 align 20h
.text:0000000000004F80
.text:0000000000004F80 loc_4F80:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F80                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:0000000000004F80                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004F82                 jnz     loc_537D
.text:0000000000004F88                 test    r13, r13
.text:0000000000004F8B                 jz      loc_51B6
.text:0000000000004F91                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004F95                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F9A                 xor     r12d, r12d
.text:0000000000004F9D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004FA2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004FAB
.text:0000000000004FAB loc_4FAB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000004FAB                 lea     rax, unk_B98B
.text:0000000000004FB2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004FB7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004FBC                 mov     [rsp+0E8h+n], 1
.text:0000000000004FC5                 mov     r15d, 1
.text:0000000000004FCB                 mov     [rsp+0E8h+s2], rax
.text:0000000000004FD0                 jmp     loc_4393
.text:0000000000004FD5 ; ---------------------------------------------------------------------------
.text:0000000000004FD5
.text:0000000000004FD5 loc_4FD5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004FD5                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:0000000000004FD5                 lea     rax, unk_B98B   ; jumptable 00000000000121F1 case 6
.text:0000000000004FDC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004FE1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004FE6                 xor     r12d, r12d
.text:0000000000004FE9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004FF2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004FF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004FFC                 mov     [rsp+0E8h+n], 1
.text:0000000000005005                 xor     r15d, r15d
.text:0000000000005008                 mov     [rsp+0E8h+s2], rax
.text:000000000000500D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000005015                 jmp     loc_4393
.text:000000000000501A ; ---------------------------------------------------------------------------
.text:000000000000501A
.text:000000000000501A loc_501A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000501A                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:000000000000501A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000501F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005024                 xor     r12d, r12d
.text:0000000000005027                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005030                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005035                 xor     r15d, r15d
.text:0000000000005038                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000503D                 mov     [rsp+0E8h+n], 0
.text:0000000000005046                 mov     [rsp+0E8h+s2], 0
.text:000000000000504F                 jmp     loc_4393
.text:0000000000005054 ; ---------------------------------------------------------------------------
.text:0000000000005054
.text:0000000000005054 loc_5054:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005054                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:0000000000005054                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000005059                 jz      short loc_50B1
.text:000000000000505B                 lea     rsi, asc_B98F   ; "`"
.text:0000000000005062                 xor     edi, edi        ; domainname
.text:0000000000005064                 mov     edx, 5          ; category
.text:0000000000005069                 call    _dcgettext
.text:000000000000506E                 mov     rcx, rax
.text:0000000000005071                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005076                 lea     rax, asc_B98F   ; "`"
.text:000000000000507D                 cmp     rcx, rax
.text:0000000000005080                 jz      loc_541E
.text:0000000000005086
.text:0000000000005086 loc_5086:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000005086                 lea     rsi, asc_B98D   ; "'"
.text:000000000000508D                 xor     edi, edi        ; domainname
.text:000000000000508F                 mov     edx, 5          ; category
.text:0000000000005094                 call    _dcgettext
.text:0000000000005099                 mov     rcx, rax
.text:000000000000509C                 mov     [rsp+0E8h+var_88], rax
.text:00000000000050A1                 lea     rax, asc_B98D   ; "'"
.text:00000000000050A8                 cmp     rcx, rax
.text:00000000000050AB                 jz      loc_5434
.text:00000000000050B1
.text:00000000000050B1 loc_50B1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000050B1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000050B1                 xor     r15d, r15d
.text:00000000000050B4                 test    ebx, ebx
.text:00000000000050B6                 jz      loc_527D
.text:00000000000050BC
.text:00000000000050BC loc_50BC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000050BC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000050BC                 test    ebx, ebx
.text:00000000000050BE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000050C3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000050C8                 xor     r12d, r12d
.text:00000000000050CB                 mov     rdi, rbx        ; s
.text:00000000000050CE                 call    _strlen
.text:00000000000050D3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000050D8                 mov     [rsp+0E8h+n], rax
.text:00000000000050DD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000050E2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000050E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000050F0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000050F5                 jmp     loc_4393
.text:00000000000050FA ; ---------------------------------------------------------------------------
.text:00000000000050FA
.text:00000000000050FA loc_50FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000050FA                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:00000000000050FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000050FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005104                 xor     r12d, r12d
.text:0000000000005107                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005110                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005115                 xor     r15d, r15d
.text:0000000000005118                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000511D                 mov     [rsp+0E8h+n], 0
.text:0000000000005126                 mov     [rsp+0E8h+s2], 0
.text:000000000000512F                 jmp     loc_4393
.text:0000000000005134 ; ---------------------------------------------------------------------------
.text:0000000000005134
.text:0000000000005134 loc_5134:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005134                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:0000000000005134                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005139                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000513E                 xor     r12d, r12d
.text:0000000000005141                 mov     [rsp+0E8h+var_98], 0
.text:000000000000514A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000514F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005154                 jmp     loc_4373
.text:0000000000005159 ; ---------------------------------------------------------------------------
.text:0000000000005159
.text:0000000000005159 loc_5159:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005159                 cmp     r13, r15
.text:000000000000515C                 jbe     short loc_5163
.text:000000000000515E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000005163
.text:0000000000005163 loc_5163:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000005163                 lea     rax, [rcx+2]
.text:0000000000005167                 cmp     r13, rax
.text:000000000000516A                 jbe     short loc_5172
.text:000000000000516C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000005172
.text:0000000000005172 loc_5172:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000005172                 mov     eax, r12d
.text:0000000000005175                 lea     r15, [rcx+3]
.text:0000000000005179                 xor     r12d, r12d
.text:000000000000517C                 mov     ebx, 30h ; '0'
.text:0000000000005181                 jmp     loc_44E8
.text:0000000000005181 ; ---------------------------------------------------------------------------
.text:0000000000005186                 align 10h
.text:0000000000005190
.text:0000000000005190 loc_5190:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000005190                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005195                 mov     rbp, r11
.text:0000000000005198                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000519C                 jmp     loc_4E49
.text:00000000000051A1 ; ---------------------------------------------------------------------------
.text:00000000000051A1
.text:00000000000051A1 loc_51A1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000051A1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000051A6                 xor     r12d, r12d
.text:00000000000051A9                 jmp     loc_4CB0
.text:00000000000051AE ; ---------------------------------------------------------------------------
.text:00000000000051AE
.text:00000000000051AE loc_51AE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000051AE                 xor     r10d, r10d
.text:00000000000051B1                 jmp     loc_4D6D
.text:00000000000051B6 ; ---------------------------------------------------------------------------
.text:00000000000051B6
.text:00000000000051B6 loc_51B6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000051B6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000051BF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000051C4                 xor     r12d, r12d
.text:00000000000051C7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000051CC                 jmp     loc_4FAB
.text:00000000000051D1 ; ---------------------------------------------------------------------------
.text:00000000000051D1
.text:00000000000051D1 loc_51D1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000051D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000051D6                 mov     rsi, r14
.text:00000000000051D9                 mov     rcx, r13
.text:00000000000051DC                 mov     rax, rbx
.text:00000000000051DF                 mov     rdi, rbx
.text:00000000000051E2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000051E8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000051ED                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000051F5                 cmp     rsi, r11
.text:00000000000051F8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000051FE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005206                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000520B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005210                 jnb     short loc_5238
.text:0000000000005212                 cmp     byte ptr [rcx], 0
.text:0000000000005215                 jnz     short loc_5227
.text:0000000000005217                 jmp     short loc_5238
.text:0000000000005217 ; ---------------------------------------------------------------------------
.text:0000000000005219                 align 20h
.text:0000000000005220
.text:0000000000005220 loc_5220:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005220                 cmp     byte ptr [r9+rax], 0
.text:0000000000005225                 jz      short loc_5235
.text:0000000000005227
.text:0000000000005227 loc_5227:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005227                 add     rax, 1
.text:000000000000522B                 lea     rdx, [rbp+rax+0]
.text:0000000000005230                 cmp     r11, rdx
.text:0000000000005233                 ja      short loc_5220
.text:0000000000005235
.text:0000000000005235 loc_5235:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005235                 mov     rdi, rax
.text:0000000000005238
.text:0000000000005238 loc_5238:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005238                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005238                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000523D                 xor     r12d, r12d
.text:0000000000005240                 jmp     loc_4CA6
.text:0000000000005245 ; ---------------------------------------------------------------------------
.text:0000000000005245
.text:0000000000005245 loc_5245:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005245                 mov     rdi, rbx
.text:0000000000005248                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000524E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005253                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005259                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005261                 xor     r12d, r12d
.text:0000000000005264                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005269                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000526E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005273                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005278                 jmp     loc_4CA6
.text:000000000000527D ; ---------------------------------------------------------------------------
.text:000000000000527D
.text:000000000000527D loc_527D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000527D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000005282                 movzx   eax, byte ptr [rdx]
.text:0000000000005285                 test    al, al
.text:0000000000005287                 jz      loc_50BC
.text:000000000000528D                 nop     dword ptr [rax]
.text:0000000000005290
.text:0000000000005290 loc_5290:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000005290                 cmp     r13, r15
.text:0000000000005293                 jbe     short loc_5299
.text:0000000000005295                 mov     [r14+r15], al
.text:0000000000005299
.text:0000000000005299 loc_5299:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000005299                 add     r15, 1
.text:000000000000529D                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000052A2                 test    al, al
.text:00000000000052A4                 jnz     short loc_5290
.text:00000000000052A6                 jmp     loc_50BC
.text:00000000000052AB ; ---------------------------------------------------------------------------
.text:00000000000052AB
.text:00000000000052AB loc_52AB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000052AB                 mov     eax, edx
.text:00000000000052AD                 jmp     loc_4807
.text:00000000000052B2 ; ---------------------------------------------------------------------------
.text:00000000000052B2
.text:00000000000052B2 loc_52B2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000052B2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000052B6                 cmp     bl, 3Eh ; '>'
.text:00000000000052B9                 ja      loc_4B30
.text:00000000000052BF                 mov     rax, 7000A38200000000h
.text:00000000000052C9                 bt      rax, rbx
.text:00000000000052CD                 jnb     loc_4B30
.text:00000000000052D3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000052D8                 jnz     loc_54C2
.text:00000000000052DE                 cmp     r13, r15
.text:00000000000052E1                 jbe     short loc_52E8
.text:00000000000052E3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000052E8                 lea     rax, [r15+1]
.text:00000000000052EC                 cmp     r13, rax
.text:00000000000052EF                 jbe     short loc_52F7
.text:00000000000052F1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000052F7
.text:00000000000052F7 loc_52F7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000052F7                 lea     rax, [r15+2]
.text:00000000000052FB                 cmp     r13, rax
.text:00000000000052FE                 jbe     short loc_5306
.text:0000000000005300                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005306
.text:0000000000005306 loc_5306:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005306                 lea     rax, [r15+3]
.text:000000000000530A                 cmp     r13, rax
.text:000000000000530D                 jbe     short loc_5315
.text:000000000000530F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005315
.text:0000000000005315 loc_5315:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005315                 add     r15, 4
.text:0000000000005319                 xor     edx, edx
.text:000000000000531B                 xor     r12d, r12d
.text:000000000000531E                 xor     eax, eax
.text:0000000000005320                 mov     rbp, rcx
.text:0000000000005323                 jmp     loc_44E8
.text:0000000000005328 ; ---------------------------------------------------------------------------
.text:0000000000005328
.text:0000000000005328 loc_5328:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005328                                         ; DATA XREF: .rodata:jpt_4351↓o
.text:0000000000005328                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000532A                 jz      loc_54B8
.text:0000000000005330                 lea     rax, asc_B98D   ; "'"
.text:0000000000005337                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000533C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005341                 xor     r12d, r12d
.text:0000000000005344                 mov     [rsp+0E8h+var_98], 0
.text:000000000000534D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005352                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005357                 mov     [rsp+0E8h+n], 1
.text:0000000000005360                 xor     r15d, r15d
.text:0000000000005363                 mov     [rsp+0E8h+s2], rax
.text:0000000000005368                 jmp     loc_4393
.text:0000000000005368 ; ---------------------------------------------------------------------------
.text:000000000000536D                 align 10h
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000005370                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000005370                 mov     rbp, r11
.text:0000000000005373                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005378                 jmp     loc_4E49
.text:000000000000537D ; ---------------------------------------------------------------------------
.text:000000000000537D
.text:000000000000537D loc_537D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000537D                 lea     rax, unk_B98B
.text:0000000000005384                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005389                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000538E                 xor     r12d, r12d
.text:0000000000005391                 mov     [rsp+0E8h+var_98], 0
.text:000000000000539A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000539F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000053A4                 mov     [rsp+0E8h+n], 1
.text:00000000000053AD                 xor     r15d, r15d
.text:00000000000053B0                 mov     [rsp+0E8h+s2], rax
.text:00000000000053B5                 jmp     loc_4393
.text:00000000000053BA ; ---------------------------------------------------------------------------
.text:00000000000053BA
.text:00000000000053BA loc_53BA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000053BA                 mov     eax, edx
.text:00000000000053BC
.text:00000000000053BC loc_53BC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000053BC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000053BC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000053C1                 test    rbx, rbx
.text:00000000000053C4                 jz      short loc_53F2
.text:00000000000053C6                 test    al, al
.text:00000000000053C8                 jz      short loc_53F2
.text:00000000000053CA                 movzx   ecx, byte ptr [rbx]
.text:00000000000053CD                 mov     rax, rbx
.text:00000000000053D0                 test    cl, cl
.text:00000000000053D2                 jz      short loc_53F2
.text:00000000000053D4                 mov     rdx, r15
.text:00000000000053D7                 sub     rax, r15
.text:00000000000053DA
.text:00000000000053DA loc_53DA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000053DA                 cmp     r13, rdx
.text:00000000000053DD                 jbe     short loc_53E3
.text:00000000000053DF                 mov     [r14+rdx], cl
.text:00000000000053E3
.text:00000000000053E3 loc_53E3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000053E3                 add     rdx, 1
.text:00000000000053E7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000053EB                 test    cl, cl
.text:00000000000053ED                 jnz     short loc_53DA
.text:00000000000053EF                 mov     r15, rdx
.text:00000000000053F2
.text:00000000000053F2 loc_53F2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000053F2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000053F2                 cmp     r13, r15
.text:00000000000053F5                 jbe     loc_4E99
.text:00000000000053FB                 mov     byte ptr [r14+r15], 0
.text:0000000000005400                 jmp     loc_4E99
.text:0000000000005405 ; ---------------------------------------------------------------------------
.text:0000000000005405
.text:0000000000005405 loc_5405:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005405                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000540A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000540F                 mov     rbp, r11
.text:0000000000005412                 setz    al
.text:0000000000005415                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005419                 jmp     loc_4E49
.text:000000000000541E ; ---------------------------------------------------------------------------
.text:000000000000541E
.text:000000000000541E loc_541E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000541E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005422                 mov     rdi, rcx
.text:0000000000005425                 call    gettext_quote
.text:000000000000542A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000542F                 jmp     loc_5086
.text:0000000000005434 ; ---------------------------------------------------------------------------
.text:0000000000005434
.text:0000000000005434 loc_5434:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005434                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005438                 mov     rdi, rcx
.text:000000000000543B                 call    gettext_quote
.text:0000000000005440                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005445                 jmp     loc_50B1
.text:000000000000544A ; ---------------------------------------------------------------------------
.text:000000000000544A
.text:000000000000544A loc_544A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000544A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000544F                 mov     rbp, r11
.text:0000000000005452                 mov     eax, edx
.text:0000000000005454                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005458                 jmp     loc_4E49
.text:000000000000545D ; ---------------------------------------------------------------------------
.text:000000000000545D
.text:000000000000545D loc_545D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000545D                 sub     rsp, 8
.text:0000000000005461                 mov     r8d, 5
.text:0000000000005467                 mov     rcx, r11
.text:000000000000546A                 push    [rsp+0F0h+var_88]
.text:000000000000546E                 push    [rsp+0F8h+var_80]
.text:0000000000005472                 mov     rdi, r14
.text:0000000000005475                 push    [rsp+100h+var_C8]
.text:0000000000005479                 mov     r9d, [rsp+108h+var_70]
.text:0000000000005481                 mov     rdx, [rsp+108h+s]
.text:0000000000005486                 mov     rsi, [rsp+108h+var_98]
.text:000000000000548B                 call    quotearg_buffer_restyled
.text:0000000000005490                 add     rsp, 20h
.text:0000000000005494                 mov     r15, rax
.text:0000000000005497                 jmp     loc_4E99
.text:000000000000549C ; ---------------------------------------------------------------------------
.text:000000000000549C
.text:000000000000549C loc_549C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000549C                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000054A1                 jmp     loc_53BC
.text:00000000000054A6 ; ---------------------------------------------------------------------------
.text:00000000000054A6
.text:00000000000054A6 loc_54A6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000054A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000054AE                 jmp     loc_4E49
.text:00000000000054B3 ; ---------------------------------------------------------------------------
.text:00000000000054B3
.text:00000000000054B3 loc_54B3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000054B3                 call    ___stack_chk_fail
.text:00000000000054B8 ; ---------------------------------------------------------------------------
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000054B8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000054BD                 jmp     loc_4F31
.text:00000000000054C2 ; ---------------------------------------------------------------------------
.text:00000000000054C2
.text:00000000000054C2 loc_54C2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000054C2                 mov     rbp, r11
.text:00000000000054C5                 jmp     loc_4E60
.text:00000000000054CA ; ---------------------------------------------------------------------------
.text:00000000000054CA
.text:00000000000054CA loc_54CA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000054CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000054CF                 xor     eax, eax
.text:00000000000054D1                 xor     r12d, r12d
.text:00000000000054D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000054DD                 jmp     loc_4A84
.text:00000000000054E2 ; ---------------------------------------------------------------------------
.text:00000000000054E2
.text:00000000000054E2 loc_54E2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000054E2                 mov     rdx, r13
.text:00000000000054E5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000054EA                 jmp     loc_4AE2
.text:00000000000054EF ; ---------------------------------------------------------------------------
.text:00000000000054EF
.text:00000000000054EF def_4351:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000054EF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000054EF ; } // starts at 42C0
.text:00000000000054EF quotearg_buffer_restyled endp
.text:00000000000054EF
.text:00000000000054EF ; ---------------------------------------------------------------------------
.text:00000000000054F4                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500
.text:0000000000005500 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005500                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005500
.text:0000000000005500 var_50          = qword ptr -50h
.text:0000000000005500 var_48          = qword ptr -48h
.text:0000000000005500 var_40          = dword ptr -40h
.text:0000000000005500 var_3C          = dword ptr -3Ch
.text:0000000000005500
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 push    r15
.text:0000000000005502                 push    r14
.text:0000000000005504                 movsxd  r15, edi
.text:0000000000005507                 push    r13
.text:0000000000005509                 push    r12
.text:000000000000550B                 mov     r14, rdx
.text:000000000000550E                 push    rbp
.text:000000000000550F                 push    rbx
.text:0000000000005510                 mov     rbp, rcx
.text:0000000000005513                 sub     rsp, 28h
.text:0000000000005517                 mov     [rsp+58h+var_50], rsi
.text:000000000000551C                 call    ___errno_location
.text:0000000000005521                 mov     r13, rax
.text:0000000000005524                 mov     eax, [rax]
.text:0000000000005526                 test    r15d, r15d
.text:0000000000005529                 mov     rbx, cs:slotvec
.text:0000000000005530                 mov     [rsp+58h+var_40], eax
.text:0000000000005534                 js      loc_56A1
.text:000000000000553A                 cmp     cs:nslots, r15d
.text:0000000000005541                 jg      short loc_55A5
.text:0000000000005543                 cmp     r15d, 7FFFFFFFh
.text:000000000000554A                 jz      loc_56A6
.text:0000000000005550                 lea     r12d, [r15+1]
.text:0000000000005554                 lea     rax, slotvec0
.text:000000000000555B                 movsxd  rsi, r12d
.text:000000000000555E                 shl     rsi, 4
.text:0000000000005562                 cmp     rbx, rax
.text:0000000000005565                 jz      loc_5680
.text:000000000000556B                 mov     rdi, rbx
.text:000000000000556E                 call    xrealloc
.text:0000000000005573                 mov     rbx, rax
.text:0000000000005576                 mov     cs:slotvec, rax
.text:000000000000557D
.text:000000000000557D loc_557D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000557D                 movsxd  rdi, cs:nslots
.text:0000000000005584                 mov     edx, r12d
.text:0000000000005587                 xor     esi, esi        ; c
.text:0000000000005589                 sub     edx, edi
.text:000000000000558B                 shl     rdi, 4
.text:000000000000558F                 movsxd  rdx, edx
.text:0000000000005592                 add     rdi, rbx        ; s
.text:0000000000005595                 shl     rdx, 4          ; n
.text:0000000000005599                 call    _memset
.text:000000000000559E                 mov     cs:nslots, r12d
.text:00000000000055A5
.text:00000000000055A5 loc_55A5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000055A5                 mov     eax, [rbp+4]
.text:00000000000055A8                 shl     r15, 4
.text:00000000000055AC                 sub     rsp, 8
.text:00000000000055B0                 add     rbx, r15
.text:00000000000055B3                 lea     r15, [rbp+8]
.text:00000000000055B7                 mov     r8d, [rbp+0]
.text:00000000000055BB                 mov     r11, [rbx]
.text:00000000000055BE                 mov     r12, [rbx+8]
.text:00000000000055C2                 mov     rcx, r14
.text:00000000000055C5                 or      eax, 1
.text:00000000000055C8                 mov     [rsp+60h+var_3C], eax
.text:00000000000055CC                 push    qword ptr [rbp+30h]
.text:00000000000055CF                 mov     r9d, eax
.text:00000000000055D2                 push    qword ptr [rbp+28h]
.text:00000000000055D5                 push    r15
.text:00000000000055D7                 mov     rsi, r11
.text:00000000000055DA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000055DF                 mov     rdi, r12
.text:00000000000055E2                 mov     [rsp+78h+var_48], r11
.text:00000000000055E7                 call    quotearg_buffer_restyled
.text:00000000000055EC                 add     rsp, 20h
.text:00000000000055F0                 mov     r11, [rsp+58h+var_48]
.text:00000000000055F5                 cmp     r11, rax
.text:00000000000055F8                 ja      short loc_5661
.text:00000000000055FA                 lea     rsi, [rax+1]
.text:00000000000055FE                 lea     rax, slot0
.text:0000000000005605                 cmp     r12, rax
.text:0000000000005608                 mov     [rbx], rsi
.text:000000000000560B                 jz      short loc_561F
.text:000000000000560D                 mov     rdi, r12        ; ptr
.text:0000000000005610                 mov     [rsp+58h+var_48], rsi
.text:0000000000005615                 call    free
.text:000000000000561A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000561F
.text:000000000000561F loc_561F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000561F                 mov     rdi, rsi
.text:0000000000005622                 mov     [rsp+58h+var_48], rsi
.text:0000000000005627                 call    xmalloc
.text:000000000000562C                 sub     rsp, 8
.text:0000000000005630                 mov     [rbx+8], rax
.text:0000000000005634                 mov     r8d, [rbp+0]
.text:0000000000005638                 push    qword ptr [rbp+30h]
.text:000000000000563B                 push    qword ptr [rbp+28h]
.text:000000000000563E                 mov     rcx, r14
.text:0000000000005641                 push    r15
.text:0000000000005643                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005648                 mov     rdi, rax
.text:000000000000564B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005650                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005655                 mov     r12, rax
.text:0000000000005658                 call    quotearg_buffer_restyled
.text:000000000000565D                 add     rsp, 20h
.text:0000000000005661
.text:0000000000005661 loc_5661:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005661                 mov     eax, [rsp+58h+var_40]
.text:0000000000005665                 mov     [r13+0], eax
.text:0000000000005669                 add     rsp, 28h
.text:000000000000566D                 mov     rax, r12
.text:0000000000005670                 pop     rbx
.text:0000000000005671                 pop     rbp
.text:0000000000005672                 pop     r12
.text:0000000000005674                 pop     r13
.text:0000000000005676                 pop     r14
.text:0000000000005678                 pop     r15
.text:000000000000567A                 retn
.text:000000000000567A ; ---------------------------------------------------------------------------
.text:000000000000567B                 align 20h
.text:0000000000005680
.text:0000000000005680 loc_5680:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005680                 xor     edi, edi
.text:0000000000005682                 call    xrealloc
.text:0000000000005687                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000568F                 mov     rbx, rax
.text:0000000000005692                 mov     cs:slotvec, rax
.text:0000000000005699                 movups  xmmword ptr [rax], xmm0
.text:000000000000569C                 jmp     loc_557D
.text:00000000000056A1 ; ---------------------------------------------------------------------------
.text:00000000000056A1
.text:00000000000056A1 loc_56A1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000056A1                 call    _abort
.text:00000000000056A6 ; ---------------------------------------------------------------------------
.text:00000000000056A6
.text:00000000000056A6 loc_56A6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000056A6                 call    xalloc_die
.text:00000000000056A6 ; } // starts at 5500
.text:00000000000056A6 quotearg_n_options endp
.text:00000000000056A6
.text:00000000000056A6 ; ---------------------------------------------------------------------------
.text:00000000000056AB                 align 10h
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0 ; Attributes: info_from_lumina
.text:00000000000056B0
.text:00000000000056B0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000056B0                 public clone_quoting_options
.text:00000000000056B0 clone_quoting_options proc near
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 push    r12
.text:00000000000056B2                 push    rbp
.text:00000000000056B3                 push    rbx
.text:00000000000056B4                 mov     rbx, rdi
.text:00000000000056B7                 call    ___errno_location
.text:00000000000056BC                 mov     r12d, [rax]
.text:00000000000056BF                 mov     rbp, rax
.text:00000000000056C2                 lea     rax, default_quoting_options
.text:00000000000056C9                 test    rbx, rbx
.text:00000000000056CC                 mov     esi, 38h ; '8'  ; n
.text:00000000000056D1                 cmovz   rbx, rax
.text:00000000000056D5                 mov     rdi, rbx        ; src
.text:00000000000056D8                 call    xmemdup
.text:00000000000056DD                 mov     [rbp+0], r12d
.text:00000000000056E1                 pop     rbx
.text:00000000000056E2                 pop     rbp
.text:00000000000056E3                 pop     r12
.text:00000000000056E5                 retn
.text:00000000000056E5 ; } // starts at 56B0
.text:00000000000056E5 clone_quoting_options endp
.text:00000000000056E5
.text:00000000000056E5 ; ---------------------------------------------------------------------------
.text:00000000000056E6                 align 10h
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0
.text:00000000000056F0                 public get_quoting_style
.text:00000000000056F0 get_quoting_style proc near
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 lea     rax, default_quoting_options
.text:00000000000056F7                 test    rdi, rdi
.text:00000000000056FA                 cmovz   rdi, rax
.text:00000000000056FE                 mov     eax, [rdi]
.text:0000000000005700                 retn
.text:0000000000005700 ; } // starts at 56F0
.text:0000000000005700 get_quoting_style endp
.text:0000000000005700
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005701                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710
.text:0000000000005710                 public set_quoting_style
.text:0000000000005710 set_quoting_style proc near
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 lea     rax, default_quoting_options
.text:0000000000005717                 test    rdi, rdi
.text:000000000000571A                 cmovz   rdi, rax
.text:000000000000571E                 mov     [rdi], esi
.text:0000000000005720                 retn
.text:0000000000005720 ; } // starts at 5710
.text:0000000000005720 set_quoting_style endp
.text:0000000000005720
.text:0000000000005720 ; ---------------------------------------------------------------------------
.text:0000000000005721                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730 ; Attributes: info_from_lumina
.text:0000000000005730
.text:0000000000005730 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005730                 public set_char_quoting
.text:0000000000005730 set_char_quoting proc near
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 lea     rax, default_quoting_options
.text:0000000000005737                 test    rdi, rdi
.text:000000000000573A                 mov     ecx, esi
.text:000000000000573C                 cmovz   rdi, rax
.text:0000000000005740                 mov     eax, esi
.text:0000000000005742                 and     ecx, 1Fh
.text:0000000000005745                 shr     al, 5
.text:0000000000005748                 movzx   eax, al
.text:000000000000574B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005750                 mov     esi, [rdi]
.text:0000000000005752                 mov     eax, esi
.text:0000000000005754                 shr     eax, cl
.text:0000000000005756                 xor     edx, eax
.text:0000000000005758                 and     eax, 1
.text:000000000000575B                 and     edx, 1
.text:000000000000575E                 shl     edx, cl
.text:0000000000005760                 xor     edx, esi
.text:0000000000005762                 mov     [rdi], edx
.text:0000000000005764                 retn
.text:0000000000005764 ; } // starts at 5730
.text:0000000000005764 set_char_quoting endp
.text:0000000000005764
.text:0000000000005764 ; ---------------------------------------------------------------------------
.text:0000000000005765                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770
.text:0000000000005770                 public set_quoting_flags
.text:0000000000005770 set_quoting_flags proc near
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 lea     rax, default_quoting_options
.text:0000000000005777                 test    rdi, rdi
.text:000000000000577A                 cmovz   rdi, rax
.text:000000000000577E                 mov     eax, [rdi+4]
.text:0000000000005781                 mov     [rdi+4], esi
.text:0000000000005784                 retn
.text:0000000000005784 ; } // starts at 5770
.text:0000000000005784 set_quoting_flags endp
.text:0000000000005784
.text:0000000000005784 ; ---------------------------------------------------------------------------
.text:0000000000005785                 align 10h
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790 ; Attributes: info_from_lumina
.text:0000000000005790
.text:0000000000005790 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005790                 public set_custom_quoting
.text:0000000000005790 set_custom_quoting proc near
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 lea     rax, default_quoting_options
.text:0000000000005797                 test    rdi, rdi
.text:000000000000579A                 cmovz   rdi, rax
.text:000000000000579E                 test    rsi, rsi
.text:00000000000057A1                 mov     dword ptr [rdi], 0Ah
.text:00000000000057A7                 jz      short loc_57B7
.text:00000000000057A9                 test    rdx, rdx
.text:00000000000057AC                 jz      short loc_57B7
.text:00000000000057AE                 mov     [rdi+28h], rsi
.text:00000000000057B2                 mov     [rdi+30h], rdx
.text:00000000000057B6                 retn
.text:00000000000057B7 ; ---------------------------------------------------------------------------
.text:00000000000057B7
.text:00000000000057B7 loc_57B7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000057B7                                         ; set_custom_quoting+1C↑j
.text:00000000000057B7                 sub     rsp, 8
.text:00000000000057BB                 call    _abort
.text:00000000000057BB ; } // starts at 5790
.text:00000000000057BB set_custom_quoting endp
.text:00000000000057BB
.text:00000000000057C0
.text:00000000000057C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057C0
.text:00000000000057C0 ; Attributes: info_from_lumina
.text:00000000000057C0
.text:00000000000057C0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000057C0                 public quotearg_buffer
.text:00000000000057C0 quotearg_buffer proc near
.text:00000000000057C0
.text:00000000000057C0 var_40          = qword ptr -40h
.text:00000000000057C0
.text:00000000000057C0 ; __unwind {
.text:00000000000057C0                 push    r15
.text:00000000000057C2                 push    r14
.text:00000000000057C4                 lea     rax, default_quoting_options
.text:00000000000057CB                 push    r13
.text:00000000000057CD                 push    r12
.text:00000000000057CF                 mov     r13, rdi
.text:00000000000057D2                 push    rbp
.text:00000000000057D3                 push    rbx
.text:00000000000057D4                 mov     rbx, r8
.text:00000000000057D7                 mov     r14, rsi
.text:00000000000057DA                 mov     r15, rdx
.text:00000000000057DD                 sub     rsp, 18h
.text:00000000000057E1                 test    r8, r8
.text:00000000000057E4                 cmovz   rbx, rax
.text:00000000000057E8                 mov     [rsp+48h+var_40], rcx
.text:00000000000057ED                 call    ___errno_location
.text:00000000000057F2                 mov     r12d, [rax]
.text:00000000000057F5                 mov     rbp, rax
.text:00000000000057F8                 lea     rax, [rbx+8]
.text:00000000000057FC                 sub     rsp, 8
.text:0000000000005800                 mov     r9d, [rbx+4]
.text:0000000000005804                 push    qword ptr [rbx+30h]
.text:0000000000005807                 mov     r8d, [rbx]
.text:000000000000580A                 push    qword ptr [rbx+28h]
.text:000000000000580D                 mov     rdx, r15
.text:0000000000005810                 push    rax
.text:0000000000005811                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005816                 mov     rsi, r14
.text:0000000000005819                 mov     rdi, r13
.text:000000000000581C                 call    quotearg_buffer_restyled
.text:0000000000005821                 mov     [rbp+0], r12d
.text:0000000000005825                 add     rsp, 38h
.text:0000000000005829                 pop     rbx
.text:000000000000582A                 pop     rbp
.text:000000000000582B                 pop     r12
.text:000000000000582D                 pop     r13
.text:000000000000582F                 pop     r14
.text:0000000000005831                 pop     r15
.text:0000000000005833                 retn
.text:0000000000005833 ; } // starts at 57C0
.text:0000000000005833 quotearg_buffer endp
.text:0000000000005833
.text:0000000000005833 ; ---------------------------------------------------------------------------
.text:0000000000005834                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840 ; Attributes: info_from_lumina
.text:0000000000005840
.text:0000000000005840 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005840                 public quotearg_alloc_mem
.text:0000000000005840 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005840
.text:0000000000005840 var_5C          = dword ptr -5Ch
.text:0000000000005840 var_58          = qword ptr -58h
.text:0000000000005840 var_50          = qword ptr -50h
.text:0000000000005840 var_48          = qword ptr -48h
.text:0000000000005840 var_40          = qword ptr -40h
.text:0000000000005840
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 push    r15
.text:0000000000005842                 push    r14
.text:0000000000005844                 lea     rax, default_quoting_options
.text:000000000000584B                 push    r13
.text:000000000000584D                 push    r12
.text:000000000000584F                 mov     r12, rdx
.text:0000000000005852                 push    rbp
.text:0000000000005853                 push    rbx
.text:0000000000005854                 mov     rbx, rcx
.text:0000000000005857                 mov     r14, rdi
.text:000000000000585A                 mov     r15, rsi
.text:000000000000585D                 sub     rsp, 38h
.text:0000000000005861                 test    rcx, rcx
.text:0000000000005864                 cmovz   rbx, rax
.text:0000000000005868                 xor     ebp, ebp
.text:000000000000586A                 call    ___errno_location
.text:000000000000586F                 test    r12, r12
.text:0000000000005872                 mov     r13, rax
.text:0000000000005875                 mov     eax, [rax]
.text:0000000000005877                 setz    bpl
.text:000000000000587B                 or      ebp, [rbx+4]
.text:000000000000587E                 lea     r10, [rbx+8]
.text:0000000000005882                 sub     rsp, 8
.text:0000000000005886                 mov     r8d, [rbx]
.text:0000000000005889                 mov     rcx, r15
.text:000000000000588C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005890                 push    qword ptr [rbx+30h]
.text:0000000000005893                 mov     rdx, r14
.text:0000000000005896                 push    qword ptr [rbx+28h]
.text:0000000000005899                 push    r10
.text:000000000000589B                 xor     esi, esi
.text:000000000000589D                 mov     r9d, ebp
.text:00000000000058A0                 xor     edi, edi
.text:00000000000058A2                 mov     [rsp+88h+var_48], r10
.text:00000000000058A7                 call    quotearg_buffer_restyled
.text:00000000000058AC                 lea     rsi, [rax+1]
.text:00000000000058B0                 mov     [rsp+88h+var_40], rax
.text:00000000000058B5                 add     rsp, 20h
.text:00000000000058B9                 mov     rdi, rsi
.text:00000000000058BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000058C1                 call    xmalloc
.text:00000000000058C6                 mov     [rsp+68h+var_58], rax
.text:00000000000058CB                 sub     rsp, 8
.text:00000000000058CF                 push    qword ptr [rbx+30h]
.text:00000000000058D2                 push    qword ptr [rbx+28h]
.text:00000000000058D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000058DA                 mov     r9d, ebp
.text:00000000000058DD                 mov     r8d, [rbx]
.text:00000000000058E0                 mov     rcx, r15
.text:00000000000058E3                 mov     rdx, r14
.text:00000000000058E6                 mov     rdi, rax
.text:00000000000058E9                 push    r10
.text:00000000000058EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000058F0                 call    quotearg_buffer_restyled
.text:00000000000058F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000058F9                 add     rsp, 20h
.text:00000000000058FD                 test    r12, r12
.text:0000000000005900                 mov     [r13+0], eax
.text:0000000000005904                 jz      short loc_590F
.text:0000000000005906                 mov     r11, [rsp+68h+var_40]
.text:000000000000590B                 mov     [r12], r11
.text:000000000000590F
.text:000000000000590F loc_590F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000590F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005914                 add     rsp, 38h
.text:0000000000005918                 pop     rbx
.text:0000000000005919                 pop     rbp
.text:000000000000591A                 pop     r12
.text:000000000000591C                 pop     r13
.text:000000000000591E                 pop     r14
.text:0000000000005920                 pop     r15
.text:0000000000005922                 retn
.text:0000000000005922 ; } // starts at 5840
.text:0000000000005922 quotearg_alloc_mem endp
.text:0000000000005922
.text:0000000000005922 ; ---------------------------------------------------------------------------
.text:0000000000005923                 align 10h
.text:0000000000005930
.text:0000000000005930 ; =============== S U B R O U T I N E =======================================
.text:0000000000005930
.text:0000000000005930
.text:0000000000005930                 public quotearg_alloc
.text:0000000000005930 quotearg_alloc  proc near
.text:0000000000005930 ; __unwind {
.text:0000000000005930                 mov     rcx, rdx
.text:0000000000005933                 xor     edx, edx
.text:0000000000005935                 jmp     quotearg_alloc_mem
.text:0000000000005935 ; } // starts at 5930
.text:0000000000005935 quotearg_alloc  endp
.text:0000000000005935
.text:0000000000005935 ; ---------------------------------------------------------------------------
.text:000000000000593A                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940 ; Attributes: info_from_lumina
.text:0000000000005940
.text:0000000000005940 ; void __cdecl quotearg_free()
.text:0000000000005940                 public quotearg_free
.text:0000000000005940 quotearg_free   proc near
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 mov     eax, cs:nslots
.text:0000000000005946                 push    r12
.text:0000000000005948                 mov     r12, cs:slotvec
.text:000000000000594F                 push    rbp
.text:0000000000005950                 push    rbx
.text:0000000000005951                 cmp     eax, 1
.text:0000000000005954                 jle     short loc_5981
.text:0000000000005956                 sub     eax, 2
.text:0000000000005959                 lea     rbx, [r12+18h]
.text:000000000000595E                 shl     rax, 4
.text:0000000000005962                 lea     rbp, [r12+rax+28h]
.text:0000000000005967                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005970                 mov     rdi, [rbx]      ; ptr
.text:0000000000005973                 add     rbx, 10h
.text:0000000000005977                 call    free
.text:000000000000597C                 cmp     rbx, rbp
.text:000000000000597F                 jnz     short loc_5970
.text:0000000000005981
.text:0000000000005981 loc_5981:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005981                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005986                 lea     rbx, slot0
.text:000000000000598D                 cmp     rdi, rbx
.text:0000000000005990                 jz      short loc_59A9
.text:0000000000005992                 call    free
.text:0000000000005997                 mov     cs:slotvec0, 100h
.text:00000000000059A2                 mov     cs:off_20F098, rbx
.text:00000000000059A9
.text:00000000000059A9 loc_59A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000059A9                 lea     rbx, slotvec0
.text:00000000000059B0                 cmp     r12, rbx
.text:00000000000059B3                 jz      short loc_59C4
.text:00000000000059B5                 mov     rdi, r12        ; ptr
.text:00000000000059B8                 call    free
.text:00000000000059BD                 mov     cs:slotvec, rbx
.text:00000000000059C4
.text:00000000000059C4 loc_59C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000059C4                 pop     rbx
.text:00000000000059C5                 mov     cs:nslots, 1
.text:00000000000059CF                 pop     rbp
.text:00000000000059D0                 pop     r12
.text:00000000000059D2                 retn
.text:00000000000059D2 ; } // starts at 5940
.text:00000000000059D2 quotearg_free   endp
.text:00000000000059D2
.text:00000000000059D2 ; ---------------------------------------------------------------------------
.text:00000000000059D3                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0
.text:00000000000059E0                 public quotearg_n
.text:00000000000059E0 quotearg_n      proc near
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 lea     rcx, default_quoting_options
.text:00000000000059E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000059EE                 jmp     quotearg_n_options
.text:00000000000059EE ; } // starts at 59E0
.text:00000000000059EE quotearg_n      endp
.text:00000000000059EE
.text:00000000000059EE ; ---------------------------------------------------------------------------
.text:00000000000059F3                 align 20h
.text:0000000000005A00
.text:0000000000005A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A00
.text:0000000000005A00
.text:0000000000005A00                 public quotearg_n_mem
.text:0000000000005A00 quotearg_n_mem  proc near
.text:0000000000005A00 ; __unwind {
.text:0000000000005A00                 lea     rcx, default_quoting_options
.text:0000000000005A07                 jmp     quotearg_n_options
.text:0000000000005A07 ; } // starts at 5A00
.text:0000000000005A07 quotearg_n_mem  endp
.text:0000000000005A07
.text:0000000000005A07 ; ---------------------------------------------------------------------------
.text:0000000000005A0C                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10
.text:0000000000005A10                 public quotearg
.text:0000000000005A10 quotearg        proc near
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 lea     rcx, default_quoting_options
.text:0000000000005A17                 mov     rsi, rdi
.text:0000000000005A1A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A21                 xor     edi, edi
.text:0000000000005A23                 jmp     quotearg_n_options
.text:0000000000005A23 ; } // starts at 5A10
.text:0000000000005A23 quotearg        endp
.text:0000000000005A23
.text:0000000000005A23 ; ---------------------------------------------------------------------------
.text:0000000000005A28                 align 10h
.text:0000000000005A30
.text:0000000000005A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A30
.text:0000000000005A30
.text:0000000000005A30                 public quotearg_mem
.text:0000000000005A30 quotearg_mem    proc near
.text:0000000000005A30 ; __unwind {
.text:0000000000005A30                 lea     rcx, default_quoting_options
.text:0000000000005A37                 mov     rdx, rsi
.text:0000000000005A3A                 mov     rsi, rdi
.text:0000000000005A3D                 xor     edi, edi
.text:0000000000005A3F                 jmp     quotearg_n_options
.text:0000000000005A3F ; } // starts at 5A30
.text:0000000000005A3F quotearg_mem    endp
.text:0000000000005A3F
.text:0000000000005A3F ; ---------------------------------------------------------------------------
.text:0000000000005A44                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50 ; Attributes: info_from_lumina
.text:0000000000005A50
.text:0000000000005A50 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005A50                 public quotearg_n_style
.text:0000000000005A50 quotearg_n_style proc near              ; CODE XREF: main+473↑p
.text:0000000000005A50                                         ; rm+4A8↑p ...
.text:0000000000005A50
.text:0000000000005A50 var_48          = dword ptr -48h
.text:0000000000005A50 var_44          = qword ptr -44h
.text:0000000000005A50 var_3C          = qword ptr -3Ch
.text:0000000000005A50 var_34          = qword ptr -34h
.text:0000000000005A50 var_2C          = qword ptr -2Ch
.text:0000000000005A50 var_24          = qword ptr -24h
.text:0000000000005A50 var_1C          = qword ptr -1Ch
.text:0000000000005A50 var_14          = dword ptr -14h
.text:0000000000005A50 var_10          = qword ptr -10h
.text:0000000000005A50
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 sub     rsp, 48h
.text:0000000000005A54                 mov     rax, rdx
.text:0000000000005A57                 mov     rdx, fs:28h
.text:0000000000005A60                 mov     [rsp+48h+var_10], rdx
.text:0000000000005A65                 xor     edx, edx
.text:0000000000005A67                 cmp     esi, 0Ah
.text:0000000000005A6A                 jz      short loc_5AD4
.text:0000000000005A6C                 mov     [rsp+48h+var_48], esi
.text:0000000000005A6F                 mov     rcx, rsp
.text:0000000000005A72                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A79                 mov     rsi, rax
.text:0000000000005A7C                 mov     [rsp+48h+var_44], 0
.text:0000000000005A85                 mov     [rsp+48h+var_3C], 0
.text:0000000000005A8E                 mov     [rsp+48h+var_34], 0
.text:0000000000005A97                 mov     [rsp+48h+var_2C], 0
.text:0000000000005AA0                 mov     [rsp+48h+var_24], 0
.text:0000000000005AA9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005AB2                 mov     [rsp+48h+var_14], 0
.text:0000000000005ABA                 call    quotearg_n_options
.text:0000000000005ABF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005AC4                 xor     rcx, fs:28h
.text:0000000000005ACD                 jnz     short loc_5AD9
.text:0000000000005ACF                 add     rsp, 48h
.text:0000000000005AD3                 retn
.text:0000000000005AD4 ; ---------------------------------------------------------------------------
.text:0000000000005AD4
.text:0000000000005AD4 loc_5AD4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005AD4                 call    _abort
.text:0000000000005AD9 ; ---------------------------------------------------------------------------
.text:0000000000005AD9
.text:0000000000005AD9 loc_5AD9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005AD9                 call    ___stack_chk_fail
.text:0000000000005AD9 ; } // starts at 5A50
.text:0000000000005AD9 quotearg_n_style endp
.text:0000000000005AD9
.text:0000000000005AD9 ; ---------------------------------------------------------------------------
.text:0000000000005ADE                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AE0
.text:0000000000005AE0 ; Attributes: info_from_lumina
.text:0000000000005AE0
.text:0000000000005AE0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005AE0                 public quotearg_n_style_mem
.text:0000000000005AE0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005AE0
.text:0000000000005AE0 var_48          = dword ptr -48h
.text:0000000000005AE0 var_44          = qword ptr -44h
.text:0000000000005AE0 var_3C          = qword ptr -3Ch
.text:0000000000005AE0 var_34          = qword ptr -34h
.text:0000000000005AE0 var_2C          = qword ptr -2Ch
.text:0000000000005AE0 var_24          = qword ptr -24h
.text:0000000000005AE0 var_1C          = qword ptr -1Ch
.text:0000000000005AE0 var_14          = dword ptr -14h
.text:0000000000005AE0 var_10          = qword ptr -10h
.text:0000000000005AE0
.text:0000000000005AE0 ; __unwind {
.text:0000000000005AE0                 sub     rsp, 48h
.text:0000000000005AE4                 mov     rax, rdx
.text:0000000000005AE7                 mov     rdx, rcx
.text:0000000000005AEA                 mov     rcx, fs:28h
.text:0000000000005AF3                 mov     [rsp+48h+var_10], rcx
.text:0000000000005AF8                 xor     ecx, ecx
.text:0000000000005AFA                 cmp     esi, 0Ah
.text:0000000000005AFD                 jz      short loc_5B60
.text:0000000000005AFF                 mov     [rsp+48h+var_48], esi
.text:0000000000005B02                 mov     rcx, rsp
.text:0000000000005B05                 mov     rsi, rax
.text:0000000000005B08                 mov     [rsp+48h+var_44], 0
.text:0000000000005B11                 mov     [rsp+48h+var_3C], 0
.text:0000000000005B1A                 mov     [rsp+48h+var_34], 0
.text:0000000000005B23                 mov     [rsp+48h+var_2C], 0
.text:0000000000005B2C                 mov     [rsp+48h+var_24], 0
.text:0000000000005B35                 mov     [rsp+48h+var_1C], 0
.text:0000000000005B3E                 mov     [rsp+48h+var_14], 0
.text:0000000000005B46                 call    quotearg_n_options
.text:0000000000005B4B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005B50                 xor     rdx, fs:28h
.text:0000000000005B59                 jnz     short loc_5B65
.text:0000000000005B5B                 add     rsp, 48h
.text:0000000000005B5F                 retn
.text:0000000000005B60 ; ---------------------------------------------------------------------------
.text:0000000000005B60
.text:0000000000005B60 loc_5B60:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005B60                 call    _abort
.text:0000000000005B65 ; ---------------------------------------------------------------------------
.text:0000000000005B65
.text:0000000000005B65 loc_5B65:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005B65                 call    ___stack_chk_fail
.text:0000000000005B65 ; } // starts at 5AE0
.text:0000000000005B65 quotearg_n_style_mem endp
.text:0000000000005B65
.text:0000000000005B65 ; ---------------------------------------------------------------------------
.text:0000000000005B6A                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70                 public quotearg_style
.text:0000000000005B70 quotearg_style  proc near               ; CODE XREF: main+45E↑p
.text:0000000000005B70                                         ; main+50A↑p ...
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 mov     rdx, rsi
.text:0000000000005B73                 mov     esi, edi
.text:0000000000005B75                 xor     edi, edi
.text:0000000000005B77                 jmp     quotearg_n_style
.text:0000000000005B77 ; } // starts at 5B70
.text:0000000000005B77 quotearg_style  endp
.text:0000000000005B77
.text:0000000000005B77 ; ---------------------------------------------------------------------------
.text:0000000000005B7C                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80
.text:0000000000005B80                 public quotearg_style_mem
.text:0000000000005B80 quotearg_style_mem proc near
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 mov     rcx, rdx
.text:0000000000005B83                 mov     rdx, rsi
.text:0000000000005B86                 mov     esi, edi
.text:0000000000005B88                 xor     edi, edi
.text:0000000000005B8A                 jmp     quotearg_n_style_mem
.text:0000000000005B8A ; } // starts at 5B80
.text:0000000000005B8A quotearg_style_mem endp
.text:0000000000005B8A
.text:0000000000005B8A ; ---------------------------------------------------------------------------
.text:0000000000005B8F                 align 10h
.text:0000000000005B90
.text:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B90
.text:0000000000005B90 ; Attributes: info_from_lumina
.text:0000000000005B90
.text:0000000000005B90 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005B90                 public quotearg_char_mem
.text:0000000000005B90 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005B90                                         ; quotearg_colon+C↓j ...
.text:0000000000005B90
.text:0000000000005B90 var_48          = xmmword ptr -48h
.text:0000000000005B90 var_38          = xmmword ptr -38h
.text:0000000000005B90 var_28          = xmmword ptr -28h
.text:0000000000005B90 var_18          = qword ptr -18h
.text:0000000000005B90 var_10          = qword ptr -10h
.text:0000000000005B90
.text:0000000000005B90 ; __unwind {
.text:0000000000005B90                 sub     rsp, 48h
.text:0000000000005B94                 mov     ecx, edx
.text:0000000000005B96                 mov     rax, fs:28h
.text:0000000000005B9F                 mov     [rsp+48h+var_10], rax
.text:0000000000005BA4                 xor     eax, eax
.text:0000000000005BA6                 mov     rax, cs:qword_20F250
.text:0000000000005BAD                 mov     r8, rsp
.text:0000000000005BB0                 and     ecx, 1Fh
.text:0000000000005BB3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005BBB                 mov     [rsp+48h+var_18], rax
.text:0000000000005BC0                 mov     eax, edx
.text:0000000000005BC2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005BC6                 shr     al, 5
.text:0000000000005BC9                 movzx   eax, al
.text:0000000000005BCC                 lea     r9, [r8+rax*4+8]
.text:0000000000005BD1                 movdqa  xmm0, cs:xmmword_20F230
.text:0000000000005BD9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005BDE                 movdqa  xmm0, cs:xmmword_20F240
.text:0000000000005BE6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005BEB                 mov     edx, [r9]
.text:0000000000005BEE                 mov     eax, edx
.text:0000000000005BF0                 shr     eax, cl
.text:0000000000005BF2                 not     eax
.text:0000000000005BF4                 and     eax, 1
.text:0000000000005BF7                 shl     eax, cl
.text:0000000000005BF9                 mov     rcx, r8
.text:0000000000005BFC                 xor     eax, edx
.text:0000000000005BFE                 mov     rdx, rsi
.text:0000000000005C01                 mov     rsi, rdi
.text:0000000000005C04                 mov     [r9], eax
.text:0000000000005C07                 xor     edi, edi
.text:0000000000005C09                 call    quotearg_n_options
.text:0000000000005C0E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005C13                 xor     rsi, fs:28h
.text:0000000000005C1C                 jnz     short loc_5C23
.text:0000000000005C1E                 add     rsp, 48h
.text:0000000000005C22                 retn
.text:0000000000005C23 ; ---------------------------------------------------------------------------
.text:0000000000005C23
.text:0000000000005C23 loc_5C23:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005C23                 call    ___stack_chk_fail
.text:0000000000005C23 ; } // starts at 5B90
.text:0000000000005C23 quotearg_char_mem endp
.text:0000000000005C23
.text:0000000000005C23 ; ---------------------------------------------------------------------------
.text:0000000000005C28                 align 10h
.text:0000000000005C30
.text:0000000000005C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C30
.text:0000000000005C30
.text:0000000000005C30                 public quotearg_char
.text:0000000000005C30 quotearg_char   proc near
.text:0000000000005C30 ; __unwind {
.text:0000000000005C30                 movsx   edx, sil
.text:0000000000005C34                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C3B                 jmp     quotearg_char_mem
.text:0000000000005C3B ; } // starts at 5C30
.text:0000000000005C3B quotearg_char   endp
.text:0000000000005C3B
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40                 public quotearg_colon
.text:0000000000005C40 quotearg_colon  proc near               ; CODE XREF: close_stdin+85↑p
.text:0000000000005C40                                         ; close_stdout+65↑p
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 mov     edx, 3Ah ; ':'
.text:0000000000005C45                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C4C                 jmp     quotearg_char_mem
.text:0000000000005C4C ; } // starts at 5C40
.text:0000000000005C4C quotearg_colon  endp
.text:0000000000005C4C
.text:0000000000005C4C ; ---------------------------------------------------------------------------
.text:0000000000005C51                 align 20h
.text:0000000000005C60
.text:0000000000005C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C60
.text:0000000000005C60
.text:0000000000005C60                 public quotearg_colon_mem
.text:0000000000005C60 quotearg_colon_mem proc near
.text:0000000000005C60 ; __unwind {
.text:0000000000005C60                 mov     edx, 3Ah ; ':'
.text:0000000000005C65                 jmp     quotearg_char_mem
.text:0000000000005C65 ; } // starts at 5C60
.text:0000000000005C65 quotearg_colon_mem endp
.text:0000000000005C65
.text:0000000000005C65 ; ---------------------------------------------------------------------------
.text:0000000000005C6A                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70 ; Attributes: info_from_lumina
.text:0000000000005C70
.text:0000000000005C70 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005C70                 public quotearg_n_style_colon
.text:0000000000005C70 quotearg_n_style_colon proc near        ; CODE XREF: rm+AB↑p
.text:0000000000005C70                                         ; rm+1FB↑p ...
.text:0000000000005C70
.text:0000000000005C70 var_48          = dword ptr -48h
.text:0000000000005C70 var_44          = qword ptr -44h
.text:0000000000005C70 var_3C          = qword ptr -3Ch
.text:0000000000005C70 var_34          = qword ptr -34h
.text:0000000000005C70 var_2C          = qword ptr -2Ch
.text:0000000000005C70 var_24          = qword ptr -24h
.text:0000000000005C70 var_1C          = qword ptr -1Ch
.text:0000000000005C70 var_14          = dword ptr -14h
.text:0000000000005C70 var_10          = qword ptr -10h
.text:0000000000005C70
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 sub     rsp, 48h
.text:0000000000005C74                 mov     rax, rdx
.text:0000000000005C77                 mov     rdx, fs:28h
.text:0000000000005C80                 mov     [rsp+48h+var_10], rdx
.text:0000000000005C85                 xor     edx, edx
.text:0000000000005C87                 cmp     esi, 0Ah
.text:0000000000005C8A                 jz      short loc_5CF4
.text:0000000000005C8C                 mov     [rsp+48h+var_48], esi
.text:0000000000005C8F                 mov     rcx, rsp
.text:0000000000005C92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C99                 mov     rsi, rax
.text:0000000000005C9C                 mov     [rsp+48h+var_44], 0
.text:0000000000005CA5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005CAE                 mov     [rsp+48h+var_34], 0
.text:0000000000005CB7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005CC0                 mov     [rsp+48h+var_24], 0
.text:0000000000005CC9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005CD2                 mov     [rsp+48h+var_14], 0
.text:0000000000005CDA                 call    quotearg_n_options
.text:0000000000005CDF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005CE4                 xor     rcx, fs:28h
.text:0000000000005CED                 jnz     short loc_5CF9
.text:0000000000005CEF                 add     rsp, 48h
.text:0000000000005CF3                 retn
.text:0000000000005CF4 ; ---------------------------------------------------------------------------
.text:0000000000005CF4
.text:0000000000005CF4 loc_5CF4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005CF4                 call    _abort
.text:0000000000005CF9 ; ---------------------------------------------------------------------------
.text:0000000000005CF9
.text:0000000000005CF9 loc_5CF9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005CF9                 call    ___stack_chk_fail
.text:0000000000005CF9 ; } // starts at 5C70
.text:0000000000005CF9 quotearg_n_style_colon endp
.text:0000000000005CF9
.text:0000000000005CF9 ; ---------------------------------------------------------------------------
.text:0000000000005CFE                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00 ; Attributes: info_from_lumina
.text:0000000000005D00
.text:0000000000005D00 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005D00                 public quotearg_n_custom_mem
.text:0000000000005D00 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005D00                                         ; quotearg_custom+12↓j ...
.text:0000000000005D00
.text:0000000000005D00 var_48          = xmmword ptr -48h
.text:0000000000005D00 var_38          = xmmword ptr -38h
.text:0000000000005D00 var_28          = xmmword ptr -28h
.text:0000000000005D00 var_18          = qword ptr -18h
.text:0000000000005D00 var_10          = qword ptr -10h
.text:0000000000005D00
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 sub     rsp, 48h
.text:0000000000005D04                 mov     r9, rcx
.text:0000000000005D07                 mov     rcx, cs:qword_20F250
.text:0000000000005D0E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005D16                 mov     rax, fs:28h
.text:0000000000005D1F                 mov     [rsp+48h+var_10], rax
.text:0000000000005D24                 xor     eax, eax
.text:0000000000005D26                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005D2A                 test    rsi, rsi
.text:0000000000005D2D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005D32                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005D39                 movdqa  xmm0, cs:xmmword_20F230
.text:0000000000005D41                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005D46                 movdqa  xmm0, cs:xmmword_20F240
.text:0000000000005D4E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005D53                 jz      short loc_5D87
.text:0000000000005D55                 test    rdx, rdx
.text:0000000000005D58                 jz      short loc_5D87
.text:0000000000005D5A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000005D5F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005D64                 mov     rcx, rsp
.text:0000000000005D67                 mov     rdx, r8
.text:0000000000005D6A                 mov     rsi, r9
.text:0000000000005D6D                 call    quotearg_n_options
.text:0000000000005D72                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005D77                 xor     rdi, fs:28h
.text:0000000000005D80                 jnz     short loc_5D8C
.text:0000000000005D82                 add     rsp, 48h
.text:0000000000005D86                 retn
.text:0000000000005D87 ; ---------------------------------------------------------------------------
.text:0000000000005D87
.text:0000000000005D87 loc_5D87:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005D87                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005D87                 call    _abort
.text:0000000000005D8C ; ---------------------------------------------------------------------------
.text:0000000000005D8C
.text:0000000000005D8C loc_5D8C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000005D8C                 call    ___stack_chk_fail
.text:0000000000005D8C ; } // starts at 5D00
.text:0000000000005D8C quotearg_n_custom_mem endp
.text:0000000000005D8C
.text:0000000000005D8C ; ---------------------------------------------------------------------------
.text:0000000000005D91                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DA0
.text:0000000000005DA0
.text:0000000000005DA0                 public quotearg_n_custom
.text:0000000000005DA0 quotearg_n_custom proc near
.text:0000000000005DA0 ; __unwind {
.text:0000000000005DA0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DA7                 jmp     quotearg_n_custom_mem
.text:0000000000005DA7 ; } // starts at 5DA0
.text:0000000000005DA7 quotearg_n_custom endp
.text:0000000000005DA7
.text:0000000000005DA7 ; ---------------------------------------------------------------------------
.text:0000000000005DAC                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DB0
.text:0000000000005DB0
.text:0000000000005DB0                 public quotearg_custom
.text:0000000000005DB0 quotearg_custom proc near
.text:0000000000005DB0 ; __unwind {
.text:0000000000005DB0                 mov     rcx, rdx
.text:0000000000005DB3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DBA                 mov     rdx, rsi
.text:0000000000005DBD                 mov     rsi, rdi
.text:0000000000005DC0                 xor     edi, edi
.text:0000000000005DC2                 jmp     quotearg_n_custom_mem
.text:0000000000005DC2 ; } // starts at 5DB0
.text:0000000000005DC2 quotearg_custom endp
.text:0000000000005DC2
.text:0000000000005DC2 ; ---------------------------------------------------------------------------
.text:0000000000005DC7                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0
.text:0000000000005DD0                 public quotearg_custom_mem
.text:0000000000005DD0 quotearg_custom_mem proc near
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 mov     r8, rcx
.text:0000000000005DD3                 mov     rcx, rdx
.text:0000000000005DD6                 mov     rdx, rsi
.text:0000000000005DD9                 mov     rsi, rdi
.text:0000000000005DDC                 xor     edi, edi
.text:0000000000005DDE                 jmp     quotearg_n_custom_mem
.text:0000000000005DDE ; } // starts at 5DD0
.text:0000000000005DDE quotearg_custom_mem endp
.text:0000000000005DDE
.text:0000000000005DDE ; ---------------------------------------------------------------------------
.text:0000000000005DE3                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DF0
.text:0000000000005DF0
.text:0000000000005DF0                 public quote_n_mem
.text:0000000000005DF0 quote_n_mem     proc near
.text:0000000000005DF0 ; __unwind {
.text:0000000000005DF0                 lea     rcx, quote_quoting_options
.text:0000000000005DF7                 jmp     quotearg_n_options
.text:0000000000005DF7 ; } // starts at 5DF0
.text:0000000000005DF7 quote_n_mem     endp
.text:0000000000005DF7
.text:0000000000005DF7 ; ---------------------------------------------------------------------------
.text:0000000000005DFC                 align 20h
.text:0000000000005E00
.text:0000000000005E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E00
.text:0000000000005E00
.text:0000000000005E00                 public quote_mem
.text:0000000000005E00 quote_mem       proc near
.text:0000000000005E00 ; __unwind {
.text:0000000000005E00                 lea     rcx, quote_quoting_options
.text:0000000000005E07                 mov     rdx, rsi
.text:0000000000005E0A                 mov     rsi, rdi
.text:0000000000005E0D                 xor     edi, edi
.text:0000000000005E0F                 jmp     quotearg_n_options
.text:0000000000005E0F ; } // starts at 5E00
.text:0000000000005E0F quote_mem       endp
.text:0000000000005E0F
.text:0000000000005E0F ; ---------------------------------------------------------------------------
.text:0000000000005E14                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20
.text:0000000000005E20                 public quote_n
.text:0000000000005E20 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 lea     rcx, quote_quoting_options
.text:0000000000005E27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E2E                 jmp     quotearg_n_options
.text:0000000000005E2E ; } // starts at 5E20
.text:0000000000005E2E quote_n         endp
.text:0000000000005E2E
.text:0000000000005E2E ; ---------------------------------------------------------------------------
.text:0000000000005E33                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40
.text:0000000000005E40                 public quote
.text:0000000000005E40 quote           proc near               ; CODE XREF: argmatch_valid+5A↑p
.text:0000000000005E40                                         ; argmatch_valid+A9↑p
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 lea     rcx, quote_quoting_options
.text:0000000000005E47                 mov     rsi, rdi
.text:0000000000005E4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E51                 xor     edi, edi
.text:0000000000005E53                 jmp     quotearg_n_options
.text:0000000000005E53 ; } // starts at 5E40
.text:0000000000005E53 quote           endp
.text:0000000000005E53
.text:0000000000005E53 ; ---------------------------------------------------------------------------
.text:0000000000005E58                 align 20h
.text:0000000000005E60
.text:0000000000005E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E60
.text:0000000000005E60
.text:0000000000005E60                 public get_root_dev_ino
.text:0000000000005E60 get_root_dev_ino proc near              ; CODE XREF: main+4EB↑p
.text:0000000000005E60
.text:0000000000005E60 var_A8          = qword ptr -0A8h
.text:0000000000005E60 var_A0          = qword ptr -0A0h
.text:0000000000005E60 var_10          = qword ptr -10h
.text:0000000000005E60
.text:0000000000005E60 ; __unwind {
.text:0000000000005E60                 push    rbx
.text:0000000000005E61                 lea     rsi, aLibs+6    ; filename
.text:0000000000005E68                 mov     rbx, rdi
.text:0000000000005E6B                 mov     edi, 1          ; ver
.text:0000000000005E70                 sub     rsp, 0A0h
.text:0000000000005E77                 mov     rdx, rsp        ; stat_buf
.text:0000000000005E7A                 mov     rax, fs:28h
.text:0000000000005E83                 mov     [rsp+0A8h+var_10], rax
.text:0000000000005E8B                 xor     eax, eax
.text:0000000000005E8D                 call    ___lxstat
.text:0000000000005E92                 test    eax, eax
.text:0000000000005E94                 jnz     short loc_5EC8
.text:0000000000005E96                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000005E9B                 mov     [rbx], rax
.text:0000000000005E9E                 mov     rax, [rsp+0A8h+var_A8]
.text:0000000000005EA2                 mov     [rbx+8], rax
.text:0000000000005EA6                 mov     rax, rbx
.text:0000000000005EA9
.text:0000000000005EA9 loc_5EA9:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:0000000000005EA9                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000005EB1                 xor     rcx, fs:28h
.text:0000000000005EBA                 jnz     short loc_5ECC
.text:0000000000005EBC                 add     rsp, 0A0h
.text:0000000000005EC3                 pop     rbx
.text:0000000000005EC4                 retn
.text:0000000000005EC4 ; ---------------------------------------------------------------------------
.text:0000000000005EC5                 align 8
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:0000000000005EC8                 xor     eax, eax
.text:0000000000005ECA                 jmp     short loc_5EA9
.text:0000000000005ECC ; ---------------------------------------------------------------------------
.text:0000000000005ECC
.text:0000000000005ECC loc_5ECC:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:0000000000005ECC                 call    ___stack_chk_fail
.text:0000000000005ECC ; } // starts at 5E60
.text:0000000000005ECC get_root_dev_ino endp
.text:0000000000005ECC
.text:0000000000005ECC ; ---------------------------------------------------------------------------
.text:0000000000005ED1                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE0
.text:0000000000005EE0
.text:0000000000005EE0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005EE0                 public version_etc_arn
.text:0000000000005EE0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_631B↓j
.text:0000000000005EE0                                         ; version_etc_va:loc_636B↓p ...
.text:0000000000005EE0
.text:0000000000005EE0 var_58          = qword ptr -58h
.text:0000000000005EE0 var_50          = qword ptr -50h
.text:0000000000005EE0 var_48          = qword ptr -48h
.text:0000000000005EE0 var_40          = qword ptr -40h
.text:0000000000005EE0
.text:0000000000005EE0 ; __unwind {
.text:0000000000005EE0                 push    r15
.text:0000000000005EE2                 push    r14
.text:0000000000005EE4                 push    r13
.text:0000000000005EE6                 push    r12
.text:0000000000005EE8                 mov     r12, r9
.text:0000000000005EEB                 push    rbp
.text:0000000000005EEC                 push    rbx
.text:0000000000005EED                 mov     rbp, rdi
.text:0000000000005EF0                 mov     rbx, r8
.text:0000000000005EF3                 sub     rsp, 28h
.text:0000000000005EF7                 test    rsi, rsi
.text:0000000000005EFA                 jz      loc_6018
.text:0000000000005F00                 mov     r8, rdx
.text:0000000000005F03                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000005F0A                 mov     r9, rcx
.text:0000000000005F0D                 xor     eax, eax
.text:0000000000005F0F                 mov     rcx, rsi
.text:0000000000005F12                 mov     esi, 1
.text:0000000000005F17                 call    ___fprintf_chk
.text:0000000000005F1C
.text:0000000000005F1C loc_5F1C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000005F1C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005F23                 xor     edi, edi        ; domainname
.text:0000000000005F25                 mov     edx, 5          ; category
.text:0000000000005F2A                 call    _dcgettext
.text:0000000000005F2F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005F36                 mov     rcx, rax
.text:0000000000005F39                 mov     r8d, 7E3h
.text:0000000000005F3F                 mov     esi, 1
.text:0000000000005F44                 mov     rdi, rbp
.text:0000000000005F47                 xor     eax, eax
.text:0000000000005F49                 call    ___fprintf_chk
.text:0000000000005F4E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005F55                 xor     edi, edi        ; domainname
.text:0000000000005F57                 mov     edx, 5          ; category
.text:0000000000005F5C                 call    _dcgettext
.text:0000000000005F61                 mov     rsi, rbp        ; stream
.text:0000000000005F64                 mov     rdi, rax        ; s
.text:0000000000005F67                 call    _fputs_unlocked
.text:0000000000005F6C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005F70                 ja      def_5F84        ; jumptable 0000000000005F84 default case
.text:0000000000005F76                 lea     rdx, jpt_5F84
.text:0000000000005F7D                 movsxd  rax, ds:(jpt_5F84 - 0C12Ch)[rdx+r12*4]
.text:0000000000005F81                 add     rax, rdx
.text:0000000000005F84                 jmp     rax             ; switch jump
.text:0000000000005F84 ; ---------------------------------------------------------------------------
.text:0000000000005F86                 align 10h
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F90                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000005F90                 mov     r9, [rbx+38h]   ; jumptable 0000000000005F84 case 8
.text:0000000000005F94                 mov     rax, [rbx+10h]
.text:0000000000005F98                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005F9F                 mov     r8, [rbx+8]
.text:0000000000005FA3                 mov     edx, 5          ; category
.text:0000000000005FA8                 xor     edi, edi        ; domainname
.text:0000000000005FAA                 mov     r13, [rbx+30h]
.text:0000000000005FAE                 mov     r12, [rbx+28h]
.text:0000000000005FB2                 mov     [rsp+58h+var_48], r9
.text:0000000000005FB7                 mov     r15, [rbx+20h]
.text:0000000000005FBB                 mov     r14, [rbx+18h]
.text:0000000000005FBF                 mov     [rsp+58h+var_58], rax
.text:0000000000005FC3                 mov     [rsp+58h+var_50], r8
.text:0000000000005FC8                 mov     rbx, [rbx]
.text:0000000000005FCB                 call    _dcgettext
.text:0000000000005FD0                 sub     rsp, 8
.text:0000000000005FD4
.text:0000000000005FD4 loc_5FD4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005FD4                 mov     r9, [rsp+60h+var_48]
.text:0000000000005FD9                 mov     rdx, rax
.text:0000000000005FDC                 mov     rcx, rbx
.text:0000000000005FDF                 mov     esi, 1
.text:0000000000005FE4                 mov     rdi, rbp
.text:0000000000005FE7                 xor     eax, eax
.text:0000000000005FE9                 push    r9
.text:0000000000005FEB                 push    r13
.text:0000000000005FED                 push    r12
.text:0000000000005FEF                 push    r15
.text:0000000000005FF1                 push    r14
.text:0000000000005FF3                 mov     r9, [rsp+88h+var_58]
.text:0000000000005FF8                 mov     r8, [rsp+88h+var_50]
.text:0000000000005FFD                 call    ___fprintf_chk
.text:0000000000006002                 add     rsp, 30h
.text:0000000000006006
.text:0000000000006006 loc_6006:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006006                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000006006                 add     rsp, 28h        ; jumptable 0000000000005F84 case 0
.text:000000000000600A                 pop     rbx
.text:000000000000600B                 pop     rbp
.text:000000000000600C                 pop     r12
.text:000000000000600E                 pop     r13
.text:0000000000006010                 pop     r14
.text:0000000000006012                 pop     r15
.text:0000000000006014                 retn
.text:0000000000006014 ; ---------------------------------------------------------------------------
.text:0000000000006015                 align 8
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000006018                 mov     r8, rcx
.text:000000000000601B                 mov     rcx, rdx
.text:000000000000601E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000006025                 mov     esi, 1
.text:000000000000602A                 xor     eax, eax
.text:000000000000602C                 call    ___fprintf_chk
.text:0000000000006031                 jmp     loc_5F1C
.text:0000000000006031 ; ---------------------------------------------------------------------------
.text:0000000000006036                 align 20h
.text:0000000000006040
.text:0000000000006040 loc_6040:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006040                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000006040                 mov     r10, [rbx+40h]  ; jumptable 0000000000005F84 case 9
.text:0000000000006044                 mov     r9, [rbx+38h]
.text:0000000000006048                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000604F                 mov     rax, [rbx+10h]
.text:0000000000006053                 mov     r8, [rbx+8]
.text:0000000000006057                 mov     edx, 5          ; category
.text:000000000000605C                 mov     r13, [rbx+30h]
.text:0000000000006060                 mov     r12, [rbx+28h]
.text:0000000000006064                 mov     r15, [rbx+20h]
.text:0000000000006068                 mov     r14, [rbx+18h]
.text:000000000000606C                 mov     rbx, [rbx]
.text:000000000000606F                 mov     [rsp+58h+var_40], r10
.text:0000000000006074                 mov     [rsp+58h+var_48], r9
.text:0000000000006079                 mov     [rsp+58h+var_58], rax
.text:000000000000607D                 mov     [rsp+58h+var_50], r8
.text:0000000000006082
.text:0000000000006082 loc_6082:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006082                 xor     edi, edi        ; domainname
.text:0000000000006084                 call    _dcgettext
.text:0000000000006089                 mov     r10, [rsp+58h+var_40]
.text:000000000000608E                 push    r10
.text:0000000000006090                 jmp     loc_5FD4
.text:0000000000006090 ; ---------------------------------------------------------------------------
.text:0000000000006095                 align 8
.text:0000000000006098
.text:0000000000006098 loc_6098:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006098                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000006098                 mov     rbx, [rbx]      ; jumptable 0000000000005F84 case 1
.text:000000000000609B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000060A2                 mov     edx, 5          ; category
.text:00000000000060A7                 xor     edi, edi        ; domainname
.text:00000000000060A9                 call    _dcgettext
.text:00000000000060AE                 add     rsp, 28h
.text:00000000000060B2                 mov     rcx, rbx
.text:00000000000060B5                 mov     rdi, rbp
.text:00000000000060B8                 pop     rbx
.text:00000000000060B9                 pop     rbp
.text:00000000000060BA                 pop     r12
.text:00000000000060BC                 pop     r13
.text:00000000000060BE                 pop     r14
.text:00000000000060C0                 pop     r15
.text:00000000000060C2                 mov     rdx, rax
.text:00000000000060C5                 mov     esi, 1
.text:00000000000060CA                 xor     eax, eax
.text:00000000000060CC                 jmp     ___fprintf_chk
.text:00000000000060CC ; ---------------------------------------------------------------------------
.text:00000000000060D1                 align 8
.text:00000000000060D8
.text:00000000000060D8 loc_60D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000060D8                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:00000000000060D8                 mov     r12, [rbx+8]    ; jumptable 0000000000005F84 case 2
.text:00000000000060DC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000060E3                 mov     rbx, [rbx]
.text:00000000000060E6                 mov     edx, 5          ; category
.text:00000000000060EB                 xor     edi, edi        ; domainname
.text:00000000000060ED                 call    _dcgettext
.text:00000000000060F2                 add     rsp, 28h
.text:00000000000060F6                 mov     r8, r12
.text:00000000000060F9                 mov     rcx, rbx
.text:00000000000060FC                 mov     rdi, rbp
.text:00000000000060FF                 mov     rdx, rax
.text:0000000000006102                 mov     esi, 1
.text:0000000000006107                 pop     rbx
.text:0000000000006108                 pop     rbp
.text:0000000000006109                 pop     r12
.text:000000000000610B                 pop     r13
.text:000000000000610D                 pop     r14
.text:000000000000610F                 pop     r15
.text:0000000000006111                 xor     eax, eax
.text:0000000000006113                 jmp     ___fprintf_chk
.text:0000000000006113 ; ---------------------------------------------------------------------------
.text:0000000000006118                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006120                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000006120                 mov     r13, [rbx+10h]  ; jumptable 0000000000005F84 case 3
.text:0000000000006124                 mov     r12, [rbx+8]
.text:0000000000006128                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000612F                 mov     rbx, [rbx]
.text:0000000000006132                 mov     edx, 5          ; category
.text:0000000000006137                 xor     edi, edi        ; domainname
.text:0000000000006139                 call    _dcgettext
.text:000000000000613E                 add     rsp, 28h
.text:0000000000006142                 mov     r9, r13
.text:0000000000006145                 mov     r8, r12
.text:0000000000006148                 mov     rcx, rbx
.text:000000000000614B                 mov     rdi, rbp
.text:000000000000614E                 mov     rdx, rax
.text:0000000000006151                 pop     rbx
.text:0000000000006152                 pop     rbp
.text:0000000000006153                 pop     r12
.text:0000000000006155                 pop     r13
.text:0000000000006157                 pop     r14
.text:0000000000006159                 pop     r15
.text:000000000000615B                 mov     esi, 1
.text:0000000000006160                 xor     eax, eax
.text:0000000000006162                 jmp     ___fprintf_chk
.text:0000000000006162 ; ---------------------------------------------------------------------------
.text:0000000000006167                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006170                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000006170                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005F84 case 4
.text:0000000000006177                 mov     edx, 5          ; category
.text:000000000000617C                 xor     edi, edi        ; domainname
.text:000000000000617E                 mov     r14, [rbx+18h]
.text:0000000000006182                 mov     r13, [rbx+10h]
.text:0000000000006186                 mov     r12, [rbx+8]
.text:000000000000618A                 mov     rbx, [rbx]
.text:000000000000618D                 call    _dcgettext
.text:0000000000006192                 sub     rsp, 8
.text:0000000000006196
.text:0000000000006196 loc_6196:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006196                 push    r14
.text:0000000000006198                 mov     rdx, rax
.text:000000000000619B                 mov     r9, r13
.text:000000000000619E                 mov     r8, r12
.text:00000000000061A1                 mov     rcx, rbx
.text:00000000000061A4                 mov     rdi, rbp
.text:00000000000061A7                 mov     esi, 1
.text:00000000000061AC                 xor     eax, eax
.text:00000000000061AE                 call    ___fprintf_chk
.text:00000000000061B3                 pop     rax
.text:00000000000061B4                 pop     rdx
.text:00000000000061B5                 add     rsp, 28h
.text:00000000000061B9                 pop     rbx
.text:00000000000061BA                 pop     rbp
.text:00000000000061BB                 pop     r12
.text:00000000000061BD                 pop     r13
.text:00000000000061BF                 pop     r14
.text:00000000000061C1                 pop     r15
.text:00000000000061C3                 retn
.text:00000000000061C3 ; ---------------------------------------------------------------------------
.text:00000000000061C4                 align 8
.text:00000000000061C8
.text:00000000000061C8 loc_61C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000061C8                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:00000000000061C8                 mov     r15, [rbx+20h]  ; jumptable 0000000000005F84 case 5
.text:00000000000061CC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000061D3                 mov     edx, 5          ; category
.text:00000000000061D8                 xor     edi, edi        ; domainname
.text:00000000000061DA                 mov     r14, [rbx+18h]
.text:00000000000061DE                 mov     r13, [rbx+10h]
.text:00000000000061E2                 mov     r12, [rbx+8]
.text:00000000000061E6                 mov     rbx, [rbx]
.text:00000000000061E9                 call    _dcgettext
.text:00000000000061EE                 push    r15
.text:00000000000061F0                 jmp     short loc_6196
.text:00000000000061F0 ; ---------------------------------------------------------------------------
.text:00000000000061F2                 align 8
.text:00000000000061F8
.text:00000000000061F8 loc_61F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000061F8                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:00000000000061F8                 mov     r8, [rbx+8]     ; jumptable 0000000000005F84 case 6
.text:00000000000061FC                 mov     r12, [rbx+28h]
.text:0000000000006200                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006207                 mov     r15, [rbx+20h]
.text:000000000000620B                 mov     r14, [rbx+18h]
.text:000000000000620F                 mov     edx, 5          ; category
.text:0000000000006214                 mov     r13, [rbx+10h]
.text:0000000000006218                 xor     edi, edi        ; domainname
.text:000000000000621A                 mov     rbx, [rbx]
.text:000000000000621D                 mov     [rsp+58h+var_58], r8
.text:0000000000006221                 call    _dcgettext
.text:0000000000006226                 sub     rsp, 8
.text:000000000000622A                 mov     r9, r13
.text:000000000000622D                 push    r12
.text:000000000000622F                 push    r15
.text:0000000000006231                 push    r14
.text:0000000000006233
.text:0000000000006233 loc_6233:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006233                 mov     r8, [rsp+78h+var_58]
.text:0000000000006238                 mov     rcx, rbx
.text:000000000000623B                 mov     rdx, rax
.text:000000000000623E                 mov     rdi, rbp
.text:0000000000006241                 mov     esi, 1
.text:0000000000006246                 xor     eax, eax
.text:0000000000006248                 call    ___fprintf_chk
.text:000000000000624D                 add     rsp, 20h
.text:0000000000006251                 add     rsp, 28h
.text:0000000000006255                 pop     rbx
.text:0000000000006256                 pop     rbp
.text:0000000000006257                 pop     r12
.text:0000000000006259                 pop     r13
.text:000000000000625B                 pop     r14
.text:000000000000625D                 pop     r15
.text:000000000000625F                 retn
.text:0000000000006260 ; ---------------------------------------------------------------------------
.text:0000000000006260
.text:0000000000006260 loc_6260:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006260                                         ; DATA XREF: .rodata:jpt_5F84↓o
.text:0000000000006260                 mov     r9, [rbx+10h]   ; jumptable 0000000000005F84 case 7
.text:0000000000006264                 mov     r13, [rbx+30h]
.text:0000000000006268                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000626F                 mov     r12, [rbx+28h]
.text:0000000000006273                 mov     r15, [rbx+20h]
.text:0000000000006277                 mov     edx, 5          ; category
.text:000000000000627C                 mov     r14, [rbx+18h]
.text:0000000000006280                 mov     r8, [rbx+8]
.text:0000000000006284                 xor     edi, edi        ; domainname
.text:0000000000006286                 mov     [rsp+58h+var_50], r9
.text:000000000000628B                 mov     rbx, [rbx]
.text:000000000000628E                 mov     [rsp+58h+var_58], r8
.text:0000000000006292                 call    _dcgettext
.text:0000000000006297                 push    r13
.text:0000000000006299                 push    r12
.text:000000000000629B                 push    r15
.text:000000000000629D                 push    r14
.text:000000000000629F                 mov     r9, [rsp+78h+var_50]
.text:00000000000062A4                 jmp     short loc_6233
.text:00000000000062A4 ; ---------------------------------------------------------------------------
.text:00000000000062A6                 align 10h
.text:00000000000062B0
.text:00000000000062B0 def_5F84:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000062B0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005F84 default case
.text:00000000000062B4                 mov     r9, [rbx+38h]
.text:00000000000062B8                 mov     edx, 5
.text:00000000000062BD                 mov     rax, [rbx+10h]
.text:00000000000062C1                 mov     r8, [rbx+8]
.text:00000000000062C5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000062CC                 mov     r13, [rbx+30h]
.text:00000000000062D0                 mov     r12, [rbx+28h]
.text:00000000000062D4                 mov     r15, [rbx+20h]
.text:00000000000062D8                 mov     r14, [rbx+18h]
.text:00000000000062DC                 mov     [rsp+58h+var_40], r10
.text:00000000000062E1                 mov     [rsp+58h+var_48], r9
.text:00000000000062E6                 mov     [rsp+58h+var_58], rax
.text:00000000000062EA                 mov     [rsp+58h+var_50], r8
.text:00000000000062EF                 mov     rbx, [rbx]
.text:00000000000062F2                 jmp     loc_6082
.text:00000000000062F2 ; } // starts at 5EE0
.text:00000000000062F2 version_etc_arn endp
.text:00000000000062F2
.text:00000000000062F2 ; ---------------------------------------------------------------------------
.text:00000000000062F7                 align 20h
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300 ; Attributes: info_from_lumina
.text:0000000000006300
.text:0000000000006300 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006300                 public version_etc_ar
.text:0000000000006300 version_etc_ar  proc near
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 xor     r9d, r9d
.text:0000000000006303                 cmp     qword ptr [r8], 0
.text:0000000000006307                 jz      short loc_631B
.text:0000000000006309                 nop     dword ptr [rax+00000000h]
.text:0000000000006310
.text:0000000000006310 loc_6310:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006310                 add     r9, 1
.text:0000000000006314                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006319                 jnz     short loc_6310
.text:000000000000631B
.text:000000000000631B loc_631B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000631B                 jmp     version_etc_arn
.text:000000000000631B ; } // starts at 6300
.text:000000000000631B version_etc_ar  endp
.text:000000000000631B
.text:0000000000006320
.text:0000000000006320 ; =============== S U B R O U T I N E =======================================
.text:0000000000006320
.text:0000000000006320 ; Attributes: info_from_lumina
.text:0000000000006320
.text:0000000000006320 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000006320                 public version_etc_va
.text:0000000000006320 version_etc_va  proc near
.text:0000000000006320
.text:0000000000006320 authtab         = qword ptr -68h
.text:0000000000006320 var_10          = qword ptr -10h
.text:0000000000006320
.text:0000000000006320 ; __unwind {
.text:0000000000006320                 sub     rsp, 68h
.text:0000000000006324                 mov     r10, r8
.text:0000000000006327                 xor     r9d, r9d
.text:000000000000632A                 mov     rax, fs:28h
.text:0000000000006333                 mov     [rsp+68h+var_10], rax
.text:0000000000006338                 xor     eax, eax
.text:000000000000633A                 mov     r8, rsp
.text:000000000000633D                 nop     dword ptr [rax]
.text:0000000000006340
.text:0000000000006340 loc_6340:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006340                 mov     eax, [r10]
.text:0000000000006343                 cmp     eax, 2Fh ; '/'
.text:0000000000006346                 ja      short loc_638A
.text:0000000000006348                 mov     r11d, eax
.text:000000000000634B                 add     r11, [r10+10h]
.text:000000000000634F                 add     eax, 8
.text:0000000000006352                 mov     [r10], eax
.text:0000000000006355
.text:0000000000006355 loc_6355:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006355                 mov     rax, [r11]
.text:0000000000006358                 test    rax, rax
.text:000000000000635B                 mov     [r8+r9*8], rax
.text:000000000000635F                 jz      short loc_636B
.text:0000000000006361                 add     r9, 1
.text:0000000000006365                 cmp     r9, 0Ah
.text:0000000000006369                 jnz     short loc_6340
.text:000000000000636B
.text:000000000000636B loc_636B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000636B                 call    version_etc_arn
.text:0000000000006370                 mov     rax, [rsp+68h+var_10]
.text:0000000000006375                 xor     rax, fs:28h
.text:000000000000637E                 jnz     short loc_6385
.text:0000000000006380                 add     rsp, 68h
.text:0000000000006384                 retn
.text:0000000000006385 ; ---------------------------------------------------------------------------
.text:0000000000006385
.text:0000000000006385 loc_6385:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006385                 call    ___stack_chk_fail
.text:000000000000638A ; ---------------------------------------------------------------------------
.text:000000000000638A
.text:000000000000638A loc_638A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000638A                 mov     r11, [r10+8]
.text:000000000000638E                 lea     rax, [r11+8]
.text:0000000000006392                 mov     [r10+8], rax
.text:0000000000006396                 jmp     short loc_6355
.text:0000000000006396 ; } // starts at 6320
.text:0000000000006396 version_etc_va  endp
.text:0000000000006396
.text:0000000000006396 ; ---------------------------------------------------------------------------
.text:0000000000006398                 align 20h
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0 ; Attributes: info_from_lumina
.text:00000000000063A0
.text:00000000000063A0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000063A0                 public version_etc
.text:00000000000063A0 version_etc     proc near               ; CODE XREF: main+23D↑p
.text:00000000000063A0
.text:00000000000063A0 var_C0          = dword ptr -0C0h
.text:00000000000063A0 var_B8          = qword ptr -0B8h
.text:00000000000063A0 var_B0          = qword ptr -0B0h
.text:00000000000063A0 var_A8          = byte ptr -0A8h
.text:00000000000063A0 var_50          = qword ptr -50h
.text:00000000000063A0 var_48          = byte ptr -48h
.text:00000000000063A0 var_28          = qword ptr -28h
.text:00000000000063A0 var_20          = qword ptr -20h
.text:00000000000063A0 arg_0           = byte ptr  8
.text:00000000000063A0
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 push    rbp
.text:00000000000063A1                 push    rbx
.text:00000000000063A2                 mov     r10d, 20h ; ' '
.text:00000000000063A8                 xor     r11d, r11d
.text:00000000000063AB                 sub     rsp, 0B8h
.text:00000000000063B2                 mov     rax, fs:28h
.text:00000000000063BB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000063C0                 xor     eax, eax
.text:00000000000063C2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000063CA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000063D2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000063DA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000063DF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000063E7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000063EF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000063F4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000063FC                 xor     r9d, r9d
.text:00000000000063FF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006404                 mov     rbp, rax
.text:0000000000006407                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006410
.text:0000000000006410 loc_6410:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006410                 cmp     r10d, 2Fh ; '/'
.text:0000000000006414                 ja      short loc_646C
.text:0000000000006416                 mov     eax, r10d
.text:0000000000006419                 mov     r11d, 1
.text:000000000000641F                 add     r10d, 8
.text:0000000000006423                 add     rax, rbp
.text:0000000000006426
.text:0000000000006426 loc_6426:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006426                 mov     rax, [rax]
.text:0000000000006429                 test    rax, rax
.text:000000000000642C                 mov     [r8+r9*8], rax
.text:0000000000006430                 jz      short loc_643C
.text:0000000000006432                 add     r9, 1
.text:0000000000006436                 cmp     r9, 0Ah
.text:000000000000643A                 jnz     short loc_6410
.text:000000000000643C
.text:000000000000643C loc_643C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000643C                 test    r11b, r11b
.text:000000000000643F                 jnz     short loc_6465
.text:0000000000006441
.text:0000000000006441 loc_6441:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006441                 call    version_etc_arn
.text:0000000000006446                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000644B                 xor     rax, fs:28h
.text:0000000000006454                 jnz     short loc_6460
.text:0000000000006456                 add     rsp, 0B8h
.text:000000000000645D                 pop     rbx
.text:000000000000645E                 pop     rbp
.text:000000000000645F                 retn
.text:0000000000006460 ; ---------------------------------------------------------------------------
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006460                 call    ___stack_chk_fail
.text:0000000000006465 ; ---------------------------------------------------------------------------
.text:0000000000006465
.text:0000000000006465 loc_6465:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006465                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000646A                 jmp     short loc_6441
.text:000000000000646C ; ---------------------------------------------------------------------------
.text:000000000000646C
.text:000000000000646C loc_646C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000646C                 mov     rax, rbx
.text:000000000000646F                 add     rbx, 8
.text:0000000000006473                 jmp     short loc_6426
.text:0000000000006473 ; } // starts at 63A0
.text:0000000000006473 version_etc     endp
.text:0000000000006473
.text:0000000000006473 ; ---------------------------------------------------------------------------
.text:0000000000006475                 align 20h
.text:0000000000006480
.text:0000000000006480 ; =============== S U B R O U T I N E =======================================
.text:0000000000006480
.text:0000000000006480 ; Attributes: info_from_lumina
.text:0000000000006480
.text:0000000000006480 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006480                 public emit_bug_reporting_address
.text:0000000000006480 emit_bug_reporting_address proc near
.text:0000000000006480 ; __unwind {
.text:0000000000006480                 push    rbx
.text:0000000000006481                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006488                 mov     edx, 5          ; category
.text:000000000000648D                 xor     edi, edi        ; domainname
.text:000000000000648F                 call    _dcgettext
.text:0000000000006494                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000649B                 mov     rsi, rax
.text:000000000000649E                 mov     edi, 1
.text:00000000000064A3                 xor     eax, eax
.text:00000000000064A5                 call    ___printf_chk
.text:00000000000064AA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000064B1                 mov     edx, 5          ; category
.text:00000000000064B6                 xor     edi, edi        ; domainname
.text:00000000000064B8                 call    _dcgettext
.text:00000000000064BD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000064C4                 lea     rdx, unk_A99D
.text:00000000000064CB                 mov     rsi, rax
.text:00000000000064CE                 mov     edi, 1
.text:00000000000064D3                 xor     eax, eax
.text:00000000000064D5                 call    ___printf_chk
.text:00000000000064DA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000064E1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000064E8                 xor     edi, edi        ; domainname
.text:00000000000064EA                 mov     edx, 5          ; category
.text:00000000000064EF                 call    _dcgettext
.text:00000000000064F4                 mov     rsi, rbx        ; stream
.text:00000000000064F7                 mov     rdi, rax        ; s
.text:00000000000064FA                 pop     rbx
.text:00000000000064FB                 jmp     _fputs_unlocked
.text:00000000000064FB ; } // starts at 6480
.text:00000000000064FB emit_bug_reporting_address endp
.text:00000000000064FB
.text:0000000000006500
.text:0000000000006500 ; =============== S U B R O U T I N E =======================================
.text:0000000000006500
.text:0000000000006500
.text:0000000000006500                 public can_write_any_file
.text:0000000000006500 can_write_any_file proc near            ; CODE XREF: prompt:loc_2CD8↑p
.text:0000000000006500 ; __unwind {
.text:0000000000006500                 cmp     cs:initialized_3064, 0
.text:0000000000006507                 jz      short loc_6518
.text:0000000000006509                 movzx   eax, cs:can_write_3065
.text:0000000000006510                 retn
.text:0000000000006510 ; ---------------------------------------------------------------------------
.text:0000000000006511                 align 8
.text:0000000000006518
.text:0000000000006518 loc_6518:                               ; CODE XREF: can_write_any_file+7↑j
.text:0000000000006518                 sub     rsp, 8
.text:000000000000651C                 call    _geteuid
.text:0000000000006521                 test    eax, eax
.text:0000000000006523                 mov     cs:initialized_3064, 1
.text:000000000000652A                 setz    al
.text:000000000000652D                 mov     cs:can_write_3065, al
.text:0000000000006533                 add     rsp, 8
.text:0000000000006537                 retn
.text:0000000000006537 ; } // starts at 6500
.text:0000000000006537 can_write_any_file endp
.text:0000000000006537
.text:0000000000006537 ; ---------------------------------------------------------------------------
.text:0000000000006538                 align 20h
.text:0000000000006540
.text:0000000000006540 ; =============== S U B R O U T I N E =======================================
.text:0000000000006540
.text:0000000000006540
.text:0000000000006540                 public xmalloc
.text:0000000000006540 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000006540                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000006540 ; __unwind {
.text:0000000000006540                 push    rbx
.text:0000000000006541                 mov     rbx, rdi
.text:0000000000006544                 call    _malloc
.text:0000000000006549                 test    rax, rax
.text:000000000000654C                 jnz     short loc_6553
.text:000000000000654E                 test    rbx, rbx
.text:0000000000006551                 jnz     short loc_6555
.text:0000000000006553
.text:0000000000006553 loc_6553:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006553                 pop     rbx
.text:0000000000006554                 retn
.text:0000000000006555 ; ---------------------------------------------------------------------------
.text:0000000000006555
.text:0000000000006555 loc_6555:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006555                 call    xalloc_die
.text:0000000000006555 ; } // starts at 6540
.text:0000000000006555 xmalloc         endp
.text:0000000000006555
.text:0000000000006555 ; ---------------------------------------------------------------------------
.text:000000000000655A                 align 20h
.text:0000000000006560
.text:0000000000006560 ; =============== S U B R O U T I N E =======================================
.text:0000000000006560
.text:0000000000006560 ; Attributes: info_from_lumina
.text:0000000000006560
.text:0000000000006560 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006560                 public xnmalloc
.text:0000000000006560 xnmalloc        proc near
.text:0000000000006560 ; __unwind {
.text:0000000000006560                 mov     rax, rdi
.text:0000000000006563                 mul     rsi
.text:0000000000006566                 mov     rdi, rax
.text:0000000000006569                 seto    al
.text:000000000000656C                 test    rdi, rdi
.text:000000000000656F                 js      short loc_657B
.text:0000000000006571                 movzx   eax, al
.text:0000000000006574                 test    rax, rax
.text:0000000000006577                 jnz     short loc_657B
.text:0000000000006579                 jmp     short xmalloc
.text:000000000000657B ; ---------------------------------------------------------------------------
.text:000000000000657B
.text:000000000000657B loc_657B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000657B                                         ; xnmalloc+17↑j
.text:000000000000657B                 sub     rsp, 8
.text:000000000000657F                 call    xalloc_die
.text:000000000000657F ; } // starts at 6560
.text:000000000000657F xnmalloc        endp
.text:000000000000657F
.text:000000000000657F ; ---------------------------------------------------------------------------
.text:0000000000006584                 align 10h
.text:0000000000006590
.text:0000000000006590 ; =============== S U B R O U T I N E =======================================
.text:0000000000006590
.text:0000000000006590
.text:0000000000006590                 public xcharalloc
.text:0000000000006590 xcharalloc      proc near
.text:0000000000006590 ; __unwind {
.text:0000000000006590                 jmp     short xmalloc
.text:0000000000006590 ; } // starts at 6590
.text:0000000000006590 xcharalloc      endp
.text:0000000000006590
.text:0000000000006590 ; ---------------------------------------------------------------------------
.text:0000000000006592                 align 20h
.text:00000000000065A0
.text:00000000000065A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065A0
.text:00000000000065A0 ; Attributes: info_from_lumina
.text:00000000000065A0
.text:00000000000065A0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000065A0                 public xrealloc
.text:00000000000065A0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000065A0                                         ; quotearg_n_options+182↑p ...
.text:00000000000065A0 ; __unwind {
.text:00000000000065A0                 test    rsi, rsi
.text:00000000000065A3                 push    rbx
.text:00000000000065A4                 mov     rbx, rsi
.text:00000000000065A7                 jnz     short loc_65AE
.text:00000000000065A9                 test    rdi, rdi
.text:00000000000065AC                 jnz     short loc_65C8
.text:00000000000065AE
.text:00000000000065AE loc_65AE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000065AE                 mov     rsi, rbx        ; size
.text:00000000000065B1                 call    _realloc
.text:00000000000065B6                 test    rax, rax
.text:00000000000065B9                 jnz     short loc_65C0
.text:00000000000065BB                 test    rbx, rbx
.text:00000000000065BE                 jnz     short loc_65D1
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000065C0                 pop     rbx
.text:00000000000065C1                 retn
.text:00000000000065C1 ; ---------------------------------------------------------------------------
.text:00000000000065C2                 align 8
.text:00000000000065C8
.text:00000000000065C8 loc_65C8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000065C8                 call    free
.text:00000000000065CD                 xor     eax, eax
.text:00000000000065CF                 pop     rbx
.text:00000000000065D0                 retn
.text:00000000000065D1 ; ---------------------------------------------------------------------------
.text:00000000000065D1
.text:00000000000065D1 loc_65D1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000065D1                 call    xalloc_die
.text:00000000000065D1 ; } // starts at 65A0
.text:00000000000065D1 xrealloc        endp
.text:00000000000065D1
.text:00000000000065D1 ; ---------------------------------------------------------------------------
.text:00000000000065D6                 align 20h
.text:00000000000065E0
.text:00000000000065E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065E0
.text:00000000000065E0 ; Attributes: info_from_lumina
.text:00000000000065E0
.text:00000000000065E0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000065E0                 public xnrealloc
.text:00000000000065E0 xnrealloc       proc near
.text:00000000000065E0 ; __unwind {
.text:00000000000065E0                 mov     rax, rsi
.text:00000000000065E3                 mul     rdx
.text:00000000000065E6                 mov     rsi, rax
.text:00000000000065E9                 seto    al
.text:00000000000065EC                 test    rsi, rsi
.text:00000000000065EF                 js      short loc_65FB
.text:00000000000065F1                 movzx   eax, al
.text:00000000000065F4                 test    rax, rax
.text:00000000000065F7                 jnz     short loc_65FB
.text:00000000000065F9                 jmp     short xrealloc
.text:00000000000065FB ; ---------------------------------------------------------------------------
.text:00000000000065FB
.text:00000000000065FB loc_65FB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000065FB                                         ; xnrealloc+17↑j
.text:00000000000065FB                 sub     rsp, 8
.text:00000000000065FF                 call    xalloc_die
.text:00000000000065FF ; } // starts at 65E0
.text:00000000000065FF xnrealloc       endp
.text:00000000000065FF
.text:00000000000065FF ; ---------------------------------------------------------------------------
.text:0000000000006604                 align 10h
.text:0000000000006610
.text:0000000000006610 ; =============== S U B R O U T I N E =======================================
.text:0000000000006610
.text:0000000000006610 ; Attributes: info_from_lumina
.text:0000000000006610
.text:0000000000006610 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006610                 public x2nrealloc
.text:0000000000006610 x2nrealloc      proc near
.text:0000000000006610 ; __unwind {
.text:0000000000006610                 test    rdi, rdi
.text:0000000000006613                 mov     r9, rdx
.text:0000000000006616                 mov     rcx, [rsi]
.text:0000000000006619                 jz      short loc_6650
.text:000000000000661B                 xor     edx, edx
.text:000000000000661D                 mov     rax, 5555555555555554h
.text:0000000000006627                 div     r9
.text:000000000000662A                 cmp     rax, rcx
.text:000000000000662D                 jbe     short loc_666B
.text:000000000000662F                 mov     rax, rcx
.text:0000000000006632                 shr     rax, 1
.text:0000000000006635                 lea     rcx, [rax+rcx+1]
.text:000000000000663A
.text:000000000000663A loc_663A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000663A                 mov     [rsi], rcx
.text:000000000000663D                 imul    rcx, r9
.text:0000000000006641                 mov     rsi, rcx
.text:0000000000006644                 jmp     xrealloc
.text:0000000000006644 ; ---------------------------------------------------------------------------
.text:0000000000006649                 align 10h
.text:0000000000006650
.text:0000000000006650 loc_6650:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006650                 test    rcx, rcx
.text:0000000000006653                 jz      short loc_6678
.text:0000000000006655
.text:0000000000006655 loc_6655:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006655                 mov     rax, rcx
.text:0000000000006658                 mul     r9
.text:000000000000665B                 seto    dl
.text:000000000000665E                 test    rax, rax
.text:0000000000006661                 movzx   edx, dl
.text:0000000000006664                 js      short loc_666B
.text:0000000000006666                 test    rdx, rdx
.text:0000000000006669                 jz      short loc_663A
.text:000000000000666B
.text:000000000000666B loc_666B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000666B                                         ; x2nrealloc+54↑j
.text:000000000000666B                 sub     rsp, 8
.text:000000000000666F                 call    xalloc_die
.text:000000000000666F ; ---------------------------------------------------------------------------
.text:0000000000006674                 align 8
.text:0000000000006678
.text:0000000000006678 loc_6678:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006678                 xor     edx, edx
.text:000000000000667A                 mov     eax, 80h
.text:000000000000667F                 xor     r8d, r8d
.text:0000000000006682                 div     r9
.text:0000000000006685                 test    rax, rax
.text:0000000000006688                 setz    r8b
.text:000000000000668C                 lea     rcx, [r8+rax]
.text:0000000000006690                 jmp     short loc_6655
.text:0000000000006690 ; } // starts at 6610
.text:0000000000006690 x2nrealloc      endp
.text:0000000000006690
.text:0000000000006690 ; ---------------------------------------------------------------------------
.text:0000000000006692                 align 20h
.text:00000000000066A0
.text:00000000000066A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066A0
.text:00000000000066A0 ; Attributes: info_from_lumina
.text:00000000000066A0
.text:00000000000066A0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000066A0                 public x2realloc
.text:00000000000066A0 x2realloc       proc near
.text:00000000000066A0 ; __unwind {
.text:00000000000066A0                 test    rdi, rdi
.text:00000000000066A3                 mov     rax, [rsi]
.text:00000000000066A6                 jz      short loc_66D0
.text:00000000000066A8                 mov     rdx, 5555555555555553h
.text:00000000000066B2                 cmp     rax, rdx
.text:00000000000066B5                 ja      short loc_66E1
.text:00000000000066B7                 mov     rdx, rax
.text:00000000000066BA                 shr     rdx, 1
.text:00000000000066BD                 lea     rax, [rdx+rax+1]
.text:00000000000066C2
.text:00000000000066C2 loc_66C2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000066C2                 mov     [rsi], rax
.text:00000000000066C5                 mov     rsi, rax
.text:00000000000066C8                 jmp     xrealloc
.text:00000000000066C8 ; ---------------------------------------------------------------------------
.text:00000000000066CD                 align 10h
.text:00000000000066D0
.text:00000000000066D0 loc_66D0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000066D0                 test    rax, rax
.text:00000000000066D3                 mov     edx, 80h
.text:00000000000066D8                 cmovz   rax, rdx
.text:00000000000066DC                 test    rax, rax
.text:00000000000066DF                 jns     short loc_66C2
.text:00000000000066E1
.text:00000000000066E1 loc_66E1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000066E1                 sub     rsp, 8
.text:00000000000066E5                 call    xalloc_die
.text:00000000000066E5 ; } // starts at 66A0
.text:00000000000066E5 x2realloc       endp
.text:00000000000066E5
.text:00000000000066E5 ; ---------------------------------------------------------------------------
.text:00000000000066EA                 align 10h
.text:00000000000066F0
.text:00000000000066F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066F0
.text:00000000000066F0
.text:00000000000066F0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000066F0                 public xzalloc
.text:00000000000066F0 xzalloc         proc near
.text:00000000000066F0 ; __unwind {
.text:00000000000066F0                 push    rbx
.text:00000000000066F1                 mov     rbx, rdi
.text:00000000000066F4                 call    xmalloc
.text:00000000000066F9                 mov     rdx, rbx        ; n
.text:00000000000066FC                 xor     esi, esi        ; c
.text:00000000000066FE                 mov     rdi, rax        ; s
.text:0000000000006701                 pop     rbx
.text:0000000000006702                 jmp     _memset
.text:0000000000006702 ; } // starts at 66F0
.text:0000000000006702 xzalloc         endp
.text:0000000000006702
.text:0000000000006702 ; ---------------------------------------------------------------------------
.text:0000000000006707                 align 10h
.text:0000000000006710
.text:0000000000006710 ; =============== S U B R O U T I N E =======================================
.text:0000000000006710
.text:0000000000006710 ; Attributes: info_from_lumina
.text:0000000000006710
.text:0000000000006710 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006710                 public xcalloc
.text:0000000000006710 xcalloc         proc near
.text:0000000000006710 ; __unwind {
.text:0000000000006710                 mov     rax, rdi
.text:0000000000006713                 sub     rsp, 8
.text:0000000000006717                 mul     rsi
.text:000000000000671A                 seto    dl
.text:000000000000671D                 test    rax, rax
.text:0000000000006720                 js      short loc_6739
.text:0000000000006722                 movzx   edx, dl
.text:0000000000006725                 test    rdx, rdx
.text:0000000000006728                 jnz     short loc_6739
.text:000000000000672A                 call    _calloc
.text:000000000000672F                 test    rax, rax
.text:0000000000006732                 jz      short loc_6739
.text:0000000000006734                 add     rsp, 8
.text:0000000000006738                 retn
.text:0000000000006739 ; ---------------------------------------------------------------------------
.text:0000000000006739
.text:0000000000006739 loc_6739:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006739                                         ; xcalloc+18↑j ...
.text:0000000000006739                 call    xalloc_die
.text:0000000000006739 ; } // starts at 6710
.text:0000000000006739 xcalloc         endp
.text:0000000000006739
.text:0000000000006739 ; ---------------------------------------------------------------------------
.text:000000000000673E                 align 20h
.text:0000000000006740
.text:0000000000006740 ; =============== S U B R O U T I N E =======================================
.text:0000000000006740
.text:0000000000006740 ; Attributes: info_from_lumina
.text:0000000000006740
.text:0000000000006740 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006740                 public xmemdup
.text:0000000000006740 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000006740                                         ; xstrdup+11↓j
.text:0000000000006740 ; __unwind {
.text:0000000000006740                 push    rbp
.text:0000000000006741                 push    rbx
.text:0000000000006742                 mov     rbp, rdi
.text:0000000000006745                 mov     rdi, rsi
.text:0000000000006748                 mov     rbx, rsi
.text:000000000000674B                 sub     rsp, 8
.text:000000000000674F                 call    xmalloc
.text:0000000000006754                 add     rsp, 8
.text:0000000000006758                 mov     rdx, rbx        ; n
.text:000000000000675B                 mov     rsi, rbp        ; src
.text:000000000000675E                 pop     rbx
.text:000000000000675F                 pop     rbp
.text:0000000000006760                 mov     rdi, rax        ; dest
.text:0000000000006763                 jmp     _memcpy
.text:0000000000006763 ; } // starts at 6740
.text:0000000000006763 xmemdup         endp
.text:0000000000006763
.text:0000000000006763 ; ---------------------------------------------------------------------------
.text:0000000000006768                 align 10h
.text:0000000000006770
.text:0000000000006770 ; =============== S U B R O U T I N E =======================================
.text:0000000000006770
.text:0000000000006770
.text:0000000000006770 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006770                 public xstrdup
.text:0000000000006770 xstrdup         proc near
.text:0000000000006770 ; __unwind {
.text:0000000000006770                 push    rbx
.text:0000000000006771                 mov     rbx, rdi
.text:0000000000006774                 call    _strlen
.text:0000000000006779                 mov     rdi, rbx        ; src
.text:000000000000677C                 lea     rsi, [rax+1]    ; n
.text:0000000000006780                 pop     rbx
.text:0000000000006781                 jmp     short xmemdup
.text:0000000000006781 ; } // starts at 6770
.text:0000000000006781 xstrdup         endp
.text:0000000000006781
.text:0000000000006781 ; ---------------------------------------------------------------------------
.text:0000000000006783                 align 10h
.text:0000000000006790
.text:0000000000006790 ; =============== S U B R O U T I N E =======================================
.text:0000000000006790
.text:0000000000006790 ; Attributes: noreturn info_from_lumina
.text:0000000000006790
.text:0000000000006790 ; void __cdecl xalloc_die()
.text:0000000000006790                 public xalloc_die
.text:0000000000006790 xalloc_die      proc near               ; CODE XREF: file_name_concat:loc_4023↑p
.text:0000000000006790                                         ; quotearg_n_options:loc_56A6↑p ...
.text:0000000000006790 ; __unwind {
.text:0000000000006790                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006797                 sub     rsp, 8
.text:000000000000679B                 mov     edx, 5          ; category
.text:00000000000067A0                 xor     edi, edi        ; domainname
.text:00000000000067A2                 call    _dcgettext
.text:00000000000067A7                 mov     edi, cs:exit_failure ; status
.text:00000000000067AD                 lea     rdx, aS_0+2     ; format
.text:00000000000067B4                 mov     rcx, rax
.text:00000000000067B7                 xor     esi, esi        ; errnum
.text:00000000000067B9                 xor     eax, eax
.text:00000000000067BB                 call    _error
.text:00000000000067C0                 call    _abort
.text:00000000000067C0 ; } // starts at 6790
.text:00000000000067C0 xalloc_die      endp
.text:00000000000067C0
.text:00000000000067C0 ; ---------------------------------------------------------------------------
.text:00000000000067C5                 align 10h
.text:00000000000067D0
.text:00000000000067D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067D0
.text:00000000000067D0
.text:00000000000067D0                 public xfts_open
.text:00000000000067D0 xfts_open       proc near               ; CODE XREF: rm+4E↑p
.text:00000000000067D0 ; __unwind {
.text:00000000000067D0                 sub     rsp, 8
.text:00000000000067D4                 or      esi, 200h
.text:00000000000067DA                 call    rpl_fts_open
.text:00000000000067DF                 test    rax, rax
.text:00000000000067E2                 jz      short loc_67F0
.text:00000000000067E4                 add     rsp, 8
.text:00000000000067E8                 retn
.text:00000000000067E8 ; ---------------------------------------------------------------------------
.text:00000000000067E9                 align 10h
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: xfts_open+12↑j
.text:00000000000067F0                 call    ___errno_location
.text:00000000000067F5                 cmp     dword ptr [rax], 16h
.text:00000000000067F8                 jz      short loc_6800
.text:00000000000067FA                 call    xalloc_die
.text:00000000000067FA ; ---------------------------------------------------------------------------
.text:00000000000067FF                 align 20h
.text:0000000000006800
.text:0000000000006800 loc_6800:                               ; CODE XREF: xfts_open+28↑j
.text:0000000000006800                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:0000000000006807                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xfts.c"
.text:000000000000680E                 lea     rdi, aErrnoEinval ; "errno != EINVAL"
.text:0000000000006815                 mov     edx, 29h ; ')'  ; line
.text:000000000000681A                 call    ___assert_fail
.text:000000000000681A ; } // starts at 67D0
.text:000000000000681A xfts_open       endp
.text:000000000000681A
.text:000000000000681A ; ---------------------------------------------------------------------------
.text:000000000000681F                 align 20h
.text:0000000000006820
.text:0000000000006820 ; =============== S U B R O U T I N E =======================================
.text:0000000000006820
.text:0000000000006820
.text:0000000000006820                 public cycle_warning_required
.text:0000000000006820 cycle_warning_required proc near
.text:0000000000006820 ; __unwind {
.text:0000000000006820                 mov     edx, [rdi+48h]
.text:0000000000006823                 mov     eax, 1
.text:0000000000006828                 and     edx, 11h
.text:000000000000682B                 cmp     edx, 10h
.text:000000000000682E                 jz      short locret_6837
.text:0000000000006830                 xor     eax, eax
.text:0000000000006832                 cmp     edx, 11h
.text:0000000000006835                 jz      short loc_6840
.text:0000000000006837
.text:0000000000006837 locret_6837:                            ; CODE XREF: cycle_warning_required+E↑j
.text:0000000000006837                 rep retn
.text:0000000000006837 ; ---------------------------------------------------------------------------
.text:0000000000006839                 align 20h
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: cycle_warning_required+15↑j
.text:0000000000006840                 cmp     qword ptr [rsi+58h], 0
.text:0000000000006845                 setnz   al
.text:0000000000006848                 retn
.text:0000000000006848 ; } // starts at 6820
.text:0000000000006848 cycle_warning_required endp
.text:0000000000006848
.text:0000000000006848 ; ---------------------------------------------------------------------------
.text:0000000000006849                 align 10h
.text:0000000000006850
.text:0000000000006850 ; =============== S U B R O U T I N E =======================================
.text:0000000000006850
.text:0000000000006850
.text:0000000000006850                 public yesno
.text:0000000000006850 yesno           proc near               ; CODE XREF: main+391↑p
.text:0000000000006850                                         ; prompt:loc_2DD1↑p
.text:0000000000006850
.text:0000000000006850 lineptr         = qword ptr -20h
.text:0000000000006850 n               = qword ptr -18h
.text:0000000000006850 var_10          = qword ptr -10h
.text:0000000000006850
.text:0000000000006850 ; __unwind {
.text:0000000000006850                 push    rbx
.text:0000000000006851                 mov     edx, 0Ah        ; delimiter
.text:0000000000006856                 xor     ebx, ebx
.text:0000000000006858                 sub     rsp, 20h
.text:000000000000685C                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000006863                 lea     rsi, [rsp+28h+n] ; n
.text:0000000000006868                 lea     rdi, [rsp+28h+lineptr] ; lineptr
.text:000000000000686D                 mov     [rsp+28h+lineptr], 0
.text:0000000000006876                 mov     rax, fs:28h
.text:000000000000687F                 mov     [rsp+28h+var_10], rax
.text:0000000000006884                 xor     eax, eax
.text:0000000000006886                 mov     [rsp+28h+n], 0
.text:000000000000688F                 call    ___getdelim
.text:0000000000006894                 test    rax, rax
.text:0000000000006897                 jle     short loc_68B2
.text:0000000000006899                 mov     rdi, [rsp+28h+lineptr] ; response
.text:000000000000689E                 lea     rax, [rdi+rax-1]
.text:00000000000068A3                 cmp     byte ptr [rax], 0Ah
.text:00000000000068A6                 jz      short loc_68D8
.text:00000000000068A8
.text:00000000000068A8 loc_68A8:                               ; CODE XREF: yesno+90↓j
.text:00000000000068A8                 call    _rpmatch
.text:00000000000068AD                 test    eax, eax
.text:00000000000068AF                 setnle  bl
.text:00000000000068B2
.text:00000000000068B2 loc_68B2:                               ; CODE XREF: yesno+47↑j
.text:00000000000068B2                 mov     rdi, [rsp+28h+lineptr] ; ptr
.text:00000000000068B7                 call    free
.text:00000000000068BC                 mov     rdx, [rsp+28h+var_10]
.text:00000000000068C1                 xor     rdx, fs:28h
.text:00000000000068CA                 mov     eax, ebx
.text:00000000000068CC                 jnz     short loc_68E2
.text:00000000000068CE                 add     rsp, 20h
.text:00000000000068D2                 pop     rbx
.text:00000000000068D3                 retn
.text:00000000000068D3 ; ---------------------------------------------------------------------------
.text:00000000000068D4                 align 8
.text:00000000000068D8
.text:00000000000068D8 loc_68D8:                               ; CODE XREF: yesno+56↑j
.text:00000000000068D8                 mov     byte ptr [rax], 0
.text:00000000000068DB                 mov     rdi, [rsp+28h+lineptr]
.text:00000000000068E0                 jmp     short loc_68A8
.text:00000000000068E2 ; ---------------------------------------------------------------------------
.text:00000000000068E2
.text:00000000000068E2 loc_68E2:                               ; CODE XREF: yesno+7C↑j
.text:00000000000068E2                 call    ___stack_chk_fail
.text:00000000000068E2 ; } // starts at 6850
.text:00000000000068E2 yesno           endp
.text:00000000000068E2
.text:00000000000068E2 ; ---------------------------------------------------------------------------
.text:00000000000068E7                 align 10h
.text:00000000000068F0
.text:00000000000068F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068F0
.text:00000000000068F0 ; Attributes: info_from_lumina
.text:00000000000068F0
.text:00000000000068F0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000068F0                 public rpl_fflush
.text:00000000000068F0 rpl_fflush      proc near               ; CODE XREF: close_stdin:loc_3CC8↑p
.text:00000000000068F0                                         ; rpl_fclose+1F↓p
.text:00000000000068F0 ; __unwind {
.text:00000000000068F0                 test    rdi, rdi
.text:00000000000068F3                 push    rbx
.text:00000000000068F4                 mov     rbx, rdi
.text:00000000000068F7                 jz      short loc_690A
.text:00000000000068F9                 call    ___freading
.text:00000000000068FE                 test    eax, eax
.text:0000000000006900                 jz      short loc_690A
.text:0000000000006902                 test    dword ptr [rbx], 100h
.text:0000000000006908                 jnz     short loc_6918
.text:000000000000690A
.text:000000000000690A loc_690A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000690A                                         ; rpl_fflush+10↑j
.text:000000000000690A                 mov     rdi, rbx        ; stream
.text:000000000000690D                 pop     rbx
.text:000000000000690E                 jmp     _fflush
.text:000000000000690E ; ---------------------------------------------------------------------------
.text:0000000000006913                 align 8
.text:0000000000006918
.text:0000000000006918 loc_6918:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006918                 mov     rdi, rbx
.text:000000000000691B                 mov     edx, 1
.text:0000000000006920                 xor     esi, esi
.text:0000000000006922                 call    rpl_fseeko
.text:0000000000006927                 mov     rdi, rbx        ; stream
.text:000000000000692A                 pop     rbx
.text:000000000000692B                 jmp     _fflush
.text:000000000000692B ; } // starts at 68F0
.text:000000000000692B rpl_fflush      endp
.text:000000000000692B
.text:0000000000006930
.text:0000000000006930 ; =============== S U B R O U T I N E =======================================
.text:0000000000006930
.text:0000000000006930
.text:0000000000006930                 public freadahead
.text:0000000000006930 freadahead      proc near               ; CODE XREF: close_stdin+E↑p
.text:0000000000006930 ; __unwind {
.text:0000000000006930                 xor     eax, eax
.text:0000000000006932                 mov     rcx, [rdi+20h]
.text:0000000000006936                 cmp     [rdi+28h], rcx
.text:000000000000693A                 ja      short locret_6957
.text:000000000000693C                 mov     rax, [rdi+10h]
.text:0000000000006940                 sub     rax, [rdi+8]
.text:0000000000006944                 test    dword ptr [rdi], 100h
.text:000000000000694A                 jz      short locret_6957
.text:000000000000694C                 mov     rdx, [rdi+58h]
.text:0000000000006950                 sub     rdx, [rdi+48h]
.text:0000000000006954                 add     rax, rdx
.text:0000000000006957
.text:0000000000006957 locret_6957:                            ; CODE XREF: freadahead+A↑j
.text:0000000000006957                                         ; freadahead+1A↑j
.text:0000000000006957                 rep retn
.text:0000000000006957 ; } // starts at 6930
.text:0000000000006957 freadahead      endp
.text:0000000000006957
.text:0000000000006957 ; ---------------------------------------------------------------------------
.text:0000000000006959                 align 20h
.text:0000000000006960
.text:0000000000006960 ; =============== S U B R O U T I N E =======================================
.text:0000000000006960
.text:0000000000006960 ; Attributes: info_from_lumina
.text:0000000000006960
.text:0000000000006960 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006960                 public rpl_fseeko
.text:0000000000006960 rpl_fseeko      proc near               ; CODE XREF: close_stdin+C2↑p
.text:0000000000006960                                         ; rpl_fflush+32↑p
.text:0000000000006960 ; __unwind {
.text:0000000000006960                 mov     rax, [rdi+8]
.text:0000000000006964                 cmp     [rdi+10h], rax
.text:0000000000006968                 jz      short loc_6970
.text:000000000000696A
.text:000000000000696A loc_696A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000696A                                         ; rpl_fseeko+1F↓j
.text:000000000000696A                 jmp     _fseeko
.text:000000000000696A ; ---------------------------------------------------------------------------
.text:000000000000696F                 align 10h
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006970                 mov     rax, [rdi+20h]
.text:0000000000006974                 cmp     [rdi+28h], rax
.text:0000000000006978                 jnz     short loc_696A
.text:000000000000697A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000697F                 jnz     short loc_696A
.text:0000000000006981                 push    r12
.text:0000000000006983                 push    rbp
.text:0000000000006984                 mov     r12d, edx
.text:0000000000006987                 push    rbx
.text:0000000000006988                 mov     rbp, rsi
.text:000000000000698B                 mov     rbx, rdi
.text:000000000000698E                 call    _fileno
.text:0000000000006993                 mov     edx, r12d       ; whence
.text:0000000000006996                 mov     rsi, rbp        ; offset
.text:0000000000006999                 mov     edi, eax        ; fd
.text:000000000000699B                 call    _lseek
.text:00000000000069A0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000069A4                 jz      short loc_69B2
.text:00000000000069A6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000069A9                 mov     [rbx+90h], rax
.text:00000000000069B0                 xor     eax, eax
.text:00000000000069B2
.text:00000000000069B2 loc_69B2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000069B2                 pop     rbx
.text:00000000000069B3                 pop     rbp
.text:00000000000069B4                 pop     r12
.text:00000000000069B6                 retn
.text:00000000000069B6 ; } // starts at 6960
.text:00000000000069B6 rpl_fseeko      endp
.text:00000000000069B6
.text:00000000000069B6 ; ---------------------------------------------------------------------------
.text:00000000000069B7                 align 20h
.text:00000000000069C0
.text:00000000000069C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069C0
.text:00000000000069C0
.text:00000000000069C0 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:00000000000069C0 ; __unwind {
.text:00000000000069C0                 xor     eax, eax
.text:00000000000069C2                 mov     rdx, [rsi+8]
.text:00000000000069C6                 cmp     [rdi+8], rdx
.text:00000000000069CA                 jz      short loc_69D0
.text:00000000000069CC                 rep retn
.text:00000000000069CC ; ---------------------------------------------------------------------------
.text:00000000000069CE                 align 10h
.text:00000000000069D0
.text:00000000000069D0 loc_69D0:                               ; CODE XREF: AD_compare+A↑j
.text:00000000000069D0                 mov     rax, [rsi]
.text:00000000000069D3                 cmp     [rdi], rax
.text:00000000000069D6                 setz    al
.text:00000000000069D9                 retn
.text:00000000000069D9 ; } // starts at 69C0
.text:00000000000069D9 AD_compare      endp
.text:00000000000069D9
.text:00000000000069D9 ; ---------------------------------------------------------------------------
.text:00000000000069DA                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0
.text:00000000000069E0 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 mov     rax, [rdi+8]
.text:00000000000069E4                 xor     edx, edx
.text:00000000000069E6                 div     rsi
.text:00000000000069E9                 mov     rax, rdx
.text:00000000000069EC                 retn
.text:00000000000069EC ; } // starts at 69E0
.text:00000000000069EC AD_hash         endp
.text:00000000000069EC
.text:00000000000069EC ; ---------------------------------------------------------------------------
.text:00000000000069ED                 align 10h
.text:00000000000069F0
.text:00000000000069F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069F0
.text:00000000000069F0
.text:00000000000069F0 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:00000000000069F0 ; __unwind {
.text:00000000000069F0                 mov     rax, [rdi]
.text:00000000000069F3                 xor     edx, edx
.text:00000000000069F5                 div     rsi
.text:00000000000069F8                 mov     rax, rdx
.text:00000000000069FB                 retn
.text:00000000000069FB ; } // starts at 69F0
.text:00000000000069FB dev_type_hash   endp
.text:00000000000069FB
.text:00000000000069FB ; ---------------------------------------------------------------------------
.text:00000000000069FC                 align 20h
.text:0000000000006A00
.text:0000000000006A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A00
.text:0000000000006A00
.text:0000000000006A00 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:0000000000006A00 ; __unwind {
.text:0000000000006A00                 mov     rax, [rsi]
.text:0000000000006A03                 cmp     [rdi], rax
.text:0000000000006A06                 setz    al
.text:0000000000006A09                 retn
.text:0000000000006A09 ; } // starts at 6A00
.text:0000000000006A09 dev_type_compare endp
.text:0000000000006A09
.text:0000000000006A09 ; ---------------------------------------------------------------------------
.text:0000000000006A0A                 align 10h
.text:0000000000006A10
.text:0000000000006A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A10
.text:0000000000006A10
.text:0000000000006A10 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_7DB8↓o
.text:0000000000006A10 ; __unwind {
.text:0000000000006A10                 mov     rdx, [rdi]
.text:0000000000006A13                 mov     rax, [rsi]
.text:0000000000006A16                 mov     rax, [rax+80h]
.text:0000000000006A1D                 cmp     [rdx+80h], rax
.text:0000000000006A24                 jb      short loc_6A30
.text:0000000000006A26                 setnbe  al
.text:0000000000006A29                 movzx   eax, al
.text:0000000000006A2C                 retn
.text:0000000000006A2C ; ---------------------------------------------------------------------------
.text:0000000000006A2D                 align 10h
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: fts_compare_ino+14↑j
.text:0000000000006A30                 mov     eax, 0FFFFFFFFh
.text:0000000000006A35                 retn
.text:0000000000006A35 ; } // starts at 6A10
.text:0000000000006A35 fts_compare_ino endp
.text:0000000000006A35
.text:0000000000006A35 ; ---------------------------------------------------------------------------
.text:0000000000006A36                 align 20h
.text:0000000000006A40
.text:0000000000006A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A40
.text:0000000000006A40
.text:0000000000006A40 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:0000000000006A40                                         ; fts_build+607↓p ...
.text:0000000000006A40 ; __unwind {
.text:0000000000006A40                 push    r12
.text:0000000000006A42                 push    rbp
.text:0000000000006A43                 mov     rbp, rsi
.text:0000000000006A46                 push    rbx
.text:0000000000006A47                 cmp     qword ptr [rbp+58h], 0
.text:0000000000006A4C                 lea     rbx, [rsi+78h]
.text:0000000000006A50                 mov     r12, rdi
.text:0000000000006A53                 mov     eax, [rdi+48h]
.text:0000000000006A56                 mov     rsi, [rsi+30h]  ; filename
.text:0000000000006A5A                 jnz     short loc_6AC0
.text:0000000000006A5C                 test    al, 1
.text:0000000000006A5E                 jz      short loc_6AC0
.text:0000000000006A60
.text:0000000000006A60 loc_6A60:                               ; CODE XREF: fts_stat+82↓j
.text:0000000000006A60                                         ; fts_stat+86↓j
.text:0000000000006A60                 mov     rdx, rbx        ; stat_buf
.text:0000000000006A63                 mov     edi, 1          ; ver
.text:0000000000006A68                 call    ___xstat
.text:0000000000006A6D                 test    eax, eax
.text:0000000000006A6F                 jz      short loc_6AEB
.text:0000000000006A71                 call    ___errno_location
.text:0000000000006A76                 mov     r12, rax
.text:0000000000006A79                 mov     eax, [rax]
.text:0000000000006A7B                 cmp     eax, 2
.text:0000000000006A7E                 jz      loc_6B90
.text:0000000000006A84
.text:0000000000006A84 loc_6A84:                               ; CODE XREF: fts_stat+147↓j
.text:0000000000006A84                                         ; fts_stat+169↓j
.text:0000000000006A84                 lea     rdi, [rbx+8]
.text:0000000000006A88                 mov     [rbp+40h], eax
.text:0000000000006A8B                 mov     qword ptr [rbp+78h], 0
.text:0000000000006A93                 mov     qword ptr [rbx+88h], 0
.text:0000000000006A9E                 xor     eax, eax
.text:0000000000006AA0                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000006AA4                 sub     rbx, rdi
.text:0000000000006AA7                 lea     ecx, [rbx+90h]
.text:0000000000006AAD                 shr     ecx, 3
.text:0000000000006AB0                 rep stosq
.text:0000000000006AB3                 mov     eax, 0Ah
.text:0000000000006AB8
.text:0000000000006AB8 loc_6AB8:                               ; CODE XREF: fts_stat+116↓j
.text:0000000000006AB8                                         ; fts_stat+136↓j ...
.text:0000000000006AB8                 pop     rbx
.text:0000000000006AB9                 pop     rbp
.text:0000000000006ABA                 pop     r12
.text:0000000000006ABC                 retn
.text:0000000000006ABC ; ---------------------------------------------------------------------------
.text:0000000000006ABD                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 loc_6AC0:                               ; CODE XREF: fts_stat+1A↑j
.text:0000000000006AC0                                         ; fts_stat+1E↑j
.text:0000000000006AC0                 test    al, 2
.text:0000000000006AC2                 jnz     short loc_6A60
.text:0000000000006AC4                 test    dl, dl
.text:0000000000006AC6                 jnz     short loc_6A60
.text:0000000000006AC8                 mov     rdx, rsi        ; filename
.text:0000000000006ACB                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000006AD0                 mov     r8d, 100h       ; flag
.text:0000000000006AD6                 mov     rcx, rbx        ; stat_buf
.text:0000000000006AD9                 mov     edi, 1          ; ver
.text:0000000000006ADE                 call    ___fxstatat
.text:0000000000006AE3                 test    eax, eax
.text:0000000000006AE5                 jnz     loc_6B80
.text:0000000000006AEB
.text:0000000000006AEB loc_6AEB:                               ; CODE XREF: fts_stat+2F↑j
.text:0000000000006AEB                 mov     eax, [rbp+90h]
.text:0000000000006AF1                 and     eax, 0F000h
.text:0000000000006AF6                 cmp     eax, 4000h
.text:0000000000006AFB                 jz      short loc_6B20
.text:0000000000006AFD                 cmp     eax, 0A000h
.text:0000000000006B02                 jz      loc_6BD8
.text:0000000000006B08                 cmp     eax, 8000h
.text:0000000000006B0D                 setz    al
.text:0000000000006B10                 movzx   eax, al
.text:0000000000006B13                 pop     rbx
.text:0000000000006B14                 lea     eax, [rax+rax*4+3]
.text:0000000000006B18                 pop     rbp
.text:0000000000006B19                 pop     r12
.text:0000000000006B1B                 retn
.text:0000000000006B1B ; ---------------------------------------------------------------------------
.text:0000000000006B1C                 align 20h
.text:0000000000006B20
.text:0000000000006B20 loc_6B20:                               ; CODE XREF: fts_stat+BB↑j
.text:0000000000006B20                 mov     rax, [rbp+88h]
.text:0000000000006B27                 cmp     rax, 1
.text:0000000000006B2B                 jbe     loc_6BB0
.text:0000000000006B31                 cmp     qword ptr [rbp+58h], 0
.text:0000000000006B36                 jle     short loc_6BB0
.text:0000000000006B38                 test    byte ptr [r12+48h], 20h
.text:0000000000006B3E                 lea     rdx, [rax-2]
.text:0000000000006B42                 cmovz   rax, rdx
.text:0000000000006B46
.text:0000000000006B46 loc_6B46:                               ; CODE XREF: fts_stat+177↓j
.text:0000000000006B46                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:0000000000006B4D                 mov     [rbp+68h], rax
.text:0000000000006B51                 mov     eax, 1
.text:0000000000006B56                 jnz     loc_6AB8
.text:0000000000006B5C                 cmp     byte ptr [rbp+109h], 0
.text:0000000000006B63                 jnz     loc_6BE8
.text:0000000000006B69
.text:0000000000006B69 loc_6B69:                               ; CODE XREF: fts_stat+1C0↓j
.text:0000000000006B69                 cmp     qword ptr [rbp+58h], 1
.text:0000000000006B6E                 sbb     eax, eax
.text:0000000000006B70                 and     eax, 0FFFFFFFCh
.text:0000000000006B73                 add     eax, 5
.text:0000000000006B76                 jmp     loc_6AB8
.text:0000000000006B76 ; ---------------------------------------------------------------------------
.text:0000000000006B7B                 align 20h
.text:0000000000006B80
.text:0000000000006B80 loc_6B80:                               ; CODE XREF: fts_stat+A5↑j
.text:0000000000006B80                 call    ___errno_location
.text:0000000000006B85                 mov     eax, [rax]
.text:0000000000006B87                 jmp     loc_6A84
.text:0000000000006B87 ; ---------------------------------------------------------------------------
.text:0000000000006B8C                 align 10h
.text:0000000000006B90
.text:0000000000006B90 loc_6B90:                               ; CODE XREF: fts_stat+3E↑j
.text:0000000000006B90                 mov     rsi, [rbp+30h]  ; filename
.text:0000000000006B94                 mov     rdx, rbx        ; stat_buf
.text:0000000000006B97                 mov     edi, 1          ; ver
.text:0000000000006B9C                 call    ___lxstat
.text:0000000000006BA1                 test    eax, eax
.text:0000000000006BA3                 jz      short loc_6BC0
.text:0000000000006BA5                 mov     eax, [r12]
.text:0000000000006BA9                 jmp     loc_6A84
.text:0000000000006BA9 ; ---------------------------------------------------------------------------
.text:0000000000006BAE                 align 10h
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: fts_stat+EB↑j
.text:0000000000006BB0                                         ; fts_stat+F6↑j
.text:0000000000006BB0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BB7                 jmp     short loc_6B46
.text:0000000000006BB7 ; ---------------------------------------------------------------------------
.text:0000000000006BB9                 align 20h
.text:0000000000006BC0
.text:0000000000006BC0 loc_6BC0:                               ; CODE XREF: fts_stat+163↑j
.text:0000000000006BC0                 mov     dword ptr [r12], 0
.text:0000000000006BC8                 mov     eax, 0Dh
.text:0000000000006BCD                 jmp     loc_6AB8
.text:0000000000006BCD ; ---------------------------------------------------------------------------
.text:0000000000006BD2                 align 8
.text:0000000000006BD8
.text:0000000000006BD8 loc_6BD8:                               ; CODE XREF: fts_stat+C2↑j
.text:0000000000006BD8                 mov     eax, 0Ch
.text:0000000000006BDD                 jmp     loc_6AB8
.text:0000000000006BDD ; ---------------------------------------------------------------------------
.text:0000000000006BE2                 align 8
.text:0000000000006BE8
.text:0000000000006BE8 loc_6BE8:                               ; CODE XREF: fts_stat+123↑j
.text:0000000000006BE8                 mov     edx, [rbp+108h]
.text:0000000000006BEE                 and     edx, 0FFFF00h
.text:0000000000006BF4                 cmp     edx, 2E00h
.text:0000000000006BFA                 jnz     loc_6AB8
.text:0000000000006C00                 jmp     loc_6B69
.text:0000000000006C00 ; } // starts at 6A40
.text:0000000000006C00 fts_stat        endp
.text:0000000000006C00
.text:0000000000006C00 ; ---------------------------------------------------------------------------
.text:0000000000006C05                 align 10h
.text:0000000000006C10
.text:0000000000006C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C10
.text:0000000000006C10
.text:0000000000006C10 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:0000000000006C10                                         ; fts_build+80E↓p ...
.text:0000000000006C10 ; __unwind {
.text:0000000000006C10                 push    r13
.text:0000000000006C12                 push    r12
.text:0000000000006C14                 mov     r12, rdx
.text:0000000000006C17                 push    rbp
.text:0000000000006C18                 push    rbx
.text:0000000000006C19                 mov     rbp, rdi
.text:0000000000006C1C                 mov     rbx, rsi
.text:0000000000006C1F                 sub     rsp, 8
.text:0000000000006C23                 cmp     [rbp+38h], rdx
.text:0000000000006C27                 mov     r13, [rdi+40h]
.text:0000000000006C2B                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000006C2F                 jnb     short loc_6C65
.text:0000000000006C31                 lea     rsi, [rdx+28h]
.text:0000000000006C35                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:0000000000006C3F                 cmp     rsi, rax
.text:0000000000006C42                 mov     [rbp+38h], rsi
.text:0000000000006C46                 ja      loc_6CE4
.text:0000000000006C4C                 shl     rsi, 3          ; size
.text:0000000000006C50                 call    _realloc
.text:0000000000006C55                 test    rax, rax
.text:0000000000006C58                 mov     rdi, rax        ; base
.text:0000000000006C5B                 jz      loc_6CE0
.text:0000000000006C61                 mov     [rbp+10h], rax
.text:0000000000006C65
.text:0000000000006C65 loc_6C65:                               ; CODE XREF: fts_sort+1F↑j
.text:0000000000006C65                 test    rbx, rbx
.text:0000000000006C68                 jz      short loc_6C81
.text:0000000000006C6A                 mov     rdx, rdi
.text:0000000000006C6D                 nop     dword ptr [rax]
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: fts_sort+6F↓j
.text:0000000000006C70                 add     rdx, 8
.text:0000000000006C74                 mov     [rdx-8], rbx
.text:0000000000006C78                 mov     rbx, [rbx+10h]
.text:0000000000006C7C                 test    rbx, rbx
.text:0000000000006C7F                 jnz     short loc_6C70
.text:0000000000006C81
.text:0000000000006C81 loc_6C81:                               ; CODE XREF: fts_sort+58↑j
.text:0000000000006C81                 mov     rcx, r13        ; compar
.text:0000000000006C84                 mov     edx, 8          ; size
.text:0000000000006C89                 mov     rsi, r12        ; nmemb
.text:0000000000006C8C                 call    _qsort
.text:0000000000006C91                 mov     r8, [rbp+10h]
.text:0000000000006C95                 mov     rcx, r12
.text:0000000000006C98                 sub     rcx, 1
.text:0000000000006C9C                 mov     rax, [r8]
.text:0000000000006C9F                 jz      short loc_6D10
.text:0000000000006CA1                 mov     rdi, rax
.text:0000000000006CA4                 mov     rdx, r8
.text:0000000000006CA7                 jmp     short loc_6CB3
.text:0000000000006CA7 ; ---------------------------------------------------------------------------
.text:0000000000006CA9                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 loc_6CB0:                               ; CODE XREF: fts_sort+B3↓j
.text:0000000000006CB0                 mov     rdi, [rdx]
.text:0000000000006CB3
.text:0000000000006CB3 loc_6CB3:                               ; CODE XREF: fts_sort+97↑j
.text:0000000000006CB3                 mov     rsi, [rdx+8]
.text:0000000000006CB7                 add     rdx, 8
.text:0000000000006CBB                 sub     rcx, 1
.text:0000000000006CBF                 mov     [rdi+10h], rsi
.text:0000000000006CC3                 jnz     short loc_6CB0
.text:0000000000006CC5                 mov     rdx, [r8+r12*8-8]
.text:0000000000006CCA
.text:0000000000006CCA loc_6CCA:                               ; CODE XREF: fts_sort+103↓j
.text:0000000000006CCA                 mov     qword ptr [rdx+10h], 0
.text:0000000000006CD2                 add     rsp, 8
.text:0000000000006CD6                 pop     rbx
.text:0000000000006CD7                 pop     rbp
.text:0000000000006CD8                 pop     r12
.text:0000000000006CDA                 pop     r13
.text:0000000000006CDC                 retn
.text:0000000000006CDC ; ---------------------------------------------------------------------------
.text:0000000000006CDD                 align 20h
.text:0000000000006CE0
.text:0000000000006CE0 loc_6CE0:                               ; CODE XREF: fts_sort+4B↑j
.text:0000000000006CE0                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000006CE4
.text:0000000000006CE4 loc_6CE4:                               ; CODE XREF: fts_sort+36↑j
.text:0000000000006CE4                 call    free
.text:0000000000006CE9                 mov     qword ptr [rbp+10h], 0
.text:0000000000006CF1                 mov     qword ptr [rbp+38h], 0
.text:0000000000006CF9                 add     rsp, 8
.text:0000000000006CFD                 mov     rax, rbx
.text:0000000000006D00                 pop     rbx
.text:0000000000006D01                 pop     rbp
.text:0000000000006D02                 pop     r12
.text:0000000000006D04                 pop     r13
.text:0000000000006D06                 retn
.text:0000000000006D06 ; ---------------------------------------------------------------------------
.text:0000000000006D07                 align 10h
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: fts_sort+8F↑j
.text:0000000000006D10                 mov     rdx, rax
.text:0000000000006D13                 jmp     short loc_6CCA
.text:0000000000006D13 ; } // starts at 6C10
.text:0000000000006D13 fts_sort        endp
.text:0000000000006D13
.text:0000000000006D13 ; ---------------------------------------------------------------------------
.text:0000000000006D15                 align 20h
.text:0000000000006D20
.text:0000000000006D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D20
.text:0000000000006D20
.text:0000000000006D20 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:0000000000006D20                                         ; rpl_fts_open+E7↓p ...
.text:0000000000006D20 ; __unwind {
.text:0000000000006D20                 push    r13
.text:0000000000006D22                 push    r12
.text:0000000000006D24                 mov     r12, rdi
.text:0000000000006D27                 push    rbp
.text:0000000000006D28                 lea     rdi, [rdx+110h]
.text:0000000000006D2F                 push    rbx
.text:0000000000006D30                 mov     r13, rsi
.text:0000000000006D33                 mov     rbp, rdx
.text:0000000000006D36                 sub     rsp, 8
.text:0000000000006D3A                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:0000000000006D3E                 call    _malloc
.text:0000000000006D43                 test    rax, rax
.text:0000000000006D46                 mov     rbx, rax
.text:0000000000006D49                 jz      short loc_6D9C
.text:0000000000006D4B                 lea     rdi, [rax+108h] ; dest
.text:0000000000006D52                 mov     rdx, rbp        ; n
.text:0000000000006D55                 mov     rsi, r13        ; src
.text:0000000000006D58                 call    _memcpy
.text:0000000000006D5D                 mov     rax, [r12+20h]
.text:0000000000006D62                 mov     byte ptr [rbx+rbp+108h], 0
.text:0000000000006D6A                 mov     [rbx+60h], rbp
.text:0000000000006D6E                 mov     [rbx+50h], r12
.text:0000000000006D72                 mov     dword ptr [rbx+40h], 0
.text:0000000000006D79                 mov     qword ptr [rbx+18h], 0
.text:0000000000006D81                 mov     [rbx+38h], rax
.text:0000000000006D85                 mov     dword ptr [rbx+72h], 30000h
.text:0000000000006D8C                 mov     qword ptr [rbx+20h], 0
.text:0000000000006D94                 mov     qword ptr [rbx+28h], 0
.text:0000000000006D9C
.text:0000000000006D9C loc_6D9C:                               ; CODE XREF: fts_alloc+29↑j
.text:0000000000006D9C                 add     rsp, 8
.text:0000000000006DA0                 mov     rax, rbx
.text:0000000000006DA3                 pop     rbx
.text:0000000000006DA4                 pop     rbp
.text:0000000000006DA5                 pop     r12
.text:0000000000006DA7                 pop     r13
.text:0000000000006DA9                 retn
.text:0000000000006DA9 ; } // starts at 6D20
.text:0000000000006DA9 fts_alloc       endp
.text:0000000000006DA9
.text:0000000000006DA9 ; ---------------------------------------------------------------------------
.text:0000000000006DAA                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DB0
.text:0000000000006DB0
.text:0000000000006DB0 ; __int64 __fastcall fts_lfree(void *ptr)
.text:0000000000006DB0 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:0000000000006DB0                                         ; fts_build+765↓p ...
.text:0000000000006DB0 ; __unwind {
.text:0000000000006DB0                 test    rdi, rdi
.text:0000000000006DB3                 jz      short locret_6DF0
.text:0000000000006DB5                 push    rbp
.text:0000000000006DB6                 push    rbx
.text:0000000000006DB7                 mov     rbx, rdi
.text:0000000000006DBA                 sub     rsp, 8
.text:0000000000006DBE                 xchg    ax, ax
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: fts_lfree+30↓j
.text:0000000000006DC0                 mov     rdi, [rbx+18h]  ; dirp
.text:0000000000006DC4                 mov     rbp, [rbx+10h]
.text:0000000000006DC8                 test    rdi, rdi
.text:0000000000006DCB                 jz      short loc_6DD2
.text:0000000000006DCD                 call    _closedir
.text:0000000000006DD2
.text:0000000000006DD2 loc_6DD2:                               ; CODE XREF: fts_lfree+1B↑j
.text:0000000000006DD2                 mov     rdi, rbx        ; ptr
.text:0000000000006DD5                 mov     rbx, rbp
.text:0000000000006DD8                 call    free
.text:0000000000006DDD                 test    rbp, rbp
.text:0000000000006DE0                 jnz     short loc_6DC0
.text:0000000000006DE2                 add     rsp, 8
.text:0000000000006DE6                 pop     rbx
.text:0000000000006DE7                 pop     rbp
.text:0000000000006DE8                 retn
.text:0000000000006DE8 ; ---------------------------------------------------------------------------
.text:0000000000006DE9                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 locret_6DF0:                            ; CODE XREF: fts_lfree+3↑j
.text:0000000000006DF0                 rep retn
.text:0000000000006DF0 ; } // starts at 6DB0
.text:0000000000006DF0 fts_lfree       endp
.text:0000000000006DF0
.text:0000000000006DF0 ; ---------------------------------------------------------------------------
.text:0000000000006DF2                 align 20h
.text:0000000000006E00
.text:0000000000006E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E00
.text:0000000000006E00
.text:0000000000006E00 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:0000000000006E00                                         ; rpl_fts_close+8C↓p
.text:0000000000006E00 ; __unwind {
.text:0000000000006E00                 push    rbx
.text:0000000000006E01                 mov     rbx, rdi
.text:0000000000006E04                 jmp     short loc_6E1C
.text:0000000000006E04 ; ---------------------------------------------------------------------------
.text:0000000000006E06                 align 10h
.text:0000000000006E10
.text:0000000000006E10 loc_6E10:                               ; CODE XREF: fd_ring_clear+26↓j
.text:0000000000006E10                 mov     rdi, rbx
.text:0000000000006E13                 call    i_ring_pop
.text:0000000000006E18                 test    eax, eax
.text:0000000000006E1A                 jns     short loc_6E30
.text:0000000000006E1C
.text:0000000000006E1C loc_6E1C:                               ; CODE XREF: fd_ring_clear+4↑j
.text:0000000000006E1C                                         ; fd_ring_clear+37↓j
.text:0000000000006E1C                 mov     rdi, rbx
.text:0000000000006E1F                 call    i_ring_empty
.text:0000000000006E24                 test    al, al
.text:0000000000006E26                 jz      short loc_6E10
.text:0000000000006E28                 pop     rbx
.text:0000000000006E29                 retn
.text:0000000000006E29 ; ---------------------------------------------------------------------------
.text:0000000000006E2A                 align 10h
.text:0000000000006E30
.text:0000000000006E30 loc_6E30:                               ; CODE XREF: fd_ring_clear+1A↑j
.text:0000000000006E30                 mov     edi, eax        ; fd
.text:0000000000006E32                 call    _close
.text:0000000000006E37                 jmp     short loc_6E1C
.text:0000000000006E37 ; } // starts at 6E00
.text:0000000000006E37 fd_ring_clear   endp
.text:0000000000006E37
.text:0000000000006E37 ; ---------------------------------------------------------------------------
.text:0000000000006E39                 align 20h
.text:0000000000006E40
.text:0000000000006E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E40
.text:0000000000006E40
.text:0000000000006E40 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:0000000000006E40                                         ; fts_build+2C4↓p
.text:0000000000006E40
.text:0000000000006E40 var_B8          = qword ptr -0B8h
.text:0000000000006E40 buf             = statfs ptr -0A8h
.text:0000000000006E40 var_30          = qword ptr -30h
.text:0000000000006E40
.text:0000000000006E40 ; __unwind {
.text:0000000000006E40                 push    r13
.text:0000000000006E42                 push    r12
.text:0000000000006E44                 push    rbp
.text:0000000000006E45                 push    rbx
.text:0000000000006E46                 sub     rsp, 98h
.text:0000000000006E4D                 mov     rbx, [rdi+50h]
.text:0000000000006E51                 mov     rax, fs:28h
.text:0000000000006E5A                 mov     [rsp+0B8h+var_30], rax
.text:0000000000006E62                 xor     eax, eax
.text:0000000000006E64                 test    byte ptr [rbx+49h], 2
.text:0000000000006E68                 jz      short loc_6ED2
.text:0000000000006E6A                 mov     r12, [rbx+50h]
.text:0000000000006E6E                 mov     rbp, rdi
.text:0000000000006E71                 mov     r13d, esi
.text:0000000000006E74                 test    r12, r12
.text:0000000000006E77                 jz      short loc_6EA0
.text:0000000000006E79
.text:0000000000006E79 loc_6E79:                               ; CODE XREF: filesystem_type+8B↓j
.text:0000000000006E79                 mov     rax, [rbp+78h]
.text:0000000000006E7D                 mov     rsi, rsp
.text:0000000000006E80                 mov     rdi, r12
.text:0000000000006E83                 mov     [rsp+0B8h+var_B8], rax
.text:0000000000006E87                 call    hash_lookup
.text:0000000000006E8C                 test    rax, rax
.text:0000000000006E8F                 jz      short loc_6ECD
.text:0000000000006E91                 mov     rbx, [rax+8]
.text:0000000000006E95                 jmp     short loc_6ED4
.text:0000000000006E95 ; ---------------------------------------------------------------------------
.text:0000000000006E97                 align 20h
.text:0000000000006EA0
.text:0000000000006EA0 loc_6EA0:                               ; CODE XREF: filesystem_type+37↑j
.text:0000000000006EA0                 mov     r8, cs:free_ptr
.text:0000000000006EA7                 lea     rcx, dev_type_compare
.text:0000000000006EAE                 lea     rdx, dev_type_hash
.text:0000000000006EB5                 xor     esi, esi
.text:0000000000006EB7                 mov     edi, 0Dh
.text:0000000000006EBC                 call    hash_initialize
.text:0000000000006EC1                 test    rax, rax
.text:0000000000006EC4                 mov     r12, rax
.text:0000000000006EC7                 mov     [rbx+50h], rax
.text:0000000000006ECB                 jnz     short loc_6E79
.text:0000000000006ECD
.text:0000000000006ECD loc_6ECD:                               ; CODE XREF: filesystem_type+4F↑j
.text:0000000000006ECD                 test    r13d, r13d
.text:0000000000006ED0                 jns     short loc_6F00
.text:0000000000006ED2
.text:0000000000006ED2 loc_6ED2:                               ; CODE XREF: filesystem_type+28↑j
.text:0000000000006ED2                                         ; filesystem_type+CF↓j
.text:0000000000006ED2                 xor     ebx, ebx
.text:0000000000006ED4
.text:0000000000006ED4 loc_6ED4:                               ; CODE XREF: filesystem_type+55↑j
.text:0000000000006ED4                                         ; filesystem_type+D9↓j ...
.text:0000000000006ED4                 mov     rdx, [rsp+0B8h+var_30]
.text:0000000000006EDC                 xor     rdx, fs:28h
.text:0000000000006EE5                 mov     rax, rbx
.text:0000000000006EE8                 jnz     short loc_6F62
.text:0000000000006EEA                 add     rsp, 98h
.text:0000000000006EF1                 pop     rbx
.text:0000000000006EF2                 pop     rbp
.text:0000000000006EF3                 pop     r12
.text:0000000000006EF5                 pop     r13
.text:0000000000006EF7                 retn
.text:0000000000006EF7 ; ---------------------------------------------------------------------------
.text:0000000000006EF8                 align 20h
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: filesystem_type+90↑j
.text:0000000000006F00                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:0000000000006F05                 mov     edi, r13d       ; fildes
.text:0000000000006F08                 call    _fstatfs
.text:0000000000006F0D                 test    eax, eax
.text:0000000000006F0F                 jnz     short loc_6ED2
.text:0000000000006F11                 test    r12, r12
.text:0000000000006F14                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006F19                 jz      short loc_6ED4
.text:0000000000006F1B                 mov     edi, 10h        ; size
.text:0000000000006F20                 call    _malloc
.text:0000000000006F25                 test    rax, rax
.text:0000000000006F28                 mov     r13, rax
.text:0000000000006F2B                 jz      short loc_6ED4
.text:0000000000006F2D                 mov     rax, [rbp+78h]
.text:0000000000006F31                 mov     [r13+8], rbx
.text:0000000000006F35                 mov     rsi, r13
.text:0000000000006F38                 mov     rdi, r12
.text:0000000000006F3B                 mov     [r13+0], rax
.text:0000000000006F3F                 call    hash_insert
.text:0000000000006F44                 test    rax, rax
.text:0000000000006F47                 jz      short loc_6F58
.text:0000000000006F49                 cmp     r13, rax
.text:0000000000006F4C                 jnz     short loc_6F67
.text:0000000000006F4E
.text:0000000000006F4E loc_6F4E:                               ; CODE XREF: filesystem_type+120↓j
.text:0000000000006F4E                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006F53                 jmp     loc_6ED4
.text:0000000000006F58 ; ---------------------------------------------------------------------------
.text:0000000000006F58
.text:0000000000006F58 loc_6F58:                               ; CODE XREF: filesystem_type+107↑j
.text:0000000000006F58                 mov     rdi, r13        ; ptr
.text:0000000000006F5B                 call    free
.text:0000000000006F60                 jmp     short loc_6F4E
.text:0000000000006F62 ; ---------------------------------------------------------------------------
.text:0000000000006F62
.text:0000000000006F62 loc_6F62:                               ; CODE XREF: filesystem_type+A8↑j
.text:0000000000006F62                 call    ___stack_chk_fail
.text:0000000000006F67 ; ---------------------------------------------------------------------------
.text:0000000000006F67
.text:0000000000006F67 loc_6F67:                               ; CODE XREF: filesystem_type+10C↑j
.text:0000000000006F67                 call    _abort
.text:0000000000006F67 ; } // starts at 6E40
.text:0000000000006F67 filesystem_type endp
.text:0000000000006F67
.text:0000000000006F67 ; ---------------------------------------------------------------------------
.text:0000000000006F6C                 align 10h
.text:0000000000006F70
.text:0000000000006F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F70
.text:0000000000006F70
.text:0000000000006F70 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:0000000000006F70                                         ; rpl_fts_read+705↓p
.text:0000000000006F70 ; __unwind {
.text:0000000000006F70                 sub     rsp, 8
.text:0000000000006F74                 call    filesystem_type
.text:0000000000006F79                 cmp     rax, 52654973h
.text:0000000000006F7F                 jz      short loc_6FD0
.text:0000000000006F81                 jle     short loc_6FB0
.text:0000000000006F83                 cmp     rax, 58465342h
.text:0000000000006F89                 jz      short loc_6FD0
.text:0000000000006F8B                 mov     edx, 0FF534D42h
.text:0000000000006F90                 cmp     rax, rdx
.text:0000000000006F93                 jz      short loc_6FC5
.text:0000000000006F95                 cmp     rax, 5346414Fh
.text:0000000000006F9B                 jz      short loc_6FC5
.text:0000000000006F9D
.text:0000000000006F9D loc_6F9D:                               ; CODE XREF: leaf_optimization+53↓j
.text:0000000000006F9D                 mov     eax, 1
.text:0000000000006FA2                 add     rsp, 8
.text:0000000000006FA6                 retn
.text:0000000000006FA6 ; ---------------------------------------------------------------------------
.text:0000000000006FA7                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: leaf_optimization+11↑j
.text:0000000000006FB0                 cmp     rax, 6969h
.text:0000000000006FB6                 jz      short loc_6FC5
.text:0000000000006FB8                 cmp     rax, 9FA0h
.text:0000000000006FBE                 jz      short loc_6FC5
.text:0000000000006FC0                 test    rax, rax
.text:0000000000006FC3                 jnz     short loc_6F9D
.text:0000000000006FC5
.text:0000000000006FC5 loc_6FC5:                               ; CODE XREF: leaf_optimization+23↑j
.text:0000000000006FC5                                         ; leaf_optimization+2B↑j ...
.text:0000000000006FC5                 xor     eax, eax
.text:0000000000006FC7                 add     rsp, 8
.text:0000000000006FCB                 retn
.text:0000000000006FCB ; ---------------------------------------------------------------------------
.text:0000000000006FCC                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: leaf_optimization+F↑j
.text:0000000000006FD0                                         ; leaf_optimization+19↑j
.text:0000000000006FD0                 mov     eax, 2
.text:0000000000006FD5                 add     rsp, 8
.text:0000000000006FD9                 retn
.text:0000000000006FD9 ; } // starts at 6F70
.text:0000000000006FD9 leaf_optimization endp
.text:0000000000006FD9
.text:0000000000006FD9 ; ---------------------------------------------------------------------------
.text:0000000000006FDA                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FE0
.text:0000000000006FE0
.text:0000000000006FE0 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:0000000000006FE0                                         ; fts_safe_changedir+21E↓p ...
.text:0000000000006FE0 ; __unwind {
.text:0000000000006FE0                 push    rbp
.text:0000000000006FE1                 push    rbx
.text:0000000000006FE2                 mov     ebp, esi
.text:0000000000006FE4                 mov     rbx, rdi
.text:0000000000006FE7                 sub     rsp, 8
.text:0000000000006FEB                 mov     esi, [rdi+2Ch]
.text:0000000000006FEE                 cmp     esi, ebp
.text:0000000000006FF0                 jnz     short loc_6FF7
.text:0000000000006FF2                 cmp     esi, 0FFFFFF9Ch
.text:0000000000006FF5                 jnz     short loc_7041
.text:0000000000006FF7
.text:0000000000006FF7 loc_6FF7:                               ; CODE XREF: cwd_advance_fd+10↑j
.text:0000000000006FF7                 test    dl, dl
.text:0000000000006FF9                 jnz     short loc_7010
.text:0000000000006FFB                 test    byte ptr [rbx+48h], 4
.text:0000000000006FFF                 jnz     short loc_7005
.text:0000000000007001                 test    esi, esi
.text:0000000000007003                 jns     short loc_7030
.text:0000000000007005
.text:0000000000007005 loc_7005:                               ; CODE XREF: cwd_advance_fd+1F↑j
.text:0000000000007005                                         ; cwd_advance_fd+3B↓j
.text:0000000000007005                 mov     [rbx+2Ch], ebp
.text:0000000000007008                 add     rsp, 8
.text:000000000000700C                 pop     rbx
.text:000000000000700D                 pop     rbp
.text:000000000000700E                 retn
.text:000000000000700E ; ---------------------------------------------------------------------------
.text:000000000000700F                 align 10h
.text:0000000000007010
.text:0000000000007010 loc_7010:                               ; CODE XREF: cwd_advance_fd+19↑j
.text:0000000000007010                 lea     rdi, [rbx+60h]
.text:0000000000007014                 call    i_ring_push
.text:0000000000007019                 test    eax, eax
.text:000000000000701B                 js      short loc_7005
.text:000000000000701D                 mov     edi, eax        ; fd
.text:000000000000701F                 call    _close
.text:0000000000007024                 mov     [rbx+2Ch], ebp
.text:0000000000007027                 add     rsp, 8
.text:000000000000702B                 pop     rbx
.text:000000000000702C                 pop     rbp
.text:000000000000702D                 retn
.text:000000000000702D ; ---------------------------------------------------------------------------
.text:000000000000702E                 align 10h
.text:0000000000007030
.text:0000000000007030 loc_7030:                               ; CODE XREF: cwd_advance_fd+23↑j
.text:0000000000007030                 mov     edi, esi        ; fd
.text:0000000000007032                 call    _close
.text:0000000000007037                 mov     [rbx+2Ch], ebp
.text:000000000000703A                 add     rsp, 8
.text:000000000000703E                 pop     rbx
.text:000000000000703F                 pop     rbp
.text:0000000000007040                 retn
.text:0000000000007041 ; ---------------------------------------------------------------------------
.text:0000000000007041
.text:0000000000007041 loc_7041:                               ; CODE XREF: cwd_advance_fd+15↑j
.text:0000000000007041                 call    _abort
.text:0000000000007041 ; } // starts at 6FE0
.text:0000000000007041 cwd_advance_fd  endp
.text:0000000000007041
.text:0000000000007041 ; ---------------------------------------------------------------------------
.text:0000000000007046                 align 10h
.text:0000000000007050
.text:0000000000007050 ; =============== S U B R O U T I N E =======================================
.text:0000000000007050
.text:0000000000007050
.text:0000000000007050 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:0000000000007050                                         ; rpl_fts_read+2A3↓p ...
.text:0000000000007050 ; __unwind {
.text:0000000000007050                 push    rbp
.text:0000000000007051                 push    rbx
.text:0000000000007052                 mov     rbx, rdi
.text:0000000000007055                 sub     rsp, 8
.text:0000000000007059                 mov     edx, [rdi+48h]
.text:000000000000705C                 mov     ebp, edx
.text:000000000000705E                 and     ebp, 4
.text:0000000000007061                 jnz     short loc_70A8
.text:0000000000007063                 and     dh, 2
.text:0000000000007066                 jnz     short loc_7090
.text:0000000000007068                 mov     edi, [rdi+28h]  ; fd
.text:000000000000706B                 xor     ebp, ebp
.text:000000000000706D                 call    _fchdir
.text:0000000000007072                 test    eax, eax
.text:0000000000007074                 setnz   bpl
.text:0000000000007078
.text:0000000000007078 loc_7078:                               ; CODE XREF: restore_initial_cwd+4F↓j
.text:0000000000007078                                         ; restore_initial_cwd+5A↓j
.text:0000000000007078                 lea     rdi, [rbx+60h]
.text:000000000000707C                 call    fd_ring_clear
.text:0000000000007081                 add     rsp, 8
.text:0000000000007085                 mov     eax, ebp
.text:0000000000007087                 pop     rbx
.text:0000000000007088                 pop     rbp
.text:0000000000007089                 retn
.text:0000000000007089 ; ---------------------------------------------------------------------------
.text:000000000000708A                 align 10h
.text:0000000000007090
.text:0000000000007090 loc_7090:                               ; CODE XREF: restore_initial_cwd+16↑j
.text:0000000000007090                 mov     edx, 1
.text:0000000000007095                 mov     esi, 0FFFFFF9Ch
.text:000000000000709A                 call    cwd_advance_fd
.text:000000000000709F                 jmp     short loc_7078
.text:000000000000709F ; ---------------------------------------------------------------------------
.text:00000000000070A1                 align 8
.text:00000000000070A8
.text:00000000000070A8 loc_70A8:                               ; CODE XREF: restore_initial_cwd+11↑j
.text:00000000000070A8                 xor     ebp, ebp
.text:00000000000070AA                 jmp     short loc_7078
.text:00000000000070AA ; } // starts at 7050
.text:00000000000070AA restore_initial_cwd endp
.text:00000000000070AA
.text:00000000000070AA ; ---------------------------------------------------------------------------
.text:00000000000070AC                 align 10h
.text:00000000000070B0
.text:00000000000070B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070B0
.text:00000000000070B0
.text:00000000000070B0 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:00000000000070B0                                         ; rpl_fts_open+BD↓p
.text:00000000000070B0 ; __unwind {
.text:00000000000070B0                 push    rbx
.text:00000000000070B1                 mov     rcx, [rsi]
.text:00000000000070B4                 mov     rbx, rdi
.text:00000000000070B7                 mov     rdi, [rdi]      ; ptr
.text:00000000000070BA                 lea     rax, [rcx+rdx+100h]
.text:00000000000070C2                 cmp     rcx, rax
.text:00000000000070C5                 ja      short loc_70E8
.text:00000000000070C7                 mov     [rsi], rax
.text:00000000000070CA                 mov     rsi, rax        ; size
.text:00000000000070CD                 call    _realloc
.text:00000000000070D2                 test    rax, rax
.text:00000000000070D5                 jz      short loc_7108
.text:00000000000070D7                 mov     [rbx], rax
.text:00000000000070DA                 mov     eax, 1
.text:00000000000070DF                 pop     rbx
.text:00000000000070E0                 retn
.text:00000000000070E0 ; ---------------------------------------------------------------------------
.text:00000000000070E1                 align 8
.text:00000000000070E8
.text:00000000000070E8 loc_70E8:                               ; CODE XREF: fts_palloc_isra_2+15↑j
.text:00000000000070E8                 call    free
.text:00000000000070ED                 mov     qword ptr [rbx], 0
.text:00000000000070F4                 call    ___errno_location
.text:00000000000070F9                 mov     dword ptr [rax], 24h ; '$'
.text:00000000000070FF                 xor     eax, eax
.text:0000000000007101                 pop     rbx
.text:0000000000007102                 retn
.text:0000000000007102 ; ---------------------------------------------------------------------------
.text:0000000000007103                 align 8
.text:0000000000007108
.text:0000000000007108 loc_7108:                               ; CODE XREF: fts_palloc_isra_2+25↑j
.text:0000000000007108                 mov     rdi, [rbx]      ; ptr
.text:000000000000710B                 call    free
.text:0000000000007110                 mov     qword ptr [rbx], 0
.text:0000000000007117                 xor     eax, eax
.text:0000000000007119                 pop     rbx
.text:000000000000711A                 retn
.text:000000000000711A ; } // starts at 70B0
.text:000000000000711A fts_palloc_isra_2 endp
.text:000000000000711A
.text:000000000000711A ; ---------------------------------------------------------------------------
.text:000000000000711B                 align 20h
.text:0000000000007120
.text:0000000000007120 ; =============== S U B R O U T I N E =======================================
.text:0000000000007120
.text:0000000000007120
.text:0000000000007120 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:0000000000007120                                         ; rpl_fts_read+345↓p
.text:0000000000007120 ; __unwind {
.text:0000000000007120                 and     edi, 102h
.text:0000000000007126                 push    rbx
.text:0000000000007127                 mov     rbx, rsi
.text:000000000000712A                 jz      short loc_7160
.text:000000000000712C                 mov     r8, cs:free_ptr
.text:0000000000007133                 lea     rcx, AD_compare
.text:000000000000713A                 lea     rdx, AD_hash
.text:0000000000007141                 xor     esi, esi
.text:0000000000007143                 mov     edi, 1Fh
.text:0000000000007148                 call    hash_initialize
.text:000000000000714D                 test    rax, rax
.text:0000000000007150                 mov     [rbx], rax
.text:0000000000007153                 setnz   al
.text:0000000000007156
.text:0000000000007156 loc_7156:                               ; CODE XREF: setup_dir_isra_4+55↓j
.text:0000000000007156                 pop     rbx
.text:0000000000007157                 retn
.text:0000000000007157 ; ---------------------------------------------------------------------------
.text:0000000000007158                 align 20h
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: setup_dir_isra_4+A↑j
.text:0000000000007160                 mov     edi, 20h ; ' '  ; size
.text:0000000000007165                 call    _malloc
.text:000000000000716A                 mov     rdi, rax
.text:000000000000716D                 mov     [rbx], rax
.text:0000000000007170                 xor     eax, eax
.text:0000000000007172                 test    rdi, rdi
.text:0000000000007175                 jz      short loc_7156
.text:0000000000007177                 call    cycle_check_init
.text:000000000000717C                 mov     eax, 1
.text:0000000000007181                 pop     rbx
.text:0000000000007182                 retn
.text:0000000000007182 ; } // starts at 7120
.text:0000000000007182 setup_dir_isra_4 endp
.text:0000000000007182
.text:0000000000007182 ; ---------------------------------------------------------------------------
.text:0000000000007183                 align 10h
.text:0000000000007190
.text:0000000000007190 ; =============== S U B R O U T I N E =======================================
.text:0000000000007190
.text:0000000000007190
.text:0000000000007190 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:0000000000007190                                         ; rpl_fts_open+287↓p ...
.text:0000000000007190 ; __unwind {
.text:0000000000007190                 mov     rax, rdx
.text:0000000000007193                 mov     edx, esi
.text:0000000000007195                 shl     edx, 0Dh
.text:0000000000007198                 and     edx, 20000h
.text:000000000000719E                 or      edx, 90900h
.text:00000000000071A4                 and     esi, 200h
.text:00000000000071AA                 jnz     short loc_71C0
.text:00000000000071AC                 mov     rdi, rax
.text:00000000000071AF                 mov     esi, edx
.text:00000000000071B1                 xor     eax, eax
.text:00000000000071B3                 jmp     open_safer
.text:00000000000071B3 ; ---------------------------------------------------------------------------
.text:00000000000071B8                 align 20h
.text:00000000000071C0
.text:00000000000071C0 loc_71C0:                               ; CODE XREF: diropen_isra_6+1A↑j
.text:00000000000071C0                 mov     rsi, rax
.text:00000000000071C3                 xor     eax, eax
.text:00000000000071C5                 jmp     openat_safer
.text:00000000000071C5 ; } // starts at 7190
.text:00000000000071C5 diropen_isra_6  endp
.text:00000000000071C5
.text:00000000000071C5 ; ---------------------------------------------------------------------------
.text:00000000000071CA                 align 10h
.text:00000000000071D0
.text:00000000000071D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071D0
.text:00000000000071D0 ; Attributes: info_from_lumina
.text:00000000000071D0
.text:00000000000071D0 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:00000000000071D0                                         ; fts_build+892↓p ...
.text:00000000000071D0
.text:00000000000071D0 var_D9          = byte ptr -0D9h
.text:00000000000071D0 stat_buf        = stat ptr -0D8h
.text:00000000000071D0 var_40          = qword ptr -40h
.text:00000000000071D0
.text:00000000000071D0 ; __unwind {
.text:00000000000071D0                 push    r15
.text:00000000000071D2                 push    r14
.text:00000000000071D4                 mov     r14, rsi
.text:00000000000071D7                 push    r13
.text:00000000000071D9                 push    r12
.text:00000000000071DB                 mov     r13, rdi
.text:00000000000071DE                 push    rbp
.text:00000000000071DF                 push    rbx
.text:00000000000071E0                 mov     r12d, edx
.text:00000000000071E3                 mov     rbp, rcx
.text:00000000000071E6                 sub     rsp, 0B8h
.text:00000000000071ED                 mov     ebx, [rdi+48h]
.text:00000000000071F0                 mov     rax, fs:28h
.text:00000000000071F9                 mov     [rsp+0E8h+var_40], rax
.text:0000000000007201                 xor     eax, eax
.text:0000000000007203                 mov     r9d, ebx
.text:0000000000007206                 and     r9d, 4
.text:000000000000720A                 test    rcx, rcx
.text:000000000000720D                 jz      loc_72C0
.text:0000000000007213                 lea     rdx, asc_B4BE   ; ".."
.text:000000000000721A                 mov     ecx, 3
.text:000000000000721F                 mov     rsi, rbp
.text:0000000000007222                 mov     rdi, rdx
.text:0000000000007225                 repe cmpsb
.text:0000000000007227                 setnbe  al
.text:000000000000722A                 sbb     al, 0
.text:000000000000722C                 test    al, al
.text:000000000000722E                 jnz     loc_72C0
.text:0000000000007234                 test    r9d, r9d
.text:0000000000007237                 jnz     loc_72C5
.text:000000000000723D                 test    r12d, r12d
.text:0000000000007240                 jns     loc_742A
.text:0000000000007246                 test    bh, 2
.text:0000000000007249                 jnz     loc_7390
.text:000000000000724F
.text:000000000000724F loc_724F:                               ; CODE XREF: fts_safe_changedir+1E9↓j
.text:000000000000724F                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007254
.text:0000000000007254 loc_7254:                               ; CODE XREF: fts_safe_changedir+1D2↓j
.text:0000000000007254                                         ; fts_safe_changedir+275↓j
.text:0000000000007254                 mov     edi, [r13+2Ch]
.text:0000000000007258                 mov     rdx, rbp
.text:000000000000725B                 mov     esi, ebx
.text:000000000000725D                 call    diropen_isra_6
.text:0000000000007262                 test    eax, eax
.text:0000000000007264                 mov     r15d, eax
.text:0000000000007267                 js      loc_741B
.text:000000000000726D                 mov     ebx, [r13+48h]
.text:0000000000007271                 test    bl, 2
.text:0000000000007274                 jz      loc_731A
.text:000000000000727A                 nop     word ptr [rax+rax+00h]
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: fts_safe_changedir+144↓j
.text:0000000000007280                                         ; fts_safe_changedir+16A↓j ...
.text:0000000000007280                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000007285                 mov     esi, r15d       ; fildes
.text:0000000000007288                 mov     edi, 1          ; ver
.text:000000000000728D                 call    ___fxstat       ; PIC mode
.text:0000000000007292                 test    eax, eax
.text:0000000000007294                 jz      loc_7360
.text:000000000000729A
.text:000000000000729A loc_729A:                               ; CODE XREF: fts_safe_changedir+1AA↓j
.text:000000000000729A                 mov     ebx, 0FFFFFFFFh
.text:000000000000729F
.text:000000000000729F loc_729F:                               ; CODE XREF: fts_safe_changedir+183↓j
.text:000000000000729F                 test    r12d, r12d
.text:00000000000072A2                 jns     short loc_72D5
.text:00000000000072A4                 call    ___errno_location ; PIC mode
.text:00000000000072A9                 mov     r12d, [rax]
.text:00000000000072AC                 mov     rbp, rax
.text:00000000000072AF                 mov     edi, r15d       ; fd
.text:00000000000072B2                 call    _close          ; PIC mode
.text:00000000000072B7                 mov     [rbp+0], r12d
.text:00000000000072BB                 jmp     short loc_72D5
.text:00000000000072BB ; ---------------------------------------------------------------------------
.text:00000000000072BD                 align 20h
.text:00000000000072C0
.text:00000000000072C0 loc_72C0:                               ; CODE XREF: fts_safe_changedir+3D↑j
.text:00000000000072C0                                         ; fts_safe_changedir+5E↑j
.text:00000000000072C0                 test    r9d, r9d
.text:00000000000072C3                 jz      short loc_7300
.text:00000000000072C5
.text:00000000000072C5 loc_72C5:                               ; CODE XREF: fts_safe_changedir+67↑j
.text:00000000000072C5                 and     bh, 2
.text:00000000000072C8                 jz      short loc_72D3
.text:00000000000072CA                 test    r12d, r12d
.text:00000000000072CD                 jns     loc_7380
.text:00000000000072D3
.text:00000000000072D3 loc_72D3:                               ; CODE XREF: fts_safe_changedir+F8↑j
.text:00000000000072D3                 xor     ebx, ebx
.text:00000000000072D5
.text:00000000000072D5 loc_72D5:                               ; CODE XREF: fts_safe_changedir+D2↑j
.text:00000000000072D5                                         ; fts_safe_changedir+EB↑j ...
.text:00000000000072D5                 mov     rcx, [rsp+0E8h+var_40]
.text:00000000000072DD                 xor     rcx, fs:28h
.text:00000000000072E6                 mov     eax, ebx
.text:00000000000072E8                 jnz     loc_7425
.text:00000000000072EE                 add     rsp, 0B8h
.text:00000000000072F5                 pop     rbx
.text:00000000000072F6                 pop     rbp
.text:00000000000072F7                 pop     r12
.text:00000000000072F9                 pop     r13
.text:00000000000072FB                 pop     r14
.text:00000000000072FD                 pop     r15
.text:00000000000072FF                 retn
.text:0000000000007300 ; ---------------------------------------------------------------------------
.text:0000000000007300
.text:0000000000007300 loc_7300:                               ; CODE XREF: fts_safe_changedir+F3↑j
.text:0000000000007300                 test    r12d, r12d
.text:0000000000007303                 js      loc_7440
.text:0000000000007309                 test    bl, 2
.text:000000000000730C                 mov     r15d, r12d
.text:000000000000730F                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007314                 jnz     loc_7280
.text:000000000000731A
.text:000000000000731A loc_731A:                               ; CODE XREF: fts_safe_changedir+A4↑j
.text:000000000000731A                 test    rbp, rbp
.text:000000000000731D                 jz      short loc_7340
.text:000000000000731F                 lea     rdx, asc_B4BE   ; ".."
.text:0000000000007326
.text:0000000000007326 loc_7326:                               ; CODE XREF: fts_safe_changedir+265↓j
.text:0000000000007326                 mov     ecx, 3
.text:000000000000732B                 mov     rsi, rbp
.text:000000000000732E                 mov     rdi, rdx
.text:0000000000007331                 repe cmpsb
.text:0000000000007333                 setnbe  al
.text:0000000000007336                 sbb     al, 0
.text:0000000000007338                 test    al, al
.text:000000000000733A                 jz      loc_7280
.text:0000000000007340
.text:0000000000007340 loc_7340:                               ; CODE XREF: fts_safe_changedir+14D↑j
.text:0000000000007340                                         ; fts_safe_changedir+1FA↓j ...
.text:0000000000007340                 and     bh, 2
.text:0000000000007343                 jnz     loc_73D8
.text:0000000000007349                 mov     edi, r15d       ; fd
.text:000000000000734C                 call    _fchdir         ; PIC mode
.text:0000000000007351                 mov     ebx, eax
.text:0000000000007353                 jmp     loc_729F
.text:0000000000007353 ; ---------------------------------------------------------------------------
.text:0000000000007358                 align 20h
.text:0000000000007360
.text:0000000000007360 loc_7360:                               ; CODE XREF: fts_safe_changedir+C4↑j
.text:0000000000007360                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000007365                 cmp     [r14+78h], rax
.text:0000000000007369                 jz      loc_7400
.text:000000000000736F
.text:000000000000736F loc_736F:                               ; CODE XREF: fts_safe_changedir+23C↓j
.text:000000000000736F                 call    ___errno_location ; PIC mode
.text:0000000000007374                 mov     dword ptr [rax], 2
.text:000000000000737A                 jmp     loc_729A
.text:000000000000737A ; ---------------------------------------------------------------------------
.text:000000000000737F                 align 20h
.text:0000000000007380
.text:0000000000007380 loc_7380:                               ; CODE XREF: fts_safe_changedir+FD↑j
.text:0000000000007380                 mov     edi, r12d       ; fd
.text:0000000000007383                 xor     ebx, ebx
.text:0000000000007385                 call    _close          ; PIC mode
.text:000000000000738A                 jmp     loc_72D5
.text:000000000000738A ; ---------------------------------------------------------------------------
.text:000000000000738F                 align 10h
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: fts_safe_changedir+79↑j
.text:0000000000007390                 lea     r15, [r13+60h]
.text:0000000000007394                 mov     rdi, r15
.text:0000000000007397                 call    i_ring_empty    ; PIC mode
.text:000000000000739C                 test    al, al
.text:000000000000739E                 mov     [rsp+0E8h+var_D9], al
.text:00000000000073A2                 jnz     loc_7254
.text:00000000000073A8                 mov     rdi, r15
.text:00000000000073AB                 call    i_ring_pop      ; PIC mode
.text:00000000000073B0                 test    eax, eax
.text:00000000000073B2                 mov     r15d, eax
.text:00000000000073B5                 mov     ebx, [r13+48h]
.text:00000000000073B9                 js      loc_724F
.text:00000000000073BF                 test    bl, 2
.text:00000000000073C2                 mov     r12d, eax
.text:00000000000073C5                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000073CA                 jz      loc_7340
.text:00000000000073D0                 jmp     loc_7280
.text:00000000000073D0 ; ---------------------------------------------------------------------------
.text:00000000000073D5                 align 8
.text:00000000000073D8
.text:00000000000073D8 loc_73D8:                               ; CODE XREF: fts_safe_changedir+173↑j
.text:00000000000073D8                 movzx   r14d, [rsp+0E8h+var_D9]
.text:00000000000073DE                 mov     esi, r15d
.text:00000000000073E1                 mov     rdi, r13
.text:00000000000073E4                 xor     ebx, ebx
.text:00000000000073E6                 xor     r14d, 1
.text:00000000000073EA                 movzx   edx, r14b
.text:00000000000073EE                 call    cwd_advance_fd
.text:00000000000073F3                 jmp     loc_72D5
.text:00000000000073F3 ; ---------------------------------------------------------------------------
.text:00000000000073F8                 align 20h
.text:0000000000007400
.text:0000000000007400 loc_7400:                               ; CODE XREF: fts_safe_changedir+199↑j
.text:0000000000007400                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000007405                 cmp     [r14+80h], rax
.text:000000000000740C                 jnz     loc_736F
.text:0000000000007412                 mov     ebx, [r13+48h]
.text:0000000000007416                 jmp     loc_7340
.text:000000000000741B ; ---------------------------------------------------------------------------
.text:000000000000741B
.text:000000000000741B loc_741B:                               ; CODE XREF: fts_safe_changedir+97↑j
.text:000000000000741B                 mov     ebx, 0FFFFFFFFh
.text:0000000000007420                 jmp     loc_72D5
.text:0000000000007425 ; ---------------------------------------------------------------------------
.text:0000000000007425
.text:0000000000007425 loc_7425:                               ; CODE XREF: fts_safe_changedir+118↑j
.text:0000000000007425                 call    ___stack_chk_fail ; PIC mode
.text:000000000000742A ; ---------------------------------------------------------------------------
.text:000000000000742A
.text:000000000000742A loc_742A:                               ; CODE XREF: fts_safe_changedir+70↑j
.text:000000000000742A                 test    bl, 2
.text:000000000000742D                 mov     r15d, r12d
.text:0000000000007430                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007435                 jz      loc_7326
.text:000000000000743B                 jmp     loc_7280
.text:0000000000007440 ; ---------------------------------------------------------------------------
.text:0000000000007440
.text:0000000000007440 loc_7440:                               ; CODE XREF: fts_safe_changedir+133↑j
.text:0000000000007440                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007445                 jmp     loc_7254
.text:0000000000007445 ; } // starts at 71D0
.text:0000000000007445 fts_safe_changedir endp
.text:0000000000007445
.text:0000000000007445 ; ---------------------------------------------------------------------------
.text:000000000000744A                 align 10h
.text:0000000000007450
.text:0000000000007450 ; =============== S U B R O U T I N E =======================================
.text:0000000000007450
.text:0000000000007450
.text:0000000000007450 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:0000000000007450                                         ; rpl_fts_read+383↓p
.text:0000000000007450 ; __unwind {
.text:0000000000007450                 and     edi, 102h
.text:0000000000007456                 push    r12
.text:0000000000007458                 mov     r12, rsi
.text:000000000000745B                 push    rbp
.text:000000000000745C                 push    rbx
.text:000000000000745D                 mov     rbx, rdx
.text:0000000000007460                 jz      short loc_74D0
.text:0000000000007462                 mov     edi, 18h        ; size
.text:0000000000007467                 call    _malloc
.text:000000000000746C                 test    rax, rax
.text:000000000000746F                 mov     rbp, rax
.text:0000000000007472                 jz      loc_74F8
.text:0000000000007478                 mov     rax, [rbx+78h]
.text:000000000000747C                 mov     rdi, [r12]
.text:0000000000007480                 mov     rsi, rbp
.text:0000000000007483                 mov     [rbp+10h], rbx
.text:0000000000007487                 mov     [rbp+0], rax
.text:000000000000748B                 mov     rax, [rbx+80h]
.text:0000000000007492                 mov     [rbp+8], rax
.text:0000000000007496                 call    hash_insert
.text:000000000000749B                 cmp     rbp, rax
.text:000000000000749E                 mov     r12, rax
.text:00000000000074A1                 jz      short loc_74C1
.text:00000000000074A3                 mov     rdi, rbp        ; ptr
.text:00000000000074A6                 call    free
.text:00000000000074AB                 test    r12, r12
.text:00000000000074AE                 jz      short loc_74F8
.text:00000000000074B0                 mov     rax, [r12+10h]
.text:00000000000074B5                 mov     ecx, 2
.text:00000000000074BA                 mov     [rbx+70h], cx
.text:00000000000074BE                 mov     [rbx], rax
.text:00000000000074C1
.text:00000000000074C1 loc_74C1:                               ; CODE XREF: enter_dir_isra_10+51↑j
.text:00000000000074C1                                         ; enter_dir_isra_10+8F↓j
.text:00000000000074C1                 pop     rbx
.text:00000000000074C2                 mov     eax, 1
.text:00000000000074C7                 pop     rbp
.text:00000000000074C8                 pop     r12
.text:00000000000074CA                 retn
.text:00000000000074CA ; ---------------------------------------------------------------------------
.text:00000000000074CB                 align 10h
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: enter_dir_isra_10+10↑j
.text:00000000000074D0                 mov     rdi, [r12]
.text:00000000000074D4                 lea     rsi, [rdx+78h]
.text:00000000000074D8                 call    cycle_check
.text:00000000000074DD                 test    al, al
.text:00000000000074DF                 jz      short loc_74C1
.text:00000000000074E1                 mov     edx, 2
.text:00000000000074E6                 mov     [rbx], rbx
.text:00000000000074E9                 mov     [rbx+70h], dx
.text:00000000000074ED                 pop     rbx
.text:00000000000074EE                 pop     rbp
.text:00000000000074EF                 pop     r12
.text:00000000000074F1                 retn
.text:00000000000074F1 ; ---------------------------------------------------------------------------
.text:00000000000074F2                 align 8
.text:00000000000074F8
.text:00000000000074F8 loc_74F8:                               ; CODE XREF: enter_dir_isra_10+22↑j
.text:00000000000074F8                                         ; enter_dir_isra_10+5E↑j
.text:00000000000074F8                 pop     rbx
.text:00000000000074F9                 xor     eax, eax
.text:00000000000074FB                 pop     rbp
.text:00000000000074FC                 pop     r12
.text:00000000000074FE                 retn
.text:00000000000074FE ; } // starts at 7450
.text:00000000000074FE enter_dir_isra_10 endp
.text:00000000000074FE
.text:00000000000074FE ; ---------------------------------------------------------------------------
.text:00000000000074FF                 align 20h
.text:0000000000007500
.text:0000000000007500 ; =============== S U B R O U T I N E =======================================
.text:0000000000007500
.text:0000000000007500
.text:0000000000007500 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:0000000000007500                                         ; rpl_fts_read+195↓p ...
.text:0000000000007500
.text:0000000000007500 var_28          = qword ptr -28h
.text:0000000000007500 var_20          = qword ptr -20h
.text:0000000000007500 var_10          = qword ptr -10h
.text:0000000000007500
.text:0000000000007500 ; __unwind {
.text:0000000000007500                 sub     rsp, 28h
.text:0000000000007504                 mov     rcx, rsi
.text:0000000000007507                 mov     rax, fs:28h
.text:0000000000007510                 mov     [rsp+28h+var_10], rax
.text:0000000000007515                 xor     eax, eax
.text:0000000000007517                 and     edi, 102h
.text:000000000000751D                 jnz     short loc_7560
.text:000000000000751F                 mov     rax, [rdx+8]
.text:0000000000007523                 test    rax, rax
.text:0000000000007526                 jz      short loc_7545
.text:0000000000007528                 cmp     qword ptr [rax+58h], 0
.text:000000000000752D                 js      short loc_7545
.text:000000000000752F                 mov     rcx, [rsi]
.text:0000000000007532                 cmp     qword ptr [rcx+10h], 0
.text:0000000000007537                 jz      short loc_75B3
.text:0000000000007539                 mov     rsi, [rdx+80h]
.text:0000000000007540                 cmp     [rcx], rsi
.text:0000000000007543                 jz      short loc_7590
.text:0000000000007545
.text:0000000000007545 loc_7545:                               ; CODE XREF: leave_dir_isra_12+26↑j
.text:0000000000007545                                         ; leave_dir_isra_12+2D↑j ...
.text:0000000000007545                 mov     rax, [rsp+28h+var_10]
.text:000000000000754A                 xor     rax, fs:28h
.text:0000000000007553                 jnz     short loc_75AE
.text:0000000000007555                 add     rsp, 28h
.text:0000000000007559                 retn
.text:0000000000007559 ; ---------------------------------------------------------------------------
.text:000000000000755A                 align 20h
.text:0000000000007560
.text:0000000000007560 loc_7560:                               ; CODE XREF: leave_dir_isra_12+1D↑j
.text:0000000000007560                 mov     rax, [rdx+78h]
.text:0000000000007564                 mov     rdi, [rcx]
.text:0000000000007567                 mov     rsi, rsp
.text:000000000000756A                 mov     [rsp+28h+var_28], rax
.text:000000000000756E                 mov     rax, [rdx+80h]
.text:0000000000007575                 mov     [rsp+28h+var_20], rax
.text:000000000000757A                 call    hash_delete
.text:000000000000757F                 test    rax, rax
.text:0000000000007582                 jz      short loc_75B3
.text:0000000000007584                 mov     rdi, rax        ; ptr
.text:0000000000007587                 call    free
.text:000000000000758C                 jmp     short loc_7545
.text:000000000000758C ; ---------------------------------------------------------------------------
.text:000000000000758E                 align 10h
.text:0000000000007590
.text:0000000000007590 loc_7590:                               ; CODE XREF: leave_dir_isra_12+43↑j
.text:0000000000007590                 mov     rsi, [rdx+78h]
.text:0000000000007594                 cmp     [rcx+8], rsi
.text:0000000000007598                 jnz     short loc_7545
.text:000000000000759A                 mov     rdx, [rax+78h]
.text:000000000000759E                 mov     rax, [rax+80h]
.text:00000000000075A5                 mov     [rcx+8], rdx
.text:00000000000075A9                 mov     [rcx], rax
.text:00000000000075AC                 jmp     short loc_7545
.text:00000000000075AE ; ---------------------------------------------------------------------------
.text:00000000000075AE
.text:00000000000075AE loc_75AE:                               ; CODE XREF: leave_dir_isra_12+53↑j
.text:00000000000075AE                 call    ___stack_chk_fail
.text:00000000000075B3 ; ---------------------------------------------------------------------------
.text:00000000000075B3
.text:00000000000075B3 loc_75B3:                               ; CODE XREF: leave_dir_isra_12+37↑j
.text:00000000000075B3                                         ; leave_dir_isra_12+82↑j
.text:00000000000075B3                 call    _abort
.text:00000000000075B3 ; } // starts at 7500
.text:00000000000075B3 leave_dir_isra_12 endp
.text:00000000000075B3
.text:00000000000075B3 ; ---------------------------------------------------------------------------
.text:00000000000075B8                 align 20h
.text:00000000000075C0
.text:00000000000075C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075C0
.text:00000000000075C0
.text:00000000000075C0 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:00000000000075C0                                         ; rpl_fts_read+619↓p ...
.text:00000000000075C0
.text:00000000000075C0 var_A0          = qword ptr -0A0h
.text:00000000000075C0 ptr             = qword ptr -98h
.text:00000000000075C0 var_90          = qword ptr -90h
.text:00000000000075C0 var_88          = qword ptr -88h
.text:00000000000075C0 var_80          = qword ptr -80h
.text:00000000000075C0 var_78          = qword ptr -78h
.text:00000000000075C0 var_70          = qword ptr -70h
.text:00000000000075C0 dest            = qword ptr -68h
.text:00000000000075C0 var_60          = qword ptr -60h
.text:00000000000075C0 var_58          = qword ptr -58h
.text:00000000000075C0 var_50          = dword ptr -50h
.text:00000000000075C0 var_4B          = byte ptr -4Bh
.text:00000000000075C0 var_4A          = byte ptr -4Ah
.text:00000000000075C0 var_49          = byte ptr -49h
.text:00000000000075C0 fd              = dword ptr -44h
.text:00000000000075C0 var_40          = qword ptr -40h
.text:00000000000075C0
.text:00000000000075C0 ; __unwind {
.text:00000000000075C0                 push    r15
.text:00000000000075C2                 push    r14
.text:00000000000075C4                 mov     r15, rdi
.text:00000000000075C7                 push    r13
.text:00000000000075C9                 push    r12
.text:00000000000075CB                 push    rbp
.text:00000000000075CC                 push    rbx
.text:00000000000075CD                 sub     rsp, 78h
.text:00000000000075D1                 mov     rbp, [rdi]
.text:00000000000075D4                 mov     rax, fs:28h
.text:00000000000075DD                 mov     [rsp+0A8h+var_40], rax
.text:00000000000075E2                 xor     eax, eax
.text:00000000000075E4                 mov     [rsp+0A8h+var_50], esi
.text:00000000000075E8                 mov     rax, [rbp+18h]
.text:00000000000075EC                 test    rax, rax
.text:00000000000075EF                 mov     [rsp+0A8h+var_58], rax
.text:00000000000075F4                 jz      loc_7A30
.text:00000000000075FA                 mov     rdi, rax        ; dirp
.text:00000000000075FD                 call    _dirfd
.text:0000000000007602                 test    eax, eax
.text:0000000000007604                 mov     [rsp+0A8h+fd], eax
.text:0000000000007608                 js      loc_7B60
.text:000000000000760E                 cmp     qword ptr [r15+40h], 0
.text:0000000000007613                 jz      loc_7DE8
.text:0000000000007619                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:0000000000007622
.text:0000000000007622 loc_7622:                               ; CODE XREF: fts_build+89F↓j
.text:0000000000007622                 mov     edi, [r15+48h]
.text:0000000000007626                 mov     [rsp+0A8h+var_49], 1
.text:000000000000762B
.text:000000000000762B loc_762B:                               ; CODE XREF: fts_build+57D↓j
.text:000000000000762B                                         ; fts_build+83A↓j ...
.text:000000000000762B                 mov     rcx, [rbp+48h]
.text:000000000000762F                 mov     rdx, [rbp+38h]
.text:0000000000007633                 mov     [rsp+0A8h+dest], 0
.text:000000000000763C                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:0000000000007641                 lea     rax, [rcx-1]
.text:0000000000007645                 cmovnz  rax, rcx
.text:0000000000007649                 and     edi, 4
.text:000000000000764C                 mov     [rsp+0A8h+var_60], rax
.text:0000000000007651                 jz      short loc_7663
.text:0000000000007653                 add     rax, [r15+20h]
.text:0000000000007657                 lea     rbx, [rax+1]
.text:000000000000765B                 mov     byte ptr [rax], 2Fh ; '/'
.text:000000000000765E                 mov     [rsp+0A8h+dest], rbx
.text:0000000000007663
.text:0000000000007663 loc_7663:                               ; CODE XREF: fts_build+91↑j
.text:0000000000007663                 mov     rax, [rsp+0A8h+var_60]
.text:0000000000007668                 mov     rbx, [r15+30h]
.text:000000000000766C                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000007671                 mov     [rsp+0A8h+var_4B], 0
.text:0000000000007676                 mov     [rsp+0A8h+var_A0], 0
.text:000000000000767F                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007688                 add     rax, 1
.text:000000000000768C                 mov     [rsp+0A8h+var_88], rbp
.text:0000000000007691                 sub     rbx, rax
.text:0000000000007694                 mov     [rsp+0A8h+var_90], rax
.text:0000000000007699                 mov     rax, [rbp+58h]
.text:000000000000769D                 mov     [rsp+0A8h+var_80], rbx
.text:00000000000076A2                 xor     ebx, ebx
.text:00000000000076A4                 add     rax, 1
.text:00000000000076A8                 mov     [rsp+0A8h+var_78], rax
.text:00000000000076AD                 jmp     loc_778F
.text:00000000000076AD ; ---------------------------------------------------------------------------
.text:00000000000076B2                 align 8
.text:00000000000076B8
.text:00000000000076B8 loc_76B8:                               ; CODE XREF: fts_build+242↓j
.text:00000000000076B8                                         ; fts_build+2A6↓j
.text:00000000000076B8                 mov     r9, r14
.text:00000000000076BB                 add     r9, [rsp+0A8h+var_90]
.text:00000000000076C0                 jb      loc_7F20
.text:00000000000076C6                 mov     rax, [rsp+0A8h+var_78]
.text:00000000000076CB                 lea     rsi, [r13+108h] ; src
.text:00000000000076D2                 mov     [r13+58h], rax
.text:00000000000076D6                 mov     rax, [r15]
.text:00000000000076D9                 mov     [r13+48h], r9
.text:00000000000076DD                 mov     [r13+8], rax
.text:00000000000076E1                 mov     rax, [rbp+0]
.text:00000000000076E5                 mov     [r13+80h], rax
.text:00000000000076EC                 mov     eax, [r15+48h]
.text:00000000000076F0                 test    al, 4
.text:00000000000076F2                 jnz     loc_7960
.text:00000000000076F8                 mov     [r13+30h], rsi
.text:00000000000076FC
.text:00000000000076FC loc_76FC:                               ; CODE XREF: fts_build+3BE↓j
.text:00000000000076FC                 cmp     qword ptr [r15+40h], 0
.text:0000000000007701                 jz      short loc_770C
.text:0000000000007703                 test    ah, 4
.text:0000000000007706                 jz      loc_7A08
.text:000000000000770C
.text:000000000000770C loc_770C:                               ; CODE XREF: fts_build+141↑j
.text:000000000000770C                 movzx   edx, byte ptr [rbp+12h]
.text:0000000000007710                 and     eax, 18h
.text:0000000000007713                 mov     esi, edx
.text:0000000000007715                 sub     edx, 1
.text:0000000000007718                 cmp     eax, 18h
.text:000000000000771B                 jz      loc_79D0
.text:0000000000007721
.text:0000000000007721 loc_7721:                               ; CODE XREF: fts_build+416↓j
.text:0000000000007721                 mov     ecx, 0Bh
.text:0000000000007726                 cmp     edx, 0Bh
.text:0000000000007729                 mov     [r13+70h], cx
.text:000000000000772E                 ja      loc_7998
.text:0000000000007734                 lea     rax, CSWTCH_53
.text:000000000000773B                 mov     eax, [rax+rdx*4]
.text:000000000000773E                 mov     [r13+90h], eax
.text:0000000000007745                 mov     eax, 2
.text:000000000000774A
.text:000000000000774A loc_774A:                               ; CODE XREF: fts_build+3E8↓j
.text:000000000000774A                                         ; fts_build+43F↓j ...
.text:000000000000774A                 mov     [r13+0A8h], rax
.text:0000000000007751
.text:0000000000007751 loc_7751:                               ; CODE XREF: fts_build+45A↓j
.text:0000000000007751                 cmp     [rsp+0A8h+ptr], 0
.text:0000000000007757                 mov     qword ptr [r13+10h], 0
.text:000000000000775F                 jz      loc_7988
.text:0000000000007765                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000776A                 mov     [rax+10h], r13
.text:000000000000776E
.text:000000000000776E loc_776E:                               ; CODE XREF: fts_build+3CD↓j
.text:000000000000776E                 cmp     rbx, 2710h
.text:0000000000007775                 jz      loc_7870
.text:000000000000777B
.text:000000000000777B loc_777B:                               ; CODE XREF: fts_build+2B5↓j
.text:000000000000777B                                         ; fts_build+645↓j
.text:000000000000777B                 add     rbx, 1
.text:000000000000777F                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000007784                 jnb     loc_78C8
.text:000000000000778A
.text:000000000000778A loc_778A:                               ; CODE XREF: fts_build+2FD↓j
.text:000000000000778A                                         ; fts_build+406↓j
.text:000000000000778A                 mov     [rsp+0A8h+var_A0], r13
.text:000000000000778F
.text:000000000000778F loc_778F:                               ; CODE XREF: fts_build+ED↑j
.text:000000000000778F                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000007794                 mov     r13, [rax+18h]
.text:0000000000007798                 test    r13, r13
.text:000000000000779B                 jz      loc_7C68
.text:00000000000077A1                 call    ___errno_location
.text:00000000000077A6                 mov     rdi, r13        ; dirp
.text:00000000000077A9                 mov     dword ptr [rax], 0
.text:00000000000077AF                 mov     r12, rax
.text:00000000000077B2                 call    _readdir
.text:00000000000077B7                 test    rax, rax
.text:00000000000077BA                 mov     rbp, rax
.text:00000000000077BD                 jz      loc_7D40
.text:00000000000077C3                 test    byte ptr [r15+48h], 20h
.text:00000000000077C8                 jnz     short loc_77D4
.text:00000000000077CA                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:00000000000077CE                 jz      loc_79B0
.text:00000000000077D4
.text:00000000000077D4 loc_77D4:                               ; CODE XREF: fts_build+208↑j
.text:00000000000077D4                                         ; fts_build+3FB↓j
.text:00000000000077D4                 lea     r13, [rbp+13h]
.text:00000000000077D8                 mov     rdi, r13        ; s
.text:00000000000077DB                 call    _strlen
.text:00000000000077E0                 mov     rsi, r13
.text:00000000000077E3                 mov     rdx, rax
.text:00000000000077E6                 mov     rdi, r15
.text:00000000000077E9                 mov     r14, rax
.text:00000000000077EC                 call    fts_alloc
.text:00000000000077F1                 test    rax, rax
.text:00000000000077F4                 mov     r13, rax
.text:00000000000077F7                 jz      loc_7C10
.text:00000000000077FD                 cmp     [rsp+0A8h+var_80], r14
.text:0000000000007802                 ja      loc_76B8
.text:0000000000007808                 mov     rax, [r15+20h]
.text:000000000000780C                 lea     rsi, [r15+30h]
.text:0000000000007810                 lea     rdi, [r15+20h]
.text:0000000000007814                 mov     [rsp+0A8h+var_80], rax
.text:0000000000007819                 mov     rax, [rsp+0A8h+var_60]
.text:000000000000781E                 lea     rdx, [rax+r14+2]
.text:0000000000007823                 call    fts_palloc_isra_2
.text:0000000000007828                 test    al, al
.text:000000000000782A                 jz      loc_7C10
.text:0000000000007830                 mov     rdx, [r15+20h]
.text:0000000000007834                 cmp     rdx, [rsp+0A8h+var_80]
.text:0000000000007839                 jz      loc_7A20
.text:000000000000783F                 add     rdx, [rsp+0A8h+var_90]
.text:0000000000007844                 test    byte ptr [r15+48h], 4
.text:0000000000007849                 cmovz   rdx, [rsp+0A8h+dest]
.text:000000000000784F                 mov     [rsp+0A8h+dest], rdx
.text:0000000000007854
.text:0000000000007854 loc_7854:                               ; CODE XREF: fts_build+465↓j
.text:0000000000007854                 mov     rcx, [r15+30h]
.text:0000000000007858                 sub     rcx, [rsp+0A8h+var_90]
.text:000000000000785D                 mov     [rsp+0A8h+var_4B], al
.text:0000000000007861                 mov     [rsp+0A8h+var_80], rcx
.text:0000000000007866                 jmp     loc_76B8
.text:0000000000007866 ; ---------------------------------------------------------------------------
.text:000000000000786B                 align 10h
.text:0000000000007870
.text:0000000000007870 loc_7870:                               ; CODE XREF: fts_build+1B5↑j
.text:0000000000007870                 cmp     qword ptr [r15+40h], 0
.text:0000000000007875                 jnz     loc_777B
.text:000000000000787B                 mov     esi, [rsp+0A8h+fd]
.text:000000000000787F                 mov     rdi, [rsp+0A8h+var_88]
.text:0000000000007884                 call    filesystem_type
.text:0000000000007889                 cmp     rax, 1021994h
.text:000000000000788F                 jz      loc_7C00
.text:0000000000007895                 mov     ecx, 0FF534D42h
.text:000000000000789A                 cmp     rax, rcx
.text:000000000000789D                 jz      loc_7C00
.text:00000000000078A3                 cmp     rax, 6969h
.text:00000000000078A9                 jz      loc_7C00
.text:00000000000078AF                 add     rbx, 1
.text:00000000000078B3                 cmp     rbx, [rsp+0A8h+var_70]
.text:00000000000078B8                 mov     [rsp+0A8h+var_4A], 1
.text:00000000000078BD                 jb      loc_778A
.text:00000000000078C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000078C8
.text:00000000000078C8 loc_78C8:                               ; CODE XREF: fts_build+1C4↑j
.text:00000000000078C8                 cmp     [rsp+0A8h+var_4B], 0
.text:00000000000078CD                 mov     rbp, [rsp+0A8h+var_88]
.text:00000000000078D2                 jz      loc_7C76
.text:00000000000078D8
.text:00000000000078D8 loc_78D8:                               ; CODE XREF: fts_build+6B0↓j
.text:00000000000078D8                 mov     rax, [r15+8]
.text:00000000000078DC                 mov     rcx, [r15+20h]
.text:00000000000078E0                 test    rax, rax
.text:00000000000078E3                 jz      short loc_7910
.text:00000000000078E5                 nop     dword ptr [rax]
.text:00000000000078E8
.text:00000000000078E8 loc_78E8:                               ; CODE XREF: fts_build+34E↓j
.text:00000000000078E8                 mov     rdx, [rax+30h]
.text:00000000000078EC                 lea     rsi, [rax+108h]
.text:00000000000078F3                 cmp     rdx, rsi
.text:00000000000078F6                 jz      short loc_7903
.text:00000000000078F8                 sub     rdx, [rax+38h]
.text:00000000000078FC                 add     rdx, rcx
.text:00000000000078FF                 mov     [rax+30h], rdx
.text:0000000000007903
.text:0000000000007903 loc_7903:                               ; CODE XREF: fts_build+336↑j
.text:0000000000007903                 mov     [rax+38h], rcx
.text:0000000000007907                 mov     rax, [rax+10h]
.text:000000000000790B                 test    rax, rax
.text:000000000000790E                 jnz     short loc_78E8
.text:0000000000007910
.text:0000000000007910 loc_7910:                               ; CODE XREF: fts_build+323↑j
.text:0000000000007910                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000007915                 jmp     short loc_7923
.text:0000000000007915 ; ---------------------------------------------------------------------------
.text:0000000000007917                 align 20h
.text:0000000000007920
.text:0000000000007920 loc_7920:                               ; CODE XREF: fts_build+394↓j
.text:0000000000007920                                         ; fts_build+39A↓j
.text:0000000000007920                 mov     rax, rdx
.text:0000000000007923
.text:0000000000007923 loc_7923:                               ; CODE XREF: fts_build+355↑j
.text:0000000000007923                 cmp     qword ptr [rax+58h], 0
.text:0000000000007928                 js      loc_7C76
.text:000000000000792E                 mov     rdx, [rax+30h]
.text:0000000000007932                 lea     rsi, [rax+108h]
.text:0000000000007939                 cmp     rdx, rsi
.text:000000000000793C                 jz      short loc_7949
.text:000000000000793E                 sub     rdx, [rax+38h]
.text:0000000000007942                 add     rdx, rcx
.text:0000000000007945                 mov     [rax+30h], rdx
.text:0000000000007949
.text:0000000000007949 loc_7949:                               ; CODE XREF: fts_build+37C↑j
.text:0000000000007949                 mov     rdx, [rax+10h]
.text:000000000000794D                 mov     [rax+38h], rcx
.text:0000000000007951                 test    rdx, rdx
.text:0000000000007954                 jnz     short loc_7920
.text:0000000000007956                 mov     rdx, [rax+8]
.text:000000000000795A                 jmp     short loc_7920
.text:000000000000795A ; ---------------------------------------------------------------------------
.text:000000000000795C                 align 20h
.text:0000000000007960
.text:0000000000007960 loc_7960:                               ; CODE XREF: fts_build+132↑j
.text:0000000000007960                 mov     rax, [r13+38h]
.text:0000000000007964                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:0000000000007969                 mov     [r13+30h], rax
.text:000000000000796D                 mov     rax, [r13+60h]
.text:0000000000007971                 lea     rdx, [rax+1]    ; n
.text:0000000000007975                 call    _memmove
.text:000000000000797A                 mov     eax, [r15+48h]
.text:000000000000797E                 jmp     loc_76FC
.text:000000000000797E ; ---------------------------------------------------------------------------
.text:0000000000007983                 align 8
.text:0000000000007988
.text:0000000000007988 loc_7988:                               ; CODE XREF: fts_build+19F↑j
.text:0000000000007988                 mov     [rsp+0A8h+ptr], r13
.text:000000000000798D                 jmp     loc_776E
.text:000000000000798D ; ---------------------------------------------------------------------------
.text:0000000000007992                 align 8
.text:0000000000007998
.text:0000000000007998 loc_7998:                               ; CODE XREF: fts_build+16E↑j
.text:0000000000007998                 mov     dword ptr [r13+90h], 0
.text:00000000000079A3                 mov     eax, 2
.text:00000000000079A8                 jmp     loc_774A
.text:00000000000079A8 ; ---------------------------------------------------------------------------
.text:00000000000079AD                 align 10h
.text:00000000000079B0
.text:00000000000079B0 loc_79B0:                               ; CODE XREF: fts_build+20E↑j
.text:00000000000079B0                 cmp     byte ptr [rax+14h], 0
.text:00000000000079B4                 jz      short loc_79C1
.text:00000000000079B6                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:00000000000079BB                 jnz     loc_77D4
.text:00000000000079C1
.text:00000000000079C1 loc_79C1:                               ; CODE XREF: fts_build+3F4↑j
.text:00000000000079C1                 mov     r13, [rsp+0A8h+var_A0]
.text:00000000000079C6                 jmp     loc_778A
.text:00000000000079C6 ; ---------------------------------------------------------------------------
.text:00000000000079CB                 align 10h
.text:00000000000079D0
.text:00000000000079D0 loc_79D0:                               ; CODE XREF: fts_build+15B↑j
.text:00000000000079D0                 and     esi, 0FBh
.text:00000000000079D6                 jz      loc_7721
.text:00000000000079DC                 mov     eax, 0Bh
.text:00000000000079E1                 cmp     edx, 0Bh
.text:00000000000079E4                 mov     [r13+70h], ax
.text:00000000000079E9                 jbe     loc_7F76
.text:00000000000079EF                 mov     dword ptr [r13+90h], 0
.text:00000000000079FA                 mov     eax, 1
.text:00000000000079FF                 jmp     loc_774A
.text:00000000000079FF ; ---------------------------------------------------------------------------
.text:0000000000007A04                 align 8
.text:0000000000007A08
.text:0000000000007A08 loc_7A08:                               ; CODE XREF: fts_build+146↑j
.text:0000000000007A08                 xor     edx, edx
.text:0000000000007A0A                 mov     rsi, r13
.text:0000000000007A0D                 mov     rdi, r15
.text:0000000000007A10                 call    fts_stat
.text:0000000000007A15                 mov     [r13+70h], ax
.text:0000000000007A1A                 jmp     loc_7751
.text:0000000000007A1A ; ---------------------------------------------------------------------------
.text:0000000000007A1F                 align 20h
.text:0000000000007A20
.text:0000000000007A20 loc_7A20:                               ; CODE XREF: fts_build+279↑j
.text:0000000000007A20                 movzx   eax, [rsp+0A8h+var_4B]
.text:0000000000007A25                 jmp     loc_7854
.text:0000000000007A25 ; ---------------------------------------------------------------------------
.text:0000000000007A2A                 align 10h
.text:0000000000007A30
.text:0000000000007A30 loc_7A30:                               ; CODE XREF: fts_build+34↑j
.text:0000000000007A30                 mov     eax, [rdi+48h]
.text:0000000000007A33                 mov     edx, eax
.text:0000000000007A35                 and     edx, 10h
.text:0000000000007A38                 jz      short loc_7A47
.text:0000000000007A3A                 test    al, 1
.text:0000000000007A3C                 mov     edx, 20000h
.text:0000000000007A41                 jnz     loc_7B48
.text:0000000000007A47
.text:0000000000007A47 loc_7A47:                               ; CODE XREF: fts_build+478↑j
.text:0000000000007A47                                         ; fts_build+595↓j
.text:0000000000007A47                 and     eax, 204h
.text:0000000000007A4C                 mov     rsi, [rbp+30h]
.text:0000000000007A50                 mov     edi, 0FFFFFF9Ch
.text:0000000000007A55                 cmp     eax, 200h
.text:0000000000007A5A                 jnz     short loc_7A60
.text:0000000000007A5C                 mov     edi, [r15+2Ch]
.text:0000000000007A60
.text:0000000000007A60 loc_7A60:                               ; CODE XREF: fts_build+49A↑j
.text:0000000000007A60                 lea     rcx, [rsp+0A8h+fd]
.text:0000000000007A65                 call    opendirat
.text:0000000000007A6A                 test    rax, rax
.text:0000000000007A6D                 mov     [rbp+18h], rax
.text:0000000000007A71                 jz      loc_7D90
.text:0000000000007A77                 cmp     word ptr [rbp+70h], 0Bh
.text:0000000000007A7C                 jz      loc_7E10
.text:0000000000007A82                 mov     edi, [r15+48h]
.text:0000000000007A86                 test    edi, 100h
.text:0000000000007A8C                 jnz     loc_7BB0
.text:0000000000007A92
.text:0000000000007A92 loc_7A92:                               ; CODE XREF: fts_build+61D↓j
.text:0000000000007A92                                         ; fts_build+861↓j
.text:0000000000007A92                 cmp     qword ptr [r15+40h], 1
.text:0000000000007A97                 sbb     rax, rax
.text:0000000000007A9A                 and     eax, 186A1h
.text:0000000000007A9F                 sub     rax, 1
.text:0000000000007AA3                 cmp     [rsp+0A8h+var_50], 2
.text:0000000000007AA8                 mov     [rsp+0A8h+var_70], rax
.text:0000000000007AAD                 jz      loc_7E00
.text:0000000000007AB3                 mov     edx, [r15+48h]
.text:0000000000007AB7                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007ABB                 and     edx, 38h
.text:0000000000007ABE                 cmp     edx, 18h
.text:0000000000007AC1                 jz      loc_7E64
.text:0000000000007AC7
.text:0000000000007AC7 loc_7AC7:                               ; CODE XREF: fts_build+8AC↓j
.text:0000000000007AC7                                         ; fts_build+8C4↓j
.text:0000000000007AC7                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007ACC                 mov     r12d, 1
.text:0000000000007AD2                 setz    bl
.text:0000000000007AD5
.text:0000000000007AD5 loc_7AD5:                               ; CODE XREF: fts_build+955↓j
.text:0000000000007AD5                 test    byte ptr [r15+49h], 2
.text:0000000000007ADA                 jnz     loc_7EBC
.text:0000000000007AE0
.text:0000000000007AE0 loc_7AE0:                               ; CODE XREF: fts_build+913↓j
.text:0000000000007AE0                 test    eax, eax
.text:0000000000007AE2                 jns     loc_7E48
.text:0000000000007AE8
.text:0000000000007AE8 loc_7AE8:                               ; CODE XREF: fts_build+899↓j
.text:0000000000007AE8                 test    bl, bl
.text:0000000000007AEA                 jz      short loc_7AFB
.text:0000000000007AEC                 test    r12b, r12b
.text:0000000000007AEF                 jz      short loc_7AFB
.text:0000000000007AF1                 call    ___errno_location
.text:0000000000007AF6                 mov     eax, [rax]
.text:0000000000007AF8                 mov     [rbp+40h], eax
.text:0000000000007AFB
.text:0000000000007AFB loc_7AFB:                               ; CODE XREF: fts_build+52A↑j
.text:0000000000007AFB                                         ; fts_build+52F↑j
.text:0000000000007AFB                 or      word ptr [rbp+72h], 1
.text:0000000000007B00                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007B04                 call    _closedir
.text:0000000000007B09                 mov     edi, [r15+48h]
.text:0000000000007B0D                 mov     qword ptr [rbp+18h], 0
.text:0000000000007B15                 test    edi, 200h
.text:0000000000007B1B                 jz      short loc_7B30
.text:0000000000007B1D                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007B21                 test    eax, eax
.text:0000000000007B23                 js      short loc_7B30
.text:0000000000007B25                 mov     edi, eax        ; fd
.text:0000000000007B27                 call    _close
.text:0000000000007B2C                 mov     edi, [r15+48h]
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: fts_build+55B↑j
.text:0000000000007B30                                         ; fts_build+563↑j
.text:0000000000007B30                 mov     qword ptr [rbp+18h], 0
.text:0000000000007B38                 mov     [rsp+0A8h+var_49], 0
.text:0000000000007B3D                 jmp     loc_762B
.text:0000000000007B3D ; ---------------------------------------------------------------------------
.text:0000000000007B42                 align 8
.text:0000000000007B48
.text:0000000000007B48 loc_7B48:                               ; CODE XREF: fts_build+481↑j
.text:0000000000007B48                 xor     edx, edx
.text:0000000000007B4A                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007B4F                 setnz   dl
.text:0000000000007B52                 shl     edx, 11h
.text:0000000000007B55                 jmp     loc_7A47
.text:0000000000007B55 ; ---------------------------------------------------------------------------
.text:0000000000007B5A                 align 20h
.text:0000000000007B60
.text:0000000000007B60 loc_7B60:                               ; CODE XREF: fts_build+48↑j
.text:0000000000007B60                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007B64                 call    _closedir
.text:0000000000007B69                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007B6E                 mov     qword ptr [rbp+18h], 0
.text:0000000000007B76                 jz      loc_7D9B
.text:0000000000007B7C
.text:0000000000007B7C loc_7B7C:                               ; CODE XREF: fts_build+7D5↓j
.text:0000000000007B7C                                         ; fts_build+7F0↓j
.text:0000000000007B7C                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007B85
.text:0000000000007B85 loc_7B85:                               ; CODE XREF: fts_build+637↓j
.text:0000000000007B85                                         ; fts_build+69C↓j ...
.text:0000000000007B85                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000007B8A                 xor     rbx, fs:28h
.text:0000000000007B93                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000007B98                 jnz     loc_7F71
.text:0000000000007B9E                 add     rsp, 78h
.text:0000000000007BA2                 pop     rbx
.text:0000000000007BA3                 pop     rbp
.text:0000000000007BA4                 pop     r12
.text:0000000000007BA6                 pop     r13
.text:0000000000007BA8                 pop     r14
.text:0000000000007BAA                 pop     r15
.text:0000000000007BAC                 retn
.text:0000000000007BAC ; ---------------------------------------------------------------------------
.text:0000000000007BAD                 align 10h
.text:0000000000007BB0
.text:0000000000007BB0 loc_7BB0:                               ; CODE XREF: fts_build+4CC↑j
.text:0000000000007BB0                 lea     rbx, [r15+58h]
.text:0000000000007BB4                 mov     rdx, rbp
.text:0000000000007BB7                 mov     rsi, rbx
.text:0000000000007BBA                 call    leave_dir_isra_12
.text:0000000000007BBF                 xor     edx, edx
.text:0000000000007BC1                 mov     rsi, rbp
.text:0000000000007BC4                 mov     rdi, r15
.text:0000000000007BC7                 call    fts_stat
.text:0000000000007BCC                 mov     edi, [r15+48h]
.text:0000000000007BD0                 mov     rdx, rbp
.text:0000000000007BD3                 mov     rsi, rbx
.text:0000000000007BD6                 call    enter_dir_isra_10
.text:0000000000007BDB                 test    al, al
.text:0000000000007BDD                 jnz     loc_7A92
.text:0000000000007BE3                 call    ___errno_location
.text:0000000000007BE8                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007BF1                 mov     dword ptr [rax], 0Ch
.text:0000000000007BF7                 jmp     short loc_7B85
.text:0000000000007BF7 ; ---------------------------------------------------------------------------
.text:0000000000007BF9                 align 20h
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: fts_build+2CF↑j
.text:0000000000007C00                                         ; fts_build+2DD↑j ...
.text:0000000000007C00                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000007C05                 jmp     loc_777B
.text:0000000000007C05 ; ---------------------------------------------------------------------------
.text:0000000000007C0A                 align 10h
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: fts_build+237↑j
.text:0000000000007C10                                         ; fts_build+26A↑j
.text:0000000000007C10                 mov     rdi, r13        ; ptr
.text:0000000000007C13                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007C18                 mov     ebx, [r12]
.text:0000000000007C1C                 call    free
.text:0000000000007C21                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007C26                 call    fts_lfree
.text:0000000000007C2B                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007C2F                 call    _closedir
.text:0000000000007C34                 mov     r9d, 7
.text:0000000000007C3A                 mov     qword ptr [rbp+18h], 0
.text:0000000000007C42                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007C4B                 mov     [rbp+70h], r9w
.text:0000000000007C50                 or      dword ptr [r15+48h], 2000h
.text:0000000000007C58                 mov     [r12], ebx
.text:0000000000007C5C                 jmp     loc_7B85
.text:0000000000007C5C ; ---------------------------------------------------------------------------
.text:0000000000007C61                 align 8
.text:0000000000007C68
.text:0000000000007C68 loc_7C68:                               ; CODE XREF: fts_build+1DB↑j
.text:0000000000007C68                 mov     rbp, rax
.text:0000000000007C6B
.text:0000000000007C6B loc_7C6B:                               ; CODE XREF: fts_build+7B5↓j
.text:0000000000007C6B                                         ; fts_build+7C8↓j
.text:0000000000007C6B                 cmp     [rsp+0A8h+var_4B], 0
.text:0000000000007C70                 jnz     loc_78D8
.text:0000000000007C76
.text:0000000000007C76 loc_7C76:                               ; CODE XREF: fts_build+312↑j
.text:0000000000007C76                                         ; fts_build+368↑j
.text:0000000000007C76                 test    byte ptr [r15+48h], 4
.text:0000000000007C7B                 jz      short loc_7C9B
.text:0000000000007C7D                 mov     rax, [rsp+0A8h+var_90]
.text:0000000000007C82                 cmp     [r15+30h], rax
.text:0000000000007C86                 jz      short loc_7C8D
.text:0000000000007C88                 test    rbx, rbx
.text:0000000000007C8B                 jnz     short loc_7C93
.text:0000000000007C8D
.text:0000000000007C8D loc_7C8D:                               ; CODE XREF: fts_build+6C6↑j
.text:0000000000007C8D                 sub     [rsp+0A8h+dest], 1
.text:0000000000007C93
.text:0000000000007C93 loc_7C93:                               ; CODE XREF: fts_build+6CB↑j
.text:0000000000007C93                 mov     rax, [rsp+0A8h+dest]
.text:0000000000007C98                 mov     byte ptr [rax], 0
.text:0000000000007C9B
.text:0000000000007C9B loc_7C9B:                               ; CODE XREF: fts_build+6BB↑j
.text:0000000000007C9B                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000007CA1                 jnz     short loc_7D10
.text:0000000000007CA3                 cmp     [rsp+0A8h+var_49], 0
.text:0000000000007CA8                 jz      short loc_7D10
.text:0000000000007CAA                 cmp     [rsp+0A8h+var_50], 1
.text:0000000000007CAF                 jz      short loc_7CF0
.text:0000000000007CB1                 test    rbx, rbx
.text:0000000000007CB4                 jz      short loc_7CF0
.text:0000000000007CB6
.text:0000000000007CB6 loc_7CB6:                               ; CODE XREF: fts_build+753↓j
.text:0000000000007CB6                 cmp     [rsp+0A8h+var_4A], 0
.text:0000000000007CBB                 jnz     loc_7DB8
.text:0000000000007CC1                 cmp     qword ptr [r15+40h], 0
.text:0000000000007CC6                 jz      loc_7B85
.text:0000000000007CCC                 cmp     rbx, 1
.text:0000000000007CD0                 jz      loc_7B85
.text:0000000000007CD6                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000007CDB                 mov     rdx, rbx
.text:0000000000007CDE                 mov     rdi, r15
.text:0000000000007CE1                 call    fts_sort
.text:0000000000007CE6                 mov     [rsp+0A8h+ptr], rax
.text:0000000000007CEB                 jmp     loc_7B85
.text:0000000000007CF0 ; ---------------------------------------------------------------------------
.text:0000000000007CF0
.text:0000000000007CF0 loc_7CF0:                               ; CODE XREF: fts_build+6EF↑j
.text:0000000000007CF0                                         ; fts_build+6F4↑j
.text:0000000000007CF0                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007CF5                 jnz     loc_7E26
.text:0000000000007CFB                 mov     rdi, r15
.text:0000000000007CFE                 call    restore_initial_cwd
.text:0000000000007D03                 test    eax, eax
.text:0000000000007D05                 setnz   al
.text:0000000000007D08
.text:0000000000007D08 loc_7D08:                               ; CODE XREF: fts_build+883↓j
.text:0000000000007D08                 test    al, al
.text:0000000000007D0A                 jnz     loc_7E93
.text:0000000000007D10
.text:0000000000007D10 loc_7D10:                               ; CODE XREF: fts_build+6E1↑j
.text:0000000000007D10                                         ; fts_build+6E8↑j
.text:0000000000007D10                 test    rbx, rbx
.text:0000000000007D13                 jnz     short loc_7CB6
.text:0000000000007D15                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007D1A                 jz      loc_7ED8
.text:0000000000007D20
.text:0000000000007D20 loc_7D20:                               ; CODE XREF: fts_build+920↓j
.text:0000000000007D20                                         ; fts_build+92A↓j ...
.text:0000000000007D20                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007D25                 call    fts_lfree
.text:0000000000007D2A                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007D33                 jmp     loc_7B85
.text:0000000000007D33 ; ---------------------------------------------------------------------------
.text:0000000000007D38                 align 20h
.text:0000000000007D40
.text:0000000000007D40 loc_7D40:                               ; CODE XREF: fts_build+1FD↑j
.text:0000000000007D40                 mov     eax, [r12]
.text:0000000000007D44                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007D49                 test    eax, eax
.text:0000000000007D4B                 jz      short loc_7D6E
.text:0000000000007D4D                 test    rbx, rbx
.text:0000000000007D50                 mov     [rbp+40h], eax
.text:0000000000007D53                 jnz     loc_7E89
.text:0000000000007D59                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000007D5F                 mov     eax, 4
.text:0000000000007D64                 jnz     loc_7E89
.text:0000000000007D6A
.text:0000000000007D6A loc_7D6A:                               ; CODE XREF: fts_build+8CE↓j
.text:0000000000007D6A                 mov     [rbp+70h], ax
.text:0000000000007D6E
.text:0000000000007D6E loc_7D6E:                               ; CODE XREF: fts_build+78B↑j
.text:0000000000007D6E                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007D72                 test    rdi, rdi
.text:0000000000007D75                 jz      loc_7C6B
.text:0000000000007D7B                 call    _closedir
.text:0000000000007D80                 mov     qword ptr [rbp+18h], 0
.text:0000000000007D88                 jmp     loc_7C6B
.text:0000000000007D88 ; ---------------------------------------------------------------------------
.text:0000000000007D8D                 align 10h
.text:0000000000007D90
.text:0000000000007D90 loc_7D90:                               ; CODE XREF: fts_build+4B1↑j
.text:0000000000007D90                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007D95                 jnz     loc_7B7C
.text:0000000000007D9B
.text:0000000000007D9B loc_7D9B:                               ; CODE XREF: fts_build+5B6↑j
.text:0000000000007D9B                 mov     r10d, 4
.text:0000000000007DA1                 mov     [rbp+70h], r10w
.text:0000000000007DA6                 call    ___errno_location
.text:0000000000007DAB                 mov     eax, [rax]
.text:0000000000007DAD                 mov     [rbp+40h], eax
.text:0000000000007DB0                 jmp     loc_7B7C
.text:0000000000007DB0 ; ---------------------------------------------------------------------------
.text:0000000000007DB5                 align 8
.text:0000000000007DB8
.text:0000000000007DB8 loc_7DB8:                               ; CODE XREF: fts_build+6FB↑j
.text:0000000000007DB8                 lea     rax, fts_compare_ino
.text:0000000000007DBF                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000007DC4                 mov     rdx, rbx
.text:0000000000007DC7                 mov     rdi, r15
.text:0000000000007DCA                 mov     [r15+40h], rax
.text:0000000000007DCE                 call    fts_sort
.text:0000000000007DD3                 mov     qword ptr [r15+40h], 0
.text:0000000000007DDB                 mov     [rsp+0A8h+ptr], rax
.text:0000000000007DE0                 jmp     loc_7B85
.text:0000000000007DE0 ; ---------------------------------------------------------------------------
.text:0000000000007DE5                 align 8
.text:0000000000007DE8
.text:0000000000007DE8 loc_7DE8:                               ; CODE XREF: fts_build+53↑j
.text:0000000000007DE8                 mov     [rsp+0A8h+var_70], 186A0h
.text:0000000000007DF1                 mov     [rsp+0A8h+var_49], 1
.text:0000000000007DF6                 mov     edi, [r15+48h]
.text:0000000000007DFA                 jmp     loc_762B
.text:0000000000007DFA ; ---------------------------------------------------------------------------
.text:0000000000007DFF                 align 20h
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: fts_build+4ED↑j
.text:0000000000007E00                                         ; fts_build+943↓j
.text:0000000000007E00                 mov     [rsp+0A8h+var_49], 0
.text:0000000000007E05                 mov     edi, [r15+48h]
.text:0000000000007E09                 jmp     loc_762B
.text:0000000000007E09 ; ---------------------------------------------------------------------------
.text:0000000000007E0E                 align 10h
.text:0000000000007E10
.text:0000000000007E10 loc_7E10:                               ; CODE XREF: fts_build+4BC↑j
.text:0000000000007E10                 xor     edx, edx
.text:0000000000007E12                 mov     rsi, rbp
.text:0000000000007E15                 mov     rdi, r15
.text:0000000000007E18                 call    fts_stat
.text:0000000000007E1D                 mov     [rbp+70h], ax
.text:0000000000007E21                 jmp     loc_7A92
.text:0000000000007E26 ; ---------------------------------------------------------------------------
.text:0000000000007E26
.text:0000000000007E26 loc_7E26:                               ; CODE XREF: fts_build+735↑j
.text:0000000000007E26                 mov     rsi, [rbp+8]
.text:0000000000007E2A                 lea     rcx, asc_B4BE   ; ".."
.text:0000000000007E31                 mov     edx, 0FFFFFFFFh
.text:0000000000007E36                 mov     rdi, r15
.text:0000000000007E39                 call    fts_safe_changedir
.text:0000000000007E3E                 test    eax, eax
.text:0000000000007E40                 setnz   al
.text:0000000000007E43                 jmp     loc_7D08
.text:0000000000007E48 ; ---------------------------------------------------------------------------
.text:0000000000007E48
.text:0000000000007E48 loc_7E48:                               ; CODE XREF: fts_build+522↑j
.text:0000000000007E48                 xor     ecx, ecx
.text:0000000000007E4A                 mov     edx, eax
.text:0000000000007E4C                 mov     rsi, rbp
.text:0000000000007E4F                 mov     rdi, r15
.text:0000000000007E52                 call    fts_safe_changedir
.text:0000000000007E57                 test    eax, eax
.text:0000000000007E59                 jnz     loc_7AE8
.text:0000000000007E5F                 jmp     loc_7622
.text:0000000000007E64 ; ---------------------------------------------------------------------------
.text:0000000000007E64
.text:0000000000007E64 loc_7E64:                               ; CODE XREF: fts_build+501↑j
.text:0000000000007E64                 cmp     qword ptr [rbp+88h], 2
.text:0000000000007E6C                 jnz     loc_7AC7
.text:0000000000007E72                 mov     esi, eax
.text:0000000000007E74                 mov     rdi, rbp
.text:0000000000007E77                 call    leaf_optimization
.text:0000000000007E7C                 test    eax, eax
.text:0000000000007E7E                 jnz     short loc_7EFE
.text:0000000000007E80                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007E84                 jmp     loc_7AC7
.text:0000000000007E89 ; ---------------------------------------------------------------------------
.text:0000000000007E89
.text:0000000000007E89 loc_7E89:                               ; CODE XREF: fts_build+793↑j
.text:0000000000007E89                                         ; fts_build+7A4↑j
.text:0000000000007E89                 mov     eax, 7
.text:0000000000007E8E                 jmp     loc_7D6A
.text:0000000000007E93 ; ---------------------------------------------------------------------------
.text:0000000000007E93
.text:0000000000007E93 loc_7E93:                               ; CODE XREF: fts_build+74A↑j
.text:0000000000007E93                 mov     edi, 7
.text:0000000000007E98                 mov     [rbp+70h], di
.text:0000000000007E9C                 or      dword ptr [r15+48h], 2000h
.text:0000000000007EA4                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007EA9                 call    fts_lfree
.text:0000000000007EAE                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007EB7                 jmp     loc_7B85
.text:0000000000007EBC ; ---------------------------------------------------------------------------
.text:0000000000007EBC
.text:0000000000007EBC loc_7EBC:                               ; CODE XREF: fts_build+51A↑j
.text:0000000000007EBC                 mov     edi, eax        ; fd
.text:0000000000007EBE                 mov     edx, 3
.text:0000000000007EC3                 mov     esi, 406h
.text:0000000000007EC8                 xor     eax, eax
.text:0000000000007ECA                 call    rpl_fcntl
.text:0000000000007ECF                 mov     [rsp+0A8h+fd], eax
.text:0000000000007ED3                 jmp     loc_7AE0
.text:0000000000007ED8 ; ---------------------------------------------------------------------------
.text:0000000000007ED8
.text:0000000000007ED8 loc_7ED8:                               ; CODE XREF: fts_build+75A↑j
.text:0000000000007ED8                 movzx   eax, word ptr [rbp+70h]
.text:0000000000007EDC                 cmp     ax, 7
.text:0000000000007EE0                 jz      loc_7D20
.text:0000000000007EE6                 cmp     ax, 4
.text:0000000000007EEA                 jz      loc_7D20
.text:0000000000007EF0                 mov     esi, 6
.text:0000000000007EF5                 mov     [rbp+70h], si
.text:0000000000007EF9                 jmp     loc_7D20
.text:0000000000007EFE ; ---------------------------------------------------------------------------
.text:0000000000007EFE
.text:0000000000007EFE loc_7EFE:                               ; CODE XREF: fts_build+8BE↑j
.text:0000000000007EFE                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007F03                 jnz     loc_7E00
.text:0000000000007F09                 mov     eax, [rsp+0A8h+fd]
.text:0000000000007F0D                 xor     r12d, r12d
.text:0000000000007F10                 mov     ebx, 1
.text:0000000000007F15                 jmp     loc_7AD5
.text:0000000000007F15 ; ---------------------------------------------------------------------------
.text:0000000000007F1A                 align 20h
.text:0000000000007F20
.text:0000000000007F20 loc_7F20:                               ; CODE XREF: fts_build+100↑j
.text:0000000000007F20                 mov     rdi, r13        ; ptr
.text:0000000000007F23                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007F28                 call    free
.text:0000000000007F2D                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007F32                 call    fts_lfree
.text:0000000000007F37                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000007F3B                 call    _closedir
.text:0000000000007F40                 mov     r8d, 7
.text:0000000000007F46                 mov     qword ptr [rbp+18h], 0
.text:0000000000007F4E                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007F57                 mov     [rbp+70h], r8w
.text:0000000000007F5C                 or      dword ptr [r15+48h], 2000h
.text:0000000000007F64                 mov     dword ptr [r12], 24h ; '$'
.text:0000000000007F6C                 jmp     loc_7B85
.text:0000000000007F71 ; ---------------------------------------------------------------------------
.text:0000000000007F71
.text:0000000000007F71 loc_7F71:                               ; CODE XREF: fts_build+5D8↑j
.text:0000000000007F71                 call    ___stack_chk_fail
.text:0000000000007F76 ; ---------------------------------------------------------------------------
.text:0000000000007F76
.text:0000000000007F76 loc_7F76:                               ; CODE XREF: fts_build+429↑j
.text:0000000000007F76                 lea     rax, CSWTCH_53
.text:0000000000007F7D                 mov     eax, [rax+rdx*4]
.text:0000000000007F80                 mov     [r13+90h], eax
.text:0000000000007F87                 mov     eax, 1
.text:0000000000007F8C                 jmp     loc_774A
.text:0000000000007F8C ; } // starts at 75C0
.text:0000000000007F8C fts_build       endp
.text:0000000000007F8C
.text:0000000000007F8C ; ---------------------------------------------------------------------------
.text:0000000000007F91                 align 20h
.text:0000000000007FA0
.text:0000000000007FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FA0
.text:0000000000007FA0
.text:0000000000007FA0                 public rpl_fts_open
.text:0000000000007FA0 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:0000000000007FA0
.text:0000000000007FA0 var_50          = qword ptr -50h
.text:0000000000007FA0 var_42          = byte ptr -42h
.text:0000000000007FA0 var_41          = byte ptr -41h
.text:0000000000007FA0 var_40          = qword ptr -40h
.text:0000000000007FA0
.text:0000000000007FA0 ; __unwind {
.text:0000000000007FA0                 push    r15
.text:0000000000007FA2                 push    r14
.text:0000000000007FA4                 push    r13
.text:0000000000007FA6                 push    r12
.text:0000000000007FA8                 push    rbp
.text:0000000000007FA9                 push    rbx
.text:0000000000007FAA                 sub     rsp, 28h
.text:0000000000007FAE                 test    esi, 0FFFFF000h
.text:0000000000007FB4                 jnz     loc_8338
.text:0000000000007FBA                 mov     eax, esi
.text:0000000000007FBC                 mov     ebp, esi
.text:0000000000007FBE                 and     eax, 204h
.text:0000000000007FC3                 cmp     eax, 204h
.text:0000000000007FC8                 jz      loc_8338
.text:0000000000007FCE                 test    sil, 12h
.text:0000000000007FD2                 jz      loc_8338
.text:0000000000007FD8                 mov     r13, rdi
.text:0000000000007FDB                 mov     esi, 1          ; size
.text:0000000000007FE0                 mov     edi, 80h        ; nmemb
.text:0000000000007FE5                 mov     r14, rdx
.text:0000000000007FE8                 call    _calloc
.text:0000000000007FED                 test    rax, rax
.text:0000000000007FF0                 mov     rbx, rax
.text:0000000000007FF3                 jz      loc_824E
.text:0000000000007FF9                 test    bpl, 2
.text:0000000000007FFD                 mov     [rax+40h], r14
.text:0000000000008001                 jnz     loc_8260
.text:0000000000008007                 mov     rdi, [r13+0]    ; s
.text:000000000000800B                 mov     [rax+48h], ebp
.text:000000000000800E                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000008015                 test    rdi, rdi
.text:0000000000008018                 jz      loc_827F
.text:000000000000801E
.text:000000000000801E loc_801E:                               ; CODE XREF: rpl_fts_open+2D9↓j
.text:000000000000801E                 mov     r15, r13
.text:0000000000008021                 xor     r12d, r12d
.text:0000000000008024                 nop     dword ptr [rax+00h]
.text:0000000000008028
.text:0000000000008028 loc_8028:                               ; CODE XREF: rpl_fts_open+9E↓j
.text:0000000000008028                 call    _strlen
.text:000000000000802D                 cmp     r12, rax
.text:0000000000008030                 cmovb   r12, rax
.text:0000000000008034                 add     r15, 8
.text:0000000000008038                 mov     rdi, [r15]
.text:000000000000803B                 test    rdi, rdi
.text:000000000000803E                 jnz     short loc_8028
.text:0000000000008040                 lea     rdx, [r12+1]
.text:0000000000008045                 mov     eax, 1000h
.text:000000000000804A                 cmp     rdx, 1000h
.text:0000000000008051                 cmovb   rdx, rax
.text:0000000000008055
.text:0000000000008055 loc_8055:                               ; CODE XREF: rpl_fts_open+2E4↓j
.text:0000000000008055                 lea     rsi, [rbx+30h]
.text:0000000000008059                 lea     rdi, [rbx+20h]
.text:000000000000805D                 call    fts_palloc_isra_2
.text:0000000000008062                 test    al, al
.text:0000000000008064                 mov     [rsp+58h+var_42], al
.text:0000000000008068                 jz      loc_8309
.text:000000000000806E                 mov     rsi, [r13+0]
.text:0000000000008072                 test    rsi, rsi
.text:0000000000008075                 jz      loc_8320
.text:000000000000807B                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000008082                 xor     edx, edx
.text:0000000000008084                 mov     rdi, rbx
.text:0000000000008087                 call    fts_alloc
.text:000000000000808C                 test    rax, rax
.text:000000000000808F                 mov     r15, rax
.text:0000000000008092                 jz      loc_8300
.text:0000000000008098                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000809F                 test    r14, r14
.text:00000000000080A2                 mov     rsi, [r13+0]
.text:00000000000080A6                 mov     [r15+58h], rax
.text:00000000000080AA                 mov     [r15+68h], rax
.text:00000000000080AE                 jz      short loc_80BD
.text:00000000000080B0
.text:00000000000080B0 loc_80B0:                               ; CODE XREF: rpl_fts_open+386↓j
.text:00000000000080B0                 mov     eax, [rbx+48h]
.text:00000000000080B3                 shr     eax, 0Ah
.text:00000000000080B6                 and     eax, 1
.text:00000000000080B9                 mov     [rsp+58h+var_42], al
.text:00000000000080BD
.text:00000000000080BD loc_80BD:                               ; CODE XREF: rpl_fts_open+10E↑j
.text:00000000000080BD                 test    rsi, rsi
.text:00000000000080C0                 jz      loc_832C
.text:00000000000080C6                 shr     ebp, 0Bh
.text:00000000000080C9                 mov     [rsp+58h+var_40], 0
.text:00000000000080D2                 xor     r12d, r12d
.text:00000000000080D5                 xor     ebp, 1
.text:00000000000080D8                 mov     eax, ebp
.text:00000000000080DA                 xor     ebp, ebp
.text:00000000000080DC                 and     eax, 1
.text:00000000000080DF                 mov     [rsp+58h+var_41], al
.text:00000000000080E3                 jmp     short loc_815C
.text:00000000000080E3 ; ---------------------------------------------------------------------------
.text:00000000000080E5                 align 8
.text:00000000000080E8
.text:00000000000080E8 loc_80E8:                               ; CODE XREF: rpl_fts_open+1D2↓j
.text:00000000000080E8                                         ; rpl_fts_open+1DD↓j ...
.text:00000000000080E8                 mov     rdx, rax
.text:00000000000080EB                 mov     rdi, rbx
.text:00000000000080EE                 call    fts_alloc
.text:00000000000080F3                 test    rax, rax
.text:00000000000080F6                 mov     rcx, rax
.text:00000000000080F9                 jz      loc_82F0
.text:00000000000080FF                 mov     qword ptr [rax+58h], 0
.text:0000000000008107                 mov     [rax+8], r15
.text:000000000000810B                 lea     rax, [rax+108h]
.text:0000000000008112                 test    r12, r12
.text:0000000000008115                 mov     [rcx+30h], rax
.text:0000000000008119                 jz      loc_8290
.text:000000000000811F                 cmp     [rsp+58h+var_42], 0
.text:0000000000008124                 jz      loc_8290
.text:000000000000812A                 mov     esi, 0Bh
.text:000000000000812F                 test    r14, r14
.text:0000000000008132                 mov     qword ptr [rcx+0A8h], 2
.text:000000000000813D                 mov     [rcx+70h], si
.text:0000000000008141                 jz      loc_82D0
.text:0000000000008147
.text:0000000000008147 loc_8147:                               ; CODE XREF: rpl_fts_open+30E↓j
.text:0000000000008147                 mov     [rcx+10h], r12
.text:000000000000814B                 mov     r12, rcx
.text:000000000000814E
.text:000000000000814E loc_814E:                               ; CODE XREF: rpl_fts_open+329↓j
.text:000000000000814E                                         ; rpl_fts_open+346↓j
.text:000000000000814E                 add     rbp, 1
.text:0000000000008152                 mov     rsi, [r13+rbp*8+0]
.text:0000000000008157                 test    rsi, rsi
.text:000000000000815A                 jz      short loc_81B0
.text:000000000000815C
.text:000000000000815C loc_815C:                               ; CODE XREF: rpl_fts_open+143↑j
.text:000000000000815C                 mov     rdi, rsi        ; s
.text:000000000000815F                 mov     [rsp+58h+var_50], rsi
.text:0000000000008164                 call    _strlen
.text:0000000000008169                 cmp     rax, 2
.text:000000000000816D                 mov     rsi, [rsp+58h+var_50]
.text:0000000000008172                 jbe     loc_80E8
.text:0000000000008178                 cmp     [rsp+58h+var_41], 0
.text:000000000000817D                 jz      loc_80E8
.text:0000000000008183                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:0000000000008188                 jnz     loc_80E8
.text:000000000000818E                 xchg    ax, ax
.text:0000000000008190
.text:0000000000008190 loc_8190:                               ; CODE XREF: rpl_fts_open+203↓j
.text:0000000000008190                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:0000000000008195                 jnz     loc_80E8
.text:000000000000819B                 sub     rax, 1
.text:000000000000819F                 cmp     rax, 1
.text:00000000000081A3                 jnz     short loc_8190
.text:00000000000081A5                 jmp     loc_80E8
.text:00000000000081A5 ; ---------------------------------------------------------------------------
.text:00000000000081AA                 align 10h
.text:00000000000081B0
.text:00000000000081B0 loc_81B0:                               ; CODE XREF: rpl_fts_open+1BA↑j
.text:00000000000081B0                 test    r14, r14
.text:00000000000081B3                 jz      short loc_81CC
.text:00000000000081B5                 cmp     rbp, 1
.text:00000000000081B9                 jbe     short loc_81CC
.text:00000000000081BB                 mov     rsi, r12
.text:00000000000081BE                 mov     rdx, rbp
.text:00000000000081C1                 mov     rdi, rbx
.text:00000000000081C4                 call    fts_sort
.text:00000000000081C9                 mov     r12, rax
.text:00000000000081CC
.text:00000000000081CC loc_81CC:                               ; CODE XREF: rpl_fts_open+213↑j
.text:00000000000081CC                                         ; rpl_fts_open+219↑j ...
.text:00000000000081CC                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:00000000000081D3                 xor     edx, edx
.text:00000000000081D5                 mov     rdi, rbx
.text:00000000000081D8                 call    fts_alloc
.text:00000000000081DD                 test    rax, rax
.text:00000000000081E0                 mov     [rbx], rax
.text:00000000000081E3                 jz      loc_82F0
.text:00000000000081E9                 mov     edi, [rbx+48h]
.text:00000000000081EC                 mov     edx, 9
.text:00000000000081F1                 lea     rsi, [rbx+58h]
.text:00000000000081F5                 mov     [rax+10h], r12
.text:00000000000081F9                 mov     [rax+70h], dx
.text:00000000000081FD                 mov     qword ptr [rax+58h], 1
.text:0000000000008205                 call    setup_dir_isra_4
.text:000000000000820A                 test    al, al
.text:000000000000820C                 jz      loc_82F0
.text:0000000000008212                 mov     esi, [rbx+48h]
.text:0000000000008215                 test    esi, 204h
.text:000000000000821B                 jnz     short loc_8240
.text:000000000000821D                 mov     edi, [rbx+2Ch]
.text:0000000000008220                 lea     rdx, asc_B4BE+1 ; "."
.text:0000000000008227                 call    diropen_isra_6
.text:000000000000822C                 test    eax, eax
.text:000000000000822E                 mov     [rbx+28h], eax
.text:0000000000008231                 jns     short loc_8240
.text:0000000000008233                 or      dword ptr [rbx+48h], 4
.text:0000000000008237                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008240
.text:0000000000008240 loc_8240:                               ; CODE XREF: rpl_fts_open+27B↑j
.text:0000000000008240                                         ; rpl_fts_open+291↑j
.text:0000000000008240                 lea     rdi, [rbx+60h]
.text:0000000000008244                 mov     esi, 0FFFFFFFFh
.text:0000000000008249                 call    i_ring_init
.text:000000000000824E
.text:000000000000824E loc_824E:                               ; CODE XREF: rpl_fts_open+53↑j
.text:000000000000824E                                         ; rpl_fts_open+373↓j ...
.text:000000000000824E                 add     rsp, 28h
.text:0000000000008252                 mov     rax, rbx
.text:0000000000008255                 pop     rbx
.text:0000000000008256                 pop     rbp
.text:0000000000008257                 pop     r12
.text:0000000000008259                 pop     r13
.text:000000000000825B                 pop     r14
.text:000000000000825D                 pop     r15
.text:000000000000825F                 retn
.text:0000000000008260 ; ---------------------------------------------------------------------------
.text:0000000000008260
.text:0000000000008260 loc_8260:                               ; CODE XREF: rpl_fts_open+61↑j
.text:0000000000008260                 mov     rdi, [r13+0]
.text:0000000000008264                 mov     eax, ebp
.text:0000000000008266                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:000000000000826D                 and     ah, 0FDh
.text:0000000000008270                 or      eax, 4
.text:0000000000008273                 test    rdi, rdi
.text:0000000000008276                 mov     [rbx+48h], eax
.text:0000000000008279                 jnz     loc_801E
.text:000000000000827F
.text:000000000000827F loc_827F:                               ; CODE XREF: rpl_fts_open+78↑j
.text:000000000000827F                 mov     edx, 1000h
.text:0000000000008284                 jmp     loc_8055
.text:0000000000008284 ; ---------------------------------------------------------------------------
.text:0000000000008289                 align 10h
.text:0000000000008290
.text:0000000000008290 loc_8290:                               ; CODE XREF: rpl_fts_open+179↑j
.text:0000000000008290                                         ; rpl_fts_open+184↑j
.text:0000000000008290                 xor     edx, edx
.text:0000000000008292                 mov     rsi, rcx
.text:0000000000008295                 mov     rdi, rbx
.text:0000000000008298                 mov     [rsp+58h+var_50], rcx
.text:000000000000829D                 call    fts_stat
.text:00000000000082A2                 mov     rcx, [rsp+58h+var_50]
.text:00000000000082A7                 test    r14, r14
.text:00000000000082AA                 mov     [rcx+70h], ax
.text:00000000000082AE                 jnz     loc_8147
.text:00000000000082B4                 test    r12, r12
.text:00000000000082B7                 mov     qword ptr [rcx+10h], 0
.text:00000000000082BF                 jnz     short loc_82D8
.text:00000000000082C1                 mov     [rsp+58h+var_40], rcx
.text:00000000000082C6                 mov     r12, rcx
.text:00000000000082C9                 jmp     loc_814E
.text:00000000000082C9 ; ---------------------------------------------------------------------------
.text:00000000000082CE                 align 10h
.text:00000000000082D0
.text:00000000000082D0 loc_82D0:                               ; CODE XREF: rpl_fts_open+1A1↑j
.text:00000000000082D0                 mov     qword ptr [rcx+10h], 0
.text:00000000000082D8
.text:00000000000082D8 loc_82D8:                               ; CODE XREF: rpl_fts_open+31F↑j
.text:00000000000082D8                 mov     rax, [rsp+58h+var_40]
.text:00000000000082DD                 mov     [rsp+58h+var_40], rcx
.text:00000000000082E2                 mov     [rax+10h], rcx
.text:00000000000082E6                 jmp     loc_814E
.text:00000000000082E6 ; ---------------------------------------------------------------------------
.text:00000000000082EB                 align 10h
.text:00000000000082F0
.text:00000000000082F0 loc_82F0:                               ; CODE XREF: rpl_fts_open+159↑j
.text:00000000000082F0                                         ; rpl_fts_open+243↑j ...
.text:00000000000082F0                 mov     rdi, r12        ; ptr
.text:00000000000082F3                 call    fts_lfree
.text:00000000000082F8                 mov     rdi, r15        ; ptr
.text:00000000000082FB                 call    free
.text:0000000000008300
.text:0000000000008300 loc_8300:                               ; CODE XREF: rpl_fts_open+F2↑j
.text:0000000000008300                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000008304                 call    free
.text:0000000000008309
.text:0000000000008309 loc_8309:                               ; CODE XREF: rpl_fts_open+C8↑j
.text:0000000000008309                 mov     rdi, rbx        ; ptr
.text:000000000000830C                 xor     ebx, ebx
.text:000000000000830E                 call    free
.text:0000000000008313                 jmp     loc_824E
.text:0000000000008313 ; ---------------------------------------------------------------------------
.text:0000000000008318                 align 20h
.text:0000000000008320
.text:0000000000008320 loc_8320:                               ; CODE XREF: rpl_fts_open+D5↑j
.text:0000000000008320                 xor     r15d, r15d
.text:0000000000008323                 test    r14, r14
.text:0000000000008326                 jnz     loc_80B0
.text:000000000000832C
.text:000000000000832C loc_832C:                               ; CODE XREF: rpl_fts_open+120↑j
.text:000000000000832C                 xor     r12d, r12d
.text:000000000000832F                 jmp     loc_81CC
.text:000000000000832F ; ---------------------------------------------------------------------------
.text:0000000000008334                 align 8
.text:0000000000008338
.text:0000000000008338 loc_8338:                               ; CODE XREF: rpl_fts_open+14↑j
.text:0000000000008338                                         ; rpl_fts_open+28↑j ...
.text:0000000000008338                 call    ___errno_location
.text:000000000000833D                 xor     ebx, ebx
.text:000000000000833F                 mov     dword ptr [rax], 16h
.text:0000000000008345                 jmp     loc_824E
.text:0000000000008345 ; } // starts at 7FA0
.text:0000000000008345 rpl_fts_open    endp
.text:0000000000008345
.text:0000000000008345 ; ---------------------------------------------------------------------------
.text:000000000000834A                 align 10h
.text:0000000000008350
.text:0000000000008350 ; =============== S U B R O U T I N E =======================================
.text:0000000000008350
.text:0000000000008350
.text:0000000000008350 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:0000000000008350                 public rpl_fts_close
.text:0000000000008350 rpl_fts_close   proc near               ; CODE XREF: rm+11F↑p
.text:0000000000008350                                         ; rm+653↑p
.text:0000000000008350 ; __unwind {
.text:0000000000008350                 push    r12
.text:0000000000008352                 push    rbp
.text:0000000000008353                 mov     rbp, rdi
.text:0000000000008356                 push    rbx
.text:0000000000008357                 mov     rdi, [rdi]
.text:000000000000835A                 test    rdi, rdi
.text:000000000000835D                 jz      short loc_83A3
.text:000000000000835F                 cmp     qword ptr [rdi+58h], 0
.text:0000000000008364                 jns     short loc_837F
.text:0000000000008366                 jmp     loc_8480
.text:0000000000008366 ; ---------------------------------------------------------------------------
.text:000000000000836B                 align 10h
.text:0000000000008370
.text:0000000000008370 loc_8370:                               ; CODE XREF: rpl_fts_close+36↓j
.text:0000000000008370                 call    free
.text:0000000000008375                 cmp     qword ptr [rbx+58h], 0
.text:000000000000837A                 mov     rdi, rbx        ; ptr
.text:000000000000837D                 js      short loc_839B
.text:000000000000837F
.text:000000000000837F loc_837F:                               ; CODE XREF: rpl_fts_close+14↑j
.text:000000000000837F                                         ; rpl_fts_close+49↓j
.text:000000000000837F                 mov     rbx, [rdi+10h]
.text:0000000000008383                 test    rbx, rbx
.text:0000000000008386                 jnz     short loc_8370
.text:0000000000008388                 mov     rbx, [rdi+8]
.text:000000000000838C                 call    free
.text:0000000000008391                 cmp     qword ptr [rbx+58h], 0
.text:0000000000008396                 mov     rdi, rbx
.text:0000000000008399                 jns     short loc_837F
.text:000000000000839B
.text:000000000000839B loc_839B:                               ; CODE XREF: rpl_fts_close+2D↑j
.text:000000000000839B                 mov     rdi, rbx        ; ptr
.text:000000000000839E                 call    free
.text:00000000000083A3
.text:00000000000083A3 loc_83A3:                               ; CODE XREF: rpl_fts_close+D↑j
.text:00000000000083A3                                         ; rpl_fts_close+13B↓j
.text:00000000000083A3                 mov     rdi, [rbp+8]    ; ptr
.text:00000000000083A7                 test    rdi, rdi
.text:00000000000083AA                 jz      short loc_83B1
.text:00000000000083AC                 call    fts_lfree
.text:00000000000083B1
.text:00000000000083B1 loc_83B1:                               ; CODE XREF: rpl_fts_close+5A↑j
.text:00000000000083B1                 mov     rdi, [rbp+10h]  ; ptr
.text:00000000000083B5                 call    free
.text:00000000000083BA                 mov     rdi, [rbp+20h]  ; ptr
.text:00000000000083BE                 call    free
.text:00000000000083C3                 mov     eax, [rbp+48h]
.text:00000000000083C6                 test    ah, 2
.text:00000000000083C9                 jz      short loc_8430
.text:00000000000083CB                 mov     edi, [rbp+2Ch]  ; fd
.text:00000000000083CE                 test    edi, edi
.text:00000000000083D0                 jns     loc_8460
.text:00000000000083D6
.text:00000000000083D6 loc_83D6:                               ; CODE XREF: rpl_fts_close+E2↓j
.text:00000000000083D6                                         ; rpl_fts_close+FA↓j ...
.text:00000000000083D6                 xor     ebx, ebx
.text:00000000000083D8
.text:00000000000083D8 loc_83D8:                               ; CODE XREF: rpl_fts_close+124↓j
.text:00000000000083D8                                         ; rpl_fts_close+154↓j ...
.text:00000000000083D8                 lea     rdi, [rbp+60h]
.text:00000000000083DC                 call    fd_ring_clear
.text:00000000000083E1                 mov     rdi, [rbp+50h]  ; ptr
.text:00000000000083E5                 test    rdi, rdi
.text:00000000000083E8                 jz      short loc_83EF
.text:00000000000083EA                 call    hash_free
.text:00000000000083EF
.text:00000000000083EF loc_83EF:                               ; CODE XREF: rpl_fts_close+98↑j
.text:00000000000083EF                 test    dword ptr [rbp+48h], 102h
.text:00000000000083F6                 mov     rdi, [rbp+58h]  ; ptr
.text:00000000000083FA                 jz      short loc_8420
.text:00000000000083FC                 test    rdi, rdi
.text:00000000000083FF                 jz      short loc_8406
.text:0000000000008401                 call    hash_free
.text:0000000000008406
.text:0000000000008406 loc_8406:                               ; CODE XREF: rpl_fts_close+AF↑j
.text:0000000000008406                                         ; rpl_fts_close+D5↓j
.text:0000000000008406                 mov     rdi, rbp        ; ptr
.text:0000000000008409                 call    free
.text:000000000000840E                 test    ebx, ebx
.text:0000000000008410                 jnz     loc_84C1
.text:0000000000008416
.text:0000000000008416 loc_8416:                               ; CODE XREF: rpl_fts_close+17D↓j
.text:0000000000008416                 mov     eax, ebx
.text:0000000000008418                 pop     rbx
.text:0000000000008419                 pop     rbp
.text:000000000000841A                 pop     r12
.text:000000000000841C                 retn
.text:000000000000841C ; ---------------------------------------------------------------------------
.text:000000000000841D                 align 20h
.text:0000000000008420
.text:0000000000008420 loc_8420:                               ; CODE XREF: rpl_fts_close+AA↑j
.text:0000000000008420                 call    free
.text:0000000000008425                 jmp     short loc_8406
.text:0000000000008425 ; ---------------------------------------------------------------------------
.text:0000000000008427                 align 10h
.text:0000000000008430
.text:0000000000008430 loc_8430:                               ; CODE XREF: rpl_fts_close+79↑j
.text:0000000000008430                 test    al, 4
.text:0000000000008432                 jnz     short loc_83D6
.text:0000000000008434                 mov     edi, [rbp+28h]  ; fd
.text:0000000000008437                 call    _fchdir
.text:000000000000843C                 test    eax, eax
.text:000000000000843E                 jnz     short loc_8490
.text:0000000000008440                 mov     edi, [rbp+28h]  ; fd
.text:0000000000008443                 call    _close
.text:0000000000008448                 test    eax, eax
.text:000000000000844A                 jz      short loc_83D6
.text:000000000000844C                 call    ___errno_location
.text:0000000000008451                 mov     r12, rax
.text:0000000000008454                 jmp     short loc_84B8
.text:0000000000008454 ; ---------------------------------------------------------------------------
.text:0000000000008456                 align 20h
.text:0000000000008460
.text:0000000000008460 loc_8460:                               ; CODE XREF: rpl_fts_close+80↑j
.text:0000000000008460                 call    _close
.text:0000000000008465                 test    eax, eax
.text:0000000000008467                 jz      loc_83D6
.text:000000000000846D                 call    ___errno_location
.text:0000000000008472                 mov     ebx, [rax]
.text:0000000000008474                 jmp     loc_83D8
.text:0000000000008474 ; ---------------------------------------------------------------------------
.text:0000000000008479                 align 20h
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: rpl_fts_close+16↑j
.text:0000000000008480                 mov     rbx, rdi
.text:0000000000008483                 mov     rdi, rbx        ; ptr
.text:0000000000008486                 call    free
.text:000000000000848B                 jmp     loc_83A3
.text:0000000000008490 ; ---------------------------------------------------------------------------
.text:0000000000008490
.text:0000000000008490 loc_8490:                               ; CODE XREF: rpl_fts_close+EE↑j
.text:0000000000008490                 call    ___errno_location
.text:0000000000008495                 mov     edi, [rbp+28h]  ; fd
.text:0000000000008498                 mov     r12, rax
.text:000000000000849B                 mov     ebx, [rax]
.text:000000000000849D                 call    _close
.text:00000000000084A2                 test    eax, eax
.text:00000000000084A4                 jz      loc_83D8
.text:00000000000084AA                 test    ebx, ebx
.text:00000000000084AC                 jnz     loc_83D8
.text:00000000000084B2                 nop     word ptr [rax+rax+00h]
.text:00000000000084B8
.text:00000000000084B8 loc_84B8:                               ; CODE XREF: rpl_fts_close+104↑j
.text:00000000000084B8                 mov     ebx, [r12]
.text:00000000000084BC                 jmp     loc_83D8
.text:00000000000084C1 ; ---------------------------------------------------------------------------
.text:00000000000084C1
.text:00000000000084C1 loc_84C1:                               ; CODE XREF: rpl_fts_close+C0↑j
.text:00000000000084C1                 call    ___errno_location
.text:00000000000084C6                 mov     [rax], ebx
.text:00000000000084C8                 mov     ebx, 0FFFFFFFFh
.text:00000000000084CD                 jmp     loc_8416
.text:00000000000084CD ; } // starts at 8350
.text:00000000000084CD rpl_fts_close   endp
.text:00000000000084CD
.text:00000000000084CD ; ---------------------------------------------------------------------------
.text:00000000000084D2                 align 20h
.text:00000000000084E0
.text:00000000000084E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084E0
.text:00000000000084E0
.text:00000000000084E0                 public rpl_fts_read
.text:00000000000084E0 rpl_fts_read    proc near               ; CODE XREF: rm+73↑p
.text:00000000000084E0                                         ; rm+F1↑p ...
.text:00000000000084E0 ; __unwind {
.text:00000000000084E0                 push    r14
.text:00000000000084E2                 push    r13
.text:00000000000084E4                 push    r12
.text:00000000000084E6                 push    rbp
.text:00000000000084E7                 push    rbx
.text:00000000000084E8                 mov     rbp, [rdi]
.text:00000000000084EB                 test    rbp, rbp
.text:00000000000084EE                 jz      loc_85FE
.text:00000000000084F4                 mov     edx, [rdi+48h]
.text:00000000000084F7                 test    dh, 20h
.text:00000000000084FA                 jnz     loc_85FE
.text:0000000000008500                 movzx   eax, word ptr [rbp+74h]
.text:0000000000008504                 mov     ebx, 3
.text:0000000000008509                 mov     r12, rdi
.text:000000000000850C                 mov     [rbp+74h], bx
.text:0000000000008510                 cmp     ax, 1
.text:0000000000008514                 jz      loc_8760
.text:000000000000851A                 cmp     ax, 2
.text:000000000000851E                 movzx   ecx, word ptr [rbp+70h]
.text:0000000000008522                 jz      loc_8610
.text:0000000000008528                 cmp     cx, 1
.text:000000000000852C                 jnz     short loc_8560
.text:000000000000852E                 jmp     loc_8750
.text:000000000000852E ; ---------------------------------------------------------------------------
.text:0000000000008533                 align 8
.text:0000000000008538
.text:0000000000008538 loc_8538:                               ; CODE XREF: rpl_fts_read+87↓j
.text:0000000000008538                 mov     [r12], rbx
.text:000000000000853C                 mov     rdi, rbp        ; ptr
.text:000000000000853F                 call    free
.text:0000000000008544                 cmp     qword ptr [rbx+58h], 0
.text:0000000000008549                 jz      loc_8780
.text:000000000000854F                 movzx   eax, word ptr [rbx+74h]
.text:0000000000008553                 mov     rbp, rbx
.text:0000000000008556                 cmp     ax, 4
.text:000000000000855A                 jnz     loc_8888
.text:0000000000008560
.text:0000000000008560 loc_8560:                               ; CODE XREF: rpl_fts_read+4C↑j
.text:0000000000008560                                         ; rpl_fts_read+13D↓j
.text:0000000000008560                 mov     rbx, [rbp+10h]
.text:0000000000008564                 test    rbx, rbx
.text:0000000000008567                 jnz     short loc_8538
.text:0000000000008569                 mov     rbx, [rbp+8]
.text:000000000000856D                 cmp     qword ptr [rbx+18h], 0
.text:0000000000008572                 jnz     loc_8AE0
.text:0000000000008578
.text:0000000000008578 loc_8578:                               ; CODE XREF: rpl_fts_read+688↓j
.text:0000000000008578                 mov     [r12], rbx
.text:000000000000857C                 mov     rdi, rbp        ; ptr
.text:000000000000857F                 call    free
.text:0000000000008584                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:0000000000008589                 jz      loc_8A42
.text:000000000000858F                 cmp     word ptr [rbx+70h], 0Bh
.text:0000000000008594                 jz      loc_86CF
.text:000000000000859A                 mov     rdx, [r12+20h]
.text:000000000000859F                 mov     rax, [rbx+48h]
.text:00000000000085A3                 mov     byte ptr [rdx+rax], 0
.text:00000000000085A7                 cmp     qword ptr [rbx+58h], 0
.text:00000000000085AC                 jz      loc_8970
.text:00000000000085B2                 movzx   eax, word ptr [rbx+72h]
.text:00000000000085B6                 test    al, 2
.text:00000000000085B8                 jz      loc_8928
.text:00000000000085BE                 mov     eax, [r12+48h]
.text:00000000000085C3                 mov     edi, [rbx+44h]  ; fd
.text:00000000000085C6                 test    al, 4
.text:00000000000085C8                 jz      loc_89CC
.text:00000000000085CE
.text:00000000000085CE loc_85CE:                               ; CODE XREF: rpl_fts_read+507↓j
.text:00000000000085CE                                         ; rpl_fts_read+6AC↓j
.text:00000000000085CE                 call    _close
.text:00000000000085D3
.text:00000000000085D3 loc_85D3:                               ; CODE XREF: rpl_fts_read+44A↓j
.text:00000000000085D3                                         ; rpl_fts_read+46A↓j ...
.text:00000000000085D3                 mov     edi, [r12+48h]
.text:00000000000085D8
.text:00000000000085D8 loc_85D8:                               ; CODE XREF: rpl_fts_read+48A↓j
.text:00000000000085D8                 cmp     word ptr [rbx+70h], 2
.text:00000000000085DD                 jz      short loc_85F3
.text:00000000000085DF                 mov     ecx, [rbx+40h]
.text:00000000000085E2                 test    ecx, ecx
.text:00000000000085E4                 jz      loc_8988
.text:00000000000085EA                 mov     edx, 7
.text:00000000000085EF                 mov     [rbx+70h], dx
.text:00000000000085F3
.text:00000000000085F3 loc_85F3:                               ; CODE XREF: rpl_fts_read+FD↑j
.text:00000000000085F3                                         ; rpl_fts_read+4C3↓j
.text:00000000000085F3                 and     edi, 2000h
.text:00000000000085F9                 mov     rbp, rbx
.text:00000000000085FC                 jz      short loc_867A
.text:00000000000085FE
.text:00000000000085FE loc_85FE:                               ; CODE XREF: rpl_fts_read+E↑j
.text:00000000000085FE                                         ; rpl_fts_read+1A↑j ...
.text:00000000000085FE                 xor     ebp, ebp
.text:0000000000008600                 pop     rbx
.text:0000000000008601                 mov     rax, rbp
.text:0000000000008604                 pop     rbp
.text:0000000000008605                 pop     r12
.text:0000000000008607                 pop     r13
.text:0000000000008609                 pop     r14
.text:000000000000860B                 retn
.text:000000000000860B ; ---------------------------------------------------------------------------
.text:000000000000860C                 align 10h
.text:0000000000008610
.text:0000000000008610 loc_8610:                               ; CODE XREF: rpl_fts_read+42↑j
.text:0000000000008610                 lea     eax, [rcx-0Ch]
.text:0000000000008613                 cmp     ax, 1
.text:0000000000008617                 jbe     short loc_8690
.text:0000000000008619                 cmp     cx, 1
.text:000000000000861D                 jnz     loc_8560
.text:0000000000008623
.text:0000000000008623 loc_8623:                               ; CODE XREF: rpl_fts_read+274↓j
.text:0000000000008623                 test    dl, 40h
.text:0000000000008626                 jz      loc_86D8
.text:000000000000862C                 mov     rax, [r12+18h]
.text:0000000000008631                 cmp     [rbp+78h], rax
.text:0000000000008635                 jz      loc_86D8
.text:000000000000863B
.text:000000000000863B loc_863B:                               ; CODE XREF: rpl_fts_read+27A↓j
.text:000000000000863B                 test    byte ptr [rbp+72h], 2
.text:000000000000863F                 jnz     loc_8B20
.text:0000000000008645
.text:0000000000008645 loc_8645:                               ; CODE XREF: rpl_fts_read+648↓j
.text:0000000000008645                 mov     rdi, [r12+8]    ; ptr
.text:000000000000864A                 test    rdi, rdi
.text:000000000000864D                 jz      short loc_865D
.text:000000000000864F                 call    fts_lfree
.text:0000000000008654                 mov     qword ptr [r12+8], 0
.text:000000000000865D
.text:000000000000865D loc_865D:                               ; CODE XREF: rpl_fts_read+16D↑j
.text:000000000000865D                 mov     edi, [r12+48h]
.text:0000000000008662                 mov     r10d, 6
.text:0000000000008668                 lea     rsi, [r12+58h]
.text:000000000000866D                 mov     [rbp+70h], r10w
.text:0000000000008672                 mov     rdx, rbp
.text:0000000000008675                 call    leave_dir_isra_12
.text:000000000000867A
.text:000000000000867A loc_867A:                               ; CODE XREF: rpl_fts_read+11C↑j
.text:000000000000867A                                         ; rpl_fts_read+1D3↓j ...
.text:000000000000867A                 pop     rbx
.text:000000000000867B                 mov     rax, rbp
.text:000000000000867E                 pop     rbp
.text:000000000000867F                 pop     r12
.text:0000000000008681                 pop     r13
.text:0000000000008683                 pop     r14
.text:0000000000008685                 retn
.text:0000000000008685 ; ---------------------------------------------------------------------------
.text:0000000000008686                 align 10h
.text:0000000000008690
.text:0000000000008690 loc_8690:                               ; CODE XREF: rpl_fts_read+137↑j
.text:0000000000008690                 mov     edx, 1
.text:0000000000008695                 mov     rsi, rbp
.text:0000000000008698                 call    fts_stat
.text:000000000000869D                 cmp     ax, 1
.text:00000000000086A1                 mov     [rbp+70h], ax
.text:00000000000086A5                 jz      loc_89EC
.text:00000000000086AB                 cmp     ax, 0Bh
.text:00000000000086AF                 mov     [r12], rbp
.text:00000000000086B3                 jnz     short loc_867A
.text:00000000000086B5                 nop     dword ptr [rax]
.text:00000000000086B8
.text:00000000000086B8 loc_86B8:                               ; CODE XREF: rpl_fts_read+356↓j
.text:00000000000086B8                 mov     rax, [rbp+0A8h]
.text:00000000000086BF                 cmp     rax, 2
.text:00000000000086C3                 jz      loc_8A68
.text:00000000000086C9                 cmp     rax, 1
.text:00000000000086CD                 jz      short loc_867A
.text:00000000000086CF
.text:00000000000086CF loc_86CF:                               ; CODE XREF: rpl_fts_read+B4↑j
.text:00000000000086CF                 call    _abort
.text:00000000000086CF ; ---------------------------------------------------------------------------
.text:00000000000086D4                 align 8
.text:00000000000086D8
.text:00000000000086D8 loc_86D8:                               ; CODE XREF: rpl_fts_read+146↑j
.text:00000000000086D8                                         ; rpl_fts_read+155↑j
.text:00000000000086D8                 mov     rdi, [r12+8]    ; ptr
.text:00000000000086DD                 test    rdi, rdi
.text:00000000000086E0                 jz      loc_88F8
.text:00000000000086E6                 test    dh, 10h
.text:00000000000086E9                 jnz     loc_88E2
.text:00000000000086EF                 mov     rcx, [rbp+30h]
.text:00000000000086F3                 mov     edx, 0FFFFFFFFh
.text:00000000000086F8                 mov     rsi, rbp
.text:00000000000086FB                 mov     rdi, r12
.text:00000000000086FE                 call    fts_safe_changedir
.text:0000000000008703                 test    eax, eax
.text:0000000000008705                 jz      loc_89C2
.text:000000000000870B                 call    ___errno_location
.text:0000000000008710                 mov     eax, [rax]
.text:0000000000008712                 or      word ptr [rbp+72h], 1
.text:0000000000008717                 mov     [rbp+40h], eax
.text:000000000000871A                 mov     rbp, [r12+8]
.text:000000000000871F                 test    rbp, rbp
.text:0000000000008722                 jz      loc_8916
.text:0000000000008728                 mov     rax, rbp
.text:000000000000872B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: rpl_fts_read+263↓j
.text:0000000000008730                 mov     rdx, [rax+8]
.text:0000000000008734                 mov     rdx, [rdx+30h]
.text:0000000000008738                 mov     [rax+30h], rdx
.text:000000000000873C                 mov     rax, [rax+10h]
.text:0000000000008740                 test    rax, rax
.text:0000000000008743                 jnz     short loc_8730
.text:0000000000008745                 jmp     loc_8916
.text:0000000000008745 ; ---------------------------------------------------------------------------
.text:000000000000874A                 align 10h
.text:0000000000008750
.text:0000000000008750 loc_8750:                               ; CODE XREF: rpl_fts_read+4E↑j
.text:0000000000008750                 cmp     ax, 4
.text:0000000000008754                 jnz     loc_8623
.text:000000000000875A                 jmp     loc_863B
.text:000000000000875A ; ---------------------------------------------------------------------------
.text:000000000000875F                 align 20h
.text:0000000000008760
.text:0000000000008760 loc_8760:                               ; CODE XREF: rpl_fts_read+34↑j
.text:0000000000008760                 mov     rsi, rbp
.text:0000000000008763                 xor     edx, edx
.text:0000000000008765                 call    fts_stat
.text:000000000000876A                 mov     [rbp+70h], ax
.text:000000000000876E                 mov     rax, rbp
.text:0000000000008771                 pop     rbx
.text:0000000000008772                 pop     rbp
.text:0000000000008773                 pop     r12
.text:0000000000008775                 pop     r13
.text:0000000000008777                 pop     r14
.text:0000000000008779                 retn
.text:0000000000008779 ; ---------------------------------------------------------------------------
.text:000000000000877A                 align 20h
.text:0000000000008780
.text:0000000000008780 loc_8780:                               ; CODE XREF: rpl_fts_read+69↑j
.text:0000000000008780                 mov     rdi, r12
.text:0000000000008783                 call    restore_initial_cwd
.text:0000000000008788                 test    eax, eax
.text:000000000000878A                 jnz     loc_8B91
.text:0000000000008790                 test    dword ptr [r12+48h], 102h
.text:0000000000008799                 mov     rdi, [r12+58h]  ; ptr
.text:000000000000879E                 jz      loc_88D8
.text:00000000000087A4                 test    rdi, rdi
.text:00000000000087A7                 jz      short loc_87AE
.text:00000000000087A9                 call    hash_free
.text:00000000000087AE
.text:00000000000087AE loc_87AE:                               ; CODE XREF: rpl_fts_read+2C7↑j
.text:00000000000087AE                                         ; rpl_fts_read+3FD↓j
.text:00000000000087AE                 mov     rdx, [rbx+60h]
.text:00000000000087B2                 lea     rbp, [rbx+108h]
.text:00000000000087B9                 mov     rdi, [r12+20h]  ; dest
.text:00000000000087BE                 mov     rsi, rbp        ; src
.text:00000000000087C1                 mov     [rbx+48h], rdx
.text:00000000000087C5                 add     rdx, 1          ; n
.text:00000000000087C9                 call    _memmove
.text:00000000000087CE                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000087D3                 mov     rdi, rbp        ; s
.text:00000000000087D6                 call    _strrchr
.text:00000000000087DB                 test    rax, rax
.text:00000000000087DE                 jz      short loc_880B
.text:00000000000087E0                 cmp     rbp, rax
.text:00000000000087E3                 jz      loc_89B0
.text:00000000000087E9
.text:00000000000087E9 loc_87E9:                               ; CODE XREF: rpl_fts_read+4D7↓j
.text:00000000000087E9                 lea     r13, [rax+1]
.text:00000000000087ED                 mov     rdi, r13        ; s
.text:00000000000087F0                 call    _strlen
.text:00000000000087F5                 lea     rdx, [rax+1]    ; n
.text:00000000000087F9                 mov     r14, rax
.text:00000000000087FC                 mov     rsi, r13        ; src
.text:00000000000087FF                 mov     rdi, rbp        ; dest
.text:0000000000008802                 call    _memmove
.text:0000000000008807                 mov     [rbx+60h], r14
.text:000000000000880B
.text:000000000000880B loc_880B:                               ; CODE XREF: rpl_fts_read+2FE↑j
.text:000000000000880B                                         ; rpl_fts_read+4DD↓j
.text:000000000000880B                 mov     rax, [r12+20h]
.text:0000000000008810                 mov     edi, [r12+48h]
.text:0000000000008815                 lea     rsi, [r12+58h]
.text:000000000000881A                 mov     rbp, rbx
.text:000000000000881D                 mov     [rbx+38h], rax
.text:0000000000008821                 mov     [rbx+30h], rax
.text:0000000000008825                 call    setup_dir_isra_4
.text:000000000000882A                 movzx   eax, word ptr [rbx+70h]
.text:000000000000882E
.text:000000000000882E loc_882E:                               ; CODE XREF: rpl_fts_read+3EF↓j
.text:000000000000882E                                         ; rpl_fts_read+73D↓j
.text:000000000000882E                 cmp     ax, 0Bh
.text:0000000000008832                 mov     [r12], rbp
.text:0000000000008836                 jz      loc_86B8
.text:000000000000883C
.text:000000000000883C loc_883C:                               ; CODE XREF: rpl_fts_read+5C7↓j
.text:000000000000883C                                         ; rpl_fts_read+717↓j
.text:000000000000883C                 cmp     ax, 1
.text:0000000000008840                 jnz     loc_867A
.text:0000000000008846
.text:0000000000008846 loc_8846:                               ; CODE XREF: rpl_fts_read+51F↓j
.text:0000000000008846                 cmp     qword ptr [rbp+58h], 0
.text:000000000000884B                 jnz     short loc_8856
.text:000000000000884D
.text:000000000000884D loc_884D:                               ; CODE XREF: rpl_fts_read+6F8↓j
.text:000000000000884D                 mov     rax, [rbp+78h]
.text:0000000000008851                 mov     [r12+18h], rax
.text:0000000000008856
.text:0000000000008856 loc_8856:                               ; CODE XREF: rpl_fts_read+36B↑j
.text:0000000000008856                                         ; rpl_fts_read+5F4↓j
.text:0000000000008856                 mov     edi, [r12+48h]
.text:000000000000885B                 lea     rsi, [r12+58h]
.text:0000000000008860                 mov     rdx, rbp
.text:0000000000008863                 call    enter_dir_isra_10
.text:0000000000008868                 test    al, al
.text:000000000000886A                 jnz     loc_867A
.text:0000000000008870                 call    ___errno_location
.text:0000000000008875                 xor     ebp, ebp
.text:0000000000008877                 mov     dword ptr [rax], 0Ch
.text:000000000000887D                 jmp     loc_867A
.text:000000000000887D ; ---------------------------------------------------------------------------
.text:0000000000008882                 align 8
.text:0000000000008888
.text:0000000000008888 loc_8888:                               ; CODE XREF: rpl_fts_read+7A↑j
.text:0000000000008888                 cmp     ax, 2
.text:000000000000888C                 jz      loc_8B2D
.text:0000000000008892
.text:0000000000008892 loc_8892:                               ; CODE XREF: rpl_fts_read+43F↓j
.text:0000000000008892                                         ; rpl_fts_read+631↓j ...
.text:0000000000008892                 mov     rax, [rbp+8]
.text:0000000000008896                 lea     rsi, [rbp+108h] ; src
.text:000000000000889D                 mov     rdi, [rax+48h]
.text:00000000000088A1                 mov     rax, [rax+38h]
.text:00000000000088A5                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:00000000000088AA                 lea     rdx, [rdi-1]
.text:00000000000088AE                 cmovz   rdi, rdx
.text:00000000000088B2                 add     rdi, [r12+20h]
.text:00000000000088B7                 mov     byte ptr [rdi], 2Fh ; '/'
.text:00000000000088BA                 mov     rax, [rbp+60h]
.text:00000000000088BE                 add     rdi, 1          ; dest
.text:00000000000088C2                 lea     rdx, [rax+1]    ; n
.text:00000000000088C6                 call    _memmove
.text:00000000000088CB                 movzx   eax, word ptr [rbp+70h]
.text:00000000000088CF                 jmp     loc_882E
.text:00000000000088CF ; ---------------------------------------------------------------------------
.text:00000000000088D4                 align 8
.text:00000000000088D8
.text:00000000000088D8 loc_88D8:                               ; CODE XREF: rpl_fts_read+2BE↑j
.text:00000000000088D8                 call    free
.text:00000000000088DD                 jmp     loc_87AE
.text:00000000000088E2 ; ---------------------------------------------------------------------------
.text:00000000000088E2
.text:00000000000088E2 loc_88E2:                               ; CODE XREF: rpl_fts_read+209↑j
.text:00000000000088E2                 and     dh, 0EFh
.text:00000000000088E5                 mov     [r12+48h], edx
.text:00000000000088EA                 call    fts_lfree
.text:00000000000088EF                 mov     qword ptr [r12+8], 0
.text:00000000000088F8
.text:00000000000088F8 loc_88F8:                               ; CODE XREF: rpl_fts_read+200↑j
.text:00000000000088F8                 mov     esi, 3
.text:00000000000088FD                 mov     rdi, r12
.text:0000000000008900                 call    fts_build
.text:0000000000008905                 test    rax, rax
.text:0000000000008908                 mov     [r12+8], rax
.text:000000000000890D                 jz      loc_8A04
.text:0000000000008913                 mov     rbp, rax
.text:0000000000008916
.text:0000000000008916 loc_8916:                               ; CODE XREF: rpl_fts_read+242↑j
.text:0000000000008916                                         ; rpl_fts_read+265↑j ...
.text:0000000000008916                 mov     qword ptr [r12+8], 0
.text:000000000000891F                 jmp     loc_8892
.text:000000000000891F ; ---------------------------------------------------------------------------
.text:0000000000008924                 align 8
.text:0000000000008928
.text:0000000000008928 loc_8928:                               ; CODE XREF: rpl_fts_read+D8↑j
.text:0000000000008928                 test    al, 1
.text:000000000000892A                 jnz     loc_85D3
.text:0000000000008930                 mov     rsi, [rbx+8]
.text:0000000000008934                 lea     rcx, asc_B4BE   ; ".."
.text:000000000000893B                 mov     edx, 0FFFFFFFFh
.text:0000000000008940                 mov     rdi, r12
.text:0000000000008943                 call    fts_safe_changedir
.text:0000000000008948                 test    eax, eax
.text:000000000000894A                 jz      loc_85D3
.text:0000000000008950
.text:0000000000008950 loc_8950:                               ; CODE XREF: rpl_fts_read+49A↓j
.text:0000000000008950                 call    ___errno_location
.text:0000000000008955                 mov     edi, [r12+48h]
.text:000000000000895A                 mov     eax, [rax]
.text:000000000000895C                 or      edi, 2000h
.text:0000000000008962                 mov     [rbx+40h], eax
.text:0000000000008965                 mov     [r12+48h], edi
.text:000000000000896A                 jmp     loc_85D8
.text:000000000000896A ; ---------------------------------------------------------------------------
.text:000000000000896F                 align 10h
.text:0000000000008970
.text:0000000000008970 loc_8970:                               ; CODE XREF: rpl_fts_read+CC↑j
.text:0000000000008970                 mov     rdi, r12
.text:0000000000008973                 call    restore_initial_cwd
.text:0000000000008978                 test    eax, eax
.text:000000000000897A                 jnz     short loc_8950
.text:000000000000897C                 jmp     loc_85D3
.text:000000000000897C ; ---------------------------------------------------------------------------
.text:0000000000008981                 align 8
.text:0000000000008988
.text:0000000000008988 loc_8988:                               ; CODE XREF: rpl_fts_read+104↑j
.text:0000000000008988                 mov     eax, 6
.text:000000000000898D                 lea     rsi, [r12+58h]
.text:0000000000008992                 mov     rdx, rbx
.text:0000000000008995                 mov     [rbx+70h], ax
.text:0000000000008999                 call    leave_dir_isra_12
.text:000000000000899E                 mov     edi, [r12+48h]
.text:00000000000089A3                 jmp     loc_85F3
.text:00000000000089A3 ; ---------------------------------------------------------------------------
.text:00000000000089A8                 align 10h
.text:00000000000089B0
.text:00000000000089B0 loc_89B0:                               ; CODE XREF: rpl_fts_read+303↑j
.text:00000000000089B0                 cmp     byte ptr [rbx+109h], 0
.text:00000000000089B7                 jnz     loc_87E9
.text:00000000000089BD                 jmp     loc_880B
.text:00000000000089C2 ; ---------------------------------------------------------------------------
.text:00000000000089C2
.text:00000000000089C2 loc_89C2:                               ; CODE XREF: rpl_fts_read+225↑j
.text:00000000000089C2                 mov     rbp, [r12+8]
.text:00000000000089C7                 jmp     loc_8916
.text:00000000000089CC ; ---------------------------------------------------------------------------
.text:00000000000089CC
.text:00000000000089CC loc_89CC:                               ; CODE XREF: rpl_fts_read+E8↑j
.text:00000000000089CC                 test    ah, 2
.text:00000000000089CF                 jz      loc_8B6D
.text:00000000000089D5                 mov     esi, edi
.text:00000000000089D7                 mov     edx, 1
.text:00000000000089DC                 mov     rdi, r12
.text:00000000000089DF                 call    cwd_advance_fd
.text:00000000000089E4                 mov     edi, [rbx+44h]
.text:00000000000089E7                 jmp     loc_85CE
.text:00000000000089EC ; ---------------------------------------------------------------------------
.text:00000000000089EC
.text:00000000000089EC loc_89EC:                               ; CODE XREF: rpl_fts_read+1C5↑j
.text:00000000000089EC                 mov     esi, [r12+48h]
.text:00000000000089F1                 test    sil, 4
.text:00000000000089F5                 jz      loc_8BFC
.text:00000000000089FB                 mov     [r12], rbp
.text:00000000000089FF                 jmp     loc_8846
.text:0000000000008A04 ; ---------------------------------------------------------------------------
.text:0000000000008A04
.text:0000000000008A04 loc_8A04:                               ; CODE XREF: rpl_fts_read+42D↑j
.text:0000000000008A04                 mov     edi, [r12+48h]
.text:0000000000008A09                 test    edi, 2000h
.text:0000000000008A0F                 jnz     loc_85FE
.text:0000000000008A15                 mov     r9d, [rbp+40h]
.text:0000000000008A19                 test    r9d, r9d
.text:0000000000008A1C                 jz      short loc_8A30
.text:0000000000008A1E                 cmp     word ptr [rbp+70h], 4
.text:0000000000008A23                 jz      short loc_8A30
.text:0000000000008A25                 mov     r8d, 7
.text:0000000000008A2B                 mov     [rbp+70h], r8w
.text:0000000000008A30
.text:0000000000008A30 loc_8A30:                               ; CODE XREF: rpl_fts_read+53C↑j
.text:0000000000008A30                                         ; rpl_fts_read+543↑j
.text:0000000000008A30                 lea     rsi, [r12+58h]
.text:0000000000008A35                 mov     rdx, rbp
.text:0000000000008A38                 call    leave_dir_isra_12
.text:0000000000008A3D                 jmp     loc_867A
.text:0000000000008A42 ; ---------------------------------------------------------------------------
.text:0000000000008A42
.text:0000000000008A42 loc_8A42:                               ; CODE XREF: rpl_fts_read+A9↑j
.text:0000000000008A42                 mov     rdi, rbx        ; ptr
.text:0000000000008A45                 xor     ebp, ebp
.text:0000000000008A47                 call    free
.text:0000000000008A4C                 call    ___errno_location
.text:0000000000008A51                 mov     dword ptr [rax], 0
.text:0000000000008A57                 mov     qword ptr [r12], 0
.text:0000000000008A5F                 jmp     loc_867A
.text:0000000000008A5F ; ---------------------------------------------------------------------------
.text:0000000000008A64                 align 8
.text:0000000000008A68
.text:0000000000008A68 loc_8A68:                               ; CODE XREF: rpl_fts_read+1E3↑j
.text:0000000000008A68                 mov     rbx, [rbp+8]
.text:0000000000008A6C                 cmp     qword ptr [rbx+68h], 0
.text:0000000000008A71                 jnz     short loc_8A84
.text:0000000000008A73                 mov     eax, [r12+48h]
.text:0000000000008A78                 and     eax, 18h
.text:0000000000008A7B                 cmp     eax, 18h
.text:0000000000008A7E                 jz      loc_8BDD
.text:0000000000008A84
.text:0000000000008A84 loc_8A84:                               ; CODE XREF: rpl_fts_read+591↑j
.text:0000000000008A84                                         ; rpl_fts_read+70D↓j
.text:0000000000008A84                 xor     edx, edx
.text:0000000000008A86                 mov     rsi, rbp
.text:0000000000008A89                 mov     rdi, r12
.text:0000000000008A8C                 call    fts_stat
.text:0000000000008A91                 mov     edx, [rbp+90h]
.text:0000000000008A97                 mov     [rbp+70h], ax
.text:0000000000008A9B                 and     edx, 0F000h
.text:0000000000008AA1                 cmp     edx, 4000h
.text:0000000000008AA7                 jnz     loc_883C
.text:0000000000008AAD                 cmp     qword ptr [rbp+58h], 0
.text:0000000000008AB2                 jz      loc_8BCE
.text:0000000000008AB8                 mov     rcx, [rbx+68h]
.text:0000000000008ABC                 lea     rdx, [rcx-1]
.text:0000000000008AC0                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:0000000000008AC4                 ja      short loc_8ACA
.text:0000000000008AC6                 mov     [rbx+68h], rdx
.text:0000000000008ACA
.text:0000000000008ACA loc_8ACA:                               ; CODE XREF: rpl_fts_read+5E4↑j
.text:0000000000008ACA                 cmp     ax, 1
.text:0000000000008ACE                 jnz     loc_867A
.text:0000000000008AD4                 jmp     loc_8856
.text:0000000000008AD4 ; ---------------------------------------------------------------------------
.text:0000000000008AD9                 align 20h
.text:0000000000008AE0
.text:0000000000008AE0 loc_8AE0:                               ; CODE XREF: rpl_fts_read+92↑j
.text:0000000000008AE0                 mov     rax, [rbx+48h]
.text:0000000000008AE4                 mov     rdx, [r12+20h]
.text:0000000000008AE9                 mov     esi, 3
.text:0000000000008AEE                 mov     [r12], rbx
.text:0000000000008AF2                 mov     rdi, r12
.text:0000000000008AF5                 mov     byte ptr [rdx+rax], 0
.text:0000000000008AF9                 call    fts_build
.text:0000000000008AFE                 test    rax, rax
.text:0000000000008B01                 mov     rbx, rax
.text:0000000000008B04                 jz      short loc_8B58
.text:0000000000008B06                 mov     rdi, rbp        ; ptr
.text:0000000000008B09                 mov     rbp, rbx
.text:0000000000008B0C                 call    free
.text:0000000000008B11                 jmp     loc_8892
.text:0000000000008B11 ; ---------------------------------------------------------------------------
.text:0000000000008B16                 align 20h
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: rpl_fts_read+15F↑j
.text:0000000000008B20                 mov     edi, [rbp+44h]  ; fd
.text:0000000000008B23                 call    _close
.text:0000000000008B28                 jmp     loc_8645
.text:0000000000008B2D ; ---------------------------------------------------------------------------
.text:0000000000008B2D
.text:0000000000008B2D loc_8B2D:                               ; CODE XREF: rpl_fts_read+3AC↑j
.text:0000000000008B2D                 mov     edx, 1
.text:0000000000008B32                 mov     rsi, rbx
.text:0000000000008B35                 mov     rdi, r12
.text:0000000000008B38                 call    fts_stat
.text:0000000000008B3D                 cmp     ax, 1
.text:0000000000008B41                 mov     [rbx+70h], ax
.text:0000000000008B45                 jz      short loc_8BA1
.text:0000000000008B47
.text:0000000000008B47 loc_8B47:                               ; CODE XREF: rpl_fts_read+6CA↓j
.text:0000000000008B47                                         ; rpl_fts_read+6E9↓j ...
.text:0000000000008B47                 mov     esi, 3
.text:0000000000008B4C                 mov     rbp, rbx
.text:0000000000008B4F                 mov     [rbx+74h], si
.text:0000000000008B53                 jmp     loc_8892
.text:0000000000008B58 ; ---------------------------------------------------------------------------
.text:0000000000008B58
.text:0000000000008B58 loc_8B58:                               ; CODE XREF: rpl_fts_read+624↑j
.text:0000000000008B58                 test    byte ptr [r12+49h], 20h
.text:0000000000008B5E                 jnz     loc_85FE
.text:0000000000008B64                 mov     rbx, [rbp+8]
.text:0000000000008B68                 jmp     loc_8578
.text:0000000000008B6D ; ---------------------------------------------------------------------------
.text:0000000000008B6D
.text:0000000000008B6D loc_8B6D:                               ; CODE XREF: rpl_fts_read+4EF↑j
.text:0000000000008B6D                 call    _fchdir
.text:0000000000008B72                 test    eax, eax
.text:0000000000008B74                 jz      short loc_8B89
.text:0000000000008B76                 call    ___errno_location
.text:0000000000008B7B                 mov     eax, [rax]
.text:0000000000008B7D                 mov     [rbx+40h], eax
.text:0000000000008B80                 or      dword ptr [r12+48h], 2000h
.text:0000000000008B89
.text:0000000000008B89 loc_8B89:                               ; CODE XREF: rpl_fts_read+694↑j
.text:0000000000008B89                 mov     edi, [rbx+44h]
.text:0000000000008B8C                 jmp     loc_85CE
.text:0000000000008B91 ; ---------------------------------------------------------------------------
.text:0000000000008B91
.text:0000000000008B91 loc_8B91:                               ; CODE XREF: rpl_fts_read+2AA↑j
.text:0000000000008B91                 or      dword ptr [r12+48h], 2000h
.text:0000000000008B9A                 xor     ebp, ebp
.text:0000000000008B9C                 jmp     loc_867A
.text:0000000000008BA1 ; ---------------------------------------------------------------------------
.text:0000000000008BA1
.text:0000000000008BA1 loc_8BA1:                               ; CODE XREF: rpl_fts_read+665↑j
.text:0000000000008BA1                 mov     esi, [r12+48h]
.text:0000000000008BA6                 test    sil, 4
.text:0000000000008BAA                 jnz     short loc_8B47
.text:0000000000008BAC                 mov     edi, [r12+2Ch]
.text:0000000000008BB1                 lea     rdx, asc_B4BE+1 ; "."
.text:0000000000008BB8                 call    diropen_isra_6
.text:0000000000008BBD                 test    eax, eax
.text:0000000000008BBF                 mov     [rbx+44h], eax
.text:0000000000008BC2                 js      short loc_8C40
.text:0000000000008BC4                 or      word ptr [rbx+72h], 2
.text:0000000000008BC9                 jmp     loc_8B47
.text:0000000000008BCE ; ---------------------------------------------------------------------------
.text:0000000000008BCE
.text:0000000000008BCE loc_8BCE:                               ; CODE XREF: rpl_fts_read+5D2↑j
.text:0000000000008BCE                 cmp     ax, 1
.text:0000000000008BD2                 jnz     loc_867A
.text:0000000000008BD8                 jmp     loc_884D
.text:0000000000008BDD ; ---------------------------------------------------------------------------
.text:0000000000008BDD
.text:0000000000008BDD loc_8BDD:                               ; CODE XREF: rpl_fts_read+59E↑j
.text:0000000000008BDD                 mov     esi, [r12+2Ch]
.text:0000000000008BE2                 mov     rdi, rbx
.text:0000000000008BE5                 call    leaf_optimization
.text:0000000000008BEA                 cmp     eax, 2
.text:0000000000008BED                 jnz     loc_8A84
.text:0000000000008BF3                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008BF7                 jmp     loc_883C
.text:0000000000008BFC ; ---------------------------------------------------------------------------
.text:0000000000008BFC
.text:0000000000008BFC loc_8BFC:                               ; CODE XREF: rpl_fts_read+515↑j
.text:0000000000008BFC                 mov     edi, [r12+2Ch]
.text:0000000000008C01                 lea     rdx, asc_B4BE+1 ; "."
.text:0000000000008C08                 call    diropen_isra_6
.text:0000000000008C0D                 test    eax, eax
.text:0000000000008C0F                 mov     [rbp+44h], eax
.text:0000000000008C12                 js      short loc_8C22
.text:0000000000008C14                 or      word ptr [rbp+72h], 2
.text:0000000000008C19                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008C1D                 jmp     loc_882E
.text:0000000000008C22 ; ---------------------------------------------------------------------------
.text:0000000000008C22
.text:0000000000008C22 loc_8C22:                               ; CODE XREF: rpl_fts_read+732↑j
.text:0000000000008C22                 call    ___errno_location
.text:0000000000008C27                 mov     eax, [rax]
.text:0000000000008C29                 mov     r11d, 7
.text:0000000000008C2F                 mov     [rbp+70h], r11w
.text:0000000000008C34                 mov     [rbp+40h], eax
.text:0000000000008C37                 mov     [r12], rbp
.text:0000000000008C3B                 jmp     loc_867A
.text:0000000000008C40 ; ---------------------------------------------------------------------------
.text:0000000000008C40
.text:0000000000008C40 loc_8C40:                               ; CODE XREF: rpl_fts_read+6E2↑j
.text:0000000000008C40                 call    ___errno_location
.text:0000000000008C45                 mov     eax, [rax]
.text:0000000000008C47                 mov     edi, 7
.text:0000000000008C4C                 mov     [rbx+70h], di
.text:0000000000008C50                 mov     [rbx+40h], eax
.text:0000000000008C53                 jmp     loc_8B47
.text:0000000000008C53 ; } // starts at 84E0
.text:0000000000008C53 rpl_fts_read    endp
.text:0000000000008C53
.text:0000000000008C53 ; ---------------------------------------------------------------------------
.text:0000000000008C58                 align 20h
.text:0000000000008C60
.text:0000000000008C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C60
.text:0000000000008C60
.text:0000000000008C60                 public rpl_fts_set
.text:0000000000008C60 rpl_fts_set     proc near               ; CODE XREF: rm+E4↑p
.text:0000000000008C60                                         ; rm+389↑p ...
.text:0000000000008C60 ; __unwind {
.text:0000000000008C60                 cmp     edx, 4
.text:0000000000008C63                 ja      short loc_8C70
.text:0000000000008C65                 mov     [rsi+74h], dx
.text:0000000000008C69                 xor     eax, eax
.text:0000000000008C6B                 retn
.text:0000000000008C6B ; ---------------------------------------------------------------------------
.text:0000000000008C6C                 align 10h
.text:0000000000008C70
.text:0000000000008C70 loc_8C70:                               ; CODE XREF: rpl_fts_set+3↑j
.text:0000000000008C70                 sub     rsp, 8
.text:0000000000008C74                 call    ___errno_location
.text:0000000000008C79                 mov     dword ptr [rax], 16h
.text:0000000000008C7F                 mov     eax, 1
.text:0000000000008C84                 add     rsp, 8
.text:0000000000008C88                 retn
.text:0000000000008C88 ; } // starts at 8C60
.text:0000000000008C88 rpl_fts_set     endp
.text:0000000000008C88
.text:0000000000008C88 ; ---------------------------------------------------------------------------
.text:0000000000008C89                 align 10h
.text:0000000000008C90
.text:0000000000008C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C90
.text:0000000000008C90
.text:0000000000008C90                 public rpl_fts_children
.text:0000000000008C90 rpl_fts_children proc near
.text:0000000000008C90 ; __unwind {
.text:0000000000008C90                 push    r14
.text:0000000000008C92                 push    r13
.text:0000000000008C94                 push    r12
.text:0000000000008C96                 push    rbp
.text:0000000000008C97                 mov     r12d, esi
.text:0000000000008C9A                 push    rbx
.text:0000000000008C9B                 mov     rbx, rdi
.text:0000000000008C9E                 call    ___errno_location
.text:0000000000008CA3                 test    r12d, 0FFFFEFFFh
.text:0000000000008CAA                 mov     r13, rax
.text:0000000000008CAD                 jnz     loc_8D98
.text:0000000000008CB3                 mov     rbp, [rbx]
.text:0000000000008CB6                 mov     dword ptr [rax], 0
.text:0000000000008CBC                 test    byte ptr [rbx+49h], 20h
.text:0000000000008CC0                 jnz     short loc_8D40
.text:0000000000008CC2                 movzx   eax, word ptr [rbp+70h]
.text:0000000000008CC6                 cmp     ax, 9
.text:0000000000008CCA                 jz      short loc_8D30
.text:0000000000008CCC                 cmp     ax, 1
.text:0000000000008CD0                 jnz     short loc_8D40
.text:0000000000008CD2                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000008CD6                 test    rdi, rdi
.text:0000000000008CD9                 jz      short loc_8CE0
.text:0000000000008CDB                 call    fts_lfree
.text:0000000000008CE0
.text:0000000000008CE0 loc_8CE0:                               ; CODE XREF: rpl_fts_children+49↑j
.text:0000000000008CE0                 cmp     r12d, 1000h
.text:0000000000008CE7                 mov     r14d, 1
.text:0000000000008CED                 jnz     short loc_8CFC
.text:0000000000008CEF                 or      dword ptr [rbx+48h], 1000h
.text:0000000000008CF6                 mov     r14d, 2
.text:0000000000008CFC
.text:0000000000008CFC loc_8CFC:                               ; CODE XREF: rpl_fts_children+5D↑j
.text:0000000000008CFC                 cmp     qword ptr [rbp+58h], 0
.text:0000000000008D01                 jnz     short loc_8D15
.text:0000000000008D03                 mov     rax, [rbp+30h]
.text:0000000000008D07                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000008D0A                 jz      short loc_8D15
.text:0000000000008D0C                 mov     esi, [rbx+48h]
.text:0000000000008D0F                 test    sil, 4
.text:0000000000008D13                 jz      short loc_8D50
.text:0000000000008D15
.text:0000000000008D15 loc_8D15:                               ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000008D15                                         ; rpl_fts_children+7A↑j
.text:0000000000008D15                 mov     esi, r14d
.text:0000000000008D18                 mov     rdi, rbx
.text:0000000000008D1B                 call    fts_build
.text:0000000000008D20                 mov     [rbx+8], rax
.text:0000000000008D24
.text:0000000000008D24 loc_8D24:                               ; CODE XREF: rpl_fts_children+100↓j
.text:0000000000008D24                                         ; rpl_fts_children+110↓j ...
.text:0000000000008D24                 pop     rbx
.text:0000000000008D25                 pop     rbp
.text:0000000000008D26                 pop     r12
.text:0000000000008D28                 pop     r13
.text:0000000000008D2A                 pop     r14
.text:0000000000008D2C                 retn
.text:0000000000008D2C ; ---------------------------------------------------------------------------
.text:0000000000008D2D                 align 10h
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: rpl_fts_children+3A↑j
.text:0000000000008D30                 pop     rbx
.text:0000000000008D31                 mov     rax, [rbp+10h]
.text:0000000000008D35                 pop     rbp
.text:0000000000008D36                 pop     r12
.text:0000000000008D38                 pop     r13
.text:0000000000008D3A                 pop     r14
.text:0000000000008D3C                 retn
.text:0000000000008D3C ; ---------------------------------------------------------------------------
.text:0000000000008D3D                 align 20h
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: rpl_fts_children+30↑j
.text:0000000000008D40                                         ; rpl_fts_children+40↑j
.text:0000000000008D40                 pop     rbx
.text:0000000000008D41                 xor     eax, eax
.text:0000000000008D43                 pop     rbp
.text:0000000000008D44                 pop     r12
.text:0000000000008D46                 pop     r13
.text:0000000000008D48                 pop     r14
.text:0000000000008D4A                 retn
.text:0000000000008D4A ; ---------------------------------------------------------------------------
.text:0000000000008D4B                 align 10h
.text:0000000000008D50
.text:0000000000008D50 loc_8D50:                               ; CODE XREF: rpl_fts_children+83↑j
.text:0000000000008D50                 mov     edi, [rbx+2Ch]
.text:0000000000008D53                 lea     rdx, asc_B4BE+1 ; "."
.text:0000000000008D5A                 call    diropen_isra_6
.text:0000000000008D5F                 test    eax, eax
.text:0000000000008D61                 mov     ebp, eax
.text:0000000000008D63                 js      short loc_8DB9
.text:0000000000008D65                 mov     esi, r14d
.text:0000000000008D68                 mov     rdi, rbx
.text:0000000000008D6B                 call    fts_build
.text:0000000000008D70                 test    byte ptr [rbx+49h], 2
.text:0000000000008D74                 mov     [rbx+8], rax
.text:0000000000008D78                 jnz     short loc_8DA8
.text:0000000000008D7A                 mov     edi, ebp        ; fd
.text:0000000000008D7C                 call    _fchdir
.text:0000000000008D81                 test    eax, eax
.text:0000000000008D83                 jnz     short loc_8DC8
.text:0000000000008D85                 mov     edi, ebp        ; fd
.text:0000000000008D87                 call    _close
.text:0000000000008D8C
.text:0000000000008D8C loc_8D8C:                               ; CODE XREF: rpl_fts_children+127↓j
.text:0000000000008D8C                 mov     rax, [rbx+8]
.text:0000000000008D90                 jmp     short loc_8D24
.text:0000000000008D90 ; ---------------------------------------------------------------------------
.text:0000000000008D92                 align 8
.text:0000000000008D98
.text:0000000000008D98 loc_8D98:                               ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000008D98                 mov     dword ptr [rax], 16h
.text:0000000000008D9E                 xor     eax, eax
.text:0000000000008DA0                 jmp     loc_8D24
.text:0000000000008DA0 ; ---------------------------------------------------------------------------
.text:0000000000008DA5                 align 8
.text:0000000000008DA8
.text:0000000000008DA8 loc_8DA8:                               ; CODE XREF: rpl_fts_children+E8↑j
.text:0000000000008DA8                 mov     edx, 1
.text:0000000000008DAD                 mov     esi, ebp
.text:0000000000008DAF                 mov     rdi, rbx
.text:0000000000008DB2                 call    cwd_advance_fd
.text:0000000000008DB7                 jmp     short loc_8D8C
.text:0000000000008DB9 ; ---------------------------------------------------------------------------
.text:0000000000008DB9
.text:0000000000008DB9 loc_8DB9:                               ; CODE XREF: rpl_fts_children+D3↑j
.text:0000000000008DB9                 mov     qword ptr [rbx+8], 0
.text:0000000000008DC1                 xor     eax, eax
.text:0000000000008DC3                 jmp     loc_8D24
.text:0000000000008DC8 ; ---------------------------------------------------------------------------
.text:0000000000008DC8
.text:0000000000008DC8 loc_8DC8:                               ; CODE XREF: rpl_fts_children+F3↑j
.text:0000000000008DC8                 mov     ebx, [r13+0]
.text:0000000000008DCC                 mov     edi, ebp        ; fd
.text:0000000000008DCE                 call    _close
.text:0000000000008DD3                 xor     eax, eax
.text:0000000000008DD5                 mov     [r13+0], ebx
.text:0000000000008DD9                 jmp     loc_8D24
.text:0000000000008DD9 ; } // starts at 8C90
.text:0000000000008DD9 rpl_fts_children endp
.text:0000000000008DD9
.text:0000000000008DD9 ; ---------------------------------------------------------------------------
.text:0000000000008DDE                 align 20h
.text:0000000000008DE0
.text:0000000000008DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DE0
.text:0000000000008DE0 ; Attributes: info_from_lumina
.text:0000000000008DE0
.text:0000000000008DE0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008DE0                 public rpl_mbrtowc
.text:0000000000008DE0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008DE0
.text:0000000000008DE0 pwc             = dword ptr -34h
.text:0000000000008DE0 var_30          = qword ptr -30h
.text:0000000000008DE0
.text:0000000000008DE0 ; __unwind {
.text:0000000000008DE0                 push    r13
.text:0000000000008DE2                 push    r12
.text:0000000000008DE4                 mov     r13, rsi
.text:0000000000008DE7                 push    rbp
.text:0000000000008DE8                 push    rbx
.text:0000000000008DE9                 mov     rbx, rdi
.text:0000000000008DEC                 mov     r12, rdx
.text:0000000000008DEF                 sub     rsp, 18h
.text:0000000000008DF3                 mov     rax, fs:28h
.text:0000000000008DFC                 mov     [rsp+38h+var_30], rax
.text:0000000000008E01                 xor     eax, eax
.text:0000000000008E03                 lea     rax, [rsp+38h+pwc]
.text:0000000000008E08                 test    rdi, rdi
.text:0000000000008E0B                 cmovz   rbx, rax
.text:0000000000008E0F                 mov     rdi, rbx        ; pwc
.text:0000000000008E12                 call    _mbrtowc
.text:0000000000008E17                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000008E1B                 mov     rbp, rax
.text:0000000000008E1E                 jbe     short loc_8E40
.text:0000000000008E20                 test    r12, r12
.text:0000000000008E23                 jz      short loc_8E40
.text:0000000000008E25                 xor     edi, edi
.text:0000000000008E27                 call    hard_locale
.text:0000000000008E2C                 test    al, al
.text:0000000000008E2E                 jnz     short loc_8E40
.text:0000000000008E30                 movzx   eax, byte ptr [r13+0]
.text:0000000000008E35                 mov     ebp, 1
.text:0000000000008E3A                 mov     [rbx], eax
.text:0000000000008E3C                 nop     dword ptr [rax+00h]
.text:0000000000008E40
.text:0000000000008E40 loc_8E40:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000008E40                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000008E40                 mov     rdx, [rsp+38h+var_30]
.text:0000000000008E45                 xor     rdx, fs:28h
.text:0000000000008E4E                 mov     rax, rbp
.text:0000000000008E51                 jnz     short loc_8E5E
.text:0000000000008E53                 add     rsp, 18h
.text:0000000000008E57                 pop     rbx
.text:0000000000008E58                 pop     rbp
.text:0000000000008E59                 pop     r12
.text:0000000000008E5B                 pop     r13
.text:0000000000008E5D                 retn
.text:0000000000008E5E ; ---------------------------------------------------------------------------
.text:0000000000008E5E
.text:0000000000008E5E loc_8E5E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000008E5E                 call    ___stack_chk_fail
.text:0000000000008E5E ; } // starts at 8DE0
.text:0000000000008E5E rpl_mbrtowc     endp
.text:0000000000008E5E
.text:0000000000008E5E ; ---------------------------------------------------------------------------
.text:0000000000008E63                 align 10h
.text:0000000000008E70
.text:0000000000008E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E70
.text:0000000000008E70 ; Attributes: info_from_lumina
.text:0000000000008E70
.text:0000000000008E70 ; int __fastcall close_stream(FILE *stream)
.text:0000000000008E70                 public close_stream
.text:0000000000008E70 close_stream    proc near               ; CODE XREF: close_stdin+1F↑p
.text:0000000000008E70                                         ; close_stdin+4C↑p ...
.text:0000000000008E70 ; __unwind {
.text:0000000000008E70                 push    r12
.text:0000000000008E72                 push    rbp
.text:0000000000008E73                 mov     rbp, rdi
.text:0000000000008E76                 push    rbx
.text:0000000000008E77                 call    ___fpending
.text:0000000000008E7C                 mov     ebx, [rbp+0]
.text:0000000000008E7F                 mov     rdi, rbp        ; stream
.text:0000000000008E82                 mov     r12, rax
.text:0000000000008E85                 call    rpl_fclose
.text:0000000000008E8A                 and     ebx, 20h
.text:0000000000008E8D                 test    ebx, ebx
.text:0000000000008E8F                 jnz     short loc_8EA8
.text:0000000000008E91                 test    eax, eax
.text:0000000000008E93                 jz      short loc_8E9F
.text:0000000000008E95                 test    r12, r12
.text:0000000000008E98                 mov     eax, 0FFFFFFFFh
.text:0000000000008E9D                 jz      short loc_8ED8
.text:0000000000008E9F
.text:0000000000008E9F loc_8E9F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000008E9F                 pop     rbx
.text:0000000000008EA0                 pop     rbp
.text:0000000000008EA1                 pop     r12
.text:0000000000008EA3                 retn
.text:0000000000008EA3 ; ---------------------------------------------------------------------------
.text:0000000000008EA4                 align 8
.text:0000000000008EA8
.text:0000000000008EA8 loc_8EA8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000008EA8                 test    eax, eax
.text:0000000000008EAA                 jnz     short loc_8EC8
.text:0000000000008EAC                 call    ___errno_location
.text:0000000000008EB1                 mov     dword ptr [rax], 0
.text:0000000000008EB7                 mov     eax, 0FFFFFFFFh
.text:0000000000008EBC                 pop     rbx
.text:0000000000008EBD                 pop     rbp
.text:0000000000008EBE                 pop     r12
.text:0000000000008EC0                 retn
.text:0000000000008EC0 ; ---------------------------------------------------------------------------
.text:0000000000008EC1                 align 8
.text:0000000000008EC8
.text:0000000000008EC8 loc_8EC8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000008EC8                 pop     rbx
.text:0000000000008EC9                 mov     eax, 0FFFFFFFFh
.text:0000000000008ECE                 pop     rbp
.text:0000000000008ECF                 pop     r12
.text:0000000000008ED1                 retn
.text:0000000000008ED1 ; ---------------------------------------------------------------------------
.text:0000000000008ED2                 align 8
.text:0000000000008ED8
.text:0000000000008ED8 loc_8ED8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000008ED8                 call    ___errno_location
.text:0000000000008EDD                 cmp     dword ptr [rax], 9
.text:0000000000008EE0                 pop     rbx
.text:0000000000008EE1                 pop     rbp
.text:0000000000008EE2                 pop     r12
.text:0000000000008EE4                 setnz   al
.text:0000000000008EE7                 movzx   eax, al
.text:0000000000008EEA                 neg     eax
.text:0000000000008EEC                 retn
.text:0000000000008EEC ; } // starts at 8E70
.text:0000000000008EEC close_stream    endp
.text:0000000000008EEC
.text:0000000000008EEC ; ---------------------------------------------------------------------------
.text:0000000000008EED                 align 10h
.text:0000000000008EF0
.text:0000000000008EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EF0
.text:0000000000008EF0
.text:0000000000008EF0                 public cycle_check_init
.text:0000000000008EF0 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:0000000000008EF0 ; __unwind {
.text:0000000000008EF0                 mov     qword ptr [rdi+10h], 0
.text:0000000000008EF8                 mov     dword ptr [rdi+18h], 95F616h
.text:0000000000008EFF                 retn
.text:0000000000008EFF ; } // starts at 8EF0
.text:0000000000008EFF cycle_check_init endp
.text:0000000000008EFF
.text:0000000000008F00
.text:0000000000008F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F00
.text:0000000000008F00
.text:0000000000008F00                 public cycle_check
.text:0000000000008F00 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:0000000000008F00 ; __unwind {
.text:0000000000008F00                 cmp     dword ptr [rdi+18h], 95F616h
.text:0000000000008F07                 jnz     short loc_8F67
.text:0000000000008F09                 mov     rdx, [rdi+10h]
.text:0000000000008F0D                 mov     rcx, [rsi+8]
.text:0000000000008F11                 test    rdx, rdx
.text:0000000000008F14                 jz      short loc_8F30
.text:0000000000008F16                 cmp     [rdi], rcx
.text:0000000000008F19                 jz      short loc_8F48
.text:0000000000008F1B
.text:0000000000008F1B loc_8F1B:                               ; CODE XREF: cycle_check+4F↓j
.text:0000000000008F1B                 lea     r8, [rdx+1]
.text:0000000000008F1F                 xor     eax, eax
.text:0000000000008F21                 test    rdx, r8
.text:0000000000008F24                 mov     [rdi+10h], r8
.text:0000000000008F28                 jz      short loc_8F60
.text:0000000000008F2A                 rep retn
.text:0000000000008F2A ; ---------------------------------------------------------------------------
.text:0000000000008F2C                 align 10h
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: cycle_check+14↑j
.text:0000000000008F30                 mov     qword ptr [rdi+10h], 1
.text:0000000000008F38
.text:0000000000008F38 loc_8F38:                               ; CODE XREF: cycle_check+65↓j
.text:0000000000008F38                 mov     rax, [rsi]
.text:0000000000008F3B                 mov     [rdi], rcx
.text:0000000000008F3E                 mov     [rdi+8], rax
.text:0000000000008F42                 xor     eax, eax
.text:0000000000008F44                 retn
.text:0000000000008F44 ; ---------------------------------------------------------------------------
.text:0000000000008F45                 align 8
.text:0000000000008F48
.text:0000000000008F48 loc_8F48:                               ; CODE XREF: cycle_check+19↑j
.text:0000000000008F48                 mov     rax, [rdi+8]
.text:0000000000008F4C                 cmp     [rsi], rax
.text:0000000000008F4F                 jnz     short loc_8F1B
.text:0000000000008F51
.text:0000000000008F51 loc_8F51:                               ; CODE XREF: cycle_check+63↓j
.text:0000000000008F51                 mov     eax, 1
.text:0000000000008F56                 retn
.text:0000000000008F56 ; ---------------------------------------------------------------------------
.text:0000000000008F57                 align 20h
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: cycle_check+28↑j
.text:0000000000008F60                 test    r8, r8
.text:0000000000008F63                 jz      short loc_8F51
.text:0000000000008F65                 jmp     short loc_8F38
.text:0000000000008F67 ; ---------------------------------------------------------------------------
.text:0000000000008F67
.text:0000000000008F67 loc_8F67:                               ; CODE XREF: cycle_check+7↑j
.text:0000000000008F67                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:0000000000008F6E                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/cycle-check.c"
.text:0000000000008F75                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:0000000000008F7C                 sub     rsp, 8
.text:0000000000008F80                 mov     edx, 3Ch ; '<'  ; line
.text:0000000000008F85                 call    ___assert_fail
.text:0000000000008F85 ; } // starts at 8F00
.text:0000000000008F85 cycle_check     endp
.text:0000000000008F85
.text:0000000000008F85 ; ---------------------------------------------------------------------------
.text:0000000000008F8A                 align 10h
.text:0000000000008F90
.text:0000000000008F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F90
.text:0000000000008F90
.text:0000000000008F90                 public open_safer
.text:0000000000008F90 open_safer      proc near               ; CODE XREF: diropen_isra_6+23↑j
.text:0000000000008F90
.text:0000000000008F90 var_58          = dword ptr -58h
.text:0000000000008F90 var_50          = qword ptr -50h
.text:0000000000008F90 var_48          = qword ptr -48h
.text:0000000000008F90 var_40          = qword ptr -40h
.text:0000000000008F90 var_38          = byte ptr -38h
.text:0000000000008F90 var_28          = qword ptr -28h
.text:0000000000008F90 arg_0           = byte ptr  8
.text:0000000000008F90
.text:0000000000008F90 ; __unwind {
.text:0000000000008F90                 sub     rsp, 58h
.text:0000000000008F94                 mov     [rsp+58h+var_28], rdx
.text:0000000000008F99                 xor     edx, edx
.text:0000000000008F9B                 mov     rax, fs:28h
.text:0000000000008FA4                 mov     [rsp+58h+var_40], rax
.text:0000000000008FA9                 xor     eax, eax
.text:0000000000008FAB                 test    sil, 40h
.text:0000000000008FAF                 jnz     short loc_8FD8
.text:0000000000008FB1
.text:0000000000008FB1 loc_8FB1:                               ; CODE XREF: open_safer+67↓j
.text:0000000000008FB1                 xor     eax, eax
.text:0000000000008FB3                 call    _open
.text:0000000000008FB8                 mov     edi, eax        ; fd
.text:0000000000008FBA                 call    fd_safer_flag
.text:0000000000008FBF                 mov     rcx, [rsp+58h+var_40]
.text:0000000000008FC4                 xor     rcx, fs:28h
.text:0000000000008FCD                 jnz     short loc_8FF9
.text:0000000000008FCF                 add     rsp, 58h
.text:0000000000008FD3                 retn
.text:0000000000008FD3 ; ---------------------------------------------------------------------------
.text:0000000000008FD4                 align 8
.text:0000000000008FD8
.text:0000000000008FD8 loc_8FD8:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000008FD8                 lea     rax, [rsp+58h+arg_0]
.text:0000000000008FDD                 mov     [rsp+58h+var_58], 10h
.text:0000000000008FE4                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000008FE8                 mov     [rsp+58h+var_50], rax
.text:0000000000008FED                 lea     rax, [rsp+58h+var_38]
.text:0000000000008FF2                 mov     [rsp+58h+var_48], rax
.text:0000000000008FF7                 jmp     short loc_8FB1
.text:0000000000008FF9 ; ---------------------------------------------------------------------------
.text:0000000000008FF9
.text:0000000000008FF9 loc_8FF9:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000008FF9                 call    ___stack_chk_fail
.text:0000000000008FF9 ; } // starts at 8F90
.text:0000000000008FF9 open_safer      endp
.text:0000000000008FF9
.text:0000000000008FF9 ; ---------------------------------------------------------------------------
.text:0000000000008FFE                 align 20h
.text:0000000000009000
.text:0000000000009000 ; =============== S U B R O U T I N E =======================================
.text:0000000000009000
.text:0000000000009000
.text:0000000000009000                 public hard_locale
.text:0000000000009000 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000009000 ; __unwind {
.text:0000000000009000                 sub     rsp, 8
.text:0000000000009004                 xor     esi, esi        ; locale
.text:0000000000009006                 call    _setlocale
.text:000000000000900B                 mov     rdx, rax
.text:000000000000900E                 mov     eax, 1
.text:0000000000009013                 test    rdx, rdx
.text:0000000000009016                 jz      short loc_9035
.text:0000000000009018                 lea     rdi, aC         ; "C"
.text:000000000000901F                 mov     ecx, 2
.text:0000000000009024                 mov     rsi, rdx
.text:0000000000009027                 repe cmpsb
.text:0000000000009029                 setnbe  cl
.text:000000000000902C                 sbb     cl, 0
.text:000000000000902F                 xor     eax, eax
.text:0000000000009031                 test    cl, cl
.text:0000000000009033                 jnz     short loc_9040
.text:0000000000009035
.text:0000000000009035 loc_9035:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000009035                 add     rsp, 8
.text:0000000000009039                 retn
.text:0000000000009039 ; ---------------------------------------------------------------------------
.text:000000000000903A                 align 20h
.text:0000000000009040
.text:0000000000009040 loc_9040:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000009040                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000009047                 mov     ecx, 6
.text:000000000000904C                 mov     rsi, rdx
.text:000000000000904F                 repe cmpsb
.text:0000000000009051                 setnbe  al
.text:0000000000009054                 sbb     al, 0
.text:0000000000009056                 test    al, al
.text:0000000000009058                 setnz   al
.text:000000000000905B                 add     rsp, 8
.text:000000000000905F                 retn
.text:000000000000905F ; } // starts at 9000
.text:000000000000905F hard_locale     endp
.text:000000000000905F
.text:0000000000009060
.text:0000000000009060 ; =============== S U B R O U T I N E =======================================
.text:0000000000009060
.text:0000000000009060 ; Attributes: info_from_lumina
.text:0000000000009060
.text:0000000000009060 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000009060 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000009060                                         ; hash_rehash+7B↓p
.text:0000000000009060 ; __unwind {
.text:0000000000009060                 cmp     rdi, 0Ah
.text:0000000000009064                 mov     eax, 0Ah
.text:0000000000009069                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000009073                 cmovb   rdi, rax
.text:0000000000009077                 or      rdi, 1
.text:000000000000907B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000907F                 jz      short loc_90EF
.text:0000000000009081                 nop     dword ptr [rax+00000000h]
.text:0000000000009088
.text:0000000000009088 loc_9088:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000009088                 mov     rax, rdi
.text:000000000000908B                 mov     rcx, rdi
.text:000000000000908E                 mul     r9
.text:0000000000009091                 mov     rax, rdx
.text:0000000000009094                 shr     rax, 1
.text:0000000000009097                 lea     rax, [rax+rax*2]
.text:000000000000909B                 sub     rcx, rax
.text:000000000000909E                 cmp     rdi, 9
.text:00000000000090A2                 mov     rax, rcx
.text:00000000000090A5                 jbe     short loc_90E0
.text:00000000000090A7                 test    rcx, rcx
.text:00000000000090AA                 jz      short loc_90E5
.text:00000000000090AC                 mov     r8d, 10h
.text:00000000000090B2                 mov     esi, 9
.text:00000000000090B7                 mov     ecx, 3
.text:00000000000090BC                 jmp     short loc_90C9
.text:00000000000090BC ; ---------------------------------------------------------------------------
.text:00000000000090BE                 align 20h
.text:00000000000090C0
.text:00000000000090C0 loc_90C0:                               ; CODE XREF: next_prime+7E↓j
.text:00000000000090C0                 add     r8, 8
.text:00000000000090C4                 test    rdx, rdx
.text:00000000000090C7                 jz      short loc_90E5
.text:00000000000090C9
.text:00000000000090C9 loc_90C9:                               ; CODE XREF: next_prime+5C↑j
.text:00000000000090C9                 add     rcx, 2
.text:00000000000090CD                 xor     edx, edx
.text:00000000000090CF                 mov     rax, rdi
.text:00000000000090D2                 div     rcx
.text:00000000000090D5                 add     rsi, r8
.text:00000000000090D8                 cmp     rsi, rdi
.text:00000000000090DB                 mov     rax, rdx
.text:00000000000090DE                 jb      short loc_90C0
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: next_prime+45↑j
.text:00000000000090E0                 test    rax, rax
.text:00000000000090E3                 jnz     short loc_90EF
.text:00000000000090E5
.text:00000000000090E5 loc_90E5:                               ; CODE XREF: next_prime+4A↑j
.text:00000000000090E5                                         ; next_prime+67↑j
.text:00000000000090E5                 add     rdi, 2
.text:00000000000090E9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000090ED                 jnz     short loc_9088
.text:00000000000090EF
.text:00000000000090EF loc_90EF:                               ; CODE XREF: next_prime+1F↑j
.text:00000000000090EF                                         ; next_prime+83↑j
.text:00000000000090EF                 mov     rax, rdi
.text:00000000000090F2                 retn
.text:00000000000090F2 ; } // starts at 9060
.text:00000000000090F2 next_prime      endp
.text:00000000000090F2
.text:00000000000090F2 ; ---------------------------------------------------------------------------
.text:00000000000090F3                 align 20h
.text:0000000000009100
.text:0000000000009100 ; =============== S U B R O U T I N E =======================================
.text:0000000000009100
.text:0000000000009100
.text:0000000000009100 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000009100 ; __unwind {
.text:0000000000009100                 mov     rax, rdi
.text:0000000000009103                 xor     edx, edx
.text:0000000000009105                 ror     rax, 3
.text:0000000000009109                 div     rsi
.text:000000000000910C                 mov     rax, rdx
.text:000000000000910F                 retn
.text:000000000000910F ; } // starts at 9100
.text:000000000000910F raw_hasher      endp
.text:000000000000910F
.text:0000000000009110
.text:0000000000009110 ; =============== S U B R O U T I N E =======================================
.text:0000000000009110
.text:0000000000009110
.text:0000000000009110 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000009110 ; __unwind {
.text:0000000000009110                 cmp     rdi, rsi
.text:0000000000009113                 setz    al
.text:0000000000009116                 retn
.text:0000000000009116 ; } // starts at 9110
.text:0000000000009116 raw_comparator  endp
.text:0000000000009116
.text:0000000000009116 ; ---------------------------------------------------------------------------
.text:0000000000009117                 align 20h
.text:0000000000009120
.text:0000000000009120 ; =============== S U B R O U T I N E =======================================
.text:0000000000009120
.text:0000000000009120 ; Attributes: info_from_lumina
.text:0000000000009120
.text:0000000000009120 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000009120 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000009120                                         ; transfer_entries+65↓p ...
.text:0000000000009120 ; __unwind {
.text:0000000000009120                 push    rbx
.text:0000000000009121                 mov     rbx, rdi
.text:0000000000009124                 mov     rdi, rsi
.text:0000000000009127                 mov     rsi, [rbx+10h]
.text:000000000000912B                 call    qword ptr [rbx+30h]
.text:000000000000912E                 cmp     [rbx+10h], rax
.text:0000000000009132                 jbe     short loc_913D
.text:0000000000009134                 shl     rax, 4
.text:0000000000009138                 add     rax, [rbx]
.text:000000000000913B                 pop     rbx
.text:000000000000913C                 retn
.text:000000000000913D ; ---------------------------------------------------------------------------
.text:000000000000913D
.text:000000000000913D loc_913D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000913D                 call    _abort
.text:000000000000913D ; } // starts at 9120
.text:000000000000913D safe_hasher     endp
.text:000000000000913D
.text:000000000000913D ; ---------------------------------------------------------------------------
.text:0000000000009142                 align 10h
.text:0000000000009150
.text:0000000000009150 ; =============== S U B R O U T I N E =======================================
.text:0000000000009150
.text:0000000000009150 ; Attributes: info_from_lumina
.text:0000000000009150
.text:0000000000009150 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000009150 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000009150                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000009150 ; __unwind {
.text:0000000000009150                 push    r14
.text:0000000000009152                 push    r13
.text:0000000000009154                 mov     r14, rdx
.text:0000000000009157                 push    r12
.text:0000000000009159                 push    rbp
.text:000000000000915A                 mov     r12, rdi
.text:000000000000915D                 push    rbx
.text:000000000000915E                 mov     rbp, rsi
.text:0000000000009161                 mov     r13d, ecx
.text:0000000000009164                 call    safe_hasher
.text:0000000000009169                 mov     [r14], rax
.text:000000000000916C                 mov     rsi, [rax]
.text:000000000000916F                 test    rsi, rsi
.text:0000000000009172                 jz      loc_9260
.text:0000000000009178                 cmp     rsi, rbp
.text:000000000000917B                 mov     rbx, rax
.text:000000000000917E                 jz      loc_9213
.text:0000000000009184                 mov     rdi, rbp
.text:0000000000009187                 call    qword ptr [r12+38h]
.text:000000000000918C                 test    al, al
.text:000000000000918E                 jnz     loc_9210
.text:0000000000009194                 mov     rax, [rbx+8]
.text:0000000000009198                 test    rax, rax
.text:000000000000919B                 jz      loc_9260
.text:00000000000091A1                 mov     rsi, [rax]
.text:00000000000091A4                 cmp     rbp, rsi
.text:00000000000091A7                 jnz     short loc_91C9
.text:00000000000091A9                 jmp     short loc_91DC
.text:00000000000091A9 ; ---------------------------------------------------------------------------
.text:00000000000091AB                 align 10h
.text:00000000000091B0
.text:00000000000091B0 loc_91B0:                               ; CODE XREF: hash_find_entry+83↓j
.text:00000000000091B0                 mov     rbx, [rbx+8]
.text:00000000000091B4                 mov     rax, [rbx+8]
.text:00000000000091B8                 test    rax, rax
.text:00000000000091BB                 jz      loc_9260
.text:00000000000091C1                 mov     rsi, [rax]
.text:00000000000091C4                 cmp     rsi, rbp
.text:00000000000091C7                 jz      short loc_91DC
.text:00000000000091C9
.text:00000000000091C9 loc_91C9:                               ; CODE XREF: hash_find_entry+57↑j
.text:00000000000091C9                 mov     rdi, rbp
.text:00000000000091CC                 call    qword ptr [r12+38h]
.text:00000000000091D1                 test    al, al
.text:00000000000091D3                 jz      short loc_91B0
.text:00000000000091D5                 mov     rax, [rbx+8]
.text:00000000000091D9                 mov     rsi, [rax]
.text:00000000000091DC
.text:00000000000091DC loc_91DC:                               ; CODE XREF: hash_find_entry+59↑j
.text:00000000000091DC                                         ; hash_find_entry+77↑j
.text:00000000000091DC                 test    r13b, r13b
.text:00000000000091DF                 jz      short loc_91FE
.text:00000000000091E1                 mov     rdx, [rax+8]
.text:00000000000091E5                 mov     [rbx+8], rdx
.text:00000000000091E9                 mov     qword ptr [rax], 0
.text:00000000000091F0                 mov     rdx, [r12+48h]
.text:00000000000091F5                 mov     [rax+8], rdx
.text:00000000000091F9                 mov     [r12+48h], rax
.text:00000000000091FE
.text:00000000000091FE loc_91FE:                               ; CODE XREF: hash_find_entry+8F↑j
.text:00000000000091FE                                         ; hash_find_entry+C6↓j ...
.text:00000000000091FE                 pop     rbx
.text:00000000000091FF                 mov     rax, rsi
.text:0000000000009202                 pop     rbp
.text:0000000000009203                 pop     r12
.text:0000000000009205                 pop     r13
.text:0000000000009207                 pop     r14
.text:0000000000009209                 retn
.text:0000000000009209 ; ---------------------------------------------------------------------------
.text:000000000000920A                 align 10h
.text:0000000000009210
.text:0000000000009210 loc_9210:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000009210                 mov     rsi, [rbx]
.text:0000000000009213
.text:0000000000009213 loc_9213:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000009213                 test    r13b, r13b
.text:0000000000009216                 jz      short loc_91FE
.text:0000000000009218                 mov     rax, [rbx+8]
.text:000000000000921C                 test    rax, rax
.text:000000000000921F                 jz      short loc_9250
.text:0000000000009221                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000009225                 movups  xmmword ptr [rbx], xmm0
.text:0000000000009228                 mov     qword ptr [rax], 0
.text:000000000000922F                 mov     rdx, [r12+48h]
.text:0000000000009234                 mov     [rax+8], rdx
.text:0000000000009238                 mov     [r12+48h], rax
.text:000000000000923D                 mov     rax, rsi
.text:0000000000009240                 pop     rbx
.text:0000000000009241                 pop     rbp
.text:0000000000009242                 pop     r12
.text:0000000000009244                 pop     r13
.text:0000000000009246                 pop     r14
.text:0000000000009248                 retn
.text:0000000000009248 ; ---------------------------------------------------------------------------
.text:0000000000009249                 align 10h
.text:0000000000009250
.text:0000000000009250 loc_9250:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000009250                 mov     qword ptr [rbx], 0
.text:0000000000009257                 jmp     short loc_91FE
.text:0000000000009257 ; ---------------------------------------------------------------------------
.text:0000000000009259                 align 20h
.text:0000000000009260
.text:0000000000009260 loc_9260:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000009260                                         ; hash_find_entry+4B↑j ...
.text:0000000000009260                 xor     esi, esi
.text:0000000000009262                 pop     rbx
.text:0000000000009263                 mov     rax, rsi
.text:0000000000009266                 pop     rbp
.text:0000000000009267                 pop     r12
.text:0000000000009269                 pop     r13
.text:000000000000926B                 pop     r14
.text:000000000000926D                 retn
.text:000000000000926D ; } // starts at 9150
.text:000000000000926D hash_find_entry endp
.text:000000000000926D
.text:000000000000926D ; ---------------------------------------------------------------------------
.text:000000000000926E                 align 10h
.text:0000000000009270
.text:0000000000009270 ; =============== S U B R O U T I N E =======================================
.text:0000000000009270
.text:0000000000009270 ; Attributes: info_from_lumina
.text:0000000000009270
.text:0000000000009270 ; _Bool check_tuning(Hash_table *table)
.text:0000000000009270 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000009270                                         ; hash_initialize+11B↓p ...
.text:0000000000009270 ; __unwind {
.text:0000000000009270                 mov     rdx, [rdi]
.text:0000000000009273                 lea     rcx, default_tuning
.text:000000000000927A                 mov     eax, 1
.text:000000000000927F                 cmp     rdx, rcx
.text:0000000000009282                 jz      short locret_92E5
.text:0000000000009284                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000009289                 ucomiss xmm0, cs:dword_C2F4
.text:0000000000009290                 jbe     short loc_92E0
.text:0000000000009292                 movss   xmm1, cs:dword_C2F8
.text:000000000000929A                 ucomiss xmm1, xmm0
.text:000000000000929D                 jbe     short loc_92E0
.text:000000000000929F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:00000000000092A4                 ucomiss xmm1, cs:dword_C2FC
.text:00000000000092AB                 jbe     short loc_92E0
.text:00000000000092AD                 movss   xmm1, dword ptr [rdx]
.text:00000000000092B1                 ucomiss xmm1, cs:dword_C300
.text:00000000000092B8                 jb      short loc_92E0
.text:00000000000092BA                 addss   xmm1, cs:dword_C2F4
.text:00000000000092C2                 movss   xmm2, dword ptr [rdx+4]
.text:00000000000092C7                 ucomiss xmm2, xmm1
.text:00000000000092CA                 jbe     short loc_92E0
.text:00000000000092CC                 movss   xmm3, cs:dword_C304
.text:00000000000092D4                 ucomiss xmm3, xmm2
.text:00000000000092D7                 jb      short loc_92E0
.text:00000000000092D9                 ucomiss xmm0, xmm1
.text:00000000000092DC                 ja      short locret_92E5
.text:00000000000092DE                 xchg    ax, ax
.text:00000000000092E0
.text:00000000000092E0 loc_92E0:                               ; CODE XREF: check_tuning+20↑j
.text:00000000000092E0                                         ; check_tuning+2D↑j ...
.text:00000000000092E0                 mov     [rdi], rcx
.text:00000000000092E3                 xor     eax, eax
.text:00000000000092E5
.text:00000000000092E5 locret_92E5:                            ; CODE XREF: check_tuning+12↑j
.text:00000000000092E5                                         ; check_tuning+6C↑j
.text:00000000000092E5                 rep retn
.text:00000000000092E5 ; } // starts at 9270
.text:00000000000092E5 check_tuning    endp
.text:00000000000092E5
.text:00000000000092E5 ; ---------------------------------------------------------------------------
.text:00000000000092E7                 align 10h
.text:00000000000092F0
.text:00000000000092F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092F0
.text:00000000000092F0 ; Attributes: info_from_lumina
.text:00000000000092F0
.text:00000000000092F0 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:00000000000092F0 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:00000000000092F0                                         ; hash_rehash+152↓p ...
.text:00000000000092F0 ; __unwind {
.text:00000000000092F0                 push    r15
.text:00000000000092F2                 push    r14
.text:00000000000092F4                 push    r13
.text:00000000000092F6                 push    r12
.text:00000000000092F8                 push    rbp
.text:00000000000092F9                 push    rbx
.text:00000000000092FA                 sub     rsp, 8
.text:00000000000092FE                 mov     r12, [rsi]
.text:0000000000009301                 cmp     r12, [rsi+8]
.text:0000000000009305                 jnb     loc_93E8
.text:000000000000930B                 mov     rbp, rdi
.text:000000000000930E                 mov     r13, rsi
.text:0000000000009311                 mov     r14d, edx
.text:0000000000009314                 nop     dword ptr [rax+00h]
.text:0000000000009318
.text:0000000000009318 loc_9318:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000009318                 mov     r15, [r12]
.text:000000000000931C                 test    r15, r15
.text:000000000000931F                 jz      loc_93DA
.text:0000000000009325                 mov     rbx, [r12+8]
.text:000000000000932A                 test    rbx, rbx
.text:000000000000932D                 jnz     short loc_934C
.text:000000000000932F                 jmp     short loc_938B
.text:000000000000932F ; ---------------------------------------------------------------------------
.text:0000000000009331                 align 8
.text:0000000000009338
.text:0000000000009338 loc_9338:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000009338                 mov     rcx, [rax+8]
.text:000000000000933C                 test    rdx, rdx
.text:000000000000933F                 mov     [rbx+8], rcx
.text:0000000000009343                 mov     [rax+8], rbx
.text:0000000000009347                 mov     rbx, rdx
.text:000000000000934A                 jz      short loc_9387
.text:000000000000934C
.text:000000000000934C loc_934C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000934C                                         ; transfer_entries+95↓j
.text:000000000000934C                 mov     r15, [rbx]
.text:000000000000934F                 mov     rdi, rbp
.text:0000000000009352                 mov     rsi, r15
.text:0000000000009355                 call    safe_hasher
.text:000000000000935A                 cmp     qword ptr [rax], 0
.text:000000000000935E                 mov     rdx, [rbx+8]
.text:0000000000009362                 jnz     short loc_9338
.text:0000000000009364                 mov     [rax], r15
.text:0000000000009367                 add     qword ptr [rbp+18h], 1
.text:000000000000936C                 test    rdx, rdx
.text:000000000000936F                 mov     qword ptr [rbx], 0
.text:0000000000009376                 mov     rax, [rbp+48h]
.text:000000000000937A                 mov     [rbx+8], rax
.text:000000000000937E                 mov     [rbp+48h], rbx
.text:0000000000009382                 mov     rbx, rdx
.text:0000000000009385                 jnz     short loc_934C
.text:0000000000009387
.text:0000000000009387 loc_9387:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000009387                 mov     r15, [r12]
.text:000000000000938B
.text:000000000000938B loc_938B:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000938B                 test    r14b, r14b
.text:000000000000938E                 mov     qword ptr [r12+8], 0
.text:0000000000009397                 jnz     short loc_93DA
.text:0000000000009399                 mov     rsi, r15
.text:000000000000939C                 mov     rdi, rbp
.text:000000000000939F                 call    safe_hasher
.text:00000000000093A4                 cmp     qword ptr [rax], 0
.text:00000000000093A8                 mov     rbx, rax
.text:00000000000093AB                 jz      short loc_9400
.text:00000000000093AD                 mov     rax, [rbp+48h]
.text:00000000000093B1                 test    rax, rax
.text:00000000000093B4                 jz      short loc_9410
.text:00000000000093B6                 mov     rdx, [rax+8]
.text:00000000000093BA                 mov     [rbp+48h], rdx
.text:00000000000093BE
.text:00000000000093BE loc_93BE:                               ; CODE XREF: transfer_entries+12D↓j
.text:00000000000093BE                 mov     rdx, [rbx+8]
.text:00000000000093C2                 mov     [rax], r15
.text:00000000000093C5                 mov     [rax+8], rdx
.text:00000000000093C9                 mov     [rbx+8], rax
.text:00000000000093CD
.text:00000000000093CD loc_93CD:                               ; CODE XREF: transfer_entries+118↓j
.text:00000000000093CD                 mov     qword ptr [r12], 0
.text:00000000000093D5                 sub     qword ptr [r13+18h], 1
.text:00000000000093DA
.text:00000000000093DA loc_93DA:                               ; CODE XREF: transfer_entries+2F↑j
.text:00000000000093DA                                         ; transfer_entries+A7↑j
.text:00000000000093DA                 add     r12, 10h
.text:00000000000093DE                 cmp     [r13+8], r12
.text:00000000000093E2                 ja      loc_9318
.text:00000000000093E8
.text:00000000000093E8 loc_93E8:                               ; CODE XREF: transfer_entries+15↑j
.text:00000000000093E8                 add     rsp, 8
.text:00000000000093EC                 mov     eax, 1
.text:00000000000093F1                 pop     rbx
.text:00000000000093F2                 pop     rbp
.text:00000000000093F3                 pop     r12
.text:00000000000093F5                 pop     r13
.text:00000000000093F7                 pop     r14
.text:00000000000093F9                 pop     r15
.text:00000000000093FB                 retn
.text:00000000000093FB ; ---------------------------------------------------------------------------
.text:00000000000093FC                 align 20h
.text:0000000000009400
.text:0000000000009400 loc_9400:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000009400                 mov     [rax], r15
.text:0000000000009403                 add     qword ptr [rbp+18h], 1
.text:0000000000009408                 jmp     short loc_93CD
.text:0000000000009408 ; ---------------------------------------------------------------------------
.text:000000000000940A                 align 10h
.text:0000000000009410
.text:0000000000009410 loc_9410:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000009410                 mov     edi, 10h        ; size
.text:0000000000009415                 call    _malloc
.text:000000000000941A                 test    rax, rax
.text:000000000000941D                 jnz     short loc_93BE
.text:000000000000941F                 add     rsp, 8
.text:0000000000009423                 xor     eax, eax
.text:0000000000009425                 pop     rbx
.text:0000000000009426                 pop     rbp
.text:0000000000009427                 pop     r12
.text:0000000000009429                 pop     r13
.text:000000000000942B                 pop     r14
.text:000000000000942D                 pop     r15
.text:000000000000942F                 retn
.text:000000000000942F ; } // starts at 92F0
.text:000000000000942F transfer_entries endp
.text:000000000000942F
.text:0000000000009430
.text:0000000000009430 ; =============== S U B R O U T I N E =======================================
.text:0000000000009430
.text:0000000000009430
.text:0000000000009430                 public hash_get_n_buckets
.text:0000000000009430 hash_get_n_buckets proc near
.text:0000000000009430 ; __unwind {
.text:0000000000009430                 mov     rax, [rdi+10h]
.text:0000000000009434                 retn
.text:0000000000009434 ; } // starts at 9430
.text:0000000000009434 hash_get_n_buckets endp
.text:0000000000009434
.text:0000000000009434 ; ---------------------------------------------------------------------------
.text:0000000000009435                 align 20h
.text:0000000000009440
.text:0000000000009440 ; =============== S U B R O U T I N E =======================================
.text:0000000000009440
.text:0000000000009440
.text:0000000000009440                 public hash_get_n_buckets_used
.text:0000000000009440 hash_get_n_buckets_used proc near
.text:0000000000009440 ; __unwind {
.text:0000000000009440                 mov     rax, [rdi+18h]
.text:0000000000009444                 retn
.text:0000000000009444 ; } // starts at 9440
.text:0000000000009444 hash_get_n_buckets_used endp
.text:0000000000009444
.text:0000000000009444 ; ---------------------------------------------------------------------------
.text:0000000000009445                 align 10h
.text:0000000000009450
.text:0000000000009450 ; =============== S U B R O U T I N E =======================================
.text:0000000000009450
.text:0000000000009450
.text:0000000000009450                 public hash_get_n_entries
.text:0000000000009450 hash_get_n_entries proc near
.text:0000000000009450 ; __unwind {
.text:0000000000009450                 mov     rax, [rdi+20h]
.text:0000000000009454                 retn
.text:0000000000009454 ; } // starts at 9450
.text:0000000000009454 hash_get_n_entries endp
.text:0000000000009454
.text:0000000000009454 ; ---------------------------------------------------------------------------
.text:0000000000009455                 align 20h
.text:0000000000009460
.text:0000000000009460 ; =============== S U B R O U T I N E =======================================
.text:0000000000009460
.text:0000000000009460 ; Attributes: info_from_lumina
.text:0000000000009460
.text:0000000000009460 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:0000000000009460                 public hash_get_max_bucket_length
.text:0000000000009460 hash_get_max_bucket_length proc near
.text:0000000000009460 ; __unwind {
.text:0000000000009460                 mov     rsi, [rdi]
.text:0000000000009463                 mov     rdi, [rdi+8]
.text:0000000000009467                 xor     eax, eax
.text:0000000000009469                 cmp     rsi, rdi
.text:000000000000946C                 jnb     short locret_94A7
.text:000000000000946E                 xchg    ax, ax
.text:0000000000009470
.text:0000000000009470 loc_9470:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000009470                 cmp     qword ptr [rsi], 0
.text:0000000000009474                 jz      short loc_949C
.text:0000000000009476                 mov     rdx, [rsi+8]
.text:000000000000947A                 mov     ecx, 1
.text:000000000000947F                 test    rdx, rdx
.text:0000000000009482                 jz      short loc_9495
.text:0000000000009484                 nop     dword ptr [rax+00h]
.text:0000000000009488
.text:0000000000009488 loc_9488:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000009488                 mov     rdx, [rdx+8]
.text:000000000000948C                 add     rcx, 1
.text:0000000000009490                 test    rdx, rdx
.text:0000000000009493                 jnz     short loc_9488
.text:0000000000009495
.text:0000000000009495 loc_9495:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000009495                 cmp     rax, rcx
.text:0000000000009498                 cmovb   rax, rcx
.text:000000000000949C
.text:000000000000949C loc_949C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000949C                 add     rsi, 10h
.text:00000000000094A0                 cmp     rsi, rdi
.text:00000000000094A3                 jb      short loc_9470
.text:00000000000094A5                 rep retn
.text:00000000000094A7 ; ---------------------------------------------------------------------------
.text:00000000000094A7
.text:00000000000094A7 locret_94A7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:00000000000094A7                 rep retn
.text:00000000000094A7 ; } // starts at 9460
.text:00000000000094A7 hash_get_max_bucket_length endp
.text:00000000000094A7
.text:00000000000094A7 ; ---------------------------------------------------------------------------
.text:00000000000094A9                 align 10h
.text:00000000000094B0
.text:00000000000094B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094B0
.text:00000000000094B0 ; Attributes: info_from_lumina
.text:00000000000094B0
.text:00000000000094B0 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:00000000000094B0                 public hash_table_ok
.text:00000000000094B0 hash_table_ok   proc near
.text:00000000000094B0 ; __unwind {
.text:00000000000094B0                 mov     rcx, [rdi]
.text:00000000000094B3                 mov     r8, [rdi+8]
.text:00000000000094B7                 xor     edx, edx
.text:00000000000094B9                 xor     esi, esi
.text:00000000000094BB                 cmp     rcx, r8
.text:00000000000094BE                 jnb     short loc_94F6
.text:00000000000094C0
.text:00000000000094C0 loc_94C0:                               ; CODE XREF: hash_table_ok+44↓j
.text:00000000000094C0                 cmp     qword ptr [rcx], 0
.text:00000000000094C4                 jz      short loc_94ED
.text:00000000000094C6                 mov     rax, [rcx+8]
.text:00000000000094CA                 add     rsi, 1
.text:00000000000094CE                 add     rdx, 1
.text:00000000000094D2                 test    rax, rax
.text:00000000000094D5                 jz      short loc_94ED
.text:00000000000094D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000094E0
.text:00000000000094E0 loc_94E0:                               ; CODE XREF: hash_table_ok+3B↓j
.text:00000000000094E0                 mov     rax, [rax+8]
.text:00000000000094E4                 add     rdx, 1
.text:00000000000094E8                 test    rax, rax
.text:00000000000094EB                 jnz     short loc_94E0
.text:00000000000094ED
.text:00000000000094ED loc_94ED:                               ; CODE XREF: hash_table_ok+14↑j
.text:00000000000094ED                                         ; hash_table_ok+25↑j
.text:00000000000094ED                 add     rcx, 10h
.text:00000000000094F1                 cmp     rcx, r8
.text:00000000000094F4                 jb      short loc_94C0
.text:00000000000094F6
.text:00000000000094F6 loc_94F6:                               ; CODE XREF: hash_table_ok+E↑j
.text:00000000000094F6                 xor     eax, eax
.text:00000000000094F8                 cmp     [rdi+18h], rsi
.text:00000000000094FC                 jz      short loc_9500
.text:00000000000094FE                 rep retn
.text:0000000000009500 ; ---------------------------------------------------------------------------
.text:0000000000009500
.text:0000000000009500 loc_9500:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000009500                 cmp     [rdi+20h], rdx
.text:0000000000009504                 setz    al
.text:0000000000009507                 retn
.text:0000000000009507 ; } // starts at 94B0
.text:0000000000009507 hash_table_ok   endp
.text:0000000000009507
.text:0000000000009507 ; ---------------------------------------------------------------------------
.text:0000000000009508                 align 10h
.text:0000000000009510
.text:0000000000009510 ; =============== S U B R O U T I N E =======================================
.text:0000000000009510
.text:0000000000009510 ; Attributes: info_from_lumina
.text:0000000000009510
.text:0000000000009510 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000009510                 public hash_print_statistics
.text:0000000000009510 hash_print_statistics proc near
.text:0000000000009510 ; __unwind {
.text:0000000000009510                 push    r13
.text:0000000000009512                 push    r12
.text:0000000000009514                 mov     r12, rsi
.text:0000000000009517                 push    rbp
.text:0000000000009518                 push    rbx
.text:0000000000009519                 xor     ebx, ebx
.text:000000000000951B                 sub     rsp, 8
.text:000000000000951F                 mov     rsi, [rdi]
.text:0000000000009522                 mov     rcx, [rdi+20h]
.text:0000000000009526                 mov     rbp, [rdi+10h]
.text:000000000000952A                 mov     r13, [rdi+18h]
.text:000000000000952E                 mov     rdi, [rdi+8]
.text:0000000000009532                 cmp     rsi, rdi
.text:0000000000009535                 jnb     short loc_9575
.text:0000000000009537                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009540
.text:0000000000009540 loc_9540:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000009540                 cmp     qword ptr [rsi], 0
.text:0000000000009544                 jz      short loc_956C
.text:0000000000009546                 mov     rax, [rsi+8]
.text:000000000000954A                 mov     edx, 1
.text:000000000000954F                 test    rax, rax
.text:0000000000009552                 jz      short loc_9565
.text:0000000000009554                 nop     dword ptr [rax+00h]
.text:0000000000009558
.text:0000000000009558 loc_9558:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000009558                 mov     rax, [rax+8]
.text:000000000000955C                 add     rdx, 1
.text:0000000000009560                 test    rax, rax
.text:0000000000009563                 jnz     short loc_9558
.text:0000000000009565
.text:0000000000009565 loc_9565:                               ; CODE XREF: hash_print_statistics+42↑j
.text:0000000000009565                 cmp     rbx, rdx
.text:0000000000009568                 cmovb   rbx, rdx
.text:000000000000956C
.text:000000000000956C loc_956C:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000956C                 add     rsi, 10h
.text:0000000000009570                 cmp     rsi, rdi
.text:0000000000009573                 jb      short loc_9540
.text:0000000000009575
.text:0000000000009575 loc_9575:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000009575                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000957C                 mov     esi, 1
.text:0000000000009581                 mov     rdi, r12
.text:0000000000009584                 xor     eax, eax
.text:0000000000009586                 call    ___fprintf_chk
.text:000000000000958B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000009592                 xor     eax, eax
.text:0000000000009594                 mov     rcx, rbp
.text:0000000000009597                 mov     esi, 1
.text:000000000000959C                 mov     rdi, r12
.text:000000000000959F                 call    ___fprintf_chk
.text:00000000000095A4                 test    r13, r13
.text:00000000000095A7                 js      short loc_9610
.text:00000000000095A9                 pxor    xmm0, xmm0
.text:00000000000095AD                 test    rbp, rbp
.text:00000000000095B0                 cvtsi2sd xmm0, r13
.text:00000000000095B5                 mulsd   xmm0, cs:qword_C318
.text:00000000000095BD                 js      short loc_9639
.text:00000000000095BF
.text:00000000000095BF loc_95BF:                               ; CODE XREF: hash_print_statistics+127↓j
.text:00000000000095BF                 pxor    xmm1, xmm1
.text:00000000000095C3                 cvtsi2sd xmm1, rbp
.text:00000000000095C8
.text:00000000000095C8 loc_95C8:                               ; CODE XREF: hash_print_statistics+142↓j
.text:00000000000095C8                 divsd   xmm0, xmm1
.text:00000000000095CC                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00000000000095D3                 mov     rcx, r13
.text:00000000000095D6                 mov     rdi, r12
.text:00000000000095D9                 mov     esi, 1
.text:00000000000095DE                 mov     eax, 1
.text:00000000000095E3                 call    ___fprintf_chk
.text:00000000000095E8                 add     rsp, 8
.text:00000000000095EC                 mov     rcx, rbx
.text:00000000000095EF                 mov     rdi, r12
.text:00000000000095F2                 pop     rbx
.text:00000000000095F3                 pop     rbp
.text:00000000000095F4                 pop     r12
.text:00000000000095F6                 pop     r13
.text:00000000000095F8                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00000000000095FF                 mov     esi, 1
.text:0000000000009604                 xor     eax, eax
.text:0000000000009606                 jmp     ___fprintf_chk
.text:0000000000009606 ; ---------------------------------------------------------------------------
.text:000000000000960B                 align 10h
.text:0000000000009610
.text:0000000000009610 loc_9610:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000009610                 mov     rax, r13
.text:0000000000009613                 mov     rdx, r13
.text:0000000000009616                 pxor    xmm0, xmm0
.text:000000000000961A                 shr     rax, 1
.text:000000000000961D                 and     edx, 1
.text:0000000000009620                 or      rax, rdx
.text:0000000000009623                 test    rbp, rbp
.text:0000000000009626                 cvtsi2sd xmm0, rax
.text:000000000000962B                 addsd   xmm0, xmm0
.text:000000000000962F                 mulsd   xmm0, cs:qword_C318
.text:0000000000009637                 jns     short loc_95BF
.text:0000000000009639
.text:0000000000009639 loc_9639:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000009639                 mov     rax, rbp
.text:000000000000963C                 pxor    xmm1, xmm1
.text:0000000000009640                 shr     rax, 1
.text:0000000000009643                 and     ebp, 1
.text:0000000000009646                 or      rax, rbp
.text:0000000000009649                 cvtsi2sd xmm1, rax
.text:000000000000964E                 addsd   xmm1, xmm1
.text:0000000000009652                 jmp     loc_95C8
.text:0000000000009652 ; } // starts at 9510
.text:0000000000009652 hash_print_statistics endp
.text:0000000000009652
.text:0000000000009652 ; ---------------------------------------------------------------------------
.text:0000000000009657                 align 20h
.text:0000000000009660
.text:0000000000009660 ; =============== S U B R O U T I N E =======================================
.text:0000000000009660
.text:0000000000009660 ; Attributes: info_from_lumina
.text:0000000000009660
.text:0000000000009660 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:0000000000009660                 public hash_lookup
.text:0000000000009660 hash_lookup     proc near               ; CODE XREF: filesystem_type+47↑p
.text:0000000000009660 ; __unwind {
.text:0000000000009660                 push    r12
.text:0000000000009662                 push    rbp
.text:0000000000009663                 mov     r12, rdi
.text:0000000000009666                 push    rbx
.text:0000000000009667                 mov     rbp, rsi
.text:000000000000966A                 call    safe_hasher
.text:000000000000966F                 mov     rsi, [rax]
.text:0000000000009672                 test    rsi, rsi
.text:0000000000009675                 jz      short loc_969D
.text:0000000000009677                 mov     rbx, rax
.text:000000000000967A                 jmp     short loc_9683
.text:000000000000967A ; ---------------------------------------------------------------------------
.text:000000000000967C                 align 20h
.text:0000000000009680
.text:0000000000009680 loc_9680:                               ; CODE XREF: hash_lookup+3B↓j
.text:0000000000009680                 mov     rsi, [rbx]
.text:0000000000009683
.text:0000000000009683 loc_9683:                               ; CODE XREF: hash_lookup+1A↑j
.text:0000000000009683                 cmp     rsi, rbp
.text:0000000000009686                 jz      short loc_969F
.text:0000000000009688                 mov     rdi, rbp
.text:000000000000968B                 call    qword ptr [r12+38h]
.text:0000000000009690                 test    al, al
.text:0000000000009692                 jnz     short loc_96B0
.text:0000000000009694                 mov     rbx, [rbx+8]
.text:0000000000009698                 test    rbx, rbx
.text:000000000000969B                 jnz     short loc_9680
.text:000000000000969D
.text:000000000000969D loc_969D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000969D                 xor     esi, esi
.text:000000000000969F
.text:000000000000969F loc_969F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000969F                 pop     rbx
.text:00000000000096A0                 mov     rax, rsi
.text:00000000000096A3                 pop     rbp
.text:00000000000096A4                 pop     r12
.text:00000000000096A6                 retn
.text:00000000000096A6 ; ---------------------------------------------------------------------------
.text:00000000000096A7                 align 10h
.text:00000000000096B0
.text:00000000000096B0 loc_96B0:                               ; CODE XREF: hash_lookup+32↑j
.text:00000000000096B0                 mov     rsi, [rbx]
.text:00000000000096B3                 pop     rbx
.text:00000000000096B4                 pop     rbp
.text:00000000000096B5                 mov     rax, rsi
.text:00000000000096B8                 pop     r12
.text:00000000000096BA                 retn
.text:00000000000096BA ; } // starts at 9660
.text:00000000000096BA hash_lookup     endp
.text:00000000000096BA
.text:00000000000096BA ; ---------------------------------------------------------------------------
.text:00000000000096BB                 align 20h
.text:00000000000096C0
.text:00000000000096C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096C0
.text:00000000000096C0 ; Attributes: info_from_lumina
.text:00000000000096C0
.text:00000000000096C0 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:00000000000096C0                 public hash_get_first
.text:00000000000096C0 hash_get_first  proc near
.text:00000000000096C0 ; __unwind {
.text:00000000000096C0                 cmp     qword ptr [rdi+20h], 0
.text:00000000000096C5                 jz      short loc_96F3
.text:00000000000096C7                 mov     rdx, [rdi]
.text:00000000000096CA                 mov     rcx, [rdi+8]
.text:00000000000096CE                 cmp     rdx, rcx
.text:00000000000096D1                 jnb     short loc_96F8
.text:00000000000096D3                 mov     rax, [rdx]
.text:00000000000096D6                 test    rax, rax
.text:00000000000096D9                 jnz     short locret_96F6
.text:00000000000096DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000096E0
.text:00000000000096E0 loc_96E0:                               ; CODE XREF: hash_get_first+2F↓j
.text:00000000000096E0                 add     rdx, 10h
.text:00000000000096E4                 cmp     rdx, rcx
.text:00000000000096E7                 jnb     short loc_96F8
.text:00000000000096E9                 mov     rax, [rdx]
.text:00000000000096EC                 test    rax, rax
.text:00000000000096EF                 jz      short loc_96E0
.text:00000000000096F1                 rep retn
.text:00000000000096F3 ; ---------------------------------------------------------------------------
.text:00000000000096F3
.text:00000000000096F3 loc_96F3:                               ; CODE XREF: hash_get_first+5↑j
.text:00000000000096F3                 xor     eax, eax
.text:00000000000096F5                 retn
.text:00000000000096F6 ; ---------------------------------------------------------------------------
.text:00000000000096F6
.text:00000000000096F6 locret_96F6:                            ; CODE XREF: hash_get_first+19↑j
.text:00000000000096F6                 rep retn
.text:00000000000096F8 ; ---------------------------------------------------------------------------
.text:00000000000096F8
.text:00000000000096F8 loc_96F8:                               ; CODE XREF: hash_get_first+11↑j
.text:00000000000096F8                                         ; hash_get_first+27↑j
.text:00000000000096F8                 sub     rsp, 8
.text:00000000000096FC                 call    _abort
.text:00000000000096FC ; } // starts at 96C0
.text:00000000000096FC hash_get_first  endp
.text:00000000000096FC
.text:00000000000096FC ; ---------------------------------------------------------------------------
.text:0000000000009701                 align 10h
.text:0000000000009710
.text:0000000000009710 ; =============== S U B R O U T I N E =======================================
.text:0000000000009710
.text:0000000000009710 ; Attributes: info_from_lumina
.text:0000000000009710
.text:0000000000009710 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000009710                 public hash_get_next
.text:0000000000009710 hash_get_next   proc near
.text:0000000000009710 ; __unwind {
.text:0000000000009710                 push    rbp
.text:0000000000009711                 push    rbx
.text:0000000000009712                 mov     rbp, rdi
.text:0000000000009715                 mov     rbx, rsi
.text:0000000000009718                 sub     rsp, 8
.text:000000000000971C                 call    safe_hasher
.text:0000000000009721                 mov     rdx, rax
.text:0000000000009724                 mov     rcx, rax
.text:0000000000009727                 mov     rax, [rdx]
.text:000000000000972A                 mov     rdx, [rdx+8]
.text:000000000000972E                 cmp     rax, rbx
.text:0000000000009731                 jz      short loc_9749
.text:0000000000009733                 nop     dword ptr [rax+rax+00h]
.text:0000000000009738
.text:0000000000009738 loc_9738:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000009738                 test    rdx, rdx
.text:000000000000973B                 jz      short loc_974E
.text:000000000000973D                 mov     rax, [rdx]
.text:0000000000009740                 mov     rdx, [rdx+8]
.text:0000000000009744                 cmp     rax, rbx
.text:0000000000009747                 jnz     short loc_9738
.text:0000000000009749
.text:0000000000009749 loc_9749:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000009749                 test    rdx, rdx
.text:000000000000974C                 jnz     short loc_9778
.text:000000000000974E
.text:000000000000974E loc_974E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000974E                 mov     rdx, [rbp+8]
.text:0000000000009752                 jmp     short loc_9760
.text:0000000000009752 ; ---------------------------------------------------------------------------
.text:0000000000009754                 align 8
.text:0000000000009758
.text:0000000000009758 loc_9758:                               ; CODE XREF: hash_get_next+57↓j
.text:0000000000009758                 mov     rax, [rcx]
.text:000000000000975B                 test    rax, rax
.text:000000000000975E                 jnz     short loc_976B
.text:0000000000009760
.text:0000000000009760 loc_9760:                               ; CODE XREF: hash_get_next+42↑j
.text:0000000000009760                 add     rcx, 10h
.text:0000000000009764                 cmp     rdx, rcx
.text:0000000000009767                 ja      short loc_9758
.text:0000000000009769                 xor     eax, eax
.text:000000000000976B
.text:000000000000976B loc_976B:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000976B                 add     rsp, 8
.text:000000000000976F                 pop     rbx
.text:0000000000009770                 pop     rbp
.text:0000000000009771                 retn
.text:0000000000009771 ; ---------------------------------------------------------------------------
.text:0000000000009772                 align 8
.text:0000000000009778
.text:0000000000009778 loc_9778:                               ; CODE XREF: hash_get_next+3C↑j
.text:0000000000009778                 mov     rax, [rdx]
.text:000000000000977B                 add     rsp, 8
.text:000000000000977F                 pop     rbx
.text:0000000000009780                 pop     rbp
.text:0000000000009781                 retn
.text:0000000000009781 ; } // starts at 9710
.text:0000000000009781 hash_get_next   endp
.text:0000000000009781
.text:0000000000009781 ; ---------------------------------------------------------------------------
.text:0000000000009782                 align 10h
.text:0000000000009790
.text:0000000000009790 ; =============== S U B R O U T I N E =======================================
.text:0000000000009790
.text:0000000000009790 ; Attributes: info_from_lumina
.text:0000000000009790
.text:0000000000009790 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000009790                 public hash_get_entries
.text:0000000000009790 hash_get_entries proc near
.text:0000000000009790 ; __unwind {
.text:0000000000009790                 mov     r9, [rdi]
.text:0000000000009793                 cmp     [rdi+8], r9
.text:0000000000009797                 jbe     short loc_97F2
.text:0000000000009799                 xor     r8d, r8d
.text:000000000000979C
.text:000000000000979C loc_979C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000979C                 mov     rcx, [r9]
.text:000000000000979F                 test    rcx, rcx
.text:00000000000097A2                 jz      short loc_97DD
.text:00000000000097A4                 cmp     rdx, r8
.text:00000000000097A7                 jbe     short loc_97E7
.text:00000000000097A9                 mov     [rsi+r8*8], rcx
.text:00000000000097AD                 mov     rcx, [r9+8]
.text:00000000000097B1                 lea     rax, [r8+1]
.text:00000000000097B5                 test    rcx, rcx
.text:00000000000097B8                 jz      short loc_97DA
.text:00000000000097BA                 nop     word ptr [rax+rax+00h]
.text:00000000000097C0
.text:00000000000097C0 loc_97C0:                               ; CODE XREF: hash_get_entries+48↓j
.text:00000000000097C0                 cmp     rdx, rax
.text:00000000000097C3                 jz      short locret_97F0
.text:00000000000097C5                 mov     r8, [rcx]
.text:00000000000097C8                 add     rax, 1
.text:00000000000097CC                 mov     [rsi+rax*8-8], r8
.text:00000000000097D1                 mov     rcx, [rcx+8]
.text:00000000000097D5                 test    rcx, rcx
.text:00000000000097D8                 jnz     short loc_97C0
.text:00000000000097DA
.text:00000000000097DA loc_97DA:                               ; CODE XREF: hash_get_entries+28↑j
.text:00000000000097DA                 mov     r8, rax
.text:00000000000097DD
.text:00000000000097DD loc_97DD:                               ; CODE XREF: hash_get_entries+12↑j
.text:00000000000097DD                 add     r9, 10h
.text:00000000000097E1                 cmp     [rdi+8], r9
.text:00000000000097E5                 ja      short loc_979C
.text:00000000000097E7
.text:00000000000097E7 loc_97E7:                               ; CODE XREF: hash_get_entries+17↑j
.text:00000000000097E7                 mov     rax, r8
.text:00000000000097EA                 retn
.text:00000000000097EA ; ---------------------------------------------------------------------------
.text:00000000000097EB                 align 10h
.text:00000000000097F0
.text:00000000000097F0 locret_97F0:                            ; CODE XREF: hash_get_entries+33↑j
.text:00000000000097F0                 rep retn
.text:00000000000097F2 ; ---------------------------------------------------------------------------
.text:00000000000097F2
.text:00000000000097F2 loc_97F2:                               ; CODE XREF: hash_get_entries+7↑j
.text:00000000000097F2                 xor     eax, eax
.text:00000000000097F4                 retn
.text:00000000000097F4 ; } // starts at 9790
.text:00000000000097F4 hash_get_entries endp
.text:00000000000097F4
.text:00000000000097F4 ; ---------------------------------------------------------------------------
.text:00000000000097F5                 align 20h
.text:0000000000009800
.text:0000000000009800 ; =============== S U B R O U T I N E =======================================
.text:0000000000009800
.text:0000000000009800 ; Attributes: info_from_lumina
.text:0000000000009800
.text:0000000000009800 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000009800                 public hash_do_for_each
.text:0000000000009800 hash_do_for_each proc near
.text:0000000000009800 ; __unwind {
.text:0000000000009800                 push    r15
.text:0000000000009802                 push    r14
.text:0000000000009804                 push    r13
.text:0000000000009806                 push    r12
.text:0000000000009808                 push    rbp
.text:0000000000009809                 push    rbx
.text:000000000000980A                 sub     rsp, 8
.text:000000000000980E                 mov     r14, [rdi]
.text:0000000000009811                 cmp     [rdi+8], r14
.text:0000000000009815                 jbe     short loc_9866
.text:0000000000009817                 mov     r13, rdx
.text:000000000000981A                 mov     r12, rsi
.text:000000000000981D                 mov     r15, rdi
.text:0000000000009820                 xor     ebp, ebp
.text:0000000000009822
.text:0000000000009822 loc_9822:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000009822                 mov     rdi, [r14]
.text:0000000000009825                 test    rdi, rdi
.text:0000000000009828                 jz      short loc_984A
.text:000000000000982A                 mov     rbx, r14
.text:000000000000982D                 jmp     short loc_9833
.text:000000000000982D ; ---------------------------------------------------------------------------
.text:000000000000982F                 align 10h
.text:0000000000009830
.text:0000000000009830 loc_9830:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000009830                 mov     rdi, [rbx]
.text:0000000000009833
.text:0000000000009833 loc_9833:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000009833                 mov     rsi, r13
.text:0000000000009836                 call    r12
.text:0000000000009839                 test    al, al
.text:000000000000983B                 jz      short loc_9854
.text:000000000000983D                 mov     rbx, [rbx+8]
.text:0000000000009841                 add     rbp, 1
.text:0000000000009845                 test    rbx, rbx
.text:0000000000009848                 jnz     short loc_9830
.text:000000000000984A
.text:000000000000984A loc_984A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000984A                 add     r14, 10h
.text:000000000000984E                 cmp     [r15+8], r14
.text:0000000000009852                 ja      short loc_9822
.text:0000000000009854
.text:0000000000009854 loc_9854:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:0000000000009854                                         ; hash_do_for_each+68↓j
.text:0000000000009854                 add     rsp, 8
.text:0000000000009858                 mov     rax, rbp
.text:000000000000985B                 pop     rbx
.text:000000000000985C                 pop     rbp
.text:000000000000985D                 pop     r12
.text:000000000000985F                 pop     r13
.text:0000000000009861                 pop     r14
.text:0000000000009863                 pop     r15
.text:0000000000009865                 retn
.text:0000000000009866 ; ---------------------------------------------------------------------------
.text:0000000000009866
.text:0000000000009866 loc_9866:                               ; CODE XREF: hash_do_for_each+15↑j
.text:0000000000009866                 xor     ebp, ebp
.text:0000000000009868                 jmp     short loc_9854
.text:0000000000009868 ; } // starts at 9800
.text:0000000000009868 hash_do_for_each endp
.text:0000000000009868
.text:0000000000009868 ; ---------------------------------------------------------------------------
.text:000000000000986A                 align 10h
.text:0000000000009870
.text:0000000000009870 ; =============== S U B R O U T I N E =======================================
.text:0000000000009870
.text:0000000000009870 ; Attributes: info_from_lumina
.text:0000000000009870
.text:0000000000009870 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000009870                 public hash_string
.text:0000000000009870 hash_string     proc near
.text:0000000000009870 ; __unwind {
.text:0000000000009870                 movzx   ecx, byte ptr [rdi]
.text:0000000000009873                 xor     edx, edx
.text:0000000000009875                 test    cl, cl
.text:0000000000009877                 jz      short loc_989D
.text:0000000000009879                 nop     dword ptr [rax+00000000h]
.text:0000000000009880
.text:0000000000009880 loc_9880:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000009880                 mov     rax, rdx
.text:0000000000009883                 add     rdi, 1
.text:0000000000009887                 shl     rax, 5
.text:000000000000988B                 sub     rax, rdx
.text:000000000000988E                 xor     edx, edx
.text:0000000000009890                 add     rax, rcx
.text:0000000000009893                 movzx   ecx, byte ptr [rdi]
.text:0000000000009896                 div     rsi
.text:0000000000009899                 test    cl, cl
.text:000000000000989B                 jnz     short loc_9880
.text:000000000000989D
.text:000000000000989D loc_989D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000989D                 mov     rax, rdx
.text:00000000000098A0                 retn
.text:00000000000098A0 ; } // starts at 9870
.text:00000000000098A0 hash_string     endp
.text:00000000000098A0
.text:00000000000098A0 ; ---------------------------------------------------------------------------
.text:00000000000098A1                 align 10h
.text:00000000000098B0
.text:00000000000098B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098B0
.text:00000000000098B0 ; Attributes: info_from_lumina
.text:00000000000098B0
.text:00000000000098B0 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:00000000000098B0                 public hash_reset_tuning
.text:00000000000098B0 hash_reset_tuning proc near
.text:00000000000098B0 ; __unwind {
.text:00000000000098B0                 mov     rax, 3F80000000000000h
.text:00000000000098BA                 mov     byte ptr [rdi+10h], 0
.text:00000000000098BE                 mov     [rdi], rax
.text:00000000000098C1                 mov     rax, 3FB4FDF43F4CCCCDh
.text:00000000000098CB                 mov     [rdi+8], rax
.text:00000000000098CF                 retn
.text:00000000000098CF ; } // starts at 98B0
.text:00000000000098CF hash_reset_tuning endp
.text:00000000000098CF
.text:00000000000098D0
.text:00000000000098D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098D0
.text:00000000000098D0 ; Attributes: info_from_lumina
.text:00000000000098D0
.text:00000000000098D0 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:00000000000098D0                 public hash_initialize
.text:00000000000098D0 hash_initialize proc near               ; CODE XREF: filesystem_type+7C↑p
.text:00000000000098D0                                         ; setup_dir_isra_4+28↑p
.text:00000000000098D0 ; __unwind {
.text:00000000000098D0                 push    r15
.text:00000000000098D2                 push    r14
.text:00000000000098D4                 lea     rax, raw_hasher
.text:00000000000098DB                 push    r13
.text:00000000000098DD                 push    r12
.text:00000000000098DF                 mov     r12, rdx
.text:00000000000098E2                 push    rbp
.text:00000000000098E3                 push    rbx
.text:00000000000098E4                 mov     r13, rcx
.text:00000000000098E7                 mov     rbp, rdi
.text:00000000000098EA                 mov     edi, 50h ; 'P'  ; size
.text:00000000000098EF                 mov     r15, rsi
.text:00000000000098F2                 sub     rsp, 8
.text:00000000000098F6                 test    rdx, rdx
.text:00000000000098F9                 mov     r14, r8
.text:00000000000098FC                 cmovz   r12, rax
.text:0000000000009900                 lea     rax, raw_comparator
.text:0000000000009907                 test    rcx, rcx
.text:000000000000990A                 cmovz   r13, rax
.text:000000000000990E                 call    _malloc
.text:0000000000009913                 test    rax, rax
.text:0000000000009916                 mov     rbx, rax
.text:0000000000009919                 jz      loc_99CA
.text:000000000000991F                 test    r15, r15
.text:0000000000009922                 lea     rdi, [rax+28h]
.text:0000000000009926                 jz      loc_99E0
.text:000000000000992C                 mov     [rax+28h], r15
.text:0000000000009930                 call    check_tuning
.text:0000000000009935                 test    al, al
.text:0000000000009937                 jz      loc_99C0
.text:000000000000993D                 cmp     byte ptr [r15+10h], 0
.text:0000000000009942                 jz      loc_9A40
.text:0000000000009948
.text:0000000000009948 loc_9948:                               ; CODE XREF: hash_initialize+16A↓j
.text:0000000000009948                                         ; hash_initialize+1A5↓j
.text:0000000000009948                 mov     rdi, rbp
.text:000000000000994B                 call    next_prime
.text:0000000000009950                 mov     edx, 8
.text:0000000000009955                 mov     rbp, rax
.text:0000000000009958                 xor     ecx, ecx
.text:000000000000995A                 mov     rax, rdx
.text:000000000000995D                 mul     rbp
.text:0000000000009960                 jo      loc_9A7A
.text:0000000000009966
.text:0000000000009966 loc_9966:                               ; CODE XREF: hash_initialize+1AF↓j
.text:0000000000009966                 test    rax, rax
.text:0000000000009969                 js      short loc_99C0
.text:000000000000996B                 test    rcx, rcx
.text:000000000000996E                 jnz     short loc_99C0
.text:0000000000009970                 test    rbp, rbp
.text:0000000000009973                 mov     [rbx+10h], rbp
.text:0000000000009977                 jz      short loc_99C0
.text:0000000000009979                 mov     esi, 10h        ; size
.text:000000000000997E                 mov     rdi, rbp        ; nmemb
.text:0000000000009981                 call    _calloc
.text:0000000000009986                 test    rax, rax
.text:0000000000009989                 mov     [rbx], rax
.text:000000000000998C                 jz      short loc_99C0
.text:000000000000998E                 shl     rbp, 4
.text:0000000000009992                 mov     qword ptr [rbx+18h], 0
.text:000000000000999A                 mov     qword ptr [rbx+20h], 0
.text:00000000000099A2                 add     rbp, rax
.text:00000000000099A5                 mov     [rbx+30h], r12
.text:00000000000099A9                 mov     [rbx+38h], r13
.text:00000000000099AD                 mov     [rbx+8], rbp
.text:00000000000099B1                 mov     [rbx+40h], r14
.text:00000000000099B5                 mov     qword ptr [rbx+48h], 0
.text:00000000000099BD                 jmp     short loc_99CA
.text:00000000000099BD ; ---------------------------------------------------------------------------
.text:00000000000099BF                 align 20h
.text:00000000000099C0
.text:00000000000099C0 loc_99C0:                               ; CODE XREF: hash_initialize+67↑j
.text:00000000000099C0                                         ; hash_initialize+99↑j ...
.text:00000000000099C0                 mov     rdi, rbx        ; ptr
.text:00000000000099C3                 xor     ebx, ebx
.text:00000000000099C5                 call    free
.text:00000000000099CA
.text:00000000000099CA loc_99CA:                               ; CODE XREF: hash_initialize+49↑j
.text:00000000000099CA                                         ; hash_initialize+ED↑j
.text:00000000000099CA                 add     rsp, 8
.text:00000000000099CE                 mov     rax, rbx
.text:00000000000099D1                 pop     rbx
.text:00000000000099D2                 pop     rbp
.text:00000000000099D3                 pop     r12
.text:00000000000099D5                 pop     r13
.text:00000000000099D7                 pop     r14
.text:00000000000099D9                 pop     r15
.text:00000000000099DB                 retn
.text:00000000000099DB ; ---------------------------------------------------------------------------
.text:00000000000099DC                 align 20h
.text:00000000000099E0
.text:00000000000099E0 loc_99E0:                               ; CODE XREF: hash_initialize+56↑j
.text:00000000000099E0                 lea     rax, default_tuning
.text:00000000000099E7                 mov     [rbx+28h], rax
.text:00000000000099EB                 call    check_tuning
.text:00000000000099F0                 test    al, al
.text:00000000000099F2                 movss   xmm1, cs:dword_C308
.text:00000000000099FA                 jz      short loc_99C0
.text:00000000000099FC                 test    rbp, rbp
.text:00000000000099FF                 js      short loc_9A4B
.text:0000000000009A01
.text:0000000000009A01 loc_9A01:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000009A01                 pxor    xmm0, xmm0
.text:0000000000009A05                 cvtsi2ss xmm0, rbp
.text:0000000000009A0A
.text:0000000000009A0A loc_9A0A:                               ; CODE XREF: hash_initialize+194↓j
.text:0000000000009A0A                 divss   xmm0, xmm1
.text:0000000000009A0E                 ucomiss xmm0, cs:dword_C30C
.text:0000000000009A15                 jnb     short loc_99C0
.text:0000000000009A17                 ucomiss xmm0, cs:dword_C310
.text:0000000000009A1E                 jb      short loc_9A70
.text:0000000000009A20                 subss   xmm0, cs:dword_C310
.text:0000000000009A28                 mov     rax, 8000000000000000h
.text:0000000000009A32                 cvttss2si rbp, xmm0
.text:0000000000009A37                 xor     rbp, rax
.text:0000000000009A3A                 jmp     loc_9948
.text:0000000000009A3A ; ---------------------------------------------------------------------------
.text:0000000000009A3F                 align 20h
.text:0000000000009A40
.text:0000000000009A40 loc_9A40:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000009A40                 test    rbp, rbp
.text:0000000000009A43                 movss   xmm1, dword ptr [r15+8]
.text:0000000000009A49                 jns     short loc_9A01
.text:0000000000009A4B
.text:0000000000009A4B loc_9A4B:                               ; CODE XREF: hash_initialize+12F↑j
.text:0000000000009A4B                 mov     rax, rbp
.text:0000000000009A4E                 pxor    xmm0, xmm0
.text:0000000000009A52                 shr     rax, 1
.text:0000000000009A55                 and     ebp, 1
.text:0000000000009A58                 or      rax, rbp
.text:0000000000009A5B                 cvtsi2ss xmm0, rax
.text:0000000000009A60                 addss   xmm0, xmm0
.text:0000000000009A64                 jmp     short loc_9A0A
.text:0000000000009A64 ; ---------------------------------------------------------------------------
.text:0000000000009A66                 align 10h
.text:0000000000009A70
.text:0000000000009A70 loc_9A70:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000009A70                 cvttss2si rbp, xmm0
.text:0000000000009A75                 jmp     loc_9948
.text:0000000000009A7A ; ---------------------------------------------------------------------------
.text:0000000000009A7A
.text:0000000000009A7A loc_9A7A:                               ; CODE XREF: hash_initialize+90↑j
.text:0000000000009A7A                 mov     ecx, 1
.text:0000000000009A7F                 jmp     loc_9966
.text:0000000000009A7F ; } // starts at 98D0
.text:0000000000009A7F hash_initialize endp
.text:0000000000009A7F
.text:0000000000009A7F ; ---------------------------------------------------------------------------
.text:0000000000009A84                 align 10h
.text:0000000000009A90
.text:0000000000009A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A90
.text:0000000000009A90 ; Attributes: info_from_lumina
.text:0000000000009A90
.text:0000000000009A90 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000009A90                 public hash_clear
.text:0000000000009A90 hash_clear      proc near
.text:0000000000009A90 ; __unwind {
.text:0000000000009A90                 push    r12
.text:0000000000009A92                 push    rbp
.text:0000000000009A93                 mov     rbp, rdi
.text:0000000000009A96                 push    rbx
.text:0000000000009A97                 mov     r12, [rdi]
.text:0000000000009A9A                 cmp     r12, [rdi+8]
.text:0000000000009A9E                 jnb     short loc_9B0B
.text:0000000000009AA0
.text:0000000000009AA0 loc_9AA0:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000009AA0                 cmp     qword ptr [r12], 0
.text:0000000000009AA5                 jz      short loc_9B01
.text:0000000000009AA7                 mov     rbx, [r12+8]
.text:0000000000009AAC                 mov     rax, [rbp+40h]
.text:0000000000009AB0                 test    rbx, rbx
.text:0000000000009AB3                 jz      short loc_9AE5
.text:0000000000009AB5                 nop     dword ptr [rax]
.text:0000000000009AB8
.text:0000000000009AB8 loc_9AB8:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000009AB8                 test    rax, rax
.text:0000000000009ABB                 jz      short loc_9AC6
.text:0000000000009ABD                 mov     rdi, [rbx]
.text:0000000000009AC0                 call    rax
.text:0000000000009AC2                 mov     rax, [rbp+40h]
.text:0000000000009AC6
.text:0000000000009AC6 loc_9AC6:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000009AC6                 mov     rdx, [rbx+8]
.text:0000000000009ACA                 mov     rcx, [rbp+48h]
.text:0000000000009ACE                 mov     qword ptr [rbx], 0
.text:0000000000009AD5                 test    rdx, rdx
.text:0000000000009AD8                 mov     [rbx+8], rcx
.text:0000000000009ADC                 mov     [rbp+48h], rbx
.text:0000000000009AE0                 mov     rbx, rdx
.text:0000000000009AE3                 jnz     short loc_9AB8
.text:0000000000009AE5
.text:0000000000009AE5 loc_9AE5:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000009AE5                 test    rax, rax
.text:0000000000009AE8                 jz      short loc_9AF0
.text:0000000000009AEA                 mov     rdi, [r12]
.text:0000000000009AEE                 call    rax
.text:0000000000009AF0
.text:0000000000009AF0 loc_9AF0:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000009AF0                 mov     qword ptr [r12], 0
.text:0000000000009AF8                 mov     qword ptr [r12+8], 0
.text:0000000000009B01
.text:0000000000009B01 loc_9B01:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000009B01                 add     r12, 10h
.text:0000000000009B05                 cmp     [rbp+8], r12
.text:0000000000009B09                 ja      short loc_9AA0
.text:0000000000009B0B
.text:0000000000009B0B loc_9B0B:                               ; CODE XREF: hash_clear+E↑j
.text:0000000000009B0B                 mov     qword ptr [rbp+18h], 0
.text:0000000000009B13                 mov     qword ptr [rbp+20h], 0
.text:0000000000009B1B                 pop     rbx
.text:0000000000009B1C                 pop     rbp
.text:0000000000009B1D                 pop     r12
.text:0000000000009B1F                 retn
.text:0000000000009B1F ; } // starts at 9A90
.text:0000000000009B1F hash_clear      endp
.text:0000000000009B1F
.text:0000000000009B20
.text:0000000000009B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B20
.text:0000000000009B20 ; Attributes: info_from_lumina
.text:0000000000009B20
.text:0000000000009B20 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000009B20                 public hash_free
.text:0000000000009B20 hash_free       proc near               ; CODE XREF: rpl_fts_close+9A↑p
.text:0000000000009B20                                         ; rpl_fts_close+B1↑p ...
.text:0000000000009B20 ; __unwind {
.text:0000000000009B20                 push    r12
.text:0000000000009B22                 push    rbp
.text:0000000000009B23                 mov     r12, rdi
.text:0000000000009B26                 push    rbx
.text:0000000000009B27                 cmp     qword ptr [rdi+40h], 0
.text:0000000000009B2C                 mov     rbp, [rdi]
.text:0000000000009B2F                 mov     rax, [rdi+8]
.text:0000000000009B33                 jz      short loc_9B83
.text:0000000000009B35                 cmp     qword ptr [rdi+20h], 0
.text:0000000000009B3A                 jz      short loc_9B83
.text:0000000000009B3C                 cmp     rbp, rax
.text:0000000000009B3F                 jnb     short loc_9BBC
.text:0000000000009B41                 nop     dword ptr [rax+00000000h]
.text:0000000000009B48
.text:0000000000009B48 loc_9B48:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000009B48                 mov     rdi, [rbp+0]
.text:0000000000009B4C                 test    rdi, rdi
.text:0000000000009B4F                 jz      short loc_9B76
.text:0000000000009B51                 mov     rbx, rbp
.text:0000000000009B54                 jmp     short loc_9B63
.text:0000000000009B54 ; ---------------------------------------------------------------------------
.text:0000000000009B56                 align 20h
.text:0000000000009B60
.text:0000000000009B60 loc_9B60:                               ; CODE XREF: hash_free+4F↓j
.text:0000000000009B60                 mov     rdi, [rbx]
.text:0000000000009B63
.text:0000000000009B63 loc_9B63:                               ; CODE XREF: hash_free+34↑j
.text:0000000000009B63                 call    qword ptr [r12+40h]
.text:0000000000009B68                 mov     rbx, [rbx+8]
.text:0000000000009B6C                 test    rbx, rbx
.text:0000000000009B6F                 jnz     short loc_9B60
.text:0000000000009B71                 mov     rax, [r12+8]
.text:0000000000009B76
.text:0000000000009B76 loc_9B76:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000009B76                 add     rbp, 10h
.text:0000000000009B7A                 cmp     rax, rbp
.text:0000000000009B7D                 ja      short loc_9B48
.text:0000000000009B7F                 mov     rbp, [r12]
.text:0000000000009B83
.text:0000000000009B83 loc_9B83:                               ; CODE XREF: hash_free+13↑j
.text:0000000000009B83                                         ; hash_free+1A↑j
.text:0000000000009B83                 cmp     rbp, rax
.text:0000000000009B86                 jnb     short loc_9BBC
.text:0000000000009B88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000009B90                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000009B94                 test    rdi, rdi
.text:0000000000009B97                 jz      short loc_9BB1
.text:0000000000009B99                 nop     dword ptr [rax+00000000h]
.text:0000000000009BA0
.text:0000000000009BA0 loc_9BA0:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000009BA0                 mov     rbx, [rdi+8]
.text:0000000000009BA4                 call    free
.text:0000000000009BA9                 test    rbx, rbx
.text:0000000000009BAC                 mov     rdi, rbx
.text:0000000000009BAF                 jnz     short loc_9BA0
.text:0000000000009BB1
.text:0000000000009BB1 loc_9BB1:                               ; CODE XREF: hash_free+77↑j
.text:0000000000009BB1                 add     rbp, 10h
.text:0000000000009BB5                 cmp     [r12+8], rbp
.text:0000000000009BBA                 ja      short loc_9B90
.text:0000000000009BBC
.text:0000000000009BBC loc_9BBC:                               ; CODE XREF: hash_free+1F↑j
.text:0000000000009BBC                                         ; hash_free+66↑j
.text:0000000000009BBC                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000009BC1                 test    rdi, rdi
.text:0000000000009BC4                 jz      short loc_9BE1
.text:0000000000009BC6                 db      2Eh
.text:0000000000009BC6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009BD0
.text:0000000000009BD0 loc_9BD0:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000009BD0                 mov     rbx, [rdi+8]
.text:0000000000009BD4                 call    free
.text:0000000000009BD9                 test    rbx, rbx
.text:0000000000009BDC                 mov     rdi, rbx
.text:0000000000009BDF                 jnz     short loc_9BD0
.text:0000000000009BE1
.text:0000000000009BE1 loc_9BE1:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000009BE1                 mov     rdi, [r12]      ; ptr
.text:0000000000009BE5                 call    free
.text:0000000000009BEA                 pop     rbx
.text:0000000000009BEB                 mov     rdi, r12        ; ptr
.text:0000000000009BEE                 pop     rbp
.text:0000000000009BEF                 pop     r12
.text:0000000000009BF1                 jmp     free
.text:0000000000009BF1 ; } // starts at 9B20
.text:0000000000009BF1 hash_free       endp
.text:0000000000009BF1
.text:0000000000009BF1 ; ---------------------------------------------------------------------------
.text:0000000000009BF6                 align 20h
.text:0000000000009C00
.text:0000000000009C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C00
.text:0000000000009C00 ; Attributes: info_from_lumina
.text:0000000000009C00
.text:0000000000009C00 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000009C00                 public hash_rehash
.text:0000000000009C00 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000009C00                                         ; hash_delete+10F↓p
.text:0000000000009C00
.text:0000000000009C00 ptr             = qword ptr -78h
.text:0000000000009C00 var_70          = qword ptr -70h
.text:0000000000009C00 var_68          = qword ptr -68h
.text:0000000000009C00 var_60          = qword ptr -60h
.text:0000000000009C00 var_58          = qword ptr -58h
.text:0000000000009C00 var_50          = qword ptr -50h
.text:0000000000009C00 var_48          = qword ptr -48h
.text:0000000000009C00 var_40          = qword ptr -40h
.text:0000000000009C00 var_38          = qword ptr -38h
.text:0000000000009C00 var_30          = qword ptr -30h
.text:0000000000009C00 var_20          = qword ptr -20h
.text:0000000000009C00
.text:0000000000009C00 ; __unwind {
.text:0000000000009C00                 push    r12
.text:0000000000009C02                 push    rbp
.text:0000000000009C03                 mov     rbp, rdi
.text:0000000000009C06                 push    rbx
.text:0000000000009C07                 sub     rsp, 60h
.text:0000000000009C0B                 mov     r12, [rdi+28h]
.text:0000000000009C0F                 mov     rax, fs:28h
.text:0000000000009C18                 mov     [rsp+78h+var_20], rax
.text:0000000000009C1D                 xor     eax, eax
.text:0000000000009C1F                 cmp     byte ptr [r12+10h], 0
.text:0000000000009C25                 jnz     short loc_9C78
.text:0000000000009C27                 test    rsi, rsi
.text:0000000000009C2A                 js      loc_9DA8
.text:0000000000009C30                 pxor    xmm0, xmm0
.text:0000000000009C34                 cvtsi2ss xmm0, rsi
.text:0000000000009C39
.text:0000000000009C39 loc_9C39:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000009C39                 divss   xmm0, dword ptr [r12+8]
.text:0000000000009C40                 ucomiss xmm0, cs:dword_C30C
.text:0000000000009C47                 jnb     loc_9D80
.text:0000000000009C4D                 ucomiss xmm0, cs:dword_C310
.text:0000000000009C54                 jb      loc_9DD0
.text:0000000000009C5A                 subss   xmm0, cs:dword_C310
.text:0000000000009C62                 mov     rax, 8000000000000000h
.text:0000000000009C6C                 cvttss2si rsi, xmm0
.text:0000000000009C71                 xor     rsi, rax
.text:0000000000009C74                 nop     dword ptr [rax+00h]
.text:0000000000009C78
.text:0000000000009C78 loc_9C78:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000009C78                                         ; hash_rehash+1D5↓j
.text:0000000000009C78                 mov     rdi, rsi
.text:0000000000009C7B                 call    next_prime
.text:0000000000009C80                 mov     edx, 8
.text:0000000000009C85                 mov     rbx, rax
.text:0000000000009C88                 xor     ecx, ecx
.text:0000000000009C8A                 mov     rax, rdx
.text:0000000000009C8D                 mul     rbx
.text:0000000000009C90                 jo      loc_9E2F
.text:0000000000009C96
.text:0000000000009C96 loc_9C96:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000009C96                 test    rax, rax
.text:0000000000009C99                 mov     eax, 1
.text:0000000000009C9E                 cmovs   rcx, rax
.text:0000000000009CA2                 test    rbx, rbx
.text:0000000000009CA5                 jz      loc_9D80
.text:0000000000009CAB                 and     ecx, 1
.text:0000000000009CAE                 jnz     loc_9D80
.text:0000000000009CB4                 cmp     [rbp+10h], rbx
.text:0000000000009CB8                 jz      loc_9DE0
.text:0000000000009CBE                 mov     esi, 10h        ; size
.text:0000000000009CC3                 mov     rdi, rbx        ; nmemb
.text:0000000000009CC6                 call    _calloc
.text:0000000000009CCB                 test    rax, rax
.text:0000000000009CCE                 mov     [rsp+78h+ptr], rax
.text:0000000000009CD2                 jz      loc_9D80
.text:0000000000009CD8                 mov     [rsp+78h+var_68], rbx
.text:0000000000009CDD                 shl     rbx, 4
.text:0000000000009CE1                 mov     [rsp+78h+var_50], r12
.text:0000000000009CE6                 add     rbx, rax
.text:0000000000009CE9                 mov     rax, [rbp+30h]
.text:0000000000009CED                 mov     r12, rsp
.text:0000000000009CF0                 xor     edx, edx
.text:0000000000009CF2                 mov     rsi, rbp
.text:0000000000009CF5                 mov     rdi, r12
.text:0000000000009CF8                 mov     [rsp+78h+var_70], rbx
.text:0000000000009CFD                 mov     [rsp+78h+var_60], 0
.text:0000000000009D06                 mov     [rsp+78h+var_48], rax
.text:0000000000009D0B                 mov     rax, [rbp+38h]
.text:0000000000009D0F                 mov     [rsp+78h+var_58], 0
.text:0000000000009D18                 mov     [rsp+78h+var_40], rax
.text:0000000000009D1D                 mov     rax, [rbp+40h]
.text:0000000000009D21                 mov     [rsp+78h+var_38], rax
.text:0000000000009D26                 mov     rax, [rbp+48h]
.text:0000000000009D2A                 mov     [rsp+78h+var_30], rax
.text:0000000000009D2F                 call    transfer_entries
.text:0000000000009D34                 test    al, al
.text:0000000000009D36                 mov     ebx, eax
.text:0000000000009D38                 jnz     loc_9DF0
.text:0000000000009D3E                 mov     rax, [rsp+78h+var_30]
.text:0000000000009D43                 mov     edx, 1
.text:0000000000009D48                 mov     rsi, r12
.text:0000000000009D4B                 mov     rdi, rbp
.text:0000000000009D4E                 mov     [rbp+48h], rax
.text:0000000000009D52                 call    transfer_entries
.text:0000000000009D57                 test    al, al
.text:0000000000009D59                 jz      loc_9E39
.text:0000000000009D5F                 xor     edx, edx
.text:0000000000009D61                 mov     rsi, r12
.text:0000000000009D64                 mov     rdi, rbp
.text:0000000000009D67                 call    transfer_entries
.text:0000000000009D6C                 test    al, al
.text:0000000000009D6E                 jz      loc_9E39
.text:0000000000009D74                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000009D78                 call    free
.text:0000000000009D7D                 jmp     short loc_9D82
.text:0000000000009D7D ; ---------------------------------------------------------------------------
.text:0000000000009D7F                 align 20h
.text:0000000000009D80
.text:0000000000009D80 loc_9D80:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000009D80                                         ; hash_rehash+A5↑j ...
.text:0000000000009D80                 xor     ebx, ebx
.text:0000000000009D82
.text:0000000000009D82 loc_9D82:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000009D82                                         ; hash_rehash+1E5↓j ...
.text:0000000000009D82                 mov     rcx, [rsp+78h+var_20]
.text:0000000000009D87                 xor     rcx, fs:28h
.text:0000000000009D90                 mov     eax, ebx
.text:0000000000009D92                 jnz     loc_9E2A
.text:0000000000009D98                 add     rsp, 60h
.text:0000000000009D9C                 pop     rbx
.text:0000000000009D9D                 pop     rbp
.text:0000000000009D9E                 pop     r12
.text:0000000000009DA0                 retn
.text:0000000000009DA0 ; ---------------------------------------------------------------------------
.text:0000000000009DA1                 align 8
.text:0000000000009DA8
.text:0000000000009DA8 loc_9DA8:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000009DA8                 mov     rax, rsi
.text:0000000000009DAB                 pxor    xmm0, xmm0
.text:0000000000009DAF                 shr     rax, 1
.text:0000000000009DB2                 and     esi, 1
.text:0000000000009DB5                 or      rax, rsi
.text:0000000000009DB8                 cvtsi2ss xmm0, rax
.text:0000000000009DBD                 addss   xmm0, xmm0
.text:0000000000009DC1                 jmp     loc_9C39
.text:0000000000009DC1 ; ---------------------------------------------------------------------------
.text:0000000000009DC6                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 loc_9DD0:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000009DD0                 cvttss2si rsi, xmm0
.text:0000000000009DD5                 jmp     loc_9C78
.text:0000000000009DD5 ; ---------------------------------------------------------------------------
.text:0000000000009DDA                 align 20h
.text:0000000000009DE0
.text:0000000000009DE0 loc_9DE0:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000009DE0                 mov     ebx, 1
.text:0000000000009DE5                 jmp     short loc_9D82
.text:0000000000009DE5 ; ---------------------------------------------------------------------------
.text:0000000000009DE7                 align 10h
.text:0000000000009DF0
.text:0000000000009DF0 loc_9DF0:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000009DF0                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000009DF4                 call    free
.text:0000000000009DF9                 mov     rax, [rsp+78h+ptr]
.text:0000000000009DFD                 mov     [rbp+0], rax
.text:0000000000009E01                 mov     rax, [rsp+78h+var_70]
.text:0000000000009E06                 mov     [rbp+8], rax
.text:0000000000009E0A                 mov     rax, [rsp+78h+var_68]
.text:0000000000009E0F                 mov     [rbp+10h], rax
.text:0000000000009E13                 mov     rax, [rsp+78h+var_60]
.text:0000000000009E18                 mov     [rbp+18h], rax
.text:0000000000009E1C                 mov     rax, [rsp+78h+var_30]
.text:0000000000009E21                 mov     [rbp+48h], rax
.text:0000000000009E25                 jmp     loc_9D82
.text:0000000000009E2A ; ---------------------------------------------------------------------------
.text:0000000000009E2A
.text:0000000000009E2A loc_9E2A:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000009E2A                 call    ___stack_chk_fail
.text:0000000000009E2F ; ---------------------------------------------------------------------------
.text:0000000000009E2F
.text:0000000000009E2F loc_9E2F:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000009E2F                 mov     ecx, 1
.text:0000000000009E34                 jmp     loc_9C96
.text:0000000000009E39 ; ---------------------------------------------------------------------------
.text:0000000000009E39
.text:0000000000009E39 loc_9E39:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000009E39                                         ; hash_rehash+16E↑j
.text:0000000000009E39                 call    _abort
.text:0000000000009E39 ; } // starts at 9C00
.text:0000000000009E39 hash_rehash     endp
.text:0000000000009E39
.text:0000000000009E39 ; ---------------------------------------------------------------------------
.text:0000000000009E3E                 align 20h
.text:0000000000009E40
.text:0000000000009E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E40
.text:0000000000009E40 ; Attributes: info_from_lumina
.text:0000000000009E40
.text:0000000000009E40 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000009E40                 public hash_insert_if_absent
.text:0000000000009E40 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000009E40
.text:0000000000009E40 var_38          = qword ptr -38h
.text:0000000000009E40 var_30          = qword ptr -30h
.text:0000000000009E40
.text:0000000000009E40 ; __unwind {
.text:0000000000009E40                 push    r13
.text:0000000000009E42                 push    r12
.text:0000000000009E44                 push    rbp
.text:0000000000009E45                 push    rbx
.text:0000000000009E46                 sub     rsp, 18h
.text:0000000000009E4A                 mov     rax, fs:28h
.text:0000000000009E53                 mov     [rsp+38h+var_30], rax
.text:0000000000009E58                 xor     eax, eax
.text:0000000000009E5A                 test    rsi, rsi
.text:0000000000009E5D                 jz      loc_A01D
.text:0000000000009E63                 mov     r12, rsp
.text:0000000000009E66                 xor     ecx, ecx
.text:0000000000009E68                 mov     r13, rdx
.text:0000000000009E6B                 mov     rdx, r12
.text:0000000000009E6E                 mov     rbx, rdi
.text:0000000000009E71                 mov     rbp, rsi
.text:0000000000009E74                 call    hash_find_entry
.text:0000000000009E79                 test    rax, rax
.text:0000000000009E7C                 mov     rdx, rax
.text:0000000000009E7F                 jz      short loc_9EB0
.text:0000000000009E81                 xor     eax, eax
.text:0000000000009E83                 test    r13, r13
.text:0000000000009E86                 jz      short loc_9E8C
.text:0000000000009E88                 mov     [r13+0], rdx
.text:0000000000009E8C
.text:0000000000009E8C loc_9E8C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000009E8C                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000009E8C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000009E91                 xor     rcx, fs:28h
.text:0000000000009E9A                 jnz     loc_A0BF
.text:0000000000009EA0                 add     rsp, 18h
.text:0000000000009EA4                 pop     rbx
.text:0000000000009EA5                 pop     rbp
.text:0000000000009EA6                 pop     r12
.text:0000000000009EA8                 pop     r13
.text:0000000000009EAA                 retn
.text:0000000000009EAA ; ---------------------------------------------------------------------------
.text:0000000000009EAB                 align 10h
.text:0000000000009EB0
.text:0000000000009EB0 loc_9EB0:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000009EB0                 mov     rax, [rbx+18h]
.text:0000000000009EB4                 test    rax, rax
.text:0000000000009EB7                 js      short loc_9F30
.text:0000000000009EB9                 pxor    xmm1, xmm1
.text:0000000000009EBD                 mov     rdx, [rbx+28h]
.text:0000000000009EC1                 cvtsi2ss xmm1, rax
.text:0000000000009EC6                 mov     rax, [rbx+10h]
.text:0000000000009ECA                 test    rax, rax
.text:0000000000009ECD                 js      loc_9F5A
.text:0000000000009ED3
.text:0000000000009ED3 loc_9ED3:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000009ED3                 pxor    xmm0, xmm0
.text:0000000000009ED7                 cvtsi2ss xmm0, rax
.text:0000000000009EDC
.text:0000000000009EDC loc_9EDC:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000009EDC                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000009EE1                 ucomiss xmm1, xmm0
.text:0000000000009EE4                 ja      loc_9F80
.text:0000000000009EEA
.text:0000000000009EEA loc_9EEA:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000009EEA                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000009EEA                 mov     r12, [rsp+38h+var_38]
.text:0000000000009EEE                 cmp     qword ptr [r12], 0
.text:0000000000009EF3                 jz      loc_A028
.text:0000000000009EF9                 mov     rax, [rbx+48h]
.text:0000000000009EFD                 test    rax, rax
.text:0000000000009F00                 jz      loc_A040
.text:0000000000009F06                 mov     rdx, [rax+8]
.text:0000000000009F0A                 mov     [rbx+48h], rdx
.text:0000000000009F0E
.text:0000000000009F0E loc_9F0E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000009F0E                 mov     rdx, [r12+8]
.text:0000000000009F13                 mov     [rax], rbp
.text:0000000000009F16                 mov     [rax+8], rdx
.text:0000000000009F1A                 mov     [r12+8], rax
.text:0000000000009F1F                 mov     eax, 1
.text:0000000000009F24                 add     qword ptr [rbx+20h], 1
.text:0000000000009F29                 jmp     loc_9E8C
.text:0000000000009F29 ; ---------------------------------------------------------------------------
.text:0000000000009F2E                 align 10h
.text:0000000000009F30
.text:0000000000009F30 loc_9F30:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000009F30                 mov     rdx, rax
.text:0000000000009F33                 pxor    xmm1, xmm1
.text:0000000000009F37                 and     eax, 1
.text:0000000000009F3A                 shr     rdx, 1
.text:0000000000009F3D                 or      rdx, rax
.text:0000000000009F40                 mov     rax, [rbx+10h]
.text:0000000000009F44                 cvtsi2ss xmm1, rdx
.text:0000000000009F49                 mov     rdx, [rbx+28h]
.text:0000000000009F4D                 test    rax, rax
.text:0000000000009F50                 addss   xmm1, xmm1
.text:0000000000009F54                 jns     loc_9ED3
.text:0000000000009F5A
.text:0000000000009F5A loc_9F5A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000009F5A                 mov     rcx, rax
.text:0000000000009F5D                 pxor    xmm0, xmm0
.text:0000000000009F61                 shr     rcx, 1
.text:0000000000009F64                 and     eax, 1
.text:0000000000009F67                 or      rcx, rax
.text:0000000000009F6A                 cvtsi2ss xmm0, rcx
.text:0000000000009F6F                 addss   xmm0, xmm0
.text:0000000000009F73                 jmp     loc_9EDC
.text:0000000000009F73 ; ---------------------------------------------------------------------------
.text:0000000000009F78                 align 20h
.text:0000000000009F80
.text:0000000000009F80 loc_9F80:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000009F80                 lea     rdi, [rbx+28h]
.text:0000000000009F84                 call    check_tuning
.text:0000000000009F89                 mov     rax, [rbx+10h]
.text:0000000000009F8D                 mov     rdx, [rbx+28h]
.text:0000000000009F91                 test    rax, rax
.text:0000000000009F94                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000009F99                 js      loc_A060
.text:0000000000009F9F                 pxor    xmm0, xmm0
.text:0000000000009FA3                 cvtsi2ss xmm0, rax
.text:0000000000009FA8
.text:0000000000009FA8 loc_9FA8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000009FA8                 mov     rax, [rbx+18h]
.text:0000000000009FAC                 test    rax, rax
.text:0000000000009FAF                 js      loc_A080
.text:0000000000009FB5                 pxor    xmm1, xmm1
.text:0000000000009FB9                 cvtsi2ss xmm1, rax
.text:0000000000009FBE
.text:0000000000009FBE loc_9FBE:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000009FBE                 movaps  xmm3, xmm2
.text:0000000000009FC1                 mulss   xmm3, xmm0
.text:0000000000009FC5                 ucomiss xmm1, xmm3
.text:0000000000009FC8                 jbe     loc_9EEA
.text:0000000000009FCE                 cmp     byte ptr [rdx+10h], 0
.text:0000000000009FD2                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000009FD7                 jnz     short loc_9FDD
.text:0000000000009FD9                 mulss   xmm0, xmm2
.text:0000000000009FDD
.text:0000000000009FDD loc_9FDD:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000009FDD                 ucomiss xmm0, cs:dword_C30C
.text:0000000000009FE4                 jnb     short loc_A053
.text:0000000000009FE6                 ucomiss xmm0, cs:dword_C310
.text:0000000000009FED                 jnb     loc_A0A0
.text:0000000000009FF3                 cvttss2si rsi, xmm0
.text:0000000000009FF8
.text:0000000000009FF8 loc_9FF8:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000009FF8                 mov     rdi, rbx
.text:0000000000009FFB                 call    hash_rehash
.text:000000000000A000                 test    al, al
.text:000000000000A002                 jz      short loc_A053
.text:000000000000A004                 xor     ecx, ecx
.text:000000000000A006                 mov     rdx, r12
.text:000000000000A009                 mov     rsi, rbp
.text:000000000000A00C                 mov     rdi, rbx
.text:000000000000A00F                 call    hash_find_entry
.text:000000000000A014                 test    rax, rax
.text:000000000000A017                 jz      loc_9EEA
.text:000000000000A01D
.text:000000000000A01D loc_A01D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000A01D                 call    _abort
.text:000000000000A01D ; ---------------------------------------------------------------------------
.text:000000000000A022                 align 8
.text:000000000000A028
.text:000000000000A028 loc_A028:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:000000000000A028                 mov     [r12], rbp
.text:000000000000A02C                 mov     eax, 1
.text:000000000000A031                 add     qword ptr [rbx+20h], 1
.text:000000000000A036                 add     qword ptr [rbx+18h], 1
.text:000000000000A03B                 jmp     loc_9E8C
.text:000000000000A040 ; ---------------------------------------------------------------------------
.text:000000000000A040
.text:000000000000A040 loc_A040:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:000000000000A040                 mov     edi, 10h        ; size
.text:000000000000A045                 call    _malloc
.text:000000000000A04A                 test    rax, rax
.text:000000000000A04D                 jnz     loc_9F0E
.text:000000000000A053
.text:000000000000A053 loc_A053:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:000000000000A053                                         ; hash_insert_if_absent+1C2↑j
.text:000000000000A053                 mov     eax, 0FFFFFFFFh
.text:000000000000A058                 jmp     loc_9E8C
.text:000000000000A058 ; ---------------------------------------------------------------------------
.text:000000000000A05D                 align 20h
.text:000000000000A060
.text:000000000000A060 loc_A060:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:000000000000A060                 mov     rcx, rax
.text:000000000000A063                 pxor    xmm0, xmm0
.text:000000000000A067                 shr     rcx, 1
.text:000000000000A06A                 and     eax, 1
.text:000000000000A06D                 or      rcx, rax
.text:000000000000A070                 cvtsi2ss xmm0, rcx
.text:000000000000A075                 addss   xmm0, xmm0
.text:000000000000A079                 jmp     loc_9FA8
.text:000000000000A079 ; ---------------------------------------------------------------------------
.text:000000000000A07E                 align 20h
.text:000000000000A080
.text:000000000000A080 loc_A080:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:000000000000A080                 mov     rcx, rax
.text:000000000000A083                 pxor    xmm1, xmm1
.text:000000000000A087                 shr     rcx, 1
.text:000000000000A08A                 and     eax, 1
.text:000000000000A08D                 or      rcx, rax
.text:000000000000A090                 cvtsi2ss xmm1, rcx
.text:000000000000A095                 addss   xmm1, xmm1
.text:000000000000A099                 jmp     loc_9FBE
.text:000000000000A099 ; ---------------------------------------------------------------------------
.text:000000000000A09E                 align 20h
.text:000000000000A0A0
.text:000000000000A0A0 loc_A0A0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:000000000000A0A0                 subss   xmm0, cs:dword_C310
.text:000000000000A0A8                 mov     rax, 8000000000000000h
.text:000000000000A0B2                 cvttss2si rsi, xmm0
.text:000000000000A0B7                 xor     rsi, rax
.text:000000000000A0BA                 jmp     loc_9FF8
.text:000000000000A0BF ; ---------------------------------------------------------------------------
.text:000000000000A0BF
.text:000000000000A0BF loc_A0BF:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000A0BF                 call    ___stack_chk_fail
.text:000000000000A0BF ; } // starts at 9E40
.text:000000000000A0BF hash_insert_if_absent endp
.text:000000000000A0BF
.text:000000000000A0BF ; ---------------------------------------------------------------------------
.text:000000000000A0C4                 align 10h
.text:000000000000A0D0
.text:000000000000A0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0D0
.text:000000000000A0D0 ; Attributes: info_from_lumina
.text:000000000000A0D0
.text:000000000000A0D0 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:000000000000A0D0                 public hash_insert
.text:000000000000A0D0 hash_insert     proc near               ; CODE XREF: filesystem_type+FF↑p
.text:000000000000A0D0                                         ; enter_dir_isra_10+46↑p
.text:000000000000A0D0
.text:000000000000A0D0 var_18          = qword ptr -18h
.text:000000000000A0D0 var_10          = qword ptr -10h
.text:000000000000A0D0
.text:000000000000A0D0 ; __unwind {
.text:000000000000A0D0                 push    rbx
.text:000000000000A0D1                 mov     rbx, rsi
.text:000000000000A0D4                 sub     rsp, 10h
.text:000000000000A0D8                 mov     rdx, rsp
.text:000000000000A0DB                 mov     rax, fs:28h
.text:000000000000A0E4                 mov     [rsp+18h+var_10], rax
.text:000000000000A0E9                 xor     eax, eax
.text:000000000000A0EB                 call    hash_insert_if_absent
.text:000000000000A0F0                 cmp     eax, 0FFFFFFFFh
.text:000000000000A0F3                 jz      short loc_A120
.text:000000000000A0F5                 test    eax, eax
.text:000000000000A0F7                 jnz     short loc_A0FD
.text:000000000000A0F9                 mov     rbx, [rsp+18h+var_18]
.text:000000000000A0FD
.text:000000000000A0FD loc_A0FD:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000A0FD                                         ; hash_insert+52↓j
.text:000000000000A0FD                 mov     rcx, [rsp+18h+var_10]
.text:000000000000A102                 xor     rcx, fs:28h
.text:000000000000A10B                 mov     rax, rbx
.text:000000000000A10E                 jnz     short loc_A124
.text:000000000000A110                 add     rsp, 10h
.text:000000000000A114                 pop     rbx
.text:000000000000A115                 retn
.text:000000000000A115 ; ---------------------------------------------------------------------------
.text:000000000000A116                 align 20h
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: hash_insert+23↑j
.text:000000000000A120                 xor     ebx, ebx
.text:000000000000A122                 jmp     short loc_A0FD
.text:000000000000A124 ; ---------------------------------------------------------------------------
.text:000000000000A124
.text:000000000000A124 loc_A124:                               ; CODE XREF: hash_insert+3E↑j
.text:000000000000A124                 call    ___stack_chk_fail
.text:000000000000A124 ; } // starts at A0D0
.text:000000000000A124 hash_insert     endp
.text:000000000000A124
.text:000000000000A124 ; ---------------------------------------------------------------------------
.text:000000000000A129                 align 10h
.text:000000000000A130
.text:000000000000A130 ; =============== S U B R O U T I N E =======================================
.text:000000000000A130
.text:000000000000A130 ; Attributes: info_from_lumina
.text:000000000000A130
.text:000000000000A130 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:000000000000A130                 public hash_delete
.text:000000000000A130 hash_delete     proc near               ; CODE XREF: leave_dir_isra_12+7A↑p
.text:000000000000A130
.text:000000000000A130 var_28          = qword ptr -28h
.text:000000000000A130 var_20          = qword ptr -20h
.text:000000000000A130
.text:000000000000A130 ; __unwind {
.text:000000000000A130                 push    r12
.text:000000000000A132                 push    rbp
.text:000000000000A133                 mov     ecx, 1
.text:000000000000A138                 push    rbx
.text:000000000000A139                 mov     rbx, rdi
.text:000000000000A13C                 sub     rsp, 10h
.text:000000000000A140                 mov     rdx, rsp
.text:000000000000A143                 mov     rax, fs:28h
.text:000000000000A14C                 mov     [rsp+28h+var_20], rax
.text:000000000000A151                 xor     eax, eax
.text:000000000000A153                 call    hash_find_entry
.text:000000000000A158                 test    rax, rax
.text:000000000000A15B                 mov     rbp, rax
.text:000000000000A15E                 jz      short loc_A16F
.text:000000000000A160                 mov     rax, [rsp+28h+var_28]
.text:000000000000A164                 sub     qword ptr [rbx+20h], 1
.text:000000000000A169                 cmp     qword ptr [rax], 0
.text:000000000000A16D                 jz      short loc_A190
.text:000000000000A16F
.text:000000000000A16F loc_A16F:                               ; CODE XREF: hash_delete+2E↑j
.text:000000000000A16F                                         ; hash_delete+9F↓j ...
.text:000000000000A16F                 mov     rcx, [rsp+28h+var_20]
.text:000000000000A174                 xor     rcx, fs:28h
.text:000000000000A17D                 mov     rax, rbp
.text:000000000000A180                 jnz     loc_A32E
.text:000000000000A186                 add     rsp, 10h
.text:000000000000A18A                 pop     rbx
.text:000000000000A18B                 pop     rbp
.text:000000000000A18C                 pop     r12
.text:000000000000A18E                 retn
.text:000000000000A18E ; ---------------------------------------------------------------------------
.text:000000000000A18F                 align 10h
.text:000000000000A190
.text:000000000000A190 loc_A190:                               ; CODE XREF: hash_delete+3D↑j
.text:000000000000A190                 mov     rax, [rbx+18h]
.text:000000000000A194                 sub     rax, 1
.text:000000000000A198                 test    rax, rax
.text:000000000000A19B                 mov     [rbx+18h], rax
.text:000000000000A19F                 js      loc_A2A0
.text:000000000000A1A5                 pxor    xmm0, xmm0
.text:000000000000A1A9                 cvtsi2ss xmm0, rax
.text:000000000000A1AE
.text:000000000000A1AE loc_A1AE:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000A1AE                 mov     rax, [rbx+10h]
.text:000000000000A1B2                 mov     rdx, [rbx+28h]
.text:000000000000A1B6                 test    rax, rax
.text:000000000000A1B9                 js      loc_A280
.text:000000000000A1BF                 pxor    xmm1, xmm1
.text:000000000000A1C3                 cvtsi2ss xmm1, rax
.text:000000000000A1C8
.text:000000000000A1C8 loc_A1C8:                               ; CODE XREF: hash_delete+169↓j
.text:000000000000A1C8                 mulss   xmm1, dword ptr [rdx]
.text:000000000000A1CC                 ucomiss xmm1, xmm0
.text:000000000000A1CF                 jbe     short loc_A16F
.text:000000000000A1D1                 lea     rdi, [rbx+28h]
.text:000000000000A1D5                 call    check_tuning
.text:000000000000A1DA                 mov     rax, [rbx+10h]
.text:000000000000A1DE                 mov     rdx, [rbx+28h]
.text:000000000000A1E2                 test    rax, rax
.text:000000000000A1E5                 js      loc_A310
.text:000000000000A1EB                 pxor    xmm0, xmm0
.text:000000000000A1EF                 cvtsi2ss xmm0, rax
.text:000000000000A1F4
.text:000000000000A1F4 loc_A1F4:                               ; CODE XREF: hash_delete+1F9↓j
.text:000000000000A1F4                 mov     rax, [rbx+18h]
.text:000000000000A1F8                 test    rax, rax
.text:000000000000A1FB                 js      loc_A2F0
.text:000000000000A201                 pxor    xmm1, xmm1
.text:000000000000A205                 cvtsi2ss xmm1, rax
.text:000000000000A20A
.text:000000000000A20A loc_A20A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000A20A                 movss   xmm2, dword ptr [rdx]
.text:000000000000A20E                 mulss   xmm2, xmm0
.text:000000000000A212                 ucomiss xmm2, xmm1
.text:000000000000A215                 jbe     loc_A16F
.text:000000000000A21B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000A21F                 mulss   xmm0, dword ptr [rdx+4]
.text:000000000000A224                 jz      loc_A2E0
.text:000000000000A22A
.text:000000000000A22A loc_A22A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000A22A                 ucomiss xmm0, cs:dword_C310
.text:000000000000A231                 jnb     loc_A2C0
.text:000000000000A237                 cvttss2si rsi, xmm0
.text:000000000000A23C
.text:000000000000A23C loc_A23C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000A23C                 mov     rdi, rbx
.text:000000000000A23F                 call    hash_rehash
.text:000000000000A244                 test    al, al
.text:000000000000A246                 jnz     loc_A16F
.text:000000000000A24C                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000A250                 test    rdi, rdi
.text:000000000000A253                 jz      short loc_A269
.text:000000000000A255                 nop     dword ptr [rax]
.text:000000000000A258
.text:000000000000A258 loc_A258:                               ; CODE XREF: hash_delete+137↓j
.text:000000000000A258                 mov     r12, [rdi+8]
.text:000000000000A25C                 call    free
.text:000000000000A261                 test    r12, r12
.text:000000000000A264                 mov     rdi, r12
.text:000000000000A267                 jnz     short loc_A258
.text:000000000000A269
.text:000000000000A269 loc_A269:                               ; CODE XREF: hash_delete+123↑j
.text:000000000000A269                 mov     qword ptr [rbx+48h], 0
.text:000000000000A271                 jmp     loc_A16F
.text:000000000000A271 ; ---------------------------------------------------------------------------
.text:000000000000A276                 align 20h
.text:000000000000A280
.text:000000000000A280 loc_A280:                               ; CODE XREF: hash_delete+89↑j
.text:000000000000A280                 mov     rcx, rax
.text:000000000000A283                 pxor    xmm1, xmm1
.text:000000000000A287                 shr     rcx, 1
.text:000000000000A28A                 and     eax, 1
.text:000000000000A28D                 or      rcx, rax
.text:000000000000A290                 cvtsi2ss xmm1, rcx
.text:000000000000A295                 addss   xmm1, xmm1
.text:000000000000A299                 jmp     loc_A1C8
.text:000000000000A299 ; ---------------------------------------------------------------------------
.text:000000000000A29E                 align 20h
.text:000000000000A2A0
.text:000000000000A2A0 loc_A2A0:                               ; CODE XREF: hash_delete+6F↑j
.text:000000000000A2A0                 mov     rdx, rax
.text:000000000000A2A3                 pxor    xmm0, xmm0
.text:000000000000A2A7                 shr     rdx, 1
.text:000000000000A2AA                 and     eax, 1
.text:000000000000A2AD                 or      rdx, rax
.text:000000000000A2B0                 cvtsi2ss xmm0, rdx
.text:000000000000A2B5                 addss   xmm0, xmm0
.text:000000000000A2B9                 jmp     loc_A1AE
.text:000000000000A2B9 ; ---------------------------------------------------------------------------
.text:000000000000A2BE                 align 20h
.text:000000000000A2C0
.text:000000000000A2C0 loc_A2C0:                               ; CODE XREF: hash_delete+101↑j
.text:000000000000A2C0                 subss   xmm0, cs:dword_C310
.text:000000000000A2C8                 mov     rax, 8000000000000000h
.text:000000000000A2D2                 cvttss2si rsi, xmm0
.text:000000000000A2D7                 xor     rsi, rax
.text:000000000000A2DA                 jmp     loc_A23C
.text:000000000000A2DA ; ---------------------------------------------------------------------------
.text:000000000000A2DF                 align 20h
.text:000000000000A2E0
.text:000000000000A2E0 loc_A2E0:                               ; CODE XREF: hash_delete+F4↑j
.text:000000000000A2E0                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000A2E5                 jmp     loc_A22A
.text:000000000000A2E5 ; ---------------------------------------------------------------------------
.text:000000000000A2EA                 align 10h
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: hash_delete+CB↑j
.text:000000000000A2F0                 mov     rcx, rax
.text:000000000000A2F3                 pxor    xmm1, xmm1
.text:000000000000A2F7                 shr     rcx, 1
.text:000000000000A2FA                 and     eax, 1
.text:000000000000A2FD                 or      rcx, rax
.text:000000000000A300                 cvtsi2ss xmm1, rcx
.text:000000000000A305                 addss   xmm1, xmm1
.text:000000000000A309                 jmp     loc_A20A
.text:000000000000A309 ; ---------------------------------------------------------------------------
.text:000000000000A30E                 align 10h
.text:000000000000A310
.text:000000000000A310 loc_A310:                               ; CODE XREF: hash_delete+B5↑j
.text:000000000000A310                 mov     rcx, rax
.text:000000000000A313                 pxor    xmm0, xmm0
.text:000000000000A317                 shr     rcx, 1
.text:000000000000A31A                 and     eax, 1
.text:000000000000A31D                 or      rcx, rax
.text:000000000000A320                 cvtsi2ss xmm0, rcx
.text:000000000000A325                 addss   xmm0, xmm0
.text:000000000000A329                 jmp     loc_A1F4
.text:000000000000A32E ; ---------------------------------------------------------------------------
.text:000000000000A32E
.text:000000000000A32E loc_A32E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000A32E                 call    ___stack_chk_fail
.text:000000000000A32E ; } // starts at A130
.text:000000000000A32E hash_delete     endp
.text:000000000000A32E
.text:000000000000A32E ; ---------------------------------------------------------------------------
.text:000000000000A333                 align 20h
.text:000000000000A340
.text:000000000000A340 ; =============== S U B R O U T I N E =======================================
.text:000000000000A340
.text:000000000000A340
.text:000000000000A340                 public i_ring_init
.text:000000000000A340 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:000000000000A340 ; __unwind {
.text:000000000000A340                 mov     byte ptr [rdi+1Ch], 1
.text:000000000000A344                 mov     qword ptr [rdi+14h], 0
.text:000000000000A34C                 mov     [rdi], esi
.text:000000000000A34E                 mov     [rdi+4], esi
.text:000000000000A351                 mov     [rdi+8], esi
.text:000000000000A354                 mov     [rdi+0Ch], esi
.text:000000000000A357                 mov     [rdi+10h], esi
.text:000000000000A35A                 retn
.text:000000000000A35A ; } // starts at A340
.text:000000000000A35A i_ring_init     endp
.text:000000000000A35A
.text:000000000000A35A ; ---------------------------------------------------------------------------
.text:000000000000A35B                 align 20h
.text:000000000000A360
.text:000000000000A360 ; =============== S U B R O U T I N E =======================================
.text:000000000000A360
.text:000000000000A360
.text:000000000000A360                 public i_ring_empty
.text:000000000000A360 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:000000000000A360                                         ; fts_safe_changedir+1C7↑p
.text:000000000000A360 ; __unwind {
.text:000000000000A360                 movzx   eax, byte ptr [rdi+1Ch]
.text:000000000000A364                 retn
.text:000000000000A364 ; } // starts at A360
.text:000000000000A364 i_ring_empty    endp
.text:000000000000A364
.text:000000000000A364 ; ---------------------------------------------------------------------------
.text:000000000000A365                 align 10h
.text:000000000000A370
.text:000000000000A370 ; =============== S U B R O U T I N E =======================================
.text:000000000000A370
.text:000000000000A370
.text:000000000000A370                 public i_ring_push
.text:000000000000A370 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:000000000000A370 ; __unwind {
.text:000000000000A370                 movzx   edx, byte ptr [rdi+1Ch]
.text:000000000000A374                 mov     ecx, [rdi+14h]
.text:000000000000A377                 xor     edx, 1
.text:000000000000A37A                 movzx   edx, dl
.text:000000000000A37D                 add     ecx, edx
.text:000000000000A37F                 and     ecx, 3
.text:000000000000A382                 mov     eax, ecx
.text:000000000000A384                 lea     r8, [rdi+rax*4]
.text:000000000000A388                 mov     eax, [r8]
.text:000000000000A38B                 mov     [r8], esi
.text:000000000000A38E                 mov     esi, [rdi+18h]
.text:000000000000A391                 mov     [rdi+14h], ecx
.text:000000000000A394                 cmp     esi, ecx
.text:000000000000A396                 jnz     short loc_A3A0
.text:000000000000A398                 add     edx, esi
.text:000000000000A39A                 and     edx, 3
.text:000000000000A39D                 mov     [rdi+18h], edx
.text:000000000000A3A0
.text:000000000000A3A0 loc_A3A0:                               ; CODE XREF: i_ring_push+26↑j
.text:000000000000A3A0                 mov     byte ptr [rdi+1Ch], 0
.text:000000000000A3A4                 retn
.text:000000000000A3A4 ; } // starts at A370
.text:000000000000A3A4 i_ring_push     endp
.text:000000000000A3A4
.text:000000000000A3A4 ; ---------------------------------------------------------------------------
.text:000000000000A3A5                 align 10h
.text:000000000000A3B0
.text:000000000000A3B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3B0
.text:000000000000A3B0
.text:000000000000A3B0                 public i_ring_pop
.text:000000000000A3B0 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:000000000000A3B0                                         ; fts_safe_changedir+1DB↑p
.text:000000000000A3B0 ; __unwind {
.text:000000000000A3B0                 cmp     byte ptr [rdi+1Ch], 0
.text:000000000000A3B4                 jnz     short loc_A3E5
.text:000000000000A3B6                 mov     eax, [rdi+14h]
.text:000000000000A3B9                 mov     esi, [rdi+10h]
.text:000000000000A3BC                 lea     rcx, [rdi+rax*4]
.text:000000000000A3C0                 mov     rdx, rax
.text:000000000000A3C3                 mov     eax, [rcx]
.text:000000000000A3C5                 mov     [rcx], esi
.text:000000000000A3C7                 cmp     edx, [rdi+18h]
.text:000000000000A3CA                 jz      short loc_A3E0
.text:000000000000A3CC                 add     edx, 3
.text:000000000000A3CF                 and     edx, 3
.text:000000000000A3D2                 mov     [rdi+14h], edx
.text:000000000000A3D5                 retn
.text:000000000000A3D5 ; ---------------------------------------------------------------------------
.text:000000000000A3D6                 align 20h
.text:000000000000A3E0
.text:000000000000A3E0 loc_A3E0:                               ; CODE XREF: i_ring_pop+1A↑j
.text:000000000000A3E0                 mov     byte ptr [rdi+1Ch], 1
.text:000000000000A3E4                 retn
.text:000000000000A3E5 ; ---------------------------------------------------------------------------
.text:000000000000A3E5
.text:000000000000A3E5 loc_A3E5:                               ; CODE XREF: i_ring_pop+4↑j
.text:000000000000A3E5                 sub     rsp, 8
.text:000000000000A3E9                 call    _abort
.text:000000000000A3E9 ; } // starts at A3B0
.text:000000000000A3E9 i_ring_pop      endp
.text:000000000000A3E9
.text:000000000000A3E9 ; ---------------------------------------------------------------------------
.text:000000000000A3EE                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3F0
.text:000000000000A3F0
.text:000000000000A3F0                 public locale_charset
.text:000000000000A3F0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000A3F0 ; __unwind {
.text:000000000000A3F0                 sub     rsp, 8
.text:000000000000A3F4                 mov     edi, 0Eh        ; item
.text:000000000000A3F9                 call    _nl_langinfo
.text:000000000000A3FE                 test    rax, rax
.text:000000000000A401                 jz      short loc_A420
.text:000000000000A403                 cmp     byte ptr [rax], 0
.text:000000000000A406                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000A40D                 cmovz   rax, rdx
.text:000000000000A411                 add     rsp, 8
.text:000000000000A415                 retn
.text:000000000000A415 ; ---------------------------------------------------------------------------
.text:000000000000A416                 align 20h
.text:000000000000A420
.text:000000000000A420 loc_A420:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000A420                 lea     rax, aAscii     ; "ASCII"
.text:000000000000A427                 add     rsp, 8
.text:000000000000A42B                 retn
.text:000000000000A42B ; } // starts at A3F0
.text:000000000000A42B locale_charset  endp
.text:000000000000A42B
.text:000000000000A42B ; ---------------------------------------------------------------------------
.text:000000000000A42C                 align 10h
.text:000000000000A430
.text:000000000000A430 ; =============== S U B R O U T I N E =======================================
.text:000000000000A430
.text:000000000000A430
.text:000000000000A430                 public openat_safer
.text:000000000000A430 openat_safer    proc near               ; CODE XREF: diropen_isra_6+35↑j
.text:000000000000A430                                         ; opendirat+15↓p
.text:000000000000A430
.text:000000000000A430 var_58          = dword ptr -58h
.text:000000000000A430 var_50          = qword ptr -50h
.text:000000000000A430 var_48          = qword ptr -48h
.text:000000000000A430 var_40          = qword ptr -40h
.text:000000000000A430 var_38          = byte ptr -38h
.text:000000000000A430 var_20          = qword ptr -20h
.text:000000000000A430 arg_0           = byte ptr  8
.text:000000000000A430
.text:000000000000A430 ; __unwind {
.text:000000000000A430                 sub     rsp, 58h
.text:000000000000A434                 mov     [rsp+58h+var_20], rcx
.text:000000000000A439                 xor     ecx, ecx
.text:000000000000A43B                 mov     rax, fs:28h
.text:000000000000A444                 mov     [rsp+58h+var_40], rax
.text:000000000000A449                 xor     eax, eax
.text:000000000000A44B                 test    dl, 40h
.text:000000000000A44E                 jnz     short loc_A478
.text:000000000000A450
.text:000000000000A450 loc_A450:                               ; CODE XREF: openat_safer+67↓j
.text:000000000000A450                 xor     eax, eax
.text:000000000000A452                 call    _openat
.text:000000000000A457                 mov     edi, eax        ; fd
.text:000000000000A459                 call    fd_safer_flag
.text:000000000000A45E                 mov     rsi, [rsp+58h+var_40]
.text:000000000000A463                 xor     rsi, fs:28h
.text:000000000000A46C                 jnz     short loc_A499
.text:000000000000A46E                 add     rsp, 58h
.text:000000000000A472                 retn
.text:000000000000A472 ; ---------------------------------------------------------------------------
.text:000000000000A473                 align 8
.text:000000000000A478
.text:000000000000A478 loc_A478:                               ; CODE XREF: openat_safer+1E↑j
.text:000000000000A478                 lea     rax, [rsp+58h+arg_0]
.text:000000000000A47D                 mov     [rsp+58h+var_58], 18h
.text:000000000000A484                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:000000000000A488                 mov     [rsp+58h+var_50], rax
.text:000000000000A48D                 lea     rax, [rsp+58h+var_38]
.text:000000000000A492                 mov     [rsp+58h+var_48], rax
.text:000000000000A497                 jmp     short loc_A450
.text:000000000000A499 ; ---------------------------------------------------------------------------
.text:000000000000A499
.text:000000000000A499 loc_A499:                               ; CODE XREF: openat_safer+3C↑j
.text:000000000000A499                 call    ___stack_chk_fail
.text:000000000000A499 ; } // starts at A430
.text:000000000000A499 openat_safer    endp
.text:000000000000A499
.text:000000000000A499 ; ---------------------------------------------------------------------------
.text:000000000000A49E                 align 20h
.text:000000000000A4A0
.text:000000000000A4A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4A0
.text:000000000000A4A0
.text:000000000000A4A0                 public opendirat
.text:000000000000A4A0 opendirat       proc near               ; CODE XREF: fts_build+4A5↑p
.text:000000000000A4A0 ; __unwind {
.text:000000000000A4A0                 push    r13
.text:000000000000A4A2                 push    r12
.text:000000000000A4A4                 or      edx, 90900h
.text:000000000000A4AA                 push    rbp
.text:000000000000A4AB                 push    rbx
.text:000000000000A4AC                 xor     eax, eax
.text:000000000000A4AE                 mov     r12, rcx
.text:000000000000A4B1                 sub     rsp, 8
.text:000000000000A4B5                 call    openat_safer
.text:000000000000A4BA                 test    eax, eax
.text:000000000000A4BC                 js      short loc_A510
.text:000000000000A4BE                 mov     edi, eax        ; fd
.text:000000000000A4C0                 mov     ebx, eax
.text:000000000000A4C2                 call    _fdopendir
.text:000000000000A4C7                 test    rax, rax
.text:000000000000A4CA                 mov     rbp, rax
.text:000000000000A4CD                 jz      short loc_A4E8
.text:000000000000A4CF                 mov     [r12], ebx
.text:000000000000A4D3                 add     rsp, 8
.text:000000000000A4D7                 mov     rax, rbp
.text:000000000000A4DA                 pop     rbx
.text:000000000000A4DB                 pop     rbp
.text:000000000000A4DC                 pop     r12
.text:000000000000A4DE                 pop     r13
.text:000000000000A4E0                 retn
.text:000000000000A4E0 ; ---------------------------------------------------------------------------
.text:000000000000A4E1                 align 8
.text:000000000000A4E8
.text:000000000000A4E8 loc_A4E8:                               ; CODE XREF: opendirat+2D↑j
.text:000000000000A4E8                 call    ___errno_location
.text:000000000000A4ED                 mov     r13d, [rax]
.text:000000000000A4F0                 mov     r12, rax
.text:000000000000A4F3                 mov     edi, ebx        ; fd
.text:000000000000A4F5                 call    _close
.text:000000000000A4FA                 mov     rax, rbp
.text:000000000000A4FD                 mov     [r12], r13d
.text:000000000000A501                 add     rsp, 8
.text:000000000000A505                 pop     rbx
.text:000000000000A506                 pop     rbp
.text:000000000000A507                 pop     r12
.text:000000000000A509                 pop     r13
.text:000000000000A50B                 retn
.text:000000000000A50B ; ---------------------------------------------------------------------------
.text:000000000000A50C                 align 10h
.text:000000000000A510
.text:000000000000A510 loc_A510:                               ; CODE XREF: opendirat+1C↑j
.text:000000000000A510                 add     rsp, 8
.text:000000000000A514                 xor     ebp, ebp
.text:000000000000A516                 pop     rbx
.text:000000000000A517                 mov     rax, rbp
.text:000000000000A51A                 pop     rbp
.text:000000000000A51B                 pop     r12
.text:000000000000A51D                 pop     r13
.text:000000000000A51F                 retn
.text:000000000000A51F ; } // starts at A4A0
.text:000000000000A51F opendirat       endp
.text:000000000000A51F
.text:000000000000A520
.text:000000000000A520 ; =============== S U B R O U T I N E =======================================
.text:000000000000A520
.text:000000000000A520 ; Attributes: info_from_lumina
.text:000000000000A520
.text:000000000000A520 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000000A520                 public fd_safer_flag
.text:000000000000A520 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000000A520                                         ; openat_safer+29↑p
.text:000000000000A520 ; __unwind {
.text:000000000000A520                 push    r13
.text:000000000000A522                 push    r12
.text:000000000000A524                 push    rbp
.text:000000000000A525                 push    rbx
.text:000000000000A526                 mov     ebx, edi
.text:000000000000A528                 sub     rsp, 8
.text:000000000000A52C                 cmp     edi, 2
.text:000000000000A52F                 ja      short loc_A552
.text:000000000000A531                 call    dup_safer
.text:000000000000A536                 mov     r12d, eax
.text:000000000000A539                 call    ___errno_location
.text:000000000000A53E                 mov     r13d, [rax]
.text:000000000000A541                 mov     rbp, rax
.text:000000000000A544                 mov     edi, ebx        ; fd
.text:000000000000A546                 call    _close
.text:000000000000A54B                 mov     ebx, r12d
.text:000000000000A54E                 mov     [rbp+0], r13d
.text:000000000000A552
.text:000000000000A552 loc_A552:                               ; CODE XREF: fd_safer_flag+F↑j
.text:000000000000A552                 add     rsp, 8
.text:000000000000A556                 mov     eax, ebx
.text:000000000000A558                 pop     rbx
.text:000000000000A559                 pop     rbp
.text:000000000000A55A                 pop     r12
.text:000000000000A55C                 pop     r13
.text:000000000000A55E                 retn
.text:000000000000A55E ; } // starts at A520
.text:000000000000A55E fd_safer_flag   endp
.text:000000000000A55E
.text:000000000000A55E ; ---------------------------------------------------------------------------
.text:000000000000A55F                 align 20h
.text:000000000000A560
.text:000000000000A560 ; =============== S U B R O U T I N E =======================================
.text:000000000000A560
.text:000000000000A560 ; Attributes: info_from_lumina
.text:000000000000A560
.text:000000000000A560 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000A560                 public rpl_fclose
.text:000000000000A560 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:000000000000A560 ; __unwind {
.text:000000000000A560                 push    r12
.text:000000000000A562                 push    rbp
.text:000000000000A563                 push    rbx
.text:000000000000A564                 mov     rbx, rdi
.text:000000000000A567                 call    _fileno
.text:000000000000A56C                 test    eax, eax
.text:000000000000A56E                 mov     rdi, rbx        ; fp
.text:000000000000A571                 js      short loc_A5C7
.text:000000000000A573                 call    ___freading
.text:000000000000A578                 test    eax, eax
.text:000000000000A57A                 jnz     short loc_A5A8
.text:000000000000A57C
.text:000000000000A57C loc_A57C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000A57C                 mov     rdi, rbx        ; stream
.text:000000000000A57F                 call    rpl_fflush
.text:000000000000A584                 test    eax, eax
.text:000000000000A586                 jz      short loc_A5C4
.text:000000000000A588                 call    ___errno_location
.text:000000000000A58D                 mov     r12d, [rax]
.text:000000000000A590                 mov     rdi, rbx        ; stream
.text:000000000000A593                 mov     rbp, rax
.text:000000000000A596                 call    _fclose
.text:000000000000A59B                 test    r12d, r12d
.text:000000000000A59E                 jnz     short loc_A5D0
.text:000000000000A5A0
.text:000000000000A5A0 loc_A5A0:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000A5A0                 pop     rbx
.text:000000000000A5A1                 pop     rbp
.text:000000000000A5A2                 pop     r12
.text:000000000000A5A4                 retn
.text:000000000000A5A4 ; ---------------------------------------------------------------------------
.text:000000000000A5A5                 align 8
.text:000000000000A5A8
.text:000000000000A5A8 loc_A5A8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000A5A8                 mov     rdi, rbx        ; stream
.text:000000000000A5AB                 call    _fileno
.text:000000000000A5B0                 xor     esi, esi        ; offset
.text:000000000000A5B2                 mov     edx, 1          ; whence
.text:000000000000A5B7                 mov     edi, eax        ; fd
.text:000000000000A5B9                 call    _lseek
.text:000000000000A5BE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A5C2                 jnz     short loc_A57C
.text:000000000000A5C4
.text:000000000000A5C4 loc_A5C4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000A5C4                 mov     rdi, rbx        ; stream
.text:000000000000A5C7
.text:000000000000A5C7 loc_A5C7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000A5C7                 pop     rbx
.text:000000000000A5C8                 pop     rbp
.text:000000000000A5C9                 pop     r12
.text:000000000000A5CB                 jmp     _fclose
.text:000000000000A5D0 ; ---------------------------------------------------------------------------
.text:000000000000A5D0
.text:000000000000A5D0 loc_A5D0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000A5D0                 mov     [rbp+0], r12d
.text:000000000000A5D4                 mov     eax, 0FFFFFFFFh
.text:000000000000A5D9                 jmp     short loc_A5A0
.text:000000000000A5D9 ; } // starts at A560
.text:000000000000A5D9 rpl_fclose      endp
.text:000000000000A5D9
.text:000000000000A5D9 ; ---------------------------------------------------------------------------
.text:000000000000A5DB                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5E0
.text:000000000000A5E0
.text:000000000000A5E0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000A5E0                 public rpl_fcntl
.text:000000000000A5E0 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:000000000000A5E0                                         ; dup_safer+9↓j
.text:000000000000A5E0
.text:000000000000A5E0 var_68          = dword ptr -68h
.text:000000000000A5E0 var_60          = qword ptr -60h
.text:000000000000A5E0 var_58          = qword ptr -58h
.text:000000000000A5E0 var_50          = qword ptr -50h
.text:000000000000A5E0 var_48          = byte ptr -48h
.text:000000000000A5E0 var_38          = qword ptr -38h
.text:000000000000A5E0 var_30          = qword ptr -30h
.text:000000000000A5E0 var_28          = qword ptr -28h
.text:000000000000A5E0 var_20          = qword ptr -20h
.text:000000000000A5E0 arg_0           = byte ptr  8
.text:000000000000A5E0
.text:000000000000A5E0 ; __unwind {
.text:000000000000A5E0                 push    r12
.text:000000000000A5E2                 push    rbp
.text:000000000000A5E3                 mov     ebp, edi
.text:000000000000A5E5                 push    rbx
.text:000000000000A5E6                 sub     rsp, 50h
.text:000000000000A5EA                 mov     rax, fs:28h
.text:000000000000A5F3                 mov     [rsp+68h+var_50], rax
.text:000000000000A5F8                 xor     eax, eax
.text:000000000000A5FA                 lea     rax, [rsp+68h+arg_0]
.text:000000000000A5FF                 test    esi, esi
.text:000000000000A601                 mov     [rsp+68h+var_38], rdx
.text:000000000000A606                 mov     [rsp+68h+var_30], rcx
.text:000000000000A60B                 mov     [rsp+68h+var_28], r8
.text:000000000000A610                 mov     [rsp+68h+var_60], rax
.text:000000000000A615                 lea     rax, [rsp+68h+var_48]
.text:000000000000A61A                 mov     [rsp+68h+var_20], r9
.text:000000000000A61F                 mov     [rsp+68h+var_68], 10h
.text:000000000000A626                 mov     [rsp+68h+var_58], rax
.text:000000000000A62B                 jz      loc_A832
.text:000000000000A631                 cmp     esi, 406h
.text:000000000000A637                 jnz     short loc_A680
.text:000000000000A639                 mov     rax, [rsp+68h+var_58]
.text:000000000000A63E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000A645                 mov     [rsp+68h+var_68], 18h
.text:000000000000A64C                 mov     r12d, [rax+10h]
.text:000000000000A650                 mov     edx, r12d
.text:000000000000A653                 js      loc_A783
.text:000000000000A659                 xor     eax, eax
.text:000000000000A65B                 mov     esi, 406h       ; cmd
.text:000000000000A660                 call    _fcntl
.text:000000000000A665                 test    eax, eax
.text:000000000000A667                 mov     ebx, eax
.text:000000000000A669                 js      loc_A7F8
.text:000000000000A66F
.text:000000000000A66F loc_A66F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000A66F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000A679                 jmp     short loc_A6C0
.text:000000000000A679 ; ---------------------------------------------------------------------------
.text:000000000000A67B                 align 20h
.text:000000000000A680
.text:000000000000A680 loc_A680:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000A680                 cmp     esi, 0Bh
.text:000000000000A683                 jz      short loc_A6B0
.text:000000000000A685                 jg      short loc_A6E0
.text:000000000000A687                 cmp     esi, 4
.text:000000000000A68A                 jz      loc_A760
.text:000000000000A690                 jg      loc_A750
.text:000000000000A696                 cmp     esi, 2
.text:000000000000A699                 jz      loc_A760
.text:000000000000A69F                 jg      short loc_A6B0
.text:000000000000A6A1                 cmp     esi, 1
.text:000000000000A6A4                 jnz     short loc_A708
.text:000000000000A6A6                 db      2Eh
.text:000000000000A6A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A6B0
.text:000000000000A6B0 loc_A6B0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000A6B0                                         ; rpl_fcntl+BF↑j ...
.text:000000000000A6B0                 mov     edi, ebp        ; fd
.text:000000000000A6B2                 xor     eax, eax
.text:000000000000A6B4                 call    _fcntl
.text:000000000000A6B9                 mov     ebx, eax
.text:000000000000A6BB                 nop     dword ptr [rax+rax+00h]
.text:000000000000A6C0
.text:000000000000A6C0 loc_A6C0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000A6C0                                         ; rpl_fcntl+147↓j ...
.text:000000000000A6C0                 mov     rcx, [rsp+68h+var_50]
.text:000000000000A6C5                 xor     rcx, fs:28h
.text:000000000000A6CE                 mov     eax, ebx
.text:000000000000A6D0                 jnz     loc_A82D
.text:000000000000A6D6                 add     rsp, 50h
.text:000000000000A6DA                 pop     rbx
.text:000000000000A6DB                 pop     rbp
.text:000000000000A6DC                 pop     r12
.text:000000000000A6DE                 retn
.text:000000000000A6DE ; ---------------------------------------------------------------------------
.text:000000000000A6DF                 align 20h
.text:000000000000A6E0
.text:000000000000A6E0 loc_A6E0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000A6E0                 cmp     esi, 407h
.text:000000000000A6E6                 jg      short loc_A730
.text:000000000000A6E8                 cmp     esi, 406h
.text:000000000000A6EE                 jge     short loc_A760
.text:000000000000A6F0                 cmp     esi, 401h
.text:000000000000A6F6                 jz      short loc_A6B0
.text:000000000000A6F8                 cmp     esi, 402h
.text:000000000000A6FE                 jz      short loc_A760
.text:000000000000A700                 cmp     esi, 400h
.text:000000000000A706                 jz      short loc_A760
.text:000000000000A708
.text:000000000000A708 loc_A708:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000A708                                         ; rpl_fcntl+164↓j ...
.text:000000000000A708                 mov     eax, [rsp+68h+var_68]
.text:000000000000A70B                 cmp     eax, 2Fh ; '/'
.text:000000000000A70E                 ja      loc_A84A
.text:000000000000A714                 add     rax, [rsp+68h+var_58]
.text:000000000000A719
.text:000000000000A719 loc_A719:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000A719                 mov     rdx, [rax]
.text:000000000000A71C                 mov     edi, ebp        ; fd
.text:000000000000A71E                 xor     eax, eax
.text:000000000000A720                 call    _fcntl
.text:000000000000A725                 mov     ebx, eax
.text:000000000000A727                 jmp     short loc_A6C0
.text:000000000000A727 ; ---------------------------------------------------------------------------
.text:000000000000A729                 align 10h
.text:000000000000A730
.text:000000000000A730 loc_A730:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000A730                 cmp     esi, 409h
.text:000000000000A736                 jz      short loc_A760
.text:000000000000A738                 jl      loc_A6B0
.text:000000000000A73E                 cmp     esi, 40Ah
.text:000000000000A744                 jnz     short loc_A708
.text:000000000000A746                 jmp     loc_A6B0
.text:000000000000A746 ; ---------------------------------------------------------------------------
.text:000000000000A74B                 align 10h
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000A750                 cmp     esi, 9
.text:000000000000A753                 jz      loc_A6B0
.text:000000000000A759                 jg      short loc_A760
.text:000000000000A75B                 cmp     esi, 8
.text:000000000000A75E                 jnz     short loc_A708
.text:000000000000A760
.text:000000000000A760 loc_A760:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000A760                                         ; rpl_fcntl+B9↑j ...
.text:000000000000A760                 mov     eax, [rsp+68h+var_68]
.text:000000000000A763                 cmp     eax, 2Fh ; '/'
.text:000000000000A766                 ja      loc_A854
.text:000000000000A76C                 add     rax, [rsp+68h+var_58]
.text:000000000000A771
.text:000000000000A771 loc_A771:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000A771                 mov     edx, [rax]
.text:000000000000A773                 mov     edi, ebp        ; fd
.text:000000000000A775                 xor     eax, eax
.text:000000000000A777                 call    _fcntl
.text:000000000000A77C                 mov     ebx, eax
.text:000000000000A77E                 jmp     loc_A6C0
.text:000000000000A783 ; ---------------------------------------------------------------------------
.text:000000000000A783
.text:000000000000A783 loc_A783:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000A783                 xor     esi, esi        ; cmd
.text:000000000000A785                 xor     eax, eax
.text:000000000000A787                 call    _fcntl
.text:000000000000A78C                 test    eax, eax
.text:000000000000A78E                 mov     ebx, eax
.text:000000000000A790                 js      loc_A6C0
.text:000000000000A796                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000A79D                 jnz     loc_A6C0
.text:000000000000A7A3
.text:000000000000A7A3 loc_A7A3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000A7A3                 xor     eax, eax
.text:000000000000A7A5                 mov     esi, 1          ; cmd
.text:000000000000A7AA                 mov     edi, ebx        ; fd
.text:000000000000A7AC                 call    _fcntl
.text:000000000000A7B1                 test    eax, eax
.text:000000000000A7B3                 js      short loc_A7D1
.text:000000000000A7B5                 or      eax, 1
.text:000000000000A7B8                 mov     esi, 2          ; cmd
.text:000000000000A7BD                 mov     edi, ebx        ; fd
.text:000000000000A7BF                 mov     edx, eax
.text:000000000000A7C1                 xor     eax, eax
.text:000000000000A7C3                 call    _fcntl
.text:000000000000A7C8                 cmp     eax, 0FFFFFFFFh
.text:000000000000A7CB                 jnz     loc_A6C0
.text:000000000000A7D1
.text:000000000000A7D1 loc_A7D1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000A7D1                 call    ___errno_location
.text:000000000000A7D6                 mov     r12d, [rax]
.text:000000000000A7D9                 mov     rbp, rax
.text:000000000000A7DC                 mov     edi, ebx        ; fd
.text:000000000000A7DE                 call    _close
.text:000000000000A7E3                 mov     ebx, 0FFFFFFFFh
.text:000000000000A7E8                 mov     [rbp+0], r12d
.text:000000000000A7EC                 jmp     loc_A6C0
.text:000000000000A7EC ; ---------------------------------------------------------------------------
.text:000000000000A7F1                 align 8
.text:000000000000A7F8
.text:000000000000A7F8 loc_A7F8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000A7F8                 call    ___errno_location
.text:000000000000A7FD                 cmp     dword ptr [rax], 16h
.text:000000000000A800                 jnz     loc_A66F
.text:000000000000A806                 xor     esi, esi        ; cmd
.text:000000000000A808                 xor     eax, eax
.text:000000000000A80A                 mov     edx, r12d
.text:000000000000A80D                 mov     edi, ebp        ; fd
.text:000000000000A80F                 call    _fcntl
.text:000000000000A814                 test    eax, eax
.text:000000000000A816                 mov     ebx, eax
.text:000000000000A818                 js      loc_A6C0
.text:000000000000A81E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000A828                 jmp     loc_A7A3
.text:000000000000A82D ; ---------------------------------------------------------------------------
.text:000000000000A82D
.text:000000000000A82D loc_A82D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000A82D                 call    ___stack_chk_fail
.text:000000000000A832 ; ---------------------------------------------------------------------------
.text:000000000000A832
.text:000000000000A832 loc_A832:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000A832                 mov     rax, [rsp+68h+var_58]
.text:000000000000A837                 xor     esi, esi        ; cmd
.text:000000000000A839                 mov     edx, [rax+10h]
.text:000000000000A83C                 xor     eax, eax
.text:000000000000A83E                 call    _fcntl
.text:000000000000A843                 mov     ebx, eax
.text:000000000000A845                 jmp     loc_A6C0
.text:000000000000A84A ; ---------------------------------------------------------------------------
.text:000000000000A84A
.text:000000000000A84A loc_A84A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000A84A                 mov     rax, [rsp+68h+var_60]
.text:000000000000A84F                 jmp     loc_A719
.text:000000000000A854 ; ---------------------------------------------------------------------------
.text:000000000000A854
.text:000000000000A854 loc_A854:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000A854                 mov     rax, [rsp+68h+var_60]
.text:000000000000A859                 jmp     loc_A771
.text:000000000000A859 ; } // starts at A5E0
.text:000000000000A859 rpl_fcntl       endp
.text:000000000000A859
.text:000000000000A859 ; ---------------------------------------------------------------------------
.text:000000000000A85E                 align 20h
.text:000000000000A860
.text:000000000000A860 ; =============== S U B R O U T I N E =======================================
.text:000000000000A860
.text:000000000000A860
.text:000000000000A860                 public dup_safer
.text:000000000000A860 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000A860 ; __unwind {
.text:000000000000A860                 mov     edx, 3
.text:000000000000A865                 xor     esi, esi
.text:000000000000A867                 xor     eax, eax
.text:000000000000A869                 jmp     rpl_fcntl
.text:000000000000A869 ; } // starts at A860
.text:000000000000A869 dup_safer       endp
.text:000000000000A869
.text:000000000000A869 ; ---------------------------------------------------------------------------
.text:000000000000A86E                 align 10h
.text:000000000000A870
.text:000000000000A870 ; =============== S U B R O U T I N E =======================================
.text:000000000000A870
.text:000000000000A870 ; Attributes: info_from_lumina
.text:000000000000A870
.text:000000000000A870 ; void _libc_csu_init(void)
.text:000000000000A870                 public __libc_csu_init
.text:000000000000A870 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000A870 ; __unwind {
.text:000000000000A870                 push    r15
.text:000000000000A872                 push    r14
.text:000000000000A874                 mov     r15, rdx
.text:000000000000A877                 push    r13
.text:000000000000A879                 push    r12
.text:000000000000A87B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000A882                 push    rbp
.text:000000000000A883                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000A88A                 push    rbx
.text:000000000000A88B                 mov     r13d, edi
.text:000000000000A88E                 mov     r14, rsi
.text:000000000000A891                 sub     rbp, r12
.text:000000000000A894                 sub     rsp, 8
.text:000000000000A898                 sar     rbp, 3
.text:000000000000A89C                 call    _init_proc
.text:000000000000A8A1                 test    rbp, rbp
.text:000000000000A8A4                 jz      short loc_A8C6
.text:000000000000A8A6                 xor     ebx, ebx
.text:000000000000A8A8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000A8B0
.text:000000000000A8B0 loc_A8B0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000A8B0                 mov     rdx, r15
.text:000000000000A8B3                 mov     rsi, r14
.text:000000000000A8B6                 mov     edi, r13d
.text:000000000000A8B9                 call    ds:(__frame_dummy_init_array_entry - 20E990h)[r12+rbx*8]
.text:000000000000A8BD                 add     rbx, 1
.text:000000000000A8C1                 cmp     rbp, rbx
.text:000000000000A8C4                 jnz     short loc_A8B0
.text:000000000000A8C6
.text:000000000000A8C6 loc_A8C6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000A8C6                 add     rsp, 8
.text:000000000000A8CA                 pop     rbx
.text:000000000000A8CB                 pop     rbp
.text:000000000000A8CC                 pop     r12
.text:000000000000A8CE                 pop     r13
.text:000000000000A8D0                 pop     r14
.text:000000000000A8D2                 pop     r15
.text:000000000000A8D4                 retn
.text:000000000000A8D4 ; } // starts at A870
.text:000000000000A8D4 __libc_csu_init endp
.text:000000000000A8D4
.text:000000000000A8D4 ; ---------------------------------------------------------------------------
.text:000000000000A8D5                 align 20h
.text:000000000000A8E0
.text:000000000000A8E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A8E0
.text:000000000000A8E0
.text:000000000000A8E0 ; void _libc_csu_fini(void)
.text:000000000000A8E0                 public __libc_csu_fini
.text:000000000000A8E0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000A8E0 ; __unwind {
.text:000000000000A8E0                 rep retn
.text:000000000000A8E0 ; } // starts at A8E0
.text:000000000000A8E0 __libc_csu_fini endp
.text:000000000000A8E0
.text:000000000000A8E0 ; ---------------------------------------------------------------------------
.text:000000000000A8E2                 align 10h
.text:000000000000A8F0
.text:000000000000A8F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A8F0
.text:000000000000A8F0
.text:000000000000A8F0 atexit          proc near               ; CODE XREF: main+73↑p
.text:000000000000A8F0 ; __unwind {
.text:000000000000A8F0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000A8F7                 xor     esi, esi        ; obj
.text:000000000000A8F9                 jmp     ___cxa_atexit
.text:000000000000A8F9 ; } // starts at A8F0
.text:000000000000A8F9 atexit          endp
.text:000000000000A8F9
.text:000000000000A8F9 _text           ends
.text:000000000000A8F9
LOAD:000000000000A8FE ; ===========================================================================
LOAD:000000000000A8FE
LOAD:000000000000A8FE ; Segment type: Pure code
LOAD:000000000000A8FE ; Segment permissions: Read/Execute
LOAD:000000000000A8FE LOAD            segment byte public 'CODE' use64
LOAD:000000000000A8FE                 assume cs:LOAD
LOAD:000000000000A8FE                 ;org 0A8FEh
LOAD:000000000000A8FE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A8FE                 align 20h
LOAD:000000000000A8FE LOAD            ends
LOAD:000000000000A8FE
.fini:000000000000A900 ; ===========================================================================
.fini:000000000000A900
.fini:000000000000A900 ; Segment type: Pure code
.fini:000000000000A900 ; Segment permissions: Read/Execute
.fini:000000000000A900 _fini           segment dword public 'CODE' use64
.fini:000000000000A900                 assume cs:_fini
.fini:000000000000A900                 ;org 0A900h
.fini:000000000000A900                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000A900
.fini:000000000000A900 ; =============== S U B R O U T I N E =======================================
.fini:000000000000A900
.fini:000000000000A900
.fini:000000000000A900                 public _term_proc
.fini:000000000000A900 _term_proc      proc near
.fini:000000000000A900                 sub     rsp, 8          ; _fini
.fini:000000000000A904                 add     rsp, 8
.fini:000000000000A908                 retn
.fini:000000000000A908 _term_proc      endp
.fini:000000000000A908
.fini:000000000000A908 _fini           ends
.fini:000000000000A908
LOAD:000000000000A909 ; ===========================================================================
LOAD:000000000000A909
LOAD:000000000000A909 ; Segment type: Pure code
LOAD:000000000000A909 ; Segment permissions: Read/Execute
LOAD:000000000000A909 LOAD            segment byte public 'CODE' use64
LOAD:000000000000A909                 assume cs:LOAD
LOAD:000000000000A909                 ;org 0A909h
LOAD:000000000000A909                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A909                 align 20h
LOAD:000000000000A909 LOAD            ends
LOAD:000000000000A909
.rodata:000000000000A920 ; ===========================================================================
.rodata:000000000000A920
.rodata:000000000000A920 ; Segment type: Pure data
.rodata:000000000000A920 ; Segment permissions: Read
.rodata:000000000000A920 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000A920                 assume cs:_rodata
.rodata:000000000000A920                 ;org 0A920h
.rodata:000000000000A920                 public _IO_stdin_used
.rodata:000000000000A920 _IO_stdin_used  db    1
.rodata:000000000000A921                 db    0
.rodata:000000000000A922                 db    2
.rodata:000000000000A923                 db    0
.rodata:000000000000A924 unk_A924        db  72h ; r             ; DATA XREF: main+233↑o
.rodata:000000000000A924                                         ; usage+1F4↑o ...
.rodata:000000000000A925                 db  6Dh ; m
.rodata:000000000000A926                 db    0
.rodata:000000000000A927 unk_A927        db  5Bh ; [             ; DATA XREF: usage+200↑o
.rodata:000000000000A928                 db    0
.rodata:000000000000A929 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+227↑o
.rodata:000000000000A939 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000A939                                         ; DATA XREF: usage+257↑o
.rodata:000000000000A939                                         ; usage+34C↑o ...
.rodata:000000000000A94F aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+268↑o
.rodata:000000000000A959 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+274↑o
.rodata:000000000000A968 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+207↑o
.rodata:000000000000A972 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+233↑o
.rodata:000000000000A97C aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+24B↑o
.rodata:000000000000A986 ; const char aSOnlineHelpS[]
.rodata:000000000000A986 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2BA↑o
.rodata:000000000000A986                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000A99D unk_A99D        db  47h ; G             ; DATA XREF: main+22C↑o
.rodata:000000000000A99D                                         ; usage+2D6↑o ...
.rodata:000000000000A99E                 db  4Eh ; N
.rodata:000000000000A99F                 db  55h ; U
.rodata:000000000000A9A0                 db  20h
.rodata:000000000000A9A1 ; const char domainname[]
.rodata:000000000000A9A1 domainname      db 'coreutils',0        ; DATA XREF: main+54↑o
.rodata:000000000000A9A1                                         ; main+60↑o ...
.rodata:000000000000A9AB ; const char aEn[]
.rodata:000000000000A9AB aEn             db 'en_',0              ; DATA XREF: usage+2FD↑o
.rodata:000000000000A9AB                                         ; usage+3BE↑o
.rodata:000000000000A9AF ; const char aFullDocumentat[]
.rodata:000000000000A9AF aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000A9AF                                         ; DATA XREF: usage:loc_27B9↑o
.rodata:000000000000A9AF                                         ; usage:loc_2876↑o
.rodata:000000000000A9CA ; const char dirname[]
.rodata:000000000000A9CA dirname         db '/usr/local/share/locale',0
.rodata:000000000000A9CA                                         ; DATA XREF: main+4D↑o
.rodata:000000000000A9E2 aInteractive    db '--interactive',0    ; DATA XREF: main+18D↑o
.rodata:000000000000A9E2                                         ; .data.rel.ro:000000000020EA00↓o
.rodata:000000000000A9F0 aNoPreserveRoot db '--no-preserve-root',0
.rodata:000000000000A9F0                                         ; DATA XREF: main+4↑o
.rodata:000000000000A9F0                                         ; .data.rel.ro:000000000020EA40↓o ...
.rodata:000000000000AA03 ; const char s2[]
.rodata:000000000000AA03 s2              db 'all',0              ; DATA XREF: main+2A0↑o
.rodata:000000000000AA07 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+216↑o
.rodata:000000000000AA17 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: main+225↑o
.rodata:000000000000AA22 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+1FB↑o
.rodata:000000000000AA2F aRichardMStallm db 'Richard M. Stallman',0
.rodata:000000000000AA2F                                         ; DATA XREF: main+21E↑o
.rodata:000000000000AA43 ; const char shortopts[]
.rodata:000000000000AA43 shortopts       db 'dfirvIR',0          ; DATA XREF: main+C7↑o
.rodata:000000000000AA4B ; const char aMissingOperand[]
.rodata:000000000000AA4B aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_2308↑o
.rodata:000000000000AA5B ; const char file[]
.rodata:000000000000AA5B file            db '../coreutils-8.31/src/rm.c',0
.rodata:000000000000AA5B                                         ; DATA XREF: main+3BD↑o
.rodata:000000000000AA76 ; const char assertion[]
.rodata:000000000000AA76 assertion       db 'VALID_STATUS (status)',0
.rodata:000000000000AA76                                         ; DATA XREF: main+3C4↑o
.rodata:000000000000AA8C ; const char msgid2[]
.rodata:000000000000AA8C msgid2          db '%s: remove %lu arguments? ',0
.rodata:000000000000AA8C                                         ; DATA XREF: main+350↑o
.rodata:000000000000AAA7 ; const char msgid1[]
.rodata:000000000000AAA7 msgid1          db '%s: remove %lu argument? ',0
.rodata:000000000000AAA7                                         ; DATA XREF: main+357↑o
.rodata:000000000000AAC1 aNever          db 'never',0            ; DATA XREF: .data.rel.ro:interactive_args↓o
.rodata:000000000000AAC7 aNo             db 'no',0               ; DATA XREF: .data.rel.ro:000000000020E9A8↓o
.rodata:000000000000AACA aNone           db 'none',0             ; DATA XREF: .data.rel.ro:000000000020E9B0↓o
.rodata:000000000000AACF aOnce           db 'once',0             ; DATA XREF: .data.rel.ro:000000000020E9B8↓o
.rodata:000000000000AAD4 aYes            db 'yes',0              ; DATA XREF: .data.rel.ro:000000000020E9C8↓o
.rodata:000000000000AAD8 aForce          db 'force',0            ; DATA XREF: .data.rel.ro:long_opts↓o
.rodata:000000000000AADE aOneFileSystem  db 'one-file-system',0  ; DATA XREF: .data.rel.ro:000000000020EA20↓o
.rodata:000000000000AAEE aPresumeInputTt db '-presume-input-tty',0
.rodata:000000000000AAEE                                         ; DATA XREF: .data.rel.ro:000000000020EA80↓o
.rodata:000000000000AB01 aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:000000000020EAA0↓o
.rodata:000000000000AB0B aDir            db 'dir',0              ; DATA XREF: .data.rel.ro:000000000020EAC0↓o
.rodata:000000000000AB0F aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020EAE0↓o
.rodata:000000000000AB17 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020EB00↓o
.rodata:000000000000AB1C aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020EB20↓o
.rodata:000000000000AB24                 align 8
.rodata:000000000000AB28 ; const char aTrySHelpForMor[]
.rodata:000000000000AB28 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000AB28                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000AB4F                 align 10h
.rodata:000000000000AB50 ; const char aUsageSOptionFi[]
.rodata:000000000000AB50 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:000000000000AB50                                         ; DATA XREF: usage:loc_24FD↑o
.rodata:000000000000AB71                 align 8
.rodata:000000000000AB78 ; const char aRemoveUnlinkTh[]
.rodata:000000000000AB78 aRemoveUnlinkTh db 'Remove (unlink) the FILE(s).',0Ah
.rodata:000000000000AB78                                         ; DATA XREF: usage+84↑o
.rodata:000000000000AB78                 db 0Ah
.rodata:000000000000AB78                 db '  -f, --force           ignore nonexistent files and arguments, n'
.rodata:000000000000AB78                 db 'ever prompt',0Ah
.rodata:000000000000AB78                 db '  -i                    prompt before every removal',0Ah,0
.rodata:000000000000AC18 ; const char aIPromptOnceBef[]
.rodata:000000000000AC18 aIPromptOnceBef db '  -I                    prompt once before removing more than thr'
.rodata:000000000000AC18                                         ; DATA XREF: usage+A9↑o
.rodata:000000000000AC18                 db 'ee files, or',0Ah
.rodata:000000000000AC18                 db '                          when removing recursively; less intrusi'
.rodata:000000000000AC18                 db 've than -i,',0Ah
.rodata:000000000000AC18                 db '                          while still giving protection against m'
.rodata:000000000000AC18                 db 'ost mistakes',0Ah
.rodata:000000000000AC18                 db '      --interactive[=WHEN]  prompt according to WHEN: never, once'
.rodata:000000000000AC18                 db ' (-I), or',0Ah
.rodata:000000000000AC18                 db '                          always (-i); without WHEN, prompt alway'
.rodata:000000000000AC18                 db 's',0Ah,0
.rodata:000000000000AD90 ; const char aOneFileSystemW[]
.rodata:000000000000AD90 aOneFileSystemW db '      --one-file-system  when removing a hierarchy recursively, s'
.rodata:000000000000AD90                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000AD90                 db 'kip any',0Ah
.rodata:000000000000AD90                 db '                          directory that is on a file system diff'
.rodata:000000000000AD90                 db 'erent from',0Ah
.rodata:000000000000AD90                 db '                          that of the corresponding command line '
.rodata:000000000000AD90                 db 'argument',0Ah,0
.rodata:000000000000AE70 ; const char aNoPreserveRoot_0[]
.rodata:000000000000AE70 aNoPreserveRoot_0 db '      --no-preserve-root  do not treat ',27h,'/',27h,' specially',0Ah
.rodata:000000000000AE70                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000AE70                 db '      --preserve-root[=all]  do not remove ',27h,'/',27h,' (defau'
.rodata:000000000000AE70                 db 'lt);',0Ah
.rodata:000000000000AE70                 db '                              with ',27h,'all',27h,', reject any '
.rodata:000000000000AE70                 db 'command line argument',0Ah
.rodata:000000000000AE70                 db '                              on a separate device from its paren'
.rodata:000000000000AE70                 db 't',0Ah,0
.rodata:000000000000AF6E                 align 10h
.rodata:000000000000AF70 ; const char aRRRecursiveRem[]
.rodata:000000000000AF70 aRRRecursiveRem db '  -r, -R, --recursive   remove directories and their contents rec'
.rodata:000000000000AF70                                         ; DATA XREF: usage+118↑o
.rodata:000000000000AF70                 db 'ursively',0Ah
.rodata:000000000000AF70                 db '  -d, --dir             remove empty directories',0Ah
.rodata:000000000000AF70                 db '  -v, --verbose         explain what is being done',0Ah,0
.rodata:000000000000B01F                 align 20h
.rodata:000000000000B020 ; const char aHelpDisplayThi[]
.rodata:000000000000B020 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000B020                                         ; DATA XREF: usage+13D↑o
.rodata:000000000000B04D                 align 10h
.rodata:000000000000B050 ; const char aVersionOutputV[]
.rodata:000000000000B050 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000B050                                         ; DATA XREF: usage+162↑o
.rodata:000000000000B086                 align 8
.rodata:000000000000B088 ; const char aByDefaultRmDoe[]
.rodata:000000000000B088 aByDefaultRmDoe db 0Ah                  ; DATA XREF: usage+187↑o
.rodata:000000000000B088                 db 'By default, rm does not remove directories.  Use the --recursive '
.rodata:000000000000B088                 db '(-r or -R)',0Ah
.rodata:000000000000B088                 db 'option to remove each listed directory, too, along with all of it'
.rodata:000000000000B088                 db 's contents.',0Ah,0
.rodata:000000000000B123                 align 8
.rodata:000000000000B128 ; const char aToRemoveAFileW[]
.rodata:000000000000B128 aToRemoveAFileW db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:000000000000B128                 db 'To remove a file whose name starts with a ',27h,'-',27h,', for ex'
.rodata:000000000000B128                 db 'ample ',27h,'-foo',27h,',',0Ah
.rodata:000000000000B128                 db 'use one of these commands:',0Ah
.rodata:000000000000B128                 db '  %s -- -foo',0Ah
.rodata:000000000000B128                 db 0Ah
.rodata:000000000000B128                 db '  %s ./-foo',0Ah,0
.rodata:000000000000B1A2                 align 8
.rodata:000000000000B1A8 ; const char aNoteThatIfYouU[]
.rodata:000000000000B1A8 aNoteThatIfYouU db 0Ah                  ; DATA XREF: usage+1DB↑o
.rodata:000000000000B1A8                 db 'Note that if you use rm to remove a file, it might be possible to'
.rodata:000000000000B1A8                 db ' recover',0Ah
.rodata:000000000000B1A8                 db 'some of its contents, given sufficient expertise and/or time.  Fo'
.rodata:000000000000B1A8                 db 'r greater',0Ah
.rodata:000000000000B1A8                 db 'assurance that the contents are truly unrecoverable, consider usi'
.rodata:000000000000B1A8                 db 'ng shred.',0Ah,0
.rodata:000000000000B28A                 align 10h
.rodata:000000000000B290 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000B290                                         ; DATA XREF: usage+2CF↑o
.rodata:000000000000B290                                         ; usage+333↑o ...
.rodata:000000000000B2B8 ; const char aReportAnyTrans[]
.rodata:000000000000B2B8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000B2B8                                         ; DATA XREF: usage+427↑o
.rodata:000000000000B2B8                 db 'am/>',0Ah,0
.rodata:000000000000B2FF                 align 20h
.rodata:000000000000B300 ; const char aOrAvailableLoc[]
.rodata:000000000000B300 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000B300                                         ; DATA XREF: usage:loc_27FE↑o
.rodata:000000000000B333                 align 8
.rodata:000000000000B338 ; const char aYouMayNotAbbre[]
.rodata:000000000000B338 aYouMayNotAbbre db 'you may not abbreviate the --no-preserve-root option',0
.rodata:000000000000B338                                         ; DATA XREF: main:loc_2365↑o
.rodata:000000000000B36D                 align 10h
.rodata:000000000000B370 ; const char aUnrecognizedPr[]
.rodata:000000000000B370 aUnrecognizedPr db 'unrecognized --preserve-root argument: %s',0
.rodata:000000000000B370                                         ; DATA XREF: main+58B↑o
.rodata:000000000000B39A                 align 20h
.rodata:000000000000B3A0 ; const char msgid[]
.rodata:000000000000B3A0 msgid           db 'Try ',27h,'%s ./%s',27h,' to remove the file %s.',0Ah,0
.rodata:000000000000B3A0                                         ; DATA XREF: main+478↑o
.rodata:000000000000B3C6                 align 8
.rodata:000000000000B3C8 ; const char aFailedToGetAtt[]
.rodata:000000000000B3C8 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:000000000000B3C8                                         ; DATA XREF: main+50F↑o
.rodata:000000000000B3E7                 align 8
.rodata:000000000000B3E8 ; const char aSRemoveLuArgum_1[]
.rodata:000000000000B3E8 aSRemoveLuArgum_1 db '%s: remove %lu arguments recursively? ',0
.rodata:000000000000B3E8                                         ; DATA XREF: main:loc_226A↑o
.rodata:000000000000B40F                 align 10h
.rodata:000000000000B410 ; const char aSRemoveLuArgum_2[]
.rodata:000000000000B410 aSRemoveLuArgum_2 db '%s: remove %lu argument recursively? ',0
.rodata:000000000000B410                                         ; DATA XREF: main+4C1↑o
.rodata:000000000000B436                 align 20h
.rodata:000000000000B440 ; const char _PRETTY_FUNCTION___6977[]
.rodata:000000000000B440 __PRETTY_FUNCTION___6977 db 'main',0    ; DATA XREF: main+3B6↑o
.rodata:000000000000B445                 align 10h
.rodata:000000000000B450 interactive_types db    0               ; DATA XREF: main+186↑o
.rodata:000000000000B450                                         ; main+19F↑o
.rodata:000000000000B451                 db    0
.rodata:000000000000B452                 db    0
.rodata:000000000000B453                 db    0
.rodata:000000000000B454                 db    0
.rodata:000000000000B455                 db    0
.rodata:000000000000B456                 db    0
.rodata:000000000000B457                 db    0
.rodata:000000000000B458                 db    0
.rodata:000000000000B459                 db    0
.rodata:000000000000B45A                 db    0
.rodata:000000000000B45B                 db    0
.rodata:000000000000B45C                 db    1
.rodata:000000000000B45D                 db    0
.rodata:000000000000B45E                 db    0
.rodata:000000000000B45F                 db    0
.rodata:000000000000B460                 db    2
.rodata:000000000000B461                 db    0
.rodata:000000000000B462                 db    0
.rodata:000000000000B463                 db    0
.rodata:000000000000B464                 db    2
.rodata:000000000000B465                 db    0
.rodata:000000000000B466                 db    0
.rodata:000000000000B467                 db    0
.rodata:000000000000B468 ; const char aRemovedDirecto[]
.rodata:000000000000B468 aRemovedDirecto db 'removed directory %s',0Ah,0
.rodata:000000000000B468                                         ; DATA XREF: excise+157↑o
.rodata:000000000000B47E ; const char aRemovedS[]
.rodata:000000000000B47E aRemovedS       db 'removed %s',0Ah,0   ; DATA XREF: excise:loc_2B08↑o
.rodata:000000000000B48A ; const char aCannotRemoveS[]
.rodata:000000000000B48A aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: excise+D9↑o
.rodata:000000000000B48A                                         ; prompt:loc_2F19↑o ...
.rodata:000000000000B49B ; const char aSRemoveSS[]
.rodata:000000000000B49B aSRemoveSS      db '%s: remove %s %s? ',0
.rodata:000000000000B49B                                         ; DATA XREF: prompt:loc_3018↑o
.rodata:000000000000B4AE ; const char aFtsReadFailed[]
.rodata:000000000000B4AE aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: rm:loc_36B8↑o
.rodata:000000000000B4BE asc_B4BE        db '..',0               ; DATA XREF: rm+4AD↑o
.rodata:000000000000B4BE                                         ; rm:loc_35A8↑o ...
.rodata:000000000000B4C1 ; const char aTraversalFaile[]
.rodata:000000000000B4C1 aTraversalFaile db 'traversal failed: %s',0
.rodata:000000000000B4C1                                         ; DATA XREF: rm+B0↑o
.rodata:000000000000B4D6 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000B4D6                                         ; DATA XREF: rm+812↑o
.rodata:000000000000B4D6                                         ; emit_bug_reporting_address+14↑o
.rodata:000000000000B4EC ; const char aValidStatusS[]
.rodata:000000000000B4EC aValidStatusS   db 'VALID_STATUS (s)',0 ; DATA XREF: rm+83F↑o
.rodata:000000000000B4FD ; const char aFtsCloseFailed[]
.rodata:000000000000B4FD aFtsCloseFailed db 'fts_close failed',0 ; DATA XREF: rm:loc_36F0↑o
.rodata:000000000000B50E                 align 10h
.rodata:000000000000B510 ; const char aSDescendIntoWr[]
.rodata:000000000000B510 aSDescendIntoWr db '%s: descend into write-protected directory %s? ',0
.rodata:000000000000B510                                         ; DATA XREF: prompt+2BA↑o
.rodata:000000000000B540 ; const char aSDescendIntoDi[]
.rodata:000000000000B540 aSDescendIntoDi db '%s: descend into directory %s? ',0
.rodata:000000000000B540                                         ; DATA XREF: prompt:loc_3070↑o
.rodata:000000000000B560 ; const char aSRemoveWritePr[]
.rodata:000000000000B560 aSRemoveWritePr db '%s: remove write-protected %s %s? ',0
.rodata:000000000000B560                                         ; DATA XREF: prompt+1E4↑o
.rodata:000000000000B583                 align 8
.rodata:000000000000B588 ; const char aRefusingToRemo[]
.rodata:000000000000B588 aRefusingToRemo db 'refusing to remove %s or %s directory: skipping %s',0
.rodata:000000000000B588                                         ; DATA XREF: rm+4DC↑o
.rodata:000000000000B5BB                 align 20h
.rodata:000000000000B5C0 ; const char aItIsDangerousT_0[]
.rodata:000000000000B5C0 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s',0
.rodata:000000000000B5C0                                         ; DATA XREF: rm+7BB↑o
.rodata:000000000000B5ED                 align 10h
.rodata:000000000000B5F0 ; const char aItIsDangerousT[]
.rodata:000000000000B5F0 aItIsDangerousT db 'it is dangerous to operate recursively on %s (same as %s)',0
.rodata:000000000000B5F0                                         ; DATA XREF: rm+6E9↑o
.rodata:000000000000B62A                 align 10h
.rodata:000000000000B630 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.rodata:000000000000B630                                         ; DATA XREF: rm+718↑o
.rodata:000000000000B661                 align 8
.rodata:000000000000B668 ; const char aFailedToStatSS[]
.rodata:000000000000B668 aFailedToStatSS db 'failed to stat %s: skipping %s',0
.rodata:000000000000B668                                         ; DATA XREF: rm+56C↑o
.rodata:000000000000B687                 align 8
.rodata:000000000000B688 ; const char aSkippingSSince[]
.rodata:000000000000B688 aSkippingSSince db 'skipping %s, since it',27h,'s on a different device',0
.rodata:000000000000B688                                         ; DATA XREF: rm+5D5↑o
.rodata:000000000000B688                                         ; rm+760↑o
.rodata:000000000000B6B6                 align 8
.rodata:000000000000B6B8 ; const char aWarningCircula[]
.rodata:000000000000B6B8 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:000000000000B6B8                                         ; DATA XREF: rm+200↑o
.rodata:000000000000B6B8                 db 'This almost certainly means that you have a corrupted file system'
.rodata:000000000000B6B8                 db '.',0Ah
.rodata:000000000000B6B8                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:000000000000B6B8                 db 'The following directory is part of the cycle:',0Ah
.rodata:000000000000B6B8                 db '  %s',0Ah,0
.rodata:000000000000B772                 align 8
.rodata:000000000000B778 ; const char aUnexpectedFail[]
.rodata:000000000000B778 aUnexpectedFail db 'unexpected failure: fts_info=%d: %s',0Ah
.rodata:000000000000B778                                         ; DATA XREF: rm+7FC↑o
.rodata:000000000000B778                 db 'please report to %s',0
.rodata:000000000000B7B0 ; const char aCoreutils831Sr_0[]
.rodata:000000000000B7B0 aCoreutils831Sr_0 db '../coreutils-8.31/src/remove.c',0
.rodata:000000000000B7B0                                         ; DATA XREF: rm+838↑o
.rodata:000000000000B7CF                 align 10h
.rodata:000000000000B7D0 ; const char aAndPreserveRoo[]
.rodata:000000000000B7D0 aAndPreserveRoo db 'and --preserve-root=all is in effect',0
.rodata:000000000000B7D0                                         ; DATA XREF: rm+5FC↑o
.rodata:000000000000B7F5                 align 8
.rodata:000000000000B7F8 jpt_312C        dd offset def_312C - 0B7F8h
.rodata:000000000000B7F8                                         ; DATA XREF: rm+35↑o
.rodata:000000000000B7F8                                         ; rm+95↑r
.rodata:000000000000B7F8                 dd offset loc_32B8 - 0B7F8h ; jump table for switch statement
.rodata:000000000000B7F8                 dd offset loc_3280 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset def_312C - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_3130 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset def_312C - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B7F8                 dd offset loc_31F0 - 0B7F8h
.rodata:000000000000B830 ; const char _PRETTY_FUNCTION___7067[3]
.rodata:000000000000B830 __PRETTY_FUNCTION___7067 db 'rm',0      ; DATA XREF: rm:loc_38C1↑o
.rodata:000000000000B833 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000B838 ; const char aInvalidArgumen[]
.rodata:000000000000B838 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000B838                                         ; DATA XREF: argmatch_invalid:loc_3A80↑o
.rodata:000000000000B853 ; const char aAmbiguousArgum[]
.rodata:000000000000B853 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000B853                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000B870 ; const char aValidArguments[]
.rodata:000000000000B870 aValidArguments db 'Valid arguments are:',0
.rodata:000000000000B870                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000B885 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000B885                 db '  - %s',0
.rodata:000000000000B88D aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000B88D                                         ; close_stdin+F2↑o ...
.rodata:000000000000B892 ; const char aErrorClosingFi[]
.rodata:000000000000B892 aErrorClosingFi db 'error closing file',0
.rodata:000000000000B892                                         ; DATA XREF: close_stdin:loc_3CE8↑o
.rodata:000000000000B8A5 ; const char format[]
.rodata:000000000000B8A5 format          db '%s: %s',0           ; DATA XREF: close_stdin+8D↑o
.rodata:000000000000B8A5                                         ; close_stdout+6C↑o
.rodata:000000000000B8AC ; const char aWriteError[]
.rodata:000000000000B8AC aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3E03↑o
.rodata:000000000000B8B8 ; const char aRegularEmptyFi[]
.rodata:000000000000B8B8 aRegularEmptyFi db 'regular empty file',0
.rodata:000000000000B8B8                                         ; DATA XREF: file_type+67↑o
.rodata:000000000000B8CB ; const char aRegularFile[]
.rodata:000000000000B8CB aRegularFile    db 'regular file',0     ; DATA XREF: file_type:loc_3F98↑o
.rodata:000000000000B8D8 ; const char aDirectory[]
.rodata:000000000000B8D8 aDirectory      db 'directory',0        ; DATA XREF: file_type:loc_3FD0↑o
.rodata:000000000000B8E2 ; const char aSymbolicLink[]
.rodata:000000000000B8E2 aSymbolicLink   db 'symbolic link',0    ; DATA XREF: file_type:loc_3FB0↑o
.rodata:000000000000B8F0 ; const char aBlockSpecialFi[]
.rodata:000000000000B8F0 aBlockSpecialFi db 'block special file',0
.rodata:000000000000B8F0                                         ; DATA XREF: file_type:loc_3FE0↑o
.rodata:000000000000B903 ; const char aCharacterSpeci[]
.rodata:000000000000B903 aCharacterSpeci db 'character special file',0
.rodata:000000000000B903                                         ; DATA XREF: file_type:loc_3FF0↑o
.rodata:000000000000B91A ; const char aFifo[]
.rodata:000000000000B91A aFifo           db 'fifo',0             ; DATA XREF: file_type:loc_4000↑o
.rodata:000000000000B91F ; const char aSocket[]
.rodata:000000000000B91F aSocket         db 'socket',0           ; DATA XREF: file_type:loc_3FC0↑o
.rodata:000000000000B926 ; const char aWeirdFile[]
.rodata:000000000000B926 aWeirdFile      db 'weird file',0       ; DATA XREF: file_type+4E↑o
.rodata:000000000000B931                 align 8
.rodata:000000000000B938 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000B938                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000B970 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000B970                                         ; main+4FE↑o ...
.rodata:000000000000B978 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000B97C unk_B97C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000B97D                 db  80h
.rodata:000000000000B97E                 db  98h
.rodata:000000000000B97F                 db    0
.rodata:000000000000B980 unk_B980        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000B981                 db  80h
.rodata:000000000000B982                 db  99h
.rodata:000000000000B983                 db    0
.rodata:000000000000B984 unk_B984        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000B985                 db    7
.rodata:000000000000B986                 db  65h ; e
.rodata:000000000000B987                 db    0
.rodata:000000000000B988 unk_B988        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000B989                 db 0AFh
.rodata:000000000000B98A                 db    0
.rodata:000000000000B98B unk_B98B        db  22h ; "             ; DATA XREF: gettext_quote:loc_41F0↑o
.rodata:000000000000B98B                                         ; quotearg_buffer_restyled:loc_4FAB↑o ...
.rodata:000000000000B98C                 db    0
.rodata:000000000000B98D ; const char asc_B98D[2]
.rodata:000000000000B98D asc_B98D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000B98D                                         ; quotearg_buffer_restyled:loc_4373↑o ...
.rodata:000000000000B98F ; const char asc_B98F[2]
.rodata:000000000000B98F asc_B98F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000B98F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000B991 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000B999 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020EB68↓o
.rodata:000000000000B99F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020EB70↓o
.rodata:000000000000B9AC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020EB78↓o
.rodata:000000000000B9AC                                         ; .data.rel.ro:000000000020EB98↓o
.rodata:000000000000B9B9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000B9B9                                         ; DATA XREF: .data.rel.ro:000000000020EB80↓o
.rodata:000000000000B9B9                                         ; .data.rel.ro:000000000020E9C0↓o
.rodata:000000000000B9CD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020EB90↓o
.rodata:000000000000B9D5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020EBA8↓o
.rodata:000000000000B9DD                 align 20h
.rodata:000000000000B9E0 jpt_4351        dd offset loc_50FA - 0B9E0h
.rodata:000000000000B9E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000B9E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000B9E0                 dd offset loc_4353 - 0B9E0h ; jump table for switch statement
.rodata:000000000000B9E0                 dd offset loc_5328 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_5134 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_4F24 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_4F80 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_4FD5 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_501A - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_5054 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_5054 - 0B9E0h
.rodata:000000000000B9E0                 dd offset loc_5054 - 0B9E0h
.rodata:000000000000BA0C jpt_44AE        dd offset loc_46D0 - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000BA0C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch ; jump table for switch statement
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset loc_4710 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4618 - 0BA0Ch, offset loc_45D8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_47A0 - 0BA0Ch, offset loc_4790 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4780 - 0BA0Ch, offset loc_4770 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset def_44AE - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4760 - 0BA0Ch, offset loc_4750 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_4720 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_45B3 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_4750 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_4750 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_4750 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_4583 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset def_44AE - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_4750 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4628 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_46F8 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_46F8 - 0BA0Ch, offset loc_44B3 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4750 - 0BA0Ch, offset loc_44B3 - 0BA0Ch
.rodata:000000000000BA0C                 dd offset loc_4720 - 0BA0Ch
.rodata:000000000000BC08 jpt_483A        dd offset loc_48A0 - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000BC08                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h ; jump table for switch statement
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset loc_4890 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_49E0 - 0BC08h, offset loc_49C8 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4878 - 0BC08h, offset loc_49B8 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4860 - 0BC08h, offset loc_49A0 - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset def_483A - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4988 - 0BC08h, offset loc_4970 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4958 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_45B0 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4970 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4970 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4970 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4580 - 0BC08h
.rodata:000000000000BC08                 dd offset def_483A - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4970 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4840 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_4940 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4940 - 0BC08h, offset loc_44B0 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4970 - 0BC08h, offset loc_44B0 - 0BC08h
.rodata:000000000000BC08                 dd offset loc_4958 - 0BC08h
.rodata:000000000000BE04                 align 20h
.rodata:000000000000BE20                 public quoting_style_vals
.rodata:000000000000BE20 quoting_style_vals db    0
.rodata:000000000000BE21                 db    0
.rodata:000000000000BE22                 db    0
.rodata:000000000000BE23                 db    0
.rodata:000000000000BE24                 db    1
.rodata:000000000000BE25                 db    0
.rodata:000000000000BE26                 db    0
.rodata:000000000000BE27                 db    0
.rodata:000000000000BE28                 db    2
.rodata:000000000000BE29                 db    0
.rodata:000000000000BE2A                 db    0
.rodata:000000000000BE2B                 db    0
.rodata:000000000000BE2C                 db    3
.rodata:000000000000BE2D                 db    0
.rodata:000000000000BE2E                 db    0
.rodata:000000000000BE2F                 db    0
.rodata:000000000000BE30                 db    4
.rodata:000000000000BE31                 db    0
.rodata:000000000000BE32                 db    0
.rodata:000000000000BE33                 db    0
.rodata:000000000000BE34                 db    5
.rodata:000000000000BE35                 db    0
.rodata:000000000000BE36                 db    0
.rodata:000000000000BE37                 db    0
.rodata:000000000000BE38                 db    6
.rodata:000000000000BE39                 db    0
.rodata:000000000000BE3A                 db    0
.rodata:000000000000BE3B                 db    0
.rodata:000000000000BE3C                 db    7
.rodata:000000000000BE3D                 db    0
.rodata:000000000000BE3E                 db    0
.rodata:000000000000BE3F                 db    0
.rodata:000000000000BE40                 db    8
.rodata:000000000000BE41                 db    0
.rodata:000000000000BE42                 db    0
.rodata:000000000000BE43                 db    0
.rodata:000000000000BE44                 db    9
.rodata:000000000000BE45                 db    0
.rodata:000000000000BE46                 db    0
.rodata:000000000000BE47                 db    0
.rodata:000000000000BE48 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000BE54 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000BE5B ; const char aC_0[]
.rodata:000000000000BE5B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_5F1C↑o
.rodata:000000000000BE5F ; const char aWrittenByS[]
.rodata:000000000000BE5F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000BE5F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000BE6F ; const char aWrittenBySAndS[]
.rodata:000000000000BE6F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000BE6F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000BE86 ; const char aWrittenBySSAnd[]
.rodata:000000000000BE86 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000BE86                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000BEA2 ; const char aReportBugsToS[]
.rodata:000000000000BEA2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000BEA2                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000BEB7 ; const char aSHomePageS[]
.rodata:000000000000BEB7 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000BEB7                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000BECB                 align 10h
.rodata:000000000000BED0 ; const char aLicenseGplv3Gn[]
.rodata:000000000000BED0 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000BED0                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000BED0                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000BED0                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000BED0                 db '.',0Ah
.rodata:000000000000BED0                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000BED0                 db 0Ah,0
.rodata:000000000000BF9C                 align 20h
.rodata:000000000000BFA0 ; const char aWrittenBySSSAn[]
.rodata:000000000000BFA0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BFA0                                         ; DATA XREF: version_etc_arn:loc_6170↑o
.rodata:000000000000BFA0                 db 'and %s.',0Ah,0
.rodata:000000000000BFC0 ; const char aWrittenBySSSSA[]
.rodata:000000000000BFC0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BFC0                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000BFC0                 db '%s, and %s.',0Ah,0
.rodata:000000000000BFE4                 align 8
.rodata:000000000000BFE8 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000BFE8 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BFE8                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000BFE8                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000C010 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000C010 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C010                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000C010                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000C03C                 align 20h
.rodata:000000000000C040 ; const char aWrittenBySSSSS[]
.rodata:000000000000C040 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C040                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000C040                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C040                 db 'and %s.',0Ah,0
.rodata:000000000000C070 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000C070 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C070                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000C070                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C070                 db '%s, and %s.',0Ah,0
.rodata:000000000000C0A4                 align 8
.rodata:000000000000C0A8 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C0A8                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000C0A8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C0A8                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000C0E4                 align 8
.rodata:000000000000C0E8 ; const char aGeneralHelpUsi[]
.rodata:000000000000C0E8 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000C0E8                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000C0E8                 db 0
.rodata:000000000000C129                 align 4
.rodata:000000000000C12C jpt_5F84        dd offset loc_6006 - 0C12Ch
.rodata:000000000000C12C                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000C12C                                         ; version_etc_arn+9D↑r
.rodata:000000000000C12C                 dd offset loc_6098 - 0C12Ch ; jump table for switch statement
.rodata:000000000000C12C                 dd offset loc_60D8 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_6120 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_6170 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_61C8 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_61F8 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_6260 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_5F90 - 0C12Ch
.rodata:000000000000C12C                 dd offset loc_6040 - 0C12Ch
.rodata:000000000000C154                 align 20h
.rodata:000000000000C160                 public version_etc_copyright
.rodata:000000000000C160 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000C160                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000C18F ; const char aMemoryExhauste[]
.rodata:000000000000C18F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000C1A0 ; const char aCoreutils831Li[]
.rodata:000000000000C1A0 aCoreutils831Li db '../coreutils-8.31/lib/xfts.c',0
.rodata:000000000000C1A0                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000000C1BD ; const char aErrnoEinval[]
.rodata:000000000000C1BD aErrnoEinval    db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:000000000000C1CD                 align 10h
.rodata:000000000000C1D0 ; const char _PRETTY_FUNCTION___3434[]
.rodata:000000000000C1D0 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:000000000000C1D0                                         ; DATA XREF: xfts_open:loc_6800↑o
.rodata:000000000000C1DA                 align 20h
.rodata:000000000000C1E0 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:000000000000C1E0                                         ; fts_build:loc_7F76↑o
.rodata:000000000000C1E1                 db  10h
.rodata:000000000000C1E2                 db    0
.rodata:000000000000C1E3                 db    0
.rodata:000000000000C1E4                 db    0
.rodata:000000000000C1E5                 db  20h
.rodata:000000000000C1E6                 db    0
.rodata:000000000000C1E7                 db    0
.rodata:000000000000C1E8                 db    0
.rodata:000000000000C1E9                 db    0
.rodata:000000000000C1EA                 db    0
.rodata:000000000000C1EB                 db    0
.rodata:000000000000C1EC                 db    0
.rodata:000000000000C1ED                 db  40h ; @
.rodata:000000000000C1EE                 db    0
.rodata:000000000000C1EF                 db    0
.rodata:000000000000C1F0                 db    0
.rodata:000000000000C1F1                 db    0
.rodata:000000000000C1F2                 db    0
.rodata:000000000000C1F3                 db    0
.rodata:000000000000C1F4                 db    0
.rodata:000000000000C1F5                 db  60h ; `
.rodata:000000000000C1F6                 db    0
.rodata:000000000000C1F7                 db    0
.rodata:000000000000C1F8                 db    0
.rodata:000000000000C1F9                 db    0
.rodata:000000000000C1FA                 db    0
.rodata:000000000000C1FB                 db    0
.rodata:000000000000C1FC                 db    0
.rodata:000000000000C1FD                 db  80h
.rodata:000000000000C1FE                 db    0
.rodata:000000000000C1FF                 db    0
.rodata:000000000000C200                 db    0
.rodata:000000000000C201                 db    0
.rodata:000000000000C202                 db    0
.rodata:000000000000C203                 db    0
.rodata:000000000000C204                 db    0
.rodata:000000000000C205                 db 0A0h
.rodata:000000000000C206                 db    0
.rodata:000000000000C207                 db    0
.rodata:000000000000C208                 db    0
.rodata:000000000000C209                 db    0
.rodata:000000000000C20A                 db    0
.rodata:000000000000C20B                 db    0
.rodata:000000000000C20C                 db    0
.rodata:000000000000C20D                 db 0C0h
.rodata:000000000000C20E                 db    0
.rodata:000000000000C20F                 db    0
.rodata:000000000000C210 ; const char aCoreutils831Li_0[]
.rodata:000000000000C210 aCoreutils831Li_0 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:000000000000C210                                         ; DATA XREF: cycle_check+6E↑o
.rodata:000000000000C234 ; const char aStateMagic9827[]
.rodata:000000000000C234 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:000000000000C234                                         ; DATA XREF: cycle_check+75↑o
.rodata:000000000000C24C                 align 10h
.rodata:000000000000C250 ; const char _PRETTY_FUNCTION___3994[]
.rodata:000000000000C250 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:000000000000C250                                         ; DATA XREF: cycle_check:loc_8F67↑o
.rodata:000000000000C25C aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000C25E aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_9040↑o
.rodata:000000000000C264 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000C264                                         ; DATA XREF: hash_print_statistics:loc_9575↑o
.rodata:000000000000C27C aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000C27C                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000C294 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000C294                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000C2AC                 align 10h
.rodata:000000000000C2B0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000C2B0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000C2D1                 align 20h
.rodata:000000000000C2E0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000C2E0                                         ; hash_initialize:loc_99E0↑o
.rodata:000000000000C2E1                 db    0
.rodata:000000000000C2E2                 db    0
.rodata:000000000000C2E3                 db    0
.rodata:000000000000C2E4                 db    0
.rodata:000000000000C2E5                 db    0
.rodata:000000000000C2E6                 db  80h
.rodata:000000000000C2E7                 db  3Fh ; ?
.rodata:000000000000C2E8                 db 0CDh
.rodata:000000000000C2E9                 db 0CCh
.rodata:000000000000C2EA                 db  4Ch ; L
.rodata:000000000000C2EB                 db  3Fh ; ?
.rodata:000000000000C2EC                 db 0F4h
.rodata:000000000000C2ED                 db 0FDh
.rodata:000000000000C2EE                 db 0B4h
.rodata:000000000000C2EF                 db  3Fh ; ?
.rodata:000000000000C2F0                 db    0
.rodata:000000000000C2F1                 db    0
.rodata:000000000000C2F2                 db    0
.rodata:000000000000C2F3                 db    0
.rodata:000000000000C2F4 dword_C2F4      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000C2F4                                         ; check_tuning+4A↑r
.rodata:000000000000C2F8 dword_C2F8      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000C2FC dword_C2FC      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000C300 dword_C300      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000C304 dword_C304      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000C308 dword_C308      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000C30C dword_C30C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000C30C                                         ; hash_rehash+40↑r ...
.rodata:000000000000C310 dword_C310      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000C310                                         ; hash_initialize+150↑r ...
.rodata:000000000000C314                 align 8
.rodata:000000000000C318 qword_C318      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000C318                                         ; hash_print_statistics+11F↑r
.rodata:000000000000C320 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000C320                                         ; locale_charset:loc_A420↑o
.rodata:000000000000C320 _rodata         ends
.rodata:000000000000C320
LOAD:000000000000C326 ; ===========================================================================
LOAD:000000000000C326
LOAD:000000000000C326 ; Segment type: Pure code
LOAD:000000000000C326 ; Segment permissions: Read/Execute
LOAD:000000000000C326 LOAD            segment byte public 'CODE' use64
LOAD:000000000000C326                 assume cs:LOAD
LOAD:000000000000C326                 ;org 0C326h
LOAD:000000000000C326                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000C326                 align 8
LOAD:000000000000C326 LOAD            ends
LOAD:000000000000C326
.eh_frame_hdr:000000000000C328 ; ===========================================================================
.eh_frame_hdr:000000000000C328
.eh_frame_hdr:000000000000C328 ; Segment type: Pure data
.eh_frame_hdr:000000000000C328 ; Segment permissions: Read
.eh_frame_hdr:000000000000C328 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000C328                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000C328                 ;org 0C328h
.eh_frame_hdr:000000000000C328 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000C329                 db  1Bh
.eh_frame_hdr:000000000000C32A                 db    3
.eh_frame_hdr:000000000000C32B                 db  3Bh ; ;
.eh_frame_hdr:000000000000C32C                 db 0FCh
.eh_frame_hdr:000000000000C32D                 db    4
.eh_frame_hdr:000000000000C32E                 db    0
.eh_frame_hdr:000000000000C32F                 db    0
.eh_frame_hdr:000000000000C330                 db  9Eh
.eh_frame_hdr:000000000000C331                 db    0
.eh_frame_hdr:000000000000C332                 db    0
.eh_frame_hdr:000000000000C333                 db    0
.eh_frame_hdr:000000000000C334                 db  58h ; X
.eh_frame_hdr:000000000000C335                 db  56h ; V
.eh_frame_hdr:000000000000C336                 db 0FFh
.eh_frame_hdr:000000000000C337                 db 0FFh
.eh_frame_hdr:000000000000C338                 db  48h ; H
.eh_frame_hdr:000000000000C339                 db    5
.eh_frame_hdr:000000000000C33A                 db    0
.eh_frame_hdr:000000000000C33B                 db    0
.eh_frame_hdr:000000000000C33C                 db  78h ; x
.eh_frame_hdr:000000000000C33D                 db  5Ah ; Z
.eh_frame_hdr:000000000000C33E                 db 0FFh
.eh_frame_hdr:000000000000C33F                 db 0FFh
.eh_frame_hdr:000000000000C340                 db  70h ; p
.eh_frame_hdr:000000000000C341                 db    5
.eh_frame_hdr:000000000000C342                 db    0
.eh_frame_hdr:000000000000C343                 db    0
.eh_frame_hdr:000000000000C344                 db  88h
.eh_frame_hdr:000000000000C345                 db  5Ah ; Z
.eh_frame_hdr:000000000000C346                 db 0FFh
.eh_frame_hdr:000000000000C347                 db 0FFh
.eh_frame_hdr:000000000000C348                 db 0B4h
.eh_frame_hdr:000000000000C349                 db    5
.eh_frame_hdr:000000000000C34A                 db    0
.eh_frame_hdr:000000000000C34B                 db    0
.eh_frame_hdr:000000000000C34C                 db  68h ; h
.eh_frame_hdr:000000000000C34D                 db  60h ; `
.eh_frame_hdr:000000000000C34E                 db 0FFh
.eh_frame_hdr:000000000000C34F                 db 0FFh
.eh_frame_hdr:000000000000C350                 db  18h
.eh_frame_hdr:000000000000C351                 db    5
.eh_frame_hdr:000000000000C352                 db    0
.eh_frame_hdr:000000000000C353                 db    0
.eh_frame_hdr:000000000000C354                 db  78h ; x
.eh_frame_hdr:000000000000C355                 db  61h ; a
.eh_frame_hdr:000000000000C356                 db 0FFh
.eh_frame_hdr:000000000000C357                 db 0FFh
.eh_frame_hdr:000000000000C358                 db  88h
.eh_frame_hdr:000000000000C359                 db    5
.eh_frame_hdr:000000000000C35A                 db    0
.eh_frame_hdr:000000000000C35B                 db    0
.eh_frame_hdr:000000000000C35C                 db 0C8h
.eh_frame_hdr:000000000000C35D                 db  65h ; e
.eh_frame_hdr:000000000000C35E                 db 0FFh
.eh_frame_hdr:000000000000C35F                 db 0FFh
.eh_frame_hdr:000000000000C360                 db  10h
.eh_frame_hdr:000000000000C361                 db    6
.eh_frame_hdr:000000000000C362                 db    0
.eh_frame_hdr:000000000000C363                 db    0
.eh_frame_hdr:000000000000C364                 db  18h
.eh_frame_hdr:000000000000C365                 db  68h ; h
.eh_frame_hdr:000000000000C366                 db 0FFh
.eh_frame_hdr:000000000000C367                 db 0FFh
.eh_frame_hdr:000000000000C368                 db  4Ch ; L
.eh_frame_hdr:000000000000C369                 db    6
.eh_frame_hdr:000000000000C36A                 db    0
.eh_frame_hdr:000000000000C36B                 db    0
.eh_frame_hdr:000000000000C36C                 db  98h
.eh_frame_hdr:000000000000C36D                 db  68h ; h
.eh_frame_hdr:000000000000C36E                 db 0FFh
.eh_frame_hdr:000000000000C36F                 db 0FFh
.eh_frame_hdr:000000000000C370                 db  70h ; p
.eh_frame_hdr:000000000000C371                 db    6
.eh_frame_hdr:000000000000C372                 db    0
.eh_frame_hdr:000000000000C373                 db    0
.eh_frame_hdr:000000000000C374                 db  68h ; h
.eh_frame_hdr:000000000000C375                 db  6Dh ; m
.eh_frame_hdr:000000000000C376                 db 0FFh
.eh_frame_hdr:000000000000C377                 db 0FFh
.eh_frame_hdr:000000000000C378                 db 0C0h
.eh_frame_hdr:000000000000C379                 db    6
.eh_frame_hdr:000000000000C37A                 db    0
.eh_frame_hdr:000000000000C37B                 db    0
.eh_frame_hdr:000000000000C37C                 db 0C8h
.eh_frame_hdr:000000000000C37D                 db  75h ; u
.eh_frame_hdr:000000000000C37E                 db 0FFh
.eh_frame_hdr:000000000000C37F                 db 0FFh
.eh_frame_hdr:000000000000C380                 db  10h
.eh_frame_hdr:000000000000C381                 db    7
.eh_frame_hdr:000000000000C382                 db    0
.eh_frame_hdr:000000000000C383                 db    0
.eh_frame_hdr:000000000000C384                 db 0D8h
.eh_frame_hdr:000000000000C385                 db  75h ; u
.eh_frame_hdr:000000000000C386                 db 0FFh
.eh_frame_hdr:000000000000C387                 db 0FFh
.eh_frame_hdr:000000000000C388                 db  24h ; $
.eh_frame_hdr:000000000000C389                 db    7
.eh_frame_hdr:000000000000C38A                 db    0
.eh_frame_hdr:000000000000C38B                 db    0
.eh_frame_hdr:000000000000C38C                 db 0F8h
.eh_frame_hdr:000000000000C38D                 db  76h ; v
.eh_frame_hdr:000000000000C38E                 db 0FFh
.eh_frame_hdr:000000000000C38F                 db 0FFh
.eh_frame_hdr:000000000000C390                 db  70h ; p
.eh_frame_hdr:000000000000C391                 db    7
.eh_frame_hdr:000000000000C392                 db    0
.eh_frame_hdr:000000000000C393                 db    0
.eh_frame_hdr:000000000000C394                 db  78h ; x
.eh_frame_hdr:000000000000C395                 db  77h ; w
.eh_frame_hdr:000000000000C396                 db 0FFh
.eh_frame_hdr:000000000000C397                 db 0FFh
.eh_frame_hdr:000000000000C398                 db  9Ch
.eh_frame_hdr:000000000000C399                 db    7
.eh_frame_hdr:000000000000C39A                 db    0
.eh_frame_hdr:000000000000C39B                 db    0
.eh_frame_hdr:000000000000C39C                 db  98h
.eh_frame_hdr:000000000000C39D                 db  78h ; x
.eh_frame_hdr:000000000000C39E                 db 0FFh
.eh_frame_hdr:000000000000C39F                 db 0FFh
.eh_frame_hdr:000000000000C3A0                 db 0FCh
.eh_frame_hdr:000000000000C3A1                 db    7
.eh_frame_hdr:000000000000C3A2                 db    0
.eh_frame_hdr:000000000000C3A3                 db    0
.eh_frame_hdr:000000000000C3A4                 db    8
.eh_frame_hdr:000000000000C3A5                 db  79h ; y
.eh_frame_hdr:000000000000C3A6                 db 0FFh
.eh_frame_hdr:000000000000C3A7                 db 0FFh
.eh_frame_hdr:000000000000C3A8                 db  48h ; H
.eh_frame_hdr:000000000000C3A9                 db    8
.eh_frame_hdr:000000000000C3AA                 db    0
.eh_frame_hdr:000000000000C3AB                 db    0
.eh_frame_hdr:000000000000C3AC                 db  58h ; X
.eh_frame_hdr:000000000000C3AD                 db  79h ; y
.eh_frame_hdr:000000000000C3AE                 db 0FFh
.eh_frame_hdr:000000000000C3AF                 db 0FFh
.eh_frame_hdr:000000000000C3B0                 db  88h
.eh_frame_hdr:000000000000C3B1                 db    8
.eh_frame_hdr:000000000000C3B2                 db    0
.eh_frame_hdr:000000000000C3B3                 db    0
.eh_frame_hdr:000000000000C3B4                 db  68h ; h
.eh_frame_hdr:000000000000C3B5                 db  79h ; y
.eh_frame_hdr:000000000000C3B6                 db 0FFh
.eh_frame_hdr:000000000000C3B7                 db 0FFh
.eh_frame_hdr:000000000000C3B8                 db  9Ch
.eh_frame_hdr:000000000000C3B9                 db    8
.eh_frame_hdr:000000000000C3BA                 db    0
.eh_frame_hdr:000000000000C3BB                 db    0
.eh_frame_hdr:000000000000C3BC                 db  78h ; x
.eh_frame_hdr:000000000000C3BD                 db  7Ah ; z
.eh_frame_hdr:000000000000C3BE                 db 0FFh
.eh_frame_hdr:000000000000C3BF                 db 0FFh
.eh_frame_hdr:000000000000C3C0                 db 0D8h
.eh_frame_hdr:000000000000C3C1                 db    8
.eh_frame_hdr:000000000000C3C2                 db    0
.eh_frame_hdr:000000000000C3C3                 db    0
.eh_frame_hdr:000000000000C3C4                 db  88h
.eh_frame_hdr:000000000000C3C5                 db  7Ah ; z
.eh_frame_hdr:000000000000C3C6                 db 0FFh
.eh_frame_hdr:000000000000C3C7                 db 0FFh
.eh_frame_hdr:000000000000C3C8                 db 0ECh
.eh_frame_hdr:000000000000C3C9                 db    8
.eh_frame_hdr:000000000000C3CA                 db    0
.eh_frame_hdr:000000000000C3CB                 db    0
.eh_frame_hdr:000000000000C3CC                 db  98h
.eh_frame_hdr:000000000000C3CD                 db  7Ah ; z
.eh_frame_hdr:000000000000C3CE                 db 0FFh
.eh_frame_hdr:000000000000C3CF                 db 0FFh
.eh_frame_hdr:000000000000C3D0                 db    0
.eh_frame_hdr:000000000000C3D1                 db    9
.eh_frame_hdr:000000000000C3D2                 db    0
.eh_frame_hdr:000000000000C3D3                 db    0
.eh_frame_hdr:000000000000C3D4                 db  48h ; H
.eh_frame_hdr:000000000000C3D5                 db  7Bh ; {
.eh_frame_hdr:000000000000C3D6                 db 0FFh
.eh_frame_hdr:000000000000C3D7                 db 0FFh
.eh_frame_hdr:000000000000C3D8                 db  30h ; 0
.eh_frame_hdr:000000000000C3D9                 db    9
.eh_frame_hdr:000000000000C3DA                 db    0
.eh_frame_hdr:000000000000C3DB                 db    0
.eh_frame_hdr:000000000000C3DC                 db 0A8h
.eh_frame_hdr:000000000000C3DD                 db  7Bh ; {
.eh_frame_hdr:000000000000C3DE                 db 0FFh
.eh_frame_hdr:000000000000C3DF                 db 0FFh
.eh_frame_hdr:000000000000C3E0                 db  44h ; D
.eh_frame_hdr:000000000000C3E1                 db    9
.eh_frame_hdr:000000000000C3E2                 db    0
.eh_frame_hdr:000000000000C3E3                 db    0
.eh_frame_hdr:000000000000C3E4                 db 0F8h
.eh_frame_hdr:000000000000C3E5                 db  7Bh ; {
.eh_frame_hdr:000000000000C3E6                 db 0FFh
.eh_frame_hdr:000000000000C3E7                 db 0FFh
.eh_frame_hdr:000000000000C3E8                 db  70h ; p
.eh_frame_hdr:000000000000C3E9                 db    9
.eh_frame_hdr:000000000000C3EA                 db    0
.eh_frame_hdr:000000000000C3EB                 db    0
.eh_frame_hdr:000000000000C3EC                 db 0E8h
.eh_frame_hdr:000000000000C3ED                 db  7Ch ; |
.eh_frame_hdr:000000000000C3EE                 db 0FFh
.eh_frame_hdr:000000000000C3EF                 db 0FFh
.eh_frame_hdr:000000000000C3F0                 db  88h
.eh_frame_hdr:000000000000C3F1                 db    9
.eh_frame_hdr:000000000000C3F2                 db    0
.eh_frame_hdr:000000000000C3F3                 db    0
.eh_frame_hdr:000000000000C3F4                 db    8
.eh_frame_hdr:000000000000C3F5                 db  7Dh ; }
.eh_frame_hdr:000000000000C3F6                 db 0FFh
.eh_frame_hdr:000000000000C3F7                 db 0FFh
.eh_frame_hdr:000000000000C3F8                 db 0A8h
.eh_frame_hdr:000000000000C3F9                 db    9
.eh_frame_hdr:000000000000C3FA                 db    0
.eh_frame_hdr:000000000000C3FB                 db    0
.eh_frame_hdr:000000000000C3FC                 db    8
.eh_frame_hdr:000000000000C3FD                 db  7Eh ; ~
.eh_frame_hdr:000000000000C3FE                 db 0FFh
.eh_frame_hdr:000000000000C3FF                 db 0FFh
.eh_frame_hdr:000000000000C400                 db 0F8h
.eh_frame_hdr:000000000000C401                 db    9
.eh_frame_hdr:000000000000C402                 db    0
.eh_frame_hdr:000000000000C403                 db    0
.eh_frame_hdr:000000000000C404                 db 0A8h
.eh_frame_hdr:000000000000C405                 db  7Eh ; ~
.eh_frame_hdr:000000000000C406                 db 0FFh
.eh_frame_hdr:000000000000C407                 db 0FFh
.eh_frame_hdr:000000000000C408                 db  18h
.eh_frame_hdr:000000000000C409                 db  0Ah
.eh_frame_hdr:000000000000C40A                 db    0
.eh_frame_hdr:000000000000C40B                 db    0
.eh_frame_hdr:000000000000C40C                 db  98h
.eh_frame_hdr:000000000000C40D                 db  7Fh ; 
.eh_frame_hdr:000000000000C40E                 db 0FFh
.eh_frame_hdr:000000000000C40F                 db 0FFh
.eh_frame_hdr:000000000000C410                 db  5Ch ; \
.eh_frame_hdr:000000000000C411                 db  0Ah
.eh_frame_hdr:000000000000C412                 db    0
.eh_frame_hdr:000000000000C413                 db    0
.eh_frame_hdr:000000000000C414                 db 0D8h
.eh_frame_hdr:000000000000C415                 db  91h
.eh_frame_hdr:000000000000C416                 db 0FFh
.eh_frame_hdr:000000000000C417                 db 0FFh
.eh_frame_hdr:000000000000C418                 db 0D4h
.eh_frame_hdr:000000000000C419                 db  0Ah
.eh_frame_hdr:000000000000C41A                 db    0
.eh_frame_hdr:000000000000C41B                 db    0
.eh_frame_hdr:000000000000C41C                 db  88h
.eh_frame_hdr:000000000000C41D                 db  93h
.eh_frame_hdr:000000000000C41E                 db 0FFh
.eh_frame_hdr:000000000000C41F                 db 0FFh
.eh_frame_hdr:000000000000C420                 db  40h ; @
.eh_frame_hdr:000000000000C421                 db  0Bh
.eh_frame_hdr:000000000000C422                 db    0
.eh_frame_hdr:000000000000C423                 db    0
.eh_frame_hdr:000000000000C424                 db 0C8h
.eh_frame_hdr:000000000000C425                 db  93h
.eh_frame_hdr:000000000000C426                 db 0FFh
.eh_frame_hdr:000000000000C427                 db 0FFh
.eh_frame_hdr:000000000000C428                 db  6Ch ; l
.eh_frame_hdr:000000000000C429                 db  0Bh
.eh_frame_hdr:000000000000C42A                 db    0
.eh_frame_hdr:000000000000C42B                 db    0
.eh_frame_hdr:000000000000C42C                 db 0E8h
.eh_frame_hdr:000000000000C42D                 db  93h
.eh_frame_hdr:000000000000C42E                 db 0FFh
.eh_frame_hdr:000000000000C42F                 db 0FFh
.eh_frame_hdr:000000000000C430                 db  80h
.eh_frame_hdr:000000000000C431                 db  0Bh
.eh_frame_hdr:000000000000C432                 db    0
.eh_frame_hdr:000000000000C433                 db    0
.eh_frame_hdr:000000000000C434                 db    8
.eh_frame_hdr:000000000000C435                 db  94h
.eh_frame_hdr:000000000000C436                 db 0FFh
.eh_frame_hdr:000000000000C437                 db 0FFh
.eh_frame_hdr:000000000000C438                 db  94h
.eh_frame_hdr:000000000000C439                 db  0Bh
.eh_frame_hdr:000000000000C43A                 db    0
.eh_frame_hdr:000000000000C43B                 db    0
.eh_frame_hdr:000000000000C43C                 db  48h ; H
.eh_frame_hdr:000000000000C43D                 db  94h
.eh_frame_hdr:000000000000C43E                 db 0FFh
.eh_frame_hdr:000000000000C43F                 db 0FFh
.eh_frame_hdr:000000000000C440                 db 0A8h
.eh_frame_hdr:000000000000C441                 db  0Bh
.eh_frame_hdr:000000000000C442                 db    0
.eh_frame_hdr:000000000000C443                 db    0
.eh_frame_hdr:000000000000C444                 db  68h ; h
.eh_frame_hdr:000000000000C445                 db  94h
.eh_frame_hdr:000000000000C446                 db 0FFh
.eh_frame_hdr:000000000000C447                 db 0FFh
.eh_frame_hdr:000000000000C448                 db 0BCh
.eh_frame_hdr:000000000000C449                 db  0Bh
.eh_frame_hdr:000000000000C44A                 db    0
.eh_frame_hdr:000000000000C44B                 db    0
.eh_frame_hdr:000000000000C44C                 db  98h
.eh_frame_hdr:000000000000C44D                 db  94h
.eh_frame_hdr:000000000000C44E                 db 0FFh
.eh_frame_hdr:000000000000C44F                 db 0FFh
.eh_frame_hdr:000000000000C450                 db 0D0h
.eh_frame_hdr:000000000000C451                 db  0Bh
.eh_frame_hdr:000000000000C452                 db    0
.eh_frame_hdr:000000000000C453                 db    0
.eh_frame_hdr:000000000000C454                 db  18h
.eh_frame_hdr:000000000000C455                 db  95h
.eh_frame_hdr:000000000000C456                 db 0FFh
.eh_frame_hdr:000000000000C457                 db 0FFh
.eh_frame_hdr:000000000000C458                 db  24h ; $
.eh_frame_hdr:000000000000C459                 db  0Ch
.eh_frame_hdr:000000000000C45A                 db    0
.eh_frame_hdr:000000000000C45B                 db    0
.eh_frame_hdr:000000000000C45C                 db    8
.eh_frame_hdr:000000000000C45D                 db  96h
.eh_frame_hdr:000000000000C45E                 db 0FFh
.eh_frame_hdr:000000000000C45F                 db 0FFh
.eh_frame_hdr:000000000000C460                 db  90h
.eh_frame_hdr:000000000000C461                 db  0Ch
.eh_frame_hdr:000000000000C462                 db    0
.eh_frame_hdr:000000000000C463                 db    0
.eh_frame_hdr:000000000000C464                 db  18h
.eh_frame_hdr:000000000000C465                 db  96h
.eh_frame_hdr:000000000000C466                 db 0FFh
.eh_frame_hdr:000000000000C467                 db 0FFh
.eh_frame_hdr:000000000000C468                 db 0A4h
.eh_frame_hdr:000000000000C469                 db  0Ch
.eh_frame_hdr:000000000000C46A                 db    0
.eh_frame_hdr:000000000000C46B                 db    0
.eh_frame_hdr:000000000000C46C                 db 0B8h
.eh_frame_hdr:000000000000C46D                 db  96h
.eh_frame_hdr:000000000000C46E                 db 0FFh
.eh_frame_hdr:000000000000C46F                 db 0FFh
.eh_frame_hdr:000000000000C470                 db 0D0h
.eh_frame_hdr:000000000000C471                 db  0Ch
.eh_frame_hdr:000000000000C472                 db    0
.eh_frame_hdr:000000000000C473                 db    0
.eh_frame_hdr:000000000000C474                 db 0D8h
.eh_frame_hdr:000000000000C475                 db  96h
.eh_frame_hdr:000000000000C476                 db 0FFh
.eh_frame_hdr:000000000000C477                 db 0FFh
.eh_frame_hdr:000000000000C478                 db 0E4h
.eh_frame_hdr:000000000000C479                 db  0Ch
.eh_frame_hdr:000000000000C47A                 db    0
.eh_frame_hdr:000000000000C47B                 db    0
.eh_frame_hdr:000000000000C47C                 db 0E8h
.eh_frame_hdr:000000000000C47D                 db  96h
.eh_frame_hdr:000000000000C47E                 db 0FFh
.eh_frame_hdr:000000000000C47F                 db 0FFh
.eh_frame_hdr:000000000000C480                 db 0F8h
.eh_frame_hdr:000000000000C481                 db  0Ch
.eh_frame_hdr:000000000000C482                 db    0
.eh_frame_hdr:000000000000C483                 db    0
.eh_frame_hdr:000000000000C484                 db    8
.eh_frame_hdr:000000000000C485                 db  97h
.eh_frame_hdr:000000000000C486                 db 0FFh
.eh_frame_hdr:000000000000C487                 db 0FFh
.eh_frame_hdr:000000000000C488                 db  0Ch
.eh_frame_hdr:000000000000C489                 db  0Dh
.eh_frame_hdr:000000000000C48A                 db    0
.eh_frame_hdr:000000000000C48B                 db    0
.eh_frame_hdr:000000000000C48C                 db  28h ; (
.eh_frame_hdr:000000000000C48D                 db  97h
.eh_frame_hdr:000000000000C48E                 db 0FFh
.eh_frame_hdr:000000000000C48F                 db 0FFh
.eh_frame_hdr:000000000000C490                 db  20h
.eh_frame_hdr:000000000000C491                 db  0Dh
.eh_frame_hdr:000000000000C492                 db    0
.eh_frame_hdr:000000000000C493                 db    0
.eh_frame_hdr:000000000000C494                 db 0B8h
.eh_frame_hdr:000000000000C495                 db  97h
.eh_frame_hdr:000000000000C496                 db 0FFh
.eh_frame_hdr:000000000000C497                 db 0FFh
.eh_frame_hdr:000000000000C498                 db  3Ch ; <
.eh_frame_hdr:000000000000C499                 db  0Dh
.eh_frame_hdr:000000000000C49A                 db    0
.eh_frame_hdr:000000000000C49B                 db    0
.eh_frame_hdr:000000000000C49C                 db  48h ; H
.eh_frame_hdr:000000000000C49D                 db  98h
.eh_frame_hdr:000000000000C49E                 db 0FFh
.eh_frame_hdr:000000000000C49F                 db 0FFh
.eh_frame_hdr:000000000000C4A0                 db  58h ; X
.eh_frame_hdr:000000000000C4A1                 db  0Dh
.eh_frame_hdr:000000000000C4A2                 db    0
.eh_frame_hdr:000000000000C4A3                 db    0
.eh_frame_hdr:000000000000C4A4                 db  58h ; X
.eh_frame_hdr:000000000000C4A5                 db  98h
.eh_frame_hdr:000000000000C4A6                 db 0FFh
.eh_frame_hdr:000000000000C4A7                 db 0FFh
.eh_frame_hdr:000000000000C4A8                 db  6Ch ; l
.eh_frame_hdr:000000000000C4A9                 db  0Dh
.eh_frame_hdr:000000000000C4AA                 db    0
.eh_frame_hdr:000000000000C4AB                 db    0
.eh_frame_hdr:000000000000C4AC                 db  68h ; h
.eh_frame_hdr:000000000000C4AD                 db  98h
.eh_frame_hdr:000000000000C4AE                 db 0FFh
.eh_frame_hdr:000000000000C4AF                 db 0FFh
.eh_frame_hdr:000000000000C4B0                 db  80h
.eh_frame_hdr:000000000000C4B1                 db  0Dh
.eh_frame_hdr:000000000000C4B2                 db    0
.eh_frame_hdr:000000000000C4B3                 db    0
.eh_frame_hdr:000000000000C4B4                 db    8
.eh_frame_hdr:000000000000C4B5                 db  99h
.eh_frame_hdr:000000000000C4B6                 db 0FFh
.eh_frame_hdr:000000000000C4B7                 db 0FFh
.eh_frame_hdr:000000000000C4B8                 db  9Ch
.eh_frame_hdr:000000000000C4B9                 db  0Dh
.eh_frame_hdr:000000000000C4BA                 db    0
.eh_frame_hdr:000000000000C4BB                 db    0
.eh_frame_hdr:000000000000C4BC                 db  18h
.eh_frame_hdr:000000000000C4BD                 db  99h
.eh_frame_hdr:000000000000C4BE                 db 0FFh
.eh_frame_hdr:000000000000C4BF                 db 0FFh
.eh_frame_hdr:000000000000C4C0                 db 0B0h
.eh_frame_hdr:000000000000C4C1                 db  0Dh
.eh_frame_hdr:000000000000C4C2                 db    0
.eh_frame_hdr:000000000000C4C3                 db    0
.eh_frame_hdr:000000000000C4C4                 db  38h ; 8
.eh_frame_hdr:000000000000C4C5                 db  99h
.eh_frame_hdr:000000000000C4C6                 db 0FFh
.eh_frame_hdr:000000000000C4C7                 db 0FFh
.eh_frame_hdr:000000000000C4C8                 db 0C4h
.eh_frame_hdr:000000000000C4C9                 db  0Dh
.eh_frame_hdr:000000000000C4CA                 db    0
.eh_frame_hdr:000000000000C4CB                 db    0
.eh_frame_hdr:000000000000C4CC                 db  48h ; H
.eh_frame_hdr:000000000000C4CD                 db  99h
.eh_frame_hdr:000000000000C4CE                 db 0FFh
.eh_frame_hdr:000000000000C4CF                 db 0FFh
.eh_frame_hdr:000000000000C4D0                 db 0D8h
.eh_frame_hdr:000000000000C4D1                 db  0Dh
.eh_frame_hdr:000000000000C4D2                 db    0
.eh_frame_hdr:000000000000C4D3                 db    0
.eh_frame_hdr:000000000000C4D4                 db 0D8h
.eh_frame_hdr:000000000000C4D5                 db  99h
.eh_frame_hdr:000000000000C4D6                 db 0FFh
.eh_frame_hdr:000000000000C4D7                 db 0FFh
.eh_frame_hdr:000000000000C4D8                 db 0F4h
.eh_frame_hdr:000000000000C4D9                 db  0Dh
.eh_frame_hdr:000000000000C4DA                 db    0
.eh_frame_hdr:000000000000C4DB                 db    0
.eh_frame_hdr:000000000000C4DC                 db  78h ; x
.eh_frame_hdr:000000000000C4DD                 db  9Ah
.eh_frame_hdr:000000000000C4DE                 db 0FFh
.eh_frame_hdr:000000000000C4DF                 db 0FFh
.eh_frame_hdr:000000000000C4E0                 db  10h
.eh_frame_hdr:000000000000C4E1                 db  0Eh
.eh_frame_hdr:000000000000C4E2                 db    0
.eh_frame_hdr:000000000000C4E3                 db    0
.eh_frame_hdr:000000000000C4E4                 db  88h
.eh_frame_hdr:000000000000C4E5                 db  9Ah
.eh_frame_hdr:000000000000C4E6                 db 0FFh
.eh_frame_hdr:000000000000C4E7                 db 0FFh
.eh_frame_hdr:000000000000C4E8                 db  24h ; $
.eh_frame_hdr:000000000000C4E9                 db  0Eh
.eh_frame_hdr:000000000000C4EA                 db    0
.eh_frame_hdr:000000000000C4EB                 db    0
.eh_frame_hdr:000000000000C4EC                 db 0A8h
.eh_frame_hdr:000000000000C4ED                 db  9Ah
.eh_frame_hdr:000000000000C4EE                 db 0FFh
.eh_frame_hdr:000000000000C4EF                 db 0FFh
.eh_frame_hdr:000000000000C4F0                 db  38h ; 8
.eh_frame_hdr:000000000000C4F1                 db  0Eh
.eh_frame_hdr:000000000000C4F2                 db    0
.eh_frame_hdr:000000000000C4F3                 db    0
.eh_frame_hdr:000000000000C4F4                 db 0C8h
.eh_frame_hdr:000000000000C4F5                 db  9Ah
.eh_frame_hdr:000000000000C4F6                 db 0FFh
.eh_frame_hdr:000000000000C4F7                 db 0FFh
.eh_frame_hdr:000000000000C4F8                 db  4Ch ; L
.eh_frame_hdr:000000000000C4F9                 db  0Eh
.eh_frame_hdr:000000000000C4FA                 db    0
.eh_frame_hdr:000000000000C4FB                 db    0
.eh_frame_hdr:000000000000C4FC                 db 0D8h
.eh_frame_hdr:000000000000C4FD                 db  9Ah
.eh_frame_hdr:000000000000C4FE                 db 0FFh
.eh_frame_hdr:000000000000C4FF                 db 0FFh
.eh_frame_hdr:000000000000C500                 db  60h ; `
.eh_frame_hdr:000000000000C501                 db  0Eh
.eh_frame_hdr:000000000000C502                 db    0
.eh_frame_hdr:000000000000C503                 db    0
.eh_frame_hdr:000000000000C504                 db 0F8h
.eh_frame_hdr:000000000000C505                 db  9Ah
.eh_frame_hdr:000000000000C506                 db 0FFh
.eh_frame_hdr:000000000000C507                 db 0FFh
.eh_frame_hdr:000000000000C508                 db  74h ; t
.eh_frame_hdr:000000000000C509                 db  0Eh
.eh_frame_hdr:000000000000C50A                 db    0
.eh_frame_hdr:000000000000C50B                 db    0
.eh_frame_hdr:000000000000C50C                 db  18h
.eh_frame_hdr:000000000000C50D                 db  9Bh
.eh_frame_hdr:000000000000C50E                 db 0FFh
.eh_frame_hdr:000000000000C50F                 db 0FFh
.eh_frame_hdr:000000000000C510                 db  88h
.eh_frame_hdr:000000000000C511                 db  0Eh
.eh_frame_hdr:000000000000C512                 db    0
.eh_frame_hdr:000000000000C513                 db    0
.eh_frame_hdr:000000000000C514                 db  38h ; 8
.eh_frame_hdr:000000000000C515                 db  9Bh
.eh_frame_hdr:000000000000C516                 db 0FFh
.eh_frame_hdr:000000000000C517                 db 0FFh
.eh_frame_hdr:000000000000C518                 db 0A0h
.eh_frame_hdr:000000000000C519                 db  0Eh
.eh_frame_hdr:000000000000C51A                 db    0
.eh_frame_hdr:000000000000C51B                 db    0
.eh_frame_hdr:000000000000C51C                 db 0B8h
.eh_frame_hdr:000000000000C51D                 db  9Bh
.eh_frame_hdr:000000000000C51E                 db 0FFh
.eh_frame_hdr:000000000000C51F                 db 0FFh
.eh_frame_hdr:000000000000C520                 db 0C8h
.eh_frame_hdr:000000000000C521                 db  0Eh
.eh_frame_hdr:000000000000C522                 db    0
.eh_frame_hdr:000000000000C523                 db    0
.eh_frame_hdr:000000000000C524                 db 0D8h
.eh_frame_hdr:000000000000C525                 db  9Fh
.eh_frame_hdr:000000000000C526                 db 0FFh
.eh_frame_hdr:000000000000C527                 db 0FFh
.eh_frame_hdr:000000000000C528                 db 0DCh
.eh_frame_hdr:000000000000C529                 db  0Fh
.eh_frame_hdr:000000000000C52A                 db    0
.eh_frame_hdr:000000000000C52B                 db    0
.eh_frame_hdr:000000000000C52C                 db 0F8h
.eh_frame_hdr:000000000000C52D                 db  9Fh
.eh_frame_hdr:000000000000C52E                 db 0FFh
.eh_frame_hdr:000000000000C52F                 db 0FFh
.eh_frame_hdr:000000000000C530                 db 0F0h
.eh_frame_hdr:000000000000C531                 db  0Fh
.eh_frame_hdr:000000000000C532                 db    0
.eh_frame_hdr:000000000000C533                 db    0
.eh_frame_hdr:000000000000C534                 db  78h ; x
.eh_frame_hdr:000000000000C535                 db 0A0h
.eh_frame_hdr:000000000000C536                 db 0FFh
.eh_frame_hdr:000000000000C537                 db 0FFh
.eh_frame_hdr:000000000000C538                 db  0Ch
.eh_frame_hdr:000000000000C539                 db  10h
.eh_frame_hdr:000000000000C53A                 db    0
.eh_frame_hdr:000000000000C53B                 db    0
.eh_frame_hdr:000000000000C53C                 db  58h ; X
.eh_frame_hdr:000000000000C53D                 db 0A1h
.eh_frame_hdr:000000000000C53E                 db 0FFh
.eh_frame_hdr:000000000000C53F                 db 0FFh
.eh_frame_hdr:000000000000C540                 db  38h ; 8
.eh_frame_hdr:000000000000C541                 db  10h
.eh_frame_hdr:000000000000C542                 db    0
.eh_frame_hdr:000000000000C543                 db    0
.eh_frame_hdr:000000000000C544                 db 0D8h
.eh_frame_hdr:000000000000C545                 db 0A1h
.eh_frame_hdr:000000000000C546                 db 0FFh
.eh_frame_hdr:000000000000C547                 db 0FFh
.eh_frame_hdr:000000000000C548                 db  58h ; X
.eh_frame_hdr:000000000000C549                 db  10h
.eh_frame_hdr:000000000000C54A                 db    0
.eh_frame_hdr:000000000000C54B                 db    0
.eh_frame_hdr:000000000000C54C                 db  18h
.eh_frame_hdr:000000000000C54D                 db 0A2h
.eh_frame_hdr:000000000000C54E                 db 0FFh
.eh_frame_hdr:000000000000C54F                 db 0FFh
.eh_frame_hdr:000000000000C550                 db  70h ; p
.eh_frame_hdr:000000000000C551                 db  10h
.eh_frame_hdr:000000000000C552                 db    0
.eh_frame_hdr:000000000000C553                 db    0
.eh_frame_hdr:000000000000C554                 db  38h ; 8
.eh_frame_hdr:000000000000C555                 db 0A2h
.eh_frame_hdr:000000000000C556                 db 0FFh
.eh_frame_hdr:000000000000C557                 db 0FFh
.eh_frame_hdr:000000000000C558                 db  8Ch
.eh_frame_hdr:000000000000C559                 db  10h
.eh_frame_hdr:000000000000C55A                 db    0
.eh_frame_hdr:000000000000C55B                 db    0
.eh_frame_hdr:000000000000C55C                 db  68h ; h
.eh_frame_hdr:000000000000C55D                 db 0A2h
.eh_frame_hdr:000000000000C55E                 db 0FFh
.eh_frame_hdr:000000000000C55F                 db 0FFh
.eh_frame_hdr:000000000000C560                 db 0A0h
.eh_frame_hdr:000000000000C561                 db  10h
.eh_frame_hdr:000000000000C562                 db    0
.eh_frame_hdr:000000000000C563                 db    0
.eh_frame_hdr:000000000000C564                 db  78h ; x
.eh_frame_hdr:000000000000C565                 db 0A2h
.eh_frame_hdr:000000000000C566                 db 0FFh
.eh_frame_hdr:000000000000C567                 db 0FFh
.eh_frame_hdr:000000000000C568                 db 0B4h
.eh_frame_hdr:000000000000C569                 db  10h
.eh_frame_hdr:000000000000C56A                 db    0
.eh_frame_hdr:000000000000C56B                 db    0
.eh_frame_hdr:000000000000C56C                 db 0B8h
.eh_frame_hdr:000000000000C56D                 db 0A2h
.eh_frame_hdr:000000000000C56E                 db 0FFh
.eh_frame_hdr:000000000000C56F                 db 0FFh
.eh_frame_hdr:000000000000C570                 db 0D8h
.eh_frame_hdr:000000000000C571                 db  10h
.eh_frame_hdr:000000000000C572                 db    0
.eh_frame_hdr:000000000000C573                 db    0
.eh_frame_hdr:000000000000C574                 db 0E8h
.eh_frame_hdr:000000000000C575                 db 0A2h
.eh_frame_hdr:000000000000C576                 db 0FFh
.eh_frame_hdr:000000000000C577                 db 0FFh
.eh_frame_hdr:000000000000C578                 db 0ECh
.eh_frame_hdr:000000000000C579                 db  10h
.eh_frame_hdr:000000000000C57A                 db    0
.eh_frame_hdr:000000000000C57B                 db    0
.eh_frame_hdr:000000000000C57C                 db  78h ; x
.eh_frame_hdr:000000000000C57D                 db 0A3h
.eh_frame_hdr:000000000000C57E                 db 0FFh
.eh_frame_hdr:000000000000C57F                 db 0FFh
.eh_frame_hdr:000000000000C580                 db    4
.eh_frame_hdr:000000000000C581                 db  11h
.eh_frame_hdr:000000000000C582                 db    0
.eh_frame_hdr:000000000000C583                 db    0
.eh_frame_hdr:000000000000C584                 db 0C8h
.eh_frame_hdr:000000000000C585                 db 0A3h
.eh_frame_hdr:000000000000C586                 db 0FFh
.eh_frame_hdr:000000000000C587                 db 0FFh
.eh_frame_hdr:000000000000C588                 db  1Ch
.eh_frame_hdr:000000000000C589                 db  11h
.eh_frame_hdr:000000000000C58A                 db    0
.eh_frame_hdr:000000000000C58B                 db    0
.eh_frame_hdr:000000000000C58C                 db 0E8h
.eh_frame_hdr:000000000000C58D                 db 0A3h
.eh_frame_hdr:000000000000C58E                 db 0FFh
.eh_frame_hdr:000000000000C58F                 db 0FFh
.eh_frame_hdr:000000000000C590                 db  38h ; 8
.eh_frame_hdr:000000000000C591                 db  11h
.eh_frame_hdr:000000000000C592                 db    0
.eh_frame_hdr:000000000000C593                 db    0
.eh_frame_hdr:000000000000C594                 db  18h
.eh_frame_hdr:000000000000C595                 db 0A4h
.eh_frame_hdr:000000000000C596                 db 0FFh
.eh_frame_hdr:000000000000C597                 db 0FFh
.eh_frame_hdr:000000000000C598                 db  54h ; T
.eh_frame_hdr:000000000000C599                 db  11h
.eh_frame_hdr:000000000000C59A                 db    0
.eh_frame_hdr:000000000000C59B                 db    0
.eh_frame_hdr:000000000000C59C                 db  48h ; H
.eh_frame_hdr:000000000000C59D                 db 0A4h
.eh_frame_hdr:000000000000C59E                 db 0FFh
.eh_frame_hdr:000000000000C59F                 db 0FFh
.eh_frame_hdr:000000000000C5A0                 db  7Ch ; |
.eh_frame_hdr:000000000000C5A1                 db  11h
.eh_frame_hdr:000000000000C5A2                 db    0
.eh_frame_hdr:000000000000C5A3                 db    0
.eh_frame_hdr:000000000000C5A4                 db  68h ; h
.eh_frame_hdr:000000000000C5A5                 db 0A4h
.eh_frame_hdr:000000000000C5A6                 db 0FFh
.eh_frame_hdr:000000000000C5A7                 db 0FFh
.eh_frame_hdr:000000000000C5A8                 db  98h
.eh_frame_hdr:000000000000C5A9                 db  11h
.eh_frame_hdr:000000000000C5AA                 db    0
.eh_frame_hdr:000000000000C5AB                 db    0
.eh_frame_hdr:000000000000C5AC                 db 0A8h
.eh_frame_hdr:000000000000C5AD                 db 0A4h
.eh_frame_hdr:000000000000C5AE                 db 0FFh
.eh_frame_hdr:000000000000C5AF                 db 0FFh
.eh_frame_hdr:000000000000C5B0                 db 0B0h
.eh_frame_hdr:000000000000C5B1                 db  11h
.eh_frame_hdr:000000000000C5B2                 db    0
.eh_frame_hdr:000000000000C5B3                 db    0
.eh_frame_hdr:000000000000C5B4                 db 0F8h
.eh_frame_hdr:000000000000C5B5                 db 0A4h
.eh_frame_hdr:000000000000C5B6                 db 0FFh
.eh_frame_hdr:000000000000C5B7                 db 0FFh
.eh_frame_hdr:000000000000C5B8                 db 0CCh
.eh_frame_hdr:000000000000C5B9                 db  11h
.eh_frame_hdr:000000000000C5BA                 db    0
.eh_frame_hdr:000000000000C5BB                 db    0
.eh_frame_hdr:000000000000C5BC                 db  28h ; (
.eh_frame_hdr:000000000000C5BD                 db 0A5h
.eh_frame_hdr:000000000000C5BE                 db 0FFh
.eh_frame_hdr:000000000000C5BF                 db 0FFh
.eh_frame_hdr:000000000000C5C0                 db 0E0h
.eh_frame_hdr:000000000000C5C1                 db  11h
.eh_frame_hdr:000000000000C5C2                 db    0
.eh_frame_hdr:000000000000C5C3                 db    0
.eh_frame_hdr:000000000000C5C4                 db 0C8h
.eh_frame_hdr:000000000000C5C5                 db 0A5h
.eh_frame_hdr:000000000000C5C6                 db 0FFh
.eh_frame_hdr:000000000000C5C7                 db 0FFh
.eh_frame_hdr:000000000000C5C8                 db    8
.eh_frame_hdr:000000000000C5C9                 db  12h
.eh_frame_hdr:000000000000C5CA                 db    0
.eh_frame_hdr:000000000000C5CB                 db    0
.eh_frame_hdr:000000000000C5CC                 db    8
.eh_frame_hdr:000000000000C5CD                 db 0A6h
.eh_frame_hdr:000000000000C5CE                 db 0FFh
.eh_frame_hdr:000000000000C5CF                 db 0FFh
.eh_frame_hdr:000000000000C5D0                 db  28h ; (
.eh_frame_hdr:000000000000C5D1                 db  12h
.eh_frame_hdr:000000000000C5D2                 db    0
.eh_frame_hdr:000000000000C5D3                 db    0
.eh_frame_hdr:000000000000C5D4                 db  38h ; 8
.eh_frame_hdr:000000000000C5D5                 db 0A6h
.eh_frame_hdr:000000000000C5D6                 db 0FFh
.eh_frame_hdr:000000000000C5D7                 db 0FFh
.eh_frame_hdr:000000000000C5D8                 db  40h ; @
.eh_frame_hdr:000000000000C5D9                 db  12h
.eh_frame_hdr:000000000000C5DA                 db    0
.eh_frame_hdr:000000000000C5DB                 db    0
.eh_frame_hdr:000000000000C5DC                 db  98h
.eh_frame_hdr:000000000000C5DD                 db 0A6h
.eh_frame_hdr:000000000000C5DE                 db 0FFh
.eh_frame_hdr:000000000000C5DF                 db 0FFh
.eh_frame_hdr:000000000000C5E0                 db  70h ; p
.eh_frame_hdr:000000000000C5E1                 db  12h
.eh_frame_hdr:000000000000C5E2                 db    0
.eh_frame_hdr:000000000000C5E3                 db    0
.eh_frame_hdr:000000000000C5E4                 db 0B8h
.eh_frame_hdr:000000000000C5E5                 db 0A6h
.eh_frame_hdr:000000000000C5E6                 db 0FFh
.eh_frame_hdr:000000000000C5E7                 db 0FFh
.eh_frame_hdr:000000000000C5E8                 db  84h
.eh_frame_hdr:000000000000C5E9                 db  12h
.eh_frame_hdr:000000000000C5EA                 db    0
.eh_frame_hdr:000000000000C5EB                 db    0
.eh_frame_hdr:000000000000C5EC                 db 0C8h
.eh_frame_hdr:000000000000C5ED                 db 0A6h
.eh_frame_hdr:000000000000C5EE                 db 0FFh
.eh_frame_hdr:000000000000C5EF                 db 0FFh
.eh_frame_hdr:000000000000C5F0                 db  98h
.eh_frame_hdr:000000000000C5F1                 db  12h
.eh_frame_hdr:000000000000C5F2                 db    0
.eh_frame_hdr:000000000000C5F3                 db    0
.eh_frame_hdr:000000000000C5F4                 db 0D8h
.eh_frame_hdr:000000000000C5F5                 db 0A6h
.eh_frame_hdr:000000000000C5F6                 db 0FFh
.eh_frame_hdr:000000000000C5F7                 db 0FFh
.eh_frame_hdr:000000000000C5F8                 db 0ACh
.eh_frame_hdr:000000000000C5F9                 db  12h
.eh_frame_hdr:000000000000C5FA                 db    0
.eh_frame_hdr:000000000000C5FB                 db    0
.eh_frame_hdr:000000000000C5FC                 db 0E8h
.eh_frame_hdr:000000000000C5FD                 db 0A6h
.eh_frame_hdr:000000000000C5FE                 db 0FFh
.eh_frame_hdr:000000000000C5FF                 db 0FFh
.eh_frame_hdr:000000000000C600                 db 0C0h
.eh_frame_hdr:000000000000C601                 db  12h
.eh_frame_hdr:000000000000C602                 db    0
.eh_frame_hdr:000000000000C603                 db    0
.eh_frame_hdr:000000000000C604                 db  18h
.eh_frame_hdr:000000000000C605                 db 0A7h
.eh_frame_hdr:000000000000C606                 db 0FFh
.eh_frame_hdr:000000000000C607                 db 0FFh
.eh_frame_hdr:000000000000C608                 db 0D4h
.eh_frame_hdr:000000000000C609                 db  12h
.eh_frame_hdr:000000000000C60A                 db    0
.eh_frame_hdr:000000000000C60B                 db    0
.eh_frame_hdr:000000000000C60C                 db 0E8h
.eh_frame_hdr:000000000000C60D                 db 0A8h
.eh_frame_hdr:000000000000C60E                 db 0FFh
.eh_frame_hdr:000000000000C60F                 db 0FFh
.eh_frame_hdr:000000000000C610                 db  10h
.eh_frame_hdr:000000000000C611                 db  13h
.eh_frame_hdr:000000000000C612                 db    0
.eh_frame_hdr:000000000000C613                 db    0
.eh_frame_hdr:000000000000C614                 db 0F8h
.eh_frame_hdr:000000000000C615                 db 0A9h
.eh_frame_hdr:000000000000C616                 db 0FFh
.eh_frame_hdr:000000000000C617                 db 0FFh
.eh_frame_hdr:000000000000C618                 db  60h ; `
.eh_frame_hdr:000000000000C619                 db  13h
.eh_frame_hdr:000000000000C61A                 db    0
.eh_frame_hdr:000000000000C61B                 db    0
.eh_frame_hdr:000000000000C61C                 db  88h
.eh_frame_hdr:000000000000C61D                 db 0AAh
.eh_frame_hdr:000000000000C61E                 db 0FFh
.eh_frame_hdr:000000000000C61F                 db 0FFh
.eh_frame_hdr:000000000000C620                 db  98h
.eh_frame_hdr:000000000000C621                 db  13h
.eh_frame_hdr:000000000000C622                 db    0
.eh_frame_hdr:000000000000C623                 db    0
.eh_frame_hdr:000000000000C624                 db 0D8h
.eh_frame_hdr:000000000000C625                 db 0AAh
.eh_frame_hdr:000000000000C626                 db 0FFh
.eh_frame_hdr:000000000000C627                 db 0FFh
.eh_frame_hdr:000000000000C628                 db 0C4h
.eh_frame_hdr:000000000000C629                 db  13h
.eh_frame_hdr:000000000000C62A                 db    0
.eh_frame_hdr:000000000000C62B                 db    0
.eh_frame_hdr:000000000000C62C                 db  18h
.eh_frame_hdr:000000000000C62D                 db 0ABh
.eh_frame_hdr:000000000000C62E                 db 0FFh
.eh_frame_hdr:000000000000C62F                 db 0FFh
.eh_frame_hdr:000000000000C630                 db 0E0h
.eh_frame_hdr:000000000000C631                 db  13h
.eh_frame_hdr:000000000000C632                 db    0
.eh_frame_hdr:000000000000C633                 db    0
.eh_frame_hdr:000000000000C634                 db  48h ; H
.eh_frame_hdr:000000000000C635                 db 0ACh
.eh_frame_hdr:000000000000C636                 db 0FFh
.eh_frame_hdr:000000000000C637                 db 0FFh
.eh_frame_hdr:000000000000C638                 db  1Ch
.eh_frame_hdr:000000000000C639                 db  14h
.eh_frame_hdr:000000000000C63A                 db    0
.eh_frame_hdr:000000000000C63B                 db    0
.eh_frame_hdr:000000000000C63C                 db 0B8h
.eh_frame_hdr:000000000000C63D                 db 0ACh
.eh_frame_hdr:000000000000C63E                 db 0FFh
.eh_frame_hdr:000000000000C63F                 db 0FFh
.eh_frame_hdr:000000000000C640                 db  40h ; @
.eh_frame_hdr:000000000000C641                 db  14h
.eh_frame_hdr:000000000000C642                 db    0
.eh_frame_hdr:000000000000C643                 db    0
.eh_frame_hdr:000000000000C644                 db  28h ; (
.eh_frame_hdr:000000000000C645                 db 0ADh
.eh_frame_hdr:000000000000C646                 db 0FFh
.eh_frame_hdr:000000000000C647                 db 0FFh
.eh_frame_hdr:000000000000C648                 db  84h
.eh_frame_hdr:000000000000C649                 db  14h
.eh_frame_hdr:000000000000C64A                 db    0
.eh_frame_hdr:000000000000C64B                 db    0
.eh_frame_hdr:000000000000C64C                 db  88h
.eh_frame_hdr:000000000000C64D                 db 0ADh
.eh_frame_hdr:000000000000C64E                 db 0FFh
.eh_frame_hdr:000000000000C64F                 db 0FFh
.eh_frame_hdr:000000000000C650                 db 0B0h
.eh_frame_hdr:000000000000C651                 db  14h
.eh_frame_hdr:000000000000C652                 db    0
.eh_frame_hdr:000000000000C653                 db    0
.eh_frame_hdr:000000000000C654                 db 0F8h
.eh_frame_hdr:000000000000C655                 db 0ADh
.eh_frame_hdr:000000000000C656                 db 0FFh
.eh_frame_hdr:000000000000C657                 db 0FFh
.eh_frame_hdr:000000000000C658                 db 0D8h
.eh_frame_hdr:000000000000C659                 db  14h
.eh_frame_hdr:000000000000C65A                 db    0
.eh_frame_hdr:000000000000C65B                 db    0
.eh_frame_hdr:000000000000C65C                 db  68h ; h
.eh_frame_hdr:000000000000C65D                 db 0AEh
.eh_frame_hdr:000000000000C65E                 db 0FFh
.eh_frame_hdr:000000000000C65F                 db 0FFh
.eh_frame_hdr:000000000000C660                 db 0F8h
.eh_frame_hdr:000000000000C661                 db  14h
.eh_frame_hdr:000000000000C662                 db    0
.eh_frame_hdr:000000000000C663                 db    0
.eh_frame_hdr:000000000000C664                 db 0A8h
.eh_frame_hdr:000000000000C665                 db 0AEh
.eh_frame_hdr:000000000000C666                 db 0FFh
.eh_frame_hdr:000000000000C667                 db 0FFh
.eh_frame_hdr:000000000000C668                 db  0Ch
.eh_frame_hdr:000000000000C669                 db  15h
.eh_frame_hdr:000000000000C66A                 db    0
.eh_frame_hdr:000000000000C66B                 db    0
.eh_frame_hdr:000000000000C66C                 db  28h ; (
.eh_frame_hdr:000000000000C66D                 db 0B1h
.eh_frame_hdr:000000000000C66E                 db 0FFh
.eh_frame_hdr:000000000000C66F                 db 0FFh
.eh_frame_hdr:000000000000C670                 db  5Ch ; \
.eh_frame_hdr:000000000000C671                 db  15h
.eh_frame_hdr:000000000000C672                 db    0
.eh_frame_hdr:000000000000C673                 db    0
.eh_frame_hdr:000000000000C674                 db 0D8h
.eh_frame_hdr:000000000000C675                 db 0B1h
.eh_frame_hdr:000000000000C676                 db 0FFh
.eh_frame_hdr:000000000000C677                 db 0FFh
.eh_frame_hdr:000000000000C678                 db 0A0h
.eh_frame_hdr:000000000000C679                 db  15h
.eh_frame_hdr:000000000000C67A                 db    0
.eh_frame_hdr:000000000000C67B                 db    0
.eh_frame_hdr:000000000000C67C                 db  98h
.eh_frame_hdr:000000000000C67D                 db 0B2h
.eh_frame_hdr:000000000000C67E                 db 0FFh
.eh_frame_hdr:000000000000C67F                 db 0FFh
.eh_frame_hdr:000000000000C680                 db 0BCh
.eh_frame_hdr:000000000000C681                 db  15h
.eh_frame_hdr:000000000000C682                 db    0
.eh_frame_hdr:000000000000C683                 db    0
.eh_frame_hdr:000000000000C684                 db  78h ; x
.eh_frame_hdr:000000000000C685                 db 0BCh
.eh_frame_hdr:000000000000C686                 db 0FFh
.eh_frame_hdr:000000000000C687                 db 0FFh
.eh_frame_hdr:000000000000C688                 db  0Ch
.eh_frame_hdr:000000000000C689                 db  16h
.eh_frame_hdr:000000000000C68A                 db    0
.eh_frame_hdr:000000000000C68B                 db    0
.eh_frame_hdr:000000000000C68C                 db  28h ; (
.eh_frame_hdr:000000000000C68D                 db 0C0h
.eh_frame_hdr:000000000000C68E                 db 0FFh
.eh_frame_hdr:000000000000C68F                 db 0FFh
.eh_frame_hdr:000000000000C690                 db  58h ; X
.eh_frame_hdr:000000000000C691                 db  16h
.eh_frame_hdr:000000000000C692                 db    0
.eh_frame_hdr:000000000000C693                 db    0
.eh_frame_hdr:000000000000C694                 db 0B8h
.eh_frame_hdr:000000000000C695                 db 0C1h
.eh_frame_hdr:000000000000C696                 db 0FFh
.eh_frame_hdr:000000000000C697                 db 0FFh
.eh_frame_hdr:000000000000C698                 db  88h
.eh_frame_hdr:000000000000C699                 db  16h
.eh_frame_hdr:000000000000C69A                 db    0
.eh_frame_hdr:000000000000C69B                 db    0
.eh_frame_hdr:000000000000C69C                 db  38h ; 8
.eh_frame_hdr:000000000000C69D                 db 0C9h
.eh_frame_hdr:000000000000C69E                 db 0FFh
.eh_frame_hdr:000000000000C69F                 db 0FFh
.eh_frame_hdr:000000000000C6A0                 db 0ECh
.eh_frame_hdr:000000000000C6A1                 db  16h
.eh_frame_hdr:000000000000C6A2                 db    0
.eh_frame_hdr:000000000000C6A3                 db    0
.eh_frame_hdr:000000000000C6A4                 db  68h ; h
.eh_frame_hdr:000000000000C6A5                 db 0C9h
.eh_frame_hdr:000000000000C6A6                 db 0FFh
.eh_frame_hdr:000000000000C6A7                 db 0FFh
.eh_frame_hdr:000000000000C6A8                 db    4
.eh_frame_hdr:000000000000C6A9                 db  17h
.eh_frame_hdr:000000000000C6AA                 db    0
.eh_frame_hdr:000000000000C6AB                 db    0
.eh_frame_hdr:000000000000C6AC                 db 0B8h
.eh_frame_hdr:000000000000C6AD                 db 0CAh
.eh_frame_hdr:000000000000C6AE                 db 0FFh
.eh_frame_hdr:000000000000C6AF                 db 0FFh
.eh_frame_hdr:000000000000C6B0                 db  68h ; h
.eh_frame_hdr:000000000000C6B1                 db  17h
.eh_frame_hdr:000000000000C6B2                 db    0
.eh_frame_hdr:000000000000C6B3                 db    0
.eh_frame_hdr:000000000000C6B4                 db  48h ; H
.eh_frame_hdr:000000000000C6B5                 db 0CBh
.eh_frame_hdr:000000000000C6B6                 db 0FFh
.eh_frame_hdr:000000000000C6B7                 db 0FFh
.eh_frame_hdr:000000000000C6B8                 db 0A8h
.eh_frame_hdr:000000000000C6B9                 db  17h
.eh_frame_hdr:000000000000C6BA                 db    0
.eh_frame_hdr:000000000000C6BB                 db    0
.eh_frame_hdr:000000000000C6BC                 db 0C8h
.eh_frame_hdr:000000000000C6BD                 db 0CBh
.eh_frame_hdr:000000000000C6BE                 db 0FFh
.eh_frame_hdr:000000000000C6BF                 db 0FFh
.eh_frame_hdr:000000000000C6C0                 db 0F8h
.eh_frame_hdr:000000000000C6C1                 db  17h
.eh_frame_hdr:000000000000C6C2                 db    0
.eh_frame_hdr:000000000000C6C3                 db    0
.eh_frame_hdr:000000000000C6C4                 db 0D8h
.eh_frame_hdr:000000000000C6C5                 db 0CBh
.eh_frame_hdr:000000000000C6C6                 db 0FFh
.eh_frame_hdr:000000000000C6C7                 db 0FFh
.eh_frame_hdr:000000000000C6C8                 db  0Ch
.eh_frame_hdr:000000000000C6C9                 db  18h
.eh_frame_hdr:000000000000C6CA                 db    0
.eh_frame_hdr:000000000000C6CB                 db    0
.eh_frame_hdr:000000000000C6CC                 db  68h ; h
.eh_frame_hdr:000000000000C6CD                 db 0CCh
.eh_frame_hdr:000000000000C6CE                 db 0FFh
.eh_frame_hdr:000000000000C6CF                 db 0FFh
.eh_frame_hdr:000000000000C6D0                 db  28h ; (
.eh_frame_hdr:000000000000C6D1                 db  18h
.eh_frame_hdr:000000000000C6D2                 db    0
.eh_frame_hdr:000000000000C6D3                 db    0
.eh_frame_hdr:000000000000C6D4                 db 0D8h
.eh_frame_hdr:000000000000C6D5                 db 0CCh
.eh_frame_hdr:000000000000C6D6                 db 0FFh
.eh_frame_hdr:000000000000C6D7                 db 0FFh
.eh_frame_hdr:000000000000C6D8                 db  48h ; H
.eh_frame_hdr:000000000000C6D9                 db  18h
.eh_frame_hdr:000000000000C6DA                 db    0
.eh_frame_hdr:000000000000C6DB                 db    0
.eh_frame_hdr:000000000000C6DC                 db  38h ; 8
.eh_frame_hdr:000000000000C6DD                 db 0CDh
.eh_frame_hdr:000000000000C6DE                 db 0FFh
.eh_frame_hdr:000000000000C6DF                 db 0FFh
.eh_frame_hdr:000000000000C6E0                 db  68h ; h
.eh_frame_hdr:000000000000C6E1                 db  18h
.eh_frame_hdr:000000000000C6E2                 db    0
.eh_frame_hdr:000000000000C6E3                 db    0
.eh_frame_hdr:000000000000C6E4                 db 0D8h
.eh_frame_hdr:000000000000C6E5                 db 0CDh
.eh_frame_hdr:000000000000C6E6                 db 0FFh
.eh_frame_hdr:000000000000C6E7                 db 0FFh
.eh_frame_hdr:000000000000C6E8                 db  7Ch ; |
.eh_frame_hdr:000000000000C6E9                 db  18h
.eh_frame_hdr:000000000000C6EA                 db    0
.eh_frame_hdr:000000000000C6EB                 db    0
.eh_frame_hdr:000000000000C6EC                 db 0E8h
.eh_frame_hdr:000000000000C6ED                 db 0CDh
.eh_frame_hdr:000000000000C6EE                 db 0FFh
.eh_frame_hdr:000000000000C6EF                 db 0FFh
.eh_frame_hdr:000000000000C6F0                 db  90h
.eh_frame_hdr:000000000000C6F1                 db  18h
.eh_frame_hdr:000000000000C6F2                 db    0
.eh_frame_hdr:000000000000C6F3                 db    0
.eh_frame_hdr:000000000000C6F4                 db 0F8h
.eh_frame_hdr:000000000000C6F5                 db 0CDh
.eh_frame_hdr:000000000000C6F6                 db 0FFh
.eh_frame_hdr:000000000000C6F7                 db 0FFh
.eh_frame_hdr:000000000000C6F8                 db 0A4h
.eh_frame_hdr:000000000000C6F9                 db  18h
.eh_frame_hdr:000000000000C6FA                 db    0
.eh_frame_hdr:000000000000C6FB                 db    0
.eh_frame_hdr:000000000000C6FC                 db  28h ; (
.eh_frame_hdr:000000000000C6FD                 db 0CEh
.eh_frame_hdr:000000000000C6FE                 db 0FFh
.eh_frame_hdr:000000000000C6FF                 db 0FFh
.eh_frame_hdr:000000000000C700                 db 0C0h
.eh_frame_hdr:000000000000C701                 db  18h
.eh_frame_hdr:000000000000C702                 db    0
.eh_frame_hdr:000000000000C703                 db    0
.eh_frame_hdr:000000000000C704                 db  48h ; H
.eh_frame_hdr:000000000000C705                 db 0CFh
.eh_frame_hdr:000000000000C706                 db 0FFh
.eh_frame_hdr:000000000000C707                 db 0FFh
.eh_frame_hdr:000000000000C708                 db  20h
.eh_frame_hdr:000000000000C709                 db  19h
.eh_frame_hdr:000000000000C70A                 db    0
.eh_frame_hdr:000000000000C70B                 db    0
.eh_frame_hdr:000000000000C70C                 db 0C8h
.eh_frame_hdr:000000000000C70D                 db 0CFh
.eh_frame_hdr:000000000000C70E                 db 0FFh
.eh_frame_hdr:000000000000C70F                 db 0FFh
.eh_frame_hdr:000000000000C710                 db  34h ; 4
.eh_frame_hdr:000000000000C711                 db  19h
.eh_frame_hdr:000000000000C712                 db    0
.eh_frame_hdr:000000000000C713                 db    0
.eh_frame_hdr:000000000000C714                 db    8
.eh_frame_hdr:000000000000C715                 db 0D1h
.eh_frame_hdr:000000000000C716                 db 0FFh
.eh_frame_hdr:000000000000C717                 db 0FFh
.eh_frame_hdr:000000000000C718                 db  94h
.eh_frame_hdr:000000000000C719                 db  19h
.eh_frame_hdr:000000000000C71A                 db    0
.eh_frame_hdr:000000000000C71B                 db    0
.eh_frame_hdr:000000000000C71C                 db  18h
.eh_frame_hdr:000000000000C71D                 db 0D1h
.eh_frame_hdr:000000000000C71E                 db 0FFh
.eh_frame_hdr:000000000000C71F                 db 0FFh
.eh_frame_hdr:000000000000C720                 db 0A8h
.eh_frame_hdr:000000000000C721                 db  19h
.eh_frame_hdr:000000000000C722                 db    0
.eh_frame_hdr:000000000000C723                 db    0
.eh_frame_hdr:000000000000C724                 db  28h ; (
.eh_frame_hdr:000000000000C725                 db 0D1h
.eh_frame_hdr:000000000000C726                 db 0FFh
.eh_frame_hdr:000000000000C727                 db 0FFh
.eh_frame_hdr:000000000000C728                 db 0BCh
.eh_frame_hdr:000000000000C729                 db  19h
.eh_frame_hdr:000000000000C72A                 db    0
.eh_frame_hdr:000000000000C72B                 db    0
.eh_frame_hdr:000000000000C72C                 db  38h ; 8
.eh_frame_hdr:000000000000C72D                 db 0D1h
.eh_frame_hdr:000000000000C72E                 db 0FFh
.eh_frame_hdr:000000000000C72F                 db 0FFh
.eh_frame_hdr:000000000000C730                 db 0D0h
.eh_frame_hdr:000000000000C731                 db  19h
.eh_frame_hdr:000000000000C732                 db    0
.eh_frame_hdr:000000000000C733                 db    0
.eh_frame_hdr:000000000000C734                 db  88h
.eh_frame_hdr:000000000000C735                 db 0D1h
.eh_frame_hdr:000000000000C736                 db 0FFh
.eh_frame_hdr:000000000000C737                 db 0FFh
.eh_frame_hdr:000000000000C738                 db 0E4h
.eh_frame_hdr:000000000000C739                 db  19h
.eh_frame_hdr:000000000000C73A                 db    0
.eh_frame_hdr:000000000000C73B                 db    0
.eh_frame_hdr:000000000000C73C                 db 0E8h
.eh_frame_hdr:000000000000C73D                 db 0D1h
.eh_frame_hdr:000000000000C73E                 db 0FFh
.eh_frame_hdr:000000000000C73F                 db 0FFh
.eh_frame_hdr:000000000000C740                 db 0F8h
.eh_frame_hdr:000000000000C741                 db  19h
.eh_frame_hdr:000000000000C742                 db    0
.eh_frame_hdr:000000000000C743                 db    0
.eh_frame_hdr:000000000000C744                 db  38h ; 8
.eh_frame_hdr:000000000000C745                 db 0D3h
.eh_frame_hdr:000000000000C746                 db 0FFh
.eh_frame_hdr:000000000000C747                 db 0FFh
.eh_frame_hdr:000000000000C748                 db  34h ; 4
.eh_frame_hdr:000000000000C749                 db  1Ah
.eh_frame_hdr:000000000000C74A                 db    0
.eh_frame_hdr:000000000000C74B                 db    0
.eh_frame_hdr:000000000000C74C                 db  98h
.eh_frame_hdr:000000000000C74D                 db 0D3h
.eh_frame_hdr:000000000000C74E                 db 0FFh
.eh_frame_hdr:000000000000C74F                 db 0FFh
.eh_frame_hdr:000000000000C750                 db  6Ch ; l
.eh_frame_hdr:000000000000C751                 db  1Ah
.eh_frame_hdr:000000000000C752                 db    0
.eh_frame_hdr:000000000000C753                 db    0
.eh_frame_hdr:000000000000C754                 db 0E8h
.eh_frame_hdr:000000000000C755                 db 0D3h
.eh_frame_hdr:000000000000C756                 db 0FFh
.eh_frame_hdr:000000000000C757                 db 0FFh
.eh_frame_hdr:000000000000C758                 db  80h
.eh_frame_hdr:000000000000C759                 db  1Ah
.eh_frame_hdr:000000000000C75A                 db    0
.eh_frame_hdr:000000000000C75B                 db    0
.eh_frame_hdr:000000000000C75C                 db  68h ; h
.eh_frame_hdr:000000000000C75D                 db 0D4h
.eh_frame_hdr:000000000000C75E                 db 0FFh
.eh_frame_hdr:000000000000C75F                 db 0FFh
.eh_frame_hdr:000000000000C760                 db 0B4h
.eh_frame_hdr:000000000000C761                 db  1Ah
.eh_frame_hdr:000000000000C762                 db    0
.eh_frame_hdr:000000000000C763                 db    0
.eh_frame_hdr:000000000000C764                 db 0D8h
.eh_frame_hdr:000000000000C765                 db 0D4h
.eh_frame_hdr:000000000000C766                 db 0FFh
.eh_frame_hdr:000000000000C767                 db 0FFh
.eh_frame_hdr:000000000000C768                 db 0C8h
.eh_frame_hdr:000000000000C769                 db  1Ah
.eh_frame_hdr:000000000000C76A                 db    0
.eh_frame_hdr:000000000000C76B                 db    0
.eh_frame_hdr:000000000000C76C                 db  48h ; H
.eh_frame_hdr:000000000000C76D                 db 0D5h
.eh_frame_hdr:000000000000C76E                 db 0FFh
.eh_frame_hdr:000000000000C76F                 db 0FFh
.eh_frame_hdr:000000000000C770                 db  14h
.eh_frame_hdr:000000000000C771                 db  1Bh
.eh_frame_hdr:000000000000C772                 db    0
.eh_frame_hdr:000000000000C773                 db    0
.eh_frame_hdr:000000000000C774                 db  88h
.eh_frame_hdr:000000000000C775                 db 0D5h
.eh_frame_hdr:000000000000C776                 db 0FFh
.eh_frame_hdr:000000000000C777                 db 0FFh
.eh_frame_hdr:000000000000C778                 db  28h ; (
.eh_frame_hdr:000000000000C779                 db  1Bh
.eh_frame_hdr:000000000000C77A                 db    0
.eh_frame_hdr:000000000000C77B                 db    0
.eh_frame_hdr:000000000000C77C                 db 0A8h
.eh_frame_hdr:000000000000C77D                 db 0D5h
.eh_frame_hdr:000000000000C77E                 db 0FFh
.eh_frame_hdr:000000000000C77F                 db 0FFh
.eh_frame_hdr:000000000000C780                 db  3Ch ; <
.eh_frame_hdr:000000000000C781                 db  1Bh
.eh_frame_hdr:000000000000C782                 db    0
.eh_frame_hdr:000000000000C783                 db    0
.eh_frame_hdr:000000000000C784                 db  68h ; h
.eh_frame_hdr:000000000000C785                 db 0D7h
.eh_frame_hdr:000000000000C786                 db 0FFh
.eh_frame_hdr:000000000000C787                 db 0FFh
.eh_frame_hdr:000000000000C788                 db  88h
.eh_frame_hdr:000000000000C789                 db  1Bh
.eh_frame_hdr:000000000000C78A                 db    0
.eh_frame_hdr:000000000000C78B                 db    0
.eh_frame_hdr:000000000000C78C                 db 0F8h
.eh_frame_hdr:000000000000C78D                 db 0D7h
.eh_frame_hdr:000000000000C78E                 db 0FFh
.eh_frame_hdr:000000000000C78F                 db 0FFh
.eh_frame_hdr:000000000000C790                 db 0B4h
.eh_frame_hdr:000000000000C791                 db  1Bh
.eh_frame_hdr:000000000000C792                 db    0
.eh_frame_hdr:000000000000C793                 db    0
.eh_frame_hdr:000000000000C794                 db 0D8h
.eh_frame_hdr:000000000000C795                 db 0D8h
.eh_frame_hdr:000000000000C796                 db 0FFh
.eh_frame_hdr:000000000000C797                 db 0FFh
.eh_frame_hdr:000000000000C798                 db 0E0h
.eh_frame_hdr:000000000000C799                 db  1Bh
.eh_frame_hdr:000000000000C79A                 db    0
.eh_frame_hdr:000000000000C79B                 db    0
.eh_frame_hdr:000000000000C79C                 db  18h
.eh_frame_hdr:000000000000C79D                 db 0DBh
.eh_frame_hdr:000000000000C79E                 db 0FFh
.eh_frame_hdr:000000000000C79F                 db 0FFh
.eh_frame_hdr:000000000000C7A0                 db  18h
.eh_frame_hdr:000000000000C7A1                 db  1Ch
.eh_frame_hdr:000000000000C7A2                 db    0
.eh_frame_hdr:000000000000C7A3                 db    0
.eh_frame_hdr:000000000000C7A4                 db 0A8h
.eh_frame_hdr:000000000000C7A5                 db 0DDh
.eh_frame_hdr:000000000000C7A6                 db 0FFh
.eh_frame_hdr:000000000000C7A7                 db 0FFh
.eh_frame_hdr:000000000000C7A8                 db  54h ; T
.eh_frame_hdr:000000000000C7A9                 db  1Ch
.eh_frame_hdr:000000000000C7AA                 db    0
.eh_frame_hdr:000000000000C7AB                 db    0
.eh_frame_hdr:000000000000C7AC                 db    8
.eh_frame_hdr:000000000000C7AD                 db 0DEh
.eh_frame_hdr:000000000000C7AE                 db 0FFh
.eh_frame_hdr:000000000000C7AF                 db 0FFh
.eh_frame_hdr:000000000000C7B0                 db  78h ; x
.eh_frame_hdr:000000000000C7B1                 db  1Ch
.eh_frame_hdr:000000000000C7B2                 db    0
.eh_frame_hdr:000000000000C7B3                 db    0
.eh_frame_hdr:000000000000C7B4                 db  18h
.eh_frame_hdr:000000000000C7B5                 db 0E0h
.eh_frame_hdr:000000000000C7B6                 db 0FFh
.eh_frame_hdr:000000000000C7B7                 db 0FFh
.eh_frame_hdr:000000000000C7B8                 db 0B0h
.eh_frame_hdr:000000000000C7B9                 db  1Ch
.eh_frame_hdr:000000000000C7BA                 db    0
.eh_frame_hdr:000000000000C7BB                 db    0
.eh_frame_hdr:000000000000C7BC                 db  38h ; 8
.eh_frame_hdr:000000000000C7BD                 db 0E0h
.eh_frame_hdr:000000000000C7BE                 db 0FFh
.eh_frame_hdr:000000000000C7BF                 db 0FFh
.eh_frame_hdr:000000000000C7C0                 db 0C4h
.eh_frame_hdr:000000000000C7C1                 db  1Ch
.eh_frame_hdr:000000000000C7C2                 db    0
.eh_frame_hdr:000000000000C7C3                 db    0
.eh_frame_hdr:000000000000C7C4                 db  48h ; H
.eh_frame_hdr:000000000000C7C5                 db 0E0h
.eh_frame_hdr:000000000000C7C6                 db 0FFh
.eh_frame_hdr:000000000000C7C7                 db 0FFh
.eh_frame_hdr:000000000000C7C8                 db 0D8h
.eh_frame_hdr:000000000000C7C9                 db  1Ch
.eh_frame_hdr:000000000000C7CA                 db    0
.eh_frame_hdr:000000000000C7CB                 db    0
.eh_frame_hdr:000000000000C7CC                 db  88h
.eh_frame_hdr:000000000000C7CD                 db 0E0h
.eh_frame_hdr:000000000000C7CE                 db 0FFh
.eh_frame_hdr:000000000000C7CF                 db 0FFh
.eh_frame_hdr:000000000000C7D0                 db 0ECh
.eh_frame_hdr:000000000000C7D1                 db  1Ch
.eh_frame_hdr:000000000000C7D2                 db    0
.eh_frame_hdr:000000000000C7D3                 db    0
.eh_frame_hdr:000000000000C7D4                 db 0C8h
.eh_frame_hdr:000000000000C7D5                 db 0E0h
.eh_frame_hdr:000000000000C7D6                 db 0FFh
.eh_frame_hdr:000000000000C7D7                 db 0FFh
.eh_frame_hdr:000000000000C7D8                 db    0
.eh_frame_hdr:000000000000C7D9                 db  1Dh
.eh_frame_hdr:000000000000C7DA                 db    0
.eh_frame_hdr:000000000000C7DB                 db    0
.eh_frame_hdr:000000000000C7DC                 db    8
.eh_frame_hdr:000000000000C7DD                 db 0E1h
.eh_frame_hdr:000000000000C7DE                 db 0FFh
.eh_frame_hdr:000000000000C7DF                 db 0FFh
.eh_frame_hdr:000000000000C7E0                 db  20h
.eh_frame_hdr:000000000000C7E1                 db  1Dh
.eh_frame_hdr:000000000000C7E2                 db    0
.eh_frame_hdr:000000000000C7E3                 db    0
.eh_frame_hdr:000000000000C7E4                 db  78h ; x
.eh_frame_hdr:000000000000C7E5                 db 0E1h
.eh_frame_hdr:000000000000C7E6                 db 0FFh
.eh_frame_hdr:000000000000C7E7                 db 0FFh
.eh_frame_hdr:000000000000C7E8                 db  40h ; @
.eh_frame_hdr:000000000000C7E9                 db  1Dh
.eh_frame_hdr:000000000000C7EA                 db    0
.eh_frame_hdr:000000000000C7EB                 db    0
.eh_frame_hdr:000000000000C7EC                 db 0F8h
.eh_frame_hdr:000000000000C7ED                 db 0E1h
.eh_frame_hdr:000000000000C7EE                 db 0FFh
.eh_frame_hdr:000000000000C7EF                 db 0FFh
.eh_frame_hdr:000000000000C7F0                 db 0A0h
.eh_frame_hdr:000000000000C7F1                 db  1Dh
.eh_frame_hdr:000000000000C7F2                 db    0
.eh_frame_hdr:000000000000C7F3                 db    0
.eh_frame_hdr:000000000000C7F4                 db  38h ; 8
.eh_frame_hdr:000000000000C7F5                 db 0E2h
.eh_frame_hdr:000000000000C7F6                 db 0FFh
.eh_frame_hdr:000000000000C7F7                 db 0FFh
.eh_frame_hdr:000000000000C7F8                 db 0D8h
.eh_frame_hdr:000000000000C7F9                 db  1Dh
.eh_frame_hdr:000000000000C7FA                 db    0
.eh_frame_hdr:000000000000C7FB                 db    0
.eh_frame_hdr:000000000000C7FC                 db 0B8h
.eh_frame_hdr:000000000000C7FD                 db 0E2h
.eh_frame_hdr:000000000000C7FE                 db 0FFh
.eh_frame_hdr:000000000000C7FF                 db 0FFh
.eh_frame_hdr:000000000000C800                 db  10h
.eh_frame_hdr:000000000000C801                 db  1Eh
.eh_frame_hdr:000000000000C802                 db    0
.eh_frame_hdr:000000000000C803                 db    0
.eh_frame_hdr:000000000000C804                 db  38h ; 8
.eh_frame_hdr:000000000000C805                 db 0E5h
.eh_frame_hdr:000000000000C806                 db 0FFh
.eh_frame_hdr:000000000000C807                 db 0FFh
.eh_frame_hdr:000000000000C808                 db  48h ; H
.eh_frame_hdr:000000000000C809                 db  1Eh
.eh_frame_hdr:000000000000C80A                 db    0
.eh_frame_hdr:000000000000C80B                 db    0
.eh_frame_hdr:000000000000C80C                 db  48h ; H
.eh_frame_hdr:000000000000C80D                 db 0E5h
.eh_frame_hdr:000000000000C80E                 db 0FFh
.eh_frame_hdr:000000000000C80F                 db 0FFh
.eh_frame_hdr:000000000000C810                 db  60h ; `
.eh_frame_hdr:000000000000C811                 db  1Eh
.eh_frame_hdr:000000000000C812                 db    0
.eh_frame_hdr:000000000000C813                 db    0
.eh_frame_hdr:000000000000C814                 db 0B8h
.eh_frame_hdr:000000000000C815                 db 0E5h
.eh_frame_hdr:000000000000C816                 db 0FFh
.eh_frame_hdr:000000000000C817                 db 0FFh
.eh_frame_hdr:000000000000C818                 db 0A8h
.eh_frame_hdr:000000000000C819                 db  1Eh
.eh_frame_hdr:000000000000C81A                 db    0
.eh_frame_hdr:000000000000C81B                 db    0
.eh_frame_hdr:000000000000C81C                 db 0C8h
.eh_frame_hdr:000000000000C81D                 db 0E5h
.eh_frame_hdr:000000000000C81E                 db 0FFh
.eh_frame_hdr:000000000000C81F                 db 0FFh
.eh_frame_hdr:000000000000C820                 db 0C0h
.eh_frame_hdr:000000000000C821                 db  1Eh
.eh_frame_hdr:000000000000C822                 db    0
.eh_frame_hdr:000000000000C823                 db    0
.eh_frame_hdr:000000000000C823 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000C823
LOAD:000000000000C824 ; ===========================================================================
LOAD:000000000000C824
LOAD:000000000000C824 ; Segment type: Pure code
LOAD:000000000000C824 ; Segment permissions: Read/Execute
LOAD:000000000000C824 LOAD            segment byte public 'CODE' use64
LOAD:000000000000C824                 assume cs:LOAD
LOAD:000000000000C824                 ;org 0C824h
LOAD:000000000000C824                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000C824                 align 8
LOAD:000000000000C824 LOAD            ends
LOAD:000000000000C824
.eh_frame:000000000000C828 ; ===========================================================================
.eh_frame:000000000000C828
.eh_frame:000000000000C828 ; Segment type: Pure data
.eh_frame:000000000000C828 ; Segment permissions: Read
.eh_frame:000000000000C828 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000C828                 assume cs:_eh_frame
.eh_frame:000000000000C828                 ;org 0C828h
.eh_frame:000000000000C828                 db  14h
.eh_frame:000000000000C829                 db    0
.eh_frame:000000000000C82A                 db    0
.eh_frame:000000000000C82B                 db    0
.eh_frame:000000000000C82C                 db    0
.eh_frame:000000000000C82D                 db    0
.eh_frame:000000000000C82E                 db    0
.eh_frame:000000000000C82F                 db    0
.eh_frame:000000000000C830                 db    1
.eh_frame:000000000000C831                 db  7Ah ; z
.eh_frame:000000000000C832                 db  52h ; R
.eh_frame:000000000000C833                 db    0
.eh_frame:000000000000C834                 db    1
.eh_frame:000000000000C835                 db  78h ; x
.eh_frame:000000000000C836                 db  10h
.eh_frame:000000000000C837                 db    1
.eh_frame:000000000000C838                 db  1Bh
.eh_frame:000000000000C839                 db  0Ch
.eh_frame:000000000000C83A                 db    7
.eh_frame:000000000000C83B                 db    8
.eh_frame:000000000000C83C                 db  90h
.eh_frame:000000000000C83D                 db    1
.eh_frame:000000000000C83E                 db    7
.eh_frame:000000000000C83F                 db  10h
.eh_frame:000000000000C840                 db  14h
.eh_frame:000000000000C841                 db    0
.eh_frame:000000000000C842                 db    0
.eh_frame:000000000000C843                 db    0
.eh_frame:000000000000C844                 db  1Ch
.eh_frame:000000000000C845                 db    0
.eh_frame:000000000000C846                 db    0
.eh_frame:000000000000C847                 db    0
.eh_frame:000000000000C848                 db  48h ; H
.eh_frame:000000000000C849                 db  5Bh ; [
.eh_frame:000000000000C84A                 db 0FFh
.eh_frame:000000000000C84B                 db 0FFh
.eh_frame:000000000000C84C                 db  2Bh ; +
.eh_frame:000000000000C84D                 db    0
.eh_frame:000000000000C84E                 db    0
.eh_frame:000000000000C84F                 db    0
.eh_frame:000000000000C850                 db    0
.eh_frame:000000000000C851                 db    0
.eh_frame:000000000000C852                 db    0
.eh_frame:000000000000C853                 db    0
.eh_frame:000000000000C854                 db    0
.eh_frame:000000000000C855                 db    0
.eh_frame:000000000000C856                 db    0
.eh_frame:000000000000C857                 db    0
.eh_frame:000000000000C858                 db  14h
.eh_frame:000000000000C859                 db    0
.eh_frame:000000000000C85A                 db    0
.eh_frame:000000000000C85B                 db    0
.eh_frame:000000000000C85C                 db    0
.eh_frame:000000000000C85D                 db    0
.eh_frame:000000000000C85E                 db    0
.eh_frame:000000000000C85F                 db    0
.eh_frame:000000000000C860                 db    1
.eh_frame:000000000000C861                 db  7Ah ; z
.eh_frame:000000000000C862                 db  52h ; R
.eh_frame:000000000000C863                 db    0
.eh_frame:000000000000C864                 db    1
.eh_frame:000000000000C865                 db  78h ; x
.eh_frame:000000000000C866                 db  10h
.eh_frame:000000000000C867                 db    1
.eh_frame:000000000000C868                 db  1Bh
.eh_frame:000000000000C869                 db  0Ch
.eh_frame:000000000000C86A                 db    7
.eh_frame:000000000000C86B                 db    8
.eh_frame:000000000000C86C                 db  90h
.eh_frame:000000000000C86D                 db    1
.eh_frame:000000000000C86E                 db    0
.eh_frame:000000000000C86F                 db    0
.eh_frame:000000000000C870                 db  24h ; $
.eh_frame:000000000000C871                 db    0
.eh_frame:000000000000C872                 db    0
.eh_frame:000000000000C873                 db    0
.eh_frame:000000000000C874                 db  1Ch
.eh_frame:000000000000C875                 db    0
.eh_frame:000000000000C876                 db    0
.eh_frame:000000000000C877                 db    0
.eh_frame:000000000000C878                 db    8
.eh_frame:000000000000C879                 db  51h ; Q
.eh_frame:000000000000C87A                 db 0FFh
.eh_frame:000000000000C87B                 db 0FFh
.eh_frame:000000000000C87C                 db  20h
.eh_frame:000000000000C87D                 db    4
.eh_frame:000000000000C87E                 db    0
.eh_frame:000000000000C87F                 db    0
.eh_frame:000000000000C880                 db    0
.eh_frame:000000000000C881                 db  0Eh
.eh_frame:000000000000C882                 db  10h
.eh_frame:000000000000C883                 db  46h ; F
.eh_frame:000000000000C884                 db  0Eh
.eh_frame:000000000000C885                 db  18h
.eh_frame:000000000000C886                 db  4Ah ; J
.eh_frame:000000000000C887                 db  0Fh
.eh_frame:000000000000C888                 db  0Bh
.eh_frame:000000000000C889                 db  77h ; w
.eh_frame:000000000000C88A                 db    8
.eh_frame:000000000000C88B                 db  80h
.eh_frame:000000000000C88C                 db    0
.eh_frame:000000000000C88D                 db  3Fh ; ?
.eh_frame:000000000000C88E                 db  1Ah
.eh_frame:000000000000C88F                 db  3Bh ; ;
.eh_frame:000000000000C890                 db  2Ah ; *
.eh_frame:000000000000C891                 db  33h ; 3
.eh_frame:000000000000C892                 db  24h ; $
.eh_frame:000000000000C893                 db  22h ; "
.eh_frame:000000000000C894                 db    0
.eh_frame:000000000000C895                 db    0
.eh_frame:000000000000C896                 db    0
.eh_frame:000000000000C897                 db    0
.eh_frame:000000000000C898                 db  14h
.eh_frame:000000000000C899                 db    0
.eh_frame:000000000000C89A                 db    0
.eh_frame:000000000000C89B                 db    0
.eh_frame:000000000000C89C                 db  44h ; D
.eh_frame:000000000000C89D                 db    0
.eh_frame:000000000000C89E                 db    0
.eh_frame:000000000000C89F                 db    0
.eh_frame:000000000000C8A0                 db    0
.eh_frame:000000000000C8A1                 db  55h ; U
.eh_frame:000000000000C8A2                 db 0FFh
.eh_frame:000000000000C8A3                 db 0FFh
.eh_frame:000000000000C8A4                 db  10h
.eh_frame:000000000000C8A5                 db    0
.eh_frame:000000000000C8A6                 db    0
.eh_frame:000000000000C8A7                 db    0
.eh_frame:000000000000C8A8                 db    0
.eh_frame:000000000000C8A9                 db    0
.eh_frame:000000000000C8AA                 db    0
.eh_frame:000000000000C8AB                 db    0
.eh_frame:000000000000C8AC                 db    0
.eh_frame:000000000000C8AD                 db    0
.eh_frame:000000000000C8AE                 db    0
.eh_frame:000000000000C8AF                 db    0
.eh_frame:000000000000C8B0                 db  28h ; (
.eh_frame:000000000000C8B1                 db    0
.eh_frame:000000000000C8B2                 db    0
.eh_frame:000000000000C8B3                 db    0
.eh_frame:000000000000C8B4                 db  5Ch ; \
.eh_frame:000000000000C8B5                 db    0
.eh_frame:000000000000C8B6                 db    0
.eh_frame:000000000000C8B7                 db    0
.eh_frame:000000000000C8B8                 db 0E8h
.eh_frame:000000000000C8B9                 db  5Bh ; [
.eh_frame:000000000000C8BA                 db 0FFh
.eh_frame:000000000000C8BB                 db 0FFh
.eh_frame:000000000000C8BC                 db  4Ah ; J
.eh_frame:000000000000C8BD                 db    4
.eh_frame:000000000000C8BE                 db    0
.eh_frame:000000000000C8BF                 db    0
.eh_frame:000000000000C8C0                 db    0
.eh_frame:000000000000C8C1                 db  42h ; B
.eh_frame:000000000000C8C2                 db  0Eh
.eh_frame:000000000000C8C3                 db  10h
.eh_frame:000000000000C8C4                 db  8Dh
.eh_frame:000000000000C8C5                 db    2
.eh_frame:000000000000C8C6                 db  42h ; B
.eh_frame:000000000000C8C7                 db  0Eh
.eh_frame:000000000000C8C8                 db  18h
.eh_frame:000000000000C8C9                 db  8Ch
.eh_frame:000000000000C8CA                 db    3
.eh_frame:000000000000C8CB                 db  46h ; F
.eh_frame:000000000000C8CC                 db  0Eh
.eh_frame:000000000000C8CD                 db  20h
.eh_frame:000000000000C8CE                 db  86h
.eh_frame:000000000000C8CF                 db    4
.eh_frame:000000000000C8D0                 db  41h ; A
.eh_frame:000000000000C8D1                 db  0Eh
.eh_frame:000000000000C8D2                 db  28h ; (
.eh_frame:000000000000C8D3                 db  83h
.eh_frame:000000000000C8D4                 db    5
.eh_frame:000000000000C8D5                 db  49h ; I
.eh_frame:000000000000C8D6                 db  0Eh
.eh_frame:000000000000C8D7                 db 0B0h
.eh_frame:000000000000C8D8                 db    1
.eh_frame:000000000000C8D9                 db    0
.eh_frame:000000000000C8DA                 db    0
.eh_frame:000000000000C8DB                 db    0
.eh_frame:000000000000C8DC                 db  58h ; X
.eh_frame:000000000000C8DD                 db    0
.eh_frame:000000000000C8DE                 db    0
.eh_frame:000000000000C8DF                 db    0
.eh_frame:000000000000C8E0                 db  88h
.eh_frame:000000000000C8E1                 db    0
.eh_frame:000000000000C8E2                 db    0
.eh_frame:000000000000C8E3                 db    0
.eh_frame:000000000000C8E4                 db 0CCh
.eh_frame:000000000000C8E5                 db  54h ; T
.eh_frame:000000000000C8E6                 db 0FFh
.eh_frame:000000000000C8E7                 db 0FFh
.eh_frame:000000000000C8E8                 db 0D9h
.eh_frame:000000000000C8E9                 db    5
.eh_frame:000000000000C8EA                 db    0
.eh_frame:000000000000C8EB                 db    0
.eh_frame:000000000000C8EC                 db    0
.eh_frame:000000000000C8ED                 db  42h ; B
.eh_frame:000000000000C8EE                 db  0Eh
.eh_frame:000000000000C8EF                 db  10h
.eh_frame:000000000000C8F0                 db  8Eh
.eh_frame:000000000000C8F1                 db    2
.eh_frame:000000000000C8F2                 db  42h ; B
.eh_frame:000000000000C8F3                 db  0Eh
.eh_frame:000000000000C8F4                 db  18h
.eh_frame:000000000000C8F5                 db  8Dh
.eh_frame:000000000000C8F6                 db    3
.eh_frame:000000000000C8F7                 db  49h ; I
.eh_frame:000000000000C8F8                 db  0Eh
.eh_frame:000000000000C8F9                 db  20h
.eh_frame:000000000000C8FA                 db  8Ch
.eh_frame:000000000000C8FB                 db    4
.eh_frame:000000000000C8FC                 db  41h ; A
.eh_frame:000000000000C8FD                 db  0Eh
.eh_frame:000000000000C8FE                 db  28h ; (
.eh_frame:000000000000C8FF                 db  86h
.eh_frame:000000000000C900                 db    5
.eh_frame:000000000000C901                 db  43h ; C
.eh_frame:000000000000C902                 db  0Eh
.eh_frame:000000000000C903                 db  30h ; 0
.eh_frame:000000000000C904                 db  83h
.eh_frame:000000000000C905                 db    6
.eh_frame:000000000000C906                 db  50h ; P
.eh_frame:000000000000C907                 db  0Eh
.eh_frame:000000000000C908                 db 0F0h
.eh_frame:000000000000C909                 db    1
.eh_frame:000000000000C90A                 db    3
.eh_frame:000000000000C90B                 db 0E5h
.eh_frame:000000000000C90C                 db    1
.eh_frame:000000000000C90D                 db  0Eh
.eh_frame:000000000000C90E                 db 0F8h
.eh_frame:000000000000C90F                 db    1
.eh_frame:000000000000C910                 db  49h ; I
.eh_frame:000000000000C911                 db  0Eh
.eh_frame:000000000000C912                 db  80h
.eh_frame:000000000000C913                 db    2
.eh_frame:000000000000C914                 db  4Fh ; O
.eh_frame:000000000000C915                 db  0Eh
.eh_frame:000000000000C916                 db  88h
.eh_frame:000000000000C917                 db    2
.eh_frame:000000000000C918                 db  5Dh ; ]
.eh_frame:000000000000C919                 db  0Eh
.eh_frame:000000000000C91A                 db  90h
.eh_frame:000000000000C91B                 db    2
.eh_frame:000000000000C91C                 db  4Bh ; K
.eh_frame:000000000000C91D                 db  0Eh
.eh_frame:000000000000C91E                 db 0F0h
.eh_frame:000000000000C91F                 db    1
.eh_frame:000000000000C920                 db    3
.eh_frame:000000000000C921                 db 0C4h
.eh_frame:000000000000C922                 db    1
.eh_frame:000000000000C923                 db  0Ah
.eh_frame:000000000000C924                 db  0Eh
.eh_frame:000000000000C925                 db  30h ; 0
.eh_frame:000000000000C926                 db  41h ; A
.eh_frame:000000000000C927                 db  0Eh
.eh_frame:000000000000C928                 db  28h ; (
.eh_frame:000000000000C929                 db  41h ; A
.eh_frame:000000000000C92A                 db  0Eh
.eh_frame:000000000000C92B                 db  20h
.eh_frame:000000000000C92C                 db  42h ; B
.eh_frame:000000000000C92D                 db  0Eh
.eh_frame:000000000000C92E                 db  18h
.eh_frame:000000000000C92F                 db  42h ; B
.eh_frame:000000000000C930                 db  0Eh
.eh_frame:000000000000C931                 db  10h
.eh_frame:000000000000C932                 db  42h ; B
.eh_frame:000000000000C933                 db  0Eh
.eh_frame:000000000000C934                 db    8
.eh_frame:000000000000C935                 db  41h ; A
.eh_frame:000000000000C936                 db  0Bh
.eh_frame:000000000000C937                 db    0
.eh_frame:000000000000C938                 db  38h ; 8
.eh_frame:000000000000C939                 db    0
.eh_frame:000000000000C93A                 db    0
.eh_frame:000000000000C93B                 db    0
.eh_frame:000000000000C93C                 db 0E4h
.eh_frame:000000000000C93D                 db    0
.eh_frame:000000000000C93E                 db    0
.eh_frame:000000000000C93F                 db    0
.eh_frame:000000000000C940                 db 0B0h
.eh_frame:000000000000C941                 db  5Fh ; _
.eh_frame:000000000000C942                 db 0FFh
.eh_frame:000000000000C943                 db 0FFh
.eh_frame:000000000000C944                 db  4Dh ; M
.eh_frame:000000000000C945                 db    2
.eh_frame:000000000000C946                 db    0
.eh_frame:000000000000C947                 db    0
.eh_frame:000000000000C948                 db    0
.eh_frame:000000000000C949                 db  42h ; B
.eh_frame:000000000000C94A                 db  0Eh
.eh_frame:000000000000C94B                 db  10h
.eh_frame:000000000000C94C                 db  8Dh
.eh_frame:000000000000C94D                 db    2
.eh_frame:000000000000C94E                 db  42h ; B
.eh_frame:000000000000C94F                 db  0Eh
.eh_frame:000000000000C950                 db  18h
.eh_frame:000000000000C951                 db  8Ch
.eh_frame:000000000000C952                 db    3
.eh_frame:000000000000C953                 db  44h ; D
.eh_frame:000000000000C954                 db  0Eh
.eh_frame:000000000000C955                 db  20h
.eh_frame:000000000000C956                 db  86h
.eh_frame:000000000000C957                 db    4
.eh_frame:000000000000C958                 db  41h ; A
.eh_frame:000000000000C959                 db  0Eh
.eh_frame:000000000000C95A                 db  28h ; (
.eh_frame:000000000000C95B                 db  83h
.eh_frame:000000000000C95C                 db    5
.eh_frame:000000000000C95D                 db  51h ; Q
.eh_frame:000000000000C95E                 db  0Eh
.eh_frame:000000000000C95F                 db 0D0h
.eh_frame:000000000000C960                 db    1
.eh_frame:000000000000C961                 db    2
.eh_frame:000000000000C962                 db  59h ; Y
.eh_frame:000000000000C963                 db  0Ah
.eh_frame:000000000000C964                 db  0Eh
.eh_frame:000000000000C965                 db  28h ; (
.eh_frame:000000000000C966                 db  41h ; A
.eh_frame:000000000000C967                 db  0Eh
.eh_frame:000000000000C968                 db  20h
.eh_frame:000000000000C969                 db  41h ; A
.eh_frame:000000000000C96A                 db  0Eh
.eh_frame:000000000000C96B                 db  18h
.eh_frame:000000000000C96C                 db  42h ; B
.eh_frame:000000000000C96D                 db  0Eh
.eh_frame:000000000000C96E                 db  10h
.eh_frame:000000000000C96F                 db  42h ; B
.eh_frame:000000000000C970                 db  0Eh
.eh_frame:000000000000C971                 db    8
.eh_frame:000000000000C972                 db  47h ; G
.eh_frame:000000000000C973                 db  0Bh
.eh_frame:000000000000C974                 db  20h
.eh_frame:000000000000C975                 db    0
.eh_frame:000000000000C976                 db    0
.eh_frame:000000000000C977                 db    0
.eh_frame:000000000000C978                 db  20h
.eh_frame:000000000000C979                 db    1
.eh_frame:000000000000C97A                 db    0
.eh_frame:000000000000C97B                 db    0
.eh_frame:000000000000C97C                 db 0C4h
.eh_frame:000000000000C97D                 db  61h ; a
.eh_frame:000000000000C97E                 db 0FFh
.eh_frame:000000000000C97F                 db 0FFh
.eh_frame:000000000000C980                 db  71h ; q
.eh_frame:000000000000C981                 db    0
.eh_frame:000000000000C982                 db    0
.eh_frame:000000000000C983                 db    0
.eh_frame:000000000000C984                 db    0
.eh_frame:000000000000C985                 db  41h ; A
.eh_frame:000000000000C986                 db  0Eh
.eh_frame:000000000000C987                 db  10h
.eh_frame:000000000000C988                 db  83h
.eh_frame:000000000000C989                 db    2
.eh_frame:000000000000C98A                 db  55h ; U
.eh_frame:000000000000C98B                 db  0Ah
.eh_frame:000000000000C98C                 db  0Eh
.eh_frame:000000000000C98D                 db    8
.eh_frame:000000000000C98E                 db  4Ah ; J
.eh_frame:000000000000C98F                 db  0Bh
.eh_frame:000000000000C990                 db  78h ; x
.eh_frame:000000000000C991                 db  0Ah
.eh_frame:000000000000C992                 db  0Eh
.eh_frame:000000000000C993                 db    8
.eh_frame:000000000000C994                 db  48h ; H
.eh_frame:000000000000C995                 db  0Bh
.eh_frame:000000000000C996                 db    0
.eh_frame:000000000000C997                 db    0
.eh_frame:000000000000C998                 db  4Ch ; L
.eh_frame:000000000000C999                 db    0
.eh_frame:000000000000C99A                 db    0
.eh_frame:000000000000C99B                 db    0
.eh_frame:000000000000C99C                 db  44h ; D
.eh_frame:000000000000C99D                 db    1
.eh_frame:000000000000C99E                 db    0
.eh_frame:000000000000C99F                 db    0
.eh_frame:000000000000C9A0                 db  20h
.eh_frame:000000000000C9A1                 db  62h ; b
.eh_frame:000000000000C9A2                 db 0FFh
.eh_frame:000000000000C9A3                 db 0FFh
.eh_frame:000000000000C9A4                 db 0C8h
.eh_frame:000000000000C9A5                 db    4
.eh_frame:000000000000C9A6                 db    0
.eh_frame:000000000000C9A7                 db    0
.eh_frame:000000000000C9A8                 db    0
.eh_frame:000000000000C9A9                 db  42h ; B
.eh_frame:000000000000C9AA                 db  0Eh
.eh_frame:000000000000C9AB                 db  10h
.eh_frame:000000000000C9AC                 db  8Fh
.eh_frame:000000000000C9AD                 db    2
.eh_frame:000000000000C9AE                 db  42h ; B
.eh_frame:000000000000C9AF                 db  0Eh
.eh_frame:000000000000C9B0                 db  18h
.eh_frame:000000000000C9B1                 db  8Eh
.eh_frame:000000000000C9B2                 db    3
.eh_frame:000000000000C9B3                 db  42h ; B
.eh_frame:000000000000C9B4                 db  0Eh
.eh_frame:000000000000C9B5                 db  20h
.eh_frame:000000000000C9B6                 db  8Dh
.eh_frame:000000000000C9B7                 db    4
.eh_frame:000000000000C9B8                 db  42h ; B
.eh_frame:000000000000C9B9                 db  0Eh
.eh_frame:000000000000C9BA                 db  28h ; (
.eh_frame:000000000000C9BB                 db  8Ch
.eh_frame:000000000000C9BC                 db    5
.eh_frame:000000000000C9BD                 db  44h ; D
.eh_frame:000000000000C9BE                 db  0Eh
.eh_frame:000000000000C9BF                 db  30h ; 0
.eh_frame:000000000000C9C0                 db  86h
.eh_frame:000000000000C9C1                 db    6
.eh_frame:000000000000C9C2                 db  41h ; A
.eh_frame:000000000000C9C3                 db  0Eh
.eh_frame:000000000000C9C4                 db  38h ; 8
.eh_frame:000000000000C9C5                 db  83h
.eh_frame:000000000000C9C6                 db    7
.eh_frame:000000000000C9C7                 db  4Ah ; J
.eh_frame:000000000000C9C8                 db  0Eh
.eh_frame:000000000000C9C9                 db  80h
.eh_frame:000000000000C9CA                 db    2
.eh_frame:000000000000C9CB                 db    3
.eh_frame:000000000000C9CC                 db  3Eh ; >
.eh_frame:000000000000C9CD                 db    1
.eh_frame:000000000000C9CE                 db  0Ah
.eh_frame:000000000000C9CF                 db  0Eh
.eh_frame:000000000000C9D0                 db  38h ; 8
.eh_frame:000000000000C9D1                 db  41h ; A
.eh_frame:000000000000C9D2                 db  0Eh
.eh_frame:000000000000C9D3                 db  30h ; 0
.eh_frame:000000000000C9D4                 db  41h ; A
.eh_frame:000000000000C9D5                 db  0Eh
.eh_frame:000000000000C9D6                 db  28h ; (
.eh_frame:000000000000C9D7                 db  42h ; B
.eh_frame:000000000000C9D8                 db  0Eh
.eh_frame:000000000000C9D9                 db  20h
.eh_frame:000000000000C9DA                 db  42h ; B
.eh_frame:000000000000C9DB                 db  0Eh
.eh_frame:000000000000C9DC                 db  18h
.eh_frame:000000000000C9DD                 db  42h ; B
.eh_frame:000000000000C9DE                 db  0Eh
.eh_frame:000000000000C9DF                 db  10h
.eh_frame:000000000000C9E0                 db  42h ; B
.eh_frame:000000000000C9E1                 db  0Eh
.eh_frame:000000000000C9E2                 db    8
.eh_frame:000000000000C9E3                 db  41h ; A
.eh_frame:000000000000C9E4                 db  0Bh
.eh_frame:000000000000C9E5                 db    0
.eh_frame:000000000000C9E6                 db    0
.eh_frame:000000000000C9E7                 db    0
.eh_frame:000000000000C9E8                 db  4Ch ; L
.eh_frame:000000000000C9E9                 db    0
.eh_frame:000000000000C9EA                 db    0
.eh_frame:000000000000C9EB                 db    0
.eh_frame:000000000000C9EC                 db  94h
.eh_frame:000000000000C9ED                 db    1
.eh_frame:000000000000C9EE                 db    0
.eh_frame:000000000000C9EF                 db    0
.eh_frame:000000000000C9F0                 db 0A0h
.eh_frame:000000000000C9F1                 db  66h ; f
.eh_frame:000000000000C9F2                 db 0FFh
.eh_frame:000000000000C9F3                 db 0FFh
.eh_frame:000000000000C9F4                 db  5Fh ; _
.eh_frame:000000000000C9F5                 db    8
.eh_frame:000000000000C9F6                 db    0
.eh_frame:000000000000C9F7                 db    0
.eh_frame:000000000000C9F8                 db    0
.eh_frame:000000000000C9F9                 db  42h ; B
.eh_frame:000000000000C9FA                 db  0Eh
.eh_frame:000000000000C9FB                 db  10h
.eh_frame:000000000000C9FC                 db  8Fh
.eh_frame:000000000000C9FD                 db    2
.eh_frame:000000000000C9FE                 db  42h ; B
.eh_frame:000000000000C9FF                 db  0Eh
.eh_frame:000000000000CA00                 db  18h
.eh_frame:000000000000CA01                 db  8Eh
.eh_frame:000000000000CA02                 db    3
.eh_frame:000000000000CA03                 db  42h ; B
.eh_frame:000000000000CA04                 db  0Eh
.eh_frame:000000000000CA05                 db  20h
.eh_frame:000000000000CA06                 db  8Dh
.eh_frame:000000000000CA07                 db    4
.eh_frame:000000000000CA08                 db  42h ; B
.eh_frame:000000000000CA09                 db  0Eh
.eh_frame:000000000000CA0A                 db  28h ; (
.eh_frame:000000000000CA0B                 db  8Ch
.eh_frame:000000000000CA0C                 db    5
.eh_frame:000000000000CA0D                 db  41h ; A
.eh_frame:000000000000CA0E                 db  0Eh
.eh_frame:000000000000CA0F                 db  30h ; 0
.eh_frame:000000000000CA10                 db  86h
.eh_frame:000000000000CA11                 db    6
.eh_frame:000000000000CA12                 db  41h ; A
.eh_frame:000000000000CA13                 db  0Eh
.eh_frame:000000000000CA14                 db  38h ; 8
.eh_frame:000000000000CA15                 db  83h
.eh_frame:000000000000CA16                 db    7
.eh_frame:000000000000CA17                 db  47h ; G
.eh_frame:000000000000CA18                 db  0Eh
.eh_frame:000000000000CA19                 db  90h
.eh_frame:000000000000CA1A                 db    2
.eh_frame:000000000000CA1B                 db    3
.eh_frame:000000000000CA1C                 db  3Bh ; ;
.eh_frame:000000000000CA1D                 db    1
.eh_frame:000000000000CA1E                 db  0Ah
.eh_frame:000000000000CA1F                 db  0Eh
.eh_frame:000000000000CA20                 db  38h ; 8
.eh_frame:000000000000CA21                 db  41h ; A
.eh_frame:000000000000CA22                 db  0Eh
.eh_frame:000000000000CA23                 db  30h ; 0
.eh_frame:000000000000CA24                 db  41h ; A
.eh_frame:000000000000CA25                 db  0Eh
.eh_frame:000000000000CA26                 db  28h ; (
.eh_frame:000000000000CA27                 db  42h ; B
.eh_frame:000000000000CA28                 db  0Eh
.eh_frame:000000000000CA29                 db  20h
.eh_frame:000000000000CA2A                 db  42h ; B
.eh_frame:000000000000CA2B                 db  0Eh
.eh_frame:000000000000CA2C                 db  18h
.eh_frame:000000000000CA2D                 db  42h ; B
.eh_frame:000000000000CA2E                 db  0Eh
.eh_frame:000000000000CA2F                 db  10h
.eh_frame:000000000000CA30                 db  42h ; B
.eh_frame:000000000000CA31                 db  0Eh
.eh_frame:000000000000CA32                 db    8
.eh_frame:000000000000CA33                 db  4Ah ; J
.eh_frame:000000000000CA34                 db  0Bh
.eh_frame:000000000000CA35                 db    0
.eh_frame:000000000000CA36                 db    0
.eh_frame:000000000000CA37                 db    0
.eh_frame:000000000000CA38                 db  10h
.eh_frame:000000000000CA39                 db    0
.eh_frame:000000000000CA3A                 db    0
.eh_frame:000000000000CA3B                 db    0
.eh_frame:000000000000CA3C                 db 0E4h
.eh_frame:000000000000CA3D                 db    1
.eh_frame:000000000000CA3E                 db    0
.eh_frame:000000000000CA3F                 db    0
.eh_frame:000000000000CA40                 db 0B0h
.eh_frame:000000000000CA41                 db  6Eh ; n
.eh_frame:000000000000CA42                 db 0FFh
.eh_frame:000000000000CA43                 db 0FFh
.eh_frame:000000000000CA44                 db  0Ah
.eh_frame:000000000000CA45                 db    0
.eh_frame:000000000000CA46                 db    0
.eh_frame:000000000000CA47                 db    0
.eh_frame:000000000000CA48                 db    0
.eh_frame:000000000000CA49                 db    0
.eh_frame:000000000000CA4A                 db    0
.eh_frame:000000000000CA4B                 db    0
.eh_frame:000000000000CA4C                 db  48h ; H
.eh_frame:000000000000CA4D                 db    0
.eh_frame:000000000000CA4E                 db    0
.eh_frame:000000000000CA4F                 db    0
.eh_frame:000000000000CA50                 db 0F8h
.eh_frame:000000000000CA51                 db    1
.eh_frame:000000000000CA52                 db    0
.eh_frame:000000000000CA53                 db    0
.eh_frame:000000000000CA54                 db 0ACh
.eh_frame:000000000000CA55                 db  6Eh ; n
.eh_frame:000000000000CA56                 db 0FFh
.eh_frame:000000000000CA57                 db 0FFh
.eh_frame:000000000000CA58                 db  16h
.eh_frame:000000000000CA59                 db    1
.eh_frame:000000000000CA5A                 db    0
.eh_frame:000000000000CA5B                 db    0
.eh_frame:000000000000CA5C                 db    0
.eh_frame:000000000000CA5D                 db  42h ; B
.eh_frame:000000000000CA5E                 db  0Eh
.eh_frame:000000000000CA5F                 db  10h
.eh_frame:000000000000CA60                 db  8Fh
.eh_frame:000000000000CA61                 db    2
.eh_frame:000000000000CA62                 db  42h ; B
.eh_frame:000000000000CA63                 db  0Eh
.eh_frame:000000000000CA64                 db  18h
.eh_frame:000000000000CA65                 db  8Eh
.eh_frame:000000000000CA66                 db    3
.eh_frame:000000000000CA67                 db  45h ; E
.eh_frame:000000000000CA68                 db  0Eh
.eh_frame:000000000000CA69                 db  20h
.eh_frame:000000000000CA6A                 db  8Dh
.eh_frame:000000000000CA6B                 db    4
.eh_frame:000000000000CA6C                 db  42h ; B
.eh_frame:000000000000CA6D                 db  0Eh
.eh_frame:000000000000CA6E                 db  28h ; (
.eh_frame:000000000000CA6F                 db  8Ch
.eh_frame:000000000000CA70                 db    5
.eh_frame:000000000000CA71                 db  44h ; D
.eh_frame:000000000000CA72                 db  0Eh
.eh_frame:000000000000CA73                 db  30h ; 0
.eh_frame:000000000000CA74                 db  86h
.eh_frame:000000000000CA75                 db    6
.eh_frame:000000000000CA76                 db  41h ; A
.eh_frame:000000000000CA77                 db  0Eh
.eh_frame:000000000000CA78                 db  38h ; 8
.eh_frame:000000000000CA79                 db  83h
.eh_frame:000000000000CA7A                 db    7
.eh_frame:000000000000CA7B                 db  47h ; G
.eh_frame:000000000000CA7C                 db  0Eh
.eh_frame:000000000000CA7D                 db  60h ; `
.eh_frame:000000000000CA7E                 db    2
.eh_frame:000000000000CA7F                 db 0DEh
.eh_frame:000000000000CA80                 db  0Ah
.eh_frame:000000000000CA81                 db  0Eh
.eh_frame:000000000000CA82                 db  38h ; 8
.eh_frame:000000000000CA83                 db  41h ; A
.eh_frame:000000000000CA84                 db  0Eh
.eh_frame:000000000000CA85                 db  30h ; 0
.eh_frame:000000000000CA86                 db  41h ; A
.eh_frame:000000000000CA87                 db  0Eh
.eh_frame:000000000000CA88                 db  28h ; (
.eh_frame:000000000000CA89                 db  42h ; B
.eh_frame:000000000000CA8A                 db  0Eh
.eh_frame:000000000000CA8B                 db  20h
.eh_frame:000000000000CA8C                 db  42h ; B
.eh_frame:000000000000CA8D                 db  0Eh
.eh_frame:000000000000CA8E                 db  18h
.eh_frame:000000000000CA8F                 db  42h ; B
.eh_frame:000000000000CA90                 db  0Eh
.eh_frame:000000000000CA91                 db  10h
.eh_frame:000000000000CA92                 db  42h ; B
.eh_frame:000000000000CA93                 db  0Eh
.eh_frame:000000000000CA94                 db    8
.eh_frame:000000000000CA95                 db  41h ; A
.eh_frame:000000000000CA96                 db  0Bh
.eh_frame:000000000000CA97                 db    0
.eh_frame:000000000000CA98                 db  28h ; (
.eh_frame:000000000000CA99                 db    0
.eh_frame:000000000000CA9A                 db    0
.eh_frame:000000000000CA9B                 db    0
.eh_frame:000000000000CA9C                 db  44h ; D
.eh_frame:000000000000CA9D                 db    2
.eh_frame:000000000000CA9E                 db    0
.eh_frame:000000000000CA9F                 db    0
.eh_frame:000000000000CAA0                 db  80h
.eh_frame:000000000000CAA1                 db  6Fh ; o
.eh_frame:000000000000CAA2                 db 0FFh
.eh_frame:000000000000CAA3                 db 0FFh
.eh_frame:000000000000CAA4                 db  73h ; s
.eh_frame:000000000000CAA5                 db    0
.eh_frame:000000000000CAA6                 db    0
.eh_frame:000000000000CAA7                 db    0
.eh_frame:000000000000CAA8                 db    0
.eh_frame:000000000000CAA9                 db  46h ; F
.eh_frame:000000000000CAAA                 db  0Eh
.eh_frame:000000000000CAAB                 db  10h
.eh_frame:000000000000CAAC                 db  8Ch
.eh_frame:000000000000CAAD                 db    2
.eh_frame:000000000000CAAE                 db  46h ; F
.eh_frame:000000000000CAAF                 db  0Eh
.eh_frame:000000000000CAB0                 db  18h
.eh_frame:000000000000CAB1                 db  86h
.eh_frame:000000000000CAB2                 db    3
.eh_frame:000000000000CAB3                 db  44h ; D
.eh_frame:000000000000CAB4                 db  0Eh
.eh_frame:000000000000CAB5                 db  20h
.eh_frame:000000000000CAB6                 db  83h
.eh_frame:000000000000CAB7                 db    4
.eh_frame:000000000000CAB8                 db  7Fh ; 
.eh_frame:000000000000CAB9                 db  0Ah
.eh_frame:000000000000CABA                 db  0Eh
.eh_frame:000000000000CABB                 db  18h
.eh_frame:000000000000CABC                 db  41h ; A
.eh_frame:000000000000CABD                 db  0Eh
.eh_frame:000000000000CABE                 db  10h
.eh_frame:000000000000CABF                 db  42h ; B
.eh_frame:000000000000CAC0                 db  0Eh
.eh_frame:000000000000CAC1                 db    8
.eh_frame:000000000000CAC2                 db  4Eh ; N
.eh_frame:000000000000CAC3                 db  0Bh
.eh_frame:000000000000CAC4                 db  5Ch ; \
.eh_frame:000000000000CAC5                 db    0
.eh_frame:000000000000CAC6                 db    0
.eh_frame:000000000000CAC7                 db    0
.eh_frame:000000000000CAC8                 db  70h ; p
.eh_frame:000000000000CAC9                 db    2
.eh_frame:000000000000CACA                 db    0
.eh_frame:000000000000CACB                 db    0
.eh_frame:000000000000CACC                 db 0D4h
.eh_frame:000000000000CACD                 db  6Fh ; o
.eh_frame:000000000000CACE                 db 0FFh
.eh_frame:000000000000CACF                 db 0FFh
.eh_frame:000000000000CAD0                 db  20h
.eh_frame:000000000000CAD1                 db    1
.eh_frame:000000000000CAD2                 db    0
.eh_frame:000000000000CAD3                 db    0
.eh_frame:000000000000CAD4                 db    0
.eh_frame:000000000000CAD5                 db  42h ; B
.eh_frame:000000000000CAD6                 db  0Eh
.eh_frame:000000000000CAD7                 db  10h
.eh_frame:000000000000CAD8                 db  8Fh
.eh_frame:000000000000CAD9                 db    2
.eh_frame:000000000000CADA                 db  42h ; B
.eh_frame:000000000000CADB                 db  0Eh
.eh_frame:000000000000CADC                 db  18h
.eh_frame:000000000000CADD                 db  8Eh
.eh_frame:000000000000CADE                 db    3
.eh_frame:000000000000CADF                 db  45h ; E
.eh_frame:000000000000CAE0                 db  0Eh
.eh_frame:000000000000CAE1                 db  20h
.eh_frame:000000000000CAE2                 db  8Dh
.eh_frame:000000000000CAE3                 db    4
.eh_frame:000000000000CAE4                 db  42h ; B
.eh_frame:000000000000CAE5                 db  0Eh
.eh_frame:000000000000CAE6                 db  28h ; (
.eh_frame:000000000000CAE7                 db  8Ch
.eh_frame:000000000000CAE8                 db    5
.eh_frame:000000000000CAE9                 db  43h ; C
.eh_frame:000000000000CAEA                 db  0Eh
.eh_frame:000000000000CAEB                 db  30h ; 0
.eh_frame:000000000000CAEC                 db  86h
.eh_frame:000000000000CAED                 db    6
.eh_frame:000000000000CAEE                 db  41h ; A
.eh_frame:000000000000CAEF                 db  0Eh
.eh_frame:000000000000CAF0                 db  38h ; 8
.eh_frame:000000000000CAF1                 db  83h
.eh_frame:000000000000CAF2                 db    7
.eh_frame:000000000000CAF3                 db  56h ; V
.eh_frame:000000000000CAF4                 db  0Eh
.eh_frame:000000000000CAF5                 db  40h ; @
.eh_frame:000000000000CAF6                 db    2
.eh_frame:000000000000CAF7                 db 0D3h
.eh_frame:000000000000CAF8                 db  0Ah
.eh_frame:000000000000CAF9                 db  0Eh
.eh_frame:000000000000CAFA                 db  38h ; 8
.eh_frame:000000000000CAFB                 db  41h ; A
.eh_frame:000000000000CAFC                 db  0Eh
.eh_frame:000000000000CAFD                 db  30h ; 0
.eh_frame:000000000000CAFE                 db  41h ; A
.eh_frame:000000000000CAFF                 db  0Eh
.eh_frame:000000000000CB00                 db  28h ; (
.eh_frame:000000000000CB01                 db  42h ; B
.eh_frame:000000000000CB02                 db  0Eh
.eh_frame:000000000000CB03                 db  20h
.eh_frame:000000000000CB04                 db  42h ; B
.eh_frame:000000000000CB05                 db  0Eh
.eh_frame:000000000000CB06                 db  18h
.eh_frame:000000000000CB07                 db  42h ; B
.eh_frame:000000000000CB08                 db  0Eh
.eh_frame:000000000000CB09                 db  10h
.eh_frame:000000000000CB0A                 db  42h ; B
.eh_frame:000000000000CB0B                 db  0Eh
.eh_frame:000000000000CB0C                 db    8
.eh_frame:000000000000CB0D                 db  46h ; F
.eh_frame:000000000000CB0E                 db  0Bh
.eh_frame:000000000000CB0F                 db  44h ; D
.eh_frame:000000000000CB10                 db  0Eh
.eh_frame:000000000000CB11                 db  38h ; 8
.eh_frame:000000000000CB12                 db  46h ; F
.eh_frame:000000000000CB13                 db  0Eh
.eh_frame:000000000000CB14                 db  30h ; 0
.eh_frame:000000000000CB15                 db  41h ; A
.eh_frame:000000000000CB16                 db  0Eh
.eh_frame:000000000000CB17                 db  28h ; (
.eh_frame:000000000000CB18                 db  42h ; B
.eh_frame:000000000000CB19                 db  0Eh
.eh_frame:000000000000CB1A                 db  20h
.eh_frame:000000000000CB1B                 db  42h ; B
.eh_frame:000000000000CB1C                 db  0Eh
.eh_frame:000000000000CB1D                 db  18h
.eh_frame:000000000000CB1E                 db  42h ; B
.eh_frame:000000000000CB1F                 db  0Eh
.eh_frame:000000000000CB20                 db  10h
.eh_frame:000000000000CB21                 db  42h ; B
.eh_frame:000000000000CB22                 db  0Eh
.eh_frame:000000000000CB23                 db    8
.eh_frame:000000000000CB24                 db  48h ; H
.eh_frame:000000000000CB25                 db    0
.eh_frame:000000000000CB26                 db    0
.eh_frame:000000000000CB27                 db    0
.eh_frame:000000000000CB28                 db 0D0h
.eh_frame:000000000000CB29                 db    2
.eh_frame:000000000000CB2A                 db    0
.eh_frame:000000000000CB2B                 db    0
.eh_frame:000000000000CB2C                 db  94h
.eh_frame:000000000000CB2D                 db  70h ; p
.eh_frame:000000000000CB2E                 db 0FFh
.eh_frame:000000000000CB2F                 db 0FFh
.eh_frame:000000000000CB30                 db  6Dh ; m
.eh_frame:000000000000CB31                 db    0
.eh_frame:000000000000CB32                 db    0
.eh_frame:000000000000CB33                 db    0
.eh_frame:000000000000CB34                 db    0
.eh_frame:000000000000CB35                 db  42h ; B
.eh_frame:000000000000CB36                 db  0Eh
.eh_frame:000000000000CB37                 db  10h
.eh_frame:000000000000CB38                 db  8Fh
.eh_frame:000000000000CB39                 db    2
.eh_frame:000000000000CB3A                 db  42h ; B
.eh_frame:000000000000CB3B                 db  0Eh
.eh_frame:000000000000CB3C                 db  18h
.eh_frame:000000000000CB3D                 db  8Eh
.eh_frame:000000000000CB3E                 db    3
.eh_frame:000000000000CB3F                 db  45h ; E
.eh_frame:000000000000CB40                 db  0Eh
.eh_frame:000000000000CB41                 db  20h
.eh_frame:000000000000CB42                 db  8Dh
.eh_frame:000000000000CB43                 db    4
.eh_frame:000000000000CB44                 db  42h ; B
.eh_frame:000000000000CB45                 db  0Eh
.eh_frame:000000000000CB46                 db  28h ; (
.eh_frame:000000000000CB47                 db  8Ch
.eh_frame:000000000000CB48                 db    5
.eh_frame:000000000000CB49                 db  44h ; D
.eh_frame:000000000000CB4A                 db  0Eh
.eh_frame:000000000000CB4B                 db  30h ; 0
.eh_frame:000000000000CB4C                 db  86h
.eh_frame:000000000000CB4D                 db    6
.eh_frame:000000000000CB4E                 db  41h ; A
.eh_frame:000000000000CB4F                 db  0Eh
.eh_frame:000000000000CB50                 db  38h ; 8
.eh_frame:000000000000CB51                 db  83h
.eh_frame:000000000000CB52                 db    7
.eh_frame:000000000000CB53                 db  50h ; P
.eh_frame:000000000000CB54                 db  0Eh
.eh_frame:000000000000CB55                 db  40h ; @
.eh_frame:000000000000CB56                 db  5Ah ; Z
.eh_frame:000000000000CB57                 db  0Ah
.eh_frame:000000000000CB58                 db  0Eh
.eh_frame:000000000000CB59                 db  38h ; 8
.eh_frame:000000000000CB5A                 db  41h ; A
.eh_frame:000000000000CB5B                 db  0Eh
.eh_frame:000000000000CB5C                 db  30h ; 0
.eh_frame:000000000000CB5D                 db  41h ; A
.eh_frame:000000000000CB5E                 db  0Eh
.eh_frame:000000000000CB5F                 db  28h ; (
.eh_frame:000000000000CB60                 db  42h ; B
.eh_frame:000000000000CB61                 db  0Eh
.eh_frame:000000000000CB62                 db  20h
.eh_frame:000000000000CB63                 db  42h ; B
.eh_frame:000000000000CB64                 db  0Eh
.eh_frame:000000000000CB65                 db  18h
.eh_frame:000000000000CB66                 db  42h ; B
.eh_frame:000000000000CB67                 db  0Eh
.eh_frame:000000000000CB68                 db  10h
.eh_frame:000000000000CB69                 db  42h ; B
.eh_frame:000000000000CB6A                 db  0Eh
.eh_frame:000000000000CB6B                 db    8
.eh_frame:000000000000CB6C                 db  41h ; A
.eh_frame:000000000000CB6D                 db  0Bh
.eh_frame:000000000000CB6E                 db    0
.eh_frame:000000000000CB6F                 db    0
.eh_frame:000000000000CB70                 db  3Ch ; <
.eh_frame:000000000000CB71                 db    0
.eh_frame:000000000000CB72                 db    0
.eh_frame:000000000000CB73                 db    0
.eh_frame:000000000000CB74                 db  1Ch
.eh_frame:000000000000CB75                 db    3
.eh_frame:000000000000CB76                 db    0
.eh_frame:000000000000CB77                 db    0
.eh_frame:000000000000CB78                 db 0B8h
.eh_frame:000000000000CB79                 db  70h ; p
.eh_frame:000000000000CB7A                 db 0FFh
.eh_frame:000000000000CB7B                 db 0FFh
.eh_frame:000000000000CB7C                 db  4Dh ; M
.eh_frame:000000000000CB7D                 db    0
.eh_frame:000000000000CB7E                 db    0
.eh_frame:000000000000CB7F                 db    0
.eh_frame:000000000000CB80                 db    0
.eh_frame:000000000000CB81                 db  42h ; B
.eh_frame:000000000000CB82                 db  0Eh
.eh_frame:000000000000CB83                 db  10h
.eh_frame:000000000000CB84                 db  8Eh
.eh_frame:000000000000CB85                 db    2
.eh_frame:000000000000CB86                 db  42h ; B
.eh_frame:000000000000CB87                 db  0Eh
.eh_frame:000000000000CB88                 db  18h
.eh_frame:000000000000CB89                 db  8Dh
.eh_frame:000000000000CB8A                 db    3
.eh_frame:000000000000CB8B                 db  42h ; B
.eh_frame:000000000000CB8C                 db  0Eh
.eh_frame:000000000000CB8D                 db  20h
.eh_frame:000000000000CB8E                 db  8Ch
.eh_frame:000000000000CB8F                 db    4
.eh_frame:000000000000CB90                 db  41h ; A
.eh_frame:000000000000CB91                 db  0Eh
.eh_frame:000000000000CB92                 db  28h ; (
.eh_frame:000000000000CB93                 db  86h
.eh_frame:000000000000CB94                 db    5
.eh_frame:000000000000CB95                 db  41h ; A
.eh_frame:000000000000CB96                 db  0Eh
.eh_frame:000000000000CB97                 db  30h ; 0
.eh_frame:000000000000CB98                 db  83h
.eh_frame:000000000000CB99                 db    6
.eh_frame:000000000000CB9A                 db  7Ah ; z
.eh_frame:000000000000CB9B                 db  0Eh
.eh_frame:000000000000CB9C                 db  28h ; (
.eh_frame:000000000000CB9D                 db  44h ; D
.eh_frame:000000000000CB9E                 db  0Eh
.eh_frame:000000000000CB9F                 db  20h
.eh_frame:000000000000CBA0                 db  42h ; B
.eh_frame:000000000000CBA1                 db  0Eh
.eh_frame:000000000000CBA2                 db  18h
.eh_frame:000000000000CBA3                 db  42h ; B
.eh_frame:000000000000CBA4                 db  0Eh
.eh_frame:000000000000CBA5                 db  10h
.eh_frame:000000000000CBA6                 db  42h ; B
.eh_frame:000000000000CBA7                 db  0Eh
.eh_frame:000000000000CBA8                 db    8
.eh_frame:000000000000CBA9                 db    0
.eh_frame:000000000000CBAA                 db    0
.eh_frame:000000000000CBAB                 db    0
.eh_frame:000000000000CBAC                 db    0
.eh_frame:000000000000CBAD                 db    0
.eh_frame:000000000000CBAE                 db    0
.eh_frame:000000000000CBAF                 db    0
.eh_frame:000000000000CBB0                 db  10h
.eh_frame:000000000000CBB1                 db    0
.eh_frame:000000000000CBB2                 db    0
.eh_frame:000000000000CBB3                 db    0
.eh_frame:000000000000CBB4                 db  5Ch ; \
.eh_frame:000000000000CBB5                 db    3
.eh_frame:000000000000CBB6                 db    0
.eh_frame:000000000000CBB7                 db    0
.eh_frame:000000000000CBB8                 db 0C8h
.eh_frame:000000000000CBB9                 db  70h ; p
.eh_frame:000000000000CBBA                 db 0FFh
.eh_frame:000000000000CBBB                 db 0FFh
.eh_frame:000000000000CBBC                 db    8
.eh_frame:000000000000CBBD                 db    0
.eh_frame:000000000000CBBE                 db    0
.eh_frame:000000000000CBBF                 db    0
.eh_frame:000000000000CBC0                 db    0
.eh_frame:000000000000CBC1                 db    0
.eh_frame:000000000000CBC2                 db    0
.eh_frame:000000000000CBC3                 db    0
.eh_frame:000000000000CBC4                 db  38h ; 8
.eh_frame:000000000000CBC5                 db    0
.eh_frame:000000000000CBC6                 db    0
.eh_frame:000000000000CBC7                 db    0
.eh_frame:000000000000CBC8                 db  70h ; p
.eh_frame:000000000000CBC9                 db    3
.eh_frame:000000000000CBCA                 db    0
.eh_frame:000000000000CBCB                 db    0
.eh_frame:000000000000CBCC                 db 0C4h
.eh_frame:000000000000CBCD                 db  70h ; p
.eh_frame:000000000000CBCE                 db 0FFh
.eh_frame:000000000000CBCF                 db 0FFh
.eh_frame:000000000000CBD0                 db    7
.eh_frame:000000000000CBD1                 db    1
.eh_frame:000000000000CBD2                 db    0
.eh_frame:000000000000CBD3                 db    0
.eh_frame:000000000000CBD4                 db    0
.eh_frame:000000000000CBD5                 db  42h ; B
.eh_frame:000000000000CBD6                 db  0Eh
.eh_frame:000000000000CBD7                 db  10h
.eh_frame:000000000000CBD8                 db  8Ch
.eh_frame:000000000000CBD9                 db    2
.eh_frame:000000000000CBDA                 db  41h ; A
.eh_frame:000000000000CBDB                 db  0Eh
.eh_frame:000000000000CBDC                 db  18h
.eh_frame:000000000000CBDD                 db  86h
.eh_frame:000000000000CBDE                 db    3
.eh_frame:000000000000CBDF                 db  41h ; A
.eh_frame:000000000000CBE0                 db  0Eh
.eh_frame:000000000000CBE1                 db  20h
.eh_frame:000000000000CBE2                 db  83h
.eh_frame:000000000000CBE3                 db    4
.eh_frame:000000000000CBE4                 db  65h ; e
.eh_frame:000000000000CBE5                 db  0Ah
.eh_frame:000000000000CBE6                 db  0Eh
.eh_frame:000000000000CBE7                 db  18h
.eh_frame:000000000000CBE8                 db  41h ; A
.eh_frame:000000000000CBE9                 db  0Eh
.eh_frame:000000000000CBEA                 db  10h
.eh_frame:000000000000CBEB                 db  42h ; B
.eh_frame:000000000000CBEC                 db  0Eh
.eh_frame:000000000000CBED                 db    8
.eh_frame:000000000000CBEE                 db  4Ch ; L
.eh_frame:000000000000CBEF                 db  0Bh
.eh_frame:000000000000CBF0                 db    2
.eh_frame:000000000000CBF1                 db 0ACh
.eh_frame:000000000000CBF2                 db  0Ah
.eh_frame:000000000000CBF3                 db  0Eh
.eh_frame:000000000000CBF4                 db  18h
.eh_frame:000000000000CBF5                 db  41h ; A
.eh_frame:000000000000CBF6                 db  0Eh
.eh_frame:000000000000CBF7                 db  10h
.eh_frame:000000000000CBF8                 db  42h ; B
.eh_frame:000000000000CBF9                 db  0Eh
.eh_frame:000000000000CBFA                 db    8
.eh_frame:000000000000CBFB                 db  49h ; I
.eh_frame:000000000000CBFC                 db  0Bh
.eh_frame:000000000000CBFD                 db    0
.eh_frame:000000000000CBFE                 db    0
.eh_frame:000000000000CBFF                 db    0
.eh_frame:000000000000CC00                 db  10h
.eh_frame:000000000000CC01                 db    0
.eh_frame:000000000000CC02                 db    0
.eh_frame:000000000000CC03                 db    0
.eh_frame:000000000000CC04                 db 0ACh
.eh_frame:000000000000CC05                 db    3
.eh_frame:000000000000CC06                 db    0
.eh_frame:000000000000CC07                 db    0
.eh_frame:000000000000CC08                 db  98h
.eh_frame:000000000000CC09                 db  71h ; q
.eh_frame:000000000000CC0A                 db 0FFh
.eh_frame:000000000000CC0B                 db 0FFh
.eh_frame:000000000000CC0C                 db    8
.eh_frame:000000000000CC0D                 db    0
.eh_frame:000000000000CC0E                 db    0
.eh_frame:000000000000CC0F                 db    0
.eh_frame:000000000000CC10                 db    0
.eh_frame:000000000000CC11                 db    0
.eh_frame:000000000000CC12                 db    0
.eh_frame:000000000000CC13                 db    0
.eh_frame:000000000000CC14                 db  10h
.eh_frame:000000000000CC15                 db    0
.eh_frame:000000000000CC16                 db    0
.eh_frame:000000000000CC17                 db    0
.eh_frame:000000000000CC18                 db 0C0h
.eh_frame:000000000000CC19                 db    3
.eh_frame:000000000000CC1A                 db    0
.eh_frame:000000000000CC1B                 db    0
.eh_frame:000000000000CC1C                 db  94h
.eh_frame:000000000000CC1D                 db  71h ; q
.eh_frame:000000000000CC1E                 db 0FFh
.eh_frame:000000000000CC1F                 db 0FFh
.eh_frame:000000000000CC20                 db    8
.eh_frame:000000000000CC21                 db    0
.eh_frame:000000000000CC22                 db    0
.eh_frame:000000000000CC23                 db    0
.eh_frame:000000000000CC24                 db    0
.eh_frame:000000000000CC25                 db    0
.eh_frame:000000000000CC26                 db    0
.eh_frame:000000000000CC27                 db    0
.eh_frame:000000000000CC28                 db  2Ch ; ,
.eh_frame:000000000000CC29                 db    0
.eh_frame:000000000000CC2A                 db    0
.eh_frame:000000000000CC2B                 db    0
.eh_frame:000000000000CC2C                 db 0D4h
.eh_frame:000000000000CC2D                 db    3
.eh_frame:000000000000CC2E                 db    0
.eh_frame:000000000000CC2F                 db    0
.eh_frame:000000000000CC30                 db  90h
.eh_frame:000000000000CC31                 db  71h ; q
.eh_frame:000000000000CC32                 db 0FFh
.eh_frame:000000000000CC33                 db 0FFh
.eh_frame:000000000000CC34                 db 0A4h
.eh_frame:000000000000CC35                 db    0
.eh_frame:000000000000CC36                 db    0
.eh_frame:000000000000CC37                 db    0
.eh_frame:000000000000CC38                 db    0
.eh_frame:000000000000CC39                 db  41h ; A
.eh_frame:000000000000CC3A                 db  0Eh
.eh_frame:000000000000CC3B                 db  10h
.eh_frame:000000000000CC3C                 db  86h
.eh_frame:000000000000CC3D                 db    2
.eh_frame:000000000000CC3E                 db  41h ; A
.eh_frame:000000000000CC3F                 db  0Eh
.eh_frame:000000000000CC40                 db  18h
.eh_frame:000000000000CC41                 db  83h
.eh_frame:000000000000CC42                 db    3
.eh_frame:000000000000CC43                 db  44h ; D
.eh_frame:000000000000CC44                 db  0Eh
.eh_frame:000000000000CC45                 db  20h
.eh_frame:000000000000CC46                 db  7Ah ; z
.eh_frame:000000000000CC47                 db  0Ah
.eh_frame:000000000000CC48                 db  0Eh
.eh_frame:000000000000CC49                 db  18h
.eh_frame:000000000000CC4A                 db  41h ; A
.eh_frame:000000000000CC4B                 db  0Eh
.eh_frame:000000000000CC4C                 db  10h
.eh_frame:000000000000CC4D                 db  41h ; A
.eh_frame:000000000000CC4E                 db  0Eh
.eh_frame:000000000000CC4F                 db    8
.eh_frame:000000000000CC50                 db  41h ; A
.eh_frame:000000000000CC51                 db  0Bh
.eh_frame:000000000000CC52                 db    0
.eh_frame:000000000000CC53                 db    0
.eh_frame:000000000000CC54                 db    0
.eh_frame:000000000000CC55                 db    0
.eh_frame:000000000000CC56                 db    0
.eh_frame:000000000000CC57                 db    0
.eh_frame:000000000000CC58                 db  10h
.eh_frame:000000000000CC59                 db    0
.eh_frame:000000000000CC5A                 db    0
.eh_frame:000000000000CC5B                 db    0
.eh_frame:000000000000CC5C                 db    4
.eh_frame:000000000000CC5D                 db    4
.eh_frame:000000000000CC5E                 db    0
.eh_frame:000000000000CC5F                 db    0
.eh_frame:000000000000CC60                 db  10h
.eh_frame:000000000000CC61                 db  72h ; r
.eh_frame:000000000000CC62                 db 0FFh
.eh_frame:000000000000CC63                 db 0FFh
.eh_frame:000000000000CC64                 db  5Ch ; \
.eh_frame:000000000000CC65                 db    0
.eh_frame:000000000000CC66                 db    0
.eh_frame:000000000000CC67                 db    0
.eh_frame:000000000000CC68                 db    0
.eh_frame:000000000000CC69                 db    0
.eh_frame:000000000000CC6A                 db    0
.eh_frame:000000000000CC6B                 db    0
.eh_frame:000000000000CC6C                 db  28h ; (
.eh_frame:000000000000CC6D                 db    0
.eh_frame:000000000000CC6E                 db    0
.eh_frame:000000000000CC6F                 db    0
.eh_frame:000000000000CC70                 db  18h
.eh_frame:000000000000CC71                 db    4
.eh_frame:000000000000CC72                 db    0
.eh_frame:000000000000CC73                 db    0
.eh_frame:000000000000CC74                 db  5Ch ; \
.eh_frame:000000000000CC75                 db  72h ; r
.eh_frame:000000000000CC76                 db 0FFh
.eh_frame:000000000000CC77                 db 0FFh
.eh_frame:000000000000CC78                 db  47h ; G
.eh_frame:000000000000CC79                 db    0
.eh_frame:000000000000CC7A                 db    0
.eh_frame:000000000000CC7B                 db    0
.eh_frame:000000000000CC7C                 db    0
.eh_frame:000000000000CC7D                 db  41h ; A
.eh_frame:000000000000CC7E                 db  0Eh
.eh_frame:000000000000CC7F                 db  10h
.eh_frame:000000000000CC80                 db  83h
.eh_frame:000000000000CC81                 db    2
.eh_frame:000000000000CC82                 db  5Ah ; Z
.eh_frame:000000000000CC83                 db  0Ah
.eh_frame:000000000000CC84                 db  0Eh
.eh_frame:000000000000CC85                 db    8
.eh_frame:000000000000CC86                 db  45h ; E
.eh_frame:000000000000CC87                 db  0Bh
.eh_frame:000000000000CC88                 db  5Dh ; ]
.eh_frame:000000000000CC89                 db  0Ah
.eh_frame:000000000000CC8A                 db  0Eh
.eh_frame:000000000000CC8B                 db    8
.eh_frame:000000000000CC8C                 db  43h ; C
.eh_frame:000000000000CC8D                 db  0Bh
.eh_frame:000000000000CC8E                 db  46h ; F
.eh_frame:000000000000CC8F                 db  0Eh
.eh_frame:000000000000CC90                 db    8
.eh_frame:000000000000CC91                 db    0
.eh_frame:000000000000CC92                 db    0
.eh_frame:000000000000CC93                 db    0
.eh_frame:000000000000CC94                 db    0
.eh_frame:000000000000CC95                 db    0
.eh_frame:000000000000CC96                 db    0
.eh_frame:000000000000CC97                 db    0
.eh_frame:000000000000CC98                 db  14h
.eh_frame:000000000000CC99                 db    0
.eh_frame:000000000000CC9A                 db    0
.eh_frame:000000000000CC9B                 db    0
.eh_frame:000000000000CC9C                 db  44h ; D
.eh_frame:000000000000CC9D                 db    4
.eh_frame:000000000000CC9E                 db    0
.eh_frame:000000000000CC9F                 db    0
.eh_frame:000000000000CCA0                 db  80h
.eh_frame:000000000000CCA1                 db  72h ; r
.eh_frame:000000000000CCA2                 db 0FFh
.eh_frame:000000000000CCA3                 db 0FFh
.eh_frame:000000000000CCA4                 db 0EEh
.eh_frame:000000000000CCA5                 db    0
.eh_frame:000000000000CCA6                 db    0
.eh_frame:000000000000CCA7                 db    0
.eh_frame:000000000000CCA8                 db    0
.eh_frame:000000000000CCA9                 db    0
.eh_frame:000000000000CCAA                 db    0
.eh_frame:000000000000CCAB                 db    0
.eh_frame:000000000000CCAC                 db    0
.eh_frame:000000000000CCAD                 db    0
.eh_frame:000000000000CCAE                 db    0
.eh_frame:000000000000CCAF                 db    0
.eh_frame:000000000000CCB0                 db  1Ch
.eh_frame:000000000000CCB1                 db    0
.eh_frame:000000000000CCB2                 db    0
.eh_frame:000000000000CCB3                 db    0
.eh_frame:000000000000CCB4                 db  5Ch ; \
.eh_frame:000000000000CCB5                 db    4
.eh_frame:000000000000CCB6                 db    0
.eh_frame:000000000000CCB7                 db    0
.eh_frame:000000000000CCB8                 db  58h ; X
.eh_frame:000000000000CCB9                 db  73h ; s
.eh_frame:000000000000CCBA                 db 0FFh
.eh_frame:000000000000CCBB                 db 0FFh
.eh_frame:000000000000CCBC                 db  18h
.eh_frame:000000000000CCBD                 db    0
.eh_frame:000000000000CCBE                 db    0
.eh_frame:000000000000CCBF                 db    0
.eh_frame:000000000000CCC0                 db    0
.eh_frame:000000000000CCC1                 db  44h ; D
.eh_frame:000000000000CCC2                 db  0Eh
.eh_frame:000000000000CCC3                 db  10h
.eh_frame:000000000000CCC4                 db  4Eh ; N
.eh_frame:000000000000CCC5                 db  0Ah
.eh_frame:000000000000CCC6                 db  0Eh
.eh_frame:000000000000CCC7                 db    8
.eh_frame:000000000000CCC8                 db  41h ; A
.eh_frame:000000000000CCC9                 db  0Bh
.eh_frame:000000000000CCCA                 db    0
.eh_frame:000000000000CCCB                 db    0
.eh_frame:000000000000CCCC                 db    0
.eh_frame:000000000000CCCD                 db    0
.eh_frame:000000000000CCCE                 db    0
.eh_frame:000000000000CCCF                 db    0
.eh_frame:000000000000CCD0                 db  4Ch ; L
.eh_frame:000000000000CCD1                 db    0
.eh_frame:000000000000CCD2                 db    0
.eh_frame:000000000000CCD3                 db    0
.eh_frame:000000000000CCD4                 db  7Ch ; |
.eh_frame:000000000000CCD5                 db    4
.eh_frame:000000000000CCD6                 db    0
.eh_frame:000000000000CCD7                 db    0
.eh_frame:000000000000CCD8                 db  58h ; X
.eh_frame:000000000000CCD9                 db  73h ; s
.eh_frame:000000000000CCDA                 db 0FFh
.eh_frame:000000000000CCDB                 db 0FFh
.eh_frame:000000000000CCDC                 db 0FFh
.eh_frame:000000000000CCDD                 db    0
.eh_frame:000000000000CCDE                 db    0
.eh_frame:000000000000CCDF                 db    0
.eh_frame:000000000000CCE0                 db    0
.eh_frame:000000000000CCE1                 db  42h ; B
.eh_frame:000000000000CCE2                 db  0Eh
.eh_frame:000000000000CCE3                 db  10h
.eh_frame:000000000000CCE4                 db  8Fh
.eh_frame:000000000000CCE5                 db    2
.eh_frame:000000000000CCE6                 db  42h ; B
.eh_frame:000000000000CCE7                 db  0Eh
.eh_frame:000000000000CCE8                 db  18h
.eh_frame:000000000000CCE9                 db  8Eh
.eh_frame:000000000000CCEA                 db    3
.eh_frame:000000000000CCEB                 db  45h ; E
.eh_frame:000000000000CCEC                 db  0Eh
.eh_frame:000000000000CCED                 db  20h
.eh_frame:000000000000CCEE                 db  8Dh
.eh_frame:000000000000CCEF                 db    4
.eh_frame:000000000000CCF0                 db  42h ; B
.eh_frame:000000000000CCF1                 db  0Eh
.eh_frame:000000000000CCF2                 db  28h ; (
.eh_frame:000000000000CCF3                 db  8Ch
.eh_frame:000000000000CCF4                 db    5
.eh_frame:000000000000CCF5                 db  44h ; D
.eh_frame:000000000000CCF6                 db  0Eh
.eh_frame:000000000000CCF7                 db  30h ; 0
.eh_frame:000000000000CCF8                 db  86h
.eh_frame:000000000000CCF9                 db    6
.eh_frame:000000000000CCFA                 db  41h ; A
.eh_frame:000000000000CCFB                 db  0Eh
.eh_frame:000000000000CCFC                 db  38h ; 8
.eh_frame:000000000000CCFD                 db  83h
.eh_frame:000000000000CCFE                 db    7
.eh_frame:000000000000CCFF                 db  47h ; G
.eh_frame:000000000000CD00                 db  0Eh
.eh_frame:000000000000CD01                 db  50h ; P
.eh_frame:000000000000CD02                 db    2
.eh_frame:000000000000CD03                 db 0C3h
.eh_frame:000000000000CD04                 db  0Ah
.eh_frame:000000000000CD05                 db  0Eh
.eh_frame:000000000000CD06                 db  38h ; 8
.eh_frame:000000000000CD07                 db  44h ; D
.eh_frame:000000000000CD08                 db  0Eh
.eh_frame:000000000000CD09                 db  30h ; 0
.eh_frame:000000000000CD0A                 db  41h ; A
.eh_frame:000000000000CD0B                 db  0Eh
.eh_frame:000000000000CD0C                 db  28h ; (
.eh_frame:000000000000CD0D                 db  42h ; B
.eh_frame:000000000000CD0E                 db  0Eh
.eh_frame:000000000000CD0F                 db  20h
.eh_frame:000000000000CD10                 db  42h ; B
.eh_frame:000000000000CD11                 db  0Eh
.eh_frame:000000000000CD12                 db  18h
.eh_frame:000000000000CD13                 db  42h ; B
.eh_frame:000000000000CD14                 db  0Eh
.eh_frame:000000000000CD15                 db  10h
.eh_frame:000000000000CD16                 db  42h ; B
.eh_frame:000000000000CD17                 db  0Eh
.eh_frame:000000000000CD18                 db    8
.eh_frame:000000000000CD19                 db  49h ; I
.eh_frame:000000000000CD1A                 db  0Bh
.eh_frame:000000000000CD1B                 db    0
.eh_frame:000000000000CD1C                 db    0
.eh_frame:000000000000CD1D                 db    0
.eh_frame:000000000000CD1E                 db    0
.eh_frame:000000000000CD1F                 db    0
.eh_frame:000000000000CD20                 db  1Ch
.eh_frame:000000000000CD21                 db    0
.eh_frame:000000000000CD22                 db    0
.eh_frame:000000000000CD23                 db    0
.eh_frame:000000000000CD24                 db 0CCh
.eh_frame:000000000000CD25                 db    4
.eh_frame:000000000000CD26                 db    0
.eh_frame:000000000000CD27                 db    0
.eh_frame:000000000000CD28                 db    8
.eh_frame:000000000000CD29                 db  74h ; t
.eh_frame:000000000000CD2A                 db 0FFh
.eh_frame:000000000000CD2B                 db 0FFh
.eh_frame:000000000000CD2C                 db  9Fh
.eh_frame:000000000000CD2D                 db    0
.eh_frame:000000000000CD2E                 db    0
.eh_frame:000000000000CD2F                 db    0
.eh_frame:000000000000CD30                 db    0
.eh_frame:000000000000CD31                 db  44h ; D
.eh_frame:000000000000CD32                 db  0Eh
.eh_frame:000000000000CD33                 db  10h
.eh_frame:000000000000CD34                 db  83h
.eh_frame:000000000000CD35                 db    2
.eh_frame:000000000000CD36                 db    2
.eh_frame:000000000000CD37                 db  78h ; x
.eh_frame:000000000000CD38                 db  0Ah
.eh_frame:000000000000CD39                 db  0Eh
.eh_frame:000000000000CD3A                 db    8
.eh_frame:000000000000CD3B                 db  41h ; A
.eh_frame:000000000000CD3C                 db  0Bh
.eh_frame:000000000000CD3D                 db    0
.eh_frame:000000000000CD3E                 db    0
.eh_frame:000000000000CD3F                 db    0
.eh_frame:000000000000CD40                 db  40h ; @
.eh_frame:000000000000CD41                 db    0
.eh_frame:000000000000CD42                 db    0
.eh_frame:000000000000CD43                 db    0
.eh_frame:000000000000CD44                 db 0ECh
.eh_frame:000000000000CD45                 db    4
.eh_frame:000000000000CD46                 db    0
.eh_frame:000000000000CD47                 db    0
.eh_frame:000000000000CD48                 db  88h
.eh_frame:000000000000CD49                 db  74h ; t
.eh_frame:000000000000CD4A                 db 0FFh
.eh_frame:000000000000CD4B                 db 0FFh
.eh_frame:000000000000CD4C                 db 0E7h
.eh_frame:000000000000CD4D                 db    0
.eh_frame:000000000000CD4E                 db    0
.eh_frame:000000000000CD4F                 db    0
.eh_frame:000000000000CD50                 db    0
.eh_frame:000000000000CD51                 db  41h ; A
.eh_frame:000000000000CD52                 db  0Eh
.eh_frame:000000000000CD53                 db  10h
.eh_frame:000000000000CD54                 db  86h
.eh_frame:000000000000CD55                 db    2
.eh_frame:000000000000CD56                 db  41h ; A
.eh_frame:000000000000CD57                 db  0Eh
.eh_frame:000000000000CD58                 db  18h
.eh_frame:000000000000CD59                 db  83h
.eh_frame:000000000000CD5A                 db    3
.eh_frame:000000000000CD5B                 db  49h ; I
.eh_frame:000000000000CD5C                 db  0Eh
.eh_frame:000000000000CD5D                 db  20h
.eh_frame:000000000000CD5E                 db  6Eh ; n
.eh_frame:000000000000CD5F                 db  0Ah
.eh_frame:000000000000CD60                 db  0Eh
.eh_frame:000000000000CD61                 db  18h
.eh_frame:000000000000CD62                 db  41h ; A
.eh_frame:000000000000CD63                 db  0Eh
.eh_frame:000000000000CD64                 db  10h
.eh_frame:000000000000CD65                 db  41h ; A
.eh_frame:000000000000CD66                 db  0Eh
.eh_frame:000000000000CD67                 db    8
.eh_frame:000000000000CD68                 db  45h ; E
.eh_frame:000000000000CD69                 db  0Bh
.eh_frame:000000000000CD6A                 db    2
.eh_frame:000000000000CD6B                 db  4Ah ; J
.eh_frame:000000000000CD6C                 db  0Ah
.eh_frame:000000000000CD6D                 db  0Eh
.eh_frame:000000000000CD6E                 db  18h
.eh_frame:000000000000CD6F                 db  41h ; A
.eh_frame:000000000000CD70                 db  0Eh
.eh_frame:000000000000CD71                 db  10h
.eh_frame:000000000000CD72                 db  41h ; A
.eh_frame:000000000000CD73                 db  0Eh
.eh_frame:000000000000CD74                 db    8
.eh_frame:000000000000CD75                 db  44h ; D
.eh_frame:000000000000CD76                 db  0Bh
.eh_frame:000000000000CD77                 db    2
.eh_frame:000000000000CD78                 db  54h ; T
.eh_frame:000000000000CD79                 db  0Eh
.eh_frame:000000000000CD7A                 db  18h
.eh_frame:000000000000CD7B                 db  41h ; A
.eh_frame:000000000000CD7C                 db  0Eh
.eh_frame:000000000000CD7D                 db  10h
.eh_frame:000000000000CD7E                 db  41h ; A
.eh_frame:000000000000CD7F                 db  0Eh
.eh_frame:000000000000CD80                 db    8
.eh_frame:000000000000CD81                 db    0
.eh_frame:000000000000CD82                 db    0
.eh_frame:000000000000CD83                 db    0
.eh_frame:000000000000CD84                 db  74h ; t
.eh_frame:000000000000CD85                 db    0
.eh_frame:000000000000CD86                 db    0
.eh_frame:000000000000CD87                 db    0
.eh_frame:000000000000CD88                 db  30h ; 0
.eh_frame:000000000000CD89                 db    5
.eh_frame:000000000000CD8A                 db    0
.eh_frame:000000000000CD8B                 db    0
.eh_frame:000000000000CD8C                 db  34h ; 4
.eh_frame:000000000000CD8D                 db  75h ; u
.eh_frame:000000000000CD8E                 db 0FFh
.eh_frame:000000000000CD8F                 db 0FFh
.eh_frame:000000000000CD90                 db  34h ; 4
.eh_frame:000000000000CD91                 db  12h
.eh_frame:000000000000CD92                 db    0
.eh_frame:000000000000CD93                 db    0
.eh_frame:000000000000CD94                 db    0
.eh_frame:000000000000CD95                 db  42h ; B
.eh_frame:000000000000CD96                 db  0Eh
.eh_frame:000000000000CD97                 db  10h
.eh_frame:000000000000CD98                 db  8Fh
.eh_frame:000000000000CD99                 db    2
.eh_frame:000000000000CD9A                 db  42h ; B
.eh_frame:000000000000CD9B                 db  0Eh
.eh_frame:000000000000CD9C                 db  18h
.eh_frame:000000000000CD9D                 db  8Eh
.eh_frame:000000000000CD9E                 db    3
.eh_frame:000000000000CD9F                 db  45h ; E
.eh_frame:000000000000CDA0                 db  0Eh
.eh_frame:000000000000CDA1                 db  20h
.eh_frame:000000000000CDA2                 db  8Dh
.eh_frame:000000000000CDA3                 db    4
.eh_frame:000000000000CDA4                 db  42h ; B
.eh_frame:000000000000CDA5                 db  0Eh
.eh_frame:000000000000CDA6                 db  28h ; (
.eh_frame:000000000000CDA7                 db  8Ch
.eh_frame:000000000000CDA8                 db    5
.eh_frame:000000000000CDA9                 db  44h ; D
.eh_frame:000000000000CDAA                 db  0Eh
.eh_frame:000000000000CDAB                 db  30h ; 0
.eh_frame:000000000000CDAC                 db  86h
.eh_frame:000000000000CDAD                 db    6
.eh_frame:000000000000CDAE                 db  41h ; A
.eh_frame:000000000000CDAF                 db  0Eh
.eh_frame:000000000000CDB0                 db  38h ; 8
.eh_frame:000000000000CDB1                 db  83h
.eh_frame:000000000000CDB2                 db    7
.eh_frame:000000000000CDB3                 db  53h ; S
.eh_frame:000000000000CDB4                 db  0Eh
.eh_frame:000000000000CDB5                 db 0F0h
.eh_frame:000000000000CDB6                 db    1
.eh_frame:000000000000CDB7                 db    3
.eh_frame:000000000000CDB8                 db  81h
.eh_frame:000000000000CDB9                 db  0Bh
.eh_frame:000000000000CDBA                 db  0Eh
.eh_frame:000000000000CDBB                 db 0F8h
.eh_frame:000000000000CDBC                 db    1
.eh_frame:000000000000CDBD                 db  4Ah ; J
.eh_frame:000000000000CDBE                 db  0Eh
.eh_frame:000000000000CDBF                 db  80h
.eh_frame:000000000000CDC0                 db    2
.eh_frame:000000000000CDC1                 db  44h ; D
.eh_frame:000000000000CDC2                 db  0Eh
.eh_frame:000000000000CDC3                 db  88h
.eh_frame:000000000000CDC4                 db    2
.eh_frame:000000000000CDC5                 db  45h ; E
.eh_frame:000000000000CDC6                 db  0Eh
.eh_frame:000000000000CDC7                 db  90h
.eh_frame:000000000000CDC8                 db    2
.eh_frame:000000000000CDC9                 db  5Fh ; _
.eh_frame:000000000000CDCA                 db  0Eh
.eh_frame:000000000000CDCB                 db 0F0h
.eh_frame:000000000000CDCC                 db    1
.eh_frame:000000000000CDCD                 db  64h ; d
.eh_frame:000000000000CDCE                 db  0Ah
.eh_frame:000000000000CDCF                 db  0Eh
.eh_frame:000000000000CDD0                 db  38h ; 8
.eh_frame:000000000000CDD1                 db  41h ; A
.eh_frame:000000000000CDD2                 db  0Eh
.eh_frame:000000000000CDD3                 db  30h ; 0
.eh_frame:000000000000CDD4                 db  41h ; A
.eh_frame:000000000000CDD5                 db  0Eh
.eh_frame:000000000000CDD6                 db  28h ; (
.eh_frame:000000000000CDD7                 db  42h ; B
.eh_frame:000000000000CDD8                 db  0Eh
.eh_frame:000000000000CDD9                 db  20h
.eh_frame:000000000000CDDA                 db  42h ; B
.eh_frame:000000000000CDDB                 db  0Eh
.eh_frame:000000000000CDDC                 db  18h
.eh_frame:000000000000CDDD                 db  42h ; B
.eh_frame:000000000000CDDE                 db  0Eh
.eh_frame:000000000000CDDF                 db  10h
.eh_frame:000000000000CDE0                 db  42h ; B
.eh_frame:000000000000CDE1                 db  0Eh
.eh_frame:000000000000CDE2                 db    8
.eh_frame:000000000000CDE3                 db  44h ; D
.eh_frame:000000000000CDE4                 db  0Bh
.eh_frame:000000000000CDE5                 db    3
.eh_frame:000000000000CDE6                 db  99h
.eh_frame:000000000000CDE7                 db    5
.eh_frame:000000000000CDE8                 db  0Eh
.eh_frame:000000000000CDE9                 db 0F8h
.eh_frame:000000000000CDEA                 db    1
.eh_frame:000000000000CDEB                 db  4Dh ; M
.eh_frame:000000000000CDEC                 db  0Eh
.eh_frame:000000000000CDED                 db  80h
.eh_frame:000000000000CDEE                 db    2
.eh_frame:000000000000CDEF                 db  44h ; D
.eh_frame:000000000000CDF0                 db  0Eh
.eh_frame:000000000000CDF1                 db  88h
.eh_frame:000000000000CDF2                 db    2
.eh_frame:000000000000CDF3                 db  47h ; G
.eh_frame:000000000000CDF4                 db  0Eh
.eh_frame:000000000000CDF5                 db  90h
.eh_frame:000000000000CDF6                 db    2
.eh_frame:000000000000CDF7                 db  5Bh ; [
.eh_frame:000000000000CDF8                 db  0Eh
.eh_frame:000000000000CDF9                 db 0F0h
.eh_frame:000000000000CDFA                 db    1
.eh_frame:000000000000CDFB                 db    0
.eh_frame:000000000000CDFC                 db  68h ; h
.eh_frame:000000000000CDFD                 db    0
.eh_frame:000000000000CDFE                 db    0
.eh_frame:000000000000CDFF                 db    0
.eh_frame:000000000000CE00                 db 0A8h
.eh_frame:000000000000CE01                 db    5
.eh_frame:000000000000CE02                 db    0
.eh_frame:000000000000CE03                 db    0
.eh_frame:000000000000CE04                 db 0FCh
.eh_frame:000000000000CE05                 db  86h
.eh_frame:000000000000CE06                 db 0FFh
.eh_frame:000000000000CE07                 db 0FFh
.eh_frame:000000000000CE08                 db 0ABh
.eh_frame:000000000000CE09                 db    1
.eh_frame:000000000000CE0A                 db    0
.eh_frame:000000000000CE0B                 db    0
.eh_frame:000000000000CE0C                 db    0
.eh_frame:000000000000CE0D                 db  42h ; B
.eh_frame:000000000000CE0E                 db  0Eh
.eh_frame:000000000000CE0F                 db  10h
.eh_frame:000000000000CE10                 db  8Fh
.eh_frame:000000000000CE11                 db    2
.eh_frame:000000000000CE12                 db  42h ; B
.eh_frame:000000000000CE13                 db  0Eh
.eh_frame:000000000000CE14                 db  18h
.eh_frame:000000000000CE15                 db  8Eh
.eh_frame:000000000000CE16                 db    3
.eh_frame:000000000000CE17                 db  45h ; E
.eh_frame:000000000000CE18                 db  0Eh
.eh_frame:000000000000CE19                 db  20h
.eh_frame:000000000000CE1A                 db  8Dh
.eh_frame:000000000000CE1B                 db    4
.eh_frame:000000000000CE1C                 db  42h ; B
.eh_frame:000000000000CE1D                 db  0Eh
.eh_frame:000000000000CE1E                 db  28h ; (
.eh_frame:000000000000CE1F                 db  8Ch
.eh_frame:000000000000CE20                 db    5
.eh_frame:000000000000CE21                 db  44h ; D
.eh_frame:000000000000CE22                 db  0Eh
.eh_frame:000000000000CE23                 db  30h ; 0
.eh_frame:000000000000CE24                 db  86h
.eh_frame:000000000000CE25                 db    6
.eh_frame:000000000000CE26                 db  41h ; A
.eh_frame:000000000000CE27                 db  0Eh
.eh_frame:000000000000CE28                 db  38h ; 8
.eh_frame:000000000000CE29                 db  83h
.eh_frame:000000000000CE2A                 db    7
.eh_frame:000000000000CE2B                 db  47h ; G
.eh_frame:000000000000CE2C                 db  0Eh
.eh_frame:000000000000CE2D                 db  60h ; `
.eh_frame:000000000000CE2E                 db    2
.eh_frame:000000000000CE2F                 db  99h
.eh_frame:000000000000CE30                 db  0Eh
.eh_frame:000000000000CE31                 db  68h ; h
.eh_frame:000000000000CE32                 db  5Fh ; _
.eh_frame:000000000000CE33                 db  0Eh
.eh_frame:000000000000CE34                 db  70h ; p
.eh_frame:000000000000CE35                 db  46h ; F
.eh_frame:000000000000CE36                 db  0Eh
.eh_frame:000000000000CE37                 db  78h ; x
.eh_frame:000000000000CE38                 db  42h ; B
.eh_frame:000000000000CE39                 db  0Eh
.eh_frame:000000000000CE3A                 db  80h
.eh_frame:000000000000CE3B                 db    1
.eh_frame:000000000000CE3C                 db  59h ; Y
.eh_frame:000000000000CE3D                 db  0Eh
.eh_frame:000000000000CE3E                 db  60h ; `
.eh_frame:000000000000CE3F                 db    2
.eh_frame:000000000000CE40                 db  40h ; @
.eh_frame:000000000000CE41                 db  0Eh
.eh_frame:000000000000CE42                 db  68h ; h
.eh_frame:000000000000CE43                 db  4Bh ; K
.eh_frame:000000000000CE44                 db  0Eh
.eh_frame:000000000000CE45                 db  70h ; p
.eh_frame:000000000000CE46                 db  43h ; C
.eh_frame:000000000000CE47                 db  0Eh
.eh_frame:000000000000CE48                 db  78h ; x
.eh_frame:000000000000CE49                 db  45h ; E
.eh_frame:000000000000CE4A                 db  0Eh
.eh_frame:000000000000CE4B                 db  80h
.eh_frame:000000000000CE4C                 db    1
.eh_frame:000000000000CE4D                 db  5Eh ; ^
.eh_frame:000000000000CE4E                 db  0Eh
.eh_frame:000000000000CE4F                 db  60h ; `
.eh_frame:000000000000CE50                 db  4Ch ; L
.eh_frame:000000000000CE51                 db  0Ah
.eh_frame:000000000000CE52                 db  0Eh
.eh_frame:000000000000CE53                 db  38h ; 8
.eh_frame:000000000000CE54                 db  44h ; D
.eh_frame:000000000000CE55                 db  0Eh
.eh_frame:000000000000CE56                 db  30h ; 0
.eh_frame:000000000000CE57                 db  41h ; A
.eh_frame:000000000000CE58                 db  0Eh
.eh_frame:000000000000CE59                 db  28h ; (
.eh_frame:000000000000CE5A                 db  42h ; B
.eh_frame:000000000000CE5B                 db  0Eh
.eh_frame:000000000000CE5C                 db  20h
.eh_frame:000000000000CE5D                 db  42h ; B
.eh_frame:000000000000CE5E                 db  0Eh
.eh_frame:000000000000CE5F                 db  18h
.eh_frame:000000000000CE60                 db  42h ; B
.eh_frame:000000000000CE61                 db  0Eh
.eh_frame:000000000000CE62                 db  10h
.eh_frame:000000000000CE63                 db  42h ; B
.eh_frame:000000000000CE64                 db  0Eh
.eh_frame:000000000000CE65                 db    8
.eh_frame:000000000000CE66                 db  46h ; F
.eh_frame:000000000000CE67                 db  0Bh
.eh_frame:000000000000CE68                 db  28h ; (
.eh_frame:000000000000CE69                 db    0
.eh_frame:000000000000CE6A                 db    0
.eh_frame:000000000000CE6B                 db    0
.eh_frame:000000000000CE6C                 db  14h
.eh_frame:000000000000CE6D                 db    6
.eh_frame:000000000000CE6E                 db    0
.eh_frame:000000000000CE6F                 db    0
.eh_frame:000000000000CE70                 db  40h ; @
.eh_frame:000000000000CE71                 db  88h
.eh_frame:000000000000CE72                 db 0FFh
.eh_frame:000000000000CE73                 db 0FFh
.eh_frame:000000000000CE74                 db  36h ; 6
.eh_frame:000000000000CE75                 db    0
.eh_frame:000000000000CE76                 db    0
.eh_frame:000000000000CE77                 db    0
.eh_frame:000000000000CE78                 db    0
.eh_frame:000000000000CE79                 db  42h ; B
.eh_frame:000000000000CE7A                 db  0Eh
.eh_frame:000000000000CE7B                 db  10h
.eh_frame:000000000000CE7C                 db  8Ch
.eh_frame:000000000000CE7D                 db    2
.eh_frame:000000000000CE7E                 db  41h ; A
.eh_frame:000000000000CE7F                 db  0Eh
.eh_frame:000000000000CE80                 db  18h
.eh_frame:000000000000CE81                 db  86h
.eh_frame:000000000000CE82                 db    3
.eh_frame:000000000000CE83                 db  41h ; A
.eh_frame:000000000000CE84                 db  0Eh
.eh_frame:000000000000CE85                 db  20h
.eh_frame:000000000000CE86                 db  83h
.eh_frame:000000000000CE87                 db    4
.eh_frame:000000000000CE88                 db  6Eh ; n
.eh_frame:000000000000CE89                 db  0Eh
.eh_frame:000000000000CE8A                 db  18h
.eh_frame:000000000000CE8B                 db  41h ; A
.eh_frame:000000000000CE8C                 db  0Eh
.eh_frame:000000000000CE8D                 db  10h
.eh_frame:000000000000CE8E                 db  42h ; B
.eh_frame:000000000000CE8F                 db  0Eh
.eh_frame:000000000000CE90                 db    8
.eh_frame:000000000000CE91                 db    0
.eh_frame:000000000000CE92                 db    0
.eh_frame:000000000000CE93                 db    0
.eh_frame:000000000000CE94                 db  10h
.eh_frame:000000000000CE95                 db    0
.eh_frame:000000000000CE96                 db    0
.eh_frame:000000000000CE97                 db    0
.eh_frame:000000000000CE98                 db  40h ; @
.eh_frame:000000000000CE99                 db    6
.eh_frame:000000000000CE9A                 db    0
.eh_frame:000000000000CE9B                 db    0
.eh_frame:000000000000CE9C                 db  54h ; T
.eh_frame:000000000000CE9D                 db  88h
.eh_frame:000000000000CE9E                 db 0FFh
.eh_frame:000000000000CE9F                 db 0FFh
.eh_frame:000000000000CEA0                 db  11h
.eh_frame:000000000000CEA1                 db    0
.eh_frame:000000000000CEA2                 db    0
.eh_frame:000000000000CEA3                 db    0
.eh_frame:000000000000CEA4                 db    0
.eh_frame:000000000000CEA5                 db    0
.eh_frame:000000000000CEA6                 db    0
.eh_frame:000000000000CEA7                 db    0
.eh_frame:000000000000CEA8                 db  10h
.eh_frame:000000000000CEA9                 db    0
.eh_frame:000000000000CEAA                 db    0
.eh_frame:000000000000CEAB                 db    0
.eh_frame:000000000000CEAC                 db  54h ; T
.eh_frame:000000000000CEAD                 db    6
.eh_frame:000000000000CEAE                 db    0
.eh_frame:000000000000CEAF                 db    0
.eh_frame:000000000000CEB0                 db  60h ; `
.eh_frame:000000000000CEB1                 db  88h
.eh_frame:000000000000CEB2                 db 0FFh
.eh_frame:000000000000CEB3                 db 0FFh
.eh_frame:000000000000CEB4                 db  11h
.eh_frame:000000000000CEB5                 db    0
.eh_frame:000000000000CEB6                 db    0
.eh_frame:000000000000CEB7                 db    0
.eh_frame:000000000000CEB8                 db    0
.eh_frame:000000000000CEB9                 db    0
.eh_frame:000000000000CEBA                 db    0
.eh_frame:000000000000CEBB                 db    0
.eh_frame:000000000000CEBC                 db  10h
.eh_frame:000000000000CEBD                 db    0
.eh_frame:000000000000CEBE                 db    0
.eh_frame:000000000000CEBF                 db    0
.eh_frame:000000000000CEC0                 db  68h ; h
.eh_frame:000000000000CEC1                 db    6
.eh_frame:000000000000CEC2                 db    0
.eh_frame:000000000000CEC3                 db    0
.eh_frame:000000000000CEC4                 db  6Ch ; l
.eh_frame:000000000000CEC5                 db  88h
.eh_frame:000000000000CEC6                 db 0FFh
.eh_frame:000000000000CEC7                 db 0FFh
.eh_frame:000000000000CEC8                 db  35h ; 5
.eh_frame:000000000000CEC9                 db    0
.eh_frame:000000000000CECA                 db    0
.eh_frame:000000000000CECB                 db    0
.eh_frame:000000000000CECC                 db    0
.eh_frame:000000000000CECD                 db    0
.eh_frame:000000000000CECE                 db    0
.eh_frame:000000000000CECF                 db    0
.eh_frame:000000000000CED0                 db  10h
.eh_frame:000000000000CED1                 db    0
.eh_frame:000000000000CED2                 db    0
.eh_frame:000000000000CED3                 db    0
.eh_frame:000000000000CED4                 db  7Ch ; |
.eh_frame:000000000000CED5                 db    6
.eh_frame:000000000000CED6                 db    0
.eh_frame:000000000000CED7                 db    0
.eh_frame:000000000000CED8                 db  98h
.eh_frame:000000000000CED9                 db  88h
.eh_frame:000000000000CEDA                 db 0FFh
.eh_frame:000000000000CEDB                 db 0FFh
.eh_frame:000000000000CEDC                 db  15h
.eh_frame:000000000000CEDD                 db    0
.eh_frame:000000000000CEDE                 db    0
.eh_frame:000000000000CEDF                 db    0
.eh_frame:000000000000CEE0                 db    0
.eh_frame:000000000000CEE1                 db    0
.eh_frame:000000000000CEE2                 db    0
.eh_frame:000000000000CEE3                 db    0
.eh_frame:000000000000CEE4                 db  10h
.eh_frame:000000000000CEE5                 db    0
.eh_frame:000000000000CEE6                 db    0
.eh_frame:000000000000CEE7                 db    0
.eh_frame:000000000000CEE8                 db  90h
.eh_frame:000000000000CEE9                 db    6
.eh_frame:000000000000CEEA                 db    0
.eh_frame:000000000000CEEB                 db    0
.eh_frame:000000000000CEEC                 db 0A4h
.eh_frame:000000000000CEED                 db  88h
.eh_frame:000000000000CEEE                 db 0FFh
.eh_frame:000000000000CEEF                 db 0FFh
.eh_frame:000000000000CEF0                 db  30h ; 0
.eh_frame:000000000000CEF1                 db    0
.eh_frame:000000000000CEF2                 db    0
.eh_frame:000000000000CEF3                 db    0
.eh_frame:000000000000CEF4                 db    0
.eh_frame:000000000000CEF5                 db  6Bh ; k
.eh_frame:000000000000CEF6                 db  0Eh
.eh_frame:000000000000CEF7                 db  10h
.eh_frame:000000000000CEF8                 db  50h ; P
.eh_frame:000000000000CEF9                 db    0
.eh_frame:000000000000CEFA                 db    0
.eh_frame:000000000000CEFB                 db    0
.eh_frame:000000000000CEFC                 db 0A4h
.eh_frame:000000000000CEFD                 db    6
.eh_frame:000000000000CEFE                 db    0
.eh_frame:000000000000CEFF                 db    0
.eh_frame:000000000000CF00                 db 0C0h
.eh_frame:000000000000CF01                 db  88h
.eh_frame:000000000000CF02                 db 0FFh
.eh_frame:000000000000CF03                 db 0FFh
.eh_frame:000000000000CF04                 db  74h ; t
.eh_frame:000000000000CF05                 db    0
.eh_frame:000000000000CF06                 db    0
.eh_frame:000000000000CF07                 db    0
.eh_frame:000000000000CF08                 db    0
.eh_frame:000000000000CF09                 db  42h ; B
.eh_frame:000000000000CF0A                 db  0Eh
.eh_frame:000000000000CF0B                 db  10h
.eh_frame:000000000000CF0C                 db  8Fh
.eh_frame:000000000000CF0D                 db    2
.eh_frame:000000000000CF0E                 db  42h ; B
.eh_frame:000000000000CF0F                 db  0Eh
.eh_frame:000000000000CF10                 db  18h
.eh_frame:000000000000CF11                 db  8Eh
.eh_frame:000000000000CF12                 db    3
.eh_frame:000000000000CF13                 db  49h ; I
.eh_frame:000000000000CF14                 db  0Eh
.eh_frame:000000000000CF15                 db  20h
.eh_frame:000000000000CF16                 db  8Dh
.eh_frame:000000000000CF17                 db    4
.eh_frame:000000000000CF18                 db  42h ; B
.eh_frame:000000000000CF19                 db  0Eh
.eh_frame:000000000000CF1A                 db  28h ; (
.eh_frame:000000000000CF1B                 db  8Ch
.eh_frame:000000000000CF1C                 db    5
.eh_frame:000000000000CF1D                 db  44h ; D
.eh_frame:000000000000CF1E                 db  0Eh
.eh_frame:000000000000CF1F                 db  30h ; 0
.eh_frame:000000000000CF20                 db  86h
.eh_frame:000000000000CF21                 db    6
.eh_frame:000000000000CF22                 db  41h ; A
.eh_frame:000000000000CF23                 db  0Eh
.eh_frame:000000000000CF24                 db  38h ; 8
.eh_frame:000000000000CF25                 db  83h
.eh_frame:000000000000CF26                 db    7
.eh_frame:000000000000CF27                 db  4Dh ; M
.eh_frame:000000000000CF28                 db  0Eh
.eh_frame:000000000000CF29                 db  50h ; P
.eh_frame:000000000000CF2A                 db  5Fh ; _
.eh_frame:000000000000CF2B                 db  0Eh
.eh_frame:000000000000CF2C                 db  58h ; X
.eh_frame:000000000000CF2D                 db  47h ; G
.eh_frame:000000000000CF2E                 db  0Eh
.eh_frame:000000000000CF2F                 db  60h ; `
.eh_frame:000000000000CF30                 db  46h ; F
.eh_frame:000000000000CF31                 db  0Eh
.eh_frame:000000000000CF32                 db  68h ; h
.eh_frame:000000000000CF33                 db  44h ; D
.eh_frame:000000000000CF34                 db  0Eh
.eh_frame:000000000000CF35                 db  70h ; p
.eh_frame:000000000000CF36                 db  58h ; X
.eh_frame:000000000000CF37                 db  0Eh
.eh_frame:000000000000CF38                 db  38h ; 8
.eh_frame:000000000000CF39                 db  41h ; A
.eh_frame:000000000000CF3A                 db  0Eh
.eh_frame:000000000000CF3B                 db  30h ; 0
.eh_frame:000000000000CF3C                 db  41h ; A
.eh_frame:000000000000CF3D                 db  0Eh
.eh_frame:000000000000CF3E                 db  28h ; (
.eh_frame:000000000000CF3F                 db  42h ; B
.eh_frame:000000000000CF40                 db  0Eh
.eh_frame:000000000000CF41                 db  20h
.eh_frame:000000000000CF42                 db  42h ; B
.eh_frame:000000000000CF43                 db  0Eh
.eh_frame:000000000000CF44                 db  18h
.eh_frame:000000000000CF45                 db  42h ; B
.eh_frame:000000000000CF46                 db  0Eh
.eh_frame:000000000000CF47                 db  10h
.eh_frame:000000000000CF48                 db  42h ; B
.eh_frame:000000000000CF49                 db  0Eh
.eh_frame:000000000000CF4A                 db    8
.eh_frame:000000000000CF4B                 db    0
.eh_frame:000000000000CF4C                 db  68h ; h
.eh_frame:000000000000CF4D                 db    0
.eh_frame:000000000000CF4E                 db    0
.eh_frame:000000000000CF4F                 db    0
.eh_frame:000000000000CF50                 db 0F8h
.eh_frame:000000000000CF51                 db    6
.eh_frame:000000000000CF52                 db    0
.eh_frame:000000000000CF53                 db    0
.eh_frame:000000000000CF54                 db 0ECh
.eh_frame:000000000000CF55                 db  88h
.eh_frame:000000000000CF56                 db 0FFh
.eh_frame:000000000000CF57                 db 0FFh
.eh_frame:000000000000CF58                 db 0E3h
.eh_frame:000000000000CF59                 db    0
.eh_frame:000000000000CF5A                 db    0
.eh_frame:000000000000CF5B                 db    0
.eh_frame:000000000000CF5C                 db    0
.eh_frame:000000000000CF5D                 db  42h ; B
.eh_frame:000000000000CF5E                 db  0Eh
.eh_frame:000000000000CF5F                 db  10h
.eh_frame:000000000000CF60                 db  8Fh
.eh_frame:000000000000CF61                 db    2
.eh_frame:000000000000CF62                 db  42h ; B
.eh_frame:000000000000CF63                 db  0Eh
.eh_frame:000000000000CF64                 db  18h
.eh_frame:000000000000CF65                 db  8Eh
.eh_frame:000000000000CF66                 db    3
.eh_frame:000000000000CF67                 db  49h ; I
.eh_frame:000000000000CF68                 db  0Eh
.eh_frame:000000000000CF69                 db  20h
.eh_frame:000000000000CF6A                 db  8Dh
.eh_frame:000000000000CF6B                 db    4
.eh_frame:000000000000CF6C                 db  42h ; B
.eh_frame:000000000000CF6D                 db  0Eh
.eh_frame:000000000000CF6E                 db  28h ; (
.eh_frame:000000000000CF6F                 db  8Ch
.eh_frame:000000000000CF70                 db    5
.eh_frame:000000000000CF71                 db  44h ; D
.eh_frame:000000000000CF72                 db  0Eh
.eh_frame:000000000000CF73                 db  30h ; 0
.eh_frame:000000000000CF74                 db  86h
.eh_frame:000000000000CF75                 db    6
.eh_frame:000000000000CF76                 db  41h ; A
.eh_frame:000000000000CF77                 db  0Eh
.eh_frame:000000000000CF78                 db  38h ; 8
.eh_frame:000000000000CF79                 db  83h
.eh_frame:000000000000CF7A                 db    7
.eh_frame:000000000000CF7B                 db  4Dh ; M
.eh_frame:000000000000CF7C                 db  0Eh
.eh_frame:000000000000CF7D                 db  70h ; p
.eh_frame:000000000000CF7E                 db  65h ; e
.eh_frame:000000000000CF7F                 db  0Eh
.eh_frame:000000000000CF80                 db  78h ; x
.eh_frame:000000000000CF81                 db  4Dh ; M
.eh_frame:000000000000CF82                 db  0Eh
.eh_frame:000000000000CF83                 db  80h
.eh_frame:000000000000CF84                 db    1
.eh_frame:000000000000CF85                 db  46h ; F
.eh_frame:000000000000CF86                 db  0Eh
.eh_frame:000000000000CF87                 db  88h
.eh_frame:000000000000CF88                 db    1
.eh_frame:000000000000CF89                 db  42h ; B
.eh_frame:000000000000CF8A                 db  0Eh
.eh_frame:000000000000CF8B                 db  90h
.eh_frame:000000000000CF8C                 db    1
.eh_frame:000000000000CF8D                 db  5Eh ; ^
.eh_frame:000000000000CF8E                 db  0Eh
.eh_frame:000000000000CF8F                 db  70h ; p
.eh_frame:000000000000CF90                 db  56h ; V
.eh_frame:000000000000CF91                 db  0Eh
.eh_frame:000000000000CF92                 db  78h ; x
.eh_frame:000000000000CF93                 db  43h ; C
.eh_frame:000000000000CF94                 db  0Eh
.eh_frame:000000000000CF95                 db  80h
.eh_frame:000000000000CF96                 db    1
.eh_frame:000000000000CF97                 db  43h ; C
.eh_frame:000000000000CF98                 db  0Eh
.eh_frame:000000000000CF99                 db  88h
.eh_frame:000000000000CF9A                 db    1
.eh_frame:000000000000CF9B                 db  56h ; V
.eh_frame:000000000000CF9C                 db  0Eh
.eh_frame:000000000000CF9D                 db  90h
.eh_frame:000000000000CF9E                 db    1
.eh_frame:000000000000CF9F                 db  52h ; R
.eh_frame:000000000000CFA0                 db  0Eh
.eh_frame:000000000000CFA1                 db  70h ; p
.eh_frame:000000000000CFA2                 db  5Bh ; [
.eh_frame:000000000000CFA3                 db  0Eh
.eh_frame:000000000000CFA4                 db  38h ; 8
.eh_frame:000000000000CFA5                 db  41h ; A
.eh_frame:000000000000CFA6                 db  0Eh
.eh_frame:000000000000CFA7                 db  30h ; 0
.eh_frame:000000000000CFA8                 db  41h ; A
.eh_frame:000000000000CFA9                 db  0Eh
.eh_frame:000000000000CFAA                 db  28h ; (
.eh_frame:000000000000CFAB                 db  42h ; B
.eh_frame:000000000000CFAC                 db  0Eh
.eh_frame:000000000000CFAD                 db  20h
.eh_frame:000000000000CFAE                 db  42h ; B
.eh_frame:000000000000CFAF                 db  0Eh
.eh_frame:000000000000CFB0                 db  18h
.eh_frame:000000000000CFB1                 db  42h ; B
.eh_frame:000000000000CFB2                 db  0Eh
.eh_frame:000000000000CFB3                 db  10h
.eh_frame:000000000000CFB4                 db  42h ; B
.eh_frame:000000000000CFB5                 db  0Eh
.eh_frame:000000000000CFB6                 db    8
.eh_frame:000000000000CFB7                 db    0
.eh_frame:000000000000CFB8                 db  10h
.eh_frame:000000000000CFB9                 db    0
.eh_frame:000000000000CFBA                 db    0
.eh_frame:000000000000CFBB                 db    0
.eh_frame:000000000000CFBC                 db  64h ; d
.eh_frame:000000000000CFBD                 db    7
.eh_frame:000000000000CFBE                 db    0
.eh_frame:000000000000CFBF                 db    0
.eh_frame:000000000000CFC0                 db  70h ; p
.eh_frame:000000000000CFC1                 db  89h
.eh_frame:000000000000CFC2                 db 0FFh
.eh_frame:000000000000CFC3                 db 0FFh
.eh_frame:000000000000CFC4                 db  0Ah
.eh_frame:000000000000CFC5                 db    0
.eh_frame:000000000000CFC6                 db    0
.eh_frame:000000000000CFC7                 db    0
.eh_frame:000000000000CFC8                 db    0
.eh_frame:000000000000CFC9                 db    0
.eh_frame:000000000000CFCA                 db    0
.eh_frame:000000000000CFCB                 db    0
.eh_frame:000000000000CFCC                 db  28h ; (
.eh_frame:000000000000CFCD                 db    0
.eh_frame:000000000000CFCE                 db    0
.eh_frame:000000000000CFCF                 db    0
.eh_frame:000000000000CFD0                 db  78h ; x
.eh_frame:000000000000CFD1                 db    7
.eh_frame:000000000000CFD2                 db    0
.eh_frame:000000000000CFD3                 db    0
.eh_frame:000000000000CFD4                 db  6Ch ; l
.eh_frame:000000000000CFD5                 db  89h
.eh_frame:000000000000CFD6                 db 0FFh
.eh_frame:000000000000CFD7                 db 0FFh
.eh_frame:000000000000CFD8                 db  93h
.eh_frame:000000000000CFD9                 db    0
.eh_frame:000000000000CFDA                 db    0
.eh_frame:000000000000CFDB                 db    0
.eh_frame:000000000000CFDC                 db    0
.eh_frame:000000000000CFDD                 db  48h ; H
.eh_frame:000000000000CFDE                 db  0Eh
.eh_frame:000000000000CFDF                 db  10h
.eh_frame:000000000000CFE0                 db  8Ch
.eh_frame:000000000000CFE1                 db    2
.eh_frame:000000000000CFE2                 db  48h ; H
.eh_frame:000000000000CFE3                 db  0Eh
.eh_frame:000000000000CFE4                 db  18h
.eh_frame:000000000000CFE5                 db  86h
.eh_frame:000000000000CFE6                 db    3
.eh_frame:000000000000CFE7                 db  41h ; A
.eh_frame:000000000000CFE8                 db  0Eh
.eh_frame:000000000000CFE9                 db  20h
.eh_frame:000000000000CFEA                 db  83h
.eh_frame:000000000000CFEB                 db    4
.eh_frame:000000000000CFEC                 db    2
.eh_frame:000000000000CFED                 db  74h ; t
.eh_frame:000000000000CFEE                 db  0Eh
.eh_frame:000000000000CFEF                 db  18h
.eh_frame:000000000000CFF0                 db  4Bh ; K
.eh_frame:000000000000CFF1                 db  0Eh
.eh_frame:000000000000CFF2                 db  10h
.eh_frame:000000000000CFF3                 db  42h ; B
.eh_frame:000000000000CFF4                 db  0Eh
.eh_frame:000000000000CFF5                 db    8
.eh_frame:000000000000CFF6                 db    0
.eh_frame:000000000000CFF7                 db    0
.eh_frame:000000000000CFF8                 db  10h
.eh_frame:000000000000CFF9                 db    0
.eh_frame:000000000000CFFA                 db    0
.eh_frame:000000000000CFFB                 db    0
.eh_frame:000000000000CFFC                 db 0A4h
.eh_frame:000000000000CFFD                 db    7
.eh_frame:000000000000CFFE                 db    0
.eh_frame:000000000000CFFF                 db    0
.eh_frame:000000000000D000                 db 0E0h
.eh_frame:000000000000D001                 db  89h
.eh_frame:000000000000D002                 db 0FFh
.eh_frame:000000000000D003                 db 0FFh
.eh_frame:000000000000D004                 db  13h
.eh_frame:000000000000D005                 db    0
.eh_frame:000000000000D006                 db    0
.eh_frame:000000000000D007                 db    0
.eh_frame:000000000000D008                 db    0
.eh_frame:000000000000D009                 db    0
.eh_frame:000000000000D00A                 db    0
.eh_frame:000000000000D00B                 db    0
.eh_frame:000000000000D00C                 db  10h
.eh_frame:000000000000D00D                 db    0
.eh_frame:000000000000D00E                 db    0
.eh_frame:000000000000D00F                 db    0
.eh_frame:000000000000D010                 db 0B8h
.eh_frame:000000000000D011                 db    7
.eh_frame:000000000000D012                 db    0
.eh_frame:000000000000D013                 db    0
.eh_frame:000000000000D014                 db 0ECh
.eh_frame:000000000000D015                 db  89h
.eh_frame:000000000000D016                 db 0FFh
.eh_frame:000000000000D017                 db 0FFh
.eh_frame:000000000000D018                 db  0Ch
.eh_frame:000000000000D019                 db    0
.eh_frame:000000000000D01A                 db    0
.eh_frame:000000000000D01B                 db    0
.eh_frame:000000000000D01C                 db    0
.eh_frame:000000000000D01D                 db    0
.eh_frame:000000000000D01E                 db    0
.eh_frame:000000000000D01F                 db    0
.eh_frame:000000000000D020                 db  10h
.eh_frame:000000000000D021                 db    0
.eh_frame:000000000000D022                 db    0
.eh_frame:000000000000D023                 db    0
.eh_frame:000000000000D024                 db 0CCh
.eh_frame:000000000000D025                 db    7
.eh_frame:000000000000D026                 db    0
.eh_frame:000000000000D027                 db    0
.eh_frame:000000000000D028                 db 0E8h
.eh_frame:000000000000D029                 db  89h
.eh_frame:000000000000D02A                 db 0FFh
.eh_frame:000000000000D02B                 db 0FFh
.eh_frame:000000000000D02C                 db  18h
.eh_frame:000000000000D02D                 db    0
.eh_frame:000000000000D02E                 db    0
.eh_frame:000000000000D02F                 db    0
.eh_frame:000000000000D030                 db    0
.eh_frame:000000000000D031                 db    0
.eh_frame:000000000000D032                 db    0
.eh_frame:000000000000D033                 db    0
.eh_frame:000000000000D034                 db  10h
.eh_frame:000000000000D035                 db    0
.eh_frame:000000000000D036                 db    0
.eh_frame:000000000000D037                 db    0
.eh_frame:000000000000D038                 db 0E0h
.eh_frame:000000000000D039                 db    7
.eh_frame:000000000000D03A                 db    0
.eh_frame:000000000000D03B                 db    0
.eh_frame:000000000000D03C                 db 0F4h
.eh_frame:000000000000D03D                 db  89h
.eh_frame:000000000000D03E                 db 0FFh
.eh_frame:000000000000D03F                 db 0FFh
.eh_frame:000000000000D040                 db  14h
.eh_frame:000000000000D041                 db    0
.eh_frame:000000000000D042                 db    0
.eh_frame:000000000000D043                 db    0
.eh_frame:000000000000D044                 db    0
.eh_frame:000000000000D045                 db    0
.eh_frame:000000000000D046                 db    0
.eh_frame:000000000000D047                 db    0
.eh_frame:000000000000D048                 db  18h
.eh_frame:000000000000D049                 db    0
.eh_frame:000000000000D04A                 db    0
.eh_frame:000000000000D04B                 db    0
.eh_frame:000000000000D04C                 db 0F4h
.eh_frame:000000000000D04D                 db    7
.eh_frame:000000000000D04E                 db    0
.eh_frame:000000000000D04F                 db    0
.eh_frame:000000000000D050                 db    0
.eh_frame:000000000000D051                 db  8Ah
.eh_frame:000000000000D052                 db 0FFh
.eh_frame:000000000000D053                 db 0FFh
.eh_frame:000000000000D054                 db  8Eh
.eh_frame:000000000000D055                 db    0
.eh_frame:000000000000D056                 db    0
.eh_frame:000000000000D057                 db    0
.eh_frame:000000000000D058                 db    0
.eh_frame:000000000000D059                 db  44h ; D
.eh_frame:000000000000D05A                 db  0Eh
.eh_frame:000000000000D05B                 db  50h ; P
.eh_frame:000000000000D05C                 db    2
.eh_frame:000000000000D05D                 db  7Fh ; 
.eh_frame:000000000000D05E                 db  0Ah
.eh_frame:000000000000D05F                 db  0Eh
.eh_frame:000000000000D060                 db    8
.eh_frame:000000000000D061                 db  41h ; A
.eh_frame:000000000000D062                 db  0Bh
.eh_frame:000000000000D063                 db    0
.eh_frame:000000000000D064                 db  18h
.eh_frame:000000000000D065                 db    0
.eh_frame:000000000000D066                 db    0
.eh_frame:000000000000D067                 db    0
.eh_frame:000000000000D068                 db  10h
.eh_frame:000000000000D069                 db    8
.eh_frame:000000000000D06A                 db    0
.eh_frame:000000000000D06B                 db    0
.eh_frame:000000000000D06C                 db  74h ; t
.eh_frame:000000000000D06D                 db  8Ah
.eh_frame:000000000000D06E                 db 0FFh
.eh_frame:000000000000D06F                 db 0FFh
.eh_frame:000000000000D070                 db  8Ah
.eh_frame:000000000000D071                 db    0
.eh_frame:000000000000D072                 db    0
.eh_frame:000000000000D073                 db    0
.eh_frame:000000000000D074                 db    0
.eh_frame:000000000000D075                 db  44h ; D
.eh_frame:000000000000D076                 db  0Eh
.eh_frame:000000000000D077                 db  50h ; P
.eh_frame:000000000000D078                 db    2
.eh_frame:000000000000D079                 db  7Bh ; {
.eh_frame:000000000000D07A                 db  0Ah
.eh_frame:000000000000D07B                 db  0Eh
.eh_frame:000000000000D07C                 db    8
.eh_frame:000000000000D07D                 db  41h ; A
.eh_frame:000000000000D07E                 db  0Bh
.eh_frame:000000000000D07F                 db    0
.eh_frame:000000000000D080                 db  10h
.eh_frame:000000000000D081                 db    0
.eh_frame:000000000000D082                 db    0
.eh_frame:000000000000D083                 db    0
.eh_frame:000000000000D084                 db  2Ch ; ,
.eh_frame:000000000000D085                 db    8
.eh_frame:000000000000D086                 db    0
.eh_frame:000000000000D087                 db    0
.eh_frame:000000000000D088                 db 0E8h
.eh_frame:000000000000D089                 db  8Ah
.eh_frame:000000000000D08A                 db 0FFh
.eh_frame:000000000000D08B                 db 0FFh
.eh_frame:000000000000D08C                 db  0Ch
.eh_frame:000000000000D08D                 db    0
.eh_frame:000000000000D08E                 db    0
.eh_frame:000000000000D08F                 db    0
.eh_frame:000000000000D090                 db    0
.eh_frame:000000000000D091                 db    0
.eh_frame:000000000000D092                 db    0
.eh_frame:000000000000D093                 db    0
.eh_frame:000000000000D094                 db  10h
.eh_frame:000000000000D095                 db    0
.eh_frame:000000000000D096                 db    0
.eh_frame:000000000000D097                 db    0
.eh_frame:000000000000D098                 db  40h ; @
.eh_frame:000000000000D099                 db    8
.eh_frame:000000000000D09A                 db    0
.eh_frame:000000000000D09B                 db    0
.eh_frame:000000000000D09C                 db 0E4h
.eh_frame:000000000000D09D                 db  8Ah
.eh_frame:000000000000D09E                 db 0FFh
.eh_frame:000000000000D09F                 db 0FFh
.eh_frame:000000000000D0A0                 db  0Fh
.eh_frame:000000000000D0A1                 db    0
.eh_frame:000000000000D0A2                 db    0
.eh_frame:000000000000D0A3                 db    0
.eh_frame:000000000000D0A4                 db    0
.eh_frame:000000000000D0A5                 db    0
.eh_frame:000000000000D0A6                 db    0
.eh_frame:000000000000D0A7                 db    0
.eh_frame:000000000000D0A8                 db  18h
.eh_frame:000000000000D0A9                 db    0
.eh_frame:000000000000D0AA                 db    0
.eh_frame:000000000000D0AB                 db    0
.eh_frame:000000000000D0AC                 db  54h ; T
.eh_frame:000000000000D0AD                 db    8
.eh_frame:000000000000D0AE                 db    0
.eh_frame:000000000000D0AF                 db    0
.eh_frame:000000000000D0B0                 db 0E0h
.eh_frame:000000000000D0B1                 db  8Ah
.eh_frame:000000000000D0B2                 db 0FFh
.eh_frame:000000000000D0B3                 db 0FFh
.eh_frame:000000000000D0B4                 db  98h
.eh_frame:000000000000D0B5                 db    0
.eh_frame:000000000000D0B6                 db    0
.eh_frame:000000000000D0B7                 db    0
.eh_frame:000000000000D0B8                 db    0
.eh_frame:000000000000D0B9                 db  44h ; D
.eh_frame:000000000000D0BA                 db  0Eh
.eh_frame:000000000000D0BB                 db  50h ; P
.eh_frame:000000000000D0BC                 db    2
.eh_frame:000000000000D0BD                 db  8Eh
.eh_frame:000000000000D0BE                 db  0Ah
.eh_frame:000000000000D0BF                 db  0Eh
.eh_frame:000000000000D0C0                 db    8
.eh_frame:000000000000D0C1                 db  41h ; A
.eh_frame:000000000000D0C2                 db  0Bh
.eh_frame:000000000000D0C3                 db    0
.eh_frame:000000000000D0C4                 db  10h
.eh_frame:000000000000D0C5                 db    0
.eh_frame:000000000000D0C6                 db    0
.eh_frame:000000000000D0C7                 db    0
.eh_frame:000000000000D0C8                 db  70h ; p
.eh_frame:000000000000D0C9                 db    8
.eh_frame:000000000000D0CA                 db    0
.eh_frame:000000000000D0CB                 db    0
.eh_frame:000000000000D0CC                 db  64h ; d
.eh_frame:000000000000D0CD                 db  8Bh
.eh_frame:000000000000D0CE                 db 0FFh
.eh_frame:000000000000D0CF                 db 0FFh
.eh_frame:000000000000D0D0                 db  10h
.eh_frame:000000000000D0D1                 db    0
.eh_frame:000000000000D0D2                 db    0
.eh_frame:000000000000D0D3                 db    0
.eh_frame:000000000000D0D4                 db    0
.eh_frame:000000000000D0D5                 db    0
.eh_frame:000000000000D0D6                 db    0
.eh_frame:000000000000D0D7                 db    0
.eh_frame:000000000000D0D8                 db  10h
.eh_frame:000000000000D0D9                 db    0
.eh_frame:000000000000D0DA                 db    0
.eh_frame:000000000000D0DB                 db    0
.eh_frame:000000000000D0DC                 db  84h
.eh_frame:000000000000D0DD                 db    8
.eh_frame:000000000000D0DE                 db    0
.eh_frame:000000000000D0DF                 db    0
.eh_frame:000000000000D0E0                 db  60h ; `
.eh_frame:000000000000D0E1                 db  8Bh
.eh_frame:000000000000D0E2                 db 0FFh
.eh_frame:000000000000D0E3                 db 0FFh
.eh_frame:000000000000D0E4                 db  11h
.eh_frame:000000000000D0E5                 db    0
.eh_frame:000000000000D0E6                 db    0
.eh_frame:000000000000D0E7                 db    0
.eh_frame:000000000000D0E8                 db    0
.eh_frame:000000000000D0E9                 db    0
.eh_frame:000000000000D0EA                 db    0
.eh_frame:000000000000D0EB                 db    0
.eh_frame:000000000000D0EC                 db  10h
.eh_frame:000000000000D0ED                 db    0
.eh_frame:000000000000D0EE                 db    0
.eh_frame:000000000000D0EF                 db    0
.eh_frame:000000000000D0F0                 db  98h
.eh_frame:000000000000D0F1                 db    8
.eh_frame:000000000000D0F2                 db    0
.eh_frame:000000000000D0F3                 db    0
.eh_frame:000000000000D0F4                 db  6Ch ; l
.eh_frame:000000000000D0F5                 db  8Bh
.eh_frame:000000000000D0F6                 db 0FFh
.eh_frame:000000000000D0F7                 db 0FFh
.eh_frame:000000000000D0F8                 db  0Ah
.eh_frame:000000000000D0F9                 db    0
.eh_frame:000000000000D0FA                 db    0
.eh_frame:000000000000D0FB                 db    0
.eh_frame:000000000000D0FC                 db    0
.eh_frame:000000000000D0FD                 db    0
.eh_frame:000000000000D0FE                 db    0
.eh_frame:000000000000D0FF                 db    0
.eh_frame:000000000000D100                 db  18h
.eh_frame:000000000000D101                 db    0
.eh_frame:000000000000D102                 db    0
.eh_frame:000000000000D103                 db    0
.eh_frame:000000000000D104                 db 0ACh
.eh_frame:000000000000D105                 db    8
.eh_frame:000000000000D106                 db    0
.eh_frame:000000000000D107                 db    0
.eh_frame:000000000000D108                 db  68h ; h
.eh_frame:000000000000D109                 db  8Bh
.eh_frame:000000000000D10A                 db 0FFh
.eh_frame:000000000000D10B                 db 0FFh
.eh_frame:000000000000D10C                 db  8Eh
.eh_frame:000000000000D10D                 db    0
.eh_frame:000000000000D10E                 db    0
.eh_frame:000000000000D10F                 db    0
.eh_frame:000000000000D110                 db    0
.eh_frame:000000000000D111                 db  44h ; D
.eh_frame:000000000000D112                 db  0Eh
.eh_frame:000000000000D113                 db  50h ; P
.eh_frame:000000000000D114                 db    2
.eh_frame:000000000000D115                 db  7Fh ; 
.eh_frame:000000000000D116                 db  0Ah
.eh_frame:000000000000D117                 db  0Eh
.eh_frame:000000000000D118                 db    8
.eh_frame:000000000000D119                 db  41h ; A
.eh_frame:000000000000D11A                 db  0Bh
.eh_frame:000000000000D11B                 db    0
.eh_frame:000000000000D11C                 db  18h
.eh_frame:000000000000D11D                 db    0
.eh_frame:000000000000D11E                 db    0
.eh_frame:000000000000D11F                 db    0
.eh_frame:000000000000D120                 db 0C8h
.eh_frame:000000000000D121                 db    8
.eh_frame:000000000000D122                 db    0
.eh_frame:000000000000D123                 db    0
.eh_frame:000000000000D124                 db 0DCh
.eh_frame:000000000000D125                 db  8Bh
.eh_frame:000000000000D126                 db 0FFh
.eh_frame:000000000000D127                 db 0FFh
.eh_frame:000000000000D128                 db  91h
.eh_frame:000000000000D129                 db    0
.eh_frame:000000000000D12A                 db    0
.eh_frame:000000000000D12B                 db    0
.eh_frame:000000000000D12C                 db    0
.eh_frame:000000000000D12D                 db  44h ; D
.eh_frame:000000000000D12E                 db  0Eh
.eh_frame:000000000000D12F                 db  50h ; P
.eh_frame:000000000000D130                 db    2
.eh_frame:000000000000D131                 db  82h
.eh_frame:000000000000D132                 db  0Ah
.eh_frame:000000000000D133                 db  0Eh
.eh_frame:000000000000D134                 db    8
.eh_frame:000000000000D135                 db  41h ; A
.eh_frame:000000000000D136                 db  0Bh
.eh_frame:000000000000D137                 db    0
.eh_frame:000000000000D138                 db  10h
.eh_frame:000000000000D139                 db    0
.eh_frame:000000000000D13A                 db    0
.eh_frame:000000000000D13B                 db    0
.eh_frame:000000000000D13C                 db 0E4h
.eh_frame:000000000000D13D                 db    8
.eh_frame:000000000000D13E                 db    0
.eh_frame:000000000000D13F                 db    0
.eh_frame:000000000000D140                 db  60h ; `
.eh_frame:000000000000D141                 db  8Ch
.eh_frame:000000000000D142                 db 0FFh
.eh_frame:000000000000D143                 db 0FFh
.eh_frame:000000000000D144                 db  0Ch
.eh_frame:000000000000D145                 db    0
.eh_frame:000000000000D146                 db    0
.eh_frame:000000000000D147                 db    0
.eh_frame:000000000000D148                 db    0
.eh_frame:000000000000D149                 db    0
.eh_frame:000000000000D14A                 db    0
.eh_frame:000000000000D14B                 db    0
.eh_frame:000000000000D14C                 db  10h
.eh_frame:000000000000D14D                 db    0
.eh_frame:000000000000D14E                 db    0
.eh_frame:000000000000D14F                 db    0
.eh_frame:000000000000D150                 db 0F8h
.eh_frame:000000000000D151                 db    8
.eh_frame:000000000000D152                 db    0
.eh_frame:000000000000D153                 db    0
.eh_frame:000000000000D154                 db  5Ch ; \
.eh_frame:000000000000D155                 db  8Ch
.eh_frame:000000000000D156                 db 0FFh
.eh_frame:000000000000D157                 db 0FFh
.eh_frame:000000000000D158                 db  17h
.eh_frame:000000000000D159                 db    0
.eh_frame:000000000000D15A                 db    0
.eh_frame:000000000000D15B                 db    0
.eh_frame:000000000000D15C                 db    0
.eh_frame:000000000000D15D                 db    0
.eh_frame:000000000000D15E                 db    0
.eh_frame:000000000000D15F                 db    0
.eh_frame:000000000000D160                 db  10h
.eh_frame:000000000000D161                 db    0
.eh_frame:000000000000D162                 db    0
.eh_frame:000000000000D163                 db    0
.eh_frame:000000000000D164                 db  0Ch
.eh_frame:000000000000D165                 db    9
.eh_frame:000000000000D166                 db    0
.eh_frame:000000000000D167                 db    0
.eh_frame:000000000000D168                 db  68h ; h
.eh_frame:000000000000D169                 db  8Ch
.eh_frame:000000000000D16A                 db 0FFh
.eh_frame:000000000000D16B                 db 0FFh
.eh_frame:000000000000D16C                 db  13h
.eh_frame:000000000000D16D                 db    0
.eh_frame:000000000000D16E                 db    0
.eh_frame:000000000000D16F                 db    0
.eh_frame:000000000000D170                 db    0
.eh_frame:000000000000D171                 db    0
.eh_frame:000000000000D172                 db    0
.eh_frame:000000000000D173                 db    0
.eh_frame:000000000000D174                 db  10h
.eh_frame:000000000000D175                 db    0
.eh_frame:000000000000D176                 db    0
.eh_frame:000000000000D177                 db    0
.eh_frame:000000000000D178                 db  20h
.eh_frame:000000000000D179                 db    9
.eh_frame:000000000000D17A                 db    0
.eh_frame:000000000000D17B                 db    0
.eh_frame:000000000000D17C                 db  74h ; t
.eh_frame:000000000000D17D                 db  8Ch
.eh_frame:000000000000D17E                 db 0FFh
.eh_frame:000000000000D17F                 db 0FFh
.eh_frame:000000000000D180                 db  0Ch
.eh_frame:000000000000D181                 db    0
.eh_frame:000000000000D182                 db    0
.eh_frame:000000000000D183                 db    0
.eh_frame:000000000000D184                 db    0
.eh_frame:000000000000D185                 db    0
.eh_frame:000000000000D186                 db    0
.eh_frame:000000000000D187                 db    0
.eh_frame:000000000000D188                 db  10h
.eh_frame:000000000000D189                 db    0
.eh_frame:000000000000D18A                 db    0
.eh_frame:000000000000D18B                 db    0
.eh_frame:000000000000D18C                 db  34h ; 4
.eh_frame:000000000000D18D                 db    9
.eh_frame:000000000000D18E                 db    0
.eh_frame:000000000000D18F                 db    0
.eh_frame:000000000000D190                 db  70h ; p
.eh_frame:000000000000D191                 db  8Ch
.eh_frame:000000000000D192                 db 0FFh
.eh_frame:000000000000D193                 db 0FFh
.eh_frame:000000000000D194                 db  14h
.eh_frame:000000000000D195                 db    0
.eh_frame:000000000000D196                 db    0
.eh_frame:000000000000D197                 db    0
.eh_frame:000000000000D198                 db    0
.eh_frame:000000000000D199                 db    0
.eh_frame:000000000000D19A                 db    0
.eh_frame:000000000000D19B                 db    0
.eh_frame:000000000000D19C                 db  10h
.eh_frame:000000000000D19D                 db    0
.eh_frame:000000000000D19E                 db    0
.eh_frame:000000000000D19F                 db    0
.eh_frame:000000000000D1A0                 db  48h ; H
.eh_frame:000000000000D1A1                 db    9
.eh_frame:000000000000D1A2                 db    0
.eh_frame:000000000000D1A3                 db    0
.eh_frame:000000000000D1A4                 db  7Ch ; |
.eh_frame:000000000000D1A5                 db  8Ch
.eh_frame:000000000000D1A6                 db 0FFh
.eh_frame:000000000000D1A7                 db 0FFh
.eh_frame:000000000000D1A8                 db  13h
.eh_frame:000000000000D1A9                 db    0
.eh_frame:000000000000D1AA                 db    0
.eh_frame:000000000000D1AB                 db    0
.eh_frame:000000000000D1AC                 db    0
.eh_frame:000000000000D1AD                 db    0
.eh_frame:000000000000D1AE                 db    0
.eh_frame:000000000000D1AF                 db    0
.eh_frame:000000000000D1B0                 db  14h
.eh_frame:000000000000D1B1                 db    0
.eh_frame:000000000000D1B2                 db    0
.eh_frame:000000000000D1B3                 db    0
.eh_frame:000000000000D1B4                 db  5Ch ; \
.eh_frame:000000000000D1B5                 db    9
.eh_frame:000000000000D1B6                 db    0
.eh_frame:000000000000D1B7                 db    0
.eh_frame:000000000000D1B8                 db  88h
.eh_frame:000000000000D1B9                 db  8Ch
.eh_frame:000000000000D1BA                 db 0FFh
.eh_frame:000000000000D1BB                 db 0FFh
.eh_frame:000000000000D1BC                 db  18h
.eh_frame:000000000000D1BD                 db    0
.eh_frame:000000000000D1BE                 db    0
.eh_frame:000000000000D1BF                 db    0
.eh_frame:000000000000D1C0                 db    0
.eh_frame:000000000000D1C1                 db    0
.eh_frame:000000000000D1C2                 db    0
.eh_frame:000000000000D1C3                 db    0
.eh_frame:000000000000D1C4                 db    0
.eh_frame:000000000000D1C5                 db    0
.eh_frame:000000000000D1C6                 db    0
.eh_frame:000000000000D1C7                 db    0
.eh_frame:000000000000D1C8                 db  24h ; $
.eh_frame:000000000000D1C9                 db    0
.eh_frame:000000000000D1CA                 db    0
.eh_frame:000000000000D1CB                 db    0
.eh_frame:000000000000D1CC                 db  74h ; t
.eh_frame:000000000000D1CD                 db    9
.eh_frame:000000000000D1CE                 db    0
.eh_frame:000000000000D1CF                 db    0
.eh_frame:000000000000D1D0                 db  90h
.eh_frame:000000000000D1D1                 db  8Ch
.eh_frame:000000000000D1D2                 db 0FFh
.eh_frame:000000000000D1D3                 db 0FFh
.eh_frame:000000000000D1D4                 db  71h ; q
.eh_frame:000000000000D1D5                 db    0
.eh_frame:000000000000D1D6                 db    0
.eh_frame:000000000000D1D7                 db    0
.eh_frame:000000000000D1D8                 db    0
.eh_frame:000000000000D1D9                 db  41h ; A
.eh_frame:000000000000D1DA                 db  0Eh
.eh_frame:000000000000D1DB                 db  10h
.eh_frame:000000000000D1DC                 db  83h
.eh_frame:000000000000D1DD                 db    2
.eh_frame:000000000000D1DE                 db  56h ; V
.eh_frame:000000000000D1DF                 db  0Eh
.eh_frame:000000000000D1E0                 db 0B0h
.eh_frame:000000000000D1E1                 db    1
.eh_frame:000000000000D1E2                 db    2
.eh_frame:000000000000D1E3                 db  4Ch ; L
.eh_frame:000000000000D1E4                 db  0Ah
.eh_frame:000000000000D1E5                 db  0Eh
.eh_frame:000000000000D1E6                 db  10h
.eh_frame:000000000000D1E7                 db  41h ; A
.eh_frame:000000000000D1E8                 db  0Eh
.eh_frame:000000000000D1E9                 db    8
.eh_frame:000000000000D1EA                 db  44h ; D
.eh_frame:000000000000D1EB                 db  0Bh
.eh_frame:000000000000D1EC                 db    0
.eh_frame:000000000000D1ED                 db    0
.eh_frame:000000000000D1EE                 db    0
.eh_frame:000000000000D1EF                 db    0
.eh_frame:000000000000D1F0                 db  10h
.eh_frame:000000000000D1F1                 db    1
.eh_frame:000000000000D1F2                 db    0
.eh_frame:000000000000D1F3                 db    0
.eh_frame:000000000000D1F4                 db  9Ch
.eh_frame:000000000000D1F5                 db    9
.eh_frame:000000000000D1F6                 db    0
.eh_frame:000000000000D1F7                 db    0
.eh_frame:000000000000D1F8                 db 0E8h
.eh_frame:000000000000D1F9                 db  8Ch
.eh_frame:000000000000D1FA                 db 0FFh
.eh_frame:000000000000D1FB                 db 0FFh
.eh_frame:000000000000D1FC                 db  17h
.eh_frame:000000000000D1FD                 db    4
.eh_frame:000000000000D1FE                 db    0
.eh_frame:000000000000D1FF                 db    0
.eh_frame:000000000000D200                 db    0
.eh_frame:000000000000D201                 db  42h ; B
.eh_frame:000000000000D202                 db  0Eh
.eh_frame:000000000000D203                 db  10h
.eh_frame:000000000000D204                 db  8Fh
.eh_frame:000000000000D205                 db    2
.eh_frame:000000000000D206                 db  42h ; B
.eh_frame:000000000000D207                 db  0Eh
.eh_frame:000000000000D208                 db  18h
.eh_frame:000000000000D209                 db  8Eh
.eh_frame:000000000000D20A                 db    3
.eh_frame:000000000000D20B                 db  42h ; B
.eh_frame:000000000000D20C                 db  0Eh
.eh_frame:000000000000D20D                 db  20h
.eh_frame:000000000000D20E                 db  8Dh
.eh_frame:000000000000D20F                 db    4
.eh_frame:000000000000D210                 db  42h ; B
.eh_frame:000000000000D211                 db  0Eh
.eh_frame:000000000000D212                 db  28h ; (
.eh_frame:000000000000D213                 db  8Ch
.eh_frame:000000000000D214                 db    5
.eh_frame:000000000000D215                 db  44h ; D
.eh_frame:000000000000D216                 db  0Eh
.eh_frame:000000000000D217                 db  30h ; 0
.eh_frame:000000000000D218                 db  86h
.eh_frame:000000000000D219                 db    6
.eh_frame:000000000000D21A                 db  41h ; A
.eh_frame:000000000000D21B                 db  0Eh
.eh_frame:000000000000D21C                 db  38h ; 8
.eh_frame:000000000000D21D                 db  83h
.eh_frame:000000000000D21E                 db    7
.eh_frame:000000000000D21F                 db  4Ah ; J
.eh_frame:000000000000D220                 db  0Eh
.eh_frame:000000000000D221                 db  60h ; `
.eh_frame:000000000000D222                 db    2
.eh_frame:000000000000D223                 db 0DDh
.eh_frame:000000000000D224                 db  0Eh
.eh_frame:000000000000D225                 db  68h ; h
.eh_frame:000000000000D226                 db  57h ; W
.eh_frame:000000000000D227                 db  0Eh
.eh_frame:000000000000D228                 db  70h ; p
.eh_frame:000000000000D229                 db  42h ; B
.eh_frame:000000000000D22A                 db  0Eh
.eh_frame:000000000000D22B                 db  78h ; x
.eh_frame:000000000000D22C                 db  42h ; B
.eh_frame:000000000000D22D                 db  0Eh
.eh_frame:000000000000D22E                 db  80h
.eh_frame:000000000000D22F                 db    1
.eh_frame:000000000000D230                 db  42h ; B
.eh_frame:000000000000D231                 db  0Eh
.eh_frame:000000000000D232                 db  88h
.eh_frame:000000000000D233                 db    1
.eh_frame:000000000000D234                 db  42h ; B
.eh_frame:000000000000D235                 db  0Eh
.eh_frame:000000000000D236                 db  90h
.eh_frame:000000000000D237                 db    1
.eh_frame:000000000000D238                 db  53h ; S
.eh_frame:000000000000D239                 db  0Eh
.eh_frame:000000000000D23A                 db  60h ; `
.eh_frame:000000000000D23B                 db  44h ; D
.eh_frame:000000000000D23C                 db  0Ah
.eh_frame:000000000000D23D                 db  0Eh
.eh_frame:000000000000D23E                 db  38h ; 8
.eh_frame:000000000000D23F                 db  41h ; A
.eh_frame:000000000000D240                 db  0Eh
.eh_frame:000000000000D241                 db  30h ; 0
.eh_frame:000000000000D242                 db  41h ; A
.eh_frame:000000000000D243                 db  0Eh
.eh_frame:000000000000D244                 db  28h ; (
.eh_frame:000000000000D245                 db  42h ; B
.eh_frame:000000000000D246                 db  0Eh
.eh_frame:000000000000D247                 db  20h
.eh_frame:000000000000D248                 db  42h ; B
.eh_frame:000000000000D249                 db  0Eh
.eh_frame:000000000000D24A                 db  18h
.eh_frame:000000000000D24B                 db  42h ; B
.eh_frame:000000000000D24C                 db  0Eh
.eh_frame:000000000000D24D                 db  10h
.eh_frame:000000000000D24E                 db  42h ; B
.eh_frame:000000000000D24F                 db  0Eh
.eh_frame:000000000000D250                 db    8
.eh_frame:000000000000D251                 db  44h ; D
.eh_frame:000000000000D252                 db  0Bh
.eh_frame:000000000000D253                 db    2
.eh_frame:000000000000D254                 db  78h ; x
.eh_frame:000000000000D255                 db  0Ah
.eh_frame:000000000000D256                 db  0Eh
.eh_frame:000000000000D257                 db  68h ; h
.eh_frame:000000000000D258                 db  48h ; H
.eh_frame:000000000000D259                 db  0Bh
.eh_frame:000000000000D25A                 db  5Ah ; Z
.eh_frame:000000000000D25B                 db  0Ah
.eh_frame:000000000000D25C                 db  0Eh
.eh_frame:000000000000D25D                 db  38h ; 8
.eh_frame:000000000000D25E                 db  47h ; G
.eh_frame:000000000000D25F                 db  0Eh
.eh_frame:000000000000D260                 db  30h ; 0
.eh_frame:000000000000D261                 db  41h ; A
.eh_frame:000000000000D262                 db  0Eh
.eh_frame:000000000000D263                 db  28h ; (
.eh_frame:000000000000D264                 db  42h ; B
.eh_frame:000000000000D265                 db  0Eh
.eh_frame:000000000000D266                 db  20h
.eh_frame:000000000000D267                 db  42h ; B
.eh_frame:000000000000D268                 db  0Eh
.eh_frame:000000000000D269                 db  18h
.eh_frame:000000000000D26A                 db  42h ; B
.eh_frame:000000000000D26B                 db  0Eh
.eh_frame:000000000000D26C                 db  10h
.eh_frame:000000000000D26D                 db  42h ; B
.eh_frame:000000000000D26E                 db  0Eh
.eh_frame:000000000000D26F                 db    8
.eh_frame:000000000000D270                 db  56h ; V
.eh_frame:000000000000D271                 db  0Bh
.eh_frame:000000000000D272                 db  5Eh ; ^
.eh_frame:000000000000D273                 db  0Ah
.eh_frame:000000000000D274                 db  0Eh
.eh_frame:000000000000D275                 db  38h ; 8
.eh_frame:000000000000D276                 db  52h ; R
.eh_frame:000000000000D277                 db  0Eh
.eh_frame:000000000000D278                 db  30h ; 0
.eh_frame:000000000000D279                 db  41h ; A
.eh_frame:000000000000D27A                 db  0Eh
.eh_frame:000000000000D27B                 db  28h ; (
.eh_frame:000000000000D27C                 db  42h ; B
.eh_frame:000000000000D27D                 db  0Eh
.eh_frame:000000000000D27E                 db  20h
.eh_frame:000000000000D27F                 db  42h ; B
.eh_frame:000000000000D280                 db  0Eh
.eh_frame:000000000000D281                 db  18h
.eh_frame:000000000000D282                 db  42h ; B
.eh_frame:000000000000D283                 db  0Eh
.eh_frame:000000000000D284                 db  10h
.eh_frame:000000000000D285                 db  42h ; B
.eh_frame:000000000000D286                 db  0Eh
.eh_frame:000000000000D287                 db    8
.eh_frame:000000000000D288                 db  4Fh ; O
.eh_frame:000000000000D289                 db  0Bh
.eh_frame:000000000000D28A                 db  62h ; b
.eh_frame:000000000000D28B                 db  0Ah
.eh_frame:000000000000D28C                 db  0Eh
.eh_frame:000000000000D28D                 db  38h ; 8
.eh_frame:000000000000D28E                 db  50h ; P
.eh_frame:000000000000D28F                 db  0Eh
.eh_frame:000000000000D290                 db  30h ; 0
.eh_frame:000000000000D291                 db  41h ; A
.eh_frame:000000000000D292                 db  0Eh
.eh_frame:000000000000D293                 db  28h ; (
.eh_frame:000000000000D294                 db  42h ; B
.eh_frame:000000000000D295                 db  0Eh
.eh_frame:000000000000D296                 db  20h
.eh_frame:000000000000D297                 db  42h ; B
.eh_frame:000000000000D298                 db  0Eh
.eh_frame:000000000000D299                 db  18h
.eh_frame:000000000000D29A                 db  42h ; B
.eh_frame:000000000000D29B                 db  0Eh
.eh_frame:000000000000D29C                 db  10h
.eh_frame:000000000000D29D                 db  42h ; B
.eh_frame:000000000000D29E                 db  0Eh
.eh_frame:000000000000D29F                 db    8
.eh_frame:000000000000D2A0                 db  55h ; U
.eh_frame:000000000000D2A1                 db  0Bh
.eh_frame:000000000000D2A2                 db  66h ; f
.eh_frame:000000000000D2A3                 db  0Eh
.eh_frame:000000000000D2A4                 db  68h ; h
.eh_frame:000000000000D2A5                 db  42h ; B
.eh_frame:000000000000D2A6                 db  0Eh
.eh_frame:000000000000D2A7                 db  70h ; p
.eh_frame:000000000000D2A8                 db  5Ch ; \
.eh_frame:000000000000D2A9                 db  0Eh
.eh_frame:000000000000D2AA                 db  68h ; h
.eh_frame:000000000000D2AB                 db  41h ; A
.eh_frame:000000000000D2AC                 db  0Eh
.eh_frame:000000000000D2AD                 db  60h ; `
.eh_frame:000000000000D2AE                 db  44h ; D
.eh_frame:000000000000D2AF                 db  0Ah
.eh_frame:000000000000D2B0                 db  0Eh
.eh_frame:000000000000D2B1                 db  38h ; 8
.eh_frame:000000000000D2B2                 db  41h ; A
.eh_frame:000000000000D2B3                 db  0Eh
.eh_frame:000000000000D2B4                 db  30h ; 0
.eh_frame:000000000000D2B5                 db  41h ; A
.eh_frame:000000000000D2B6                 db  0Eh
.eh_frame:000000000000D2B7                 db  28h ; (
.eh_frame:000000000000D2B8                 db  42h ; B
.eh_frame:000000000000D2B9                 db  0Eh
.eh_frame:000000000000D2BA                 db  20h
.eh_frame:000000000000D2BB                 db  42h ; B
.eh_frame:000000000000D2BC                 db  0Eh
.eh_frame:000000000000D2BD                 db  18h
.eh_frame:000000000000D2BE                 db  42h ; B
.eh_frame:000000000000D2BF                 db  0Eh
.eh_frame:000000000000D2C0                 db  10h
.eh_frame:000000000000D2C1                 db  42h ; B
.eh_frame:000000000000D2C2                 db  0Eh
.eh_frame:000000000000D2C3                 db    8
.eh_frame:000000000000D2C4                 db  45h ; E
.eh_frame:000000000000D2C5                 db  0Bh
.eh_frame:000000000000D2C6                 db  68h ; h
.eh_frame:000000000000D2C7                 db  0Ah
.eh_frame:000000000000D2C8                 db  0Eh
.eh_frame:000000000000D2C9                 db  68h ; h
.eh_frame:000000000000D2CA                 db  48h ; H
.eh_frame:000000000000D2CB                 db  0Bh
.eh_frame:000000000000D2CC                 db  72h ; r
.eh_frame:000000000000D2CD                 db  0Eh
.eh_frame:000000000000D2CE                 db  68h ; h
.eh_frame:000000000000D2CF                 db  45h ; E
.eh_frame:000000000000D2D0                 db  0Eh
.eh_frame:000000000000D2D1                 db  70h ; p
.eh_frame:000000000000D2D2                 db  42h ; B
.eh_frame:000000000000D2D3                 db  0Eh
.eh_frame:000000000000D2D4                 db  78h ; x
.eh_frame:000000000000D2D5                 db  42h ; B
.eh_frame:000000000000D2D6                 db  0Eh
.eh_frame:000000000000D2D7                 db  80h
.eh_frame:000000000000D2D8                 db    1
.eh_frame:000000000000D2D9                 db  5Eh ; ^
.eh_frame:000000000000D2DA                 db  0Eh
.eh_frame:000000000000D2DB                 db  60h ; `
.eh_frame:000000000000D2DC                 db  44h ; D
.eh_frame:000000000000D2DD                 db  0Ah
.eh_frame:000000000000D2DE                 db  0Eh
.eh_frame:000000000000D2DF                 db  38h ; 8
.eh_frame:000000000000D2E0                 db  41h ; A
.eh_frame:000000000000D2E1                 db  0Eh
.eh_frame:000000000000D2E2                 db  30h ; 0
.eh_frame:000000000000D2E3                 db  41h ; A
.eh_frame:000000000000D2E4                 db  0Eh
.eh_frame:000000000000D2E5                 db  28h ; (
.eh_frame:000000000000D2E6                 db  42h ; B
.eh_frame:000000000000D2E7                 db  0Eh
.eh_frame:000000000000D2E8                 db  20h
.eh_frame:000000000000D2E9                 db  42h ; B
.eh_frame:000000000000D2EA                 db  0Eh
.eh_frame:000000000000D2EB                 db  18h
.eh_frame:000000000000D2EC                 db  42h ; B
.eh_frame:000000000000D2ED                 db  0Eh
.eh_frame:000000000000D2EE                 db  10h
.eh_frame:000000000000D2EF                 db  42h ; B
.eh_frame:000000000000D2F0                 db  0Eh
.eh_frame:000000000000D2F1                 db    8
.eh_frame:000000000000D2F2                 db  41h ; A
.eh_frame:000000000000D2F3                 db  0Bh
.eh_frame:000000000000D2F4                 db  79h ; y
.eh_frame:000000000000D2F5                 db  0Ah
.eh_frame:000000000000D2F6                 db  0Eh
.eh_frame:000000000000D2F7                 db  68h ; h
.eh_frame:000000000000D2F8                 db  42h ; B
.eh_frame:000000000000D2F9                 db  0Eh
.eh_frame:000000000000D2FA                 db  70h ; p
.eh_frame:000000000000D2FB                 db  42h ; B
.eh_frame:000000000000D2FC                 db  0Eh
.eh_frame:000000000000D2FD                 db  78h ; x
.eh_frame:000000000000D2FE                 db  42h ; B
.eh_frame:000000000000D2FF                 db  0Eh
.eh_frame:000000000000D300                 db  80h
.eh_frame:000000000000D301                 db    1
.eh_frame:000000000000D302                 db  51h ; Q
.eh_frame:000000000000D303                 db  0Bh
.eh_frame:000000000000D304                 db  10h
.eh_frame:000000000000D305                 db    0
.eh_frame:000000000000D306                 db    0
.eh_frame:000000000000D307                 db    0
.eh_frame:000000000000D308                 db 0B0h
.eh_frame:000000000000D309                 db  0Ah
.eh_frame:000000000000D30A                 db    0
.eh_frame:000000000000D30B                 db    0
.eh_frame:000000000000D30C                 db 0F4h
.eh_frame:000000000000D30D                 db  8Fh
.eh_frame:000000000000D30E                 db 0FFh
.eh_frame:000000000000D30F                 db 0FFh
.eh_frame:000000000000D310                 db  20h
.eh_frame:000000000000D311                 db    0
.eh_frame:000000000000D312                 db    0
.eh_frame:000000000000D313                 db    0
.eh_frame:000000000000D314                 db    0
.eh_frame:000000000000D315                 db    0
.eh_frame:000000000000D316                 db    0
.eh_frame:000000000000D317                 db    0
.eh_frame:000000000000D318                 db  18h
.eh_frame:000000000000D319                 db    0
.eh_frame:000000000000D31A                 db    0
.eh_frame:000000000000D31B                 db    0
.eh_frame:000000000000D31C                 db 0C4h
.eh_frame:000000000000D31D                 db  0Ah
.eh_frame:000000000000D31E                 db    0
.eh_frame:000000000000D31F                 db    0
.eh_frame:000000000000D320                 db    0
.eh_frame:000000000000D321                 db  90h
.eh_frame:000000000000D322                 db 0FFh
.eh_frame:000000000000D323                 db 0FFh
.eh_frame:000000000000D324                 db  78h ; x
.eh_frame:000000000000D325                 db    0
.eh_frame:000000000000D326                 db    0
.eh_frame:000000000000D327                 db    0
.eh_frame:000000000000D328                 db    0
.eh_frame:000000000000D329                 db  44h ; D
.eh_frame:000000000000D32A                 db  0Eh
.eh_frame:000000000000D32B                 db  70h ; p
.eh_frame:000000000000D32C                 db    2
.eh_frame:000000000000D32D                 db  60h ; `
.eh_frame:000000000000D32E                 db  0Ah
.eh_frame:000000000000D32F                 db  0Eh
.eh_frame:000000000000D330                 db    8
.eh_frame:000000000000D331                 db  41h ; A
.eh_frame:000000000000D332                 db  0Bh
.eh_frame:000000000000D333                 db    0
.eh_frame:000000000000D334                 db  28h ; (
.eh_frame:000000000000D335                 db    0
.eh_frame:000000000000D336                 db    0
.eh_frame:000000000000D337                 db    0
.eh_frame:000000000000D338                 db 0E0h
.eh_frame:000000000000D339                 db  0Ah
.eh_frame:000000000000D33A                 db    0
.eh_frame:000000000000D33B                 db    0
.eh_frame:000000000000D33C                 db  64h ; d
.eh_frame:000000000000D33D                 db  90h
.eh_frame:000000000000D33E                 db 0FFh
.eh_frame:000000000000D33F                 db 0FFh
.eh_frame:000000000000D340                 db 0D5h
.eh_frame:000000000000D341                 db    0
.eh_frame:000000000000D342                 db    0
.eh_frame:000000000000D343                 db    0
.eh_frame:000000000000D344                 db    0
.eh_frame:000000000000D345                 db  41h ; A
.eh_frame:000000000000D346                 db  0Eh
.eh_frame:000000000000D347                 db  10h
.eh_frame:000000000000D348                 db  86h
.eh_frame:000000000000D349                 db    2
.eh_frame:000000000000D34A                 db  41h ; A
.eh_frame:000000000000D34B                 db  0Eh
.eh_frame:000000000000D34C                 db  18h
.eh_frame:000000000000D34D                 db  83h
.eh_frame:000000000000D34E                 db    3
.eh_frame:000000000000D34F                 db  50h ; P
.eh_frame:000000000000D350                 db  0Eh
.eh_frame:000000000000D351                 db 0D0h
.eh_frame:000000000000D352                 db    1
.eh_frame:000000000000D353                 db    2
.eh_frame:000000000000D354                 db 0ABh
.eh_frame:000000000000D355                 db  0Ah
.eh_frame:000000000000D356                 db  0Eh
.eh_frame:000000000000D357                 db  18h
.eh_frame:000000000000D358                 db  41h ; A
.eh_frame:000000000000D359                 db  0Eh
.eh_frame:000000000000D35A                 db  10h
.eh_frame:000000000000D35B                 db  41h ; A
.eh_frame:000000000000D35C                 db  0Eh
.eh_frame:000000000000D35D                 db    8
.eh_frame:000000000000D35E                 db  41h ; A
.eh_frame:000000000000D35F                 db  0Bh
.eh_frame:000000000000D360                 db  1Ch
.eh_frame:000000000000D361                 db    0
.eh_frame:000000000000D362                 db    0
.eh_frame:000000000000D363                 db    0
.eh_frame:000000000000D364                 db  0Ch
.eh_frame:000000000000D365                 db  0Bh
.eh_frame:000000000000D366                 db    0
.eh_frame:000000000000D367                 db    0
.eh_frame:000000000000D368                 db  18h
.eh_frame:000000000000D369                 db  91h
.eh_frame:000000000000D36A                 db 0FFh
.eh_frame:000000000000D36B                 db 0FFh
.eh_frame:000000000000D36C                 db  80h
.eh_frame:000000000000D36D                 db    0
.eh_frame:000000000000D36E                 db    0
.eh_frame:000000000000D36F                 db    0
.eh_frame:000000000000D370                 db    0
.eh_frame:000000000000D371                 db  41h ; A
.eh_frame:000000000000D372                 db  0Eh
.eh_frame:000000000000D373                 db  10h
.eh_frame:000000000000D374                 db  83h
.eh_frame:000000000000D375                 db    2
.eh_frame:000000000000D376                 db    2
.eh_frame:000000000000D377                 db  7Ah ; z
.eh_frame:000000000000D378                 db  0Eh
.eh_frame:000000000000D379                 db    8
.eh_frame:000000000000D37A                 db    0
.eh_frame:000000000000D37B                 db    0
.eh_frame:000000000000D37C                 db    0
.eh_frame:000000000000D37D                 db    0
.eh_frame:000000000000D37E                 db    0
.eh_frame:000000000000D37F                 db    0
.eh_frame:000000000000D380                 db  14h
.eh_frame:000000000000D381                 db    0
.eh_frame:000000000000D382                 db    0
.eh_frame:000000000000D383                 db    0
.eh_frame:000000000000D384                 db  2Ch ; ,
.eh_frame:000000000000D385                 db  0Bh
.eh_frame:000000000000D386                 db    0
.eh_frame:000000000000D387                 db    0
.eh_frame:000000000000D388                 db  78h ; x
.eh_frame:000000000000D389                 db  91h
.eh_frame:000000000000D38A                 db 0FFh
.eh_frame:000000000000D38B                 db 0FFh
.eh_frame:000000000000D38C                 db  38h ; 8
.eh_frame:000000000000D38D                 db    0
.eh_frame:000000000000D38E                 db    0
.eh_frame:000000000000D38F                 db    0
.eh_frame:000000000000D390                 db    0
.eh_frame:000000000000D391                 db  5Ch ; \
.eh_frame:000000000000D392                 db  0Eh
.eh_frame:000000000000D393                 db  10h
.eh_frame:000000000000D394                 db  5Bh ; [
.eh_frame:000000000000D395                 db  0Eh
.eh_frame:000000000000D396                 db    8
.eh_frame:000000000000D397                 db    0
.eh_frame:000000000000D398                 db  18h
.eh_frame:000000000000D399                 db    0
.eh_frame:000000000000D39A                 db    0
.eh_frame:000000000000D39B                 db    0
.eh_frame:000000000000D39C                 db  44h ; D
.eh_frame:000000000000D39D                 db  0Bh
.eh_frame:000000000000D39E                 db    0
.eh_frame:000000000000D39F                 db    0
.eh_frame:000000000000D3A0                 db 0A0h
.eh_frame:000000000000D3A1                 db  91h
.eh_frame:000000000000D3A2                 db 0FFh
.eh_frame:000000000000D3A3                 db 0FFh
.eh_frame:000000000000D3A4                 db  1Ah
.eh_frame:000000000000D3A5                 db    0
.eh_frame:000000000000D3A6                 db    0
.eh_frame:000000000000D3A7                 db    0
.eh_frame:000000000000D3A8                 db    0
.eh_frame:000000000000D3A9                 db  41h ; A
.eh_frame:000000000000D3AA                 db  0Eh
.eh_frame:000000000000D3AB                 db  10h
.eh_frame:000000000000D3AC                 db  83h
.eh_frame:000000000000D3AD                 db    2
.eh_frame:000000000000D3AE                 db  53h ; S
.eh_frame:000000000000D3AF                 db  0Ah
.eh_frame:000000000000D3B0                 db  0Eh
.eh_frame:000000000000D3B1                 db    8
.eh_frame:000000000000D3B2                 db  41h ; A
.eh_frame:000000000000D3B3                 db  0Bh
.eh_frame:000000000000D3B4                 db  10h
.eh_frame:000000000000D3B5                 db    0
.eh_frame:000000000000D3B6                 db    0
.eh_frame:000000000000D3B7                 db    0
.eh_frame:000000000000D3B8                 db  60h ; `
.eh_frame:000000000000D3B9                 db  0Bh
.eh_frame:000000000000D3BA                 db    0
.eh_frame:000000000000D3BB                 db    0
.eh_frame:000000000000D3BC                 db 0A4h
.eh_frame:000000000000D3BD                 db  91h
.eh_frame:000000000000D3BE                 db 0FFh
.eh_frame:000000000000D3BF                 db 0FFh
.eh_frame:000000000000D3C0                 db  24h ; $
.eh_frame:000000000000D3C1                 db    0
.eh_frame:000000000000D3C2                 db    0
.eh_frame:000000000000D3C3                 db    0
.eh_frame:000000000000D3C4                 db    0
.eh_frame:000000000000D3C5                 db  5Fh ; _
.eh_frame:000000000000D3C6                 db  0Eh
.eh_frame:000000000000D3C7                 db  10h
.eh_frame:000000000000D3C8                 db  10h
.eh_frame:000000000000D3C9                 db    0
.eh_frame:000000000000D3CA                 db    0
.eh_frame:000000000000D3CB                 db    0
.eh_frame:000000000000D3CC                 db  74h ; t
.eh_frame:000000000000D3CD                 db  0Bh
.eh_frame:000000000000D3CE                 db    0
.eh_frame:000000000000D3CF                 db    0
.eh_frame:000000000000D3D0                 db 0C0h
.eh_frame:000000000000D3D1                 db  91h
.eh_frame:000000000000D3D2                 db 0FFh
.eh_frame:000000000000D3D3                 db 0FFh
.eh_frame:000000000000D3D4                 db    2
.eh_frame:000000000000D3D5                 db    0
.eh_frame:000000000000D3D6                 db    0
.eh_frame:000000000000D3D7                 db    0
.eh_frame:000000000000D3D8                 db    0
.eh_frame:000000000000D3D9                 db    0
.eh_frame:000000000000D3DA                 db    0
.eh_frame:000000000000D3DB                 db    0
.eh_frame:000000000000D3DC                 db  20h
.eh_frame:000000000000D3DD                 db    0
.eh_frame:000000000000D3DE                 db    0
.eh_frame:000000000000D3DF                 db    0
.eh_frame:000000000000D3E0                 db  88h
.eh_frame:000000000000D3E1                 db  0Bh
.eh_frame:000000000000D3E2                 db    0
.eh_frame:000000000000D3E3                 db    0
.eh_frame:000000000000D3E4                 db 0BCh
.eh_frame:000000000000D3E5                 db  91h
.eh_frame:000000000000D3E6                 db 0FFh
.eh_frame:000000000000D3E7                 db 0FFh
.eh_frame:000000000000D3E8                 db  36h ; 6
.eh_frame:000000000000D3E9                 db    0
.eh_frame:000000000000D3EA                 db    0
.eh_frame:000000000000D3EB                 db    0
.eh_frame:000000000000D3EC                 db    0
.eh_frame:000000000000D3ED                 db  44h ; D
.eh_frame:000000000000D3EE                 db  0Eh
.eh_frame:000000000000D3EF                 db  10h
.eh_frame:000000000000D3F0                 db  83h
.eh_frame:000000000000D3F1                 db    2
.eh_frame:000000000000D3F2                 db  5Dh ; ]
.eh_frame:000000000000D3F3                 db  0Ah
.eh_frame:000000000000D3F4                 db  0Eh
.eh_frame:000000000000D3F5                 db    8
.eh_frame:000000000000D3F6                 db  47h ; G
.eh_frame:000000000000D3F7                 db  0Bh
.eh_frame:000000000000D3F8                 db  48h ; H
.eh_frame:000000000000D3F9                 db  0Ah
.eh_frame:000000000000D3FA                 db  0Eh
.eh_frame:000000000000D3FB                 db    8
.eh_frame:000000000000D3FC                 db  41h ; A
.eh_frame:000000000000D3FD                 db  0Bh
.eh_frame:000000000000D3FE                 db    0
.eh_frame:000000000000D3FF                 db    0
.eh_frame:000000000000D400                 db  10h
.eh_frame:000000000000D401                 db    0
.eh_frame:000000000000D402                 db    0
.eh_frame:000000000000D403                 db    0
.eh_frame:000000000000D404                 db 0ACh
.eh_frame:000000000000D405                 db  0Bh
.eh_frame:000000000000D406                 db    0
.eh_frame:000000000000D407                 db    0
.eh_frame:000000000000D408                 db 0D8h
.eh_frame:000000000000D409                 db  91h
.eh_frame:000000000000D40A                 db 0FFh
.eh_frame:000000000000D40B                 db 0FFh
.eh_frame:000000000000D40C                 db  24h ; $
.eh_frame:000000000000D40D                 db    0
.eh_frame:000000000000D40E                 db    0
.eh_frame:000000000000D40F                 db    0
.eh_frame:000000000000D410                 db    0
.eh_frame:000000000000D411                 db  5Fh ; _
.eh_frame:000000000000D412                 db  0Eh
.eh_frame:000000000000D413                 db  10h
.eh_frame:000000000000D414                 db  14h
.eh_frame:000000000000D415                 db    0
.eh_frame:000000000000D416                 db    0
.eh_frame:000000000000D417                 db    0
.eh_frame:000000000000D418                 db 0C0h
.eh_frame:000000000000D419                 db  0Bh
.eh_frame:000000000000D41A                 db    0
.eh_frame:000000000000D41B                 db    0
.eh_frame:000000000000D41C                 db 0F4h
.eh_frame:000000000000D41D                 db  91h
.eh_frame:000000000000D41E                 db 0FFh
.eh_frame:000000000000D41F                 db 0FFh
.eh_frame:000000000000D420                 db  82h
.eh_frame:000000000000D421                 db    0
.eh_frame:000000000000D422                 db    0
.eh_frame:000000000000D423                 db    0
.eh_frame:000000000000D424                 db    0
.eh_frame:000000000000D425                 db    2
.eh_frame:000000000000D426                 db  5Fh ; _
.eh_frame:000000000000D427                 db  0Eh
.eh_frame:000000000000D428                 db  10h
.eh_frame:000000000000D429                 db  49h ; I
.eh_frame:000000000000D42A                 db  0Eh
.eh_frame:000000000000D42B                 db    8
.eh_frame:000000000000D42C                 db  14h
.eh_frame:000000000000D42D                 db    0
.eh_frame:000000000000D42E                 db    0
.eh_frame:000000000000D42F                 db    0
.eh_frame:000000000000D430                 db 0D8h
.eh_frame:000000000000D431                 db  0Bh
.eh_frame:000000000000D432                 db    0
.eh_frame:000000000000D433                 db    0
.eh_frame:000000000000D434                 db  6Ch ; l
.eh_frame:000000000000D435                 db  92h
.eh_frame:000000000000D436                 db 0FFh
.eh_frame:000000000000D437                 db 0FFh
.eh_frame:000000000000D438                 db  4Ah ; J
.eh_frame:000000000000D439                 db    0
.eh_frame:000000000000D43A                 db    0
.eh_frame:000000000000D43B                 db    0
.eh_frame:000000000000D43C                 db    0
.eh_frame:000000000000D43D                 db    2
.eh_frame:000000000000D43E                 db  45h ; E
.eh_frame:000000000000D43F                 db  0Eh
.eh_frame:000000000000D440                 db  10h
.eh_frame:000000000000D441                 db    0
.eh_frame:000000000000D442                 db    0
.eh_frame:000000000000D443                 db    0
.eh_frame:000000000000D444                 db  18h
.eh_frame:000000000000D445                 db    0
.eh_frame:000000000000D446                 db    0
.eh_frame:000000000000D447                 db    0
.eh_frame:000000000000D448                 db 0F0h
.eh_frame:000000000000D449                 db  0Bh
.eh_frame:000000000000D44A                 db    0
.eh_frame:000000000000D44B                 db    0
.eh_frame:000000000000D44C                 db 0A4h
.eh_frame:000000000000D44D                 db  92h
.eh_frame:000000000000D44E                 db 0FFh
.eh_frame:000000000000D44F                 db 0FFh
.eh_frame:000000000000D450                 db  17h
.eh_frame:000000000000D451                 db    0
.eh_frame:000000000000D452                 db    0
.eh_frame:000000000000D453                 db    0
.eh_frame:000000000000D454                 db    0
.eh_frame:000000000000D455                 db  41h ; A
.eh_frame:000000000000D456                 db  0Eh
.eh_frame:000000000000D457                 db  10h
.eh_frame:000000000000D458                 db  83h
.eh_frame:000000000000D459                 db    2
.eh_frame:000000000000D45A                 db  51h ; Q
.eh_frame:000000000000D45B                 db  0Eh
.eh_frame:000000000000D45C                 db    8
.eh_frame:000000000000D45D                 db    0
.eh_frame:000000000000D45E                 db    0
.eh_frame:000000000000D45F                 db    0
.eh_frame:000000000000D460                 db  18h
.eh_frame:000000000000D461                 db    0
.eh_frame:000000000000D462                 db    0
.eh_frame:000000000000D463                 db    0
.eh_frame:000000000000D464                 db  0Ch
.eh_frame:000000000000D465                 db  0Ch
.eh_frame:000000000000D466                 db    0
.eh_frame:000000000000D467                 db    0
.eh_frame:000000000000D468                 db 0A8h
.eh_frame:000000000000D469                 db  92h
.eh_frame:000000000000D46A                 db 0FFh
.eh_frame:000000000000D46B                 db 0FFh
.eh_frame:000000000000D46C                 db  2Eh ; .
.eh_frame:000000000000D46D                 db    0
.eh_frame:000000000000D46E                 db    0
.eh_frame:000000000000D46F                 db    0
.eh_frame:000000000000D470                 db    0
.eh_frame:000000000000D471                 db  47h ; G
.eh_frame:000000000000D472                 db  0Eh
.eh_frame:000000000000D473                 db  10h
.eh_frame:000000000000D474                 db  61h ; a
.eh_frame:000000000000D475                 db  0Ah
.eh_frame:000000000000D476                 db  0Eh
.eh_frame:000000000000D477                 db    8
.eh_frame:000000000000D478                 db  41h ; A
.eh_frame:000000000000D479                 db  0Bh
.eh_frame:000000000000D47A                 db    0
.eh_frame:000000000000D47B                 db    0
.eh_frame:000000000000D47C                 db  24h ; $
.eh_frame:000000000000D47D                 db    0
.eh_frame:000000000000D47E                 db    0
.eh_frame:000000000000D47F                 db    0
.eh_frame:000000000000D480                 db  28h ; (
.eh_frame:000000000000D481                 db  0Ch
.eh_frame:000000000000D482                 db    0
.eh_frame:000000000000D483                 db    0
.eh_frame:000000000000D484                 db 0BCh
.eh_frame:000000000000D485                 db  92h
.eh_frame:000000000000D486                 db 0FFh
.eh_frame:000000000000D487                 db 0FFh
.eh_frame:000000000000D488                 db  28h ; (
.eh_frame:000000000000D489                 db    0
.eh_frame:000000000000D48A                 db    0
.eh_frame:000000000000D48B                 db    0
.eh_frame:000000000000D48C                 db    0
.eh_frame:000000000000D48D                 db  41h ; A
.eh_frame:000000000000D48E                 db  0Eh
.eh_frame:000000000000D48F                 db  10h
.eh_frame:000000000000D490                 db  86h
.eh_frame:000000000000D491                 db    2
.eh_frame:000000000000D492                 db  41h ; A
.eh_frame:000000000000D493                 db  0Eh
.eh_frame:000000000000D494                 db  18h
.eh_frame:000000000000D495                 db  83h
.eh_frame:000000000000D496                 db    3
.eh_frame:000000000000D497                 db  4Dh ; M
.eh_frame:000000000000D498                 db  0Eh
.eh_frame:000000000000D499                 db  20h
.eh_frame:000000000000D49A                 db  49h ; I
.eh_frame:000000000000D49B                 db  0Eh
.eh_frame:000000000000D49C                 db  18h
.eh_frame:000000000000D49D                 db  47h ; G
.eh_frame:000000000000D49E                 db  0Eh
.eh_frame:000000000000D49F                 db  10h
.eh_frame:000000000000D4A0                 db  41h ; A
.eh_frame:000000000000D4A1                 db  0Eh
.eh_frame:000000000000D4A2                 db    8
.eh_frame:000000000000D4A3                 db    0
.eh_frame:000000000000D4A4                 db  18h
.eh_frame:000000000000D4A5                 db    0
.eh_frame:000000000000D4A6                 db    0
.eh_frame:000000000000D4A7                 db    0
.eh_frame:000000000000D4A8                 db  50h ; P
.eh_frame:000000000000D4A9                 db  0Ch
.eh_frame:000000000000D4AA                 db    0
.eh_frame:000000000000D4AB                 db    0
.eh_frame:000000000000D4AC                 db 0C4h
.eh_frame:000000000000D4AD                 db  92h
.eh_frame:000000000000D4AE                 db 0FFh
.eh_frame:000000000000D4AF                 db 0FFh
.eh_frame:000000000000D4B0                 db  13h
.eh_frame:000000000000D4B1                 db    0
.eh_frame:000000000000D4B2                 db    0
.eh_frame:000000000000D4B3                 db    0
.eh_frame:000000000000D4B4                 db    0
.eh_frame:000000000000D4B5                 db  41h ; A
.eh_frame:000000000000D4B6                 db  0Eh
.eh_frame:000000000000D4B7                 db  10h
.eh_frame:000000000000D4B8                 db  83h
.eh_frame:000000000000D4B9                 db    2
.eh_frame:000000000000D4BA                 db  50h ; P
.eh_frame:000000000000D4BB                 db  0Eh
.eh_frame:000000000000D4BC                 db    8
.eh_frame:000000000000D4BD                 db    0
.eh_frame:000000000000D4BE                 db    0
.eh_frame:000000000000D4BF                 db    0
.eh_frame:000000000000D4C0                 db  14h
.eh_frame:000000000000D4C1                 db    0
.eh_frame:000000000000D4C2                 db    0
.eh_frame:000000000000D4C3                 db    0
.eh_frame:000000000000D4C4                 db  6Ch ; l
.eh_frame:000000000000D4C5                 db  0Ch
.eh_frame:000000000000D4C6                 db    0
.eh_frame:000000000000D4C7                 db    0
.eh_frame:000000000000D4C8                 db 0C8h
.eh_frame:000000000000D4C9                 db  92h
.eh_frame:000000000000D4CA                 db 0FFh
.eh_frame:000000000000D4CB                 db 0FFh
.eh_frame:000000000000D4CC                 db  35h ; 5
.eh_frame:000000000000D4CD                 db    0
.eh_frame:000000000000D4CE                 db    0
.eh_frame:000000000000D4CF                 db    0
.eh_frame:000000000000D4D0                 db    0
.eh_frame:000000000000D4D1                 db  4Bh ; K
.eh_frame:000000000000D4D2                 db  0Eh
.eh_frame:000000000000D4D3                 db  10h
.eh_frame:000000000000D4D4                 db    0
.eh_frame:000000000000D4D5                 db    0
.eh_frame:000000000000D4D6                 db    0
.eh_frame:000000000000D4D7                 db    0
.eh_frame:000000000000D4D8                 db  18h
.eh_frame:000000000000D4D9                 db    0
.eh_frame:000000000000D4DA                 db    0
.eh_frame:000000000000D4DB                 db    0
.eh_frame:000000000000D4DC                 db  84h
.eh_frame:000000000000D4DD                 db  0Ch
.eh_frame:000000000000D4DE                 db    0
.eh_frame:000000000000D4DF                 db    0
.eh_frame:000000000000D4E0                 db 0F0h
.eh_frame:000000000000D4E1                 db  92h
.eh_frame:000000000000D4E2                 db 0FFh
.eh_frame:000000000000D4E3                 db 0FFh
.eh_frame:000000000000D4E4                 db  4Fh ; O
.eh_frame:000000000000D4E5                 db    0
.eh_frame:000000000000D4E6                 db    0
.eh_frame:000000000000D4E7                 db    0
.eh_frame:000000000000D4E8                 db    0
.eh_frame:000000000000D4E9                 db  44h ; D
.eh_frame:000000000000D4EA                 db  0Eh
.eh_frame:000000000000D4EB                 db  10h
.eh_frame:000000000000D4EC                 db  54h ; T
.eh_frame:000000000000D4ED                 db  0Ah
.eh_frame:000000000000D4EE                 db  0Eh
.eh_frame:000000000000D4EF                 db    8
.eh_frame:000000000000D4F0                 db  48h ; H
.eh_frame:000000000000D4F1                 db  0Bh
.eh_frame:000000000000D4F2                 db    0
.eh_frame:000000000000D4F3                 db    0
.eh_frame:000000000000D4F4                 db  10h
.eh_frame:000000000000D4F5                 db    0
.eh_frame:000000000000D4F6                 db    0
.eh_frame:000000000000D4F7                 db    0
.eh_frame:000000000000D4F8                 db 0A0h
.eh_frame:000000000000D4F9                 db  0Ch
.eh_frame:000000000000D4FA                 db    0
.eh_frame:000000000000D4FB                 db    0
.eh_frame:000000000000D4FC                 db  24h ; $
.eh_frame:000000000000D4FD                 db  93h
.eh_frame:000000000000D4FE                 db 0FFh
.eh_frame:000000000000D4FF                 db 0FFh
.eh_frame:000000000000D500                 db  29h ; )
.eh_frame:000000000000D501                 db    0
.eh_frame:000000000000D502                 db    0
.eh_frame:000000000000D503                 db    0
.eh_frame:000000000000D504                 db    0
.eh_frame:000000000000D505                 db    0
.eh_frame:000000000000D506                 db    0
.eh_frame:000000000000D507                 db    0
.eh_frame:000000000000D508                 db  24h ; $
.eh_frame:000000000000D509                 db    0
.eh_frame:000000000000D50A                 db    0
.eh_frame:000000000000D50B                 db    0
.eh_frame:000000000000D50C                 db 0B4h
.eh_frame:000000000000D50D                 db  0Ch
.eh_frame:000000000000D50E                 db    0
.eh_frame:000000000000D50F                 db    0
.eh_frame:000000000000D510                 db  40h ; @
.eh_frame:000000000000D511                 db  93h
.eh_frame:000000000000D512                 db 0FFh
.eh_frame:000000000000D513                 db 0FFh
.eh_frame:000000000000D514                 db  97h
.eh_frame:000000000000D515                 db    0
.eh_frame:000000000000D516                 db    0
.eh_frame:000000000000D517                 db    0
.eh_frame:000000000000D518                 db    0
.eh_frame:000000000000D519                 db  41h ; A
.eh_frame:000000000000D51A                 db  0Eh
.eh_frame:000000000000D51B                 db  10h
.eh_frame:000000000000D51C                 db  83h
.eh_frame:000000000000D51D                 db    2
.eh_frame:000000000000D51E                 db  4Bh ; K
.eh_frame:000000000000D51F                 db  0Eh
.eh_frame:000000000000D520                 db  30h ; 0
.eh_frame:000000000000D521                 db    2
.eh_frame:000000000000D522                 db  76h ; v
.eh_frame:000000000000D523                 db  0Ah
.eh_frame:000000000000D524                 db  0Eh
.eh_frame:000000000000D525                 db  10h
.eh_frame:000000000000D526                 db  41h ; A
.eh_frame:000000000000D527                 db  0Eh
.eh_frame:000000000000D528                 db    8
.eh_frame:000000000000D529                 db  45h ; E
.eh_frame:000000000000D52A                 db  0Bh
.eh_frame:000000000000D52B                 db    0
.eh_frame:000000000000D52C                 db    0
.eh_frame:000000000000D52D                 db    0
.eh_frame:000000000000D52E                 db    0
.eh_frame:000000000000D52F                 db    0
.eh_frame:000000000000D530                 db  1Ch
.eh_frame:000000000000D531                 db    0
.eh_frame:000000000000D532                 db    0
.eh_frame:000000000000D533                 db    0
.eh_frame:000000000000D534                 db 0DCh
.eh_frame:000000000000D535                 db  0Ch
.eh_frame:000000000000D536                 db    0
.eh_frame:000000000000D537                 db    0
.eh_frame:000000000000D538                 db 0B8h
.eh_frame:000000000000D539                 db  93h
.eh_frame:000000000000D53A                 db 0FFh
.eh_frame:000000000000D53B                 db 0FFh
.eh_frame:000000000000D53C                 db  40h ; @
.eh_frame:000000000000D53D                 db    0
.eh_frame:000000000000D53E                 db    0
.eh_frame:000000000000D53F                 db    0
.eh_frame:000000000000D540                 db    0
.eh_frame:000000000000D541                 db  44h ; D
.eh_frame:000000000000D542                 db  0Eh
.eh_frame:000000000000D543                 db  10h
.eh_frame:000000000000D544                 db  83h
.eh_frame:000000000000D545                 db    2
.eh_frame:000000000000D546                 db  5Ah ; Z
.eh_frame:000000000000D547                 db  0Ah
.eh_frame:000000000000D548                 db  0Eh
.eh_frame:000000000000D549                 db    8
.eh_frame:000000000000D54A                 db  4Ah ; J
.eh_frame:000000000000D54B                 db  0Bh
.eh_frame:000000000000D54C                 db  53h ; S
.eh_frame:000000000000D54D                 db  0Eh
.eh_frame:000000000000D54E                 db    8
.eh_frame:000000000000D54F                 db    0
.eh_frame:000000000000D550                 db  14h
.eh_frame:000000000000D551                 db    0
.eh_frame:000000000000D552                 db    0
.eh_frame:000000000000D553                 db    0
.eh_frame:000000000000D554                 db 0FCh
.eh_frame:000000000000D555                 db  0Ch
.eh_frame:000000000000D556                 db    0
.eh_frame:000000000000D557                 db    0
.eh_frame:000000000000D558                 db 0D8h
.eh_frame:000000000000D559                 db  93h
.eh_frame:000000000000D55A                 db 0FFh
.eh_frame:000000000000D55B                 db 0FFh
.eh_frame:000000000000D55C                 db  29h ; )
.eh_frame:000000000000D55D                 db    0
.eh_frame:000000000000D55E                 db    0
.eh_frame:000000000000D55F                 db    0
.eh_frame:000000000000D560                 db    0
.eh_frame:000000000000D561                 db    0
.eh_frame:000000000000D562                 db    0
.eh_frame:000000000000D563                 db    0
.eh_frame:000000000000D564                 db    0
.eh_frame:000000000000D565                 db    0
.eh_frame:000000000000D566                 db    0
.eh_frame:000000000000D567                 db    0
.eh_frame:000000000000D568                 db  2Ch ; ,
.eh_frame:000000000000D569                 db    0
.eh_frame:000000000000D56A                 db    0
.eh_frame:000000000000D56B                 db    0
.eh_frame:000000000000D56C                 db  14h
.eh_frame:000000000000D56D                 db  0Dh
.eh_frame:000000000000D56E                 db    0
.eh_frame:000000000000D56F                 db    0
.eh_frame:000000000000D570                 db 0F0h
.eh_frame:000000000000D571                 db  93h
.eh_frame:000000000000D572                 db 0FFh
.eh_frame:000000000000D573                 db 0FFh
.eh_frame:000000000000D574                 db  57h ; W
.eh_frame:000000000000D575                 db    0
.eh_frame:000000000000D576                 db    0
.eh_frame:000000000000D577                 db    0
.eh_frame:000000000000D578                 db    0
.eh_frame:000000000000D579                 db  63h ; c
.eh_frame:000000000000D57A                 db  0Eh
.eh_frame:000000000000D57B                 db  10h
.eh_frame:000000000000D57C                 db  8Ch
.eh_frame:000000000000D57D                 db    2
.eh_frame:000000000000D57E                 db  41h ; A
.eh_frame:000000000000D57F                 db  0Eh
.eh_frame:000000000000D580                 db  18h
.eh_frame:000000000000D581                 db  86h
.eh_frame:000000000000D582                 db    3
.eh_frame:000000000000D583                 db  44h ; D
.eh_frame:000000000000D584                 db  0Eh
.eh_frame:000000000000D585                 db  20h
.eh_frame:000000000000D586                 db  83h
.eh_frame:000000000000D587                 db    4
.eh_frame:000000000000D588                 db  6Bh ; k
.eh_frame:000000000000D589                 db  0Eh
.eh_frame:000000000000D58A                 db  18h
.eh_frame:000000000000D58B                 db  41h ; A
.eh_frame:000000000000D58C                 db  0Eh
.eh_frame:000000000000D58D                 db  10h
.eh_frame:000000000000D58E                 db  42h ; B
.eh_frame:000000000000D58F                 db  0Eh
.eh_frame:000000000000D590                 db    8
.eh_frame:000000000000D591                 db    0
.eh_frame:000000000000D592                 db    0
.eh_frame:000000000000D593                 db    0
.eh_frame:000000000000D594                 db    0
.eh_frame:000000000000D595                 db    0
.eh_frame:000000000000D596                 db    0
.eh_frame:000000000000D597                 db    0
.eh_frame:000000000000D598                 db  10h
.eh_frame:000000000000D599                 db    0
.eh_frame:000000000000D59A                 db    0
.eh_frame:000000000000D59B                 db    0
.eh_frame:000000000000D59C                 db  44h ; D
.eh_frame:000000000000D59D                 db  0Dh
.eh_frame:000000000000D59E                 db    0
.eh_frame:000000000000D59F                 db    0
.eh_frame:000000000000D5A0                 db  20h
.eh_frame:000000000000D5A1                 db  94h
.eh_frame:000000000000D5A2                 db 0FFh
.eh_frame:000000000000D5A3                 db 0FFh
.eh_frame:000000000000D5A4                 db  1Ah
.eh_frame:000000000000D5A5                 db    0
.eh_frame:000000000000D5A6                 db    0
.eh_frame:000000000000D5A7                 db    0
.eh_frame:000000000000D5A8                 db    0
.eh_frame:000000000000D5A9                 db    0
.eh_frame:000000000000D5AA                 db    0
.eh_frame:000000000000D5AB                 db    0
.eh_frame:000000000000D5AC                 db  10h
.eh_frame:000000000000D5AD                 db    0
.eh_frame:000000000000D5AE                 db    0
.eh_frame:000000000000D5AF                 db    0
.eh_frame:000000000000D5B0                 db  58h ; X
.eh_frame:000000000000D5B1                 db  0Dh
.eh_frame:000000000000D5B2                 db    0
.eh_frame:000000000000D5B3                 db    0
.eh_frame:000000000000D5B4                 db  2Ch ; ,
.eh_frame:000000000000D5B5                 db  94h
.eh_frame:000000000000D5B6                 db 0FFh
.eh_frame:000000000000D5B7                 db 0FFh
.eh_frame:000000000000D5B8                 db  0Dh
.eh_frame:000000000000D5B9                 db    0
.eh_frame:000000000000D5BA                 db    0
.eh_frame:000000000000D5BB                 db    0
.eh_frame:000000000000D5BC                 db    0
.eh_frame:000000000000D5BD                 db    0
.eh_frame:000000000000D5BE                 db    0
.eh_frame:000000000000D5BF                 db    0
.eh_frame:000000000000D5C0                 db  10h
.eh_frame:000000000000D5C1                 db    0
.eh_frame:000000000000D5C2                 db    0
.eh_frame:000000000000D5C3                 db    0
.eh_frame:000000000000D5C4                 db  6Ch ; l
.eh_frame:000000000000D5C5                 db  0Dh
.eh_frame:000000000000D5C6                 db    0
.eh_frame:000000000000D5C7                 db    0
.eh_frame:000000000000D5C8                 db  28h ; (
.eh_frame:000000000000D5C9                 db  94h
.eh_frame:000000000000D5CA                 db 0FFh
.eh_frame:000000000000D5CB                 db 0FFh
.eh_frame:000000000000D5CC                 db  0Ch
.eh_frame:000000000000D5CD                 db    0
.eh_frame:000000000000D5CE                 db    0
.eh_frame:000000000000D5CF                 db    0
.eh_frame:000000000000D5D0                 db    0
.eh_frame:000000000000D5D1                 db    0
.eh_frame:000000000000D5D2                 db    0
.eh_frame:000000000000D5D3                 db    0
.eh_frame:000000000000D5D4                 db  10h
.eh_frame:000000000000D5D5                 db    0
.eh_frame:000000000000D5D6                 db    0
.eh_frame:000000000000D5D7                 db    0
.eh_frame:000000000000D5D8                 db  80h
.eh_frame:000000000000D5D9                 db  0Dh
.eh_frame:000000000000D5DA                 db    0
.eh_frame:000000000000D5DB                 db    0
.eh_frame:000000000000D5DC                 db  24h ; $
.eh_frame:000000000000D5DD                 db  94h
.eh_frame:000000000000D5DE                 db 0FFh
.eh_frame:000000000000D5DF                 db 0FFh
.eh_frame:000000000000D5E0                 db  0Ah
.eh_frame:000000000000D5E1                 db    0
.eh_frame:000000000000D5E2                 db    0
.eh_frame:000000000000D5E3                 db    0
.eh_frame:000000000000D5E4                 db    0
.eh_frame:000000000000D5E5                 db    0
.eh_frame:000000000000D5E6                 db    0
.eh_frame:000000000000D5E7                 db    0
.eh_frame:000000000000D5E8                 db  10h
.eh_frame:000000000000D5E9                 db    0
.eh_frame:000000000000D5EA                 db    0
.eh_frame:000000000000D5EB                 db    0
.eh_frame:000000000000D5EC                 db  94h
.eh_frame:000000000000D5ED                 db  0Dh
.eh_frame:000000000000D5EE                 db    0
.eh_frame:000000000000D5EF                 db    0
.eh_frame:000000000000D5F0                 db  20h
.eh_frame:000000000000D5F1                 db  94h
.eh_frame:000000000000D5F2                 db 0FFh
.eh_frame:000000000000D5F3                 db 0FFh
.eh_frame:000000000000D5F4                 db  26h ; &
.eh_frame:000000000000D5F5                 db    0
.eh_frame:000000000000D5F6                 db    0
.eh_frame:000000000000D5F7                 db    0
.eh_frame:000000000000D5F8                 db    0
.eh_frame:000000000000D5F9                 db    0
.eh_frame:000000000000D5FA                 db    0
.eh_frame:000000000000D5FB                 db    0
.eh_frame:000000000000D5FC                 db  38h ; 8
.eh_frame:000000000000D5FD                 db    0
.eh_frame:000000000000D5FE                 db    0
.eh_frame:000000000000D5FF                 db    0
.eh_frame:000000000000D600                 db 0A8h
.eh_frame:000000000000D601                 db  0Dh
.eh_frame:000000000000D602                 db    0
.eh_frame:000000000000D603                 db    0
.eh_frame:000000000000D604                 db  3Ch ; <
.eh_frame:000000000000D605                 db  94h
.eh_frame:000000000000D606                 db 0FFh
.eh_frame:000000000000D607                 db 0FFh
.eh_frame:000000000000D608                 db 0C5h
.eh_frame:000000000000D609                 db    1
.eh_frame:000000000000D60A                 db    0
.eh_frame:000000000000D60B                 db    0
.eh_frame:000000000000D60C                 db    0
.eh_frame:000000000000D60D                 db  42h ; B
.eh_frame:000000000000D60E                 db  0Eh
.eh_frame:000000000000D60F                 db  10h
.eh_frame:000000000000D610                 db  8Ch
.eh_frame:000000000000D611                 db    2
.eh_frame:000000000000D612                 db  41h ; A
.eh_frame:000000000000D613                 db  0Eh
.eh_frame:000000000000D614                 db  18h
.eh_frame:000000000000D615                 db  86h
.eh_frame:000000000000D616                 db    3
.eh_frame:000000000000D617                 db  44h ; D
.eh_frame:000000000000D618                 db  0Eh
.eh_frame:000000000000D619                 db  20h
.eh_frame:000000000000D61A                 db  83h
.eh_frame:000000000000D61B                 db    4
.eh_frame:000000000000D61C                 db    2
.eh_frame:000000000000D61D                 db  72h ; r
.eh_frame:000000000000D61E                 db  0Ah
.eh_frame:000000000000D61F                 db  0Eh
.eh_frame:000000000000D620                 db  18h
.eh_frame:000000000000D621                 db  41h ; A
.eh_frame:000000000000D622                 db  0Eh
.eh_frame:000000000000D623                 db  10h
.eh_frame:000000000000D624                 db  42h ; B
.eh_frame:000000000000D625                 db  0Eh
.eh_frame:000000000000D626                 db    8
.eh_frame:000000000000D627                 db  44h ; D
.eh_frame:000000000000D628                 db  0Bh
.eh_frame:000000000000D629                 db    2
.eh_frame:000000000000D62A                 db  54h ; T
.eh_frame:000000000000D62B                 db  0Ah
.eh_frame:000000000000D62C                 db  0Eh
.eh_frame:000000000000D62D                 db  18h
.eh_frame:000000000000D62E                 db  45h ; E
.eh_frame:000000000000D62F                 db  0Eh
.eh_frame:000000000000D630                 db  10h
.eh_frame:000000000000D631                 db  42h ; B
.eh_frame:000000000000D632                 db  0Eh
.eh_frame:000000000000D633                 db    8
.eh_frame:000000000000D634                 db  45h ; E
.eh_frame:000000000000D635                 db  0Bh
.eh_frame:000000000000D636                 db    0
.eh_frame:000000000000D637                 db    0
.eh_frame:000000000000D638                 db  4Ch ; L
.eh_frame:000000000000D639                 db    0
.eh_frame:000000000000D63A                 db    0
.eh_frame:000000000000D63B                 db    0
.eh_frame:000000000000D63C                 db 0E4h
.eh_frame:000000000000D63D                 db  0Dh
.eh_frame:000000000000D63E                 db    0
.eh_frame:000000000000D63F                 db    0
.eh_frame:000000000000D640                 db 0D0h
.eh_frame:000000000000D641                 db  95h
.eh_frame:000000000000D642                 db 0FFh
.eh_frame:000000000000D643                 db 0FFh
.eh_frame:000000000000D644                 db    5
.eh_frame:000000000000D645                 db    1
.eh_frame:000000000000D646                 db    0
.eh_frame:000000000000D647                 db    0
.eh_frame:000000000000D648                 db    0
.eh_frame:000000000000D649                 db  42h ; B
.eh_frame:000000000000D64A                 db  0Eh
.eh_frame:000000000000D64B                 db  10h
.eh_frame:000000000000D64C                 db  8Dh
.eh_frame:000000000000D64D                 db    2
.eh_frame:000000000000D64E                 db  42h ; B
.eh_frame:000000000000D64F                 db  0Eh
.eh_frame:000000000000D650                 db  18h
.eh_frame:000000000000D651                 db  8Ch
.eh_frame:000000000000D652                 db    3
.eh_frame:000000000000D653                 db  44h ; D
.eh_frame:000000000000D654                 db  0Eh
.eh_frame:000000000000D655                 db  20h
.eh_frame:000000000000D656                 db  86h
.eh_frame:000000000000D657                 db    4
.eh_frame:000000000000D658                 db  41h ; A
.eh_frame:000000000000D659                 db  0Eh
.eh_frame:000000000000D65A                 db  28h ; (
.eh_frame:000000000000D65B                 db  83h
.eh_frame:000000000000D65C                 db    5
.eh_frame:000000000000D65D                 db  4Ah ; J
.eh_frame:000000000000D65E                 db  0Eh
.eh_frame:000000000000D65F                 db  30h ; 0
.eh_frame:000000000000D660                 db    2
.eh_frame:000000000000D661                 db 0B3h
.eh_frame:000000000000D662                 db  0Ah
.eh_frame:000000000000D663                 db  0Eh
.eh_frame:000000000000D664                 db  28h ; (
.eh_frame:000000000000D665                 db  41h ; A
.eh_frame:000000000000D666                 db  0Eh
.eh_frame:000000000000D667                 db  20h
.eh_frame:000000000000D668                 db  41h ; A
.eh_frame:000000000000D669                 db  0Eh
.eh_frame:000000000000D66A                 db  18h
.eh_frame:000000000000D66B                 db  42h ; B
.eh_frame:000000000000D66C                 db  0Eh
.eh_frame:000000000000D66D                 db  10h
.eh_frame:000000000000D66E                 db  42h ; B
.eh_frame:000000000000D66F                 db  0Eh
.eh_frame:000000000000D670                 db    8
.eh_frame:000000000000D671                 db  44h ; D
.eh_frame:000000000000D672                 db  0Bh
.eh_frame:000000000000D673                 db  5Dh ; ]
.eh_frame:000000000000D674                 db  0Ah
.eh_frame:000000000000D675                 db  0Eh
.eh_frame:000000000000D676                 db  28h ; (
.eh_frame:000000000000D677                 db  44h ; D
.eh_frame:000000000000D678                 db  0Eh
.eh_frame:000000000000D679                 db  20h
.eh_frame:000000000000D67A                 db  41h ; A
.eh_frame:000000000000D67B                 db  0Eh
.eh_frame:000000000000D67C                 db  18h
.eh_frame:000000000000D67D                 db  42h ; B
.eh_frame:000000000000D67E                 db  0Eh
.eh_frame:000000000000D67F                 db  10h
.eh_frame:000000000000D680                 db  42h ; B
.eh_frame:000000000000D681                 db  0Eh
.eh_frame:000000000000D682                 db    8
.eh_frame:000000000000D683                 db  4Ah ; J
.eh_frame:000000000000D684                 db  0Bh
.eh_frame:000000000000D685                 db    0
.eh_frame:000000000000D686                 db    0
.eh_frame:000000000000D687                 db    0
.eh_frame:000000000000D688                 db  34h ; 4
.eh_frame:000000000000D689                 db    0
.eh_frame:000000000000D68A                 db    0
.eh_frame:000000000000D68B                 db    0
.eh_frame:000000000000D68C                 db  34h ; 4
.eh_frame:000000000000D68D                 db  0Eh
.eh_frame:000000000000D68E                 db    0
.eh_frame:000000000000D68F                 db    0
.eh_frame:000000000000D690                 db  90h
.eh_frame:000000000000D691                 db  96h
.eh_frame:000000000000D692                 db 0FFh
.eh_frame:000000000000D693                 db 0FFh
.eh_frame:000000000000D694                 db  8Ah
.eh_frame:000000000000D695                 db    0
.eh_frame:000000000000D696                 db    0
.eh_frame:000000000000D697                 db    0
.eh_frame:000000000000D698                 db    0
.eh_frame:000000000000D699                 db  42h ; B
.eh_frame:000000000000D69A                 db  0Eh
.eh_frame:000000000000D69B                 db  10h
.eh_frame:000000000000D69C                 db  8Dh
.eh_frame:000000000000D69D                 db    2
.eh_frame:000000000000D69E                 db  42h ; B
.eh_frame:000000000000D69F                 db  0Eh
.eh_frame:000000000000D6A0                 db  18h
.eh_frame:000000000000D6A1                 db  8Ch
.eh_frame:000000000000D6A2                 db    3
.eh_frame:000000000000D6A3                 db  44h ; D
.eh_frame:000000000000D6A4                 db  0Eh
.eh_frame:000000000000D6A5                 db  20h
.eh_frame:000000000000D6A6                 db  86h
.eh_frame:000000000000D6A7                 db    4
.eh_frame:000000000000D6A8                 db  48h ; H
.eh_frame:000000000000D6A9                 db  0Eh
.eh_frame:000000000000D6AA                 db  28h ; (
.eh_frame:000000000000D6AB                 db  83h
.eh_frame:000000000000D6AC                 db    5
.eh_frame:000000000000D6AD                 db  4Ah ; J
.eh_frame:000000000000D6AE                 db  0Eh
.eh_frame:000000000000D6AF                 db  30h ; 0
.eh_frame:000000000000D6B0                 db    2
.eh_frame:000000000000D6B1                 db  66h ; f
.eh_frame:000000000000D6B2                 db  0Eh
.eh_frame:000000000000D6B3                 db  28h ; (
.eh_frame:000000000000D6B4                 db  44h ; D
.eh_frame:000000000000D6B5                 db  0Eh
.eh_frame:000000000000D6B6                 db  20h
.eh_frame:000000000000D6B7                 db  41h ; A
.eh_frame:000000000000D6B8                 db  0Eh
.eh_frame:000000000000D6B9                 db  18h
.eh_frame:000000000000D6BA                 db  42h ; B
.eh_frame:000000000000D6BB                 db  0Eh
.eh_frame:000000000000D6BC                 db  10h
.eh_frame:000000000000D6BD                 db  42h ; B
.eh_frame:000000000000D6BE                 db  0Eh
.eh_frame:000000000000D6BF                 db    8
.eh_frame:000000000000D6C0                 db  28h ; (
.eh_frame:000000000000D6C1                 db    0
.eh_frame:000000000000D6C2                 db    0
.eh_frame:000000000000D6C3                 db    0
.eh_frame:000000000000D6C4                 db  6Ch ; l
.eh_frame:000000000000D6C5                 db  0Eh
.eh_frame:000000000000D6C6                 db    0
.eh_frame:000000000000D6C7                 db    0
.eh_frame:000000000000D6C8                 db 0E8h
.eh_frame:000000000000D6C9                 db  96h
.eh_frame:000000000000D6CA                 db 0FFh
.eh_frame:000000000000D6CB                 db 0FFh
.eh_frame:000000000000D6CC                 db  42h ; B
.eh_frame:000000000000D6CD                 db    0
.eh_frame:000000000000D6CE                 db    0
.eh_frame:000000000000D6CF                 db    0
.eh_frame:000000000000D6D0                 db    0
.eh_frame:000000000000D6D1                 db  46h ; F
.eh_frame:000000000000D6D2                 db  0Eh
.eh_frame:000000000000D6D3                 db  10h
.eh_frame:000000000000D6D4                 db  86h
.eh_frame:000000000000D6D5                 db    2
.eh_frame:000000000000D6D6                 db  41h ; A
.eh_frame:000000000000D6D7                 db  0Eh
.eh_frame:000000000000D6D8                 db  18h
.eh_frame:000000000000D6D9                 db  83h
.eh_frame:000000000000D6DA                 db    3
.eh_frame:000000000000D6DB                 db  47h ; G
.eh_frame:000000000000D6DC                 db  0Eh
.eh_frame:000000000000D6DD                 db  20h
.eh_frame:000000000000D6DE                 db  68h ; h
.eh_frame:000000000000D6DF                 db  0Eh
.eh_frame:000000000000D6E0                 db  18h
.eh_frame:000000000000D6E1                 db  41h ; A
.eh_frame:000000000000D6E2                 db  0Eh
.eh_frame:000000000000D6E3                 db  10h
.eh_frame:000000000000D6E4                 db  41h ; A
.eh_frame:000000000000D6E5                 db  0Eh
.eh_frame:000000000000D6E6                 db    8
.eh_frame:000000000000D6E7                 db  48h ; H
.eh_frame:000000000000D6E8                 db 0C3h
.eh_frame:000000000000D6E9                 db 0C6h
.eh_frame:000000000000D6EA                 db    0
.eh_frame:000000000000D6EB                 db    0
.eh_frame:000000000000D6EC                 db  18h
.eh_frame:000000000000D6ED                 db    0
.eh_frame:000000000000D6EE                 db    0
.eh_frame:000000000000D6EF                 db    0
.eh_frame:000000000000D6F0                 db  98h
.eh_frame:000000000000D6F1                 db  0Eh
.eh_frame:000000000000D6F2                 db    0
.eh_frame:000000000000D6F3                 db    0
.eh_frame:000000000000D6F4                 db  0Ch
.eh_frame:000000000000D6F5                 db  97h
.eh_frame:000000000000D6F6                 db 0FFh
.eh_frame:000000000000D6F7                 db 0FFh
.eh_frame:000000000000D6F8                 db  39h ; 9
.eh_frame:000000000000D6F9                 db    0
.eh_frame:000000000000D6FA                 db    0
.eh_frame:000000000000D6FB                 db    0
.eh_frame:000000000000D6FC                 db    0
.eh_frame:000000000000D6FD                 db  41h ; A
.eh_frame:000000000000D6FE                 db  0Eh
.eh_frame:000000000000D6FF                 db  10h
.eh_frame:000000000000D700                 db  83h
.eh_frame:000000000000D701                 db    2
.eh_frame:000000000000D702                 db  68h ; h
.eh_frame:000000000000D703                 db  0Ah
.eh_frame:000000000000D704                 db  0Eh
.eh_frame:000000000000D705                 db    8
.eh_frame:000000000000D706                 db  47h ; G
.eh_frame:000000000000D707                 db  0Bh
.eh_frame:000000000000D708                 db  38h ; 8
.eh_frame:000000000000D709                 db    0
.eh_frame:000000000000D70A                 db    0
.eh_frame:000000000000D70B                 db    0
.eh_frame:000000000000D70C                 db 0B4h
.eh_frame:000000000000D70D                 db  0Eh
.eh_frame:000000000000D70E                 db    0
.eh_frame:000000000000D70F                 db    0
.eh_frame:000000000000D710                 db  30h ; 0
.eh_frame:000000000000D711                 db  97h
.eh_frame:000000000000D712                 db 0FFh
.eh_frame:000000000000D713                 db 0FFh
.eh_frame:000000000000D714                 db  2Ch ; ,
.eh_frame:000000000000D715                 db    1
.eh_frame:000000000000D716                 db    0
.eh_frame:000000000000D717                 db    0
.eh_frame:000000000000D718                 db    0
.eh_frame:000000000000D719                 db  42h ; B
.eh_frame:000000000000D71A                 db  0Eh
.eh_frame:000000000000D71B                 db  10h
.eh_frame:000000000000D71C                 db  8Dh
.eh_frame:000000000000D71D                 db    2
.eh_frame:000000000000D71E                 db  42h ; B
.eh_frame:000000000000D71F                 db  0Eh
.eh_frame:000000000000D720                 db  18h
.eh_frame:000000000000D721                 db  8Ch
.eh_frame:000000000000D722                 db    3
.eh_frame:000000000000D723                 db  41h ; A
.eh_frame:000000000000D724                 db  0Eh
.eh_frame:000000000000D725                 db  20h
.eh_frame:000000000000D726                 db  86h
.eh_frame:000000000000D727                 db    4
.eh_frame:000000000000D728                 db  41h ; A
.eh_frame:000000000000D729                 db  0Eh
.eh_frame:000000000000D72A                 db  28h ; (
.eh_frame:000000000000D72B                 db  83h
.eh_frame:000000000000D72C                 db    5
.eh_frame:000000000000D72D                 db  47h ; G
.eh_frame:000000000000D72E                 db  0Eh
.eh_frame:000000000000D72F                 db 0C0h
.eh_frame:000000000000D730                 db    1
.eh_frame:000000000000D731                 db    2
.eh_frame:000000000000D732                 db 0A4h
.eh_frame:000000000000D733                 db  0Ah
.eh_frame:000000000000D734                 db  0Eh
.eh_frame:000000000000D735                 db  28h ; (
.eh_frame:000000000000D736                 db  41h ; A
.eh_frame:000000000000D737                 db  0Eh
.eh_frame:000000000000D738                 db  20h
.eh_frame:000000000000D739                 db  41h ; A
.eh_frame:000000000000D73A                 db  0Eh
.eh_frame:000000000000D73B                 db  18h
.eh_frame:000000000000D73C                 db  42h ; B
.eh_frame:000000000000D73D                 db  0Eh
.eh_frame:000000000000D73E                 db  10h
.eh_frame:000000000000D73F                 db  42h ; B
.eh_frame:000000000000D740                 db  0Eh
.eh_frame:000000000000D741                 db    8
.eh_frame:000000000000D742                 db  49h ; I
.eh_frame:000000000000D743                 db  0Bh
.eh_frame:000000000000D744                 db  20h
.eh_frame:000000000000D745                 db    0
.eh_frame:000000000000D746                 db    0
.eh_frame:000000000000D747                 db    0
.eh_frame:000000000000D748                 db 0F0h
.eh_frame:000000000000D749                 db  0Eh
.eh_frame:000000000000D74A                 db    0
.eh_frame:000000000000D74B                 db    0
.eh_frame:000000000000D74C                 db  24h ; $
.eh_frame:000000000000D74D                 db  98h
.eh_frame:000000000000D74E                 db 0FFh
.eh_frame:000000000000D74F                 db 0FFh
.eh_frame:000000000000D750                 db  6Ah ; j
.eh_frame:000000000000D751                 db    0
.eh_frame:000000000000D752                 db    0
.eh_frame:000000000000D753                 db    0
.eh_frame:000000000000D754                 db    0
.eh_frame:000000000000D755                 db  44h ; D
.eh_frame:000000000000D756                 db  0Eh
.eh_frame:000000000000D757                 db  10h
.eh_frame:000000000000D758                 db  72h ; r
.eh_frame:000000000000D759                 db  0Ah
.eh_frame:000000000000D75A                 db  0Eh
.eh_frame:000000000000D75B                 db    8
.eh_frame:000000000000D75C                 db  4Ah ; J
.eh_frame:000000000000D75D                 db  0Bh
.eh_frame:000000000000D75E                 db  5Bh ; [
.eh_frame:000000000000D75F                 db  0Ah
.eh_frame:000000000000D760                 db  0Eh
.eh_frame:000000000000D761                 db    8
.eh_frame:000000000000D762                 db  45h ; E
.eh_frame:000000000000D763                 db  0Bh
.eh_frame:000000000000D764                 db  49h ; I
.eh_frame:000000000000D765                 db  0Eh
.eh_frame:000000000000D766                 db    8
.eh_frame:000000000000D767                 db    0
.eh_frame:000000000000D768                 db  40h ; @
.eh_frame:000000000000D769                 db    0
.eh_frame:000000000000D76A                 db    0
.eh_frame:000000000000D76B                 db    0
.eh_frame:000000000000D76C                 db  14h
.eh_frame:000000000000D76D                 db  0Fh
.eh_frame:000000000000D76E                 db    0
.eh_frame:000000000000D76F                 db    0
.eh_frame:000000000000D770                 db  70h ; p
.eh_frame:000000000000D771                 db  98h
.eh_frame:000000000000D772                 db 0FFh
.eh_frame:000000000000D773                 db 0FFh
.eh_frame:000000000000D774                 db  66h ; f
.eh_frame:000000000000D775                 db    0
.eh_frame:000000000000D776                 db    0
.eh_frame:000000000000D777                 db    0
.eh_frame:000000000000D778                 db    0
.eh_frame:000000000000D779                 db  41h ; A
.eh_frame:000000000000D77A                 db  0Eh
.eh_frame:000000000000D77B                 db  10h
.eh_frame:000000000000D77C                 db  86h
.eh_frame:000000000000D77D                 db    2
.eh_frame:000000000000D77E                 db  41h ; A
.eh_frame:000000000000D77F                 db  0Eh
.eh_frame:000000000000D780                 db  18h
.eh_frame:000000000000D781                 db  83h
.eh_frame:000000000000D782                 db    3
.eh_frame:000000000000D783                 db  49h ; I
.eh_frame:000000000000D784                 db  0Eh
.eh_frame:000000000000D785                 db  20h
.eh_frame:000000000000D786                 db  61h ; a
.eh_frame:000000000000D787                 db  0Ah
.eh_frame:000000000000D788                 db  0Eh
.eh_frame:000000000000D789                 db  18h
.eh_frame:000000000000D78A                 db  41h ; A
.eh_frame:000000000000D78B                 db  0Eh
.eh_frame:000000000000D78C                 db  10h
.eh_frame:000000000000D78D                 db  41h ; A
.eh_frame:000000000000D78E                 db  0Eh
.eh_frame:000000000000D78F                 db    8
.eh_frame:000000000000D790                 db  42h ; B
.eh_frame:000000000000D791                 db  0Bh
.eh_frame:000000000000D792                 db  5Bh ; [
.eh_frame:000000000000D793                 db  0Ah
.eh_frame:000000000000D794                 db  0Eh
.eh_frame:000000000000D795                 db  18h
.eh_frame:000000000000D796                 db  41h ; A
.eh_frame:000000000000D797                 db  0Eh
.eh_frame:000000000000D798                 db  10h
.eh_frame:000000000000D799                 db  41h ; A
.eh_frame:000000000000D79A                 db  0Eh
.eh_frame:000000000000D79B                 db    8
.eh_frame:000000000000D79C                 db  43h ; C
.eh_frame:000000000000D79D                 db  0Bh
.eh_frame:000000000000D79E                 db  4Eh ; N
.eh_frame:000000000000D79F                 db  0Ah
.eh_frame:000000000000D7A0                 db  0Eh
.eh_frame:000000000000D7A1                 db  18h
.eh_frame:000000000000D7A2                 db  41h ; A
.eh_frame:000000000000D7A3                 db  0Eh
.eh_frame:000000000000D7A4                 db  10h
.eh_frame:000000000000D7A5                 db  41h ; A
.eh_frame:000000000000D7A6                 db  0Eh
.eh_frame:000000000000D7A7                 db    8
.eh_frame:000000000000D7A8                 db  41h ; A
.eh_frame:000000000000D7A9                 db  0Bh
.eh_frame:000000000000D7AA                 db    0
.eh_frame:000000000000D7AB                 db    0
.eh_frame:000000000000D7AC                 db  28h ; (
.eh_frame:000000000000D7AD                 db    0
.eh_frame:000000000000D7AE                 db    0
.eh_frame:000000000000D7AF                 db    0
.eh_frame:000000000000D7B0                 db  58h ; X
.eh_frame:000000000000D7B1                 db  0Fh
.eh_frame:000000000000D7B2                 db    0
.eh_frame:000000000000D7B3                 db    0
.eh_frame:000000000000D7B4                 db  9Ch
.eh_frame:000000000000D7B5                 db  98h
.eh_frame:000000000000D7B6                 db 0FFh
.eh_frame:000000000000D7B7                 db 0FFh
.eh_frame:000000000000D7B8                 db  5Ch ; \
.eh_frame:000000000000D7B9                 db    0
.eh_frame:000000000000D7BA                 db    0
.eh_frame:000000000000D7BB                 db    0
.eh_frame:000000000000D7BC                 db    0
.eh_frame:000000000000D7BD                 db  41h ; A
.eh_frame:000000000000D7BE                 db  0Eh
.eh_frame:000000000000D7BF                 db  10h
.eh_frame:000000000000D7C0                 db  86h
.eh_frame:000000000000D7C1                 db    2
.eh_frame:000000000000D7C2                 db  41h ; A
.eh_frame:000000000000D7C3                 db  0Eh
.eh_frame:000000000000D7C4                 db  18h
.eh_frame:000000000000D7C5                 db  83h
.eh_frame:000000000000D7C6                 db    3
.eh_frame:000000000000D7C7                 db  47h ; G
.eh_frame:000000000000D7C8                 db  0Eh
.eh_frame:000000000000D7C9                 db  20h
.eh_frame:000000000000D7CA                 db  6Ch ; l
.eh_frame:000000000000D7CB                 db  0Ah
.eh_frame:000000000000D7CC                 db  0Eh
.eh_frame:000000000000D7CD                 db  18h
.eh_frame:000000000000D7CE                 db  43h ; C
.eh_frame:000000000000D7CF                 db  0Eh
.eh_frame:000000000000D7D0                 db  10h
.eh_frame:000000000000D7D1                 db  41h ; A
.eh_frame:000000000000D7D2                 db  0Eh
.eh_frame:000000000000D7D3                 db    8
.eh_frame:000000000000D7D4                 db  47h ; G
.eh_frame:000000000000D7D5                 db  0Bh
.eh_frame:000000000000D7D6                 db    0
.eh_frame:000000000000D7D7                 db    0
.eh_frame:000000000000D7D8                 db  24h ; $
.eh_frame:000000000000D7D9                 db    0
.eh_frame:000000000000D7DA                 db    0
.eh_frame:000000000000D7DB                 db    0
.eh_frame:000000000000D7DC                 db  84h
.eh_frame:000000000000D7DD                 db  0Fh
.eh_frame:000000000000D7DE                 db    0
.eh_frame:000000000000D7DF                 db    0
.eh_frame:000000000000D7E0                 db 0D0h
.eh_frame:000000000000D7E1                 db  98h
.eh_frame:000000000000D7E2                 db 0FFh
.eh_frame:000000000000D7E3                 db 0FFh
.eh_frame:000000000000D7E4                 db  6Bh ; k
.eh_frame:000000000000D7E5                 db    0
.eh_frame:000000000000D7E6                 db    0
.eh_frame:000000000000D7E7                 db    0
.eh_frame:000000000000D7E8                 db    0
.eh_frame:000000000000D7E9                 db  41h ; A
.eh_frame:000000000000D7EA                 db  0Eh
.eh_frame:000000000000D7EB                 db  10h
.eh_frame:000000000000D7EC                 db  83h
.eh_frame:000000000000D7ED                 db    2
.eh_frame:000000000000D7EE                 db  6Fh ; o
.eh_frame:000000000000D7EF                 db  0Ah
.eh_frame:000000000000D7F0                 db  0Eh
.eh_frame:000000000000D7F1                 db    8
.eh_frame:000000000000D7F2                 db  48h ; H
.eh_frame:000000000000D7F3                 db  0Bh
.eh_frame:000000000000D7F4                 db  5Ah ; Z
.eh_frame:000000000000D7F5                 db  0Ah
.eh_frame:000000000000D7F6                 db  0Eh
.eh_frame:000000000000D7F7                 db    8
.eh_frame:000000000000D7F8                 db  46h ; F
.eh_frame:000000000000D7F9                 db  0Bh
.eh_frame:000000000000D7FA                 db  52h ; R
.eh_frame:000000000000D7FB                 db  0Eh
.eh_frame:000000000000D7FC                 db    8
.eh_frame:000000000000D7FD                 db    0
.eh_frame:000000000000D7FE                 db    0
.eh_frame:000000000000D7FF                 db    0
.eh_frame:000000000000D800                 db  1Ch
.eh_frame:000000000000D801                 db    0
.eh_frame:000000000000D802                 db    0
.eh_frame:000000000000D803                 db    0
.eh_frame:000000000000D804                 db 0ACh
.eh_frame:000000000000D805                 db  0Fh
.eh_frame:000000000000D806                 db    0
.eh_frame:000000000000D807                 db    0
.eh_frame:000000000000D808                 db  18h
.eh_frame:000000000000D809                 db  99h
.eh_frame:000000000000D80A                 db 0FFh
.eh_frame:000000000000D80B                 db 0FFh
.eh_frame:000000000000D80C                 db  63h ; c
.eh_frame:000000000000D80D                 db    0
.eh_frame:000000000000D80E                 db    0
.eh_frame:000000000000D80F                 db    0
.eh_frame:000000000000D810                 db    0
.eh_frame:000000000000D811                 db  47h ; G
.eh_frame:000000000000D812                 db  0Eh
.eh_frame:000000000000D813                 db  10h
.eh_frame:000000000000D814                 db  83h
.eh_frame:000000000000D815                 db    2
.eh_frame:000000000000D816                 db  70h ; p
.eh_frame:000000000000D817                 db  0Ah
.eh_frame:000000000000D818                 db  0Eh
.eh_frame:000000000000D819                 db    8
.eh_frame:000000000000D81A                 db  49h ; I
.eh_frame:000000000000D81B                 db  0Bh
.eh_frame:000000000000D81C                 db  62h ; b
.eh_frame:000000000000D81D                 db  0Eh
.eh_frame:000000000000D81E                 db    8
.eh_frame:000000000000D81F                 db    0
.eh_frame:000000000000D820                 db  10h
.eh_frame:000000000000D821                 db    0
.eh_frame:000000000000D822                 db    0
.eh_frame:000000000000D823                 db    0
.eh_frame:000000000000D824                 db 0CCh
.eh_frame:000000000000D825                 db  0Fh
.eh_frame:000000000000D826                 db    0
.eh_frame:000000000000D827                 db    0
.eh_frame:000000000000D828                 db  68h ; h
.eh_frame:000000000000D829                 db  99h
.eh_frame:000000000000D82A                 db 0FFh
.eh_frame:000000000000D82B                 db 0FFh
.eh_frame:000000000000D82C                 db  3Ah ; :
.eh_frame:000000000000D82D                 db    0
.eh_frame:000000000000D82E                 db    0
.eh_frame:000000000000D82F                 db    0
.eh_frame:000000000000D830                 db    0
.eh_frame:000000000000D831                 db    0
.eh_frame:000000000000D832                 db    0
.eh_frame:000000000000D833                 db    0
.eh_frame:000000000000D834                 db  4Ch ; L
.eh_frame:000000000000D835                 db    0
.eh_frame:000000000000D836                 db    0
.eh_frame:000000000000D837                 db    0
.eh_frame:000000000000D838                 db 0E0h
.eh_frame:000000000000D839                 db  0Fh
.eh_frame:000000000000D83A                 db    0
.eh_frame:000000000000D83B                 db    0
.eh_frame:000000000000D83C                 db  94h
.eh_frame:000000000000D83D                 db  99h
.eh_frame:000000000000D83E                 db 0FFh
.eh_frame:000000000000D83F                 db 0FFh
.eh_frame:000000000000D840                 db  7Ah ; z
.eh_frame:000000000000D841                 db    2
.eh_frame:000000000000D842                 db    0
.eh_frame:000000000000D843                 db    0
.eh_frame:000000000000D844                 db    0
.eh_frame:000000000000D845                 db  42h ; B
.eh_frame:000000000000D846                 db  0Eh
.eh_frame:000000000000D847                 db  10h
.eh_frame:000000000000D848                 db  8Fh
.eh_frame:000000000000D849                 db    2
.eh_frame:000000000000D84A                 db  42h ; B
.eh_frame:000000000000D84B                 db  0Eh
.eh_frame:000000000000D84C                 db  18h
.eh_frame:000000000000D84D                 db  8Eh
.eh_frame:000000000000D84E                 db    3
.eh_frame:000000000000D84F                 db  45h ; E
.eh_frame:000000000000D850                 db  0Eh
.eh_frame:000000000000D851                 db  20h
.eh_frame:000000000000D852                 db  8Dh
.eh_frame:000000000000D853                 db    4
.eh_frame:000000000000D854                 db  42h ; B
.eh_frame:000000000000D855                 db  0Eh
.eh_frame:000000000000D856                 db  28h ; (
.eh_frame:000000000000D857                 db  8Ch
.eh_frame:000000000000D858                 db    5
.eh_frame:000000000000D859                 db  44h ; D
.eh_frame:000000000000D85A                 db  0Eh
.eh_frame:000000000000D85B                 db  30h ; 0
.eh_frame:000000000000D85C                 db  86h
.eh_frame:000000000000D85D                 db    6
.eh_frame:000000000000D85E                 db  41h ; A
.eh_frame:000000000000D85F                 db  0Eh
.eh_frame:000000000000D860                 db  38h ; 8
.eh_frame:000000000000D861                 db  83h
.eh_frame:000000000000D862                 db    7
.eh_frame:000000000000D863                 db  4Dh ; M
.eh_frame:000000000000D864                 db  0Eh
.eh_frame:000000000000D865                 db 0F0h
.eh_frame:000000000000D866                 db    1
.eh_frame:000000000000D867                 db    3
.eh_frame:000000000000D868                 db    8
.eh_frame:000000000000D869                 db    1
.eh_frame:000000000000D86A                 db  0Ah
.eh_frame:000000000000D86B                 db  0Eh
.eh_frame:000000000000D86C                 db  38h ; 8
.eh_frame:000000000000D86D                 db  41h ; A
.eh_frame:000000000000D86E                 db  0Eh
.eh_frame:000000000000D86F                 db  30h ; 0
.eh_frame:000000000000D870                 db  41h ; A
.eh_frame:000000000000D871                 db  0Eh
.eh_frame:000000000000D872                 db  28h ; (
.eh_frame:000000000000D873                 db  42h ; B
.eh_frame:000000000000D874                 db  0Eh
.eh_frame:000000000000D875                 db  20h
.eh_frame:000000000000D876                 db  42h ; B
.eh_frame:000000000000D877                 db  0Eh
.eh_frame:000000000000D878                 db  18h
.eh_frame:000000000000D879                 db  42h ; B
.eh_frame:000000000000D87A                 db  0Eh
.eh_frame:000000000000D87B                 db  10h
.eh_frame:000000000000D87C                 db  42h ; B
.eh_frame:000000000000D87D                 db  0Eh
.eh_frame:000000000000D87E                 db    8
.eh_frame:000000000000D87F                 db  41h ; A
.eh_frame:000000000000D880                 db  0Bh
.eh_frame:000000000000D881                 db    0
.eh_frame:000000000000D882                 db    0
.eh_frame:000000000000D883                 db    0
.eh_frame:000000000000D884                 db  40h ; @
.eh_frame:000000000000D885                 db    0
.eh_frame:000000000000D886                 db    0
.eh_frame:000000000000D887                 db    0
.eh_frame:000000000000D888                 db  30h ; 0
.eh_frame:000000000000D889                 db  10h
.eh_frame:000000000000D88A                 db    0
.eh_frame:000000000000D88B                 db    0
.eh_frame:000000000000D88C                 db 0C4h
.eh_frame:000000000000D88D                 db  9Bh
.eh_frame:000000000000D88E                 db 0FFh
.eh_frame:000000000000D88F                 db 0FFh
.eh_frame:000000000000D890                 db 0AFh
.eh_frame:000000000000D891                 db    0
.eh_frame:000000000000D892                 db    0
.eh_frame:000000000000D893                 db    0
.eh_frame:000000000000D894                 db    0
.eh_frame:000000000000D895                 db  48h ; H
.eh_frame:000000000000D896                 db  0Eh
.eh_frame:000000000000D897                 db  10h
.eh_frame:000000000000D898                 db  8Ch
.eh_frame:000000000000D899                 db    2
.eh_frame:000000000000D89A                 db  44h ; D
.eh_frame:000000000000D89B                 db  0Eh
.eh_frame:000000000000D89C                 db  18h
.eh_frame:000000000000D89D                 db  86h
.eh_frame:000000000000D89E                 db    3
.eh_frame:000000000000D89F                 db  41h ; A
.eh_frame:000000000000D8A0                 db  0Eh
.eh_frame:000000000000D8A1                 db  20h
.eh_frame:000000000000D8A2                 db  83h
.eh_frame:000000000000D8A3                 db    4
.eh_frame:000000000000D8A4                 db    2
.eh_frame:000000000000D8A5                 db  65h ; e
.eh_frame:000000000000D8A6                 db  0Ah
.eh_frame:000000000000D8A7                 db  0Eh
.eh_frame:000000000000D8A8                 db  18h
.eh_frame:000000000000D8A9                 db  46h ; F
.eh_frame:000000000000D8AA                 db  0Eh
.eh_frame:000000000000D8AB                 db  10h
.eh_frame:000000000000D8AC                 db  42h ; B
.eh_frame:000000000000D8AD                 db  0Eh
.eh_frame:000000000000D8AE                 db    8
.eh_frame:000000000000D8AF                 db  46h ; F
.eh_frame:000000000000D8B0                 db  0Bh
.eh_frame:000000000000D8B1                 db  5Eh ; ^
.eh_frame:000000000000D8B2                 db  0Ah
.eh_frame:000000000000D8B3                 db  0Eh
.eh_frame:000000000000D8B4                 db  18h
.eh_frame:000000000000D8B5                 db  41h ; A
.eh_frame:000000000000D8B6                 db  0Eh
.eh_frame:000000000000D8B7                 db  10h
.eh_frame:000000000000D8B8                 db  42h ; B
.eh_frame:000000000000D8B9                 db  0Eh
.eh_frame:000000000000D8BA                 db    8
.eh_frame:000000000000D8BB                 db  47h ; G
.eh_frame:000000000000D8BC                 db  0Bh
.eh_frame:000000000000D8BD                 db  41h ; A
.eh_frame:000000000000D8BE                 db  0Eh
.eh_frame:000000000000D8BF                 db  18h
.eh_frame:000000000000D8C0                 db  43h ; C
.eh_frame:000000000000D8C1                 db  0Eh
.eh_frame:000000000000D8C2                 db  10h
.eh_frame:000000000000D8C3                 db  42h ; B
.eh_frame:000000000000D8C4                 db  0Eh
.eh_frame:000000000000D8C5                 db    8
.eh_frame:000000000000D8C6                 db    0
.eh_frame:000000000000D8C7                 db    0
.eh_frame:000000000000D8C8                 db  18h
.eh_frame:000000000000D8C9                 db    0
.eh_frame:000000000000D8CA                 db    0
.eh_frame:000000000000D8CB                 db    0
.eh_frame:000000000000D8CC                 db  74h ; t
.eh_frame:000000000000D8CD                 db  10h
.eh_frame:000000000000D8CE                 db    0
.eh_frame:000000000000D8CF                 db    0
.eh_frame:000000000000D8D0                 db  30h ; 0
.eh_frame:000000000000D8D1                 db  9Ch
.eh_frame:000000000000D8D2                 db 0FFh
.eh_frame:000000000000D8D3                 db 0FFh
.eh_frame:000000000000D8D4                 db 0B8h
.eh_frame:000000000000D8D5                 db    0
.eh_frame:000000000000D8D6                 db    0
.eh_frame:000000000000D8D7                 db    0
.eh_frame:000000000000D8D8                 db    0
.eh_frame:000000000000D8D9                 db  44h ; D
.eh_frame:000000000000D8DA                 db  0Eh
.eh_frame:000000000000D8DB                 db  30h ; 0
.eh_frame:000000000000D8DC                 db    2
.eh_frame:000000000000D8DD                 db  55h ; U
.eh_frame:000000000000D8DE                 db  0Ah
.eh_frame:000000000000D8DF                 db  0Eh
.eh_frame:000000000000D8E0                 db    8
.eh_frame:000000000000D8E1                 db  47h ; G
.eh_frame:000000000000D8E2                 db  0Bh
.eh_frame:000000000000D8E3                 db    0
.eh_frame:000000000000D8E4                 db  4Ch ; L
.eh_frame:000000000000D8E5                 db    0
.eh_frame:000000000000D8E6                 db    0
.eh_frame:000000000000D8E7                 db    0
.eh_frame:000000000000D8E8                 db  90h
.eh_frame:000000000000D8E9                 db  10h
.eh_frame:000000000000D8EA                 db    0
.eh_frame:000000000000D8EB                 db    0
.eh_frame:000000000000D8EC                 db 0D4h
.eh_frame:000000000000D8ED                 db  9Ch
.eh_frame:000000000000D8EE                 db 0FFh
.eh_frame:000000000000D8EF                 db 0FFh
.eh_frame:000000000000D8F0                 db 0D1h
.eh_frame:000000000000D8F1                 db    9
.eh_frame:000000000000D8F2                 db    0
.eh_frame:000000000000D8F3                 db    0
.eh_frame:000000000000D8F4                 db    0
.eh_frame:000000000000D8F5                 db  42h ; B
.eh_frame:000000000000D8F6                 db  0Eh
.eh_frame:000000000000D8F7                 db  10h
.eh_frame:000000000000D8F8                 db  8Fh
.eh_frame:000000000000D8F9                 db    2
.eh_frame:000000000000D8FA                 db  42h ; B
.eh_frame:000000000000D8FB                 db  0Eh
.eh_frame:000000000000D8FC                 db  18h
.eh_frame:000000000000D8FD                 db  8Eh
.eh_frame:000000000000D8FE                 db    3
.eh_frame:000000000000D8FF                 db  45h ; E
.eh_frame:000000000000D900                 db  0Eh
.eh_frame:000000000000D901                 db  20h
.eh_frame:000000000000D902                 db  8Dh
.eh_frame:000000000000D903                 db    4
.eh_frame:000000000000D904                 db  42h ; B
.eh_frame:000000000000D905                 db  0Eh
.eh_frame:000000000000D906                 db  28h ; (
.eh_frame:000000000000D907                 db  8Ch
.eh_frame:000000000000D908                 db    5
.eh_frame:000000000000D909                 db  41h ; A
.eh_frame:000000000000D90A                 db  0Eh
.eh_frame:000000000000D90B                 db  30h ; 0
.eh_frame:000000000000D90C                 db  86h
.eh_frame:000000000000D90D                 db    6
.eh_frame:000000000000D90E                 db  41h ; A
.eh_frame:000000000000D90F                 db  0Eh
.eh_frame:000000000000D910                 db  38h ; 8
.eh_frame:000000000000D911                 db  83h
.eh_frame:000000000000D912                 db    7
.eh_frame:000000000000D913                 db  44h ; D
.eh_frame:000000000000D914                 db  0Eh
.eh_frame:000000000000D915                 db 0B0h
.eh_frame:000000000000D916                 db    1
.eh_frame:000000000000D917                 db    3
.eh_frame:000000000000D918                 db 0D1h
.eh_frame:000000000000D919                 db    5
.eh_frame:000000000000D91A                 db  0Ah
.eh_frame:000000000000D91B                 db  0Eh
.eh_frame:000000000000D91C                 db  38h ; 8
.eh_frame:000000000000D91D                 db  41h ; A
.eh_frame:000000000000D91E                 db  0Eh
.eh_frame:000000000000D91F                 db  30h ; 0
.eh_frame:000000000000D920                 db  41h ; A
.eh_frame:000000000000D921                 db  0Eh
.eh_frame:000000000000D922                 db  28h ; (
.eh_frame:000000000000D923                 db  42h ; B
.eh_frame:000000000000D924                 db  0Eh
.eh_frame:000000000000D925                 db  20h
.eh_frame:000000000000D926                 db  42h ; B
.eh_frame:000000000000D927                 db  0Eh
.eh_frame:000000000000D928                 db  18h
.eh_frame:000000000000D929                 db  42h ; B
.eh_frame:000000000000D92A                 db  0Eh
.eh_frame:000000000000D92B                 db  10h
.eh_frame:000000000000D92C                 db  42h ; B
.eh_frame:000000000000D92D                 db  0Eh
.eh_frame:000000000000D92E                 db    8
.eh_frame:000000000000D92F                 db  44h ; D
.eh_frame:000000000000D930                 db  0Bh
.eh_frame:000000000000D931                 db    0
.eh_frame:000000000000D932                 db    0
.eh_frame:000000000000D933                 db    0
.eh_frame:000000000000D934                 db  48h ; H
.eh_frame:000000000000D935                 db    0
.eh_frame:000000000000D936                 db    0
.eh_frame:000000000000D937                 db    0
.eh_frame:000000000000D938                 db 0E0h
.eh_frame:000000000000D939                 db  10h
.eh_frame:000000000000D93A                 db    0
.eh_frame:000000000000D93B                 db    0
.eh_frame:000000000000D93C                 db  64h ; d
.eh_frame:000000000000D93D                 db 0A6h
.eh_frame:000000000000D93E                 db 0FFh
.eh_frame:000000000000D93F                 db 0FFh
.eh_frame:000000000000D940                 db 0AAh
.eh_frame:000000000000D941                 db    3
.eh_frame:000000000000D942                 db    0
.eh_frame:000000000000D943                 db    0
.eh_frame:000000000000D944                 db    0
.eh_frame:000000000000D945                 db  42h ; B
.eh_frame:000000000000D946                 db  0Eh
.eh_frame:000000000000D947                 db  10h
.eh_frame:000000000000D948                 db  8Fh
.eh_frame:000000000000D949                 db    2
.eh_frame:000000000000D94A                 db  42h ; B
.eh_frame:000000000000D94B                 db  0Eh
.eh_frame:000000000000D94C                 db  18h
.eh_frame:000000000000D94D                 db  8Eh
.eh_frame:000000000000D94E                 db    3
.eh_frame:000000000000D94F                 db  42h ; B
.eh_frame:000000000000D950                 db  0Eh
.eh_frame:000000000000D951                 db  20h
.eh_frame:000000000000D952                 db  8Dh
.eh_frame:000000000000D953                 db    4
.eh_frame:000000000000D954                 db  42h ; B
.eh_frame:000000000000D955                 db  0Eh
.eh_frame:000000000000D956                 db  28h ; (
.eh_frame:000000000000D957                 db  8Ch
.eh_frame:000000000000D958                 db    5
.eh_frame:000000000000D959                 db  41h ; A
.eh_frame:000000000000D95A                 db  0Eh
.eh_frame:000000000000D95B                 db  30h ; 0
.eh_frame:000000000000D95C                 db  86h
.eh_frame:000000000000D95D                 db    6
.eh_frame:000000000000D95E                 db  41h ; A
.eh_frame:000000000000D95F                 db  0Eh
.eh_frame:000000000000D960                 db  38h ; 8
.eh_frame:000000000000D961                 db  83h
.eh_frame:000000000000D962                 db    7
.eh_frame:000000000000D963                 db  44h ; D
.eh_frame:000000000000D964                 db  0Eh
.eh_frame:000000000000D965                 db  60h ; `
.eh_frame:000000000000D966                 db    3
.eh_frame:000000000000D967                 db 0A4h
.eh_frame:000000000000D968                 db    2
.eh_frame:000000000000D969                 db  0Ah
.eh_frame:000000000000D96A                 db  0Eh
.eh_frame:000000000000D96B                 db  38h ; 8
.eh_frame:000000000000D96C                 db  44h ; D
.eh_frame:000000000000D96D                 db  0Eh
.eh_frame:000000000000D96E                 db  30h ; 0
.eh_frame:000000000000D96F                 db  41h ; A
.eh_frame:000000000000D970                 db  0Eh
.eh_frame:000000000000D971                 db  28h ; (
.eh_frame:000000000000D972                 db  42h ; B
.eh_frame:000000000000D973                 db  0Eh
.eh_frame:000000000000D974                 db  20h
.eh_frame:000000000000D975                 db  42h ; B
.eh_frame:000000000000D976                 db  0Eh
.eh_frame:000000000000D977                 db  18h
.eh_frame:000000000000D978                 db  42h ; B
.eh_frame:000000000000D979                 db  0Eh
.eh_frame:000000000000D97A                 db  10h
.eh_frame:000000000000D97B                 db  42h ; B
.eh_frame:000000000000D97C                 db  0Eh
.eh_frame:000000000000D97D                 db    8
.eh_frame:000000000000D97E                 db  41h ; A
.eh_frame:000000000000D97F                 db  0Bh
.eh_frame:000000000000D980                 db  2Ch ; ,
.eh_frame:000000000000D981                 db    0
.eh_frame:000000000000D982                 db    0
.eh_frame:000000000000D983                 db    0
.eh_frame:000000000000D984                 db  2Ch ; ,
.eh_frame:000000000000D985                 db  11h
.eh_frame:000000000000D986                 db    0
.eh_frame:000000000000D987                 db    0
.eh_frame:000000000000D988                 db 0C8h
.eh_frame:000000000000D989                 db 0A9h
.eh_frame:000000000000D98A                 db 0FFh
.eh_frame:000000000000D98B                 db 0FFh
.eh_frame:000000000000D98C                 db  82h
.eh_frame:000000000000D98D                 db    1
.eh_frame:000000000000D98E                 db    0
.eh_frame:000000000000D98F                 db    0
.eh_frame:000000000000D990                 db    0
.eh_frame:000000000000D991                 db  42h ; B
.eh_frame:000000000000D992                 db  0Eh
.eh_frame:000000000000D993                 db  10h
.eh_frame:000000000000D994                 db  8Ch
.eh_frame:000000000000D995                 db    2
.eh_frame:000000000000D996                 db  41h ; A
.eh_frame:000000000000D997                 db  0Eh
.eh_frame:000000000000D998                 db  18h
.eh_frame:000000000000D999                 db  86h
.eh_frame:000000000000D99A                 db    3
.eh_frame:000000000000D99B                 db  44h ; D
.eh_frame:000000000000D99C                 db  0Eh
.eh_frame:000000000000D99D                 db  20h
.eh_frame:000000000000D99E                 db  83h
.eh_frame:000000000000D99F                 db    4
.eh_frame:000000000000D9A0                 db    2
.eh_frame:000000000000D9A1                 db 0C2h
.eh_frame:000000000000D9A2                 db  0Ah
.eh_frame:000000000000D9A3                 db  0Eh
.eh_frame:000000000000D9A4                 db  18h
.eh_frame:000000000000D9A5                 db  41h ; A
.eh_frame:000000000000D9A6                 db  0Eh
.eh_frame:000000000000D9A7                 db  10h
.eh_frame:000000000000D9A8                 db  42h ; B
.eh_frame:000000000000D9A9                 db  0Eh
.eh_frame:000000000000D9AA                 db    8
.eh_frame:000000000000D9AB                 db  44h ; D
.eh_frame:000000000000D9AC                 db  0Bh
.eh_frame:000000000000D9AD                 db    0
.eh_frame:000000000000D9AE                 db    0
.eh_frame:000000000000D9AF                 db    0
.eh_frame:000000000000D9B0                 db  60h ; `
.eh_frame:000000000000D9B1                 db    0
.eh_frame:000000000000D9B2                 db    0
.eh_frame:000000000000D9B3                 db    0
.eh_frame:000000000000D9B4                 db  5Ch ; \
.eh_frame:000000000000D9B5                 db  11h
.eh_frame:000000000000D9B6                 db    0
.eh_frame:000000000000D9B7                 db    0
.eh_frame:000000000000D9B8                 db  28h ; (
.eh_frame:000000000000D9B9                 db 0ABh
.eh_frame:000000000000D9BA                 db 0FFh
.eh_frame:000000000000D9BB                 db 0FFh
.eh_frame:000000000000D9BC                 db  78h ; x
.eh_frame:000000000000D9BD                 db    7
.eh_frame:000000000000D9BE                 db    0
.eh_frame:000000000000D9BF                 db    0
.eh_frame:000000000000D9C0                 db    0
.eh_frame:000000000000D9C1                 db  42h ; B
.eh_frame:000000000000D9C2                 db  0Eh
.eh_frame:000000000000D9C3                 db  10h
.eh_frame:000000000000D9C4                 db  8Eh
.eh_frame:000000000000D9C5                 db    2
.eh_frame:000000000000D9C6                 db  42h ; B
.eh_frame:000000000000D9C7                 db  0Eh
.eh_frame:000000000000D9C8                 db  18h
.eh_frame:000000000000D9C9                 db  8Dh
.eh_frame:000000000000D9CA                 db    3
.eh_frame:000000000000D9CB                 db  42h ; B
.eh_frame:000000000000D9CC                 db  0Eh
.eh_frame:000000000000D9CD                 db  20h
.eh_frame:000000000000D9CE                 db  8Ch
.eh_frame:000000000000D9CF                 db    4
.eh_frame:000000000000D9D0                 db  41h ; A
.eh_frame:000000000000D9D1                 db  0Eh
.eh_frame:000000000000D9D2                 db  28h ; (
.eh_frame:000000000000D9D3                 db  86h
.eh_frame:000000000000D9D4                 db    5
.eh_frame:000000000000D9D5                 db  41h ; A
.eh_frame:000000000000D9D6                 db  0Eh
.eh_frame:000000000000D9D7                 db  30h ; 0
.eh_frame:000000000000D9D8                 db  83h
.eh_frame:000000000000D9D9                 db    6
.eh_frame:000000000000D9DA                 db    3
.eh_frame:000000000000D9DB                 db  19h
.eh_frame:000000000000D9DC                 db    1
.eh_frame:000000000000D9DD                 db  0Ah
.eh_frame:000000000000D9DE                 db  0Eh
.eh_frame:000000000000D9DF                 db  28h ; (
.eh_frame:000000000000D9E0                 db  44h ; D
.eh_frame:000000000000D9E1                 db  0Eh
.eh_frame:000000000000D9E2                 db  20h
.eh_frame:000000000000D9E3                 db  42h ; B
.eh_frame:000000000000D9E4                 db  0Eh
.eh_frame:000000000000D9E5                 db  18h
.eh_frame:000000000000D9E6                 db  42h ; B
.eh_frame:000000000000D9E7                 db  0Eh
.eh_frame:000000000000D9E8                 db  10h
.eh_frame:000000000000D9E9                 db  42h ; B
.eh_frame:000000000000D9EA                 db  0Eh
.eh_frame:000000000000D9EB                 db    8
.eh_frame:000000000000D9EC                 db  45h ; E
.eh_frame:000000000000D9ED                 db  0Bh
.eh_frame:000000000000D9EE                 db    2
.eh_frame:000000000000D9EF                 db  6Bh ; k
.eh_frame:000000000000D9F0                 db  0Ah
.eh_frame:000000000000D9F1                 db  0Eh
.eh_frame:000000000000D9F2                 db  28h ; (
.eh_frame:000000000000D9F3                 db  44h ; D
.eh_frame:000000000000D9F4                 db  0Eh
.eh_frame:000000000000D9F5                 db  20h
.eh_frame:000000000000D9F6                 db  42h ; B
.eh_frame:000000000000D9F7                 db  0Eh
.eh_frame:000000000000D9F8                 db  18h
.eh_frame:000000000000D9F9                 db  42h ; B
.eh_frame:000000000000D9FA                 db  0Eh
.eh_frame:000000000000D9FB                 db  10h
.eh_frame:000000000000D9FC                 db  42h ; B
.eh_frame:000000000000D9FD                 db  0Eh
.eh_frame:000000000000D9FE                 db    8
.eh_frame:000000000000D9FF                 db  4Bh ; K
.eh_frame:000000000000DA00                 db  0Bh
.eh_frame:000000000000DA01                 db    2
.eh_frame:000000000000DA02                 db 0E2h
.eh_frame:000000000000DA03                 db  0Ah
.eh_frame:000000000000DA04                 db  0Eh
.eh_frame:000000000000DA05                 db  28h ; (
.eh_frame:000000000000DA06                 db  41h ; A
.eh_frame:000000000000DA07                 db  0Eh
.eh_frame:000000000000DA08                 db  20h
.eh_frame:000000000000DA09                 db  42h ; B
.eh_frame:000000000000DA0A                 db  0Eh
.eh_frame:000000000000DA0B                 db  18h
.eh_frame:000000000000DA0C                 db  42h ; B
.eh_frame:000000000000DA0D                 db  0Eh
.eh_frame:000000000000DA0E                 db  10h
.eh_frame:000000000000DA0F                 db  42h ; B
.eh_frame:000000000000DA10                 db  0Eh
.eh_frame:000000000000DA11                 db    8
.eh_frame:000000000000DA12                 db  47h ; G
.eh_frame:000000000000DA13                 db  0Bh
.eh_frame:000000000000DA14                 db  14h
.eh_frame:000000000000DA15                 db    0
.eh_frame:000000000000DA16                 db    0
.eh_frame:000000000000DA17                 db    0
.eh_frame:000000000000DA18                 db 0C0h
.eh_frame:000000000000DA19                 db  11h
.eh_frame:000000000000DA1A                 db    0
.eh_frame:000000000000DA1B                 db    0
.eh_frame:000000000000DA1C                 db  44h ; D
.eh_frame:000000000000DA1D                 db 0B2h
.eh_frame:000000000000DA1E                 db 0FFh
.eh_frame:000000000000DA1F                 db 0FFh
.eh_frame:000000000000DA20                 db  29h ; )
.eh_frame:000000000000DA21                 db    0
.eh_frame:000000000000DA22                 db    0
.eh_frame:000000000000DA23                 db    0
.eh_frame:000000000000DA24                 db    0
.eh_frame:000000000000DA25                 db  54h ; T
.eh_frame:000000000000DA26                 db  0Eh
.eh_frame:000000000000DA27                 db  10h
.eh_frame:000000000000DA28                 db  54h ; T
.eh_frame:000000000000DA29                 db  0Eh
.eh_frame:000000000000DA2A                 db    8
.eh_frame:000000000000DA2B                 db    0
.eh_frame:000000000000DA2C                 db  60h ; `
.eh_frame:000000000000DA2D                 db    0
.eh_frame:000000000000DA2E                 db    0
.eh_frame:000000000000DA2F                 db    0
.eh_frame:000000000000DA30                 db 0D8h
.eh_frame:000000000000DA31                 db  11h
.eh_frame:000000000000DA32                 db    0
.eh_frame:000000000000DA33                 db    0
.eh_frame:000000000000DA34                 db  5Ch ; \
.eh_frame:000000000000DA35                 db 0B2h
.eh_frame:000000000000DA36                 db 0FFh
.eh_frame:000000000000DA37                 db 0FFh
.eh_frame:000000000000DA38                 db  4Eh ; N
.eh_frame:000000000000DA39                 db    1
.eh_frame:000000000000DA3A                 db    0
.eh_frame:000000000000DA3B                 db    0
.eh_frame:000000000000DA3C                 db    0
.eh_frame:000000000000DA3D                 db  42h ; B
.eh_frame:000000000000DA3E                 db  0Eh
.eh_frame:000000000000DA3F                 db  10h
.eh_frame:000000000000DA40                 db  8Eh
.eh_frame:000000000000DA41                 db    2
.eh_frame:000000000000DA42                 db  42h ; B
.eh_frame:000000000000DA43                 db  0Eh
.eh_frame:000000000000DA44                 db  18h
.eh_frame:000000000000DA45                 db  8Dh
.eh_frame:000000000000DA46                 db    3
.eh_frame:000000000000DA47                 db  42h ; B
.eh_frame:000000000000DA48                 db  0Eh
.eh_frame:000000000000DA49                 db  20h
.eh_frame:000000000000DA4A                 db  8Ch
.eh_frame:000000000000DA4B                 db    4
.eh_frame:000000000000DA4C                 db  41h ; A
.eh_frame:000000000000DA4D                 db  0Eh
.eh_frame:000000000000DA4E                 db  28h ; (
.eh_frame:000000000000DA4F                 db  86h
.eh_frame:000000000000DA50                 db    5
.eh_frame:000000000000DA51                 db  44h ; D
.eh_frame:000000000000DA52                 db  0Eh
.eh_frame:000000000000DA53                 db  30h ; 0
.eh_frame:000000000000DA54                 db  83h
.eh_frame:000000000000DA55                 db    6
.eh_frame:000000000000DA56                 db    2
.eh_frame:000000000000DA57                 db  8Ah
.eh_frame:000000000000DA58                 db  0Ah
.eh_frame:000000000000DA59                 db  0Eh
.eh_frame:000000000000DA5A                 db  28h ; (
.eh_frame:000000000000DA5B                 db  41h ; A
.eh_frame:000000000000DA5C                 db  0Eh
.eh_frame:000000000000DA5D                 db  20h
.eh_frame:000000000000DA5E                 db  42h ; B
.eh_frame:000000000000DA5F                 db  0Eh
.eh_frame:000000000000DA60                 db  18h
.eh_frame:000000000000DA61                 db  42h ; B
.eh_frame:000000000000DA62                 db  0Eh
.eh_frame:000000000000DA63                 db  10h
.eh_frame:000000000000DA64                 db  42h ; B
.eh_frame:000000000000DA65                 db  0Eh
.eh_frame:000000000000DA66                 db    8
.eh_frame:000000000000DA67                 db  44h ; D
.eh_frame:000000000000DA68                 db  0Bh
.eh_frame:000000000000DA69                 db  41h ; A
.eh_frame:000000000000DA6A                 db  0Ah
.eh_frame:000000000000DA6B                 db  0Eh
.eh_frame:000000000000DA6C                 db  28h ; (
.eh_frame:000000000000DA6D                 db  45h ; E
.eh_frame:000000000000DA6E                 db  0Eh
.eh_frame:000000000000DA6F                 db  20h
.eh_frame:000000000000DA70                 db  42h ; B
.eh_frame:000000000000DA71                 db  0Eh
.eh_frame:000000000000DA72                 db  18h
.eh_frame:000000000000DA73                 db  42h ; B
.eh_frame:000000000000DA74                 db  0Eh
.eh_frame:000000000000DA75                 db  10h
.eh_frame:000000000000DA76                 db  42h ; B
.eh_frame:000000000000DA77                 db  0Eh
.eh_frame:000000000000DA78                 db    8
.eh_frame:000000000000DA79                 db  44h ; D
.eh_frame:000000000000DA7A                 db  0Bh
.eh_frame:000000000000DA7B                 db  41h ; A
.eh_frame:000000000000DA7C                 db  0Ah
.eh_frame:000000000000DA7D                 db  0Eh
.eh_frame:000000000000DA7E                 db  28h ; (
.eh_frame:000000000000DA7F                 db  43h ; C
.eh_frame:000000000000DA80                 db  0Eh
.eh_frame:000000000000DA81                 db  20h
.eh_frame:000000000000DA82                 db  42h ; B
.eh_frame:000000000000DA83                 db  0Eh
.eh_frame:000000000000DA84                 db  18h
.eh_frame:000000000000DA85                 db  42h ; B
.eh_frame:000000000000DA86                 db  0Eh
.eh_frame:000000000000DA87                 db  10h
.eh_frame:000000000000DA88                 db  42h ; B
.eh_frame:000000000000DA89                 db  0Eh
.eh_frame:000000000000DA8A                 db    8
.eh_frame:000000000000DA8B                 db  46h ; F
.eh_frame:000000000000DA8C                 db  0Bh
.eh_frame:000000000000DA8D                 db    0
.eh_frame:000000000000DA8E                 db    0
.eh_frame:000000000000DA8F                 db    0
.eh_frame:000000000000DA90                 db  3Ch ; <
.eh_frame:000000000000DA91                 db    0
.eh_frame:000000000000DA92                 db    0
.eh_frame:000000000000DA93                 db    0
.eh_frame:000000000000DA94                 db  3Ch ; <
.eh_frame:000000000000DA95                 db  12h
.eh_frame:000000000000DA96                 db    0
.eh_frame:000000000000DA97                 db    0
.eh_frame:000000000000DA98                 db  48h ; H
.eh_frame:000000000000DA99                 db 0B3h
.eh_frame:000000000000DA9A                 db 0FFh
.eh_frame:000000000000DA9B                 db 0FFh
.eh_frame:000000000000DA9C                 db  83h
.eh_frame:000000000000DA9D                 db    0
.eh_frame:000000000000DA9E                 db    0
.eh_frame:000000000000DA9F                 db    0
.eh_frame:000000000000DAA0                 db    0
.eh_frame:000000000000DAA1                 db  42h ; B
.eh_frame:000000000000DAA2                 db  0Eh
.eh_frame:000000000000DAA3                 db  10h
.eh_frame:000000000000DAA4                 db  8Dh
.eh_frame:000000000000DAA5                 db    2
.eh_frame:000000000000DAA6                 db  42h ; B
.eh_frame:000000000000DAA7                 db  0Eh
.eh_frame:000000000000DAA8                 db  18h
.eh_frame:000000000000DAA9                 db  8Ch
.eh_frame:000000000000DAAA                 db    3
.eh_frame:000000000000DAAB                 db  44h ; D
.eh_frame:000000000000DAAC                 db  0Eh
.eh_frame:000000000000DAAD                 db  20h
.eh_frame:000000000000DAAE                 db  86h
.eh_frame:000000000000DAAF                 db    4
.eh_frame:000000000000DAB0                 db  41h ; A
.eh_frame:000000000000DAB1                 db  0Eh
.eh_frame:000000000000DAB2                 db  28h ; (
.eh_frame:000000000000DAB3                 db  83h
.eh_frame:000000000000DAB4                 db    5
.eh_frame:000000000000DAB5                 db  4Ah ; J
.eh_frame:000000000000DAB6                 db  0Eh
.eh_frame:000000000000DAB7                 db  40h ; @
.eh_frame:000000000000DAB8                 db    2
.eh_frame:000000000000DAB9                 db  64h ; d
.eh_frame:000000000000DABA                 db  0Ah
.eh_frame:000000000000DABB                 db  0Eh
.eh_frame:000000000000DABC                 db  28h ; (
.eh_frame:000000000000DABD                 db  41h ; A
.eh_frame:000000000000DABE                 db  0Eh
.eh_frame:000000000000DABF                 db  20h
.eh_frame:000000000000DAC0                 db  41h ; A
.eh_frame:000000000000DAC1                 db  0Eh
.eh_frame:000000000000DAC2                 db  18h
.eh_frame:000000000000DAC3                 db  42h ; B
.eh_frame:000000000000DAC4                 db  0Eh
.eh_frame:000000000000DAC5                 db  10h
.eh_frame:000000000000DAC6                 db  42h ; B
.eh_frame:000000000000DAC7                 db  0Eh
.eh_frame:000000000000DAC8                 db    8
.eh_frame:000000000000DAC9                 db  41h ; A
.eh_frame:000000000000DACA                 db  0Bh
.eh_frame:000000000000DACB                 db    0
.eh_frame:000000000000DACC                 db    0
.eh_frame:000000000000DACD                 db    0
.eh_frame:000000000000DACE                 db    0
.eh_frame:000000000000DACF                 db    0
.eh_frame:000000000000DAD0                 db  4Ch ; L
.eh_frame:000000000000DAD1                 db    0
.eh_frame:000000000000DAD2                 db    0
.eh_frame:000000000000DAD3                 db    0
.eh_frame:000000000000DAD4                 db  7Ch ; |
.eh_frame:000000000000DAD5                 db  12h
.eh_frame:000000000000DAD6                 db    0
.eh_frame:000000000000DAD7                 db    0
.eh_frame:000000000000DAD8                 db  98h
.eh_frame:000000000000DAD9                 db 0B3h
.eh_frame:000000000000DADA                 db 0FFh
.eh_frame:000000000000DADB                 db 0FFh
.eh_frame:000000000000DADC                 db  7Dh ; }
.eh_frame:000000000000DADD                 db    0
.eh_frame:000000000000DADE                 db    0
.eh_frame:000000000000DADF                 db    0
.eh_frame:000000000000DAE0                 db    0
.eh_frame:000000000000DAE1                 db  42h ; B
.eh_frame:000000000000DAE2                 db  0Eh
.eh_frame:000000000000DAE3                 db  10h
.eh_frame:000000000000DAE4                 db  8Ch
.eh_frame:000000000000DAE5                 db    2
.eh_frame:000000000000DAE6                 db  41h ; A
.eh_frame:000000000000DAE7                 db  0Eh
.eh_frame:000000000000DAE8                 db  18h
.eh_frame:000000000000DAE9                 db  86h
.eh_frame:000000000000DAEA                 db    3
.eh_frame:000000000000DAEB                 db  44h ; D
.eh_frame:000000000000DAEC                 db  0Eh
.eh_frame:000000000000DAED                 db  20h
.eh_frame:000000000000DAEE                 db  83h
.eh_frame:000000000000DAEF                 db    4
.eh_frame:000000000000DAF0                 db  69h ; i
.eh_frame:000000000000DAF1                 db  0Ah
.eh_frame:000000000000DAF2                 db  0Eh
.eh_frame:000000000000DAF3                 db  18h
.eh_frame:000000000000DAF4                 db  41h ; A
.eh_frame:000000000000DAF5                 db  0Eh
.eh_frame:000000000000DAF6                 db  10h
.eh_frame:000000000000DAF7                 db  42h ; B
.eh_frame:000000000000DAF8                 db  0Eh
.eh_frame:000000000000DAF9                 db    8
.eh_frame:000000000000DAFA                 db  45h ; E
.eh_frame:000000000000DAFB                 db  0Bh
.eh_frame:000000000000DAFC                 db  55h ; U
.eh_frame:000000000000DAFD                 db  0Ah
.eh_frame:000000000000DAFE                 db  0Eh
.eh_frame:000000000000DAFF                 db  18h
.eh_frame:000000000000DB00                 db  41h ; A
.eh_frame:000000000000DB01                 db  0Eh
.eh_frame:000000000000DB02                 db  10h
.eh_frame:000000000000DB03                 db  42h ; B
.eh_frame:000000000000DB04                 db  0Eh
.eh_frame:000000000000DB05                 db    8
.eh_frame:000000000000DB06                 db  48h ; H
.eh_frame:000000000000DB07                 db  0Bh
.eh_frame:000000000000DB08                 db  41h ; A
.eh_frame:000000000000DB09                 db  0Ah
.eh_frame:000000000000DB0A                 db  0Eh
.eh_frame:000000000000DB0B                 db  18h
.eh_frame:000000000000DB0C                 db  46h ; F
.eh_frame:000000000000DB0D                 db  0Eh
.eh_frame:000000000000DB0E                 db  10h
.eh_frame:000000000000DB0F                 db  42h ; B
.eh_frame:000000000000DB10                 db  0Eh
.eh_frame:000000000000DB11                 db    8
.eh_frame:000000000000DB12                 db  47h ; G
.eh_frame:000000000000DB13                 db  0Bh
.eh_frame:000000000000DB14                 db  49h ; I
.eh_frame:000000000000DB15                 db  0Eh
.eh_frame:000000000000DB16                 db  18h
.eh_frame:000000000000DB17                 db  41h ; A
.eh_frame:000000000000DB18                 db  0Eh
.eh_frame:000000000000DB19                 db  10h
.eh_frame:000000000000DB1A                 db  42h ; B
.eh_frame:000000000000DB1B                 db  0Eh
.eh_frame:000000000000DB1C                 db    8
.eh_frame:000000000000DB1D                 db    0
.eh_frame:000000000000DB1E                 db    0
.eh_frame:000000000000DB1F                 db    0
.eh_frame:000000000000DB20                 db  10h
.eh_frame:000000000000DB21                 db    0
.eh_frame:000000000000DB22                 db    0
.eh_frame:000000000000DB23                 db    0
.eh_frame:000000000000DB24                 db 0CCh
.eh_frame:000000000000DB25                 db  12h
.eh_frame:000000000000DB26                 db    0
.eh_frame:000000000000DB27                 db    0
.eh_frame:000000000000DB28                 db 0C8h
.eh_frame:000000000000DB29                 db 0B3h
.eh_frame:000000000000DB2A                 db 0FFh
.eh_frame:000000000000DB2B                 db 0FFh
.eh_frame:000000000000DB2C                 db  10h
.eh_frame:000000000000DB2D                 db    0
.eh_frame:000000000000DB2E                 db    0
.eh_frame:000000000000DB2F                 db    0
.eh_frame:000000000000DB30                 db    0
.eh_frame:000000000000DB31                 db    0
.eh_frame:000000000000DB32                 db    0
.eh_frame:000000000000DB33                 db    0
.eh_frame:000000000000DB34                 db  18h
.eh_frame:000000000000DB35                 db    0
.eh_frame:000000000000DB36                 db    0
.eh_frame:000000000000DB37                 db    0
.eh_frame:000000000000DB38                 db 0E0h
.eh_frame:000000000000DB39                 db  12h
.eh_frame:000000000000DB3A                 db    0
.eh_frame:000000000000DB3B                 db    0
.eh_frame:000000000000DB3C                 db 0C4h
.eh_frame:000000000000DB3D                 db 0B3h
.eh_frame:000000000000DB3E                 db 0FFh
.eh_frame:000000000000DB3F                 db 0FFh
.eh_frame:000000000000DB40                 db  8Ah
.eh_frame:000000000000DB41                 db    0
.eh_frame:000000000000DB42                 db    0
.eh_frame:000000000000DB43                 db    0
.eh_frame:000000000000DB44                 db    0
.eh_frame:000000000000DB45                 db    2
.eh_frame:000000000000DB46                 db  80h
.eh_frame:000000000000DB47                 db  0Eh
.eh_frame:000000000000DB48                 db  10h
.eh_frame:000000000000DB49                 db    0
.eh_frame:000000000000DB4A                 db    0
.eh_frame:000000000000DB4B                 db    0
.eh_frame:000000000000DB4C                 db    0
.eh_frame:000000000000DB4D                 db    0
.eh_frame:000000000000DB4E                 db    0
.eh_frame:000000000000DB4F                 db    0
.eh_frame:000000000000DB50                 db  1Ch
.eh_frame:000000000000DB51                 db    0
.eh_frame:000000000000DB52                 db    0
.eh_frame:000000000000DB53                 db    0
.eh_frame:000000000000DB54                 db 0FCh
.eh_frame:000000000000DB55                 db  12h
.eh_frame:000000000000DB56                 db    0
.eh_frame:000000000000DB57                 db    0
.eh_frame:000000000000DB58                 db  38h ; 8
.eh_frame:000000000000DB59                 db 0B4h
.eh_frame:000000000000DB5A                 db 0FFh
.eh_frame:000000000000DB5B                 db 0FFh
.eh_frame:000000000000DB5C                 db  6Eh ; n
.eh_frame:000000000000DB5D                 db    0
.eh_frame:000000000000DB5E                 db    0
.eh_frame:000000000000DB5F                 db    0
.eh_frame:000000000000DB60                 db    0
.eh_frame:000000000000DB61                 db  44h ; D
.eh_frame:000000000000DB62                 db  0Eh
.eh_frame:000000000000DB63                 db  60h ; `
.eh_frame:000000000000DB64                 db  7Fh ; 
.eh_frame:000000000000DB65                 db  0Ah
.eh_frame:000000000000DB66                 db  0Eh
.eh_frame:000000000000DB67                 db    8
.eh_frame:000000000000DB68                 db  45h ; E
.eh_frame:000000000000DB69                 db  0Bh
.eh_frame:000000000000DB6A                 db    0
.eh_frame:000000000000DB6B                 db    0
.eh_frame:000000000000DB6C                 db    0
.eh_frame:000000000000DB6D                 db    0
.eh_frame:000000000000DB6E                 db    0
.eh_frame:000000000000DB6F                 db    0
.eh_frame:000000000000DB70                 db  1Ch
.eh_frame:000000000000DB71                 db    0
.eh_frame:000000000000DB72                 db    0
.eh_frame:000000000000DB73                 db    0
.eh_frame:000000000000DB74                 db  1Ch
.eh_frame:000000000000DB75                 db  13h
.eh_frame:000000000000DB76                 db    0
.eh_frame:000000000000DB77                 db    0
.eh_frame:000000000000DB78                 db  88h
.eh_frame:000000000000DB79                 db 0B4h
.eh_frame:000000000000DB7A                 db 0FFh
.eh_frame:000000000000DB7B                 db 0FFh
.eh_frame:000000000000DB7C                 db  60h ; `
.eh_frame:000000000000DB7D                 db    0
.eh_frame:000000000000DB7E                 db    0
.eh_frame:000000000000DB7F                 db    0
.eh_frame:000000000000DB80                 db    0
.eh_frame:000000000000DB81                 db  44h ; D
.eh_frame:000000000000DB82                 db  0Eh
.eh_frame:000000000000DB83                 db  10h
.eh_frame:000000000000DB84                 db  75h ; u
.eh_frame:000000000000DB85                 db  0Ah
.eh_frame:000000000000DB86                 db  0Eh
.eh_frame:000000000000DB87                 db    8
.eh_frame:000000000000DB88                 db  47h ; G
.eh_frame:000000000000DB89                 db  0Bh
.eh_frame:000000000000DB8A                 db  5Fh ; _
.eh_frame:000000000000DB8B                 db  0Eh
.eh_frame:000000000000DB8C                 db    8
.eh_frame:000000000000DB8D                 db    0
.eh_frame:000000000000DB8E                 db    0
.eh_frame:000000000000DB8F                 db    0
.eh_frame:000000000000DB90                 db  10h
.eh_frame:000000000000DB91                 db    0
.eh_frame:000000000000DB92                 db    0
.eh_frame:000000000000DB93                 db    0
.eh_frame:000000000000DB94                 db  3Ch ; <
.eh_frame:000000000000DB95                 db  13h
.eh_frame:000000000000DB96                 db    0
.eh_frame:000000000000DB97                 db    0
.eh_frame:000000000000DB98                 db 0C8h
.eh_frame:000000000000DB99                 db 0B4h
.eh_frame:000000000000DB9A                 db 0FFh
.eh_frame:000000000000DB9B                 db 0FFh
.eh_frame:000000000000DB9C                 db  93h
.eh_frame:000000000000DB9D                 db    0
.eh_frame:000000000000DB9E                 db    0
.eh_frame:000000000000DB9F                 db    0
.eh_frame:000000000000DBA0                 db    0
.eh_frame:000000000000DBA1                 db    0
.eh_frame:000000000000DBA2                 db    0
.eh_frame:000000000000DBA3                 db    0
.eh_frame:000000000000DBA4                 db  10h
.eh_frame:000000000000DBA5                 db    0
.eh_frame:000000000000DBA6                 db    0
.eh_frame:000000000000DBA7                 db    0
.eh_frame:000000000000DBA8                 db  50h ; P
.eh_frame:000000000000DBA9                 db  13h
.eh_frame:000000000000DBAA                 db    0
.eh_frame:000000000000DBAB                 db    0
.eh_frame:000000000000DBAC                 db  54h ; T
.eh_frame:000000000000DBAD                 db 0B5h
.eh_frame:000000000000DBAE                 db 0FFh
.eh_frame:000000000000DBAF                 db 0FFh
.eh_frame:000000000000DBB0                 db  10h
.eh_frame:000000000000DBB1                 db    0
.eh_frame:000000000000DBB2                 db    0
.eh_frame:000000000000DBB3                 db    0
.eh_frame:000000000000DBB4                 db    0
.eh_frame:000000000000DBB5                 db    0
.eh_frame:000000000000DBB6                 db    0
.eh_frame:000000000000DBB7                 db    0
.eh_frame:000000000000DBB8                 db  10h
.eh_frame:000000000000DBB9                 db    0
.eh_frame:000000000000DBBA                 db    0
.eh_frame:000000000000DBBB                 db    0
.eh_frame:000000000000DBBC                 db  64h ; d
.eh_frame:000000000000DBBD                 db  13h
.eh_frame:000000000000DBBE                 db    0
.eh_frame:000000000000DBBF                 db    0
.eh_frame:000000000000DBC0                 db  50h ; P
.eh_frame:000000000000DBC1                 db 0B5h
.eh_frame:000000000000DBC2                 db 0FFh
.eh_frame:000000000000DBC3                 db 0FFh
.eh_frame:000000000000DBC4                 db    7
.eh_frame:000000000000DBC5                 db    0
.eh_frame:000000000000DBC6                 db    0
.eh_frame:000000000000DBC7                 db    0
.eh_frame:000000000000DBC8                 db    0
.eh_frame:000000000000DBC9                 db    0
.eh_frame:000000000000DBCA                 db    0
.eh_frame:000000000000DBCB                 db    0
.eh_frame:000000000000DBCC                 db  18h
.eh_frame:000000000000DBCD                 db    0
.eh_frame:000000000000DBCE                 db    0
.eh_frame:000000000000DBCF                 db    0
.eh_frame:000000000000DBD0                 db  78h ; x
.eh_frame:000000000000DBD1                 db  13h
.eh_frame:000000000000DBD2                 db    0
.eh_frame:000000000000DBD3                 db    0
.eh_frame:000000000000DBD4                 db  4Ch ; L
.eh_frame:000000000000DBD5                 db 0B5h
.eh_frame:000000000000DBD6                 db 0FFh
.eh_frame:000000000000DBD7                 db 0FFh
.eh_frame:000000000000DBD8                 db  22h ; "
.eh_frame:000000000000DBD9                 db    0
.eh_frame:000000000000DBDA                 db    0
.eh_frame:000000000000DBDB                 db    0
.eh_frame:000000000000DBDC                 db    0
.eh_frame:000000000000DBDD                 db  41h ; A
.eh_frame:000000000000DBDE                 db  0Eh
.eh_frame:000000000000DBDF                 db  10h
.eh_frame:000000000000DBE0                 db  83h
.eh_frame:000000000000DBE1                 db    2
.eh_frame:000000000000DBE2                 db  5Bh ; [
.eh_frame:000000000000DBE3                 db  0Ah
.eh_frame:000000000000DBE4                 db  0Eh
.eh_frame:000000000000DBE5                 db    8
.eh_frame:000000000000DBE6                 db  41h ; A
.eh_frame:000000000000DBE7                 db  0Bh
.eh_frame:000000000000DBE8                 db  5Ch ; \
.eh_frame:000000000000DBE9                 db    0
.eh_frame:000000000000DBEA                 db    0
.eh_frame:000000000000DBEB                 db    0
.eh_frame:000000000000DBEC                 db  94h
.eh_frame:000000000000DBED                 db  13h
.eh_frame:000000000000DBEE                 db    0
.eh_frame:000000000000DBEF                 db    0
.eh_frame:000000000000DBF0                 db  60h ; `
.eh_frame:000000000000DBF1                 db 0B5h
.eh_frame:000000000000DBF2                 db 0FFh
.eh_frame:000000000000DBF3                 db 0FFh
.eh_frame:000000000000DBF4                 db  1Eh
.eh_frame:000000000000DBF5                 db    1
.eh_frame:000000000000DBF6                 db    0
.eh_frame:000000000000DBF7                 db    0
.eh_frame:000000000000DBF8                 db    0
.eh_frame:000000000000DBF9                 db  42h ; B
.eh_frame:000000000000DBFA                 db  0Eh
.eh_frame:000000000000DBFB                 db  10h
.eh_frame:000000000000DBFC                 db  8Eh
.eh_frame:000000000000DBFD                 db    2
.eh_frame:000000000000DBFE                 db  42h ; B
.eh_frame:000000000000DBFF                 db  0Eh
.eh_frame:000000000000DC00                 db  18h
.eh_frame:000000000000DC01                 db  8Dh
.eh_frame:000000000000DC02                 db    3
.eh_frame:000000000000DC03                 db  45h ; E
.eh_frame:000000000000DC04                 db  0Eh
.eh_frame:000000000000DC05                 db  20h
.eh_frame:000000000000DC06                 db  8Ch
.eh_frame:000000000000DC07                 db    4
.eh_frame:000000000000DC08                 db  41h ; A
.eh_frame:000000000000DC09                 db  0Eh
.eh_frame:000000000000DC0A                 db  28h ; (
.eh_frame:000000000000DC0B                 db  86h
.eh_frame:000000000000DC0C                 db    5
.eh_frame:000000000000DC0D                 db  44h ; D
.eh_frame:000000000000DC0E                 db  0Eh
.eh_frame:000000000000DC0F                 db  30h ; 0
.eh_frame:000000000000DC10                 db  83h
.eh_frame:000000000000DC11                 db    6
.eh_frame:000000000000DC12                 db    2
.eh_frame:000000000000DC13                 db 0A1h
.eh_frame:000000000000DC14                 db  0Ah
.eh_frame:000000000000DC15                 db  0Eh
.eh_frame:000000000000DC16                 db  28h ; (
.eh_frame:000000000000DC17                 db  44h ; D
.eh_frame:000000000000DC18                 db  0Eh
.eh_frame:000000000000DC19                 db  20h
.eh_frame:000000000000DC1A                 db  42h ; B
.eh_frame:000000000000DC1B                 db  0Eh
.eh_frame:000000000000DC1C                 db  18h
.eh_frame:000000000000DC1D                 db  42h ; B
.eh_frame:000000000000DC1E                 db  0Eh
.eh_frame:000000000000DC1F                 db  10h
.eh_frame:000000000000DC20                 db  42h ; B
.eh_frame:000000000000DC21                 db  0Eh
.eh_frame:000000000000DC22                 db    8
.eh_frame:000000000000DC23                 db  47h ; G
.eh_frame:000000000000DC24                 db  0Bh
.eh_frame:000000000000DC25                 db  71h ; q
.eh_frame:000000000000DC26                 db  0Ah
.eh_frame:000000000000DC27                 db  0Eh
.eh_frame:000000000000DC28                 db  28h ; (
.eh_frame:000000000000DC29                 db  41h ; A
.eh_frame:000000000000DC2A                 db  0Eh
.eh_frame:000000000000DC2B                 db  20h
.eh_frame:000000000000DC2C                 db  42h ; B
.eh_frame:000000000000DC2D                 db  0Eh
.eh_frame:000000000000DC2E                 db  18h
.eh_frame:000000000000DC2F                 db  42h ; B
.eh_frame:000000000000DC30                 db  0Eh
.eh_frame:000000000000DC31                 db  10h
.eh_frame:000000000000DC32                 db  42h ; B
.eh_frame:000000000000DC33                 db  0Eh
.eh_frame:000000000000DC34                 db    8
.eh_frame:000000000000DC35                 db  48h ; H
.eh_frame:000000000000DC36                 db  0Bh
.eh_frame:000000000000DC37                 db  53h ; S
.eh_frame:000000000000DC38                 db  0Eh
.eh_frame:000000000000DC39                 db  28h ; (
.eh_frame:000000000000DC3A                 db  44h ; D
.eh_frame:000000000000DC3B                 db  0Eh
.eh_frame:000000000000DC3C                 db  20h
.eh_frame:000000000000DC3D                 db  42h ; B
.eh_frame:000000000000DC3E                 db  0Eh
.eh_frame:000000000000DC3F                 db  18h
.eh_frame:000000000000DC40                 db  42h ; B
.eh_frame:000000000000DC41                 db  0Eh
.eh_frame:000000000000DC42                 db  10h
.eh_frame:000000000000DC43                 db  42h ; B
.eh_frame:000000000000DC44                 db  0Eh
.eh_frame:000000000000DC45                 db    8
.eh_frame:000000000000DC46                 db    0
.eh_frame:000000000000DC47                 db    0
.eh_frame:000000000000DC48                 db  10h
.eh_frame:000000000000DC49                 db    0
.eh_frame:000000000000DC4A                 db    0
.eh_frame:000000000000DC4B                 db    0
.eh_frame:000000000000DC4C                 db 0F4h
.eh_frame:000000000000DC4D                 db  13h
.eh_frame:000000000000DC4E                 db    0
.eh_frame:000000000000DC4F                 db    0
.eh_frame:000000000000DC50                 db  20h
.eh_frame:000000000000DC51                 db 0B6h
.eh_frame:000000000000DC52                 db 0FFh
.eh_frame:000000000000DC53                 db 0FFh
.eh_frame:000000000000DC54                 db  77h ; w
.eh_frame:000000000000DC55                 db    0
.eh_frame:000000000000DC56                 db    0
.eh_frame:000000000000DC57                 db    0
.eh_frame:000000000000DC58                 db    0
.eh_frame:000000000000DC59                 db    0
.eh_frame:000000000000DC5A                 db    0
.eh_frame:000000000000DC5B                 db    0
.eh_frame:000000000000DC5C                 db  5Ch ; \
.eh_frame:000000000000DC5D                 db    0
.eh_frame:000000000000DC5E                 db    0
.eh_frame:000000000000DC5F                 db    0
.eh_frame:000000000000DC60                 db    8
.eh_frame:000000000000DC61                 db  14h
.eh_frame:000000000000DC62                 db    0
.eh_frame:000000000000DC63                 db    0
.eh_frame:000000000000DC64                 db  8Ch
.eh_frame:000000000000DC65                 db 0B6h
.eh_frame:000000000000DC66                 db 0FFh
.eh_frame:000000000000DC67                 db 0FFh
.eh_frame:000000000000DC68                 db  40h ; @
.eh_frame:000000000000DC69                 db    1
.eh_frame:000000000000DC6A                 db    0
.eh_frame:000000000000DC6B                 db    0
.eh_frame:000000000000DC6C                 db    0
.eh_frame:000000000000DC6D                 db  42h ; B
.eh_frame:000000000000DC6E                 db  0Eh
.eh_frame:000000000000DC6F                 db  10h
.eh_frame:000000000000DC70                 db  8Fh
.eh_frame:000000000000DC71                 db    2
.eh_frame:000000000000DC72                 db  42h ; B
.eh_frame:000000000000DC73                 db  0Eh
.eh_frame:000000000000DC74                 db  18h
.eh_frame:000000000000DC75                 db  8Eh
.eh_frame:000000000000DC76                 db    3
.eh_frame:000000000000DC77                 db  42h ; B
.eh_frame:000000000000DC78                 db  0Eh
.eh_frame:000000000000DC79                 db  20h
.eh_frame:000000000000DC7A                 db  8Dh
.eh_frame:000000000000DC7B                 db    4
.eh_frame:000000000000DC7C                 db  42h ; B
.eh_frame:000000000000DC7D                 db  0Eh
.eh_frame:000000000000DC7E                 db  28h ; (
.eh_frame:000000000000DC7F                 db  8Ch
.eh_frame:000000000000DC80                 db    5
.eh_frame:000000000000DC81                 db  41h ; A
.eh_frame:000000000000DC82                 db  0Eh
.eh_frame:000000000000DC83                 db  30h ; 0
.eh_frame:000000000000DC84                 db  86h
.eh_frame:000000000000DC85                 db    6
.eh_frame:000000000000DC86                 db  41h ; A
.eh_frame:000000000000DC87                 db  0Eh
.eh_frame:000000000000DC88                 db  38h ; 8
.eh_frame:000000000000DC89                 db  83h
.eh_frame:000000000000DC8A                 db    7
.eh_frame:000000000000DC8B                 db  44h ; D
.eh_frame:000000000000DC8C                 db  0Eh
.eh_frame:000000000000DC8D                 db  40h ; @
.eh_frame:000000000000DC8E                 db    2
.eh_frame:000000000000DC8F                 db 0EEh
.eh_frame:000000000000DC90                 db  0Ah
.eh_frame:000000000000DC91                 db  0Eh
.eh_frame:000000000000DC92                 db  38h ; 8
.eh_frame:000000000000DC93                 db  46h ; F
.eh_frame:000000000000DC94                 db  0Eh
.eh_frame:000000000000DC95                 db  30h ; 0
.eh_frame:000000000000DC96                 db  41h ; A
.eh_frame:000000000000DC97                 db  0Eh
.eh_frame:000000000000DC98                 db  28h ; (
.eh_frame:000000000000DC99                 db  42h ; B
.eh_frame:000000000000DC9A                 db  0Eh
.eh_frame:000000000000DC9B                 db  20h
.eh_frame:000000000000DC9C                 db  42h ; B
.eh_frame:000000000000DC9D                 db  0Eh
.eh_frame:000000000000DC9E                 db  18h
.eh_frame:000000000000DC9F                 db  42h ; B
.eh_frame:000000000000DCA0                 db  0Eh
.eh_frame:000000000000DCA1                 db  10h
.eh_frame:000000000000DCA2                 db  42h ; B
.eh_frame:000000000000DCA3                 db  0Eh
.eh_frame:000000000000DCA4                 db    8
.eh_frame:000000000000DCA5                 db  45h ; E
.eh_frame:000000000000DCA6                 db  0Bh
.eh_frame:000000000000DCA7                 db  63h ; c
.eh_frame:000000000000DCA8                 db  0Eh
.eh_frame:000000000000DCA9                 db  38h ; 8
.eh_frame:000000000000DCAA                 db  43h ; C
.eh_frame:000000000000DCAB                 db  0Eh
.eh_frame:000000000000DCAC                 db  30h ; 0
.eh_frame:000000000000DCAD                 db  41h ; A
.eh_frame:000000000000DCAE                 db  0Eh
.eh_frame:000000000000DCAF                 db  28h ; (
.eh_frame:000000000000DCB0                 db  42h ; B
.eh_frame:000000000000DCB1                 db  0Eh
.eh_frame:000000000000DCB2                 db  20h
.eh_frame:000000000000DCB3                 db  42h ; B
.eh_frame:000000000000DCB4                 db  0Eh
.eh_frame:000000000000DCB5                 db  18h
.eh_frame:000000000000DCB6                 db  42h ; B
.eh_frame:000000000000DCB7                 db  0Eh
.eh_frame:000000000000DCB8                 db  10h
.eh_frame:000000000000DCB9                 db  42h ; B
.eh_frame:000000000000DCBA                 db  0Eh
.eh_frame:000000000000DCBB                 db    8
.eh_frame:000000000000DCBC                 db  10h
.eh_frame:000000000000DCBD                 db    0
.eh_frame:000000000000DCBE                 db    0
.eh_frame:000000000000DCBF                 db    0
.eh_frame:000000000000DCC0                 db  68h ; h
.eh_frame:000000000000DCC1                 db  14h
.eh_frame:000000000000DCC2                 db    0
.eh_frame:000000000000DCC3                 db    0
.eh_frame:000000000000DCC4                 db  6Ch ; l
.eh_frame:000000000000DCC5                 db 0B7h
.eh_frame:000000000000DCC6                 db 0FFh
.eh_frame:000000000000DCC7                 db 0FFh
.eh_frame:000000000000DCC8                 db    5
.eh_frame:000000000000DCC9                 db    0
.eh_frame:000000000000DCCA                 db    0
.eh_frame:000000000000DCCB                 db    0
.eh_frame:000000000000DCCC                 db    0
.eh_frame:000000000000DCCD                 db    0
.eh_frame:000000000000DCCE                 db    0
.eh_frame:000000000000DCCF                 db    0
.eh_frame:000000000000DCD0                 db  10h
.eh_frame:000000000000DCD1                 db    0
.eh_frame:000000000000DCD2                 db    0
.eh_frame:000000000000DCD3                 db    0
.eh_frame:000000000000DCD4                 db  7Ch ; |
.eh_frame:000000000000DCD5                 db  14h
.eh_frame:000000000000DCD6                 db    0
.eh_frame:000000000000DCD7                 db    0
.eh_frame:000000000000DCD8                 db  68h ; h
.eh_frame:000000000000DCD9                 db 0B7h
.eh_frame:000000000000DCDA                 db 0FFh
.eh_frame:000000000000DCDB                 db 0FFh
.eh_frame:000000000000DCDC                 db    5
.eh_frame:000000000000DCDD                 db    0
.eh_frame:000000000000DCDE                 db    0
.eh_frame:000000000000DCDF                 db    0
.eh_frame:000000000000DCE0                 db    0
.eh_frame:000000000000DCE1                 db    0
.eh_frame:000000000000DCE2                 db    0
.eh_frame:000000000000DCE3                 db    0
.eh_frame:000000000000DCE4                 db  10h
.eh_frame:000000000000DCE5                 db    0
.eh_frame:000000000000DCE6                 db    0
.eh_frame:000000000000DCE7                 db    0
.eh_frame:000000000000DCE8                 db  90h
.eh_frame:000000000000DCE9                 db  14h
.eh_frame:000000000000DCEA                 db    0
.eh_frame:000000000000DCEB                 db    0
.eh_frame:000000000000DCEC                 db  64h ; d
.eh_frame:000000000000DCED                 db 0B7h
.eh_frame:000000000000DCEE                 db 0FFh
.eh_frame:000000000000DCEF                 db 0FFh
.eh_frame:000000000000DCF0                 db    5
.eh_frame:000000000000DCF1                 db    0
.eh_frame:000000000000DCF2                 db    0
.eh_frame:000000000000DCF3                 db    0
.eh_frame:000000000000DCF4                 db    0
.eh_frame:000000000000DCF5                 db    0
.eh_frame:000000000000DCF6                 db    0
.eh_frame:000000000000DCF7                 db    0
.eh_frame:000000000000DCF8                 db  10h
.eh_frame:000000000000DCF9                 db    0
.eh_frame:000000000000DCFA                 db    0
.eh_frame:000000000000DCFB                 db    0
.eh_frame:000000000000DCFC                 db 0A4h
.eh_frame:000000000000DCFD                 db  14h
.eh_frame:000000000000DCFE                 db    0
.eh_frame:000000000000DCFF                 db    0
.eh_frame:000000000000DD00                 db  60h ; `
.eh_frame:000000000000DD01                 db 0B7h
.eh_frame:000000000000DD02                 db 0FFh
.eh_frame:000000000000DD03                 db 0FFh
.eh_frame:000000000000DD04                 db  49h ; I
.eh_frame:000000000000DD05                 db    0
.eh_frame:000000000000DD06                 db    0
.eh_frame:000000000000DD07                 db    0
.eh_frame:000000000000DD08                 db    0
.eh_frame:000000000000DD09                 db    0
.eh_frame:000000000000DD0A                 db    0
.eh_frame:000000000000DD0B                 db    0
.eh_frame:000000000000DD0C                 db  10h
.eh_frame:000000000000DD0D                 db    0
.eh_frame:000000000000DD0E                 db    0
.eh_frame:000000000000DD0F                 db    0
.eh_frame:000000000000DD10                 db 0B8h
.eh_frame:000000000000DD11                 db  14h
.eh_frame:000000000000DD12                 db    0
.eh_frame:000000000000DD13                 db    0
.eh_frame:000000000000DD14                 db  9Ch
.eh_frame:000000000000DD15                 db 0B7h
.eh_frame:000000000000DD16                 db 0FFh
.eh_frame:000000000000DD17                 db 0FFh
.eh_frame:000000000000DD18                 db  58h ; X
.eh_frame:000000000000DD19                 db    0
.eh_frame:000000000000DD1A                 db    0
.eh_frame:000000000000DD1B                 db    0
.eh_frame:000000000000DD1C                 db    0
.eh_frame:000000000000DD1D                 db    0
.eh_frame:000000000000DD1E                 db    0
.eh_frame:000000000000DD1F                 db    0
.eh_frame:000000000000DD20                 db  38h ; 8
.eh_frame:000000000000DD21                 db    0
.eh_frame:000000000000DD22                 db    0
.eh_frame:000000000000DD23                 db    0
.eh_frame:000000000000DD24                 db 0CCh
.eh_frame:000000000000DD25                 db  14h
.eh_frame:000000000000DD26                 db    0
.eh_frame:000000000000DD27                 db    0
.eh_frame:000000000000DD28                 db 0E8h
.eh_frame:000000000000DD29                 db 0B7h
.eh_frame:000000000000DD2A                 db 0FFh
.eh_frame:000000000000DD2B                 db 0FFh
.eh_frame:000000000000DD2C                 db  47h ; G
.eh_frame:000000000000DD2D                 db    1
.eh_frame:000000000000DD2E                 db    0
.eh_frame:000000000000DD2F                 db    0
.eh_frame:000000000000DD30                 db    0
.eh_frame:000000000000DD31                 db  42h ; B
.eh_frame:000000000000DD32                 db  0Eh
.eh_frame:000000000000DD33                 db  10h
.eh_frame:000000000000DD34                 db  8Dh
.eh_frame:000000000000DD35                 db    2
.eh_frame:000000000000DD36                 db  42h ; B
.eh_frame:000000000000DD37                 db  0Eh
.eh_frame:000000000000DD38                 db  18h
.eh_frame:000000000000DD39                 db  8Ch
.eh_frame:000000000000DD3A                 db    3
.eh_frame:000000000000DD3B                 db  44h ; D
.eh_frame:000000000000DD3C                 db  0Eh
.eh_frame:000000000000DD3D                 db  20h
.eh_frame:000000000000DD3E                 db  86h
.eh_frame:000000000000DD3F                 db    4
.eh_frame:000000000000DD40                 db  41h ; A
.eh_frame:000000000000DD41                 db  0Eh
.eh_frame:000000000000DD42                 db  28h ; (
.eh_frame:000000000000DD43                 db  83h
.eh_frame:000000000000DD44                 db    5
.eh_frame:000000000000DD45                 db  46h ; F
.eh_frame:000000000000DD46                 db  0Eh
.eh_frame:000000000000DD47                 db  30h ; 0
.eh_frame:000000000000DD48                 db    2
.eh_frame:000000000000DD49                 db 0CDh
.eh_frame:000000000000DD4A                 db  0Ah
.eh_frame:000000000000DD4B                 db  0Eh
.eh_frame:000000000000DD4C                 db  28h ; (
.eh_frame:000000000000DD4D                 db  47h ; G
.eh_frame:000000000000DD4E                 db  0Eh
.eh_frame:000000000000DD4F                 db  20h
.eh_frame:000000000000DD50                 db  41h ; A
.eh_frame:000000000000DD51                 db  0Eh
.eh_frame:000000000000DD52                 db  18h
.eh_frame:000000000000DD53                 db  42h ; B
.eh_frame:000000000000DD54                 db  0Eh
.eh_frame:000000000000DD55                 db  10h
.eh_frame:000000000000DD56                 db  42h ; B
.eh_frame:000000000000DD57                 db  0Eh
.eh_frame:000000000000DD58                 db    8
.eh_frame:000000000000DD59                 db  58h ; X
.eh_frame:000000000000DD5A                 db  0Bh
.eh_frame:000000000000DD5B                 db    0
.eh_frame:000000000000DD5C                 db  34h ; 4
.eh_frame:000000000000DD5D                 db    0
.eh_frame:000000000000DD5E                 db    0
.eh_frame:000000000000DD5F                 db    0
.eh_frame:000000000000DD60                 db    8
.eh_frame:000000000000DD61                 db  15h
.eh_frame:000000000000DD62                 db    0
.eh_frame:000000000000DD63                 db    0
.eh_frame:000000000000DD64                 db 0FCh
.eh_frame:000000000000DD65                 db 0B8h
.eh_frame:000000000000DD66                 db 0FFh
.eh_frame:000000000000DD67                 db 0FFh
.eh_frame:000000000000DD68                 db  5Bh ; [
.eh_frame:000000000000DD69                 db    0
.eh_frame:000000000000DD6A                 db    0
.eh_frame:000000000000DD6B                 db    0
.eh_frame:000000000000DD6C                 db    0
.eh_frame:000000000000DD6D                 db  42h ; B
.eh_frame:000000000000DD6E                 db  0Eh
.eh_frame:000000000000DD6F                 db  10h
.eh_frame:000000000000DD70                 db  8Ch
.eh_frame:000000000000DD71                 db    2
.eh_frame:000000000000DD72                 db  41h ; A
.eh_frame:000000000000DD73                 db  0Eh
.eh_frame:000000000000DD74                 db  18h
.eh_frame:000000000000DD75                 db  86h
.eh_frame:000000000000DD76                 db    3
.eh_frame:000000000000DD77                 db  44h ; D
.eh_frame:000000000000DD78                 db  0Eh
.eh_frame:000000000000DD79                 db  20h
.eh_frame:000000000000DD7A                 db  83h
.eh_frame:000000000000DD7B                 db    4
.eh_frame:000000000000DD7C                 db  79h ; y
.eh_frame:000000000000DD7D                 db  0Ah
.eh_frame:000000000000DD7E                 db  0Eh
.eh_frame:000000000000DD7F                 db  18h
.eh_frame:000000000000DD80                 db  44h ; D
.eh_frame:000000000000DD81                 db  0Eh
.eh_frame:000000000000DD82                 db  10h
.eh_frame:000000000000DD83                 db  42h ; B
.eh_frame:000000000000DD84                 db  0Eh
.eh_frame:000000000000DD85                 db    8
.eh_frame:000000000000DD86                 db  4Ah ; J
.eh_frame:000000000000DD87                 db  0Bh
.eh_frame:000000000000DD88                 db  44h ; D
.eh_frame:000000000000DD89                 db  0Eh
.eh_frame:000000000000DD8A                 db  18h
.eh_frame:000000000000DD8B                 db  41h ; A
.eh_frame:000000000000DD8C                 db  0Eh
.eh_frame:000000000000DD8D                 db  10h
.eh_frame:000000000000DD8E                 db  45h ; E
.eh_frame:000000000000DD8F                 db  0Eh
.eh_frame:000000000000DD90                 db    8
.eh_frame:000000000000DD91                 db    0
.eh_frame:000000000000DD92                 db    0
.eh_frame:000000000000DD93                 db    0
.eh_frame:000000000000DD94                 db  10h
.eh_frame:000000000000DD95                 db    0
.eh_frame:000000000000DD96                 db    0
.eh_frame:000000000000DD97                 db    0
.eh_frame:000000000000DD98                 db  40h ; @
.eh_frame:000000000000DD99                 db  15h
.eh_frame:000000000000DD9A                 db    0
.eh_frame:000000000000DD9B                 db    0
.eh_frame:000000000000DD9C                 db  24h ; $
.eh_frame:000000000000DD9D                 db 0B9h
.eh_frame:000000000000DD9E                 db 0FFh
.eh_frame:000000000000DD9F                 db 0FFh
.eh_frame:000000000000DDA0                 db  41h ; A
.eh_frame:000000000000DDA1                 db    0
.eh_frame:000000000000DDA2                 db    0
.eh_frame:000000000000DDA3                 db    0
.eh_frame:000000000000DDA4                 db    0
.eh_frame:000000000000DDA5                 db  7Ch ; |
.eh_frame:000000000000DDA6                 db  0Eh
.eh_frame:000000000000DDA7                 db  10h
.eh_frame:000000000000DDA8                 db  30h ; 0
.eh_frame:000000000000DDA9                 db    0
.eh_frame:000000000000DDAA                 db    0
.eh_frame:000000000000DDAB                 db    0
.eh_frame:000000000000DDAC                 db  54h ; T
.eh_frame:000000000000DDAD                 db  15h
.eh_frame:000000000000DDAE                 db    0
.eh_frame:000000000000DDAF                 db    0
.eh_frame:000000000000DDB0                 db  60h ; `
.eh_frame:000000000000DDB1                 db 0B9h
.eh_frame:000000000000DDB2                 db 0FFh
.eh_frame:000000000000DDB3                 db 0FFh
.eh_frame:000000000000DDB4                 db  72h ; r
.eh_frame:000000000000DDB5                 db    0
.eh_frame:000000000000DDB6                 db    0
.eh_frame:000000000000DDB7                 db    0
.eh_frame:000000000000DDB8                 db    0
.eh_frame:000000000000DDB9                 db  41h ; A
.eh_frame:000000000000DDBA                 db  0Eh
.eh_frame:000000000000DDBB                 db  10h
.eh_frame:000000000000DDBC                 db  86h
.eh_frame:000000000000DDBD                 db    2
.eh_frame:000000000000DDBE                 db  41h ; A
.eh_frame:000000000000DDBF                 db  0Eh
.eh_frame:000000000000DDC0                 db  18h
.eh_frame:000000000000DDC1                 db  83h
.eh_frame:000000000000DDC2                 db    3
.eh_frame:000000000000DDC3                 db  4Ah ; J
.eh_frame:000000000000DDC4                 db  0Eh
.eh_frame:000000000000DDC5                 db  20h
.eh_frame:000000000000DDC6                 db    2
.eh_frame:000000000000DDC7                 db  53h ; S
.eh_frame:000000000000DDC8                 db  0Ah
.eh_frame:000000000000DDC9                 db  0Eh
.eh_frame:000000000000DDCA                 db  18h
.eh_frame:000000000000DDCB                 db  41h ; A
.eh_frame:000000000000DDCC                 db  0Eh
.eh_frame:000000000000DDCD                 db  10h
.eh_frame:000000000000DDCE                 db  41h ; A
.eh_frame:000000000000DDCF                 db  0Eh
.eh_frame:000000000000DDD0                 db    8
.eh_frame:000000000000DDD1                 db  47h ; G
.eh_frame:000000000000DDD2                 db  0Bh
.eh_frame:000000000000DDD3                 db  47h ; G
.eh_frame:000000000000DDD4                 db  0Eh
.eh_frame:000000000000DDD5                 db  18h
.eh_frame:000000000000DDD6                 db  41h ; A
.eh_frame:000000000000DDD7                 db  0Eh
.eh_frame:000000000000DDD8                 db  10h
.eh_frame:000000000000DDD9                 db  41h ; A
.eh_frame:000000000000DDDA                 db  0Eh
.eh_frame:000000000000DDDB                 db    8
.eh_frame:000000000000DDDC                 db  10h
.eh_frame:000000000000DDDD                 db    0
.eh_frame:000000000000DDDE                 db    0
.eh_frame:000000000000DDDF                 db    0
.eh_frame:000000000000DDE0                 db  88h
.eh_frame:000000000000DDE1                 db  15h
.eh_frame:000000000000DDE2                 db    0
.eh_frame:000000000000DDE3                 db    0
.eh_frame:000000000000DDE4                 db 0ACh
.eh_frame:000000000000DDE5                 db 0B9h
.eh_frame:000000000000DDE6                 db 0FFh
.eh_frame:000000000000DDE7                 db 0FFh
.eh_frame:000000000000DDE8                 db  65h ; e
.eh_frame:000000000000DDE9                 db    0
.eh_frame:000000000000DDEA                 db    0
.eh_frame:000000000000DDEB                 db    0
.eh_frame:000000000000DDEC                 db    0
.eh_frame:000000000000DDED                 db    0
.eh_frame:000000000000DDEE                 db    0
.eh_frame:000000000000DDEF                 db    0
.eh_frame:000000000000DDF0                 db  48h ; H
.eh_frame:000000000000DDF1                 db    0
.eh_frame:000000000000DDF2                 db    0
.eh_frame:000000000000DDF3                 db    0
.eh_frame:000000000000DDF4                 db  9Ch
.eh_frame:000000000000DDF5                 db  15h
.eh_frame:000000000000DDF6                 db    0
.eh_frame:000000000000DDF7                 db    0
.eh_frame:000000000000DDF8                 db    8
.eh_frame:000000000000DDF9                 db 0BAh
.eh_frame:000000000000DDFA                 db 0FFh
.eh_frame:000000000000DDFB                 db 0FFh
.eh_frame:000000000000DDFC                 db  6Ah ; j
.eh_frame:000000000000DDFD                 db    0
.eh_frame:000000000000DDFE                 db    0
.eh_frame:000000000000DDFF                 db    0
.eh_frame:000000000000DE00                 db    0
.eh_frame:000000000000DE01                 db  42h ; B
.eh_frame:000000000000DE02                 db  0Eh
.eh_frame:000000000000DE03                 db  10h
.eh_frame:000000000000DE04                 db  8Fh
.eh_frame:000000000000DE05                 db    2
.eh_frame:000000000000DE06                 db  42h ; B
.eh_frame:000000000000DE07                 db  0Eh
.eh_frame:000000000000DE08                 db  18h
.eh_frame:000000000000DE09                 db  8Eh
.eh_frame:000000000000DE0A                 db    3
.eh_frame:000000000000DE0B                 db  42h ; B
.eh_frame:000000000000DE0C                 db  0Eh
.eh_frame:000000000000DE0D                 db  20h
.eh_frame:000000000000DE0E                 db  8Dh
.eh_frame:000000000000DE0F                 db    4
.eh_frame:000000000000DE10                 db  42h ; B
.eh_frame:000000000000DE11                 db  0Eh
.eh_frame:000000000000DE12                 db  28h ; (
.eh_frame:000000000000DE13                 db  8Ch
.eh_frame:000000000000DE14                 db    5
.eh_frame:000000000000DE15                 db  41h ; A
.eh_frame:000000000000DE16                 db  0Eh
.eh_frame:000000000000DE17                 db  30h ; 0
.eh_frame:000000000000DE18                 db  86h
.eh_frame:000000000000DE19                 db    6
.eh_frame:000000000000DE1A                 db  41h ; A
.eh_frame:000000000000DE1B                 db  0Eh
.eh_frame:000000000000DE1C                 db  38h ; 8
.eh_frame:000000000000DE1D                 db  83h
.eh_frame:000000000000DE1E                 db    7
.eh_frame:000000000000DE1F                 db  44h ; D
.eh_frame:000000000000DE20                 db  0Eh
.eh_frame:000000000000DE21                 db  40h ; @
.eh_frame:000000000000DE22                 db    2
.eh_frame:000000000000DE23                 db  4Ah ; J
.eh_frame:000000000000DE24                 db  0Ah
.eh_frame:000000000000DE25                 db  0Eh
.eh_frame:000000000000DE26                 db  38h ; 8
.eh_frame:000000000000DE27                 db  44h ; D
.eh_frame:000000000000DE28                 db  0Eh
.eh_frame:000000000000DE29                 db  30h ; 0
.eh_frame:000000000000DE2A                 db  41h ; A
.eh_frame:000000000000DE2B                 db  0Eh
.eh_frame:000000000000DE2C                 db  28h ; (
.eh_frame:000000000000DE2D                 db  42h ; B
.eh_frame:000000000000DE2E                 db  0Eh
.eh_frame:000000000000DE2F                 db  20h
.eh_frame:000000000000DE30                 db  42h ; B
.eh_frame:000000000000DE31                 db  0Eh
.eh_frame:000000000000DE32                 db  18h
.eh_frame:000000000000DE33                 db  42h ; B
.eh_frame:000000000000DE34                 db  0Eh
.eh_frame:000000000000DE35                 db  10h
.eh_frame:000000000000DE36                 db  42h ; B
.eh_frame:000000000000DE37                 db  0Eh
.eh_frame:000000000000DE38                 db    8
.eh_frame:000000000000DE39                 db  41h ; A
.eh_frame:000000000000DE3A                 db  0Bh
.eh_frame:000000000000DE3B                 db    0
.eh_frame:000000000000DE3C                 db  10h
.eh_frame:000000000000DE3D                 db    0
.eh_frame:000000000000DE3E                 db    0
.eh_frame:000000000000DE3F                 db    0
.eh_frame:000000000000DE40                 db 0E8h
.eh_frame:000000000000DE41                 db  15h
.eh_frame:000000000000DE42                 db    0
.eh_frame:000000000000DE43                 db    0
.eh_frame:000000000000DE44                 db  2Ch ; ,
.eh_frame:000000000000DE45                 db 0BAh
.eh_frame:000000000000DE46                 db 0FFh
.eh_frame:000000000000DE47                 db 0FFh
.eh_frame:000000000000DE48                 db  31h ; 1
.eh_frame:000000000000DE49                 db    0
.eh_frame:000000000000DE4A                 db    0
.eh_frame:000000000000DE4B                 db    0
.eh_frame:000000000000DE4C                 db    0
.eh_frame:000000000000DE4D                 db    0
.eh_frame:000000000000DE4E                 db    0
.eh_frame:000000000000DE4F                 db    0
.eh_frame:000000000000DE50                 db  10h
.eh_frame:000000000000DE51                 db    0
.eh_frame:000000000000DE52                 db    0
.eh_frame:000000000000DE53                 db    0
.eh_frame:000000000000DE54                 db 0FCh
.eh_frame:000000000000DE55                 db  15h
.eh_frame:000000000000DE56                 db    0
.eh_frame:000000000000DE57                 db    0
.eh_frame:000000000000DE58                 db  58h ; X
.eh_frame:000000000000DE59                 db 0BAh
.eh_frame:000000000000DE5A                 db 0FFh
.eh_frame:000000000000DE5B                 db 0FFh
.eh_frame:000000000000DE5C                 db  20h
.eh_frame:000000000000DE5D                 db    0
.eh_frame:000000000000DE5E                 db    0
.eh_frame:000000000000DE5F                 db    0
.eh_frame:000000000000DE60                 db    0
.eh_frame:000000000000DE61                 db    0
.eh_frame:000000000000DE62                 db    0
.eh_frame:000000000000DE63                 db    0
.eh_frame:000000000000DE64                 db  48h ; H
.eh_frame:000000000000DE65                 db    0
.eh_frame:000000000000DE66                 db    0
.eh_frame:000000000000DE67                 db    0
.eh_frame:000000000000DE68                 db  10h
.eh_frame:000000000000DE69                 db  16h
.eh_frame:000000000000DE6A                 db    0
.eh_frame:000000000000DE6B                 db    0
.eh_frame:000000000000DE6C                 db  64h ; d
.eh_frame:000000000000DE6D                 db 0BAh
.eh_frame:000000000000DE6E                 db 0FFh
.eh_frame:000000000000DE6F                 db 0FFh
.eh_frame:000000000000DE70                 db 0B4h
.eh_frame:000000000000DE71                 db    1
.eh_frame:000000000000DE72                 db    0
.eh_frame:000000000000DE73                 db    0
.eh_frame:000000000000DE74                 db    0
.eh_frame:000000000000DE75                 db  42h ; B
.eh_frame:000000000000DE76                 db  0Eh
.eh_frame:000000000000DE77                 db  10h
.eh_frame:000000000000DE78                 db  8Fh
.eh_frame:000000000000DE79                 db    2
.eh_frame:000000000000DE7A                 db  42h ; B
.eh_frame:000000000000DE7B                 db  0Eh
.eh_frame:000000000000DE7C                 db  18h
.eh_frame:000000000000DE7D                 db  8Eh
.eh_frame:000000000000DE7E                 db    3
.eh_frame:000000000000DE7F                 db  49h ; I
.eh_frame:000000000000DE80                 db  0Eh
.eh_frame:000000000000DE81                 db  20h
.eh_frame:000000000000DE82                 db  8Dh
.eh_frame:000000000000DE83                 db    4
.eh_frame:000000000000DE84                 db  42h ; B
.eh_frame:000000000000DE85                 db  0Eh
.eh_frame:000000000000DE86                 db  28h ; (
.eh_frame:000000000000DE87                 db  8Ch
.eh_frame:000000000000DE88                 db    5
.eh_frame:000000000000DE89                 db  44h ; D
.eh_frame:000000000000DE8A                 db  0Eh
.eh_frame:000000000000DE8B                 db  30h ; 0
.eh_frame:000000000000DE8C                 db  86h
.eh_frame:000000000000DE8D                 db    6
.eh_frame:000000000000DE8E                 db  41h ; A
.eh_frame:000000000000DE8F                 db  0Eh
.eh_frame:000000000000DE90                 db  38h ; 8
.eh_frame:000000000000DE91                 db  83h
.eh_frame:000000000000DE92                 db    7
.eh_frame:000000000000DE93                 db  52h ; R
.eh_frame:000000000000DE94                 db  0Eh
.eh_frame:000000000000DE95                 db  40h ; @
.eh_frame:000000000000DE96                 db    2
.eh_frame:000000000000DE97                 db 0D8h
.eh_frame:000000000000DE98                 db  0Ah
.eh_frame:000000000000DE99                 db  0Eh
.eh_frame:000000000000DE9A                 db  38h ; 8
.eh_frame:000000000000DE9B                 db  44h ; D
.eh_frame:000000000000DE9C                 db  0Eh
.eh_frame:000000000000DE9D                 db  30h ; 0
.eh_frame:000000000000DE9E                 db  41h ; A
.eh_frame:000000000000DE9F                 db  0Eh
.eh_frame:000000000000DEA0                 db  28h ; (
.eh_frame:000000000000DEA1                 db  42h ; B
.eh_frame:000000000000DEA2                 db  0Eh
.eh_frame:000000000000DEA3                 db  20h
.eh_frame:000000000000DEA4                 db  42h ; B
.eh_frame:000000000000DEA5                 db  0Eh
.eh_frame:000000000000DEA6                 db  18h
.eh_frame:000000000000DEA7                 db  42h ; B
.eh_frame:000000000000DEA8                 db  0Eh
.eh_frame:000000000000DEA9                 db  10h
.eh_frame:000000000000DEAA                 db  42h ; B
.eh_frame:000000000000DEAB                 db  0Eh
.eh_frame:000000000000DEAC                 db    8
.eh_frame:000000000000DEAD                 db  45h ; E
.eh_frame:000000000000DEAE                 db  0Bh
.eh_frame:000000000000DEAF                 db    0
.eh_frame:000000000000DEB0                 db  28h ; (
.eh_frame:000000000000DEB1                 db    0
.eh_frame:000000000000DEB2                 db    0
.eh_frame:000000000000DEB3                 db    0
.eh_frame:000000000000DEB4                 db  5Ch ; \
.eh_frame:000000000000DEB5                 db  16h
.eh_frame:000000000000DEB6                 db    0
.eh_frame:000000000000DEB7                 db    0
.eh_frame:000000000000DEB8                 db 0D8h
.eh_frame:000000000000DEB9                 db 0BBh
.eh_frame:000000000000DEBA                 db 0FFh
.eh_frame:000000000000DEBB                 db 0FFh
.eh_frame:000000000000DEBC                 db  90h
.eh_frame:000000000000DEBD                 db    0
.eh_frame:000000000000DEBE                 db    0
.eh_frame:000000000000DEBF                 db    0
.eh_frame:000000000000DEC0                 db    0
.eh_frame:000000000000DEC1                 db  42h ; B
.eh_frame:000000000000DEC2                 db  0Eh
.eh_frame:000000000000DEC3                 db  10h
.eh_frame:000000000000DEC4                 db  8Ch
.eh_frame:000000000000DEC5                 db    2
.eh_frame:000000000000DEC6                 db  41h ; A
.eh_frame:000000000000DEC7                 db  0Eh
.eh_frame:000000000000DEC8                 db  18h
.eh_frame:000000000000DEC9                 db  86h
.eh_frame:000000000000DECA                 db    3
.eh_frame:000000000000DECB                 db  44h ; D
.eh_frame:000000000000DECC                 db  0Eh
.eh_frame:000000000000DECD                 db  20h
.eh_frame:000000000000DECE                 db  83h
.eh_frame:000000000000DECF                 db    4
.eh_frame:000000000000DED0                 db    2
.eh_frame:000000000000DED1                 db  85h
.eh_frame:000000000000DED2                 db  0Eh
.eh_frame:000000000000DED3                 db  18h
.eh_frame:000000000000DED4                 db  41h ; A
.eh_frame:000000000000DED5                 db  0Eh
.eh_frame:000000000000DED6                 db  10h
.eh_frame:000000000000DED7                 db  42h ; B
.eh_frame:000000000000DED8                 db  0Eh
.eh_frame:000000000000DED9                 db    8
.eh_frame:000000000000DEDA                 db    0
.eh_frame:000000000000DEDB                 db    0
.eh_frame:000000000000DEDC                 db  28h ; (
.eh_frame:000000000000DEDD                 db    0
.eh_frame:000000000000DEDE                 db    0
.eh_frame:000000000000DEDF                 db    0
.eh_frame:000000000000DEE0                 db  88h
.eh_frame:000000000000DEE1                 db  16h
.eh_frame:000000000000DEE2                 db    0
.eh_frame:000000000000DEE3                 db    0
.eh_frame:000000000000DEE4                 db  3Ch ; <
.eh_frame:000000000000DEE5                 db 0BCh
.eh_frame:000000000000DEE6                 db 0FFh
.eh_frame:000000000000DEE7                 db 0FFh
.eh_frame:000000000000DEE8                 db 0D6h
.eh_frame:000000000000DEE9                 db    0
.eh_frame:000000000000DEEA                 db    0
.eh_frame:000000000000DEEB                 db    0
.eh_frame:000000000000DEEC                 db    0
.eh_frame:000000000000DEED                 db  42h ; B
.eh_frame:000000000000DEEE                 db  0Eh
.eh_frame:000000000000DEEF                 db  10h
.eh_frame:000000000000DEF0                 db  8Ch
.eh_frame:000000000000DEF1                 db    2
.eh_frame:000000000000DEF2                 db  41h ; A
.eh_frame:000000000000DEF3                 db  0Eh
.eh_frame:000000000000DEF4                 db  18h
.eh_frame:000000000000DEF5                 db  86h
.eh_frame:000000000000DEF6                 db    3
.eh_frame:000000000000DEF7                 db  44h ; D
.eh_frame:000000000000DEF8                 db  0Eh
.eh_frame:000000000000DEF9                 db  20h
.eh_frame:000000000000DEFA                 db  83h
.eh_frame:000000000000DEFB                 db    4
.eh_frame:000000000000DEFC                 db    2
.eh_frame:000000000000DEFD                 db 0C4h
.eh_frame:000000000000DEFE                 db  0Eh
.eh_frame:000000000000DEFF                 db  18h
.eh_frame:000000000000DF00                 db  44h ; D
.eh_frame:000000000000DF01                 db  0Eh
.eh_frame:000000000000DF02                 db  10h
.eh_frame:000000000000DF03                 db  42h ; B
.eh_frame:000000000000DF04                 db  0Eh
.eh_frame:000000000000DF05                 db    8
.eh_frame:000000000000DF06                 db    0
.eh_frame:000000000000DF07                 db    0
.eh_frame:000000000000DF08                 db  34h ; 4
.eh_frame:000000000000DF09                 db    0
.eh_frame:000000000000DF0A                 db    0
.eh_frame:000000000000DF0B                 db    0
.eh_frame:000000000000DF0C                 db 0B4h
.eh_frame:000000000000DF0D                 db  16h
.eh_frame:000000000000DF0E                 db    0
.eh_frame:000000000000DF0F                 db    0
.eh_frame:000000000000DF10                 db 0F0h
.eh_frame:000000000000DF11                 db 0BCh
.eh_frame:000000000000DF12                 db 0FFh
.eh_frame:000000000000DF13                 db 0FFh
.eh_frame:000000000000DF14                 db  3Eh ; >
.eh_frame:000000000000DF15                 db    2
.eh_frame:000000000000DF16                 db    0
.eh_frame:000000000000DF17                 db    0
.eh_frame:000000000000DF18                 db    0
.eh_frame:000000000000DF19                 db  42h ; B
.eh_frame:000000000000DF1A                 db  0Eh
.eh_frame:000000000000DF1B                 db  10h
.eh_frame:000000000000DF1C                 db  8Ch
.eh_frame:000000000000DF1D                 db    2
.eh_frame:000000000000DF1E                 db  41h ; A
.eh_frame:000000000000DF1F                 db  0Eh
.eh_frame:000000000000DF20                 db  18h
.eh_frame:000000000000DF21                 db  86h
.eh_frame:000000000000DF22                 db    3
.eh_frame:000000000000DF23                 db  44h ; D
.eh_frame:000000000000DF24                 db  0Eh
.eh_frame:000000000000DF25                 db  20h
.eh_frame:000000000000DF26                 db  83h
.eh_frame:000000000000DF27                 db    4
.eh_frame:000000000000DF28                 db  44h ; D
.eh_frame:000000000000DF29                 db  0Eh
.eh_frame:000000000000DF2A                 db  80h
.eh_frame:000000000000DF2B                 db    1
.eh_frame:000000000000DF2C                 db    3
.eh_frame:000000000000DF2D                 db  91h
.eh_frame:000000000000DF2E                 db    1
.eh_frame:000000000000DF2F                 db  0Ah
.eh_frame:000000000000DF30                 db  0Eh
.eh_frame:000000000000DF31                 db  20h
.eh_frame:000000000000DF32                 db  41h ; A
.eh_frame:000000000000DF33                 db  0Eh
.eh_frame:000000000000DF34                 db  18h
.eh_frame:000000000000DF35                 db  41h ; A
.eh_frame:000000000000DF36                 db  0Eh
.eh_frame:000000000000DF37                 db  10h
.eh_frame:000000000000DF38                 db  42h ; B
.eh_frame:000000000000DF39                 db  0Eh
.eh_frame:000000000000DF3A                 db    8
.eh_frame:000000000000DF3B                 db  48h ; H
.eh_frame:000000000000DF3C                 db  0Bh
.eh_frame:000000000000DF3D                 db    0
.eh_frame:000000000000DF3E                 db    0
.eh_frame:000000000000DF3F                 db    0
.eh_frame:000000000000DF40                 db  38h ; 8
.eh_frame:000000000000DF41                 db    0
.eh_frame:000000000000DF42                 db    0
.eh_frame:000000000000DF43                 db    0
.eh_frame:000000000000DF44                 db 0ECh
.eh_frame:000000000000DF45                 db  16h
.eh_frame:000000000000DF46                 db    0
.eh_frame:000000000000DF47                 db    0
.eh_frame:000000000000DF48                 db 0F8h
.eh_frame:000000000000DF49                 db 0BEh
.eh_frame:000000000000DF4A                 db 0FFh
.eh_frame:000000000000DF4B                 db 0FFh
.eh_frame:000000000000DF4C                 db  84h
.eh_frame:000000000000DF4D                 db    2
.eh_frame:000000000000DF4E                 db    0
.eh_frame:000000000000DF4F                 db    0
.eh_frame:000000000000DF50                 db    0
.eh_frame:000000000000DF51                 db  42h ; B
.eh_frame:000000000000DF52                 db  0Eh
.eh_frame:000000000000DF53                 db  10h
.eh_frame:000000000000DF54                 db  8Dh
.eh_frame:000000000000DF55                 db    2
.eh_frame:000000000000DF56                 db  42h ; B
.eh_frame:000000000000DF57                 db  0Eh
.eh_frame:000000000000DF58                 db  18h
.eh_frame:000000000000DF59                 db  8Ch
.eh_frame:000000000000DF5A                 db    3
.eh_frame:000000000000DF5B                 db  41h ; A
.eh_frame:000000000000DF5C                 db  0Eh
.eh_frame:000000000000DF5D                 db  20h
.eh_frame:000000000000DF5E                 db  86h
.eh_frame:000000000000DF5F                 db    4
.eh_frame:000000000000DF60                 db  41h ; A
.eh_frame:000000000000DF61                 db  0Eh
.eh_frame:000000000000DF62                 db  28h ; (
.eh_frame:000000000000DF63                 db  83h
.eh_frame:000000000000DF64                 db    5
.eh_frame:000000000000DF65                 db  44h ; D
.eh_frame:000000000000DF66                 db  0Eh
.eh_frame:000000000000DF67                 db  40h ; @
.eh_frame:000000000000DF68                 db    2
.eh_frame:000000000000DF69                 db  5Ah ; Z
.eh_frame:000000000000DF6A                 db  0Ah
.eh_frame:000000000000DF6B                 db  0Eh
.eh_frame:000000000000DF6C                 db  28h ; (
.eh_frame:000000000000DF6D                 db  41h ; A
.eh_frame:000000000000DF6E                 db  0Eh
.eh_frame:000000000000DF6F                 db  20h
.eh_frame:000000000000DF70                 db  41h ; A
.eh_frame:000000000000DF71                 db  0Eh
.eh_frame:000000000000DF72                 db  18h
.eh_frame:000000000000DF73                 db  42h ; B
.eh_frame:000000000000DF74                 db  0Eh
.eh_frame:000000000000DF75                 db  10h
.eh_frame:000000000000DF76                 db  42h ; B
.eh_frame:000000000000DF77                 db  0Eh
.eh_frame:000000000000DF78                 db    8
.eh_frame:000000000000DF79                 db  46h ; F
.eh_frame:000000000000DF7A                 db  0Bh
.eh_frame:000000000000DF7B                 db    0
.eh_frame:000000000000DF7C                 db  20h
.eh_frame:000000000000DF7D                 db    0
.eh_frame:000000000000DF7E                 db    0
.eh_frame:000000000000DF7F                 db    0
.eh_frame:000000000000DF80                 db  28h ; (
.eh_frame:000000000000DF81                 db  17h
.eh_frame:000000000000DF82                 db    0
.eh_frame:000000000000DF83                 db    0
.eh_frame:000000000000DF84                 db  4Ch ; L
.eh_frame:000000000000DF85                 db 0C1h
.eh_frame:000000000000DF86                 db 0FFh
.eh_frame:000000000000DF87                 db 0FFh
.eh_frame:000000000000DF88                 db  59h ; Y
.eh_frame:000000000000DF89                 db    0
.eh_frame:000000000000DF8A                 db    0
.eh_frame:000000000000DF8B                 db    0
.eh_frame:000000000000DF8C                 db    0
.eh_frame:000000000000DF8D                 db  41h ; A
.eh_frame:000000000000DF8E                 db  0Eh
.eh_frame:000000000000DF8F                 db  10h
.eh_frame:000000000000DF90                 db  83h
.eh_frame:000000000000DF91                 db    2
.eh_frame:000000000000DF92                 db  47h ; G
.eh_frame:000000000000DF93                 db  0Eh
.eh_frame:000000000000DF94                 db  20h
.eh_frame:000000000000DF95                 db  7Ch ; |
.eh_frame:000000000000DF96                 db  0Ah
.eh_frame:000000000000DF97                 db  0Eh
.eh_frame:000000000000DF98                 db  10h
.eh_frame:000000000000DF99                 db  41h ; A
.eh_frame:000000000000DF9A                 db  0Eh
.eh_frame:000000000000DF9B                 db    8
.eh_frame:000000000000DF9C                 db  4Bh ; K
.eh_frame:000000000000DF9D                 db  0Bh
.eh_frame:000000000000DF9E                 db    0
.eh_frame:000000000000DF9F                 db    0
.eh_frame:000000000000DFA0                 db  34h ; 4
.eh_frame:000000000000DFA1                 db    0
.eh_frame:000000000000DFA2                 db    0
.eh_frame:000000000000DFA3                 db    0
.eh_frame:000000000000DFA4                 db  4Ch ; L
.eh_frame:000000000000DFA5                 db  17h
.eh_frame:000000000000DFA6                 db    0
.eh_frame:000000000000DFA7                 db    0
.eh_frame:000000000000DFA8                 db  88h
.eh_frame:000000000000DFA9                 db 0C1h
.eh_frame:000000000000DFAA                 db 0FFh
.eh_frame:000000000000DFAB                 db 0FFh
.eh_frame:000000000000DFAC                 db    3
.eh_frame:000000000000DFAD                 db    2
.eh_frame:000000000000DFAE                 db    0
.eh_frame:000000000000DFAF                 db    0
.eh_frame:000000000000DFB0                 db    0
.eh_frame:000000000000DFB1                 db  42h ; B
.eh_frame:000000000000DFB2                 db  0Eh
.eh_frame:000000000000DFB3                 db  10h
.eh_frame:000000000000DFB4                 db  8Ch
.eh_frame:000000000000DFB5                 db    2
.eh_frame:000000000000DFB6                 db  41h ; A
.eh_frame:000000000000DFB7                 db  0Eh
.eh_frame:000000000000DFB8                 db  18h
.eh_frame:000000000000DFB9                 db  86h
.eh_frame:000000000000DFBA                 db    3
.eh_frame:000000000000DFBB                 db  46h ; F
.eh_frame:000000000000DFBC                 db  0Eh
.eh_frame:000000000000DFBD                 db  20h
.eh_frame:000000000000DFBE                 db  83h
.eh_frame:000000000000DFBF                 db    4
.eh_frame:000000000000DFC0                 db  47h ; G
.eh_frame:000000000000DFC1                 db  0Eh
.eh_frame:000000000000DFC2                 db  30h ; 0
.eh_frame:000000000000DFC3                 db    2
.eh_frame:000000000000DFC4                 db  4Ah ; J
.eh_frame:000000000000DFC5                 db  0Ah
.eh_frame:000000000000DFC6                 db  0Eh
.eh_frame:000000000000DFC7                 db  20h
.eh_frame:000000000000DFC8                 db  41h ; A
.eh_frame:000000000000DFC9                 db  0Eh
.eh_frame:000000000000DFCA                 db  18h
.eh_frame:000000000000DFCB                 db  41h ; A
.eh_frame:000000000000DFCC                 db  0Eh
.eh_frame:000000000000DFCD                 db  10h
.eh_frame:000000000000DFCE                 db  42h ; B
.eh_frame:000000000000DFCF                 db  0Eh
.eh_frame:000000000000DFD0                 db    8
.eh_frame:000000000000DFD1                 db  42h ; B
.eh_frame:000000000000DFD2                 db  0Bh
.eh_frame:000000000000DFD3                 db    0
.eh_frame:000000000000DFD4                 db    0
.eh_frame:000000000000DFD5                 db    0
.eh_frame:000000000000DFD6                 db    0
.eh_frame:000000000000DFD7                 db    0
.eh_frame:000000000000DFD8                 db  10h
.eh_frame:000000000000DFD9                 db    0
.eh_frame:000000000000DFDA                 db    0
.eh_frame:000000000000DFDB                 db    0
.eh_frame:000000000000DFDC                 db  84h
.eh_frame:000000000000DFDD                 db  17h
.eh_frame:000000000000DFDE                 db    0
.eh_frame:000000000000DFDF                 db    0
.eh_frame:000000000000DFE0                 db  60h ; `
.eh_frame:000000000000DFE1                 db 0C3h
.eh_frame:000000000000DFE2                 db 0FFh
.eh_frame:000000000000DFE3                 db 0FFh
.eh_frame:000000000000DFE4                 db  1Bh
.eh_frame:000000000000DFE5                 db    0
.eh_frame:000000000000DFE6                 db    0
.eh_frame:000000000000DFE7                 db    0
.eh_frame:000000000000DFE8                 db    0
.eh_frame:000000000000DFE9                 db    0
.eh_frame:000000000000DFEA                 db    0
.eh_frame:000000000000DFEB                 db    0
.eh_frame:000000000000DFEC                 db  10h
.eh_frame:000000000000DFED                 db    0
.eh_frame:000000000000DFEE                 db    0
.eh_frame:000000000000DFEF                 db    0
.eh_frame:000000000000DFF0                 db  98h
.eh_frame:000000000000DFF1                 db  17h
.eh_frame:000000000000DFF2                 db    0
.eh_frame:000000000000DFF3                 db    0
.eh_frame:000000000000DFF4                 db  6Ch ; l
.eh_frame:000000000000DFF5                 db 0C3h
.eh_frame:000000000000DFF6                 db 0FFh
.eh_frame:000000000000DFF7                 db 0FFh
.eh_frame:000000000000DFF8                 db    5
.eh_frame:000000000000DFF9                 db    0
.eh_frame:000000000000DFFA                 db    0
.eh_frame:000000000000DFFB                 db    0
.eh_frame:000000000000DFFC                 db    0
.eh_frame:000000000000DFFD                 db    0
.eh_frame:000000000000DFFE                 db    0
.eh_frame:000000000000DFFF                 db    0
.eh_frame:000000000000E000                 db  10h
.eh_frame:000000000000E001                 db    0
.eh_frame:000000000000E002                 db    0
.eh_frame:000000000000E003                 db    0
.eh_frame:000000000000E004                 db 0ACh
.eh_frame:000000000000E005                 db  17h
.eh_frame:000000000000E006                 db    0
.eh_frame:000000000000E007                 db    0
.eh_frame:000000000000E008                 db  68h ; h
.eh_frame:000000000000E009                 db 0C3h
.eh_frame:000000000000E00A                 db 0FFh
.eh_frame:000000000000E00B                 db 0FFh
.eh_frame:000000000000E00C                 db  35h ; 5
.eh_frame:000000000000E00D                 db    0
.eh_frame:000000000000E00E                 db    0
.eh_frame:000000000000E00F                 db    0
.eh_frame:000000000000E010                 db    0
.eh_frame:000000000000E011                 db    0
.eh_frame:000000000000E012                 db    0
.eh_frame:000000000000E013                 db    0
.eh_frame:000000000000E014                 db  10h
.eh_frame:000000000000E015                 db    0
.eh_frame:000000000000E016                 db    0
.eh_frame:000000000000E017                 db    0
.eh_frame:000000000000E018                 db 0C0h
.eh_frame:000000000000E019                 db  17h
.eh_frame:000000000000E01A                 db    0
.eh_frame:000000000000E01B                 db    0
.eh_frame:000000000000E01C                 db  94h
.eh_frame:000000000000E01D                 db 0C3h
.eh_frame:000000000000E01E                 db 0FFh
.eh_frame:000000000000E01F                 db 0FFh
.eh_frame:000000000000E020                 db  3Eh ; >
.eh_frame:000000000000E021                 db    0
.eh_frame:000000000000E022                 db    0
.eh_frame:000000000000E023                 db    0
.eh_frame:000000000000E024                 db    0
.eh_frame:000000000000E025                 db  79h ; y
.eh_frame:000000000000E026                 db  0Eh
.eh_frame:000000000000E027                 db  10h
.eh_frame:000000000000E028                 db  1Ch
.eh_frame:000000000000E029                 db    0
.eh_frame:000000000000E02A                 db    0
.eh_frame:000000000000E02B                 db    0
.eh_frame:000000000000E02C                 db 0D4h
.eh_frame:000000000000E02D                 db  17h
.eh_frame:000000000000E02E                 db    0
.eh_frame:000000000000E02F                 db    0
.eh_frame:000000000000E030                 db 0C0h
.eh_frame:000000000000E031                 db 0C3h
.eh_frame:000000000000E032                 db 0FFh
.eh_frame:000000000000E033                 db 0FFh
.eh_frame:000000000000E034                 db  3Ch ; <
.eh_frame:000000000000E035                 db    0
.eh_frame:000000000000E036                 db    0
.eh_frame:000000000000E037                 db    0
.eh_frame:000000000000E038                 db    0
.eh_frame:000000000000E039                 db  44h ; D
.eh_frame:000000000000E03A                 db  0Eh
.eh_frame:000000000000E03B                 db  10h
.eh_frame:000000000000E03C                 db  61h ; a
.eh_frame:000000000000E03D                 db  0Ah
.eh_frame:000000000000E03E                 db  0Eh
.eh_frame:000000000000E03F                 db    8
.eh_frame:000000000000E040                 db  4Bh ; K
.eh_frame:000000000000E041                 db  0Bh
.eh_frame:000000000000E042                 db  4Bh ; K
.eh_frame:000000000000E043                 db  0Eh
.eh_frame:000000000000E044                 db    8
.eh_frame:000000000000E045                 db    0
.eh_frame:000000000000E046                 db    0
.eh_frame:000000000000E047                 db    0
.eh_frame:000000000000E048                 db  1Ch
.eh_frame:000000000000E049                 db    0
.eh_frame:000000000000E04A                 db    0
.eh_frame:000000000000E04B                 db    0
.eh_frame:000000000000E04C                 db 0F4h
.eh_frame:000000000000E04D                 db  17h
.eh_frame:000000000000E04E                 db    0
.eh_frame:000000000000E04F                 db    0
.eh_frame:000000000000E050                 db 0E0h
.eh_frame:000000000000E051                 db 0C3h
.eh_frame:000000000000E052                 db 0FFh
.eh_frame:000000000000E053                 db 0FFh
.eh_frame:000000000000E054                 db  6Eh ; n
.eh_frame:000000000000E055                 db    0
.eh_frame:000000000000E056                 db    0
.eh_frame:000000000000E057                 db    0
.eh_frame:000000000000E058                 db    0
.eh_frame:000000000000E059                 db  44h ; D
.eh_frame:000000000000E05A                 db  0Eh
.eh_frame:000000000000E05B                 db  60h ; `
.eh_frame:000000000000E05C                 db  7Eh ; ~
.eh_frame:000000000000E05D                 db  0Ah
.eh_frame:000000000000E05E                 db  0Eh
.eh_frame:000000000000E05F                 db    8
.eh_frame:000000000000E060                 db  46h ; F
.eh_frame:000000000000E061                 db  0Bh
.eh_frame:000000000000E062                 db    0
.eh_frame:000000000000E063                 db    0
.eh_frame:000000000000E064                 db    0
.eh_frame:000000000000E065                 db    0
.eh_frame:000000000000E066                 db    0
.eh_frame:000000000000E067                 db    0
.eh_frame:000000000000E068                 db  5Ch ; \
.eh_frame:000000000000E069                 db    0
.eh_frame:000000000000E06A                 db    0
.eh_frame:000000000000E06B                 db    0
.eh_frame:000000000000E06C                 db  14h
.eh_frame:000000000000E06D                 db  18h
.eh_frame:000000000000E06E                 db    0
.eh_frame:000000000000E06F                 db    0
.eh_frame:000000000000E070                 db  30h ; 0
.eh_frame:000000000000E071                 db 0C4h
.eh_frame:000000000000E072                 db 0FFh
.eh_frame:000000000000E073                 db 0FFh
.eh_frame:000000000000E074                 db  80h
.eh_frame:000000000000E075                 db    0
.eh_frame:000000000000E076                 db    0
.eh_frame:000000000000E077                 db    0
.eh_frame:000000000000E078                 db    0
.eh_frame:000000000000E079                 db  42h ; B
.eh_frame:000000000000E07A                 db  0Eh
.eh_frame:000000000000E07B                 db  10h
.eh_frame:000000000000E07C                 db  8Dh
.eh_frame:000000000000E07D                 db    2
.eh_frame:000000000000E07E                 db  42h ; B
.eh_frame:000000000000E07F                 db  0Eh
.eh_frame:000000000000E080                 db  18h
.eh_frame:000000000000E081                 db  8Ch
.eh_frame:000000000000E082                 db    3
.eh_frame:000000000000E083                 db  47h ; G
.eh_frame:000000000000E084                 db  0Eh
.eh_frame:000000000000E085                 db  20h
.eh_frame:000000000000E086                 db  86h
.eh_frame:000000000000E087                 db    4
.eh_frame:000000000000E088                 db  41h ; A
.eh_frame:000000000000E089                 db  0Eh
.eh_frame:000000000000E08A                 db  28h ; (
.eh_frame:000000000000E08B                 db  83h
.eh_frame:000000000000E08C                 db    5
.eh_frame:000000000000E08D                 db  49h ; I
.eh_frame:000000000000E08E                 db  0Eh
.eh_frame:000000000000E08F                 db  30h ; 0
.eh_frame:000000000000E090                 db  62h ; b
.eh_frame:000000000000E091                 db  0Ah
.eh_frame:000000000000E092                 db  0Eh
.eh_frame:000000000000E093                 db  28h ; (
.eh_frame:000000000000E094                 db  44h ; D
.eh_frame:000000000000E095                 db  0Eh
.eh_frame:000000000000E096                 db  20h
.eh_frame:000000000000E097                 db  41h ; A
.eh_frame:000000000000E098                 db  0Eh
.eh_frame:000000000000E099                 db  18h
.eh_frame:000000000000E09A                 db  42h ; B
.eh_frame:000000000000E09B                 db  0Eh
.eh_frame:000000000000E09C                 db  10h
.eh_frame:000000000000E09D                 db  42h ; B
.eh_frame:000000000000E09E                 db  0Eh
.eh_frame:000000000000E09F                 db    8
.eh_frame:000000000000E0A0                 db  48h ; H
.eh_frame:000000000000E0A1                 db  0Bh
.eh_frame:000000000000E0A2                 db  5Dh ; ]
.eh_frame:000000000000E0A3                 db  0Ah
.eh_frame:000000000000E0A4                 db  0Eh
.eh_frame:000000000000E0A5                 db  28h ; (
.eh_frame:000000000000E0A6                 db  41h ; A
.eh_frame:000000000000E0A7                 db  0Eh
.eh_frame:000000000000E0A8                 db  20h
.eh_frame:000000000000E0A9                 db  41h ; A
.eh_frame:000000000000E0AA                 db  0Eh
.eh_frame:000000000000E0AB                 db  18h
.eh_frame:000000000000E0AC                 db  42h ; B
.eh_frame:000000000000E0AD                 db  0Eh
.eh_frame:000000000000E0AE                 db  10h
.eh_frame:000000000000E0AF                 db  42h ; B
.eh_frame:000000000000E0B0                 db  0Eh
.eh_frame:000000000000E0B1                 db    8
.eh_frame:000000000000E0B2                 db  45h ; E
.eh_frame:000000000000E0B3                 db  0Bh
.eh_frame:000000000000E0B4                 db  44h ; D
.eh_frame:000000000000E0B5                 db  0Eh
.eh_frame:000000000000E0B6                 db  28h ; (
.eh_frame:000000000000E0B7                 db  43h ; C
.eh_frame:000000000000E0B8                 db  0Eh
.eh_frame:000000000000E0B9                 db  20h
.eh_frame:000000000000E0BA                 db  44h ; D
.eh_frame:000000000000E0BB                 db  0Eh
.eh_frame:000000000000E0BC                 db  18h
.eh_frame:000000000000E0BD                 db  42h ; B
.eh_frame:000000000000E0BE                 db  0Eh
.eh_frame:000000000000E0BF                 db  10h
.eh_frame:000000000000E0C0                 db  42h ; B
.eh_frame:000000000000E0C1                 db  0Eh
.eh_frame:000000000000E0C2                 db    8
.eh_frame:000000000000E0C3                 db    0
.eh_frame:000000000000E0C4                 db    0
.eh_frame:000000000000E0C5                 db    0
.eh_frame:000000000000E0C6                 db    0
.eh_frame:000000000000E0C7                 db    0
.eh_frame:000000000000E0C8                 db  34h ; 4
.eh_frame:000000000000E0C9                 db    0
.eh_frame:000000000000E0CA                 db    0
.eh_frame:000000000000E0CB                 db    0
.eh_frame:000000000000E0CC                 db  74h ; t
.eh_frame:000000000000E0CD                 db  18h
.eh_frame:000000000000E0CE                 db    0
.eh_frame:000000000000E0CF                 db    0
.eh_frame:000000000000E0D0                 db  50h ; P
.eh_frame:000000000000E0D1                 db 0C4h
.eh_frame:000000000000E0D2                 db 0FFh
.eh_frame:000000000000E0D3                 db 0FFh
.eh_frame:000000000000E0D4                 db  3Fh ; ?
.eh_frame:000000000000E0D5                 db    0
.eh_frame:000000000000E0D6                 db    0
.eh_frame:000000000000E0D7                 db    0
.eh_frame:000000000000E0D8                 db    0
.eh_frame:000000000000E0D9                 db  42h ; B
.eh_frame:000000000000E0DA                 db  0Eh
.eh_frame:000000000000E0DB                 db  10h
.eh_frame:000000000000E0DC                 db  8Dh
.eh_frame:000000000000E0DD                 db    2
.eh_frame:000000000000E0DE                 db  42h ; B
.eh_frame:000000000000E0DF                 db  0Eh
.eh_frame:000000000000E0E0                 db  18h
.eh_frame:000000000000E0E1                 db  8Ch
.eh_frame:000000000000E0E2                 db    3
.eh_frame:000000000000E0E3                 db  41h ; A
.eh_frame:000000000000E0E4                 db  0Eh
.eh_frame:000000000000E0E5                 db  20h
.eh_frame:000000000000E0E6                 db  86h
.eh_frame:000000000000E0E7                 db    4
.eh_frame:000000000000E0E8                 db  41h ; A
.eh_frame:000000000000E0E9                 db  0Eh
.eh_frame:000000000000E0EA                 db  28h ; (
.eh_frame:000000000000E0EB                 db  83h
.eh_frame:000000000000E0EC                 db    5
.eh_frame:000000000000E0ED                 db  46h ; F
.eh_frame:000000000000E0EE                 db  0Eh
.eh_frame:000000000000E0EF                 db  30h ; 0
.eh_frame:000000000000E0F0                 db  6Ah ; j
.eh_frame:000000000000E0F1                 db  0Eh
.eh_frame:000000000000E0F2                 db  28h ; (
.eh_frame:000000000000E0F3                 db  43h ; C
.eh_frame:000000000000E0F4                 db  0Eh
.eh_frame:000000000000E0F5                 db  20h
.eh_frame:000000000000E0F6                 db  41h ; A
.eh_frame:000000000000E0F7                 db  0Eh
.eh_frame:000000000000E0F8                 db  18h
.eh_frame:000000000000E0F9                 db  42h ; B
.eh_frame:000000000000E0FA                 db  0Eh
.eh_frame:000000000000E0FB                 db  10h
.eh_frame:000000000000E0FC                 db  42h ; B
.eh_frame:000000000000E0FD                 db  0Eh
.eh_frame:000000000000E0FE                 db    8
.eh_frame:000000000000E0FF                 db    0
.eh_frame:000000000000E100                 db  34h ; 4
.eh_frame:000000000000E101                 db    0
.eh_frame:000000000000E102                 db    0
.eh_frame:000000000000E103                 db    0
.eh_frame:000000000000E104                 db 0ACh
.eh_frame:000000000000E105                 db  18h
.eh_frame:000000000000E106                 db    0
.eh_frame:000000000000E107                 db    0
.eh_frame:000000000000E108                 db  58h ; X
.eh_frame:000000000000E109                 db 0C4h
.eh_frame:000000000000E10A                 db 0FFh
.eh_frame:000000000000E10B                 db 0FFh
.eh_frame:000000000000E10C                 db  7Bh ; {
.eh_frame:000000000000E10D                 db    0
.eh_frame:000000000000E10E                 db    0
.eh_frame:000000000000E10F                 db    0
.eh_frame:000000000000E110                 db    0
.eh_frame:000000000000E111                 db  42h ; B
.eh_frame:000000000000E112                 db  0Eh
.eh_frame:000000000000E113                 db  10h
.eh_frame:000000000000E114                 db  8Ch
.eh_frame:000000000000E115                 db    2
.eh_frame:000000000000E116                 db  41h ; A
.eh_frame:000000000000E117                 db  0Eh
.eh_frame:000000000000E118                 db  18h
.eh_frame:000000000000E119                 db  86h
.eh_frame:000000000000E11A                 db    3
.eh_frame:000000000000E11B                 db  41h ; A
.eh_frame:000000000000E11C                 db  0Eh
.eh_frame:000000000000E11D                 db  20h
.eh_frame:000000000000E11E                 db  83h
.eh_frame:000000000000E11F                 db    4
.eh_frame:000000000000E120                 db  7Dh ; }
.eh_frame:000000000000E121                 db  0Ah
.eh_frame:000000000000E122                 db  0Eh
.eh_frame:000000000000E123                 db  18h
.eh_frame:000000000000E124                 db  41h ; A
.eh_frame:000000000000E125                 db  0Eh
.eh_frame:000000000000E126                 db  10h
.eh_frame:000000000000E127                 db  42h ; B
.eh_frame:000000000000E128                 db  0Eh
.eh_frame:000000000000E129                 db    8
.eh_frame:000000000000E12A                 db  44h ; D
.eh_frame:000000000000E12B                 db  0Bh
.eh_frame:000000000000E12C                 db  60h ; `
.eh_frame:000000000000E12D                 db  0Ah
.eh_frame:000000000000E12E                 db  0Eh
.eh_frame:000000000000E12F                 db  18h
.eh_frame:000000000000E130                 db  41h ; A
.eh_frame:000000000000E131                 db  0Eh
.eh_frame:000000000000E132                 db  10h
.eh_frame:000000000000E133                 db  42h ; B
.eh_frame:000000000000E134                 db  0Eh
.eh_frame:000000000000E135                 db    8
.eh_frame:000000000000E136                 db  45h ; E
.eh_frame:000000000000E137                 db  0Bh
.eh_frame:000000000000E138                 db  34h ; 4
.eh_frame:000000000000E139                 db    0
.eh_frame:000000000000E13A                 db    0
.eh_frame:000000000000E13B                 db    0
.eh_frame:000000000000E13C                 db 0E4h
.eh_frame:000000000000E13D                 db  18h
.eh_frame:000000000000E13E                 db    0
.eh_frame:000000000000E13F                 db    0
.eh_frame:000000000000E140                 db 0A0h
.eh_frame:000000000000E141                 db 0C4h
.eh_frame:000000000000E142                 db 0FFh
.eh_frame:000000000000E143                 db 0FFh
.eh_frame:000000000000E144                 db  7Eh ; ~
.eh_frame:000000000000E145                 db    2
.eh_frame:000000000000E146                 db    0
.eh_frame:000000000000E147                 db    0
.eh_frame:000000000000E148                 db    0
.eh_frame:000000000000E149                 db  42h ; B
.eh_frame:000000000000E14A                 db  0Eh
.eh_frame:000000000000E14B                 db  10h
.eh_frame:000000000000E14C                 db  8Ch
.eh_frame:000000000000E14D                 db    2
.eh_frame:000000000000E14E                 db  41h ; A
.eh_frame:000000000000E14F                 db  0Eh
.eh_frame:000000000000E150                 db  18h
.eh_frame:000000000000E151                 db  86h
.eh_frame:000000000000E152                 db    3
.eh_frame:000000000000E153                 db  43h ; C
.eh_frame:000000000000E154                 db  0Eh
.eh_frame:000000000000E155                 db  20h
.eh_frame:000000000000E156                 db  83h
.eh_frame:000000000000E157                 db    4
.eh_frame:000000000000E158                 db  44h ; D
.eh_frame:000000000000E159                 db  0Eh
.eh_frame:000000000000E15A                 db  70h ; p
.eh_frame:000000000000E15B                 db    2
.eh_frame:000000000000E15C                 db 0F0h
.eh_frame:000000000000E15D                 db  0Ah
.eh_frame:000000000000E15E                 db  0Eh
.eh_frame:000000000000E15F                 db  20h
.eh_frame:000000000000E160                 db  41h ; A
.eh_frame:000000000000E161                 db  0Eh
.eh_frame:000000000000E162                 db  18h
.eh_frame:000000000000E163                 db  41h ; A
.eh_frame:000000000000E164                 db  0Eh
.eh_frame:000000000000E165                 db  10h
.eh_frame:000000000000E166                 db  42h ; B
.eh_frame:000000000000E167                 db  0Eh
.eh_frame:000000000000E168                 db    8
.eh_frame:000000000000E169                 db  42h ; B
.eh_frame:000000000000E16A                 db  0Bh
.eh_frame:000000000000E16B                 db    0
.eh_frame:000000000000E16C                 db    0
.eh_frame:000000000000E16D                 db    0
.eh_frame:000000000000E16E                 db    0
.eh_frame:000000000000E16F                 db    0
.eh_frame:000000000000E170                 db  14h
.eh_frame:000000000000E171                 db    0
.eh_frame:000000000000E172                 db    0
.eh_frame:000000000000E173                 db    0
.eh_frame:000000000000E174                 db  1Ch
.eh_frame:000000000000E175                 db  19h
.eh_frame:000000000000E176                 db    0
.eh_frame:000000000000E177                 db    0
.eh_frame:000000000000E178                 db 0E8h
.eh_frame:000000000000E179                 db 0C6h
.eh_frame:000000000000E17A                 db 0FFh
.eh_frame:000000000000E17B                 db 0FFh
.eh_frame:000000000000E17C                 db  0Eh
.eh_frame:000000000000E17D                 db    0
.eh_frame:000000000000E17E                 db    0
.eh_frame:000000000000E17F                 db    0
.eh_frame:000000000000E180                 db    0
.eh_frame:000000000000E181                 db    0
.eh_frame:000000000000E182                 db    0
.eh_frame:000000000000E183                 db    0
.eh_frame:000000000000E184                 db    0
.eh_frame:000000000000E185                 db    0
.eh_frame:000000000000E186                 db    0
.eh_frame:000000000000E187                 db    0
.eh_frame:000000000000E188                 db  44h ; D
.eh_frame:000000000000E189                 db    0
.eh_frame:000000000000E18A                 db    0
.eh_frame:000000000000E18B                 db    0
.eh_frame:000000000000E18C                 db  34h ; 4
.eh_frame:000000000000E18D                 db  19h
.eh_frame:000000000000E18E                 db    0
.eh_frame:000000000000E18F                 db    0
.eh_frame:000000000000E190                 db 0E0h
.eh_frame:000000000000E191                 db 0C6h
.eh_frame:000000000000E192                 db 0FFh
.eh_frame:000000000000E193                 db 0FFh
.eh_frame:000000000000E194                 db  65h ; e
.eh_frame:000000000000E195                 db    0
.eh_frame:000000000000E196                 db    0
.eh_frame:000000000000E197                 db    0
.eh_frame:000000000000E198                 db    0
.eh_frame:000000000000E199                 db  42h ; B
.eh_frame:000000000000E19A                 db  0Eh
.eh_frame:000000000000E19B                 db  10h
.eh_frame:000000000000E19C                 db  8Fh
.eh_frame:000000000000E19D                 db    2
.eh_frame:000000000000E19E                 db  42h ; B
.eh_frame:000000000000E19F                 db  0Eh
.eh_frame:000000000000E1A0                 db  18h
.eh_frame:000000000000E1A1                 db  8Eh
.eh_frame:000000000000E1A2                 db    3
.eh_frame:000000000000E1A3                 db  45h ; E
.eh_frame:000000000000E1A4                 db  0Eh
.eh_frame:000000000000E1A5                 db  20h
.eh_frame:000000000000E1A6                 db  8Dh
.eh_frame:000000000000E1A7                 db    4
.eh_frame:000000000000E1A8                 db  42h ; B
.eh_frame:000000000000E1A9                 db  0Eh
.eh_frame:000000000000E1AA                 db  28h ; (
.eh_frame:000000000000E1AB                 db  8Ch
.eh_frame:000000000000E1AC                 db    5
.eh_frame:000000000000E1AD                 db  48h ; H
.eh_frame:000000000000E1AE                 db  0Eh
.eh_frame:000000000000E1AF                 db  30h ; 0
.eh_frame:000000000000E1B0                 db  86h
.eh_frame:000000000000E1B1                 db    6
.eh_frame:000000000000E1B2                 db  48h ; H
.eh_frame:000000000000E1B3                 db  0Eh
.eh_frame:000000000000E1B4                 db  38h ; 8
.eh_frame:000000000000E1B5                 db  83h
.eh_frame:000000000000E1B6                 db    7
.eh_frame:000000000000E1B7                 db  4Dh ; M
.eh_frame:000000000000E1B8                 db  0Eh
.eh_frame:000000000000E1B9                 db  40h ; @
.eh_frame:000000000000E1BA                 db  72h ; r
.eh_frame:000000000000E1BB                 db  0Eh
.eh_frame:000000000000E1BC                 db  38h ; 8
.eh_frame:000000000000E1BD                 db  41h ; A
.eh_frame:000000000000E1BE                 db  0Eh
.eh_frame:000000000000E1BF                 db  30h ; 0
.eh_frame:000000000000E1C0                 db  41h ; A
.eh_frame:000000000000E1C1                 db  0Eh
.eh_frame:000000000000E1C2                 db  28h ; (
.eh_frame:000000000000E1C3                 db  42h ; B
.eh_frame:000000000000E1C4                 db  0Eh
.eh_frame:000000000000E1C5                 db  20h
.eh_frame:000000000000E1C6                 db  42h ; B
.eh_frame:000000000000E1C7                 db  0Eh
.eh_frame:000000000000E1C8                 db  18h
.eh_frame:000000000000E1C9                 db  42h ; B
.eh_frame:000000000000E1CA                 db  0Eh
.eh_frame:000000000000E1CB                 db  10h
.eh_frame:000000000000E1CC                 db  42h ; B
.eh_frame:000000000000E1CD                 db  0Eh
.eh_frame:000000000000E1CE                 db    8
.eh_frame:000000000000E1CF                 db    0
.eh_frame:000000000000E1D0                 db  14h
.eh_frame:000000000000E1D1                 db    0
.eh_frame:000000000000E1D2                 db    0
.eh_frame:000000000000E1D3                 db    0
.eh_frame:000000000000E1D4                 db  7Ch ; |
.eh_frame:000000000000E1D5                 db  19h
.eh_frame:000000000000E1D6                 db    0
.eh_frame:000000000000E1D7                 db    0
.eh_frame:000000000000E1D8                 db    8
.eh_frame:000000000000E1D9                 db 0C7h
.eh_frame:000000000000E1DA                 db 0FFh
.eh_frame:000000000000E1DB                 db 0FFh
.eh_frame:000000000000E1DC                 db    2
.eh_frame:000000000000E1DD                 db    0
.eh_frame:000000000000E1DE                 db    0
.eh_frame:000000000000E1DF                 db    0
.eh_frame:000000000000E1E0                 db    0
.eh_frame:000000000000E1E1                 db    0
.eh_frame:000000000000E1E2                 db    0
.eh_frame:000000000000E1E3                 db    0
.eh_frame:000000000000E1E4                 db    0
.eh_frame:000000000000E1E5                 db    0
.eh_frame:000000000000E1E6                 db    0
.eh_frame:000000000000E1E7                 db    0
.eh_frame:000000000000E1E8                 db  10h
.eh_frame:000000000000E1E9                 db    0
.eh_frame:000000000000E1EA                 db    0
.eh_frame:000000000000E1EB                 db    0
.eh_frame:000000000000E1EC                 db  94h
.eh_frame:000000000000E1ED                 db  19h
.eh_frame:000000000000E1EE                 db    0
.eh_frame:000000000000E1EF                 db    0
.eh_frame:000000000000E1F0                 db    0
.eh_frame:000000000000E1F1                 db 0C7h
.eh_frame:000000000000E1F2                 db 0FFh
.eh_frame:000000000000E1F3                 db 0FFh
.eh_frame:000000000000E1F4                 db  0Eh
.eh_frame:000000000000E1F5                 db    0
.eh_frame:000000000000E1F6                 db    0
.eh_frame:000000000000E1F7                 db    0
.eh_frame:000000000000E1F8                 db    0
.eh_frame:000000000000E1F9                 db    0
.eh_frame:000000000000E1FA                 db    0
.eh_frame:000000000000E1FB                 db    0
.eh_frame:000000000000E1FC __FRAME_END__   db    0
.eh_frame:000000000000E1FD                 db    0
.eh_frame:000000000000E1FE                 db    0
.eh_frame:000000000000E1FF                 db    0
.eh_frame:000000000000E1FF _eh_frame       ends
.eh_frame:000000000000E1FF
.init_array:000000000020E990 ; ELF Initialization Function Table
.init_array:000000000020E990 ; ===========================================================================
.init_array:000000000020E990
.init_array:000000000020E990 ; Segment type: Pure data
.init_array:000000000020E990 ; Segment permissions: Read/Write
.init_array:000000000020E990 _init_array     segment qword public 'DATA' use64
.init_array:000000000020E990                 assume cs:_init_array
.init_array:000000000020E990                 ;org 20E990h
.init_array:000000000020E990 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020E990                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020E990                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020E990 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020E990
.fini_array:000000000020E998 ; ELF Termination Function Table
.fini_array:000000000020E998 ; ===========================================================================
.fini_array:000000000020E998
.fini_array:000000000020E998 ; Segment type: Pure data
.fini_array:000000000020E998 ; Segment permissions: Read/Write
.fini_array:000000000020E998 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020E998                 assume cs:_fini_array
.fini_array:000000000020E998                 ;org 20E998h
.fini_array:000000000020E998 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020E998                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020E998 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020E998
.data.rel.ro:000000000020E9A0 ; ===========================================================================
.data.rel.ro:000000000020E9A0
.data.rel.ro:000000000020E9A0 ; Segment type: Pure data
.data.rel.ro:000000000020E9A0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020E9A0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020E9A0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020E9A0                 ;org 20E9A0h
.data.rel.ro:000000000020E9A0 interactive_args dq offset aNever       ; DATA XREF: main+17F↑o
.data.rel.ro:000000000020E9A0                                         ; "never"
.data.rel.ro:000000000020E9A8                 dq offset aNo           ; "no"
.data.rel.ro:000000000020E9B0                 dq offset aNone         ; "none"
.data.rel.ro:000000000020E9B8                 dq offset aOnce         ; "once"
.data.rel.ro:000000000020E9C0                 dq offset aShellEscapeAlw+0Dh ; "always"
.data.rel.ro:000000000020E9C8                 dq offset aYes          ; "yes"
.data.rel.ro:000000000020E9D0                 align 20h
.data.rel.ro:000000000020E9E0 ; struct option long_opts
.data.rel.ro:000000000020E9E0 long_opts       dq offset aForce        ; name
.data.rel.ro:000000000020E9E0                                         ; DATA XREF: main:loc_1E70↑o
.data.rel.ro:000000000020E9E0                 dd 0                    ; has_arg ; "force"
.data.rel.ro:000000000020E9E0                 db 4 dup(0)
.data.rel.ro:000000000020E9E0                 dq 0                    ; flag
.data.rel.ro:000000000020E9E0                 dd 66h                  ; val
.data.rel.ro:000000000020E9E0                 db 4 dup(0)
.data.rel.ro:000000000020EA00                 dq offset aInteractive+2 ; "interactive"
.data.rel.ro:000000000020EA08                 db    2
.data.rel.ro:000000000020EA09                 db    0
.data.rel.ro:000000000020EA0A                 db    0
.data.rel.ro:000000000020EA0B                 db    0
.data.rel.ro:000000000020EA0C                 db    0
.data.rel.ro:000000000020EA0D                 db    0
.data.rel.ro:000000000020EA0E                 db    0
.data.rel.ro:000000000020EA0F                 db    0
.data.rel.ro:000000000020EA10                 db    0
.data.rel.ro:000000000020EA11                 db    0
.data.rel.ro:000000000020EA12                 db    0
.data.rel.ro:000000000020EA13                 db    0
.data.rel.ro:000000000020EA14                 db    0
.data.rel.ro:000000000020EA15                 db    0
.data.rel.ro:000000000020EA16                 db    0
.data.rel.ro:000000000020EA17                 db    0
.data.rel.ro:000000000020EA18                 db  80h
.data.rel.ro:000000000020EA19                 db    0
.data.rel.ro:000000000020EA1A                 db    0
.data.rel.ro:000000000020EA1B                 db    0
.data.rel.ro:000000000020EA1C                 db    0
.data.rel.ro:000000000020EA1D                 db    0
.data.rel.ro:000000000020EA1E                 db    0
.data.rel.ro:000000000020EA1F                 db    0
.data.rel.ro:000000000020EA20                 dq offset aOneFileSystem ; "one-file-system"
.data.rel.ro:000000000020EA28                 db    0
.data.rel.ro:000000000020EA29                 db    0
.data.rel.ro:000000000020EA2A                 db    0
.data.rel.ro:000000000020EA2B                 db    0
.data.rel.ro:000000000020EA2C                 db    0
.data.rel.ro:000000000020EA2D                 db    0
.data.rel.ro:000000000020EA2E                 db    0
.data.rel.ro:000000000020EA2F                 db    0
.data.rel.ro:000000000020EA30                 db    0
.data.rel.ro:000000000020EA31                 db    0
.data.rel.ro:000000000020EA32                 db    0
.data.rel.ro:000000000020EA33                 db    0
.data.rel.ro:000000000020EA34                 db    0
.data.rel.ro:000000000020EA35                 db    0
.data.rel.ro:000000000020EA36                 db    0
.data.rel.ro:000000000020EA37                 db    0
.data.rel.ro:000000000020EA38                 db  81h
.data.rel.ro:000000000020EA39                 db    0
.data.rel.ro:000000000020EA3A                 db    0
.data.rel.ro:000000000020EA3B                 db    0
.data.rel.ro:000000000020EA3C                 db    0
.data.rel.ro:000000000020EA3D                 db    0
.data.rel.ro:000000000020EA3E                 db    0
.data.rel.ro:000000000020EA3F                 db    0
.data.rel.ro:000000000020EA40                 dq offset aNoPreserveRoot+2 ; "no-preserve-root"
.data.rel.ro:000000000020EA48                 db    0
.data.rel.ro:000000000020EA49                 db    0
.data.rel.ro:000000000020EA4A                 db    0
.data.rel.ro:000000000020EA4B                 db    0
.data.rel.ro:000000000020EA4C                 db    0
.data.rel.ro:000000000020EA4D                 db    0
.data.rel.ro:000000000020EA4E                 db    0
.data.rel.ro:000000000020EA4F                 db    0
.data.rel.ro:000000000020EA50                 db    0
.data.rel.ro:000000000020EA51                 db    0
.data.rel.ro:000000000020EA52                 db    0
.data.rel.ro:000000000020EA53                 db    0
.data.rel.ro:000000000020EA54                 db    0
.data.rel.ro:000000000020EA55                 db    0
.data.rel.ro:000000000020EA56                 db    0
.data.rel.ro:000000000020EA57                 db    0
.data.rel.ro:000000000020EA58                 db  82h
.data.rel.ro:000000000020EA59                 db    0
.data.rel.ro:000000000020EA5A                 db    0
.data.rel.ro:000000000020EA5B                 db    0
.data.rel.ro:000000000020EA5C                 db    0
.data.rel.ro:000000000020EA5D                 db    0
.data.rel.ro:000000000020EA5E                 db    0
.data.rel.ro:000000000020EA5F                 db    0
.data.rel.ro:000000000020EA60                 dq offset aNoPreserveRoot+5 ; "preserve-root"
.data.rel.ro:000000000020EA68                 db    2
.data.rel.ro:000000000020EA69                 db    0
.data.rel.ro:000000000020EA6A                 db    0
.data.rel.ro:000000000020EA6B                 db    0
.data.rel.ro:000000000020EA6C                 db    0
.data.rel.ro:000000000020EA6D                 db    0
.data.rel.ro:000000000020EA6E                 db    0
.data.rel.ro:000000000020EA6F                 db    0
.data.rel.ro:000000000020EA70                 db    0
.data.rel.ro:000000000020EA71                 db    0
.data.rel.ro:000000000020EA72                 db    0
.data.rel.ro:000000000020EA73                 db    0
.data.rel.ro:000000000020EA74                 db    0
.data.rel.ro:000000000020EA75                 db    0
.data.rel.ro:000000000020EA76                 db    0
.data.rel.ro:000000000020EA77                 db    0
.data.rel.ro:000000000020EA78                 db  83h
.data.rel.ro:000000000020EA79                 db    0
.data.rel.ro:000000000020EA7A                 db    0
.data.rel.ro:000000000020EA7B                 db    0
.data.rel.ro:000000000020EA7C                 db    0
.data.rel.ro:000000000020EA7D                 db    0
.data.rel.ro:000000000020EA7E                 db    0
.data.rel.ro:000000000020EA7F                 db    0
.data.rel.ro:000000000020EA80                 dq offset aPresumeInputTt ; "-presume-input-tty"
.data.rel.ro:000000000020EA88                 db    0
.data.rel.ro:000000000020EA89                 db    0
.data.rel.ro:000000000020EA8A                 db    0
.data.rel.ro:000000000020EA8B                 db    0
.data.rel.ro:000000000020EA8C                 db    0
.data.rel.ro:000000000020EA8D                 db    0
.data.rel.ro:000000000020EA8E                 db    0
.data.rel.ro:000000000020EA8F                 db    0
.data.rel.ro:000000000020EA90                 db    0
.data.rel.ro:000000000020EA91                 db    0
.data.rel.ro:000000000020EA92                 db    0
.data.rel.ro:000000000020EA93                 db    0
.data.rel.ro:000000000020EA94                 db    0
.data.rel.ro:000000000020EA95                 db    0
.data.rel.ro:000000000020EA96                 db    0
.data.rel.ro:000000000020EA97                 db    0
.data.rel.ro:000000000020EA98                 db  84h
.data.rel.ro:000000000020EA99                 db    0
.data.rel.ro:000000000020EA9A                 db    0
.data.rel.ro:000000000020EA9B                 db    0
.data.rel.ro:000000000020EA9C                 db    0
.data.rel.ro:000000000020EA9D                 db    0
.data.rel.ro:000000000020EA9E                 db    0
.data.rel.ro:000000000020EA9F                 db    0
.data.rel.ro:000000000020EAA0                 dq offset aRecursive    ; "recursive"
.data.rel.ro:000000000020EAA8                 db    0
.data.rel.ro:000000000020EAA9                 db    0
.data.rel.ro:000000000020EAAA                 db    0
.data.rel.ro:000000000020EAAB                 db    0
.data.rel.ro:000000000020EAAC                 db    0
.data.rel.ro:000000000020EAAD                 db    0
.data.rel.ro:000000000020EAAE                 db    0
.data.rel.ro:000000000020EAAF                 db    0
.data.rel.ro:000000000020EAB0                 db    0
.data.rel.ro:000000000020EAB1                 db    0
.data.rel.ro:000000000020EAB2                 db    0
.data.rel.ro:000000000020EAB3                 db    0
.data.rel.ro:000000000020EAB4                 db    0
.data.rel.ro:000000000020EAB5                 db    0
.data.rel.ro:000000000020EAB6                 db    0
.data.rel.ro:000000000020EAB7                 db    0
.data.rel.ro:000000000020EAB8                 db  72h ; r
.data.rel.ro:000000000020EAB9                 db    0
.data.rel.ro:000000000020EABA                 db    0
.data.rel.ro:000000000020EABB                 db    0
.data.rel.ro:000000000020EABC                 db    0
.data.rel.ro:000000000020EABD                 db    0
.data.rel.ro:000000000020EABE                 db    0
.data.rel.ro:000000000020EABF                 db    0
.data.rel.ro:000000000020EAC0                 dq offset aDir          ; "dir"
.data.rel.ro:000000000020EAC8                 db    0
.data.rel.ro:000000000020EAC9                 db    0
.data.rel.ro:000000000020EACA                 db    0
.data.rel.ro:000000000020EACB                 db    0
.data.rel.ro:000000000020EACC                 db    0
.data.rel.ro:000000000020EACD                 db    0
.data.rel.ro:000000000020EACE                 db    0
.data.rel.ro:000000000020EACF                 db    0
.data.rel.ro:000000000020EAD0                 db    0
.data.rel.ro:000000000020EAD1                 db    0
.data.rel.ro:000000000020EAD2                 db    0
.data.rel.ro:000000000020EAD3                 db    0
.data.rel.ro:000000000020EAD4                 db    0
.data.rel.ro:000000000020EAD5                 db    0
.data.rel.ro:000000000020EAD6                 db    0
.data.rel.ro:000000000020EAD7                 db    0
.data.rel.ro:000000000020EAD8                 db  64h ; d
.data.rel.ro:000000000020EAD9                 db    0
.data.rel.ro:000000000020EADA                 db    0
.data.rel.ro:000000000020EADB                 db    0
.data.rel.ro:000000000020EADC                 db    0
.data.rel.ro:000000000020EADD                 db    0
.data.rel.ro:000000000020EADE                 db    0
.data.rel.ro:000000000020EADF                 db    0
.data.rel.ro:000000000020EAE0                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020EAE8                 db    0
.data.rel.ro:000000000020EAE9                 db    0
.data.rel.ro:000000000020EAEA                 db    0
.data.rel.ro:000000000020EAEB                 db    0
.data.rel.ro:000000000020EAEC                 db    0
.data.rel.ro:000000000020EAED                 db    0
.data.rel.ro:000000000020EAEE                 db    0
.data.rel.ro:000000000020EAEF                 db    0
.data.rel.ro:000000000020EAF0                 db    0
.data.rel.ro:000000000020EAF1                 db    0
.data.rel.ro:000000000020EAF2                 db    0
.data.rel.ro:000000000020EAF3                 db    0
.data.rel.ro:000000000020EAF4                 db    0
.data.rel.ro:000000000020EAF5                 db    0
.data.rel.ro:000000000020EAF6                 db    0
.data.rel.ro:000000000020EAF7                 db    0
.data.rel.ro:000000000020EAF8                 db  76h ; v
.data.rel.ro:000000000020EAF9                 db    0
.data.rel.ro:000000000020EAFA                 db    0
.data.rel.ro:000000000020EAFB                 db    0
.data.rel.ro:000000000020EAFC                 db    0
.data.rel.ro:000000000020EAFD                 db    0
.data.rel.ro:000000000020EAFE                 db    0
.data.rel.ro:000000000020EAFF                 db    0
.data.rel.ro:000000000020EB00                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020EB08                 db    0
.data.rel.ro:000000000020EB09                 db    0
.data.rel.ro:000000000020EB0A                 db    0
.data.rel.ro:000000000020EB0B                 db    0
.data.rel.ro:000000000020EB0C                 db    0
.data.rel.ro:000000000020EB0D                 db    0
.data.rel.ro:000000000020EB0E                 db    0
.data.rel.ro:000000000020EB0F                 db    0
.data.rel.ro:000000000020EB10                 db    0
.data.rel.ro:000000000020EB11                 db    0
.data.rel.ro:000000000020EB12                 db    0
.data.rel.ro:000000000020EB13                 db    0
.data.rel.ro:000000000020EB14                 db    0
.data.rel.ro:000000000020EB15                 db    0
.data.rel.ro:000000000020EB16                 db    0
.data.rel.ro:000000000020EB17                 db    0
.data.rel.ro:000000000020EB18                 db  7Eh ; ~
.data.rel.ro:000000000020EB19                 db 0FFh
.data.rel.ro:000000000020EB1A                 db 0FFh
.data.rel.ro:000000000020EB1B                 db 0FFh
.data.rel.ro:000000000020EB1C                 db    0
.data.rel.ro:000000000020EB1D                 db    0
.data.rel.ro:000000000020EB1E                 db    0
.data.rel.ro:000000000020EB1F                 db    0
.data.rel.ro:000000000020EB20                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020EB28                 db    0
.data.rel.ro:000000000020EB29                 db    0
.data.rel.ro:000000000020EB2A                 db    0
.data.rel.ro:000000000020EB2B                 db    0
.data.rel.ro:000000000020EB2C                 db    0
.data.rel.ro:000000000020EB2D                 db    0
.data.rel.ro:000000000020EB2E                 db    0
.data.rel.ro:000000000020EB2F                 db    0
.data.rel.ro:000000000020EB30                 db    0
.data.rel.ro:000000000020EB31                 db    0
.data.rel.ro:000000000020EB32                 db    0
.data.rel.ro:000000000020EB33                 db    0
.data.rel.ro:000000000020EB34                 db    0
.data.rel.ro:000000000020EB35                 db    0
.data.rel.ro:000000000020EB36                 db    0
.data.rel.ro:000000000020EB37                 db    0
.data.rel.ro:000000000020EB38                 db  7Dh ; }
.data.rel.ro:000000000020EB39                 db 0FFh
.data.rel.ro:000000000020EB3A                 db 0FFh
.data.rel.ro:000000000020EB3B                 db 0FFh
.data.rel.ro:000000000020EB3C                 db    0
.data.rel.ro:000000000020EB3D                 db    0
.data.rel.ro:000000000020EB3E                 db    0
.data.rel.ro:000000000020EB3F                 db    0
.data.rel.ro:000000000020EB40                 db    0
.data.rel.ro:000000000020EB41                 db    0
.data.rel.ro:000000000020EB42                 db    0
.data.rel.ro:000000000020EB43                 db    0
.data.rel.ro:000000000020EB44                 db    0
.data.rel.ro:000000000020EB45                 db    0
.data.rel.ro:000000000020EB46                 db    0
.data.rel.ro:000000000020EB47                 db    0
.data.rel.ro:000000000020EB48                 db    0
.data.rel.ro:000000000020EB49                 db    0
.data.rel.ro:000000000020EB4A                 db    0
.data.rel.ro:000000000020EB4B                 db    0
.data.rel.ro:000000000020EB4C                 db    0
.data.rel.ro:000000000020EB4D                 db    0
.data.rel.ro:000000000020EB4E                 db    0
.data.rel.ro:000000000020EB4F                 db    0
.data.rel.ro:000000000020EB50                 db    0
.data.rel.ro:000000000020EB51                 db    0
.data.rel.ro:000000000020EB52                 db    0
.data.rel.ro:000000000020EB53                 db    0
.data.rel.ro:000000000020EB54                 db    0
.data.rel.ro:000000000020EB55                 db    0
.data.rel.ro:000000000020EB56                 db    0
.data.rel.ro:000000000020EB57                 db    0
.data.rel.ro:000000000020EB58                 db    0
.data.rel.ro:000000000020EB59                 db    0
.data.rel.ro:000000000020EB5A                 db    0
.data.rel.ro:000000000020EB5B                 db    0
.data.rel.ro:000000000020EB5C                 db    0
.data.rel.ro:000000000020EB5D                 db    0
.data.rel.ro:000000000020EB5E                 db    0
.data.rel.ro:000000000020EB5F                 db    0
.data.rel.ro:000000000020EB60                 public quoting_style_args
.data.rel.ro:000000000020EB60 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020EB68                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020EB70                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020EB78                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020EB80                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020EB88                 dq offset file+19h      ; "c"
.data.rel.ro:000000000020EB90                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020EB98                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020EBA0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020EBA8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020EBB0                 db    0
.data.rel.ro:000000000020EBB1                 db    0
.data.rel.ro:000000000020EBB2                 db    0
.data.rel.ro:000000000020EBB3                 db    0
.data.rel.ro:000000000020EBB4                 db    0
.data.rel.ro:000000000020EBB5                 db    0
.data.rel.ro:000000000020EBB6                 db    0
.data.rel.ro:000000000020EBB7                 db    0
.data.rel.ro:000000000020EBB7 _data_rel_ro    ends
.data.rel.ro:000000000020EBB7
LOAD:000000000020EBB8 ; ELF Dynamic Information
LOAD:000000000020EBB8 ; ===========================================================================
LOAD:000000000020EBB8
LOAD:000000000020EBB8 ; Segment type: Pure data
LOAD:000000000020EBB8 ; Segment permissions: Read/Write
LOAD:000000000020EBB8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020EBB8                 assume cs:LOAD
LOAD:000000000020EBB8                 ;org 20EBB8h
LOAD:000000000020EBB8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020EBB8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020EBB8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020EBC8                 Elf64_Dyn <0Ch, 1960h>  ; DT_INIT
LOAD:000000000020EBD8                 Elf64_Dyn <0Dh, 0A900h> ; DT_FINI
LOAD:000000000020EBE8                 Elf64_Dyn <19h, 20E990h> ; DT_INIT_ARRAY
LOAD:000000000020EBF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020EC08                 Elf64_Dyn <1Ah, 20E998h> ; DT_FINI_ARRAY
LOAD:000000000020EC18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020EC28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020EC38                 Elf64_Dyn <5, 0A78h>    ; DT_STRTAB
LOAD:000000000020EC48                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020EC58                 Elf64_Dyn <0Ah, 362h>   ; DT_STRSZ
LOAD:000000000020EC68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020EC78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020EC88                 Elf64_Dyn <3, 20EDA8h>  ; DT_PLTGOT
LOAD:000000000020EC98                 Elf64_Dyn <2, 618h>     ; DT_PLTRELSZ
LOAD:000000000020ECA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020ECB8                 Elf64_Dyn <17h, 1348h>  ; DT_JMPREL
LOAD:000000000020ECC8                 Elf64_Dyn <7, 0EE0h>    ; DT_RELA
LOAD:000000000020ECD8                 Elf64_Dyn <8, 468h>     ; DT_RELASZ
LOAD:000000000020ECE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020ECF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020ED08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020ED18                 Elf64_Dyn <6FFFFFFEh, 0E80h> ; DT_VERNEED
LOAD:000000000020ED28                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020ED38                 Elf64_Dyn <6FFFFFF0h, 0DDAh> ; DT_VERSYM
LOAD:000000000020ED48                 Elf64_Dyn <6FFFFFF9h, 22h> ; DT_RELACOUNT
LOAD:000000000020ED58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ED68                 db    0
LOAD:000000000020ED69                 db    0
LOAD:000000000020ED6A                 db    0
LOAD:000000000020ED6B                 db    0
LOAD:000000000020ED6C                 db    0
LOAD:000000000020ED6D                 db    0
LOAD:000000000020ED6E                 db    0
LOAD:000000000020ED6F                 db    0
LOAD:000000000020ED70                 db    0
LOAD:000000000020ED71                 db    0
LOAD:000000000020ED72                 db    0
LOAD:000000000020ED73                 db    0
LOAD:000000000020ED74                 db    0
LOAD:000000000020ED75                 db    0
LOAD:000000000020ED76                 db    0
LOAD:000000000020ED77                 db    0
LOAD:000000000020ED78                 db    0
LOAD:000000000020ED79                 db    0
LOAD:000000000020ED7A                 db    0
LOAD:000000000020ED7B                 db    0
LOAD:000000000020ED7C                 db    0
LOAD:000000000020ED7D                 db    0
LOAD:000000000020ED7E                 db    0
LOAD:000000000020ED7F                 db    0
LOAD:000000000020ED80                 db    0
LOAD:000000000020ED81                 db    0
LOAD:000000000020ED82                 db    0
LOAD:000000000020ED83                 db    0
LOAD:000000000020ED84                 db    0
LOAD:000000000020ED85                 db    0
LOAD:000000000020ED86                 db    0
LOAD:000000000020ED87                 db    0
LOAD:000000000020ED88                 db    0
LOAD:000000000020ED89                 db    0
LOAD:000000000020ED8A                 db    0
LOAD:000000000020ED8B                 db    0
LOAD:000000000020ED8C                 db    0
LOAD:000000000020ED8D                 db    0
LOAD:000000000020ED8E                 db    0
LOAD:000000000020ED8F                 db    0
LOAD:000000000020ED90                 db    0
LOAD:000000000020ED91                 db    0
LOAD:000000000020ED92                 db    0
LOAD:000000000020ED93                 db    0
LOAD:000000000020ED94                 db    0
LOAD:000000000020ED95                 db    0
LOAD:000000000020ED96                 db    0
LOAD:000000000020ED97                 db    0
LOAD:000000000020ED98                 db    0
LOAD:000000000020ED99                 db    0
LOAD:000000000020ED9A                 db    0
LOAD:000000000020ED9B                 db    0
LOAD:000000000020ED9C                 db    0
LOAD:000000000020ED9D                 db    0
LOAD:000000000020ED9E                 db    0
LOAD:000000000020ED9F                 db    0
LOAD:000000000020EDA0                 db    0
LOAD:000000000020EDA1                 db    0
LOAD:000000000020EDA2                 db    0
LOAD:000000000020EDA3                 db    0
LOAD:000000000020EDA4                 db    0
LOAD:000000000020EDA5                 db    0
LOAD:000000000020EDA6                 db    0
LOAD:000000000020EDA7                 db    0
LOAD:000000000020EDA7 LOAD            ends
LOAD:000000000020EDA7
.got:000000000020EDA8 ; ===========================================================================
.got:000000000020EDA8
.got:000000000020EDA8 ; Segment type: Pure data
.got:000000000020EDA8 ; Segment permissions: Read/Write
.got:000000000020EDA8 _got            segment qword public 'DATA' use64
.got:000000000020EDA8                 assume cs:_got
.got:000000000020EDA8                 ;org 20EDA8h
.got:000000000020EDA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020EDB0 qword_20EDB0    dq 0                    ; DATA XREF: sub_1980↑r
.got:000000000020EDB8 qword_20EDB8    dq 0                    ; DATA XREF: sub_1980+6↑r
.got:000000000020EDC0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020EDC8 __errno_location_ptr dq offset __errno_location
.got:000000000020EDC8                                         ; DATA XREF: ___errno_location↑r
.got:000000000020EDD0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020EDD8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020EDE0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020EDE8 unlinkat_ptr    dq offset unlinkat      ; DATA XREF: _unlinkat↑r
.got:000000000020EDF0 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000020EDF8 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000020EE00 faccessat_ptr   dq offset faccessat     ; DATA XREF: _faccessat↑r
.got:000000000020EE08 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020EE10 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020EE18 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020EE20 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020EE20                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020EE28 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020EE30 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020EE30                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020EE38 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020EE40 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020EE48 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000020EE50 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020EE50                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020EE58 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020EE60 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020EE68 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020EE70 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020EE78 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020EE80 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020EE88 __assert_fail_ptr dq offset __assert_fail
.got:000000000020EE88                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020EE90 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020EE98 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:000000000020EEA0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020EEA8 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000020EEB0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020EEB8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020EEB8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020EEC0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020EEC8 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:000000000020EED0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020EED8 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000020EEE0 rpmatch_ptr     dq offset rpmatch       ; DATA XREF: _rpmatch↑r
.got:000000000020EEE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020EEF0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020EEF8 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020EF00 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000020EF08 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020EF10 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020EF18 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020EF20 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020EF28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020EF30 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000020EF38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020EF40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020EF48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020EF50 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000020EF58 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020EF60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020EF68 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020EF70 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020EF78 dcngettext_ptr  dq offset dcngettext    ; DATA XREF: _dcngettext↑r
.got:000000000020EF80 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000020EF88 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000020EF90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020EF98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020EFA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020EFA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020EFA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020EFB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020EFB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020EFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020EFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020EFC8 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000020EFC8                                         ; filesystem_type:loc_6EA0↑r ...
.got:000000000020EFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020EFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020EFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020EFD8                                         ; DATA XREF: start+24↑r
.got:000000000020EFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020EFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020EFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020EFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020EFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020EFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020EFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020EFF0 _got            ends
.got:000000000020EFF0
LOAD:000000000020EFF8 ; ===========================================================================
LOAD:000000000020EFF8
LOAD:000000000020EFF8 ; Segment type: Pure data
LOAD:000000000020EFF8 ; Segment permissions: Read/Write
LOAD:000000000020EFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020EFF8                 assume cs:LOAD
LOAD:000000000020EFF8                 ;org 20EFF8h
LOAD:000000000020EFF8                 align 20h
LOAD:000000000020EFF8 LOAD            ends
LOAD:000000000020EFF8
.data:000000000020F000 ; ===========================================================================
.data:000000000020F000
.data:000000000020F000 ; Segment type: Pure data
.data:000000000020F000 ; Segment permissions: Read/Write
.data:000000000020F000 _data           segment align_32 public 'DATA' use64
.data:000000000020F000                 assume cs:_data
.data:000000000020F000                 ;org 20F000h
.data:000000000020F000                 public __data_start ; weak
.data:000000000020F000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020F000                                         ; data_start
.data:000000000020F001                 db    0
.data:000000000020F002                 db    0
.data:000000000020F003                 db    0
.data:000000000020F004                 db    0
.data:000000000020F005                 db    0
.data:000000000020F006                 db    0
.data:000000000020F007                 db    0
.data:000000000020F008                 public __dso_handle
.data:000000000020F008 ; void *_dso_handle
.data:000000000020F008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020F008                                         ; atexit↑r ...
.data:000000000020F010                 public Version
.data:000000000020F010 Version         dq offset a831          ; DATA XREF: main+20F↑r
.data:000000000020F010                                         ; "8.31"
.data:000000000020F018                 public argmatch_die
.data:000000000020F018 argmatch_die    dq offset __argmatch_die
.data:000000000020F018                                         ; DATA XREF: main+178↑r
.data:000000000020F020                 public exit_failure
.data:000000000020F020 ; int exit_failure
.data:000000000020F020 exit_failure    dd 1                    ; DATA XREF: close_stdin+A8↑r
.data:000000000020F020                                         ; close_stdout:loc_3E42↑r ...
.data:000000000020F024                 align 20h
.data:000000000020F040                 public quote_quoting_options
.data:000000000020F040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020F040                                         ; quote_mem↑o ...
.data:000000000020F041                 db    0
.data:000000000020F042                 db    0
.data:000000000020F043                 db    0
.data:000000000020F044                 db    0
.data:000000000020F045                 db    0
.data:000000000020F046                 db    0
.data:000000000020F047                 db    0
.data:000000000020F048                 db    0
.data:000000000020F049                 db    0
.data:000000000020F04A                 db    0
.data:000000000020F04B                 db    0
.data:000000000020F04C                 db    0
.data:000000000020F04D                 db    0
.data:000000000020F04E                 db    0
.data:000000000020F04F                 db    0
.data:000000000020F050                 db    0
.data:000000000020F051                 db    0
.data:000000000020F052                 db    0
.data:000000000020F053                 db    0
.data:000000000020F054                 db    0
.data:000000000020F055                 db    0
.data:000000000020F056                 db    0
.data:000000000020F057                 db    0
.data:000000000020F058                 db    0
.data:000000000020F059                 db    0
.data:000000000020F05A                 db    0
.data:000000000020F05B                 db    0
.data:000000000020F05C                 db    0
.data:000000000020F05D                 db    0
.data:000000000020F05E                 db    0
.data:000000000020F05F                 db    0
.data:000000000020F060                 db    0
.data:000000000020F061                 db    0
.data:000000000020F062                 db    0
.data:000000000020F063                 db    0
.data:000000000020F064                 db    0
.data:000000000020F065                 db    0
.data:000000000020F066                 db    0
.data:000000000020F067                 db    0
.data:000000000020F068                 db    0
.data:000000000020F069                 db    0
.data:000000000020F06A                 db    0
.data:000000000020F06B                 db    0
.data:000000000020F06C                 db    0
.data:000000000020F06D                 db    0
.data:000000000020F06E                 db    0
.data:000000000020F06F                 db    0
.data:000000000020F070                 db    0
.data:000000000020F071                 db    0
.data:000000000020F072                 db    0
.data:000000000020F073                 db    0
.data:000000000020F074                 db    0
.data:000000000020F075                 db    0
.data:000000000020F076                 db    0
.data:000000000020F077                 db    0
.data:000000000020F078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020F078                                         ; quotearg_n_options:loc_557D↑r ...
.data:000000000020F07C                 align 20h
.data:000000000020F080 ; void *slotvec
.data:000000000020F080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020F080                                         ; quotearg_n_options+76↑w ...
.data:000000000020F088                 align 10h
.data:000000000020F090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020F090                                         ; quotearg_n_options+187↑r ...
.data:000000000020F098 off_20F098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020F098 _data           ends
.data:000000000020F098
.bss:000000000020F0A0 ; ===========================================================================
.bss:000000000020F0A0
.bss:000000000020F0A0 ; Segment type: Uninitialized
.bss:000000000020F0A0 ; Segment permissions: Read/Write
.bss:000000000020F0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020F0A0                 assume cs:_bss
.bss:000000000020F0A0                 ;org 20F0A0h
.bss:000000000020F0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020F0A0                 public __bss_start ; weak
.bss:000000000020F0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020F0A0                                         ; LOAD:0000000000000A18↑o ...
.bss:000000000020F0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020F0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020F0A0                                         ; _edata
.bss:000000000020F0A0                                         ; Copy of shared data
.bss:000000000020F0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020F0A8 ; FILE *stdout
.bss:000000000020F0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:000000000020F0A8                                         ; main+206↑r ...
.bss:000000000020F0A8                                         ; Alternative name is 'stdout'
.bss:000000000020F0A8                                         ; Copy of shared data
.bss:000000000020F0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020F0B0 ; FILE *stdin
.bss:000000000020F0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000009D0↑o
.bss:000000000020F0B0                                         ; close_stdin+4↑r ...
.bss:000000000020F0B0                                         ; Alternative name is 'stdin'
.bss:000000000020F0B0                                         ; Copy of shared data
.bss:000000000020F0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020F0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A48↑o
.bss:000000000020F0B8                                         ; main:loc_2010↑r ...
.bss:000000000020F0B8                                         ; Alternative name is 'optind'
.bss:000000000020F0B8                                         ; Copy of shared data
.bss:000000000020F0BC                 align 20h
.bss:000000000020F0C0                 public optarg@@GLIBC_2_2_5
.bss:000000000020F0C0 ; char *optarg
.bss:000000000020F0C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:000000000020F0C0                                         ; main+16C↑r ...
.bss:000000000020F0C0                                         ; Alternative name is 'optarg'
.bss:000000000020F0C0                                         ; Copy of shared data
.bss:000000000020F0C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020F0C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020F0C8                                         ; DATA XREF: LOAD:00000000000009E8↑o
.bss:000000000020F0C8                                         ; LOAD:0000000000000A00↑o ...
.bss:000000000020F0C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020F0C8                                         ; Copy of shared data
.bss:000000000020F0D0                 align 20h
.bss:000000000020F0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020F0E0 ; FILE *stderr
.bss:000000000020F0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A30↑o
.bss:000000000020F0E0                                         ; main:loc_2125↑r ...
.bss:000000000020F0E0                                         ; Alternative name is 'stderr'
.bss:000000000020F0E0                                         ; Copy of shared data
.bss:000000000020F0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020F0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020F0E9                 align 10h
.bss:000000000020F0F0 dev_ino_buf_6971 db    ? ;              ; DATA XREF: main:loc_2294↑o
.bss:000000000020F0F1                 db    ? ;
.bss:000000000020F0F2                 db    ? ;
.bss:000000000020F0F3                 db    ? ;
.bss:000000000020F0F4                 db    ? ;
.bss:000000000020F0F5                 db    ? ;
.bss:000000000020F0F6                 db    ? ;
.bss:000000000020F0F7                 db    ? ;
.bss:000000000020F0F8                 db    ? ;
.bss:000000000020F0F9                 db    ? ;
.bss:000000000020F0FA                 db    ? ;
.bss:000000000020F0FB                 db    ? ;
.bss:000000000020F0FC                 db    ? ;
.bss:000000000020F0FD                 db    ? ;
.bss:000000000020F0FE                 db    ? ;
.bss:000000000020F0FF                 db    ? ;
.bss:000000000020F100 file_name       dq ?                    ; DATA XREF: close_stdin_set_file_name↑w
.bss:000000000020F100                                         ; close_stdin+6B↑r
.bss:000000000020F108 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020F108                                         ; close_stdout+1B↑r
.bss:000000000020F109                 align 10h
.bss:000000000020F110 file_name_0     dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020F110                                         ; close_stdout+56↑r
.bss:000000000020F118                 public program_name
.bss:000000000020F118 program_name    dq ?                    ; DATA XREF: main+369↑r
.bss:000000000020F118                                         ; main+4D3↑r ...
.bss:000000000020F120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020F120                                         ; quotearg_free+46↑o ...
.bss:000000000020F121                 db    ? ;
.bss:000000000020F122                 db    ? ;
.bss:000000000020F123                 db    ? ;
.bss:000000000020F124                 db    ? ;
.bss:000000000020F125                 db    ? ;
.bss:000000000020F126                 db    ? ;
.bss:000000000020F127                 db    ? ;
.bss:000000000020F128                 db    ? ;
.bss:000000000020F129                 db    ? ;
.bss:000000000020F12A                 db    ? ;
.bss:000000000020F12B                 db    ? ;
.bss:000000000020F12C                 db    ? ;
.bss:000000000020F12D                 db    ? ;
.bss:000000000020F12E                 db    ? ;
.bss:000000000020F12F                 db    ? ;
.bss:000000000020F130                 db    ? ;
.bss:000000000020F131                 db    ? ;
.bss:000000000020F132                 db    ? ;
.bss:000000000020F133                 db    ? ;
.bss:000000000020F134                 db    ? ;
.bss:000000000020F135                 db    ? ;
.bss:000000000020F136                 db    ? ;
.bss:000000000020F137                 db    ? ;
.bss:000000000020F138                 db    ? ;
.bss:000000000020F139                 db    ? ;
.bss:000000000020F13A                 db    ? ;
.bss:000000000020F13B                 db    ? ;
.bss:000000000020F13C                 db    ? ;
.bss:000000000020F13D                 db    ? ;
.bss:000000000020F13E                 db    ? ;
.bss:000000000020F13F                 db    ? ;
.bss:000000000020F140                 db    ? ;
.bss:000000000020F141                 db    ? ;
.bss:000000000020F142                 db    ? ;
.bss:000000000020F143                 db    ? ;
.bss:000000000020F144                 db    ? ;
.bss:000000000020F145                 db    ? ;
.bss:000000000020F146                 db    ? ;
.bss:000000000020F147                 db    ? ;
.bss:000000000020F148                 db    ? ;
.bss:000000000020F149                 db    ? ;
.bss:000000000020F14A                 db    ? ;
.bss:000000000020F14B                 db    ? ;
.bss:000000000020F14C                 db    ? ;
.bss:000000000020F14D                 db    ? ;
.bss:000000000020F14E                 db    ? ;
.bss:000000000020F14F                 db    ? ;
.bss:000000000020F150                 db    ? ;
.bss:000000000020F151                 db    ? ;
.bss:000000000020F152                 db    ? ;
.bss:000000000020F153                 db    ? ;
.bss:000000000020F154                 db    ? ;
.bss:000000000020F155                 db    ? ;
.bss:000000000020F156                 db    ? ;
.bss:000000000020F157                 db    ? ;
.bss:000000000020F158                 db    ? ;
.bss:000000000020F159                 db    ? ;
.bss:000000000020F15A                 db    ? ;
.bss:000000000020F15B                 db    ? ;
.bss:000000000020F15C                 db    ? ;
.bss:000000000020F15D                 db    ? ;
.bss:000000000020F15E                 db    ? ;
.bss:000000000020F15F                 db    ? ;
.bss:000000000020F160                 db    ? ;
.bss:000000000020F161                 db    ? ;
.bss:000000000020F162                 db    ? ;
.bss:000000000020F163                 db    ? ;
.bss:000000000020F164                 db    ? ;
.bss:000000000020F165                 db    ? ;
.bss:000000000020F166                 db    ? ;
.bss:000000000020F167                 db    ? ;
.bss:000000000020F168                 db    ? ;
.bss:000000000020F169                 db    ? ;
.bss:000000000020F16A                 db    ? ;
.bss:000000000020F16B                 db    ? ;
.bss:000000000020F16C                 db    ? ;
.bss:000000000020F16D                 db    ? ;
.bss:000000000020F16E                 db    ? ;
.bss:000000000020F16F                 db    ? ;
.bss:000000000020F170                 db    ? ;
.bss:000000000020F171                 db    ? ;
.bss:000000000020F172                 db    ? ;
.bss:000000000020F173                 db    ? ;
.bss:000000000020F174                 db    ? ;
.bss:000000000020F175                 db    ? ;
.bss:000000000020F176                 db    ? ;
.bss:000000000020F177                 db    ? ;
.bss:000000000020F178                 db    ? ;
.bss:000000000020F179                 db    ? ;
.bss:000000000020F17A                 db    ? ;
.bss:000000000020F17B                 db    ? ;
.bss:000000000020F17C                 db    ? ;
.bss:000000000020F17D                 db    ? ;
.bss:000000000020F17E                 db    ? ;
.bss:000000000020F17F                 db    ? ;
.bss:000000000020F180                 db    ? ;
.bss:000000000020F181                 db    ? ;
.bss:000000000020F182                 db    ? ;
.bss:000000000020F183                 db    ? ;
.bss:000000000020F184                 db    ? ;
.bss:000000000020F185                 db    ? ;
.bss:000000000020F186                 db    ? ;
.bss:000000000020F187                 db    ? ;
.bss:000000000020F188                 db    ? ;
.bss:000000000020F189                 db    ? ;
.bss:000000000020F18A                 db    ? ;
.bss:000000000020F18B                 db    ? ;
.bss:000000000020F18C                 db    ? ;
.bss:000000000020F18D                 db    ? ;
.bss:000000000020F18E                 db    ? ;
.bss:000000000020F18F                 db    ? ;
.bss:000000000020F190                 db    ? ;
.bss:000000000020F191                 db    ? ;
.bss:000000000020F192                 db    ? ;
.bss:000000000020F193                 db    ? ;
.bss:000000000020F194                 db    ? ;
.bss:000000000020F195                 db    ? ;
.bss:000000000020F196                 db    ? ;
.bss:000000000020F197                 db    ? ;
.bss:000000000020F198                 db    ? ;
.bss:000000000020F199                 db    ? ;
.bss:000000000020F19A                 db    ? ;
.bss:000000000020F19B                 db    ? ;
.bss:000000000020F19C                 db    ? ;
.bss:000000000020F19D                 db    ? ;
.bss:000000000020F19E                 db    ? ;
.bss:000000000020F19F                 db    ? ;
.bss:000000000020F1A0                 db    ? ;
.bss:000000000020F1A1                 db    ? ;
.bss:000000000020F1A2                 db    ? ;
.bss:000000000020F1A3                 db    ? ;
.bss:000000000020F1A4                 db    ? ;
.bss:000000000020F1A5                 db    ? ;
.bss:000000000020F1A6                 db    ? ;
.bss:000000000020F1A7                 db    ? ;
.bss:000000000020F1A8                 db    ? ;
.bss:000000000020F1A9                 db    ? ;
.bss:000000000020F1AA                 db    ? ;
.bss:000000000020F1AB                 db    ? ;
.bss:000000000020F1AC                 db    ? ;
.bss:000000000020F1AD                 db    ? ;
.bss:000000000020F1AE                 db    ? ;
.bss:000000000020F1AF                 db    ? ;
.bss:000000000020F1B0                 db    ? ;
.bss:000000000020F1B1                 db    ? ;
.bss:000000000020F1B2                 db    ? ;
.bss:000000000020F1B3                 db    ? ;
.bss:000000000020F1B4                 db    ? ;
.bss:000000000020F1B5                 db    ? ;
.bss:000000000020F1B6                 db    ? ;
.bss:000000000020F1B7                 db    ? ;
.bss:000000000020F1B8                 db    ? ;
.bss:000000000020F1B9                 db    ? ;
.bss:000000000020F1BA                 db    ? ;
.bss:000000000020F1BB                 db    ? ;
.bss:000000000020F1BC                 db    ? ;
.bss:000000000020F1BD                 db    ? ;
.bss:000000000020F1BE                 db    ? ;
.bss:000000000020F1BF                 db    ? ;
.bss:000000000020F1C0                 db    ? ;
.bss:000000000020F1C1                 db    ? ;
.bss:000000000020F1C2                 db    ? ;
.bss:000000000020F1C3                 db    ? ;
.bss:000000000020F1C4                 db    ? ;
.bss:000000000020F1C5                 db    ? ;
.bss:000000000020F1C6                 db    ? ;
.bss:000000000020F1C7                 db    ? ;
.bss:000000000020F1C8                 db    ? ;
.bss:000000000020F1C9                 db    ? ;
.bss:000000000020F1CA                 db    ? ;
.bss:000000000020F1CB                 db    ? ;
.bss:000000000020F1CC                 db    ? ;
.bss:000000000020F1CD                 db    ? ;
.bss:000000000020F1CE                 db    ? ;
.bss:000000000020F1CF                 db    ? ;
.bss:000000000020F1D0                 db    ? ;
.bss:000000000020F1D1                 db    ? ;
.bss:000000000020F1D2                 db    ? ;
.bss:000000000020F1D3                 db    ? ;
.bss:000000000020F1D4                 db    ? ;
.bss:000000000020F1D5                 db    ? ;
.bss:000000000020F1D6                 db    ? ;
.bss:000000000020F1D7                 db    ? ;
.bss:000000000020F1D8                 db    ? ;
.bss:000000000020F1D9                 db    ? ;
.bss:000000000020F1DA                 db    ? ;
.bss:000000000020F1DB                 db    ? ;
.bss:000000000020F1DC                 db    ? ;
.bss:000000000020F1DD                 db    ? ;
.bss:000000000020F1DE                 db    ? ;
.bss:000000000020F1DF                 db    ? ;
.bss:000000000020F1E0                 db    ? ;
.bss:000000000020F1E1                 db    ? ;
.bss:000000000020F1E2                 db    ? ;
.bss:000000000020F1E3                 db    ? ;
.bss:000000000020F1E4                 db    ? ;
.bss:000000000020F1E5                 db    ? ;
.bss:000000000020F1E6                 db    ? ;
.bss:000000000020F1E7                 db    ? ;
.bss:000000000020F1E8                 db    ? ;
.bss:000000000020F1E9                 db    ? ;
.bss:000000000020F1EA                 db    ? ;
.bss:000000000020F1EB                 db    ? ;
.bss:000000000020F1EC                 db    ? ;
.bss:000000000020F1ED                 db    ? ;
.bss:000000000020F1EE                 db    ? ;
.bss:000000000020F1EF                 db    ? ;
.bss:000000000020F1F0                 db    ? ;
.bss:000000000020F1F1                 db    ? ;
.bss:000000000020F1F2                 db    ? ;
.bss:000000000020F1F3                 db    ? ;
.bss:000000000020F1F4                 db    ? ;
.bss:000000000020F1F5                 db    ? ;
.bss:000000000020F1F6                 db    ? ;
.bss:000000000020F1F7                 db    ? ;
.bss:000000000020F1F8                 db    ? ;
.bss:000000000020F1F9                 db    ? ;
.bss:000000000020F1FA                 db    ? ;
.bss:000000000020F1FB                 db    ? ;
.bss:000000000020F1FC                 db    ? ;
.bss:000000000020F1FD                 db    ? ;
.bss:000000000020F1FE                 db    ? ;
.bss:000000000020F1FF                 db    ? ;
.bss:000000000020F200                 db    ? ;
.bss:000000000020F201                 db    ? ;
.bss:000000000020F202                 db    ? ;
.bss:000000000020F203                 db    ? ;
.bss:000000000020F204                 db    ? ;
.bss:000000000020F205                 db    ? ;
.bss:000000000020F206                 db    ? ;
.bss:000000000020F207                 db    ? ;
.bss:000000000020F208                 db    ? ;
.bss:000000000020F209                 db    ? ;
.bss:000000000020F20A                 db    ? ;
.bss:000000000020F20B                 db    ? ;
.bss:000000000020F20C                 db    ? ;
.bss:000000000020F20D                 db    ? ;
.bss:000000000020F20E                 db    ? ;
.bss:000000000020F20F                 db    ? ;
.bss:000000000020F210                 db    ? ;
.bss:000000000020F211                 db    ? ;
.bss:000000000020F212                 db    ? ;
.bss:000000000020F213                 db    ? ;
.bss:000000000020F214                 db    ? ;
.bss:000000000020F215                 db    ? ;
.bss:000000000020F216                 db    ? ;
.bss:000000000020F217                 db    ? ;
.bss:000000000020F218                 db    ? ;
.bss:000000000020F219                 db    ? ;
.bss:000000000020F21A                 db    ? ;
.bss:000000000020F21B                 db    ? ;
.bss:000000000020F21C                 db    ? ;
.bss:000000000020F21D                 db    ? ;
.bss:000000000020F21E                 db    ? ;
.bss:000000000020F21F                 db    ? ;
.bss:000000000020F220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020F220                                         ; get_quoting_style↑o ...
.bss:000000000020F230 xmmword_20F230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020F230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020F240 xmmword_20F240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020F240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020F250 qword_20F250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020F250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020F258 can_write_3065  db ?                    ; DATA XREF: can_write_any_file+9↑r
.bss:000000000020F258                                         ; can_write_any_file+2D↑w
.bss:000000000020F259 initialized_3064 db ?                   ; DATA XREF: can_write_any_file↑r
.bss:000000000020F259                                         ; can_write_any_file+23↑w
.bss:000000000020F25A                 align 4
.bss:000000000020F25C have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020F25C                                         ; rpl_fcntl:loc_A66F↑w ...
.bss:000000000020F25C _bss            ends
.bss:000000000020F25C
.prgend:000000000020F260 ; ===========================================================================
.prgend:000000000020F260
.prgend:000000000020F260 ; Segment type: Zero-length
.prgend:000000000020F260 _prgend         segment byte public '' use64
.prgend:000000000020F260 _end            label byte
.prgend:000000000020F260 _prgend         ends
.prgend:000000000020F260
extern:000000000020F268 ; ===========================================================================
extern:000000000020F268
extern:000000000020F268 ; Segment type: Externs
extern:000000000020F268 ; extern
extern:000000000020F268 ; void free(void *ptr)
extern:000000000020F268                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020F268                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020F270 ; void __noreturn abort(void)
extern:000000000020F270                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020F270                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020F278 ; int *_errno_location(void)
extern:000000000020F278                 extrn __errno_location:near
extern:000000000020F278                                         ; CODE XREF: ___errno_location↑j
extern:000000000020F278                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020F280 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020F280                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020F280                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020F288 ; void __noreturn exit(int status)
extern:000000000020F288                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020F288                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020F290 ; size_t _fpending(FILE *fp)
extern:000000000020F290                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020F290                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020F298 ; int unlinkat(int fd, const char *name, int flag)
extern:000000000020F298                 extrn unlinkat:near     ; CODE XREF: _unlinkat↑j
extern:000000000020F298                                         ; DATA XREF: .got:unlinkat_ptr↑o
extern:000000000020F2A0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000020F2A0                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000020F2A0                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000020F2A8 ; int isatty(int fd)
extern:000000000020F2A8                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:000000000020F2A8                                         ; DATA XREF: .got:isatty_ptr↑o
extern:000000000020F2B0 ; int faccessat(int fd, const char *file, int type, int flag)
extern:000000000020F2B0                 extrn faccessat:near    ; CODE XREF: _faccessat↑j
extern:000000000020F2B0                                         ; DATA XREF: .got:faccessat_ptr↑o
extern:000000000020F2B8 ; int fcntl(int fd, int cmd, ...)
extern:000000000020F2B8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020F2B8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020F2C0 ; char *textdomain(const char *domainname)
extern:000000000020F2C0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020F2C0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020F2C8 ; int fclose(FILE *stream)
extern:000000000020F2C8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020F2C8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020F2D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020F2D0                 extrn bindtextdomain:near
extern:000000000020F2D0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020F2D0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020F2D8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020F2D8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020F2D8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020F2E0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020F2E0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020F2E0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020F2E0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020F2E8 ; size_t strlen(const char *s)
extern:000000000020F2E8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020F2E8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020F2F0 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020F2F0                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020F2F0                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020F2F8 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000020F2F8                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000020F2F8                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000020F300                 extrn __stack_chk_fail:near
extern:000000000020F300                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020F300                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020F308 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020F308                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020F308                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020F310 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020F310                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020F310                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020F318 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020F318                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020F318                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020F320 ; int _overflow(_IO_FILE *, int)
extern:000000000020F320                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020F320                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020F328 ; char *strrchr(const char *s, int c)
extern:000000000020F328                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020F328                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020F330 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020F330                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020F330                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020F338 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020F338                 extrn __assert_fail:near
extern:000000000020F338                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020F338                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020F340 ; void *memset(void *s, int c, size_t n)
extern:000000000020F340                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020F340                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020F348 ; __uid_t geteuid(void)
extern:000000000020F348                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:000000000020F348                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:000000000020F350 ; int close(int fd)
extern:000000000020F350                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020F350                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020F358 ; int closedir(DIR *dirp)
extern:000000000020F358                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000020F358                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000020F360 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020F360                 extrn __libc_start_main:near
extern:000000000020F360                                         ; CODE XREF: start+24↑p
extern:000000000020F360                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020F368 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020F368                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020F368                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020F370 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020F370                 extrn fputs_unlocked:near
extern:000000000020F370                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020F370                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020F378 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020F378                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020F378                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020F380 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000020F380                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000020F380                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000020F388 ; int strcmp(const char *s1, const char *s2)
extern:000000000020F388                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020F388                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020F390 ; int dirfd(DIR *dirp)
extern:000000000020F390                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000020F390                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000020F398 ; int rpmatch(const char *response)
extern:000000000020F398                 extrn rpmatch:near      ; CODE XREF: _rpmatch↑j
extern:000000000020F398                                         ; DATA XREF: .got:rpmatch_ptr↑o
extern:000000000020F3A0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020F3A0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020F3A0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020F3A8 ; int fileno(FILE *stream)
extern:000000000020F3A8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020F3A8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020F3B0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020F3B0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020F3B0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020F3B8 ; struct dirent *readdir(DIR *dirp)
extern:000000000020F3B8                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000020F3B8                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000020F3C0 ; void *malloc(size_t size)
extern:000000000020F3C0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020F3C0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020F3C8 ; int fflush(FILE *stream)
extern:000000000020F3C8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020F3C8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020F3D0 ; char *nl_langinfo(nl_item item)
extern:000000000020F3D0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020F3D0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020F3D8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020F3D8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020F3D8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020F3E0 ; int _freading(FILE *fp)
extern:000000000020F3E0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020F3E0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020F3E8 ; int fchdir(int fd)
extern:000000000020F3E8                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000020F3E8                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000020F3F0 ; void *realloc(void *ptr, size_t size)
extern:000000000020F3F0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020F3F0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020F3F8 ; char *setlocale(int category, const char *locale)
extern:000000000020F3F8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020F3F8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020F400                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020F400                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020F408 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000020F408                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000020F408                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000020F410 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020F410                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020F410                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020F418 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020F418                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020F418                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020F420 ; int open(const char *file, int oflag, ...)
extern:000000000020F420                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020F420                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020F428 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020F428                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020F428                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020F430 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
extern:000000000020F430                 extrn dcngettext:near   ; CODE XREF: _dcngettext↑j
extern:000000000020F430                                         ; DATA XREF: .got:dcngettext_ptr↑o
extern:000000000020F438 ; DIR *fdopendir(int fd)
extern:000000000020F438                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000020F438                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000020F440 ; int fstatfs(int fildes, struct statfs *buf)
extern:000000000020F440                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:000000000020F440                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:000000000020F448 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020F448                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020F448                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020F450 ; void __noreturn exit(int status)
extern:000000000020F450                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020F450                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020F458 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020F458                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020F458                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020F460                 extrn __fprintf_chk:near
extern:000000000020F460                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020F460                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020F468 ; int mbsinit(const mbstate_t *ps)
extern:000000000020F468                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020F468                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020F470 ; int iswprint(wint_t wc)
extern:000000000020F470                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020F470                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020F478 ; int __fastcall __cxa_finalize(void *)
extern:000000000020F478                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020F478                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020F478                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020F480 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020F480                 extrn __ctype_b_loc:near
extern:000000000020F480                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020F480                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020F488                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020F488                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020F490                 extrn __gmon_start__:near ; weak
extern:000000000020F490                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020F490                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020F498                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020F498                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020F498
extern:000000000020F498
extern:000000000020F498                 end start
