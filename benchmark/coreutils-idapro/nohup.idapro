LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 6898BD3BE1969E4A980C01471CE1C260552E239E2198B72F0B29C2515900A2A3
LOAD:0000000000000000 ; Input MD5    : 218B4618813BE77D69111825D72A9516
LOAD:0000000000000000 ; Input CRC32  : C970948A
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/nohup
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'nohup.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fd-reopen.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 27CB0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7090h                ; Size in file image
LOAD:00000000000000D8                 dq 7090h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 6D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 61B0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 61B0h                ; Physical address
LOAD:00000000000001B0                 dq 27Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 27Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 27h, 7Dh, 0B3h, 64h, 4Fh, 91h, 20h, 0FFh, 6Ah, 75h ; Desc
LOAD:0000000000000284                 db 0EEh, 0FDh, 1Eh, 63h, 0D0h, 0D1h, 48h, 17h, 1Fh, 6Ch
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 37h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 37h, 38h, 3Eh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_8C8, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8C8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_8C8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8C8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aIsatty - offset byte_8C8, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFcntl - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8C8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_8C8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_8C8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_8C8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_8C8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_8C8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_8C8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_8C8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aDup2 - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:00000000000004C0                            0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrrchr - offset byte_8C8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLseek - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004F0                            0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8C8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFclose+1 - offset byte_8C8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLibcStartMain - offset byte_8C8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcmp - offset byte_8C8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFputsUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aCalloc - offset byte_8C8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aSignal - offset byte_8C8, 12h, 0, 0, \ ; "signal"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGmonStart - offset byte_8C8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aUmask - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:00000000000005C8                            0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8C8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8C8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_8C8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_8C8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_8C8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_8C8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aRealloc - offset byte_8C8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aSetlocale - offset byte_8C8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPrintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMempcpy - offset byte_8C8, 12h, 0, 0, \ ; "mempcpy"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aOpen - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aFseeko - offset byte_8C8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aExecvp - offset byte_8C8, 12h, 0, 0, \ ; "execvp"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aCxaAtexit - offset byte_8C8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aExit+1 - offset byte_8C8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFwrite - offset byte_8C8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFprintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aItmRegistertmc - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMbsinit - offset byte_8C8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aIswprint - offset byte_8C8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCxaFinalize - offset byte_8C8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCtypeBLoc - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aStdout - offset byte_8C8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000808                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aProgname - offset byte_8C8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000820                            offset __bss_start, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aPrognameFull - offset byte_8C8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aOpterr - offset byte_8C8, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000880                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000898                 Elf64_Sym <offset aStderr - offset byte_8C8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000898                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptind - offset byte_8C8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008B0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008C8 ; ELF String Table
LOAD:00000000000008C8 byte_8C8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008C8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008C9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C00↓o
LOAD:00000000000008D3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008DA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008E7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008F1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008F9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000901 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000908 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000910 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:000000000000091A aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000920 aSignal         db 'signal',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000927 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000938 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000941 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000949 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000094F aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000094F                                         ; LOAD:0000000000000748↑o
LOAD:0000000000000955 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000955                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:000000000000096D aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000096D                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000984 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:000000000000098B aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000992 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000999 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009A0 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009B1 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009B8 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000009C0 aDup2           db 'dup2',0             ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000009C5 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009D3 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:00000000000009DA aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009E0 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:00000000000009E7 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000009E7                                         ; LOAD:0000000000000520↑o
LOAD:00000000000009EE aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000009F5 aUmask          db 'umask',0            ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:00000000000009FB aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A03 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A0F aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A1D aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A24 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A2F aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A36 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A42 aExecvp         db 'execvp',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A49 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A50 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A57 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A62 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000A67 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A67                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A85 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A94 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A9A aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000A9A                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000AA9 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AB0 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AB0                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000AC2 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AC9 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AD8 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000ADD aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AE8 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000AF8 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B05 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C10↓o
LOAD:0000000000000B0F aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C20↓o
LOAD:0000000000000B1B aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C30↓o
LOAD:0000000000000B26 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C40↓o
LOAD:0000000000000B30 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C50↓o
LOAD:0000000000000B3C aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B3C                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B58 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B67 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B67                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000B81                 align 2
LOAD:0000000000000B82 ; ELF GNU Symbol Version Table
LOAD:0000000000000B82                 dw 0
LOAD:0000000000000B84                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B90                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BA6                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; signal@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BC0                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BC4                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BD4                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; execvp@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BE6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BE8                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BF0                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C00 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C00                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8C8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C10                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8C8, \ ; "GLIBC_2.3"
LOAD:0000000000000C10                                10h>
LOAD:0000000000000C20                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8C8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C20                                10h>
LOAD:0000000000000C30                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8C8, \ ; "GLIBC_2.14"
LOAD:0000000000000C30                                10h>
LOAD:0000000000000C40                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8C8, \ ; "GLIBC_2.4"
LOAD:0000000000000C40                                10h>
LOAD:0000000000000C50                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8C8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C60 ; ELF RELA Relocation Table
LOAD:0000000000000C60                 Elf64_Rela <207B70h, 8, 1E40h> ; R_X86_64_RELATIVE +1E40h
LOAD:0000000000000C78                 Elf64_Rela <207B78h, 8, 1E00h> ; R_X86_64_RELATIVE +1E00h
LOAD:0000000000000C90                 Elf64_Rela <207B80h, 8, 5904h> ; R_X86_64_RELATIVE +5904h
LOAD:0000000000000CA8                 Elf64_Rela <207BA0h, 8, 5909h> ; R_X86_64_RELATIVE +5909h
LOAD:0000000000000CC0                 Elf64_Rela <207BE0h, 8, 5971h> ; R_X86_64_RELATIVE +5971h
LOAD:0000000000000CD8                 Elf64_Rela <207BE8h, 8, 5979h> ; R_X86_64_RELATIVE +5979h
LOAD:0000000000000CF0                 Elf64_Rela <207BF0h, 8, 597Fh> ; R_X86_64_RELATIVE +597Fh
LOAD:0000000000000D08                 Elf64_Rela <207BF8h, 8, 598Ch> ; R_X86_64_RELATIVE +598Ch
LOAD:0000000000000D20                 Elf64_Rela <207C00h, 8, 5999h> ; R_X86_64_RELATIVE +5999h
LOAD:0000000000000D38                 Elf64_Rela <207C08h, 8, 59ADh> ; R_X86_64_RELATIVE +59ADh
LOAD:0000000000000D50                 Elf64_Rela <207C10h, 8, 59AFh> ; R_X86_64_RELATIVE +59AFh
LOAD:0000000000000D68                 Elf64_Rela <207C18h, 8, 5992h> ; R_X86_64_RELATIVE +5992h
LOAD:0000000000000D80                 Elf64_Rela <207C20h, 8, 543Ch> ; R_X86_64_RELATIVE +543Ch
LOAD:0000000000000D98                 Elf64_Rela <207C28h, 8, 59B7h> ; R_X86_64_RELATIVE +59B7h
LOAD:0000000000000DB0                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000DC8                 Elf64_Rela <208010h, 8, 58EAh> ; R_X86_64_RELATIVE +58EAh
LOAD:0000000000000DE0                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000DF8                 Elf64_Rela <208078h, 8, 208100h> ; R_X86_64_RELATIVE +208100h
LOAD:0000000000000E10                 Elf64_Rela <207FC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E28                 Elf64_Rela <207FD0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E40                 Elf64_Rela <207FD8h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E58                 Elf64_Rela <207FE0h, 3200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E70                 Elf64_Rela <207FE8h, 3500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E88                 Elf64_Rela <208080h, 3800000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EA0                 Elf64_Rela <208088h, 3700000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EB8                 Elf64_Rela <208090h, 3E00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000ED0                 Elf64_Rela <208098h, 3A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000EE8                 Elf64_Rela <2080A0h, 3C00000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000F00                 Elf64_Rela <2080C0h, 3D00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F18 ; ELF JMPREL Relocation Table
LOAD:0000000000000F18                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000000F30                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F48                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F60                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F78                 Elf64_Rela <207E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F90                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FA8                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FC0                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000000FD8                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000000FF0                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001008                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001020                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001038                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001050                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001068                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001080                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001098                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010B0                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010C8                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:00000000000010E0                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000010F8                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001110                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001128                 Elf64_Rela <207EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001140                 Elf64_Rela <207EF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001158                 Elf64_Rela <207F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001170                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001188                 Elf64_Rela <207F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT signal
LOAD:00000000000011A0                 Elf64_Rela <207F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:00000000000011B8                 Elf64_Rela <207F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011D0                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011E8                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001200                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001218                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001230                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001248                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001260                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001278                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001290                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:00000000000012A8                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012C0                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000012D8                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012F0                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT execvp
LOAD:0000000000001308                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001320                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001338                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001350                 Elf64_Rela <207FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001368                 Elf64_Rela <207FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001380                 Elf64_Rela <207FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001398                 Elf64_Rela <207FC0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001398 LOAD            ends
LOAD:0000000000001398
.init:00000000000013B0 ; ===========================================================================
.init:00000000000013B0
.init:00000000000013B0 ; Segment type: Pure code
.init:00000000000013B0 ; Segment permissions: Read/Execute
.init:00000000000013B0 _init           segment dword public 'CODE' use64
.init:00000000000013B0                 assume cs:_init
.init:00000000000013B0                 ;org 13B0h
.init:00000000000013B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013B0
.init:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.init:00000000000013B0
.init:00000000000013B0
.init:00000000000013B0                 public _init_proc
.init:00000000000013B0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013B0                 sub     rsp, 8          ; _init
.init:00000000000013B4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013BB                 test    rax, rax
.init:00000000000013BE                 jz      short loc_13C2
.init:00000000000013C0                 call    rax ; __gmon_start__
.init:00000000000013C2
.init:00000000000013C2 loc_13C2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013C2                 add     rsp, 8
.init:00000000000013C6                 retn
.init:00000000000013C6 _init_proc      endp
.init:00000000000013C6
.init:00000000000013C6 _init           ends
.init:00000000000013C6
LOAD:00000000000013C7 ; ===========================================================================
LOAD:00000000000013C7
LOAD:00000000000013C7 ; Segment type: Pure code
LOAD:00000000000013C7 ; Segment permissions: Read/Execute
LOAD:00000000000013C7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000013C7                 assume cs:LOAD
LOAD:00000000000013C7                 ;org 13C7h
LOAD:00000000000013C7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013C7                 align 10h
LOAD:00000000000013C7 LOAD            ends
LOAD:00000000000013C7
.plt:00000000000013D0 ; ===========================================================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Segment type: Pure code
.plt:00000000000013D0 ; Segment permissions: Read/Execute
.plt:00000000000013D0 _plt            segment para public 'CODE' use64
.plt:00000000000013D0                 assume cs:_plt
.plt:00000000000013D0                 ;org 13D0h
.plt:00000000000013D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0
.plt:00000000000013D0 sub_13D0        proc near               ; CODE XREF: .plt:00000000000013EB↓j
.plt:00000000000013D0                                         ; .plt:00000000000013FB↓j ...
.plt:00000000000013D0 ; __unwind {
.plt:00000000000013D0                 push    cs:qword_207E30
.plt:00000000000013D6                 jmp     cs:qword_207E38
.plt:00000000000013D6 sub_13D0        endp
.plt:00000000000013D6
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013DC                 align 20h
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; char *getenv(const char *name)
.plt:00000000000013E0 _getenv         proc near               ; CODE XREF: main+52↓p
.plt:00000000000013E0                                         ; main+391↓p
.plt:00000000000013E0                 jmp     cs:getenv_ptr
.plt:00000000000013E0 _getenv         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0
.plt:00000000000013EB                 jmp     sub_13D0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void free(void *ptr)
.plt:00000000000013F0 _free           proc near               ; CODE XREF: main+24B↓p
.plt:00000000000013F0                                         ; quotearg_n_options+115↓p ...
.plt:00000000000013F0                 jmp     cs:free_ptr
.plt:00000000000013F0 _free           endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1
.plt:00000000000013FB                 jmp     sub_13D0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ; void __noreturn abort(void)
.plt:0000000000001400 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001400                                         ; quotearg_buffer_restyled:def_28E1↓p ...
.plt:0000000000001400                 jmp     cs:abort_ptr
.plt:0000000000001400 _abort          endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    2
.plt:000000000000140B                 jmp     sub_13D0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int *__errno_location(void)
.plt:0000000000001410 ___errno_location proc near             ; CODE XREF: main:loc_182C↓p
.plt:0000000000001410                                         ; main+2CF↓p ...
.plt:0000000000001410                 jmp     cs:__errno_location_ptr
.plt:0000000000001410 ___errno_location endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    3
.plt:000000000000141B                 jmp     sub_13D0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001420 _strncmp        proc near               ; CODE XREF: usage+25C↓p
.plt:0000000000001420                                         ; usage+31D↓p
.plt:0000000000001420                 jmp     cs:strncmp_ptr
.plt:0000000000001420 _strncmp        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    4
.plt:000000000000142B                 jmp     sub_13D0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: noreturn thunk
.plt:0000000000001430
.plt:0000000000001430 ; void __noreturn _exit(int status)
.plt:0000000000001430 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001430                 jmp     cs:_exit_ptr
.plt:0000000000001430 __exit          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    5
.plt:000000000000143B                 jmp     sub_13D0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; size_t __fpending(FILE *fp)
.plt:0000000000001440 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001440                 jmp     cs:__fpending_ptr
.plt:0000000000001440 ___fpending     endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    6
.plt:000000000000144B                 jmp     sub_13D0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int isatty(int fd)
.plt:0000000000001450 _isatty         proc near               ; CODE XREF: main+C1↓p
.plt:0000000000001450                                         ; main+CE↓p ...
.plt:0000000000001450                 jmp     cs:isatty_ptr
.plt:0000000000001450 _isatty         endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    7
.plt:000000000000145B                 jmp     sub_13D0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001460 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001460                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001460                 jmp     cs:fcntl_ptr
.plt:0000000000001460 _fcntl          endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    8
.plt:000000000000146B                 jmp     sub_13D0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; char *textdomain(const char *domainname)
.plt:0000000000001470 _textdomain     proc near               ; CODE XREF: main+46↓p
.plt:0000000000001470                 jmp     cs:textdomain_ptr
.plt:0000000000001470 _textdomain     endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    9
.plt:000000000000147B                 jmp     sub_13D0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int fclose(FILE *stream)
.plt:0000000000001480 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001480                                         ; rpl_fclose+6B↓j
.plt:0000000000001480                 jmp     cs:fclose_ptr
.plt:0000000000001480 _fclose         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Ah
.plt:000000000000148B                 jmp     sub_13D0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001490 _bindtextdomain proc near               ; CODE XREF: main+3A↓p
.plt:0000000000001490                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001490 _bindtextdomain endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Bh
.plt:000000000000149B                 jmp     sub_13D0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000014A0 _dcgettext      proc near               ; CODE XREF: main+22E↓p
.plt:00000000000014A0                                         ; main+316↓p ...
.plt:00000000000014A0                 jmp     cs:dcgettext_ptr
.plt:00000000000014A0 _dcgettext      endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Ch
.plt:00000000000014AB                 jmp     sub_13D0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014B0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014B0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014B0 ___ctype_get_mb_cur_max endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Dh
.plt:00000000000014BB                 jmp     sub_13D0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; size_t strlen(const char *s)
.plt:00000000000014C0 _strlen         proc near               ; CODE XREF: mfile_name_concat+33↓p
.plt:00000000000014C0                                         ; quotearg_buffer_restyled+157↓p ...
.plt:00000000000014C0                 jmp     cs:strlen_ptr
.plt:00000000000014C0 _strlen         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Eh
.plt:00000000000014CB                 jmp     sub_13D0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: noreturn thunk
.plt:00000000000014D0
.plt:00000000000014D0 ___stack_chk_fail proc near             ; CODE XREF: parse_long_options:loc_257A↓p
.plt:00000000000014D0                                         ; parse_gnu_standard_options_only:loc_26B6↓p ...
.plt:00000000000014D0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014D0 ___stack_chk_fail endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Fh
.plt:00000000000014DB                 jmp     sub_13D0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000014E0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:00000000000014E0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:00000000000014E0                 jmp     cs:getopt_long_ptr
.plt:00000000000014E0 _getopt_long    endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    10h
.plt:00000000000014EB                 jmp     sub_13D0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014F0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014F0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014F0 _mbrtowc        endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    11h
.plt:00000000000014FB                 jmp     sub_13D0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int dup2(int fd, int fd2)
.plt:0000000000001500 _dup2           proc near               ; CODE XREF: main+282↓p
.plt:0000000000001500                                         ; main+2E9↓p ...
.plt:0000000000001500                 jmp     cs:dup2_ptr
.plt:0000000000001500 _dup2           endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    12h
.plt:000000000000150B                 jmp     sub_13D0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *strrchr(const char *s, int c)
.plt:0000000000001510 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001510                 jmp     cs:strrchr_ptr
.plt:0000000000001510 _strrchr        endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    13h
.plt:000000000000151B                 jmp     sub_13D0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001520 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001520                                         ; rpl_fseeko+3B↓p
.plt:0000000000001520                 jmp     cs:lseek_ptr
.plt:0000000000001520 _lseek          endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    14h
.plt:000000000000152B                 jmp     sub_13D0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001530 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001530                                         ; xzalloc+12↓j
.plt:0000000000001530                 jmp     cs:memset_ptr
.plt:0000000000001530 _memset         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    15h
.plt:000000000000153B                 jmp     sub_13D0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int close(int fd)
.plt:0000000000001540 _close          proc near               ; CODE XREF: main+29D↓p
.plt:0000000000001540                                         ; fd_reopen+3D↓p ...
.plt:0000000000001540                 jmp     cs:close_ptr
.plt:0000000000001540 _close          endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    16h
.plt:000000000000154B                 jmp     sub_13D0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001550 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001550                 jmp     cs:memcmp_ptr
.plt:0000000000001550 _memcmp         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    17h
.plt:000000000000155B                 jmp     sub_13D0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001560 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001560                                         ; usage+C5↓p ...
.plt:0000000000001560                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001560 _fputs_unlocked endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    18h
.plt:000000000000156B                 jmp     sub_13D0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001570 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001570                 jmp     cs:calloc_ptr
.plt:0000000000001570 _calloc         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    19h
.plt:000000000000157B                 jmp     sub_13D0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; __sighandler_t signal(int sig, __sighandler_t handler)
.plt:0000000000001580 _signal         proc near               ; CODE XREF: main+2B3↓p
.plt:0000000000001580                 jmp     cs:signal_ptr
.plt:0000000000001580 _signal         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Ah
.plt:000000000000158B                 jmp     sub_13D0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; __mode_t umask(__mode_t mask)
.plt:0000000000001590 _umask          proc near               ; CODE XREF: main+17D↓p
.plt:0000000000001590                                         ; main+1B0↓p ...
.plt:0000000000001590                 jmp     cs:umask_ptr
.plt:0000000000001590 _umask          endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Bh
.plt:000000000000159B                 jmp     sub_13D0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000015A0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000015A0                 jmp     cs:memcpy_ptr
.plt:00000000000015A0 _memcpy         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Ch
.plt:00000000000015AB                 jmp     sub_13D0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int fileno(FILE *stream)
.plt:00000000000015B0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000015B0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000015B0                 jmp     cs:fileno_ptr
.plt:00000000000015B0 _fileno         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Dh
.plt:00000000000015BB                 jmp     sub_13D0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void *malloc(size_t size)
.plt:00000000000015C0 _malloc         proc near               ; CODE XREF: mfile_name_concat+97↓p
.plt:00000000000015C0                                         ; xmalloc+4↓p
.plt:00000000000015C0                 jmp     cs:malloc_ptr
.plt:00000000000015C0 _malloc         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Eh
.plt:00000000000015CB                 jmp     sub_13D0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int fflush(FILE *stream)
.plt:00000000000015D0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015D0                                         ; rpl_fflush+3B↓j
.plt:00000000000015D0                 jmp     cs:fflush_ptr
.plt:00000000000015D0 _fflush         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Fh
.plt:00000000000015DB                 jmp     sub_13D0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015E0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015E0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015E0 _nl_langinfo    endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    20h ; ' '
.plt:00000000000015EB                 jmp     sub_13D0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int __freading(FILE *fp)
.plt:00000000000015F0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015F0                                         ; rpl_fflush+9↓p
.plt:00000000000015F0                 jmp     cs:__freading_ptr
.plt:00000000000015F0 ___freading     endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    21h ; '!'
.plt:00000000000015FB                 jmp     sub_13D0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001600 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001600                 jmp     cs:realloc_ptr
.plt:0000000000001600 _realloc        endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    22h ; '"'
.plt:000000000000160B                 jmp     sub_13D0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *setlocale(int category, const char *locale)
.plt:0000000000001610 _setlocale      proc near               ; CODE XREF: main+27↓p
.plt:0000000000001610                                         ; usage+243↓p ...
.plt:0000000000001610                 jmp     cs:setlocale_ptr
.plt:0000000000001610 _setlocale      endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    23h ; '#'
.plt:000000000000161B                 jmp     sub_13D0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001620                                         ; usage+11D↓p ...
.plt:0000000000001620                 jmp     cs:__printf_chk_ptr
.plt:0000000000001620 ___printf_chk   endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    24h ; '$'
.plt:000000000000162B                 jmp     sub_13D0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001630 _mempcpy        proc near               ; CODE XREF: mfile_name_concat+AD↓p
.plt:0000000000001630                                         ; mfile_name_concat+CE↓p
.plt:0000000000001630                 jmp     cs:mempcpy_ptr
.plt:0000000000001630 _mempcpy        endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    25h ; '%'
.plt:000000000000163B                 jmp     sub_13D0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001640 _error          proc near               ; CODE XREF: main+241↓p
.plt:0000000000001640                                         ; main+328↓p ...
.plt:0000000000001640                 jmp     cs:error_ptr
.plt:0000000000001640 _error          endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    26h ; '&'
.plt:000000000000164B                 jmp     sub_13D0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int open(const char *file, int oflag, ...)
.plt:0000000000001650 _open           proc near               ; CODE XREF: main+199↓p
.plt:0000000000001650                                         ; main+53E↓p ...
.plt:0000000000001650                 jmp     cs:open_ptr
.plt:0000000000001650 _open           endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    27h ; '''
.plt:000000000000165B                 jmp     sub_13D0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001660 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_524A↓j
.plt:0000000000001660                 jmp     cs:fseeko_ptr
.plt:0000000000001660 _fseeko         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    28h ; '('
.plt:000000000000166B                 jmp     sub_13D0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int execvp(const char *file, char *const argv[])
.plt:0000000000001670 _execvp         proc near               ; CODE XREF: main+2CA↓p
.plt:0000000000001670                 jmp     cs:execvp_ptr
.plt:0000000000001670 _execvp         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    29h ; ')'
.plt:000000000000167B                 jmp     sub_13D0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001680 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001680                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001680 ___cxa_atexit   endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    2Ah ; '*'
.plt:000000000000168B                 jmp     sub_13D0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: noreturn thunk
.plt:0000000000001690
.plt:0000000000001690 ; void __noreturn exit(int status)
.plt:0000000000001690 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001690                                         ; parse_long_options+122↓p ...
.plt:0000000000001690                 jmp     cs:exit_ptr
.plt:0000000000001690 _exit           endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Bh ; '+'
.plt:000000000000169B                 jmp     sub_13D0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000016A0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000016A0                 jmp     cs:fwrite_ptr
.plt:00000000000016A0 _fwrite         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Ch ; ','
.plt:00000000000016AB                 jmp     sub_13D0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000016B0                                         ; version_etc_arn+37↓p ...
.plt:00000000000016B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000016B0 ___fprintf_chk  endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Dh ; '-'
.plt:00000000000016BB                 jmp     sub_13D0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000016C0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000016C0                 jmp     cs:mbsinit_ptr
.plt:00000000000016C0 _mbsinit        endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Eh ; '.'
.plt:00000000000016CB                 jmp     sub_13D0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int iswprint(wint_t wc)
.plt:00000000000016D0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016D0                 jmp     cs:iswprint_ptr
.plt:00000000000016D0 _iswprint       endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    2Fh ; '/'
.plt:00000000000016DB                 jmp     sub_13D0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016E0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000016E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016E0 ___ctype_b_loc  endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    30h ; '0'
.plt:00000000000016EB                 jmp     sub_13D0
.plt:00000000000016EB ; } // starts at 13D0
.plt:00000000000016EB _plt            ends
.plt:00000000000016EB
.plt.got:00000000000016F0 ; ===========================================================================
.plt.got:00000000000016F0
.plt.got:00000000000016F0 ; Segment type: Pure code
.plt.got:00000000000016F0 ; Segment permissions: Read/Execute
.plt.got:00000000000016F0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016F0                 assume cs:_plt_got
.plt.got:00000000000016F0                 ;org 16F0h
.plt.got:00000000000016F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016F0
.plt.got:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016F0
.plt.got:00000000000016F0 ; Attributes: thunk
.plt.got:00000000000016F0
.plt.got:00000000000016F0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016F0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016F0 ; __unwind {
.plt.got:00000000000016F0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016F0 __cxa_finalize  endp
.plt.got:00000000000016F0
.plt.got:00000000000016F0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016F6                 align 8
.plt.got:00000000000016F6 ; } // starts at 16F0
.plt.got:00000000000016F6 _plt_got        ends
.plt.got:00000000000016F6
LOAD:00000000000016F8 ; ===========================================================================
LOAD:00000000000016F8
LOAD:00000000000016F8 ; Segment type: Pure code
LOAD:00000000000016F8 ; Segment permissions: Read/Execute
LOAD:00000000000016F8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016F8                 assume cs:LOAD
LOAD:00000000000016F8                 ;org 16F8h
LOAD:00000000000016F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016F8                 align 20h
LOAD:00000000000016F8 LOAD            ends
LOAD:00000000000016F8
.text:0000000000001700 ; ===========================================================================
.text:0000000000001700
.text:0000000000001700 ; Segment type: Pure code
.text:0000000000001700 ; Segment permissions: Read/Execute
.text:0000000000001700 _text           segment para public 'CODE' use64
.text:0000000000001700                 assume cs:_text
.text:0000000000001700                 ;org 1700h
.text:0000000000001700                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001700
.text:0000000000001700 ; =============== S U B R O U T I N E =======================================
.text:0000000000001700
.text:0000000000001700
.text:0000000000001700 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001700                 public main
.text:0000000000001700 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001700
.text:0000000000001700 ptr             = qword ptr -60h
.text:0000000000001700 mask            = dword ptr -58h
.text:0000000000001700 errnum          = dword ptr -50h
.text:0000000000001700 var_44          = dword ptr -44h
.text:0000000000001700 var_40          = qword ptr -40h
.text:0000000000001700
.text:0000000000001700 ; __unwind {
.text:0000000000001700                 push    r15
.text:0000000000001702                 push    r14
.text:0000000000001704                 push    r13
.text:0000000000001706                 push    r12
.text:0000000000001708                 mov     r12, rsi
.text:000000000000170B                 push    rbp
.text:000000000000170C                 push    rbx
.text:000000000000170D                 mov     ebp, edi
.text:000000000000170F                 sub     rsp, 38h
.text:0000000000001713                 mov     rdi, [rsi]
.text:0000000000001716                 call    set_program_name
.text:000000000000171B                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001722                 mov     edi, 6          ; category
.text:0000000000001727                 call    _setlocale
.text:000000000000172C                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001733                 lea     rdi, domainname ; "coreutils"
.text:000000000000173A                 call    _bindtextdomain
.text:000000000000173F                 lea     rdi, domainname ; "coreutils"
.text:0000000000001746                 call    _textdomain
.text:000000000000174B                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000001752                 call    _getenv
.text:0000000000001757                 cmp     rax, 1
.text:000000000000175B                 lea     rdi, close_stdout
.text:0000000000001762                 sbb     ebx, ebx
.text:0000000000001764                 and     ebx, 0FFFFFFFEh
.text:0000000000001767                 add     ebx, 7Fh
.text:000000000000176A                 mov     cs:exit_failure, ebx
.text:0000000000001770                 call    atexit
.text:0000000000001775                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:000000000000177C                 sub     rsp, 8
.text:0000000000001780                 mov     r8, cs:Version
.text:0000000000001787                 push    0
.text:0000000000001789                 lea     rcx, unk_53C0
.text:0000000000001790                 lea     rdx, aNohup     ; "nohup"
.text:0000000000001797                 push    rax
.text:0000000000001798                 lea     rax, usage
.text:000000000000179F                 xor     r9d, r9d
.text:00000000000017A2                 mov     rsi, r12
.text:00000000000017A5                 mov     edi, ebp
.text:00000000000017A7                 push    rax
.text:00000000000017A8                 xor     eax, eax
.text:00000000000017AA                 call    parse_gnu_standard_options_only
.text:00000000000017AF                 add     rsp, 20h
.text:00000000000017B3                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:00000000000017B9                 jge     loc_1CB3
.text:00000000000017BF                 xor     edi, edi        ; fd
.text:00000000000017C1                 call    _isatty
.text:00000000000017C6                 mov     edi, 1          ; fd
.text:00000000000017CB                 mov     r13d, eax
.text:00000000000017CE                 call    _isatty
.text:00000000000017D3                 test    eax, eax
.text:00000000000017D5                 mov     ebp, eax
.text:00000000000017D7                 jz      short loc_182C
.text:00000000000017D9
.text:00000000000017D9 loc_17D9:                               ; CODE XREF: main+134↓j
.text:00000000000017D9                 mov     edi, 2          ; fd
.text:00000000000017DE                 call    _isatty
.text:00000000000017E3                 test    eax, eax
.text:00000000000017E5                 mov     r8d, eax
.text:00000000000017E8                 setnz   r14b
.text:00000000000017EC                 test    r13d, r13d
.text:00000000000017EF                 jnz     loc_1A32
.text:00000000000017F5                 test    ebp, ebp
.text:00000000000017F7                 jnz     loc_18A3
.text:00000000000017FD                 test    eax, eax
.text:00000000000017FF                 jnz     loc_1B90
.text:0000000000001805
.text:0000000000001805 loc_1805:                               ; CODE XREF: main+253↓j
.text:0000000000001805                                         ; main+47C↓j ...
.text:0000000000001805                 mov     r14d, 2
.text:000000000000180B
.text:000000000000180B loc_180B:                               ; CODE XREF: main+294↓j
.text:000000000000180B                                         ; main+2A2↓j
.text:000000000000180B                 mov     rax, cs:stderr@@GLIBC_2_2_5
.text:0000000000001812                 test    byte ptr [rax], 20h
.text:0000000000001815                 jz      loc_19A7
.text:000000000000181B
.text:000000000000181B loc_181B:                               ; CODE XREF: main+2F1↓j
.text:000000000000181B                                         ; main+32D↓j ...
.text:000000000000181B                 add     rsp, 38h
.text:000000000000181F                 mov     eax, ebx
.text:0000000000001821                 pop     rbx
.text:0000000000001822                 pop     rbp
.text:0000000000001823                 pop     r12
.text:0000000000001825                 pop     r13
.text:0000000000001827                 pop     r14
.text:0000000000001829                 pop     r15
.text:000000000000182B                 retn
.text:000000000000182C ; ---------------------------------------------------------------------------
.text:000000000000182C
.text:000000000000182C loc_182C:                               ; CODE XREF: main+D7↑j
.text:000000000000182C                 call    ___errno_location
.text:0000000000001831                 cmp     dword ptr [rax], 9
.text:0000000000001834                 jnz     short loc_17D9
.text:0000000000001836                 mov     edi, 2          ; fd
.text:000000000000183B                 mov     r15d, 1
.text:0000000000001841                 call    _isatty
.text:0000000000001846                 test    eax, eax
.text:0000000000001848                 mov     r8d, eax
.text:000000000000184B                 mov     [rsp+68h+var_44], 1
.text:0000000000001853                 setnz   r14b
.text:0000000000001857                 test    r13d, r13d
.text:000000000000185A                 jnz     loc_1A3D
.text:0000000000001860
.text:0000000000001860 loc_1860:                               ; CODE XREF: main+36F↓j
.text:0000000000001860                 test    r14b, r14b
.text:0000000000001863                 jz      loc_1D2E
.text:0000000000001869                 test    r15b, r15b
.text:000000000000186C                 jz      loc_1D2E
.text:0000000000001872
.text:0000000000001872 loc_1872:                               ; CODE XREF: main+485↓j
.text:0000000000001872                 mov     edi, 0FFFFFE7Fh ; mask
.text:0000000000001877                 mov     r14d, 1
.text:000000000000187D                 call    _umask
.text:0000000000001882                 lea     rdi, file       ; "nohup.out"
.text:0000000000001889                 mov     [rsp+68h+mask], eax
.text:000000000000188D                 mov     edx, 180h
.text:0000000000001892                 mov     esi, 441h       ; oflag
.text:0000000000001897                 xor     eax, eax
.text:0000000000001899                 call    _open
.text:000000000000189E                 mov     r15d, eax
.text:00000000000018A1                 jmp     short loc_18D7
.text:00000000000018A3 ; ---------------------------------------------------------------------------
.text:00000000000018A3
.text:00000000000018A3 loc_18A3:                               ; CODE XREF: main+F7↑j
.text:00000000000018A3                 mov     [rsp+68h+var_44], 0
.text:00000000000018AB
.text:00000000000018AB loc_18AB:                               ; CODE XREF: main+375↓j
.text:00000000000018AB                 mov     edi, 0FFFFFE7Fh ; mask
.text:00000000000018B0                 call    _umask
.text:00000000000018B5                 lea     rsi, file       ; "nohup.out"
.text:00000000000018BC                 mov     ecx, 180h
.text:00000000000018C1                 mov     edx, 441h       ; oflag
.text:00000000000018C6                 mov     edi, 1          ; fd2
.text:00000000000018CB                 mov     [rsp+68h+mask], eax
.text:00000000000018CF                 call    fd_reopen
.text:00000000000018D4                 mov     r15d, eax
.text:00000000000018D7
.text:00000000000018D7 loc_18D7:                               ; CODE XREF: main+1A1↑j
.text:00000000000018D7                 test    r15d, r15d
.text:00000000000018DA                 js      loc_1A7A
.text:00000000000018E0                 lea     rsi, file       ; "nohup.out"
.text:00000000000018E7                 mov     [rsp+68h+ptr], 0
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+3E0↓j
.text:00000000000018F0                 mov     edi, [rsp+68h+mask] ; mask
.text:00000000000018F4                 mov     qword ptr [rsp+68h+errnum], rsi
.text:00000000000018F9                 call    _umask
.text:00000000000018FE                 mov     rsi, qword ptr [rsp+68h+errnum]
.text:0000000000001903                 mov     edi, 4
.text:0000000000001908                 call    quotearg_style
.text:000000000000190D                 lea     rsi, aIgnoringInputA ; "ignoring input and appending output to "...
.text:0000000000001914                 mov     qword ptr [rsp+68h+mask], rax
.text:0000000000001919                 lea     rax, msgid      ; "appending output to %s"
.text:0000000000001920                 test    r13d, r13d
.text:0000000000001923                 mov     edx, 5          ; category
.text:0000000000001928                 cmovz   rsi, rax        ; msgid
.text:000000000000192C                 xor     edi, edi        ; domainname
.text:000000000000192E                 call    _dcgettext
.text:0000000000001933                 mov     rcx, qword ptr [rsp+68h+mask]
.text:0000000000001938                 mov     rdx, rax        ; format
.text:000000000000193B                 xor     edi, edi        ; status
.text:000000000000193D                 xor     esi, esi        ; errnum
.text:000000000000193F                 xor     eax, eax
.text:0000000000001941                 call    _error
.text:0000000000001946                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000194B                 call    _free
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: main+634↓j
.text:0000000000001950                 test    r14b, r14b
.text:0000000000001953                 jz      loc_1805
.text:0000000000001959                 xor     eax, eax
.text:000000000000195B                 mov     edx, 3
.text:0000000000001960                 mov     esi, 406h
.text:0000000000001965                 mov     edi, 2          ; fd
.text:000000000000196A                 call    rpl_fcntl
.text:000000000000196F                 test    ebp, ebp
.text:0000000000001971                 mov     r14d, eax
.text:0000000000001974                 jz      loc_1B24
.text:000000000000197A
.text:000000000000197A loc_197A:                               ; CODE XREF: main+453↓j
.text:000000000000197A                 mov     esi, 2          ; fd2
.text:000000000000197F                 mov     edi, r15d       ; fd
.text:0000000000001982                 call    _dup2
.text:0000000000001987                 test    eax, eax
.text:0000000000001989                 js      loc_1BFF
.text:000000000000198F
.text:000000000000198F loc_198F:                               ; CODE XREF: main+528↓j
.text:000000000000198F                 cmp     [rsp+68h+var_44], 0
.text:0000000000001994                 jz      loc_180B
.text:000000000000199A                 mov     edi, r15d       ; fd
.text:000000000000199D                 call    _close
.text:00000000000019A2                 jmp     loc_180B
.text:00000000000019A7 ; ---------------------------------------------------------------------------
.text:00000000000019A7
.text:00000000000019A7 loc_19A7:                               ; CODE XREF: main+115↑j
.text:00000000000019A7                 mov     esi, (offset dword_0+1) ; handler
.text:00000000000019AC                 mov     edi, 1          ; sig
.text:00000000000019B1                 xor     ebx, ebx
.text:00000000000019B3                 call    _signal
.text:00000000000019B8                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000019BF                 lea     rbp, [r12+rax*8]
.text:00000000000019C3                 mov     rdi, [rbp+0]    ; file
.text:00000000000019C7                 mov     rsi, rbp        ; argv
.text:00000000000019CA                 call    _execvp
.text:00000000000019CF                 call    ___errno_location
.text:00000000000019D4                 mov     r12d, [rax]
.text:00000000000019D7                 mov     esi, 2          ; fd2
.text:00000000000019DC                 mov     edi, r14d       ; fd
.text:00000000000019DF                 cmp     r12d, 2
.text:00000000000019E3                 setz    bl
.text:00000000000019E6                 add     ebx, 7Eh ; '~'
.text:00000000000019E9                 call    _dup2
.text:00000000000019EE                 cmp     eax, 2
.text:00000000000019F1                 jnz     loc_181B
.text:00000000000019F7                 mov     rsi, [rbp+0]
.text:00000000000019FB                 mov     edi, 4
.text:0000000000001A00                 call    quotearg_style
.text:0000000000001A05                 lea     rsi, aFailedToRunCom ; "failed to run command %s"
.text:0000000000001A0C                 mov     rbp, rax
.text:0000000000001A0F                 mov     edx, 5          ; category
.text:0000000000001A14
.text:0000000000001A14 loc_1A14:                               ; CODE XREF: main+5AE↓j
.text:0000000000001A14                 xor     edi, edi        ; domainname
.text:0000000000001A16                 call    _dcgettext
.text:0000000000001A1B                 mov     rcx, rbp
.text:0000000000001A1E                 mov     rdx, rax        ; format
.text:0000000000001A21                 mov     esi, r12d       ; errnum
.text:0000000000001A24                 xor     edi, edi        ; status
.text:0000000000001A26                 xor     eax, eax
.text:0000000000001A28                 call    _error
.text:0000000000001A2D                 jmp     loc_181B
.text:0000000000001A32 ; ---------------------------------------------------------------------------
.text:0000000000001A32
.text:0000000000001A32 loc_1A32:                               ; CODE XREF: main+EF↑j
.text:0000000000001A32                 xor     r15d, r15d
.text:0000000000001A35                 mov     [rsp+68h+var_44], 0
.text:0000000000001A3D
.text:0000000000001A3D loc_1A3D:                               ; CODE XREF: main+15A↑j
.text:0000000000001A3D                 lea     rsi, aDevNull   ; "/dev/null"
.text:0000000000001A44                 xor     ecx, ecx
.text:0000000000001A46                 xor     edi, edi        ; fd2
.text:0000000000001A48                 mov     edx, 1          ; oflag
.text:0000000000001A4D                 mov     dword ptr [rsp+68h+ptr], r8d
.text:0000000000001A52                 call    fd_reopen
.text:0000000000001A57                 test    eax, eax
.text:0000000000001A59                 mov     r8d, dword ptr [rsp+68h+ptr]
.text:0000000000001A5E                 js      loc_1BC3
.text:0000000000001A64
.text:0000000000001A64 loc_1A64:                               ; CODE XREF: main+4FA↓j
.text:0000000000001A64                 or      r8d, ebp
.text:0000000000001A67                 jz      loc_1B58
.text:0000000000001A6D                 test    ebp, ebp
.text:0000000000001A6F                 jz      loc_1860
.text:0000000000001A75                 jmp     loc_18AB
.text:0000000000001A7A ; ---------------------------------------------------------------------------
.text:0000000000001A7A
.text:0000000000001A7A loc_1A7A:                               ; CODE XREF: main+1DA↑j
.text:0000000000001A7A                 call    ___errno_location
.text:0000000000001A7F                 mov     [rsp+68h+var_40], rax
.text:0000000000001A84                 mov     eax, [rax]
.text:0000000000001A86                 lea     rdi, aHome      ; "HOME"
.text:0000000000001A8D                 mov     [rsp+68h+errnum], eax
.text:0000000000001A91                 call    _getenv
.text:0000000000001A96                 test    rax, rax
.text:0000000000001A99                 jz      short loc_1AE5
.text:0000000000001A9B                 lea     rsi, file       ; "nohup.out"
.text:0000000000001AA2                 xor     edx, edx
.text:0000000000001AA4                 mov     rdi, rax
.text:0000000000001AA7                 call    file_name_concat
.text:0000000000001AAC                 test    ebp, ebp
.text:0000000000001AAE                 mov     [rsp+68h+ptr], rax
.text:0000000000001AB3                 jz      loc_1C2D
.text:0000000000001AB9                 mov     ecx, 180h
.text:0000000000001ABE                 mov     edx, 441h       ; oflag
.text:0000000000001AC3                 mov     rsi, rax        ; file
.text:0000000000001AC6                 mov     edi, 1          ; fd2
.text:0000000000001ACB                 call    fd_reopen
.text:0000000000001AD0                 test    eax, eax
.text:0000000000001AD2                 mov     r15d, eax
.text:0000000000001AD5                 js      loc_1CDB
.text:0000000000001ADB
.text:0000000000001ADB loc_1ADB:                               ; CODE XREF: main+548↓j
.text:0000000000001ADB                 mov     rsi, [rsp+68h+ptr]
.text:0000000000001AE0                 jmp     loc_18F0
.text:0000000000001AE5 ; ---------------------------------------------------------------------------
.text:0000000000001AE5
.text:0000000000001AE5 loc_1AE5:                               ; CODE XREF: main+399↑j
.text:0000000000001AE5                 lea     rsi, file       ; "nohup.out"
.text:0000000000001AEC                 mov     edi, 4
.text:0000000000001AF1                 call    quotearg_style
.text:0000000000001AF6                 lea     rsi, aFailedToOpenS ; "failed to open %s"
.text:0000000000001AFD                 xor     edi, edi        ; domainname
.text:0000000000001AFF                 mov     edx, 5          ; category
.text:0000000000001B04                 mov     rbp, rax
.text:0000000000001B07                 call    _dcgettext
.text:0000000000001B0C                 mov     esi, [rsp+68h+errnum] ; errnum
.text:0000000000001B10                 mov     rdx, rax        ; format
.text:0000000000001B13                 mov     rcx, rbp
.text:0000000000001B16                 xor     edi, edi        ; status
.text:0000000000001B18                 xor     eax, eax
.text:0000000000001B1A                 call    _error
.text:0000000000001B1F                 jmp     loc_181B
.text:0000000000001B24 ; ---------------------------------------------------------------------------
.text:0000000000001B24
.text:0000000000001B24 loc_1B24:                               ; CODE XREF: main+274↑j
.text:0000000000001B24                 lea     rsi, aIgnoringInputA_0 ; "ignoring input and redirecting stderr t"...
.text:0000000000001B2B                 lea     rax, aRedirectingStd ; "redirecting stderr to stdout"
.text:0000000000001B32                 test    r13d, r13d
.text:0000000000001B35                 cmovz   rsi, rax        ; msgid
.text:0000000000001B39
.text:0000000000001B39 loc_1B39:                               ; CODE XREF: main+4BE↓j
.text:0000000000001B39                 xor     edi, edi        ; domainname
.text:0000000000001B3B                 mov     edx, 5          ; category
.text:0000000000001B40                 call    _dcgettext
.text:0000000000001B45                 xor     esi, esi        ; errnum
.text:0000000000001B47                 mov     rdx, rax        ; format
.text:0000000000001B4A                 xor     edi, edi        ; status
.text:0000000000001B4C                 xor     eax, eax
.text:0000000000001B4E                 call    _error
.text:0000000000001B53                 jmp     loc_197A
.text:0000000000001B58 ; ---------------------------------------------------------------------------
.text:0000000000001B58
.text:0000000000001B58 loc_1B58:                               ; CODE XREF: main+367↑j
.text:0000000000001B58                 lea     rsi, aIgnoringInput ; "ignoring input"
.text:0000000000001B5F                 xor     edi, edi        ; domainname
.text:0000000000001B61                 mov     edx, 5          ; category
.text:0000000000001B66                 call    _dcgettext
.text:0000000000001B6B                 xor     esi, esi        ; errnum
.text:0000000000001B6D                 mov     rdx, rax        ; format
.text:0000000000001B70                 xor     edi, edi        ; status
.text:0000000000001B72                 xor     eax, eax
.text:0000000000001B74                 call    _error
.text:0000000000001B79                 test    r14b, r14b
.text:0000000000001B7C                 jz      loc_1805
.text:0000000000001B82                 test    r15b, r15b
.text:0000000000001B85                 jnz     loc_1872
.text:0000000000001B8B                 jmp     loc_1805
.text:0000000000001B90 ; ---------------------------------------------------------------------------
.text:0000000000001B90
.text:0000000000001B90 loc_1B90:                               ; CODE XREF: main+FF↑j
.text:0000000000001B90                 mov     esi, 406h
.text:0000000000001B95                 mov     edx, 3
.text:0000000000001B9A                 mov     edi, 2          ; fd
.text:0000000000001B9F                 xor     eax, eax
.text:0000000000001BA1                 mov     r15d, 1
.text:0000000000001BA7                 call    rpl_fcntl
.text:0000000000001BAC                 mov     [rsp+68h+var_44], 0
.text:0000000000001BB4                 mov     r14d, eax
.text:0000000000001BB7                 lea     rsi, aRedirectingStd ; "redirecting stderr to stdout"
.text:0000000000001BBE                 jmp     loc_1B39
.text:0000000000001BC3 ; ---------------------------------------------------------------------------
.text:0000000000001BC3
.text:0000000000001BC3 loc_1BC3:                               ; CODE XREF: main+35E↑j
.text:0000000000001BC3                 lea     rsi, aFailedToRender ; "failed to render standard input unusabl"...
.text:0000000000001BCA                 mov     edx, 5          ; category
.text:0000000000001BCF                 xor     edi, edi        ; domainname
.text:0000000000001BD1                 mov     [rsp+68h+mask], r8d
.text:0000000000001BD6                 call    _dcgettext
.text:0000000000001BDB                 mov     [rsp+68h+ptr], rax
.text:0000000000001BE0                 call    ___errno_location
.text:0000000000001BE5                 mov     rdx, [rsp+68h+ptr] ; format
.text:0000000000001BEA                 mov     esi, [rax]      ; errnum
.text:0000000000001BEC                 mov     edi, ebx        ; status
.text:0000000000001BEE                 xor     eax, eax
.text:0000000000001BF0                 call    _error
.text:0000000000001BF5                 mov     r8d, [rsp+68h+mask]
.text:0000000000001BFA                 jmp     loc_1A64
.text:0000000000001BFF ; ---------------------------------------------------------------------------
.text:0000000000001BFF
.text:0000000000001BFF loc_1BFF:                               ; CODE XREF: main+289↑j
.text:0000000000001BFF                 lea     rsi, aFailedToRedire ; "failed to redirect standard error"
.text:0000000000001C06                 xor     edi, edi        ; domainname
.text:0000000000001C08                 mov     edx, 5          ; category
.text:0000000000001C0D                 call    _dcgettext
.text:0000000000001C12                 mov     rbp, rax
.text:0000000000001C15                 call    ___errno_location
.text:0000000000001C1A                 mov     esi, [rax]      ; errnum
.text:0000000000001C1C                 mov     rdx, rbp        ; format
.text:0000000000001C1F                 mov     edi, ebx        ; status
.text:0000000000001C21                 xor     eax, eax
.text:0000000000001C23                 call    _error
.text:0000000000001C28                 jmp     loc_198F
.text:0000000000001C2D ; ---------------------------------------------------------------------------
.text:0000000000001C2D
.text:0000000000001C2D loc_1C2D:                               ; CODE XREF: main+3B3↑j
.text:0000000000001C2D                 mov     rdi, [rsp+68h+ptr] ; file
.text:0000000000001C32                 xor     eax, eax
.text:0000000000001C34                 mov     edx, 180h
.text:0000000000001C39                 mov     esi, 441h       ; oflag
.text:0000000000001C3E                 call    _open
.text:0000000000001C43                 test    eax, eax
.text:0000000000001C45                 mov     r15d, eax
.text:0000000000001C48                 jns     loc_1ADB
.text:0000000000001C4E                 mov     rax, [rsp+68h+var_40]
.text:0000000000001C53                 lea     rsi, file       ; "nohup.out"
.text:0000000000001C5A                 mov     edi, 4
.text:0000000000001C5F                 mov     r12d, [rax]
.text:0000000000001C62                 call    quotearg_style
.text:0000000000001C67                 lea     rsi, aFailedToOpenS ; "failed to open %s"
.text:0000000000001C6E                 mov     edx, 5          ; category
.text:0000000000001C73                 xor     edi, edi        ; domainname
.text:0000000000001C75                 mov     rbp, rax
.text:0000000000001C78                 call    _dcgettext
.text:0000000000001C7D                 mov     esi, [rsp+68h+errnum] ; errnum
.text:0000000000001C81                 mov     rdx, rax        ; format
.text:0000000000001C84                 mov     rcx, rbp
.text:0000000000001C87                 xor     edi, edi        ; status
.text:0000000000001C89                 xor     eax, eax
.text:0000000000001C8B                 call    _error
.text:0000000000001C90
.text:0000000000001C90 loc_1C90:                               ; CODE XREF: main+623↓j
.text:0000000000001C90                 mov     rsi, [rsp+68h+ptr]
.text:0000000000001C95                 mov     edi, 4
.text:0000000000001C9A                 call    quotearg_style
.text:0000000000001C9F                 mov     edx, 5
.text:0000000000001CA4                 mov     rbp, rax
.text:0000000000001CA7                 lea     rsi, aFailedToOpenS ; "failed to open %s"
.text:0000000000001CAE                 jmp     loc_1A14
.text:0000000000001CB3 ; ---------------------------------------------------------------------------
.text:0000000000001CB3
.text:0000000000001CB3 loc_1CB3:                               ; CODE XREF: main+B9↑j
.text:0000000000001CB3                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001CBA                 mov     edx, 5          ; category
.text:0000000000001CBF                 xor     edi, edi        ; domainname
.text:0000000000001CC1                 call    _dcgettext
.text:0000000000001CC6                 xor     edi, edi        ; status
.text:0000000000001CC8                 mov     rdx, rax        ; format
.text:0000000000001CCB                 xor     esi, esi        ; errnum
.text:0000000000001CCD                 xor     eax, eax
.text:0000000000001CCF                 call    _error
.text:0000000000001CD4                 mov     edi, ebx        ; status
.text:0000000000001CD6                 call    usage
.text:0000000000001CDB ; ---------------------------------------------------------------------------
.text:0000000000001CDB
.text:0000000000001CDB loc_1CDB:                               ; CODE XREF: main+3D5↑j
.text:0000000000001CDB                 mov     rax, [rsp+68h+var_40]
.text:0000000000001CE0                 lea     rsi, file       ; "nohup.out"
.text:0000000000001CE7                 mov     edi, 4
.text:0000000000001CEC                 mov     r12d, [rax]
.text:0000000000001CEF                 call    quotearg_style
.text:0000000000001CF4                 lea     rsi, aFailedToOpenS ; "failed to open %s"
.text:0000000000001CFB                 xor     edi, edi        ; domainname
.text:0000000000001CFD                 mov     edx, 5          ; category
.text:0000000000001D02                 mov     rbp, rax
.text:0000000000001D05                 call    _dcgettext
.text:0000000000001D0A                 mov     esi, [rsp+68h+errnum] ; errnum
.text:0000000000001D0E                 mov     rdx, rax        ; format
.text:0000000000001D11                 xor     edi, edi        ; status
.text:0000000000001D13                 xor     eax, eax
.text:0000000000001D15                 mov     rcx, rbp
.text:0000000000001D18                 call    _error
.text:0000000000001D1D                 cmp     [rsp+68h+ptr], 0
.text:0000000000001D23                 jnz     loc_1C90
.text:0000000000001D29                 jmp     loc_181B
.text:0000000000001D2E ; ---------------------------------------------------------------------------
.text:0000000000001D2E
.text:0000000000001D2E loc_1D2E:                               ; CODE XREF: main+163↑j
.text:0000000000001D2E                                         ; main+16C↑j
.text:0000000000001D2E                 mov     r15d, 1
.text:0000000000001D34                 jmp     loc_1950
.text:0000000000001D34 ; } // starts at 1700
.text:0000000000001D34 main            endp
.text:0000000000001D34
.text:0000000000001D34 ; ---------------------------------------------------------------------------
.text:0000000000001D39                 align 20h
.text:0000000000001D40
.text:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D40
.text:0000000000001D40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001D40
.text:0000000000001D40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001D40                 public start
.text:0000000000001D40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001D40 ; __unwind {
.text:0000000000001D40                 xor     ebp, ebp
.text:0000000000001D42                 mov     r9, rdx         ; rtld_fini
.text:0000000000001D45                 pop     rsi             ; argc
.text:0000000000001D46                 mov     rdx, rsp        ; ubp_av
.text:0000000000001D49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001D4D                 push    rax
.text:0000000000001D4E                 push    rsp             ; stack_end
.text:0000000000001D4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001D56                 lea     rcx, __libc_csu_init ; init
.text:0000000000001D5D                 lea     rdi, main       ; main
.text:0000000000001D64                 call    cs:__libc_start_main_ptr
.text:0000000000001D6A                 hlt
.text:0000000000001D6A ; } // starts at 1D40
.text:0000000000001D6A start           endp
.text:0000000000001D6A
.text:0000000000001D6A ; ---------------------------------------------------------------------------
.text:0000000000001D6B                 align 10h
.text:0000000000001D70
.text:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D70
.text:0000000000001D70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001D70
.text:0000000000001D70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1E23↓p
.text:0000000000001D70                 lea     rdi, __bss_start
.text:0000000000001D77                 push    rbp
.text:0000000000001D78                 lea     rax, __bss_start
.text:0000000000001D7F                 cmp     rax, rdi
.text:0000000000001D82                 mov     rbp, rsp
.text:0000000000001D85                 jz      short loc_1DA0
.text:0000000000001D87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001D8E                 test    rax, rax
.text:0000000000001D91                 jz      short loc_1DA0
.text:0000000000001D93                 pop     rbp
.text:0000000000001D94                 jmp     rax
.text:0000000000001D94 ; ---------------------------------------------------------------------------
.text:0000000000001D96                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 loc_1DA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001DA0                                         ; deregister_tm_clones+21↑j
.text:0000000000001DA0                 pop     rbp
.text:0000000000001DA1                 retn
.text:0000000000001DA1 deregister_tm_clones endp
.text:0000000000001DA1
.text:0000000000001DA1 ; ---------------------------------------------------------------------------
.text:0000000000001DA2                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DB0
.text:0000000000001DB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001DB0
.text:0000000000001DB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001DB0                 lea     rdi, __bss_start
.text:0000000000001DB7                 lea     rsi, __bss_start
.text:0000000000001DBE                 push    rbp
.text:0000000000001DBF                 sub     rsi, rdi
.text:0000000000001DC2                 mov     rbp, rsp
.text:0000000000001DC5                 sar     rsi, 3
.text:0000000000001DC9                 mov     rax, rsi
.text:0000000000001DCC                 shr     rax, 3Fh
.text:0000000000001DD0                 add     rsi, rax
.text:0000000000001DD3                 sar     rsi, 1
.text:0000000000001DD6                 jz      short loc_1DF0
.text:0000000000001DD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001DDF                 test    rax, rax
.text:0000000000001DE2                 jz      short loc_1DF0
.text:0000000000001DE4                 pop     rbp
.text:0000000000001DE5                 jmp     rax
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DE7                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001DF0                                         ; register_tm_clones+32↑j
.text:0000000000001DF0                 pop     rbp
.text:0000000000001DF1                 retn
.text:0000000000001DF1 register_tm_clones endp
.text:0000000000001DF1
.text:0000000000001DF1 ; ---------------------------------------------------------------------------
.text:0000000000001DF2                 align 20h
.text:0000000000001E00
.text:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E00
.text:0000000000001E00 ; Attributes: info_from_lumina
.text:0000000000001E00
.text:0000000000001E00 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001E00                 cmp     cs:completed_7697, 0
.text:0000000000001E07                 jnz     short locret_1E38
.text:0000000000001E09                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001E11                 push    rbp
.text:0000000000001E12                 mov     rbp, rsp
.text:0000000000001E15                 jz      short loc_1E23
.text:0000000000001E17                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001E1E                 call    __cxa_finalize
.text:0000000000001E23
.text:0000000000001E23 loc_1E23:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001E23                 call    deregister_tm_clones
.text:0000000000001E28                 mov     cs:completed_7697, 1
.text:0000000000001E2F                 pop     rbp
.text:0000000000001E30                 retn
.text:0000000000001E30 ; ---------------------------------------------------------------------------
.text:0000000000001E31                 align 8
.text:0000000000001E38
.text:0000000000001E38 locret_1E38:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001E38                 rep retn
.text:0000000000001E38 __do_global_dtors_aux endp
.text:0000000000001E38
.text:0000000000001E38 ; ---------------------------------------------------------------------------
.text:0000000000001E3A                 align 20h
.text:0000000000001E40
.text:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E40
.text:0000000000001E40 ; Attributes: bp-based frame
.text:0000000000001E40
.text:0000000000001E40 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001E40                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001E40                 push    rbp
.text:0000000000001E41                 mov     rbp, rsp
.text:0000000000001E44                 pop     rbp
.text:0000000000001E45                 jmp     register_tm_clones
.text:0000000000001E45 frame_dummy     endp
.text:0000000000001E45
.text:0000000000001E45 ; ---------------------------------------------------------------------------
.text:0000000000001E4A                 align 10h
.text:0000000000001E50
.text:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E50
.text:0000000000001E50 ; Attributes: noreturn
.text:0000000000001E50
.text:0000000000001E50 ; void __fastcall __noreturn usage(int status)
.text:0000000000001E50                 public usage
.text:0000000000001E50 usage           proc near               ; CODE XREF: main+5D6↑p
.text:0000000000001E50                                         ; DATA XREF: main+98↑o
.text:0000000000001E50
.text:0000000000001E50 var_A8          = qword ptr -0A8h
.text:0000000000001E50 var_A0          = qword ptr -0A0h
.text:0000000000001E50 var_98          = qword ptr -98h
.text:0000000000001E50 var_90          = qword ptr -90h
.text:0000000000001E50 var_88          = qword ptr -88h
.text:0000000000001E50 var_80          = qword ptr -80h
.text:0000000000001E50 var_78          = qword ptr -78h
.text:0000000000001E50 var_70          = qword ptr -70h
.text:0000000000001E50 var_68          = qword ptr -68h
.text:0000000000001E50 var_60          = qword ptr -60h
.text:0000000000001E50 var_58          = qword ptr -58h
.text:0000000000001E50 var_50          = qword ptr -50h
.text:0000000000001E50 var_48          = qword ptr -48h
.text:0000000000001E50 var_40          = qword ptr -40h
.text:0000000000001E50 var_30          = qword ptr -30h
.text:0000000000001E50
.text:0000000000001E50 ; __unwind {
.text:0000000000001E50                 push    r13
.text:0000000000001E52                 push    r12
.text:0000000000001E54                 mov     edx, 5          ; category
.text:0000000000001E59                 push    rbp
.text:0000000000001E5A                 push    rbx
.text:0000000000001E5B                 mov     ebp, edi
.text:0000000000001E5D                 sub     rsp, 88h
.text:0000000000001E64                 mov     rbx, cs:program_name
.text:0000000000001E6B                 mov     rax, fs:28h
.text:0000000000001E74                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001E79                 xor     eax, eax
.text:0000000000001E7B                 test    edi, edi
.text:0000000000001E7D                 jz      short loc_1EAD
.text:0000000000001E7F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001E86                 xor     edi, edi        ; domainname
.text:0000000000001E88                 call    _dcgettext
.text:0000000000001E8D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001E94                 mov     rdx, rax
.text:0000000000001E97                 mov     rcx, rbx
.text:0000000000001E9A                 mov     esi, 1
.text:0000000000001E9F                 xor     eax, eax
.text:0000000000001EA1                 call    ___fprintf_chk
.text:0000000000001EA6
.text:0000000000001EA6 loc_1EA6:                               ; CODE XREF: usage+2D6↓j
.text:0000000000001EA6                 mov     edi, ebp        ; status
.text:0000000000001EA8                 call    _exit
.text:0000000000001EAD ; ---------------------------------------------------------------------------
.text:0000000000001EAD
.text:0000000000001EAD loc_1EAD:                               ; CODE XREF: usage+2D↑j
.text:0000000000001EAD                 lea     rsi, aUsageSCommandA ; "Usage: %s COMMAND [ARG]...\n  or:  %s O"...
.text:0000000000001EB4                 xor     edi, edi        ; domainname
.text:0000000000001EB6                 call    _dcgettext
.text:0000000000001EBB                 mov     rcx, rbx
.text:0000000000001EBE                 mov     rdx, rbx
.text:0000000000001EC1                 mov     rsi, rax
.text:0000000000001EC4                 mov     edi, 1
.text:0000000000001EC9                 xor     eax, eax
.text:0000000000001ECB                 call    ___printf_chk
.text:0000000000001ED0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001ED7                 lea     rsi, aRunCommandIgno ; "Run COMMAND, ignoring hangup signals.\n"...
.text:0000000000001EDE                 mov     edx, 5          ; category
.text:0000000000001EE3                 xor     edi, edi        ; domainname
.text:0000000000001EE5                 call    _dcgettext
.text:0000000000001EEA                 mov     rsi, rbx        ; stream
.text:0000000000001EED                 mov     rdi, rax        ; s
.text:0000000000001EF0                 call    _fputs_unlocked
.text:0000000000001EF5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EFC                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001F03                 mov     edx, 5          ; category
.text:0000000000001F08                 xor     edi, edi        ; domainname
.text:0000000000001F0A                 call    _dcgettext
.text:0000000000001F0F                 mov     rsi, rbx        ; stream
.text:0000000000001F12                 mov     rdi, rax        ; s
.text:0000000000001F15                 call    _fputs_unlocked
.text:0000000000001F1A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F21                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001F28                 mov     edx, 5          ; category
.text:0000000000001F2D                 xor     edi, edi        ; domainname
.text:0000000000001F2F                 call    _dcgettext
.text:0000000000001F34                 mov     rsi, rbx        ; stream
.text:0000000000001F37                 mov     rdi, rax        ; s
.text:0000000000001F3A                 call    _fputs_unlocked
.text:0000000000001F3F                 mov     rbx, cs:program_name
.text:0000000000001F46                 lea     rsi, aIfStandardInpu ; "\nIf standard input is a terminal, redi"...
.text:0000000000001F4D                 mov     edx, 5          ; category
.text:0000000000001F52                 xor     edi, edi        ; domainname
.text:0000000000001F54                 call    _dcgettext
.text:0000000000001F59                 mov     rdx, rbx
.text:0000000000001F5C                 mov     rsi, rax
.text:0000000000001F5F                 mov     edi, 1
.text:0000000000001F64                 xor     eax, eax
.text:0000000000001F66                 lea     rbx, aNohup     ; "nohup"
.text:0000000000001F6D                 call    ___printf_chk
.text:0000000000001F72                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000001F79                 mov     edx, 5          ; category
.text:0000000000001F7E                 xor     edi, edi        ; domainname
.text:0000000000001F80                 call    _dcgettext
.text:0000000000001F85                 lea     rdx, aNohup     ; "nohup"
.text:0000000000001F8C                 mov     rsi, rax
.text:0000000000001F8F                 mov     edi, 1
.text:0000000000001F94                 xor     eax, eax
.text:0000000000001F96                 call    ___printf_chk
.text:0000000000001F9B                 lea     rax, asc_534A   ; "["
.text:0000000000001FA2                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001FA9                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001FB2                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001FBB                 mov     rdx, rsp
.text:0000000000001FBE                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001FC2                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001FC9                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001FCE                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001FD5                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001FDA                 lea     rax, domainname ; "coreutils"
.text:0000000000001FE1                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001FE6                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001FED                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001FF2                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001FF9                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001FFE                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002003                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000200A                 mov     [rsp+0A8h+var_88], rax
.text:000000000000200F                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002016                 mov     [rsp+0A8h+var_80], rax
.text:000000000000201B                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002020                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002025                 mov     [rsp+0A8h+var_50], rax
.text:000000000000202A                 nop     word ptr [rax+rax+00h]
.text:0000000000002030
.text:0000000000002030 loc_2030:                               ; CODE XREF: usage+1FD↓j
.text:0000000000002030                 add     rdx, 10h
.text:0000000000002034                 mov     rdi, [rdx]
.text:0000000000002037                 test    rdi, rdi
.text:000000000000203A                 jz      short loc_204F
.text:000000000000203C                 mov     ecx, 6
.text:0000000000002041                 mov     rsi, rbx
.text:0000000000002044                 repe cmpsb
.text:0000000000002046                 setnbe  al
.text:0000000000002049                 sbb     al, 0
.text:000000000000204B                 test    al, al
.text:000000000000204D                 jnz     short loc_2030
.text:000000000000204F
.text:000000000000204F loc_204F:                               ; CODE XREF: usage+1EA↑j
.text:000000000000204F                 mov     r12, [rdx+8]
.text:0000000000002053                 xor     edi, edi        ; domainname
.text:0000000000002055                 mov     edx, 5          ; category
.text:000000000000205A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002061                 test    r12, r12
.text:0000000000002064                 jz      loc_212B
.text:000000000000206A                 call    _dcgettext
.text:000000000000206F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002076                 lea     rdx, unk_53C0
.text:000000000000207D                 mov     rsi, rax
.text:0000000000002080                 mov     edi, 1
.text:0000000000002085                 xor     eax, eax
.text:0000000000002087                 call    ___printf_chk
.text:000000000000208C                 xor     esi, esi        ; locale
.text:000000000000208E                 mov     edi, 5          ; category
.text:0000000000002093                 call    _setlocale
.text:0000000000002098                 test    rax, rax
.text:000000000000209B                 jz      short loc_20B9
.text:000000000000209D                 lea     rsi, s2         ; "en_"
.text:00000000000020A4                 mov     edx, 3          ; n
.text:00000000000020A9                 mov     rdi, rax        ; s1
.text:00000000000020AC                 call    _strncmp
.text:00000000000020B1                 test    eax, eax
.text:00000000000020B3                 jnz     loc_21C0
.text:00000000000020B9
.text:00000000000020B9 loc_20B9:                               ; CODE XREF: usage+24B↑j
.text:00000000000020B9                                         ; usage+395↓j
.text:00000000000020B9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000020C0                 xor     edi, edi        ; domainname
.text:00000000000020C2                 mov     edx, 5          ; category
.text:00000000000020C7                 call    _dcgettext
.text:00000000000020CC                 lea     rcx, aNohup     ; "nohup"
.text:00000000000020D3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000020DA                 mov     rsi, rax
.text:00000000000020DD                 mov     edi, 1
.text:00000000000020E2                 xor     eax, eax
.text:00000000000020E4                 call    ___printf_chk
.text:00000000000020E9                 cmp     r12, rbx
.text:00000000000020EC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000020F3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000020FA                 cmovz   rbx, rcx
.text:00000000000020FE
.text:00000000000020FE loc_20FE:                               ; CODE XREF: usage+364↓j
.text:00000000000020FE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002105                 xor     edi, edi        ; domainname
.text:0000000000002107                 mov     edx, 5          ; category
.text:000000000000210C                 call    _dcgettext
.text:0000000000002111                 mov     rcx, rbx
.text:0000000000002114                 mov     rsi, rax
.text:0000000000002117                 mov     rdx, r12
.text:000000000000211A                 mov     edi, 1
.text:000000000000211F                 xor     eax, eax
.text:0000000000002121                 call    ___printf_chk
.text:0000000000002126                 jmp     loc_1EA6
.text:000000000000212B ; ---------------------------------------------------------------------------
.text:000000000000212B
.text:000000000000212B loc_212B:                               ; CODE XREF: usage+214↑j
.text:000000000000212B                 call    _dcgettext
.text:0000000000002130                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002137                 lea     rdx, unk_53C0
.text:000000000000213E                 mov     rsi, rax
.text:0000000000002141                 mov     edi, 1
.text:0000000000002146                 xor     eax, eax
.text:0000000000002148                 call    ___printf_chk
.text:000000000000214D                 xor     esi, esi        ; locale
.text:000000000000214F                 mov     edi, 5          ; category
.text:0000000000002154                 call    _setlocale
.text:0000000000002159                 test    rax, rax
.text:000000000000215C                 jz      short loc_2176
.text:000000000000215E                 lea     rsi, s2         ; "en_"
.text:0000000000002165                 mov     edx, 3          ; n
.text:000000000000216A                 mov     rdi, rax        ; s1
.text:000000000000216D                 call    _strncmp
.text:0000000000002172                 test    eax, eax
.text:0000000000002174                 jnz     short loc_21B9
.text:0000000000002176
.text:0000000000002176 loc_2176:                               ; CODE XREF: usage+30C↑j
.text:0000000000002176                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000217D                 mov     edx, 5          ; category
.text:0000000000002182                 xor     edi, edi        ; domainname
.text:0000000000002184                 lea     r12, aNohup     ; "nohup"
.text:000000000000218B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002192                 call    _dcgettext
.text:0000000000002197                 lea     rcx, aNohup     ; "nohup"
.text:000000000000219E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000021A5                 mov     rsi, rax
.text:00000000000021A8                 mov     edi, 1
.text:00000000000021AD                 xor     eax, eax
.text:00000000000021AF                 call    ___printf_chk
.text:00000000000021B4                 jmp     loc_20FE
.text:00000000000021B9 ; ---------------------------------------------------------------------------
.text:00000000000021B9
.text:00000000000021B9 loc_21B9:                               ; CODE XREF: usage+324↑j
.text:00000000000021B9                 lea     r12, aNohup     ; "nohup"
.text:00000000000021C0
.text:00000000000021C0 loc_21C0:                               ; CODE XREF: usage+263↑j
.text:00000000000021C0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000021C7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000021CE                 xor     edi, edi        ; domainname
.text:00000000000021D0                 mov     edx, 5          ; category
.text:00000000000021D5                 call    _dcgettext
.text:00000000000021DA                 mov     rsi, r13        ; stream
.text:00000000000021DD                 mov     rdi, rax        ; s
.text:00000000000021E0                 call    _fputs_unlocked
.text:00000000000021E5                 jmp     loc_20B9
.text:00000000000021E5 ; } // starts at 1E50
.text:00000000000021E5 usage           endp
.text:00000000000021E5
.text:00000000000021E5 ; ---------------------------------------------------------------------------
.text:00000000000021EA                 align 10h
.text:00000000000021F0
.text:00000000000021F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021F0
.text:00000000000021F0
.text:00000000000021F0                 public close_stdout_set_file_name
.text:00000000000021F0 close_stdout_set_file_name proc near
.text:00000000000021F0 ; __unwind {
.text:00000000000021F0                 mov     cs:file_name, rdi
.text:00000000000021F7                 retn
.text:00000000000021F7 ; } // starts at 21F0
.text:00000000000021F7 close_stdout_set_file_name endp
.text:00000000000021F7
.text:00000000000021F7 ; ---------------------------------------------------------------------------
.text:00000000000021F8                 align 20h
.text:0000000000002200
.text:0000000000002200 ; =============== S U B R O U T I N E =======================================
.text:0000000000002200
.text:0000000000002200
.text:0000000000002200                 public close_stdout_set_ignore_EPIPE
.text:0000000000002200 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002200 ; __unwind {
.text:0000000000002200                 mov     cs:ignore_EPIPE, dil
.text:0000000000002207                 retn
.text:0000000000002207 ; } // starts at 2200
.text:0000000000002207 close_stdout_set_ignore_EPIPE endp
.text:0000000000002207
.text:0000000000002207 ; ---------------------------------------------------------------------------
.text:0000000000002208                 align 10h
.text:0000000000002210
.text:0000000000002210 ; =============== S U B R O U T I N E =======================================
.text:0000000000002210
.text:0000000000002210 ; Attributes: info_from_lumina
.text:0000000000002210
.text:0000000000002210 ; void __cdecl close_stdout()
.text:0000000000002210                 public close_stdout
.text:0000000000002210 close_stdout    proc near               ; DATA XREF: main+5B↑o
.text:0000000000002210 ; __unwind {
.text:0000000000002210                 push    rbp
.text:0000000000002211                 push    rbx
.text:0000000000002212                 sub     rsp, 8
.text:0000000000002216                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000221D                 call    close_stream
.text:0000000000002222                 test    eax, eax
.text:0000000000002224                 jz      short loc_223C
.text:0000000000002226                 call    ___errno_location
.text:000000000000222B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002232                 mov     rbx, rax
.text:0000000000002235                 jz      short loc_2253
.text:0000000000002237                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000223A                 jnz     short loc_2253
.text:000000000000223C
.text:000000000000223C loc_223C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000223C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002243                 call    close_stream
.text:0000000000002248                 test    eax, eax
.text:000000000000224A                 jnz     short loc_2292
.text:000000000000224C                 add     rsp, 8
.text:0000000000002250                 pop     rbx
.text:0000000000002251                 pop     rbp
.text:0000000000002252                 retn
.text:0000000000002253 ; ---------------------------------------------------------------------------
.text:0000000000002253
.text:0000000000002253 loc_2253:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002253                                         ; close_stdout+2A↑j
.text:0000000000002253                 lea     rsi, aWriteError ; "write error"
.text:000000000000225A                 xor     edi, edi        ; domainname
.text:000000000000225C                 mov     edx, 5          ; category
.text:0000000000002261                 call    _dcgettext
.text:0000000000002266                 mov     rdi, cs:file_name
.text:000000000000226D                 mov     rbp, rax
.text:0000000000002270                 test    rdi, rdi
.text:0000000000002273                 jz      short loc_229D
.text:0000000000002275                 call    quotearg_colon
.text:000000000000227A                 mov     esi, [rbx]      ; errnum
.text:000000000000227C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002283                 mov     rcx, rax
.text:0000000000002286                 mov     r8, rbp
.text:0000000000002289                 xor     edi, edi        ; status
.text:000000000000228B                 xor     eax, eax
.text:000000000000228D                 call    _error
.text:0000000000002292
.text:0000000000002292 loc_2292:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002292                                         ; close_stdout+A2↓j
.text:0000000000002292                 mov     edi, cs:exit_failure ; status
.text:0000000000002298                 call    __exit
.text:000000000000229D ; ---------------------------------------------------------------------------
.text:000000000000229D
.text:000000000000229D loc_229D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000229D                 mov     esi, [rbx]      ; errnum
.text:000000000000229F                 lea     rdx, format+4   ; format
.text:00000000000022A6                 mov     rcx, rax
.text:00000000000022A9                 xor     edi, edi        ; status
.text:00000000000022AB                 xor     eax, eax
.text:00000000000022AD                 call    _error
.text:00000000000022B2                 jmp     short loc_2292
.text:00000000000022B2 ; } // starts at 2210
.text:00000000000022B2 close_stdout    endp
.text:00000000000022B2
.text:00000000000022B2 ; ---------------------------------------------------------------------------
.text:00000000000022B4                 align 20h
.text:00000000000022C0
.text:00000000000022C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022C0
.text:00000000000022C0
.text:00000000000022C0 ; __int64 __fastcall fd_reopen(int fd2, char *file, int oflag)
.text:00000000000022C0                 public fd_reopen
.text:00000000000022C0 fd_reopen       proc near               ; CODE XREF: main+1CF↑p
.text:00000000000022C0                                         ; main+352↑p ...
.text:00000000000022C0 ; __unwind {
.text:00000000000022C0                 push    r13
.text:00000000000022C2                 push    r12
.text:00000000000022C4                 xor     eax, eax
.text:00000000000022C6                 push    rbp
.text:00000000000022C7                 push    rbx
.text:00000000000022C8                 mov     ebp, edi
.text:00000000000022CA                 mov     rdi, rsi        ; file
.text:00000000000022CD                 mov     esi, edx        ; oflag
.text:00000000000022CF                 mov     edx, ecx
.text:00000000000022D1                 sub     rsp, 8
.text:00000000000022D5                 call    _open
.text:00000000000022DA                 cmp     ebp, eax
.text:00000000000022DC                 mov     ebx, eax
.text:00000000000022DE                 jz      short loc_2309
.text:00000000000022E0                 test    eax, eax
.text:00000000000022E2                 js      short loc_2309
.text:00000000000022E4                 mov     esi, ebp        ; fd2
.text:00000000000022E6                 mov     edi, eax        ; fd
.text:00000000000022E8                 call    _dup2
.text:00000000000022ED                 mov     r12d, eax
.text:00000000000022F0                 call    ___errno_location
.text:00000000000022F5                 mov     r13d, [rax]
.text:00000000000022F8                 mov     rbp, rax
.text:00000000000022FB                 mov     edi, ebx        ; fd
.text:00000000000022FD                 call    _close
.text:0000000000002302                 mov     ebx, r12d
.text:0000000000002305                 mov     [rbp+0], r13d
.text:0000000000002309
.text:0000000000002309 loc_2309:                               ; CODE XREF: fd_reopen+1E↑j
.text:0000000000002309                                         ; fd_reopen+22↑j
.text:0000000000002309                 add     rsp, 8
.text:000000000000230D                 mov     eax, ebx
.text:000000000000230F                 pop     rbx
.text:0000000000002310                 pop     rbp
.text:0000000000002311                 pop     r12
.text:0000000000002313                 pop     r13
.text:0000000000002315                 retn
.text:0000000000002315 ; } // starts at 22C0
.text:0000000000002315 fd_reopen       endp
.text:0000000000002315
.text:0000000000002315 ; ---------------------------------------------------------------------------
.text:0000000000002316                 align 20h
.text:0000000000002320
.text:0000000000002320 ; =============== S U B R O U T I N E =======================================
.text:0000000000002320
.text:0000000000002320
.text:0000000000002320                 public file_name_concat
.text:0000000000002320 file_name_concat proc near              ; CODE XREF: main+3A7↑p
.text:0000000000002320 ; __unwind {
.text:0000000000002320                 sub     rsp, 8
.text:0000000000002324                 call    mfile_name_concat
.text:0000000000002329                 test    rax, rax
.text:000000000000232C                 jz      short loc_2333
.text:000000000000232E                 add     rsp, 8
.text:0000000000002332                 retn
.text:0000000000002333 ; ---------------------------------------------------------------------------
.text:0000000000002333
.text:0000000000002333 loc_2333:                               ; CODE XREF: file_name_concat+C↑j
.text:0000000000002333                 call    xalloc_die
.text:0000000000002333 ; } // starts at 2320
.text:0000000000002333 file_name_concat endp
.text:0000000000002333
.text:0000000000002333 ; ---------------------------------------------------------------------------
.text:0000000000002338                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340
.text:0000000000002340 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:0000000000002340                 public mfile_name_concat
.text:0000000000002340 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:0000000000002340
.text:0000000000002340 var_48          = qword ptr -48h
.text:0000000000002340 var_39          = byte ptr -39h
.text:0000000000002340
.text:0000000000002340 ; __unwind {
.text:0000000000002340                 push    r15
.text:0000000000002342                 push    r14
.text:0000000000002344                 mov     r15, rdx
.text:0000000000002347                 push    r13
.text:0000000000002349                 push    r12
.text:000000000000234B                 mov     r12, rdi
.text:000000000000234E                 push    rbp
.text:000000000000234F                 push    rbx
.text:0000000000002350                 mov     rbp, rsi
.text:0000000000002353                 sub     rsp, 18h
.text:0000000000002357                 call    last_component
.text:000000000000235C                 mov     rbx, rax
.text:000000000000235F                 mov     rdi, rax
.text:0000000000002362                 call    base_len
.text:0000000000002367                 sub     rbx, r12
.text:000000000000236A                 mov     r13, rax
.text:000000000000236D                 mov     rdi, rbp        ; s
.text:0000000000002370                 add     rbx, rax
.text:0000000000002373                 call    _strlen
.text:0000000000002378                 test    r13, r13
.text:000000000000237B                 mov     r14, rax
.text:000000000000237E                 jz      short loc_23B0
.text:0000000000002380                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:0000000000002386                 jz      loc_2430
.text:000000000000238C                 xor     eax, eax
.text:000000000000238E                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000002392                 mov     edx, 0
.text:0000000000002397                 setnz   al
.text:000000000000239A                 mov     [rsp+48h+var_48], rax
.text:000000000000239E                 mov     eax, 2Fh ; '/'
.text:00000000000023A3                 cmovz   eax, edx
.text:00000000000023A6                 mov     [rsp+48h+var_39], al
.text:00000000000023AA                 jmp     short loc_23CE
.text:00000000000023AA ; ---------------------------------------------------------------------------
.text:00000000000023AC                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:00000000000023B0                 xor     eax, eax
.text:00000000000023B2                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000023B6                 mov     edx, 0
.text:00000000000023BB                 setz    al
.text:00000000000023BE                 mov     [rsp+48h+var_48], rax
.text:00000000000023C2                 mov     eax, 2Eh ; '.'
.text:00000000000023C7                 cmovnz  eax, edx
.text:00000000000023CA                 mov     [rsp+48h+var_39], al
.text:00000000000023CE
.text:00000000000023CE loc_23CE:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:00000000000023CE                                         ; mfile_name_concat+FD↓j
.text:00000000000023CE                 lea     rdi, [rbx+r14+1]
.text:00000000000023D3                 add     rdi, [rsp+48h+var_48] ; size
.text:00000000000023D7                 call    _malloc
.text:00000000000023DC                 test    rax, rax
.text:00000000000023DF                 mov     r13, rax
.text:00000000000023E2                 jz      short loc_2416
.text:00000000000023E4                 mov     rdi, rax        ; dest
.text:00000000000023E7                 mov     rdx, rbx        ; n
.text:00000000000023EA                 mov     rsi, r12        ; src
.text:00000000000023ED                 call    _mempcpy
.text:00000000000023F2                 movzx   ecx, [rsp+48h+var_39]
.text:00000000000023F7                 mov     rdi, [rsp+48h+var_48]
.text:00000000000023FB                 add     rdi, rax        ; dest
.text:00000000000023FE                 test    r15, r15
.text:0000000000002401                 mov     [rax], cl
.text:0000000000002403                 jz      short loc_2408
.text:0000000000002405                 mov     [r15], rdi
.text:0000000000002408
.text:0000000000002408 loc_2408:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:0000000000002408                 mov     rdx, r14        ; n
.text:000000000000240B                 mov     rsi, rbp        ; src
.text:000000000000240E                 call    _mempcpy
.text:0000000000002413                 mov     byte ptr [rax], 0
.text:0000000000002416
.text:0000000000002416 loc_2416:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:0000000000002416                 add     rsp, 18h
.text:000000000000241A                 mov     rax, r13
.text:000000000000241D                 pop     rbx
.text:000000000000241E                 pop     rbp
.text:000000000000241F                 pop     r12
.text:0000000000002421                 pop     r13
.text:0000000000002423                 pop     r14
.text:0000000000002425                 pop     r15
.text:0000000000002427                 retn
.text:0000000000002427 ; ---------------------------------------------------------------------------
.text:0000000000002428                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: mfile_name_concat+46↑j
.text:0000000000002430                 mov     [rsp+48h+var_48], 0
.text:0000000000002438                 mov     [rsp+48h+var_39], 0
.text:000000000000243D                 jmp     short loc_23CE
.text:000000000000243D ; } // starts at 2340
.text:000000000000243D mfile_name_concat endp
.text:000000000000243D
.text:000000000000243D ; ---------------------------------------------------------------------------
.text:000000000000243F                 align 20h
.text:0000000000002440
.text:0000000000002440 ; =============== S U B R O U T I N E =======================================
.text:0000000000002440
.text:0000000000002440
.text:0000000000002440                 public parse_long_options
.text:0000000000002440 parse_long_options proc near
.text:0000000000002440
.text:0000000000002440 var_100         = qword ptr -100h
.text:0000000000002440 var_F8          = dword ptr -0F8h
.text:0000000000002440 var_F4          = dword ptr -0F4h
.text:0000000000002440 var_F0          = qword ptr -0F0h
.text:0000000000002440 var_E8          = qword ptr -0E8h
.text:0000000000002440 var_E0          = qword ptr -0E0h
.text:0000000000002440 var_D8          = byte ptr -0D8h
.text:0000000000002440 var_A8          = xmmword ptr -0A8h
.text:0000000000002440 var_98          = xmmword ptr -98h
.text:0000000000002440 var_88          = xmmword ptr -88h
.text:0000000000002440 var_78          = xmmword ptr -78h
.text:0000000000002440 var_68          = xmmword ptr -68h
.text:0000000000002440 var_58          = xmmword ptr -58h
.text:0000000000002440 var_48          = xmmword ptr -48h
.text:0000000000002440 var_38          = xmmword ptr -38h
.text:0000000000002440 arg_0           = byte ptr  8
.text:0000000000002440
.text:0000000000002440 ; __unwind {
.text:0000000000002440                 push    r13
.text:0000000000002442                 push    r12
.text:0000000000002444                 mov     r13, r8
.text:0000000000002447                 push    rbp
.text:0000000000002448                 push    rbx
.text:0000000000002449                 mov     rbp, rdx
.text:000000000000244C                 mov     r12, rcx
.text:000000000000244F                 sub     rsp, 0E8h
.text:0000000000002456                 test    al, al
.text:0000000000002458                 jz      short loc_2494
.text:000000000000245A                 movaps  [rsp+108h+var_A8], xmm0
.text:000000000000245F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000002464                 movaps  [rsp+108h+var_88], xmm2
.text:000000000000246C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000002474                 movaps  [rsp+108h+var_68], xmm4
.text:000000000000247C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000002484                 movaps  [rsp+108h+var_48], xmm6
.text:000000000000248C                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000002494
.text:0000000000002494 loc_2494:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000002494                 mov     rax, fs:28h
.text:000000000000249D                 mov     [rsp+108h+var_E0], rax
.text:00000000000024A2                 xor     eax, eax
.text:00000000000024A4                 cmp     edi, 2
.text:00000000000024A7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:00000000000024AD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:00000000000024B7                 jz      short loc_24F0
.text:00000000000024B9
.text:00000000000024B9 loc_24B9:                               ; CODE XREF: parse_long_options+CE↓j
.text:00000000000024B9                                         ; parse_long_options+DD↓j ...
.text:00000000000024B9                 mov     rax, [rsp+108h+var_E0]
.text:00000000000024BE                 xor     rax, fs:28h
.text:00000000000024C7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:00000000000024CD                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:00000000000024D7                 jnz     loc_257A
.text:00000000000024DD                 add     rsp, 0E8h
.text:00000000000024E4                 pop     rbx
.text:00000000000024E5                 pop     rbp
.text:00000000000024E6                 pop     r12
.text:00000000000024E8                 pop     r13
.text:00000000000024EA                 retn
.text:00000000000024EA ; ---------------------------------------------------------------------------
.text:00000000000024EB                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: parse_long_options+77↑j
.text:00000000000024F0                 lea     rcx, long_options ; longopts
.text:00000000000024F7                 lea     rdx, shortopts  ; "+"
.text:00000000000024FE                 xor     r8d, r8d        ; longind
.text:0000000000002501                 mov     [rsp+108h+var_100], r9
.text:0000000000002506                 call    _getopt_long
.text:000000000000250B                 cmp     eax, 0FFFFFFFFh
.text:000000000000250E                 jz      short loc_24B9
.text:0000000000002510                 cmp     eax, 68h ; 'h'
.text:0000000000002513                 mov     r9, [rsp+108h+var_100]
.text:0000000000002518                 jz      short loc_2570
.text:000000000000251A                 cmp     eax, 76h ; 'v'
.text:000000000000251D                 jnz     short loc_24B9
.text:000000000000251F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000002527                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000252E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000002533                 mov     rcx, r13
.text:0000000000002536                 mov     rdx, r12
.text:0000000000002539                 mov     rsi, rbp
.text:000000000000253C                 mov     [rsp+108h+var_F0], rax
.text:0000000000002541                 lea     rax, [rsp+108h+var_D8]
.text:0000000000002546                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:000000000000254E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000002556                 mov     [rsp+108h+var_E8], rax
.text:000000000000255B                 call    version_etc_va
.text:0000000000002560                 xor     edi, edi        ; status
.text:0000000000002562                 call    _exit
.text:0000000000002562 ; ---------------------------------------------------------------------------
.text:0000000000002567                 align 10h
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000002570                 xor     edi, edi
.text:0000000000002572                 call    r9
.text:0000000000002575                 jmp     loc_24B9
.text:000000000000257A ; ---------------------------------------------------------------------------
.text:000000000000257A
.text:000000000000257A loc_257A:                               ; CODE XREF: parse_long_options+97↑j
.text:000000000000257A                 call    ___stack_chk_fail
.text:000000000000257A ; } // starts at 2440
.text:000000000000257A parse_long_options endp
.text:000000000000257A
.text:000000000000257A ; ---------------------------------------------------------------------------
.text:000000000000257F                 align 20h
.text:0000000000002580
.text:0000000000002580 ; =============== S U B R O U T I N E =======================================
.text:0000000000002580
.text:0000000000002580
.text:0000000000002580                 public parse_gnu_standard_options_only
.text:0000000000002580 parse_gnu_standard_options_only proc near
.text:0000000000002580                                         ; CODE XREF: main+AA↑p
.text:0000000000002580
.text:0000000000002580 var_F8          = dword ptr -0F8h
.text:0000000000002580 var_F4          = dword ptr -0F4h
.text:0000000000002580 var_F0          = qword ptr -0F0h
.text:0000000000002580 var_E8          = qword ptr -0E8h
.text:0000000000002580 var_E0          = qword ptr -0E0h
.text:0000000000002580 var_D8          = byte ptr -0D8h
.text:0000000000002580 var_A8          = xmmword ptr -0A8h
.text:0000000000002580 var_98          = xmmword ptr -98h
.text:0000000000002580 var_88          = xmmword ptr -88h
.text:0000000000002580 var_78          = xmmword ptr -78h
.text:0000000000002580 var_68          = xmmword ptr -68h
.text:0000000000002580 var_58          = xmmword ptr -58h
.text:0000000000002580 var_48          = xmmword ptr -48h
.text:0000000000002580 var_38          = xmmword ptr -38h
.text:0000000000002580 arg_0           = qword ptr  8
.text:0000000000002580 arg_8           = byte ptr  10h
.text:0000000000002580
.text:0000000000002580 ; __unwind {
.text:0000000000002580                 push    r14
.text:0000000000002582                 push    r13
.text:0000000000002584                 mov     r14, r8
.text:0000000000002587                 push    r12
.text:0000000000002589                 push    rbp
.text:000000000000258A                 mov     r12, rdx
.text:000000000000258D                 push    rbx
.text:000000000000258E                 mov     r13, rcx
.text:0000000000002591                 sub     rsp, 0D0h
.text:0000000000002598                 test    al, al
.text:000000000000259A                 mov     rbp, [rsp+0F8h+arg_0]
.text:00000000000025A2                 jz      short loc_25DB
.text:00000000000025A4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:00000000000025A9                 movaps  [rsp+0F8h+var_98], xmm1
.text:00000000000025AE                 movaps  [rsp+0F8h+var_88], xmm2
.text:00000000000025B3                 movaps  [rsp+0F8h+var_78], xmm3
.text:00000000000025BB                 movaps  [rsp+0F8h+var_68], xmm4
.text:00000000000025C3                 movaps  [rsp+0F8h+var_58], xmm5
.text:00000000000025CB                 movaps  [rsp+0F8h+var_48], xmm6
.text:00000000000025D3                 movaps  [rsp+0F8h+var_38], xmm7
.text:00000000000025DB
.text:00000000000025DB loc_25DB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:00000000000025DB                 mov     rax, fs:28h
.text:00000000000025E4                 mov     [rsp+0F8h+var_E0], rax
.text:00000000000025E9                 xor     eax, eax
.text:00000000000025EB                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000025F2                 lea     rax, shortopts  ; "+"
.text:00000000000025F9                 test    r9b, r9b
.text:00000000000025FC                 lea     rcx, long_options ; longopts
.text:0000000000002603                 cmovz   rdx, rax        ; shortopts
.text:0000000000002607                 xor     r8d, r8d        ; longind
.text:000000000000260A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000002610                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:000000000000261A                 call    _getopt_long
.text:000000000000261F                 cmp     eax, 0FFFFFFFFh
.text:0000000000002622                 jz      short loc_2688
.text:0000000000002624                 cmp     eax, 68h ; 'h'
.text:0000000000002627                 jz      loc_26B0
.text:000000000000262D                 cmp     eax, 76h ; 'v'
.text:0000000000002630                 jnz     short loc_2680
.text:0000000000002632                 lea     rax, [rsp+0F8h+arg_8]
.text:000000000000263A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002641                 mov     r8, rsp
.text:0000000000002644                 mov     rcx, r14
.text:0000000000002647                 mov     rdx, r13
.text:000000000000264A                 mov     rsi, r12
.text:000000000000264D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000002652                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000002657                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:000000000000265E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000002666                 mov     [rsp+0F8h+var_E8], rax
.text:000000000000266B                 call    version_etc_va
.text:0000000000002670                 xor     edi, edi        ; status
.text:0000000000002672                 call    _exit
.text:0000000000002672 ; ---------------------------------------------------------------------------
.text:0000000000002677                 align 20h
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000002680                 mov     edi, cs:exit_failure
.text:0000000000002686                 call    rbp
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000002688                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000002688                 mov     rax, [rsp+0F8h+var_E0]
.text:000000000000268D                 xor     rax, fs:28h
.text:0000000000002696                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:000000000000269C                 jnz     short loc_26B6
.text:000000000000269E                 add     rsp, 0D0h
.text:00000000000026A5                 pop     rbx
.text:00000000000026A6                 pop     rbp
.text:00000000000026A7                 pop     r12
.text:00000000000026A9                 pop     r13
.text:00000000000026AB                 pop     r14
.text:00000000000026AD                 retn
.text:00000000000026AD ; ---------------------------------------------------------------------------
.text:00000000000026AE                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:00000000000026B0                 xor     edi, edi
.text:00000000000026B2                 call    rbp
.text:00000000000026B4                 jmp     short loc_2688
.text:00000000000026B6 ; ---------------------------------------------------------------------------
.text:00000000000026B6
.text:00000000000026B6 loc_26B6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:00000000000026B6                 call    ___stack_chk_fail
.text:00000000000026B6 ; } // starts at 2580
.text:00000000000026B6 parse_gnu_standard_options_only endp
.text:00000000000026B6
.text:00000000000026B6 ; ---------------------------------------------------------------------------
.text:00000000000026BB                 align 20h
.text:00000000000026C0
.text:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026C0
.text:00000000000026C0
.text:00000000000026C0                 public set_program_name
.text:00000000000026C0 set_program_name proc near              ; CODE XREF: main+16↑p
.text:00000000000026C0 ; __unwind {
.text:00000000000026C0                 test    rdi, rdi
.text:00000000000026C3                 push    rbx
.text:00000000000026C4                 jz      short loc_273D
.text:00000000000026C6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000026CB                 mov     rbx, rdi
.text:00000000000026CE                 call    _strrchr
.text:00000000000026D3                 test    rax, rax
.text:00000000000026D6                 jz      short loc_272D
.text:00000000000026D8                 lea     r8, [rax+1]
.text:00000000000026DC                 mov     rdx, r8
.text:00000000000026DF                 sub     rdx, rbx
.text:00000000000026E2                 cmp     rdx, 6
.text:00000000000026E6                 jle     short loc_272D
.text:00000000000026E8                 lea     rsi, [rax-6]
.text:00000000000026EC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000026F3                 mov     ecx, 7
.text:00000000000026F8                 repe cmpsb
.text:00000000000026FA                 setnbe  dl
.text:00000000000026FD                 sbb     dl, 0
.text:0000000000002700                 test    dl, dl
.text:0000000000002702                 jnz     short loc_272D
.text:0000000000002704                 lea     rdi, aLt        ; "lt-"
.text:000000000000270B                 mov     ecx, 3
.text:0000000000002710                 mov     rsi, r8
.text:0000000000002713                 mov     rbx, r8
.text:0000000000002716                 repe cmpsb
.text:0000000000002718                 setnbe  dl
.text:000000000000271B                 sbb     dl, 0
.text:000000000000271E                 test    dl, dl
.text:0000000000002720                 jnz     short loc_272D
.text:0000000000002722                 lea     rbx, [rax+4]
.text:0000000000002726                 mov     cs:__bss_start, rbx
.text:000000000000272D
.text:000000000000272D loc_272D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000272D                                         ; set_program_name+26↑j ...
.text:000000000000272D                 mov     cs:program_name, rbx
.text:0000000000002734                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000273B                 pop     rbx
.text:000000000000273C                 retn
.text:000000000000273D ; ---------------------------------------------------------------------------
.text:000000000000273D
.text:000000000000273D loc_273D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000273D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002744                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000274B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002750                 mov     esi, 1          ; size
.text:0000000000002755                 call    _fwrite
.text:000000000000275A                 call    _abort
.text:000000000000275A ; } // starts at 26C0
.text:000000000000275A set_program_name endp
.text:000000000000275A
.text:000000000000275A ; ---------------------------------------------------------------------------
.text:000000000000275F                 align 20h
.text:0000000000002760
.text:0000000000002760 ; =============== S U B R O U T I N E =======================================
.text:0000000000002760
.text:0000000000002760 ; Attributes: info_from_lumina
.text:0000000000002760
.text:0000000000002760 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002760 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002760                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002760 ; __unwind {
.text:0000000000002760                 push    rbp
.text:0000000000002761                 push    rbx
.text:0000000000002762                 mov     rbp, rdi
.text:0000000000002765                 mov     ebx, esi
.text:0000000000002767                 sub     rsp, 8
.text:000000000000276B                 call    locale_charset
.text:0000000000002770                 movzx   edx, byte ptr [rax]
.text:0000000000002773                 and     edx, 0FFFFFFDFh
.text:0000000000002776                 cmp     dl, 55h ; 'U'
.text:0000000000002779                 jz      short loc_27F0
.text:000000000000277B                 cmp     dl, 47h ; 'G'
.text:000000000000277E                 jz      short loc_27A0
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002780                                         ; gettext_quote+50↓j ...
.text:0000000000002780                 lea     rax, unk_596B
.text:0000000000002787                 lea     rdx, asc_596D   ; "'"
.text:000000000000278E                 cmp     ebx, 9
.text:0000000000002791                 cmovnz  rax, rdx
.text:0000000000002795                 add     rsp, 8
.text:0000000000002799                 pop     rbx
.text:000000000000279A                 pop     rbp
.text:000000000000279B                 retn
.text:000000000000279B ; ---------------------------------------------------------------------------
.text:000000000000279C                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000027A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000027A4                 and     edx, 0FFFFFFDFh
.text:00000000000027A7                 cmp     dl, 42h ; 'B'
.text:00000000000027AA                 jnz     short loc_2780
.text:00000000000027AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000027B0                 jnz     short loc_2780
.text:00000000000027B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000027B6                 jnz     short loc_2780
.text:00000000000027B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000027BC                 jnz     short loc_2780
.text:00000000000027BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000027C2                 jnz     short loc_2780
.text:00000000000027C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000027C8                 jnz     short loc_2780
.text:00000000000027CA                 cmp     byte ptr [rax+7], 0
.text:00000000000027CE                 jnz     short loc_2780
.text:00000000000027D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000027D4                 lea     rax, unk_5964
.text:00000000000027DB                 lea     rdx, unk_5968
.text:00000000000027E2                 cmovnz  rax, rdx
.text:00000000000027E6                 add     rsp, 8
.text:00000000000027EA                 pop     rbx
.text:00000000000027EB                 pop     rbp
.text:00000000000027EC                 retn
.text:00000000000027EC ; ---------------------------------------------------------------------------
.text:00000000000027ED                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000027F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000027F4                 and     edx, 0FFFFFFDFh
.text:00000000000027F7                 cmp     dl, 54h ; 'T'
.text:00000000000027FA                 jnz     short loc_2780
.text:00000000000027FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002800                 and     edx, 0FFFFFFDFh
.text:0000000000002803                 cmp     dl, 46h ; 'F'
.text:0000000000002806                 jnz     loc_2780
.text:000000000000280C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002810                 jnz     loc_2780
.text:0000000000002816                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000281A                 jnz     loc_2780
.text:0000000000002820                 cmp     byte ptr [rax+5], 0
.text:0000000000002824                 jnz     loc_2780
.text:000000000000282A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000282E                 lea     rax, unk_595C
.text:0000000000002835                 lea     rdx, unk_5960
.text:000000000000283C                 cmovnz  rax, rdx
.text:0000000000002840                 add     rsp, 8
.text:0000000000002844                 pop     rbx
.text:0000000000002845                 pop     rbp
.text:0000000000002846                 retn
.text:0000000000002846 ; } // starts at 2760
.text:0000000000002846 gettext_quote   endp
.text:0000000000002846
.text:0000000000002846 ; ---------------------------------------------------------------------------
.text:0000000000002847                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850 ; Attributes: info_from_lumina
.text:0000000000002850
.text:0000000000002850 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002850 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002850                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002850
.text:0000000000002850 var_E0          = dword ptr -0E0h
.text:0000000000002850 var_DB          = byte ptr -0DBh
.text:0000000000002850 var_DA          = byte ptr -0DAh
.text:0000000000002850 var_D9          = byte ptr -0D9h
.text:0000000000002850 s               = qword ptr -0D8h
.text:0000000000002850 n               = qword ptr -0D0h
.text:0000000000002850 var_C8          = qword ptr -0C8h
.text:0000000000002850 ps              = qword ptr -0C0h
.text:0000000000002850 var_B8          = qword ptr -0B8h
.text:0000000000002850 var_B0          = qword ptr -0B0h
.text:0000000000002850 var_A8          = qword ptr -0A8h
.text:0000000000002850 s2              = qword ptr -0A0h
.text:0000000000002850 var_98          = qword ptr -98h
.text:0000000000002850 var_90          = qword ptr -90h
.text:0000000000002850 var_88          = qword ptr -88h
.text:0000000000002850 var_80          = qword ptr -80h
.text:0000000000002850 var_78          = qword ptr -78h
.text:0000000000002850 var_70          = dword ptr -70h
.text:0000000000002850 var_6C          = byte ptr -6Ch
.text:0000000000002850 var_6B          = byte ptr -6Bh
.text:0000000000002850 var_6A          = byte ptr -6Ah
.text:0000000000002850 var_69          = byte ptr -69h
.text:0000000000002850 var_68          = qword ptr -68h
.text:0000000000002850 var_60          = qword ptr -60h
.text:0000000000002850 wc              = dword ptr -4Ch
.text:0000000000002850 var_48          = qword ptr -48h
.text:0000000000002850 var_40          = qword ptr -40h
.text:0000000000002850 arg_0           = qword ptr  8
.text:0000000000002850 arg_8           = qword ptr  10h
.text:0000000000002850 arg_10          = qword ptr  18h
.text:0000000000002850
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 push    r15
.text:0000000000002852                 push    r14
.text:0000000000002854                 mov     r15d, r8d
.text:0000000000002857                 push    r13
.text:0000000000002859                 push    r12
.text:000000000000285B                 mov     r14, rdi
.text:000000000000285E                 push    rbp
.text:000000000000285F                 push    rbx
.text:0000000000002860                 mov     ebx, r9d
.text:0000000000002863                 mov     r13, rsi
.text:0000000000002866                 mov     rbp, rcx
.text:0000000000002869                 and     ebx, 2
.text:000000000000286C                 sub     rsp, 0B8h
.text:0000000000002873                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000287B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002880                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002885                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000288A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000288F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002897                 mov     [rsp+0E8h+var_80], rax
.text:000000000000289C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000028A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000028A9                 mov     rax, fs:28h
.text:00000000000028B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000028BA                 xor     eax, eax
.text:00000000000028BC                 call    ___ctype_get_mb_cur_max
.text:00000000000028C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000028C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000028CA                 ja      def_28E1        ; jumptable 00000000000121F1 default case
.text:00000000000028D0                 lea     rcx, jpt_28E1
.text:00000000000028D7                 mov     edx, r15d
.text:00000000000028DA                 movsxd  rax, ds:(jpt_28E1 - 59C0h)[rcx+rdx*4]
.text:00000000000028DE                 add     rax, rcx
.text:00000000000028E1                 jmp     rax             ; switch jump
.text:00000000000028E3 ; ---------------------------------------------------------------------------
.text:00000000000028E3
.text:00000000000028E3 loc_28E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000028E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000028E3                                         ; DATA XREF: ...
.text:00000000000028E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000028E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000028ED                 xor     r12d, r12d
.text:00000000000028F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000028F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000028FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002903
.text:0000000000002903 loc_2903:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002903                 lea     rax, asc_596D   ; "'"
.text:000000000000290A                 mov     [rsp+0E8h+n], 1
.text:0000000000002913                 xor     r15d, r15d
.text:0000000000002916                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000291E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002923
.text:0000000000002923 loc_2923:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002923                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002923                 xor     r11d, r11d
.text:0000000000002926                 mov     rax, rbp
.text:0000000000002929                 mov     r8d, r12d
.text:000000000000292C                 mov     rbp, r11
.text:000000000000292F                 mov     r11, rax
.text:0000000000002932                 nop     word ptr [rax+rax+00h]
.text:0000000000002938
.text:0000000000002938 loc_2938:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002938                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002938                 cmp     r11, rbp
.text:000000000000293B                 setnz   r12b
.text:000000000000293F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002943                 jnz     short loc_2952
.text:0000000000002945                 mov     rax, [rsp+0E8h+s]
.text:000000000000294A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000294E                 setnz   r12b
.text:0000000000002952
.text:0000000000002952 loc_2952:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002952                 test    r12b, r12b
.text:0000000000002955                 jz      loc_2FB0
.text:000000000000295B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002960                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002965                 lea     r9, [rdi+rbp]
.text:0000000000002969                 setnz   al
.text:000000000000296C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002970                 mov     r10d, eax
.text:0000000000002973                 jz      loc_2A20
.text:0000000000002979                 mov     rax, [rsp+0E8h+n]
.text:000000000000297E                 test    rax, rax
.text:0000000000002981                 jz      loc_2DB0
.text:0000000000002987                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000298B                 lea     rbx, [rbp+rax+0]
.text:0000000000002990                 jnz     short loc_29C0
.text:0000000000002992                 cmp     rax, 1
.text:0000000000002996                 jbe     short loc_29C0
.text:0000000000002998                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000299D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000029A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000029A7                 call    _strlen
.text:00000000000029AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000029B8                 mov     r11, rax
.text:00000000000029BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000029C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000029C0                 cmp     rbx, r11
.text:00000000000029C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000029C8                 ja      loc_2F80
.text:00000000000029CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000029D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000029D8                 mov     rdi, r9         ; s1
.text:00000000000029DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000029E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000029E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000029EA                 call    _memcmp
.text:00000000000029EF                 test    eax, eax
.text:00000000000029F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000029F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002A01                 jnz     loc_2F80
.text:0000000000002A07                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A0C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002A12                 jnz     loc_3995
.text:0000000000002A18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002A20                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002A20                 movzx   ebx, byte ptr [r9]
.text:0000000000002A24                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002A27                 ja      def_2A3E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002A2D                 lea     rcx, jpt_2A3E
.text:0000000000002A34                 movzx   edx, bl
.text:0000000000002A37                 movsxd  rax, ds:(jpt_2A3E - 59ECh)[rcx+rdx*4]
.text:0000000000002A3B                 add     rax, rcx
.text:0000000000002A3E                 jmp     rax             ; switch jump
.text:0000000000002A40 ; ---------------------------------------------------------------------------
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002A40                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002A40                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002A43
.text:0000000000002A43 loc_2A43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A43                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002A43                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002A47                 setnz   al
.text:0000000000002A4A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A4E                 jnz     short loc_2A5C
.text:0000000000002A50                 mov     rax, [rsp+0E8h+s]
.text:0000000000002A55                 cmp     byte ptr [rax+1], 0
.text:0000000000002A59                 setnz   al
.text:0000000000002A5C
.text:0000000000002A5C loc_2A5C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002A5C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A61                 setz    dl
.text:0000000000002A64                 test    al, al
.text:0000000000002A66                 jz      loc_2CB8
.text:0000000000002A6C
.text:0000000000002A6C loc_2A6C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002A6C                 xor     r12d, r12d
.text:0000000000002A6F                 xor     eax, eax
.text:0000000000002A71                 nop     dword ptr [rax+00000000h]
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002A78                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002A78                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002A7D                 jnz     loc_2B92
.text:0000000000002A83                 test    dl, dl
.text:0000000000002A85                 jnz     loc_2B92
.text:0000000000002A8B
.text:0000000000002A8B loc_2A8B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002A8B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002A90                 test    rsi, rsi
.text:0000000000002A93                 jz      short loc_2AA9
.text:0000000000002A95                 mov     edx, ebx
.text:0000000000002A97                 shr     dl, 5
.text:0000000000002A9A                 movzx   edx, dl
.text:0000000000002A9D                 mov     edx, [rsi+rdx*4]
.text:0000000000002AA0                 bt      edx, ebx
.text:0000000000002AA3                 jb      loc_2BF3
.text:0000000000002AA9
.text:0000000000002AA9 loc_2AA9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002AA9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002AA9                 test    r10b, r10b
.text:0000000000002AAC                 jnz     loc_2BF3
.text:0000000000002AB2                 xor     eax, 1
.text:0000000000002AB5                 add     rbp, 1
.text:0000000000002AB9                 and     eax, r8d
.text:0000000000002ABC
.text:0000000000002ABC loc_2ABC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002ABC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002ABC                 test    al, al
.text:0000000000002ABE                 jz      short loc_2AE0
.text:0000000000002AC0                 cmp     r13, r15
.text:0000000000002AC3                 jbe     short loc_2ACA
.text:0000000000002AC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002ACA
.text:0000000000002ACA loc_2ACA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002ACA                 lea     rax, [r15+1]
.text:0000000000002ACE                 cmp     r13, rax
.text:0000000000002AD1                 jbe     short loc_2AD9
.text:0000000000002AD3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002AD9                 add     r15, 2
.text:0000000000002ADD                 xor     r8d, r8d
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002AE0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002AE0                 cmp     r15, r13
.text:0000000000002AE3                 jnb     short loc_2AE9
.text:0000000000002AE5                 mov     [r14+r15], bl
.text:0000000000002AE9
.text:0000000000002AE9 loc_2AE9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002AE9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002AEE                 add     r15, 1
.text:0000000000002AF2                 mov     eax, 0
.text:0000000000002AF7                 test    r12b, r12b
.text:0000000000002AFA                 cmovz   edi, eax
.text:0000000000002AFD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002B02                 jmp     loc_2938
.text:0000000000002B02 ; ---------------------------------------------------------------------------
.text:0000000000002B07                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002B10                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002B10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002B13
.text:0000000000002B13 loc_2B13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B13                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B13                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002B17                 cmp     eax, 2
.text:0000000000002B1A                 jz      loc_30D8
.text:0000000000002B20                 cmp     eax, 5
.text:0000000000002B23                 jz      loc_3098
.text:0000000000002B29                 cmp     eax, 2
.text:0000000000002B2C                 mov     ebx, 3Fh ; '?'
.text:0000000000002B31                 setz    dl
.text:0000000000002B34                 xor     r12d, r12d
.text:0000000000002B37                 xor     eax, eax
.text:0000000000002B39                 jmp     loc_2A78
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B3E                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002B40                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002B40                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002B43
.text:0000000000002B43 loc_2B43:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B43                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B43                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002B48                 jz      loc_3050
.text:0000000000002B4E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002B53                 xor     edx, edx
.text:0000000000002B55                 xor     eax, eax
.text:0000000000002B57                 mov     ebx, 27h ; '''
.text:0000000000002B5C                 jmp     loc_2A78
.text:0000000000002B5C ; ---------------------------------------------------------------------------
.text:0000000000002B61                 align 8
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002B68                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002B68                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002B6D                 mov     ebx, 74h ; 't'
.text:0000000000002B72
.text:0000000000002B72 loc_2B72:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002B72                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002B72                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B77                 setz    al
.text:0000000000002B7A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002B7E                 jnz     loc_2CCE
.text:0000000000002B84
.text:0000000000002B84 loc_2B84:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002B84                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002B84                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002B89                 jnz     short loc_2BF0
.text:0000000000002B8B
.text:0000000000002B8B loc_2B8B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002B8B                 mov     ebx, edx
.text:0000000000002B8D                 xor     r12d, r12d
.text:0000000000002B90                 xor     eax, eax
.text:0000000000002B92
.text:0000000000002B92 loc_2B92:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002B92                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002B92                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B97                 jnz     loc_2A8B
.text:0000000000002B9D                 jmp     loc_2AA9
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002BA2                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BA8                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002BA8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002BAD                 mov     ebx, 62h ; 'b'
.text:0000000000002BB2                 jmp     short loc_2B84
.text:0000000000002BB2 ; ---------------------------------------------------------------------------
.text:0000000000002BB4                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BB8                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002BB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002BBD                 jz      loc_2F90
.text:0000000000002BC3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002BC8                 jz      loc_2DE0
.text:0000000000002BCE
.text:0000000000002BCE loc_2BCE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002BCE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BD3                 jz      loc_2DE0
.text:0000000000002BD9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002BDF                 jnz     loc_2F9B
.text:0000000000002BE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002BEA                 nop     word ptr [rax+rax+00h]
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002BF0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002BF0                 xor     r12d, r12d
.text:0000000000002BF3
.text:0000000000002BF3 loc_2BF3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002BF3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002BF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002BF8                 setz    dl
.text:0000000000002BFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002C00                 mov     eax, edx
.text:0000000000002C02                 jnz     loc_3458
.text:0000000000002C08                 mov     eax, r8d
.text:0000000000002C0B                 xor     eax, 1
.text:0000000000002C0E                 and     al, dl
.text:0000000000002C10                 jz      short loc_2C41
.text:0000000000002C12                 cmp     r13, r15
.text:0000000000002C15                 jbe     short loc_2C1C
.text:0000000000002C17                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C1C
.text:0000000000002C1C loc_2C1C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002C1C                 lea     rdx, [r15+1]
.text:0000000000002C20                 cmp     r13, rdx
.text:0000000000002C23                 jbe     short loc_2C2B
.text:0000000000002C25                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002C2B
.text:0000000000002C2B loc_2C2B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002C2B                 lea     rdx, [r15+2]
.text:0000000000002C2F                 cmp     r13, rdx
.text:0000000000002C32                 jbe     short loc_2C3A
.text:0000000000002C34                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002C3A
.text:0000000000002C3A loc_2C3A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002C3A                 add     r15, 3
.text:0000000000002C3E                 mov     r8d, eax
.text:0000000000002C41
.text:0000000000002C41 loc_2C41:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002C41                 cmp     r13, r15
.text:0000000000002C44                 jbe     short loc_2C4B
.text:0000000000002C46                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002C4B
.text:0000000000002C4B loc_2C4B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002C4B                 add     r15, 1
.text:0000000000002C4F                 add     rbp, 1
.text:0000000000002C53                 jmp     loc_2AE0
.text:0000000000002C53 ; ---------------------------------------------------------------------------
.text:0000000000002C58                 align 20h
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C60                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002C60                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002C65                 jnz     loc_2E33
.text:0000000000002C6B                 xor     edx, edx
.text:0000000000002C6D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002C72                 jz      loc_2B8B
.text:0000000000002C78                 add     rbp, 1
.text:0000000000002C7C                 jmp     loc_2938
.text:0000000000002C7C ; ---------------------------------------------------------------------------
.text:0000000000002C81                 align 8
.text:0000000000002C88
.text:0000000000002C88 loc_2C88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C88                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002C88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002C8D                 setz    dl
.text:0000000000002C90                 xor     eax, eax
.text:0000000000002C92                 jmp     loc_2A78
.text:0000000000002C92 ; ---------------------------------------------------------------------------
.text:0000000000002C97                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CA0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CA0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002CA5                 mov     ebx, 61h ; 'a'
.text:0000000000002CAA                 jmp     loc_2B84
.text:0000000000002CAA ; ---------------------------------------------------------------------------
.text:0000000000002CAF                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CB0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002CB5                 setz    dl
.text:0000000000002CB8
.text:0000000000002CB8 loc_2CB8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002CB8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002CB8                 test    rbp, rbp
.text:0000000000002CBB                 jnz     loc_2A6C
.text:0000000000002CC1
.text:0000000000002CC1 loc_2CC1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002CC1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002CC1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002CC6                 and     al, dl
.text:0000000000002CC8                 jz      loc_2A78
.text:0000000000002CCE
.text:0000000000002CCE loc_2CCE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002CCE                 mov     rbp, r11
.text:0000000000002CD1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002CD9                 jmp     loc_33D9
.text:0000000000002CD9 ; ---------------------------------------------------------------------------
.text:0000000000002CDE                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CE0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002CE5                 setz    dl
.text:0000000000002CE8                 xor     r12d, r12d
.text:0000000000002CEB                 jmp     short loc_2CC1
.text:0000000000002CEB ; ---------------------------------------------------------------------------
.text:0000000000002CED                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CF0                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002CF0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002CF5                 mov     ebx, 20h ; ' '
.text:0000000000002CFA                 setz    dl
.text:0000000000002CFD                 jmp     short loc_2CC1
.text:0000000000002CFD ; ---------------------------------------------------------------------------
.text:0000000000002CFF                 align 20h
.text:0000000000002D00
.text:0000000000002D00 loc_2D00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D00                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D00                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002D05                 mov     ebx, 72h ; 'r'
.text:0000000000002D0A                 jmp     loc_2B72
.text:0000000000002D0A ; ---------------------------------------------------------------------------
.text:0000000000002D0F                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D10                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D10                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002D15                 mov     ebx, 66h ; 'f'
.text:0000000000002D1A                 jmp     loc_2B84
.text:0000000000002D1A ; ---------------------------------------------------------------------------
.text:0000000000002D1F                 align 20h
.text:0000000000002D20
.text:0000000000002D20 loc_2D20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D20                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D20                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002D25                 mov     ebx, 76h ; 'v'
.text:0000000000002D2A                 jmp     loc_2B84
.text:0000000000002D2A ; ---------------------------------------------------------------------------
.text:0000000000002D2F                 align 10h
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D30                                         ; DATA XREF: .rodata:jpt_2A3E↓o
.text:0000000000002D30                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002D35                 mov     ebx, 6Eh ; 'n'
.text:0000000000002D3A                 jmp     loc_2B72
.text:0000000000002D3A ; ---------------------------------------------------------------------------
.text:0000000000002D3F                 align 20h
.text:0000000000002D40
.text:0000000000002D40 def_2DCA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002D40                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002D40                                         ; DATA XREF: ...
.text:0000000000002D40                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002D43                 nop     dword ptr [rax+rax+00h]
.text:0000000000002D48
.text:0000000000002D48 def_2A3E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002D48                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002D48                                         ; DATA XREF: ...
.text:0000000000002D48                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002D4E                 jnz     loc_30F8
.text:0000000000002D54                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002D59                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002D5E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002D63                 call    ___ctype_b_loc
.text:0000000000002D68                 mov     rcx, [rax]
.text:0000000000002D6B                 movzx   edx, bl
.text:0000000000002D6E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002D74                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002D7A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002D7F                 mov     edi, 1
.text:0000000000002D84                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002D88                 and     ax, 4000h
.text:0000000000002D8C                 setnz   r12b
.text:0000000000002D90                 setz    al
.text:0000000000002D93                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D97
.text:0000000000002D97 loc_2D97:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002D97                 test    al, al
.text:0000000000002D99                 jnz     loc_3731
.text:0000000000002D9F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002DA4                 setz    dl
.text:0000000000002DA7                 jmp     loc_2A78
.text:0000000000002DA7 ; ---------------------------------------------------------------------------
.text:0000000000002DAC                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002DB0                 movzx   ebx, byte ptr [r9]
.text:0000000000002DB4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002DB7                 ja      short def_2DCA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002DB9                 lea     rcx, jpt_2DCA
.text:0000000000002DC0                 movzx   edx, bl
.text:0000000000002DC3                 movsxd  rax, ds:(jpt_2DCA - 5BE8h)[rcx+rdx*4]
.text:0000000000002DC7                 add     rax, rcx
.text:0000000000002DCA                 jmp     rax             ; switch jump
.text:0000000000002DCA ; ---------------------------------------------------------------------------
.text:0000000000002DCC                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DD0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002DD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002DD3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002DD8                 jnz     loc_2BCE
.text:0000000000002DDE                 xchg    ax, ax
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002DE0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002DE0                 mov     edx, 5Ch ; '\'
.text:0000000000002DE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002DEA                 jmp     loc_2B84
.text:0000000000002DEA ; ---------------------------------------------------------------------------
.text:0000000000002DEF                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002DF0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002DF0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002DF5                 xor     r10d, r10d
.text:0000000000002DF8                 mov     ebx, 66h ; 'f'
.text:0000000000002DFD                 jmp     loc_2B84
.text:0000000000002DFD ; ---------------------------------------------------------------------------
.text:0000000000002E02                 align 8
.text:0000000000002E08
.text:0000000000002E08 loc_2E08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E08                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E08                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002E0D                 xor     r10d, r10d
.text:0000000000002E10                 mov     ebx, 6Eh ; 'n'
.text:0000000000002E15                 jmp     loc_2B72
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E1A                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E20                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E20                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002E25                 jmp     loc_2BF0
.text:0000000000002E25 ; ---------------------------------------------------------------------------
.text:0000000000002E2A                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002E30                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002E30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002E33
.text:0000000000002E33 loc_2E33:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002E33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E38                 setz    dl
.text:0000000000002E3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E40                 jnz     loc_39DA
.text:0000000000002E46                 mov     eax, r8d
.text:0000000000002E49                 mov     rcx, r15
.text:0000000000002E4C                 xor     eax, 1
.text:0000000000002E4F                 and     al, dl
.text:0000000000002E51                 jz      short loc_2E80
.text:0000000000002E53                 cmp     r13, r15
.text:0000000000002E56                 jbe     short loc_2E5D
.text:0000000000002E58                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E5D
.text:0000000000002E5D loc_2E5D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002E5D                 lea     rcx, [r15+1]
.text:0000000000002E61                 cmp     r13, rcx
.text:0000000000002E64                 jbe     short loc_2E6C
.text:0000000000002E66                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002E6C
.text:0000000000002E6C loc_2E6C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000002E6C                 lea     rcx, [r15+2]
.text:0000000000002E70                 cmp     r13, rcx
.text:0000000000002E73                 ja      loc_34A9
.text:0000000000002E79
.text:0000000000002E79 loc_2E79:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002E79                 lea     rcx, [r15+3]
.text:0000000000002E7D                 mov     r8d, eax
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002E80                 cmp     r13, rcx
.text:0000000000002E83                 jbe     short loc_2E8A
.text:0000000000002E85                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000002E8A
.text:0000000000002E8A loc_2E8A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000002E8A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E8F                 lea     r15, [rcx+1]
.text:0000000000002E93                 jz      loc_3499
.text:0000000000002E99                 lea     rax, [rbp+1]
.text:0000000000002E9D                 cmp     rax, r11
.text:0000000000002EA0                 jnb     short loc_2EBB
.text:0000000000002EA2                 mov     rax, [rsp+0E8h+s]
.text:0000000000002EA7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000002EAC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002EB0                 sub     eax, 30h ; '0'
.text:0000000000002EB3                 cmp     al, 9
.text:0000000000002EB5                 jbe     loc_36E9
.text:0000000000002EBB
.text:0000000000002EBB loc_2EBB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000002EBB                 mov     eax, r12d
.text:0000000000002EBE                 mov     ebx, 30h ; '0'
.text:0000000000002EC3                 xor     r12d, r12d
.text:0000000000002EC6                 jmp     loc_2A78
.text:0000000000002EC6 ; ---------------------------------------------------------------------------
.text:0000000000002ECB                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002ED0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002ED5                 mov     r12d, r10d
.text:0000000000002ED8                 setz    dl
.text:0000000000002EDB                 xor     r10d, r10d
.text:0000000000002EDE                 xor     eax, eax
.text:0000000000002EE0                 jmp     loc_2A78
.text:0000000000002EE0 ; ---------------------------------------------------------------------------
.text:0000000000002EE5                 align 8
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002EE8                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002EE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002EED                 setz    dl
.text:0000000000002EF0                 xor     r10d, r10d
.text:0000000000002EF3                 jmp     loc_2CB8
.text:0000000000002EF3 ; ---------------------------------------------------------------------------
.text:0000000000002EF8                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F00                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002F05                 setz    dl
.text:0000000000002F08                 xor     r10d, r10d
.text:0000000000002F0B                 xor     r12d, r12d
.text:0000000000002F0E                 jmp     loc_2CC1
.text:0000000000002F0E ; ---------------------------------------------------------------------------
.text:0000000000002F13                 align 8
.text:0000000000002F18
.text:0000000000002F18 loc_2F18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F18                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002F1D                 mov     r12d, r10d
.text:0000000000002F20                 mov     ebx, 20h ; ' '
.text:0000000000002F25                 setz    dl
.text:0000000000002F28                 xor     r10d, r10d
.text:0000000000002F2B                 jmp     loc_2CC1
.text:0000000000002F30 ; ---------------------------------------------------------------------------
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F30                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F30                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002F35                 xor     r10d, r10d
.text:0000000000002F38                 mov     ebx, 72h ; 'r'
.text:0000000000002F3D                 jmp     loc_2B72
.text:0000000000002F3D ; ---------------------------------------------------------------------------
.text:0000000000002F42                 align 8
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F48                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F48                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002F4D                 jmp     loc_2BF0
.text:0000000000002F4D ; ---------------------------------------------------------------------------
.text:0000000000002F52                 align 8
.text:0000000000002F58
.text:0000000000002F58 loc_2F58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F58                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F58                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002F5D                 xor     r10d, r10d
.text:0000000000002F60                 mov     ebx, 74h ; 't'
.text:0000000000002F65                 jmp     loc_2B72
.text:0000000000002F65 ; ---------------------------------------------------------------------------
.text:0000000000002F6A                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F70                                         ; DATA XREF: .rodata:jpt_2DCA↓o
.text:0000000000002F70                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002F75                 jmp     loc_2BF0
.text:0000000000002F75 ; ---------------------------------------------------------------------------
.text:0000000000002F7A                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002F80                 xor     r10d, r10d
.text:0000000000002F83                 jmp     loc_2A20
.text:0000000000002F83 ; ---------------------------------------------------------------------------
.text:0000000000002F88                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002F90                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F95                 jnz     loc_3900
.text:0000000000002F9B
.text:0000000000002F9B loc_2F9B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002F9B                 add     rbp, 1
.text:0000000000002F9F                 mov     eax, r8d
.text:0000000000002FA2                 xor     r12d, r12d
.text:0000000000002FA5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FAA                 jmp     loc_2ABC
.text:0000000000002FAA ; ---------------------------------------------------------------------------
.text:0000000000002FAF                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002FB0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FB5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002FBA                 mov     r12d, r8d
.text:0000000000002FBD                 mov     rbp, r11
.text:0000000000002FC0                 setz    dl
.text:0000000000002FC3                 mov     eax, ebx
.text:0000000000002FC5                 test    r15, r15
.text:0000000000002FC8                 setz    cl
.text:0000000000002FCB                 and     eax, edx
.text:0000000000002FCD                 and     al, cl
.text:0000000000002FCF                 jnz     loc_3A36
.text:0000000000002FD5                 mov     eax, ebx
.text:0000000000002FD7                 xor     eax, 1
.text:0000000000002FDA                 and     dl, al
.text:0000000000002FDC                 jz      loc_394C
.text:0000000000002FE2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002FE7                 jz      loc_394A
.text:0000000000002FED                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002FF2                 jnz     loc_39ED
.text:0000000000002FF8                 test    r13, r13
.text:0000000000002FFB                 setz    al
.text:0000000000002FFE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003004                 setnz   dl
.text:0000000000003007                 and     al, dl
.text:0000000000003009                 jz      loc_3A2C
.text:000000000000300F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003014
.text:0000000000003014 loc_3014:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003014                 lea     rbx, asc_596D   ; "'"
.text:000000000000301B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000301F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003027                 mov     r15d, 1
.text:000000000000302D                 mov     [rsp+0E8h+n], 1
.text:0000000000003036                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000303B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003040                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003044                 jmp     loc_2923
.text:0000000000003044 ; ---------------------------------------------------------------------------
.text:0000000000003049                 align 10h
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003050                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003055                 jnz     loc_3900
.text:000000000000305B                 test    r13, r13
.text:000000000000305E                 jz      loc_3460
.text:0000000000003064                 xor     edx, edx
.text:0000000000003066                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000306C                 jnz     loc_3460
.text:0000000000003072
.text:0000000000003072 loc_3072:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003072                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003072                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003077                 add     r15, 3
.text:000000000000307B                 xor     eax, eax
.text:000000000000307D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003082                 xor     r8d, r8d
.text:0000000000003085                 mov     r13, rdx
.text:0000000000003088                 mov     ebx, 27h ; '''
.text:000000000000308D                 jmp     loc_2AA9
.text:000000000000308D ; ---------------------------------------------------------------------------
.text:0000000000003092                 align 8
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003098                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000309D                 jz      short loc_30C0
.text:000000000000309F                 lea     rcx, [rbp+2]
.text:00000000000030A3                 cmp     rcx, r11
.text:00000000000030A6                 jnb     short loc_30C0
.text:00000000000030A8                 mov     rax, [rsp+0E8h+s]
.text:00000000000030AD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000030B2                 jz      loc_3842
.text:00000000000030B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000030C0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000030C0                 xor     edx, edx
.text:00000000000030C2                 xor     r12d, r12d
.text:00000000000030C5                 xor     eax, eax
.text:00000000000030C7                 mov     ebx, 3Fh ; '?'
.text:00000000000030CC                 jmp     loc_2A78
.text:00000000000030CC ; ---------------------------------------------------------------------------
.text:00000000000030D1                 align 8
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000030D8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000030DD                 jnz     loc_3900
.text:00000000000030E3                 xor     r12d, r12d
.text:00000000000030E6                 xor     eax, eax
.text:00000000000030E8                 mov     ebx, 3Fh ; '?'
.text:00000000000030ED                 jmp     loc_2AA9
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030F2                 align 8
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000030F8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003100                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003104                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003110                 mov     [rsp+0E8h+ps], rax
.text:0000000000003115                 jnz     short loc_3144
.text:0000000000003117                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000311C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003121                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003126                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000312B                 call    _strlen
.text:0000000000003130                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003136                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000313C                 mov     r11, rax
.text:000000000000313F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003144
.text:0000000000003144 loc_3144:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003144                 lea     rax, [rsp+0E8h+wc]
.text:000000000000314C                 xor     ecx, ecx
.text:000000000000314E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003152                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003157                 mov     rbx, rcx
.text:000000000000315A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003162                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003167                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000316C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003174                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003179                 mov     [rsp+0E8h+var_78], r13
.text:000000000000317E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003183
.text:0000000000003183 loc_3183:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003183                 mov     rax, [rsp+0E8h+s]
.text:0000000000003188                 lea     r14, [rbp+rbx+0]
.text:000000000000318D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003192                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003197                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000319C                 lea     r13, [rax+r14]
.text:00000000000031A0                 sub     rdx, r14
.text:00000000000031A3                 mov     rsi, r13
.text:00000000000031A6                 call    rpl_mbrtowc
.text:00000000000031AB                 test    rax, rax
.text:00000000000031AE                 mov     r15, rax
.text:00000000000031B1                 jz      short loc_3201
.text:00000000000031B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000031B7                 jz      loc_37D5
.text:00000000000031BD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000031C1                 jz      loc_3761
.text:00000000000031C7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031CC                 setz    al
.text:00000000000031CF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000031D3                 jnz     loc_3370
.text:00000000000031D9
.text:00000000000031D9 loc_31D9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000031D9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000031D9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000031E0                 call    _iswprint
.text:00000000000031E5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000031EA                 test    eax, eax
.text:00000000000031EC                 mov     eax, 0
.text:00000000000031F1                 cmovz   r12d, eax
.text:00000000000031F5                 add     rbx, r15
.text:00000000000031F8                 call    _mbsinit
.text:00000000000031FD                 test    eax, eax
.text:00000000000031FF                 jz      short loc_3183
.text:0000000000003201
.text:0000000000003201 loc_3201:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003201                 mov     edx, r12d
.text:0000000000003204                 mov     rdi, rbx
.text:0000000000003207                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000320D                 xor     edx, 1
.text:0000000000003210                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003215                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000321B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000321F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003227                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000322C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003231                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003236
.text:0000000000003236 loc_3236:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003236                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003236                 cmp     rdi, 1
.text:000000000000323A                 jbe     loc_383B
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003240                 mov     rcx, rdi
.text:0000000000003243                 xor     esi, esi
.text:0000000000003245                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000324B                 add     rcx, rbp
.text:000000000000324E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003253                 jmp     loc_330E
.text:0000000000003253 ; ---------------------------------------------------------------------------
.text:0000000000003258                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003260                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003265                 setz    al
.text:0000000000003268                 test    r9b, r9b
.text:000000000000326B                 jnz     loc_3720
.text:0000000000003271                 mov     esi, r8d
.text:0000000000003274                 xor     esi, 1
.text:0000000000003277                 and     al, sil
.text:000000000000327A                 jz      short loc_32AB
.text:000000000000327C                 cmp     r13, r15
.text:000000000000327F                 jbe     short loc_3286
.text:0000000000003281                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003286
.text:0000000000003286 loc_3286:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003286                 lea     rsi, [r15+1]
.text:000000000000328A                 cmp     r13, rsi
.text:000000000000328D                 jbe     short loc_3295
.text:000000000000328F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003295
.text:0000000000003295 loc_3295:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003295                 lea     rsi, [r15+2]
.text:0000000000003299                 cmp     r13, rsi
.text:000000000000329C                 jbe     short loc_32A4
.text:000000000000329E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000032A4
.text:00000000000032A4 loc_32A4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000032A4                 add     r15, 3
.text:00000000000032A8                 mov     r8d, eax
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000032AB                 cmp     r13, r15
.text:00000000000032AE                 jbe     short loc_32B5
.text:00000000000032B0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000032B5
.text:00000000000032B5 loc_32B5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000032B5                 lea     rax, [r15+1]
.text:00000000000032B9                 cmp     r13, rax
.text:00000000000032BC                 jbe     short loc_32CB
.text:00000000000032BE                 mov     eax, ebx
.text:00000000000032C0                 shr     al, 6
.text:00000000000032C3                 add     eax, 30h ; '0'
.text:00000000000032C6                 mov     [r14+r15+1], al
.text:00000000000032CB
.text:00000000000032CB loc_32CB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000032CB                 lea     rax, [r15+2]
.text:00000000000032CF                 cmp     r13, rax
.text:00000000000032D2                 jbe     short loc_32E4
.text:00000000000032D4                 mov     eax, ebx
.text:00000000000032D6                 shr     al, 3
.text:00000000000032D9                 and     eax, 7
.text:00000000000032DC                 add     eax, 30h ; '0'
.text:00000000000032DF                 mov     [r14+r15+2], al
.text:00000000000032E4
.text:00000000000032E4 loc_32E4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000032E4                 and     ebx, 7
.text:00000000000032E7                 add     rbp, 1
.text:00000000000032EB                 add     r15, 3
.text:00000000000032EF                 add     ebx, 30h ; '0'
.text:00000000000032F2                 cmp     rbp, rcx
.text:00000000000032F5                 jnb     loc_2AE0
.text:00000000000032FB                 mov     esi, edx
.text:00000000000032FD
.text:00000000000032FD loc_32FD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000032FD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000032FD                 cmp     r13, r15
.text:0000000000003300                 jbe     short loc_3306
.text:0000000000003302                 mov     [r14+r15], bl
.text:0000000000003306
.text:0000000000003306 loc_3306:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003306                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000330A                 add     r15, 1
.text:000000000000330E
.text:000000000000330E loc_330E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000330E                 test    dl, dl
.text:0000000000003310                 jnz     loc_3260
.text:0000000000003316                 mov     eax, esi
.text:0000000000003318                 xor     eax, 1
.text:000000000000331B                 and     eax, r8d
.text:000000000000331E                 test    r10b, r10b
.text:0000000000003321                 jz      short loc_3331
.text:0000000000003323                 cmp     r13, r15
.text:0000000000003326                 jbe     short loc_332D
.text:0000000000003328                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000332D
.text:000000000000332D loc_332D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000332D                 add     r15, 1
.text:0000000000003331
.text:0000000000003331 loc_3331:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003331                 add     rbp, 1
.text:0000000000003335                 cmp     rbp, rcx
.text:0000000000003338                 jnb     loc_2ABC
.text:000000000000333E                 test    al, al
.text:0000000000003340                 jz      loc_373E
.text:0000000000003346                 cmp     r13, r15
.text:0000000000003349                 jbe     short loc_3350
.text:000000000000334B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003350                 lea     rax, [r15+1]
.text:0000000000003354                 cmp     r13, rax
.text:0000000000003357                 jbe     short loc_335F
.text:0000000000003359                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000335F
.text:000000000000335F loc_335F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000335F                 add     r15, 2
.text:0000000000003363                 xor     r10d, r10d
.text:0000000000003366                 xor     r8d, r8d
.text:0000000000003369                 jmp     short loc_32FD
.text:0000000000003369 ; ---------------------------------------------------------------------------
.text:000000000000336B                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003370                 cmp     r15, 1
.text:0000000000003374                 jz      loc_31D9
.text:000000000000337A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000337F                 lea     rcx, [rdi+r15]
.text:0000000000003383                 lea     rdx, [rdi+r14+1]
.text:0000000000003388                 lea     r8, [rcx+r14]
.text:000000000000338C                 jmp     short loc_339D
.text:000000000000338C ; ---------------------------------------------------------------------------
.text:000000000000338E                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003390                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003390                 add     rdx, 1
.text:0000000000003394                 cmp     r8, rdx
.text:0000000000003397                 jz      loc_31D9
.text:000000000000339D
.text:000000000000339D loc_339D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000339D                 movzx   ecx, byte ptr [rdx]
.text:00000000000033A0                 sub     ecx, 5Bh ; '['
.text:00000000000033A3                 cmp     cl, 21h ; '!'
.text:00000000000033A6                 ja      short loc_3390
.text:00000000000033A8                 mov     esi, 1
.text:00000000000033AD                 shl     rsi, cl
.text:00000000000033B0                 mov     rcx, rsi
.text:00000000000033B3                 mov     rsi, 20000002Bh
.text:00000000000033BD                 test    rcx, rsi
.text:00000000000033C0                 jz      short loc_3390
.text:00000000000033C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000033C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000033CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000033D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033D9
.text:00000000000033D9 loc_33D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000033D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000033D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000033DE                 jz      short loc_33F0
.text:00000000000033E0                 test    al, al
.text:00000000000033E2                 mov     eax, 4
.text:00000000000033E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000033EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000033F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000033F0                 sub     rsp, 8
.text:00000000000033F4                 mov     rcx, rbp
.text:00000000000033F7                 mov     rsi, r13
.text:00000000000033FA                 push    [rsp+0F0h+var_88]
.text:00000000000033FE                 push    [rsp+0F8h+var_80]
.text:0000000000003402                 mov     rdi, r14
.text:0000000000003405                 push    0
.text:0000000000003407                 mov     r9d, [rsp+108h+var_70]
.text:000000000000340F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003414                 mov     rdx, [rsp+108h+s]
.text:0000000000003419                 and     r9d, 0FFFFFFFDh
.text:000000000000341D                 call    quotearg_buffer_restyled
.text:0000000000003422                 add     rsp, 20h
.text:0000000000003426                 mov     r15, rax
.text:0000000000003429
.text:0000000000003429 loc_3429:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003429                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003429                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003431                 xor     rbx, fs:28h
.text:000000000000343A                 mov     rax, r15
.text:000000000000343D                 jnz     loc_3A43
.text:0000000000003443                 add     rsp, 0B8h
.text:000000000000344A                 pop     rbx
.text:000000000000344B                 pop     rbp
.text:000000000000344C                 pop     r12
.text:000000000000344E                 pop     r13
.text:0000000000003450                 pop     r14
.text:0000000000003452                 pop     r15
.text:0000000000003454                 retn
.text:0000000000003454 ; ---------------------------------------------------------------------------
.text:0000000000003455                 align 8
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003458                 mov     rbp, r11
.text:000000000000345B                 jmp     loc_33D9
.text:0000000000003460 ; ---------------------------------------------------------------------------
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003460                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003460                 cmp     r13, r15
.text:0000000000003463                 jbe     short loc_346A
.text:0000000000003465                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000346A
.text:000000000000346A loc_346A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000346A                 lea     rax, [r15+1]
.text:000000000000346E                 cmp     r13, rax
.text:0000000000003471                 jbe     short loc_3479
.text:0000000000003473                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003479
.text:0000000000003479 loc_3479:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003479                 lea     rax, [r15+2]
.text:000000000000347D                 cmp     r13, rax
.text:0000000000003480                 jbe     loc_3A72
.text:0000000000003486                 mov     rdx, r13
.text:0000000000003489                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000348F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003494                 jmp     loc_3072
.text:0000000000003499 ; ---------------------------------------------------------------------------
.text:0000000000003499
.text:0000000000003499 loc_3499:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003499                 mov     eax, r12d
.text:000000000000349C                 mov     ebx, 30h ; '0'
.text:00000000000034A1                 xor     r12d, r12d
.text:00000000000034A4                 jmp     loc_2AA9
.text:00000000000034A9 ; ---------------------------------------------------------------------------
.text:00000000000034A9
.text:00000000000034A9 loc_34A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000034A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000034AF                 jmp     loc_2E79
.text:00000000000034B4 ; ---------------------------------------------------------------------------
.text:00000000000034B4
.text:00000000000034B4 loc_34B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000034B4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000034B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000034B6                 jnz     loc_28E3        ; jumptable 00000000000121F1 case 1
.text:00000000000034BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000034C1
.text:00000000000034C1 loc_34C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000034C1                 test    r13, r13
.text:00000000000034C4                 jnz     loc_3A5A
.text:00000000000034CA                 lea     rax, asc_596D   ; "'"
.text:00000000000034D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000034DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000034DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000034E4                 xor     r12d, r12d
.text:00000000000034E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000034EC                 mov     [rsp+0E8h+n], 1
.text:00000000000034F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000034FA                 mov     r15d, 1
.text:0000000000003500                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003508                 jmp     loc_2923
.text:0000000000003508 ; ---------------------------------------------------------------------------
.text:000000000000350D                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:0000000000003510                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003512                 jnz     loc_390D
.text:0000000000003518                 test    r13, r13
.text:000000000000351B                 jz      loc_3746
.text:0000000000003521                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003525                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000352A                 xor     r12d, r12d
.text:000000000000352D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003532                 mov     [rsp+0E8h+var_98], 0
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000353B                 lea     rax, unk_596B
.text:0000000000003542                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003547                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000354C                 mov     [rsp+0E8h+n], 1
.text:0000000000003555                 mov     r15d, 1
.text:000000000000355B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003560                 jmp     loc_2923
.text:0000000000003565 ; ---------------------------------------------------------------------------
.text:0000000000003565
.text:0000000000003565 loc_3565:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003565                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:0000000000003565                 lea     rax, unk_596B   ; jumptable 00000000000121F1 case 6
.text:000000000000356C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003571                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003576                 xor     r12d, r12d
.text:0000000000003579                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003582                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003587                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000358C                 mov     [rsp+0E8h+n], 1
.text:0000000000003595                 xor     r15d, r15d
.text:0000000000003598                 mov     [rsp+0E8h+s2], rax
.text:000000000000359D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000035A5                 jmp     loc_2923
.text:00000000000035AA ; ---------------------------------------------------------------------------
.text:00000000000035AA
.text:00000000000035AA loc_35AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035AA                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000035AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000035AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035B4                 xor     r12d, r12d
.text:00000000000035B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000035C5                 xor     r15d, r15d
.text:00000000000035C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000035CD                 mov     [rsp+0E8h+n], 0
.text:00000000000035D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000035DF                 jmp     loc_2923
.text:00000000000035E4 ; ---------------------------------------------------------------------------
.text:00000000000035E4
.text:00000000000035E4 loc_35E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035E4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000035E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000035E9                 jz      short loc_3641
.text:00000000000035EB                 lea     rsi, asc_596F   ; "`"
.text:00000000000035F2                 xor     edi, edi        ; domainname
.text:00000000000035F4                 mov     edx, 5          ; category
.text:00000000000035F9                 call    _dcgettext
.text:00000000000035FE                 mov     rcx, rax
.text:0000000000003601                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003606                 lea     rax, asc_596F   ; "`"
.text:000000000000360D                 cmp     rcx, rax
.text:0000000000003610                 jz      loc_39AE
.text:0000000000003616
.text:0000000000003616 loc_3616:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003616                 lea     rsi, asc_596D   ; "'"
.text:000000000000361D                 xor     edi, edi        ; domainname
.text:000000000000361F                 mov     edx, 5          ; category
.text:0000000000003624                 call    _dcgettext
.text:0000000000003629                 mov     rcx, rax
.text:000000000000362C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003631                 lea     rax, asc_596D   ; "'"
.text:0000000000003638                 cmp     rcx, rax
.text:000000000000363B                 jz      loc_39C4
.text:0000000000003641
.text:0000000000003641 loc_3641:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003641                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003641                 xor     r15d, r15d
.text:0000000000003644                 test    ebx, ebx
.text:0000000000003646                 jz      loc_380D
.text:000000000000364C
.text:000000000000364C loc_364C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000364C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000364C                 test    ebx, ebx
.text:000000000000364E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003653                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003658                 xor     r12d, r12d
.text:000000000000365B                 mov     rdi, rbx        ; s
.text:000000000000365E                 call    _strlen
.text:0000000000003663                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003668                 mov     [rsp+0E8h+n], rax
.text:000000000000366D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003672                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003677                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003680                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003685                 jmp     loc_2923
.text:000000000000368A ; ---------------------------------------------------------------------------
.text:000000000000368A
.text:000000000000368A loc_368A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000368A                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:000000000000368A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000368F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003694                 xor     r12d, r12d
.text:0000000000003697                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036A5                 xor     r15d, r15d
.text:00000000000036A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000036AD                 mov     [rsp+0E8h+n], 0
.text:00000000000036B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000036BF                 jmp     loc_2923
.text:00000000000036C4 ; ---------------------------------------------------------------------------
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036C4                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000036C4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000036C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000036CE                 xor     r12d, r12d
.text:00000000000036D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000036DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000036E4                 jmp     loc_2903
.text:00000000000036E9 ; ---------------------------------------------------------------------------
.text:00000000000036E9
.text:00000000000036E9 loc_36E9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000036E9                 cmp     r13, r15
.text:00000000000036EC                 jbe     short loc_36F3
.text:00000000000036EE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000036F3
.text:00000000000036F3 loc_36F3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000036F3                 lea     rax, [rcx+2]
.text:00000000000036F7                 cmp     r13, rax
.text:00000000000036FA                 jbe     short loc_3702
.text:00000000000036FC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003702
.text:0000000000003702 loc_3702:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003702                 mov     eax, r12d
.text:0000000000003705                 lea     r15, [rcx+3]
.text:0000000000003709                 xor     r12d, r12d
.text:000000000000370C                 mov     ebx, 30h ; '0'
.text:0000000000003711                 jmp     loc_2A78
.text:0000000000003711 ; ---------------------------------------------------------------------------
.text:0000000000003716                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003720                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003725                 mov     rbp, r11
.text:0000000000003728                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000372C                 jmp     loc_33D9
.text:0000000000003731 ; ---------------------------------------------------------------------------
.text:0000000000003731
.text:0000000000003731 loc_3731:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003731                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003736                 xor     r12d, r12d
.text:0000000000003739                 jmp     loc_3240
.text:000000000000373E ; ---------------------------------------------------------------------------
.text:000000000000373E
.text:000000000000373E loc_373E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000373E                 xor     r10d, r10d
.text:0000000000003741                 jmp     loc_32FD
.text:0000000000003746 ; ---------------------------------------------------------------------------
.text:0000000000003746
.text:0000000000003746 loc_3746:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003746                 mov     [rsp+0E8h+var_98], 0
.text:000000000000374F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003754                 xor     r12d, r12d
.text:0000000000003757                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000375C                 jmp     loc_353B
.text:0000000000003761 ; ---------------------------------------------------------------------------
.text:0000000000003761
.text:0000000000003761 loc_3761:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003761                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003766                 mov     rsi, r14
.text:0000000000003769                 mov     rcx, r13
.text:000000000000376C                 mov     rax, rbx
.text:000000000000376F                 mov     rdi, rbx
.text:0000000000003772                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003778                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000377D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003785                 cmp     rsi, r11
.text:0000000000003788                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000378E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003796                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000379B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037A0                 jnb     short loc_37C8
.text:00000000000037A2                 cmp     byte ptr [rcx], 0
.text:00000000000037A5                 jnz     short loc_37B7
.text:00000000000037A7                 jmp     short loc_37C8
.text:00000000000037A7 ; ---------------------------------------------------------------------------
.text:00000000000037A9                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000037B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000037B5                 jz      short loc_37C5
.text:00000000000037B7
.text:00000000000037B7 loc_37B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000037B7                 add     rax, 1
.text:00000000000037BB                 lea     rdx, [rbp+rax+0]
.text:00000000000037C0                 cmp     r11, rdx
.text:00000000000037C3                 ja      short loc_37B0
.text:00000000000037C5
.text:00000000000037C5 loc_37C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000037C5                 mov     rdi, rax
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000037C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000037C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000037CD                 xor     r12d, r12d
.text:00000000000037D0                 jmp     loc_3236
.text:00000000000037D5 ; ---------------------------------------------------------------------------
.text:00000000000037D5
.text:00000000000037D5 loc_37D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000037D5                 mov     rdi, rbx
.text:00000000000037D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000037DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000037E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000037E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000037F1                 xor     r12d, r12d
.text:00000000000037F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003803                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003808                 jmp     loc_3236
.text:000000000000380D ; ---------------------------------------------------------------------------
.text:000000000000380D
.text:000000000000380D loc_380D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000380D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003812                 movzx   eax, byte ptr [rdx]
.text:0000000000003815                 test    al, al
.text:0000000000003817                 jz      loc_364C
.text:000000000000381D                 nop     dword ptr [rax]
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003820                 cmp     r13, r15
.text:0000000000003823                 jbe     short loc_3829
.text:0000000000003825                 mov     [r14+r15], al
.text:0000000000003829
.text:0000000000003829 loc_3829:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003829                 add     r15, 1
.text:000000000000382D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003832                 test    al, al
.text:0000000000003834                 jnz     short loc_3820
.text:0000000000003836                 jmp     loc_364C
.text:000000000000383B ; ---------------------------------------------------------------------------
.text:000000000000383B
.text:000000000000383B loc_383B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000383B                 mov     eax, edx
.text:000000000000383D                 jmp     loc_2D97
.text:0000000000003842 ; ---------------------------------------------------------------------------
.text:0000000000003842
.text:0000000000003842 loc_3842:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003842                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003846                 cmp     bl, 3Eh ; '>'
.text:0000000000003849                 ja      loc_30C0
.text:000000000000384F                 mov     rax, 7000A38200000000h
.text:0000000000003859                 bt      rax, rbx
.text:000000000000385D                 jnb     loc_30C0
.text:0000000000003863                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003868                 jnz     loc_3A52
.text:000000000000386E                 cmp     r13, r15
.text:0000000000003871                 jbe     short loc_3878
.text:0000000000003873                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003878
.text:0000000000003878 loc_3878:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003878                 lea     rax, [r15+1]
.text:000000000000387C                 cmp     r13, rax
.text:000000000000387F                 jbe     short loc_3887
.text:0000000000003881                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003887
.text:0000000000003887 loc_3887:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003887                 lea     rax, [r15+2]
.text:000000000000388B                 cmp     r13, rax
.text:000000000000388E                 jbe     short loc_3896
.text:0000000000003890                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003896
.text:0000000000003896 loc_3896:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003896                 lea     rax, [r15+3]
.text:000000000000389A                 cmp     r13, rax
.text:000000000000389D                 jbe     short loc_38A5
.text:000000000000389F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000038A5
.text:00000000000038A5 loc_38A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000038A5                 add     r15, 4
.text:00000000000038A9                 xor     edx, edx
.text:00000000000038AB                 xor     r12d, r12d
.text:00000000000038AE                 xor     eax, eax
.text:00000000000038B0                 mov     rbp, rcx
.text:00000000000038B3                 jmp     loc_2A78
.text:00000000000038B8 ; ---------------------------------------------------------------------------
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038B8                                         ; DATA XREF: .rodata:jpt_28E1↓o
.text:00000000000038B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000038BA                 jz      loc_3A48
.text:00000000000038C0                 lea     rax, asc_596D   ; "'"
.text:00000000000038C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038D1                 xor     r12d, r12d
.text:00000000000038D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000038E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000038E7                 mov     [rsp+0E8h+n], 1
.text:00000000000038F0                 xor     r15d, r15d
.text:00000000000038F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000038F8                 jmp     loc_2923
.text:00000000000038F8 ; ---------------------------------------------------------------------------
.text:00000000000038FD                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003900                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003900                 mov     rbp, r11
.text:0000000000003903                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003908                 jmp     loc_33D9
.text:000000000000390D ; ---------------------------------------------------------------------------
.text:000000000000390D
.text:000000000000390D loc_390D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000390D                 lea     rax, unk_596B
.text:0000000000003914                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003919                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000391E                 xor     r12d, r12d
.text:0000000000003921                 mov     [rsp+0E8h+var_98], 0
.text:000000000000392A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000392F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003934                 mov     [rsp+0E8h+n], 1
.text:000000000000393D                 xor     r15d, r15d
.text:0000000000003940                 mov     [rsp+0E8h+s2], rax
.text:0000000000003945                 jmp     loc_2923
.text:000000000000394A ; ---------------------------------------------------------------------------
.text:000000000000394A
.text:000000000000394A loc_394A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000394A                 mov     eax, edx
.text:000000000000394C
.text:000000000000394C loc_394C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000394C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000394C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003951                 test    rbx, rbx
.text:0000000000003954                 jz      short loc_3982
.text:0000000000003956                 test    al, al
.text:0000000000003958                 jz      short loc_3982
.text:000000000000395A                 movzx   ecx, byte ptr [rbx]
.text:000000000000395D                 mov     rax, rbx
.text:0000000000003960                 test    cl, cl
.text:0000000000003962                 jz      short loc_3982
.text:0000000000003964                 mov     rdx, r15
.text:0000000000003967                 sub     rax, r15
.text:000000000000396A
.text:000000000000396A loc_396A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000396A                 cmp     r13, rdx
.text:000000000000396D                 jbe     short loc_3973
.text:000000000000396F                 mov     [r14+rdx], cl
.text:0000000000003973
.text:0000000000003973 loc_3973:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003973                 add     rdx, 1
.text:0000000000003977                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000397B                 test    cl, cl
.text:000000000000397D                 jnz     short loc_396A
.text:000000000000397F                 mov     r15, rdx
.text:0000000000003982
.text:0000000000003982 loc_3982:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003982                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003982                 cmp     r13, r15
.text:0000000000003985                 jbe     loc_3429
.text:000000000000398B                 mov     byte ptr [r14+r15], 0
.text:0000000000003990                 jmp     loc_3429
.text:0000000000003995 ; ---------------------------------------------------------------------------
.text:0000000000003995
.text:0000000000003995 loc_3995:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003995                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000399A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000399F                 mov     rbp, r11
.text:00000000000039A2                 setz    al
.text:00000000000039A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000039A9                 jmp     loc_33D9
.text:00000000000039AE ; ---------------------------------------------------------------------------
.text:00000000000039AE
.text:00000000000039AE loc_39AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000039AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000039B2                 mov     rdi, rcx
.text:00000000000039B5                 call    gettext_quote
.text:00000000000039BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039BF                 jmp     loc_3616
.text:00000000000039C4 ; ---------------------------------------------------------------------------
.text:00000000000039C4
.text:00000000000039C4 loc_39C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000039C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000039C8                 mov     rdi, rcx
.text:00000000000039CB                 call    gettext_quote
.text:00000000000039D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000039D5                 jmp     loc_3641
.text:00000000000039DA ; ---------------------------------------------------------------------------
.text:00000000000039DA
.text:00000000000039DA loc_39DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000039DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000039DF                 mov     rbp, r11
.text:00000000000039E2                 mov     eax, edx
.text:00000000000039E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000039E8                 jmp     loc_33D9
.text:00000000000039ED ; ---------------------------------------------------------------------------
.text:00000000000039ED
.text:00000000000039ED loc_39ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000039ED                 sub     rsp, 8
.text:00000000000039F1                 mov     r8d, 5
.text:00000000000039F7                 mov     rcx, r11
.text:00000000000039FA                 push    [rsp+0F0h+var_88]
.text:00000000000039FE                 push    [rsp+0F8h+var_80]
.text:0000000000003A02                 mov     rdi, r14
.text:0000000000003A05                 push    [rsp+100h+var_C8]
.text:0000000000003A09                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003A11                 mov     rdx, [rsp+108h+s]
.text:0000000000003A16                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003A1B                 call    quotearg_buffer_restyled
.text:0000000000003A20                 add     rsp, 20h
.text:0000000000003A24                 mov     r15, rax
.text:0000000000003A27                 jmp     loc_3429
.text:0000000000003A2C ; ---------------------------------------------------------------------------
.text:0000000000003A2C
.text:0000000000003A2C loc_3A2C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003A2C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003A31                 jmp     loc_394C
.text:0000000000003A36 ; ---------------------------------------------------------------------------
.text:0000000000003A36
.text:0000000000003A36 loc_3A36:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003A36                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A3E                 jmp     loc_33D9
.text:0000000000003A43 ; ---------------------------------------------------------------------------
.text:0000000000003A43
.text:0000000000003A43 loc_3A43:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003A43                 call    ___stack_chk_fail
.text:0000000000003A48 ; ---------------------------------------------------------------------------
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003A48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A4D                 jmp     loc_34C1
.text:0000000000003A52 ; ---------------------------------------------------------------------------
.text:0000000000003A52
.text:0000000000003A52 loc_3A52:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003A52                 mov     rbp, r11
.text:0000000000003A55                 jmp     loc_33F0
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5A
.text:0000000000003A5A loc_3A5A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003A5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A5F                 xor     eax, eax
.text:0000000000003A61                 xor     r12d, r12d
.text:0000000000003A64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A6D                 jmp     loc_3014
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A72
.text:0000000000003A72 loc_3A72:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003A72                 mov     rdx, r13
.text:0000000000003A75                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003A7A                 jmp     loc_3072
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A7F
.text:0000000000003A7F def_28E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003A7F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003A7F ; } // starts at 2850
.text:0000000000003A7F quotearg_buffer_restyled endp
.text:0000000000003A7F
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A84                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90
.text:0000000000003A90 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003A90                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003A90
.text:0000000000003A90 var_50          = qword ptr -50h
.text:0000000000003A90 var_48          = qword ptr -48h
.text:0000000000003A90 var_40          = dword ptr -40h
.text:0000000000003A90 var_3C          = dword ptr -3Ch
.text:0000000000003A90
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 push    r15
.text:0000000000003A92                 push    r14
.text:0000000000003A94                 movsxd  r15, edi
.text:0000000000003A97                 push    r13
.text:0000000000003A99                 push    r12
.text:0000000000003A9B                 mov     r14, rdx
.text:0000000000003A9E                 push    rbp
.text:0000000000003A9F                 push    rbx
.text:0000000000003AA0                 mov     rbp, rcx
.text:0000000000003AA3                 sub     rsp, 28h
.text:0000000000003AA7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003AAC                 call    ___errno_location
.text:0000000000003AB1                 mov     r13, rax
.text:0000000000003AB4                 mov     eax, [rax]
.text:0000000000003AB6                 test    r15d, r15d
.text:0000000000003AB9                 mov     rbx, cs:slotvec
.text:0000000000003AC0                 mov     [rsp+58h+var_40], eax
.text:0000000000003AC4                 js      loc_3C31
.text:0000000000003ACA                 cmp     cs:nslots, r15d
.text:0000000000003AD1                 jg      short loc_3B35
.text:0000000000003AD3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003ADA                 jz      loc_3C36
.text:0000000000003AE0                 lea     r12d, [r15+1]
.text:0000000000003AE4                 lea     rax, slotvec0
.text:0000000000003AEB                 movsxd  rsi, r12d
.text:0000000000003AEE                 shl     rsi, 4
.text:0000000000003AF2                 cmp     rbx, rax
.text:0000000000003AF5                 jz      loc_3C10
.text:0000000000003AFB                 mov     rdi, rbx
.text:0000000000003AFE                 call    xrealloc
.text:0000000000003B03                 mov     rbx, rax
.text:0000000000003B06                 mov     cs:slotvec, rax
.text:0000000000003B0D
.text:0000000000003B0D loc_3B0D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003B0D                 movsxd  rdi, cs:nslots
.text:0000000000003B14                 mov     edx, r12d
.text:0000000000003B17                 xor     esi, esi        ; c
.text:0000000000003B19                 sub     edx, edi
.text:0000000000003B1B                 shl     rdi, 4
.text:0000000000003B1F                 movsxd  rdx, edx
.text:0000000000003B22                 add     rdi, rbx        ; s
.text:0000000000003B25                 shl     rdx, 4          ; n
.text:0000000000003B29                 call    _memset
.text:0000000000003B2E                 mov     cs:nslots, r12d
.text:0000000000003B35
.text:0000000000003B35 loc_3B35:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003B35                 mov     eax, [rbp+4]
.text:0000000000003B38                 shl     r15, 4
.text:0000000000003B3C                 sub     rsp, 8
.text:0000000000003B40                 add     rbx, r15
.text:0000000000003B43                 lea     r15, [rbp+8]
.text:0000000000003B47                 mov     r8d, [rbp+0]
.text:0000000000003B4B                 mov     r11, [rbx]
.text:0000000000003B4E                 mov     r12, [rbx+8]
.text:0000000000003B52                 mov     rcx, r14
.text:0000000000003B55                 or      eax, 1
.text:0000000000003B58                 mov     [rsp+60h+var_3C], eax
.text:0000000000003B5C                 push    qword ptr [rbp+30h]
.text:0000000000003B5F                 mov     r9d, eax
.text:0000000000003B62                 push    qword ptr [rbp+28h]
.text:0000000000003B65                 push    r15
.text:0000000000003B67                 mov     rsi, r11
.text:0000000000003B6A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003B6F                 mov     rdi, r12
.text:0000000000003B72                 mov     [rsp+78h+var_48], r11
.text:0000000000003B77                 call    quotearg_buffer_restyled
.text:0000000000003B7C                 add     rsp, 20h
.text:0000000000003B80                 mov     r11, [rsp+58h+var_48]
.text:0000000000003B85                 cmp     r11, rax
.text:0000000000003B88                 ja      short loc_3BF1
.text:0000000000003B8A                 lea     rsi, [rax+1]
.text:0000000000003B8E                 lea     rax, slot0
.text:0000000000003B95                 cmp     r12, rax
.text:0000000000003B98                 mov     [rbx], rsi
.text:0000000000003B9B                 jz      short loc_3BAF
.text:0000000000003B9D                 mov     rdi, r12        ; ptr
.text:0000000000003BA0                 mov     [rsp+58h+var_48], rsi
.text:0000000000003BA5                 call    _free
.text:0000000000003BAA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003BAF
.text:0000000000003BAF loc_3BAF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003BAF                 mov     rdi, rsi
.text:0000000000003BB2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003BB7                 call    xmalloc
.text:0000000000003BBC                 sub     rsp, 8
.text:0000000000003BC0                 mov     [rbx+8], rax
.text:0000000000003BC4                 mov     r8d, [rbp+0]
.text:0000000000003BC8                 push    qword ptr [rbp+30h]
.text:0000000000003BCB                 push    qword ptr [rbp+28h]
.text:0000000000003BCE                 mov     rcx, r14
.text:0000000000003BD1                 push    r15
.text:0000000000003BD3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003BD8                 mov     rdi, rax
.text:0000000000003BDB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003BE0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003BE5                 mov     r12, rax
.text:0000000000003BE8                 call    quotearg_buffer_restyled
.text:0000000000003BED                 add     rsp, 20h
.text:0000000000003BF1
.text:0000000000003BF1 loc_3BF1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003BF1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003BF5                 mov     [r13+0], eax
.text:0000000000003BF9                 add     rsp, 28h
.text:0000000000003BFD                 mov     rax, r12
.text:0000000000003C00                 pop     rbx
.text:0000000000003C01                 pop     rbp
.text:0000000000003C02                 pop     r12
.text:0000000000003C04                 pop     r13
.text:0000000000003C06                 pop     r14
.text:0000000000003C08                 pop     r15
.text:0000000000003C0A                 retn
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0B                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003C10                 xor     edi, edi
.text:0000000000003C12                 call    xrealloc
.text:0000000000003C17                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003C1F                 mov     rbx, rax
.text:0000000000003C22                 mov     cs:slotvec, rax
.text:0000000000003C29                 movups  xmmword ptr [rax], xmm0
.text:0000000000003C2C                 jmp     loc_3B0D
.text:0000000000003C31 ; ---------------------------------------------------------------------------
.text:0000000000003C31
.text:0000000000003C31 loc_3C31:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003C31                 call    _abort
.text:0000000000003C36 ; ---------------------------------------------------------------------------
.text:0000000000003C36
.text:0000000000003C36 loc_3C36:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003C36                 call    xalloc_die
.text:0000000000003C36 ; } // starts at 3A90
.text:0000000000003C36 quotearg_n_options endp
.text:0000000000003C36
.text:0000000000003C36 ; ---------------------------------------------------------------------------
.text:0000000000003C3B                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003C40                 public clone_quoting_options
.text:0000000000003C40 clone_quoting_options proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    r12
.text:0000000000003C42                 push    rbp
.text:0000000000003C43                 push    rbx
.text:0000000000003C44                 mov     rbx, rdi
.text:0000000000003C47                 call    ___errno_location
.text:0000000000003C4C                 mov     r12d, [rax]
.text:0000000000003C4F                 mov     rbp, rax
.text:0000000000003C52                 lea     rax, default_quoting_options
.text:0000000000003C59                 test    rbx, rbx
.text:0000000000003C5C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003C61                 cmovz   rbx, rax
.text:0000000000003C65                 mov     rdi, rbx        ; src
.text:0000000000003C68                 call    xmemdup
.text:0000000000003C6D                 mov     [rbp+0], r12d
.text:0000000000003C71                 pop     rbx
.text:0000000000003C72                 pop     rbp
.text:0000000000003C73                 pop     r12
.text:0000000000003C75                 retn
.text:0000000000003C75 ; } // starts at 3C40
.text:0000000000003C75 clone_quoting_options endp
.text:0000000000003C75
.text:0000000000003C75 ; ---------------------------------------------------------------------------
.text:0000000000003C76                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80                 public get_quoting_style
.text:0000000000003C80 get_quoting_style proc near
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 lea     rax, default_quoting_options
.text:0000000000003C87                 test    rdi, rdi
.text:0000000000003C8A                 cmovz   rdi, rax
.text:0000000000003C8E                 mov     eax, [rdi]
.text:0000000000003C90                 retn
.text:0000000000003C90 ; } // starts at 3C80
.text:0000000000003C90 get_quoting_style endp
.text:0000000000003C90
.text:0000000000003C90 ; ---------------------------------------------------------------------------
.text:0000000000003C91                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public set_quoting_style
.text:0000000000003CA0 set_quoting_style proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 lea     rax, default_quoting_options
.text:0000000000003CA7                 test    rdi, rdi
.text:0000000000003CAA                 cmovz   rdi, rax
.text:0000000000003CAE                 mov     [rdi], esi
.text:0000000000003CB0                 retn
.text:0000000000003CB0 ; } // starts at 3CA0
.text:0000000000003CB0 set_quoting_style endp
.text:0000000000003CB0
.text:0000000000003CB0 ; ---------------------------------------------------------------------------
.text:0000000000003CB1                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0 ; Attributes: info_from_lumina
.text:0000000000003CC0
.text:0000000000003CC0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003CC0                 public set_char_quoting
.text:0000000000003CC0 set_char_quoting proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 lea     rax, default_quoting_options
.text:0000000000003CC7                 test    rdi, rdi
.text:0000000000003CCA                 mov     ecx, esi
.text:0000000000003CCC                 cmovz   rdi, rax
.text:0000000000003CD0                 mov     eax, esi
.text:0000000000003CD2                 and     ecx, 1Fh
.text:0000000000003CD5                 shr     al, 5
.text:0000000000003CD8                 movzx   eax, al
.text:0000000000003CDB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003CE0                 mov     esi, [rdi]
.text:0000000000003CE2                 mov     eax, esi
.text:0000000000003CE4                 shr     eax, cl
.text:0000000000003CE6                 xor     edx, eax
.text:0000000000003CE8                 and     eax, 1
.text:0000000000003CEB                 and     edx, 1
.text:0000000000003CEE                 shl     edx, cl
.text:0000000000003CF0                 xor     edx, esi
.text:0000000000003CF2                 mov     [rdi], edx
.text:0000000000003CF4                 retn
.text:0000000000003CF4 ; } // starts at 3CC0
.text:0000000000003CF4 set_char_quoting endp
.text:0000000000003CF4
.text:0000000000003CF4 ; ---------------------------------------------------------------------------
.text:0000000000003CF5                 align 20h
.text:0000000000003D00
.text:0000000000003D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D00
.text:0000000000003D00
.text:0000000000003D00                 public set_quoting_flags
.text:0000000000003D00 set_quoting_flags proc near
.text:0000000000003D00 ; __unwind {
.text:0000000000003D00                 lea     rax, default_quoting_options
.text:0000000000003D07                 test    rdi, rdi
.text:0000000000003D0A                 cmovz   rdi, rax
.text:0000000000003D0E                 mov     eax, [rdi+4]
.text:0000000000003D11                 mov     [rdi+4], esi
.text:0000000000003D14                 retn
.text:0000000000003D14 ; } // starts at 3D00
.text:0000000000003D14 set_quoting_flags endp
.text:0000000000003D14
.text:0000000000003D14 ; ---------------------------------------------------------------------------
.text:0000000000003D15                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20 ; Attributes: info_from_lumina
.text:0000000000003D20
.text:0000000000003D20 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003D20                 public set_custom_quoting
.text:0000000000003D20 set_custom_quoting proc near
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 lea     rax, default_quoting_options
.text:0000000000003D27                 test    rdi, rdi
.text:0000000000003D2A                 cmovz   rdi, rax
.text:0000000000003D2E                 test    rsi, rsi
.text:0000000000003D31                 mov     dword ptr [rdi], 0Ah
.text:0000000000003D37                 jz      short loc_3D47
.text:0000000000003D39                 test    rdx, rdx
.text:0000000000003D3C                 jz      short loc_3D47
.text:0000000000003D3E                 mov     [rdi+28h], rsi
.text:0000000000003D42                 mov     [rdi+30h], rdx
.text:0000000000003D46                 retn
.text:0000000000003D47 ; ---------------------------------------------------------------------------
.text:0000000000003D47
.text:0000000000003D47 loc_3D47:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003D47                                         ; set_custom_quoting+1C↑j
.text:0000000000003D47                 sub     rsp, 8
.text:0000000000003D4B                 call    _abort
.text:0000000000003D4B ; } // starts at 3D20
.text:0000000000003D4B set_custom_quoting endp
.text:0000000000003D4B
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50 ; Attributes: info_from_lumina
.text:0000000000003D50
.text:0000000000003D50 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003D50                 public quotearg_buffer
.text:0000000000003D50 quotearg_buffer proc near
.text:0000000000003D50
.text:0000000000003D50 var_40          = qword ptr -40h
.text:0000000000003D50
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 push    r15
.text:0000000000003D52                 push    r14
.text:0000000000003D54                 lea     rax, default_quoting_options
.text:0000000000003D5B                 push    r13
.text:0000000000003D5D                 push    r12
.text:0000000000003D5F                 mov     r13, rdi
.text:0000000000003D62                 push    rbp
.text:0000000000003D63                 push    rbx
.text:0000000000003D64                 mov     rbx, r8
.text:0000000000003D67                 mov     r14, rsi
.text:0000000000003D6A                 mov     r15, rdx
.text:0000000000003D6D                 sub     rsp, 18h
.text:0000000000003D71                 test    r8, r8
.text:0000000000003D74                 cmovz   rbx, rax
.text:0000000000003D78                 mov     [rsp+48h+var_40], rcx
.text:0000000000003D7D                 call    ___errno_location
.text:0000000000003D82                 mov     r12d, [rax]
.text:0000000000003D85                 mov     rbp, rax
.text:0000000000003D88                 lea     rax, [rbx+8]
.text:0000000000003D8C                 sub     rsp, 8
.text:0000000000003D90                 mov     r9d, [rbx+4]
.text:0000000000003D94                 push    qword ptr [rbx+30h]
.text:0000000000003D97                 mov     r8d, [rbx]
.text:0000000000003D9A                 push    qword ptr [rbx+28h]
.text:0000000000003D9D                 mov     rdx, r15
.text:0000000000003DA0                 push    rax
.text:0000000000003DA1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003DA6                 mov     rsi, r14
.text:0000000000003DA9                 mov     rdi, r13
.text:0000000000003DAC                 call    quotearg_buffer_restyled
.text:0000000000003DB1                 mov     [rbp+0], r12d
.text:0000000000003DB5                 add     rsp, 38h
.text:0000000000003DB9                 pop     rbx
.text:0000000000003DBA                 pop     rbp
.text:0000000000003DBB                 pop     r12
.text:0000000000003DBD                 pop     r13
.text:0000000000003DBF                 pop     r14
.text:0000000000003DC1                 pop     r15
.text:0000000000003DC3                 retn
.text:0000000000003DC3 ; } // starts at 3D50
.text:0000000000003DC3 quotearg_buffer endp
.text:0000000000003DC3
.text:0000000000003DC3 ; ---------------------------------------------------------------------------
.text:0000000000003DC4                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DD0
.text:0000000000003DD0 ; Attributes: info_from_lumina
.text:0000000000003DD0
.text:0000000000003DD0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003DD0                 public quotearg_alloc_mem
.text:0000000000003DD0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003DD0
.text:0000000000003DD0 var_5C          = dword ptr -5Ch
.text:0000000000003DD0 var_58          = qword ptr -58h
.text:0000000000003DD0 var_50          = qword ptr -50h
.text:0000000000003DD0 var_48          = qword ptr -48h
.text:0000000000003DD0 var_40          = qword ptr -40h
.text:0000000000003DD0
.text:0000000000003DD0 ; __unwind {
.text:0000000000003DD0                 push    r15
.text:0000000000003DD2                 push    r14
.text:0000000000003DD4                 lea     rax, default_quoting_options
.text:0000000000003DDB                 push    r13
.text:0000000000003DDD                 push    r12
.text:0000000000003DDF                 mov     r12, rdx
.text:0000000000003DE2                 push    rbp
.text:0000000000003DE3                 push    rbx
.text:0000000000003DE4                 mov     rbx, rcx
.text:0000000000003DE7                 mov     r14, rdi
.text:0000000000003DEA                 mov     r15, rsi
.text:0000000000003DED                 sub     rsp, 38h
.text:0000000000003DF1                 test    rcx, rcx
.text:0000000000003DF4                 cmovz   rbx, rax
.text:0000000000003DF8                 xor     ebp, ebp
.text:0000000000003DFA                 call    ___errno_location
.text:0000000000003DFF                 test    r12, r12
.text:0000000000003E02                 mov     r13, rax
.text:0000000000003E05                 mov     eax, [rax]
.text:0000000000003E07                 setz    bpl
.text:0000000000003E0B                 or      ebp, [rbx+4]
.text:0000000000003E0E                 lea     r10, [rbx+8]
.text:0000000000003E12                 sub     rsp, 8
.text:0000000000003E16                 mov     r8d, [rbx]
.text:0000000000003E19                 mov     rcx, r15
.text:0000000000003E1C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003E20                 push    qword ptr [rbx+30h]
.text:0000000000003E23                 mov     rdx, r14
.text:0000000000003E26                 push    qword ptr [rbx+28h]
.text:0000000000003E29                 push    r10
.text:0000000000003E2B                 xor     esi, esi
.text:0000000000003E2D                 mov     r9d, ebp
.text:0000000000003E30                 xor     edi, edi
.text:0000000000003E32                 mov     [rsp+88h+var_48], r10
.text:0000000000003E37                 call    quotearg_buffer_restyled
.text:0000000000003E3C                 lea     rsi, [rax+1]
.text:0000000000003E40                 mov     [rsp+88h+var_40], rax
.text:0000000000003E45                 add     rsp, 20h
.text:0000000000003E49                 mov     rdi, rsi
.text:0000000000003E4C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003E51                 call    xmalloc
.text:0000000000003E56                 mov     [rsp+68h+var_58], rax
.text:0000000000003E5B                 sub     rsp, 8
.text:0000000000003E5F                 push    qword ptr [rbx+30h]
.text:0000000000003E62                 push    qword ptr [rbx+28h]
.text:0000000000003E65                 mov     r10, [rsp+80h+var_48]
.text:0000000000003E6A                 mov     r9d, ebp
.text:0000000000003E6D                 mov     r8d, [rbx]
.text:0000000000003E70                 mov     rcx, r15
.text:0000000000003E73                 mov     rdx, r14
.text:0000000000003E76                 mov     rdi, rax
.text:0000000000003E79                 push    r10
.text:0000000000003E7B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003E80                 call    quotearg_buffer_restyled
.text:0000000000003E85                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003E89                 add     rsp, 20h
.text:0000000000003E8D                 test    r12, r12
.text:0000000000003E90                 mov     [r13+0], eax
.text:0000000000003E94                 jz      short loc_3E9F
.text:0000000000003E96                 mov     r11, [rsp+68h+var_40]
.text:0000000000003E9B                 mov     [r12], r11
.text:0000000000003E9F
.text:0000000000003E9F loc_3E9F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000003E9F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003EA4                 add     rsp, 38h
.text:0000000000003EA8                 pop     rbx
.text:0000000000003EA9                 pop     rbp
.text:0000000000003EAA                 pop     r12
.text:0000000000003EAC                 pop     r13
.text:0000000000003EAE                 pop     r14
.text:0000000000003EB0                 pop     r15
.text:0000000000003EB2                 retn
.text:0000000000003EB2 ; } // starts at 3DD0
.text:0000000000003EB2 quotearg_alloc_mem endp
.text:0000000000003EB2
.text:0000000000003EB2 ; ---------------------------------------------------------------------------
.text:0000000000003EB3                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public quotearg_alloc
.text:0000000000003EC0 quotearg_alloc  proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 mov     rcx, rdx
.text:0000000000003EC3                 xor     edx, edx
.text:0000000000003EC5                 jmp     quotearg_alloc_mem
.text:0000000000003EC5 ; } // starts at 3EC0
.text:0000000000003EC5 quotearg_alloc  endp
.text:0000000000003EC5
.text:0000000000003EC5 ; ---------------------------------------------------------------------------
.text:0000000000003ECA                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0 ; Attributes: info_from_lumina
.text:0000000000003ED0
.text:0000000000003ED0 ; void __cdecl quotearg_free()
.text:0000000000003ED0                 public quotearg_free
.text:0000000000003ED0 quotearg_free   proc near
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 mov     eax, cs:nslots
.text:0000000000003ED6                 push    r12
.text:0000000000003ED8                 mov     r12, cs:slotvec
.text:0000000000003EDF                 push    rbp
.text:0000000000003EE0                 push    rbx
.text:0000000000003EE1                 cmp     eax, 1
.text:0000000000003EE4                 jle     short loc_3F11
.text:0000000000003EE6                 sub     eax, 2
.text:0000000000003EE9                 lea     rbx, [r12+18h]
.text:0000000000003EEE                 shl     rax, 4
.text:0000000000003EF2                 lea     rbp, [r12+rax+28h]
.text:0000000000003EF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003F00                 mov     rdi, [rbx]      ; ptr
.text:0000000000003F03                 add     rbx, 10h
.text:0000000000003F07                 call    _free
.text:0000000000003F0C                 cmp     rbx, rbp
.text:0000000000003F0F                 jnz     short loc_3F00
.text:0000000000003F11
.text:0000000000003F11 loc_3F11:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003F11                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003F16                 lea     rbx, slot0
.text:0000000000003F1D                 cmp     rdi, rbx
.text:0000000000003F20                 jz      short loc_3F39
.text:0000000000003F22                 call    _free
.text:0000000000003F27                 mov     cs:slotvec0, 100h
.text:0000000000003F32                 mov     cs:off_208078, rbx
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003F39                 lea     rbx, slotvec0
.text:0000000000003F40                 cmp     r12, rbx
.text:0000000000003F43                 jz      short loc_3F54
.text:0000000000003F45                 mov     rdi, r12        ; ptr
.text:0000000000003F48                 call    _free
.text:0000000000003F4D                 mov     cs:slotvec, rbx
.text:0000000000003F54
.text:0000000000003F54 loc_3F54:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003F54                 pop     rbx
.text:0000000000003F55                 mov     cs:nslots, 1
.text:0000000000003F5F                 pop     rbp
.text:0000000000003F60                 pop     r12
.text:0000000000003F62                 retn
.text:0000000000003F62 ; } // starts at 3ED0
.text:0000000000003F62 quotearg_free   endp
.text:0000000000003F62
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F63                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70
.text:0000000000003F70                 public quotearg_n
.text:0000000000003F70 quotearg_n      proc near
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 lea     rcx, default_quoting_options
.text:0000000000003F77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F7E                 jmp     quotearg_n_options
.text:0000000000003F7E ; } // starts at 3F70
.text:0000000000003F7E quotearg_n      endp
.text:0000000000003F7E
.text:0000000000003F7E ; ---------------------------------------------------------------------------
.text:0000000000003F83                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90
.text:0000000000003F90                 public quotearg_n_mem
.text:0000000000003F90 quotearg_n_mem  proc near
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 lea     rcx, default_quoting_options
.text:0000000000003F97                 jmp     quotearg_n_options
.text:0000000000003F97 ; } // starts at 3F90
.text:0000000000003F97 quotearg_n_mem  endp
.text:0000000000003F97
.text:0000000000003F97 ; ---------------------------------------------------------------------------
.text:0000000000003F9C                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FA0
.text:0000000000003FA0
.text:0000000000003FA0                 public quotearg
.text:0000000000003FA0 quotearg        proc near
.text:0000000000003FA0 ; __unwind {
.text:0000000000003FA0                 lea     rcx, default_quoting_options
.text:0000000000003FA7                 mov     rsi, rdi
.text:0000000000003FAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003FB1                 xor     edi, edi
.text:0000000000003FB3                 jmp     quotearg_n_options
.text:0000000000003FB3 ; } // starts at 3FA0
.text:0000000000003FB3 quotearg        endp
.text:0000000000003FB3
.text:0000000000003FB3 ; ---------------------------------------------------------------------------
.text:0000000000003FB8                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FC0
.text:0000000000003FC0
.text:0000000000003FC0                 public quotearg_mem
.text:0000000000003FC0 quotearg_mem    proc near
.text:0000000000003FC0 ; __unwind {
.text:0000000000003FC0                 lea     rcx, default_quoting_options
.text:0000000000003FC7                 mov     rdx, rsi
.text:0000000000003FCA                 mov     rsi, rdi
.text:0000000000003FCD                 xor     edi, edi
.text:0000000000003FCF                 jmp     quotearg_n_options
.text:0000000000003FCF ; } // starts at 3FC0
.text:0000000000003FCF quotearg_mem    endp
.text:0000000000003FCF
.text:0000000000003FCF ; ---------------------------------------------------------------------------
.text:0000000000003FD4                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0 ; Attributes: info_from_lumina
.text:0000000000003FE0
.text:0000000000003FE0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003FE0                 public quotearg_n_style
.text:0000000000003FE0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003FE0
.text:0000000000003FE0 var_48          = dword ptr -48h
.text:0000000000003FE0 var_44          = qword ptr -44h
.text:0000000000003FE0 var_3C          = qword ptr -3Ch
.text:0000000000003FE0 var_34          = qword ptr -34h
.text:0000000000003FE0 var_2C          = qword ptr -2Ch
.text:0000000000003FE0 var_24          = qword ptr -24h
.text:0000000000003FE0 var_1C          = qword ptr -1Ch
.text:0000000000003FE0 var_14          = dword ptr -14h
.text:0000000000003FE0 var_10          = qword ptr -10h
.text:0000000000003FE0
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 sub     rsp, 48h
.text:0000000000003FE4                 mov     rax, rdx
.text:0000000000003FE7                 mov     rdx, fs:28h
.text:0000000000003FF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003FF5                 xor     edx, edx
.text:0000000000003FF7                 cmp     esi, 0Ah
.text:0000000000003FFA                 jz      short loc_4064
.text:0000000000003FFC                 mov     [rsp+48h+var_48], esi
.text:0000000000003FFF                 mov     rcx, rsp
.text:0000000000004002                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004009                 mov     rsi, rax
.text:000000000000400C                 mov     [rsp+48h+var_44], 0
.text:0000000000004015                 mov     [rsp+48h+var_3C], 0
.text:000000000000401E                 mov     [rsp+48h+var_34], 0
.text:0000000000004027                 mov     [rsp+48h+var_2C], 0
.text:0000000000004030                 mov     [rsp+48h+var_24], 0
.text:0000000000004039                 mov     [rsp+48h+var_1C], 0
.text:0000000000004042                 mov     [rsp+48h+var_14], 0
.text:000000000000404A                 call    quotearg_n_options
.text:000000000000404F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004054                 xor     rcx, fs:28h
.text:000000000000405D                 jnz     short loc_4069
.text:000000000000405F                 add     rsp, 48h
.text:0000000000004063                 retn
.text:0000000000004064 ; ---------------------------------------------------------------------------
.text:0000000000004064
.text:0000000000004064 loc_4064:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004064                 call    _abort
.text:0000000000004069 ; ---------------------------------------------------------------------------
.text:0000000000004069
.text:0000000000004069 loc_4069:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004069                 call    ___stack_chk_fail
.text:0000000000004069 ; } // starts at 3FE0
.text:0000000000004069 quotearg_n_style endp
.text:0000000000004069
.text:0000000000004069 ; ---------------------------------------------------------------------------
.text:000000000000406E                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070 ; Attributes: info_from_lumina
.text:0000000000004070
.text:0000000000004070 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004070                 public quotearg_n_style_mem
.text:0000000000004070 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004070
.text:0000000000004070 var_48          = dword ptr -48h
.text:0000000000004070 var_44          = qword ptr -44h
.text:0000000000004070 var_3C          = qword ptr -3Ch
.text:0000000000004070 var_34          = qword ptr -34h
.text:0000000000004070 var_2C          = qword ptr -2Ch
.text:0000000000004070 var_24          = qword ptr -24h
.text:0000000000004070 var_1C          = qword ptr -1Ch
.text:0000000000004070 var_14          = dword ptr -14h
.text:0000000000004070 var_10          = qword ptr -10h
.text:0000000000004070
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 sub     rsp, 48h
.text:0000000000004074                 mov     rax, rdx
.text:0000000000004077                 mov     rdx, rcx
.text:000000000000407A                 mov     rcx, fs:28h
.text:0000000000004083                 mov     [rsp+48h+var_10], rcx
.text:0000000000004088                 xor     ecx, ecx
.text:000000000000408A                 cmp     esi, 0Ah
.text:000000000000408D                 jz      short loc_40F0
.text:000000000000408F                 mov     [rsp+48h+var_48], esi
.text:0000000000004092                 mov     rcx, rsp
.text:0000000000004095                 mov     rsi, rax
.text:0000000000004098                 mov     [rsp+48h+var_44], 0
.text:00000000000040A1                 mov     [rsp+48h+var_3C], 0
.text:00000000000040AA                 mov     [rsp+48h+var_34], 0
.text:00000000000040B3                 mov     [rsp+48h+var_2C], 0
.text:00000000000040BC                 mov     [rsp+48h+var_24], 0
.text:00000000000040C5                 mov     [rsp+48h+var_1C], 0
.text:00000000000040CE                 mov     [rsp+48h+var_14], 0
.text:00000000000040D6                 call    quotearg_n_options
.text:00000000000040DB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000040E0                 xor     rdx, fs:28h
.text:00000000000040E9                 jnz     short loc_40F5
.text:00000000000040EB                 add     rsp, 48h
.text:00000000000040EF                 retn
.text:00000000000040F0 ; ---------------------------------------------------------------------------
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000040F0                 call    _abort
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000040F5                 call    ___stack_chk_fail
.text:00000000000040F5 ; } // starts at 4070
.text:00000000000040F5 quotearg_n_style_mem endp
.text:00000000000040F5
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040FA                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100
.text:0000000000004100                 public quotearg_style
.text:0000000000004100 quotearg_style  proc near               ; CODE XREF: main+208↑p
.text:0000000000004100                                         ; main+300↑p ...
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 mov     rdx, rsi
.text:0000000000004103                 mov     esi, edi
.text:0000000000004105                 xor     edi, edi
.text:0000000000004107                 jmp     quotearg_n_style
.text:0000000000004107 ; } // starts at 4100
.text:0000000000004107 quotearg_style  endp
.text:0000000000004107
.text:0000000000004107 ; ---------------------------------------------------------------------------
.text:000000000000410C                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110
.text:0000000000004110                 public quotearg_style_mem
.text:0000000000004110 quotearg_style_mem proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 mov     rcx, rdx
.text:0000000000004113                 mov     rdx, rsi
.text:0000000000004116                 mov     esi, edi
.text:0000000000004118                 xor     edi, edi
.text:000000000000411A                 jmp     quotearg_n_style_mem
.text:000000000000411A ; } // starts at 4110
.text:000000000000411A quotearg_style_mem endp
.text:000000000000411A
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411F                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120 ; Attributes: info_from_lumina
.text:0000000000004120
.text:0000000000004120 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004120                 public quotearg_char_mem
.text:0000000000004120 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004120                                         ; quotearg_colon+C↓j ...
.text:0000000000004120
.text:0000000000004120 var_48          = xmmword ptr -48h
.text:0000000000004120 var_38          = xmmword ptr -38h
.text:0000000000004120 var_28          = xmmword ptr -28h
.text:0000000000004120 var_18          = qword ptr -18h
.text:0000000000004120 var_10          = qword ptr -10h
.text:0000000000004120
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 sub     rsp, 48h
.text:0000000000004124                 mov     ecx, edx
.text:0000000000004126                 mov     rax, fs:28h
.text:000000000000412F                 mov     [rsp+48h+var_10], rax
.text:0000000000004134                 xor     eax, eax
.text:0000000000004136                 mov     rax, cs:qword_208230
.text:000000000000413D                 mov     r8, rsp
.text:0000000000004140                 and     ecx, 1Fh
.text:0000000000004143                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000414B                 mov     [rsp+48h+var_18], rax
.text:0000000000004150                 mov     eax, edx
.text:0000000000004152                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004156                 shr     al, 5
.text:0000000000004159                 movzx   eax, al
.text:000000000000415C                 lea     r9, [r8+rax*4+8]
.text:0000000000004161                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000004169                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000416E                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000004176                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000417B                 mov     edx, [r9]
.text:000000000000417E                 mov     eax, edx
.text:0000000000004180                 shr     eax, cl
.text:0000000000004182                 not     eax
.text:0000000000004184                 and     eax, 1
.text:0000000000004187                 shl     eax, cl
.text:0000000000004189                 mov     rcx, r8
.text:000000000000418C                 xor     eax, edx
.text:000000000000418E                 mov     rdx, rsi
.text:0000000000004191                 mov     rsi, rdi
.text:0000000000004194                 mov     [r9], eax
.text:0000000000004197                 xor     edi, edi
.text:0000000000004199                 call    quotearg_n_options
.text:000000000000419E                 mov     rsi, [rsp+48h+var_10]
.text:00000000000041A3                 xor     rsi, fs:28h
.text:00000000000041AC                 jnz     short loc_41B3
.text:00000000000041AE                 add     rsp, 48h
.text:00000000000041B2                 retn
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B3
.text:00000000000041B3 loc_41B3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000041B3                 call    ___stack_chk_fail
.text:00000000000041B3 ; } // starts at 4120
.text:00000000000041B3 quotearg_char_mem endp
.text:00000000000041B3
.text:00000000000041B3 ; ---------------------------------------------------------------------------
.text:00000000000041B8                 align 20h
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0
.text:00000000000041C0                 public quotearg_char
.text:00000000000041C0 quotearg_char   proc near
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 movsx   edx, sil
.text:00000000000041C4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000041CB                 jmp     quotearg_char_mem
.text:00000000000041CB ; } // starts at 41C0
.text:00000000000041CB quotearg_char   endp
.text:00000000000041CB
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0
.text:00000000000041D0                 public quotearg_colon
.text:00000000000041D0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 mov     edx, 3Ah ; ':'
.text:00000000000041D5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000041DC                 jmp     quotearg_char_mem
.text:00000000000041DC ; } // starts at 41D0
.text:00000000000041DC quotearg_colon  endp
.text:00000000000041DC
.text:00000000000041DC ; ---------------------------------------------------------------------------
.text:00000000000041E1                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0
.text:00000000000041F0                 public quotearg_colon_mem
.text:00000000000041F0 quotearg_colon_mem proc near
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 mov     edx, 3Ah ; ':'
.text:00000000000041F5                 jmp     quotearg_char_mem
.text:00000000000041F5 ; } // starts at 41F0
.text:00000000000041F5 quotearg_colon_mem endp
.text:00000000000041F5
.text:00000000000041F5 ; ---------------------------------------------------------------------------
.text:00000000000041FA                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004200                 public quotearg_n_style_colon
.text:0000000000004200 quotearg_n_style_colon proc near
.text:0000000000004200
.text:0000000000004200 var_48          = dword ptr -48h
.text:0000000000004200 var_44          = qword ptr -44h
.text:0000000000004200 var_3C          = qword ptr -3Ch
.text:0000000000004200 var_34          = qword ptr -34h
.text:0000000000004200 var_2C          = qword ptr -2Ch
.text:0000000000004200 var_24          = qword ptr -24h
.text:0000000000004200 var_1C          = qword ptr -1Ch
.text:0000000000004200 var_14          = dword ptr -14h
.text:0000000000004200 var_10          = qword ptr -10h
.text:0000000000004200
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 sub     rsp, 48h
.text:0000000000004204                 mov     rax, rdx
.text:0000000000004207                 mov     rdx, fs:28h
.text:0000000000004210                 mov     [rsp+48h+var_10], rdx
.text:0000000000004215                 xor     edx, edx
.text:0000000000004217                 cmp     esi, 0Ah
.text:000000000000421A                 jz      short loc_4284
.text:000000000000421C                 mov     [rsp+48h+var_48], esi
.text:000000000000421F                 mov     rcx, rsp
.text:0000000000004222                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004229                 mov     rsi, rax
.text:000000000000422C                 mov     [rsp+48h+var_44], 0
.text:0000000000004235                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000423E                 mov     [rsp+48h+var_34], 0
.text:0000000000004247                 mov     [rsp+48h+var_2C], 0
.text:0000000000004250                 mov     [rsp+48h+var_24], 0
.text:0000000000004259                 mov     [rsp+48h+var_1C], 0
.text:0000000000004262                 mov     [rsp+48h+var_14], 0
.text:000000000000426A                 call    quotearg_n_options
.text:000000000000426F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004274                 xor     rcx, fs:28h
.text:000000000000427D                 jnz     short loc_4289
.text:000000000000427F                 add     rsp, 48h
.text:0000000000004283                 retn
.text:0000000000004284 ; ---------------------------------------------------------------------------
.text:0000000000004284
.text:0000000000004284 loc_4284:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004284                 call    _abort
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:0000000000004289
.text:0000000000004289 loc_4289:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004289                 call    ___stack_chk_fail
.text:0000000000004289 ; } // starts at 4200
.text:0000000000004289 quotearg_n_style_colon endp
.text:0000000000004289
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:000000000000428E                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004290                 public quotearg_n_custom_mem
.text:0000000000004290 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004290                                         ; quotearg_custom+12↓j ...
.text:0000000000004290
.text:0000000000004290 var_48          = xmmword ptr -48h
.text:0000000000004290 var_38          = xmmword ptr -38h
.text:0000000000004290 var_28          = xmmword ptr -28h
.text:0000000000004290 var_18          = qword ptr -18h
.text:0000000000004290 var_10          = qword ptr -10h
.text:0000000000004290
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 sub     rsp, 48h
.text:0000000000004294                 mov     r9, rcx
.text:0000000000004297                 mov     rcx, cs:qword_208230
.text:000000000000429E                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000042A6                 mov     rax, fs:28h
.text:00000000000042AF                 mov     [rsp+48h+var_10], rax
.text:00000000000042B4                 xor     eax, eax
.text:00000000000042B6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000042BA                 test    rsi, rsi
.text:00000000000042BD                 mov     [rsp+48h+var_18], rcx
.text:00000000000042C2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000042C9                 movdqa  xmm0, cs:xmmword_208210
.text:00000000000042D1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000042D6                 movdqa  xmm0, cs:xmmword_208220
.text:00000000000042DE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000042E3                 jz      short loc_4317
.text:00000000000042E5                 test    rdx, rdx
.text:00000000000042E8                 jz      short loc_4317
.text:00000000000042EA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000042EF                 mov     [rsp+48h+var_18], rdx
.text:00000000000042F4                 mov     rcx, rsp
.text:00000000000042F7                 mov     rdx, r8
.text:00000000000042FA                 mov     rsi, r9
.text:00000000000042FD                 call    quotearg_n_options
.text:0000000000004302                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004307                 xor     rdi, fs:28h
.text:0000000000004310                 jnz     short loc_431C
.text:0000000000004312                 add     rsp, 48h
.text:0000000000004316                 retn
.text:0000000000004317 ; ---------------------------------------------------------------------------
.text:0000000000004317
.text:0000000000004317 loc_4317:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004317                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004317                 call    _abort
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:000000000000431C
.text:000000000000431C loc_431C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000431C                 call    ___stack_chk_fail
.text:000000000000431C ; } // starts at 4290
.text:000000000000431C quotearg_n_custom_mem endp
.text:000000000000431C
.text:000000000000431C ; ---------------------------------------------------------------------------
.text:0000000000004321                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330
.text:0000000000004330                 public quotearg_n_custom
.text:0000000000004330 quotearg_n_custom proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004337                 jmp     quotearg_n_custom_mem
.text:0000000000004337 ; } // starts at 4330
.text:0000000000004337 quotearg_n_custom endp
.text:0000000000004337
.text:0000000000004337 ; ---------------------------------------------------------------------------
.text:000000000000433C                 align 20h
.text:0000000000004340
.text:0000000000004340 ; =============== S U B R O U T I N E =======================================
.text:0000000000004340
.text:0000000000004340
.text:0000000000004340                 public quotearg_custom
.text:0000000000004340 quotearg_custom proc near
.text:0000000000004340 ; __unwind {
.text:0000000000004340                 mov     rcx, rdx
.text:0000000000004343                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000434A                 mov     rdx, rsi
.text:000000000000434D                 mov     rsi, rdi
.text:0000000000004350                 xor     edi, edi
.text:0000000000004352                 jmp     quotearg_n_custom_mem
.text:0000000000004352 ; } // starts at 4340
.text:0000000000004352 quotearg_custom endp
.text:0000000000004352
.text:0000000000004352 ; ---------------------------------------------------------------------------
.text:0000000000004357                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360                 public quotearg_custom_mem
.text:0000000000004360 quotearg_custom_mem proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 mov     r8, rcx
.text:0000000000004363                 mov     rcx, rdx
.text:0000000000004366                 mov     rdx, rsi
.text:0000000000004369                 mov     rsi, rdi
.text:000000000000436C                 xor     edi, edi
.text:000000000000436E                 jmp     quotearg_n_custom_mem
.text:000000000000436E ; } // starts at 4360
.text:000000000000436E quotearg_custom_mem endp
.text:000000000000436E
.text:000000000000436E ; ---------------------------------------------------------------------------
.text:0000000000004373                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public quote_n_mem
.text:0000000000004380 quote_n_mem     proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 lea     rcx, quote_quoting_options
.text:0000000000004387                 jmp     quotearg_n_options
.text:0000000000004387 ; } // starts at 4380
.text:0000000000004387 quote_n_mem     endp
.text:0000000000004387
.text:0000000000004387 ; ---------------------------------------------------------------------------
.text:000000000000438C                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quote_mem
.text:0000000000004390 quote_mem       proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rcx, quote_quoting_options
.text:0000000000004397                 mov     rdx, rsi
.text:000000000000439A                 mov     rsi, rdi
.text:000000000000439D                 xor     edi, edi
.text:000000000000439F                 jmp     quotearg_n_options
.text:000000000000439F ; } // starts at 4390
.text:000000000000439F quote_mem       endp
.text:000000000000439F
.text:000000000000439F ; ---------------------------------------------------------------------------
.text:00000000000043A4                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0                 public quote_n
.text:00000000000043B0 quote_n         proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rcx, quote_quoting_options
.text:00000000000043B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043BE                 jmp     quotearg_n_options
.text:00000000000043BE ; } // starts at 43B0
.text:00000000000043BE quote_n         endp
.text:00000000000043BE
.text:00000000000043BE ; ---------------------------------------------------------------------------
.text:00000000000043C3                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0
.text:00000000000043D0                 public quote
.text:00000000000043D0 quote           proc near
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 lea     rcx, quote_quoting_options
.text:00000000000043D7                 mov     rsi, rdi
.text:00000000000043DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043E1                 xor     edi, edi
.text:00000000000043E3                 jmp     quotearg_n_options
.text:00000000000043E3 ; } // starts at 43D0
.text:00000000000043E3 quote           endp
.text:00000000000043E3
.text:00000000000043E3 ; ---------------------------------------------------------------------------
.text:00000000000043E8                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0
.text:00000000000043F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000043F0                 public version_etc_arn
.text:00000000000043F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_482B↓j
.text:00000000000043F0                                         ; version_etc_va:loc_487B↓p ...
.text:00000000000043F0
.text:00000000000043F0 var_58          = qword ptr -58h
.text:00000000000043F0 var_50          = qword ptr -50h
.text:00000000000043F0 var_48          = qword ptr -48h
.text:00000000000043F0 var_40          = qword ptr -40h
.text:00000000000043F0
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 push    r15
.text:00000000000043F2                 push    r14
.text:00000000000043F4                 push    r13
.text:00000000000043F6                 push    r12
.text:00000000000043F8                 mov     r12, r9
.text:00000000000043FB                 push    rbp
.text:00000000000043FC                 push    rbx
.text:00000000000043FD                 mov     rbp, rdi
.text:0000000000004400                 mov     rbx, r8
.text:0000000000004403                 sub     rsp, 28h
.text:0000000000004407                 test    rsi, rsi
.text:000000000000440A                 jz      loc_4528
.text:0000000000004410                 mov     r8, rdx
.text:0000000000004413                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000441A                 mov     r9, rcx
.text:000000000000441D                 xor     eax, eax
.text:000000000000441F                 mov     rcx, rsi
.text:0000000000004422                 mov     esi, 1
.text:0000000000004427                 call    ___fprintf_chk
.text:000000000000442C
.text:000000000000442C loc_442C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000442C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004433                 xor     edi, edi        ; domainname
.text:0000000000004435                 mov     edx, 5          ; category
.text:000000000000443A                 call    _dcgettext
.text:000000000000443F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004446                 mov     rcx, rax
.text:0000000000004449                 mov     r8d, 7E3h
.text:000000000000444F                 mov     esi, 1
.text:0000000000004454                 mov     rdi, rbp
.text:0000000000004457                 xor     eax, eax
.text:0000000000004459                 call    ___fprintf_chk
.text:000000000000445E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004465                 xor     edi, edi        ; domainname
.text:0000000000004467                 mov     edx, 5          ; category
.text:000000000000446C                 call    _dcgettext
.text:0000000000004471                 mov     rsi, rbp        ; stream
.text:0000000000004474                 mov     rdi, rax        ; s
.text:0000000000004477                 call    _fputs_unlocked
.text:000000000000447C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004480                 ja      def_4494        ; jumptable 0000000000004494 default case
.text:0000000000004486                 lea     rdx, jpt_4494
.text:000000000000448D                 movsxd  rax, ds:(jpt_4494 - 6128h)[rdx+r12*4]
.text:0000000000004491                 add     rax, rdx
.text:0000000000004494                 jmp     rax             ; switch jump
.text:0000000000004494 ; ---------------------------------------------------------------------------
.text:0000000000004496                 align 20h
.text:00000000000044A0
.text:00000000000044A0 loc_44A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000044A0                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000044A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004494 case 8
.text:00000000000044A4                 mov     rax, [rbx+10h]
.text:00000000000044A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000044AF                 mov     r8, [rbx+8]
.text:00000000000044B3                 mov     edx, 5          ; category
.text:00000000000044B8                 xor     edi, edi        ; domainname
.text:00000000000044BA                 mov     r13, [rbx+30h]
.text:00000000000044BE                 mov     r12, [rbx+28h]
.text:00000000000044C2                 mov     [rsp+58h+var_48], r9
.text:00000000000044C7                 mov     r15, [rbx+20h]
.text:00000000000044CB                 mov     r14, [rbx+18h]
.text:00000000000044CF                 mov     [rsp+58h+var_58], rax
.text:00000000000044D3                 mov     [rsp+58h+var_50], r8
.text:00000000000044D8                 mov     rbx, [rbx]
.text:00000000000044DB                 call    _dcgettext
.text:00000000000044E0                 sub     rsp, 8
.text:00000000000044E4
.text:00000000000044E4 loc_44E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000044E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000044E9                 mov     rdx, rax
.text:00000000000044EC                 mov     rcx, rbx
.text:00000000000044EF                 mov     esi, 1
.text:00000000000044F4                 mov     rdi, rbp
.text:00000000000044F7                 xor     eax, eax
.text:00000000000044F9                 push    r9
.text:00000000000044FB                 push    r13
.text:00000000000044FD                 push    r12
.text:00000000000044FF                 push    r15
.text:0000000000004501                 push    r14
.text:0000000000004503                 mov     r9, [rsp+88h+var_58]
.text:0000000000004508                 mov     r8, [rsp+88h+var_50]
.text:000000000000450D                 call    ___fprintf_chk
.text:0000000000004512                 add     rsp, 30h
.text:0000000000004516
.text:0000000000004516 loc_4516:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004516                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004516                 add     rsp, 28h        ; jumptable 0000000000004494 case 0
.text:000000000000451A                 pop     rbx
.text:000000000000451B                 pop     rbp
.text:000000000000451C                 pop     r12
.text:000000000000451E                 pop     r13
.text:0000000000004520                 pop     r14
.text:0000000000004522                 pop     r15
.text:0000000000004524                 retn
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004525                 align 8
.text:0000000000004528
.text:0000000000004528 loc_4528:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004528                 mov     r8, rcx
.text:000000000000452B                 mov     rcx, rdx
.text:000000000000452E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004535                 mov     esi, 1
.text:000000000000453A                 xor     eax, eax
.text:000000000000453C                 call    ___fprintf_chk
.text:0000000000004541                 jmp     loc_442C
.text:0000000000004541 ; ---------------------------------------------------------------------------
.text:0000000000004546                 align 10h
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004550                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004550                 mov     r10, [rbx+40h]  ; jumptable 0000000000004494 case 9
.text:0000000000004554                 mov     r9, [rbx+38h]
.text:0000000000004558                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000455F                 mov     rax, [rbx+10h]
.text:0000000000004563                 mov     r8, [rbx+8]
.text:0000000000004567                 mov     edx, 5          ; category
.text:000000000000456C                 mov     r13, [rbx+30h]
.text:0000000000004570                 mov     r12, [rbx+28h]
.text:0000000000004574                 mov     r15, [rbx+20h]
.text:0000000000004578                 mov     r14, [rbx+18h]
.text:000000000000457C                 mov     rbx, [rbx]
.text:000000000000457F                 mov     [rsp+58h+var_40], r10
.text:0000000000004584                 mov     [rsp+58h+var_48], r9
.text:0000000000004589                 mov     [rsp+58h+var_58], rax
.text:000000000000458D                 mov     [rsp+58h+var_50], r8
.text:0000000000004592
.text:0000000000004592 loc_4592:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004592                 xor     edi, edi        ; domainname
.text:0000000000004594                 call    _dcgettext
.text:0000000000004599                 mov     r10, [rsp+58h+var_40]
.text:000000000000459E                 push    r10
.text:00000000000045A0                 jmp     loc_44E4
.text:00000000000045A0 ; ---------------------------------------------------------------------------
.text:00000000000045A5                 align 8
.text:00000000000045A8
.text:00000000000045A8 loc_45A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000045A8                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000045A8                 mov     rbx, [rbx]      ; jumptable 0000000000004494 case 1
.text:00000000000045AB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000045B2                 mov     edx, 5          ; category
.text:00000000000045B7                 xor     edi, edi        ; domainname
.text:00000000000045B9                 call    _dcgettext
.text:00000000000045BE                 add     rsp, 28h
.text:00000000000045C2                 mov     rcx, rbx
.text:00000000000045C5                 mov     rdi, rbp
.text:00000000000045C8                 pop     rbx
.text:00000000000045C9                 pop     rbp
.text:00000000000045CA                 pop     r12
.text:00000000000045CC                 pop     r13
.text:00000000000045CE                 pop     r14
.text:00000000000045D0                 pop     r15
.text:00000000000045D2                 mov     rdx, rax
.text:00000000000045D5                 mov     esi, 1
.text:00000000000045DA                 xor     eax, eax
.text:00000000000045DC                 jmp     ___fprintf_chk
.text:00000000000045DC ; ---------------------------------------------------------------------------
.text:00000000000045E1                 align 8
.text:00000000000045E8
.text:00000000000045E8 loc_45E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000045E8                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000045E8                 mov     r12, [rbx+8]    ; jumptable 0000000000004494 case 2
.text:00000000000045EC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000045F3                 mov     rbx, [rbx]
.text:00000000000045F6                 mov     edx, 5          ; category
.text:00000000000045FB                 xor     edi, edi        ; domainname
.text:00000000000045FD                 call    _dcgettext
.text:0000000000004602                 add     rsp, 28h
.text:0000000000004606                 mov     r8, r12
.text:0000000000004609                 mov     rcx, rbx
.text:000000000000460C                 mov     rdi, rbp
.text:000000000000460F                 mov     rdx, rax
.text:0000000000004612                 mov     esi, 1
.text:0000000000004617                 pop     rbx
.text:0000000000004618                 pop     rbp
.text:0000000000004619                 pop     r12
.text:000000000000461B                 pop     r13
.text:000000000000461D                 pop     r14
.text:000000000000461F                 pop     r15
.text:0000000000004621                 xor     eax, eax
.text:0000000000004623                 jmp     ___fprintf_chk
.text:0000000000004623 ; ---------------------------------------------------------------------------
.text:0000000000004628                 align 10h
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004630                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004630                 mov     r13, [rbx+10h]  ; jumptable 0000000000004494 case 3
.text:0000000000004634                 mov     r12, [rbx+8]
.text:0000000000004638                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000463F                 mov     rbx, [rbx]
.text:0000000000004642                 mov     edx, 5          ; category
.text:0000000000004647                 xor     edi, edi        ; domainname
.text:0000000000004649                 call    _dcgettext
.text:000000000000464E                 add     rsp, 28h
.text:0000000000004652                 mov     r9, r13
.text:0000000000004655                 mov     r8, r12
.text:0000000000004658                 mov     rcx, rbx
.text:000000000000465B                 mov     rdi, rbp
.text:000000000000465E                 mov     rdx, rax
.text:0000000000004661                 pop     rbx
.text:0000000000004662                 pop     rbp
.text:0000000000004663                 pop     r12
.text:0000000000004665                 pop     r13
.text:0000000000004667                 pop     r14
.text:0000000000004669                 pop     r15
.text:000000000000466B                 mov     esi, 1
.text:0000000000004670                 xor     eax, eax
.text:0000000000004672                 jmp     ___fprintf_chk
.text:0000000000004672 ; ---------------------------------------------------------------------------
.text:0000000000004677                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004680                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004680                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004494 case 4
.text:0000000000004687                 mov     edx, 5          ; category
.text:000000000000468C                 xor     edi, edi        ; domainname
.text:000000000000468E                 mov     r14, [rbx+18h]
.text:0000000000004692                 mov     r13, [rbx+10h]
.text:0000000000004696                 mov     r12, [rbx+8]
.text:000000000000469A                 mov     rbx, [rbx]
.text:000000000000469D                 call    _dcgettext
.text:00000000000046A2                 sub     rsp, 8
.text:00000000000046A6
.text:00000000000046A6 loc_46A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000046A6                 push    r14
.text:00000000000046A8                 mov     rdx, rax
.text:00000000000046AB                 mov     r9, r13
.text:00000000000046AE                 mov     r8, r12
.text:00000000000046B1                 mov     rcx, rbx
.text:00000000000046B4                 mov     rdi, rbp
.text:00000000000046B7                 mov     esi, 1
.text:00000000000046BC                 xor     eax, eax
.text:00000000000046BE                 call    ___fprintf_chk
.text:00000000000046C3                 pop     rax
.text:00000000000046C4                 pop     rdx
.text:00000000000046C5                 add     rsp, 28h
.text:00000000000046C9                 pop     rbx
.text:00000000000046CA                 pop     rbp
.text:00000000000046CB                 pop     r12
.text:00000000000046CD                 pop     r13
.text:00000000000046CF                 pop     r14
.text:00000000000046D1                 pop     r15
.text:00000000000046D3                 retn
.text:00000000000046D3 ; ---------------------------------------------------------------------------
.text:00000000000046D4                 align 8
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046D8                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:00000000000046D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004494 case 5
.text:00000000000046DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000046E3                 mov     edx, 5          ; category
.text:00000000000046E8                 xor     edi, edi        ; domainname
.text:00000000000046EA                 mov     r14, [rbx+18h]
.text:00000000000046EE                 mov     r13, [rbx+10h]
.text:00000000000046F2                 mov     r12, [rbx+8]
.text:00000000000046F6                 mov     rbx, [rbx]
.text:00000000000046F9                 call    _dcgettext
.text:00000000000046FE                 push    r15
.text:0000000000004700                 jmp     short loc_46A6
.text:0000000000004700 ; ---------------------------------------------------------------------------
.text:0000000000004702                 align 8
.text:0000000000004708
.text:0000000000004708 loc_4708:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004708                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004708                 mov     r8, [rbx+8]     ; jumptable 0000000000004494 case 6
.text:000000000000470C                 mov     r12, [rbx+28h]
.text:0000000000004710                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004717                 mov     r15, [rbx+20h]
.text:000000000000471B                 mov     r14, [rbx+18h]
.text:000000000000471F                 mov     edx, 5          ; category
.text:0000000000004724                 mov     r13, [rbx+10h]
.text:0000000000004728                 xor     edi, edi        ; domainname
.text:000000000000472A                 mov     rbx, [rbx]
.text:000000000000472D                 mov     [rsp+58h+var_58], r8
.text:0000000000004731                 call    _dcgettext
.text:0000000000004736                 sub     rsp, 8
.text:000000000000473A                 mov     r9, r13
.text:000000000000473D                 push    r12
.text:000000000000473F                 push    r15
.text:0000000000004741                 push    r14
.text:0000000000004743
.text:0000000000004743 loc_4743:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004743                 mov     r8, [rsp+78h+var_58]
.text:0000000000004748                 mov     rcx, rbx
.text:000000000000474B                 mov     rdx, rax
.text:000000000000474E                 mov     rdi, rbp
.text:0000000000004751                 mov     esi, 1
.text:0000000000004756                 xor     eax, eax
.text:0000000000004758                 call    ___fprintf_chk
.text:000000000000475D                 add     rsp, 20h
.text:0000000000004761                 add     rsp, 28h
.text:0000000000004765                 pop     rbx
.text:0000000000004766                 pop     rbp
.text:0000000000004767                 pop     r12
.text:0000000000004769                 pop     r13
.text:000000000000476B                 pop     r14
.text:000000000000476D                 pop     r15
.text:000000000000476F                 retn
.text:0000000000004770 ; ---------------------------------------------------------------------------
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004770                                         ; DATA XREF: .rodata:jpt_4494↓o
.text:0000000000004770                 mov     r9, [rbx+10h]   ; jumptable 0000000000004494 case 7
.text:0000000000004774                 mov     r13, [rbx+30h]
.text:0000000000004778                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000477F                 mov     r12, [rbx+28h]
.text:0000000000004783                 mov     r15, [rbx+20h]
.text:0000000000004787                 mov     edx, 5          ; category
.text:000000000000478C                 mov     r14, [rbx+18h]
.text:0000000000004790                 mov     r8, [rbx+8]
.text:0000000000004794                 xor     edi, edi        ; domainname
.text:0000000000004796                 mov     [rsp+58h+var_50], r9
.text:000000000000479B                 mov     rbx, [rbx]
.text:000000000000479E                 mov     [rsp+58h+var_58], r8
.text:00000000000047A2                 call    _dcgettext
.text:00000000000047A7                 push    r13
.text:00000000000047A9                 push    r12
.text:00000000000047AB                 push    r15
.text:00000000000047AD                 push    r14
.text:00000000000047AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000047B4                 jmp     short loc_4743
.text:00000000000047B4 ; ---------------------------------------------------------------------------
.text:00000000000047B6                 align 20h
.text:00000000000047C0
.text:00000000000047C0 def_4494:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000047C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004494 default case
.text:00000000000047C4                 mov     r9, [rbx+38h]
.text:00000000000047C8                 mov     edx, 5
.text:00000000000047CD                 mov     rax, [rbx+10h]
.text:00000000000047D1                 mov     r8, [rbx+8]
.text:00000000000047D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000047DC                 mov     r13, [rbx+30h]
.text:00000000000047E0                 mov     r12, [rbx+28h]
.text:00000000000047E4                 mov     r15, [rbx+20h]
.text:00000000000047E8                 mov     r14, [rbx+18h]
.text:00000000000047EC                 mov     [rsp+58h+var_40], r10
.text:00000000000047F1                 mov     [rsp+58h+var_48], r9
.text:00000000000047F6                 mov     [rsp+58h+var_58], rax
.text:00000000000047FA                 mov     [rsp+58h+var_50], r8
.text:00000000000047FF                 mov     rbx, [rbx]
.text:0000000000004802                 jmp     loc_4592
.text:0000000000004802 ; } // starts at 43F0
.text:0000000000004802 version_etc_arn endp
.text:0000000000004802
.text:0000000000004802 ; ---------------------------------------------------------------------------
.text:0000000000004807                 align 10h
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810 ; Attributes: info_from_lumina
.text:0000000000004810
.text:0000000000004810 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004810                 public version_etc_ar
.text:0000000000004810 version_etc_ar  proc near
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 xor     r9d, r9d
.text:0000000000004813                 cmp     qword ptr [r8], 0
.text:0000000000004817                 jz      short loc_482B
.text:0000000000004819                 nop     dword ptr [rax+00000000h]
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004820                 add     r9, 1
.text:0000000000004824                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004829                 jnz     short loc_4820
.text:000000000000482B
.text:000000000000482B loc_482B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000482B                 jmp     version_etc_arn
.text:000000000000482B ; } // starts at 4810
.text:000000000000482B version_etc_ar  endp
.text:000000000000482B
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830 ; Attributes: info_from_lumina
.text:0000000000004830
.text:0000000000004830 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004830                 public version_etc_va
.text:0000000000004830 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000004830                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000004830
.text:0000000000004830 authtab         = qword ptr -68h
.text:0000000000004830 var_10          = qword ptr -10h
.text:0000000000004830
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 sub     rsp, 68h
.text:0000000000004834                 mov     r10, r8
.text:0000000000004837                 xor     r9d, r9d
.text:000000000000483A                 mov     rax, fs:28h
.text:0000000000004843                 mov     [rsp+68h+var_10], rax
.text:0000000000004848                 xor     eax, eax
.text:000000000000484A                 mov     r8, rsp
.text:000000000000484D                 nop     dword ptr [rax]
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004850                 mov     eax, [r10]
.text:0000000000004853                 cmp     eax, 2Fh ; '/'
.text:0000000000004856                 ja      short loc_489A
.text:0000000000004858                 mov     r11d, eax
.text:000000000000485B                 add     r11, [r10+10h]
.text:000000000000485F                 add     eax, 8
.text:0000000000004862                 mov     [r10], eax
.text:0000000000004865
.text:0000000000004865 loc_4865:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004865                 mov     rax, [r11]
.text:0000000000004868                 test    rax, rax
.text:000000000000486B                 mov     [r8+r9*8], rax
.text:000000000000486F                 jz      short loc_487B
.text:0000000000004871                 add     r9, 1
.text:0000000000004875                 cmp     r9, 0Ah
.text:0000000000004879                 jnz     short loc_4850
.text:000000000000487B
.text:000000000000487B loc_487B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000487B                 call    version_etc_arn
.text:0000000000004880                 mov     rax, [rsp+68h+var_10]
.text:0000000000004885                 xor     rax, fs:28h
.text:000000000000488E                 jnz     short loc_4895
.text:0000000000004890                 add     rsp, 68h
.text:0000000000004894                 retn
.text:0000000000004895 ; ---------------------------------------------------------------------------
.text:0000000000004895
.text:0000000000004895 loc_4895:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004895                 call    ___stack_chk_fail
.text:000000000000489A ; ---------------------------------------------------------------------------
.text:000000000000489A
.text:000000000000489A loc_489A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000489A                 mov     r11, [r10+8]
.text:000000000000489E                 lea     rax, [r11+8]
.text:00000000000048A2                 mov     [r10+8], rax
.text:00000000000048A6                 jmp     short loc_4865
.text:00000000000048A6 ; } // starts at 4830
.text:00000000000048A6 version_etc_va  endp
.text:00000000000048A6
.text:00000000000048A6 ; ---------------------------------------------------------------------------
.text:00000000000048A8                 align 10h
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000048B0                 public version_etc
.text:00000000000048B0 version_etc     proc near
.text:00000000000048B0
.text:00000000000048B0 var_C0          = dword ptr -0C0h
.text:00000000000048B0 var_B8          = qword ptr -0B8h
.text:00000000000048B0 var_B0          = qword ptr -0B0h
.text:00000000000048B0 var_A8          = byte ptr -0A8h
.text:00000000000048B0 var_50          = qword ptr -50h
.text:00000000000048B0 var_48          = byte ptr -48h
.text:00000000000048B0 var_28          = qword ptr -28h
.text:00000000000048B0 var_20          = qword ptr -20h
.text:00000000000048B0 arg_0           = byte ptr  8
.text:00000000000048B0
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 push    rbp
.text:00000000000048B1                 push    rbx
.text:00000000000048B2                 mov     r10d, 20h ; ' '
.text:00000000000048B8                 xor     r11d, r11d
.text:00000000000048BB                 sub     rsp, 0B8h
.text:00000000000048C2                 mov     rax, fs:28h
.text:00000000000048CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000048D0                 xor     eax, eax
.text:00000000000048D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000048DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000048E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000048EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000048EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000048F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000048FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004904                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000490C                 xor     r9d, r9d
.text:000000000000490F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004914                 mov     rbp, rax
.text:0000000000004917                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004920
.text:0000000000004920 loc_4920:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004920                 cmp     r10d, 2Fh ; '/'
.text:0000000000004924                 ja      short loc_497C
.text:0000000000004926                 mov     eax, r10d
.text:0000000000004929                 mov     r11d, 1
.text:000000000000492F                 add     r10d, 8
.text:0000000000004933                 add     rax, rbp
.text:0000000000004936
.text:0000000000004936 loc_4936:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004936                 mov     rax, [rax]
.text:0000000000004939                 test    rax, rax
.text:000000000000493C                 mov     [r8+r9*8], rax
.text:0000000000004940                 jz      short loc_494C
.text:0000000000004942                 add     r9, 1
.text:0000000000004946                 cmp     r9, 0Ah
.text:000000000000494A                 jnz     short loc_4920
.text:000000000000494C
.text:000000000000494C loc_494C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000494C                 test    r11b, r11b
.text:000000000000494F                 jnz     short loc_4975
.text:0000000000004951
.text:0000000000004951 loc_4951:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004951                 call    version_etc_arn
.text:0000000000004956                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000495B                 xor     rax, fs:28h
.text:0000000000004964                 jnz     short loc_4970
.text:0000000000004966                 add     rsp, 0B8h
.text:000000000000496D                 pop     rbx
.text:000000000000496E                 pop     rbp
.text:000000000000496F                 retn
.text:0000000000004970 ; ---------------------------------------------------------------------------
.text:0000000000004970
.text:0000000000004970 loc_4970:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004970                 call    ___stack_chk_fail
.text:0000000000004975 ; ---------------------------------------------------------------------------
.text:0000000000004975
.text:0000000000004975 loc_4975:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004975                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000497A                 jmp     short loc_4951
.text:000000000000497C ; ---------------------------------------------------------------------------
.text:000000000000497C
.text:000000000000497C loc_497C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000497C                 mov     rax, rbx
.text:000000000000497F                 add     rbx, 8
.text:0000000000004983                 jmp     short loc_4936
.text:0000000000004983 ; } // starts at 48B0
.text:0000000000004983 version_etc     endp
.text:0000000000004983
.text:0000000000004983 ; ---------------------------------------------------------------------------
.text:0000000000004985                 align 10h
.text:0000000000004990
.text:0000000000004990 ; =============== S U B R O U T I N E =======================================
.text:0000000000004990
.text:0000000000004990 ; Attributes: info_from_lumina
.text:0000000000004990
.text:0000000000004990 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004990                 public emit_bug_reporting_address
.text:0000000000004990 emit_bug_reporting_address proc near
.text:0000000000004990 ; __unwind {
.text:0000000000004990                 push    rbx
.text:0000000000004991                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004998                 mov     edx, 5          ; category
.text:000000000000499D                 xor     edi, edi        ; domainname
.text:000000000000499F                 call    _dcgettext
.text:00000000000049A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000049AB                 mov     rsi, rax
.text:00000000000049AE                 mov     edi, 1
.text:00000000000049B3                 xor     eax, eax
.text:00000000000049B5                 call    ___printf_chk
.text:00000000000049BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000049C1                 mov     edx, 5          ; category
.text:00000000000049C6                 xor     edi, edi        ; domainname
.text:00000000000049C8                 call    _dcgettext
.text:00000000000049CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000049D4                 lea     rdx, unk_53C0
.text:00000000000049DB                 mov     rsi, rax
.text:00000000000049DE                 mov     edi, 1
.text:00000000000049E3                 xor     eax, eax
.text:00000000000049E5                 call    ___printf_chk
.text:00000000000049EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000049F8                 xor     edi, edi        ; domainname
.text:00000000000049FA                 mov     edx, 5          ; category
.text:00000000000049FF                 call    _dcgettext
.text:0000000000004A04                 mov     rsi, rbx        ; stream
.text:0000000000004A07                 mov     rdi, rax        ; s
.text:0000000000004A0A                 pop     rbx
.text:0000000000004A0B                 jmp     _fputs_unlocked
.text:0000000000004A0B ; } // starts at 4990
.text:0000000000004A0B emit_bug_reporting_address endp
.text:0000000000004A0B
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10
.text:0000000000004A10                 public xmalloc
.text:0000000000004A10 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004A10                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 push    rbx
.text:0000000000004A11                 mov     rbx, rdi
.text:0000000000004A14                 call    _malloc
.text:0000000000004A19                 test    rax, rax
.text:0000000000004A1C                 jnz     short loc_4A23
.text:0000000000004A1E                 test    rbx, rbx
.text:0000000000004A21                 jnz     short loc_4A25
.text:0000000000004A23
.text:0000000000004A23 loc_4A23:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004A23                 pop     rbx
.text:0000000000004A24                 retn
.text:0000000000004A25 ; ---------------------------------------------------------------------------
.text:0000000000004A25
.text:0000000000004A25 loc_4A25:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004A25                 call    xalloc_die
.text:0000000000004A25 ; } // starts at 4A10
.text:0000000000004A25 xmalloc         endp
.text:0000000000004A25
.text:0000000000004A25 ; ---------------------------------------------------------------------------
.text:0000000000004A2A                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30 ; Attributes: info_from_lumina
.text:0000000000004A30
.text:0000000000004A30 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004A30                 public xnmalloc
.text:0000000000004A30 xnmalloc        proc near
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 mov     rax, rdi
.text:0000000000004A33                 mul     rsi
.text:0000000000004A36                 mov     rdi, rax
.text:0000000000004A39                 seto    al
.text:0000000000004A3C                 test    rdi, rdi
.text:0000000000004A3F                 js      short loc_4A4B
.text:0000000000004A41                 movzx   eax, al
.text:0000000000004A44                 test    rax, rax
.text:0000000000004A47                 jnz     short loc_4A4B
.text:0000000000004A49                 jmp     short xmalloc
.text:0000000000004A4B ; ---------------------------------------------------------------------------
.text:0000000000004A4B
.text:0000000000004A4B loc_4A4B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004A4B                                         ; xnmalloc+17↑j
.text:0000000000004A4B                 sub     rsp, 8
.text:0000000000004A4F                 call    xalloc_die
.text:0000000000004A4F ; } // starts at 4A30
.text:0000000000004A4F xnmalloc        endp
.text:0000000000004A4F
.text:0000000000004A4F ; ---------------------------------------------------------------------------
.text:0000000000004A54                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public xcharalloc
.text:0000000000004A60 xcharalloc      proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 jmp     short xmalloc
.text:0000000000004A60 ; } // starts at 4A60
.text:0000000000004A60 xcharalloc      endp
.text:0000000000004A60
.text:0000000000004A60 ; ---------------------------------------------------------------------------
.text:0000000000004A62                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70 ; Attributes: info_from_lumina
.text:0000000000004A70
.text:0000000000004A70 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004A70                 public xrealloc
.text:0000000000004A70 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004A70                                         ; quotearg_n_options+182↑p ...
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 test    rsi, rsi
.text:0000000000004A73                 push    rbx
.text:0000000000004A74                 mov     rbx, rsi
.text:0000000000004A77                 jnz     short loc_4A7E
.text:0000000000004A79                 test    rdi, rdi
.text:0000000000004A7C                 jnz     short loc_4A98
.text:0000000000004A7E
.text:0000000000004A7E loc_4A7E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004A7E                 mov     rsi, rbx        ; size
.text:0000000000004A81                 call    _realloc
.text:0000000000004A86                 test    rax, rax
.text:0000000000004A89                 jnz     short loc_4A90
.text:0000000000004A8B                 test    rbx, rbx
.text:0000000000004A8E                 jnz     short loc_4AA1
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004A90                 pop     rbx
.text:0000000000004A91                 retn
.text:0000000000004A91 ; ---------------------------------------------------------------------------
.text:0000000000004A92                 align 8
.text:0000000000004A98
.text:0000000000004A98 loc_4A98:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004A98                 call    _free
.text:0000000000004A9D                 xor     eax, eax
.text:0000000000004A9F                 pop     rbx
.text:0000000000004AA0                 retn
.text:0000000000004AA1 ; ---------------------------------------------------------------------------
.text:0000000000004AA1
.text:0000000000004AA1 loc_4AA1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004AA1                 call    xalloc_die
.text:0000000000004AA1 ; } // starts at 4A70
.text:0000000000004AA1 xrealloc        endp
.text:0000000000004AA1
.text:0000000000004AA1 ; ---------------------------------------------------------------------------
.text:0000000000004AA6                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AB0
.text:0000000000004AB0 ; Attributes: info_from_lumina
.text:0000000000004AB0
.text:0000000000004AB0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004AB0                 public xnrealloc
.text:0000000000004AB0 xnrealloc       proc near
.text:0000000000004AB0 ; __unwind {
.text:0000000000004AB0                 mov     rax, rsi
.text:0000000000004AB3                 mul     rdx
.text:0000000000004AB6                 mov     rsi, rax
.text:0000000000004AB9                 seto    al
.text:0000000000004ABC                 test    rsi, rsi
.text:0000000000004ABF                 js      short loc_4ACB
.text:0000000000004AC1                 movzx   eax, al
.text:0000000000004AC4                 test    rax, rax
.text:0000000000004AC7                 jnz     short loc_4ACB
.text:0000000000004AC9                 jmp     short xrealloc
.text:0000000000004ACB ; ---------------------------------------------------------------------------
.text:0000000000004ACB
.text:0000000000004ACB loc_4ACB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004ACB                                         ; xnrealloc+17↑j
.text:0000000000004ACB                 sub     rsp, 8
.text:0000000000004ACF                 call    xalloc_die
.text:0000000000004ACF ; } // starts at 4AB0
.text:0000000000004ACF xnrealloc       endp
.text:0000000000004ACF
.text:0000000000004ACF ; ---------------------------------------------------------------------------
.text:0000000000004AD4                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0 ; Attributes: info_from_lumina
.text:0000000000004AE0
.text:0000000000004AE0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004AE0                 public x2nrealloc
.text:0000000000004AE0 x2nrealloc      proc near
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 test    rdi, rdi
.text:0000000000004AE3                 mov     r9, rdx
.text:0000000000004AE6                 mov     rcx, [rsi]
.text:0000000000004AE9                 jz      short loc_4B20
.text:0000000000004AEB                 xor     edx, edx
.text:0000000000004AED                 mov     rax, 5555555555555554h
.text:0000000000004AF7                 div     r9
.text:0000000000004AFA                 cmp     rax, rcx
.text:0000000000004AFD                 jbe     short loc_4B3B
.text:0000000000004AFF                 mov     rax, rcx
.text:0000000000004B02                 shr     rax, 1
.text:0000000000004B05                 lea     rcx, [rax+rcx+1]
.text:0000000000004B0A
.text:0000000000004B0A loc_4B0A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004B0A                 mov     [rsi], rcx
.text:0000000000004B0D                 imul    rcx, r9
.text:0000000000004B11                 mov     rsi, rcx
.text:0000000000004B14                 jmp     xrealloc
.text:0000000000004B14 ; ---------------------------------------------------------------------------
.text:0000000000004B19                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004B20                 test    rcx, rcx
.text:0000000000004B23                 jz      short loc_4B48
.text:0000000000004B25
.text:0000000000004B25 loc_4B25:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004B25                 mov     rax, rcx
.text:0000000000004B28                 mul     r9
.text:0000000000004B2B                 seto    dl
.text:0000000000004B2E                 test    rax, rax
.text:0000000000004B31                 movzx   edx, dl
.text:0000000000004B34                 js      short loc_4B3B
.text:0000000000004B36                 test    rdx, rdx
.text:0000000000004B39                 jz      short loc_4B0A
.text:0000000000004B3B
.text:0000000000004B3B loc_4B3B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004B3B                                         ; x2nrealloc+54↑j
.text:0000000000004B3B                 sub     rsp, 8
.text:0000000000004B3F                 call    xalloc_die
.text:0000000000004B3F ; ---------------------------------------------------------------------------
.text:0000000000004B44                 align 8
.text:0000000000004B48
.text:0000000000004B48 loc_4B48:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004B48                 xor     edx, edx
.text:0000000000004B4A                 mov     eax, 80h
.text:0000000000004B4F                 xor     r8d, r8d
.text:0000000000004B52                 div     r9
.text:0000000000004B55                 test    rax, rax
.text:0000000000004B58                 setz    r8b
.text:0000000000004B5C                 lea     rcx, [r8+rax]
.text:0000000000004B60                 jmp     short loc_4B25
.text:0000000000004B60 ; } // starts at 4AE0
.text:0000000000004B60 x2nrealloc      endp
.text:0000000000004B60
.text:0000000000004B60 ; ---------------------------------------------------------------------------
.text:0000000000004B62                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004B70                 public x2realloc
.text:0000000000004B70 x2realloc       proc near
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 test    rdi, rdi
.text:0000000000004B73                 mov     rax, [rsi]
.text:0000000000004B76                 jz      short loc_4BA0
.text:0000000000004B78                 mov     rdx, 5555555555555553h
.text:0000000000004B82                 cmp     rax, rdx
.text:0000000000004B85                 ja      short loc_4BB1
.text:0000000000004B87                 mov     rdx, rax
.text:0000000000004B8A                 shr     rdx, 1
.text:0000000000004B8D                 lea     rax, [rdx+rax+1]
.text:0000000000004B92
.text:0000000000004B92 loc_4B92:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004B92                 mov     [rsi], rax
.text:0000000000004B95                 mov     rsi, rax
.text:0000000000004B98                 jmp     xrealloc
.text:0000000000004B98 ; ---------------------------------------------------------------------------
.text:0000000000004B9D                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004BA0                 test    rax, rax
.text:0000000000004BA3                 mov     edx, 80h
.text:0000000000004BA8                 cmovz   rax, rdx
.text:0000000000004BAC                 test    rax, rax
.text:0000000000004BAF                 jns     short loc_4B92
.text:0000000000004BB1
.text:0000000000004BB1 loc_4BB1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004BB1                 sub     rsp, 8
.text:0000000000004BB5                 call    xalloc_die
.text:0000000000004BB5 ; } // starts at 4B70
.text:0000000000004BB5 x2realloc       endp
.text:0000000000004BB5
.text:0000000000004BB5 ; ---------------------------------------------------------------------------
.text:0000000000004BBA                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BC0
.text:0000000000004BC0
.text:0000000000004BC0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004BC0                 public xzalloc
.text:0000000000004BC0 xzalloc         proc near
.text:0000000000004BC0 ; __unwind {
.text:0000000000004BC0                 push    rbx
.text:0000000000004BC1                 mov     rbx, rdi
.text:0000000000004BC4                 call    xmalloc
.text:0000000000004BC9                 mov     rdx, rbx        ; n
.text:0000000000004BCC                 xor     esi, esi        ; c
.text:0000000000004BCE                 mov     rdi, rax        ; s
.text:0000000000004BD1                 pop     rbx
.text:0000000000004BD2                 jmp     _memset
.text:0000000000004BD2 ; } // starts at 4BC0
.text:0000000000004BD2 xzalloc         endp
.text:0000000000004BD2
.text:0000000000004BD2 ; ---------------------------------------------------------------------------
.text:0000000000004BD7                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0 ; Attributes: info_from_lumina
.text:0000000000004BE0
.text:0000000000004BE0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004BE0                 public xcalloc
.text:0000000000004BE0 xcalloc         proc near
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 mov     rax, rdi
.text:0000000000004BE3                 sub     rsp, 8
.text:0000000000004BE7                 mul     rsi
.text:0000000000004BEA                 seto    dl
.text:0000000000004BED                 test    rax, rax
.text:0000000000004BF0                 js      short loc_4C09
.text:0000000000004BF2                 movzx   edx, dl
.text:0000000000004BF5                 test    rdx, rdx
.text:0000000000004BF8                 jnz     short loc_4C09
.text:0000000000004BFA                 call    _calloc
.text:0000000000004BFF                 test    rax, rax
.text:0000000000004C02                 jz      short loc_4C09
.text:0000000000004C04                 add     rsp, 8
.text:0000000000004C08                 retn
.text:0000000000004C09 ; ---------------------------------------------------------------------------
.text:0000000000004C09
.text:0000000000004C09 loc_4C09:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004C09                                         ; xcalloc+18↑j ...
.text:0000000000004C09                 call    xalloc_die
.text:0000000000004C09 ; } // starts at 4BE0
.text:0000000000004C09 xcalloc         endp
.text:0000000000004C09
.text:0000000000004C09 ; ---------------------------------------------------------------------------
.text:0000000000004C0E                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004C10                 public xmemdup
.text:0000000000004C10 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004C10                                         ; xstrdup+11↓j
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 push    rbp
.text:0000000000004C11                 push    rbx
.text:0000000000004C12                 mov     rbp, rdi
.text:0000000000004C15                 mov     rdi, rsi
.text:0000000000004C18                 mov     rbx, rsi
.text:0000000000004C1B                 sub     rsp, 8
.text:0000000000004C1F                 call    xmalloc
.text:0000000000004C24                 add     rsp, 8
.text:0000000000004C28                 mov     rdx, rbx        ; n
.text:0000000000004C2B                 mov     rsi, rbp        ; src
.text:0000000000004C2E                 pop     rbx
.text:0000000000004C2F                 pop     rbp
.text:0000000000004C30                 mov     rdi, rax        ; dest
.text:0000000000004C33                 jmp     _memcpy
.text:0000000000004C33 ; } // starts at 4C10
.text:0000000000004C33 xmemdup         endp
.text:0000000000004C33
.text:0000000000004C33 ; ---------------------------------------------------------------------------
.text:0000000000004C38                 align 20h
.text:0000000000004C40
.text:0000000000004C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C40
.text:0000000000004C40
.text:0000000000004C40 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004C40                 public xstrdup
.text:0000000000004C40 xstrdup         proc near
.text:0000000000004C40 ; __unwind {
.text:0000000000004C40                 push    rbx
.text:0000000000004C41                 mov     rbx, rdi
.text:0000000000004C44                 call    _strlen
.text:0000000000004C49                 mov     rdi, rbx        ; src
.text:0000000000004C4C                 lea     rsi, [rax+1]    ; n
.text:0000000000004C50                 pop     rbx
.text:0000000000004C51                 jmp     short xmemdup
.text:0000000000004C51 ; } // starts at 4C40
.text:0000000000004C51 xstrdup         endp
.text:0000000000004C51
.text:0000000000004C51 ; ---------------------------------------------------------------------------
.text:0000000000004C53                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60 ; Attributes: noreturn info_from_lumina
.text:0000000000004C60
.text:0000000000004C60 ; void __cdecl xalloc_die()
.text:0000000000004C60                 public xalloc_die
.text:0000000000004C60 xalloc_die      proc near               ; CODE XREF: file_name_concat:loc_2333↑p
.text:0000000000004C60                                         ; quotearg_n_options:loc_3C36↑p ...
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004C67                 sub     rsp, 8
.text:0000000000004C6B                 mov     edx, 5          ; category
.text:0000000000004C70                 xor     edi, edi        ; domainname
.text:0000000000004C72                 call    _dcgettext
.text:0000000000004C77                 mov     edi, cs:exit_failure ; status
.text:0000000000004C7D                 lea     rdx, format+4   ; format
.text:0000000000004C84                 mov     rcx, rax
.text:0000000000004C87                 xor     esi, esi        ; errnum
.text:0000000000004C89                 xor     eax, eax
.text:0000000000004C8B                 call    _error
.text:0000000000004C90                 call    _abort
.text:0000000000004C90 ; } // starts at 4C60
.text:0000000000004C90 xalloc_die      endp
.text:0000000000004C90
.text:0000000000004C90 ; ---------------------------------------------------------------------------
.text:0000000000004C95                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000004CA0                 public rpl_fcntl
.text:0000000000004CA0 rpl_fcntl       proc near               ; CODE XREF: main+26A↑p
.text:0000000000004CA0                                         ; main+4A7↑p
.text:0000000000004CA0
.text:0000000000004CA0 var_68          = dword ptr -68h
.text:0000000000004CA0 var_60          = qword ptr -60h
.text:0000000000004CA0 var_58          = qword ptr -58h
.text:0000000000004CA0 var_50          = qword ptr -50h
.text:0000000000004CA0 var_48          = byte ptr -48h
.text:0000000000004CA0 var_38          = qword ptr -38h
.text:0000000000004CA0 var_30          = qword ptr -30h
.text:0000000000004CA0 var_28          = qword ptr -28h
.text:0000000000004CA0 var_20          = qword ptr -20h
.text:0000000000004CA0 arg_0           = byte ptr  8
.text:0000000000004CA0
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 push    r12
.text:0000000000004CA2                 push    rbp
.text:0000000000004CA3                 mov     ebp, edi
.text:0000000000004CA5                 push    rbx
.text:0000000000004CA6                 sub     rsp, 50h
.text:0000000000004CAA                 mov     rax, fs:28h
.text:0000000000004CB3                 mov     [rsp+68h+var_50], rax
.text:0000000000004CB8                 xor     eax, eax
.text:0000000000004CBA                 lea     rax, [rsp+68h+arg_0]
.text:0000000000004CBF                 test    esi, esi
.text:0000000000004CC1                 mov     [rsp+68h+var_38], rdx
.text:0000000000004CC6                 mov     [rsp+68h+var_30], rcx
.text:0000000000004CCB                 mov     [rsp+68h+var_28], r8
.text:0000000000004CD0                 mov     [rsp+68h+var_60], rax
.text:0000000000004CD5                 lea     rax, [rsp+68h+var_48]
.text:0000000000004CDA                 mov     [rsp+68h+var_20], r9
.text:0000000000004CDF                 mov     [rsp+68h+var_68], 10h
.text:0000000000004CE6                 mov     [rsp+68h+var_58], rax
.text:0000000000004CEB                 jz      loc_4EF2
.text:0000000000004CF1                 cmp     esi, 406h
.text:0000000000004CF7                 jnz     short loc_4D40
.text:0000000000004CF9                 mov     rax, [rsp+68h+var_58]
.text:0000000000004CFE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000004D05                 mov     [rsp+68h+var_68], 18h
.text:0000000000004D0C                 mov     r12d, [rax+10h]
.text:0000000000004D10                 mov     edx, r12d
.text:0000000000004D13                 js      loc_4E43
.text:0000000000004D19                 xor     eax, eax
.text:0000000000004D1B                 mov     esi, 406h       ; cmd
.text:0000000000004D20                 call    _fcntl
.text:0000000000004D25                 test    eax, eax
.text:0000000000004D27                 mov     ebx, eax
.text:0000000000004D29                 js      loc_4EB8
.text:0000000000004D2F
.text:0000000000004D2F loc_4D2F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000004D2F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000004D39                 jmp     short loc_4D80
.text:0000000000004D39 ; ---------------------------------------------------------------------------
.text:0000000000004D3B                 align 20h
.text:0000000000004D40
.text:0000000000004D40 loc_4D40:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000004D40                 cmp     esi, 0Bh
.text:0000000000004D43                 jz      short loc_4D70
.text:0000000000004D45                 jg      short loc_4DA0
.text:0000000000004D47                 cmp     esi, 4
.text:0000000000004D4A                 jz      loc_4E20
.text:0000000000004D50                 jg      loc_4E10
.text:0000000000004D56                 cmp     esi, 2
.text:0000000000004D59                 jz      loc_4E20
.text:0000000000004D5F                 jg      short loc_4D70
.text:0000000000004D61                 cmp     esi, 1
.text:0000000000004D64                 jnz     short loc_4DC8
.text:0000000000004D66                 db      2Eh
.text:0000000000004D66                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000004D70                                         ; rpl_fcntl+BF↑j ...
.text:0000000000004D70                 mov     edi, ebp        ; fd
.text:0000000000004D72                 xor     eax, eax
.text:0000000000004D74                 call    _fcntl
.text:0000000000004D79                 mov     ebx, eax
.text:0000000000004D7B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004D80
.text:0000000000004D80 loc_4D80:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000004D80                                         ; rpl_fcntl+147↓j ...
.text:0000000000004D80                 mov     rcx, [rsp+68h+var_50]
.text:0000000000004D85                 xor     rcx, fs:28h
.text:0000000000004D8E                 mov     eax, ebx
.text:0000000000004D90                 jnz     loc_4EED
.text:0000000000004D96                 add     rsp, 50h
.text:0000000000004D9A                 pop     rbx
.text:0000000000004D9B                 pop     rbp
.text:0000000000004D9C                 pop     r12
.text:0000000000004D9E                 retn
.text:0000000000004D9E ; ---------------------------------------------------------------------------
.text:0000000000004D9F                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000004DA0                 cmp     esi, 407h
.text:0000000000004DA6                 jg      short loc_4DF0
.text:0000000000004DA8                 cmp     esi, 406h
.text:0000000000004DAE                 jge     short loc_4E20
.text:0000000000004DB0                 cmp     esi, 401h
.text:0000000000004DB6                 jz      short loc_4D70
.text:0000000000004DB8                 cmp     esi, 402h
.text:0000000000004DBE                 jz      short loc_4E20
.text:0000000000004DC0                 cmp     esi, 400h
.text:0000000000004DC6                 jz      short loc_4E20
.text:0000000000004DC8
.text:0000000000004DC8 loc_4DC8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000004DC8                                         ; rpl_fcntl+164↓j ...
.text:0000000000004DC8                 mov     eax, [rsp+68h+var_68]
.text:0000000000004DCB                 cmp     eax, 2Fh ; '/'
.text:0000000000004DCE                 ja      loc_4F0A
.text:0000000000004DD4                 add     rax, [rsp+68h+var_58]
.text:0000000000004DD9
.text:0000000000004DD9 loc_4DD9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000004DD9                 mov     rdx, [rax]
.text:0000000000004DDC                 mov     edi, ebp        ; fd
.text:0000000000004DDE                 xor     eax, eax
.text:0000000000004DE0                 call    _fcntl
.text:0000000000004DE5                 mov     ebx, eax
.text:0000000000004DE7                 jmp     short loc_4D80
.text:0000000000004DE7 ; ---------------------------------------------------------------------------
.text:0000000000004DE9                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 loc_4DF0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000004DF0                 cmp     esi, 409h
.text:0000000000004DF6                 jz      short loc_4E20
.text:0000000000004DF8                 jl      loc_4D70
.text:0000000000004DFE                 cmp     esi, 40Ah
.text:0000000000004E04                 jnz     short loc_4DC8
.text:0000000000004E06                 jmp     loc_4D70
.text:0000000000004E06 ; ---------------------------------------------------------------------------
.text:0000000000004E0B                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000004E10                 cmp     esi, 9
.text:0000000000004E13                 jz      loc_4D70
.text:0000000000004E19                 jg      short loc_4E20
.text:0000000000004E1B                 cmp     esi, 8
.text:0000000000004E1E                 jnz     short loc_4DC8
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000004E20                                         ; rpl_fcntl+B9↑j ...
.text:0000000000004E20                 mov     eax, [rsp+68h+var_68]
.text:0000000000004E23                 cmp     eax, 2Fh ; '/'
.text:0000000000004E26                 ja      loc_4F14
.text:0000000000004E2C                 add     rax, [rsp+68h+var_58]
.text:0000000000004E31
.text:0000000000004E31 loc_4E31:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000004E31                 mov     edx, [rax]
.text:0000000000004E33                 mov     edi, ebp        ; fd
.text:0000000000004E35                 xor     eax, eax
.text:0000000000004E37                 call    _fcntl
.text:0000000000004E3C                 mov     ebx, eax
.text:0000000000004E3E                 jmp     loc_4D80
.text:0000000000004E43 ; ---------------------------------------------------------------------------
.text:0000000000004E43
.text:0000000000004E43 loc_4E43:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000004E43                 xor     esi, esi        ; cmd
.text:0000000000004E45                 xor     eax, eax
.text:0000000000004E47                 call    _fcntl
.text:0000000000004E4C                 test    eax, eax
.text:0000000000004E4E                 mov     ebx, eax
.text:0000000000004E50                 js      loc_4D80
.text:0000000000004E56                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000004E5D                 jnz     loc_4D80
.text:0000000000004E63
.text:0000000000004E63 loc_4E63:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000004E63                 xor     eax, eax
.text:0000000000004E65                 mov     esi, 1          ; cmd
.text:0000000000004E6A                 mov     edi, ebx        ; fd
.text:0000000000004E6C                 call    _fcntl
.text:0000000000004E71                 test    eax, eax
.text:0000000000004E73                 js      short loc_4E91
.text:0000000000004E75                 or      eax, 1
.text:0000000000004E78                 mov     esi, 2          ; cmd
.text:0000000000004E7D                 mov     edi, ebx        ; fd
.text:0000000000004E7F                 mov     edx, eax
.text:0000000000004E81                 xor     eax, eax
.text:0000000000004E83                 call    _fcntl
.text:0000000000004E88                 cmp     eax, 0FFFFFFFFh
.text:0000000000004E8B                 jnz     loc_4D80
.text:0000000000004E91
.text:0000000000004E91 loc_4E91:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000004E91                 call    ___errno_location
.text:0000000000004E96                 mov     r12d, [rax]
.text:0000000000004E99                 mov     rbp, rax
.text:0000000000004E9C                 mov     edi, ebx        ; fd
.text:0000000000004E9E                 call    _close
.text:0000000000004EA3                 mov     ebx, 0FFFFFFFFh
.text:0000000000004EA8                 mov     [rbp+0], r12d
.text:0000000000004EAC                 jmp     loc_4D80
.text:0000000000004EAC ; ---------------------------------------------------------------------------
.text:0000000000004EB1                 align 8
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000004EB8                 call    ___errno_location
.text:0000000000004EBD                 cmp     dword ptr [rax], 16h
.text:0000000000004EC0                 jnz     loc_4D2F
.text:0000000000004EC6                 xor     esi, esi        ; cmd
.text:0000000000004EC8                 xor     eax, eax
.text:0000000000004ECA                 mov     edx, r12d
.text:0000000000004ECD                 mov     edi, ebp        ; fd
.text:0000000000004ECF                 call    _fcntl
.text:0000000000004ED4                 test    eax, eax
.text:0000000000004ED6                 mov     ebx, eax
.text:0000000000004ED8                 js      loc_4D80
.text:0000000000004EDE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000004EE8                 jmp     loc_4E63
.text:0000000000004EED ; ---------------------------------------------------------------------------
.text:0000000000004EED
.text:0000000000004EED loc_4EED:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000004EED                 call    ___stack_chk_fail
.text:0000000000004EF2 ; ---------------------------------------------------------------------------
.text:0000000000004EF2
.text:0000000000004EF2 loc_4EF2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000004EF2                 mov     rax, [rsp+68h+var_58]
.text:0000000000004EF7                 xor     esi, esi        ; cmd
.text:0000000000004EF9                 mov     edx, [rax+10h]
.text:0000000000004EFC                 xor     eax, eax
.text:0000000000004EFE                 call    _fcntl
.text:0000000000004F03                 mov     ebx, eax
.text:0000000000004F05                 jmp     loc_4D80
.text:0000000000004F0A ; ---------------------------------------------------------------------------
.text:0000000000004F0A
.text:0000000000004F0A loc_4F0A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000004F0A                 mov     rax, [rsp+68h+var_60]
.text:0000000000004F0F                 jmp     loc_4DD9
.text:0000000000004F14 ; ---------------------------------------------------------------------------
.text:0000000000004F14
.text:0000000000004F14 loc_4F14:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000004F14                 mov     rax, [rsp+68h+var_60]
.text:0000000000004F19                 jmp     loc_4E31
.text:0000000000004F19 ; } // starts at 4CA0
.text:0000000000004F19 rpl_fcntl       endp
.text:0000000000004F19
.text:0000000000004F19 ; ---------------------------------------------------------------------------
.text:0000000000004F1E                 align 20h
.text:0000000000004F20
.text:0000000000004F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F20
.text:0000000000004F20 ; Attributes: info_from_lumina
.text:0000000000004F20
.text:0000000000004F20 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004F20                 public rpl_mbrtowc
.text:0000000000004F20 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004F20
.text:0000000000004F20 pwc             = dword ptr -34h
.text:0000000000004F20 var_30          = qword ptr -30h
.text:0000000000004F20
.text:0000000000004F20 ; __unwind {
.text:0000000000004F20                 push    r13
.text:0000000000004F22                 push    r12
.text:0000000000004F24                 mov     r13, rsi
.text:0000000000004F27                 push    rbp
.text:0000000000004F28                 push    rbx
.text:0000000000004F29                 mov     rbx, rdi
.text:0000000000004F2C                 mov     r12, rdx
.text:0000000000004F2F                 sub     rsp, 18h
.text:0000000000004F33                 mov     rax, fs:28h
.text:0000000000004F3C                 mov     [rsp+38h+var_30], rax
.text:0000000000004F41                 xor     eax, eax
.text:0000000000004F43                 lea     rax, [rsp+38h+pwc]
.text:0000000000004F48                 test    rdi, rdi
.text:0000000000004F4B                 cmovz   rbx, rax
.text:0000000000004F4F                 mov     rdi, rbx        ; pwc
.text:0000000000004F52                 call    _mbrtowc
.text:0000000000004F57                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004F5B                 mov     rbp, rax
.text:0000000000004F5E                 jbe     short loc_4F80
.text:0000000000004F60                 test    r12, r12
.text:0000000000004F63                 jz      short loc_4F80
.text:0000000000004F65                 xor     edi, edi
.text:0000000000004F67                 call    hard_locale
.text:0000000000004F6C                 test    al, al
.text:0000000000004F6E                 jnz     short loc_4F80
.text:0000000000004F70                 movzx   eax, byte ptr [r13+0]
.text:0000000000004F75                 mov     ebp, 1
.text:0000000000004F7A                 mov     [rbx], eax
.text:0000000000004F7C                 nop     dword ptr [rax+00h]
.text:0000000000004F80
.text:0000000000004F80 loc_4F80:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004F80                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004F80                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004F85                 xor     rdx, fs:28h
.text:0000000000004F8E                 mov     rax, rbp
.text:0000000000004F91                 jnz     short loc_4F9E
.text:0000000000004F93                 add     rsp, 18h
.text:0000000000004F97                 pop     rbx
.text:0000000000004F98                 pop     rbp
.text:0000000000004F99                 pop     r12
.text:0000000000004F9B                 pop     r13
.text:0000000000004F9D                 retn
.text:0000000000004F9E ; ---------------------------------------------------------------------------
.text:0000000000004F9E
.text:0000000000004F9E loc_4F9E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000004F9E                 call    ___stack_chk_fail
.text:0000000000004F9E ; } // starts at 4F20
.text:0000000000004F9E rpl_mbrtowc     endp
.text:0000000000004F9E
.text:0000000000004F9E ; ---------------------------------------------------------------------------
.text:0000000000004FA3                 align 10h
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0 ; Attributes: info_from_lumina
.text:0000000000004FB0
.text:0000000000004FB0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004FB0                 public close_stream
.text:0000000000004FB0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004FB0                                         ; close_stdout+33↑p
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 push    r12
.text:0000000000004FB2                 push    rbp
.text:0000000000004FB3                 mov     rbp, rdi
.text:0000000000004FB6                 push    rbx
.text:0000000000004FB7                 call    ___fpending
.text:0000000000004FBC                 mov     ebx, [rbp+0]
.text:0000000000004FBF                 mov     rdi, rbp        ; stream
.text:0000000000004FC2                 mov     r12, rax
.text:0000000000004FC5                 call    rpl_fclose
.text:0000000000004FCA                 and     ebx, 20h
.text:0000000000004FCD                 test    ebx, ebx
.text:0000000000004FCF                 jnz     short loc_4FE8
.text:0000000000004FD1                 test    eax, eax
.text:0000000000004FD3                 jz      short loc_4FDF
.text:0000000000004FD5                 test    r12, r12
.text:0000000000004FD8                 mov     eax, 0FFFFFFFFh
.text:0000000000004FDD                 jz      short loc_5018
.text:0000000000004FDF
.text:0000000000004FDF loc_4FDF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004FDF                 pop     rbx
.text:0000000000004FE0                 pop     rbp
.text:0000000000004FE1                 pop     r12
.text:0000000000004FE3                 retn
.text:0000000000004FE3 ; ---------------------------------------------------------------------------
.text:0000000000004FE4                 align 8
.text:0000000000004FE8
.text:0000000000004FE8 loc_4FE8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004FE8                 test    eax, eax
.text:0000000000004FEA                 jnz     short loc_5008
.text:0000000000004FEC                 call    ___errno_location
.text:0000000000004FF1                 mov     dword ptr [rax], 0
.text:0000000000004FF7                 mov     eax, 0FFFFFFFFh
.text:0000000000004FFC                 pop     rbx
.text:0000000000004FFD                 pop     rbp
.text:0000000000004FFE                 pop     r12
.text:0000000000005000                 retn
.text:0000000000005000 ; ---------------------------------------------------------------------------
.text:0000000000005001                 align 8
.text:0000000000005008
.text:0000000000005008 loc_5008:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005008                 pop     rbx
.text:0000000000005009                 mov     eax, 0FFFFFFFFh
.text:000000000000500E                 pop     rbp
.text:000000000000500F                 pop     r12
.text:0000000000005011                 retn
.text:0000000000005011 ; ---------------------------------------------------------------------------
.text:0000000000005012                 align 8
.text:0000000000005018
.text:0000000000005018 loc_5018:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005018                 call    ___errno_location
.text:000000000000501D                 cmp     dword ptr [rax], 9
.text:0000000000005020                 pop     rbx
.text:0000000000005021                 pop     rbp
.text:0000000000005022                 pop     r12
.text:0000000000005024                 setnz   al
.text:0000000000005027                 movzx   eax, al
.text:000000000000502A                 neg     eax
.text:000000000000502C                 retn
.text:000000000000502C ; } // starts at 4FB0
.text:000000000000502C close_stream    endp
.text:000000000000502C
.text:000000000000502C ; ---------------------------------------------------------------------------
.text:000000000000502D                 align 10h
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030 ; Attributes: info_from_lumina
.text:0000000000005030
.text:0000000000005030 ; char *__fastcall last_component(const char *name)
.text:0000000000005030                 public last_component
.text:0000000000005030 last_component  proc near               ; CODE XREF: mfile_name_concat+17↑p
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 movzx   edx, byte ptr [rdi]
.text:0000000000005033                 mov     rax, rdi
.text:0000000000005036                 cmp     dl, 2Fh ; '/'
.text:0000000000005039                 jnz     short loc_504C
.text:000000000000503B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005040
.text:0000000000005040 loc_5040:                               ; CODE XREF: last_component+1A↓j
.text:0000000000005040                 add     rax, 1
.text:0000000000005044                 movzx   edx, byte ptr [rax]
.text:0000000000005047                 cmp     dl, 2Fh ; '/'
.text:000000000000504A                 jz      short loc_5040
.text:000000000000504C
.text:000000000000504C loc_504C:                               ; CODE XREF: last_component+9↑j
.text:000000000000504C                 test    dl, dl
.text:000000000000504E                 jz      short locret_508A
.text:0000000000005050                 mov     rcx, rax
.text:0000000000005053                 xor     esi, esi
.text:0000000000005055                 jmp     short loc_5075
.text:0000000000005055 ; ---------------------------------------------------------------------------
.text:0000000000005057                 align 20h
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: last_component+48↓j
.text:0000000000005060                 test    sil, sil
.text:0000000000005063                 jz      short loc_506A
.text:0000000000005065                 mov     rax, rcx
.text:0000000000005068                 xor     esi, esi
.text:000000000000506A
.text:000000000000506A loc_506A:                               ; CODE XREF: last_component+33↑j
.text:000000000000506A                 add     rcx, 1
.text:000000000000506E                 movzx   edx, byte ptr [rcx]
.text:0000000000005071                 test    dl, dl
.text:0000000000005073                 jz      short locret_508A
.text:0000000000005075
.text:0000000000005075 loc_5075:                               ; CODE XREF: last_component+25↑j
.text:0000000000005075                                         ; last_component+58↓j
.text:0000000000005075                 cmp     dl, 2Fh ; '/'
.text:0000000000005078                 jnz     short loc_5060
.text:000000000000507A                 add     rcx, 1
.text:000000000000507E                 movzx   edx, byte ptr [rcx]
.text:0000000000005081                 mov     esi, 1
.text:0000000000005086                 test    dl, dl
.text:0000000000005088                 jnz     short loc_5075
.text:000000000000508A
.text:000000000000508A locret_508A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000508A                                         ; last_component+43↑j
.text:000000000000508A                 rep retn
.text:000000000000508A ; } // starts at 5030
.text:000000000000508A last_component  endp
.text:000000000000508A
.text:000000000000508A ; ---------------------------------------------------------------------------
.text:000000000000508C                 align 10h
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090 ; Attributes: info_from_lumina
.text:0000000000005090
.text:0000000000005090 ; size_t __fastcall base_len(const char *name)
.text:0000000000005090                 public base_len
.text:0000000000005090 base_len        proc near               ; CODE XREF: mfile_name_concat+22↑p
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 push    rbx
.text:0000000000005091                 mov     rbx, rdi
.text:0000000000005094                 call    _strlen
.text:0000000000005099                 cmp     rax, 1
.text:000000000000509D                 jbe     short loc_50AA
.text:000000000000509F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:00000000000050A4                 lea     rdx, [rax-1]
.text:00000000000050A8                 jz      short loc_50B8
.text:00000000000050AA
.text:00000000000050AA loc_50AA:                               ; CODE XREF: base_len+D↑j
.text:00000000000050AA                 pop     rbx
.text:00000000000050AB                 retn
.text:00000000000050AB ; ---------------------------------------------------------------------------
.text:00000000000050AC                 align 10h
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: base_len+37↓j
.text:00000000000050B0                 mov     rdx, rax
.text:00000000000050B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000050B8
.text:00000000000050B8 loc_50B8:                               ; CODE XREF: base_len+18↑j
.text:00000000000050B8                 cmp     rdx, 1
.text:00000000000050BC                 jz      short loc_50D0
.text:00000000000050BE                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:00000000000050C3                 lea     rax, [rdx-1]
.text:00000000000050C7                 jz      short loc_50B0
.text:00000000000050C9                 mov     rax, rdx
.text:00000000000050CC                 pop     rbx
.text:00000000000050CD                 retn
.text:00000000000050CD ; ---------------------------------------------------------------------------
.text:00000000000050CE                 align 10h
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: base_len+2C↑j
.text:00000000000050D0                 mov     eax, 1
.text:00000000000050D5                 pop     rbx
.text:00000000000050D6                 retn
.text:00000000000050D6 ; } // starts at 5090
.text:00000000000050D6 base_len        endp
.text:00000000000050D6
.text:00000000000050D6 ; ---------------------------------------------------------------------------
.text:00000000000050D7                 align 20h
.text:00000000000050E0
.text:00000000000050E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050E0
.text:00000000000050E0
.text:00000000000050E0                 public hard_locale
.text:00000000000050E0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000050E0 ; __unwind {
.text:00000000000050E0                 sub     rsp, 8
.text:00000000000050E4                 xor     esi, esi        ; locale
.text:00000000000050E6                 call    _setlocale
.text:00000000000050EB                 mov     rdx, rax
.text:00000000000050EE                 mov     eax, 1
.text:00000000000050F3                 test    rdx, rdx
.text:00000000000050F6                 jz      short loc_5115
.text:00000000000050F8                 lea     rdi, aC         ; "C"
.text:00000000000050FF                 mov     ecx, 2
.text:0000000000005104                 mov     rsi, rdx
.text:0000000000005107                 repe cmpsb
.text:0000000000005109                 setnbe  cl
.text:000000000000510C                 sbb     cl, 0
.text:000000000000510F                 xor     eax, eax
.text:0000000000005111                 test    cl, cl
.text:0000000000005113                 jnz     short loc_5120
.text:0000000000005115
.text:0000000000005115 loc_5115:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005115                 add     rsp, 8
.text:0000000000005119                 retn
.text:0000000000005119 ; ---------------------------------------------------------------------------
.text:000000000000511A                 align 20h
.text:0000000000005120
.text:0000000000005120 loc_5120:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005120                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005127                 mov     ecx, 6
.text:000000000000512C                 mov     rsi, rdx
.text:000000000000512F                 repe cmpsb
.text:0000000000005131                 setnbe  al
.text:0000000000005134                 sbb     al, 0
.text:0000000000005136                 test    al, al
.text:0000000000005138                 setnz   al
.text:000000000000513B                 add     rsp, 8
.text:000000000000513F                 retn
.text:000000000000513F ; } // starts at 50E0
.text:000000000000513F hard_locale     endp
.text:000000000000513F
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140
.text:0000000000005140                 public locale_charset
.text:0000000000005140 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 sub     rsp, 8
.text:0000000000005144                 mov     edi, 0Eh        ; item
.text:0000000000005149                 call    _nl_langinfo
.text:000000000000514E                 test    rax, rax
.text:0000000000005151                 jz      short loc_5170
.text:0000000000005153                 cmp     byte ptr [rax], 0
.text:0000000000005156                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000515D                 cmovz   rax, rdx
.text:0000000000005161                 add     rsp, 8
.text:0000000000005165                 retn
.text:0000000000005165 ; ---------------------------------------------------------------------------
.text:0000000000005166                 align 10h
.text:0000000000005170
.text:0000000000005170 loc_5170:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005170                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005177                 add     rsp, 8
.text:000000000000517B                 retn
.text:000000000000517B ; } // starts at 5140
.text:000000000000517B locale_charset  endp
.text:000000000000517B
.text:000000000000517B ; ---------------------------------------------------------------------------
.text:000000000000517C                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180 ; Attributes: info_from_lumina
.text:0000000000005180
.text:0000000000005180 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005180                 public rpl_fclose
.text:0000000000005180 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 push    r12
.text:0000000000005182                 push    rbp
.text:0000000000005183                 push    rbx
.text:0000000000005184                 mov     rbx, rdi
.text:0000000000005187                 call    _fileno
.text:000000000000518C                 test    eax, eax
.text:000000000000518E                 mov     rdi, rbx        ; fp
.text:0000000000005191                 js      short loc_51E7
.text:0000000000005193                 call    ___freading
.text:0000000000005198                 test    eax, eax
.text:000000000000519A                 jnz     short loc_51C8
.text:000000000000519C
.text:000000000000519C loc_519C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000519C                 mov     rdi, rbx        ; stream
.text:000000000000519F                 call    rpl_fflush
.text:00000000000051A4                 test    eax, eax
.text:00000000000051A6                 jz      short loc_51E4
.text:00000000000051A8                 call    ___errno_location
.text:00000000000051AD                 mov     r12d, [rax]
.text:00000000000051B0                 mov     rdi, rbx        ; stream
.text:00000000000051B3                 mov     rbp, rax
.text:00000000000051B6                 call    _fclose
.text:00000000000051BB                 test    r12d, r12d
.text:00000000000051BE                 jnz     short loc_51F0
.text:00000000000051C0
.text:00000000000051C0 loc_51C0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000051C0                 pop     rbx
.text:00000000000051C1                 pop     rbp
.text:00000000000051C2                 pop     r12
.text:00000000000051C4                 retn
.text:00000000000051C4 ; ---------------------------------------------------------------------------
.text:00000000000051C5                 align 8
.text:00000000000051C8
.text:00000000000051C8 loc_51C8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000051C8                 mov     rdi, rbx        ; stream
.text:00000000000051CB                 call    _fileno
.text:00000000000051D0                 xor     esi, esi        ; offset
.text:00000000000051D2                 mov     edx, 1          ; whence
.text:00000000000051D7                 mov     edi, eax        ; fd
.text:00000000000051D9                 call    _lseek
.text:00000000000051DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000051E2                 jnz     short loc_519C
.text:00000000000051E4
.text:00000000000051E4 loc_51E4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000051E4                 mov     rdi, rbx        ; stream
.text:00000000000051E7
.text:00000000000051E7 loc_51E7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000051E7                 pop     rbx
.text:00000000000051E8                 pop     rbp
.text:00000000000051E9                 pop     r12
.text:00000000000051EB                 jmp     _fclose
.text:00000000000051F0 ; ---------------------------------------------------------------------------
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000051F0                 mov     [rbp+0], r12d
.text:00000000000051F4                 mov     eax, 0FFFFFFFFh
.text:00000000000051F9                 jmp     short loc_51C0
.text:00000000000051F9 ; } // starts at 5180
.text:00000000000051F9 rpl_fclose      endp
.text:00000000000051F9
.text:00000000000051F9 ; ---------------------------------------------------------------------------
.text:00000000000051FB                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200 ; Attributes: info_from_lumina
.text:0000000000005200
.text:0000000000005200 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005200                 public rpl_fflush
.text:0000000000005200 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 test    rdi, rdi
.text:0000000000005203                 push    rbx
.text:0000000000005204                 mov     rbx, rdi
.text:0000000000005207                 jz      short loc_521A
.text:0000000000005209                 call    ___freading
.text:000000000000520E                 test    eax, eax
.text:0000000000005210                 jz      short loc_521A
.text:0000000000005212                 test    dword ptr [rbx], 100h
.text:0000000000005218                 jnz     short loc_5228
.text:000000000000521A
.text:000000000000521A loc_521A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000521A                                         ; rpl_fflush+10↑j
.text:000000000000521A                 mov     rdi, rbx        ; stream
.text:000000000000521D                 pop     rbx
.text:000000000000521E                 jmp     _fflush
.text:000000000000521E ; ---------------------------------------------------------------------------
.text:0000000000005223                 align 8
.text:0000000000005228
.text:0000000000005228 loc_5228:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005228                 mov     rdi, rbx
.text:000000000000522B                 mov     edx, 1
.text:0000000000005230                 xor     esi, esi
.text:0000000000005232                 call    rpl_fseeko
.text:0000000000005237                 mov     rdi, rbx        ; stream
.text:000000000000523A                 pop     rbx
.text:000000000000523B                 jmp     _fflush
.text:000000000000523B ; } // starts at 5200
.text:000000000000523B rpl_fflush      endp
.text:000000000000523B
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240 ; Attributes: info_from_lumina
.text:0000000000005240
.text:0000000000005240 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005240                 public rpl_fseeko
.text:0000000000005240 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 mov     rax, [rdi+8]
.text:0000000000005244                 cmp     [rdi+10h], rax
.text:0000000000005248                 jz      short loc_5250
.text:000000000000524A
.text:000000000000524A loc_524A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000524A                                         ; rpl_fseeko+1F↓j
.text:000000000000524A                 jmp     _fseeko
.text:000000000000524A ; ---------------------------------------------------------------------------
.text:000000000000524F                 align 10h
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005250                 mov     rax, [rdi+20h]
.text:0000000000005254                 cmp     [rdi+28h], rax
.text:0000000000005258                 jnz     short loc_524A
.text:000000000000525A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000525F                 jnz     short loc_524A
.text:0000000000005261                 push    r12
.text:0000000000005263                 push    rbp
.text:0000000000005264                 mov     r12d, edx
.text:0000000000005267                 push    rbx
.text:0000000000005268                 mov     rbp, rsi
.text:000000000000526B                 mov     rbx, rdi
.text:000000000000526E                 call    _fileno
.text:0000000000005273                 mov     edx, r12d       ; whence
.text:0000000000005276                 mov     rsi, rbp        ; offset
.text:0000000000005279                 mov     edi, eax        ; fd
.text:000000000000527B                 call    _lseek
.text:0000000000005280                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005284                 jz      short loc_5292
.text:0000000000005286                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005289                 mov     [rbx+90h], rax
.text:0000000000005290                 xor     eax, eax
.text:0000000000005292
.text:0000000000005292 loc_5292:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005292                 pop     rbx
.text:0000000000005293                 pop     rbp
.text:0000000000005294                 pop     r12
.text:0000000000005296                 retn
.text:0000000000005296 ; } // starts at 5240
.text:0000000000005296 rpl_fseeko      endp
.text:0000000000005296
.text:0000000000005296 ; ---------------------------------------------------------------------------
.text:0000000000005297                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0 ; Attributes: info_from_lumina
.text:00000000000052A0
.text:00000000000052A0 ; void _libc_csu_init(void)
.text:00000000000052A0                 public __libc_csu_init
.text:00000000000052A0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 push    r15
.text:00000000000052A2                 push    r14
.text:00000000000052A4                 mov     r15, rdx
.text:00000000000052A7                 push    r13
.text:00000000000052A9                 push    r12
.text:00000000000052AB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000052B2                 push    rbp
.text:00000000000052B3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000052BA                 push    rbx
.text:00000000000052BB                 mov     r13d, edi
.text:00000000000052BE                 mov     r14, rsi
.text:00000000000052C1                 sub     rbp, r12
.text:00000000000052C4                 sub     rsp, 8
.text:00000000000052C8                 sar     rbp, 3
.text:00000000000052CC                 call    _init_proc
.text:00000000000052D1                 test    rbp, rbp
.text:00000000000052D4                 jz      short loc_52F6
.text:00000000000052D6                 xor     ebx, ebx
.text:00000000000052D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000052E0                 mov     rdx, r15
.text:00000000000052E3                 mov     rsi, r14
.text:00000000000052E6                 mov     edi, r13d
.text:00000000000052E9                 call    ds:(__frame_dummy_init_array_entry - 207B70h)[r12+rbx*8]
.text:00000000000052ED                 add     rbx, 1
.text:00000000000052F1                 cmp     rbp, rbx
.text:00000000000052F4                 jnz     short loc_52E0
.text:00000000000052F6
.text:00000000000052F6 loc_52F6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000052F6                 add     rsp, 8
.text:00000000000052FA                 pop     rbx
.text:00000000000052FB                 pop     rbp
.text:00000000000052FC                 pop     r12
.text:00000000000052FE                 pop     r13
.text:0000000000005300                 pop     r14
.text:0000000000005302                 pop     r15
.text:0000000000005304                 retn
.text:0000000000005304 ; } // starts at 52A0
.text:0000000000005304 __libc_csu_init endp
.text:0000000000005304
.text:0000000000005304 ; ---------------------------------------------------------------------------
.text:0000000000005305                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310
.text:0000000000005310 ; void _libc_csu_fini(void)
.text:0000000000005310                 public __libc_csu_fini
.text:0000000000005310 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 rep retn
.text:0000000000005310 ; } // starts at 5310
.text:0000000000005310 __libc_csu_fini endp
.text:0000000000005310
.text:0000000000005310 ; ---------------------------------------------------------------------------
.text:0000000000005312                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320
.text:0000000000005320 atexit          proc near               ; CODE XREF: main+70↑p
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005327                 xor     esi, esi        ; obj
.text:0000000000005329                 jmp     ___cxa_atexit
.text:0000000000005329 ; } // starts at 5320
.text:0000000000005329 atexit          endp
.text:0000000000005329
.text:0000000000005329 _text           ends
.text:0000000000005329
LOAD:000000000000532E ; ===========================================================================
LOAD:000000000000532E
LOAD:000000000000532E ; Segment type: Pure code
LOAD:000000000000532E ; Segment permissions: Read/Execute
LOAD:000000000000532E LOAD            segment byte public 'CODE' use64
LOAD:000000000000532E                 assume cs:LOAD
LOAD:000000000000532E                 ;org 532Eh
LOAD:000000000000532E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000532E                 align 10h
LOAD:000000000000532E LOAD            ends
LOAD:000000000000532E
.fini:0000000000005330 ; ===========================================================================
.fini:0000000000005330
.fini:0000000000005330 ; Segment type: Pure code
.fini:0000000000005330 ; Segment permissions: Read/Execute
.fini:0000000000005330 _fini           segment dword public 'CODE' use64
.fini:0000000000005330                 assume cs:_fini
.fini:0000000000005330                 ;org 5330h
.fini:0000000000005330                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005330
.fini:0000000000005330 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005330
.fini:0000000000005330
.fini:0000000000005330                 public _term_proc
.fini:0000000000005330 _term_proc      proc near
.fini:0000000000005330                 sub     rsp, 8          ; _fini
.fini:0000000000005334                 add     rsp, 8
.fini:0000000000005338                 retn
.fini:0000000000005338 _term_proc      endp
.fini:0000000000005338
.fini:0000000000005338 _fini           ends
.fini:0000000000005338
LOAD:0000000000005339 ; ===========================================================================
LOAD:0000000000005339
LOAD:0000000000005339 ; Segment type: Pure code
LOAD:0000000000005339 ; Segment permissions: Read/Execute
LOAD:0000000000005339 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005339                 assume cs:LOAD
LOAD:0000000000005339                 ;org 5339h
LOAD:0000000000005339                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005339                 align 20h
LOAD:0000000000005339 LOAD            ends
LOAD:0000000000005339
.rodata:0000000000005340 ; ===========================================================================
.rodata:0000000000005340
.rodata:0000000000005340 ; Segment type: Pure data
.rodata:0000000000005340 ; Segment permissions: Read
.rodata:0000000000005340 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005340                 assume cs:_rodata
.rodata:0000000000005340                 ;org 5340h
.rodata:0000000000005340                 public _IO_stdin_used
.rodata:0000000000005340 _IO_stdin_used  db    1
.rodata:0000000000005341                 db    0
.rodata:0000000000005342                 db    2
.rodata:0000000000005343                 db    0
.rodata:0000000000005344 aNohup          db 'nohup',0            ; DATA XREF: main+90↑o
.rodata:0000000000005344                                         ; usage+116↑o ...
.rodata:000000000000534A asc_534A        db '[',0                ; DATA XREF: usage+14B↑o
.rodata:000000000000534C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+172↑o
.rodata:000000000000535C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000535C                                         ; DATA XREF: usage+1A2↑o
.rodata:000000000000535C                                         ; usage+29C↑o ...
.rodata:0000000000005372 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1B3↑o
.rodata:000000000000537C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1BF↑o
.rodata:000000000000538B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+152↑o
.rodata:0000000000005395 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+17E↑o
.rodata:000000000000539F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+196↑o
.rodata:00000000000053A9 ; const char aSOnlineHelpS[]
.rodata:00000000000053A9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+20A↑o
.rodata:00000000000053A9                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000053C0 unk_53C0        db  47h ; G             ; DATA XREF: main+89↑o
.rodata:00000000000053C0                                         ; usage+226↑o ...
.rodata:00000000000053C1                 db  4Eh ; N
.rodata:00000000000053C2                 db  55h ; U
.rodata:00000000000053C3                 db  20h
.rodata:00000000000053C4 ; const char domainname[]
.rodata:00000000000053C4 domainname      db 'coreutils',0        ; DATA XREF: main+33↑o
.rodata:00000000000053C4                                         ; main+3F↑o ...
.rodata:00000000000053CE ; const char s2[]
.rodata:00000000000053CE s2              db 'en_',0              ; DATA XREF: usage+24D↑o
.rodata:00000000000053CE                                         ; usage+30E↑o
.rodata:00000000000053D2 ; const char aFullDocumentat[]
.rodata:00000000000053D2 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000053D2                                         ; DATA XREF: usage:loc_20B9↑o
.rodata:00000000000053D2                                         ; usage:loc_2176↑o
.rodata:00000000000053ED ; const char file[]
.rodata:00000000000053ED file            db 'nohup.out',0        ; DATA XREF: main+182↑o
.rodata:00000000000053ED                                         ; main+1B5↑o ...
.rodata:00000000000053F7 ; const char msgid[]
.rodata:00000000000053F7 msgid           db 'appending output to %s',0
.rodata:00000000000053F7                                         ; DATA XREF: main+219↑o
.rodata:000000000000540E ; const char aRedirectingStd[]
.rodata:000000000000540E aRedirectingStd db 'redirecting stderr to stdout',0
.rodata:000000000000540E                                         ; DATA XREF: main+42B↑o
.rodata:000000000000540E                                         ; main+4B7↑o
.rodata:000000000000542B ; const char dirname[]
.rodata:000000000000542B dirname         db '/usr/local/share/locale',0
.rodata:000000000000542B                                         ; DATA XREF: main+2C↑o
.rodata:0000000000005443 ; const char name[]
.rodata:0000000000005443 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+4B↑o
.rodata:0000000000005453 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+75↑o
.rodata:0000000000005460 ; const char aMissingOperand[]
.rodata:0000000000005460 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1CB3↑o
.rodata:0000000000005470 ; const char aDevNull[]
.rodata:0000000000005470 aDevNull        db '/dev/null',0        ; DATA XREF: main:loc_1A3D↑o
.rodata:000000000000547A ; const char aIgnoringInput[]
.rodata:000000000000547A aIgnoringInput  db 'ignoring input',0   ; DATA XREF: main:loc_1B58↑o
.rodata:0000000000005489 ; const char aHome[]
.rodata:0000000000005489 aHome           db 'HOME',0             ; DATA XREF: main+386↑o
.rodata:000000000000548E ; const char aFailedToOpenS[]
.rodata:000000000000548E aFailedToOpenS  db 'failed to open %s',0
.rodata:000000000000548E                                         ; DATA XREF: main+3F6↑o
.rodata:000000000000548E                                         ; main+567↑o ...
.rodata:00000000000054A0 ; const char aFailedToRunCom[]
.rodata:00000000000054A0 aFailedToRunCom db 'failed to run command %s',0
.rodata:00000000000054A0                                         ; DATA XREF: main+305↑o
.rodata:00000000000054B9                 align 20h
.rodata:00000000000054C0 ; const char aTrySHelpForMor[]
.rodata:00000000000054C0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000054C0                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000054E7                 align 8
.rodata:00000000000054E8 ; const char aUsageSCommandA[]
.rodata:00000000000054E8 aUsageSCommandA db 'Usage: %s COMMAND [ARG]...',0Ah
.rodata:00000000000054E8                                         ; DATA XREF: usage:loc_1EAD↑o
.rodata:00000000000054E8                 db '  or:  %s OPTION',0Ah,0
.rodata:0000000000005515                 align 8
.rodata:0000000000005518 ; const char aRunCommandIgno[]
.rodata:0000000000005518 aRunCommandIgno db 'Run COMMAND, ignoring hangup signals.',0Ah
.rodata:0000000000005518                                         ; DATA XREF: usage+87↑o
.rodata:0000000000005518                 db 0Ah,0
.rodata:0000000000005540 ; const char aHelpDisplayThi[]
.rodata:0000000000005540 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005540                                         ; DATA XREF: usage+AC↑o
.rodata:000000000000556D                 align 10h
.rodata:0000000000005570 ; const char aVersionOutputV[]
.rodata:0000000000005570 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005570                                         ; DATA XREF: usage+D1↑o
.rodata:00000000000055A6                 align 8
.rodata:00000000000055A8 ; const char aIfStandardInpu[]
.rodata:00000000000055A8 aIfStandardInpu db 0Ah                  ; DATA XREF: usage+F6↑o
.rodata:00000000000055A8                 db 'If standard input is a terminal, redirect it from an unreadable f'
.rodata:00000000000055A8                 db 'ile.',0Ah
.rodata:00000000000055A8                 db 'If standard output is a terminal, append output to ',27h,'nohup.o'
.rodata:00000000000055A8                 db 'ut',27h,' if possible,',0Ah
.rodata:00000000000055A8                 db 27h,'$HOME/nohup.out',27h,' otherwise.',0Ah
.rodata:00000000000055A8                 db 'If standard error is a terminal, redirect it to standard output.',0Ah
.rodata:00000000000055A8                 db 'To save output to FILE, use ',27h,'%s COMMAND > FILE',27h,'.',0Ah
.rodata:00000000000055A8                 db 0
.rodata:00000000000056CB                 align 10h
.rodata:00000000000056D0 ; const char aNoteYourShellM[]
.rodata:00000000000056D0 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+122↑o
.rodata:00000000000056D0                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:00000000000056D0                 db 'persedes',0Ah
.rodata:00000000000056D0                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:00000000000056D0                 db 'ocumentation',0Ah
.rodata:00000000000056D0                 db 'for details about the options it supports.',0Ah,0
.rodata:000000000000578F                 align 10h
.rodata:0000000000005790 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005790                                         ; DATA XREF: usage+21F↑o
.rodata:0000000000005790                                         ; usage+283↑o ...
.rodata:00000000000057B8 ; const char aReportAnyTrans[]
.rodata:00000000000057B8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000057B8                                         ; DATA XREF: usage+377↑o
.rodata:00000000000057B8                 db 'am/>',0Ah,0
.rodata:00000000000057FF                 align 20h
.rodata:0000000000005800 ; const char aOrAvailableLoc[]
.rodata:0000000000005800 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005800                                         ; DATA XREF: usage:loc_20FE↑o
.rodata:0000000000005833                 align 8
.rodata:0000000000005838 aIgnoringInputA db 'ignoring input and appending output to %s',0
.rodata:0000000000005838                                         ; DATA XREF: main+20D↑o
.rodata:0000000000005862                 align 8
.rodata:0000000000005868 aIgnoringInputA_0 db 'ignoring input and redirecting stderr to stdout',0
.rodata:0000000000005868                                         ; DATA XREF: main:loc_1B24↑o
.rodata:0000000000005898 ; const char aFailedToRender[]
.rodata:0000000000005898 aFailedToRender db 'failed to render standard input unusable',0
.rodata:0000000000005898                                         ; DATA XREF: main:loc_1BC3↑o
.rodata:00000000000058C1                 align 8
.rodata:00000000000058C8 ; const char aFailedToRedire[]
.rodata:00000000000058C8 aFailedToRedire db 'failed to redirect standard error',0
.rodata:00000000000058C8                                         ; DATA XREF: main:loc_1BFF↑o
.rodata:00000000000058EA a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000058EF ; const char aWriteError[]
.rodata:00000000000058EF aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2253↑o
.rodata:00000000000058FB ; const char format[]
.rodata:00000000000058FB format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000058FB                                         ; close_stdout+8F↑o ...
.rodata:0000000000005902 ; const char shortopts[]
.rodata:0000000000005902 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000005902                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000005904 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000005909 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:0000000000005911                 align 8
.rodata:0000000000005918 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005918                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005950 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005958 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000595C unk_595C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000595D                 db  80h
.rodata:000000000000595E                 db  98h
.rodata:000000000000595F                 db    0
.rodata:0000000000005960 unk_5960        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005961                 db  80h
.rodata:0000000000005962                 db  99h
.rodata:0000000000005963                 db    0
.rodata:0000000000005964 unk_5964        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005965                 db    7
.rodata:0000000000005966                 db  65h ; e
.rodata:0000000000005967                 db    0
.rodata:0000000000005968 unk_5968        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005969                 db 0AFh
.rodata:000000000000596A                 db    0
.rodata:000000000000596B unk_596B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2780↑o
.rodata:000000000000596B                                         ; quotearg_buffer_restyled:loc_353B↑o ...
.rodata:000000000000596C                 db    0
.rodata:000000000000596D ; const char asc_596D[2]
.rodata:000000000000596D asc_596D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000596D                                         ; quotearg_buffer_restyled:loc_2903↑o ...
.rodata:000000000000596F ; const char asc_596F[2]
.rodata:000000000000596F asc_596F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000596F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005971 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005979 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:000000000000597F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:000000000000598C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:000000000000598C                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005999 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005999                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:00000000000059AD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:00000000000059AF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:00000000000059B7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:00000000000059BF                 align 20h
.rodata:00000000000059C0 jpt_28E1        dd offset loc_368A - 59C0h
.rodata:00000000000059C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000059C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000059C0                 dd offset loc_28E3 - 59C0h ; jump table for switch statement
.rodata:00000000000059C0                 dd offset loc_38B8 - 59C0h
.rodata:00000000000059C0                 dd offset loc_36C4 - 59C0h
.rodata:00000000000059C0                 dd offset loc_34B4 - 59C0h
.rodata:00000000000059C0                 dd offset loc_3510 - 59C0h
.rodata:00000000000059C0                 dd offset loc_3565 - 59C0h
.rodata:00000000000059C0                 dd offset loc_35AA - 59C0h
.rodata:00000000000059C0                 dd offset loc_35E4 - 59C0h
.rodata:00000000000059C0                 dd offset loc_35E4 - 59C0h
.rodata:00000000000059C0                 dd offset loc_35E4 - 59C0h
.rodata:00000000000059EC jpt_2A3E        dd offset loc_2C60 - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000059EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh ; jump table for switch statement
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset loc_2CA0 - 59ECh, offset loc_2BA8 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2B68 - 59ECh, offset loc_2D30 - 59ECh, offset loc_2D20 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2D10 - 59ECh, offset loc_2D00 - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset def_2A3E - 59ECh
.rodata:00000000000059EC                 dd offset def_2A3E - 59ECh, offset def_2A3E - 59ECh, offset loc_2CF0 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2CE0 - 59ECh, offset loc_2CE0 - 59ECh, offset loc_2CB0 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2CE0 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2CE0 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2B43 - 59ECh, offset loc_2CE0 - 59ECh, offset loc_2CE0 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2CE0 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2CE0 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2CE0 - 59ECh, offset loc_2CE0 - 59ECh, offset loc_2CE0 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2B13 - 59ECh, offset def_2A3E - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2CE0 - 59ECh, offset loc_2BB8 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2CE0 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2CE0 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh, offset loc_2C88 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2A43 - 59ECh, offset loc_2CE0 - 59ECh, offset loc_2A43 - 59ECh
.rodata:00000000000059EC                 dd offset loc_2CB0 - 59ECh
.rodata:0000000000005BE8 jpt_2DCA        dd offset loc_2E30 - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005BE8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h ; jump table for switch statement
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset loc_2E20 - 5BE8h, offset loc_2F70 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2F58 - 5BE8h, offset loc_2E08 - 5BE8h, offset loc_2F48 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2DF0 - 5BE8h, offset loc_2F30 - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h
.rodata:0000000000005BE8                 dd offset def_2DCA - 5BE8h, offset def_2DCA - 5BE8h, offset loc_2F18 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2F00 - 5BE8h, offset loc_2F00 - 5BE8h, offset loc_2EE8 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2F00 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2F00 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2B40 - 5BE8h, offset loc_2F00 - 5BE8h, offset loc_2F00 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2F00 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2F00 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2F00 - 5BE8h, offset loc_2F00 - 5BE8h, offset loc_2F00 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2B10 - 5BE8h, offset def_2DCA - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2F00 - 5BE8h, offset loc_2DD0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2F00 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2F00 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h, offset loc_2ED0 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2A40 - 5BE8h, offset loc_2F00 - 5BE8h, offset loc_2A40 - 5BE8h
.rodata:0000000000005BE8                 dd offset loc_2EE8 - 5BE8h
.rodata:0000000000005DE4                 align 20h
.rodata:0000000000005E00                 public quoting_style_vals
.rodata:0000000000005E00 quoting_style_vals db    0
.rodata:0000000000005E01                 db    0
.rodata:0000000000005E02                 db    0
.rodata:0000000000005E03                 db    0
.rodata:0000000000005E04                 db    1
.rodata:0000000000005E05                 db    0
.rodata:0000000000005E06                 db    0
.rodata:0000000000005E07                 db    0
.rodata:0000000000005E08                 db    2
.rodata:0000000000005E09                 db    0
.rodata:0000000000005E0A                 db    0
.rodata:0000000000005E0B                 db    0
.rodata:0000000000005E0C                 db    3
.rodata:0000000000005E0D                 db    0
.rodata:0000000000005E0E                 db    0
.rodata:0000000000005E0F                 db    0
.rodata:0000000000005E10                 db    4
.rodata:0000000000005E11                 db    0
.rodata:0000000000005E12                 db    0
.rodata:0000000000005E13                 db    0
.rodata:0000000000005E14                 db    5
.rodata:0000000000005E15                 db    0
.rodata:0000000000005E16                 db    0
.rodata:0000000000005E17                 db    0
.rodata:0000000000005E18                 db    6
.rodata:0000000000005E19                 db    0
.rodata:0000000000005E1A                 db    0
.rodata:0000000000005E1B                 db    0
.rodata:0000000000005E1C                 db    7
.rodata:0000000000005E1D                 db    0
.rodata:0000000000005E1E                 db    0
.rodata:0000000000005E1F                 db    0
.rodata:0000000000005E20                 db    8
.rodata:0000000000005E21                 db    0
.rodata:0000000000005E22                 db    0
.rodata:0000000000005E23                 db    0
.rodata:0000000000005E24                 db    9
.rodata:0000000000005E25                 db    0
.rodata:0000000000005E26                 db    0
.rodata:0000000000005E27                 db    0
.rodata:0000000000005E28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005E34 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000005E3B ; const char aC_0[]
.rodata:0000000000005E3B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_442C↑o
.rodata:0000000000005E3F ; const char aWrittenByS[]
.rodata:0000000000005E3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000005E3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000005E4F ; const char aWrittenBySAndS[]
.rodata:0000000000005E4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000005E4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005E66 ; const char aWrittenBySSAnd[]
.rodata:0000000000005E66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005E66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005E82 ; const char aReportBugsToS[]
.rodata:0000000000005E82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005E82                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005E97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005E97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000005EAD ; const char aSHomePageS[]
.rodata:0000000000005EAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000005EAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005EC1                 align 8
.rodata:0000000000005EC8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005EC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005EC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005EC8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005EC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005EC8                 db '.',0Ah
.rodata:0000000000005EC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005EC8                 db 0Ah,0
.rodata:0000000000005F94                 align 8
.rodata:0000000000005F98 ; const char aWrittenBySSSAn[]
.rodata:0000000000005F98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005F98                                         ; DATA XREF: version_etc_arn:loc_4680↑o
.rodata:0000000000005F98                 db 'and %s.',0Ah,0
.rodata:0000000000005FB8 ; const char aWrittenBySSSSA[]
.rodata:0000000000005FB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005FB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005FB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000005FDC                 align 20h
.rodata:0000000000005FE0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005FE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005FE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005FE0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006008 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006008 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006008                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006008                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006034                 align 8
.rodata:0000000000006038 ; const char aWrittenBySSSSS[]
.rodata:0000000000006038 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006038                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006038                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006038                 db 'and %s.',0Ah,0
.rodata:0000000000006068 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006068 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006068                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006068                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006068                 db '%s, and %s.',0Ah,0
.rodata:000000000000609C                 align 20h
.rodata:00000000000060A0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000060A0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000060A0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000060A0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000060DC                 align 20h
.rodata:00000000000060E0 ; const char aGeneralHelpUsi[]
.rodata:00000000000060E0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000060E0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000060E0                 db 0
.rodata:0000000000006121                 align 8
.rodata:0000000000006128 jpt_4494        dd offset loc_4516 - 6128h
.rodata:0000000000006128                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006128                                         ; version_etc_arn+9D↑r
.rodata:0000000000006128                 dd offset loc_45A8 - 6128h ; jump table for switch statement
.rodata:0000000000006128                 dd offset loc_45E8 - 6128h
.rodata:0000000000006128                 dd offset loc_4630 - 6128h
.rodata:0000000000006128                 dd offset loc_4680 - 6128h
.rodata:0000000000006128                 dd offset loc_46D8 - 6128h
.rodata:0000000000006128                 dd offset loc_4708 - 6128h
.rodata:0000000000006128                 dd offset loc_4770 - 6128h
.rodata:0000000000006128                 dd offset loc_44A0 - 6128h
.rodata:0000000000006128                 dd offset loc_4550 - 6128h
.rodata:0000000000006150                 align 20h
.rodata:0000000000006160                 public version_etc_copyright
.rodata:0000000000006160 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006160                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000618F ; const char aMemoryExhauste[]
.rodata:000000000000618F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000061A0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000061A2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5120↑o
.rodata:00000000000061A8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000061A8                                         ; locale_charset:loc_5170↑o
.rodata:00000000000061A8 _rodata         ends
.rodata:00000000000061A8
LOAD:00000000000061AE ; ===========================================================================
LOAD:00000000000061AE
LOAD:00000000000061AE ; Segment type: Pure code
LOAD:00000000000061AE ; Segment permissions: Read/Execute
LOAD:00000000000061AE LOAD            segment byte public 'CODE' use64
LOAD:00000000000061AE                 assume cs:LOAD
LOAD:00000000000061AE                 ;org 61AEh
LOAD:00000000000061AE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000061AE                 align 10h
LOAD:00000000000061AE LOAD            ends
LOAD:00000000000061AE
.eh_frame_hdr:00000000000061B0 ; ===========================================================================
.eh_frame_hdr:00000000000061B0
.eh_frame_hdr:00000000000061B0 ; Segment type: Pure data
.eh_frame_hdr:00000000000061B0 ; Segment permissions: Read
.eh_frame_hdr:00000000000061B0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000061B0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000061B0                 ;org 61B0h
.eh_frame_hdr:00000000000061B0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000061B1                 db  1Bh
.eh_frame_hdr:00000000000061B2                 db    3
.eh_frame_hdr:00000000000061B3                 db  3Bh ; ;
.eh_frame_hdr:00000000000061B4                 db  7Ch ; |
.eh_frame_hdr:00000000000061B5                 db    2
.eh_frame_hdr:00000000000061B6                 db    0
.eh_frame_hdr:00000000000061B7                 db    0
.eh_frame_hdr:00000000000061B8                 db  4Eh ; N
.eh_frame_hdr:00000000000061B9                 db    0
.eh_frame_hdr:00000000000061BA                 db    0
.eh_frame_hdr:00000000000061BB                 db    0
.eh_frame_hdr:00000000000061BC                 db  20h
.eh_frame_hdr:00000000000061BD                 db 0B2h
.eh_frame_hdr:00000000000061BE                 db 0FFh
.eh_frame_hdr:00000000000061BF                 db 0FFh
.eh_frame_hdr:00000000000061C0                 db 0C8h
.eh_frame_hdr:00000000000061C1                 db    2
.eh_frame_hdr:00000000000061C2                 db    0
.eh_frame_hdr:00000000000061C3                 db    0
.eh_frame_hdr:00000000000061C4                 db  40h ; @
.eh_frame_hdr:00000000000061C5                 db 0B5h
.eh_frame_hdr:00000000000061C6                 db 0FFh
.eh_frame_hdr:00000000000061C7                 db 0FFh
.eh_frame_hdr:00000000000061C8                 db 0F0h
.eh_frame_hdr:00000000000061C9                 db    2
.eh_frame_hdr:00000000000061CA                 db    0
.eh_frame_hdr:00000000000061CB                 db    0
.eh_frame_hdr:00000000000061CC                 db  50h ; P
.eh_frame_hdr:00000000000061CD                 db 0B5h
.eh_frame_hdr:00000000000061CE                 db 0FFh
.eh_frame_hdr:00000000000061CF                 db 0FFh
.eh_frame_hdr:00000000000061D0                 db  34h ; 4
.eh_frame_hdr:00000000000061D1                 db    3
.eh_frame_hdr:00000000000061D2                 db    0
.eh_frame_hdr:00000000000061D3                 db    0
.eh_frame_hdr:00000000000061D4                 db  90h
.eh_frame_hdr:00000000000061D5                 db 0BBh
.eh_frame_hdr:00000000000061D6                 db 0FFh
.eh_frame_hdr:00000000000061D7                 db 0FFh
.eh_frame_hdr:00000000000061D8                 db  98h
.eh_frame_hdr:00000000000061D9                 db    2
.eh_frame_hdr:00000000000061DA                 db    0
.eh_frame_hdr:00000000000061DB                 db    0
.eh_frame_hdr:00000000000061DC                 db 0A0h
.eh_frame_hdr:00000000000061DD                 db 0BCh
.eh_frame_hdr:00000000000061DE                 db 0FFh
.eh_frame_hdr:00000000000061DF                 db 0FFh
.eh_frame_hdr:00000000000061E0                 db    8
.eh_frame_hdr:00000000000061E1                 db    3
.eh_frame_hdr:00000000000061E2                 db    0
.eh_frame_hdr:00000000000061E3                 db    0
.eh_frame_hdr:00000000000061E4                 db  40h ; @
.eh_frame_hdr:00000000000061E5                 db 0C0h
.eh_frame_hdr:00000000000061E6                 db 0FFh
.eh_frame_hdr:00000000000061E7                 db 0FFh
.eh_frame_hdr:00000000000061E8                 db  98h
.eh_frame_hdr:00000000000061E9                 db    3
.eh_frame_hdr:00000000000061EA                 db    0
.eh_frame_hdr:00000000000061EB                 db    0
.eh_frame_hdr:00000000000061EC                 db  50h ; P
.eh_frame_hdr:00000000000061ED                 db 0C0h
.eh_frame_hdr:00000000000061EE                 db 0FFh
.eh_frame_hdr:00000000000061EF                 db 0FFh
.eh_frame_hdr:00000000000061F0                 db 0ACh
.eh_frame_hdr:00000000000061F1                 db    3
.eh_frame_hdr:00000000000061F2                 db    0
.eh_frame_hdr:00000000000061F3                 db    0
.eh_frame_hdr:00000000000061F4                 db  60h ; `
.eh_frame_hdr:00000000000061F5                 db 0C0h
.eh_frame_hdr:00000000000061F6                 db 0FFh
.eh_frame_hdr:00000000000061F7                 db 0FFh
.eh_frame_hdr:00000000000061F8                 db 0C0h
.eh_frame_hdr:00000000000061F9                 db    3
.eh_frame_hdr:00000000000061FA                 db    0
.eh_frame_hdr:00000000000061FB                 db    0
.eh_frame_hdr:00000000000061FC                 db  10h
.eh_frame_hdr:00000000000061FD                 db 0C1h
.eh_frame_hdr:00000000000061FE                 db 0FFh
.eh_frame_hdr:00000000000061FF                 db 0FFh
.eh_frame_hdr:0000000000006200                 db 0F0h
.eh_frame_hdr:0000000000006201                 db    3
.eh_frame_hdr:0000000000006202                 db    0
.eh_frame_hdr:0000000000006203                 db    0
.eh_frame_hdr:0000000000006204                 db  70h ; p
.eh_frame_hdr:0000000000006205                 db 0C1h
.eh_frame_hdr:0000000000006206                 db 0FFh
.eh_frame_hdr:0000000000006207                 db 0FFh
.eh_frame_hdr:0000000000006208                 db  28h ; (
.eh_frame_hdr:0000000000006209                 db    4
.eh_frame_hdr:000000000000620A                 db    0
.eh_frame_hdr:000000000000620B                 db    0
.eh_frame_hdr:000000000000620C                 db  90h
.eh_frame_hdr:000000000000620D                 db 0C1h
.eh_frame_hdr:000000000000620E                 db 0FFh
.eh_frame_hdr:000000000000620F                 db 0FFh
.eh_frame_hdr:0000000000006210                 db  48h ; H
.eh_frame_hdr:0000000000006211                 db    4
.eh_frame_hdr:0000000000006212                 db    0
.eh_frame_hdr:0000000000006213                 db    0
.eh_frame_hdr:0000000000006214                 db  90h
.eh_frame_hdr:0000000000006215                 db 0C2h
.eh_frame_hdr:0000000000006216                 db 0FFh
.eh_frame_hdr:0000000000006217                 db 0FFh
.eh_frame_hdr:0000000000006218                 db  98h
.eh_frame_hdr:0000000000006219                 db    4
.eh_frame_hdr:000000000000621A                 db    0
.eh_frame_hdr:000000000000621B                 db    0
.eh_frame_hdr:000000000000621C                 db 0D0h
.eh_frame_hdr:000000000000621D                 db 0C3h
.eh_frame_hdr:000000000000621E                 db 0FFh
.eh_frame_hdr:000000000000621F                 db 0FFh
.eh_frame_hdr:0000000000006220                 db 0D4h
.eh_frame_hdr:0000000000006221                 db    4
.eh_frame_hdr:0000000000006222                 db    0
.eh_frame_hdr:0000000000006223                 db    0
.eh_frame_hdr:0000000000006224                 db  10h
.eh_frame_hdr:0000000000006225                 db 0C5h
.eh_frame_hdr:0000000000006226                 db 0FFh
.eh_frame_hdr:0000000000006227                 db 0FFh
.eh_frame_hdr:0000000000006228                 db  20h
.eh_frame_hdr:0000000000006229                 db    5
.eh_frame_hdr:000000000000622A                 db    0
.eh_frame_hdr:000000000000622B                 db    0
.eh_frame_hdr:000000000000622C                 db 0B0h
.eh_frame_hdr:000000000000622D                 db 0C5h
.eh_frame_hdr:000000000000622E                 db 0FFh
.eh_frame_hdr:000000000000622F                 db 0FFh
.eh_frame_hdr:0000000000006230                 db  40h ; @
.eh_frame_hdr:0000000000006231                 db    5
.eh_frame_hdr:0000000000006232                 db    0
.eh_frame_hdr:0000000000006233                 db    0
.eh_frame_hdr:0000000000006234                 db 0A0h
.eh_frame_hdr:0000000000006235                 db 0C6h
.eh_frame_hdr:0000000000006236                 db 0FFh
.eh_frame_hdr:0000000000006237                 db 0FFh
.eh_frame_hdr:0000000000006238                 db  84h
.eh_frame_hdr:0000000000006239                 db    5
.eh_frame_hdr:000000000000623A                 db    0
.eh_frame_hdr:000000000000623B                 db    0
.eh_frame_hdr:000000000000623C                 db 0E0h
.eh_frame_hdr:000000000000623D                 db 0D8h
.eh_frame_hdr:000000000000623E                 db 0FFh
.eh_frame_hdr:000000000000623F                 db 0FFh
.eh_frame_hdr:0000000000006240                 db 0FCh
.eh_frame_hdr:0000000000006241                 db    5
.eh_frame_hdr:0000000000006242                 db    0
.eh_frame_hdr:0000000000006243                 db    0
.eh_frame_hdr:0000000000006244                 db  90h
.eh_frame_hdr:0000000000006245                 db 0DAh
.eh_frame_hdr:0000000000006246                 db 0FFh
.eh_frame_hdr:0000000000006247                 db 0FFh
.eh_frame_hdr:0000000000006248                 db  68h ; h
.eh_frame_hdr:0000000000006249                 db    6
.eh_frame_hdr:000000000000624A                 db    0
.eh_frame_hdr:000000000000624B                 db    0
.eh_frame_hdr:000000000000624C                 db 0D0h
.eh_frame_hdr:000000000000624D                 db 0DAh
.eh_frame_hdr:000000000000624E                 db 0FFh
.eh_frame_hdr:000000000000624F                 db 0FFh
.eh_frame_hdr:0000000000006250                 db  94h
.eh_frame_hdr:0000000000006251                 db    6
.eh_frame_hdr:0000000000006252                 db    0
.eh_frame_hdr:0000000000006253                 db    0
.eh_frame_hdr:0000000000006254                 db 0F0h
.eh_frame_hdr:0000000000006255                 db 0DAh
.eh_frame_hdr:0000000000006256                 db 0FFh
.eh_frame_hdr:0000000000006257                 db 0FFh
.eh_frame_hdr:0000000000006258                 db 0A8h
.eh_frame_hdr:0000000000006259                 db    6
.eh_frame_hdr:000000000000625A                 db    0
.eh_frame_hdr:000000000000625B                 db    0
.eh_frame_hdr:000000000000625C                 db  10h
.eh_frame_hdr:000000000000625D                 db 0DBh
.eh_frame_hdr:000000000000625E                 db 0FFh
.eh_frame_hdr:000000000000625F                 db 0FFh
.eh_frame_hdr:0000000000006260                 db 0BCh
.eh_frame_hdr:0000000000006261                 db    6
.eh_frame_hdr:0000000000006262                 db    0
.eh_frame_hdr:0000000000006263                 db    0
.eh_frame_hdr:0000000000006264                 db  50h ; P
.eh_frame_hdr:0000000000006265                 db 0DBh
.eh_frame_hdr:0000000000006266                 db 0FFh
.eh_frame_hdr:0000000000006267                 db 0FFh
.eh_frame_hdr:0000000000006268                 db 0D0h
.eh_frame_hdr:0000000000006269                 db    6
.eh_frame_hdr:000000000000626A                 db    0
.eh_frame_hdr:000000000000626B                 db    0
.eh_frame_hdr:000000000000626C                 db  70h ; p
.eh_frame_hdr:000000000000626D                 db 0DBh
.eh_frame_hdr:000000000000626E                 db 0FFh
.eh_frame_hdr:000000000000626F                 db 0FFh
.eh_frame_hdr:0000000000006270                 db 0E4h
.eh_frame_hdr:0000000000006271                 db    6
.eh_frame_hdr:0000000000006272                 db    0
.eh_frame_hdr:0000000000006273                 db    0
.eh_frame_hdr:0000000000006274                 db 0A0h
.eh_frame_hdr:0000000000006275                 db 0DBh
.eh_frame_hdr:0000000000006276                 db 0FFh
.eh_frame_hdr:0000000000006277                 db 0FFh
.eh_frame_hdr:0000000000006278                 db 0F8h
.eh_frame_hdr:0000000000006279                 db    6
.eh_frame_hdr:000000000000627A                 db    0
.eh_frame_hdr:000000000000627B                 db    0
.eh_frame_hdr:000000000000627C                 db  20h
.eh_frame_hdr:000000000000627D                 db 0DCh
.eh_frame_hdr:000000000000627E                 db 0FFh
.eh_frame_hdr:000000000000627F                 db 0FFh
.eh_frame_hdr:0000000000006280                 db  4Ch ; L
.eh_frame_hdr:0000000000006281                 db    7
.eh_frame_hdr:0000000000006282                 db    0
.eh_frame_hdr:0000000000006283                 db    0
.eh_frame_hdr:0000000000006284                 db  10h
.eh_frame_hdr:0000000000006285                 db 0DDh
.eh_frame_hdr:0000000000006286                 db 0FFh
.eh_frame_hdr:0000000000006287                 db 0FFh
.eh_frame_hdr:0000000000006288                 db 0B8h
.eh_frame_hdr:0000000000006289                 db    7
.eh_frame_hdr:000000000000628A                 db    0
.eh_frame_hdr:000000000000628B                 db    0
.eh_frame_hdr:000000000000628C                 db  20h
.eh_frame_hdr:000000000000628D                 db 0DDh
.eh_frame_hdr:000000000000628E                 db 0FFh
.eh_frame_hdr:000000000000628F                 db 0FFh
.eh_frame_hdr:0000000000006290                 db 0CCh
.eh_frame_hdr:0000000000006291                 db    7
.eh_frame_hdr:0000000000006292                 db    0
.eh_frame_hdr:0000000000006293                 db    0
.eh_frame_hdr:0000000000006294                 db 0C0h
.eh_frame_hdr:0000000000006295                 db 0DDh
.eh_frame_hdr:0000000000006296                 db 0FFh
.eh_frame_hdr:0000000000006297                 db 0FFh
.eh_frame_hdr:0000000000006298                 db 0F8h
.eh_frame_hdr:0000000000006299                 db    7
.eh_frame_hdr:000000000000629A                 db    0
.eh_frame_hdr:000000000000629B                 db    0
.eh_frame_hdr:000000000000629C                 db 0E0h
.eh_frame_hdr:000000000000629D                 db 0DDh
.eh_frame_hdr:000000000000629E                 db 0FFh
.eh_frame_hdr:000000000000629F                 db 0FFh
.eh_frame_hdr:00000000000062A0                 db  0Ch
.eh_frame_hdr:00000000000062A1                 db    8
.eh_frame_hdr:00000000000062A2                 db    0
.eh_frame_hdr:00000000000062A3                 db    0
.eh_frame_hdr:00000000000062A4                 db 0F0h
.eh_frame_hdr:00000000000062A5                 db 0DDh
.eh_frame_hdr:00000000000062A6                 db 0FFh
.eh_frame_hdr:00000000000062A7                 db 0FFh
.eh_frame_hdr:00000000000062A8                 db  20h
.eh_frame_hdr:00000000000062A9                 db    8
.eh_frame_hdr:00000000000062AA                 db    0
.eh_frame_hdr:00000000000062AB                 db    0
.eh_frame_hdr:00000000000062AC                 db  10h
.eh_frame_hdr:00000000000062AD                 db 0DEh
.eh_frame_hdr:00000000000062AE                 db 0FFh
.eh_frame_hdr:00000000000062AF                 db 0FFh
.eh_frame_hdr:00000000000062B0                 db  34h ; 4
.eh_frame_hdr:00000000000062B1                 db    8
.eh_frame_hdr:00000000000062B2                 db    0
.eh_frame_hdr:00000000000062B3                 db    0
.eh_frame_hdr:00000000000062B4                 db  30h ; 0
.eh_frame_hdr:00000000000062B5                 db 0DEh
.eh_frame_hdr:00000000000062B6                 db 0FFh
.eh_frame_hdr:00000000000062B7                 db 0FFh
.eh_frame_hdr:00000000000062B8                 db  48h ; H
.eh_frame_hdr:00000000000062B9                 db    8
.eh_frame_hdr:00000000000062BA                 db    0
.eh_frame_hdr:00000000000062BB                 db    0
.eh_frame_hdr:00000000000062BC                 db 0C0h
.eh_frame_hdr:00000000000062BD                 db 0DEh
.eh_frame_hdr:00000000000062BE                 db 0FFh
.eh_frame_hdr:00000000000062BF                 db 0FFh
.eh_frame_hdr:00000000000062C0                 db  64h ; d
.eh_frame_hdr:00000000000062C1                 db    8
.eh_frame_hdr:00000000000062C2                 db    0
.eh_frame_hdr:00000000000062C3                 db    0
.eh_frame_hdr:00000000000062C4                 db  50h ; P
.eh_frame_hdr:00000000000062C5                 db 0DFh
.eh_frame_hdr:00000000000062C6                 db 0FFh
.eh_frame_hdr:00000000000062C7                 db 0FFh
.eh_frame_hdr:00000000000062C8                 db  80h
.eh_frame_hdr:00000000000062C9                 db    8
.eh_frame_hdr:00000000000062CA                 db    0
.eh_frame_hdr:00000000000062CB                 db    0
.eh_frame_hdr:00000000000062CC                 db  60h ; `
.eh_frame_hdr:00000000000062CD                 db 0DFh
.eh_frame_hdr:00000000000062CE                 db 0FFh
.eh_frame_hdr:00000000000062CF                 db 0FFh
.eh_frame_hdr:00000000000062D0                 db  94h
.eh_frame_hdr:00000000000062D1                 db    8
.eh_frame_hdr:00000000000062D2                 db    0
.eh_frame_hdr:00000000000062D3                 db    0
.eh_frame_hdr:00000000000062D4                 db  70h ; p
.eh_frame_hdr:00000000000062D5                 db 0DFh
.eh_frame_hdr:00000000000062D6                 db 0FFh
.eh_frame_hdr:00000000000062D7                 db 0FFh
.eh_frame_hdr:00000000000062D8                 db 0A8h
.eh_frame_hdr:00000000000062D9                 db    8
.eh_frame_hdr:00000000000062DA                 db    0
.eh_frame_hdr:00000000000062DB                 db    0
.eh_frame_hdr:00000000000062DC                 db  10h
.eh_frame_hdr:00000000000062DD                 db 0E0h
.eh_frame_hdr:00000000000062DE                 db 0FFh
.eh_frame_hdr:00000000000062DF                 db 0FFh
.eh_frame_hdr:00000000000062E0                 db 0C4h
.eh_frame_hdr:00000000000062E1                 db    8
.eh_frame_hdr:00000000000062E2                 db    0
.eh_frame_hdr:00000000000062E3                 db    0
.eh_frame_hdr:00000000000062E4                 db  20h
.eh_frame_hdr:00000000000062E5                 db 0E0h
.eh_frame_hdr:00000000000062E6                 db 0FFh
.eh_frame_hdr:00000000000062E7                 db 0FFh
.eh_frame_hdr:00000000000062E8                 db 0D8h
.eh_frame_hdr:00000000000062E9                 db    8
.eh_frame_hdr:00000000000062EA                 db    0
.eh_frame_hdr:00000000000062EB                 db    0
.eh_frame_hdr:00000000000062EC                 db  40h ; @
.eh_frame_hdr:00000000000062ED                 db 0E0h
.eh_frame_hdr:00000000000062EE                 db 0FFh
.eh_frame_hdr:00000000000062EF                 db 0FFh
.eh_frame_hdr:00000000000062F0                 db 0ECh
.eh_frame_hdr:00000000000062F1                 db    8
.eh_frame_hdr:00000000000062F2                 db    0
.eh_frame_hdr:00000000000062F3                 db    0
.eh_frame_hdr:00000000000062F4                 db  50h ; P
.eh_frame_hdr:00000000000062F5                 db 0E0h
.eh_frame_hdr:00000000000062F6                 db 0FFh
.eh_frame_hdr:00000000000062F7                 db 0FFh
.eh_frame_hdr:00000000000062F8                 db    0
.eh_frame_hdr:00000000000062F9                 db    9
.eh_frame_hdr:00000000000062FA                 db    0
.eh_frame_hdr:00000000000062FB                 db    0
.eh_frame_hdr:00000000000062FC                 db 0E0h
.eh_frame_hdr:00000000000062FD                 db 0E0h
.eh_frame_hdr:00000000000062FE                 db 0FFh
.eh_frame_hdr:00000000000062FF                 db 0FFh
.eh_frame_hdr:0000000000006300                 db  1Ch
.eh_frame_hdr:0000000000006301                 db    9
.eh_frame_hdr:0000000000006302                 db    0
.eh_frame_hdr:0000000000006303                 db    0
.eh_frame_hdr:0000000000006304                 db  80h
.eh_frame_hdr:0000000000006305                 db 0E1h
.eh_frame_hdr:0000000000006306                 db 0FFh
.eh_frame_hdr:0000000000006307                 db 0FFh
.eh_frame_hdr:0000000000006308                 db  38h ; 8
.eh_frame_hdr:0000000000006309                 db    9
.eh_frame_hdr:000000000000630A                 db    0
.eh_frame_hdr:000000000000630B                 db    0
.eh_frame_hdr:000000000000630C                 db  90h
.eh_frame_hdr:000000000000630D                 db 0E1h
.eh_frame_hdr:000000000000630E                 db 0FFh
.eh_frame_hdr:000000000000630F                 db 0FFh
.eh_frame_hdr:0000000000006310                 db  4Ch ; L
.eh_frame_hdr:0000000000006311                 db    9
.eh_frame_hdr:0000000000006312                 db    0
.eh_frame_hdr:0000000000006313                 db    0
.eh_frame_hdr:0000000000006314                 db 0B0h
.eh_frame_hdr:0000000000006315                 db 0E1h
.eh_frame_hdr:0000000000006316                 db 0FFh
.eh_frame_hdr:0000000000006317                 db 0FFh
.eh_frame_hdr:0000000000006318                 db  60h ; `
.eh_frame_hdr:0000000000006319                 db    9
.eh_frame_hdr:000000000000631A                 db    0
.eh_frame_hdr:000000000000631B                 db    0
.eh_frame_hdr:000000000000631C                 db 0D0h
.eh_frame_hdr:000000000000631D                 db 0E1h
.eh_frame_hdr:000000000000631E                 db 0FFh
.eh_frame_hdr:000000000000631F                 db 0FFh
.eh_frame_hdr:0000000000006320                 db  74h ; t
.eh_frame_hdr:0000000000006321                 db    9
.eh_frame_hdr:0000000000006322                 db    0
.eh_frame_hdr:0000000000006323                 db    0
.eh_frame_hdr:0000000000006324                 db 0E0h
.eh_frame_hdr:0000000000006325                 db 0E1h
.eh_frame_hdr:0000000000006326                 db 0FFh
.eh_frame_hdr:0000000000006327                 db 0FFh
.eh_frame_hdr:0000000000006328                 db  88h
.eh_frame_hdr:0000000000006329                 db    9
.eh_frame_hdr:000000000000632A                 db    0
.eh_frame_hdr:000000000000632B                 db    0
.eh_frame_hdr:000000000000632C                 db    0
.eh_frame_hdr:000000000000632D                 db 0E2h
.eh_frame_hdr:000000000000632E                 db 0FFh
.eh_frame_hdr:000000000000632F                 db 0FFh
.eh_frame_hdr:0000000000006330                 db  9Ch
.eh_frame_hdr:0000000000006331                 db    9
.eh_frame_hdr:0000000000006332                 db    0
.eh_frame_hdr:0000000000006333                 db    0
.eh_frame_hdr:0000000000006334                 db  20h
.eh_frame_hdr:0000000000006335                 db 0E2h
.eh_frame_hdr:0000000000006336                 db 0FFh
.eh_frame_hdr:0000000000006337                 db 0FFh
.eh_frame_hdr:0000000000006338                 db 0B0h
.eh_frame_hdr:0000000000006339                 db    9
.eh_frame_hdr:000000000000633A                 db    0
.eh_frame_hdr:000000000000633B                 db    0
.eh_frame_hdr:000000000000633C                 db  40h ; @
.eh_frame_hdr:000000000000633D                 db 0E2h
.eh_frame_hdr:000000000000633E                 db 0FFh
.eh_frame_hdr:000000000000633F                 db 0FFh
.eh_frame_hdr:0000000000006340                 db 0C8h
.eh_frame_hdr:0000000000006341                 db    9
.eh_frame_hdr:0000000000006342                 db    0
.eh_frame_hdr:0000000000006343                 db    0
.eh_frame_hdr:0000000000006344                 db  60h ; `
.eh_frame_hdr:0000000000006345                 db 0E6h
.eh_frame_hdr:0000000000006346                 db 0FFh
.eh_frame_hdr:0000000000006347                 db 0FFh
.eh_frame_hdr:0000000000006348                 db 0DCh
.eh_frame_hdr:0000000000006349                 db  0Ah
.eh_frame_hdr:000000000000634A                 db    0
.eh_frame_hdr:000000000000634B                 db    0
.eh_frame_hdr:000000000000634C                 db  80h
.eh_frame_hdr:000000000000634D                 db 0E6h
.eh_frame_hdr:000000000000634E                 db 0FFh
.eh_frame_hdr:000000000000634F                 db 0FFh
.eh_frame_hdr:0000000000006350                 db 0F0h
.eh_frame_hdr:0000000000006351                 db  0Ah
.eh_frame_hdr:0000000000006352                 db    0
.eh_frame_hdr:0000000000006353                 db    0
.eh_frame_hdr:0000000000006354                 db    0
.eh_frame_hdr:0000000000006355                 db 0E7h
.eh_frame_hdr:0000000000006356                 db 0FFh
.eh_frame_hdr:0000000000006357                 db 0FFh
.eh_frame_hdr:0000000000006358                 db  0Ch
.eh_frame_hdr:0000000000006359                 db  0Bh
.eh_frame_hdr:000000000000635A                 db    0
.eh_frame_hdr:000000000000635B                 db    0
.eh_frame_hdr:000000000000635C                 db 0E0h
.eh_frame_hdr:000000000000635D                 db 0E7h
.eh_frame_hdr:000000000000635E                 db 0FFh
.eh_frame_hdr:000000000000635F                 db 0FFh
.eh_frame_hdr:0000000000006360                 db  38h ; 8
.eh_frame_hdr:0000000000006361                 db  0Bh
.eh_frame_hdr:0000000000006362                 db    0
.eh_frame_hdr:0000000000006363                 db    0
.eh_frame_hdr:0000000000006364                 db  60h ; `
.eh_frame_hdr:0000000000006365                 db 0E8h
.eh_frame_hdr:0000000000006366                 db 0FFh
.eh_frame_hdr:0000000000006367                 db 0FFh
.eh_frame_hdr:0000000000006368                 db  58h ; X
.eh_frame_hdr:0000000000006369                 db  0Bh
.eh_frame_hdr:000000000000636A                 db    0
.eh_frame_hdr:000000000000636B                 db    0
.eh_frame_hdr:000000000000636C                 db  80h
.eh_frame_hdr:000000000000636D                 db 0E8h
.eh_frame_hdr:000000000000636E                 db 0FFh
.eh_frame_hdr:000000000000636F                 db 0FFh
.eh_frame_hdr:0000000000006370                 db  74h ; t
.eh_frame_hdr:0000000000006371                 db  0Bh
.eh_frame_hdr:0000000000006372                 db    0
.eh_frame_hdr:0000000000006373                 db    0
.eh_frame_hdr:0000000000006374                 db 0B0h
.eh_frame_hdr:0000000000006375                 db 0E8h
.eh_frame_hdr:0000000000006376                 db 0FFh
.eh_frame_hdr:0000000000006377                 db 0FFh
.eh_frame_hdr:0000000000006378                 db  88h
.eh_frame_hdr:0000000000006379                 db  0Bh
.eh_frame_hdr:000000000000637A                 db    0
.eh_frame_hdr:000000000000637B                 db    0
.eh_frame_hdr:000000000000637C                 db 0C0h
.eh_frame_hdr:000000000000637D                 db 0E8h
.eh_frame_hdr:000000000000637E                 db 0FFh
.eh_frame_hdr:000000000000637F                 db 0FFh
.eh_frame_hdr:0000000000006380                 db  9Ch
.eh_frame_hdr:0000000000006381                 db  0Bh
.eh_frame_hdr:0000000000006382                 db    0
.eh_frame_hdr:0000000000006383                 db    0
.eh_frame_hdr:0000000000006384                 db    0
.eh_frame_hdr:0000000000006385                 db 0E9h
.eh_frame_hdr:0000000000006386                 db 0FFh
.eh_frame_hdr:0000000000006387                 db 0FFh
.eh_frame_hdr:0000000000006388                 db 0C0h
.eh_frame_hdr:0000000000006389                 db  0Bh
.eh_frame_hdr:000000000000638A                 db    0
.eh_frame_hdr:000000000000638B                 db    0
.eh_frame_hdr:000000000000638C                 db  30h ; 0
.eh_frame_hdr:000000000000638D                 db 0E9h
.eh_frame_hdr:000000000000638E                 db 0FFh
.eh_frame_hdr:000000000000638F                 db 0FFh
.eh_frame_hdr:0000000000006390                 db 0D4h
.eh_frame_hdr:0000000000006391                 db  0Bh
.eh_frame_hdr:0000000000006392                 db    0
.eh_frame_hdr:0000000000006393                 db    0
.eh_frame_hdr:0000000000006394                 db 0C0h
.eh_frame_hdr:0000000000006395                 db 0E9h
.eh_frame_hdr:0000000000006396                 db 0FFh
.eh_frame_hdr:0000000000006397                 db 0FFh
.eh_frame_hdr:0000000000006398                 db 0ECh
.eh_frame_hdr:0000000000006399                 db  0Bh
.eh_frame_hdr:000000000000639A                 db    0
.eh_frame_hdr:000000000000639B                 db    0
.eh_frame_hdr:000000000000639C                 db  10h
.eh_frame_hdr:000000000000639D                 db 0EAh
.eh_frame_hdr:000000000000639E                 db 0FFh
.eh_frame_hdr:000000000000639F                 db 0FFh
.eh_frame_hdr:00000000000063A0                 db    4
.eh_frame_hdr:00000000000063A1                 db  0Ch
.eh_frame_hdr:00000000000063A2                 db    0
.eh_frame_hdr:00000000000063A3                 db    0
.eh_frame_hdr:00000000000063A4                 db  30h ; 0
.eh_frame_hdr:00000000000063A5                 db 0EAh
.eh_frame_hdr:00000000000063A6                 db 0FFh
.eh_frame_hdr:00000000000063A7                 db 0FFh
.eh_frame_hdr:00000000000063A8                 db  20h
.eh_frame_hdr:00000000000063A9                 db  0Ch
.eh_frame_hdr:00000000000063AA                 db    0
.eh_frame_hdr:00000000000063AB                 db    0
.eh_frame_hdr:00000000000063AC                 db  60h ; `
.eh_frame_hdr:00000000000063AD                 db 0EAh
.eh_frame_hdr:00000000000063AE                 db 0FFh
.eh_frame_hdr:00000000000063AF                 db 0FFh
.eh_frame_hdr:00000000000063B0                 db  3Ch ; <
.eh_frame_hdr:00000000000063B1                 db  0Ch
.eh_frame_hdr:00000000000063B2                 db    0
.eh_frame_hdr:00000000000063B3                 db    0
.eh_frame_hdr:00000000000063B4                 db  90h
.eh_frame_hdr:00000000000063B5                 db 0EAh
.eh_frame_hdr:00000000000063B6                 db 0FFh
.eh_frame_hdr:00000000000063B7                 db 0FFh
.eh_frame_hdr:00000000000063B8                 db  64h ; d
.eh_frame_hdr:00000000000063B9                 db  0Ch
.eh_frame_hdr:00000000000063BA                 db    0
.eh_frame_hdr:00000000000063BB                 db    0
.eh_frame_hdr:00000000000063BC                 db 0B0h
.eh_frame_hdr:00000000000063BD                 db 0EAh
.eh_frame_hdr:00000000000063BE                 db 0FFh
.eh_frame_hdr:00000000000063BF                 db 0FFh
.eh_frame_hdr:00000000000063C0                 db  80h
.eh_frame_hdr:00000000000063C1                 db  0Ch
.eh_frame_hdr:00000000000063C2                 db    0
.eh_frame_hdr:00000000000063C3                 db    0
.eh_frame_hdr:00000000000063C4                 db 0F0h
.eh_frame_hdr:00000000000063C5                 db 0EAh
.eh_frame_hdr:00000000000063C6                 db 0FFh
.eh_frame_hdr:00000000000063C7                 db 0FFh
.eh_frame_hdr:00000000000063C8                 db  98h
.eh_frame_hdr:00000000000063C9                 db  0Ch
.eh_frame_hdr:00000000000063CA                 db    0
.eh_frame_hdr:00000000000063CB                 db    0
.eh_frame_hdr:00000000000063CC                 db  70h ; p
.eh_frame_hdr:00000000000063CD                 db 0EDh
.eh_frame_hdr:00000000000063CE                 db 0FFh
.eh_frame_hdr:00000000000063CF                 db 0FFh
.eh_frame_hdr:00000000000063D0                 db 0D0h
.eh_frame_hdr:00000000000063D1                 db  0Ch
.eh_frame_hdr:00000000000063D2                 db    0
.eh_frame_hdr:00000000000063D3                 db    0
.eh_frame_hdr:00000000000063D4                 db    0
.eh_frame_hdr:00000000000063D5                 db 0EEh
.eh_frame_hdr:00000000000063D6                 db 0FFh
.eh_frame_hdr:00000000000063D7                 db 0FFh
.eh_frame_hdr:00000000000063D8                 db  10h
.eh_frame_hdr:00000000000063D9                 db  0Dh
.eh_frame_hdr:00000000000063DA                 db    0
.eh_frame_hdr:00000000000063DB                 db    0
.eh_frame_hdr:00000000000063DC                 db  80h
.eh_frame_hdr:00000000000063DD                 db 0EEh
.eh_frame_hdr:00000000000063DE                 db 0FFh
.eh_frame_hdr:00000000000063DF                 db 0FFh
.eh_frame_hdr:00000000000063E0                 db  60h ; `
.eh_frame_hdr:00000000000063E1                 db  0Dh
.eh_frame_hdr:00000000000063E2                 db    0
.eh_frame_hdr:00000000000063E3                 db    0
.eh_frame_hdr:00000000000063E4                 db 0E0h
.eh_frame_hdr:00000000000063E5                 db 0EEh
.eh_frame_hdr:00000000000063E6                 db 0FFh
.eh_frame_hdr:00000000000063E7                 db 0FFh
.eh_frame_hdr:00000000000063E8                 db  74h ; t
.eh_frame_hdr:00000000000063E9                 db  0Dh
.eh_frame_hdr:00000000000063EA                 db    0
.eh_frame_hdr:00000000000063EB                 db    0
.eh_frame_hdr:00000000000063EC                 db  30h ; 0
.eh_frame_hdr:00000000000063ED                 db 0EFh
.eh_frame_hdr:00000000000063EE                 db 0FFh
.eh_frame_hdr:00000000000063EF                 db 0FFh
.eh_frame_hdr:00000000000063F0                 db 0A0h
.eh_frame_hdr:00000000000063F1                 db  0Dh
.eh_frame_hdr:00000000000063F2                 db    0
.eh_frame_hdr:00000000000063F3                 db    0
.eh_frame_hdr:00000000000063F4                 db  90h
.eh_frame_hdr:00000000000063F5                 db 0EFh
.eh_frame_hdr:00000000000063F6                 db 0FFh
.eh_frame_hdr:00000000000063F7                 db 0FFh
.eh_frame_hdr:00000000000063F8                 db 0C0h
.eh_frame_hdr:00000000000063F9                 db  0Dh
.eh_frame_hdr:00000000000063FA                 db    0
.eh_frame_hdr:00000000000063FB                 db    0
.eh_frame_hdr:00000000000063FC                 db 0D0h
.eh_frame_hdr:00000000000063FD                 db 0EFh
.eh_frame_hdr:00000000000063FE                 db 0FFh
.eh_frame_hdr:00000000000063FF                 db 0FFh
.eh_frame_hdr:0000000000006400                 db 0E0h
.eh_frame_hdr:0000000000006401                 db  0Dh
.eh_frame_hdr:0000000000006402                 db    0
.eh_frame_hdr:0000000000006403                 db    0
.eh_frame_hdr:0000000000006404                 db  50h ; P
.eh_frame_hdr:0000000000006405                 db 0F0h
.eh_frame_hdr:0000000000006406                 db 0FFh
.eh_frame_hdr:0000000000006407                 db 0FFh
.eh_frame_hdr:0000000000006408                 db  18h
.eh_frame_hdr:0000000000006409                 db  0Eh
.eh_frame_hdr:000000000000640A                 db    0
.eh_frame_hdr:000000000000640B                 db    0
.eh_frame_hdr:000000000000640C                 db  90h
.eh_frame_hdr:000000000000640D                 db 0F0h
.eh_frame_hdr:000000000000640E                 db 0FFh
.eh_frame_hdr:000000000000640F                 db 0FFh
.eh_frame_hdr:0000000000006410                 db  38h ; 8
.eh_frame_hdr:0000000000006411                 db  0Eh
.eh_frame_hdr:0000000000006412                 db    0
.eh_frame_hdr:0000000000006413                 db    0
.eh_frame_hdr:0000000000006414                 db 0F0h
.eh_frame_hdr:0000000000006415                 db 0F0h
.eh_frame_hdr:0000000000006416                 db 0FFh
.eh_frame_hdr:0000000000006417                 db 0FFh
.eh_frame_hdr:0000000000006418                 db  68h ; h
.eh_frame_hdr:0000000000006419                 db  0Eh
.eh_frame_hdr:000000000000641A                 db    0
.eh_frame_hdr:000000000000641B                 db    0
.eh_frame_hdr:000000000000641C                 db  60h ; `
.eh_frame_hdr:000000000000641D                 db 0F1h
.eh_frame_hdr:000000000000641E                 db 0FFh
.eh_frame_hdr:000000000000641F                 db 0FFh
.eh_frame_hdr:0000000000006420                 db 0B0h
.eh_frame_hdr:0000000000006421                 db  0Eh
.eh_frame_hdr:0000000000006422                 db    0
.eh_frame_hdr:0000000000006423                 db    0
.eh_frame_hdr:0000000000006424                 db  70h ; p
.eh_frame_hdr:0000000000006425                 db 0F1h
.eh_frame_hdr:0000000000006426                 db 0FFh
.eh_frame_hdr:0000000000006427                 db 0FFh
.eh_frame_hdr:0000000000006428                 db 0C8h
.eh_frame_hdr:0000000000006429                 db  0Eh
.eh_frame_hdr:000000000000642A                 db    0
.eh_frame_hdr:000000000000642B                 db    0
.eh_frame_hdr:000000000000642B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000642B
LOAD:000000000000642C ; ===========================================================================
LOAD:000000000000642C
LOAD:000000000000642C ; Segment type: Pure code
LOAD:000000000000642C ; Segment permissions: Read/Execute
LOAD:000000000000642C LOAD            segment byte public 'CODE' use64
LOAD:000000000000642C                 assume cs:LOAD
LOAD:000000000000642C                 ;org 642Ch
LOAD:000000000000642C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000642C                 align 10h
LOAD:000000000000642C LOAD            ends
LOAD:000000000000642C
.eh_frame:0000000000006430 ; ===========================================================================
.eh_frame:0000000000006430
.eh_frame:0000000000006430 ; Segment type: Pure data
.eh_frame:0000000000006430 ; Segment permissions: Read
.eh_frame:0000000000006430 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006430                 assume cs:_eh_frame
.eh_frame:0000000000006430                 ;org 6430h
.eh_frame:0000000000006430                 db  14h
.eh_frame:0000000000006431                 db    0
.eh_frame:0000000000006432                 db    0
.eh_frame:0000000000006433                 db    0
.eh_frame:0000000000006434                 db    0
.eh_frame:0000000000006435                 db    0
.eh_frame:0000000000006436                 db    0
.eh_frame:0000000000006437                 db    0
.eh_frame:0000000000006438                 db    1
.eh_frame:0000000000006439                 db  7Ah ; z
.eh_frame:000000000000643A                 db  52h ; R
.eh_frame:000000000000643B                 db    0
.eh_frame:000000000000643C                 db    1
.eh_frame:000000000000643D                 db  78h ; x
.eh_frame:000000000000643E                 db  10h
.eh_frame:000000000000643F                 db    1
.eh_frame:0000000000006440                 db  1Bh
.eh_frame:0000000000006441                 db  0Ch
.eh_frame:0000000000006442                 db    7
.eh_frame:0000000000006443                 db    8
.eh_frame:0000000000006444                 db  90h
.eh_frame:0000000000006445                 db    1
.eh_frame:0000000000006446                 db    7
.eh_frame:0000000000006447                 db  10h
.eh_frame:0000000000006448                 db  14h
.eh_frame:0000000000006449                 db    0
.eh_frame:000000000000644A                 db    0
.eh_frame:000000000000644B                 db    0
.eh_frame:000000000000644C                 db  1Ch
.eh_frame:000000000000644D                 db    0
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db 0F0h
.eh_frame:0000000000006451                 db 0B8h
.eh_frame:0000000000006452                 db 0FFh
.eh_frame:0000000000006453                 db 0FFh
.eh_frame:0000000000006454                 db  2Bh ; +
.eh_frame:0000000000006455                 db    0
.eh_frame:0000000000006456                 db    0
.eh_frame:0000000000006457                 db    0
.eh_frame:0000000000006458                 db    0
.eh_frame:0000000000006459                 db    0
.eh_frame:000000000000645A                 db    0
.eh_frame:000000000000645B                 db    0
.eh_frame:000000000000645C                 db    0
.eh_frame:000000000000645D                 db    0
.eh_frame:000000000000645E                 db    0
.eh_frame:000000000000645F                 db    0
.eh_frame:0000000000006460                 db  14h
.eh_frame:0000000000006461                 db    0
.eh_frame:0000000000006462                 db    0
.eh_frame:0000000000006463                 db    0
.eh_frame:0000000000006464                 db    0
.eh_frame:0000000000006465                 db    0
.eh_frame:0000000000006466                 db    0
.eh_frame:0000000000006467                 db    0
.eh_frame:0000000000006468                 db    1
.eh_frame:0000000000006469                 db  7Ah ; z
.eh_frame:000000000000646A                 db  52h ; R
.eh_frame:000000000000646B                 db    0
.eh_frame:000000000000646C                 db    1
.eh_frame:000000000000646D                 db  78h ; x
.eh_frame:000000000000646E                 db  10h
.eh_frame:000000000000646F                 db    1
.eh_frame:0000000000006470                 db  1Bh
.eh_frame:0000000000006471                 db  0Ch
.eh_frame:0000000000006472                 db    7
.eh_frame:0000000000006473                 db    8
.eh_frame:0000000000006474                 db  90h
.eh_frame:0000000000006475                 db    1
.eh_frame:0000000000006476                 db    0
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db  24h ; $
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db  1Ch
.eh_frame:000000000000647D                 db    0
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db  50h ; P
.eh_frame:0000000000006481                 db 0AFh
.eh_frame:0000000000006482                 db 0FFh
.eh_frame:0000000000006483                 db 0FFh
.eh_frame:0000000000006484                 db  20h
.eh_frame:0000000000006485                 db    3
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db    0
.eh_frame:0000000000006489                 db  0Eh
.eh_frame:000000000000648A                 db  10h
.eh_frame:000000000000648B                 db  46h ; F
.eh_frame:000000000000648C                 db  0Eh
.eh_frame:000000000000648D                 db  18h
.eh_frame:000000000000648E                 db  4Ah ; J
.eh_frame:000000000000648F                 db  0Fh
.eh_frame:0000000000006490                 db  0Bh
.eh_frame:0000000000006491                 db  77h ; w
.eh_frame:0000000000006492                 db    8
.eh_frame:0000000000006493                 db  80h
.eh_frame:0000000000006494                 db    0
.eh_frame:0000000000006495                 db  3Fh ; ?
.eh_frame:0000000000006496                 db  1Ah
.eh_frame:0000000000006497                 db  3Bh ; ;
.eh_frame:0000000000006498                 db  2Ah ; *
.eh_frame:0000000000006499                 db  33h ; 3
.eh_frame:000000000000649A                 db  24h ; $
.eh_frame:000000000000649B                 db  22h ; "
.eh_frame:000000000000649C                 db    0
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db  14h
.eh_frame:00000000000064A1                 db    0
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db  44h ; D
.eh_frame:00000000000064A5                 db    0
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  48h ; H
.eh_frame:00000000000064A9                 db 0B2h
.eh_frame:00000000000064AA                 db 0FFh
.eh_frame:00000000000064AB                 db 0FFh
.eh_frame:00000000000064AC                 db    8
.eh_frame:00000000000064AD                 db    0
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db    0
.eh_frame:00000000000064B1                 db    0
.eh_frame:00000000000064B2                 db    0
.eh_frame:00000000000064B3                 db    0
.eh_frame:00000000000064B4                 db    0
.eh_frame:00000000000064B5                 db    0
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db  28h ; (
.eh_frame:00000000000064B9                 db    0
.eh_frame:00000000000064BA                 db    0
.eh_frame:00000000000064BB                 db    0
.eh_frame:00000000000064BC                 db  5Ch ; \
.eh_frame:00000000000064BD                 db    0
.eh_frame:00000000000064BE                 db    0
.eh_frame:00000000000064BF                 db    0
.eh_frame:00000000000064C0                 db  90h
.eh_frame:00000000000064C1                 db 0B9h
.eh_frame:00000000000064C2                 db 0FFh
.eh_frame:00000000000064C3                 db 0FFh
.eh_frame:00000000000064C4                 db  9Ah
.eh_frame:00000000000064C5                 db    3
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db    0
.eh_frame:00000000000064C9                 db  42h ; B
.eh_frame:00000000000064CA                 db  0Eh
.eh_frame:00000000000064CB                 db  10h
.eh_frame:00000000000064CC                 db  8Dh
.eh_frame:00000000000064CD                 db    2
.eh_frame:00000000000064CE                 db  42h ; B
.eh_frame:00000000000064CF                 db  0Eh
.eh_frame:00000000000064D0                 db  18h
.eh_frame:00000000000064D1                 db  8Ch
.eh_frame:00000000000064D2                 db    3
.eh_frame:00000000000064D3                 db  46h ; F
.eh_frame:00000000000064D4                 db  0Eh
.eh_frame:00000000000064D5                 db  20h
.eh_frame:00000000000064D6                 db  86h
.eh_frame:00000000000064D7                 db    4
.eh_frame:00000000000064D8                 db  41h ; A
.eh_frame:00000000000064D9                 db  0Eh
.eh_frame:00000000000064DA                 db  28h ; (
.eh_frame:00000000000064DB                 db  83h
.eh_frame:00000000000064DC                 db    5
.eh_frame:00000000000064DD                 db  49h ; I
.eh_frame:00000000000064DE                 db  0Eh
.eh_frame:00000000000064DF                 db 0B0h
.eh_frame:00000000000064E0                 db    1
.eh_frame:00000000000064E1                 db    0
.eh_frame:00000000000064E2                 db    0
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db  60h ; `
.eh_frame:00000000000064E5                 db    0
.eh_frame:00000000000064E6                 db    0
.eh_frame:00000000000064E7                 db    0
.eh_frame:00000000000064E8                 db  88h
.eh_frame:00000000000064E9                 db    0
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db  14h
.eh_frame:00000000000064ED                 db 0B2h
.eh_frame:00000000000064EE                 db 0FFh
.eh_frame:00000000000064EF                 db 0FFh
.eh_frame:00000000000064F0                 db  39h ; 9
.eh_frame:00000000000064F1                 db    6
.eh_frame:00000000000064F2                 db    0
.eh_frame:00000000000064F3                 db    0
.eh_frame:00000000000064F4                 db    0
.eh_frame:00000000000064F5                 db  42h ; B
.eh_frame:00000000000064F6                 db  0Eh
.eh_frame:00000000000064F7                 db  10h
.eh_frame:00000000000064F8                 db  8Fh
.eh_frame:00000000000064F9                 db    2
.eh_frame:00000000000064FA                 db  42h ; B
.eh_frame:00000000000064FB                 db  0Eh
.eh_frame:00000000000064FC                 db  18h
.eh_frame:00000000000064FD                 db  8Eh
.eh_frame:00000000000064FE                 db    3
.eh_frame:00000000000064FF                 db  42h ; B
.eh_frame:0000000000006500                 db  0Eh
.eh_frame:0000000000006501                 db  20h
.eh_frame:0000000000006502                 db  8Dh
.eh_frame:0000000000006503                 db    4
.eh_frame:0000000000006504                 db  42h ; B
.eh_frame:0000000000006505                 db  0Eh
.eh_frame:0000000000006506                 db  28h ; (
.eh_frame:0000000000006507                 db  8Ch
.eh_frame:0000000000006508                 db    5
.eh_frame:0000000000006509                 db  44h ; D
.eh_frame:000000000000650A                 db  0Eh
.eh_frame:000000000000650B                 db  30h ; 0
.eh_frame:000000000000650C                 db  86h
.eh_frame:000000000000650D                 db    6
.eh_frame:000000000000650E                 db  41h ; A
.eh_frame:000000000000650F                 db  0Eh
.eh_frame:0000000000006510                 db  38h ; 8
.eh_frame:0000000000006511                 db  83h
.eh_frame:0000000000006512                 db    7
.eh_frame:0000000000006513                 db  46h ; F
.eh_frame:0000000000006514                 db  0Eh
.eh_frame:0000000000006515                 db  70h ; p
.eh_frame:0000000000006516                 db    2
.eh_frame:0000000000006517                 db  6Dh ; m
.eh_frame:0000000000006518                 db  0Eh
.eh_frame:0000000000006519                 db  78h ; x
.eh_frame:000000000000651A                 db  49h ; I
.eh_frame:000000000000651B                 db  0Eh
.eh_frame:000000000000651C                 db  80h
.eh_frame:000000000000651D                 db    1
.eh_frame:000000000000651E                 db  4Fh ; O
.eh_frame:000000000000651F                 db  0Eh
.eh_frame:0000000000006520                 db  88h
.eh_frame:0000000000006521                 db    1
.eh_frame:0000000000006522                 db  50h ; P
.eh_frame:0000000000006523                 db  0Eh
.eh_frame:0000000000006524                 db  90h
.eh_frame:0000000000006525                 db    1
.eh_frame:0000000000006526                 db  4Bh ; K
.eh_frame:0000000000006527                 db  0Eh
.eh_frame:0000000000006528                 db  70h ; p
.eh_frame:0000000000006529                 db    2
.eh_frame:000000000000652A                 db  6Ch ; l
.eh_frame:000000000000652B                 db  0Ah
.eh_frame:000000000000652C                 db  0Eh
.eh_frame:000000000000652D                 db  38h ; 8
.eh_frame:000000000000652E                 db  43h ; C
.eh_frame:000000000000652F                 db  0Eh
.eh_frame:0000000000006530                 db  30h ; 0
.eh_frame:0000000000006531                 db  41h ; A
.eh_frame:0000000000006532                 db  0Eh
.eh_frame:0000000000006533                 db  28h ; (
.eh_frame:0000000000006534                 db  42h ; B
.eh_frame:0000000000006535                 db  0Eh
.eh_frame:0000000000006536                 db  20h
.eh_frame:0000000000006537                 db  42h ; B
.eh_frame:0000000000006538                 db  0Eh
.eh_frame:0000000000006539                 db  18h
.eh_frame:000000000000653A                 db  42h ; B
.eh_frame:000000000000653B                 db  0Eh
.eh_frame:000000000000653C                 db  10h
.eh_frame:000000000000653D                 db  42h ; B
.eh_frame:000000000000653E                 db  0Eh
.eh_frame:000000000000653F                 db    8
.eh_frame:0000000000006540                 db  41h ; A
.eh_frame:0000000000006541                 db  0Bh
.eh_frame:0000000000006542                 db    0
.eh_frame:0000000000006543                 db    0
.eh_frame:0000000000006544                 db    0
.eh_frame:0000000000006545                 db    0
.eh_frame:0000000000006546                 db    0
.eh_frame:0000000000006547                 db    0
.eh_frame:0000000000006548                 db  10h
.eh_frame:0000000000006549                 db    0
.eh_frame:000000000000654A                 db    0
.eh_frame:000000000000654B                 db    0
.eh_frame:000000000000654C                 db 0ECh
.eh_frame:000000000000654D                 db    0
.eh_frame:000000000000654E                 db    0
.eh_frame:000000000000654F                 db    0
.eh_frame:0000000000006550                 db 0A0h
.eh_frame:0000000000006551                 db 0BCh
.eh_frame:0000000000006552                 db 0FFh
.eh_frame:0000000000006553                 db 0FFh
.eh_frame:0000000000006554                 db    8
.eh_frame:0000000000006555                 db    0
.eh_frame:0000000000006556                 db    0
.eh_frame:0000000000006557                 db    0
.eh_frame:0000000000006558                 db    0
.eh_frame:0000000000006559                 db    0
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db  10h
.eh_frame:000000000000655D                 db    0
.eh_frame:000000000000655E                 db    0
.eh_frame:000000000000655F                 db    0
.eh_frame:0000000000006560                 db    0
.eh_frame:0000000000006561                 db    1
.eh_frame:0000000000006562                 db    0
.eh_frame:0000000000006563                 db    0
.eh_frame:0000000000006564                 db  9Ch
.eh_frame:0000000000006565                 db 0BCh
.eh_frame:0000000000006566                 db 0FFh
.eh_frame:0000000000006567                 db 0FFh
.eh_frame:0000000000006568                 db    8
.eh_frame:0000000000006569                 db    0
.eh_frame:000000000000656A                 db    0
.eh_frame:000000000000656B                 db    0
.eh_frame:000000000000656C                 db    0
.eh_frame:000000000000656D                 db    0
.eh_frame:000000000000656E                 db    0
.eh_frame:000000000000656F                 db    0
.eh_frame:0000000000006570                 db  2Ch ; ,
.eh_frame:0000000000006571                 db    0
.eh_frame:0000000000006572                 db    0
.eh_frame:0000000000006573                 db    0
.eh_frame:0000000000006574                 db  14h
.eh_frame:0000000000006575                 db    1
.eh_frame:0000000000006576                 db    0
.eh_frame:0000000000006577                 db    0
.eh_frame:0000000000006578                 db  98h
.eh_frame:0000000000006579                 db 0BCh
.eh_frame:000000000000657A                 db 0FFh
.eh_frame:000000000000657B                 db 0FFh
.eh_frame:000000000000657C                 db 0A4h
.eh_frame:000000000000657D                 db    0
.eh_frame:000000000000657E                 db    0
.eh_frame:000000000000657F                 db    0
.eh_frame:0000000000006580                 db    0
.eh_frame:0000000000006581                 db  41h ; A
.eh_frame:0000000000006582                 db  0Eh
.eh_frame:0000000000006583                 db  10h
.eh_frame:0000000000006584                 db  86h
.eh_frame:0000000000006585                 db    2
.eh_frame:0000000000006586                 db  41h ; A
.eh_frame:0000000000006587                 db  0Eh
.eh_frame:0000000000006588                 db  18h
.eh_frame:0000000000006589                 db  83h
.eh_frame:000000000000658A                 db    3
.eh_frame:000000000000658B                 db  44h ; D
.eh_frame:000000000000658C                 db  0Eh
.eh_frame:000000000000658D                 db  20h
.eh_frame:000000000000658E                 db  7Ah ; z
.eh_frame:000000000000658F                 db  0Ah
.eh_frame:0000000000006590                 db  0Eh
.eh_frame:0000000000006591                 db  18h
.eh_frame:0000000000006592                 db  41h ; A
.eh_frame:0000000000006593                 db  0Eh
.eh_frame:0000000000006594                 db  10h
.eh_frame:0000000000006595                 db  41h ; A
.eh_frame:0000000000006596                 db  0Eh
.eh_frame:0000000000006597                 db    8
.eh_frame:0000000000006598                 db  41h ; A
.eh_frame:0000000000006599                 db  0Bh
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db    0
.eh_frame:000000000000659D                 db    0
.eh_frame:000000000000659E                 db    0
.eh_frame:000000000000659F                 db    0
.eh_frame:00000000000065A0                 db  34h ; 4
.eh_frame:00000000000065A1                 db    0
.eh_frame:00000000000065A2                 db    0
.eh_frame:00000000000065A3                 db    0
.eh_frame:00000000000065A4                 db  44h ; D
.eh_frame:00000000000065A5                 db    1
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db  18h
.eh_frame:00000000000065A9                 db 0BDh
.eh_frame:00000000000065AA                 db 0FFh
.eh_frame:00000000000065AB                 db 0FFh
.eh_frame:00000000000065AC                 db  56h ; V
.eh_frame:00000000000065AD                 db    0
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db    0
.eh_frame:00000000000065B1                 db  42h ; B
.eh_frame:00000000000065B2                 db  0Eh
.eh_frame:00000000000065B3                 db  10h
.eh_frame:00000000000065B4                 db  8Dh
.eh_frame:00000000000065B5                 db    2
.eh_frame:00000000000065B6                 db  42h ; B
.eh_frame:00000000000065B7                 db  0Eh
.eh_frame:00000000000065B8                 db  18h
.eh_frame:00000000000065B9                 db  8Ch
.eh_frame:00000000000065BA                 db    3
.eh_frame:00000000000065BB                 db  43h ; C
.eh_frame:00000000000065BC                 db  0Eh
.eh_frame:00000000000065BD                 db  20h
.eh_frame:00000000000065BE                 db  86h
.eh_frame:00000000000065BF                 db    4
.eh_frame:00000000000065C0                 db  41h ; A
.eh_frame:00000000000065C1                 db  0Eh
.eh_frame:00000000000065C2                 db  28h ; (
.eh_frame:00000000000065C3                 db  83h
.eh_frame:00000000000065C4                 db    5
.eh_frame:00000000000065C5                 db  4Dh ; M
.eh_frame:00000000000065C6                 db  0Eh
.eh_frame:00000000000065C7                 db  30h ; 0
.eh_frame:00000000000065C8                 db  78h ; x
.eh_frame:00000000000065C9                 db  0Eh
.eh_frame:00000000000065CA                 db  28h ; (
.eh_frame:00000000000065CB                 db  43h ; C
.eh_frame:00000000000065CC                 db  0Eh
.eh_frame:00000000000065CD                 db  20h
.eh_frame:00000000000065CE                 db  41h ; A
.eh_frame:00000000000065CF                 db  0Eh
.eh_frame:00000000000065D0                 db  18h
.eh_frame:00000000000065D1                 db  42h ; B
.eh_frame:00000000000065D2                 db  0Eh
.eh_frame:00000000000065D3                 db  10h
.eh_frame:00000000000065D4                 db  42h ; B
.eh_frame:00000000000065D5                 db  0Eh
.eh_frame:00000000000065D6                 db    8
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db  1Ch
.eh_frame:00000000000065D9                 db    0
.eh_frame:00000000000065DA                 db    0
.eh_frame:00000000000065DB                 db    0
.eh_frame:00000000000065DC                 db  7Ch ; |
.eh_frame:00000000000065DD                 db    1
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db  40h ; @
.eh_frame:00000000000065E1                 db 0BDh
.eh_frame:00000000000065E2                 db 0FFh
.eh_frame:00000000000065E3                 db 0FFh
.eh_frame:00000000000065E4                 db  18h
.eh_frame:00000000000065E5                 db    0
.eh_frame:00000000000065E6                 db    0
.eh_frame:00000000000065E7                 db    0
.eh_frame:00000000000065E8                 db    0
.eh_frame:00000000000065E9                 db  44h ; D
.eh_frame:00000000000065EA                 db  0Eh
.eh_frame:00000000000065EB                 db  10h
.eh_frame:00000000000065EC                 db  4Eh ; N
.eh_frame:00000000000065ED                 db  0Ah
.eh_frame:00000000000065EE                 db  0Eh
.eh_frame:00000000000065EF                 db    8
.eh_frame:00000000000065F0                 db  41h ; A
.eh_frame:00000000000065F1                 db  0Bh
.eh_frame:00000000000065F2                 db    0
.eh_frame:00000000000065F3                 db    0
.eh_frame:00000000000065F4                 db    0
.eh_frame:00000000000065F5                 db    0
.eh_frame:00000000000065F6                 db    0
.eh_frame:00000000000065F7                 db    0
.eh_frame:00000000000065F8                 db  4Ch ; L
.eh_frame:00000000000065F9                 db    0
.eh_frame:00000000000065FA                 db    0
.eh_frame:00000000000065FB                 db    0
.eh_frame:00000000000065FC                 db  9Ch
.eh_frame:00000000000065FD                 db    1
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db  40h ; @
.eh_frame:0000000000006601                 db 0BDh
.eh_frame:0000000000006602                 db 0FFh
.eh_frame:0000000000006603                 db 0FFh
.eh_frame:0000000000006604                 db 0FFh
.eh_frame:0000000000006605                 db    0
.eh_frame:0000000000006606                 db    0
.eh_frame:0000000000006607                 db    0
.eh_frame:0000000000006608                 db    0
.eh_frame:0000000000006609                 db  42h ; B
.eh_frame:000000000000660A                 db  0Eh
.eh_frame:000000000000660B                 db  10h
.eh_frame:000000000000660C                 db  8Fh
.eh_frame:000000000000660D                 db    2
.eh_frame:000000000000660E                 db  42h ; B
.eh_frame:000000000000660F                 db  0Eh
.eh_frame:0000000000006610                 db  18h
.eh_frame:0000000000006611                 db  8Eh
.eh_frame:0000000000006612                 db    3
.eh_frame:0000000000006613                 db  45h ; E
.eh_frame:0000000000006614                 db  0Eh
.eh_frame:0000000000006615                 db  20h
.eh_frame:0000000000006616                 db  8Dh
.eh_frame:0000000000006617                 db    4
.eh_frame:0000000000006618                 db  42h ; B
.eh_frame:0000000000006619                 db  0Eh
.eh_frame:000000000000661A                 db  28h ; (
.eh_frame:000000000000661B                 db  8Ch
.eh_frame:000000000000661C                 db    5
.eh_frame:000000000000661D                 db  44h ; D
.eh_frame:000000000000661E                 db  0Eh
.eh_frame:000000000000661F                 db  30h ; 0
.eh_frame:0000000000006620                 db  86h
.eh_frame:0000000000006621                 db    6
.eh_frame:0000000000006622                 db  41h ; A
.eh_frame:0000000000006623                 db  0Eh
.eh_frame:0000000000006624                 db  38h ; 8
.eh_frame:0000000000006625                 db  83h
.eh_frame:0000000000006626                 db    7
.eh_frame:0000000000006627                 db  47h ; G
.eh_frame:0000000000006628                 db  0Eh
.eh_frame:0000000000006629                 db  50h ; P
.eh_frame:000000000000662A                 db    2
.eh_frame:000000000000662B                 db 0C3h
.eh_frame:000000000000662C                 db  0Ah
.eh_frame:000000000000662D                 db  0Eh
.eh_frame:000000000000662E                 db  38h ; 8
.eh_frame:000000000000662F                 db  44h ; D
.eh_frame:0000000000006630                 db  0Eh
.eh_frame:0000000000006631                 db  30h ; 0
.eh_frame:0000000000006632                 db  41h ; A
.eh_frame:0000000000006633                 db  0Eh
.eh_frame:0000000000006634                 db  28h ; (
.eh_frame:0000000000006635                 db  42h ; B
.eh_frame:0000000000006636                 db  0Eh
.eh_frame:0000000000006637                 db  20h
.eh_frame:0000000000006638                 db  42h ; B
.eh_frame:0000000000006639                 db  0Eh
.eh_frame:000000000000663A                 db  18h
.eh_frame:000000000000663B                 db  42h ; B
.eh_frame:000000000000663C                 db  0Eh
.eh_frame:000000000000663D                 db  10h
.eh_frame:000000000000663E                 db  42h ; B
.eh_frame:000000000000663F                 db  0Eh
.eh_frame:0000000000006640                 db    8
.eh_frame:0000000000006641                 db  49h ; I
.eh_frame:0000000000006642                 db  0Bh
.eh_frame:0000000000006643                 db    0
.eh_frame:0000000000006644                 db    0
.eh_frame:0000000000006645                 db    0
.eh_frame:0000000000006646                 db    0
.eh_frame:0000000000006647                 db    0
.eh_frame:0000000000006648                 db  38h ; 8
.eh_frame:0000000000006649                 db    0
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db 0ECh
.eh_frame:000000000000664D                 db    1
.eh_frame:000000000000664E                 db    0
.eh_frame:000000000000664F                 db    0
.eh_frame:0000000000006650                 db 0F0h
.eh_frame:0000000000006651                 db 0BDh
.eh_frame:0000000000006652                 db 0FFh
.eh_frame:0000000000006653                 db 0FFh
.eh_frame:0000000000006654                 db  3Fh ; ?
.eh_frame:0000000000006655                 db    1
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db    0
.eh_frame:0000000000006659                 db  42h ; B
.eh_frame:000000000000665A                 db  0Eh
.eh_frame:000000000000665B                 db  10h
.eh_frame:000000000000665C                 db  8Dh
.eh_frame:000000000000665D                 db    2
.eh_frame:000000000000665E                 db  42h ; B
.eh_frame:000000000000665F                 db  0Eh
.eh_frame:0000000000006660                 db  18h
.eh_frame:0000000000006661                 db  8Ch
.eh_frame:0000000000006662                 db    3
.eh_frame:0000000000006663                 db  44h ; D
.eh_frame:0000000000006664                 db  0Eh
.eh_frame:0000000000006665                 db  20h
.eh_frame:0000000000006666                 db  86h
.eh_frame:0000000000006667                 db    4
.eh_frame:0000000000006668                 db  41h ; A
.eh_frame:0000000000006669                 db  0Eh
.eh_frame:000000000000666A                 db  28h ; (
.eh_frame:000000000000666B                 db  83h
.eh_frame:000000000000666C                 db    5
.eh_frame:000000000000666D                 db  4Dh ; M
.eh_frame:000000000000666E                 db  0Eh
.eh_frame:000000000000666F                 db  90h
.eh_frame:0000000000006670                 db    2
.eh_frame:0000000000006671                 db    2
.eh_frame:0000000000006672                 db  8Eh
.eh_frame:0000000000006673                 db  0Ah
.eh_frame:0000000000006674                 db  0Eh
.eh_frame:0000000000006675                 db  28h ; (
.eh_frame:0000000000006676                 db  41h ; A
.eh_frame:0000000000006677                 db  0Eh
.eh_frame:0000000000006678                 db  20h
.eh_frame:0000000000006679                 db  41h ; A
.eh_frame:000000000000667A                 db  0Eh
.eh_frame:000000000000667B                 db  18h
.eh_frame:000000000000667C                 db  42h ; B
.eh_frame:000000000000667D                 db  0Eh
.eh_frame:000000000000667E                 db  10h
.eh_frame:000000000000667F                 db  42h ; B
.eh_frame:0000000000006680                 db  0Eh
.eh_frame:0000000000006681                 db    8
.eh_frame:0000000000006682                 db  46h ; F
.eh_frame:0000000000006683                 db  0Bh
.eh_frame:0000000000006684                 db  48h ; H
.eh_frame:0000000000006685                 db    0
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db  28h ; (
.eh_frame:0000000000006689                 db    2
.eh_frame:000000000000668A                 db    0
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db 0F4h
.eh_frame:000000000000668D                 db 0BEh
.eh_frame:000000000000668E                 db 0FFh
.eh_frame:000000000000668F                 db 0FFh
.eh_frame:0000000000006690                 db  3Bh ; ;
.eh_frame:0000000000006691                 db    1
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694                 db    0
.eh_frame:0000000000006695                 db  42h ; B
.eh_frame:0000000000006696                 db  0Eh
.eh_frame:0000000000006697                 db  10h
.eh_frame:0000000000006698                 db  8Eh
.eh_frame:0000000000006699                 db    2
.eh_frame:000000000000669A                 db  42h ; B
.eh_frame:000000000000669B                 db  0Eh
.eh_frame:000000000000669C                 db  18h
.eh_frame:000000000000669D                 db  8Dh
.eh_frame:000000000000669E                 db    3
.eh_frame:000000000000669F                 db  45h ; E
.eh_frame:00000000000066A0                 db  0Eh
.eh_frame:00000000000066A1                 db  20h
.eh_frame:00000000000066A2                 db  8Ch
.eh_frame:00000000000066A3                 db    4
.eh_frame:00000000000066A4                 db  41h ; A
.eh_frame:00000000000066A5                 db  0Eh
.eh_frame:00000000000066A6                 db  28h ; (
.eh_frame:00000000000066A7                 db  86h
.eh_frame:00000000000066A8                 db    5
.eh_frame:00000000000066A9                 db  44h ; D
.eh_frame:00000000000066AA                 db  0Eh
.eh_frame:00000000000066AB                 db  30h ; 0
.eh_frame:00000000000066AC                 db  83h
.eh_frame:00000000000066AD                 db    6
.eh_frame:00000000000066AE                 db  4Ah ; J
.eh_frame:00000000000066AF                 db  0Eh
.eh_frame:00000000000066B0                 db  80h
.eh_frame:00000000000066B1                 db    2
.eh_frame:00000000000066B2                 db    3
.eh_frame:00000000000066B3                 db  0Dh
.eh_frame:00000000000066B4                 db    1
.eh_frame:00000000000066B5                 db  0Ah
.eh_frame:00000000000066B6                 db  0Eh
.eh_frame:00000000000066B7                 db  30h ; 0
.eh_frame:00000000000066B8                 db  41h ; A
.eh_frame:00000000000066B9                 db  0Eh
.eh_frame:00000000000066BA                 db  28h ; (
.eh_frame:00000000000066BB                 db  41h ; A
.eh_frame:00000000000066BC                 db  0Eh
.eh_frame:00000000000066BD                 db  20h
.eh_frame:00000000000066BE                 db  42h ; B
.eh_frame:00000000000066BF                 db  0Eh
.eh_frame:00000000000066C0                 db  18h
.eh_frame:00000000000066C1                 db  42h ; B
.eh_frame:00000000000066C2                 db  0Eh
.eh_frame:00000000000066C3                 db  10h
.eh_frame:00000000000066C4                 db  42h ; B
.eh_frame:00000000000066C5                 db  0Eh
.eh_frame:00000000000066C6                 db    8
.eh_frame:00000000000066C7                 db  43h ; C
.eh_frame:00000000000066C8                 db  0Bh
.eh_frame:00000000000066C9                 db    0
.eh_frame:00000000000066CA                 db    0
.eh_frame:00000000000066CB                 db    0
.eh_frame:00000000000066CC                 db    0
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db  1Ch
.eh_frame:00000000000066D1                 db    0
.eh_frame:00000000000066D2                 db    0
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db  74h ; t
.eh_frame:00000000000066D5                 db    2
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db 0E8h
.eh_frame:00000000000066D9                 db 0BFh
.eh_frame:00000000000066DA                 db 0FFh
.eh_frame:00000000000066DB                 db 0FFh
.eh_frame:00000000000066DC                 db  9Fh
.eh_frame:00000000000066DD                 db    0
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db    0
.eh_frame:00000000000066E1                 db  44h ; D
.eh_frame:00000000000066E2                 db  0Eh
.eh_frame:00000000000066E3                 db  10h
.eh_frame:00000000000066E4                 db  83h
.eh_frame:00000000000066E5                 db    2
.eh_frame:00000000000066E6                 db    2
.eh_frame:00000000000066E7                 db  78h ; x
.eh_frame:00000000000066E8                 db  0Ah
.eh_frame:00000000000066E9                 db  0Eh
.eh_frame:00000000000066EA                 db    8
.eh_frame:00000000000066EB                 db  41h ; A
.eh_frame:00000000000066EC                 db  0Bh
.eh_frame:00000000000066ED                 db    0
.eh_frame:00000000000066EE                 db    0
.eh_frame:00000000000066EF                 db    0
.eh_frame:00000000000066F0                 db  40h ; @
.eh_frame:00000000000066F1                 db    0
.eh_frame:00000000000066F2                 db    0
.eh_frame:00000000000066F3                 db    0
.eh_frame:00000000000066F4                 db  94h
.eh_frame:00000000000066F5                 db    2
.eh_frame:00000000000066F6                 db    0
.eh_frame:00000000000066F7                 db    0
.eh_frame:00000000000066F8                 db  68h ; h
.eh_frame:00000000000066F9                 db 0C0h
.eh_frame:00000000000066FA                 db 0FFh
.eh_frame:00000000000066FB                 db 0FFh
.eh_frame:00000000000066FC                 db 0E7h
.eh_frame:00000000000066FD                 db    0
.eh_frame:00000000000066FE                 db    0
.eh_frame:00000000000066FF                 db    0
.eh_frame:0000000000006700                 db    0
.eh_frame:0000000000006701                 db  41h ; A
.eh_frame:0000000000006702                 db  0Eh
.eh_frame:0000000000006703                 db  10h
.eh_frame:0000000000006704                 db  86h
.eh_frame:0000000000006705                 db    2
.eh_frame:0000000000006706                 db  41h ; A
.eh_frame:0000000000006707                 db  0Eh
.eh_frame:0000000000006708                 db  18h
.eh_frame:0000000000006709                 db  83h
.eh_frame:000000000000670A                 db    3
.eh_frame:000000000000670B                 db  49h ; I
.eh_frame:000000000000670C                 db  0Eh
.eh_frame:000000000000670D                 db  20h
.eh_frame:000000000000670E                 db  6Eh ; n
.eh_frame:000000000000670F                 db  0Ah
.eh_frame:0000000000006710                 db  0Eh
.eh_frame:0000000000006711                 db  18h
.eh_frame:0000000000006712                 db  41h ; A
.eh_frame:0000000000006713                 db  0Eh
.eh_frame:0000000000006714                 db  10h
.eh_frame:0000000000006715                 db  41h ; A
.eh_frame:0000000000006716                 db  0Eh
.eh_frame:0000000000006717                 db    8
.eh_frame:0000000000006718                 db  45h ; E
.eh_frame:0000000000006719                 db  0Bh
.eh_frame:000000000000671A                 db    2
.eh_frame:000000000000671B                 db  4Ah ; J
.eh_frame:000000000000671C                 db  0Ah
.eh_frame:000000000000671D                 db  0Eh
.eh_frame:000000000000671E                 db  18h
.eh_frame:000000000000671F                 db  41h ; A
.eh_frame:0000000000006720                 db  0Eh
.eh_frame:0000000000006721                 db  10h
.eh_frame:0000000000006722                 db  41h ; A
.eh_frame:0000000000006723                 db  0Eh
.eh_frame:0000000000006724                 db    8
.eh_frame:0000000000006725                 db  44h ; D
.eh_frame:0000000000006726                 db  0Bh
.eh_frame:0000000000006727                 db    2
.eh_frame:0000000000006728                 db  54h ; T
.eh_frame:0000000000006729                 db  0Eh
.eh_frame:000000000000672A                 db  18h
.eh_frame:000000000000672B                 db  41h ; A
.eh_frame:000000000000672C                 db  0Eh
.eh_frame:000000000000672D                 db  10h
.eh_frame:000000000000672E                 db  41h ; A
.eh_frame:000000000000672F                 db  0Eh
.eh_frame:0000000000006730                 db    8
.eh_frame:0000000000006731                 db    0
.eh_frame:0000000000006732                 db    0
.eh_frame:0000000000006733                 db    0
.eh_frame:0000000000006734                 db  74h ; t
.eh_frame:0000000000006735                 db    0
.eh_frame:0000000000006736                 db    0
.eh_frame:0000000000006737                 db    0
.eh_frame:0000000000006738                 db 0D8h
.eh_frame:0000000000006739                 db    2
.eh_frame:000000000000673A                 db    0
.eh_frame:000000000000673B                 db    0
.eh_frame:000000000000673C                 db  14h
.eh_frame:000000000000673D                 db 0C1h
.eh_frame:000000000000673E                 db 0FFh
.eh_frame:000000000000673F                 db 0FFh
.eh_frame:0000000000006740                 db  34h ; 4
.eh_frame:0000000000006741                 db  12h
.eh_frame:0000000000006742                 db    0
.eh_frame:0000000000006743                 db    0
.eh_frame:0000000000006744                 db    0
.eh_frame:0000000000006745                 db  42h ; B
.eh_frame:0000000000006746                 db  0Eh
.eh_frame:0000000000006747                 db  10h
.eh_frame:0000000000006748                 db  8Fh
.eh_frame:0000000000006749                 db    2
.eh_frame:000000000000674A                 db  42h ; B
.eh_frame:000000000000674B                 db  0Eh
.eh_frame:000000000000674C                 db  18h
.eh_frame:000000000000674D                 db  8Eh
.eh_frame:000000000000674E                 db    3
.eh_frame:000000000000674F                 db  45h ; E
.eh_frame:0000000000006750                 db  0Eh
.eh_frame:0000000000006751                 db  20h
.eh_frame:0000000000006752                 db  8Dh
.eh_frame:0000000000006753                 db    4
.eh_frame:0000000000006754                 db  42h ; B
.eh_frame:0000000000006755                 db  0Eh
.eh_frame:0000000000006756                 db  28h ; (
.eh_frame:0000000000006757                 db  8Ch
.eh_frame:0000000000006758                 db    5
.eh_frame:0000000000006759                 db  44h ; D
.eh_frame:000000000000675A                 db  0Eh
.eh_frame:000000000000675B                 db  30h ; 0
.eh_frame:000000000000675C                 db  86h
.eh_frame:000000000000675D                 db    6
.eh_frame:000000000000675E                 db  41h ; A
.eh_frame:000000000000675F                 db  0Eh
.eh_frame:0000000000006760                 db  38h ; 8
.eh_frame:0000000000006761                 db  83h
.eh_frame:0000000000006762                 db    7
.eh_frame:0000000000006763                 db  53h ; S
.eh_frame:0000000000006764                 db  0Eh
.eh_frame:0000000000006765                 db 0F0h
.eh_frame:0000000000006766                 db    1
.eh_frame:0000000000006767                 db    3
.eh_frame:0000000000006768                 db  81h
.eh_frame:0000000000006769                 db  0Bh
.eh_frame:000000000000676A                 db  0Eh
.eh_frame:000000000000676B                 db 0F8h
.eh_frame:000000000000676C                 db    1
.eh_frame:000000000000676D                 db  4Ah ; J
.eh_frame:000000000000676E                 db  0Eh
.eh_frame:000000000000676F                 db  80h
.eh_frame:0000000000006770                 db    2
.eh_frame:0000000000006771                 db  44h ; D
.eh_frame:0000000000006772                 db  0Eh
.eh_frame:0000000000006773                 db  88h
.eh_frame:0000000000006774                 db    2
.eh_frame:0000000000006775                 db  45h ; E
.eh_frame:0000000000006776                 db  0Eh
.eh_frame:0000000000006777                 db  90h
.eh_frame:0000000000006778                 db    2
.eh_frame:0000000000006779                 db  5Fh ; _
.eh_frame:000000000000677A                 db  0Eh
.eh_frame:000000000000677B                 db 0F0h
.eh_frame:000000000000677C                 db    1
.eh_frame:000000000000677D                 db  64h ; d
.eh_frame:000000000000677E                 db  0Ah
.eh_frame:000000000000677F                 db  0Eh
.eh_frame:0000000000006780                 db  38h ; 8
.eh_frame:0000000000006781                 db  41h ; A
.eh_frame:0000000000006782                 db  0Eh
.eh_frame:0000000000006783                 db  30h ; 0
.eh_frame:0000000000006784                 db  41h ; A
.eh_frame:0000000000006785                 db  0Eh
.eh_frame:0000000000006786                 db  28h ; (
.eh_frame:0000000000006787                 db  42h ; B
.eh_frame:0000000000006788                 db  0Eh
.eh_frame:0000000000006789                 db  20h
.eh_frame:000000000000678A                 db  42h ; B
.eh_frame:000000000000678B                 db  0Eh
.eh_frame:000000000000678C                 db  18h
.eh_frame:000000000000678D                 db  42h ; B
.eh_frame:000000000000678E                 db  0Eh
.eh_frame:000000000000678F                 db  10h
.eh_frame:0000000000006790                 db  42h ; B
.eh_frame:0000000000006791                 db  0Eh
.eh_frame:0000000000006792                 db    8
.eh_frame:0000000000006793                 db  44h ; D
.eh_frame:0000000000006794                 db  0Bh
.eh_frame:0000000000006795                 db    3
.eh_frame:0000000000006796                 db  99h
.eh_frame:0000000000006797                 db    5
.eh_frame:0000000000006798                 db  0Eh
.eh_frame:0000000000006799                 db 0F8h
.eh_frame:000000000000679A                 db    1
.eh_frame:000000000000679B                 db  4Dh ; M
.eh_frame:000000000000679C                 db  0Eh
.eh_frame:000000000000679D                 db  80h
.eh_frame:000000000000679E                 db    2
.eh_frame:000000000000679F                 db  44h ; D
.eh_frame:00000000000067A0                 db  0Eh
.eh_frame:00000000000067A1                 db  88h
.eh_frame:00000000000067A2                 db    2
.eh_frame:00000000000067A3                 db  47h ; G
.eh_frame:00000000000067A4                 db  0Eh
.eh_frame:00000000000067A5                 db  90h
.eh_frame:00000000000067A6                 db    2
.eh_frame:00000000000067A7                 db  5Bh ; [
.eh_frame:00000000000067A8                 db  0Eh
.eh_frame:00000000000067A9                 db 0F0h
.eh_frame:00000000000067AA                 db    1
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db  68h ; h
.eh_frame:00000000000067AD                 db    0
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db  50h ; P
.eh_frame:00000000000067B1                 db    3
.eh_frame:00000000000067B2                 db    0
.eh_frame:00000000000067B3                 db    0
.eh_frame:00000000000067B4                 db 0DCh
.eh_frame:00000000000067B5                 db 0D2h
.eh_frame:00000000000067B6                 db 0FFh
.eh_frame:00000000000067B7                 db 0FFh
.eh_frame:00000000000067B8                 db 0ABh
.eh_frame:00000000000067B9                 db    1
.eh_frame:00000000000067BA                 db    0
.eh_frame:00000000000067BB                 db    0
.eh_frame:00000000000067BC                 db    0
.eh_frame:00000000000067BD                 db  42h ; B
.eh_frame:00000000000067BE                 db  0Eh
.eh_frame:00000000000067BF                 db  10h
.eh_frame:00000000000067C0                 db  8Fh
.eh_frame:00000000000067C1                 db    2
.eh_frame:00000000000067C2                 db  42h ; B
.eh_frame:00000000000067C3                 db  0Eh
.eh_frame:00000000000067C4                 db  18h
.eh_frame:00000000000067C5                 db  8Eh
.eh_frame:00000000000067C6                 db    3
.eh_frame:00000000000067C7                 db  45h ; E
.eh_frame:00000000000067C8                 db  0Eh
.eh_frame:00000000000067C9                 db  20h
.eh_frame:00000000000067CA                 db  8Dh
.eh_frame:00000000000067CB                 db    4
.eh_frame:00000000000067CC                 db  42h ; B
.eh_frame:00000000000067CD                 db  0Eh
.eh_frame:00000000000067CE                 db  28h ; (
.eh_frame:00000000000067CF                 db  8Ch
.eh_frame:00000000000067D0                 db    5
.eh_frame:00000000000067D1                 db  44h ; D
.eh_frame:00000000000067D2                 db  0Eh
.eh_frame:00000000000067D3                 db  30h ; 0
.eh_frame:00000000000067D4                 db  86h
.eh_frame:00000000000067D5                 db    6
.eh_frame:00000000000067D6                 db  41h ; A
.eh_frame:00000000000067D7                 db  0Eh
.eh_frame:00000000000067D8                 db  38h ; 8
.eh_frame:00000000000067D9                 db  83h
.eh_frame:00000000000067DA                 db    7
.eh_frame:00000000000067DB                 db  47h ; G
.eh_frame:00000000000067DC                 db  0Eh
.eh_frame:00000000000067DD                 db  60h ; `
.eh_frame:00000000000067DE                 db    2
.eh_frame:00000000000067DF                 db  99h
.eh_frame:00000000000067E0                 db  0Eh
.eh_frame:00000000000067E1                 db  68h ; h
.eh_frame:00000000000067E2                 db  5Fh ; _
.eh_frame:00000000000067E3                 db  0Eh
.eh_frame:00000000000067E4                 db  70h ; p
.eh_frame:00000000000067E5                 db  46h ; F
.eh_frame:00000000000067E6                 db  0Eh
.eh_frame:00000000000067E7                 db  78h ; x
.eh_frame:00000000000067E8                 db  42h ; B
.eh_frame:00000000000067E9                 db  0Eh
.eh_frame:00000000000067EA                 db  80h
.eh_frame:00000000000067EB                 db    1
.eh_frame:00000000000067EC                 db  59h ; Y
.eh_frame:00000000000067ED                 db  0Eh
.eh_frame:00000000000067EE                 db  60h ; `
.eh_frame:00000000000067EF                 db    2
.eh_frame:00000000000067F0                 db  40h ; @
.eh_frame:00000000000067F1                 db  0Eh
.eh_frame:00000000000067F2                 db  68h ; h
.eh_frame:00000000000067F3                 db  4Bh ; K
.eh_frame:00000000000067F4                 db  0Eh
.eh_frame:00000000000067F5                 db  70h ; p
.eh_frame:00000000000067F6                 db  43h ; C
.eh_frame:00000000000067F7                 db  0Eh
.eh_frame:00000000000067F8                 db  78h ; x
.eh_frame:00000000000067F9                 db  45h ; E
.eh_frame:00000000000067FA                 db  0Eh
.eh_frame:00000000000067FB                 db  80h
.eh_frame:00000000000067FC                 db    1
.eh_frame:00000000000067FD                 db  5Eh ; ^
.eh_frame:00000000000067FE                 db  0Eh
.eh_frame:00000000000067FF                 db  60h ; `
.eh_frame:0000000000006800                 db  4Ch ; L
.eh_frame:0000000000006801                 db  0Ah
.eh_frame:0000000000006802                 db  0Eh
.eh_frame:0000000000006803                 db  38h ; 8
.eh_frame:0000000000006804                 db  44h ; D
.eh_frame:0000000000006805                 db  0Eh
.eh_frame:0000000000006806                 db  30h ; 0
.eh_frame:0000000000006807                 db  41h ; A
.eh_frame:0000000000006808                 db  0Eh
.eh_frame:0000000000006809                 db  28h ; (
.eh_frame:000000000000680A                 db  42h ; B
.eh_frame:000000000000680B                 db  0Eh
.eh_frame:000000000000680C                 db  20h
.eh_frame:000000000000680D                 db  42h ; B
.eh_frame:000000000000680E                 db  0Eh
.eh_frame:000000000000680F                 db  18h
.eh_frame:0000000000006810                 db  42h ; B
.eh_frame:0000000000006811                 db  0Eh
.eh_frame:0000000000006812                 db  10h
.eh_frame:0000000000006813                 db  42h ; B
.eh_frame:0000000000006814                 db  0Eh
.eh_frame:0000000000006815                 db    8
.eh_frame:0000000000006816                 db  46h ; F
.eh_frame:0000000000006817                 db  0Bh
.eh_frame:0000000000006818                 db  28h ; (
.eh_frame:0000000000006819                 db    0
.eh_frame:000000000000681A                 db    0
.eh_frame:000000000000681B                 db    0
.eh_frame:000000000000681C                 db 0BCh
.eh_frame:000000000000681D                 db    3
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db  20h
.eh_frame:0000000000006821                 db 0D4h
.eh_frame:0000000000006822                 db 0FFh
.eh_frame:0000000000006823                 db 0FFh
.eh_frame:0000000000006824                 db  36h ; 6
.eh_frame:0000000000006825                 db    0
.eh_frame:0000000000006826                 db    0
.eh_frame:0000000000006827                 db    0
.eh_frame:0000000000006828                 db    0
.eh_frame:0000000000006829                 db  42h ; B
.eh_frame:000000000000682A                 db  0Eh
.eh_frame:000000000000682B                 db  10h
.eh_frame:000000000000682C                 db  8Ch
.eh_frame:000000000000682D                 db    2
.eh_frame:000000000000682E                 db  41h ; A
.eh_frame:000000000000682F                 db  0Eh
.eh_frame:0000000000006830                 db  18h
.eh_frame:0000000000006831                 db  86h
.eh_frame:0000000000006832                 db    3
.eh_frame:0000000000006833                 db  41h ; A
.eh_frame:0000000000006834                 db  0Eh
.eh_frame:0000000000006835                 db  20h
.eh_frame:0000000000006836                 db  83h
.eh_frame:0000000000006837                 db    4
.eh_frame:0000000000006838                 db  6Eh ; n
.eh_frame:0000000000006839                 db  0Eh
.eh_frame:000000000000683A                 db  18h
.eh_frame:000000000000683B                 db  41h ; A
.eh_frame:000000000000683C                 db  0Eh
.eh_frame:000000000000683D                 db  10h
.eh_frame:000000000000683E                 db  42h ; B
.eh_frame:000000000000683F                 db  0Eh
.eh_frame:0000000000006840                 db    8
.eh_frame:0000000000006841                 db    0
.eh_frame:0000000000006842                 db    0
.eh_frame:0000000000006843                 db    0
.eh_frame:0000000000006844                 db  10h
.eh_frame:0000000000006845                 db    0
.eh_frame:0000000000006846                 db    0
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db 0E8h
.eh_frame:0000000000006849                 db    3
.eh_frame:000000000000684A                 db    0
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db  34h ; 4
.eh_frame:000000000000684D                 db 0D4h
.eh_frame:000000000000684E                 db 0FFh
.eh_frame:000000000000684F                 db 0FFh
.eh_frame:0000000000006850                 db  11h
.eh_frame:0000000000006851                 db    0
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db    0
.eh_frame:0000000000006855                 db    0
.eh_frame:0000000000006856                 db    0
.eh_frame:0000000000006857                 db    0
.eh_frame:0000000000006858                 db  10h
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db 0FCh
.eh_frame:000000000000685D                 db    3
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db  40h ; @
.eh_frame:0000000000006861                 db 0D4h
.eh_frame:0000000000006862                 db 0FFh
.eh_frame:0000000000006863                 db 0FFh
.eh_frame:0000000000006864                 db  11h
.eh_frame:0000000000006865                 db    0
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db    0
.eh_frame:0000000000006869                 db    0
.eh_frame:000000000000686A                 db    0
.eh_frame:000000000000686B                 db    0
.eh_frame:000000000000686C                 db  10h
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db  10h
.eh_frame:0000000000006871                 db    4
.eh_frame:0000000000006872                 db    0
.eh_frame:0000000000006873                 db    0
.eh_frame:0000000000006874                 db  4Ch ; L
.eh_frame:0000000000006875                 db 0D4h
.eh_frame:0000000000006876                 db 0FFh
.eh_frame:0000000000006877                 db 0FFh
.eh_frame:0000000000006878                 db  35h ; 5
.eh_frame:0000000000006879                 db    0
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db    0
.eh_frame:000000000000687D                 db    0
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db  10h
.eh_frame:0000000000006881                 db    0
.eh_frame:0000000000006882                 db    0
.eh_frame:0000000000006883                 db    0
.eh_frame:0000000000006884                 db  24h ; $
.eh_frame:0000000000006885                 db    4
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db  78h ; x
.eh_frame:0000000000006889                 db 0D4h
.eh_frame:000000000000688A                 db 0FFh
.eh_frame:000000000000688B                 db 0FFh
.eh_frame:000000000000688C                 db  15h
.eh_frame:000000000000688D                 db    0
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db    0
.eh_frame:0000000000006891                 db    0
.eh_frame:0000000000006892                 db    0
.eh_frame:0000000000006893                 db    0
.eh_frame:0000000000006894                 db  10h
.eh_frame:0000000000006895                 db    0
.eh_frame:0000000000006896                 db    0
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db  38h ; 8
.eh_frame:0000000000006899                 db    4
.eh_frame:000000000000689A                 db    0
.eh_frame:000000000000689B                 db    0
.eh_frame:000000000000689C                 db  84h
.eh_frame:000000000000689D                 db 0D4h
.eh_frame:000000000000689E                 db 0FFh
.eh_frame:000000000000689F                 db 0FFh
.eh_frame:00000000000068A0                 db  30h ; 0
.eh_frame:00000000000068A1                 db    0
.eh_frame:00000000000068A2                 db    0
.eh_frame:00000000000068A3                 db    0
.eh_frame:00000000000068A4                 db    0
.eh_frame:00000000000068A5                 db  6Bh ; k
.eh_frame:00000000000068A6                 db  0Eh
.eh_frame:00000000000068A7                 db  10h
.eh_frame:00000000000068A8                 db  50h ; P
.eh_frame:00000000000068A9                 db    0
.eh_frame:00000000000068AA                 db    0
.eh_frame:00000000000068AB                 db    0
.eh_frame:00000000000068AC                 db  4Ch ; L
.eh_frame:00000000000068AD                 db    4
.eh_frame:00000000000068AE                 db    0
.eh_frame:00000000000068AF                 db    0
.eh_frame:00000000000068B0                 db 0A0h
.eh_frame:00000000000068B1                 db 0D4h
.eh_frame:00000000000068B2                 db 0FFh
.eh_frame:00000000000068B3                 db 0FFh
.eh_frame:00000000000068B4                 db  74h ; t
.eh_frame:00000000000068B5                 db    0
.eh_frame:00000000000068B6                 db    0
.eh_frame:00000000000068B7                 db    0
.eh_frame:00000000000068B8                 db    0
.eh_frame:00000000000068B9                 db  42h ; B
.eh_frame:00000000000068BA                 db  0Eh
.eh_frame:00000000000068BB                 db  10h
.eh_frame:00000000000068BC                 db  8Fh
.eh_frame:00000000000068BD                 db    2
.eh_frame:00000000000068BE                 db  42h ; B
.eh_frame:00000000000068BF                 db  0Eh
.eh_frame:00000000000068C0                 db  18h
.eh_frame:00000000000068C1                 db  8Eh
.eh_frame:00000000000068C2                 db    3
.eh_frame:00000000000068C3                 db  49h ; I
.eh_frame:00000000000068C4                 db  0Eh
.eh_frame:00000000000068C5                 db  20h
.eh_frame:00000000000068C6                 db  8Dh
.eh_frame:00000000000068C7                 db    4
.eh_frame:00000000000068C8                 db  42h ; B
.eh_frame:00000000000068C9                 db  0Eh
.eh_frame:00000000000068CA                 db  28h ; (
.eh_frame:00000000000068CB                 db  8Ch
.eh_frame:00000000000068CC                 db    5
.eh_frame:00000000000068CD                 db  44h ; D
.eh_frame:00000000000068CE                 db  0Eh
.eh_frame:00000000000068CF                 db  30h ; 0
.eh_frame:00000000000068D0                 db  86h
.eh_frame:00000000000068D1                 db    6
.eh_frame:00000000000068D2                 db  41h ; A
.eh_frame:00000000000068D3                 db  0Eh
.eh_frame:00000000000068D4                 db  38h ; 8
.eh_frame:00000000000068D5                 db  83h
.eh_frame:00000000000068D6                 db    7
.eh_frame:00000000000068D7                 db  4Dh ; M
.eh_frame:00000000000068D8                 db  0Eh
.eh_frame:00000000000068D9                 db  50h ; P
.eh_frame:00000000000068DA                 db  5Fh ; _
.eh_frame:00000000000068DB                 db  0Eh
.eh_frame:00000000000068DC                 db  58h ; X
.eh_frame:00000000000068DD                 db  47h ; G
.eh_frame:00000000000068DE                 db  0Eh
.eh_frame:00000000000068DF                 db  60h ; `
.eh_frame:00000000000068E0                 db  46h ; F
.eh_frame:00000000000068E1                 db  0Eh
.eh_frame:00000000000068E2                 db  68h ; h
.eh_frame:00000000000068E3                 db  44h ; D
.eh_frame:00000000000068E4                 db  0Eh
.eh_frame:00000000000068E5                 db  70h ; p
.eh_frame:00000000000068E6                 db  58h ; X
.eh_frame:00000000000068E7                 db  0Eh
.eh_frame:00000000000068E8                 db  38h ; 8
.eh_frame:00000000000068E9                 db  41h ; A
.eh_frame:00000000000068EA                 db  0Eh
.eh_frame:00000000000068EB                 db  30h ; 0
.eh_frame:00000000000068EC                 db  41h ; A
.eh_frame:00000000000068ED                 db  0Eh
.eh_frame:00000000000068EE                 db  28h ; (
.eh_frame:00000000000068EF                 db  42h ; B
.eh_frame:00000000000068F0                 db  0Eh
.eh_frame:00000000000068F1                 db  20h
.eh_frame:00000000000068F2                 db  42h ; B
.eh_frame:00000000000068F3                 db  0Eh
.eh_frame:00000000000068F4                 db  18h
.eh_frame:00000000000068F5                 db  42h ; B
.eh_frame:00000000000068F6                 db  0Eh
.eh_frame:00000000000068F7                 db  10h
.eh_frame:00000000000068F8                 db  42h ; B
.eh_frame:00000000000068F9                 db  0Eh
.eh_frame:00000000000068FA                 db    8
.eh_frame:00000000000068FB                 db    0
.eh_frame:00000000000068FC                 db  68h ; h
.eh_frame:00000000000068FD                 db    0
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db 0A0h
.eh_frame:0000000000006901                 db    4
.eh_frame:0000000000006902                 db    0
.eh_frame:0000000000006903                 db    0
.eh_frame:0000000000006904                 db 0CCh
.eh_frame:0000000000006905                 db 0D4h
.eh_frame:0000000000006906                 db 0FFh
.eh_frame:0000000000006907                 db 0FFh
.eh_frame:0000000000006908                 db 0E3h
.eh_frame:0000000000006909                 db    0
.eh_frame:000000000000690A                 db    0
.eh_frame:000000000000690B                 db    0
.eh_frame:000000000000690C                 db    0
.eh_frame:000000000000690D                 db  42h ; B
.eh_frame:000000000000690E                 db  0Eh
.eh_frame:000000000000690F                 db  10h
.eh_frame:0000000000006910                 db  8Fh
.eh_frame:0000000000006911                 db    2
.eh_frame:0000000000006912                 db  42h ; B
.eh_frame:0000000000006913                 db  0Eh
.eh_frame:0000000000006914                 db  18h
.eh_frame:0000000000006915                 db  8Eh
.eh_frame:0000000000006916                 db    3
.eh_frame:0000000000006917                 db  49h ; I
.eh_frame:0000000000006918                 db  0Eh
.eh_frame:0000000000006919                 db  20h
.eh_frame:000000000000691A                 db  8Dh
.eh_frame:000000000000691B                 db    4
.eh_frame:000000000000691C                 db  42h ; B
.eh_frame:000000000000691D                 db  0Eh
.eh_frame:000000000000691E                 db  28h ; (
.eh_frame:000000000000691F                 db  8Ch
.eh_frame:0000000000006920                 db    5
.eh_frame:0000000000006921                 db  44h ; D
.eh_frame:0000000000006922                 db  0Eh
.eh_frame:0000000000006923                 db  30h ; 0
.eh_frame:0000000000006924                 db  86h
.eh_frame:0000000000006925                 db    6
.eh_frame:0000000000006926                 db  41h ; A
.eh_frame:0000000000006927                 db  0Eh
.eh_frame:0000000000006928                 db  38h ; 8
.eh_frame:0000000000006929                 db  83h
.eh_frame:000000000000692A                 db    7
.eh_frame:000000000000692B                 db  4Dh ; M
.eh_frame:000000000000692C                 db  0Eh
.eh_frame:000000000000692D                 db  70h ; p
.eh_frame:000000000000692E                 db  65h ; e
.eh_frame:000000000000692F                 db  0Eh
.eh_frame:0000000000006930                 db  78h ; x
.eh_frame:0000000000006931                 db  4Dh ; M
.eh_frame:0000000000006932                 db  0Eh
.eh_frame:0000000000006933                 db  80h
.eh_frame:0000000000006934                 db    1
.eh_frame:0000000000006935                 db  46h ; F
.eh_frame:0000000000006936                 db  0Eh
.eh_frame:0000000000006937                 db  88h
.eh_frame:0000000000006938                 db    1
.eh_frame:0000000000006939                 db  42h ; B
.eh_frame:000000000000693A                 db  0Eh
.eh_frame:000000000000693B                 db  90h
.eh_frame:000000000000693C                 db    1
.eh_frame:000000000000693D                 db  5Eh ; ^
.eh_frame:000000000000693E                 db  0Eh
.eh_frame:000000000000693F                 db  70h ; p
.eh_frame:0000000000006940                 db  56h ; V
.eh_frame:0000000000006941                 db  0Eh
.eh_frame:0000000000006942                 db  78h ; x
.eh_frame:0000000000006943                 db  43h ; C
.eh_frame:0000000000006944                 db  0Eh
.eh_frame:0000000000006945                 db  80h
.eh_frame:0000000000006946                 db    1
.eh_frame:0000000000006947                 db  43h ; C
.eh_frame:0000000000006948                 db  0Eh
.eh_frame:0000000000006949                 db  88h
.eh_frame:000000000000694A                 db    1
.eh_frame:000000000000694B                 db  56h ; V
.eh_frame:000000000000694C                 db  0Eh
.eh_frame:000000000000694D                 db  90h
.eh_frame:000000000000694E                 db    1
.eh_frame:000000000000694F                 db  52h ; R
.eh_frame:0000000000006950                 db  0Eh
.eh_frame:0000000000006951                 db  70h ; p
.eh_frame:0000000000006952                 db  5Bh ; [
.eh_frame:0000000000006953                 db  0Eh
.eh_frame:0000000000006954                 db  38h ; 8
.eh_frame:0000000000006955                 db  41h ; A
.eh_frame:0000000000006956                 db  0Eh
.eh_frame:0000000000006957                 db  30h ; 0
.eh_frame:0000000000006958                 db  41h ; A
.eh_frame:0000000000006959                 db  0Eh
.eh_frame:000000000000695A                 db  28h ; (
.eh_frame:000000000000695B                 db  42h ; B
.eh_frame:000000000000695C                 db  0Eh
.eh_frame:000000000000695D                 db  20h
.eh_frame:000000000000695E                 db  42h ; B
.eh_frame:000000000000695F                 db  0Eh
.eh_frame:0000000000006960                 db  18h
.eh_frame:0000000000006961                 db  42h ; B
.eh_frame:0000000000006962                 db  0Eh
.eh_frame:0000000000006963                 db  10h
.eh_frame:0000000000006964                 db  42h ; B
.eh_frame:0000000000006965                 db  0Eh
.eh_frame:0000000000006966                 db    8
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db  10h
.eh_frame:0000000000006969                 db    0
.eh_frame:000000000000696A                 db    0
.eh_frame:000000000000696B                 db    0
.eh_frame:000000000000696C                 db  0Ch
.eh_frame:000000000000696D                 db    5
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db  50h ; P
.eh_frame:0000000000006971                 db 0D5h
.eh_frame:0000000000006972                 db 0FFh
.eh_frame:0000000000006973                 db 0FFh
.eh_frame:0000000000006974                 db  0Ah
.eh_frame:0000000000006975                 db    0
.eh_frame:0000000000006976                 db    0
.eh_frame:0000000000006977                 db    0
.eh_frame:0000000000006978                 db    0
.eh_frame:0000000000006979                 db    0
.eh_frame:000000000000697A                 db    0
.eh_frame:000000000000697B                 db    0
.eh_frame:000000000000697C                 db  28h ; (
.eh_frame:000000000000697D                 db    0
.eh_frame:000000000000697E                 db    0
.eh_frame:000000000000697F                 db    0
.eh_frame:0000000000006980                 db  20h
.eh_frame:0000000000006981                 db    5
.eh_frame:0000000000006982                 db    0
.eh_frame:0000000000006983                 db    0
.eh_frame:0000000000006984                 db  4Ch ; L
.eh_frame:0000000000006985                 db 0D5h
.eh_frame:0000000000006986                 db 0FFh
.eh_frame:0000000000006987                 db 0FFh
.eh_frame:0000000000006988                 db  93h
.eh_frame:0000000000006989                 db    0
.eh_frame:000000000000698A                 db    0
.eh_frame:000000000000698B                 db    0
.eh_frame:000000000000698C                 db    0
.eh_frame:000000000000698D                 db  48h ; H
.eh_frame:000000000000698E                 db  0Eh
.eh_frame:000000000000698F                 db  10h
.eh_frame:0000000000006990                 db  8Ch
.eh_frame:0000000000006991                 db    2
.eh_frame:0000000000006992                 db  48h ; H
.eh_frame:0000000000006993                 db  0Eh
.eh_frame:0000000000006994                 db  18h
.eh_frame:0000000000006995                 db  86h
.eh_frame:0000000000006996                 db    3
.eh_frame:0000000000006997                 db  41h ; A
.eh_frame:0000000000006998                 db  0Eh
.eh_frame:0000000000006999                 db  20h
.eh_frame:000000000000699A                 db  83h
.eh_frame:000000000000699B                 db    4
.eh_frame:000000000000699C                 db    2
.eh_frame:000000000000699D                 db  74h ; t
.eh_frame:000000000000699E                 db  0Eh
.eh_frame:000000000000699F                 db  18h
.eh_frame:00000000000069A0                 db  4Bh ; K
.eh_frame:00000000000069A1                 db  0Eh
.eh_frame:00000000000069A2                 db  10h
.eh_frame:00000000000069A3                 db  42h ; B
.eh_frame:00000000000069A4                 db  0Eh
.eh_frame:00000000000069A5                 db    8
.eh_frame:00000000000069A6                 db    0
.eh_frame:00000000000069A7                 db    0
.eh_frame:00000000000069A8                 db  10h
.eh_frame:00000000000069A9                 db    0
.eh_frame:00000000000069AA                 db    0
.eh_frame:00000000000069AB                 db    0
.eh_frame:00000000000069AC                 db  4Ch ; L
.eh_frame:00000000000069AD                 db    5
.eh_frame:00000000000069AE                 db    0
.eh_frame:00000000000069AF                 db    0
.eh_frame:00000000000069B0                 db 0C0h
.eh_frame:00000000000069B1                 db 0D5h
.eh_frame:00000000000069B2                 db 0FFh
.eh_frame:00000000000069B3                 db 0FFh
.eh_frame:00000000000069B4                 db  13h
.eh_frame:00000000000069B5                 db    0
.eh_frame:00000000000069B6                 db    0
.eh_frame:00000000000069B7                 db    0
.eh_frame:00000000000069B8                 db    0
.eh_frame:00000000000069B9                 db    0
.eh_frame:00000000000069BA                 db    0
.eh_frame:00000000000069BB                 db    0
.eh_frame:00000000000069BC                 db  10h
.eh_frame:00000000000069BD                 db    0
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db  60h ; `
.eh_frame:00000000000069C1                 db    5
.eh_frame:00000000000069C2                 db    0
.eh_frame:00000000000069C3                 db    0
.eh_frame:00000000000069C4                 db 0CCh
.eh_frame:00000000000069C5                 db 0D5h
.eh_frame:00000000000069C6                 db 0FFh
.eh_frame:00000000000069C7                 db 0FFh
.eh_frame:00000000000069C8                 db  0Ch
.eh_frame:00000000000069C9                 db    0
.eh_frame:00000000000069CA                 db    0
.eh_frame:00000000000069CB                 db    0
.eh_frame:00000000000069CC                 db    0
.eh_frame:00000000000069CD                 db    0
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db  10h
.eh_frame:00000000000069D1                 db    0
.eh_frame:00000000000069D2                 db    0
.eh_frame:00000000000069D3                 db    0
.eh_frame:00000000000069D4                 db  74h ; t
.eh_frame:00000000000069D5                 db    5
.eh_frame:00000000000069D6                 db    0
.eh_frame:00000000000069D7                 db    0
.eh_frame:00000000000069D8                 db 0C8h
.eh_frame:00000000000069D9                 db 0D5h
.eh_frame:00000000000069DA                 db 0FFh
.eh_frame:00000000000069DB                 db 0FFh
.eh_frame:00000000000069DC                 db  18h
.eh_frame:00000000000069DD                 db    0
.eh_frame:00000000000069DE                 db    0
.eh_frame:00000000000069DF                 db    0
.eh_frame:00000000000069E0                 db    0
.eh_frame:00000000000069E1                 db    0
.eh_frame:00000000000069E2                 db    0
.eh_frame:00000000000069E3                 db    0
.eh_frame:00000000000069E4                 db  10h
.eh_frame:00000000000069E5                 db    0
.eh_frame:00000000000069E6                 db    0
.eh_frame:00000000000069E7                 db    0
.eh_frame:00000000000069E8                 db  88h
.eh_frame:00000000000069E9                 db    5
.eh_frame:00000000000069EA                 db    0
.eh_frame:00000000000069EB                 db    0
.eh_frame:00000000000069EC                 db 0D4h
.eh_frame:00000000000069ED                 db 0D5h
.eh_frame:00000000000069EE                 db 0FFh
.eh_frame:00000000000069EF                 db 0FFh
.eh_frame:00000000000069F0                 db  14h
.eh_frame:00000000000069F1                 db    0
.eh_frame:00000000000069F2                 db    0
.eh_frame:00000000000069F3                 db    0
.eh_frame:00000000000069F4                 db    0
.eh_frame:00000000000069F5                 db    0
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db  18h
.eh_frame:00000000000069F9                 db    0
.eh_frame:00000000000069FA                 db    0
.eh_frame:00000000000069FB                 db    0
.eh_frame:00000000000069FC                 db  9Ch
.eh_frame:00000000000069FD                 db    5
.eh_frame:00000000000069FE                 db    0
.eh_frame:00000000000069FF                 db    0
.eh_frame:0000000000006A00                 db 0E0h
.eh_frame:0000000000006A01                 db 0D5h
.eh_frame:0000000000006A02                 db 0FFh
.eh_frame:0000000000006A03                 db 0FFh
.eh_frame:0000000000006A04                 db  8Eh
.eh_frame:0000000000006A05                 db    0
.eh_frame:0000000000006A06                 db    0
.eh_frame:0000000000006A07                 db    0
.eh_frame:0000000000006A08                 db    0
.eh_frame:0000000000006A09                 db  44h ; D
.eh_frame:0000000000006A0A                 db  0Eh
.eh_frame:0000000000006A0B                 db  50h ; P
.eh_frame:0000000000006A0C                 db    2
.eh_frame:0000000000006A0D                 db  7Fh ; 
.eh_frame:0000000000006A0E                 db  0Ah
.eh_frame:0000000000006A0F                 db  0Eh
.eh_frame:0000000000006A10                 db    8
.eh_frame:0000000000006A11                 db  41h ; A
.eh_frame:0000000000006A12                 db  0Bh
.eh_frame:0000000000006A13                 db    0
.eh_frame:0000000000006A14                 db  18h
.eh_frame:0000000000006A15                 db    0
.eh_frame:0000000000006A16                 db    0
.eh_frame:0000000000006A17                 db    0
.eh_frame:0000000000006A18                 db 0B8h
.eh_frame:0000000000006A19                 db    5
.eh_frame:0000000000006A1A                 db    0
.eh_frame:0000000000006A1B                 db    0
.eh_frame:0000000000006A1C                 db  54h ; T
.eh_frame:0000000000006A1D                 db 0D6h
.eh_frame:0000000000006A1E                 db 0FFh
.eh_frame:0000000000006A1F                 db 0FFh
.eh_frame:0000000000006A20                 db  8Ah
.eh_frame:0000000000006A21                 db    0
.eh_frame:0000000000006A22                 db    0
.eh_frame:0000000000006A23                 db    0
.eh_frame:0000000000006A24                 db    0
.eh_frame:0000000000006A25                 db  44h ; D
.eh_frame:0000000000006A26                 db  0Eh
.eh_frame:0000000000006A27                 db  50h ; P
.eh_frame:0000000000006A28                 db    2
.eh_frame:0000000000006A29                 db  7Bh ; {
.eh_frame:0000000000006A2A                 db  0Ah
.eh_frame:0000000000006A2B                 db  0Eh
.eh_frame:0000000000006A2C                 db    8
.eh_frame:0000000000006A2D                 db  41h ; A
.eh_frame:0000000000006A2E                 db  0Bh
.eh_frame:0000000000006A2F                 db    0
.eh_frame:0000000000006A30                 db  10h
.eh_frame:0000000000006A31                 db    0
.eh_frame:0000000000006A32                 db    0
.eh_frame:0000000000006A33                 db    0
.eh_frame:0000000000006A34                 db 0D4h
.eh_frame:0000000000006A35                 db    5
.eh_frame:0000000000006A36                 db    0
.eh_frame:0000000000006A37                 db    0
.eh_frame:0000000000006A38                 db 0C8h
.eh_frame:0000000000006A39                 db 0D6h
.eh_frame:0000000000006A3A                 db 0FFh
.eh_frame:0000000000006A3B                 db 0FFh
.eh_frame:0000000000006A3C                 db  0Ch
.eh_frame:0000000000006A3D                 db    0
.eh_frame:0000000000006A3E                 db    0
.eh_frame:0000000000006A3F                 db    0
.eh_frame:0000000000006A40                 db    0
.eh_frame:0000000000006A41                 db    0
.eh_frame:0000000000006A42                 db    0
.eh_frame:0000000000006A43                 db    0
.eh_frame:0000000000006A44                 db  10h
.eh_frame:0000000000006A45                 db    0
.eh_frame:0000000000006A46                 db    0
.eh_frame:0000000000006A47                 db    0
.eh_frame:0000000000006A48                 db 0E8h
.eh_frame:0000000000006A49                 db    5
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db 0C4h
.eh_frame:0000000000006A4D                 db 0D6h
.eh_frame:0000000000006A4E                 db 0FFh
.eh_frame:0000000000006A4F                 db 0FFh
.eh_frame:0000000000006A50                 db  0Fh
.eh_frame:0000000000006A51                 db    0
.eh_frame:0000000000006A52                 db    0
.eh_frame:0000000000006A53                 db    0
.eh_frame:0000000000006A54                 db    0
.eh_frame:0000000000006A55                 db    0
.eh_frame:0000000000006A56                 db    0
.eh_frame:0000000000006A57                 db    0
.eh_frame:0000000000006A58                 db  18h
.eh_frame:0000000000006A59                 db    0
.eh_frame:0000000000006A5A                 db    0
.eh_frame:0000000000006A5B                 db    0
.eh_frame:0000000000006A5C                 db 0FCh
.eh_frame:0000000000006A5D                 db    5
.eh_frame:0000000000006A5E                 db    0
.eh_frame:0000000000006A5F                 db    0
.eh_frame:0000000000006A60                 db 0C0h
.eh_frame:0000000000006A61                 db 0D6h
.eh_frame:0000000000006A62                 db 0FFh
.eh_frame:0000000000006A63                 db 0FFh
.eh_frame:0000000000006A64                 db  98h
.eh_frame:0000000000006A65                 db    0
.eh_frame:0000000000006A66                 db    0
.eh_frame:0000000000006A67                 db    0
.eh_frame:0000000000006A68                 db    0
.eh_frame:0000000000006A69                 db  44h ; D
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db  50h ; P
.eh_frame:0000000000006A6C                 db    2
.eh_frame:0000000000006A6D                 db  8Eh
.eh_frame:0000000000006A6E                 db  0Ah
.eh_frame:0000000000006A6F                 db  0Eh
.eh_frame:0000000000006A70                 db    8
.eh_frame:0000000000006A71                 db  41h ; A
.eh_frame:0000000000006A72                 db  0Bh
.eh_frame:0000000000006A73                 db    0
.eh_frame:0000000000006A74                 db  10h
.eh_frame:0000000000006A75                 db    0
.eh_frame:0000000000006A76                 db    0
.eh_frame:0000000000006A77                 db    0
.eh_frame:0000000000006A78                 db  18h
.eh_frame:0000000000006A79                 db    6
.eh_frame:0000000000006A7A                 db    0
.eh_frame:0000000000006A7B                 db    0
.eh_frame:0000000000006A7C                 db  44h ; D
.eh_frame:0000000000006A7D                 db 0D7h
.eh_frame:0000000000006A7E                 db 0FFh
.eh_frame:0000000000006A7F                 db 0FFh
.eh_frame:0000000000006A80                 db  10h
.eh_frame:0000000000006A81                 db    0
.eh_frame:0000000000006A82                 db    0
.eh_frame:0000000000006A83                 db    0
.eh_frame:0000000000006A84                 db    0
.eh_frame:0000000000006A85                 db    0
.eh_frame:0000000000006A86                 db    0
.eh_frame:0000000000006A87                 db    0
.eh_frame:0000000000006A88                 db  10h
.eh_frame:0000000000006A89                 db    0
.eh_frame:0000000000006A8A                 db    0
.eh_frame:0000000000006A8B                 db    0
.eh_frame:0000000000006A8C                 db  2Ch ; ,
.eh_frame:0000000000006A8D                 db    6
.eh_frame:0000000000006A8E                 db    0
.eh_frame:0000000000006A8F                 db    0
.eh_frame:0000000000006A90                 db  40h ; @
.eh_frame:0000000000006A91                 db 0D7h
.eh_frame:0000000000006A92                 db 0FFh
.eh_frame:0000000000006A93                 db 0FFh
.eh_frame:0000000000006A94                 db  11h
.eh_frame:0000000000006A95                 db    0
.eh_frame:0000000000006A96                 db    0
.eh_frame:0000000000006A97                 db    0
.eh_frame:0000000000006A98                 db    0
.eh_frame:0000000000006A99                 db    0
.eh_frame:0000000000006A9A                 db    0
.eh_frame:0000000000006A9B                 db    0
.eh_frame:0000000000006A9C                 db  10h
.eh_frame:0000000000006A9D                 db    0
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db  40h ; @
.eh_frame:0000000000006AA1                 db    6
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db  4Ch ; L
.eh_frame:0000000000006AA5                 db 0D7h
.eh_frame:0000000000006AA6                 db 0FFh
.eh_frame:0000000000006AA7                 db 0FFh
.eh_frame:0000000000006AA8                 db  0Ah
.eh_frame:0000000000006AA9                 db    0
.eh_frame:0000000000006AAA                 db    0
.eh_frame:0000000000006AAB                 db    0
.eh_frame:0000000000006AAC                 db    0
.eh_frame:0000000000006AAD                 db    0
.eh_frame:0000000000006AAE                 db    0
.eh_frame:0000000000006AAF                 db    0
.eh_frame:0000000000006AB0                 db  18h
.eh_frame:0000000000006AB1                 db    0
.eh_frame:0000000000006AB2                 db    0
.eh_frame:0000000000006AB3                 db    0
.eh_frame:0000000000006AB4                 db  54h ; T
.eh_frame:0000000000006AB5                 db    6
.eh_frame:0000000000006AB6                 db    0
.eh_frame:0000000000006AB7                 db    0
.eh_frame:0000000000006AB8                 db  48h ; H
.eh_frame:0000000000006AB9                 db 0D7h
.eh_frame:0000000000006ABA                 db 0FFh
.eh_frame:0000000000006ABB                 db 0FFh
.eh_frame:0000000000006ABC                 db  8Eh
.eh_frame:0000000000006ABD                 db    0
.eh_frame:0000000000006ABE                 db    0
.eh_frame:0000000000006ABF                 db    0
.eh_frame:0000000000006AC0                 db    0
.eh_frame:0000000000006AC1                 db  44h ; D
.eh_frame:0000000000006AC2                 db  0Eh
.eh_frame:0000000000006AC3                 db  50h ; P
.eh_frame:0000000000006AC4                 db    2
.eh_frame:0000000000006AC5                 db  7Fh ; 
.eh_frame:0000000000006AC6                 db  0Ah
.eh_frame:0000000000006AC7                 db  0Eh
.eh_frame:0000000000006AC8                 db    8
.eh_frame:0000000000006AC9                 db  41h ; A
.eh_frame:0000000000006ACA                 db  0Bh
.eh_frame:0000000000006ACB                 db    0
.eh_frame:0000000000006ACC                 db  18h
.eh_frame:0000000000006ACD                 db    0
.eh_frame:0000000000006ACE                 db    0
.eh_frame:0000000000006ACF                 db    0
.eh_frame:0000000000006AD0                 db  70h ; p
.eh_frame:0000000000006AD1                 db    6
.eh_frame:0000000000006AD2                 db    0
.eh_frame:0000000000006AD3                 db    0
.eh_frame:0000000000006AD4                 db 0BCh
.eh_frame:0000000000006AD5                 db 0D7h
.eh_frame:0000000000006AD6                 db 0FFh
.eh_frame:0000000000006AD7                 db 0FFh
.eh_frame:0000000000006AD8                 db  91h
.eh_frame:0000000000006AD9                 db    0
.eh_frame:0000000000006ADA                 db    0
.eh_frame:0000000000006ADB                 db    0
.eh_frame:0000000000006ADC                 db    0
.eh_frame:0000000000006ADD                 db  44h ; D
.eh_frame:0000000000006ADE                 db  0Eh
.eh_frame:0000000000006ADF                 db  50h ; P
.eh_frame:0000000000006AE0                 db    2
.eh_frame:0000000000006AE1                 db  82h
.eh_frame:0000000000006AE2                 db  0Ah
.eh_frame:0000000000006AE3                 db  0Eh
.eh_frame:0000000000006AE4                 db    8
.eh_frame:0000000000006AE5                 db  41h ; A
.eh_frame:0000000000006AE6                 db  0Bh
.eh_frame:0000000000006AE7                 db    0
.eh_frame:0000000000006AE8                 db  10h
.eh_frame:0000000000006AE9                 db    0
.eh_frame:0000000000006AEA                 db    0
.eh_frame:0000000000006AEB                 db    0
.eh_frame:0000000000006AEC                 db  8Ch
.eh_frame:0000000000006AED                 db    6
.eh_frame:0000000000006AEE                 db    0
.eh_frame:0000000000006AEF                 db    0
.eh_frame:0000000000006AF0                 db  40h ; @
.eh_frame:0000000000006AF1                 db 0D8h
.eh_frame:0000000000006AF2                 db 0FFh
.eh_frame:0000000000006AF3                 db 0FFh
.eh_frame:0000000000006AF4                 db  0Ch
.eh_frame:0000000000006AF5                 db    0
.eh_frame:0000000000006AF6                 db    0
.eh_frame:0000000000006AF7                 db    0
.eh_frame:0000000000006AF8                 db    0
.eh_frame:0000000000006AF9                 db    0
.eh_frame:0000000000006AFA                 db    0
.eh_frame:0000000000006AFB                 db    0
.eh_frame:0000000000006AFC                 db  10h
.eh_frame:0000000000006AFD                 db    0
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db 0A0h
.eh_frame:0000000000006B01                 db    6
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db  3Ch ; <
.eh_frame:0000000000006B05                 db 0D8h
.eh_frame:0000000000006B06                 db 0FFh
.eh_frame:0000000000006B07                 db 0FFh
.eh_frame:0000000000006B08                 db  17h
.eh_frame:0000000000006B09                 db    0
.eh_frame:0000000000006B0A                 db    0
.eh_frame:0000000000006B0B                 db    0
.eh_frame:0000000000006B0C                 db    0
.eh_frame:0000000000006B0D                 db    0
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db  10h
.eh_frame:0000000000006B11                 db    0
.eh_frame:0000000000006B12                 db    0
.eh_frame:0000000000006B13                 db    0
.eh_frame:0000000000006B14                 db 0B4h
.eh_frame:0000000000006B15                 db    6
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db  48h ; H
.eh_frame:0000000000006B19                 db 0D8h
.eh_frame:0000000000006B1A                 db 0FFh
.eh_frame:0000000000006B1B                 db 0FFh
.eh_frame:0000000000006B1C                 db  13h
.eh_frame:0000000000006B1D                 db    0
.eh_frame:0000000000006B1E                 db    0
.eh_frame:0000000000006B1F                 db    0
.eh_frame:0000000000006B20                 db    0
.eh_frame:0000000000006B21                 db    0
.eh_frame:0000000000006B22                 db    0
.eh_frame:0000000000006B23                 db    0
.eh_frame:0000000000006B24                 db  10h
.eh_frame:0000000000006B25                 db    0
.eh_frame:0000000000006B26                 db    0
.eh_frame:0000000000006B27                 db    0
.eh_frame:0000000000006B28                 db 0C8h
.eh_frame:0000000000006B29                 db    6
.eh_frame:0000000000006B2A                 db    0
.eh_frame:0000000000006B2B                 db    0
.eh_frame:0000000000006B2C                 db  54h ; T
.eh_frame:0000000000006B2D                 db 0D8h
.eh_frame:0000000000006B2E                 db 0FFh
.eh_frame:0000000000006B2F                 db 0FFh
.eh_frame:0000000000006B30                 db  0Ch
.eh_frame:0000000000006B31                 db    0
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db    0
.eh_frame:0000000000006B35                 db    0
.eh_frame:0000000000006B36                 db    0
.eh_frame:0000000000006B37                 db    0
.eh_frame:0000000000006B38                 db  10h
.eh_frame:0000000000006B39                 db    0
.eh_frame:0000000000006B3A                 db    0
.eh_frame:0000000000006B3B                 db    0
.eh_frame:0000000000006B3C                 db 0DCh
.eh_frame:0000000000006B3D                 db    6
.eh_frame:0000000000006B3E                 db    0
.eh_frame:0000000000006B3F                 db    0
.eh_frame:0000000000006B40                 db  50h ; P
.eh_frame:0000000000006B41                 db 0D8h
.eh_frame:0000000000006B42                 db 0FFh
.eh_frame:0000000000006B43                 db 0FFh
.eh_frame:0000000000006B44                 db  14h
.eh_frame:0000000000006B45                 db    0
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db    0
.eh_frame:0000000000006B49                 db    0
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db  10h
.eh_frame:0000000000006B4D                 db    0
.eh_frame:0000000000006B4E                 db    0
.eh_frame:0000000000006B4F                 db    0
.eh_frame:0000000000006B50                 db 0F0h
.eh_frame:0000000000006B51                 db    6
.eh_frame:0000000000006B52                 db    0
.eh_frame:0000000000006B53                 db    0
.eh_frame:0000000000006B54                 db  5Ch ; \
.eh_frame:0000000000006B55                 db 0D8h
.eh_frame:0000000000006B56                 db 0FFh
.eh_frame:0000000000006B57                 db 0FFh
.eh_frame:0000000000006B58                 db  13h
.eh_frame:0000000000006B59                 db    0
.eh_frame:0000000000006B5A                 db    0
.eh_frame:0000000000006B5B                 db    0
.eh_frame:0000000000006B5C                 db    0
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db  14h
.eh_frame:0000000000006B61                 db    0
.eh_frame:0000000000006B62                 db    0
.eh_frame:0000000000006B63                 db    0
.eh_frame:0000000000006B64                 db    4
.eh_frame:0000000000006B65                 db    7
.eh_frame:0000000000006B66                 db    0
.eh_frame:0000000000006B67                 db    0
.eh_frame:0000000000006B68                 db  68h ; h
.eh_frame:0000000000006B69                 db 0D8h
.eh_frame:0000000000006B6A                 db 0FFh
.eh_frame:0000000000006B6B                 db 0FFh
.eh_frame:0000000000006B6C                 db  18h
.eh_frame:0000000000006B6D                 db    0
.eh_frame:0000000000006B6E                 db    0
.eh_frame:0000000000006B6F                 db    0
.eh_frame:0000000000006B70                 db    0
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db    0
.eh_frame:0000000000006B75                 db    0
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db  10h
.eh_frame:0000000000006B79                 db    1
.eh_frame:0000000000006B7A                 db    0
.eh_frame:0000000000006B7B                 db    0
.eh_frame:0000000000006B7C                 db  1Ch
.eh_frame:0000000000006B7D                 db    7
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db  70h ; p
.eh_frame:0000000000006B81                 db 0D8h
.eh_frame:0000000000006B82                 db 0FFh
.eh_frame:0000000000006B83                 db 0FFh
.eh_frame:0000000000006B84                 db  17h
.eh_frame:0000000000006B85                 db    4
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db    0
.eh_frame:0000000000006B89                 db  42h ; B
.eh_frame:0000000000006B8A                 db  0Eh
.eh_frame:0000000000006B8B                 db  10h
.eh_frame:0000000000006B8C                 db  8Fh
.eh_frame:0000000000006B8D                 db    2
.eh_frame:0000000000006B8E                 db  42h ; B
.eh_frame:0000000000006B8F                 db  0Eh
.eh_frame:0000000000006B90                 db  18h
.eh_frame:0000000000006B91                 db  8Eh
.eh_frame:0000000000006B92                 db    3
.eh_frame:0000000000006B93                 db  42h ; B
.eh_frame:0000000000006B94                 db  0Eh
.eh_frame:0000000000006B95                 db  20h
.eh_frame:0000000000006B96                 db  8Dh
.eh_frame:0000000000006B97                 db    4
.eh_frame:0000000000006B98                 db  42h ; B
.eh_frame:0000000000006B99                 db  0Eh
.eh_frame:0000000000006B9A                 db  28h ; (
.eh_frame:0000000000006B9B                 db  8Ch
.eh_frame:0000000000006B9C                 db    5
.eh_frame:0000000000006B9D                 db  44h ; D
.eh_frame:0000000000006B9E                 db  0Eh
.eh_frame:0000000000006B9F                 db  30h ; 0
.eh_frame:0000000000006BA0                 db  86h
.eh_frame:0000000000006BA1                 db    6
.eh_frame:0000000000006BA2                 db  41h ; A
.eh_frame:0000000000006BA3                 db  0Eh
.eh_frame:0000000000006BA4                 db  38h ; 8
.eh_frame:0000000000006BA5                 db  83h
.eh_frame:0000000000006BA6                 db    7
.eh_frame:0000000000006BA7                 db  4Ah ; J
.eh_frame:0000000000006BA8                 db  0Eh
.eh_frame:0000000000006BA9                 db  60h ; `
.eh_frame:0000000000006BAA                 db    2
.eh_frame:0000000000006BAB                 db 0DDh
.eh_frame:0000000000006BAC                 db  0Eh
.eh_frame:0000000000006BAD                 db  68h ; h
.eh_frame:0000000000006BAE                 db  57h ; W
.eh_frame:0000000000006BAF                 db  0Eh
.eh_frame:0000000000006BB0                 db  70h ; p
.eh_frame:0000000000006BB1                 db  42h ; B
.eh_frame:0000000000006BB2                 db  0Eh
.eh_frame:0000000000006BB3                 db  78h ; x
.eh_frame:0000000000006BB4                 db  42h ; B
.eh_frame:0000000000006BB5                 db  0Eh
.eh_frame:0000000000006BB6                 db  80h
.eh_frame:0000000000006BB7                 db    1
.eh_frame:0000000000006BB8                 db  42h ; B
.eh_frame:0000000000006BB9                 db  0Eh
.eh_frame:0000000000006BBA                 db  88h
.eh_frame:0000000000006BBB                 db    1
.eh_frame:0000000000006BBC                 db  42h ; B
.eh_frame:0000000000006BBD                 db  0Eh
.eh_frame:0000000000006BBE                 db  90h
.eh_frame:0000000000006BBF                 db    1
.eh_frame:0000000000006BC0                 db  53h ; S
.eh_frame:0000000000006BC1                 db  0Eh
.eh_frame:0000000000006BC2                 db  60h ; `
.eh_frame:0000000000006BC3                 db  44h ; D
.eh_frame:0000000000006BC4                 db  0Ah
.eh_frame:0000000000006BC5                 db  0Eh
.eh_frame:0000000000006BC6                 db  38h ; 8
.eh_frame:0000000000006BC7                 db  41h ; A
.eh_frame:0000000000006BC8                 db  0Eh
.eh_frame:0000000000006BC9                 db  30h ; 0
.eh_frame:0000000000006BCA                 db  41h ; A
.eh_frame:0000000000006BCB                 db  0Eh
.eh_frame:0000000000006BCC                 db  28h ; (
.eh_frame:0000000000006BCD                 db  42h ; B
.eh_frame:0000000000006BCE                 db  0Eh
.eh_frame:0000000000006BCF                 db  20h
.eh_frame:0000000000006BD0                 db  42h ; B
.eh_frame:0000000000006BD1                 db  0Eh
.eh_frame:0000000000006BD2                 db  18h
.eh_frame:0000000000006BD3                 db  42h ; B
.eh_frame:0000000000006BD4                 db  0Eh
.eh_frame:0000000000006BD5                 db  10h
.eh_frame:0000000000006BD6                 db  42h ; B
.eh_frame:0000000000006BD7                 db  0Eh
.eh_frame:0000000000006BD8                 db    8
.eh_frame:0000000000006BD9                 db  44h ; D
.eh_frame:0000000000006BDA                 db  0Bh
.eh_frame:0000000000006BDB                 db    2
.eh_frame:0000000000006BDC                 db  78h ; x
.eh_frame:0000000000006BDD                 db  0Ah
.eh_frame:0000000000006BDE                 db  0Eh
.eh_frame:0000000000006BDF                 db  68h ; h
.eh_frame:0000000000006BE0                 db  48h ; H
.eh_frame:0000000000006BE1                 db  0Bh
.eh_frame:0000000000006BE2                 db  5Ah ; Z
.eh_frame:0000000000006BE3                 db  0Ah
.eh_frame:0000000000006BE4                 db  0Eh
.eh_frame:0000000000006BE5                 db  38h ; 8
.eh_frame:0000000000006BE6                 db  47h ; G
.eh_frame:0000000000006BE7                 db  0Eh
.eh_frame:0000000000006BE8                 db  30h ; 0
.eh_frame:0000000000006BE9                 db  41h ; A
.eh_frame:0000000000006BEA                 db  0Eh
.eh_frame:0000000000006BEB                 db  28h ; (
.eh_frame:0000000000006BEC                 db  42h ; B
.eh_frame:0000000000006BED                 db  0Eh
.eh_frame:0000000000006BEE                 db  20h
.eh_frame:0000000000006BEF                 db  42h ; B
.eh_frame:0000000000006BF0                 db  0Eh
.eh_frame:0000000000006BF1                 db  18h
.eh_frame:0000000000006BF2                 db  42h ; B
.eh_frame:0000000000006BF3                 db  0Eh
.eh_frame:0000000000006BF4                 db  10h
.eh_frame:0000000000006BF5                 db  42h ; B
.eh_frame:0000000000006BF6                 db  0Eh
.eh_frame:0000000000006BF7                 db    8
.eh_frame:0000000000006BF8                 db  56h ; V
.eh_frame:0000000000006BF9                 db  0Bh
.eh_frame:0000000000006BFA                 db  5Eh ; ^
.eh_frame:0000000000006BFB                 db  0Ah
.eh_frame:0000000000006BFC                 db  0Eh
.eh_frame:0000000000006BFD                 db  38h ; 8
.eh_frame:0000000000006BFE                 db  52h ; R
.eh_frame:0000000000006BFF                 db  0Eh
.eh_frame:0000000000006C00                 db  30h ; 0
.eh_frame:0000000000006C01                 db  41h ; A
.eh_frame:0000000000006C02                 db  0Eh
.eh_frame:0000000000006C03                 db  28h ; (
.eh_frame:0000000000006C04                 db  42h ; B
.eh_frame:0000000000006C05                 db  0Eh
.eh_frame:0000000000006C06                 db  20h
.eh_frame:0000000000006C07                 db  42h ; B
.eh_frame:0000000000006C08                 db  0Eh
.eh_frame:0000000000006C09                 db  18h
.eh_frame:0000000000006C0A                 db  42h ; B
.eh_frame:0000000000006C0B                 db  0Eh
.eh_frame:0000000000006C0C                 db  10h
.eh_frame:0000000000006C0D                 db  42h ; B
.eh_frame:0000000000006C0E                 db  0Eh
.eh_frame:0000000000006C0F                 db    8
.eh_frame:0000000000006C10                 db  4Fh ; O
.eh_frame:0000000000006C11                 db  0Bh
.eh_frame:0000000000006C12                 db  62h ; b
.eh_frame:0000000000006C13                 db  0Ah
.eh_frame:0000000000006C14                 db  0Eh
.eh_frame:0000000000006C15                 db  38h ; 8
.eh_frame:0000000000006C16                 db  50h ; P
.eh_frame:0000000000006C17                 db  0Eh
.eh_frame:0000000000006C18                 db  30h ; 0
.eh_frame:0000000000006C19                 db  41h ; A
.eh_frame:0000000000006C1A                 db  0Eh
.eh_frame:0000000000006C1B                 db  28h ; (
.eh_frame:0000000000006C1C                 db  42h ; B
.eh_frame:0000000000006C1D                 db  0Eh
.eh_frame:0000000000006C1E                 db  20h
.eh_frame:0000000000006C1F                 db  42h ; B
.eh_frame:0000000000006C20                 db  0Eh
.eh_frame:0000000000006C21                 db  18h
.eh_frame:0000000000006C22                 db  42h ; B
.eh_frame:0000000000006C23                 db  0Eh
.eh_frame:0000000000006C24                 db  10h
.eh_frame:0000000000006C25                 db  42h ; B
.eh_frame:0000000000006C26                 db  0Eh
.eh_frame:0000000000006C27                 db    8
.eh_frame:0000000000006C28                 db  55h ; U
.eh_frame:0000000000006C29                 db  0Bh
.eh_frame:0000000000006C2A                 db  66h ; f
.eh_frame:0000000000006C2B                 db  0Eh
.eh_frame:0000000000006C2C                 db  68h ; h
.eh_frame:0000000000006C2D                 db  42h ; B
.eh_frame:0000000000006C2E                 db  0Eh
.eh_frame:0000000000006C2F                 db  70h ; p
.eh_frame:0000000000006C30                 db  5Ch ; \
.eh_frame:0000000000006C31                 db  0Eh
.eh_frame:0000000000006C32                 db  68h ; h
.eh_frame:0000000000006C33                 db  41h ; A
.eh_frame:0000000000006C34                 db  0Eh
.eh_frame:0000000000006C35                 db  60h ; `
.eh_frame:0000000000006C36                 db  44h ; D
.eh_frame:0000000000006C37                 db  0Ah
.eh_frame:0000000000006C38                 db  0Eh
.eh_frame:0000000000006C39                 db  38h ; 8
.eh_frame:0000000000006C3A                 db  41h ; A
.eh_frame:0000000000006C3B                 db  0Eh
.eh_frame:0000000000006C3C                 db  30h ; 0
.eh_frame:0000000000006C3D                 db  41h ; A
.eh_frame:0000000000006C3E                 db  0Eh
.eh_frame:0000000000006C3F                 db  28h ; (
.eh_frame:0000000000006C40                 db  42h ; B
.eh_frame:0000000000006C41                 db  0Eh
.eh_frame:0000000000006C42                 db  20h
.eh_frame:0000000000006C43                 db  42h ; B
.eh_frame:0000000000006C44                 db  0Eh
.eh_frame:0000000000006C45                 db  18h
.eh_frame:0000000000006C46                 db  42h ; B
.eh_frame:0000000000006C47                 db  0Eh
.eh_frame:0000000000006C48                 db  10h
.eh_frame:0000000000006C49                 db  42h ; B
.eh_frame:0000000000006C4A                 db  0Eh
.eh_frame:0000000000006C4B                 db    8
.eh_frame:0000000000006C4C                 db  45h ; E
.eh_frame:0000000000006C4D                 db  0Bh
.eh_frame:0000000000006C4E                 db  68h ; h
.eh_frame:0000000000006C4F                 db  0Ah
.eh_frame:0000000000006C50                 db  0Eh
.eh_frame:0000000000006C51                 db  68h ; h
.eh_frame:0000000000006C52                 db  48h ; H
.eh_frame:0000000000006C53                 db  0Bh
.eh_frame:0000000000006C54                 db  72h ; r
.eh_frame:0000000000006C55                 db  0Eh
.eh_frame:0000000000006C56                 db  68h ; h
.eh_frame:0000000000006C57                 db  45h ; E
.eh_frame:0000000000006C58                 db  0Eh
.eh_frame:0000000000006C59                 db  70h ; p
.eh_frame:0000000000006C5A                 db  42h ; B
.eh_frame:0000000000006C5B                 db  0Eh
.eh_frame:0000000000006C5C                 db  78h ; x
.eh_frame:0000000000006C5D                 db  42h ; B
.eh_frame:0000000000006C5E                 db  0Eh
.eh_frame:0000000000006C5F                 db  80h
.eh_frame:0000000000006C60                 db    1
.eh_frame:0000000000006C61                 db  5Eh ; ^
.eh_frame:0000000000006C62                 db  0Eh
.eh_frame:0000000000006C63                 db  60h ; `
.eh_frame:0000000000006C64                 db  44h ; D
.eh_frame:0000000000006C65                 db  0Ah
.eh_frame:0000000000006C66                 db  0Eh
.eh_frame:0000000000006C67                 db  38h ; 8
.eh_frame:0000000000006C68                 db  41h ; A
.eh_frame:0000000000006C69                 db  0Eh
.eh_frame:0000000000006C6A                 db  30h ; 0
.eh_frame:0000000000006C6B                 db  41h ; A
.eh_frame:0000000000006C6C                 db  0Eh
.eh_frame:0000000000006C6D                 db  28h ; (
.eh_frame:0000000000006C6E                 db  42h ; B
.eh_frame:0000000000006C6F                 db  0Eh
.eh_frame:0000000000006C70                 db  20h
.eh_frame:0000000000006C71                 db  42h ; B
.eh_frame:0000000000006C72                 db  0Eh
.eh_frame:0000000000006C73                 db  18h
.eh_frame:0000000000006C74                 db  42h ; B
.eh_frame:0000000000006C75                 db  0Eh
.eh_frame:0000000000006C76                 db  10h
.eh_frame:0000000000006C77                 db  42h ; B
.eh_frame:0000000000006C78                 db  0Eh
.eh_frame:0000000000006C79                 db    8
.eh_frame:0000000000006C7A                 db  41h ; A
.eh_frame:0000000000006C7B                 db  0Bh
.eh_frame:0000000000006C7C                 db  79h ; y
.eh_frame:0000000000006C7D                 db  0Ah
.eh_frame:0000000000006C7E                 db  0Eh
.eh_frame:0000000000006C7F                 db  68h ; h
.eh_frame:0000000000006C80                 db  42h ; B
.eh_frame:0000000000006C81                 db  0Eh
.eh_frame:0000000000006C82                 db  70h ; p
.eh_frame:0000000000006C83                 db  42h ; B
.eh_frame:0000000000006C84                 db  0Eh
.eh_frame:0000000000006C85                 db  78h ; x
.eh_frame:0000000000006C86                 db  42h ; B
.eh_frame:0000000000006C87                 db  0Eh
.eh_frame:0000000000006C88                 db  80h
.eh_frame:0000000000006C89                 db    1
.eh_frame:0000000000006C8A                 db  51h ; Q
.eh_frame:0000000000006C8B                 db  0Bh
.eh_frame:0000000000006C8C                 db  10h
.eh_frame:0000000000006C8D                 db    0
.eh_frame:0000000000006C8E                 db    0
.eh_frame:0000000000006C8F                 db    0
.eh_frame:0000000000006C90                 db  30h ; 0
.eh_frame:0000000000006C91                 db    8
.eh_frame:0000000000006C92                 db    0
.eh_frame:0000000000006C93                 db    0
.eh_frame:0000000000006C94                 db  7Ch ; |
.eh_frame:0000000000006C95                 db 0DBh
.eh_frame:0000000000006C96                 db 0FFh
.eh_frame:0000000000006C97                 db 0FFh
.eh_frame:0000000000006C98                 db  20h
.eh_frame:0000000000006C99                 db    0
.eh_frame:0000000000006C9A                 db    0
.eh_frame:0000000000006C9B                 db    0
.eh_frame:0000000000006C9C                 db    0
.eh_frame:0000000000006C9D                 db    0
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db  18h
.eh_frame:0000000000006CA1                 db    0
.eh_frame:0000000000006CA2                 db    0
.eh_frame:0000000000006CA3                 db    0
.eh_frame:0000000000006CA4                 db  44h ; D
.eh_frame:0000000000006CA5                 db    8
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db  88h
.eh_frame:0000000000006CA9                 db 0DBh
.eh_frame:0000000000006CAA                 db 0FFh
.eh_frame:0000000000006CAB                 db 0FFh
.eh_frame:0000000000006CAC                 db  78h ; x
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db    0
.eh_frame:0000000000006CB1                 db  44h ; D
.eh_frame:0000000000006CB2                 db  0Eh
.eh_frame:0000000000006CB3                 db  70h ; p
.eh_frame:0000000000006CB4                 db    2
.eh_frame:0000000000006CB5                 db  60h ; `
.eh_frame:0000000000006CB6                 db  0Ah
.eh_frame:0000000000006CB7                 db  0Eh
.eh_frame:0000000000006CB8                 db    8
.eh_frame:0000000000006CB9                 db  41h ; A
.eh_frame:0000000000006CBA                 db  0Bh
.eh_frame:0000000000006CBB                 db    0
.eh_frame:0000000000006CBC                 db  28h ; (
.eh_frame:0000000000006CBD                 db    0
.eh_frame:0000000000006CBE                 db    0
.eh_frame:0000000000006CBF                 db    0
.eh_frame:0000000000006CC0                 db  60h ; `
.eh_frame:0000000000006CC1                 db    8
.eh_frame:0000000000006CC2                 db    0
.eh_frame:0000000000006CC3                 db    0
.eh_frame:0000000000006CC4                 db 0ECh
.eh_frame:0000000000006CC5                 db 0DBh
.eh_frame:0000000000006CC6                 db 0FFh
.eh_frame:0000000000006CC7                 db 0FFh
.eh_frame:0000000000006CC8                 db 0D5h
.eh_frame:0000000000006CC9                 db    0
.eh_frame:0000000000006CCA                 db    0
.eh_frame:0000000000006CCB                 db    0
.eh_frame:0000000000006CCC                 db    0
.eh_frame:0000000000006CCD                 db  41h ; A
.eh_frame:0000000000006CCE                 db  0Eh
.eh_frame:0000000000006CCF                 db  10h
.eh_frame:0000000000006CD0                 db  86h
.eh_frame:0000000000006CD1                 db    2
.eh_frame:0000000000006CD2                 db  41h ; A
.eh_frame:0000000000006CD3                 db  0Eh
.eh_frame:0000000000006CD4                 db  18h
.eh_frame:0000000000006CD5                 db  83h
.eh_frame:0000000000006CD6                 db    3
.eh_frame:0000000000006CD7                 db  50h ; P
.eh_frame:0000000000006CD8                 db  0Eh
.eh_frame:0000000000006CD9                 db 0D0h
.eh_frame:0000000000006CDA                 db    1
.eh_frame:0000000000006CDB                 db    2
.eh_frame:0000000000006CDC                 db 0ABh
.eh_frame:0000000000006CDD                 db  0Ah
.eh_frame:0000000000006CDE                 db  0Eh
.eh_frame:0000000000006CDF                 db  18h
.eh_frame:0000000000006CE0                 db  41h ; A
.eh_frame:0000000000006CE1                 db  0Eh
.eh_frame:0000000000006CE2                 db  10h
.eh_frame:0000000000006CE3                 db  41h ; A
.eh_frame:0000000000006CE4                 db  0Eh
.eh_frame:0000000000006CE5                 db    8
.eh_frame:0000000000006CE6                 db  41h ; A
.eh_frame:0000000000006CE7                 db  0Bh
.eh_frame:0000000000006CE8                 db  1Ch
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db  8Ch
.eh_frame:0000000000006CED                 db    8
.eh_frame:0000000000006CEE                 db    0
.eh_frame:0000000000006CEF                 db    0
.eh_frame:0000000000006CF0                 db 0A0h
.eh_frame:0000000000006CF1                 db 0DCh
.eh_frame:0000000000006CF2                 db 0FFh
.eh_frame:0000000000006CF3                 db 0FFh
.eh_frame:0000000000006CF4                 db  80h
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db    0
.eh_frame:0000000000006CF9                 db  41h ; A
.eh_frame:0000000000006CFA                 db  0Eh
.eh_frame:0000000000006CFB                 db  10h
.eh_frame:0000000000006CFC                 db  83h
.eh_frame:0000000000006CFD                 db    2
.eh_frame:0000000000006CFE                 db    2
.eh_frame:0000000000006CFF                 db  7Ah ; z
.eh_frame:0000000000006D00                 db  0Eh
.eh_frame:0000000000006D01                 db    8
.eh_frame:0000000000006D02                 db    0
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db    0
.eh_frame:0000000000006D05                 db    0
.eh_frame:0000000000006D06                 db    0
.eh_frame:0000000000006D07                 db    0
.eh_frame:0000000000006D08                 db  18h
.eh_frame:0000000000006D09                 db    0
.eh_frame:0000000000006D0A                 db    0
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db 0ACh
.eh_frame:0000000000006D0D                 db    8
.eh_frame:0000000000006D0E                 db    0
.eh_frame:0000000000006D0F                 db    0
.eh_frame:0000000000006D10                 db    0
.eh_frame:0000000000006D11                 db 0DDh
.eh_frame:0000000000006D12                 db 0FFh
.eh_frame:0000000000006D13                 db 0FFh
.eh_frame:0000000000006D14                 db  1Ah
.eh_frame:0000000000006D15                 db    0
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D18                 db    0
.eh_frame:0000000000006D19                 db  41h ; A
.eh_frame:0000000000006D1A                 db  0Eh
.eh_frame:0000000000006D1B                 db  10h
.eh_frame:0000000000006D1C                 db  83h
.eh_frame:0000000000006D1D                 db    2
.eh_frame:0000000000006D1E                 db  53h ; S
.eh_frame:0000000000006D1F                 db  0Ah
.eh_frame:0000000000006D20                 db  0Eh
.eh_frame:0000000000006D21                 db    8
.eh_frame:0000000000006D22                 db  41h ; A
.eh_frame:0000000000006D23                 db  0Bh
.eh_frame:0000000000006D24                 db  10h
.eh_frame:0000000000006D25                 db    0
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db 0C8h
.eh_frame:0000000000006D29                 db    8
.eh_frame:0000000000006D2A                 db    0
.eh_frame:0000000000006D2B                 db    0
.eh_frame:0000000000006D2C                 db    4
.eh_frame:0000000000006D2D                 db 0DDh
.eh_frame:0000000000006D2E                 db 0FFh
.eh_frame:0000000000006D2F                 db 0FFh
.eh_frame:0000000000006D30                 db  24h ; $
.eh_frame:0000000000006D31                 db    0
.eh_frame:0000000000006D32                 db    0
.eh_frame:0000000000006D33                 db    0
.eh_frame:0000000000006D34                 db    0
.eh_frame:0000000000006D35                 db  5Fh ; _
.eh_frame:0000000000006D36                 db  0Eh
.eh_frame:0000000000006D37                 db  10h
.eh_frame:0000000000006D38                 db  10h
.eh_frame:0000000000006D39                 db    0
.eh_frame:0000000000006D3A                 db    0
.eh_frame:0000000000006D3B                 db    0
.eh_frame:0000000000006D3C                 db 0DCh
.eh_frame:0000000000006D3D                 db    8
.eh_frame:0000000000006D3E                 db    0
.eh_frame:0000000000006D3F                 db    0
.eh_frame:0000000000006D40                 db  20h
.eh_frame:0000000000006D41                 db 0DDh
.eh_frame:0000000000006D42                 db 0FFh
.eh_frame:0000000000006D43                 db 0FFh
.eh_frame:0000000000006D44                 db    2
.eh_frame:0000000000006D45                 db    0
.eh_frame:0000000000006D46                 db    0
.eh_frame:0000000000006D47                 db    0
.eh_frame:0000000000006D48                 db    0
.eh_frame:0000000000006D49                 db    0
.eh_frame:0000000000006D4A                 db    0
.eh_frame:0000000000006D4B                 db    0
.eh_frame:0000000000006D4C                 db  20h
.eh_frame:0000000000006D4D                 db    0
.eh_frame:0000000000006D4E                 db    0
.eh_frame:0000000000006D4F                 db    0
.eh_frame:0000000000006D50                 db 0F0h
.eh_frame:0000000000006D51                 db    8
.eh_frame:0000000000006D52                 db    0
.eh_frame:0000000000006D53                 db    0
.eh_frame:0000000000006D54                 db  1Ch
.eh_frame:0000000000006D55                 db 0DDh
.eh_frame:0000000000006D56                 db 0FFh
.eh_frame:0000000000006D57                 db 0FFh
.eh_frame:0000000000006D58                 db  36h ; 6
.eh_frame:0000000000006D59                 db    0
.eh_frame:0000000000006D5A                 db    0
.eh_frame:0000000000006D5B                 db    0
.eh_frame:0000000000006D5C                 db    0
.eh_frame:0000000000006D5D                 db  44h ; D
.eh_frame:0000000000006D5E                 db  0Eh
.eh_frame:0000000000006D5F                 db  10h
.eh_frame:0000000000006D60                 db  83h
.eh_frame:0000000000006D61                 db    2
.eh_frame:0000000000006D62                 db  5Dh ; ]
.eh_frame:0000000000006D63                 db  0Ah
.eh_frame:0000000000006D64                 db  0Eh
.eh_frame:0000000000006D65                 db    8
.eh_frame:0000000000006D66                 db  47h ; G
.eh_frame:0000000000006D67                 db  0Bh
.eh_frame:0000000000006D68                 db  48h ; H
.eh_frame:0000000000006D69                 db  0Ah
.eh_frame:0000000000006D6A                 db  0Eh
.eh_frame:0000000000006D6B                 db    8
.eh_frame:0000000000006D6C                 db  41h ; A
.eh_frame:0000000000006D6D                 db  0Bh
.eh_frame:0000000000006D6E                 db    0
.eh_frame:0000000000006D6F                 db    0
.eh_frame:0000000000006D70                 db  10h
.eh_frame:0000000000006D71                 db    0
.eh_frame:0000000000006D72                 db    0
.eh_frame:0000000000006D73                 db    0
.eh_frame:0000000000006D74                 db  14h
.eh_frame:0000000000006D75                 db    9
.eh_frame:0000000000006D76                 db    0
.eh_frame:0000000000006D77                 db    0
.eh_frame:0000000000006D78                 db  38h ; 8
.eh_frame:0000000000006D79                 db 0DDh
.eh_frame:0000000000006D7A                 db 0FFh
.eh_frame:0000000000006D7B                 db 0FFh
.eh_frame:0000000000006D7C                 db  24h ; $
.eh_frame:0000000000006D7D                 db    0
.eh_frame:0000000000006D7E                 db    0
.eh_frame:0000000000006D7F                 db    0
.eh_frame:0000000000006D80                 db    0
.eh_frame:0000000000006D81                 db  5Fh ; _
.eh_frame:0000000000006D82                 db  0Eh
.eh_frame:0000000000006D83                 db  10h
.eh_frame:0000000000006D84                 db  14h
.eh_frame:0000000000006D85                 db    0
.eh_frame:0000000000006D86                 db    0
.eh_frame:0000000000006D87                 db    0
.eh_frame:0000000000006D88                 db  28h ; (
.eh_frame:0000000000006D89                 db    9
.eh_frame:0000000000006D8A                 db    0
.eh_frame:0000000000006D8B                 db    0
.eh_frame:0000000000006D8C                 db  54h ; T
.eh_frame:0000000000006D8D                 db 0DDh
.eh_frame:0000000000006D8E                 db 0FFh
.eh_frame:0000000000006D8F                 db 0FFh
.eh_frame:0000000000006D90                 db  82h
.eh_frame:0000000000006D91                 db    0
.eh_frame:0000000000006D92                 db    0
.eh_frame:0000000000006D93                 db    0
.eh_frame:0000000000006D94                 db    0
.eh_frame:0000000000006D95                 db    2
.eh_frame:0000000000006D96                 db  5Fh ; _
.eh_frame:0000000000006D97                 db  0Eh
.eh_frame:0000000000006D98                 db  10h
.eh_frame:0000000000006D99                 db  49h ; I
.eh_frame:0000000000006D9A                 db  0Eh
.eh_frame:0000000000006D9B                 db    8
.eh_frame:0000000000006D9C                 db  14h
.eh_frame:0000000000006D9D                 db    0
.eh_frame:0000000000006D9E                 db    0
.eh_frame:0000000000006D9F                 db    0
.eh_frame:0000000000006DA0                 db  40h ; @
.eh_frame:0000000000006DA1                 db    9
.eh_frame:0000000000006DA2                 db    0
.eh_frame:0000000000006DA3                 db    0
.eh_frame:0000000000006DA4                 db 0CCh
.eh_frame:0000000000006DA5                 db 0DDh
.eh_frame:0000000000006DA6                 db 0FFh
.eh_frame:0000000000006DA7                 db 0FFh
.eh_frame:0000000000006DA8                 db  4Ah ; J
.eh_frame:0000000000006DA9                 db    0
.eh_frame:0000000000006DAA                 db    0
.eh_frame:0000000000006DAB                 db    0
.eh_frame:0000000000006DAC                 db    0
.eh_frame:0000000000006DAD                 db    2
.eh_frame:0000000000006DAE                 db  45h ; E
.eh_frame:0000000000006DAF                 db  0Eh
.eh_frame:0000000000006DB0                 db  10h
.eh_frame:0000000000006DB1                 db    0
.eh_frame:0000000000006DB2                 db    0
.eh_frame:0000000000006DB3                 db    0
.eh_frame:0000000000006DB4                 db  18h
.eh_frame:0000000000006DB5                 db    0
.eh_frame:0000000000006DB6                 db    0
.eh_frame:0000000000006DB7                 db    0
.eh_frame:0000000000006DB8                 db  58h ; X
.eh_frame:0000000000006DB9                 db    9
.eh_frame:0000000000006DBA                 db    0
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db    4
.eh_frame:0000000000006DBD                 db 0DEh
.eh_frame:0000000000006DBE                 db 0FFh
.eh_frame:0000000000006DBF                 db 0FFh
.eh_frame:0000000000006DC0                 db  17h
.eh_frame:0000000000006DC1                 db    0
.eh_frame:0000000000006DC2                 db    0
.eh_frame:0000000000006DC3                 db    0
.eh_frame:0000000000006DC4                 db    0
.eh_frame:0000000000006DC5                 db  41h ; A
.eh_frame:0000000000006DC6                 db  0Eh
.eh_frame:0000000000006DC7                 db  10h
.eh_frame:0000000000006DC8                 db  83h
.eh_frame:0000000000006DC9                 db    2
.eh_frame:0000000000006DCA                 db  51h ; Q
.eh_frame:0000000000006DCB                 db  0Eh
.eh_frame:0000000000006DCC                 db    8
.eh_frame:0000000000006DCD                 db    0
.eh_frame:0000000000006DCE                 db    0
.eh_frame:0000000000006DCF                 db    0
.eh_frame:0000000000006DD0                 db  18h
.eh_frame:0000000000006DD1                 db    0
.eh_frame:0000000000006DD2                 db    0
.eh_frame:0000000000006DD3                 db    0
.eh_frame:0000000000006DD4                 db  74h ; t
.eh_frame:0000000000006DD5                 db    9
.eh_frame:0000000000006DD6                 db    0
.eh_frame:0000000000006DD7                 db    0
.eh_frame:0000000000006DD8                 db    8
.eh_frame:0000000000006DD9                 db 0DEh
.eh_frame:0000000000006DDA                 db 0FFh
.eh_frame:0000000000006DDB                 db 0FFh
.eh_frame:0000000000006DDC                 db  2Eh ; .
.eh_frame:0000000000006DDD                 db    0
.eh_frame:0000000000006DDE                 db    0
.eh_frame:0000000000006DDF                 db    0
.eh_frame:0000000000006DE0                 db    0
.eh_frame:0000000000006DE1                 db  47h ; G
.eh_frame:0000000000006DE2                 db  0Eh
.eh_frame:0000000000006DE3                 db  10h
.eh_frame:0000000000006DE4                 db  61h ; a
.eh_frame:0000000000006DE5                 db  0Ah
.eh_frame:0000000000006DE6                 db  0Eh
.eh_frame:0000000000006DE7                 db    8
.eh_frame:0000000000006DE8                 db  41h ; A
.eh_frame:0000000000006DE9                 db  0Bh
.eh_frame:0000000000006DEA                 db    0
.eh_frame:0000000000006DEB                 db    0
.eh_frame:0000000000006DEC                 db  24h ; $
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db  90h
.eh_frame:0000000000006DF1                 db    9
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db  1Ch
.eh_frame:0000000000006DF5                 db 0DEh
.eh_frame:0000000000006DF6                 db 0FFh
.eh_frame:0000000000006DF7                 db 0FFh
.eh_frame:0000000000006DF8                 db  28h ; (
.eh_frame:0000000000006DF9                 db    0
.eh_frame:0000000000006DFA                 db    0
.eh_frame:0000000000006DFB                 db    0
.eh_frame:0000000000006DFC                 db    0
.eh_frame:0000000000006DFD                 db  41h ; A
.eh_frame:0000000000006DFE                 db  0Eh
.eh_frame:0000000000006DFF                 db  10h
.eh_frame:0000000000006E00                 db  86h
.eh_frame:0000000000006E01                 db    2
.eh_frame:0000000000006E02                 db  41h ; A
.eh_frame:0000000000006E03                 db  0Eh
.eh_frame:0000000000006E04                 db  18h
.eh_frame:0000000000006E05                 db  83h
.eh_frame:0000000000006E06                 db    3
.eh_frame:0000000000006E07                 db  4Dh ; M
.eh_frame:0000000000006E08                 db  0Eh
.eh_frame:0000000000006E09                 db  20h
.eh_frame:0000000000006E0A                 db  49h ; I
.eh_frame:0000000000006E0B                 db  0Eh
.eh_frame:0000000000006E0C                 db  18h
.eh_frame:0000000000006E0D                 db  47h ; G
.eh_frame:0000000000006E0E                 db  0Eh
.eh_frame:0000000000006E0F                 db  10h
.eh_frame:0000000000006E10                 db  41h ; A
.eh_frame:0000000000006E11                 db  0Eh
.eh_frame:0000000000006E12                 db    8
.eh_frame:0000000000006E13                 db    0
.eh_frame:0000000000006E14                 db  18h
.eh_frame:0000000000006E15                 db    0
.eh_frame:0000000000006E16                 db    0
.eh_frame:0000000000006E17                 db    0
.eh_frame:0000000000006E18                 db 0B8h
.eh_frame:0000000000006E19                 db    9
.eh_frame:0000000000006E1A                 db    0
.eh_frame:0000000000006E1B                 db    0
.eh_frame:0000000000006E1C                 db  24h ; $
.eh_frame:0000000000006E1D                 db 0DEh
.eh_frame:0000000000006E1E                 db 0FFh
.eh_frame:0000000000006E1F                 db 0FFh
.eh_frame:0000000000006E20                 db  13h
.eh_frame:0000000000006E21                 db    0
.eh_frame:0000000000006E22                 db    0
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db    0
.eh_frame:0000000000006E25                 db  41h ; A
.eh_frame:0000000000006E26                 db  0Eh
.eh_frame:0000000000006E27                 db  10h
.eh_frame:0000000000006E28                 db  83h
.eh_frame:0000000000006E29                 db    2
.eh_frame:0000000000006E2A                 db  50h ; P
.eh_frame:0000000000006E2B                 db  0Eh
.eh_frame:0000000000006E2C                 db    8
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db  14h
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db 0D4h
.eh_frame:0000000000006E35                 db    9
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db  28h ; (
.eh_frame:0000000000006E39                 db 0DEh
.eh_frame:0000000000006E3A                 db 0FFh
.eh_frame:0000000000006E3B                 db 0FFh
.eh_frame:0000000000006E3C                 db  35h ; 5
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db    0
.eh_frame:0000000000006E41                 db  4Bh ; K
.eh_frame:0000000000006E42                 db  0Eh
.eh_frame:0000000000006E43                 db  10h
.eh_frame:0000000000006E44                 db    0
.eh_frame:0000000000006E45                 db    0
.eh_frame:0000000000006E46                 db    0
.eh_frame:0000000000006E47                 db    0
.eh_frame:0000000000006E48                 db  34h ; 4
.eh_frame:0000000000006E49                 db    0
.eh_frame:0000000000006E4A                 db    0
.eh_frame:0000000000006E4B                 db    0
.eh_frame:0000000000006E4C                 db 0ECh
.eh_frame:0000000000006E4D                 db    9
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db  50h ; P
.eh_frame:0000000000006E51                 db 0DEh
.eh_frame:0000000000006E52                 db 0FFh
.eh_frame:0000000000006E53                 db 0FFh
.eh_frame:0000000000006E54                 db  7Eh ; ~
.eh_frame:0000000000006E55                 db    2
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db    0
.eh_frame:0000000000006E59                 db  42h ; B
.eh_frame:0000000000006E5A                 db  0Eh
.eh_frame:0000000000006E5B                 db  10h
.eh_frame:0000000000006E5C                 db  8Ch
.eh_frame:0000000000006E5D                 db    2
.eh_frame:0000000000006E5E                 db  41h ; A
.eh_frame:0000000000006E5F                 db  0Eh
.eh_frame:0000000000006E60                 db  18h
.eh_frame:0000000000006E61                 db  86h
.eh_frame:0000000000006E62                 db    3
.eh_frame:0000000000006E63                 db  43h ; C
.eh_frame:0000000000006E64                 db  0Eh
.eh_frame:0000000000006E65                 db  20h
.eh_frame:0000000000006E66                 db  83h
.eh_frame:0000000000006E67                 db    4
.eh_frame:0000000000006E68                 db  44h ; D
.eh_frame:0000000000006E69                 db  0Eh
.eh_frame:0000000000006E6A                 db  70h ; p
.eh_frame:0000000000006E6B                 db    2
.eh_frame:0000000000006E6C                 db 0F0h
.eh_frame:0000000000006E6D                 db  0Ah
.eh_frame:0000000000006E6E                 db  0Eh
.eh_frame:0000000000006E6F                 db  20h
.eh_frame:0000000000006E70                 db  41h ; A
.eh_frame:0000000000006E71                 db  0Eh
.eh_frame:0000000000006E72                 db  18h
.eh_frame:0000000000006E73                 db  41h ; A
.eh_frame:0000000000006E74                 db  0Eh
.eh_frame:0000000000006E75                 db  10h
.eh_frame:0000000000006E76                 db  42h ; B
.eh_frame:0000000000006E77                 db  0Eh
.eh_frame:0000000000006E78                 db    8
.eh_frame:0000000000006E79                 db  42h ; B
.eh_frame:0000000000006E7A                 db  0Bh
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db    0
.eh_frame:0000000000006E7D                 db    0
.eh_frame:0000000000006E7E                 db    0
.eh_frame:0000000000006E7F                 db    0
.eh_frame:0000000000006E80                 db  3Ch ; <
.eh_frame:0000000000006E81                 db    0
.eh_frame:0000000000006E82                 db    0
.eh_frame:0000000000006E83                 db    0
.eh_frame:0000000000006E84                 db  24h ; $
.eh_frame:0000000000006E85                 db  0Ah
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db  98h
.eh_frame:0000000000006E89                 db 0E0h
.eh_frame:0000000000006E8A                 db 0FFh
.eh_frame:0000000000006E8B                 db 0FFh
.eh_frame:0000000000006E8C                 db  83h
.eh_frame:0000000000006E8D                 db    0
.eh_frame:0000000000006E8E                 db    0
.eh_frame:0000000000006E8F                 db    0
.eh_frame:0000000000006E90                 db    0
.eh_frame:0000000000006E91                 db  42h ; B
.eh_frame:0000000000006E92                 db  0Eh
.eh_frame:0000000000006E93                 db  10h
.eh_frame:0000000000006E94                 db  8Dh
.eh_frame:0000000000006E95                 db    2
.eh_frame:0000000000006E96                 db  42h ; B
.eh_frame:0000000000006E97                 db  0Eh
.eh_frame:0000000000006E98                 db  18h
.eh_frame:0000000000006E99                 db  8Ch
.eh_frame:0000000000006E9A                 db    3
.eh_frame:0000000000006E9B                 db  44h ; D
.eh_frame:0000000000006E9C                 db  0Eh
.eh_frame:0000000000006E9D                 db  20h
.eh_frame:0000000000006E9E                 db  86h
.eh_frame:0000000000006E9F                 db    4
.eh_frame:0000000000006EA0                 db  41h ; A
.eh_frame:0000000000006EA1                 db  0Eh
.eh_frame:0000000000006EA2                 db  28h ; (
.eh_frame:0000000000006EA3                 db  83h
.eh_frame:0000000000006EA4                 db    5
.eh_frame:0000000000006EA5                 db  4Ah ; J
.eh_frame:0000000000006EA6                 db  0Eh
.eh_frame:0000000000006EA7                 db  40h ; @
.eh_frame:0000000000006EA8                 db    2
.eh_frame:0000000000006EA9                 db  64h ; d
.eh_frame:0000000000006EAA                 db  0Ah
.eh_frame:0000000000006EAB                 db  0Eh
.eh_frame:0000000000006EAC                 db  28h ; (
.eh_frame:0000000000006EAD                 db  41h ; A
.eh_frame:0000000000006EAE                 db  0Eh
.eh_frame:0000000000006EAF                 db  20h
.eh_frame:0000000000006EB0                 db  41h ; A
.eh_frame:0000000000006EB1                 db  0Eh
.eh_frame:0000000000006EB2                 db  18h
.eh_frame:0000000000006EB3                 db  42h ; B
.eh_frame:0000000000006EB4                 db  0Eh
.eh_frame:0000000000006EB5                 db  10h
.eh_frame:0000000000006EB6                 db  42h ; B
.eh_frame:0000000000006EB7                 db  0Eh
.eh_frame:0000000000006EB8                 db    8
.eh_frame:0000000000006EB9                 db  41h ; A
.eh_frame:0000000000006EBA                 db  0Bh
.eh_frame:0000000000006EBB                 db    0
.eh_frame:0000000000006EBC                 db    0
.eh_frame:0000000000006EBD                 db    0
.eh_frame:0000000000006EBE                 db    0
.eh_frame:0000000000006EBF                 db    0
.eh_frame:0000000000006EC0                 db  4Ch ; L
.eh_frame:0000000000006EC1                 db    0
.eh_frame:0000000000006EC2                 db    0
.eh_frame:0000000000006EC3                 db    0
.eh_frame:0000000000006EC4                 db  64h ; d
.eh_frame:0000000000006EC5                 db  0Ah
.eh_frame:0000000000006EC6                 db    0
.eh_frame:0000000000006EC7                 db    0
.eh_frame:0000000000006EC8                 db 0E8h
.eh_frame:0000000000006EC9                 db 0E0h
.eh_frame:0000000000006ECA                 db 0FFh
.eh_frame:0000000000006ECB                 db 0FFh
.eh_frame:0000000000006ECC                 db  7Dh ; }
.eh_frame:0000000000006ECD                 db    0
.eh_frame:0000000000006ECE                 db    0
.eh_frame:0000000000006ECF                 db    0
.eh_frame:0000000000006ED0                 db    0
.eh_frame:0000000000006ED1                 db  42h ; B
.eh_frame:0000000000006ED2                 db  0Eh
.eh_frame:0000000000006ED3                 db  10h
.eh_frame:0000000000006ED4                 db  8Ch
.eh_frame:0000000000006ED5                 db    2
.eh_frame:0000000000006ED6                 db  41h ; A
.eh_frame:0000000000006ED7                 db  0Eh
.eh_frame:0000000000006ED8                 db  18h
.eh_frame:0000000000006ED9                 db  86h
.eh_frame:0000000000006EDA                 db    3
.eh_frame:0000000000006EDB                 db  44h ; D
.eh_frame:0000000000006EDC                 db  0Eh
.eh_frame:0000000000006EDD                 db  20h
.eh_frame:0000000000006EDE                 db  83h
.eh_frame:0000000000006EDF                 db    4
.eh_frame:0000000000006EE0                 db  69h ; i
.eh_frame:0000000000006EE1                 db  0Ah
.eh_frame:0000000000006EE2                 db  0Eh
.eh_frame:0000000000006EE3                 db  18h
.eh_frame:0000000000006EE4                 db  41h ; A
.eh_frame:0000000000006EE5                 db  0Eh
.eh_frame:0000000000006EE6                 db  10h
.eh_frame:0000000000006EE7                 db  42h ; B
.eh_frame:0000000000006EE8                 db  0Eh
.eh_frame:0000000000006EE9                 db    8
.eh_frame:0000000000006EEA                 db  45h ; E
.eh_frame:0000000000006EEB                 db  0Bh
.eh_frame:0000000000006EEC                 db  55h ; U
.eh_frame:0000000000006EED                 db  0Ah
.eh_frame:0000000000006EEE                 db  0Eh
.eh_frame:0000000000006EEF                 db  18h
.eh_frame:0000000000006EF0                 db  41h ; A
.eh_frame:0000000000006EF1                 db  0Eh
.eh_frame:0000000000006EF2                 db  10h
.eh_frame:0000000000006EF3                 db  42h ; B
.eh_frame:0000000000006EF4                 db  0Eh
.eh_frame:0000000000006EF5                 db    8
.eh_frame:0000000000006EF6                 db  48h ; H
.eh_frame:0000000000006EF7                 db  0Bh
.eh_frame:0000000000006EF8                 db  41h ; A
.eh_frame:0000000000006EF9                 db  0Ah
.eh_frame:0000000000006EFA                 db  0Eh
.eh_frame:0000000000006EFB                 db  18h
.eh_frame:0000000000006EFC                 db  46h ; F
.eh_frame:0000000000006EFD                 db  0Eh
.eh_frame:0000000000006EFE                 db  10h
.eh_frame:0000000000006EFF                 db  42h ; B
.eh_frame:0000000000006F00                 db  0Eh
.eh_frame:0000000000006F01                 db    8
.eh_frame:0000000000006F02                 db  47h ; G
.eh_frame:0000000000006F03                 db  0Bh
.eh_frame:0000000000006F04                 db  49h ; I
.eh_frame:0000000000006F05                 db  0Eh
.eh_frame:0000000000006F06                 db  18h
.eh_frame:0000000000006F07                 db  41h ; A
.eh_frame:0000000000006F08                 db  0Eh
.eh_frame:0000000000006F09                 db  10h
.eh_frame:0000000000006F0A                 db  42h ; B
.eh_frame:0000000000006F0B                 db  0Eh
.eh_frame:0000000000006F0C                 db    8
.eh_frame:0000000000006F0D                 db    0
.eh_frame:0000000000006F0E                 db    0
.eh_frame:0000000000006F0F                 db    0
.eh_frame:0000000000006F10                 db  10h
.eh_frame:0000000000006F11                 db    0
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db 0B4h
.eh_frame:0000000000006F15                 db  0Ah
.eh_frame:0000000000006F16                 db    0
.eh_frame:0000000000006F17                 db    0
.eh_frame:0000000000006F18                 db  18h
.eh_frame:0000000000006F19                 db 0E1h
.eh_frame:0000000000006F1A                 db 0FFh
.eh_frame:0000000000006F1B                 db 0FFh
.eh_frame:0000000000006F1C                 db  5Ch ; \
.eh_frame:0000000000006F1D                 db    0
.eh_frame:0000000000006F1E                 db    0
.eh_frame:0000000000006F1F                 db    0
.eh_frame:0000000000006F20                 db    0
.eh_frame:0000000000006F21                 db    0
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db  28h ; (
.eh_frame:0000000000006F25                 db    0
.eh_frame:0000000000006F26                 db    0
.eh_frame:0000000000006F27                 db    0
.eh_frame:0000000000006F28                 db 0C8h
.eh_frame:0000000000006F29                 db  0Ah
.eh_frame:0000000000006F2A                 db    0
.eh_frame:0000000000006F2B                 db    0
.eh_frame:0000000000006F2C                 db  64h ; d
.eh_frame:0000000000006F2D                 db 0E1h
.eh_frame:0000000000006F2E                 db 0FFh
.eh_frame:0000000000006F2F                 db 0FFh
.eh_frame:0000000000006F30                 db  47h ; G
.eh_frame:0000000000006F31                 db    0
.eh_frame:0000000000006F32                 db    0
.eh_frame:0000000000006F33                 db    0
.eh_frame:0000000000006F34                 db    0
.eh_frame:0000000000006F35                 db  41h ; A
.eh_frame:0000000000006F36                 db  0Eh
.eh_frame:0000000000006F37                 db  10h
.eh_frame:0000000000006F38                 db  83h
.eh_frame:0000000000006F39                 db    2
.eh_frame:0000000000006F3A                 db  5Ah ; Z
.eh_frame:0000000000006F3B                 db  0Ah
.eh_frame:0000000000006F3C                 db  0Eh
.eh_frame:0000000000006F3D                 db    8
.eh_frame:0000000000006F3E                 db  45h ; E
.eh_frame:0000000000006F3F                 db  0Bh
.eh_frame:0000000000006F40                 db  5Dh ; ]
.eh_frame:0000000000006F41                 db  0Ah
.eh_frame:0000000000006F42                 db  0Eh
.eh_frame:0000000000006F43                 db    8
.eh_frame:0000000000006F44                 db  43h ; C
.eh_frame:0000000000006F45                 db  0Bh
.eh_frame:0000000000006F46                 db  46h ; F
.eh_frame:0000000000006F47                 db  0Eh
.eh_frame:0000000000006F48                 db    8
.eh_frame:0000000000006F49                 db    0
.eh_frame:0000000000006F4A                 db    0
.eh_frame:0000000000006F4B                 db    0
.eh_frame:0000000000006F4C                 db    0
.eh_frame:0000000000006F4D                 db    0
.eh_frame:0000000000006F4E                 db    0
.eh_frame:0000000000006F4F                 db    0
.eh_frame:0000000000006F50                 db  1Ch
.eh_frame:0000000000006F51                 db    0
.eh_frame:0000000000006F52                 db    0
.eh_frame:0000000000006F53                 db    0
.eh_frame:0000000000006F54                 db 0F4h
.eh_frame:0000000000006F55                 db  0Ah
.eh_frame:0000000000006F56                 db    0
.eh_frame:0000000000006F57                 db    0
.eh_frame:0000000000006F58                 db  88h
.eh_frame:0000000000006F59                 db 0E1h
.eh_frame:0000000000006F5A                 db 0FFh
.eh_frame:0000000000006F5B                 db 0FFh
.eh_frame:0000000000006F5C                 db  60h ; `
.eh_frame:0000000000006F5D                 db    0
.eh_frame:0000000000006F5E                 db    0
.eh_frame:0000000000006F5F                 db    0
.eh_frame:0000000000006F60                 db    0
.eh_frame:0000000000006F61                 db  44h ; D
.eh_frame:0000000000006F62                 db  0Eh
.eh_frame:0000000000006F63                 db  10h
.eh_frame:0000000000006F64                 db  75h ; u
.eh_frame:0000000000006F65                 db  0Ah
.eh_frame:0000000000006F66                 db  0Eh
.eh_frame:0000000000006F67                 db    8
.eh_frame:0000000000006F68                 db  47h ; G
.eh_frame:0000000000006F69                 db  0Bh
.eh_frame:0000000000006F6A                 db  5Fh ; _
.eh_frame:0000000000006F6B                 db  0Eh
.eh_frame:0000000000006F6C                 db    8
.eh_frame:0000000000006F6D                 db    0
.eh_frame:0000000000006F6E                 db    0
.eh_frame:0000000000006F6F                 db    0
.eh_frame:0000000000006F70                 db  1Ch
.eh_frame:0000000000006F71                 db    0
.eh_frame:0000000000006F72                 db    0
.eh_frame:0000000000006F73                 db    0
.eh_frame:0000000000006F74                 db  14h
.eh_frame:0000000000006F75                 db  0Bh
.eh_frame:0000000000006F76                 db    0
.eh_frame:0000000000006F77                 db    0
.eh_frame:0000000000006F78                 db 0C8h
.eh_frame:0000000000006F79                 db 0E1h
.eh_frame:0000000000006F7A                 db 0FFh
.eh_frame:0000000000006F7B                 db 0FFh
.eh_frame:0000000000006F7C                 db  3Ch ; <
.eh_frame:0000000000006F7D                 db    0
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db    0
.eh_frame:0000000000006F81                 db  44h ; D
.eh_frame:0000000000006F82                 db  0Eh
.eh_frame:0000000000006F83                 db  10h
.eh_frame:0000000000006F84                 db  61h ; a
.eh_frame:0000000000006F85                 db  0Ah
.eh_frame:0000000000006F86                 db  0Eh
.eh_frame:0000000000006F87                 db    8
.eh_frame:0000000000006F88                 db  4Bh ; K
.eh_frame:0000000000006F89                 db  0Bh
.eh_frame:0000000000006F8A                 db  4Bh ; K
.eh_frame:0000000000006F8B                 db  0Eh
.eh_frame:0000000000006F8C                 db    8
.eh_frame:0000000000006F8D                 db    0
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db  34h ; 4
.eh_frame:0000000000006F91                 db    0
.eh_frame:0000000000006F92                 db    0
.eh_frame:0000000000006F93                 db    0
.eh_frame:0000000000006F94                 db  34h ; 4
.eh_frame:0000000000006F95                 db  0Bh
.eh_frame:0000000000006F96                 db    0
.eh_frame:0000000000006F97                 db    0
.eh_frame:0000000000006F98                 db 0E8h
.eh_frame:0000000000006F99                 db 0E1h
.eh_frame:0000000000006F9A                 db 0FFh
.eh_frame:0000000000006F9B                 db 0FFh
.eh_frame:0000000000006F9C                 db  7Bh ; {
.eh_frame:0000000000006F9D                 db    0
.eh_frame:0000000000006F9E                 db    0
.eh_frame:0000000000006F9F                 db    0
.eh_frame:0000000000006FA0                 db    0
.eh_frame:0000000000006FA1                 db  42h ; B
.eh_frame:0000000000006FA2                 db  0Eh
.eh_frame:0000000000006FA3                 db  10h
.eh_frame:0000000000006FA4                 db  8Ch
.eh_frame:0000000000006FA5                 db    2
.eh_frame:0000000000006FA6                 db  41h ; A
.eh_frame:0000000000006FA7                 db  0Eh
.eh_frame:0000000000006FA8                 db  18h
.eh_frame:0000000000006FA9                 db  86h
.eh_frame:0000000000006FAA                 db    3
.eh_frame:0000000000006FAB                 db  41h ; A
.eh_frame:0000000000006FAC                 db  0Eh
.eh_frame:0000000000006FAD                 db  20h
.eh_frame:0000000000006FAE                 db  83h
.eh_frame:0000000000006FAF                 db    4
.eh_frame:0000000000006FB0                 db  7Dh ; }
.eh_frame:0000000000006FB1                 db  0Ah
.eh_frame:0000000000006FB2                 db  0Eh
.eh_frame:0000000000006FB3                 db  18h
.eh_frame:0000000000006FB4                 db  41h ; A
.eh_frame:0000000000006FB5                 db  0Eh
.eh_frame:0000000000006FB6                 db  10h
.eh_frame:0000000000006FB7                 db  42h ; B
.eh_frame:0000000000006FB8                 db  0Eh
.eh_frame:0000000000006FB9                 db    8
.eh_frame:0000000000006FBA                 db  44h ; D
.eh_frame:0000000000006FBB                 db  0Bh
.eh_frame:0000000000006FBC                 db  60h ; `
.eh_frame:0000000000006FBD                 db  0Ah
.eh_frame:0000000000006FBE                 db  0Eh
.eh_frame:0000000000006FBF                 db  18h
.eh_frame:0000000000006FC0                 db  41h ; A
.eh_frame:0000000000006FC1                 db  0Eh
.eh_frame:0000000000006FC2                 db  10h
.eh_frame:0000000000006FC3                 db  42h ; B
.eh_frame:0000000000006FC4                 db  0Eh
.eh_frame:0000000000006FC5                 db    8
.eh_frame:0000000000006FC6                 db  45h ; E
.eh_frame:0000000000006FC7                 db  0Bh
.eh_frame:0000000000006FC8                 db  1Ch
.eh_frame:0000000000006FC9                 db    0
.eh_frame:0000000000006FCA                 db    0
.eh_frame:0000000000006FCB                 db    0
.eh_frame:0000000000006FCC                 db  6Ch ; l
.eh_frame:0000000000006FCD                 db  0Bh
.eh_frame:0000000000006FCE                 db    0
.eh_frame:0000000000006FCF                 db    0
.eh_frame:0000000000006FD0                 db  30h ; 0
.eh_frame:0000000000006FD1                 db 0E2h
.eh_frame:0000000000006FD2                 db 0FFh
.eh_frame:0000000000006FD3                 db 0FFh
.eh_frame:0000000000006FD4                 db  40h ; @
.eh_frame:0000000000006FD5                 db    0
.eh_frame:0000000000006FD6                 db    0
.eh_frame:0000000000006FD7                 db    0
.eh_frame:0000000000006FD8                 db    0
.eh_frame:0000000000006FD9                 db  44h ; D
.eh_frame:0000000000006FDA                 db  0Eh
.eh_frame:0000000000006FDB                 db  10h
.eh_frame:0000000000006FDC                 db  83h
.eh_frame:0000000000006FDD                 db    2
.eh_frame:0000000000006FDE                 db  5Ah ; Z
.eh_frame:0000000000006FDF                 db  0Ah
.eh_frame:0000000000006FE0                 db  0Eh
.eh_frame:0000000000006FE1                 db    8
.eh_frame:0000000000006FE2                 db  4Ah ; J
.eh_frame:0000000000006FE3                 db  0Bh
.eh_frame:0000000000006FE4                 db  53h ; S
.eh_frame:0000000000006FE5                 db  0Eh
.eh_frame:0000000000006FE6                 db    8
.eh_frame:0000000000006FE7                 db    0
.eh_frame:0000000000006FE8                 db  2Ch ; ,
.eh_frame:0000000000006FE9                 db    0
.eh_frame:0000000000006FEA                 db    0
.eh_frame:0000000000006FEB                 db    0
.eh_frame:0000000000006FEC                 db  8Ch
.eh_frame:0000000000006FED                 db  0Bh
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db  50h ; P
.eh_frame:0000000000006FF1                 db 0E2h
.eh_frame:0000000000006FF2                 db 0FFh
.eh_frame:0000000000006FF3                 db 0FFh
.eh_frame:0000000000006FF4                 db  57h ; W
.eh_frame:0000000000006FF5                 db    0
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db    0
.eh_frame:0000000000006FF9                 db  63h ; c
.eh_frame:0000000000006FFA                 db  0Eh
.eh_frame:0000000000006FFB                 db  10h
.eh_frame:0000000000006FFC                 db  8Ch
.eh_frame:0000000000006FFD                 db    2
.eh_frame:0000000000006FFE                 db  41h ; A
.eh_frame:0000000000006FFF                 db  0Eh
.eh_frame:0000000000007000                 db  18h
.eh_frame:0000000000007001                 db  86h
.eh_frame:0000000000007002                 db    3
.eh_frame:0000000000007003                 db  44h ; D
.eh_frame:0000000000007004                 db  0Eh
.eh_frame:0000000000007005                 db  20h
.eh_frame:0000000000007006                 db  83h
.eh_frame:0000000000007007                 db    4
.eh_frame:0000000000007008                 db  6Bh ; k
.eh_frame:0000000000007009                 db  0Eh
.eh_frame:000000000000700A                 db  18h
.eh_frame:000000000000700B                 db  41h ; A
.eh_frame:000000000000700C                 db  0Eh
.eh_frame:000000000000700D                 db  10h
.eh_frame:000000000000700E                 db  42h ; B
.eh_frame:000000000000700F                 db  0Eh
.eh_frame:0000000000007010                 db    8
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db    0
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db  44h ; D
.eh_frame:0000000000007019                 db    0
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db 0BCh
.eh_frame:000000000000701D                 db  0Bh
.eh_frame:000000000000701E                 db    0
.eh_frame:000000000000701F                 db    0
.eh_frame:0000000000007020                 db  80h
.eh_frame:0000000000007021                 db 0E2h
.eh_frame:0000000000007022                 db 0FFh
.eh_frame:0000000000007023                 db 0FFh
.eh_frame:0000000000007024                 db  65h ; e
.eh_frame:0000000000007025                 db    0
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db    0
.eh_frame:0000000000007029                 db  42h ; B
.eh_frame:000000000000702A                 db  0Eh
.eh_frame:000000000000702B                 db  10h
.eh_frame:000000000000702C                 db  8Fh
.eh_frame:000000000000702D                 db    2
.eh_frame:000000000000702E                 db  42h ; B
.eh_frame:000000000000702F                 db  0Eh
.eh_frame:0000000000007030                 db  18h
.eh_frame:0000000000007031                 db  8Eh
.eh_frame:0000000000007032                 db    3
.eh_frame:0000000000007033                 db  45h ; E
.eh_frame:0000000000007034                 db  0Eh
.eh_frame:0000000000007035                 db  20h
.eh_frame:0000000000007036                 db  8Dh
.eh_frame:0000000000007037                 db    4
.eh_frame:0000000000007038                 db  42h ; B
.eh_frame:0000000000007039                 db  0Eh
.eh_frame:000000000000703A                 db  28h ; (
.eh_frame:000000000000703B                 db  8Ch
.eh_frame:000000000000703C                 db    5
.eh_frame:000000000000703D                 db  48h ; H
.eh_frame:000000000000703E                 db  0Eh
.eh_frame:000000000000703F                 db  30h ; 0
.eh_frame:0000000000007040                 db  86h
.eh_frame:0000000000007041                 db    6
.eh_frame:0000000000007042                 db  48h ; H
.eh_frame:0000000000007043                 db  0Eh
.eh_frame:0000000000007044                 db  38h ; 8
.eh_frame:0000000000007045                 db  83h
.eh_frame:0000000000007046                 db    7
.eh_frame:0000000000007047                 db  4Dh ; M
.eh_frame:0000000000007048                 db  0Eh
.eh_frame:0000000000007049                 db  40h ; @
.eh_frame:000000000000704A                 db  72h ; r
.eh_frame:000000000000704B                 db  0Eh
.eh_frame:000000000000704C                 db  38h ; 8
.eh_frame:000000000000704D                 db  41h ; A
.eh_frame:000000000000704E                 db  0Eh
.eh_frame:000000000000704F                 db  30h ; 0
.eh_frame:0000000000007050                 db  41h ; A
.eh_frame:0000000000007051                 db  0Eh
.eh_frame:0000000000007052                 db  28h ; (
.eh_frame:0000000000007053                 db  42h ; B
.eh_frame:0000000000007054                 db  0Eh
.eh_frame:0000000000007055                 db  20h
.eh_frame:0000000000007056                 db  42h ; B
.eh_frame:0000000000007057                 db  0Eh
.eh_frame:0000000000007058                 db  18h
.eh_frame:0000000000007059                 db  42h ; B
.eh_frame:000000000000705A                 db  0Eh
.eh_frame:000000000000705B                 db  10h
.eh_frame:000000000000705C                 db  42h ; B
.eh_frame:000000000000705D                 db  0Eh
.eh_frame:000000000000705E                 db    8
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  14h
.eh_frame:0000000000007061                 db    0
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db    4
.eh_frame:0000000000007065                 db  0Ch
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db 0A8h
.eh_frame:0000000000007069                 db 0E2h
.eh_frame:000000000000706A                 db 0FFh
.eh_frame:000000000000706B                 db 0FFh
.eh_frame:000000000000706C                 db    2
.eh_frame:000000000000706D                 db    0
.eh_frame:000000000000706E                 db    0
.eh_frame:000000000000706F                 db    0
.eh_frame:0000000000007070                 db    0
.eh_frame:0000000000007071                 db    0
.eh_frame:0000000000007072                 db    0
.eh_frame:0000000000007073                 db    0
.eh_frame:0000000000007074                 db    0
.eh_frame:0000000000007075                 db    0
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  10h
.eh_frame:0000000000007079                 db    0
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db  1Ch
.eh_frame:000000000000707D                 db  0Ch
.eh_frame:000000000000707E                 db    0
.eh_frame:000000000000707F                 db    0
.eh_frame:0000000000007080                 db 0A0h
.eh_frame:0000000000007081                 db 0E2h
.eh_frame:0000000000007082                 db 0FFh
.eh_frame:0000000000007083                 db 0FFh
.eh_frame:0000000000007084                 db  0Eh
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db    0
.eh_frame:0000000000007089                 db    0
.eh_frame:000000000000708A                 db    0
.eh_frame:000000000000708B                 db    0
.eh_frame:000000000000708C __FRAME_END__   db    0
.eh_frame:000000000000708D                 db    0
.eh_frame:000000000000708E                 db    0
.eh_frame:000000000000708F                 db    0
.eh_frame:000000000000708F _eh_frame       ends
.eh_frame:000000000000708F
.init_array:0000000000207B70 ; ELF Initialization Function Table
.init_array:0000000000207B70 ; ===========================================================================
.init_array:0000000000207B70
.init_array:0000000000207B70 ; Segment type: Pure data
.init_array:0000000000207B70 ; Segment permissions: Read/Write
.init_array:0000000000207B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B70                 assume cs:_init_array
.init_array:0000000000207B70                 ;org 207B70h
.init_array:0000000000207B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B70
.fini_array:0000000000207B78 ; ELF Termination Function Table
.fini_array:0000000000207B78 ; ===========================================================================
.fini_array:0000000000207B78
.fini_array:0000000000207B78 ; Segment type: Pure data
.fini_array:0000000000207B78 ; Segment permissions: Read/Write
.fini_array:0000000000207B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B78                 assume cs:_fini_array
.fini_array:0000000000207B78                 ;org 207B78h
.fini_array:0000000000207B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B78
.data.rel.ro:0000000000207B80 ; ===========================================================================
.data.rel.ro:0000000000207B80
.data.rel.ro:0000000000207B80 ; Segment type: Pure data
.data.rel.ro:0000000000207B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B80                 ;org 207B80h
.data.rel.ro:0000000000207B80 ; struct option long_options
.data.rel.ro:0000000000207B80 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000207B80                                         ; DATA XREF: parse_long_options:loc_24F0↑o
.data.rel.ro:0000000000207B80                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000207B80                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000207B80                 db 4 dup(0)
.data.rel.ro:0000000000207B80                 dq 0                    ; flag
.data.rel.ro:0000000000207B80                 dd 68h                  ; val
.data.rel.ro:0000000000207B80                 db 4 dup(0)
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  76h ; v
.data.rel.ro:0000000000207BB9                 db    0
.data.rel.ro:0000000000207BBA                 db    0
.data.rel.ro:0000000000207BBB                 db    0
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 13B0h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 5330h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207B70h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207B78h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8C8h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2B9h>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 498h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 0F18h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0C60h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0C00h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0B82h> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_13D0↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_13D0+6↑r
.got:0000000000207E40 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000207E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E58 __errno_location_ptr dq offset __errno_location
.got:0000000000207E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E78 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:0000000000207E80 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000207E88 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E90 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E98 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E98                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EA0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EA8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EA8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EB0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EB8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EB8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EC0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EC8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207ED0 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000207ED8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EF0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000207EF8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F00 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F00                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F08 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F10 signal_ptr      dq offset signal        ; DATA XREF: _signal↑r
.got:0000000000207F18 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:0000000000207F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F68 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000207F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F88 execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
.got:0000000000207F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD0                                         ; DATA XREF: start+24↑r
.got:0000000000207FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE8 _got            ends
.got:0000000000207FE8
LOAD:0000000000207FF0 ; ===========================================================================
LOAD:0000000000207FF0
LOAD:0000000000207FF0 ; Segment type: Pure data
LOAD:0000000000207FF0 ; Segment permissions: Read/Write
LOAD:0000000000207FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF0                 assume cs:LOAD
LOAD:0000000000207FF0                 ;org 207FF0h
LOAD:0000000000207FF0                 align 20h
LOAD:0000000000207FF0 LOAD            ends
LOAD:0000000000207FF0
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+80↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: main+6A↑w
.data:0000000000208018                                         ; close_stdout:loc_2292↑r ...
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_3B0D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000208080                                         ; LOAD:0000000000000868↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000808↑o
.bss:0000000000208088                                         ; usage+80↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public optind@@GLIBC_2_2_5
.bss:0000000000208090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:0000000000208090                                         ; main+B3↑r ...
.bss:0000000000208090                                         ; Alternative name is 'optind'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208094                 align 8
.bss:0000000000208098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000208098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000208098                                         ; DATA XREF: LOAD:0000000000000838↑o
.bss:0000000000208098                                         ; LOAD:0000000000000850↑o ...
.bss:0000000000208098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000208098                                         ; Copy of shared data
.bss:00000000002080A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002080A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002080A0                                         ; parse_long_options+67↑r ...
.bss:00000000002080A0                                         ; Alternative name is 'opterr'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A4                 align 20h
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002080C0                                         ; main:loc_180B↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 10h
.bss:00000000002080D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080D0                                         ; close_stdout+1B↑r
.bss:00000000002080D1                 align 8
.bss:00000000002080D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080D8                                         ; close_stdout+56↑r
.bss:00000000002080E0                 public program_name
.bss:00000000002080E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080E0                                         ; usage+EF↑r ...
.bss:00000000002080E8                 align 20h
.bss:0000000000208100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208100                                         ; quotearg_free+46↑o ...
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208200                                         ; get_quoting_style↑o ...
.bss:0000000000208210 xmmword_208210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208220 xmmword_208220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208230 qword_208230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208238 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000208238                                         ; rpl_fcntl:loc_4D2F↑w ...
.bss:000000000020823C                 align 20h
.bss:000000000020823C _bss            ends
.bss:000000000020823C
.prgend:0000000000208240 ; ===========================================================================
.prgend:0000000000208240
.prgend:0000000000208240 ; Segment type: Zero-length
.prgend:0000000000208240 _prgend         segment byte public '' use64
.prgend:0000000000208240 _end            label byte
.prgend:0000000000208240 _prgend         ends
.prgend:0000000000208240
extern:0000000000208248 ; ===========================================================================
extern:0000000000208248
extern:0000000000208248 ; Segment type: Externs
extern:0000000000208248 ; extern
extern:0000000000208248 ; char *getenv(const char *name)
extern:0000000000208248                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000208248                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000208250 ; void free(void *ptr)
extern:0000000000208250                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208250                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208258 ; void __noreturn abort(void)
extern:0000000000208258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208258                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208260 ; int *_errno_location(void)
extern:0000000000208260                 extrn __errno_location:near
extern:0000000000208260                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208268 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208268                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208268                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208270 ; void __noreturn exit(int status)
extern:0000000000208270                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208270                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208278 ; size_t _fpending(FILE *fp)
extern:0000000000208278                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208278                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208280 ; int isatty(int fd)
extern:0000000000208280                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:0000000000208280                                         ; DATA XREF: .got:isatty_ptr↑o
extern:0000000000208288 ; int fcntl(int fd, int cmd, ...)
extern:0000000000208288                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000208288                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000208290 ; char *textdomain(const char *domainname)
extern:0000000000208290                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208290                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208298 ; int fclose(FILE *stream)
extern:0000000000208298                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208298                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082A0                 extrn bindtextdomain:near
extern:00000000002082A0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082A0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002082A8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002082A8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002082A8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002082B0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002082B0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002082B0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002082B0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082B8 ; size_t strlen(const char *s)
extern:00000000002082B8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082B8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082C0                 extrn __stack_chk_fail:near
extern:00000000002082C0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082C0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082C8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082C8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082C8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082D0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082D0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082D8 ; int dup2(int fd, int fd2)
extern:00000000002082D8                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:00000000002082D8                                         ; DATA XREF: .got:dup2_ptr↑o
extern:00000000002082E0 ; char *strrchr(const char *s, int c)
extern:00000000002082E0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082E0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082E8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082E8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082E8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002082F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082F8 ; int close(int fd)
extern:00000000002082F8                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002082F8                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000208300 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208300                 extrn __libc_start_main:near
extern:0000000000208300                                         ; CODE XREF: start+24↑p
extern:0000000000208300                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208308 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208308                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208308                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208310 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208310                 extrn fputs_unlocked:near
extern:0000000000208310                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208310                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208318 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208318                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208318                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208320 ; __sighandler_t signal(int sig, __sighandler_t handler)
extern:0000000000208320                 extrn signal:near       ; CODE XREF: _signal↑j
extern:0000000000208320                                         ; DATA XREF: .got:signal_ptr↑o
extern:0000000000208328 ; __mode_t umask(__mode_t mask)
extern:0000000000208328                 extrn umask:near        ; CODE XREF: _umask↑j
extern:0000000000208328                                         ; DATA XREF: .got:umask_ptr↑o
extern:0000000000208330 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208330                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208330                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208338 ; int fileno(FILE *stream)
extern:0000000000208338                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208338                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208340 ; void *malloc(size_t size)
extern:0000000000208340                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208340                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208348 ; int fflush(FILE *stream)
extern:0000000000208348                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208348                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208350 ; char *nl_langinfo(nl_item item)
extern:0000000000208350                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208350                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208358 ; int _freading(FILE *fp)
extern:0000000000208358                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208358                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208360 ; void *realloc(void *ptr, size_t size)
extern:0000000000208360                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208360                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208368 ; char *setlocale(int category, const char *locale)
extern:0000000000208368                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208368                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208370                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208370                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208378 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:0000000000208378                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:0000000000208378                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:0000000000208380 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208380                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208380                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208388 ; int open(const char *file, int oflag, ...)
extern:0000000000208388                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000208388                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000208390 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208390                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208390                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208398 ; int execvp(const char *file, char *const argv[])
extern:0000000000208398                 extrn execvp:near       ; CODE XREF: _execvp↑j
extern:0000000000208398                                         ; DATA XREF: .got:execvp_ptr↑o
extern:00000000002083A0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002083A0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002083A8 ; void __noreturn exit(int status)
extern:00000000002083A8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002083A8                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002083B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002083B0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002083B0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083B8                 extrn __fprintf_chk:near
extern:00000000002083B8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083B8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083C0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083C0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083C0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083C8 ; int iswprint(wint_t wc)
extern:00000000002083C8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083C8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083D0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083D0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083D0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083D0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083D8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083D8                 extrn __ctype_b_loc:near
extern:00000000002083D8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083D8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083E8                 extrn __gmon_start__:near ; weak
extern:00000000002083E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083F0
extern:00000000002083F0
extern:00000000002083F0                 end start
