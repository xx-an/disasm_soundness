LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : DE081E06E2A412BCC5CA76BE9AA68F942FCCF5F12F58503D8612DD993E697ADE
LOAD:0000000000000000 ; Input MD5    : F398C2F98D14C4BE27CE317ABCB21118
LOAD:0000000000000000 ; Input CRC32  : 5971C68F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/dirname
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 228F0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 60B0h                ; Size in file image
LOAD:00000000000000D8                 dq 60B0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B90h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B90h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4F0h                 ; Size in file image
LOAD:0000000000000110                 dq 688h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5310h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5310h                ; Physical address
LOAD:00000000000001B0                 dq 25Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 25Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B90h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B90h              ; Physical address
LOAD:0000000000000220                 dq 470h                 ; Size in file image
LOAD:0000000000000228                 dq 470h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0D9h, 0A5h, 68h, 0EAh, 80h, 0BBh, 7Ch, 5Fh, 0EAh, 0A2h ; Desc
LOAD:0000000000000284                 db 6Fh, 0C9h, 0DFh, 1, 0CDh, 0E5h, 0DBh, 65h, 76h, 43h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Fh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Fh, 30h, 35h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_7E8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_7E8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_7E8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_7E8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_7E8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_7E8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_7E8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7E8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFclose - offset byte_7E8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain - offset byte_7E8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aDcgettext - offset byte_7E8, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7E8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aStrlen - offset byte_7E8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStackChkFail - offset byte_7E8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aGetoptLong - offset byte_7E8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aMbrtowc - offset byte_7E8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aOverflow - offset byte_7E8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStrrchr - offset byte_7E8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aLseek - offset byte_7E8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A0                            0>
LOAD:00000000000004B8                 Elf64_Sym <offset aMemset - offset byte_7E8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aLibcStartMain - offset byte_7E8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aMemcmp - offset byte_7E8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aFputsUnlocked - offset byte_7E8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aCalloc - offset byte_7E8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aGmonStart - offset byte_7E8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aMemcpy - offset byte_7E8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aFileno - offset byte_7E8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aMalloc - offset byte_7E8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aFflush - offset byte_7E8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aNlLanginfo - offset byte_7E8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aFreading - offset byte_7E8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFwriteUnlocked - offset byte_7E8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aRealloc - offset byte_7E8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aSetlocale - offset byte_7E8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aPrintfChk - offset byte_7E8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aError - offset byte_7E8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000638                            0>
LOAD:0000000000000650                 Elf64_Sym <offset aFseeko - offset byte_7E8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aCxaAtexit - offset byte_7E8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aExit+1 - offset byte_7E8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aFwrite - offset byte_7E8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aFprintfChk - offset byte_7E8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aItmRegistertmc - offset byte_7E8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aMbsinit - offset byte_7E8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aIswprint - offset byte_7E8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaFinalize - offset byte_7E8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aCtypeBLoc - offset byte_7E8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aStdout - offset byte_7E8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000740                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000758                 Elf64_Sym <offset aProgname - offset byte_7E8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000758                            offset __bss_start, 8>
LOAD:0000000000000770                 Elf64_Sym <offset aProgramInvocat - offset byte_7E8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000770                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000788                 Elf64_Sym <offset aPrognameFull - offset byte_7E8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000788                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7E8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007A0                            offset __bss_start, 8>
LOAD:00000000000007B8                 Elf64_Sym <offset aStderr - offset byte_7E8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007B8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007D0                 Elf64_Sym <offset aOptind - offset byte_7E8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007D0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000007E8 ; ELF String Table
LOAD:00000000000007E8 byte_7E8        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000007E8                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000007E9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000AE8↓o
LOAD:00000000000007F3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:00000000000007FA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000807 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000811 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000819 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000821 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000828 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000830 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:000000000000083A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000840 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000851 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:000000000000085A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000862 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000868 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000868                                         ; LOAD:0000000000000680↑o
LOAD:000000000000086E aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000086E                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000886 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000886                                         ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:000000000000089D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000518↑o
LOAD:00000000000008A4 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008AB aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:00000000000008B2 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:00000000000008C3 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000008CA aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:00000000000008D8 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:00000000000008DF aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008E5 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000548↑o
LOAD:00000000000008EC aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:00000000000008F3 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:00000000000008FA aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000902 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:000000000000090E aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000728↑o
LOAD:000000000000091C aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000927 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:000000000000092E aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000440↑o
LOAD:000000000000093A aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000941 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000948 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000953 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000953                                         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000971 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000980 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:0000000000000980                                         ; LOAD:0000000000000398↑o
LOAD:000000000000098F aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:000000000000099F aLibcStartMain  db '__libc_start_main',0
LOAD:000000000000099F                                         ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000009B1 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:00000000000009B8 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000009C3 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000500↑o
LOAD:00000000000009D2 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009D7 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000758↑o
LOAD:00000000000009E2 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000009F2 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009FF aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000AF8↓o
LOAD:0000000000000A09 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B08↓o
LOAD:0000000000000A15 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B18↓o
LOAD:0000000000000A20 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B28↓o
LOAD:0000000000000A2A aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B38↓o
LOAD:0000000000000A36 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A36                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A52 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000A61 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A61                                         ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000A7B                 align 4
LOAD:0000000000000A7C ; ELF GNU Symbol Version Table
LOAD:0000000000000A7C                 dw 0
LOAD:0000000000000A7E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A80                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A82                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A84                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A86                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A88                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A8A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A8C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A8E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A90                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A92                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A9A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AAE                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AB0                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AB2                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AC4                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AD0                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AD2                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000ADA                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000AE8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000AE8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7E8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000AF8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7E8, \ ; "GLIBC_2.3"
LOAD:0000000000000AF8                                10h>
LOAD:0000000000000B08                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7E8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B08                                10h>
LOAD:0000000000000B18                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7E8, \ ; "GLIBC_2.14"
LOAD:0000000000000B18                                10h>
LOAD:0000000000000B28                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7E8, \ ; "GLIBC_2.4"
LOAD:0000000000000B28                                10h>
LOAD:0000000000000B38                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7E8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B48 ; ELF RELA Relocation Table
LOAD:0000000000000B48                 Elf64_Rela <206B90h, 8, 1760h> ; R_X86_64_RELATIVE +1760h
LOAD:0000000000000B60                 Elf64_Rela <206B98h, 8, 1720h> ; R_X86_64_RELATIVE +1720h
LOAD:0000000000000B78                 Elf64_Rela <206BA0h, 8, 47B2h> ; R_X86_64_RELATIVE +47B2h
LOAD:0000000000000B90                 Elf64_Rela <206BC0h, 8, 47B7h> ; R_X86_64_RELATIVE +47B7h
LOAD:0000000000000BA8                 Elf64_Rela <206BE0h, 8, 47BCh> ; R_X86_64_RELATIVE +47BCh
LOAD:0000000000000BC0                 Elf64_Rela <206C20h, 8, 4AD1h> ; R_X86_64_RELATIVE +4AD1h
LOAD:0000000000000BD8                 Elf64_Rela <206C28h, 8, 4AD9h> ; R_X86_64_RELATIVE +4AD9h
LOAD:0000000000000BF0                 Elf64_Rela <206C30h, 8, 4ADFh> ; R_X86_64_RELATIVE +4ADFh
LOAD:0000000000000C08                 Elf64_Rela <206C38h, 8, 4AECh> ; R_X86_64_RELATIVE +4AECh
LOAD:0000000000000C20                 Elf64_Rela <206C40h, 8, 4AF9h> ; R_X86_64_RELATIVE +4AF9h
LOAD:0000000000000C38                 Elf64_Rela <206C48h, 8, 4B0Dh> ; R_X86_64_RELATIVE +4B0Dh
LOAD:0000000000000C50                 Elf64_Rela <206C50h, 8, 4B0Fh> ; R_X86_64_RELATIVE +4B0Fh
LOAD:0000000000000C68                 Elf64_Rela <206C58h, 8, 4AF2h> ; R_X86_64_RELATIVE +4AF2h
LOAD:0000000000000C80                 Elf64_Rela <206C60h, 8, 477Ch> ; R_X86_64_RELATIVE +477Ch
LOAD:0000000000000C98                 Elf64_Rela <206C68h, 8, 4B17h> ; R_X86_64_RELATIVE +4B17h
LOAD:0000000000000CB0                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CC8                 Elf64_Rela <207010h, 8, 4A5Bh> ; R_X86_64_RELATIVE +4A5Bh
LOAD:0000000000000CE0                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000CF8                 Elf64_Rela <207078h, 8, 2070E0h> ; R_X86_64_RELATIVE +2070E0h
LOAD:0000000000000D10                 Elf64_Rela <206FC8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D28                 Elf64_Rela <206FD0h, 1500000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D40                 Elf64_Rela <206FD8h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D58                 Elf64_Rela <206FE0h, 2A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D70                 Elf64_Rela <206FE8h, 2D00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000D88                 Elf64_Rela <207080h, 3000000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DA0                 Elf64_Rela <207088h, 2F00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DB8                 Elf64_Rela <207090h, 3500000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000DD0                 Elf64_Rela <207098h, 3200000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000DE8                 Elf64_Rela <2070A0h, 3400000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E00 ; ELF JMPREL Relocation Table
LOAD:0000000000000E00                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E18                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E30                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E48                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E60                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000E78                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000E90                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000EA8                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000EC0                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000ED8                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000EF0                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F08                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F20                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F38                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000F50                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000F68                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000000F80                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000F98                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000FB0                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000FC8                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000000FE0                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000000FF8                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001010                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001028                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001040                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001058                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001070                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001088                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000010A0                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000010B8                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000010D0                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000010E8                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001100                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001118                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001130                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001148                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001160                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001178                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001190                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000011A8                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000011C0                 Elf64_Rela <206FC0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000011C0 LOAD            ends
LOAD:00000000000011C0
.init:00000000000011D8 ; ===========================================================================
.init:00000000000011D8
.init:00000000000011D8 ; Segment type: Pure code
.init:00000000000011D8 ; Segment permissions: Read/Execute
.init:00000000000011D8 _init           segment dword public 'CODE' use64
.init:00000000000011D8                 assume cs:_init
.init:00000000000011D8                 ;org 11D8h
.init:00000000000011D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000011D8
.init:00000000000011D8 ; =============== S U B R O U T I N E =======================================
.init:00000000000011D8
.init:00000000000011D8
.init:00000000000011D8                 public _init_proc
.init:00000000000011D8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000011D8                 sub     rsp, 8          ; _init
.init:00000000000011DC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000011E3                 test    rax, rax
.init:00000000000011E6                 jz      short loc_11EA
.init:00000000000011E8                 call    rax ; __gmon_start__
.init:00000000000011EA
.init:00000000000011EA loc_11EA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000011EA                 add     rsp, 8
.init:00000000000011EE                 retn
.init:00000000000011EE _init_proc      endp
.init:00000000000011EE
.init:00000000000011EE _init           ends
.init:00000000000011EE
LOAD:00000000000011EF ; ===========================================================================
LOAD:00000000000011EF
LOAD:00000000000011EF ; Segment type: Pure code
LOAD:00000000000011EF ; Segment permissions: Read/Execute
LOAD:00000000000011EF LOAD            segment byte public 'CODE' use64
LOAD:00000000000011EF                 assume cs:LOAD
LOAD:00000000000011EF                 ;org 11EFh
LOAD:00000000000011EF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000011EF                 align 10h
LOAD:00000000000011EF LOAD            ends
LOAD:00000000000011EF
.plt:00000000000011F0 ; ===========================================================================
.plt:00000000000011F0
.plt:00000000000011F0 ; Segment type: Pure code
.plt:00000000000011F0 ; Segment permissions: Read/Execute
.plt:00000000000011F0 _plt            segment para public 'CODE' use64
.plt:00000000000011F0                 assume cs:_plt
.plt:00000000000011F0                 ;org 11F0h
.plt:00000000000011F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000011F0
.plt:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011F0
.plt:00000000000011F0
.plt:00000000000011F0 sub_11F0        proc near               ; CODE XREF: .plt:000000000000120B↓j
.plt:00000000000011F0                                         ; .plt:000000000000121B↓j ...
.plt:00000000000011F0 ; __unwind {
.plt:00000000000011F0                 push    cs:qword_206E70
.plt:00000000000011F6                 jmp     cs:qword_206E78
.plt:00000000000011F6 sub_11F0        endp
.plt:00000000000011F6
.plt:00000000000011F6 ; ---------------------------------------------------------------------------
.plt:00000000000011FC                 align 20h
.plt:0000000000001200
.plt:0000000000001200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001200
.plt:0000000000001200 ; Attributes: thunk
.plt:0000000000001200
.plt:0000000000001200 ; void free(void *ptr)
.plt:0000000000001200 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001200                                         ; quotearg_free+37↓p ...
.plt:0000000000001200                 jmp     cs:free_ptr
.plt:0000000000001200 _free           endp
.plt:0000000000001200
.plt:0000000000001206 ; ---------------------------------------------------------------------------
.plt:0000000000001206                 push    0
.plt:000000000000120B                 jmp     sub_11F0
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210 ; Attributes: noreturn thunk
.plt:0000000000001210
.plt:0000000000001210 ; void __noreturn abort(void)
.plt:0000000000001210 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001210                                         ; quotearg_buffer_restyled:def_1F71↓p ...
.plt:0000000000001210                 jmp     cs:abort_ptr
.plt:0000000000001210 _abort          endp
.plt:0000000000001210
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:0000000000001216                 push    1
.plt:000000000000121B                 jmp     sub_11F0
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: thunk
.plt:0000000000001220
.plt:0000000000001220 ; int *__errno_location(void)
.plt:0000000000001220 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001220                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001220                 jmp     cs:__errno_location_ptr
.plt:0000000000001220 ___errno_location endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    2
.plt:000000000000122B                 jmp     sub_11F0
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001230 _strncmp        proc near               ; CODE XREF: usage+25C↓p
.plt:0000000000001230                                         ; usage+31D↓p
.plt:0000000000001230                 jmp     cs:strncmp_ptr
.plt:0000000000001230 _strncmp        endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    3
.plt:000000000000123B                 jmp     sub_11F0
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: noreturn thunk
.plt:0000000000001240
.plt:0000000000001240 ; void __noreturn _exit(int status)
.plt:0000000000001240 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001240                 jmp     cs:_exit_ptr
.plt:0000000000001240 __exit          endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    4
.plt:000000000000124B                 jmp     sub_11F0
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; size_t __fpending(FILE *fp)
.plt:0000000000001250 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001250                 jmp     cs:__fpending_ptr
.plt:0000000000001250 ___fpending     endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    5
.plt:000000000000125B                 jmp     sub_11F0
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; char *textdomain(const char *domainname)
.plt:0000000000001260 _textdomain     proc near               ; CODE XREF: main+43↓p
.plt:0000000000001260                 jmp     cs:textdomain_ptr
.plt:0000000000001260 _textdomain     endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    6
.plt:000000000000126B                 jmp     sub_11F0
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; int fclose(FILE *stream)
.plt:0000000000001270 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001270                                         ; rpl_fclose+6B↓j
.plt:0000000000001270                 jmp     cs:fclose_ptr
.plt:0000000000001270 _fclose         endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    7
.plt:000000000000127B                 jmp     sub_11F0
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001280 _bindtextdomain proc near               ; CODE XREF: main+37↓p
.plt:0000000000001280                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001280 _bindtextdomain endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    8
.plt:000000000000128B                 jmp     sub_11F0
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001290 _dcgettext      proc near               ; CODE XREF: main+1A5↓p
.plt:0000000000001290                                         ; usage+38↓p ...
.plt:0000000000001290                 jmp     cs:dcgettext_ptr
.plt:0000000000001290 _dcgettext      endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    9
.plt:000000000000129B                 jmp     sub_11F0
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000012A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000012A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000012A0 ___ctype_get_mb_cur_max endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    0Ah
.plt:00000000000012AB                 jmp     sub_11F0
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; size_t strlen(const char *s)
.plt:00000000000012B0 _strlen         proc near               ; CODE XREF: base_len+4↓p
.plt:00000000000012B0                                         ; quotearg_buffer_restyled+157↓p ...
.plt:00000000000012B0                 jmp     cs:strlen_ptr
.plt:00000000000012B0 _strlen         endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    0Bh
.plt:00000000000012BB                 jmp     sub_11F0
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: noreturn thunk
.plt:00000000000012C0
.plt:00000000000012C0 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_30D3↓p
.plt:00000000000012C0                                         ; quotearg_n_style:loc_36F9↓p ...
.plt:00000000000012C0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000012C0 ___stack_chk_fail endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    0Ch
.plt:00000000000012CB                 jmp     sub_11F0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000012D0 _getopt_long    proc near               ; CODE XREF: main+6A↓p
.plt:00000000000012D0                 jmp     cs:getopt_long_ptr
.plt:00000000000012D0 _getopt_long    endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    0Dh
.plt:00000000000012DB                 jmp     sub_11F0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000012E0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000012E0                 jmp     cs:mbrtowc_ptr
.plt:00000000000012E0 _mbrtowc        endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    0Eh
.plt:00000000000012EB                 jmp     sub_11F0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000012F0 ___overflow     proc near               ; CODE XREF: main+174↓p
.plt:00000000000012F0                                         ; main+189↓p
.plt:00000000000012F0                 jmp     cs:__overflow_ptr
.plt:00000000000012F0 ___overflow     endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    0Fh
.plt:00000000000012FB                 jmp     sub_11F0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; char *strrchr(const char *s, int c)
.plt:0000000000001300 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001300                 jmp     cs:strrchr_ptr
.plt:0000000000001300 _strrchr        endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    10h
.plt:000000000000130B                 jmp     sub_11F0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001310 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001310                                         ; rpl_fseeko+3B↓p
.plt:0000000000001310                 jmp     cs:lseek_ptr
.plt:0000000000001310 _lseek          endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    11h
.plt:000000000000131B                 jmp     sub_11F0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001320 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001320                                         ; xzalloc+12↓j
.plt:0000000000001320                 jmp     cs:memset_ptr
.plt:0000000000001320 _memset         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    12h
.plt:000000000000132B                 jmp     sub_11F0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001330 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001330                 jmp     cs:memcmp_ptr
.plt:0000000000001330 _memcmp         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    13h
.plt:000000000000133B                 jmp     sub_11F0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001340 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001340                                         ; usage+C2↓p ...
.plt:0000000000001340                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001340 _fputs_unlocked endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    14h
.plt:000000000000134B                 jmp     sub_11F0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001350 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001350                 jmp     cs:calloc_ptr
.plt:0000000000001350 _calloc         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    15h
.plt:000000000000135B                 jmp     sub_11F0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001360 _memcpy         proc near               ; CODE XREF: mdir_name+35↓p
.plt:0000000000001360                                         ; xmemdup+23↓j
.plt:0000000000001360                 jmp     cs:memcpy_ptr
.plt:0000000000001360 _memcpy         endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    16h
.plt:000000000000136B                 jmp     sub_11F0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int fileno(FILE *stream)
.plt:0000000000001370 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001370                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001370                 jmp     cs:fileno_ptr
.plt:0000000000001370 _fileno         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    17h
.plt:000000000000137B                 jmp     sub_11F0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; void *malloc(size_t size)
.plt:0000000000001380 _malloc         proc near               ; CODE XREF: mdir_name+1F↓p
.plt:0000000000001380                                         ; xmalloc+4↓p
.plt:0000000000001380                 jmp     cs:malloc_ptr
.plt:0000000000001380 _malloc         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    18h
.plt:000000000000138B                 jmp     sub_11F0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int fflush(FILE *stream)
.plt:0000000000001390 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001390                                         ; rpl_fflush+3B↓j
.plt:0000000000001390                 jmp     cs:fflush_ptr
.plt:0000000000001390 _fflush         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    19h
.plt:000000000000139B                 jmp     sub_11F0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; char *nl_langinfo(nl_item item)
.plt:00000000000013A0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000013A0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000013A0 _nl_langinfo    endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    1Ah
.plt:00000000000013AB                 jmp     sub_11F0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int __freading(FILE *fp)
.plt:00000000000013B0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000013B0                                         ; rpl_fflush+9↓p
.plt:00000000000013B0                 jmp     cs:__freading_ptr
.plt:00000000000013B0 ___freading     endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    1Bh
.plt:00000000000013BB                 jmp     sub_11F0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000013C0 _fwrite_unlocked proc near              ; CODE XREF: main+165↓p
.plt:00000000000013C0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000013C0 _fwrite_unlocked endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    1Ch
.plt:00000000000013CB                 jmp     sub_11F0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000013D0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000013D0                 jmp     cs:realloc_ptr
.plt:00000000000013D0 _realloc        endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1Dh
.plt:00000000000013DB                 jmp     sub_11F0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; char *setlocale(int category, const char *locale)
.plt:00000000000013E0 _setlocale      proc near               ; CODE XREF: main+24↓p
.plt:00000000000013E0                                         ; usage+243↓p ...
.plt:00000000000013E0                 jmp     cs:setlocale_ptr
.plt:00000000000013E0 _setlocale      endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    1Eh
.plt:00000000000013EB                 jmp     sub_11F0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000013F0                                         ; usage+13E↓p ...
.plt:00000000000013F0                 jmp     cs:__printf_chk_ptr
.plt:00000000000013F0 ___printf_chk   endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1Fh
.plt:00000000000013FB                 jmp     sub_11F0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001400 _error          proc near               ; CODE XREF: main+1B3↓p
.plt:0000000000001400                                         ; close_stdout+7D↓p ...
.plt:0000000000001400                 jmp     cs:error_ptr
.plt:0000000000001400 _error          endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    20h ; ' '
.plt:000000000000140B                 jmp     sub_11F0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001410 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_45AA↓j
.plt:0000000000001410                 jmp     cs:fseeko_ptr
.plt:0000000000001410 _fseeko         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    21h ; '!'
.plt:000000000000141B                 jmp     sub_11F0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001420 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001420                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001420 ___cxa_atexit   endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    22h ; '"'
.plt:000000000000142B                 jmp     sub_11F0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: noreturn thunk
.plt:0000000000001430
.plt:0000000000001430 ; void __noreturn exit(int status)
.plt:0000000000001430 _exit           proc near               ; CODE XREF: main+D9↓p
.plt:0000000000001430                                         ; usage+58↓p
.plt:0000000000001430                 jmp     cs:exit_ptr
.plt:0000000000001430 _exit           endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    23h ; '#'
.plt:000000000000143B                 jmp     sub_11F0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001440 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001440                 jmp     cs:fwrite_ptr
.plt:0000000000001440 _fwrite         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    24h ; '$'
.plt:000000000000144B                 jmp     sub_11F0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001450                                         ; version_etc_arn+37↓p ...
.plt:0000000000001450                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001450 ___fprintf_chk  endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    25h ; '%'
.plt:000000000000145B                 jmp     sub_11F0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001460 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001460                 jmp     cs:mbsinit_ptr
.plt:0000000000001460 _mbsinit        endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    26h ; '&'
.plt:000000000000146B                 jmp     sub_11F0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int iswprint(wint_t wc)
.plt:0000000000001470 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001470                 jmp     cs:iswprint_ptr
.plt:0000000000001470 _iswprint       endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    27h ; '''
.plt:000000000000147B                 jmp     sub_11F0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001480 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001480                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001480 ___ctype_b_loc  endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    28h ; '('
.plt:000000000000148B                 jmp     sub_11F0
.plt:000000000000148B ; } // starts at 11F0
.plt:000000000000148B _plt            ends
.plt:000000000000148B
.plt.got:0000000000001490 ; ===========================================================================
.plt.got:0000000000001490
.plt.got:0000000000001490 ; Segment type: Pure code
.plt.got:0000000000001490 ; Segment permissions: Read/Execute
.plt.got:0000000000001490 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001490                 assume cs:_plt_got
.plt.got:0000000000001490                 ;org 1490h
.plt.got:0000000000001490                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001490
.plt.got:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001490
.plt.got:0000000000001490 ; Attributes: thunk
.plt.got:0000000000001490
.plt.got:0000000000001490 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001490 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001490 ; __unwind {
.plt.got:0000000000001490                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001490 __cxa_finalize  endp
.plt.got:0000000000001490
.plt.got:0000000000001490 ; ---------------------------------------------------------------------------
.plt.got:0000000000001496                 align 8
.plt.got:0000000000001496 ; } // starts at 1490
.plt.got:0000000000001496 _plt_got        ends
.plt.got:0000000000001496
LOAD:0000000000001498 ; ===========================================================================
LOAD:0000000000001498
LOAD:0000000000001498 ; Segment type: Pure code
LOAD:0000000000001498 ; Segment permissions: Read/Execute
LOAD:0000000000001498 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001498                 assume cs:LOAD
LOAD:0000000000001498                 ;org 1498h
LOAD:0000000000001498                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001498                 align 20h
LOAD:0000000000001498 LOAD            ends
LOAD:0000000000001498
.text:00000000000014A0 ; ===========================================================================
.text:00000000000014A0
.text:00000000000014A0 ; Segment type: Pure code
.text:00000000000014A0 ; Segment permissions: Read/Execute
.text:00000000000014A0 _text           segment para public 'CODE' use64
.text:00000000000014A0                 assume cs:_text
.text:00000000000014A0                 ;org 14A0h
.text:00000000000014A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000014A0
.text:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000014A0
.text:00000000000014A0
.text:00000000000014A0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000014A0                 public main
.text:00000000000014A0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000014A0 ; __unwind {
.text:00000000000014A0                 push    r14
.text:00000000000014A2                 push    r13
.text:00000000000014A4                 push    r12
.text:00000000000014A6                 push    rbp
.text:00000000000014A7                 mov     ebp, edi
.text:00000000000014A9                 push    rbx
.text:00000000000014AA                 mov     rdi, [rsi]
.text:00000000000014AD                 mov     rbx, rsi
.text:00000000000014B0                 xor     r12d, r12d
.text:00000000000014B3                 call    set_program_name
.text:00000000000014B8                 lea     rsi, aUsageSOptionNa+1Bh ; locale
.text:00000000000014BF                 mov     edi, 6          ; category
.text:00000000000014C4                 call    _setlocale
.text:00000000000014C9                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000014D0                 lea     rdi, domainname ; "coreutils"
.text:00000000000014D7                 call    _bindtextdomain
.text:00000000000014DC                 lea     rdi, domainname ; "coreutils"
.text:00000000000014E3                 call    _textdomain
.text:00000000000014E8                 lea     rdi, close_stdout
.text:00000000000014EF                 call    atexit
.text:00000000000014F4
.text:00000000000014F4 loc_14F4:                               ; CODE XREF: main+88↓j
.text:00000000000014F4                 lea     rcx, longopts   ; longopts
.text:00000000000014FB                 lea     rdx, shortopts  ; "z"
.text:0000000000001502                 xor     r8d, r8d        ; longind
.text:0000000000001505                 mov     rsi, rbx        ; argv
.text:0000000000001508                 mov     edi, ebp        ; argc
.text:000000000000150A                 call    _getopt_long
.text:000000000000150F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001512                 jz      short loc_157E
.text:0000000000001514                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001519                 mov     r12d, 1
.text:000000000000151F                 jz      loc_1630
.text:0000000000001525                 cmp     eax, 7Ah ; 'z'
.text:0000000000001528                 jz      short loc_14F4
.text:000000000000152A                 cmp     eax, 0FFFFFF7Dh
.text:000000000000152F                 jz      short loc_1540
.text:0000000000001531
.text:0000000000001531 loc_1531:                               ; CODE XREF: main+1B8↓j
.text:0000000000001531                 mov     edi, 1          ; status
.text:0000000000001536                 call    usage
.text:0000000000001536 ; ---------------------------------------------------------------------------
.text:000000000000153B                 align 20h
.text:0000000000001540
.text:0000000000001540 loc_1540:                               ; CODE XREF: main+8F↑j
.text:0000000000001540                 sub     rsp, 8
.text:0000000000001544                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000154B                 mov     rcx, cs:Version
.text:0000000000001552                 push    0
.text:0000000000001554                 lea     r9, aJimMeyering ; "Jim Meyering"
.text:000000000000155B                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001562                 lea     rdx, unk_473E
.text:0000000000001569                 lea     rsi, aDirname   ; "dirname"
.text:0000000000001570                 xor     eax, eax
.text:0000000000001572                 call    version_etc
.text:0000000000001577                 xor     edi, edi        ; status
.text:0000000000001579                 call    _exit
.text:000000000000157E ; ---------------------------------------------------------------------------
.text:000000000000157E
.text:000000000000157E loc_157E:                               ; CODE XREF: main+72↑j
.text:000000000000157E                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001584                 cmp     eax, ebp
.text:0000000000001586                 jge     loc_1637
.text:000000000000158C                 cmp     r12b, 1
.text:0000000000001590                 sbb     r13d, r13d
.text:0000000000001593                 and     r13d, 0Ah
.text:0000000000001597                 mov     r12d, r13d
.text:000000000000159A                 jmp     short loc_15E0
.text:000000000000159C ; ---------------------------------------------------------------------------
.text:000000000000159C
.text:000000000000159C loc_159C:                               ; CODE XREF: main+158↓j
.text:000000000000159C                 mov     rax, [rcx+28h]
.text:00000000000015A0                 cmp     rax, [rcx+30h]
.text:00000000000015A4                 jnb     short loc_160C
.text:00000000000015A6                 lea     rdx, [rax+1]
.text:00000000000015AA                 mov     [rcx+28h], rdx
.text:00000000000015AE                 mov     byte ptr [rax], 2Eh ; '.'
.text:00000000000015B1
.text:00000000000015B1 loc_15B1:                               ; CODE XREF: main+16A↓j
.text:00000000000015B1                                         ; main+179↓j
.text:00000000000015B1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000015B8                 mov     rax, [rdi+28h]
.text:00000000000015BC                 cmp     [rdi+30h], rax
.text:00000000000015C0                 jbe     short loc_1626
.text:00000000000015C2                 lea     rdx, [rax+1]
.text:00000000000015C6                 mov     [rdi+28h], rdx
.text:00000000000015CA                 mov     [rax], r12b
.text:00000000000015CD
.text:00000000000015CD loc_15CD:                               ; CODE XREF: main+18E↓j
.text:00000000000015CD                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000015D3                 add     eax, 1
.text:00000000000015D6                 cmp     eax, ebp
.text:00000000000015D8                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:00000000000015DE                 jge     short loc_161B
.text:00000000000015E0
.text:00000000000015E0 loc_15E0:                               ; CODE XREF: main+FA↑j
.text:00000000000015E0                 cdqe
.text:00000000000015E2                 mov     r14, [rbx+rax*8]
.text:00000000000015E6                 mov     rdi, r14
.text:00000000000015E9                 call    dir_len
.text:00000000000015EE                 test    rax, rax
.text:00000000000015F1                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000015F8                 jz      short loc_159C
.text:00000000000015FA                 mov     rdx, rax        ; n
.text:00000000000015FD                 mov     esi, 1          ; size
.text:0000000000001602                 mov     rdi, r14        ; ptr
.text:0000000000001605                 call    _fwrite_unlocked
.text:000000000000160A                 jmp     short loc_15B1
.text:000000000000160C ; ---------------------------------------------------------------------------
.text:000000000000160C
.text:000000000000160C loc_160C:                               ; CODE XREF: main+104↑j
.text:000000000000160C                 mov     esi, 2Eh ; '.'  ; int
.text:0000000000001611                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000001614                 call    ___overflow
.text:0000000000001619                 jmp     short loc_15B1
.text:000000000000161B ; ---------------------------------------------------------------------------
.text:000000000000161B
.text:000000000000161B loc_161B:                               ; CODE XREF: main+13E↑j
.text:000000000000161B                 pop     rbx
.text:000000000000161C                 xor     eax, eax
.text:000000000000161E                 pop     rbp
.text:000000000000161F                 pop     r12
.text:0000000000001621                 pop     r13
.text:0000000000001623                 pop     r14
.text:0000000000001625                 retn
.text:0000000000001626 ; ---------------------------------------------------------------------------
.text:0000000000001626
.text:0000000000001626 loc_1626:                               ; CODE XREF: main+120↑j
.text:0000000000001626                 mov     esi, r13d       ; int
.text:0000000000001629                 call    ___overflow
.text:000000000000162E                 jmp     short loc_15CD
.text:0000000000001630 ; ---------------------------------------------------------------------------
.text:0000000000001630
.text:0000000000001630 loc_1630:                               ; CODE XREF: main+7F↑j
.text:0000000000001630                 xor     edi, edi        ; status
.text:0000000000001632                 call    usage
.text:0000000000001637 ; ---------------------------------------------------------------------------
.text:0000000000001637
.text:0000000000001637 loc_1637:                               ; CODE XREF: main+E6↑j
.text:0000000000001637                 lea     rsi, msgid      ; "missing operand"
.text:000000000000163E                 xor     edi, edi        ; domainname
.text:0000000000001640                 mov     edx, 5          ; category
.text:0000000000001645                 call    _dcgettext
.text:000000000000164A                 xor     esi, esi        ; errnum
.text:000000000000164C                 mov     rdx, rax        ; format
.text:000000000000164F                 xor     edi, edi        ; status
.text:0000000000001651                 xor     eax, eax
.text:0000000000001653                 call    _error
.text:0000000000001658                 jmp     loc_1531
.text:0000000000001658 ; } // starts at 14A0
.text:0000000000001658 main            endp
.text:0000000000001658
.text:0000000000001658 ; ---------------------------------------------------------------------------
.text:000000000000165D                 align 20h
.text:0000000000001660
.text:0000000000001660 ; =============== S U B R O U T I N E =======================================
.text:0000000000001660
.text:0000000000001660 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001660
.text:0000000000001660 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001660                 public start
.text:0000000000001660 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001660 ; __unwind {
.text:0000000000001660                 xor     ebp, ebp
.text:0000000000001662                 mov     r9, rdx         ; rtld_fini
.text:0000000000001665                 pop     rsi             ; argc
.text:0000000000001666                 mov     rdx, rsp        ; ubp_av
.text:0000000000001669                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000166D                 push    rax
.text:000000000000166E                 push    rsp             ; stack_end
.text:000000000000166F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001676                 lea     rcx, __libc_csu_init ; init
.text:000000000000167D                 lea     rdi, main       ; main
.text:0000000000001684                 call    cs:__libc_start_main_ptr
.text:000000000000168A                 hlt
.text:000000000000168A ; } // starts at 1660
.text:000000000000168A start           endp
.text:000000000000168A
.text:000000000000168A ; ---------------------------------------------------------------------------
.text:000000000000168B                 align 10h
.text:0000000000001690
.text:0000000000001690 ; =============== S U B R O U T I N E =======================================
.text:0000000000001690
.text:0000000000001690 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001690
.text:0000000000001690 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1743↓p
.text:0000000000001690                 lea     rdi, __bss_start
.text:0000000000001697                 push    rbp
.text:0000000000001698                 lea     rax, __bss_start
.text:000000000000169F                 cmp     rax, rdi
.text:00000000000016A2                 mov     rbp, rsp
.text:00000000000016A5                 jz      short loc_16C0
.text:00000000000016A7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000016AE                 test    rax, rax
.text:00000000000016B1                 jz      short loc_16C0
.text:00000000000016B3                 pop     rbp
.text:00000000000016B4                 jmp     rax
.text:00000000000016B4 ; ---------------------------------------------------------------------------
.text:00000000000016B6                 align 20h
.text:00000000000016C0
.text:00000000000016C0 loc_16C0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000016C0                                         ; deregister_tm_clones+21↑j
.text:00000000000016C0                 pop     rbp
.text:00000000000016C1                 retn
.text:00000000000016C1 deregister_tm_clones endp
.text:00000000000016C1
.text:00000000000016C1 ; ---------------------------------------------------------------------------
.text:00000000000016C2                 align 10h
.text:00000000000016D0
.text:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016D0
.text:00000000000016D0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000016D0
.text:00000000000016D0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000016D0                 lea     rdi, __bss_start
.text:00000000000016D7                 lea     rsi, __bss_start
.text:00000000000016DE                 push    rbp
.text:00000000000016DF                 sub     rsi, rdi
.text:00000000000016E2                 mov     rbp, rsp
.text:00000000000016E5                 sar     rsi, 3
.text:00000000000016E9                 mov     rax, rsi
.text:00000000000016EC                 shr     rax, 3Fh
.text:00000000000016F0                 add     rsi, rax
.text:00000000000016F3                 sar     rsi, 1
.text:00000000000016F6                 jz      short loc_1710
.text:00000000000016F8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000016FF                 test    rax, rax
.text:0000000000001702                 jz      short loc_1710
.text:0000000000001704                 pop     rbp
.text:0000000000001705                 jmp     rax
.text:0000000000001705 ; ---------------------------------------------------------------------------
.text:0000000000001707                 align 10h
.text:0000000000001710
.text:0000000000001710 loc_1710:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001710                                         ; register_tm_clones+32↑j
.text:0000000000001710                 pop     rbp
.text:0000000000001711                 retn
.text:0000000000001711 register_tm_clones endp
.text:0000000000001711
.text:0000000000001711 ; ---------------------------------------------------------------------------
.text:0000000000001712                 align 20h
.text:0000000000001720
.text:0000000000001720 ; =============== S U B R O U T I N E =======================================
.text:0000000000001720
.text:0000000000001720 ; Attributes: info_from_lumina
.text:0000000000001720
.text:0000000000001720 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001720                 cmp     cs:completed_7697, 0
.text:0000000000001727                 jnz     short locret_1758
.text:0000000000001729                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001731                 push    rbp
.text:0000000000001732                 mov     rbp, rsp
.text:0000000000001735                 jz      short loc_1743
.text:0000000000001737                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000173E                 call    __cxa_finalize
.text:0000000000001743
.text:0000000000001743 loc_1743:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001743                 call    deregister_tm_clones
.text:0000000000001748                 mov     cs:completed_7697, 1
.text:000000000000174F                 pop     rbp
.text:0000000000001750                 retn
.text:0000000000001750 ; ---------------------------------------------------------------------------
.text:0000000000001751                 align 8
.text:0000000000001758
.text:0000000000001758 locret_1758:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001758                 rep retn
.text:0000000000001758 __do_global_dtors_aux endp
.text:0000000000001758
.text:0000000000001758 ; ---------------------------------------------------------------------------
.text:000000000000175A                 align 20h
.text:0000000000001760
.text:0000000000001760 ; =============== S U B R O U T I N E =======================================
.text:0000000000001760
.text:0000000000001760 ; Attributes: bp-based frame
.text:0000000000001760
.text:0000000000001760 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001760                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001760                 push    rbp
.text:0000000000001761                 mov     rbp, rsp
.text:0000000000001764                 pop     rbp
.text:0000000000001765                 jmp     register_tm_clones
.text:0000000000001765 frame_dummy     endp
.text:0000000000001765
.text:0000000000001765 ; ---------------------------------------------------------------------------
.text:000000000000176A                 align 10h
.text:0000000000001770
.text:0000000000001770 ; =============== S U B R O U T I N E =======================================
.text:0000000000001770
.text:0000000000001770 ; Attributes: noreturn
.text:0000000000001770
.text:0000000000001770 ; void __fastcall __noreturn usage(int status)
.text:0000000000001770                 public usage
.text:0000000000001770 usage           proc near               ; CODE XREF: main+96↑p
.text:0000000000001770                                         ; main+192↑p
.text:0000000000001770
.text:0000000000001770 var_A8          = qword ptr -0A8h
.text:0000000000001770 var_A0          = qword ptr -0A0h
.text:0000000000001770 var_98          = qword ptr -98h
.text:0000000000001770 var_90          = qword ptr -90h
.text:0000000000001770 var_88          = qword ptr -88h
.text:0000000000001770 var_80          = qword ptr -80h
.text:0000000000001770 var_78          = qword ptr -78h
.text:0000000000001770 var_70          = qword ptr -70h
.text:0000000000001770 var_68          = qword ptr -68h
.text:0000000000001770 var_60          = qword ptr -60h
.text:0000000000001770 var_58          = qword ptr -58h
.text:0000000000001770 var_50          = qword ptr -50h
.text:0000000000001770 var_48          = qword ptr -48h
.text:0000000000001770 var_40          = qword ptr -40h
.text:0000000000001770 var_30          = qword ptr -30h
.text:0000000000001770
.text:0000000000001770 ; __unwind {
.text:0000000000001770                 push    r13
.text:0000000000001772                 push    r12
.text:0000000000001774                 mov     edx, 5          ; category
.text:0000000000001779                 push    rbp
.text:000000000000177A                 push    rbx
.text:000000000000177B                 mov     ebp, edi
.text:000000000000177D                 sub     rsp, 88h
.text:0000000000001784                 mov     rbx, cs:program_name
.text:000000000000178B                 mov     rax, fs:28h
.text:0000000000001794                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001799                 xor     eax, eax
.text:000000000000179B                 test    edi, edi
.text:000000000000179D                 jz      short loc_17CD
.text:000000000000179F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000017A6                 xor     edi, edi        ; domainname
.text:00000000000017A8                 call    _dcgettext
.text:00000000000017AD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000017B4                 mov     rdx, rax
.text:00000000000017B7                 mov     rcx, rbx
.text:00000000000017BA                 mov     esi, 1
.text:00000000000017BF                 xor     eax, eax
.text:00000000000017C1                 call    ___fprintf_chk
.text:00000000000017C6
.text:00000000000017C6 loc_17C6:                               ; CODE XREF: usage+2D6↓j
.text:00000000000017C6                 mov     edi, ebp        ; status
.text:00000000000017C8                 call    _exit
.text:00000000000017CD ; ---------------------------------------------------------------------------
.text:00000000000017CD
.text:00000000000017CD loc_17CD:                               ; CODE XREF: usage+2D↑j
.text:00000000000017CD                 lea     rsi, aUsageSOptionNa ; "Usage: %s [OPTION] NAME...\n"
.text:00000000000017D4                 xor     edi, edi        ; domainname
.text:00000000000017D6                 call    _dcgettext
.text:00000000000017DB                 mov     rdx, rbx
.text:00000000000017DE                 mov     rsi, rax
.text:00000000000017E1                 mov     edi, 1
.text:00000000000017E6                 xor     eax, eax
.text:00000000000017E8                 call    ___printf_chk
.text:00000000000017ED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000017F4                 lea     rsi, aOutputEachName ; "Output each NAME with its last non-slas"...
.text:00000000000017FB                 mov     edx, 5          ; category
.text:0000000000001800                 xor     edi, edi        ; domainname
.text:0000000000001802                 call    _dcgettext
.text:0000000000001807                 mov     rsi, rbx        ; stream
.text:000000000000180A                 mov     rdi, rax        ; s
.text:000000000000180D                 call    _fputs_unlocked
.text:0000000000001812                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001819                 lea     rsi, aZZeroEndEachOu ; "  -z, --zero     end each output line w"...
.text:0000000000001820                 mov     edx, 5          ; category
.text:0000000000001825                 xor     edi, edi        ; domainname
.text:0000000000001827                 call    _dcgettext
.text:000000000000182C                 mov     rsi, rbx        ; stream
.text:000000000000182F                 mov     rdi, rax        ; s
.text:0000000000001832                 call    _fputs_unlocked
.text:0000000000001837                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000183E                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001845                 mov     edx, 5          ; category
.text:000000000000184A                 xor     edi, edi        ; domainname
.text:000000000000184C                 call    _dcgettext
.text:0000000000001851                 mov     rsi, rbx        ; stream
.text:0000000000001854                 mov     rdi, rax        ; s
.text:0000000000001857                 call    _fputs_unlocked
.text:000000000000185C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001863                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000186A                 mov     edx, 5          ; category
.text:000000000000186F                 xor     edi, edi        ; domainname
.text:0000000000001871                 call    _dcgettext
.text:0000000000001876                 mov     rsi, rbx        ; stream
.text:0000000000001879                 mov     rdi, rax        ; s
.text:000000000000187C                 call    _fputs_unlocked
.text:0000000000001881                 mov     rbx, cs:program_name
.text:0000000000001888                 lea     rsi, aExamplesSUsrBi ; "\nExamples:\n  %s /usr/bin/          ->"...
.text:000000000000188F                 mov     edx, 5          ; category
.text:0000000000001894                 xor     edi, edi        ; domainname
.text:0000000000001896                 call    _dcgettext
.text:000000000000189B                 mov     rcx, rbx
.text:000000000000189E                 mov     rdx, rbx
.text:00000000000018A1                 mov     r8, rbx
.text:00000000000018A4                 mov     rsi, rax
.text:00000000000018A7                 mov     edi, 1
.text:00000000000018AC                 xor     eax, eax
.text:00000000000018AE                 call    ___printf_chk
.text:00000000000018B3                 lea     rax, asc_46C8   ; "["
.text:00000000000018BA                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000018C1                 lea     rbx, aDirname   ; "dirname"
.text:00000000000018C8                 mov     [rsp+0A8h+var_48], 0
.text:00000000000018D1                 mov     [rsp+0A8h+var_40], 0
.text:00000000000018DA                 mov     rdx, rsp
.text:00000000000018DD                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000018E1                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000018E8                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000018ED                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000018F4                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000018F9                 lea     rax, domainname ; "coreutils"
.text:0000000000001900                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001905                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000190C                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001911                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001918                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000191D                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001922                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001929                 mov     [rsp+0A8h+var_88], rax
.text:000000000000192E                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001935                 mov     [rsp+0A8h+var_80], rax
.text:000000000000193A                 mov     [rsp+0A8h+var_70], rax
.text:000000000000193F                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001944                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001949                 nop     dword ptr [rax+00000000h]
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: usage+1FD↓j
.text:0000000000001950                 add     rdx, 10h
.text:0000000000001954                 mov     rdi, [rdx]
.text:0000000000001957                 test    rdi, rdi
.text:000000000000195A                 jz      short loc_196F
.text:000000000000195C                 mov     ecx, 8
.text:0000000000001961                 mov     rsi, rbx
.text:0000000000001964                 repe cmpsb
.text:0000000000001966                 setnbe  al
.text:0000000000001969                 sbb     al, 0
.text:000000000000196B                 test    al, al
.text:000000000000196D                 jnz     short loc_1950
.text:000000000000196F
.text:000000000000196F loc_196F:                               ; CODE XREF: usage+1EA↑j
.text:000000000000196F                 mov     r12, [rdx+8]
.text:0000000000001973                 xor     edi, edi        ; domainname
.text:0000000000001975                 mov     edx, 5          ; category
.text:000000000000197A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001981                 test    r12, r12
.text:0000000000001984                 jz      loc_1A4B
.text:000000000000198A                 call    _dcgettext
.text:000000000000198F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001996                 lea     rdx, unk_473E
.text:000000000000199D                 mov     rsi, rax
.text:00000000000019A0                 mov     edi, 1
.text:00000000000019A5                 xor     eax, eax
.text:00000000000019A7                 call    ___printf_chk
.text:00000000000019AC                 xor     esi, esi        ; locale
.text:00000000000019AE                 mov     edi, 5          ; category
.text:00000000000019B3                 call    _setlocale
.text:00000000000019B8                 test    rax, rax
.text:00000000000019BB                 jz      short loc_19D9
.text:00000000000019BD                 lea     rsi, s2         ; "en_"
.text:00000000000019C4                 mov     edx, 3          ; n
.text:00000000000019C9                 mov     rdi, rax        ; s1
.text:00000000000019CC                 call    _strncmp
.text:00000000000019D1                 test    eax, eax
.text:00000000000019D3                 jnz     loc_1AE0
.text:00000000000019D9
.text:00000000000019D9 loc_19D9:                               ; CODE XREF: usage+24B↑j
.text:00000000000019D9                                         ; usage+395↓j
.text:00000000000019D9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000019E0                 xor     edi, edi        ; domainname
.text:00000000000019E2                 mov     edx, 5          ; category
.text:00000000000019E7                 call    _dcgettext
.text:00000000000019EC                 lea     rcx, aDirname   ; "dirname"
.text:00000000000019F3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019FA                 mov     rsi, rax
.text:00000000000019FD                 mov     edi, 1
.text:0000000000001A02                 xor     eax, eax
.text:0000000000001A04                 call    ___printf_chk
.text:0000000000001A09                 cmp     r12, rbx
.text:0000000000001A0C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001A13                 lea     rbx, aUsageSOptionNa+1Bh ; ""
.text:0000000000001A1A                 cmovz   rbx, rcx
.text:0000000000001A1E
.text:0000000000001A1E loc_1A1E:                               ; CODE XREF: usage+364↓j
.text:0000000000001A1E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001A25                 xor     edi, edi        ; domainname
.text:0000000000001A27                 mov     edx, 5          ; category
.text:0000000000001A2C                 call    _dcgettext
.text:0000000000001A31                 mov     rcx, rbx
.text:0000000000001A34                 mov     rsi, rax
.text:0000000000001A37                 mov     rdx, r12
.text:0000000000001A3A                 mov     edi, 1
.text:0000000000001A3F                 xor     eax, eax
.text:0000000000001A41                 call    ___printf_chk
.text:0000000000001A46                 jmp     loc_17C6
.text:0000000000001A4B ; ---------------------------------------------------------------------------
.text:0000000000001A4B
.text:0000000000001A4B loc_1A4B:                               ; CODE XREF: usage+214↑j
.text:0000000000001A4B                 call    _dcgettext
.text:0000000000001A50                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A57                 lea     rdx, unk_473E
.text:0000000000001A5E                 mov     rsi, rax
.text:0000000000001A61                 mov     edi, 1
.text:0000000000001A66                 xor     eax, eax
.text:0000000000001A68                 call    ___printf_chk
.text:0000000000001A6D                 xor     esi, esi        ; locale
.text:0000000000001A6F                 mov     edi, 5          ; category
.text:0000000000001A74                 call    _setlocale
.text:0000000000001A79                 test    rax, rax
.text:0000000000001A7C                 jz      short loc_1A96
.text:0000000000001A7E                 lea     rsi, s2         ; "en_"
.text:0000000000001A85                 mov     edx, 3          ; n
.text:0000000000001A8A                 mov     rdi, rax        ; s1
.text:0000000000001A8D                 call    _strncmp
.text:0000000000001A92                 test    eax, eax
.text:0000000000001A94                 jnz     short loc_1AD9
.text:0000000000001A96
.text:0000000000001A96 loc_1A96:                               ; CODE XREF: usage+30C↑j
.text:0000000000001A96                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001A9D                 mov     edx, 5          ; category
.text:0000000000001AA2                 xor     edi, edi        ; domainname
.text:0000000000001AA4                 lea     r12, aDirname   ; "dirname"
.text:0000000000001AAB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001AB2                 call    _dcgettext
.text:0000000000001AB7                 lea     rcx, aDirname   ; "dirname"
.text:0000000000001ABE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001AC5                 mov     rsi, rax
.text:0000000000001AC8                 mov     edi, 1
.text:0000000000001ACD                 xor     eax, eax
.text:0000000000001ACF                 call    ___printf_chk
.text:0000000000001AD4                 jmp     loc_1A1E
.text:0000000000001AD9 ; ---------------------------------------------------------------------------
.text:0000000000001AD9
.text:0000000000001AD9 loc_1AD9:                               ; CODE XREF: usage+324↑j
.text:0000000000001AD9                 lea     r12, aDirname   ; "dirname"
.text:0000000000001AE0
.text:0000000000001AE0 loc_1AE0:                               ; CODE XREF: usage+263↑j
.text:0000000000001AE0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001AE7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001AEE                 xor     edi, edi        ; domainname
.text:0000000000001AF0                 mov     edx, 5          ; category
.text:0000000000001AF5                 call    _dcgettext
.text:0000000000001AFA                 mov     rsi, r13        ; stream
.text:0000000000001AFD                 mov     rdi, rax        ; s
.text:0000000000001B00                 call    _fputs_unlocked
.text:0000000000001B05                 jmp     loc_19D9
.text:0000000000001B05 ; } // starts at 1770
.text:0000000000001B05 usage           endp
.text:0000000000001B05
.text:0000000000001B05 ; ---------------------------------------------------------------------------
.text:0000000000001B0A                 align 10h
.text:0000000000001B10
.text:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B10
.text:0000000000001B10
.text:0000000000001B10                 public close_stdout_set_file_name
.text:0000000000001B10 close_stdout_set_file_name proc near
.text:0000000000001B10 ; __unwind {
.text:0000000000001B10                 mov     cs:file_name, rdi
.text:0000000000001B17                 retn
.text:0000000000001B17 ; } // starts at 1B10
.text:0000000000001B17 close_stdout_set_file_name endp
.text:0000000000001B17
.text:0000000000001B17 ; ---------------------------------------------------------------------------
.text:0000000000001B18                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20
.text:0000000000001B20                 public close_stdout_set_ignore_EPIPE
.text:0000000000001B20 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001B20 ; __unwind {
.text:0000000000001B20                 mov     cs:ignore_EPIPE, dil
.text:0000000000001B27                 retn
.text:0000000000001B27 ; } // starts at 1B20
.text:0000000000001B27 close_stdout_set_ignore_EPIPE endp
.text:0000000000001B27
.text:0000000000001B27 ; ---------------------------------------------------------------------------
.text:0000000000001B28                 align 10h
.text:0000000000001B30
.text:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B30
.text:0000000000001B30 ; Attributes: info_from_lumina
.text:0000000000001B30
.text:0000000000001B30 ; void __cdecl close_stdout()
.text:0000000000001B30                 public close_stdout
.text:0000000000001B30 close_stdout    proc near               ; DATA XREF: main+48↑o
.text:0000000000001B30 ; __unwind {
.text:0000000000001B30                 push    rbp
.text:0000000000001B31                 push    rbx
.text:0000000000001B32                 sub     rsp, 8
.text:0000000000001B36                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001B3D                 call    close_stream
.text:0000000000001B42                 test    eax, eax
.text:0000000000001B44                 jz      short loc_1B5C
.text:0000000000001B46                 call    ___errno_location
.text:0000000000001B4B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001B52                 mov     rbx, rax
.text:0000000000001B55                 jz      short loc_1B73
.text:0000000000001B57                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001B5A                 jnz     short loc_1B73
.text:0000000000001B5C
.text:0000000000001B5C loc_1B5C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001B5C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001B63                 call    close_stream
.text:0000000000001B68                 test    eax, eax
.text:0000000000001B6A                 jnz     short loc_1BB2
.text:0000000000001B6C                 add     rsp, 8
.text:0000000000001B70                 pop     rbx
.text:0000000000001B71                 pop     rbp
.text:0000000000001B72                 retn
.text:0000000000001B73 ; ---------------------------------------------------------------------------
.text:0000000000001B73
.text:0000000000001B73 loc_1B73:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001B73                                         ; close_stdout+2A↑j
.text:0000000000001B73                 lea     rsi, aWriteError ; "write error"
.text:0000000000001B7A                 xor     edi, edi        ; domainname
.text:0000000000001B7C                 mov     edx, 5          ; category
.text:0000000000001B81                 call    _dcgettext
.text:0000000000001B86                 mov     rdi, cs:file_name
.text:0000000000001B8D                 mov     rbp, rax
.text:0000000000001B90                 test    rdi, rdi
.text:0000000000001B93                 jz      short loc_1BBD
.text:0000000000001B95                 call    quotearg_colon
.text:0000000000001B9A                 mov     esi, [rbx]      ; errnum
.text:0000000000001B9C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001BA3                 mov     rcx, rax
.text:0000000000001BA6                 mov     r8, rbp
.text:0000000000001BA9                 xor     edi, edi        ; status
.text:0000000000001BAB                 xor     eax, eax
.text:0000000000001BAD                 call    _error
.text:0000000000001BB2
.text:0000000000001BB2 loc_1BB2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001BB2                                         ; close_stdout+A2↓j
.text:0000000000001BB2                 mov     edi, cs:exit_failure ; status
.text:0000000000001BB8                 call    __exit
.text:0000000000001BBD ; ---------------------------------------------------------------------------
.text:0000000000001BBD
.text:0000000000001BBD loc_1BBD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001BBD                 mov     esi, [rbx]      ; errnum
.text:0000000000001BBF                 lea     rdx, format+4   ; format
.text:0000000000001BC6                 mov     rcx, rax
.text:0000000000001BC9                 xor     edi, edi        ; status
.text:0000000000001BCB                 xor     eax, eax
.text:0000000000001BCD                 call    _error
.text:0000000000001BD2                 jmp     short loc_1BB2
.text:0000000000001BD2 ; } // starts at 1B30
.text:0000000000001BD2 close_stdout    endp
.text:0000000000001BD2
.text:0000000000001BD2 ; ---------------------------------------------------------------------------
.text:0000000000001BD4                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BE0
.text:0000000000001BE0 ; Attributes: info_from_lumina
.text:0000000000001BE0
.text:0000000000001BE0 ; size_t __fastcall dir_len(const char *file)
.text:0000000000001BE0                 public dir_len
.text:0000000000001BE0 dir_len         proc near               ; CODE XREF: main+149↑p
.text:0000000000001BE0                                         ; mdir_name+9↓p
.text:0000000000001BE0 ; __unwind {
.text:0000000000001BE0                 push    rbp
.text:0000000000001BE1                 push    rbx
.text:0000000000001BE2                 xor     ebp, ebp
.text:0000000000001BE4                 mov     rbx, rdi
.text:0000000000001BE7                 sub     rsp, 8
.text:0000000000001BEB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000001BEE                 setz    bpl
.text:0000000000001BF2                 call    last_component
.text:0000000000001BF7                 mov     rcx, rax
.text:0000000000001BFA                 sub     rcx, rbx
.text:0000000000001BFD                 cmp     rcx, rbp
.text:0000000000001C00                 jbe     short loc_1C30
.text:0000000000001C02                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000001C06                 lea     rdx, [rcx-1]
.text:0000000000001C0A                 jz      short loc_1C1E
.text:0000000000001C0C                 jmp     short loc_1C30
.text:0000000000001C0C ; ---------------------------------------------------------------------------
.text:0000000000001C0E                 align 10h
.text:0000000000001C10
.text:0000000000001C10 loc_1C10:                               ; CODE XREF: dir_len+41↓j
.text:0000000000001C10                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000001C15                 lea     rax, [rdx-1]
.text:0000000000001C19                 jnz     short loc_1C23
.text:0000000000001C1B                 mov     rdx, rax
.text:0000000000001C1E
.text:0000000000001C1E loc_1C1E:                               ; CODE XREF: dir_len+2A↑j
.text:0000000000001C1E                 cmp     rbp, rdx
.text:0000000000001C21                 jnz     short loc_1C10
.text:0000000000001C23
.text:0000000000001C23 loc_1C23:                               ; CODE XREF: dir_len+39↑j
.text:0000000000001C23                 add     rsp, 8
.text:0000000000001C27                 mov     rax, rdx
.text:0000000000001C2A                 pop     rbx
.text:0000000000001C2B                 pop     rbp
.text:0000000000001C2C                 retn
.text:0000000000001C2C ; ---------------------------------------------------------------------------
.text:0000000000001C2D                 align 10h
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: dir_len+20↑j
.text:0000000000001C30                                         ; dir_len+2C↑j
.text:0000000000001C30                 add     rsp, 8
.text:0000000000001C34                 mov     rdx, rcx
.text:0000000000001C37                 mov     rax, rdx
.text:0000000000001C3A                 pop     rbx
.text:0000000000001C3B                 pop     rbp
.text:0000000000001C3C                 retn
.text:0000000000001C3C ; } // starts at 1BE0
.text:0000000000001C3C dir_len         endp
.text:0000000000001C3C
.text:0000000000001C3C ; ---------------------------------------------------------------------------
.text:0000000000001C3D                 align 20h
.text:0000000000001C40
.text:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C40
.text:0000000000001C40 ; Attributes: info_from_lumina
.text:0000000000001C40
.text:0000000000001C40 ; char *__fastcall mdir_name(const char *file)
.text:0000000000001C40                 public mdir_name
.text:0000000000001C40 mdir_name       proc near
.text:0000000000001C40 ; __unwind {
.text:0000000000001C40                 push    rbp
.text:0000000000001C41                 push    rbx
.text:0000000000001C42                 mov     rbp, rdi
.text:0000000000001C45                 sub     rsp, 8
.text:0000000000001C49                 call    dir_len
.text:0000000000001C4E                 test    rax, rax
.text:0000000000001C51                 mov     rbx, rax
.text:0000000000001C54                 setz    al
.text:0000000000001C57                 movzx   eax, al
.text:0000000000001C5A                 lea     rdi, [rbx+rax+1] ; size
.text:0000000000001C5F                 call    _malloc
.text:0000000000001C64                 test    rax, rax
.text:0000000000001C67                 mov     rcx, rax
.text:0000000000001C6A                 jz      short loc_1C86
.text:0000000000001C6C                 mov     rdx, rbx        ; n
.text:0000000000001C6F                 mov     rsi, rbp        ; src
.text:0000000000001C72                 mov     rdi, rax        ; dest
.text:0000000000001C75                 call    _memcpy
.text:0000000000001C7A                 test    rbx, rbx
.text:0000000000001C7D                 mov     rcx, rax
.text:0000000000001C80                 jz      short loc_1C90
.text:0000000000001C82
.text:0000000000001C82 loc_1C82:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000001C82                 mov     byte ptr [rcx+rbx], 0
.text:0000000000001C86
.text:0000000000001C86 loc_1C86:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000001C86                 add     rsp, 8
.text:0000000000001C8A                 mov     rax, rcx
.text:0000000000001C8D                 pop     rbx
.text:0000000000001C8E                 pop     rbp
.text:0000000000001C8F                 retn
.text:0000000000001C90 ; ---------------------------------------------------------------------------
.text:0000000000001C90
.text:0000000000001C90 loc_1C90:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000001C90                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000001C93                 mov     ebx, 1
.text:0000000000001C98                 jmp     short loc_1C82
.text:0000000000001C98 ; } // starts at 1C40
.text:0000000000001C98 mdir_name       endp
.text:0000000000001C98
.text:0000000000001C98 ; ---------------------------------------------------------------------------
.text:0000000000001C9A                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CA0
.text:0000000000001CA0 ; Attributes: info_from_lumina
.text:0000000000001CA0
.text:0000000000001CA0 ; char *__fastcall last_component(const char *name)
.text:0000000000001CA0                 public last_component
.text:0000000000001CA0 last_component  proc near               ; CODE XREF: dir_len+12↑p
.text:0000000000001CA0 ; __unwind {
.text:0000000000001CA0                 movzx   edx, byte ptr [rdi]
.text:0000000000001CA3                 mov     rax, rdi
.text:0000000000001CA6                 cmp     dl, 2Fh ; '/'
.text:0000000000001CA9                 jnz     short loc_1CBC
.text:0000000000001CAB                 nop     dword ptr [rax+rax+00h]
.text:0000000000001CB0
.text:0000000000001CB0 loc_1CB0:                               ; CODE XREF: last_component+1A↓j
.text:0000000000001CB0                 add     rax, 1
.text:0000000000001CB4                 movzx   edx, byte ptr [rax]
.text:0000000000001CB7                 cmp     dl, 2Fh ; '/'
.text:0000000000001CBA                 jz      short loc_1CB0
.text:0000000000001CBC
.text:0000000000001CBC loc_1CBC:                               ; CODE XREF: last_component+9↑j
.text:0000000000001CBC                 test    dl, dl
.text:0000000000001CBE                 jz      short locret_1CFA
.text:0000000000001CC0                 mov     rcx, rax
.text:0000000000001CC3                 xor     esi, esi
.text:0000000000001CC5                 jmp     short loc_1CE5
.text:0000000000001CC5 ; ---------------------------------------------------------------------------
.text:0000000000001CC7                 align 10h
.text:0000000000001CD0
.text:0000000000001CD0 loc_1CD0:                               ; CODE XREF: last_component+48↓j
.text:0000000000001CD0                 test    sil, sil
.text:0000000000001CD3                 jz      short loc_1CDA
.text:0000000000001CD5                 mov     rax, rcx
.text:0000000000001CD8                 xor     esi, esi
.text:0000000000001CDA
.text:0000000000001CDA loc_1CDA:                               ; CODE XREF: last_component+33↑j
.text:0000000000001CDA                 add     rcx, 1
.text:0000000000001CDE                 movzx   edx, byte ptr [rcx]
.text:0000000000001CE1                 test    dl, dl
.text:0000000000001CE3                 jz      short locret_1CFA
.text:0000000000001CE5
.text:0000000000001CE5 loc_1CE5:                               ; CODE XREF: last_component+25↑j
.text:0000000000001CE5                                         ; last_component+58↓j
.text:0000000000001CE5                 cmp     dl, 2Fh ; '/'
.text:0000000000001CE8                 jnz     short loc_1CD0
.text:0000000000001CEA                 add     rcx, 1
.text:0000000000001CEE                 movzx   edx, byte ptr [rcx]
.text:0000000000001CF1                 mov     esi, 1
.text:0000000000001CF6                 test    dl, dl
.text:0000000000001CF8                 jnz     short loc_1CE5
.text:0000000000001CFA
.text:0000000000001CFA locret_1CFA:                            ; CODE XREF: last_component+1E↑j
.text:0000000000001CFA                                         ; last_component+43↑j
.text:0000000000001CFA                 rep retn
.text:0000000000001CFA ; } // starts at 1CA0
.text:0000000000001CFA last_component  endp
.text:0000000000001CFA
.text:0000000000001CFA ; ---------------------------------------------------------------------------
.text:0000000000001CFC                 align 20h
.text:0000000000001D00
.text:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D00
.text:0000000000001D00 ; Attributes: info_from_lumina
.text:0000000000001D00
.text:0000000000001D00 ; size_t __fastcall base_len(const char *name)
.text:0000000000001D00                 public base_len
.text:0000000000001D00 base_len        proc near
.text:0000000000001D00 ; __unwind {
.text:0000000000001D00                 push    rbx
.text:0000000000001D01                 mov     rbx, rdi
.text:0000000000001D04                 call    _strlen
.text:0000000000001D09                 cmp     rax, 1
.text:0000000000001D0D                 jbe     short loc_1D1A
.text:0000000000001D0F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000001D14                 lea     rdx, [rax-1]
.text:0000000000001D18                 jz      short loc_1D28
.text:0000000000001D1A
.text:0000000000001D1A loc_1D1A:                               ; CODE XREF: base_len+D↑j
.text:0000000000001D1A                 pop     rbx
.text:0000000000001D1B                 retn
.text:0000000000001D1B ; ---------------------------------------------------------------------------
.text:0000000000001D1C                 align 20h
.text:0000000000001D20
.text:0000000000001D20 loc_1D20:                               ; CODE XREF: base_len+37↓j
.text:0000000000001D20                 mov     rdx, rax
.text:0000000000001D23                 nop     dword ptr [rax+rax+00h]
.text:0000000000001D28
.text:0000000000001D28 loc_1D28:                               ; CODE XREF: base_len+18↑j
.text:0000000000001D28                 cmp     rdx, 1
.text:0000000000001D2C                 jz      short loc_1D40
.text:0000000000001D2E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000001D33                 lea     rax, [rdx-1]
.text:0000000000001D37                 jz      short loc_1D20
.text:0000000000001D39                 mov     rax, rdx
.text:0000000000001D3C                 pop     rbx
.text:0000000000001D3D                 retn
.text:0000000000001D3D ; ---------------------------------------------------------------------------
.text:0000000000001D3E                 align 20h
.text:0000000000001D40
.text:0000000000001D40 loc_1D40:                               ; CODE XREF: base_len+2C↑j
.text:0000000000001D40                 mov     eax, 1
.text:0000000000001D45                 pop     rbx
.text:0000000000001D46                 retn
.text:0000000000001D46 ; } // starts at 1D00
.text:0000000000001D46 base_len        endp
.text:0000000000001D46
.text:0000000000001D46 ; ---------------------------------------------------------------------------
.text:0000000000001D47                 align 10h
.text:0000000000001D50
.text:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D50
.text:0000000000001D50
.text:0000000000001D50                 public set_program_name
.text:0000000000001D50 set_program_name proc near              ; CODE XREF: main+13↑p
.text:0000000000001D50 ; __unwind {
.text:0000000000001D50                 test    rdi, rdi
.text:0000000000001D53                 push    rbx
.text:0000000000001D54                 jz      short loc_1DCD
.text:0000000000001D56                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001D5B                 mov     rbx, rdi
.text:0000000000001D5E                 call    _strrchr
.text:0000000000001D63                 test    rax, rax
.text:0000000000001D66                 jz      short loc_1DBD
.text:0000000000001D68                 lea     r8, [rax+1]
.text:0000000000001D6C                 mov     rdx, r8
.text:0000000000001D6F                 sub     rdx, rbx
.text:0000000000001D72                 cmp     rdx, 6
.text:0000000000001D76                 jle     short loc_1DBD
.text:0000000000001D78                 lea     rsi, [rax-6]
.text:0000000000001D7C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001D83                 mov     ecx, 7
.text:0000000000001D88                 repe cmpsb
.text:0000000000001D8A                 setnbe  dl
.text:0000000000001D8D                 sbb     dl, 0
.text:0000000000001D90                 test    dl, dl
.text:0000000000001D92                 jnz     short loc_1DBD
.text:0000000000001D94                 lea     rdi, aLt        ; "lt-"
.text:0000000000001D9B                 mov     ecx, 3
.text:0000000000001DA0                 mov     rsi, r8
.text:0000000000001DA3                 mov     rbx, r8
.text:0000000000001DA6                 repe cmpsb
.text:0000000000001DA8                 setnbe  dl
.text:0000000000001DAB                 sbb     dl, 0
.text:0000000000001DAE                 test    dl, dl
.text:0000000000001DB0                 jnz     short loc_1DBD
.text:0000000000001DB2                 lea     rbx, [rax+4]
.text:0000000000001DB6                 mov     cs:__bss_start, rbx
.text:0000000000001DBD
.text:0000000000001DBD loc_1DBD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001DBD                                         ; set_program_name+26↑j ...
.text:0000000000001DBD                 mov     cs:program_name, rbx
.text:0000000000001DC4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001DCB                 pop     rbx
.text:0000000000001DCC                 retn
.text:0000000000001DCD ; ---------------------------------------------------------------------------
.text:0000000000001DCD
.text:0000000000001DCD loc_1DCD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001DCD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001DD4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001DDB                 mov     edx, 37h ; '7'  ; n
.text:0000000000001DE0                 mov     esi, 1          ; size
.text:0000000000001DE5                 call    _fwrite
.text:0000000000001DEA                 call    _abort
.text:0000000000001DEA ; } // starts at 1D50
.text:0000000000001DEA set_program_name endp
.text:0000000000001DEA
.text:0000000000001DEA ; ---------------------------------------------------------------------------
.text:0000000000001DEF                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DF0
.text:0000000000001DF0 ; Attributes: info_from_lumina
.text:0000000000001DF0
.text:0000000000001DF0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001DF0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001DF0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001DF0 ; __unwind {
.text:0000000000001DF0                 push    rbp
.text:0000000000001DF1                 push    rbx
.text:0000000000001DF2                 mov     rbp, rdi
.text:0000000000001DF5                 mov     ebx, esi
.text:0000000000001DF7                 sub     rsp, 8
.text:0000000000001DFB                 call    locale_charset
.text:0000000000001E00                 movzx   edx, byte ptr [rax]
.text:0000000000001E03                 and     edx, 0FFFFFFDFh
.text:0000000000001E06                 cmp     dl, 55h ; 'U'
.text:0000000000001E09                 jz      short loc_1E80
.text:0000000000001E0B                 cmp     dl, 47h ; 'G'
.text:0000000000001E0E                 jz      short loc_1E30
.text:0000000000001E10
.text:0000000000001E10 loc_1E10:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001E10                                         ; gettext_quote+50↓j ...
.text:0000000000001E10                 lea     rax, unk_4ACB
.text:0000000000001E17                 lea     rdx, asc_4ACD   ; "'"
.text:0000000000001E1E                 cmp     ebx, 9
.text:0000000000001E21                 cmovnz  rax, rdx
.text:0000000000001E25                 add     rsp, 8
.text:0000000000001E29                 pop     rbx
.text:0000000000001E2A                 pop     rbp
.text:0000000000001E2B                 retn
.text:0000000000001E2B ; ---------------------------------------------------------------------------
.text:0000000000001E2C                 align 10h
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001E30                 movzx   edx, byte ptr [rax+1]
.text:0000000000001E34                 and     edx, 0FFFFFFDFh
.text:0000000000001E37                 cmp     dl, 42h ; 'B'
.text:0000000000001E3A                 jnz     short loc_1E10
.text:0000000000001E3C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001E40                 jnz     short loc_1E10
.text:0000000000001E42                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001E46                 jnz     short loc_1E10
.text:0000000000001E48                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001E4C                 jnz     short loc_1E10
.text:0000000000001E4E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001E52                 jnz     short loc_1E10
.text:0000000000001E54                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001E58                 jnz     short loc_1E10
.text:0000000000001E5A                 cmp     byte ptr [rax+7], 0
.text:0000000000001E5E                 jnz     short loc_1E10
.text:0000000000001E60                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001E64                 lea     rax, unk_4AC4
.text:0000000000001E6B                 lea     rdx, unk_4AC8
.text:0000000000001E72                 cmovnz  rax, rdx
.text:0000000000001E76                 add     rsp, 8
.text:0000000000001E7A                 pop     rbx
.text:0000000000001E7B                 pop     rbp
.text:0000000000001E7C                 retn
.text:0000000000001E7C ; ---------------------------------------------------------------------------
.text:0000000000001E7D                 align 20h
.text:0000000000001E80
.text:0000000000001E80 loc_1E80:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001E80                 movzx   edx, byte ptr [rax+1]
.text:0000000000001E84                 and     edx, 0FFFFFFDFh
.text:0000000000001E87                 cmp     dl, 54h ; 'T'
.text:0000000000001E8A                 jnz     short loc_1E10
.text:0000000000001E8C                 movzx   edx, byte ptr [rax+2]
.text:0000000000001E90                 and     edx, 0FFFFFFDFh
.text:0000000000001E93                 cmp     dl, 46h ; 'F'
.text:0000000000001E96                 jnz     loc_1E10
.text:0000000000001E9C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001EA0                 jnz     loc_1E10
.text:0000000000001EA6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001EAA                 jnz     loc_1E10
.text:0000000000001EB0                 cmp     byte ptr [rax+5], 0
.text:0000000000001EB4                 jnz     loc_1E10
.text:0000000000001EBA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001EBE                 lea     rax, unk_4ABC
.text:0000000000001EC5                 lea     rdx, unk_4AC0
.text:0000000000001ECC                 cmovnz  rax, rdx
.text:0000000000001ED0                 add     rsp, 8
.text:0000000000001ED4                 pop     rbx
.text:0000000000001ED5                 pop     rbp
.text:0000000000001ED6                 retn
.text:0000000000001ED6 ; } // starts at 1DF0
.text:0000000000001ED6 gettext_quote   endp
.text:0000000000001ED6
.text:0000000000001ED6 ; ---------------------------------------------------------------------------
.text:0000000000001ED7                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EE0
.text:0000000000001EE0 ; Attributes: info_from_lumina
.text:0000000000001EE0
.text:0000000000001EE0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001EE0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001EE0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001EE0
.text:0000000000001EE0 var_E0          = dword ptr -0E0h
.text:0000000000001EE0 var_DB          = byte ptr -0DBh
.text:0000000000001EE0 var_DA          = byte ptr -0DAh
.text:0000000000001EE0 var_D9          = byte ptr -0D9h
.text:0000000000001EE0 s               = qword ptr -0D8h
.text:0000000000001EE0 n               = qword ptr -0D0h
.text:0000000000001EE0 var_C8          = qword ptr -0C8h
.text:0000000000001EE0 ps              = qword ptr -0C0h
.text:0000000000001EE0 var_B8          = qword ptr -0B8h
.text:0000000000001EE0 var_B0          = qword ptr -0B0h
.text:0000000000001EE0 var_A8          = qword ptr -0A8h
.text:0000000000001EE0 s2              = qword ptr -0A0h
.text:0000000000001EE0 var_98          = qword ptr -98h
.text:0000000000001EE0 var_90          = qword ptr -90h
.text:0000000000001EE0 var_88          = qword ptr -88h
.text:0000000000001EE0 var_80          = qword ptr -80h
.text:0000000000001EE0 var_78          = qword ptr -78h
.text:0000000000001EE0 var_70          = dword ptr -70h
.text:0000000000001EE0 var_6C          = byte ptr -6Ch
.text:0000000000001EE0 var_6B          = byte ptr -6Bh
.text:0000000000001EE0 var_6A          = byte ptr -6Ah
.text:0000000000001EE0 var_69          = byte ptr -69h
.text:0000000000001EE0 var_68          = qword ptr -68h
.text:0000000000001EE0 var_60          = qword ptr -60h
.text:0000000000001EE0 wc              = dword ptr -4Ch
.text:0000000000001EE0 var_48          = qword ptr -48h
.text:0000000000001EE0 var_40          = qword ptr -40h
.text:0000000000001EE0 arg_0           = qword ptr  8
.text:0000000000001EE0 arg_8           = qword ptr  10h
.text:0000000000001EE0 arg_10          = qword ptr  18h
.text:0000000000001EE0
.text:0000000000001EE0 ; __unwind {
.text:0000000000001EE0                 push    r15
.text:0000000000001EE2                 push    r14
.text:0000000000001EE4                 mov     r15d, r8d
.text:0000000000001EE7                 push    r13
.text:0000000000001EE9                 push    r12
.text:0000000000001EEB                 mov     r14, rdi
.text:0000000000001EEE                 push    rbp
.text:0000000000001EEF                 push    rbx
.text:0000000000001EF0                 mov     ebx, r9d
.text:0000000000001EF3                 mov     r13, rsi
.text:0000000000001EF6                 mov     rbp, rcx
.text:0000000000001EF9                 and     ebx, 2
.text:0000000000001EFC                 sub     rsp, 0B8h
.text:0000000000001F03                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001F0B                 mov     [rsp+0E8h+s], rdx
.text:0000000000001F10                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001F15                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001F1A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001F1F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001F27                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001F2C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001F34                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001F39                 mov     rax, fs:28h
.text:0000000000001F42                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001F4A                 xor     eax, eax
.text:0000000000001F4C                 call    ___ctype_get_mb_cur_max
.text:0000000000001F51                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001F55                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001F5A                 ja      def_1F71        ; jumptable 00000000000121F1 default case
.text:0000000000001F60                 lea     rcx, jpt_1F71
.text:0000000000001F67                 mov     edx, r15d
.text:0000000000001F6A                 movsxd  rax, ds:(jpt_1F71 - 4B20h)[rcx+rdx*4]
.text:0000000000001F6E                 add     rax, rcx
.text:0000000000001F71                 jmp     rax             ; switch jump
.text:0000000000001F73 ; ---------------------------------------------------------------------------
.text:0000000000001F73
.text:0000000000001F73 loc_1F73:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001F73                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001F73                                         ; DATA XREF: ...
.text:0000000000001F73                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001F78                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001F7D                 xor     r12d, r12d
.text:0000000000001F80                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001F89                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001F8E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001F93
.text:0000000000001F93 loc_1F93:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001F93                 lea     rax, asc_4ACD   ; "'"
.text:0000000000001F9A                 mov     [rsp+0E8h+n], 1
.text:0000000000001FA3                 xor     r15d, r15d
.text:0000000000001FA6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001FAE                 mov     [rsp+0E8h+s2], rax
.text:0000000000001FB3
.text:0000000000001FB3 loc_1FB3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001FB3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001FB3                 xor     r11d, r11d
.text:0000000000001FB6                 mov     rax, rbp
.text:0000000000001FB9                 mov     r8d, r12d
.text:0000000000001FBC                 mov     rbp, r11
.text:0000000000001FBF                 mov     r11, rax
.text:0000000000001FC2                 nop     word ptr [rax+rax+00h]
.text:0000000000001FC8
.text:0000000000001FC8 loc_1FC8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000001FC8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000001FC8                 cmp     r11, rbp
.text:0000000000001FCB                 setnz   r12b
.text:0000000000001FCF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FD3                 jnz     short loc_1FE2
.text:0000000000001FD5                 mov     rax, [rsp+0E8h+s]
.text:0000000000001FDA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000001FDE                 setnz   r12b
.text:0000000000001FE2
.text:0000000000001FE2 loc_1FE2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000001FE2                 test    r12b, r12b
.text:0000000000001FE5                 jz      loc_2640
.text:0000000000001FEB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001FF0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000001FF5                 lea     r9, [rdi+rbp]
.text:0000000000001FF9                 setnz   al
.text:0000000000001FFC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002000                 mov     r10d, eax
.text:0000000000002003                 jz      loc_20B0
.text:0000000000002009                 mov     rax, [rsp+0E8h+n]
.text:000000000000200E                 test    rax, rax
.text:0000000000002011                 jz      loc_2440
.text:0000000000002017                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000201B                 lea     rbx, [rbp+rax+0]
.text:0000000000002020                 jnz     short loc_2050
.text:0000000000002022                 cmp     rax, 1
.text:0000000000002026                 jbe     short loc_2050
.text:0000000000002028                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000202D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002032                 mov     [rsp+0E8h+ps], r9
.text:0000000000002037                 call    _strlen
.text:000000000000203C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002042                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002048                 mov     r11, rax
.text:000000000000204B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002050
.text:0000000000002050 loc_2050:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002050                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002050                 cmp     rbx, r11
.text:0000000000002053                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002058                 ja      loc_2610
.text:000000000000205E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002063                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002068                 mov     rdi, r9         ; s1
.text:000000000000206B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002070                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002075                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000207A                 call    _memcmp
.text:000000000000207F                 test    eax, eax
.text:0000000000002081                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002086                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000208C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002091                 jnz     loc_2610
.text:0000000000002097                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000209C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000020A2                 jnz     loc_3025
.text:00000000000020A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000020B0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000020B0                 movzx   ebx, byte ptr [r9]
.text:00000000000020B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000020B7                 ja      def_20CE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000020BD                 lea     rcx, jpt_20CE
.text:00000000000020C4                 movzx   edx, bl
.text:00000000000020C7                 movsxd  rax, ds:(jpt_20CE - 4B4Ch)[rcx+rdx*4]
.text:00000000000020CB                 add     rax, rcx
.text:00000000000020CE                 jmp     rax             ; switch jump
.text:00000000000020D0 ; ---------------------------------------------------------------------------
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000020D0                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000020D0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000020D3
.text:00000000000020D3 loc_20D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000020D3                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000020D3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000020D7                 setnz   al
.text:00000000000020DA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000020DE                 jnz     short loc_20EC
.text:00000000000020E0                 mov     rax, [rsp+0E8h+s]
.text:00000000000020E5                 cmp     byte ptr [rax+1], 0
.text:00000000000020E9                 setnz   al
.text:00000000000020EC
.text:00000000000020EC loc_20EC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000020EC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020F1                 setz    dl
.text:00000000000020F4                 test    al, al
.text:00000000000020F6                 jz      loc_2348
.text:00000000000020FC
.text:00000000000020FC loc_20FC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000020FC                 xor     r12d, r12d
.text:00000000000020FF                 xor     eax, eax
.text:0000000000002101                 nop     dword ptr [rax+00000000h]
.text:0000000000002108
.text:0000000000002108 loc_2108:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002108                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002108                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000210D                 jnz     loc_2222
.text:0000000000002113                 test    dl, dl
.text:0000000000002115                 jnz     loc_2222
.text:000000000000211B
.text:000000000000211B loc_211B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000211B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002120                 test    rsi, rsi
.text:0000000000002123                 jz      short loc_2139
.text:0000000000002125                 mov     edx, ebx
.text:0000000000002127                 shr     dl, 5
.text:000000000000212A                 movzx   edx, dl
.text:000000000000212D                 mov     edx, [rsi+rdx*4]
.text:0000000000002130                 bt      edx, ebx
.text:0000000000002133                 jb      loc_2283
.text:0000000000002139
.text:0000000000002139 loc_2139:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002139                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002139                 test    r10b, r10b
.text:000000000000213C                 jnz     loc_2283
.text:0000000000002142                 xor     eax, 1
.text:0000000000002145                 add     rbp, 1
.text:0000000000002149                 and     eax, r8d
.text:000000000000214C
.text:000000000000214C loc_214C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000214C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000214C                 test    al, al
.text:000000000000214E                 jz      short loc_2170
.text:0000000000002150                 cmp     r13, r15
.text:0000000000002153                 jbe     short loc_215A
.text:0000000000002155                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000215A
.text:000000000000215A loc_215A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000215A                 lea     rax, [r15+1]
.text:000000000000215E                 cmp     r13, rax
.text:0000000000002161                 jbe     short loc_2169
.text:0000000000002163                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002169
.text:0000000000002169 loc_2169:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002169                 add     r15, 2
.text:000000000000216D                 xor     r8d, r8d
.text:0000000000002170
.text:0000000000002170 loc_2170:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002170                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002170                 cmp     r15, r13
.text:0000000000002173                 jnb     short loc_2179
.text:0000000000002175                 mov     [r14+r15], bl
.text:0000000000002179
.text:0000000000002179 loc_2179:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002179                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000217E                 add     r15, 1
.text:0000000000002182                 mov     eax, 0
.text:0000000000002187                 test    r12b, r12b
.text:000000000000218A                 cmovz   edi, eax
.text:000000000000218D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002192                 jmp     loc_1FC8
.text:0000000000002192 ; ---------------------------------------------------------------------------
.text:0000000000002197                 align 20h
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000021A0                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000021A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000021A3
.text:00000000000021A3 loc_21A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021A3                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000021A3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000021A7                 cmp     eax, 2
.text:00000000000021AA                 jz      loc_2768
.text:00000000000021B0                 cmp     eax, 5
.text:00000000000021B3                 jz      loc_2728
.text:00000000000021B9                 cmp     eax, 2
.text:00000000000021BC                 mov     ebx, 3Fh ; '?'
.text:00000000000021C1                 setz    dl
.text:00000000000021C4                 xor     r12d, r12d
.text:00000000000021C7                 xor     eax, eax
.text:00000000000021C9                 jmp     loc_2108
.text:00000000000021C9 ; ---------------------------------------------------------------------------
.text:00000000000021CE                 align 10h
.text:00000000000021D0
.text:00000000000021D0 loc_21D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000021D0                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000021D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000021D3
.text:00000000000021D3 loc_21D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021D3                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000021D3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000021D8                 jz      loc_26E0
.text:00000000000021DE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000021E3                 xor     edx, edx
.text:00000000000021E5                 xor     eax, eax
.text:00000000000021E7                 mov     ebx, 27h ; '''
.text:00000000000021EC                 jmp     loc_2108
.text:00000000000021EC ; ---------------------------------------------------------------------------
.text:00000000000021F1                 align 8
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021F8                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000021F8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000021FD                 mov     ebx, 74h ; 't'
.text:0000000000002202
.text:0000000000002202 loc_2202:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002202                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002202                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002207                 setz    al
.text:000000000000220A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000220E                 jnz     loc_235E
.text:0000000000002214
.text:0000000000002214 loc_2214:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002214                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002214                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002219                 jnz     short loc_2280
.text:000000000000221B
.text:000000000000221B loc_221B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000221B                 mov     ebx, edx
.text:000000000000221D                 xor     r12d, r12d
.text:0000000000002220                 xor     eax, eax
.text:0000000000002222
.text:0000000000002222 loc_2222:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002222                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002222                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002227                 jnz     loc_211B
.text:000000000000222D                 jmp     loc_2139
.text:000000000000222D ; ---------------------------------------------------------------------------
.text:0000000000002232                 align 8
.text:0000000000002238
.text:0000000000002238 loc_2238:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002238                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002238                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000223D                 mov     ebx, 62h ; 'b'
.text:0000000000002242                 jmp     short loc_2214
.text:0000000000002242 ; ---------------------------------------------------------------------------
.text:0000000000002244                 align 8
.text:0000000000002248
.text:0000000000002248 loc_2248:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002248                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002248                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000224D                 jz      loc_2620
.text:0000000000002253                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002258                 jz      loc_2470
.text:000000000000225E
.text:000000000000225E loc_225E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000225E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002263                 jz      loc_2470
.text:0000000000002269                 cmp     [rsp+0E8h+n], 0
.text:000000000000226F                 jnz     loc_262B
.text:0000000000002275                 mov     ebx, 5Ch ; '\'
.text:000000000000227A                 nop     word ptr [rax+rax+00h]
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002280                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002280                 xor     r12d, r12d
.text:0000000000002283
.text:0000000000002283 loc_2283:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002283                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002283                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002288                 setz    dl
.text:000000000000228B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002290                 mov     eax, edx
.text:0000000000002292                 jnz     loc_2AE8
.text:0000000000002298                 mov     eax, r8d
.text:000000000000229B                 xor     eax, 1
.text:000000000000229E                 and     al, dl
.text:00000000000022A0                 jz      short loc_22D1
.text:00000000000022A2                 cmp     r13, r15
.text:00000000000022A5                 jbe     short loc_22AC
.text:00000000000022A7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000022AC
.text:00000000000022AC loc_22AC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000022AC                 lea     rdx, [r15+1]
.text:00000000000022B0                 cmp     r13, rdx
.text:00000000000022B3                 jbe     short loc_22BB
.text:00000000000022B5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000022BB
.text:00000000000022BB loc_22BB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000022BB                 lea     rdx, [r15+2]
.text:00000000000022BF                 cmp     r13, rdx
.text:00000000000022C2                 jbe     short loc_22CA
.text:00000000000022C4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000022CA
.text:00000000000022CA loc_22CA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000022CA                 add     r15, 3
.text:00000000000022CE                 mov     r8d, eax
.text:00000000000022D1
.text:00000000000022D1 loc_22D1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000022D1                 cmp     r13, r15
.text:00000000000022D4                 jbe     short loc_22DB
.text:00000000000022D6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000022DB
.text:00000000000022DB loc_22DB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000022DB                 add     r15, 1
.text:00000000000022DF                 add     rbp, 1
.text:00000000000022E3                 jmp     loc_2170
.text:00000000000022E3 ; ---------------------------------------------------------------------------
.text:00000000000022E8                 align 10h
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022F0                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000022F0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000022F5                 jnz     loc_24C3
.text:00000000000022FB                 xor     edx, edx
.text:00000000000022FD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002302                 jz      loc_221B
.text:0000000000002308                 add     rbp, 1
.text:000000000000230C                 jmp     loc_1FC8
.text:000000000000230C ; ---------------------------------------------------------------------------
.text:0000000000002311                 align 8
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002318                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002318                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000231D                 setz    dl
.text:0000000000002320                 xor     eax, eax
.text:0000000000002322                 jmp     loc_2108
.text:0000000000002322 ; ---------------------------------------------------------------------------
.text:0000000000002327                 align 10h
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002330                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002330                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002335                 mov     ebx, 61h ; 'a'
.text:000000000000233A                 jmp     loc_2214
.text:000000000000233A ; ---------------------------------------------------------------------------
.text:000000000000233F                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002340                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002345                 setz    dl
.text:0000000000002348
.text:0000000000002348 loc_2348:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002348                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002348                 test    rbp, rbp
.text:000000000000234B                 jnz     loc_20FC
.text:0000000000002351
.text:0000000000002351 loc_2351:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002351                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002351                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002356                 and     al, dl
.text:0000000000002358                 jz      loc_2108
.text:000000000000235E
.text:000000000000235E loc_235E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000235E                 mov     rbp, r11
.text:0000000000002361                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002369                 jmp     loc_2A69
.text:0000000000002369 ; ---------------------------------------------------------------------------
.text:000000000000236E                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002370                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002370                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002375                 setz    dl
.text:0000000000002378                 xor     r12d, r12d
.text:000000000000237B                 jmp     short loc_2351
.text:000000000000237B ; ---------------------------------------------------------------------------
.text:000000000000237D                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002380                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002380                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002385                 mov     ebx, 20h ; ' '
.text:000000000000238A                 setz    dl
.text:000000000000238D                 jmp     short loc_2351
.text:000000000000238D ; ---------------------------------------------------------------------------
.text:000000000000238F                 align 10h
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002390                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:0000000000002390                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002395                 mov     ebx, 72h ; 'r'
.text:000000000000239A                 jmp     loc_2202
.text:000000000000239A ; ---------------------------------------------------------------------------
.text:000000000000239F                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023A0                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000023A0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000023A5                 mov     ebx, 66h ; 'f'
.text:00000000000023AA                 jmp     loc_2214
.text:00000000000023AA ; ---------------------------------------------------------------------------
.text:00000000000023AF                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023B0                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000023B0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000023B5                 mov     ebx, 76h ; 'v'
.text:00000000000023BA                 jmp     loc_2214
.text:00000000000023BA ; ---------------------------------------------------------------------------
.text:00000000000023BF                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023C0                                         ; DATA XREF: .rodata:jpt_20CE↓o
.text:00000000000023C0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000023C5                 mov     ebx, 6Eh ; 'n'
.text:00000000000023CA                 jmp     loc_2202
.text:00000000000023CA ; ---------------------------------------------------------------------------
.text:00000000000023CF                 align 10h
.text:00000000000023D0
.text:00000000000023D0 def_245A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000023D0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000023D0                                         ; DATA XREF: ...
.text:00000000000023D0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000023D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000023D8
.text:00000000000023D8 def_20CE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000023D8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000023D8                                         ; DATA XREF: ...
.text:00000000000023D8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000023DE                 jnz     loc_2788
.text:00000000000023E4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000023E9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000023EE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000023F3                 call    ___ctype_b_loc
.text:00000000000023F8                 mov     rcx, [rax]
.text:00000000000023FB                 movzx   edx, bl
.text:00000000000023FE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002404                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000240A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000240F                 mov     edi, 1
.text:0000000000002414                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002418                 and     ax, 4000h
.text:000000000000241C                 setnz   r12b
.text:0000000000002420                 setz    al
.text:0000000000002423                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002427
.text:0000000000002427 loc_2427:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002427                 test    al, al
.text:0000000000002429                 jnz     loc_2DC1
.text:000000000000242F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002434                 setz    dl
.text:0000000000002437                 jmp     loc_2108
.text:0000000000002437 ; ---------------------------------------------------------------------------
.text:000000000000243C                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002440                 movzx   ebx, byte ptr [r9]
.text:0000000000002444                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002447                 ja      short def_245A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002449                 lea     rcx, jpt_245A
.text:0000000000002450                 movzx   edx, bl
.text:0000000000002453                 movsxd  rax, ds:(jpt_245A - 4D48h)[rcx+rdx*4]
.text:0000000000002457                 add     rax, rcx
.text:000000000000245A                 jmp     rax             ; switch jump
.text:000000000000245A ; ---------------------------------------------------------------------------
.text:000000000000245C                 align 20h
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002460                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002460                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002463                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002468                 jnz     loc_225E
.text:000000000000246E                 xchg    ax, ax
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002470                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002470                 mov     edx, 5Ch ; '\'
.text:0000000000002475                 mov     ebx, 5Ch ; '\'
.text:000000000000247A                 jmp     loc_2214
.text:000000000000247A ; ---------------------------------------------------------------------------
.text:000000000000247F                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002480                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002480                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002485                 xor     r10d, r10d
.text:0000000000002488                 mov     ebx, 66h ; 'f'
.text:000000000000248D                 jmp     loc_2214
.text:000000000000248D ; ---------------------------------------------------------------------------
.text:0000000000002492                 align 8
.text:0000000000002498
.text:0000000000002498 loc_2498:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002498                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002498                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000249D                 xor     r10d, r10d
.text:00000000000024A0                 mov     ebx, 6Eh ; 'n'
.text:00000000000024A5                 jmp     loc_2202
.text:00000000000024A5 ; ---------------------------------------------------------------------------
.text:00000000000024AA                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024B0                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000024B0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000024B5                 jmp     loc_2280
.text:00000000000024B5 ; ---------------------------------------------------------------------------
.text:00000000000024BA                 align 20h
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024C0                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000024C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000024C3
.text:00000000000024C3 loc_24C3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000024C3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024C8                 setz    dl
.text:00000000000024CB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024D0                 jnz     loc_306A
.text:00000000000024D6                 mov     eax, r8d
.text:00000000000024D9                 mov     rcx, r15
.text:00000000000024DC                 xor     eax, 1
.text:00000000000024DF                 and     al, dl
.text:00000000000024E1                 jz      short loc_2510
.text:00000000000024E3                 cmp     r13, r15
.text:00000000000024E6                 jbe     short loc_24ED
.text:00000000000024E8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000024ED
.text:00000000000024ED loc_24ED:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000024ED                 lea     rcx, [r15+1]
.text:00000000000024F1                 cmp     r13, rcx
.text:00000000000024F4                 jbe     short loc_24FC
.text:00000000000024F6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000024FC
.text:00000000000024FC loc_24FC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000024FC                 lea     rcx, [r15+2]
.text:0000000000002500                 cmp     r13, rcx
.text:0000000000002503                 ja      loc_2B39
.text:0000000000002509
.text:0000000000002509 loc_2509:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002509                 lea     rcx, [r15+3]
.text:000000000000250D                 mov     r8d, eax
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002510                 cmp     r13, rcx
.text:0000000000002513                 jbe     short loc_251A
.text:0000000000002515                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000251A
.text:000000000000251A loc_251A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000251A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000251F                 lea     r15, [rcx+1]
.text:0000000000002523                 jz      loc_2B29
.text:0000000000002529                 lea     rax, [rbp+1]
.text:000000000000252D                 cmp     rax, r11
.text:0000000000002530                 jnb     short loc_254B
.text:0000000000002532                 mov     rax, [rsp+0E8h+s]
.text:0000000000002537                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000253C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002540                 sub     eax, 30h ; '0'
.text:0000000000002543                 cmp     al, 9
.text:0000000000002545                 jbe     loc_2D79
.text:000000000000254B
.text:000000000000254B loc_254B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000254B                 mov     eax, r12d
.text:000000000000254E                 mov     ebx, 30h ; '0'
.text:0000000000002553                 xor     r12d, r12d
.text:0000000000002556                 jmp     loc_2108
.text:0000000000002556 ; ---------------------------------------------------------------------------
.text:000000000000255B                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002560                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002565                 mov     r12d, r10d
.text:0000000000002568                 setz    dl
.text:000000000000256B                 xor     r10d, r10d
.text:000000000000256E                 xor     eax, eax
.text:0000000000002570                 jmp     loc_2108
.text:0000000000002570 ; ---------------------------------------------------------------------------
.text:0000000000002575                 align 8
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002578                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002578                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000257D                 setz    dl
.text:0000000000002580                 xor     r10d, r10d
.text:0000000000002583                 jmp     loc_2348
.text:0000000000002583 ; ---------------------------------------------------------------------------
.text:0000000000002588                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002590                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002590                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002595                 setz    dl
.text:0000000000002598                 xor     r10d, r10d
.text:000000000000259B                 xor     r12d, r12d
.text:000000000000259E                 jmp     loc_2351
.text:000000000000259E ; ---------------------------------------------------------------------------
.text:00000000000025A3                 align 8
.text:00000000000025A8
.text:00000000000025A8 loc_25A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025A8                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000025A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000025AD                 mov     r12d, r10d
.text:00000000000025B0                 mov     ebx, 20h ; ' '
.text:00000000000025B5                 setz    dl
.text:00000000000025B8                 xor     r10d, r10d
.text:00000000000025BB                 jmp     loc_2351
.text:00000000000025C0 ; ---------------------------------------------------------------------------
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025C0                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000025C0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000025C5                 xor     r10d, r10d
.text:00000000000025C8                 mov     ebx, 72h ; 'r'
.text:00000000000025CD                 jmp     loc_2202
.text:00000000000025CD ; ---------------------------------------------------------------------------
.text:00000000000025D2                 align 8
.text:00000000000025D8
.text:00000000000025D8 loc_25D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025D8                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000025D8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000025DD                 jmp     loc_2280
.text:00000000000025DD ; ---------------------------------------------------------------------------
.text:00000000000025E2                 align 8
.text:00000000000025E8
.text:00000000000025E8 loc_25E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025E8                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:00000000000025E8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000025ED                 xor     r10d, r10d
.text:00000000000025F0                 mov     ebx, 74h ; 't'
.text:00000000000025F5                 jmp     loc_2202
.text:00000000000025F5 ; ---------------------------------------------------------------------------
.text:00000000000025FA                 align 20h
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002600                                         ; DATA XREF: .rodata:jpt_245A↓o
.text:0000000000002600                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002605                 jmp     loc_2280
.text:0000000000002605 ; ---------------------------------------------------------------------------
.text:000000000000260A                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002610                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002610                 xor     r10d, r10d
.text:0000000000002613                 jmp     loc_20B0
.text:0000000000002613 ; ---------------------------------------------------------------------------
.text:0000000000002618                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002620                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002625                 jnz     loc_2F90
.text:000000000000262B
.text:000000000000262B loc_262B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000262B                 add     rbp, 1
.text:000000000000262F                 mov     eax, r8d
.text:0000000000002632                 xor     r12d, r12d
.text:0000000000002635                 mov     ebx, 5Ch ; '\'
.text:000000000000263A                 jmp     loc_214C
.text:000000000000263A ; ---------------------------------------------------------------------------
.text:000000000000263F                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002640                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002645                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000264A                 mov     r12d, r8d
.text:000000000000264D                 mov     rbp, r11
.text:0000000000002650                 setz    dl
.text:0000000000002653                 mov     eax, ebx
.text:0000000000002655                 test    r15, r15
.text:0000000000002658                 setz    cl
.text:000000000000265B                 and     eax, edx
.text:000000000000265D                 and     al, cl
.text:000000000000265F                 jnz     loc_30C6
.text:0000000000002665                 mov     eax, ebx
.text:0000000000002667                 xor     eax, 1
.text:000000000000266A                 and     dl, al
.text:000000000000266C                 jz      loc_2FDC
.text:0000000000002672                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002677                 jz      loc_2FDA
.text:000000000000267D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002682                 jnz     loc_307D
.text:0000000000002688                 test    r13, r13
.text:000000000000268B                 setz    al
.text:000000000000268E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002694                 setnz   dl
.text:0000000000002697                 and     al, dl
.text:0000000000002699                 jz      loc_30BC
.text:000000000000269F                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000026A4
.text:00000000000026A4 loc_26A4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000026A4                 lea     rbx, asc_4ACD   ; "'"
.text:00000000000026AB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000026AF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000026B7                 mov     r15d, 1
.text:00000000000026BD                 mov     [rsp+0E8h+n], 1
.text:00000000000026C6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000026CB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000026D0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000026D4                 jmp     loc_1FB3
.text:00000000000026D4 ; ---------------------------------------------------------------------------
.text:00000000000026D9                 align 20h
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000026E0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026E5                 jnz     loc_2F90
.text:00000000000026EB                 test    r13, r13
.text:00000000000026EE                 jz      loc_2AF0
.text:00000000000026F4                 xor     edx, edx
.text:00000000000026F6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000026FC                 jnz     loc_2AF0
.text:0000000000002702
.text:0000000000002702 loc_2702:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002702                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002702                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002707                 add     r15, 3
.text:000000000000270B                 xor     eax, eax
.text:000000000000270D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002712                 xor     r8d, r8d
.text:0000000000002715                 mov     r13, rdx
.text:0000000000002718                 mov     ebx, 27h ; '''
.text:000000000000271D                 jmp     loc_2139
.text:000000000000271D ; ---------------------------------------------------------------------------
.text:0000000000002722                 align 8
.text:0000000000002728
.text:0000000000002728 loc_2728:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002728                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000272D                 jz      short loc_2750
.text:000000000000272F                 lea     rcx, [rbp+2]
.text:0000000000002733                 cmp     rcx, r11
.text:0000000000002736                 jnb     short loc_2750
.text:0000000000002738                 mov     rax, [rsp+0E8h+s]
.text:000000000000273D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002742                 jz      loc_2ED2
.text:0000000000002748                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002750                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002750                 xor     edx, edx
.text:0000000000002752                 xor     r12d, r12d
.text:0000000000002755                 xor     eax, eax
.text:0000000000002757                 mov     ebx, 3Fh ; '?'
.text:000000000000275C                 jmp     loc_2108
.text:000000000000275C ; ---------------------------------------------------------------------------
.text:0000000000002761                 align 8
.text:0000000000002768
.text:0000000000002768 loc_2768:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002768                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000276D                 jnz     loc_2F90
.text:0000000000002773                 xor     r12d, r12d
.text:0000000000002776                 xor     eax, eax
.text:0000000000002778                 mov     ebx, 3Fh ; '?'
.text:000000000000277D                 jmp     loc_2139
.text:000000000000277D ; ---------------------------------------------------------------------------
.text:0000000000002782                 align 8
.text:0000000000002788
.text:0000000000002788 loc_2788:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002788                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002790                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002794                 mov     [rsp+0E8h+var_48], 0
.text:00000000000027A0                 mov     [rsp+0E8h+ps], rax
.text:00000000000027A5                 jnz     short loc_27D4
.text:00000000000027A7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000027AC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000027B1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000027B6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000027BB                 call    _strlen
.text:00000000000027C0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000027C6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000027CC                 mov     r11, rax
.text:00000000000027CF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000027D4
.text:00000000000027D4 loc_27D4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000027D4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000027DC                 xor     ecx, ecx
.text:00000000000027DE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000027E2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000027E7                 mov     rbx, rcx
.text:00000000000027EA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000027F2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000027F7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000027FC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002804                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002809                 mov     [rsp+0E8h+var_78], r13
.text:000000000000280E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002813
.text:0000000000002813 loc_2813:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002813                 mov     rax, [rsp+0E8h+s]
.text:0000000000002818                 lea     r14, [rbp+rbx+0]
.text:000000000000281D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002822                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002827                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000282C                 lea     r13, [rax+r14]
.text:0000000000002830                 sub     rdx, r14
.text:0000000000002833                 mov     rsi, r13
.text:0000000000002836                 call    rpl_mbrtowc
.text:000000000000283B                 test    rax, rax
.text:000000000000283E                 mov     r15, rax
.text:0000000000002841                 jz      short loc_2891
.text:0000000000002843                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002847                 jz      loc_2E65
.text:000000000000284D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002851                 jz      loc_2DF1
.text:0000000000002857                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000285C                 setz    al
.text:000000000000285F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002863                 jnz     loc_2A00
.text:0000000000002869
.text:0000000000002869 loc_2869:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002869                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002869                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002870                 call    _iswprint
.text:0000000000002875                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000287A                 test    eax, eax
.text:000000000000287C                 mov     eax, 0
.text:0000000000002881                 cmovz   r12d, eax
.text:0000000000002885                 add     rbx, r15
.text:0000000000002888                 call    _mbsinit
.text:000000000000288D                 test    eax, eax
.text:000000000000288F                 jz      short loc_2813
.text:0000000000002891
.text:0000000000002891 loc_2891:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002891                 mov     edx, r12d
.text:0000000000002894                 mov     rdi, rbx
.text:0000000000002897                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000289D                 xor     edx, 1
.text:00000000000028A0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000028A5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000028AB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000028AF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000028B7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000028BC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000028C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000028C6
.text:00000000000028C6 loc_28C6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000028C6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000028C6                 cmp     rdi, 1
.text:00000000000028CA                 jbe     loc_2ECB
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000028D0                 mov     rcx, rdi
.text:00000000000028D3                 xor     esi, esi
.text:00000000000028D5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000028DB                 add     rcx, rbp
.text:00000000000028DE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000028E3                 jmp     loc_299E
.text:00000000000028E3 ; ---------------------------------------------------------------------------
.text:00000000000028E8                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000028F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028F5                 setz    al
.text:00000000000028F8                 test    r9b, r9b
.text:00000000000028FB                 jnz     loc_2DB0
.text:0000000000002901                 mov     esi, r8d
.text:0000000000002904                 xor     esi, 1
.text:0000000000002907                 and     al, sil
.text:000000000000290A                 jz      short loc_293B
.text:000000000000290C                 cmp     r13, r15
.text:000000000000290F                 jbe     short loc_2916
.text:0000000000002911                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002916
.text:0000000000002916 loc_2916:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002916                 lea     rsi, [r15+1]
.text:000000000000291A                 cmp     r13, rsi
.text:000000000000291D                 jbe     short loc_2925
.text:000000000000291F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002925
.text:0000000000002925 loc_2925:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002925                 lea     rsi, [r15+2]
.text:0000000000002929                 cmp     r13, rsi
.text:000000000000292C                 jbe     short loc_2934
.text:000000000000292E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002934
.text:0000000000002934 loc_2934:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002934                 add     r15, 3
.text:0000000000002938                 mov     r8d, eax
.text:000000000000293B
.text:000000000000293B loc_293B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000293B                 cmp     r13, r15
.text:000000000000293E                 jbe     short loc_2945
.text:0000000000002940                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002945
.text:0000000000002945 loc_2945:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002945                 lea     rax, [r15+1]
.text:0000000000002949                 cmp     r13, rax
.text:000000000000294C                 jbe     short loc_295B
.text:000000000000294E                 mov     eax, ebx
.text:0000000000002950                 shr     al, 6
.text:0000000000002953                 add     eax, 30h ; '0'
.text:0000000000002956                 mov     [r14+r15+1], al
.text:000000000000295B
.text:000000000000295B loc_295B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000295B                 lea     rax, [r15+2]
.text:000000000000295F                 cmp     r13, rax
.text:0000000000002962                 jbe     short loc_2974
.text:0000000000002964                 mov     eax, ebx
.text:0000000000002966                 shr     al, 3
.text:0000000000002969                 and     eax, 7
.text:000000000000296C                 add     eax, 30h ; '0'
.text:000000000000296F                 mov     [r14+r15+2], al
.text:0000000000002974
.text:0000000000002974 loc_2974:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002974                 and     ebx, 7
.text:0000000000002977                 add     rbp, 1
.text:000000000000297B                 add     r15, 3
.text:000000000000297F                 add     ebx, 30h ; '0'
.text:0000000000002982                 cmp     rbp, rcx
.text:0000000000002985                 jnb     loc_2170
.text:000000000000298B                 mov     esi, edx
.text:000000000000298D
.text:000000000000298D loc_298D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000298D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000298D                 cmp     r13, r15
.text:0000000000002990                 jbe     short loc_2996
.text:0000000000002992                 mov     [r14+r15], bl
.text:0000000000002996
.text:0000000000002996 loc_2996:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002996                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000299A                 add     r15, 1
.text:000000000000299E
.text:000000000000299E loc_299E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000299E                 test    dl, dl
.text:00000000000029A0                 jnz     loc_28F0
.text:00000000000029A6                 mov     eax, esi
.text:00000000000029A8                 xor     eax, 1
.text:00000000000029AB                 and     eax, r8d
.text:00000000000029AE                 test    r10b, r10b
.text:00000000000029B1                 jz      short loc_29C1
.text:00000000000029B3                 cmp     r13, r15
.text:00000000000029B6                 jbe     short loc_29BD
.text:00000000000029B8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000029BD
.text:00000000000029BD loc_29BD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000029BD                 add     r15, 1
.text:00000000000029C1
.text:00000000000029C1 loc_29C1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000029C1                 add     rbp, 1
.text:00000000000029C5                 cmp     rbp, rcx
.text:00000000000029C8                 jnb     loc_214C
.text:00000000000029CE                 test    al, al
.text:00000000000029D0                 jz      loc_2DCE
.text:00000000000029D6                 cmp     r13, r15
.text:00000000000029D9                 jbe     short loc_29E0
.text:00000000000029DB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000029E0                 lea     rax, [r15+1]
.text:00000000000029E4                 cmp     r13, rax
.text:00000000000029E7                 jbe     short loc_29EF
.text:00000000000029E9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000029EF
.text:00000000000029EF loc_29EF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000029EF                 add     r15, 2
.text:00000000000029F3                 xor     r10d, r10d
.text:00000000000029F6                 xor     r8d, r8d
.text:00000000000029F9                 jmp     short loc_298D
.text:00000000000029F9 ; ---------------------------------------------------------------------------
.text:00000000000029FB                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002A00                 cmp     r15, 1
.text:0000000000002A04                 jz      loc_2869
.text:0000000000002A0A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002A0F                 lea     rcx, [rdi+r15]
.text:0000000000002A13                 lea     rdx, [rdi+r14+1]
.text:0000000000002A18                 lea     r8, [rcx+r14]
.text:0000000000002A1C                 jmp     short loc_2A2D
.text:0000000000002A1C ; ---------------------------------------------------------------------------
.text:0000000000002A1E                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002A20                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002A20                 add     rdx, 1
.text:0000000000002A24                 cmp     r8, rdx
.text:0000000000002A27                 jz      loc_2869
.text:0000000000002A2D
.text:0000000000002A2D loc_2A2D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002A2D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002A30                 sub     ecx, 5Bh ; '['
.text:0000000000002A33                 cmp     cl, 21h ; '!'
.text:0000000000002A36                 ja      short loc_2A20
.text:0000000000002A38                 mov     esi, 1
.text:0000000000002A3D                 shl     rsi, cl
.text:0000000000002A40                 mov     rcx, rsi
.text:0000000000002A43                 mov     rsi, 20000002Bh
.text:0000000000002A4D                 test    rcx, rsi
.text:0000000000002A50                 jz      short loc_2A20
.text:0000000000002A52                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A57                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A5C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002A61                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A69
.text:0000000000002A69 loc_2A69:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002A69                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002A69                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002A6E                 jz      short loc_2A80
.text:0000000000002A70                 test    al, al
.text:0000000000002A72                 mov     eax, 4
.text:0000000000002A77                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002A7C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002A80                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002A80                 sub     rsp, 8
.text:0000000000002A84                 mov     rcx, rbp
.text:0000000000002A87                 mov     rsi, r13
.text:0000000000002A8A                 push    [rsp+0F0h+var_88]
.text:0000000000002A8E                 push    [rsp+0F8h+var_80]
.text:0000000000002A92                 mov     rdi, r14
.text:0000000000002A95                 push    0
.text:0000000000002A97                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002A9F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002AA4                 mov     rdx, [rsp+108h+s]
.text:0000000000002AA9                 and     r9d, 0FFFFFFFDh
.text:0000000000002AAD                 call    quotearg_buffer_restyled
.text:0000000000002AB2                 add     rsp, 20h
.text:0000000000002AB6                 mov     r15, rax
.text:0000000000002AB9
.text:0000000000002AB9 loc_2AB9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002AB9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002AB9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002AC1                 xor     rbx, fs:28h
.text:0000000000002ACA                 mov     rax, r15
.text:0000000000002ACD                 jnz     loc_30D3
.text:0000000000002AD3                 add     rsp, 0B8h
.text:0000000000002ADA                 pop     rbx
.text:0000000000002ADB                 pop     rbp
.text:0000000000002ADC                 pop     r12
.text:0000000000002ADE                 pop     r13
.text:0000000000002AE0                 pop     r14
.text:0000000000002AE2                 pop     r15
.text:0000000000002AE4                 retn
.text:0000000000002AE4 ; ---------------------------------------------------------------------------
.text:0000000000002AE5                 align 8
.text:0000000000002AE8
.text:0000000000002AE8 loc_2AE8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002AE8                 mov     rbp, r11
.text:0000000000002AEB                 jmp     loc_2A69
.text:0000000000002AF0 ; ---------------------------------------------------------------------------
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002AF0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002AF0                 cmp     r13, r15
.text:0000000000002AF3                 jbe     short loc_2AFA
.text:0000000000002AF5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002AFA
.text:0000000000002AFA loc_2AFA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002AFA                 lea     rax, [r15+1]
.text:0000000000002AFE                 cmp     r13, rax
.text:0000000000002B01                 jbe     short loc_2B09
.text:0000000000002B03                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002B09
.text:0000000000002B09 loc_2B09:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002B09                 lea     rax, [r15+2]
.text:0000000000002B0D                 cmp     r13, rax
.text:0000000000002B10                 jbe     loc_3102
.text:0000000000002B16                 mov     rdx, r13
.text:0000000000002B19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B1F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002B24                 jmp     loc_2702
.text:0000000000002B29 ; ---------------------------------------------------------------------------
.text:0000000000002B29
.text:0000000000002B29 loc_2B29:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002B29                 mov     eax, r12d
.text:0000000000002B2C                 mov     ebx, 30h ; '0'
.text:0000000000002B31                 xor     r12d, r12d
.text:0000000000002B34                 jmp     loc_2139
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B39
.text:0000000000002B39 loc_2B39:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002B39                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B3F                 jmp     loc_2509
.text:0000000000002B44 ; ---------------------------------------------------------------------------
.text:0000000000002B44
.text:0000000000002B44 loc_2B44:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B44                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002B44                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002B46                 jnz     loc_1F73        ; jumptable 00000000000121F1 case 1
.text:0000000000002B4C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B51
.text:0000000000002B51 loc_2B51:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002B51                 test    r13, r13
.text:0000000000002B54                 jnz     loc_30EA
.text:0000000000002B5A                 lea     rax, asc_4ACD   ; "'"
.text:0000000000002B61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B6A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B74                 xor     r12d, r12d
.text:0000000000002B77                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B7C                 mov     [rsp+0E8h+n], 1
.text:0000000000002B85                 mov     [rsp+0E8h+s2], rax
.text:0000000000002B8A                 mov     r15d, 1
.text:0000000000002B90                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B98                 jmp     loc_1FB3
.text:0000000000002B98 ; ---------------------------------------------------------------------------
.text:0000000000002B9D                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BA0                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002BA0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002BA2                 jnz     loc_2F9D
.text:0000000000002BA8                 test    r13, r13
.text:0000000000002BAB                 jz      loc_2DD6
.text:0000000000002BB1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002BB5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BBA                 xor     r12d, r12d
.text:0000000000002BBD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BC2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BCB
.text:0000000000002BCB loc_2BCB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002BCB                 lea     rax, unk_4ACB
.text:0000000000002BD2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002BD7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BDC                 mov     [rsp+0E8h+n], 1
.text:0000000000002BE5                 mov     r15d, 1
.text:0000000000002BEB                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BF0                 jmp     loc_1FB3
.text:0000000000002BF5 ; ---------------------------------------------------------------------------
.text:0000000000002BF5
.text:0000000000002BF5 loc_2BF5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BF5                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002BF5                 lea     rax, unk_4ACB   ; jumptable 00000000000121F1 case 6
.text:0000000000002BFC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C01                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C06                 xor     r12d, r12d
.text:0000000000002C09                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C12                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002C17                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C1C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C25                 xor     r15d, r15d
.text:0000000000002C28                 mov     [rsp+0E8h+s2], rax
.text:0000000000002C2D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002C35                 jmp     loc_1FB3
.text:0000000000002C3A ; ---------------------------------------------------------------------------
.text:0000000000002C3A
.text:0000000000002C3A loc_2C3A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C3A                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002C3A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002C3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C44                 xor     r12d, r12d
.text:0000000000002C47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C50                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C55                 xor     r15d, r15d
.text:0000000000002C58                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C5D                 mov     [rsp+0E8h+n], 0
.text:0000000000002C66                 mov     [rsp+0E8h+s2], 0
.text:0000000000002C6F                 jmp     loc_1FB3
.text:0000000000002C74 ; ---------------------------------------------------------------------------
.text:0000000000002C74
.text:0000000000002C74 loc_2C74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C74                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002C74                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002C79                 jz      short loc_2CD1
.text:0000000000002C7B                 lea     rsi, asc_4ACF   ; "`"
.text:0000000000002C82                 xor     edi, edi        ; domainname
.text:0000000000002C84                 mov     edx, 5          ; category
.text:0000000000002C89                 call    _dcgettext
.text:0000000000002C8E                 mov     rcx, rax
.text:0000000000002C91                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C96                 lea     rax, asc_4ACF   ; "`"
.text:0000000000002C9D                 cmp     rcx, rax
.text:0000000000002CA0                 jz      loc_303E
.text:0000000000002CA6
.text:0000000000002CA6 loc_2CA6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002CA6                 lea     rsi, asc_4ACD   ; "'"
.text:0000000000002CAD                 xor     edi, edi        ; domainname
.text:0000000000002CAF                 mov     edx, 5          ; category
.text:0000000000002CB4                 call    _dcgettext
.text:0000000000002CB9                 mov     rcx, rax
.text:0000000000002CBC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002CC1                 lea     rax, asc_4ACD   ; "'"
.text:0000000000002CC8                 cmp     rcx, rax
.text:0000000000002CCB                 jz      loc_3054
.text:0000000000002CD1
.text:0000000000002CD1 loc_2CD1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002CD1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002CD1                 xor     r15d, r15d
.text:0000000000002CD4                 test    ebx, ebx
.text:0000000000002CD6                 jz      loc_2E9D
.text:0000000000002CDC
.text:0000000000002CDC loc_2CDC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002CDC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002CDC                 test    ebx, ebx
.text:0000000000002CDE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002CE3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002CE8                 xor     r12d, r12d
.text:0000000000002CEB                 mov     rdi, rbx        ; s
.text:0000000000002CEE                 call    _strlen
.text:0000000000002CF3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002CF8                 mov     [rsp+0E8h+n], rax
.text:0000000000002CFD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D02                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D07                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D10                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D15                 jmp     loc_1FB3
.text:0000000000002D1A ; ---------------------------------------------------------------------------
.text:0000000000002D1A
.text:0000000000002D1A loc_2D1A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D1A                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002D1A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002D1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D24                 xor     r12d, r12d
.text:0000000000002D27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D30                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D35                 xor     r15d, r15d
.text:0000000000002D38                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002D3D                 mov     [rsp+0E8h+n], 0
.text:0000000000002D46                 mov     [rsp+0E8h+s2], 0
.text:0000000000002D4F                 jmp     loc_1FB3
.text:0000000000002D54 ; ---------------------------------------------------------------------------
.text:0000000000002D54
.text:0000000000002D54 loc_2D54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D54                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002D54                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002D59                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D5E                 xor     r12d, r12d
.text:0000000000002D61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D6A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002D6F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D74                 jmp     loc_1F93
.text:0000000000002D79 ; ---------------------------------------------------------------------------
.text:0000000000002D79
.text:0000000000002D79 loc_2D79:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002D79                 cmp     r13, r15
.text:0000000000002D7C                 jbe     short loc_2D83
.text:0000000000002D7E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002D83
.text:0000000000002D83 loc_2D83:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002D83                 lea     rax, [rcx+2]
.text:0000000000002D87                 cmp     r13, rax
.text:0000000000002D8A                 jbe     short loc_2D92
.text:0000000000002D8C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002D92
.text:0000000000002D92 loc_2D92:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002D92                 mov     eax, r12d
.text:0000000000002D95                 lea     r15, [rcx+3]
.text:0000000000002D99                 xor     r12d, r12d
.text:0000000000002D9C                 mov     ebx, 30h ; '0'
.text:0000000000002DA1                 jmp     loc_2108
.text:0000000000002DA1 ; ---------------------------------------------------------------------------
.text:0000000000002DA6                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002DB0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002DB5                 mov     rbp, r11
.text:0000000000002DB8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002DBC                 jmp     loc_2A69
.text:0000000000002DC1 ; ---------------------------------------------------------------------------
.text:0000000000002DC1
.text:0000000000002DC1 loc_2DC1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002DC1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002DC6                 xor     r12d, r12d
.text:0000000000002DC9                 jmp     loc_28D0
.text:0000000000002DCE ; ---------------------------------------------------------------------------
.text:0000000000002DCE
.text:0000000000002DCE loc_2DCE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002DCE                 xor     r10d, r10d
.text:0000000000002DD1                 jmp     loc_298D
.text:0000000000002DD6 ; ---------------------------------------------------------------------------
.text:0000000000002DD6
.text:0000000000002DD6 loc_2DD6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002DD6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DDF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DE4                 xor     r12d, r12d
.text:0000000000002DE7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DEC                 jmp     loc_2BCB
.text:0000000000002DF1 ; ---------------------------------------------------------------------------
.text:0000000000002DF1
.text:0000000000002DF1 loc_2DF1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002DF1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002DF6                 mov     rsi, r14
.text:0000000000002DF9                 mov     rcx, r13
.text:0000000000002DFC                 mov     rax, rbx
.text:0000000000002DFF                 mov     rdi, rbx
.text:0000000000002E02                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002E08                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002E0D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002E15                 cmp     rsi, r11
.text:0000000000002E18                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002E1E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002E26                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E2B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E30                 jnb     short loc_2E58
.text:0000000000002E32                 cmp     byte ptr [rcx], 0
.text:0000000000002E35                 jnz     short loc_2E47
.text:0000000000002E37                 jmp     short loc_2E58
.text:0000000000002E37 ; ---------------------------------------------------------------------------
.text:0000000000002E39                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002E40                 cmp     byte ptr [r9+rax], 0
.text:0000000000002E45                 jz      short loc_2E55
.text:0000000000002E47
.text:0000000000002E47 loc_2E47:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002E47                 add     rax, 1
.text:0000000000002E4B                 lea     rdx, [rbp+rax+0]
.text:0000000000002E50                 cmp     r11, rdx
.text:0000000000002E53                 ja      short loc_2E40
.text:0000000000002E55
.text:0000000000002E55 loc_2E55:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002E55                 mov     rdi, rax
.text:0000000000002E58
.text:0000000000002E58 loc_2E58:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002E58                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002E58                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E5D                 xor     r12d, r12d
.text:0000000000002E60                 jmp     loc_28C6
.text:0000000000002E65 ; ---------------------------------------------------------------------------
.text:0000000000002E65
.text:0000000000002E65 loc_2E65:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002E65                 mov     rdi, rbx
.text:0000000000002E68                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002E6E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002E73                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002E79                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002E81                 xor     r12d, r12d
.text:0000000000002E84                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E89                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E8E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002E93                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E98                 jmp     loc_28C6
.text:0000000000002E9D ; ---------------------------------------------------------------------------
.text:0000000000002E9D
.text:0000000000002E9D loc_2E9D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002E9D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002EA2                 movzx   eax, byte ptr [rdx]
.text:0000000000002EA5                 test    al, al
.text:0000000000002EA7                 jz      loc_2CDC
.text:0000000000002EAD                 nop     dword ptr [rax]
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002EB0                 cmp     r13, r15
.text:0000000000002EB3                 jbe     short loc_2EB9
.text:0000000000002EB5                 mov     [r14+r15], al
.text:0000000000002EB9
.text:0000000000002EB9 loc_2EB9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002EB9                 add     r15, 1
.text:0000000000002EBD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002EC2                 test    al, al
.text:0000000000002EC4                 jnz     short loc_2EB0
.text:0000000000002EC6                 jmp     loc_2CDC
.text:0000000000002ECB ; ---------------------------------------------------------------------------
.text:0000000000002ECB
.text:0000000000002ECB loc_2ECB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002ECB                 mov     eax, edx
.text:0000000000002ECD                 jmp     loc_2427
.text:0000000000002ED2 ; ---------------------------------------------------------------------------
.text:0000000000002ED2
.text:0000000000002ED2 loc_2ED2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002ED2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002ED6                 cmp     bl, 3Eh ; '>'
.text:0000000000002ED9                 ja      loc_2750
.text:0000000000002EDF                 mov     rax, 7000A38200000000h
.text:0000000000002EE9                 bt      rax, rbx
.text:0000000000002EED                 jnb     loc_2750
.text:0000000000002EF3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002EF8                 jnz     loc_30E2
.text:0000000000002EFE                 cmp     r13, r15
.text:0000000000002F01                 jbe     short loc_2F08
.text:0000000000002F03                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002F08
.text:0000000000002F08 loc_2F08:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002F08                 lea     rax, [r15+1]
.text:0000000000002F0C                 cmp     r13, rax
.text:0000000000002F0F                 jbe     short loc_2F17
.text:0000000000002F11                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002F17
.text:0000000000002F17 loc_2F17:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002F17                 lea     rax, [r15+2]
.text:0000000000002F1B                 cmp     r13, rax
.text:0000000000002F1E                 jbe     short loc_2F26
.text:0000000000002F20                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002F26
.text:0000000000002F26 loc_2F26:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002F26                 lea     rax, [r15+3]
.text:0000000000002F2A                 cmp     r13, rax
.text:0000000000002F2D                 jbe     short loc_2F35
.text:0000000000002F2F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002F35
.text:0000000000002F35 loc_2F35:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002F35                 add     r15, 4
.text:0000000000002F39                 xor     edx, edx
.text:0000000000002F3B                 xor     r12d, r12d
.text:0000000000002F3E                 xor     eax, eax
.text:0000000000002F40                 mov     rbp, rcx
.text:0000000000002F43                 jmp     loc_2108
.text:0000000000002F48 ; ---------------------------------------------------------------------------
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F48                                         ; DATA XREF: .rodata:jpt_1F71↓o
.text:0000000000002F48                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002F4A                 jz      loc_30D8
.text:0000000000002F50                 lea     rax, asc_4ACD   ; "'"
.text:0000000000002F57                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F5C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F61                 xor     r12d, r12d
.text:0000000000002F64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F6D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F72                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F77                 mov     [rsp+0E8h+n], 1
.text:0000000000002F80                 xor     r15d, r15d
.text:0000000000002F83                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F88                 jmp     loc_1FB3
.text:0000000000002F88 ; ---------------------------------------------------------------------------
.text:0000000000002F8D                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002F90                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002F90                 mov     rbp, r11
.text:0000000000002F93                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002F98                 jmp     loc_2A69
.text:0000000000002F9D ; ---------------------------------------------------------------------------
.text:0000000000002F9D
.text:0000000000002F9D loc_2F9D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002F9D                 lea     rax, unk_4ACB
.text:0000000000002FA4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FA9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FAE                 xor     r12d, r12d
.text:0000000000002FB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FBA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002FBF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FC4                 mov     [rsp+0E8h+n], 1
.text:0000000000002FCD                 xor     r15d, r15d
.text:0000000000002FD0                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FD5                 jmp     loc_1FB3
.text:0000000000002FDA ; ---------------------------------------------------------------------------
.text:0000000000002FDA
.text:0000000000002FDA loc_2FDA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000002FDA                 mov     eax, edx
.text:0000000000002FDC
.text:0000000000002FDC loc_2FDC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000002FDC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000002FDC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000002FE1                 test    rbx, rbx
.text:0000000000002FE4                 jz      short loc_3012
.text:0000000000002FE6                 test    al, al
.text:0000000000002FE8                 jz      short loc_3012
.text:0000000000002FEA                 movzx   ecx, byte ptr [rbx]
.text:0000000000002FED                 mov     rax, rbx
.text:0000000000002FF0                 test    cl, cl
.text:0000000000002FF2                 jz      short loc_3012
.text:0000000000002FF4                 mov     rdx, r15
.text:0000000000002FF7                 sub     rax, r15
.text:0000000000002FFA
.text:0000000000002FFA loc_2FFA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000002FFA                 cmp     r13, rdx
.text:0000000000002FFD                 jbe     short loc_3003
.text:0000000000002FFF                 mov     [r14+rdx], cl
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003003                 add     rdx, 1
.text:0000000000003007                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000300B                 test    cl, cl
.text:000000000000300D                 jnz     short loc_2FFA
.text:000000000000300F                 mov     r15, rdx
.text:0000000000003012
.text:0000000000003012 loc_3012:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003012                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003012                 cmp     r13, r15
.text:0000000000003015                 jbe     loc_2AB9
.text:000000000000301B                 mov     byte ptr [r14+r15], 0
.text:0000000000003020                 jmp     loc_2AB9
.text:0000000000003025 ; ---------------------------------------------------------------------------
.text:0000000000003025
.text:0000000000003025 loc_3025:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003025                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000302A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000302F                 mov     rbp, r11
.text:0000000000003032                 setz    al
.text:0000000000003035                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003039                 jmp     loc_2A69
.text:000000000000303E ; ---------------------------------------------------------------------------
.text:000000000000303E
.text:000000000000303E loc_303E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000303E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003042                 mov     rdi, rcx
.text:0000000000003045                 call    gettext_quote
.text:000000000000304A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000304F                 jmp     loc_2CA6
.text:0000000000003054 ; ---------------------------------------------------------------------------
.text:0000000000003054
.text:0000000000003054 loc_3054:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003054                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003058                 mov     rdi, rcx
.text:000000000000305B                 call    gettext_quote
.text:0000000000003060                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003065                 jmp     loc_2CD1
.text:000000000000306A ; ---------------------------------------------------------------------------
.text:000000000000306A
.text:000000000000306A loc_306A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000306A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000306F                 mov     rbp, r11
.text:0000000000003072                 mov     eax, edx
.text:0000000000003074                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003078                 jmp     loc_2A69
.text:000000000000307D ; ---------------------------------------------------------------------------
.text:000000000000307D
.text:000000000000307D loc_307D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000307D                 sub     rsp, 8
.text:0000000000003081                 mov     r8d, 5
.text:0000000000003087                 mov     rcx, r11
.text:000000000000308A                 push    [rsp+0F0h+var_88]
.text:000000000000308E                 push    [rsp+0F8h+var_80]
.text:0000000000003092                 mov     rdi, r14
.text:0000000000003095                 push    [rsp+100h+var_C8]
.text:0000000000003099                 mov     r9d, [rsp+108h+var_70]
.text:00000000000030A1                 mov     rdx, [rsp+108h+s]
.text:00000000000030A6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000030AB                 call    quotearg_buffer_restyled
.text:00000000000030B0                 add     rsp, 20h
.text:00000000000030B4                 mov     r15, rax
.text:00000000000030B7                 jmp     loc_2AB9
.text:00000000000030BC ; ---------------------------------------------------------------------------
.text:00000000000030BC
.text:00000000000030BC loc_30BC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000030BC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000030C1                 jmp     loc_2FDC
.text:00000000000030C6 ; ---------------------------------------------------------------------------
.text:00000000000030C6
.text:00000000000030C6 loc_30C6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000030C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030CE                 jmp     loc_2A69
.text:00000000000030D3 ; ---------------------------------------------------------------------------
.text:00000000000030D3
.text:00000000000030D3 loc_30D3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000030D3                 call    ___stack_chk_fail
.text:00000000000030D8 ; ---------------------------------------------------------------------------
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000030D8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000030DD                 jmp     loc_2B51
.text:00000000000030E2 ; ---------------------------------------------------------------------------
.text:00000000000030E2
.text:00000000000030E2 loc_30E2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000030E2                 mov     rbp, r11
.text:00000000000030E5                 jmp     loc_2A80
.text:00000000000030EA ; ---------------------------------------------------------------------------
.text:00000000000030EA
.text:00000000000030EA loc_30EA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000030EA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000030EF                 xor     eax, eax
.text:00000000000030F1                 xor     r12d, r12d
.text:00000000000030F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030FD                 jmp     loc_26A4
.text:0000000000003102 ; ---------------------------------------------------------------------------
.text:0000000000003102
.text:0000000000003102 loc_3102:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003102                 mov     rdx, r13
.text:0000000000003105                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000310A                 jmp     loc_2702
.text:000000000000310F ; ---------------------------------------------------------------------------
.text:000000000000310F
.text:000000000000310F def_1F71:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000310F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000310F ; } // starts at 1EE0
.text:000000000000310F quotearg_buffer_restyled endp
.text:000000000000310F
.text:000000000000310F ; ---------------------------------------------------------------------------
.text:0000000000003114                 align 20h
.text:0000000000003120
.text:0000000000003120 ; =============== S U B R O U T I N E =======================================
.text:0000000000003120
.text:0000000000003120
.text:0000000000003120 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003120                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003120
.text:0000000000003120 var_50          = qword ptr -50h
.text:0000000000003120 var_48          = qword ptr -48h
.text:0000000000003120 var_40          = dword ptr -40h
.text:0000000000003120 var_3C          = dword ptr -3Ch
.text:0000000000003120
.text:0000000000003120 ; __unwind {
.text:0000000000003120                 push    r15
.text:0000000000003122                 push    r14
.text:0000000000003124                 movsxd  r15, edi
.text:0000000000003127                 push    r13
.text:0000000000003129                 push    r12
.text:000000000000312B                 mov     r14, rdx
.text:000000000000312E                 push    rbp
.text:000000000000312F                 push    rbx
.text:0000000000003130                 mov     rbp, rcx
.text:0000000000003133                 sub     rsp, 28h
.text:0000000000003137                 mov     [rsp+58h+var_50], rsi
.text:000000000000313C                 call    ___errno_location
.text:0000000000003141                 mov     r13, rax
.text:0000000000003144                 mov     eax, [rax]
.text:0000000000003146                 test    r15d, r15d
.text:0000000000003149                 mov     rbx, cs:slotvec
.text:0000000000003150                 mov     [rsp+58h+var_40], eax
.text:0000000000003154                 js      loc_32C1
.text:000000000000315A                 cmp     cs:nslots, r15d
.text:0000000000003161                 jg      short loc_31C5
.text:0000000000003163                 cmp     r15d, 7FFFFFFFh
.text:000000000000316A                 jz      loc_32C6
.text:0000000000003170                 lea     r12d, [r15+1]
.text:0000000000003174                 lea     rax, slotvec0
.text:000000000000317B                 movsxd  rsi, r12d
.text:000000000000317E                 shl     rsi, 4
.text:0000000000003182                 cmp     rbx, rax
.text:0000000000003185                 jz      loc_32A0
.text:000000000000318B                 mov     rdi, rbx
.text:000000000000318E                 call    xrealloc
.text:0000000000003193                 mov     rbx, rax
.text:0000000000003196                 mov     cs:slotvec, rax
.text:000000000000319D
.text:000000000000319D loc_319D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000319D                 movsxd  rdi, cs:nslots
.text:00000000000031A4                 mov     edx, r12d
.text:00000000000031A7                 xor     esi, esi        ; c
.text:00000000000031A9                 sub     edx, edi
.text:00000000000031AB                 shl     rdi, 4
.text:00000000000031AF                 movsxd  rdx, edx
.text:00000000000031B2                 add     rdi, rbx        ; s
.text:00000000000031B5                 shl     rdx, 4          ; n
.text:00000000000031B9                 call    _memset
.text:00000000000031BE                 mov     cs:nslots, r12d
.text:00000000000031C5
.text:00000000000031C5 loc_31C5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000031C5                 mov     eax, [rbp+4]
.text:00000000000031C8                 shl     r15, 4
.text:00000000000031CC                 sub     rsp, 8
.text:00000000000031D0                 add     rbx, r15
.text:00000000000031D3                 lea     r15, [rbp+8]
.text:00000000000031D7                 mov     r8d, [rbp+0]
.text:00000000000031DB                 mov     r11, [rbx]
.text:00000000000031DE                 mov     r12, [rbx+8]
.text:00000000000031E2                 mov     rcx, r14
.text:00000000000031E5                 or      eax, 1
.text:00000000000031E8                 mov     [rsp+60h+var_3C], eax
.text:00000000000031EC                 push    qword ptr [rbp+30h]
.text:00000000000031EF                 mov     r9d, eax
.text:00000000000031F2                 push    qword ptr [rbp+28h]
.text:00000000000031F5                 push    r15
.text:00000000000031F7                 mov     rsi, r11
.text:00000000000031FA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000031FF                 mov     rdi, r12
.text:0000000000003202                 mov     [rsp+78h+var_48], r11
.text:0000000000003207                 call    quotearg_buffer_restyled
.text:000000000000320C                 add     rsp, 20h
.text:0000000000003210                 mov     r11, [rsp+58h+var_48]
.text:0000000000003215                 cmp     r11, rax
.text:0000000000003218                 ja      short loc_3281
.text:000000000000321A                 lea     rsi, [rax+1]
.text:000000000000321E                 lea     rax, slot0
.text:0000000000003225                 cmp     r12, rax
.text:0000000000003228                 mov     [rbx], rsi
.text:000000000000322B                 jz      short loc_323F
.text:000000000000322D                 mov     rdi, r12        ; ptr
.text:0000000000003230                 mov     [rsp+58h+var_48], rsi
.text:0000000000003235                 call    _free
.text:000000000000323A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000323F
.text:000000000000323F loc_323F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000323F                 mov     rdi, rsi
.text:0000000000003242                 mov     [rsp+58h+var_48], rsi
.text:0000000000003247                 call    xmalloc
.text:000000000000324C                 sub     rsp, 8
.text:0000000000003250                 mov     [rbx+8], rax
.text:0000000000003254                 mov     r8d, [rbp+0]
.text:0000000000003258                 push    qword ptr [rbp+30h]
.text:000000000000325B                 push    qword ptr [rbp+28h]
.text:000000000000325E                 mov     rcx, r14
.text:0000000000003261                 push    r15
.text:0000000000003263                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003268                 mov     rdi, rax
.text:000000000000326B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003270                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003275                 mov     r12, rax
.text:0000000000003278                 call    quotearg_buffer_restyled
.text:000000000000327D                 add     rsp, 20h
.text:0000000000003281
.text:0000000000003281 loc_3281:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003281                 mov     eax, [rsp+58h+var_40]
.text:0000000000003285                 mov     [r13+0], eax
.text:0000000000003289                 add     rsp, 28h
.text:000000000000328D                 mov     rax, r12
.text:0000000000003290                 pop     rbx
.text:0000000000003291                 pop     rbp
.text:0000000000003292                 pop     r12
.text:0000000000003294                 pop     r13
.text:0000000000003296                 pop     r14
.text:0000000000003298                 pop     r15
.text:000000000000329A                 retn
.text:000000000000329A ; ---------------------------------------------------------------------------
.text:000000000000329B                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000032A0                 xor     edi, edi
.text:00000000000032A2                 call    xrealloc
.text:00000000000032A7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000032AF                 mov     rbx, rax
.text:00000000000032B2                 mov     cs:slotvec, rax
.text:00000000000032B9                 movups  xmmword ptr [rax], xmm0
.text:00000000000032BC                 jmp     loc_319D
.text:00000000000032C1 ; ---------------------------------------------------------------------------
.text:00000000000032C1
.text:00000000000032C1 loc_32C1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000032C1                 call    _abort
.text:00000000000032C6 ; ---------------------------------------------------------------------------
.text:00000000000032C6
.text:00000000000032C6 loc_32C6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000032C6                 call    xalloc_die
.text:00000000000032C6 ; } // starts at 3120
.text:00000000000032C6 quotearg_n_options endp
.text:00000000000032C6
.text:00000000000032C6 ; ---------------------------------------------------------------------------
.text:00000000000032CB                 align 10h
.text:00000000000032D0
.text:00000000000032D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032D0
.text:00000000000032D0 ; Attributes: info_from_lumina
.text:00000000000032D0
.text:00000000000032D0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000032D0                 public clone_quoting_options
.text:00000000000032D0 clone_quoting_options proc near
.text:00000000000032D0 ; __unwind {
.text:00000000000032D0                 push    r12
.text:00000000000032D2                 push    rbp
.text:00000000000032D3                 push    rbx
.text:00000000000032D4                 mov     rbx, rdi
.text:00000000000032D7                 call    ___errno_location
.text:00000000000032DC                 mov     r12d, [rax]
.text:00000000000032DF                 mov     rbp, rax
.text:00000000000032E2                 lea     rax, default_quoting_options
.text:00000000000032E9                 test    rbx, rbx
.text:00000000000032EC                 mov     esi, 38h ; '8'  ; n
.text:00000000000032F1                 cmovz   rbx, rax
.text:00000000000032F5                 mov     rdi, rbx        ; src
.text:00000000000032F8                 call    xmemdup
.text:00000000000032FD                 mov     [rbp+0], r12d
.text:0000000000003301                 pop     rbx
.text:0000000000003302                 pop     rbp
.text:0000000000003303                 pop     r12
.text:0000000000003305                 retn
.text:0000000000003305 ; } // starts at 32D0
.text:0000000000003305 clone_quoting_options endp
.text:0000000000003305
.text:0000000000003305 ; ---------------------------------------------------------------------------
.text:0000000000003306                 align 10h
.text:0000000000003310
.text:0000000000003310 ; =============== S U B R O U T I N E =======================================
.text:0000000000003310
.text:0000000000003310
.text:0000000000003310                 public get_quoting_style
.text:0000000000003310 get_quoting_style proc near
.text:0000000000003310 ; __unwind {
.text:0000000000003310                 lea     rax, default_quoting_options
.text:0000000000003317                 test    rdi, rdi
.text:000000000000331A                 cmovz   rdi, rax
.text:000000000000331E                 mov     eax, [rdi]
.text:0000000000003320                 retn
.text:0000000000003320 ; } // starts at 3310
.text:0000000000003320 get_quoting_style endp
.text:0000000000003320
.text:0000000000003320 ; ---------------------------------------------------------------------------
.text:0000000000003321                 align 10h
.text:0000000000003330
.text:0000000000003330 ; =============== S U B R O U T I N E =======================================
.text:0000000000003330
.text:0000000000003330
.text:0000000000003330                 public set_quoting_style
.text:0000000000003330 set_quoting_style proc near
.text:0000000000003330 ; __unwind {
.text:0000000000003330                 lea     rax, default_quoting_options
.text:0000000000003337                 test    rdi, rdi
.text:000000000000333A                 cmovz   rdi, rax
.text:000000000000333E                 mov     [rdi], esi
.text:0000000000003340                 retn
.text:0000000000003340 ; } // starts at 3330
.text:0000000000003340 set_quoting_style endp
.text:0000000000003340
.text:0000000000003340 ; ---------------------------------------------------------------------------
.text:0000000000003341                 align 10h
.text:0000000000003350
.text:0000000000003350 ; =============== S U B R O U T I N E =======================================
.text:0000000000003350
.text:0000000000003350 ; Attributes: info_from_lumina
.text:0000000000003350
.text:0000000000003350 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003350                 public set_char_quoting
.text:0000000000003350 set_char_quoting proc near
.text:0000000000003350 ; __unwind {
.text:0000000000003350                 lea     rax, default_quoting_options
.text:0000000000003357                 test    rdi, rdi
.text:000000000000335A                 mov     ecx, esi
.text:000000000000335C                 cmovz   rdi, rax
.text:0000000000003360                 mov     eax, esi
.text:0000000000003362                 and     ecx, 1Fh
.text:0000000000003365                 shr     al, 5
.text:0000000000003368                 movzx   eax, al
.text:000000000000336B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003370                 mov     esi, [rdi]
.text:0000000000003372                 mov     eax, esi
.text:0000000000003374                 shr     eax, cl
.text:0000000000003376                 xor     edx, eax
.text:0000000000003378                 and     eax, 1
.text:000000000000337B                 and     edx, 1
.text:000000000000337E                 shl     edx, cl
.text:0000000000003380                 xor     edx, esi
.text:0000000000003382                 mov     [rdi], edx
.text:0000000000003384                 retn
.text:0000000000003384 ; } // starts at 3350
.text:0000000000003384 set_char_quoting endp
.text:0000000000003384
.text:0000000000003384 ; ---------------------------------------------------------------------------
.text:0000000000003385                 align 10h
.text:0000000000003390
.text:0000000000003390 ; =============== S U B R O U T I N E =======================================
.text:0000000000003390
.text:0000000000003390
.text:0000000000003390                 public set_quoting_flags
.text:0000000000003390 set_quoting_flags proc near
.text:0000000000003390 ; __unwind {
.text:0000000000003390                 lea     rax, default_quoting_options
.text:0000000000003397                 test    rdi, rdi
.text:000000000000339A                 cmovz   rdi, rax
.text:000000000000339E                 mov     eax, [rdi+4]
.text:00000000000033A1                 mov     [rdi+4], esi
.text:00000000000033A4                 retn
.text:00000000000033A4 ; } // starts at 3390
.text:00000000000033A4 set_quoting_flags endp
.text:00000000000033A4
.text:00000000000033A4 ; ---------------------------------------------------------------------------
.text:00000000000033A5                 align 10h
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0 ; Attributes: info_from_lumina
.text:00000000000033B0
.text:00000000000033B0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000033B0                 public set_custom_quoting
.text:00000000000033B0 set_custom_quoting proc near
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 lea     rax, default_quoting_options
.text:00000000000033B7                 test    rdi, rdi
.text:00000000000033BA                 cmovz   rdi, rax
.text:00000000000033BE                 test    rsi, rsi
.text:00000000000033C1                 mov     dword ptr [rdi], 0Ah
.text:00000000000033C7                 jz      short loc_33D7
.text:00000000000033C9                 test    rdx, rdx
.text:00000000000033CC                 jz      short loc_33D7
.text:00000000000033CE                 mov     [rdi+28h], rsi
.text:00000000000033D2                 mov     [rdi+30h], rdx
.text:00000000000033D6                 retn
.text:00000000000033D7 ; ---------------------------------------------------------------------------
.text:00000000000033D7
.text:00000000000033D7 loc_33D7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000033D7                                         ; set_custom_quoting+1C↑j
.text:00000000000033D7                 sub     rsp, 8
.text:00000000000033DB                 call    _abort
.text:00000000000033DB ; } // starts at 33B0
.text:00000000000033DB set_custom_quoting endp
.text:00000000000033DB
.text:00000000000033E0
.text:00000000000033E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033E0
.text:00000000000033E0 ; Attributes: info_from_lumina
.text:00000000000033E0
.text:00000000000033E0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000033E0                 public quotearg_buffer
.text:00000000000033E0 quotearg_buffer proc near
.text:00000000000033E0
.text:00000000000033E0 var_40          = qword ptr -40h
.text:00000000000033E0
.text:00000000000033E0 ; __unwind {
.text:00000000000033E0                 push    r15
.text:00000000000033E2                 push    r14
.text:00000000000033E4                 lea     rax, default_quoting_options
.text:00000000000033EB                 push    r13
.text:00000000000033ED                 push    r12
.text:00000000000033EF                 mov     r13, rdi
.text:00000000000033F2                 push    rbp
.text:00000000000033F3                 push    rbx
.text:00000000000033F4                 mov     rbx, r8
.text:00000000000033F7                 mov     r14, rsi
.text:00000000000033FA                 mov     r15, rdx
.text:00000000000033FD                 sub     rsp, 18h
.text:0000000000003401                 test    r8, r8
.text:0000000000003404                 cmovz   rbx, rax
.text:0000000000003408                 mov     [rsp+48h+var_40], rcx
.text:000000000000340D                 call    ___errno_location
.text:0000000000003412                 mov     r12d, [rax]
.text:0000000000003415                 mov     rbp, rax
.text:0000000000003418                 lea     rax, [rbx+8]
.text:000000000000341C                 sub     rsp, 8
.text:0000000000003420                 mov     r9d, [rbx+4]
.text:0000000000003424                 push    qword ptr [rbx+30h]
.text:0000000000003427                 mov     r8d, [rbx]
.text:000000000000342A                 push    qword ptr [rbx+28h]
.text:000000000000342D                 mov     rdx, r15
.text:0000000000003430                 push    rax
.text:0000000000003431                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003436                 mov     rsi, r14
.text:0000000000003439                 mov     rdi, r13
.text:000000000000343C                 call    quotearg_buffer_restyled
.text:0000000000003441                 mov     [rbp+0], r12d
.text:0000000000003445                 add     rsp, 38h
.text:0000000000003449                 pop     rbx
.text:000000000000344A                 pop     rbp
.text:000000000000344B                 pop     r12
.text:000000000000344D                 pop     r13
.text:000000000000344F                 pop     r14
.text:0000000000003451                 pop     r15
.text:0000000000003453                 retn
.text:0000000000003453 ; } // starts at 33E0
.text:0000000000003453 quotearg_buffer endp
.text:0000000000003453
.text:0000000000003453 ; ---------------------------------------------------------------------------
.text:0000000000003454                 align 20h
.text:0000000000003460
.text:0000000000003460 ; =============== S U B R O U T I N E =======================================
.text:0000000000003460
.text:0000000000003460 ; Attributes: info_from_lumina
.text:0000000000003460
.text:0000000000003460 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003460                 public quotearg_alloc_mem
.text:0000000000003460 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003460
.text:0000000000003460 var_5C          = dword ptr -5Ch
.text:0000000000003460 var_58          = qword ptr -58h
.text:0000000000003460 var_50          = qword ptr -50h
.text:0000000000003460 var_48          = qword ptr -48h
.text:0000000000003460 var_40          = qword ptr -40h
.text:0000000000003460
.text:0000000000003460 ; __unwind {
.text:0000000000003460                 push    r15
.text:0000000000003462                 push    r14
.text:0000000000003464                 lea     rax, default_quoting_options
.text:000000000000346B                 push    r13
.text:000000000000346D                 push    r12
.text:000000000000346F                 mov     r12, rdx
.text:0000000000003472                 push    rbp
.text:0000000000003473                 push    rbx
.text:0000000000003474                 mov     rbx, rcx
.text:0000000000003477                 mov     r14, rdi
.text:000000000000347A                 mov     r15, rsi
.text:000000000000347D                 sub     rsp, 38h
.text:0000000000003481                 test    rcx, rcx
.text:0000000000003484                 cmovz   rbx, rax
.text:0000000000003488                 xor     ebp, ebp
.text:000000000000348A                 call    ___errno_location
.text:000000000000348F                 test    r12, r12
.text:0000000000003492                 mov     r13, rax
.text:0000000000003495                 mov     eax, [rax]
.text:0000000000003497                 setz    bpl
.text:000000000000349B                 or      ebp, [rbx+4]
.text:000000000000349E                 lea     r10, [rbx+8]
.text:00000000000034A2                 sub     rsp, 8
.text:00000000000034A6                 mov     r8d, [rbx]
.text:00000000000034A9                 mov     rcx, r15
.text:00000000000034AC                 mov     [rsp+70h+var_5C], eax
.text:00000000000034B0                 push    qword ptr [rbx+30h]
.text:00000000000034B3                 mov     rdx, r14
.text:00000000000034B6                 push    qword ptr [rbx+28h]
.text:00000000000034B9                 push    r10
.text:00000000000034BB                 xor     esi, esi
.text:00000000000034BD                 mov     r9d, ebp
.text:00000000000034C0                 xor     edi, edi
.text:00000000000034C2                 mov     [rsp+88h+var_48], r10
.text:00000000000034C7                 call    quotearg_buffer_restyled
.text:00000000000034CC                 lea     rsi, [rax+1]
.text:00000000000034D0                 mov     [rsp+88h+var_40], rax
.text:00000000000034D5                 add     rsp, 20h
.text:00000000000034D9                 mov     rdi, rsi
.text:00000000000034DC                 mov     [rsp+68h+var_50], rsi
.text:00000000000034E1                 call    xmalloc
.text:00000000000034E6                 mov     [rsp+68h+var_58], rax
.text:00000000000034EB                 sub     rsp, 8
.text:00000000000034EF                 push    qword ptr [rbx+30h]
.text:00000000000034F2                 push    qword ptr [rbx+28h]
.text:00000000000034F5                 mov     r10, [rsp+80h+var_48]
.text:00000000000034FA                 mov     r9d, ebp
.text:00000000000034FD                 mov     r8d, [rbx]
.text:0000000000003500                 mov     rcx, r15
.text:0000000000003503                 mov     rdx, r14
.text:0000000000003506                 mov     rdi, rax
.text:0000000000003509                 push    r10
.text:000000000000350B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003510                 call    quotearg_buffer_restyled
.text:0000000000003515                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003519                 add     rsp, 20h
.text:000000000000351D                 test    r12, r12
.text:0000000000003520                 mov     [r13+0], eax
.text:0000000000003524                 jz      short loc_352F
.text:0000000000003526                 mov     r11, [rsp+68h+var_40]
.text:000000000000352B                 mov     [r12], r11
.text:000000000000352F
.text:000000000000352F loc_352F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000352F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003534                 add     rsp, 38h
.text:0000000000003538                 pop     rbx
.text:0000000000003539                 pop     rbp
.text:000000000000353A                 pop     r12
.text:000000000000353C                 pop     r13
.text:000000000000353E                 pop     r14
.text:0000000000003540                 pop     r15
.text:0000000000003542                 retn
.text:0000000000003542 ; } // starts at 3460
.text:0000000000003542 quotearg_alloc_mem endp
.text:0000000000003542
.text:0000000000003542 ; ---------------------------------------------------------------------------
.text:0000000000003543                 align 10h
.text:0000000000003550
.text:0000000000003550 ; =============== S U B R O U T I N E =======================================
.text:0000000000003550
.text:0000000000003550
.text:0000000000003550                 public quotearg_alloc
.text:0000000000003550 quotearg_alloc  proc near
.text:0000000000003550 ; __unwind {
.text:0000000000003550                 mov     rcx, rdx
.text:0000000000003553                 xor     edx, edx
.text:0000000000003555                 jmp     quotearg_alloc_mem
.text:0000000000003555 ; } // starts at 3550
.text:0000000000003555 quotearg_alloc  endp
.text:0000000000003555
.text:0000000000003555 ; ---------------------------------------------------------------------------
.text:000000000000355A                 align 20h
.text:0000000000003560
.text:0000000000003560 ; =============== S U B R O U T I N E =======================================
.text:0000000000003560
.text:0000000000003560 ; Attributes: info_from_lumina
.text:0000000000003560
.text:0000000000003560 ; void __cdecl quotearg_free()
.text:0000000000003560                 public quotearg_free
.text:0000000000003560 quotearg_free   proc near
.text:0000000000003560 ; __unwind {
.text:0000000000003560                 mov     eax, cs:nslots
.text:0000000000003566                 push    r12
.text:0000000000003568                 mov     r12, cs:slotvec
.text:000000000000356F                 push    rbp
.text:0000000000003570                 push    rbx
.text:0000000000003571                 cmp     eax, 1
.text:0000000000003574                 jle     short loc_35A1
.text:0000000000003576                 sub     eax, 2
.text:0000000000003579                 lea     rbx, [r12+18h]
.text:000000000000357E                 shl     rax, 4
.text:0000000000003582                 lea     rbp, [r12+rax+28h]
.text:0000000000003587                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003590                 mov     rdi, [rbx]      ; ptr
.text:0000000000003593                 add     rbx, 10h
.text:0000000000003597                 call    _free
.text:000000000000359C                 cmp     rbx, rbp
.text:000000000000359F                 jnz     short loc_3590
.text:00000000000035A1
.text:00000000000035A1 loc_35A1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000035A1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000035A6                 lea     rbx, slot0
.text:00000000000035AD                 cmp     rdi, rbx
.text:00000000000035B0                 jz      short loc_35C9
.text:00000000000035B2                 call    _free
.text:00000000000035B7                 mov     cs:slotvec0, 100h
.text:00000000000035C2                 mov     cs:off_207078, rbx
.text:00000000000035C9
.text:00000000000035C9 loc_35C9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000035C9                 lea     rbx, slotvec0
.text:00000000000035D0                 cmp     r12, rbx
.text:00000000000035D3                 jz      short loc_35E4
.text:00000000000035D5                 mov     rdi, r12        ; ptr
.text:00000000000035D8                 call    _free
.text:00000000000035DD                 mov     cs:slotvec, rbx
.text:00000000000035E4
.text:00000000000035E4 loc_35E4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000035E4                 pop     rbx
.text:00000000000035E5                 mov     cs:nslots, 1
.text:00000000000035EF                 pop     rbp
.text:00000000000035F0                 pop     r12
.text:00000000000035F2                 retn
.text:00000000000035F2 ; } // starts at 3560
.text:00000000000035F2 quotearg_free   endp
.text:00000000000035F2
.text:00000000000035F2 ; ---------------------------------------------------------------------------
.text:00000000000035F3                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public quotearg_n
.text:0000000000003600 quotearg_n      proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 lea     rcx, default_quoting_options
.text:0000000000003607                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000360E                 jmp     quotearg_n_options
.text:000000000000360E ; } // starts at 3600
.text:000000000000360E quotearg_n      endp
.text:000000000000360E
.text:000000000000360E ; ---------------------------------------------------------------------------
.text:0000000000003613                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620
.text:0000000000003620                 public quotearg_n_mem
.text:0000000000003620 quotearg_n_mem  proc near
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 lea     rcx, default_quoting_options
.text:0000000000003627                 jmp     quotearg_n_options
.text:0000000000003627 ; } // starts at 3620
.text:0000000000003627 quotearg_n_mem  endp
.text:0000000000003627
.text:0000000000003627 ; ---------------------------------------------------------------------------
.text:000000000000362C                 align 10h
.text:0000000000003630
.text:0000000000003630 ; =============== S U B R O U T I N E =======================================
.text:0000000000003630
.text:0000000000003630
.text:0000000000003630                 public quotearg
.text:0000000000003630 quotearg        proc near
.text:0000000000003630 ; __unwind {
.text:0000000000003630                 lea     rcx, default_quoting_options
.text:0000000000003637                 mov     rsi, rdi
.text:000000000000363A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003641                 xor     edi, edi
.text:0000000000003643                 jmp     quotearg_n_options
.text:0000000000003643 ; } // starts at 3630
.text:0000000000003643 quotearg        endp
.text:0000000000003643
.text:0000000000003643 ; ---------------------------------------------------------------------------
.text:0000000000003648                 align 10h
.text:0000000000003650
.text:0000000000003650 ; =============== S U B R O U T I N E =======================================
.text:0000000000003650
.text:0000000000003650
.text:0000000000003650                 public quotearg_mem
.text:0000000000003650 quotearg_mem    proc near
.text:0000000000003650 ; __unwind {
.text:0000000000003650                 lea     rcx, default_quoting_options
.text:0000000000003657                 mov     rdx, rsi
.text:000000000000365A                 mov     rsi, rdi
.text:000000000000365D                 xor     edi, edi
.text:000000000000365F                 jmp     quotearg_n_options
.text:000000000000365F ; } // starts at 3650
.text:000000000000365F quotearg_mem    endp
.text:000000000000365F
.text:000000000000365F ; ---------------------------------------------------------------------------
.text:0000000000003664                 align 10h
.text:0000000000003670
.text:0000000000003670 ; =============== S U B R O U T I N E =======================================
.text:0000000000003670
.text:0000000000003670 ; Attributes: info_from_lumina
.text:0000000000003670
.text:0000000000003670 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003670                 public quotearg_n_style
.text:0000000000003670 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003670
.text:0000000000003670 var_48          = dword ptr -48h
.text:0000000000003670 var_44          = qword ptr -44h
.text:0000000000003670 var_3C          = qword ptr -3Ch
.text:0000000000003670 var_34          = qword ptr -34h
.text:0000000000003670 var_2C          = qword ptr -2Ch
.text:0000000000003670 var_24          = qword ptr -24h
.text:0000000000003670 var_1C          = qword ptr -1Ch
.text:0000000000003670 var_14          = dword ptr -14h
.text:0000000000003670 var_10          = qword ptr -10h
.text:0000000000003670
.text:0000000000003670 ; __unwind {
.text:0000000000003670                 sub     rsp, 48h
.text:0000000000003674                 mov     rax, rdx
.text:0000000000003677                 mov     rdx, fs:28h
.text:0000000000003680                 mov     [rsp+48h+var_10], rdx
.text:0000000000003685                 xor     edx, edx
.text:0000000000003687                 cmp     esi, 0Ah
.text:000000000000368A                 jz      short loc_36F4
.text:000000000000368C                 mov     [rsp+48h+var_48], esi
.text:000000000000368F                 mov     rcx, rsp
.text:0000000000003692                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003699                 mov     rsi, rax
.text:000000000000369C                 mov     [rsp+48h+var_44], 0
.text:00000000000036A5                 mov     [rsp+48h+var_3C], 0
.text:00000000000036AE                 mov     [rsp+48h+var_34], 0
.text:00000000000036B7                 mov     [rsp+48h+var_2C], 0
.text:00000000000036C0                 mov     [rsp+48h+var_24], 0
.text:00000000000036C9                 mov     [rsp+48h+var_1C], 0
.text:00000000000036D2                 mov     [rsp+48h+var_14], 0
.text:00000000000036DA                 call    quotearg_n_options
.text:00000000000036DF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000036E4                 xor     rcx, fs:28h
.text:00000000000036ED                 jnz     short loc_36F9
.text:00000000000036EF                 add     rsp, 48h
.text:00000000000036F3                 retn
.text:00000000000036F4 ; ---------------------------------------------------------------------------
.text:00000000000036F4
.text:00000000000036F4 loc_36F4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000036F4                 call    _abort
.text:00000000000036F9 ; ---------------------------------------------------------------------------
.text:00000000000036F9
.text:00000000000036F9 loc_36F9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000036F9                 call    ___stack_chk_fail
.text:00000000000036F9 ; } // starts at 3670
.text:00000000000036F9 quotearg_n_style endp
.text:00000000000036F9
.text:00000000000036F9 ; ---------------------------------------------------------------------------
.text:00000000000036FE                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700 ; Attributes: info_from_lumina
.text:0000000000003700
.text:0000000000003700 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003700                 public quotearg_n_style_mem
.text:0000000000003700 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003700
.text:0000000000003700 var_48          = dword ptr -48h
.text:0000000000003700 var_44          = qword ptr -44h
.text:0000000000003700 var_3C          = qword ptr -3Ch
.text:0000000000003700 var_34          = qword ptr -34h
.text:0000000000003700 var_2C          = qword ptr -2Ch
.text:0000000000003700 var_24          = qword ptr -24h
.text:0000000000003700 var_1C          = qword ptr -1Ch
.text:0000000000003700 var_14          = dword ptr -14h
.text:0000000000003700 var_10          = qword ptr -10h
.text:0000000000003700
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 sub     rsp, 48h
.text:0000000000003704                 mov     rax, rdx
.text:0000000000003707                 mov     rdx, rcx
.text:000000000000370A                 mov     rcx, fs:28h
.text:0000000000003713                 mov     [rsp+48h+var_10], rcx
.text:0000000000003718                 xor     ecx, ecx
.text:000000000000371A                 cmp     esi, 0Ah
.text:000000000000371D                 jz      short loc_3780
.text:000000000000371F                 mov     [rsp+48h+var_48], esi
.text:0000000000003722                 mov     rcx, rsp
.text:0000000000003725                 mov     rsi, rax
.text:0000000000003728                 mov     [rsp+48h+var_44], 0
.text:0000000000003731                 mov     [rsp+48h+var_3C], 0
.text:000000000000373A                 mov     [rsp+48h+var_34], 0
.text:0000000000003743                 mov     [rsp+48h+var_2C], 0
.text:000000000000374C                 mov     [rsp+48h+var_24], 0
.text:0000000000003755                 mov     [rsp+48h+var_1C], 0
.text:000000000000375E                 mov     [rsp+48h+var_14], 0
.text:0000000000003766                 call    quotearg_n_options
.text:000000000000376B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003770                 xor     rdx, fs:28h
.text:0000000000003779                 jnz     short loc_3785
.text:000000000000377B                 add     rsp, 48h
.text:000000000000377F                 retn
.text:0000000000003780 ; ---------------------------------------------------------------------------
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003780                 call    _abort
.text:0000000000003785 ; ---------------------------------------------------------------------------
.text:0000000000003785
.text:0000000000003785 loc_3785:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003785                 call    ___stack_chk_fail
.text:0000000000003785 ; } // starts at 3700
.text:0000000000003785 quotearg_n_style_mem endp
.text:0000000000003785
.text:0000000000003785 ; ---------------------------------------------------------------------------
.text:000000000000378A                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790
.text:0000000000003790                 public quotearg_style
.text:0000000000003790 quotearg_style  proc near
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 mov     rdx, rsi
.text:0000000000003793                 mov     esi, edi
.text:0000000000003795                 xor     edi, edi
.text:0000000000003797                 jmp     quotearg_n_style
.text:0000000000003797 ; } // starts at 3790
.text:0000000000003797 quotearg_style  endp
.text:0000000000003797
.text:0000000000003797 ; ---------------------------------------------------------------------------
.text:000000000000379C                 align 20h
.text:00000000000037A0
.text:00000000000037A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037A0
.text:00000000000037A0
.text:00000000000037A0                 public quotearg_style_mem
.text:00000000000037A0 quotearg_style_mem proc near
.text:00000000000037A0 ; __unwind {
.text:00000000000037A0                 mov     rcx, rdx
.text:00000000000037A3                 mov     rdx, rsi
.text:00000000000037A6                 mov     esi, edi
.text:00000000000037A8                 xor     edi, edi
.text:00000000000037AA                 jmp     quotearg_n_style_mem
.text:00000000000037AA ; } // starts at 37A0
.text:00000000000037AA quotearg_style_mem endp
.text:00000000000037AA
.text:00000000000037AA ; ---------------------------------------------------------------------------
.text:00000000000037AF                 align 10h
.text:00000000000037B0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0
.text:00000000000037B0 ; Attributes: info_from_lumina
.text:00000000000037B0
.text:00000000000037B0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000037B0                 public quotearg_char_mem
.text:00000000000037B0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000037B0                                         ; quotearg_colon+C↓j ...
.text:00000000000037B0
.text:00000000000037B0 var_48          = xmmword ptr -48h
.text:00000000000037B0 var_38          = xmmword ptr -38h
.text:00000000000037B0 var_28          = xmmword ptr -28h
.text:00000000000037B0 var_18          = qword ptr -18h
.text:00000000000037B0 var_10          = qword ptr -10h
.text:00000000000037B0
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 sub     rsp, 48h
.text:00000000000037B4                 mov     ecx, edx
.text:00000000000037B6                 mov     rax, fs:28h
.text:00000000000037BF                 mov     [rsp+48h+var_10], rax
.text:00000000000037C4                 xor     eax, eax
.text:00000000000037C6                 mov     rax, cs:qword_207210
.text:00000000000037CD                 mov     r8, rsp
.text:00000000000037D0                 and     ecx, 1Fh
.text:00000000000037D3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000037DB                 mov     [rsp+48h+var_18], rax
.text:00000000000037E0                 mov     eax, edx
.text:00000000000037E2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000037E6                 shr     al, 5
.text:00000000000037E9                 movzx   eax, al
.text:00000000000037EC                 lea     r9, [r8+rax*4+8]
.text:00000000000037F1                 movdqa  xmm0, cs:xmmword_2071F0
.text:00000000000037F9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000037FE                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003806                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000380B                 mov     edx, [r9]
.text:000000000000380E                 mov     eax, edx
.text:0000000000003810                 shr     eax, cl
.text:0000000000003812                 not     eax
.text:0000000000003814                 and     eax, 1
.text:0000000000003817                 shl     eax, cl
.text:0000000000003819                 mov     rcx, r8
.text:000000000000381C                 xor     eax, edx
.text:000000000000381E                 mov     rdx, rsi
.text:0000000000003821                 mov     rsi, rdi
.text:0000000000003824                 mov     [r9], eax
.text:0000000000003827                 xor     edi, edi
.text:0000000000003829                 call    quotearg_n_options
.text:000000000000382E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003833                 xor     rsi, fs:28h
.text:000000000000383C                 jnz     short loc_3843
.text:000000000000383E                 add     rsp, 48h
.text:0000000000003842                 retn
.text:0000000000003843 ; ---------------------------------------------------------------------------
.text:0000000000003843
.text:0000000000003843 loc_3843:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003843                 call    ___stack_chk_fail
.text:0000000000003843 ; } // starts at 37B0
.text:0000000000003843 quotearg_char_mem endp
.text:0000000000003843
.text:0000000000003843 ; ---------------------------------------------------------------------------
.text:0000000000003848                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850
.text:0000000000003850                 public quotearg_char
.text:0000000000003850 quotearg_char   proc near
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 movsx   edx, sil
.text:0000000000003854                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000385B                 jmp     quotearg_char_mem
.text:000000000000385B ; } // starts at 3850
.text:000000000000385B quotearg_char   endp
.text:000000000000385B
.text:0000000000003860
.text:0000000000003860 ; =============== S U B R O U T I N E =======================================
.text:0000000000003860
.text:0000000000003860
.text:0000000000003860                 public quotearg_colon
.text:0000000000003860 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003860 ; __unwind {
.text:0000000000003860                 mov     edx, 3Ah ; ':'
.text:0000000000003865                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000386C                 jmp     quotearg_char_mem
.text:000000000000386C ; } // starts at 3860
.text:000000000000386C quotearg_colon  endp
.text:000000000000386C
.text:000000000000386C ; ---------------------------------------------------------------------------
.text:0000000000003871                 align 20h
.text:0000000000003880
.text:0000000000003880 ; =============== S U B R O U T I N E =======================================
.text:0000000000003880
.text:0000000000003880
.text:0000000000003880                 public quotearg_colon_mem
.text:0000000000003880 quotearg_colon_mem proc near
.text:0000000000003880 ; __unwind {
.text:0000000000003880                 mov     edx, 3Ah ; ':'
.text:0000000000003885                 jmp     quotearg_char_mem
.text:0000000000003885 ; } // starts at 3880
.text:0000000000003885 quotearg_colon_mem endp
.text:0000000000003885
.text:0000000000003885 ; ---------------------------------------------------------------------------
.text:000000000000388A                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890 ; Attributes: info_from_lumina
.text:0000000000003890
.text:0000000000003890 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003890                 public quotearg_n_style_colon
.text:0000000000003890 quotearg_n_style_colon proc near
.text:0000000000003890
.text:0000000000003890 var_48          = dword ptr -48h
.text:0000000000003890 var_44          = qword ptr -44h
.text:0000000000003890 var_3C          = qword ptr -3Ch
.text:0000000000003890 var_34          = qword ptr -34h
.text:0000000000003890 var_2C          = qword ptr -2Ch
.text:0000000000003890 var_24          = qword ptr -24h
.text:0000000000003890 var_1C          = qword ptr -1Ch
.text:0000000000003890 var_14          = dword ptr -14h
.text:0000000000003890 var_10          = qword ptr -10h
.text:0000000000003890
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 sub     rsp, 48h
.text:0000000000003894                 mov     rax, rdx
.text:0000000000003897                 mov     rdx, fs:28h
.text:00000000000038A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000038A5                 xor     edx, edx
.text:00000000000038A7                 cmp     esi, 0Ah
.text:00000000000038AA                 jz      short loc_3914
.text:00000000000038AC                 mov     [rsp+48h+var_48], esi
.text:00000000000038AF                 mov     rcx, rsp
.text:00000000000038B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038B9                 mov     rsi, rax
.text:00000000000038BC                 mov     [rsp+48h+var_44], 0
.text:00000000000038C5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000038CE                 mov     [rsp+48h+var_34], 0
.text:00000000000038D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000038E0                 mov     [rsp+48h+var_24], 0
.text:00000000000038E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000038F2                 mov     [rsp+48h+var_14], 0
.text:00000000000038FA                 call    quotearg_n_options
.text:00000000000038FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003904                 xor     rcx, fs:28h
.text:000000000000390D                 jnz     short loc_3919
.text:000000000000390F                 add     rsp, 48h
.text:0000000000003913                 retn
.text:0000000000003914 ; ---------------------------------------------------------------------------
.text:0000000000003914
.text:0000000000003914 loc_3914:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003914                 call    _abort
.text:0000000000003919 ; ---------------------------------------------------------------------------
.text:0000000000003919
.text:0000000000003919 loc_3919:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003919                 call    ___stack_chk_fail
.text:0000000000003919 ; } // starts at 3890
.text:0000000000003919 quotearg_n_style_colon endp
.text:0000000000003919
.text:0000000000003919 ; ---------------------------------------------------------------------------
.text:000000000000391E                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920 ; Attributes: info_from_lumina
.text:0000000000003920
.text:0000000000003920 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003920                 public quotearg_n_custom_mem
.text:0000000000003920 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003920                                         ; quotearg_custom+12↓j ...
.text:0000000000003920
.text:0000000000003920 var_48          = xmmword ptr -48h
.text:0000000000003920 var_38          = xmmword ptr -38h
.text:0000000000003920 var_28          = xmmword ptr -28h
.text:0000000000003920 var_18          = qword ptr -18h
.text:0000000000003920 var_10          = qword ptr -10h
.text:0000000000003920
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 sub     rsp, 48h
.text:0000000000003924                 mov     r9, rcx
.text:0000000000003927                 mov     rcx, cs:qword_207210
.text:000000000000392E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003936                 mov     rax, fs:28h
.text:000000000000393F                 mov     [rsp+48h+var_10], rax
.text:0000000000003944                 xor     eax, eax
.text:0000000000003946                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000394A                 test    rsi, rsi
.text:000000000000394D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003952                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003959                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003961                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003966                 movdqa  xmm0, cs:xmmword_207200
.text:000000000000396E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003973                 jz      short loc_39A7
.text:0000000000003975                 test    rdx, rdx
.text:0000000000003978                 jz      short loc_39A7
.text:000000000000397A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000397F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003984                 mov     rcx, rsp
.text:0000000000003987                 mov     rdx, r8
.text:000000000000398A                 mov     rsi, r9
.text:000000000000398D                 call    quotearg_n_options
.text:0000000000003992                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003997                 xor     rdi, fs:28h
.text:00000000000039A0                 jnz     short loc_39AC
.text:00000000000039A2                 add     rsp, 48h
.text:00000000000039A6                 retn
.text:00000000000039A7 ; ---------------------------------------------------------------------------
.text:00000000000039A7
.text:00000000000039A7 loc_39A7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000039A7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000039A7                 call    _abort
.text:00000000000039AC ; ---------------------------------------------------------------------------
.text:00000000000039AC
.text:00000000000039AC loc_39AC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000039AC                 call    ___stack_chk_fail
.text:00000000000039AC ; } // starts at 3920
.text:00000000000039AC quotearg_n_custom_mem endp
.text:00000000000039AC
.text:00000000000039AC ; ---------------------------------------------------------------------------
.text:00000000000039B1                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0
.text:00000000000039C0                 public quotearg_n_custom
.text:00000000000039C0 quotearg_n_custom proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000039C7                 jmp     quotearg_n_custom_mem
.text:00000000000039C7 ; } // starts at 39C0
.text:00000000000039C7 quotearg_n_custom endp
.text:00000000000039C7
.text:00000000000039C7 ; ---------------------------------------------------------------------------
.text:00000000000039CC                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0
.text:00000000000039D0                 public quotearg_custom
.text:00000000000039D0 quotearg_custom proc near
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 mov     rcx, rdx
.text:00000000000039D3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000039DA                 mov     rdx, rsi
.text:00000000000039DD                 mov     rsi, rdi
.text:00000000000039E0                 xor     edi, edi
.text:00000000000039E2                 jmp     quotearg_n_custom_mem
.text:00000000000039E2 ; } // starts at 39D0
.text:00000000000039E2 quotearg_custom endp
.text:00000000000039E2
.text:00000000000039E2 ; ---------------------------------------------------------------------------
.text:00000000000039E7                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0                 public quotearg_custom_mem
.text:00000000000039F0 quotearg_custom_mem proc near
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 mov     r8, rcx
.text:00000000000039F3                 mov     rcx, rdx
.text:00000000000039F6                 mov     rdx, rsi
.text:00000000000039F9                 mov     rsi, rdi
.text:00000000000039FC                 xor     edi, edi
.text:00000000000039FE                 jmp     quotearg_n_custom_mem
.text:00000000000039FE ; } // starts at 39F0
.text:00000000000039FE quotearg_custom_mem endp
.text:00000000000039FE
.text:00000000000039FE ; ---------------------------------------------------------------------------
.text:0000000000003A03                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public quote_n_mem
.text:0000000000003A10 quote_n_mem     proc near
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 lea     rcx, quote_quoting_options
.text:0000000000003A17                 jmp     quotearg_n_options
.text:0000000000003A17 ; } // starts at 3A10
.text:0000000000003A17 quote_n_mem     endp
.text:0000000000003A17
.text:0000000000003A17 ; ---------------------------------------------------------------------------
.text:0000000000003A1C                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20
.text:0000000000003A20                 public quote_mem
.text:0000000000003A20 quote_mem       proc near
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 lea     rcx, quote_quoting_options
.text:0000000000003A27                 mov     rdx, rsi
.text:0000000000003A2A                 mov     rsi, rdi
.text:0000000000003A2D                 xor     edi, edi
.text:0000000000003A2F                 jmp     quotearg_n_options
.text:0000000000003A2F ; } // starts at 3A20
.text:0000000000003A2F quote_mem       endp
.text:0000000000003A2F
.text:0000000000003A2F ; ---------------------------------------------------------------------------
.text:0000000000003A34                 align 20h
.text:0000000000003A40
.text:0000000000003A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A40
.text:0000000000003A40
.text:0000000000003A40                 public quote_n
.text:0000000000003A40 quote_n         proc near
.text:0000000000003A40 ; __unwind {
.text:0000000000003A40                 lea     rcx, quote_quoting_options
.text:0000000000003A47                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A4E                 jmp     quotearg_n_options
.text:0000000000003A4E ; } // starts at 3A40
.text:0000000000003A4E quote_n         endp
.text:0000000000003A4E
.text:0000000000003A4E ; ---------------------------------------------------------------------------
.text:0000000000003A53                 align 20h
.text:0000000000003A60
.text:0000000000003A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A60
.text:0000000000003A60
.text:0000000000003A60                 public quote
.text:0000000000003A60 quote           proc near
.text:0000000000003A60 ; __unwind {
.text:0000000000003A60                 lea     rcx, quote_quoting_options
.text:0000000000003A67                 mov     rsi, rdi
.text:0000000000003A6A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A71                 xor     edi, edi
.text:0000000000003A73                 jmp     quotearg_n_options
.text:0000000000003A73 ; } // starts at 3A60
.text:0000000000003A73 quote           endp
.text:0000000000003A73
.text:0000000000003A73 ; ---------------------------------------------------------------------------
.text:0000000000003A78                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003A80                 public version_etc_arn
.text:0000000000003A80 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3EBB↓j
.text:0000000000003A80                                         ; version_etc_va:loc_3F0B↓p ...
.text:0000000000003A80
.text:0000000000003A80 var_58          = qword ptr -58h
.text:0000000000003A80 var_50          = qword ptr -50h
.text:0000000000003A80 var_48          = qword ptr -48h
.text:0000000000003A80 var_40          = qword ptr -40h
.text:0000000000003A80
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 push    r15
.text:0000000000003A82                 push    r14
.text:0000000000003A84                 push    r13
.text:0000000000003A86                 push    r12
.text:0000000000003A88                 mov     r12, r9
.text:0000000000003A8B                 push    rbp
.text:0000000000003A8C                 push    rbx
.text:0000000000003A8D                 mov     rbp, rdi
.text:0000000000003A90                 mov     rbx, r8
.text:0000000000003A93                 sub     rsp, 28h
.text:0000000000003A97                 test    rsi, rsi
.text:0000000000003A9A                 jz      loc_3BB8
.text:0000000000003AA0                 mov     r8, rdx
.text:0000000000003AA3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003AAA                 mov     r9, rcx
.text:0000000000003AAD                 xor     eax, eax
.text:0000000000003AAF                 mov     rcx, rsi
.text:0000000000003AB2                 mov     esi, 1
.text:0000000000003AB7                 call    ___fprintf_chk
.text:0000000000003ABC
.text:0000000000003ABC loc_3ABC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003ABC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003AC3                 xor     edi, edi        ; domainname
.text:0000000000003AC5                 mov     edx, 5          ; category
.text:0000000000003ACA                 call    _dcgettext
.text:0000000000003ACF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003AD6                 mov     rcx, rax
.text:0000000000003AD9                 mov     r8d, 7E3h
.text:0000000000003ADF                 mov     esi, 1
.text:0000000000003AE4                 mov     rdi, rbp
.text:0000000000003AE7                 xor     eax, eax
.text:0000000000003AE9                 call    ___fprintf_chk
.text:0000000000003AEE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003AF5                 xor     edi, edi        ; domainname
.text:0000000000003AF7                 mov     edx, 5          ; category
.text:0000000000003AFC                 call    _dcgettext
.text:0000000000003B01                 mov     rsi, rbp        ; stream
.text:0000000000003B04                 mov     rdi, rax        ; s
.text:0000000000003B07                 call    _fputs_unlocked
.text:0000000000003B0C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003B10                 ja      def_3B24        ; jumptable 0000000000003B24 default case
.text:0000000000003B16                 lea     rdx, jpt_3B24
.text:0000000000003B1D                 movsxd  rax, ds:(jpt_3B24 - 5288h)[rdx+r12*4]
.text:0000000000003B21                 add     rax, rdx
.text:0000000000003B24                 jmp     rax             ; switch jump
.text:0000000000003B24 ; ---------------------------------------------------------------------------
.text:0000000000003B26                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B30                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003B30                 mov     r9, [rbx+38h]   ; jumptable 0000000000003B24 case 8
.text:0000000000003B34                 mov     rax, [rbx+10h]
.text:0000000000003B38                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003B3F                 mov     r8, [rbx+8]
.text:0000000000003B43                 mov     edx, 5          ; category
.text:0000000000003B48                 xor     edi, edi        ; domainname
.text:0000000000003B4A                 mov     r13, [rbx+30h]
.text:0000000000003B4E                 mov     r12, [rbx+28h]
.text:0000000000003B52                 mov     [rsp+58h+var_48], r9
.text:0000000000003B57                 mov     r15, [rbx+20h]
.text:0000000000003B5B                 mov     r14, [rbx+18h]
.text:0000000000003B5F                 mov     [rsp+58h+var_58], rax
.text:0000000000003B63                 mov     [rsp+58h+var_50], r8
.text:0000000000003B68                 mov     rbx, [rbx]
.text:0000000000003B6B                 call    _dcgettext
.text:0000000000003B70                 sub     rsp, 8
.text:0000000000003B74
.text:0000000000003B74 loc_3B74:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003B74                 mov     r9, [rsp+60h+var_48]
.text:0000000000003B79                 mov     rdx, rax
.text:0000000000003B7C                 mov     rcx, rbx
.text:0000000000003B7F                 mov     esi, 1
.text:0000000000003B84                 mov     rdi, rbp
.text:0000000000003B87                 xor     eax, eax
.text:0000000000003B89                 push    r9
.text:0000000000003B8B                 push    r13
.text:0000000000003B8D                 push    r12
.text:0000000000003B8F                 push    r15
.text:0000000000003B91                 push    r14
.text:0000000000003B93                 mov     r9, [rsp+88h+var_58]
.text:0000000000003B98                 mov     r8, [rsp+88h+var_50]
.text:0000000000003B9D                 call    ___fprintf_chk
.text:0000000000003BA2                 add     rsp, 30h
.text:0000000000003BA6
.text:0000000000003BA6 loc_3BA6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BA6                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003BA6                 add     rsp, 28h        ; jumptable 0000000000003B24 case 0
.text:0000000000003BAA                 pop     rbx
.text:0000000000003BAB                 pop     rbp
.text:0000000000003BAC                 pop     r12
.text:0000000000003BAE                 pop     r13
.text:0000000000003BB0                 pop     r14
.text:0000000000003BB2                 pop     r15
.text:0000000000003BB4                 retn
.text:0000000000003BB4 ; ---------------------------------------------------------------------------
.text:0000000000003BB5                 align 8
.text:0000000000003BB8
.text:0000000000003BB8 loc_3BB8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003BB8                 mov     r8, rcx
.text:0000000000003BBB                 mov     rcx, rdx
.text:0000000000003BBE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003BC5                 mov     esi, 1
.text:0000000000003BCA                 xor     eax, eax
.text:0000000000003BCC                 call    ___fprintf_chk
.text:0000000000003BD1                 jmp     loc_3ABC
.text:0000000000003BD1 ; ---------------------------------------------------------------------------
.text:0000000000003BD6                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 loc_3BE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BE0                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003BE0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003B24 case 9
.text:0000000000003BE4                 mov     r9, [rbx+38h]
.text:0000000000003BE8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003BEF                 mov     rax, [rbx+10h]
.text:0000000000003BF3                 mov     r8, [rbx+8]
.text:0000000000003BF7                 mov     edx, 5          ; category
.text:0000000000003BFC                 mov     r13, [rbx+30h]
.text:0000000000003C00                 mov     r12, [rbx+28h]
.text:0000000000003C04                 mov     r15, [rbx+20h]
.text:0000000000003C08                 mov     r14, [rbx+18h]
.text:0000000000003C0C                 mov     rbx, [rbx]
.text:0000000000003C0F                 mov     [rsp+58h+var_40], r10
.text:0000000000003C14                 mov     [rsp+58h+var_48], r9
.text:0000000000003C19                 mov     [rsp+58h+var_58], rax
.text:0000000000003C1D                 mov     [rsp+58h+var_50], r8
.text:0000000000003C22
.text:0000000000003C22 loc_3C22:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003C22                 xor     edi, edi        ; domainname
.text:0000000000003C24                 call    _dcgettext
.text:0000000000003C29                 mov     r10, [rsp+58h+var_40]
.text:0000000000003C2E                 push    r10
.text:0000000000003C30                 jmp     loc_3B74
.text:0000000000003C30 ; ---------------------------------------------------------------------------
.text:0000000000003C35                 align 8
.text:0000000000003C38
.text:0000000000003C38 loc_3C38:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C38                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003C38                 mov     rbx, [rbx]      ; jumptable 0000000000003B24 case 1
.text:0000000000003C3B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003C42                 mov     edx, 5          ; category
.text:0000000000003C47                 xor     edi, edi        ; domainname
.text:0000000000003C49                 call    _dcgettext
.text:0000000000003C4E                 add     rsp, 28h
.text:0000000000003C52                 mov     rcx, rbx
.text:0000000000003C55                 mov     rdi, rbp
.text:0000000000003C58                 pop     rbx
.text:0000000000003C59                 pop     rbp
.text:0000000000003C5A                 pop     r12
.text:0000000000003C5C                 pop     r13
.text:0000000000003C5E                 pop     r14
.text:0000000000003C60                 pop     r15
.text:0000000000003C62                 mov     rdx, rax
.text:0000000000003C65                 mov     esi, 1
.text:0000000000003C6A                 xor     eax, eax
.text:0000000000003C6C                 jmp     ___fprintf_chk
.text:0000000000003C6C ; ---------------------------------------------------------------------------
.text:0000000000003C71                 align 8
.text:0000000000003C78
.text:0000000000003C78 loc_3C78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C78                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003C78                 mov     r12, [rbx+8]    ; jumptable 0000000000003B24 case 2
.text:0000000000003C7C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003C83                 mov     rbx, [rbx]
.text:0000000000003C86                 mov     edx, 5          ; category
.text:0000000000003C8B                 xor     edi, edi        ; domainname
.text:0000000000003C8D                 call    _dcgettext
.text:0000000000003C92                 add     rsp, 28h
.text:0000000000003C96                 mov     r8, r12
.text:0000000000003C99                 mov     rcx, rbx
.text:0000000000003C9C                 mov     rdi, rbp
.text:0000000000003C9F                 mov     rdx, rax
.text:0000000000003CA2                 mov     esi, 1
.text:0000000000003CA7                 pop     rbx
.text:0000000000003CA8                 pop     rbp
.text:0000000000003CA9                 pop     r12
.text:0000000000003CAB                 pop     r13
.text:0000000000003CAD                 pop     r14
.text:0000000000003CAF                 pop     r15
.text:0000000000003CB1                 xor     eax, eax
.text:0000000000003CB3                 jmp     ___fprintf_chk
.text:0000000000003CB3 ; ---------------------------------------------------------------------------
.text:0000000000003CB8                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 loc_3CC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CC0                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003CC0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003B24 case 3
.text:0000000000003CC4                 mov     r12, [rbx+8]
.text:0000000000003CC8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003CCF                 mov     rbx, [rbx]
.text:0000000000003CD2                 mov     edx, 5          ; category
.text:0000000000003CD7                 xor     edi, edi        ; domainname
.text:0000000000003CD9                 call    _dcgettext
.text:0000000000003CDE                 add     rsp, 28h
.text:0000000000003CE2                 mov     r9, r13
.text:0000000000003CE5                 mov     r8, r12
.text:0000000000003CE8                 mov     rcx, rbx
.text:0000000000003CEB                 mov     rdi, rbp
.text:0000000000003CEE                 mov     rdx, rax
.text:0000000000003CF1                 pop     rbx
.text:0000000000003CF2                 pop     rbp
.text:0000000000003CF3                 pop     r12
.text:0000000000003CF5                 pop     r13
.text:0000000000003CF7                 pop     r14
.text:0000000000003CF9                 pop     r15
.text:0000000000003CFB                 mov     esi, 1
.text:0000000000003D00                 xor     eax, eax
.text:0000000000003D02                 jmp     ___fprintf_chk
.text:0000000000003D02 ; ---------------------------------------------------------------------------
.text:0000000000003D07                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D10                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003D10                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003B24 case 4
.text:0000000000003D17                 mov     edx, 5          ; category
.text:0000000000003D1C                 xor     edi, edi        ; domainname
.text:0000000000003D1E                 mov     r14, [rbx+18h]
.text:0000000000003D22                 mov     r13, [rbx+10h]
.text:0000000000003D26                 mov     r12, [rbx+8]
.text:0000000000003D2A                 mov     rbx, [rbx]
.text:0000000000003D2D                 call    _dcgettext
.text:0000000000003D32                 sub     rsp, 8
.text:0000000000003D36
.text:0000000000003D36 loc_3D36:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003D36                 push    r14
.text:0000000000003D38                 mov     rdx, rax
.text:0000000000003D3B                 mov     r9, r13
.text:0000000000003D3E                 mov     r8, r12
.text:0000000000003D41                 mov     rcx, rbx
.text:0000000000003D44                 mov     rdi, rbp
.text:0000000000003D47                 mov     esi, 1
.text:0000000000003D4C                 xor     eax, eax
.text:0000000000003D4E                 call    ___fprintf_chk
.text:0000000000003D53                 pop     rax
.text:0000000000003D54                 pop     rdx
.text:0000000000003D55                 add     rsp, 28h
.text:0000000000003D59                 pop     rbx
.text:0000000000003D5A                 pop     rbp
.text:0000000000003D5B                 pop     r12
.text:0000000000003D5D                 pop     r13
.text:0000000000003D5F                 pop     r14
.text:0000000000003D61                 pop     r15
.text:0000000000003D63                 retn
.text:0000000000003D63 ; ---------------------------------------------------------------------------
.text:0000000000003D64                 align 8
.text:0000000000003D68
.text:0000000000003D68 loc_3D68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D68                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003D68                 mov     r15, [rbx+20h]  ; jumptable 0000000000003B24 case 5
.text:0000000000003D6C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003D73                 mov     edx, 5          ; category
.text:0000000000003D78                 xor     edi, edi        ; domainname
.text:0000000000003D7A                 mov     r14, [rbx+18h]
.text:0000000000003D7E                 mov     r13, [rbx+10h]
.text:0000000000003D82                 mov     r12, [rbx+8]
.text:0000000000003D86                 mov     rbx, [rbx]
.text:0000000000003D89                 call    _dcgettext
.text:0000000000003D8E                 push    r15
.text:0000000000003D90                 jmp     short loc_3D36
.text:0000000000003D90 ; ---------------------------------------------------------------------------
.text:0000000000003D92                 align 8
.text:0000000000003D98
.text:0000000000003D98 loc_3D98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D98                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003D98                 mov     r8, [rbx+8]     ; jumptable 0000000000003B24 case 6
.text:0000000000003D9C                 mov     r12, [rbx+28h]
.text:0000000000003DA0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003DA7                 mov     r15, [rbx+20h]
.text:0000000000003DAB                 mov     r14, [rbx+18h]
.text:0000000000003DAF                 mov     edx, 5          ; category
.text:0000000000003DB4                 mov     r13, [rbx+10h]
.text:0000000000003DB8                 xor     edi, edi        ; domainname
.text:0000000000003DBA                 mov     rbx, [rbx]
.text:0000000000003DBD                 mov     [rsp+58h+var_58], r8
.text:0000000000003DC1                 call    _dcgettext
.text:0000000000003DC6                 sub     rsp, 8
.text:0000000000003DCA                 mov     r9, r13
.text:0000000000003DCD                 push    r12
.text:0000000000003DCF                 push    r15
.text:0000000000003DD1                 push    r14
.text:0000000000003DD3
.text:0000000000003DD3 loc_3DD3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003DD3                 mov     r8, [rsp+78h+var_58]
.text:0000000000003DD8                 mov     rcx, rbx
.text:0000000000003DDB                 mov     rdx, rax
.text:0000000000003DDE                 mov     rdi, rbp
.text:0000000000003DE1                 mov     esi, 1
.text:0000000000003DE6                 xor     eax, eax
.text:0000000000003DE8                 call    ___fprintf_chk
.text:0000000000003DED                 add     rsp, 20h
.text:0000000000003DF1                 add     rsp, 28h
.text:0000000000003DF5                 pop     rbx
.text:0000000000003DF6                 pop     rbp
.text:0000000000003DF7                 pop     r12
.text:0000000000003DF9                 pop     r13
.text:0000000000003DFB                 pop     r14
.text:0000000000003DFD                 pop     r15
.text:0000000000003DFF                 retn
.text:0000000000003E00 ; ---------------------------------------------------------------------------
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E00                                         ; DATA XREF: .rodata:jpt_3B24↓o
.text:0000000000003E00                 mov     r9, [rbx+10h]   ; jumptable 0000000000003B24 case 7
.text:0000000000003E04                 mov     r13, [rbx+30h]
.text:0000000000003E08                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003E0F                 mov     r12, [rbx+28h]
.text:0000000000003E13                 mov     r15, [rbx+20h]
.text:0000000000003E17                 mov     edx, 5          ; category
.text:0000000000003E1C                 mov     r14, [rbx+18h]
.text:0000000000003E20                 mov     r8, [rbx+8]
.text:0000000000003E24                 xor     edi, edi        ; domainname
.text:0000000000003E26                 mov     [rsp+58h+var_50], r9
.text:0000000000003E2B                 mov     rbx, [rbx]
.text:0000000000003E2E                 mov     [rsp+58h+var_58], r8
.text:0000000000003E32                 call    _dcgettext
.text:0000000000003E37                 push    r13
.text:0000000000003E39                 push    r12
.text:0000000000003E3B                 push    r15
.text:0000000000003E3D                 push    r14
.text:0000000000003E3F                 mov     r9, [rsp+78h+var_50]
.text:0000000000003E44                 jmp     short loc_3DD3
.text:0000000000003E44 ; ---------------------------------------------------------------------------
.text:0000000000003E46                 align 10h
.text:0000000000003E50
.text:0000000000003E50 def_3B24:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003E50                 mov     r10, [rbx+40h]  ; jumptable 0000000000003B24 default case
.text:0000000000003E54                 mov     r9, [rbx+38h]
.text:0000000000003E58                 mov     edx, 5
.text:0000000000003E5D                 mov     rax, [rbx+10h]
.text:0000000000003E61                 mov     r8, [rbx+8]
.text:0000000000003E65                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E6C                 mov     r13, [rbx+30h]
.text:0000000000003E70                 mov     r12, [rbx+28h]
.text:0000000000003E74                 mov     r15, [rbx+20h]
.text:0000000000003E78                 mov     r14, [rbx+18h]
.text:0000000000003E7C                 mov     [rsp+58h+var_40], r10
.text:0000000000003E81                 mov     [rsp+58h+var_48], r9
.text:0000000000003E86                 mov     [rsp+58h+var_58], rax
.text:0000000000003E8A                 mov     [rsp+58h+var_50], r8
.text:0000000000003E8F                 mov     rbx, [rbx]
.text:0000000000003E92                 jmp     loc_3C22
.text:0000000000003E92 ; } // starts at 3A80
.text:0000000000003E92 version_etc_arn endp
.text:0000000000003E92
.text:0000000000003E92 ; ---------------------------------------------------------------------------
.text:0000000000003E97                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0 ; Attributes: info_from_lumina
.text:0000000000003EA0
.text:0000000000003EA0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003EA0                 public version_etc_ar
.text:0000000000003EA0 version_etc_ar  proc near
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 xor     r9d, r9d
.text:0000000000003EA3                 cmp     qword ptr [r8], 0
.text:0000000000003EA7                 jz      short loc_3EBB
.text:0000000000003EA9                 nop     dword ptr [rax+00000000h]
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003EB0                 add     r9, 1
.text:0000000000003EB4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003EB9                 jnz     short loc_3EB0
.text:0000000000003EBB
.text:0000000000003EBB loc_3EBB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003EBB                 jmp     version_etc_arn
.text:0000000000003EBB ; } // starts at 3EA0
.text:0000000000003EBB version_etc_ar  endp
.text:0000000000003EBB
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0 ; Attributes: info_from_lumina
.text:0000000000003EC0
.text:0000000000003EC0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003EC0                 public version_etc_va
.text:0000000000003EC0 version_etc_va  proc near
.text:0000000000003EC0
.text:0000000000003EC0 authtab         = qword ptr -68h
.text:0000000000003EC0 var_10          = qword ptr -10h
.text:0000000000003EC0
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 sub     rsp, 68h
.text:0000000000003EC4                 mov     r10, r8
.text:0000000000003EC7                 xor     r9d, r9d
.text:0000000000003ECA                 mov     rax, fs:28h
.text:0000000000003ED3                 mov     [rsp+68h+var_10], rax
.text:0000000000003ED8                 xor     eax, eax
.text:0000000000003EDA                 mov     r8, rsp
.text:0000000000003EDD                 nop     dword ptr [rax]
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003EE0                 mov     eax, [r10]
.text:0000000000003EE3                 cmp     eax, 2Fh ; '/'
.text:0000000000003EE6                 ja      short loc_3F2A
.text:0000000000003EE8                 mov     r11d, eax
.text:0000000000003EEB                 add     r11, [r10+10h]
.text:0000000000003EEF                 add     eax, 8
.text:0000000000003EF2                 mov     [r10], eax
.text:0000000000003EF5
.text:0000000000003EF5 loc_3EF5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003EF5                 mov     rax, [r11]
.text:0000000000003EF8                 test    rax, rax
.text:0000000000003EFB                 mov     [r8+r9*8], rax
.text:0000000000003EFF                 jz      short loc_3F0B
.text:0000000000003F01                 add     r9, 1
.text:0000000000003F05                 cmp     r9, 0Ah
.text:0000000000003F09                 jnz     short loc_3EE0
.text:0000000000003F0B
.text:0000000000003F0B loc_3F0B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003F0B                 call    version_etc_arn
.text:0000000000003F10                 mov     rax, [rsp+68h+var_10]
.text:0000000000003F15                 xor     rax, fs:28h
.text:0000000000003F1E                 jnz     short loc_3F25
.text:0000000000003F20                 add     rsp, 68h
.text:0000000000003F24                 retn
.text:0000000000003F25 ; ---------------------------------------------------------------------------
.text:0000000000003F25
.text:0000000000003F25 loc_3F25:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003F25                 call    ___stack_chk_fail
.text:0000000000003F2A ; ---------------------------------------------------------------------------
.text:0000000000003F2A
.text:0000000000003F2A loc_3F2A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003F2A                 mov     r11, [r10+8]
.text:0000000000003F2E                 lea     rax, [r11+8]
.text:0000000000003F32                 mov     [r10+8], rax
.text:0000000000003F36                 jmp     short loc_3EF5
.text:0000000000003F36 ; } // starts at 3EC0
.text:0000000000003F36 version_etc_va  endp
.text:0000000000003F36
.text:0000000000003F36 ; ---------------------------------------------------------------------------
.text:0000000000003F38                 align 20h
.text:0000000000003F40
.text:0000000000003F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F40
.text:0000000000003F40 ; Attributes: info_from_lumina
.text:0000000000003F40
.text:0000000000003F40 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003F40                 public version_etc
.text:0000000000003F40 version_etc     proc near               ; CODE XREF: main+D2↑p
.text:0000000000003F40
.text:0000000000003F40 var_C0          = dword ptr -0C0h
.text:0000000000003F40 var_B8          = qword ptr -0B8h
.text:0000000000003F40 var_B0          = qword ptr -0B0h
.text:0000000000003F40 var_A8          = byte ptr -0A8h
.text:0000000000003F40 var_50          = qword ptr -50h
.text:0000000000003F40 var_48          = byte ptr -48h
.text:0000000000003F40 var_28          = qword ptr -28h
.text:0000000000003F40 var_20          = qword ptr -20h
.text:0000000000003F40 arg_0           = byte ptr  8
.text:0000000000003F40
.text:0000000000003F40 ; __unwind {
.text:0000000000003F40                 push    rbp
.text:0000000000003F41                 push    rbx
.text:0000000000003F42                 mov     r10d, 20h ; ' '
.text:0000000000003F48                 xor     r11d, r11d
.text:0000000000003F4B                 sub     rsp, 0B8h
.text:0000000000003F52                 mov     rax, fs:28h
.text:0000000000003F5B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003F60                 xor     eax, eax
.text:0000000000003F62                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003F6A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003F72                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003F7A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003F7F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003F87                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003F8F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003F94                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003F9C                 xor     r9d, r9d
.text:0000000000003F9F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003FA4                 mov     rbp, rax
.text:0000000000003FA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003FB0                 cmp     r10d, 2Fh ; '/'
.text:0000000000003FB4                 ja      short loc_400C
.text:0000000000003FB6                 mov     eax, r10d
.text:0000000000003FB9                 mov     r11d, 1
.text:0000000000003FBF                 add     r10d, 8
.text:0000000000003FC3                 add     rax, rbp
.text:0000000000003FC6
.text:0000000000003FC6 loc_3FC6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000003FC6                 mov     rax, [rax]
.text:0000000000003FC9                 test    rax, rax
.text:0000000000003FCC                 mov     [r8+r9*8], rax
.text:0000000000003FD0                 jz      short loc_3FDC
.text:0000000000003FD2                 add     r9, 1
.text:0000000000003FD6                 cmp     r9, 0Ah
.text:0000000000003FDA                 jnz     short loc_3FB0
.text:0000000000003FDC
.text:0000000000003FDC loc_3FDC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000003FDC                 test    r11b, r11b
.text:0000000000003FDF                 jnz     short loc_4005
.text:0000000000003FE1
.text:0000000000003FE1 loc_3FE1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000003FE1                 call    version_etc_arn
.text:0000000000003FE6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000003FEB                 xor     rax, fs:28h
.text:0000000000003FF4                 jnz     short loc_4000
.text:0000000000003FF6                 add     rsp, 0B8h
.text:0000000000003FFD                 pop     rbx
.text:0000000000003FFE                 pop     rbp
.text:0000000000003FFF                 retn
.text:0000000000004000 ; ---------------------------------------------------------------------------
.text:0000000000004000
.text:0000000000004000 loc_4000:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004000                 call    ___stack_chk_fail
.text:0000000000004005 ; ---------------------------------------------------------------------------
.text:0000000000004005
.text:0000000000004005 loc_4005:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004005                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000400A                 jmp     short loc_3FE1
.text:000000000000400C ; ---------------------------------------------------------------------------
.text:000000000000400C
.text:000000000000400C loc_400C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000400C                 mov     rax, rbx
.text:000000000000400F                 add     rbx, 8
.text:0000000000004013                 jmp     short loc_3FC6
.text:0000000000004013 ; } // starts at 3F40
.text:0000000000004013 version_etc     endp
.text:0000000000004013
.text:0000000000004013 ; ---------------------------------------------------------------------------
.text:0000000000004015                 align 20h
.text:0000000000004020
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020
.text:0000000000004020 ; Attributes: info_from_lumina
.text:0000000000004020
.text:0000000000004020 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004020                 public emit_bug_reporting_address
.text:0000000000004020 emit_bug_reporting_address proc near
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 push    rbx
.text:0000000000004021                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004028                 mov     edx, 5          ; category
.text:000000000000402D                 xor     edi, edi        ; domainname
.text:000000000000402F                 call    _dcgettext
.text:0000000000004034                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000403B                 mov     rsi, rax
.text:000000000000403E                 mov     edi, 1
.text:0000000000004043                 xor     eax, eax
.text:0000000000004045                 call    ___printf_chk
.text:000000000000404A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004051                 mov     edx, 5          ; category
.text:0000000000004056                 xor     edi, edi        ; domainname
.text:0000000000004058                 call    _dcgettext
.text:000000000000405D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004064                 lea     rdx, unk_473E
.text:000000000000406B                 mov     rsi, rax
.text:000000000000406E                 mov     edi, 1
.text:0000000000004073                 xor     eax, eax
.text:0000000000004075                 call    ___printf_chk
.text:000000000000407A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004081                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004088                 xor     edi, edi        ; domainname
.text:000000000000408A                 mov     edx, 5          ; category
.text:000000000000408F                 call    _dcgettext
.text:0000000000004094                 mov     rsi, rbx        ; stream
.text:0000000000004097                 mov     rdi, rax        ; s
.text:000000000000409A                 pop     rbx
.text:000000000000409B                 jmp     _fputs_unlocked
.text:000000000000409B ; } // starts at 4020
.text:000000000000409B emit_bug_reporting_address endp
.text:000000000000409B
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0
.text:00000000000040A0                 public xmalloc
.text:00000000000040A0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000040A0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 push    rbx
.text:00000000000040A1                 mov     rbx, rdi
.text:00000000000040A4                 call    _malloc
.text:00000000000040A9                 test    rax, rax
.text:00000000000040AC                 jnz     short loc_40B3
.text:00000000000040AE                 test    rbx, rbx
.text:00000000000040B1                 jnz     short loc_40B5
.text:00000000000040B3
.text:00000000000040B3 loc_40B3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000040B3                 pop     rbx
.text:00000000000040B4                 retn
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040B5
.text:00000000000040B5 loc_40B5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000040B5                 call    xalloc_die
.text:00000000000040B5 ; } // starts at 40A0
.text:00000000000040B5 xmalloc         endp
.text:00000000000040B5
.text:00000000000040B5 ; ---------------------------------------------------------------------------
.text:00000000000040BA                 align 20h
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0 ; Attributes: info_from_lumina
.text:00000000000040C0
.text:00000000000040C0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000040C0                 public xnmalloc
.text:00000000000040C0 xnmalloc        proc near
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 mov     rax, rdi
.text:00000000000040C3                 mul     rsi
.text:00000000000040C6                 mov     rdi, rax
.text:00000000000040C9                 seto    al
.text:00000000000040CC                 test    rdi, rdi
.text:00000000000040CF                 js      short loc_40DB
.text:00000000000040D1                 movzx   eax, al
.text:00000000000040D4                 test    rax, rax
.text:00000000000040D7                 jnz     short loc_40DB
.text:00000000000040D9                 jmp     short xmalloc
.text:00000000000040DB ; ---------------------------------------------------------------------------
.text:00000000000040DB
.text:00000000000040DB loc_40DB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000040DB                                         ; xnmalloc+17↑j
.text:00000000000040DB                 sub     rsp, 8
.text:00000000000040DF                 call    xalloc_die
.text:00000000000040DF ; } // starts at 40C0
.text:00000000000040DF xnmalloc        endp
.text:00000000000040DF
.text:00000000000040DF ; ---------------------------------------------------------------------------
.text:00000000000040E4                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0
.text:00000000000040F0                 public xcharalloc
.text:00000000000040F0 xcharalloc      proc near
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 jmp     short xmalloc
.text:00000000000040F0 ; } // starts at 40F0
.text:00000000000040F0 xcharalloc      endp
.text:00000000000040F0
.text:00000000000040F0 ; ---------------------------------------------------------------------------
.text:00000000000040F2                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100 ; Attributes: info_from_lumina
.text:0000000000004100
.text:0000000000004100 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004100                 public xrealloc
.text:0000000000004100 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004100                                         ; quotearg_n_options+182↑p ...
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 test    rsi, rsi
.text:0000000000004103                 push    rbx
.text:0000000000004104                 mov     rbx, rsi
.text:0000000000004107                 jnz     short loc_410E
.text:0000000000004109                 test    rdi, rdi
.text:000000000000410C                 jnz     short loc_4128
.text:000000000000410E
.text:000000000000410E loc_410E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000410E                 mov     rsi, rbx        ; size
.text:0000000000004111                 call    _realloc
.text:0000000000004116                 test    rax, rax
.text:0000000000004119                 jnz     short loc_4120
.text:000000000000411B                 test    rbx, rbx
.text:000000000000411E                 jnz     short loc_4131
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004120                 pop     rbx
.text:0000000000004121                 retn
.text:0000000000004121 ; ---------------------------------------------------------------------------
.text:0000000000004122                 align 8
.text:0000000000004128
.text:0000000000004128 loc_4128:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004128                 call    _free
.text:000000000000412D                 xor     eax, eax
.text:000000000000412F                 pop     rbx
.text:0000000000004130                 retn
.text:0000000000004131 ; ---------------------------------------------------------------------------
.text:0000000000004131
.text:0000000000004131 loc_4131:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004131                 call    xalloc_die
.text:0000000000004131 ; } // starts at 4100
.text:0000000000004131 xrealloc        endp
.text:0000000000004131
.text:0000000000004131 ; ---------------------------------------------------------------------------
.text:0000000000004136                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004140                 public xnrealloc
.text:0000000000004140 xnrealloc       proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 mov     rax, rsi
.text:0000000000004143                 mul     rdx
.text:0000000000004146                 mov     rsi, rax
.text:0000000000004149                 seto    al
.text:000000000000414C                 test    rsi, rsi
.text:000000000000414F                 js      short loc_415B
.text:0000000000004151                 movzx   eax, al
.text:0000000000004154                 test    rax, rax
.text:0000000000004157                 jnz     short loc_415B
.text:0000000000004159                 jmp     short xrealloc
.text:000000000000415B ; ---------------------------------------------------------------------------
.text:000000000000415B
.text:000000000000415B loc_415B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000415B                                         ; xnrealloc+17↑j
.text:000000000000415B                 sub     rsp, 8
.text:000000000000415F                 call    xalloc_die
.text:000000000000415F ; } // starts at 4140
.text:000000000000415F xnrealloc       endp
.text:000000000000415F
.text:000000000000415F ; ---------------------------------------------------------------------------
.text:0000000000004164                 align 10h
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170 ; Attributes: info_from_lumina
.text:0000000000004170
.text:0000000000004170 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004170                 public x2nrealloc
.text:0000000000004170 x2nrealloc      proc near
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 test    rdi, rdi
.text:0000000000004173                 mov     r9, rdx
.text:0000000000004176                 mov     rcx, [rsi]
.text:0000000000004179                 jz      short loc_41B0
.text:000000000000417B                 xor     edx, edx
.text:000000000000417D                 mov     rax, 5555555555555554h
.text:0000000000004187                 div     r9
.text:000000000000418A                 cmp     rax, rcx
.text:000000000000418D                 jbe     short loc_41CB
.text:000000000000418F                 mov     rax, rcx
.text:0000000000004192                 shr     rax, 1
.text:0000000000004195                 lea     rcx, [rax+rcx+1]
.text:000000000000419A
.text:000000000000419A loc_419A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000419A                 mov     [rsi], rcx
.text:000000000000419D                 imul    rcx, r9
.text:00000000000041A1                 mov     rsi, rcx
.text:00000000000041A4                 jmp     xrealloc
.text:00000000000041A4 ; ---------------------------------------------------------------------------
.text:00000000000041A9                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000041B0                 test    rcx, rcx
.text:00000000000041B3                 jz      short loc_41D8
.text:00000000000041B5
.text:00000000000041B5 loc_41B5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000041B5                 mov     rax, rcx
.text:00000000000041B8                 mul     r9
.text:00000000000041BB                 seto    dl
.text:00000000000041BE                 test    rax, rax
.text:00000000000041C1                 movzx   edx, dl
.text:00000000000041C4                 js      short loc_41CB
.text:00000000000041C6                 test    rdx, rdx
.text:00000000000041C9                 jz      short loc_419A
.text:00000000000041CB
.text:00000000000041CB loc_41CB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000041CB                                         ; x2nrealloc+54↑j
.text:00000000000041CB                 sub     rsp, 8
.text:00000000000041CF                 call    xalloc_die
.text:00000000000041CF ; ---------------------------------------------------------------------------
.text:00000000000041D4                 align 8
.text:00000000000041D8
.text:00000000000041D8 loc_41D8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000041D8                 xor     edx, edx
.text:00000000000041DA                 mov     eax, 80h
.text:00000000000041DF                 xor     r8d, r8d
.text:00000000000041E2                 div     r9
.text:00000000000041E5                 test    rax, rax
.text:00000000000041E8                 setz    r8b
.text:00000000000041EC                 lea     rcx, [r8+rax]
.text:00000000000041F0                 jmp     short loc_41B5
.text:00000000000041F0 ; } // starts at 4170
.text:00000000000041F0 x2nrealloc      endp
.text:00000000000041F0
.text:00000000000041F0 ; ---------------------------------------------------------------------------
.text:00000000000041F2                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004200                 public x2realloc
.text:0000000000004200 x2realloc       proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 test    rdi, rdi
.text:0000000000004203                 mov     rax, [rsi]
.text:0000000000004206                 jz      short loc_4230
.text:0000000000004208                 mov     rdx, 5555555555555553h
.text:0000000000004212                 cmp     rax, rdx
.text:0000000000004215                 ja      short loc_4241
.text:0000000000004217                 mov     rdx, rax
.text:000000000000421A                 shr     rdx, 1
.text:000000000000421D                 lea     rax, [rdx+rax+1]
.text:0000000000004222
.text:0000000000004222 loc_4222:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004222                 mov     [rsi], rax
.text:0000000000004225                 mov     rsi, rax
.text:0000000000004228                 jmp     xrealloc
.text:0000000000004228 ; ---------------------------------------------------------------------------
.text:000000000000422D                 align 10h
.text:0000000000004230
.text:0000000000004230 loc_4230:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004230                 test    rax, rax
.text:0000000000004233                 mov     edx, 80h
.text:0000000000004238                 cmovz   rax, rdx
.text:000000000000423C                 test    rax, rax
.text:000000000000423F                 jns     short loc_4222
.text:0000000000004241
.text:0000000000004241 loc_4241:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004241                 sub     rsp, 8
.text:0000000000004245                 call    xalloc_die
.text:0000000000004245 ; } // starts at 4200
.text:0000000000004245 x2realloc       endp
.text:0000000000004245
.text:0000000000004245 ; ---------------------------------------------------------------------------
.text:000000000000424A                 align 10h
.text:0000000000004250
.text:0000000000004250 ; =============== S U B R O U T I N E =======================================
.text:0000000000004250
.text:0000000000004250
.text:0000000000004250 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004250                 public xzalloc
.text:0000000000004250 xzalloc         proc near
.text:0000000000004250 ; __unwind {
.text:0000000000004250                 push    rbx
.text:0000000000004251                 mov     rbx, rdi
.text:0000000000004254                 call    xmalloc
.text:0000000000004259                 mov     rdx, rbx        ; n
.text:000000000000425C                 xor     esi, esi        ; c
.text:000000000000425E                 mov     rdi, rax        ; s
.text:0000000000004261                 pop     rbx
.text:0000000000004262                 jmp     _memset
.text:0000000000004262 ; } // starts at 4250
.text:0000000000004262 xzalloc         endp
.text:0000000000004262
.text:0000000000004262 ; ---------------------------------------------------------------------------
.text:0000000000004267                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270 ; Attributes: info_from_lumina
.text:0000000000004270
.text:0000000000004270 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004270                 public xcalloc
.text:0000000000004270 xcalloc         proc near
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 mov     rax, rdi
.text:0000000000004273                 sub     rsp, 8
.text:0000000000004277                 mul     rsi
.text:000000000000427A                 seto    dl
.text:000000000000427D                 test    rax, rax
.text:0000000000004280                 js      short loc_4299
.text:0000000000004282                 movzx   edx, dl
.text:0000000000004285                 test    rdx, rdx
.text:0000000000004288                 jnz     short loc_4299
.text:000000000000428A                 call    _calloc
.text:000000000000428F                 test    rax, rax
.text:0000000000004292                 jz      short loc_4299
.text:0000000000004294                 add     rsp, 8
.text:0000000000004298                 retn
.text:0000000000004299 ; ---------------------------------------------------------------------------
.text:0000000000004299
.text:0000000000004299 loc_4299:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004299                                         ; xcalloc+18↑j ...
.text:0000000000004299                 call    xalloc_die
.text:0000000000004299 ; } // starts at 4270
.text:0000000000004299 xcalloc         endp
.text:0000000000004299
.text:0000000000004299 ; ---------------------------------------------------------------------------
.text:000000000000429E                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0 ; Attributes: info_from_lumina
.text:00000000000042A0
.text:00000000000042A0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000042A0                 public xmemdup
.text:00000000000042A0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000042A0                                         ; xstrdup+11↓j
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 push    rbp
.text:00000000000042A1                 push    rbx
.text:00000000000042A2                 mov     rbp, rdi
.text:00000000000042A5                 mov     rdi, rsi
.text:00000000000042A8                 mov     rbx, rsi
.text:00000000000042AB                 sub     rsp, 8
.text:00000000000042AF                 call    xmalloc
.text:00000000000042B4                 add     rsp, 8
.text:00000000000042B8                 mov     rdx, rbx        ; n
.text:00000000000042BB                 mov     rsi, rbp        ; src
.text:00000000000042BE                 pop     rbx
.text:00000000000042BF                 pop     rbp
.text:00000000000042C0                 mov     rdi, rax        ; dest
.text:00000000000042C3                 jmp     _memcpy
.text:00000000000042C3 ; } // starts at 42A0
.text:00000000000042C3 xmemdup         endp
.text:00000000000042C3
.text:00000000000042C3 ; ---------------------------------------------------------------------------
.text:00000000000042C8                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0
.text:00000000000042D0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000042D0                 public xstrdup
.text:00000000000042D0 xstrdup         proc near
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 push    rbx
.text:00000000000042D1                 mov     rbx, rdi
.text:00000000000042D4                 call    _strlen
.text:00000000000042D9                 mov     rdi, rbx        ; src
.text:00000000000042DC                 lea     rsi, [rax+1]    ; n
.text:00000000000042E0                 pop     rbx
.text:00000000000042E1                 jmp     short xmemdup
.text:00000000000042E1 ; } // starts at 42D0
.text:00000000000042E1 xstrdup         endp
.text:00000000000042E1
.text:00000000000042E1 ; ---------------------------------------------------------------------------
.text:00000000000042E3                 align 10h
.text:00000000000042F0
.text:00000000000042F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042F0
.text:00000000000042F0 ; Attributes: noreturn info_from_lumina
.text:00000000000042F0
.text:00000000000042F0 ; void __cdecl xalloc_die()
.text:00000000000042F0                 public xalloc_die
.text:00000000000042F0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_32C6↑p
.text:00000000000042F0                                         ; xmalloc:loc_40B5↑p ...
.text:00000000000042F0 ; __unwind {
.text:00000000000042F0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000042F7                 sub     rsp, 8
.text:00000000000042FB                 mov     edx, 5          ; category
.text:0000000000004300                 xor     edi, edi        ; domainname
.text:0000000000004302                 call    _dcgettext
.text:0000000000004307                 mov     edi, cs:exit_failure ; status
.text:000000000000430D                 lea     rdx, format+4   ; format
.text:0000000000004314                 mov     rcx, rax
.text:0000000000004317                 xor     esi, esi        ; errnum
.text:0000000000004319                 xor     eax, eax
.text:000000000000431B                 call    _error
.text:0000000000004320                 call    _abort
.text:0000000000004320 ; } // starts at 42F0
.text:0000000000004320 xalloc_die      endp
.text:0000000000004320
.text:0000000000004320 ; ---------------------------------------------------------------------------
.text:0000000000004325                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330 ; Attributes: info_from_lumina
.text:0000000000004330
.text:0000000000004330 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004330                 public rpl_mbrtowc
.text:0000000000004330 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004330
.text:0000000000004330 pwc             = dword ptr -34h
.text:0000000000004330 var_30          = qword ptr -30h
.text:0000000000004330
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 push    r13
.text:0000000000004332                 push    r12
.text:0000000000004334                 mov     r13, rsi
.text:0000000000004337                 push    rbp
.text:0000000000004338                 push    rbx
.text:0000000000004339                 mov     rbx, rdi
.text:000000000000433C                 mov     r12, rdx
.text:000000000000433F                 sub     rsp, 18h
.text:0000000000004343                 mov     rax, fs:28h
.text:000000000000434C                 mov     [rsp+38h+var_30], rax
.text:0000000000004351                 xor     eax, eax
.text:0000000000004353                 lea     rax, [rsp+38h+pwc]
.text:0000000000004358                 test    rdi, rdi
.text:000000000000435B                 cmovz   rbx, rax
.text:000000000000435F                 mov     rdi, rbx        ; pwc
.text:0000000000004362                 call    _mbrtowc
.text:0000000000004367                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000436B                 mov     rbp, rax
.text:000000000000436E                 jbe     short loc_4390
.text:0000000000004370                 test    r12, r12
.text:0000000000004373                 jz      short loc_4390
.text:0000000000004375                 xor     edi, edi
.text:0000000000004377                 call    hard_locale
.text:000000000000437C                 test    al, al
.text:000000000000437E                 jnz     short loc_4390
.text:0000000000004380                 movzx   eax, byte ptr [r13+0]
.text:0000000000004385                 mov     ebp, 1
.text:000000000000438A                 mov     [rbx], eax
.text:000000000000438C                 nop     dword ptr [rax+00h]
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004390                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004390                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004395                 xor     rdx, fs:28h
.text:000000000000439E                 mov     rax, rbp
.text:00000000000043A1                 jnz     short loc_43AE
.text:00000000000043A3                 add     rsp, 18h
.text:00000000000043A7                 pop     rbx
.text:00000000000043A8                 pop     rbp
.text:00000000000043A9                 pop     r12
.text:00000000000043AB                 pop     r13
.text:00000000000043AD                 retn
.text:00000000000043AE ; ---------------------------------------------------------------------------
.text:00000000000043AE
.text:00000000000043AE loc_43AE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000043AE                 call    ___stack_chk_fail
.text:00000000000043AE ; } // starts at 4330
.text:00000000000043AE rpl_mbrtowc     endp
.text:00000000000043AE
.text:00000000000043AE ; ---------------------------------------------------------------------------
.text:00000000000043B3                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0 ; Attributes: info_from_lumina
.text:00000000000043C0
.text:00000000000043C0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000043C0                 public close_stream
.text:00000000000043C0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000043C0                                         ; close_stdout+33↑p
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 push    r12
.text:00000000000043C2                 push    rbp
.text:00000000000043C3                 mov     rbp, rdi
.text:00000000000043C6                 push    rbx
.text:00000000000043C7                 call    ___fpending
.text:00000000000043CC                 mov     ebx, [rbp+0]
.text:00000000000043CF                 mov     rdi, rbp        ; stream
.text:00000000000043D2                 mov     r12, rax
.text:00000000000043D5                 call    rpl_fclose
.text:00000000000043DA                 and     ebx, 20h
.text:00000000000043DD                 test    ebx, ebx
.text:00000000000043DF                 jnz     short loc_43F8
.text:00000000000043E1                 test    eax, eax
.text:00000000000043E3                 jz      short loc_43EF
.text:00000000000043E5                 test    r12, r12
.text:00000000000043E8                 mov     eax, 0FFFFFFFFh
.text:00000000000043ED                 jz      short loc_4428
.text:00000000000043EF
.text:00000000000043EF loc_43EF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000043EF                 pop     rbx
.text:00000000000043F0                 pop     rbp
.text:00000000000043F1                 pop     r12
.text:00000000000043F3                 retn
.text:00000000000043F3 ; ---------------------------------------------------------------------------
.text:00000000000043F4                 align 8
.text:00000000000043F8
.text:00000000000043F8 loc_43F8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000043F8                 test    eax, eax
.text:00000000000043FA                 jnz     short loc_4418
.text:00000000000043FC                 call    ___errno_location
.text:0000000000004401                 mov     dword ptr [rax], 0
.text:0000000000004407                 mov     eax, 0FFFFFFFFh
.text:000000000000440C                 pop     rbx
.text:000000000000440D                 pop     rbp
.text:000000000000440E                 pop     r12
.text:0000000000004410                 retn
.text:0000000000004410 ; ---------------------------------------------------------------------------
.text:0000000000004411                 align 8
.text:0000000000004418
.text:0000000000004418 loc_4418:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004418                 pop     rbx
.text:0000000000004419                 mov     eax, 0FFFFFFFFh
.text:000000000000441E                 pop     rbp
.text:000000000000441F                 pop     r12
.text:0000000000004421                 retn
.text:0000000000004421 ; ---------------------------------------------------------------------------
.text:0000000000004422                 align 8
.text:0000000000004428
.text:0000000000004428 loc_4428:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004428                 call    ___errno_location
.text:000000000000442D                 cmp     dword ptr [rax], 9
.text:0000000000004430                 pop     rbx
.text:0000000000004431                 pop     rbp
.text:0000000000004432                 pop     r12
.text:0000000000004434                 setnz   al
.text:0000000000004437                 movzx   eax, al
.text:000000000000443A                 neg     eax
.text:000000000000443C                 retn
.text:000000000000443C ; } // starts at 43C0
.text:000000000000443C close_stream    endp
.text:000000000000443C
.text:000000000000443C ; ---------------------------------------------------------------------------
.text:000000000000443D                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440
.text:0000000000004440                 public hard_locale
.text:0000000000004440 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 sub     rsp, 8
.text:0000000000004444                 xor     esi, esi        ; locale
.text:0000000000004446                 call    _setlocale
.text:000000000000444B                 mov     rdx, rax
.text:000000000000444E                 mov     eax, 1
.text:0000000000004453                 test    rdx, rdx
.text:0000000000004456                 jz      short loc_4475
.text:0000000000004458                 lea     rdi, aC         ; "C"
.text:000000000000445F                 mov     ecx, 2
.text:0000000000004464                 mov     rsi, rdx
.text:0000000000004467                 repe cmpsb
.text:0000000000004469                 setnbe  cl
.text:000000000000446C                 sbb     cl, 0
.text:000000000000446F                 xor     eax, eax
.text:0000000000004471                 test    cl, cl
.text:0000000000004473                 jnz     short loc_4480
.text:0000000000004475
.text:0000000000004475 loc_4475:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004475                 add     rsp, 8
.text:0000000000004479                 retn
.text:0000000000004479 ; ---------------------------------------------------------------------------
.text:000000000000447A                 align 20h
.text:0000000000004480
.text:0000000000004480 loc_4480:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004480                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004487                 mov     ecx, 6
.text:000000000000448C                 mov     rsi, rdx
.text:000000000000448F                 repe cmpsb
.text:0000000000004491                 setnbe  al
.text:0000000000004494                 sbb     al, 0
.text:0000000000004496                 test    al, al
.text:0000000000004498                 setnz   al
.text:000000000000449B                 add     rsp, 8
.text:000000000000449F                 retn
.text:000000000000449F ; } // starts at 4440
.text:000000000000449F hard_locale     endp
.text:000000000000449F
.text:00000000000044A0
.text:00000000000044A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044A0
.text:00000000000044A0
.text:00000000000044A0                 public locale_charset
.text:00000000000044A0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000044A0 ; __unwind {
.text:00000000000044A0                 sub     rsp, 8
.text:00000000000044A4                 mov     edi, 0Eh        ; item
.text:00000000000044A9                 call    _nl_langinfo
.text:00000000000044AE                 test    rax, rax
.text:00000000000044B1                 jz      short loc_44D0
.text:00000000000044B3                 cmp     byte ptr [rax], 0
.text:00000000000044B6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000044BD                 cmovz   rax, rdx
.text:00000000000044C1                 add     rsp, 8
.text:00000000000044C5                 retn
.text:00000000000044C5 ; ---------------------------------------------------------------------------
.text:00000000000044C6                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000044D0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000044D7                 add     rsp, 8
.text:00000000000044DB                 retn
.text:00000000000044DB ; } // starts at 44A0
.text:00000000000044DB locale_charset  endp
.text:00000000000044DB
.text:00000000000044DB ; ---------------------------------------------------------------------------
.text:00000000000044DC                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0 ; Attributes: info_from_lumina
.text:00000000000044E0
.text:00000000000044E0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000044E0                 public rpl_fclose
.text:00000000000044E0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 push    r12
.text:00000000000044E2                 push    rbp
.text:00000000000044E3                 push    rbx
.text:00000000000044E4                 mov     rbx, rdi
.text:00000000000044E7                 call    _fileno
.text:00000000000044EC                 test    eax, eax
.text:00000000000044EE                 mov     rdi, rbx        ; fp
.text:00000000000044F1                 js      short loc_4547
.text:00000000000044F3                 call    ___freading
.text:00000000000044F8                 test    eax, eax
.text:00000000000044FA                 jnz     short loc_4528
.text:00000000000044FC
.text:00000000000044FC loc_44FC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000044FC                 mov     rdi, rbx        ; stream
.text:00000000000044FF                 call    rpl_fflush
.text:0000000000004504                 test    eax, eax
.text:0000000000004506                 jz      short loc_4544
.text:0000000000004508                 call    ___errno_location
.text:000000000000450D                 mov     r12d, [rax]
.text:0000000000004510                 mov     rdi, rbx        ; stream
.text:0000000000004513                 mov     rbp, rax
.text:0000000000004516                 call    _fclose
.text:000000000000451B                 test    r12d, r12d
.text:000000000000451E                 jnz     short loc_4550
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004520                 pop     rbx
.text:0000000000004521                 pop     rbp
.text:0000000000004522                 pop     r12
.text:0000000000004524                 retn
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004525                 align 8
.text:0000000000004528
.text:0000000000004528 loc_4528:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004528                 mov     rdi, rbx        ; stream
.text:000000000000452B                 call    _fileno
.text:0000000000004530                 xor     esi, esi        ; offset
.text:0000000000004532                 mov     edx, 1          ; whence
.text:0000000000004537                 mov     edi, eax        ; fd
.text:0000000000004539                 call    _lseek
.text:000000000000453E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004542                 jnz     short loc_44FC
.text:0000000000004544
.text:0000000000004544 loc_4544:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004544                 mov     rdi, rbx        ; stream
.text:0000000000004547
.text:0000000000004547 loc_4547:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004547                 pop     rbx
.text:0000000000004548                 pop     rbp
.text:0000000000004549                 pop     r12
.text:000000000000454B                 jmp     _fclose
.text:0000000000004550 ; ---------------------------------------------------------------------------
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004550                 mov     [rbp+0], r12d
.text:0000000000004554                 mov     eax, 0FFFFFFFFh
.text:0000000000004559                 jmp     short loc_4520
.text:0000000000004559 ; } // starts at 44E0
.text:0000000000004559 rpl_fclose      endp
.text:0000000000004559
.text:0000000000004559 ; ---------------------------------------------------------------------------
.text:000000000000455B                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560 ; Attributes: info_from_lumina
.text:0000000000004560
.text:0000000000004560 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004560                 public rpl_fflush
.text:0000000000004560 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 test    rdi, rdi
.text:0000000000004563                 push    rbx
.text:0000000000004564                 mov     rbx, rdi
.text:0000000000004567                 jz      short loc_457A
.text:0000000000004569                 call    ___freading
.text:000000000000456E                 test    eax, eax
.text:0000000000004570                 jz      short loc_457A
.text:0000000000004572                 test    dword ptr [rbx], 100h
.text:0000000000004578                 jnz     short loc_4588
.text:000000000000457A
.text:000000000000457A loc_457A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000457A                                         ; rpl_fflush+10↑j
.text:000000000000457A                 mov     rdi, rbx        ; stream
.text:000000000000457D                 pop     rbx
.text:000000000000457E                 jmp     _fflush
.text:000000000000457E ; ---------------------------------------------------------------------------
.text:0000000000004583                 align 8
.text:0000000000004588
.text:0000000000004588 loc_4588:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004588                 mov     rdi, rbx
.text:000000000000458B                 mov     edx, 1
.text:0000000000004590                 xor     esi, esi
.text:0000000000004592                 call    rpl_fseeko
.text:0000000000004597                 mov     rdi, rbx        ; stream
.text:000000000000459A                 pop     rbx
.text:000000000000459B                 jmp     _fflush
.text:000000000000459B ; } // starts at 4560
.text:000000000000459B rpl_fflush      endp
.text:000000000000459B
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000045A0                 public rpl_fseeko
.text:00000000000045A0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 mov     rax, [rdi+8]
.text:00000000000045A4                 cmp     [rdi+10h], rax
.text:00000000000045A8                 jz      short loc_45B0
.text:00000000000045AA
.text:00000000000045AA loc_45AA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000045AA                                         ; rpl_fseeko+1F↓j
.text:00000000000045AA                 jmp     _fseeko
.text:00000000000045AA ; ---------------------------------------------------------------------------
.text:00000000000045AF                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000045B0                 mov     rax, [rdi+20h]
.text:00000000000045B4                 cmp     [rdi+28h], rax
.text:00000000000045B8                 jnz     short loc_45AA
.text:00000000000045BA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000045BF                 jnz     short loc_45AA
.text:00000000000045C1                 push    r12
.text:00000000000045C3                 push    rbp
.text:00000000000045C4                 mov     r12d, edx
.text:00000000000045C7                 push    rbx
.text:00000000000045C8                 mov     rbp, rsi
.text:00000000000045CB                 mov     rbx, rdi
.text:00000000000045CE                 call    _fileno
.text:00000000000045D3                 mov     edx, r12d       ; whence
.text:00000000000045D6                 mov     rsi, rbp        ; offset
.text:00000000000045D9                 mov     edi, eax        ; fd
.text:00000000000045DB                 call    _lseek
.text:00000000000045E0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000045E4                 jz      short loc_45F2
.text:00000000000045E6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000045E9                 mov     [rbx+90h], rax
.text:00000000000045F0                 xor     eax, eax
.text:00000000000045F2
.text:00000000000045F2 loc_45F2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000045F2                 pop     rbx
.text:00000000000045F3                 pop     rbp
.text:00000000000045F4                 pop     r12
.text:00000000000045F6                 retn
.text:00000000000045F6 ; } // starts at 45A0
.text:00000000000045F6 rpl_fseeko      endp
.text:00000000000045F6
.text:00000000000045F6 ; ---------------------------------------------------------------------------
.text:00000000000045F7                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600 ; Attributes: info_from_lumina
.text:0000000000004600
.text:0000000000004600 ; void _libc_csu_init(void)
.text:0000000000004600                 public __libc_csu_init
.text:0000000000004600 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 push    r15
.text:0000000000004602                 push    r14
.text:0000000000004604                 mov     r15, rdx
.text:0000000000004607                 push    r13
.text:0000000000004609                 push    r12
.text:000000000000460B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004612                 push    rbp
.text:0000000000004613                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000461A                 push    rbx
.text:000000000000461B                 mov     r13d, edi
.text:000000000000461E                 mov     r14, rsi
.text:0000000000004621                 sub     rbp, r12
.text:0000000000004624                 sub     rsp, 8
.text:0000000000004628                 sar     rbp, 3
.text:000000000000462C                 call    _init_proc
.text:0000000000004631                 test    rbp, rbp
.text:0000000000004634                 jz      short loc_4656
.text:0000000000004636                 xor     ebx, ebx
.text:0000000000004638                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004640                 mov     rdx, r15
.text:0000000000004643                 mov     rsi, r14
.text:0000000000004646                 mov     edi, r13d
.text:0000000000004649                 call    ds:(__frame_dummy_init_array_entry - 206B90h)[r12+rbx*8]
.text:000000000000464D                 add     rbx, 1
.text:0000000000004651                 cmp     rbp, rbx
.text:0000000000004654                 jnz     short loc_4640
.text:0000000000004656
.text:0000000000004656 loc_4656:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004656                 add     rsp, 8
.text:000000000000465A                 pop     rbx
.text:000000000000465B                 pop     rbp
.text:000000000000465C                 pop     r12
.text:000000000000465E                 pop     r13
.text:0000000000004660                 pop     r14
.text:0000000000004662                 pop     r15
.text:0000000000004664                 retn
.text:0000000000004664 ; } // starts at 4600
.text:0000000000004664 __libc_csu_init endp
.text:0000000000004664
.text:0000000000004664 ; ---------------------------------------------------------------------------
.text:0000000000004665                 align 10h
.text:0000000000004670
.text:0000000000004670 ; =============== S U B R O U T I N E =======================================
.text:0000000000004670
.text:0000000000004670
.text:0000000000004670 ; void _libc_csu_fini(void)
.text:0000000000004670                 public __libc_csu_fini
.text:0000000000004670 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004670 ; __unwind {
.text:0000000000004670                 rep retn
.text:0000000000004670 ; } // starts at 4670
.text:0000000000004670 __libc_csu_fini endp
.text:0000000000004670
.text:0000000000004670 ; ---------------------------------------------------------------------------
.text:0000000000004672                 align 20h
.text:0000000000004680
.text:0000000000004680 ; =============== S U B R O U T I N E =======================================
.text:0000000000004680
.text:0000000000004680
.text:0000000000004680 atexit          proc near               ; CODE XREF: main+4F↑p
.text:0000000000004680 ; __unwind {
.text:0000000000004680                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004687                 xor     esi, esi        ; obj
.text:0000000000004689                 jmp     ___cxa_atexit
.text:0000000000004689 ; } // starts at 4680
.text:0000000000004689 atexit          endp
.text:0000000000004689
.text:0000000000004689 _text           ends
.text:0000000000004689
LOAD:000000000000468E ; ===========================================================================
LOAD:000000000000468E
LOAD:000000000000468E ; Segment type: Pure code
LOAD:000000000000468E ; Segment permissions: Read/Execute
LOAD:000000000000468E LOAD            segment byte public 'CODE' use64
LOAD:000000000000468E                 assume cs:LOAD
LOAD:000000000000468E                 ;org 468Eh
LOAD:000000000000468E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000468E                 align 10h
LOAD:000000000000468E LOAD            ends
LOAD:000000000000468E
.fini:0000000000004690 ; ===========================================================================
.fini:0000000000004690
.fini:0000000000004690 ; Segment type: Pure code
.fini:0000000000004690 ; Segment permissions: Read/Execute
.fini:0000000000004690 _fini           segment dword public 'CODE' use64
.fini:0000000000004690                 assume cs:_fini
.fini:0000000000004690                 ;org 4690h
.fini:0000000000004690                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004690
.fini:0000000000004690 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004690
.fini:0000000000004690
.fini:0000000000004690                 public _term_proc
.fini:0000000000004690 _term_proc      proc near
.fini:0000000000004690                 sub     rsp, 8          ; _fini
.fini:0000000000004694                 add     rsp, 8
.fini:0000000000004698                 retn
.fini:0000000000004698 _term_proc      endp
.fini:0000000000004698
.fini:0000000000004698 _fini           ends
.fini:0000000000004698
LOAD:0000000000004699 ; ===========================================================================
LOAD:0000000000004699
LOAD:0000000000004699 ; Segment type: Pure code
LOAD:0000000000004699 ; Segment permissions: Read/Execute
LOAD:0000000000004699 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004699                 assume cs:LOAD
LOAD:0000000000004699                 ;org 4699h
LOAD:0000000000004699                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004699                 align 20h
LOAD:0000000000004699 LOAD            ends
LOAD:0000000000004699
.rodata:00000000000046A0 ; ===========================================================================
.rodata:00000000000046A0
.rodata:00000000000046A0 ; Segment type: Pure data
.rodata:00000000000046A0 ; Segment permissions: Read
.rodata:00000000000046A0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000046A0                 assume cs:_rodata
.rodata:00000000000046A0                 ;org 46A0h
.rodata:00000000000046A0                 public _IO_stdin_used
.rodata:00000000000046A0 _IO_stdin_used  db    1
.rodata:00000000000046A1                 db    0
.rodata:00000000000046A2                 db    2
.rodata:00000000000046A3                 db    0
.rodata:00000000000046A4 aDirname        db 'dirname',0          ; DATA XREF: main+C9↑o
.rodata:00000000000046A4                                         ; usage+151↑o ...
.rodata:00000000000046AC ; const char aUsageSOptionNa[]
.rodata:00000000000046AC aUsageSOptionNa db 'Usage: %s [OPTION] NAME...',0Ah,0
.rodata:00000000000046AC                                         ; DATA XREF: usage:loc_17CD↑o
.rodata:00000000000046C8 asc_46C8        db '[',0                ; DATA XREF: usage+143↑o
.rodata:00000000000046CA aTestInvocation db 'test invocation',0  ; DATA XREF: usage+171↑o
.rodata:00000000000046DA aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000046DA                                         ; DATA XREF: usage+1A1↑o
.rodata:00000000000046DA                                         ; usage+29C↑o ...
.rodata:00000000000046F0 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1B2↑o
.rodata:00000000000046FA aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1BE↑o
.rodata:0000000000004709 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+14A↑o
.rodata:0000000000004713 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+17D↑o
.rodata:000000000000471D aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+195↑o
.rodata:0000000000004727 ; const char aSOnlineHelpS[]
.rodata:0000000000004727 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+20A↑o
.rodata:0000000000004727                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000473E unk_473E        db  47h ; G             ; DATA XREF: main+C2↑o
.rodata:000000000000473E                                         ; usage+226↑o ...
.rodata:000000000000473F                 db  4Eh ; N
.rodata:0000000000004740                 db  55h ; U
.rodata:0000000000004741                 db  20h
.rodata:0000000000004742 ; const char domainname[]
.rodata:0000000000004742 domainname      db 'coreutils',0        ; DATA XREF: main+30↑o
.rodata:0000000000004742                                         ; main+3C↑o ...
.rodata:000000000000474C ; const char s2[]
.rodata:000000000000474C s2              db 'en_',0              ; DATA XREF: usage+24D↑o
.rodata:000000000000474C                                         ; usage+30E↑o
.rodata:0000000000004750 ; const char aFullDocumentat[]
.rodata:0000000000004750 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004750                                         ; DATA XREF: usage:loc_19D9↑o
.rodata:0000000000004750                                         ; usage:loc_1A96↑o
.rodata:000000000000476B ; const char dirname[]
.rodata:000000000000476B dirname         db '/usr/local/share/locale',0
.rodata:000000000000476B                                         ; DATA XREF: main+29↑o
.rodata:0000000000004783 ; const char shortopts[]
.rodata:0000000000004783 shortopts       db 'z',0                ; DATA XREF: main+5B↑o
.rodata:0000000000004785 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+B4↑o
.rodata:0000000000004792 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+BB↑o
.rodata:00000000000047A2 ; const char msgid[]
.rodata:00000000000047A2 msgid           db 'missing operand',0  ; DATA XREF: main:loc_1637↑o
.rodata:00000000000047B2 aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000047B7 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:00000000000047BC aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:00000000000047C4                 align 8
.rodata:00000000000047C8 ; const char aTrySHelpForMor[]
.rodata:00000000000047C8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000047C8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000047EF                 align 10h
.rodata:00000000000047F0 ; const char aOutputEachName[]
.rodata:00000000000047F0 aOutputEachName db 'Output each NAME with its last non-slash component and trailing s'
.rodata:00000000000047F0                                         ; DATA XREF: usage+84↑o
.rodata:00000000000047F0                 db 'lashes',0Ah
.rodata:00000000000047F0                 db 'removed; if NAME contains no /',27h,'s, output ',27h,'.',27h,' (m'
.rodata:00000000000047F0                 db 'eaning the current directory).',0Ah
.rodata:00000000000047F0                 db 0Ah,0
.rodata:0000000000004888 ; const char aZZeroEndEachOu[]
.rodata:0000000000004888 aZZeroEndEachOu db '  -z, --zero     end each output line with NUL, not newline',0Ah,0
.rodata:0000000000004888                                         ; DATA XREF: usage+A9↑o
.rodata:00000000000048C5                 align 8
.rodata:00000000000048C8 ; const char aHelpDisplayThi[]
.rodata:00000000000048C8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000048C8                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000048F5                 align 8
.rodata:00000000000048F8 ; const char aVersionOutputV[]
.rodata:00000000000048F8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000048F8                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000492E                 align 10h
.rodata:0000000000004930 ; const char aExamplesSUsrBi[]
.rodata:0000000000004930 aExamplesSUsrBi db 0Ah                  ; DATA XREF: usage+118↑o
.rodata:0000000000004930                 db 'Examples:',0Ah
.rodata:0000000000004930                 db '  %s /usr/bin/          -> "/usr"',0Ah
.rodata:0000000000004930                 db '  %s dir1/str dir2/str  -> "dir1" followed by "dir2"',0Ah
.rodata:0000000000004930                 db '  %s stdio.h            -> "."',0Ah,0
.rodata:00000000000049B2                 align 8
.rodata:00000000000049B8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000049B8                                         ; DATA XREF: usage+21F↑o
.rodata:00000000000049B8                                         ; usage+283↑o ...
.rodata:00000000000049E0 ; const char aReportAnyTrans[]
.rodata:00000000000049E0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000049E0                                         ; DATA XREF: usage+377↑o
.rodata:00000000000049E0                 db 'am/>',0Ah,0
.rodata:0000000000004A27                 align 8
.rodata:0000000000004A28 ; const char aOrAvailableLoc[]
.rodata:0000000000004A28 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004A28                                         ; DATA XREF: usage:loc_1A1E↑o
.rodata:0000000000004A5B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004A60 ; const char aWriteError[]
.rodata:0000000000004A60 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1B73↑o
.rodata:0000000000004A6C ; const char format[]
.rodata:0000000000004A6C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004A6C                                         ; close_stdout+8F↑o ...
.rodata:0000000000004A73                 align 8
.rodata:0000000000004A78 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004A78                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004AB0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004AB8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004ABC unk_4ABC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004ABD                 db  80h
.rodata:0000000000004ABE                 db  98h
.rodata:0000000000004ABF                 db    0
.rodata:0000000000004AC0 unk_4AC0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004AC1                 db  80h
.rodata:0000000000004AC2                 db  99h
.rodata:0000000000004AC3                 db    0
.rodata:0000000000004AC4 unk_4AC4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004AC5                 db    7
.rodata:0000000000004AC6                 db  65h ; e
.rodata:0000000000004AC7                 db    0
.rodata:0000000000004AC8 unk_4AC8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004AC9                 db 0AFh
.rodata:0000000000004ACA                 db    0
.rodata:0000000000004ACB unk_4ACB        db  22h ; "             ; DATA XREF: gettext_quote:loc_1E10↑o
.rodata:0000000000004ACB                                         ; quotearg_buffer_restyled:loc_2BCB↑o ...
.rodata:0000000000004ACC                 db    0
.rodata:0000000000004ACD ; const char asc_4ACD[2]
.rodata:0000000000004ACD asc_4ACD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004ACD                                         ; quotearg_buffer_restyled:loc_1F93↑o ...
.rodata:0000000000004ACF ; const char asc_4ACF[2]
.rodata:0000000000004ACF asc_4ACF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004ACF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004AD1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004AD9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004ADF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004AEC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004AEC                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004AF9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004AF9                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004B0D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004B0F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004B17 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004B1F                 align 20h
.rodata:0000000000004B20 jpt_1F71        dd offset loc_2D1A - 4B20h
.rodata:0000000000004B20                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004B20                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004B20                 dd offset loc_1F73 - 4B20h ; jump table for switch statement
.rodata:0000000000004B20                 dd offset loc_2F48 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2D54 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2B44 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2BA0 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2BF5 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2C3A - 4B20h
.rodata:0000000000004B20                 dd offset loc_2C74 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2C74 - 4B20h
.rodata:0000000000004B20                 dd offset loc_2C74 - 4B20h
.rodata:0000000000004B4C jpt_20CE        dd offset loc_22F0 - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004B4C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch ; jump table for switch statement
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset loc_2330 - 4B4Ch, offset loc_2238 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_21F8 - 4B4Ch, offset loc_23C0 - 4B4Ch, offset loc_23B0 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_23A0 - 4B4Ch, offset loc_2390 - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch
.rodata:0000000000004B4C                 dd offset def_20CE - 4B4Ch, offset def_20CE - 4B4Ch, offset loc_2380 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2370 - 4B4Ch, offset loc_2370 - 4B4Ch, offset loc_2340 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2370 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2370 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_21D3 - 4B4Ch, offset loc_2370 - 4B4Ch, offset loc_2370 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2370 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2370 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2370 - 4B4Ch, offset loc_2370 - 4B4Ch, offset loc_2370 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_21A3 - 4B4Ch, offset def_20CE - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2370 - 4B4Ch, offset loc_2248 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2370 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2370 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch, offset loc_2318 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_20D3 - 4B4Ch, offset loc_2370 - 4B4Ch, offset loc_20D3 - 4B4Ch
.rodata:0000000000004B4C                 dd offset loc_2340 - 4B4Ch
.rodata:0000000000004D48 jpt_245A        dd offset loc_24C0 - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004D48                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h ; jump table for switch statement
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset loc_24B0 - 4D48h, offset loc_2600 - 4D48h
.rodata:0000000000004D48                 dd offset loc_25E8 - 4D48h, offset loc_2498 - 4D48h, offset loc_25D8 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2480 - 4D48h, offset loc_25C0 - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset def_245A - 4D48h
.rodata:0000000000004D48                 dd offset def_245A - 4D48h, offset def_245A - 4D48h, offset loc_25A8 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2590 - 4D48h, offset loc_2590 - 4D48h, offset loc_2578 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2590 - 4D48h, offset loc_2560 - 4D48h, offset loc_2590 - 4D48h
.rodata:0000000000004D48                 dd offset loc_21D0 - 4D48h, offset loc_2590 - 4D48h, offset loc_2590 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2590 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2590 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2590 - 4D48h, offset loc_2590 - 4D48h, offset loc_2590 - 4D48h
.rodata:0000000000004D48                 dd offset loc_21A0 - 4D48h, offset def_245A - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2590 - 4D48h, offset loc_2460 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2590 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2590 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2560 - 4D48h, offset loc_2560 - 4D48h, offset loc_2560 - 4D48h
.rodata:0000000000004D48                 dd offset loc_20D0 - 4D48h, offset loc_2590 - 4D48h, offset loc_20D0 - 4D48h
.rodata:0000000000004D48                 dd offset loc_2578 - 4D48h
.rodata:0000000000004F44                 align 20h
.rodata:0000000000004F60                 public quoting_style_vals
.rodata:0000000000004F60 quoting_style_vals db    0
.rodata:0000000000004F61                 db    0
.rodata:0000000000004F62                 db    0
.rodata:0000000000004F63                 db    0
.rodata:0000000000004F64                 db    1
.rodata:0000000000004F65                 db    0
.rodata:0000000000004F66                 db    0
.rodata:0000000000004F67                 db    0
.rodata:0000000000004F68                 db    2
.rodata:0000000000004F69                 db    0
.rodata:0000000000004F6A                 db    0
.rodata:0000000000004F6B                 db    0
.rodata:0000000000004F6C                 db    3
.rodata:0000000000004F6D                 db    0
.rodata:0000000000004F6E                 db    0
.rodata:0000000000004F6F                 db    0
.rodata:0000000000004F70                 db    4
.rodata:0000000000004F71                 db    0
.rodata:0000000000004F72                 db    0
.rodata:0000000000004F73                 db    0
.rodata:0000000000004F74                 db    5
.rodata:0000000000004F75                 db    0
.rodata:0000000000004F76                 db    0
.rodata:0000000000004F77                 db    0
.rodata:0000000000004F78                 db    6
.rodata:0000000000004F79                 db    0
.rodata:0000000000004F7A                 db    0
.rodata:0000000000004F7B                 db    0
.rodata:0000000000004F7C                 db    7
.rodata:0000000000004F7D                 db    0
.rodata:0000000000004F7E                 db    0
.rodata:0000000000004F7F                 db    0
.rodata:0000000000004F80                 db    8
.rodata:0000000000004F81                 db    0
.rodata:0000000000004F82                 db    0
.rodata:0000000000004F83                 db    0
.rodata:0000000000004F84                 db    9
.rodata:0000000000004F85                 db    0
.rodata:0000000000004F86                 db    0
.rodata:0000000000004F87                 db    0
.rodata:0000000000004F88 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004F94 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004F9B ; const char aC_0[]
.rodata:0000000000004F9B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3ABC↑o
.rodata:0000000000004F9F ; const char aWrittenByS[]
.rodata:0000000000004F9F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004F9F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004FAF ; const char aWrittenBySAndS[]
.rodata:0000000000004FAF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004FAF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004FC6 ; const char aWrittenBySSAnd[]
.rodata:0000000000004FC6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004FC6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004FE2 ; const char aReportBugsToS[]
.rodata:0000000000004FE2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004FE2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004FF7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004FF7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000500D ; const char aSHomePageS[]
.rodata:000000000000500D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000500D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005021                 align 8
.rodata:0000000000005028 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005028 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005028                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005028                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005028                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005028                 db '.',0Ah
.rodata:0000000000005028                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005028                 db 0Ah,0
.rodata:00000000000050F4                 align 8
.rodata:00000000000050F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000050F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050F8                                         ; DATA XREF: version_etc_arn:loc_3D10↑o
.rodata:00000000000050F8                 db 'and %s.',0Ah,0
.rodata:0000000000005118 ; const char aWrittenBySSSSA[]
.rodata:0000000000005118 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005118                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005118                 db '%s, and %s.',0Ah,0
.rodata:000000000000513C                 align 20h
.rodata:0000000000005140 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005140 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005140                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005140                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005168 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005168 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005168                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005168                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005194                 align 8
.rodata:0000000000005198 ; const char aWrittenBySSSSS[]
.rodata:0000000000005198 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005198                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005198                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005198                 db 'and %s.',0Ah,0
.rodata:00000000000051C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000051C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000051C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000051C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000051C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000051FC                 align 20h
.rodata:0000000000005200 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005200                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005200                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005200                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000523C                 align 20h
.rodata:0000000000005240 ; const char aGeneralHelpUsi[]
.rodata:0000000000005240 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005240                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005240                 db 0
.rodata:0000000000005281                 align 8
.rodata:0000000000005288 jpt_3B24        dd offset loc_3BA6 - 5288h
.rodata:0000000000005288                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005288                                         ; version_etc_arn+9D↑r
.rodata:0000000000005288                 dd offset loc_3C38 - 5288h ; jump table for switch statement
.rodata:0000000000005288                 dd offset loc_3C78 - 5288h
.rodata:0000000000005288                 dd offset loc_3CC0 - 5288h
.rodata:0000000000005288                 dd offset loc_3D10 - 5288h
.rodata:0000000000005288                 dd offset loc_3D68 - 5288h
.rodata:0000000000005288                 dd offset loc_3D98 - 5288h
.rodata:0000000000005288                 dd offset loc_3E00 - 5288h
.rodata:0000000000005288                 dd offset loc_3B30 - 5288h
.rodata:0000000000005288                 dd offset loc_3BE0 - 5288h
.rodata:00000000000052B0                 align 20h
.rodata:00000000000052C0                 public version_etc_copyright
.rodata:00000000000052C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000052C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000052EF ; const char aMemoryExhauste[]
.rodata:00000000000052EF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005300 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005302 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4480↑o
.rodata:0000000000005308 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005308                                         ; locale_charset:loc_44D0↑o
.rodata:0000000000005308 _rodata         ends
.rodata:0000000000005308
LOAD:000000000000530E ; ===========================================================================
LOAD:000000000000530E
LOAD:000000000000530E ; Segment type: Pure code
LOAD:000000000000530E ; Segment permissions: Read/Execute
LOAD:000000000000530E LOAD            segment byte public 'CODE' use64
LOAD:000000000000530E                 assume cs:LOAD
LOAD:000000000000530E                 ;org 530Eh
LOAD:000000000000530E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000530E                 align 10h
LOAD:000000000000530E LOAD            ends
LOAD:000000000000530E
.eh_frame_hdr:0000000000005310 ; ===========================================================================
.eh_frame_hdr:0000000000005310
.eh_frame_hdr:0000000000005310 ; Segment type: Pure data
.eh_frame_hdr:0000000000005310 ; Segment permissions: Read
.eh_frame_hdr:0000000000005310 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005310                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005310                 ;org 5310h
.eh_frame_hdr:0000000000005310 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005311                 db  1Bh
.eh_frame_hdr:0000000000005312                 db    3
.eh_frame_hdr:0000000000005313                 db  3Bh ; ;
.eh_frame_hdr:0000000000005314                 db  5Ch ; \
.eh_frame_hdr:0000000000005315                 db    2
.eh_frame_hdr:0000000000005316                 db    0
.eh_frame_hdr:0000000000005317                 db    0
.eh_frame_hdr:0000000000005318                 db  4Ah ; J
.eh_frame_hdr:0000000000005319                 db    0
.eh_frame_hdr:000000000000531A                 db    0
.eh_frame_hdr:000000000000531B                 db    0
.eh_frame_hdr:000000000000531C                 db 0E0h
.eh_frame_hdr:000000000000531D                 db 0BEh
.eh_frame_hdr:000000000000531E                 db 0FFh
.eh_frame_hdr:000000000000531F                 db 0FFh
.eh_frame_hdr:0000000000005320                 db 0A8h
.eh_frame_hdr:0000000000005321                 db    2
.eh_frame_hdr:0000000000005322                 db    0
.eh_frame_hdr:0000000000005323                 db    0
.eh_frame_hdr:0000000000005324                 db  80h
.eh_frame_hdr:0000000000005325                 db 0C1h
.eh_frame_hdr:0000000000005326                 db 0FFh
.eh_frame_hdr:0000000000005327                 db 0FFh
.eh_frame_hdr:0000000000005328                 db 0D0h
.eh_frame_hdr:0000000000005329                 db    2
.eh_frame_hdr:000000000000532A                 db    0
.eh_frame_hdr:000000000000532B                 db    0
.eh_frame_hdr:000000000000532C                 db  90h
.eh_frame_hdr:000000000000532D                 db 0C1h
.eh_frame_hdr:000000000000532E                 db 0FFh
.eh_frame_hdr:000000000000532F                 db 0FFh
.eh_frame_hdr:0000000000005330                 db  14h
.eh_frame_hdr:0000000000005331                 db    3
.eh_frame_hdr:0000000000005332                 db    0
.eh_frame_hdr:0000000000005333                 db    0
.eh_frame_hdr:0000000000005334                 db  50h ; P
.eh_frame_hdr:0000000000005335                 db 0C3h
.eh_frame_hdr:0000000000005336                 db 0FFh
.eh_frame_hdr:0000000000005337                 db 0FFh
.eh_frame_hdr:0000000000005338                 db  78h ; x
.eh_frame_hdr:0000000000005339                 db    2
.eh_frame_hdr:000000000000533A                 db    0
.eh_frame_hdr:000000000000533B                 db    0
.eh_frame_hdr:000000000000533C                 db  60h ; `
.eh_frame_hdr:000000000000533D                 db 0C4h
.eh_frame_hdr:000000000000533E                 db 0FFh
.eh_frame_hdr:000000000000533F                 db 0FFh
.eh_frame_hdr:0000000000005340                 db 0E8h
.eh_frame_hdr:0000000000005341                 db    2
.eh_frame_hdr:0000000000005342                 db    0
.eh_frame_hdr:0000000000005343                 db    0
.eh_frame_hdr:0000000000005344                 db    0
.eh_frame_hdr:0000000000005345                 db 0C8h
.eh_frame_hdr:0000000000005346                 db 0FFh
.eh_frame_hdr:0000000000005347                 db 0FFh
.eh_frame_hdr:0000000000005348                 db  60h ; `
.eh_frame_hdr:0000000000005349                 db    3
.eh_frame_hdr:000000000000534A                 db    0
.eh_frame_hdr:000000000000534B                 db    0
.eh_frame_hdr:000000000000534C                 db  10h
.eh_frame_hdr:000000000000534D                 db 0C8h
.eh_frame_hdr:000000000000534E                 db 0FFh
.eh_frame_hdr:000000000000534F                 db 0FFh
.eh_frame_hdr:0000000000005350                 db  74h ; t
.eh_frame_hdr:0000000000005351                 db    3
.eh_frame_hdr:0000000000005352                 db    0
.eh_frame_hdr:0000000000005353                 db    0
.eh_frame_hdr:0000000000005354                 db  20h
.eh_frame_hdr:0000000000005355                 db 0C8h
.eh_frame_hdr:0000000000005356                 db 0FFh
.eh_frame_hdr:0000000000005357                 db 0FFh
.eh_frame_hdr:0000000000005358                 db  88h
.eh_frame_hdr:0000000000005359                 db    3
.eh_frame_hdr:000000000000535A                 db    0
.eh_frame_hdr:000000000000535B                 db    0
.eh_frame_hdr:000000000000535C                 db 0D0h
.eh_frame_hdr:000000000000535D                 db 0C8h
.eh_frame_hdr:000000000000535E                 db 0FFh
.eh_frame_hdr:000000000000535F                 db 0FFh
.eh_frame_hdr:0000000000005360                 db 0B8h
.eh_frame_hdr:0000000000005361                 db    3
.eh_frame_hdr:0000000000005362                 db    0
.eh_frame_hdr:0000000000005363                 db    0
.eh_frame_hdr:0000000000005364                 db  30h ; 0
.eh_frame_hdr:0000000000005365                 db 0C9h
.eh_frame_hdr:0000000000005366                 db 0FFh
.eh_frame_hdr:0000000000005367                 db 0FFh
.eh_frame_hdr:0000000000005368                 db 0ECh
.eh_frame_hdr:0000000000005369                 db    3
.eh_frame_hdr:000000000000536A                 db    0
.eh_frame_hdr:000000000000536B                 db    0
.eh_frame_hdr:000000000000536C                 db  90h
.eh_frame_hdr:000000000000536D                 db 0C9h
.eh_frame_hdr:000000000000536E                 db 0FFh
.eh_frame_hdr:000000000000536F                 db 0FFh
.eh_frame_hdr:0000000000005370                 db  18h
.eh_frame_hdr:0000000000005371                 db    4
.eh_frame_hdr:0000000000005372                 db    0
.eh_frame_hdr:0000000000005373                 db    0
.eh_frame_hdr:0000000000005374                 db 0F0h
.eh_frame_hdr:0000000000005375                 db 0C9h
.eh_frame_hdr:0000000000005376                 db 0FFh
.eh_frame_hdr:0000000000005377                 db 0FFh
.eh_frame_hdr:0000000000005378                 db  2Ch ; ,
.eh_frame_hdr:0000000000005379                 db    4
.eh_frame_hdr:000000000000537A                 db    0
.eh_frame_hdr:000000000000537B                 db    0
.eh_frame_hdr:000000000000537C                 db  40h ; @
.eh_frame_hdr:000000000000537D                 db 0CAh
.eh_frame_hdr:000000000000537E                 db 0FFh
.eh_frame_hdr:000000000000537F                 db 0FFh
.eh_frame_hdr:0000000000005380                 db  58h ; X
.eh_frame_hdr:0000000000005381                 db    4
.eh_frame_hdr:0000000000005382                 db    0
.eh_frame_hdr:0000000000005383                 db    0
.eh_frame_hdr:0000000000005384                 db 0E0h
.eh_frame_hdr:0000000000005385                 db 0CAh
.eh_frame_hdr:0000000000005386                 db 0FFh
.eh_frame_hdr:0000000000005387                 db 0FFh
.eh_frame_hdr:0000000000005388                 db  78h ; x
.eh_frame_hdr:0000000000005389                 db    4
.eh_frame_hdr:000000000000538A                 db    0
.eh_frame_hdr:000000000000538B                 db    0
.eh_frame_hdr:000000000000538C                 db 0D0h
.eh_frame_hdr:000000000000538D                 db 0CBh
.eh_frame_hdr:000000000000538E                 db 0FFh
.eh_frame_hdr:000000000000538F                 db 0FFh
.eh_frame_hdr:0000000000005390                 db 0BCh
.eh_frame_hdr:0000000000005391                 db    4
.eh_frame_hdr:0000000000005392                 db    0
.eh_frame_hdr:0000000000005393                 db    0
.eh_frame_hdr:0000000000005394                 db  10h
.eh_frame_hdr:0000000000005395                 db 0DEh
.eh_frame_hdr:0000000000005396                 db 0FFh
.eh_frame_hdr:0000000000005397                 db 0FFh
.eh_frame_hdr:0000000000005398                 db  34h ; 4
.eh_frame_hdr:0000000000005399                 db    5
.eh_frame_hdr:000000000000539A                 db    0
.eh_frame_hdr:000000000000539B                 db    0
.eh_frame_hdr:000000000000539C                 db 0C0h
.eh_frame_hdr:000000000000539D                 db 0DFh
.eh_frame_hdr:000000000000539E                 db 0FFh
.eh_frame_hdr:000000000000539F                 db 0FFh
.eh_frame_hdr:00000000000053A0                 db 0A0h
.eh_frame_hdr:00000000000053A1                 db    5
.eh_frame_hdr:00000000000053A2                 db    0
.eh_frame_hdr:00000000000053A3                 db    0
.eh_frame_hdr:00000000000053A4                 db    0
.eh_frame_hdr:00000000000053A5                 db 0E0h
.eh_frame_hdr:00000000000053A6                 db 0FFh
.eh_frame_hdr:00000000000053A7                 db 0FFh
.eh_frame_hdr:00000000000053A8                 db 0CCh
.eh_frame_hdr:00000000000053A9                 db    5
.eh_frame_hdr:00000000000053AA                 db    0
.eh_frame_hdr:00000000000053AB                 db    0
.eh_frame_hdr:00000000000053AC                 db  20h
.eh_frame_hdr:00000000000053AD                 db 0E0h
.eh_frame_hdr:00000000000053AE                 db 0FFh
.eh_frame_hdr:00000000000053AF                 db 0FFh
.eh_frame_hdr:00000000000053B0                 db 0E0h
.eh_frame_hdr:00000000000053B1                 db    5
.eh_frame_hdr:00000000000053B2                 db    0
.eh_frame_hdr:00000000000053B3                 db    0
.eh_frame_hdr:00000000000053B4                 db  40h ; @
.eh_frame_hdr:00000000000053B5                 db 0E0h
.eh_frame_hdr:00000000000053B6                 db 0FFh
.eh_frame_hdr:00000000000053B7                 db 0FFh
.eh_frame_hdr:00000000000053B8                 db 0F4h
.eh_frame_hdr:00000000000053B9                 db    5
.eh_frame_hdr:00000000000053BA                 db    0
.eh_frame_hdr:00000000000053BB                 db    0
.eh_frame_hdr:00000000000053BC                 db  80h
.eh_frame_hdr:00000000000053BD                 db 0E0h
.eh_frame_hdr:00000000000053BE                 db 0FFh
.eh_frame_hdr:00000000000053BF                 db 0FFh
.eh_frame_hdr:00000000000053C0                 db    8
.eh_frame_hdr:00000000000053C1                 db    6
.eh_frame_hdr:00000000000053C2                 db    0
.eh_frame_hdr:00000000000053C3                 db    0
.eh_frame_hdr:00000000000053C4                 db 0A0h
.eh_frame_hdr:00000000000053C5                 db 0E0h
.eh_frame_hdr:00000000000053C6                 db 0FFh
.eh_frame_hdr:00000000000053C7                 db 0FFh
.eh_frame_hdr:00000000000053C8                 db  1Ch
.eh_frame_hdr:00000000000053C9                 db    6
.eh_frame_hdr:00000000000053CA                 db    0
.eh_frame_hdr:00000000000053CB                 db    0
.eh_frame_hdr:00000000000053CC                 db 0D0h
.eh_frame_hdr:00000000000053CD                 db 0E0h
.eh_frame_hdr:00000000000053CE                 db 0FFh
.eh_frame_hdr:00000000000053CF                 db 0FFh
.eh_frame_hdr:00000000000053D0                 db  30h ; 0
.eh_frame_hdr:00000000000053D1                 db    6
.eh_frame_hdr:00000000000053D2                 db    0
.eh_frame_hdr:00000000000053D3                 db    0
.eh_frame_hdr:00000000000053D4                 db  50h ; P
.eh_frame_hdr:00000000000053D5                 db 0E1h
.eh_frame_hdr:00000000000053D6                 db 0FFh
.eh_frame_hdr:00000000000053D7                 db 0FFh
.eh_frame_hdr:00000000000053D8                 db  84h
.eh_frame_hdr:00000000000053D9                 db    6
.eh_frame_hdr:00000000000053DA                 db    0
.eh_frame_hdr:00000000000053DB                 db    0
.eh_frame_hdr:00000000000053DC                 db  40h ; @
.eh_frame_hdr:00000000000053DD                 db 0E2h
.eh_frame_hdr:00000000000053DE                 db 0FFh
.eh_frame_hdr:00000000000053DF                 db 0FFh
.eh_frame_hdr:00000000000053E0                 db 0F0h
.eh_frame_hdr:00000000000053E1                 db    6
.eh_frame_hdr:00000000000053E2                 db    0
.eh_frame_hdr:00000000000053E3                 db    0
.eh_frame_hdr:00000000000053E4                 db  50h ; P
.eh_frame_hdr:00000000000053E5                 db 0E2h
.eh_frame_hdr:00000000000053E6                 db 0FFh
.eh_frame_hdr:00000000000053E7                 db 0FFh
.eh_frame_hdr:00000000000053E8                 db    4
.eh_frame_hdr:00000000000053E9                 db    7
.eh_frame_hdr:00000000000053EA                 db    0
.eh_frame_hdr:00000000000053EB                 db    0
.eh_frame_hdr:00000000000053EC                 db 0F0h
.eh_frame_hdr:00000000000053ED                 db 0E2h
.eh_frame_hdr:00000000000053EE                 db 0FFh
.eh_frame_hdr:00000000000053EF                 db 0FFh
.eh_frame_hdr:00000000000053F0                 db  30h ; 0
.eh_frame_hdr:00000000000053F1                 db    7
.eh_frame_hdr:00000000000053F2                 db    0
.eh_frame_hdr:00000000000053F3                 db    0
.eh_frame_hdr:00000000000053F4                 db  10h
.eh_frame_hdr:00000000000053F5                 db 0E3h
.eh_frame_hdr:00000000000053F6                 db 0FFh
.eh_frame_hdr:00000000000053F7                 db 0FFh
.eh_frame_hdr:00000000000053F8                 db  44h ; D
.eh_frame_hdr:00000000000053F9                 db    7
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FC                 db  20h
.eh_frame_hdr:00000000000053FD                 db 0E3h
.eh_frame_hdr:00000000000053FE                 db 0FFh
.eh_frame_hdr:00000000000053FF                 db 0FFh
.eh_frame_hdr:0000000000005400                 db  58h ; X
.eh_frame_hdr:0000000000005401                 db    7
.eh_frame_hdr:0000000000005402                 db    0
.eh_frame_hdr:0000000000005403                 db    0
.eh_frame_hdr:0000000000005404                 db  40h ; @
.eh_frame_hdr:0000000000005405                 db 0E3h
.eh_frame_hdr:0000000000005406                 db 0FFh
.eh_frame_hdr:0000000000005407                 db 0FFh
.eh_frame_hdr:0000000000005408                 db  6Ch ; l
.eh_frame_hdr:0000000000005409                 db    7
.eh_frame_hdr:000000000000540A                 db    0
.eh_frame_hdr:000000000000540B                 db    0
.eh_frame_hdr:000000000000540C                 db  60h ; `
.eh_frame_hdr:000000000000540D                 db 0E3h
.eh_frame_hdr:000000000000540E                 db 0FFh
.eh_frame_hdr:000000000000540F                 db 0FFh
.eh_frame_hdr:0000000000005410                 db  80h
.eh_frame_hdr:0000000000005411                 db    7
.eh_frame_hdr:0000000000005412                 db    0
.eh_frame_hdr:0000000000005413                 db    0
.eh_frame_hdr:0000000000005414                 db 0F0h
.eh_frame_hdr:0000000000005415                 db 0E3h
.eh_frame_hdr:0000000000005416                 db 0FFh
.eh_frame_hdr:0000000000005417                 db 0FFh
.eh_frame_hdr:0000000000005418                 db  9Ch
.eh_frame_hdr:0000000000005419                 db    7
.eh_frame_hdr:000000000000541A                 db    0
.eh_frame_hdr:000000000000541B                 db    0
.eh_frame_hdr:000000000000541C                 db  80h
.eh_frame_hdr:000000000000541D                 db 0E4h
.eh_frame_hdr:000000000000541E                 db 0FFh
.eh_frame_hdr:000000000000541F                 db 0FFh
.eh_frame_hdr:0000000000005420                 db 0B8h
.eh_frame_hdr:0000000000005421                 db    7
.eh_frame_hdr:0000000000005422                 db    0
.eh_frame_hdr:0000000000005423                 db    0
.eh_frame_hdr:0000000000005424                 db  90h
.eh_frame_hdr:0000000000005425                 db 0E4h
.eh_frame_hdr:0000000000005426                 db 0FFh
.eh_frame_hdr:0000000000005427                 db 0FFh
.eh_frame_hdr:0000000000005428                 db 0CCh
.eh_frame_hdr:0000000000005429                 db    7
.eh_frame_hdr:000000000000542A                 db    0
.eh_frame_hdr:000000000000542B                 db    0
.eh_frame_hdr:000000000000542C                 db 0A0h
.eh_frame_hdr:000000000000542D                 db 0E4h
.eh_frame_hdr:000000000000542E                 db 0FFh
.eh_frame_hdr:000000000000542F                 db 0FFh
.eh_frame_hdr:0000000000005430                 db 0E0h
.eh_frame_hdr:0000000000005431                 db    7
.eh_frame_hdr:0000000000005432                 db    0
.eh_frame_hdr:0000000000005433                 db    0
.eh_frame_hdr:0000000000005434                 db  40h ; @
.eh_frame_hdr:0000000000005435                 db 0E5h
.eh_frame_hdr:0000000000005436                 db 0FFh
.eh_frame_hdr:0000000000005437                 db 0FFh
.eh_frame_hdr:0000000000005438                 db 0FCh
.eh_frame_hdr:0000000000005439                 db    7
.eh_frame_hdr:000000000000543A                 db    0
.eh_frame_hdr:000000000000543B                 db    0
.eh_frame_hdr:000000000000543C                 db  50h ; P
.eh_frame_hdr:000000000000543D                 db 0E5h
.eh_frame_hdr:000000000000543E                 db 0FFh
.eh_frame_hdr:000000000000543F                 db 0FFh
.eh_frame_hdr:0000000000005440                 db  10h
.eh_frame_hdr:0000000000005441                 db    8
.eh_frame_hdr:0000000000005442                 db    0
.eh_frame_hdr:0000000000005443                 db    0
.eh_frame_hdr:0000000000005444                 db  70h ; p
.eh_frame_hdr:0000000000005445                 db 0E5h
.eh_frame_hdr:0000000000005446                 db 0FFh
.eh_frame_hdr:0000000000005447                 db 0FFh
.eh_frame_hdr:0000000000005448                 db  24h ; $
.eh_frame_hdr:0000000000005449                 db    8
.eh_frame_hdr:000000000000544A                 db    0
.eh_frame_hdr:000000000000544B                 db    0
.eh_frame_hdr:000000000000544C                 db  80h
.eh_frame_hdr:000000000000544D                 db 0E5h
.eh_frame_hdr:000000000000544E                 db 0FFh
.eh_frame_hdr:000000000000544F                 db 0FFh
.eh_frame_hdr:0000000000005450                 db  38h ; 8
.eh_frame_hdr:0000000000005451                 db    8
.eh_frame_hdr:0000000000005452                 db    0
.eh_frame_hdr:0000000000005453                 db    0
.eh_frame_hdr:0000000000005454                 db  10h
.eh_frame_hdr:0000000000005455                 db 0E6h
.eh_frame_hdr:0000000000005456                 db 0FFh
.eh_frame_hdr:0000000000005457                 db 0FFh
.eh_frame_hdr:0000000000005458                 db  54h ; T
.eh_frame_hdr:0000000000005459                 db    8
.eh_frame_hdr:000000000000545A                 db    0
.eh_frame_hdr:000000000000545B                 db    0
.eh_frame_hdr:000000000000545C                 db 0B0h
.eh_frame_hdr:000000000000545D                 db 0E6h
.eh_frame_hdr:000000000000545E                 db 0FFh
.eh_frame_hdr:000000000000545F                 db 0FFh
.eh_frame_hdr:0000000000005460                 db  70h ; p
.eh_frame_hdr:0000000000005461                 db    8
.eh_frame_hdr:0000000000005462                 db    0
.eh_frame_hdr:0000000000005463                 db    0
.eh_frame_hdr:0000000000005464                 db 0C0h
.eh_frame_hdr:0000000000005465                 db 0E6h
.eh_frame_hdr:0000000000005466                 db 0FFh
.eh_frame_hdr:0000000000005467                 db 0FFh
.eh_frame_hdr:0000000000005468                 db  84h
.eh_frame_hdr:0000000000005469                 db    8
.eh_frame_hdr:000000000000546A                 db    0
.eh_frame_hdr:000000000000546B                 db    0
.eh_frame_hdr:000000000000546C                 db 0E0h
.eh_frame_hdr:000000000000546D                 db 0E6h
.eh_frame_hdr:000000000000546E                 db 0FFh
.eh_frame_hdr:000000000000546F                 db 0FFh
.eh_frame_hdr:0000000000005470                 db  98h
.eh_frame_hdr:0000000000005471                 db    8
.eh_frame_hdr:0000000000005472                 db    0
.eh_frame_hdr:0000000000005473                 db    0
.eh_frame_hdr:0000000000005474                 db    0
.eh_frame_hdr:0000000000005475                 db 0E7h
.eh_frame_hdr:0000000000005476                 db 0FFh
.eh_frame_hdr:0000000000005477                 db 0FFh
.eh_frame_hdr:0000000000005478                 db 0ACh
.eh_frame_hdr:0000000000005479                 db    8
.eh_frame_hdr:000000000000547A                 db    0
.eh_frame_hdr:000000000000547B                 db    0
.eh_frame_hdr:000000000000547C                 db  10h
.eh_frame_hdr:000000000000547D                 db 0E7h
.eh_frame_hdr:000000000000547E                 db 0FFh
.eh_frame_hdr:000000000000547F                 db 0FFh
.eh_frame_hdr:0000000000005480                 db 0C0h
.eh_frame_hdr:0000000000005481                 db    8
.eh_frame_hdr:0000000000005482                 db    0
.eh_frame_hdr:0000000000005483                 db    0
.eh_frame_hdr:0000000000005484                 db  30h ; 0
.eh_frame_hdr:0000000000005485                 db 0E7h
.eh_frame_hdr:0000000000005486                 db 0FFh
.eh_frame_hdr:0000000000005487                 db 0FFh
.eh_frame_hdr:0000000000005488                 db 0D4h
.eh_frame_hdr:0000000000005489                 db    8
.eh_frame_hdr:000000000000548A                 db    0
.eh_frame_hdr:000000000000548B                 db    0
.eh_frame_hdr:000000000000548C                 db  50h ; P
.eh_frame_hdr:000000000000548D                 db 0E7h
.eh_frame_hdr:000000000000548E                 db 0FFh
.eh_frame_hdr:000000000000548F                 db 0FFh
.eh_frame_hdr:0000000000005490                 db 0E8h
.eh_frame_hdr:0000000000005491                 db    8
.eh_frame_hdr:0000000000005492                 db    0
.eh_frame_hdr:0000000000005493                 db    0
.eh_frame_hdr:0000000000005494                 db  70h ; p
.eh_frame_hdr:0000000000005495                 db 0E7h
.eh_frame_hdr:0000000000005496                 db 0FFh
.eh_frame_hdr:0000000000005497                 db 0FFh
.eh_frame_hdr:0000000000005498                 db    0
.eh_frame_hdr:0000000000005499                 db    9
.eh_frame_hdr:000000000000549A                 db    0
.eh_frame_hdr:000000000000549B                 db    0
.eh_frame_hdr:000000000000549C                 db  90h
.eh_frame_hdr:000000000000549D                 db 0EBh
.eh_frame_hdr:000000000000549E                 db 0FFh
.eh_frame_hdr:000000000000549F                 db 0FFh
.eh_frame_hdr:00000000000054A0                 db  14h
.eh_frame_hdr:00000000000054A1                 db  0Ah
.eh_frame_hdr:00000000000054A2                 db    0
.eh_frame_hdr:00000000000054A3                 db    0
.eh_frame_hdr:00000000000054A4                 db 0B0h
.eh_frame_hdr:00000000000054A5                 db 0EBh
.eh_frame_hdr:00000000000054A6                 db 0FFh
.eh_frame_hdr:00000000000054A7                 db 0FFh
.eh_frame_hdr:00000000000054A8                 db  28h ; (
.eh_frame_hdr:00000000000054A9                 db  0Ah
.eh_frame_hdr:00000000000054AA                 db    0
.eh_frame_hdr:00000000000054AB                 db    0
.eh_frame_hdr:00000000000054AC                 db  30h ; 0
.eh_frame_hdr:00000000000054AD                 db 0ECh
.eh_frame_hdr:00000000000054AE                 db 0FFh
.eh_frame_hdr:00000000000054AF                 db 0FFh
.eh_frame_hdr:00000000000054B0                 db  44h ; D
.eh_frame_hdr:00000000000054B1                 db  0Ah
.eh_frame_hdr:00000000000054B2                 db    0
.eh_frame_hdr:00000000000054B3                 db    0
.eh_frame_hdr:00000000000054B4                 db  10h
.eh_frame_hdr:00000000000054B5                 db 0EDh
.eh_frame_hdr:00000000000054B6                 db 0FFh
.eh_frame_hdr:00000000000054B7                 db 0FFh
.eh_frame_hdr:00000000000054B8                 db  70h ; p
.eh_frame_hdr:00000000000054B9                 db  0Ah
.eh_frame_hdr:00000000000054BA                 db    0
.eh_frame_hdr:00000000000054BB                 db    0
.eh_frame_hdr:00000000000054BC                 db  90h
.eh_frame_hdr:00000000000054BD                 db 0EDh
.eh_frame_hdr:00000000000054BE                 db 0FFh
.eh_frame_hdr:00000000000054BF                 db 0FFh
.eh_frame_hdr:00000000000054C0                 db  90h
.eh_frame_hdr:00000000000054C1                 db  0Ah
.eh_frame_hdr:00000000000054C2                 db    0
.eh_frame_hdr:00000000000054C3                 db    0
.eh_frame_hdr:00000000000054C4                 db 0B0h
.eh_frame_hdr:00000000000054C5                 db 0EDh
.eh_frame_hdr:00000000000054C6                 db 0FFh
.eh_frame_hdr:00000000000054C7                 db 0FFh
.eh_frame_hdr:00000000000054C8                 db 0ACh
.eh_frame_hdr:00000000000054C9                 db  0Ah
.eh_frame_hdr:00000000000054CA                 db    0
.eh_frame_hdr:00000000000054CB                 db    0
.eh_frame_hdr:00000000000054CC                 db 0E0h
.eh_frame_hdr:00000000000054CD                 db 0EDh
.eh_frame_hdr:00000000000054CE                 db 0FFh
.eh_frame_hdr:00000000000054CF                 db 0FFh
.eh_frame_hdr:00000000000054D0                 db 0C0h
.eh_frame_hdr:00000000000054D1                 db  0Ah
.eh_frame_hdr:00000000000054D2                 db    0
.eh_frame_hdr:00000000000054D3                 db    0
.eh_frame_hdr:00000000000054D4                 db 0F0h
.eh_frame_hdr:00000000000054D5                 db 0EDh
.eh_frame_hdr:00000000000054D6                 db 0FFh
.eh_frame_hdr:00000000000054D7                 db 0FFh
.eh_frame_hdr:00000000000054D8                 db 0D4h
.eh_frame_hdr:00000000000054D9                 db  0Ah
.eh_frame_hdr:00000000000054DA                 db    0
.eh_frame_hdr:00000000000054DB                 db    0
.eh_frame_hdr:00000000000054DC                 db  30h ; 0
.eh_frame_hdr:00000000000054DD                 db 0EEh
.eh_frame_hdr:00000000000054DE                 db 0FFh
.eh_frame_hdr:00000000000054DF                 db 0FFh
.eh_frame_hdr:00000000000054E0                 db 0F8h
.eh_frame_hdr:00000000000054E1                 db  0Ah
.eh_frame_hdr:00000000000054E2                 db    0
.eh_frame_hdr:00000000000054E3                 db    0
.eh_frame_hdr:00000000000054E4                 db  60h ; `
.eh_frame_hdr:00000000000054E5                 db 0EEh
.eh_frame_hdr:00000000000054E6                 db 0FFh
.eh_frame_hdr:00000000000054E7                 db 0FFh
.eh_frame_hdr:00000000000054E8                 db  0Ch
.eh_frame_hdr:00000000000054E9                 db  0Bh
.eh_frame_hdr:00000000000054EA                 db    0
.eh_frame_hdr:00000000000054EB                 db    0
.eh_frame_hdr:00000000000054EC                 db 0F0h
.eh_frame_hdr:00000000000054ED                 db 0EEh
.eh_frame_hdr:00000000000054EE                 db 0FFh
.eh_frame_hdr:00000000000054EF                 db 0FFh
.eh_frame_hdr:00000000000054F0                 db  24h ; $
.eh_frame_hdr:00000000000054F1                 db  0Bh
.eh_frame_hdr:00000000000054F2                 db    0
.eh_frame_hdr:00000000000054F3                 db    0
.eh_frame_hdr:00000000000054F4                 db  40h ; @
.eh_frame_hdr:00000000000054F5                 db 0EFh
.eh_frame_hdr:00000000000054F6                 db 0FFh
.eh_frame_hdr:00000000000054F7                 db 0FFh
.eh_frame_hdr:00000000000054F8                 db  3Ch ; <
.eh_frame_hdr:00000000000054F9                 db  0Bh
.eh_frame_hdr:00000000000054FA                 db    0
.eh_frame_hdr:00000000000054FB                 db    0
.eh_frame_hdr:00000000000054FC                 db  60h ; `
.eh_frame_hdr:00000000000054FD                 db 0EFh
.eh_frame_hdr:00000000000054FE                 db 0FFh
.eh_frame_hdr:00000000000054FF                 db 0FFh
.eh_frame_hdr:0000000000005500                 db  58h ; X
.eh_frame_hdr:0000000000005501                 db  0Bh
.eh_frame_hdr:0000000000005502                 db    0
.eh_frame_hdr:0000000000005503                 db    0
.eh_frame_hdr:0000000000005504                 db  90h
.eh_frame_hdr:0000000000005505                 db 0EFh
.eh_frame_hdr:0000000000005506                 db 0FFh
.eh_frame_hdr:0000000000005507                 db 0FFh
.eh_frame_hdr:0000000000005508                 db  74h ; t
.eh_frame_hdr:0000000000005509                 db  0Bh
.eh_frame_hdr:000000000000550A                 db    0
.eh_frame_hdr:000000000000550B                 db    0
.eh_frame_hdr:000000000000550C                 db 0C0h
.eh_frame_hdr:000000000000550D                 db 0EFh
.eh_frame_hdr:000000000000550E                 db 0FFh
.eh_frame_hdr:000000000000550F                 db 0FFh
.eh_frame_hdr:0000000000005510                 db  9Ch
.eh_frame_hdr:0000000000005511                 db  0Bh
.eh_frame_hdr:0000000000005512                 db    0
.eh_frame_hdr:0000000000005513                 db    0
.eh_frame_hdr:0000000000005514                 db 0E0h
.eh_frame_hdr:0000000000005515                 db 0EFh
.eh_frame_hdr:0000000000005516                 db 0FFh
.eh_frame_hdr:0000000000005517                 db 0FFh
.eh_frame_hdr:0000000000005518                 db 0B8h
.eh_frame_hdr:0000000000005519                 db  0Bh
.eh_frame_hdr:000000000000551A                 db    0
.eh_frame_hdr:000000000000551B                 db    0
.eh_frame_hdr:000000000000551C                 db  20h
.eh_frame_hdr:000000000000551D                 db 0F0h
.eh_frame_hdr:000000000000551E                 db 0FFh
.eh_frame_hdr:000000000000551F                 db 0FFh
.eh_frame_hdr:0000000000005520                 db 0D0h
.eh_frame_hdr:0000000000005521                 db  0Bh
.eh_frame_hdr:0000000000005522                 db    0
.eh_frame_hdr:0000000000005523                 db    0
.eh_frame_hdr:0000000000005524                 db 0B0h
.eh_frame_hdr:0000000000005525                 db 0F0h
.eh_frame_hdr:0000000000005526                 db 0FFh
.eh_frame_hdr:0000000000005527                 db 0FFh
.eh_frame_hdr:0000000000005528                 db  10h
.eh_frame_hdr:0000000000005529                 db  0Ch
.eh_frame_hdr:000000000000552A                 db    0
.eh_frame_hdr:000000000000552B                 db    0
.eh_frame_hdr:000000000000552C                 db  30h ; 0
.eh_frame_hdr:000000000000552D                 db 0F1h
.eh_frame_hdr:000000000000552E                 db 0FFh
.eh_frame_hdr:000000000000552F                 db 0FFh
.eh_frame_hdr:0000000000005530                 db  60h ; `
.eh_frame_hdr:0000000000005531                 db  0Ch
.eh_frame_hdr:0000000000005532                 db    0
.eh_frame_hdr:0000000000005533                 db    0
.eh_frame_hdr:0000000000005534                 db  90h
.eh_frame_hdr:0000000000005535                 db 0F1h
.eh_frame_hdr:0000000000005536                 db 0FFh
.eh_frame_hdr:0000000000005537                 db 0FFh
.eh_frame_hdr:0000000000005538                 db  80h
.eh_frame_hdr:0000000000005539                 db  0Ch
.eh_frame_hdr:000000000000553A                 db    0
.eh_frame_hdr:000000000000553B                 db    0
.eh_frame_hdr:000000000000553C                 db 0D0h
.eh_frame_hdr:000000000000553D                 db 0F1h
.eh_frame_hdr:000000000000553E                 db 0FFh
.eh_frame_hdr:000000000000553F                 db 0FFh
.eh_frame_hdr:0000000000005540                 db 0A0h
.eh_frame_hdr:0000000000005541                 db  0Ch
.eh_frame_hdr:0000000000005542                 db    0
.eh_frame_hdr:0000000000005543                 db    0
.eh_frame_hdr:0000000000005544                 db  50h ; P
.eh_frame_hdr:0000000000005545                 db 0F2h
.eh_frame_hdr:0000000000005546                 db 0FFh
.eh_frame_hdr:0000000000005547                 db 0FFh
.eh_frame_hdr:0000000000005548                 db 0D8h
.eh_frame_hdr:0000000000005549                 db  0Ch
.eh_frame_hdr:000000000000554A                 db    0
.eh_frame_hdr:000000000000554B                 db    0
.eh_frame_hdr:000000000000554C                 db  90h
.eh_frame_hdr:000000000000554D                 db 0F2h
.eh_frame_hdr:000000000000554E                 db 0FFh
.eh_frame_hdr:000000000000554F                 db 0FFh
.eh_frame_hdr:0000000000005550                 db 0F8h
.eh_frame_hdr:0000000000005551                 db  0Ch
.eh_frame_hdr:0000000000005552                 db    0
.eh_frame_hdr:0000000000005553                 db    0
.eh_frame_hdr:0000000000005554                 db 0F0h
.eh_frame_hdr:0000000000005555                 db 0F2h
.eh_frame_hdr:0000000000005556                 db 0FFh
.eh_frame_hdr:0000000000005557                 db 0FFh
.eh_frame_hdr:0000000000005558                 db  28h ; (
.eh_frame_hdr:0000000000005559                 db  0Dh
.eh_frame_hdr:000000000000555A                 db    0
.eh_frame_hdr:000000000000555B                 db    0
.eh_frame_hdr:000000000000555C                 db  60h ; `
.eh_frame_hdr:000000000000555D                 db 0F3h
.eh_frame_hdr:000000000000555E                 db 0FFh
.eh_frame_hdr:000000000000555F                 db 0FFh
.eh_frame_hdr:0000000000005560                 db  70h ; p
.eh_frame_hdr:0000000000005561                 db  0Dh
.eh_frame_hdr:0000000000005562                 db    0
.eh_frame_hdr:0000000000005563                 db    0
.eh_frame_hdr:0000000000005564                 db  70h ; p
.eh_frame_hdr:0000000000005565                 db 0F3h
.eh_frame_hdr:0000000000005566                 db 0FFh
.eh_frame_hdr:0000000000005567                 db 0FFh
.eh_frame_hdr:0000000000005568                 db  88h
.eh_frame_hdr:0000000000005569                 db  0Dh
.eh_frame_hdr:000000000000556A                 db    0
.eh_frame_hdr:000000000000556B                 db    0
.eh_frame_hdr:000000000000556B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000556B
LOAD:000000000000556C ; ===========================================================================
LOAD:000000000000556C
LOAD:000000000000556C ; Segment type: Pure code
LOAD:000000000000556C ; Segment permissions: Read/Execute
LOAD:000000000000556C LOAD            segment byte public 'CODE' use64
LOAD:000000000000556C                 assume cs:LOAD
LOAD:000000000000556C                 ;org 556Ch
LOAD:000000000000556C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000556C                 align 10h
LOAD:000000000000556C LOAD            ends
LOAD:000000000000556C
.eh_frame:0000000000005570 ; ===========================================================================
.eh_frame:0000000000005570
.eh_frame:0000000000005570 ; Segment type: Pure data
.eh_frame:0000000000005570 ; Segment permissions: Read
.eh_frame:0000000000005570 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005570                 assume cs:_eh_frame
.eh_frame:0000000000005570                 ;org 5570h
.eh_frame:0000000000005570                 db  14h
.eh_frame:0000000000005571                 db    0
.eh_frame:0000000000005572                 db    0
.eh_frame:0000000000005573                 db    0
.eh_frame:0000000000005574                 db    0
.eh_frame:0000000000005575                 db    0
.eh_frame:0000000000005576                 db    0
.eh_frame:0000000000005577                 db    0
.eh_frame:0000000000005578                 db    1
.eh_frame:0000000000005579                 db  7Ah ; z
.eh_frame:000000000000557A                 db  52h ; R
.eh_frame:000000000000557B                 db    0
.eh_frame:000000000000557C                 db    1
.eh_frame:000000000000557D                 db  78h ; x
.eh_frame:000000000000557E                 db  10h
.eh_frame:000000000000557F                 db    1
.eh_frame:0000000000005580                 db  1Bh
.eh_frame:0000000000005581                 db  0Ch
.eh_frame:0000000000005582                 db    7
.eh_frame:0000000000005583                 db    8
.eh_frame:0000000000005584                 db  90h
.eh_frame:0000000000005585                 db    1
.eh_frame:0000000000005586                 db    7
.eh_frame:0000000000005587                 db  10h
.eh_frame:0000000000005588                 db  14h
.eh_frame:0000000000005589                 db    0
.eh_frame:000000000000558A                 db    0
.eh_frame:000000000000558B                 db    0
.eh_frame:000000000000558C                 db  1Ch
.eh_frame:000000000000558D                 db    0
.eh_frame:000000000000558E                 db    0
.eh_frame:000000000000558F                 db    0
.eh_frame:0000000000005590                 db 0D0h
.eh_frame:0000000000005591                 db 0C0h
.eh_frame:0000000000005592                 db 0FFh
.eh_frame:0000000000005593                 db 0FFh
.eh_frame:0000000000005594                 db  2Bh ; +
.eh_frame:0000000000005595                 db    0
.eh_frame:0000000000005596                 db    0
.eh_frame:0000000000005597                 db    0
.eh_frame:0000000000005598                 db    0
.eh_frame:0000000000005599                 db    0
.eh_frame:000000000000559A                 db    0
.eh_frame:000000000000559B                 db    0
.eh_frame:000000000000559C                 db    0
.eh_frame:000000000000559D                 db    0
.eh_frame:000000000000559E                 db    0
.eh_frame:000000000000559F                 db    0
.eh_frame:00000000000055A0                 db  14h
.eh_frame:00000000000055A1                 db    0
.eh_frame:00000000000055A2                 db    0
.eh_frame:00000000000055A3                 db    0
.eh_frame:00000000000055A4                 db    0
.eh_frame:00000000000055A5                 db    0
.eh_frame:00000000000055A6                 db    0
.eh_frame:00000000000055A7                 db    0
.eh_frame:00000000000055A8                 db    1
.eh_frame:00000000000055A9                 db  7Ah ; z
.eh_frame:00000000000055AA                 db  52h ; R
.eh_frame:00000000000055AB                 db    0
.eh_frame:00000000000055AC                 db    1
.eh_frame:00000000000055AD                 db  78h ; x
.eh_frame:00000000000055AE                 db  10h
.eh_frame:00000000000055AF                 db    1
.eh_frame:00000000000055B0                 db  1Bh
.eh_frame:00000000000055B1                 db  0Ch
.eh_frame:00000000000055B2                 db    7
.eh_frame:00000000000055B3                 db    8
.eh_frame:00000000000055B4                 db  90h
.eh_frame:00000000000055B5                 db    1
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db  24h ; $
.eh_frame:00000000000055B9                 db    0
.eh_frame:00000000000055BA                 db    0
.eh_frame:00000000000055BB                 db    0
.eh_frame:00000000000055BC                 db  1Ch
.eh_frame:00000000000055BD                 db    0
.eh_frame:00000000000055BE                 db    0
.eh_frame:00000000000055BF                 db    0
.eh_frame:00000000000055C0                 db  30h ; 0
.eh_frame:00000000000055C1                 db 0BCh
.eh_frame:00000000000055C2                 db 0FFh
.eh_frame:00000000000055C3                 db 0FFh
.eh_frame:00000000000055C4                 db 0A0h
.eh_frame:00000000000055C5                 db    2
.eh_frame:00000000000055C6                 db    0
.eh_frame:00000000000055C7                 db    0
.eh_frame:00000000000055C8                 db    0
.eh_frame:00000000000055C9                 db  0Eh
.eh_frame:00000000000055CA                 db  10h
.eh_frame:00000000000055CB                 db  46h ; F
.eh_frame:00000000000055CC                 db  0Eh
.eh_frame:00000000000055CD                 db  18h
.eh_frame:00000000000055CE                 db  4Ah ; J
.eh_frame:00000000000055CF                 db  0Fh
.eh_frame:00000000000055D0                 db  0Bh
.eh_frame:00000000000055D1                 db  77h ; w
.eh_frame:00000000000055D2                 db    8
.eh_frame:00000000000055D3                 db  80h
.eh_frame:00000000000055D4                 db    0
.eh_frame:00000000000055D5                 db  3Fh ; ?
.eh_frame:00000000000055D6                 db  1Ah
.eh_frame:00000000000055D7                 db  3Bh ; ;
.eh_frame:00000000000055D8                 db  2Ah ; *
.eh_frame:00000000000055D9                 db  33h ; 3
.eh_frame:00000000000055DA                 db  24h ; $
.eh_frame:00000000000055DB                 db  22h ; "
.eh_frame:00000000000055DC                 db    0
.eh_frame:00000000000055DD                 db    0
.eh_frame:00000000000055DE                 db    0
.eh_frame:00000000000055DF                 db    0
.eh_frame:00000000000055E0                 db  14h
.eh_frame:00000000000055E1                 db    0
.eh_frame:00000000000055E2                 db    0
.eh_frame:00000000000055E3                 db    0
.eh_frame:00000000000055E4                 db  44h ; D
.eh_frame:00000000000055E5                 db    0
.eh_frame:00000000000055E6                 db    0
.eh_frame:00000000000055E7                 db    0
.eh_frame:00000000000055E8                 db 0A8h
.eh_frame:00000000000055E9                 db 0BEh
.eh_frame:00000000000055EA                 db 0FFh
.eh_frame:00000000000055EB                 db 0FFh
.eh_frame:00000000000055EC                 db    8
.eh_frame:00000000000055ED                 db    0
.eh_frame:00000000000055EE                 db    0
.eh_frame:00000000000055EF                 db    0
.eh_frame:00000000000055F0                 db    0
.eh_frame:00000000000055F1                 db    0
.eh_frame:00000000000055F2                 db    0
.eh_frame:00000000000055F3                 db    0
.eh_frame:00000000000055F4                 db    0
.eh_frame:00000000000055F5                 db    0
.eh_frame:00000000000055F6                 db    0
.eh_frame:00000000000055F7                 db    0
.eh_frame:00000000000055F8                 db  28h ; (
.eh_frame:00000000000055F9                 db    0
.eh_frame:00000000000055FA                 db    0
.eh_frame:00000000000055FB                 db    0
.eh_frame:00000000000055FC                 db  5Ch ; \
.eh_frame:00000000000055FD                 db    0
.eh_frame:00000000000055FE                 db    0
.eh_frame:00000000000055FF                 db    0
.eh_frame:0000000000005600                 db  70h ; p
.eh_frame:0000000000005601                 db 0C1h
.eh_frame:0000000000005602                 db 0FFh
.eh_frame:0000000000005603                 db 0FFh
.eh_frame:0000000000005604                 db  9Ah
.eh_frame:0000000000005605                 db    3
.eh_frame:0000000000005606                 db    0
.eh_frame:0000000000005607                 db    0
.eh_frame:0000000000005608                 db    0
.eh_frame:0000000000005609                 db  42h ; B
.eh_frame:000000000000560A                 db  0Eh
.eh_frame:000000000000560B                 db  10h
.eh_frame:000000000000560C                 db  8Dh
.eh_frame:000000000000560D                 db    2
.eh_frame:000000000000560E                 db  42h ; B
.eh_frame:000000000000560F                 db  0Eh
.eh_frame:0000000000005610                 db  18h
.eh_frame:0000000000005611                 db  8Ch
.eh_frame:0000000000005612                 db    3
.eh_frame:0000000000005613                 db  46h ; F
.eh_frame:0000000000005614                 db  0Eh
.eh_frame:0000000000005615                 db  20h
.eh_frame:0000000000005616                 db  86h
.eh_frame:0000000000005617                 db    4
.eh_frame:0000000000005618                 db  41h ; A
.eh_frame:0000000000005619                 db  0Eh
.eh_frame:000000000000561A                 db  28h ; (
.eh_frame:000000000000561B                 db  83h
.eh_frame:000000000000561C                 db    5
.eh_frame:000000000000561D                 db  49h ; I
.eh_frame:000000000000561E                 db  0Eh
.eh_frame:000000000000561F                 db 0B0h
.eh_frame:0000000000005620                 db    1
.eh_frame:0000000000005621                 db    0
.eh_frame:0000000000005622                 db    0
.eh_frame:0000000000005623                 db    0
.eh_frame:0000000000005624                 db  48h ; H
.eh_frame:0000000000005625                 db    0
.eh_frame:0000000000005626                 db    0
.eh_frame:0000000000005627                 db    0
.eh_frame:0000000000005628                 db  88h
.eh_frame:0000000000005629                 db    0
.eh_frame:000000000000562A                 db    0
.eh_frame:000000000000562B                 db    0
.eh_frame:000000000000562C                 db  74h ; t
.eh_frame:000000000000562D                 db 0BEh
.eh_frame:000000000000562E                 db 0FFh
.eh_frame:000000000000562F                 db 0FFh
.eh_frame:0000000000005630                 db 0BDh
.eh_frame:0000000000005631                 db    1
.eh_frame:0000000000005632                 db    0
.eh_frame:0000000000005633                 db    0
.eh_frame:0000000000005634                 db    0
.eh_frame:0000000000005635                 db  42h ; B
.eh_frame:0000000000005636                 db  0Eh
.eh_frame:0000000000005637                 db  10h
.eh_frame:0000000000005638                 db  8Eh
.eh_frame:0000000000005639                 db    2
.eh_frame:000000000000563A                 db  42h ; B
.eh_frame:000000000000563B                 db  0Eh
.eh_frame:000000000000563C                 db  18h
.eh_frame:000000000000563D                 db  8Dh
.eh_frame:000000000000563E                 db    3
.eh_frame:000000000000563F                 db  42h ; B
.eh_frame:0000000000005640                 db  0Eh
.eh_frame:0000000000005641                 db  20h
.eh_frame:0000000000005642                 db  8Ch
.eh_frame:0000000000005643                 db    4
.eh_frame:0000000000005644                 db  41h ; A
.eh_frame:0000000000005645                 db  0Eh
.eh_frame:0000000000005646                 db  28h ; (
.eh_frame:0000000000005647                 db  86h
.eh_frame:0000000000005648                 db    5
.eh_frame:0000000000005649                 db  43h ; C
.eh_frame:000000000000564A                 db  0Eh
.eh_frame:000000000000564B                 db  30h ; 0
.eh_frame:000000000000564C                 db  83h
.eh_frame:000000000000564D                 db    6
.eh_frame:000000000000564E                 db    2
.eh_frame:000000000000564F                 db  9Ah
.eh_frame:0000000000005650                 db  0Ah
.eh_frame:0000000000005651                 db  0Eh
.eh_frame:0000000000005652                 db  38h ; 8
.eh_frame:0000000000005653                 db  50h ; P
.eh_frame:0000000000005654                 db  0Eh
.eh_frame:0000000000005655                 db  40h ; @
.eh_frame:0000000000005656                 db  6Ah ; j
.eh_frame:0000000000005657                 db  0Bh
.eh_frame:0000000000005658                 db    2
.eh_frame:0000000000005659                 db  9Eh
.eh_frame:000000000000565A                 db  0Ah
.eh_frame:000000000000565B                 db  0Eh
.eh_frame:000000000000565C                 db  28h ; (
.eh_frame:000000000000565D                 db  43h ; C
.eh_frame:000000000000565E                 db  0Eh
.eh_frame:000000000000565F                 db  20h
.eh_frame:0000000000005660                 db  42h ; B
.eh_frame:0000000000005661                 db  0Eh
.eh_frame:0000000000005662                 db  18h
.eh_frame:0000000000005663                 db  42h ; B
.eh_frame:0000000000005664                 db  0Eh
.eh_frame:0000000000005665                 db  10h
.eh_frame:0000000000005666                 db  42h ; B
.eh_frame:0000000000005667                 db  0Eh
.eh_frame:0000000000005668                 db    8
.eh_frame:0000000000005669                 db  41h ; A
.eh_frame:000000000000566A                 db  0Bh
.eh_frame:000000000000566B                 db    0
.eh_frame:000000000000566C                 db    0
.eh_frame:000000000000566D                 db    0
.eh_frame:000000000000566E                 db    0
.eh_frame:000000000000566F                 db    0
.eh_frame:0000000000005670                 db  10h
.eh_frame:0000000000005671                 db    0
.eh_frame:0000000000005672                 db    0
.eh_frame:0000000000005673                 db    0
.eh_frame:0000000000005674                 db 0D4h
.eh_frame:0000000000005675                 db    0
.eh_frame:0000000000005676                 db    0
.eh_frame:0000000000005677                 db    0
.eh_frame:0000000000005678                 db  98h
.eh_frame:0000000000005679                 db 0C4h
.eh_frame:000000000000567A                 db 0FFh
.eh_frame:000000000000567B                 db 0FFh
.eh_frame:000000000000567C                 db    8
.eh_frame:000000000000567D                 db    0
.eh_frame:000000000000567E                 db    0
.eh_frame:000000000000567F                 db    0
.eh_frame:0000000000005680                 db    0
.eh_frame:0000000000005681                 db    0
.eh_frame:0000000000005682                 db    0
.eh_frame:0000000000005683                 db    0
.eh_frame:0000000000005684                 db  10h
.eh_frame:0000000000005685                 db    0
.eh_frame:0000000000005686                 db    0
.eh_frame:0000000000005687                 db    0
.eh_frame:0000000000005688                 db 0E8h
.eh_frame:0000000000005689                 db    0
.eh_frame:000000000000568A                 db    0
.eh_frame:000000000000568B                 db    0
.eh_frame:000000000000568C                 db  94h
.eh_frame:000000000000568D                 db 0C4h
.eh_frame:000000000000568E                 db 0FFh
.eh_frame:000000000000568F                 db 0FFh
.eh_frame:0000000000005690                 db    8
.eh_frame:0000000000005691                 db    0
.eh_frame:0000000000005692                 db    0
.eh_frame:0000000000005693                 db    0
.eh_frame:0000000000005694                 db    0
.eh_frame:0000000000005695                 db    0
.eh_frame:0000000000005696                 db    0
.eh_frame:0000000000005697                 db    0
.eh_frame:0000000000005698                 db  2Ch ; ,
.eh_frame:0000000000005699                 db    0
.eh_frame:000000000000569A                 db    0
.eh_frame:000000000000569B                 db    0
.eh_frame:000000000000569C                 db 0FCh
.eh_frame:000000000000569D                 db    0
.eh_frame:000000000000569E                 db    0
.eh_frame:000000000000569F                 db    0
.eh_frame:00000000000056A0                 db  90h
.eh_frame:00000000000056A1                 db 0C4h
.eh_frame:00000000000056A2                 db 0FFh
.eh_frame:00000000000056A3                 db 0FFh
.eh_frame:00000000000056A4                 db 0A4h
.eh_frame:00000000000056A5                 db    0
.eh_frame:00000000000056A6                 db    0
.eh_frame:00000000000056A7                 db    0
.eh_frame:00000000000056A8                 db    0
.eh_frame:00000000000056A9                 db  41h ; A
.eh_frame:00000000000056AA                 db  0Eh
.eh_frame:00000000000056AB                 db  10h
.eh_frame:00000000000056AC                 db  86h
.eh_frame:00000000000056AD                 db    2
.eh_frame:00000000000056AE                 db  41h ; A
.eh_frame:00000000000056AF                 db  0Eh
.eh_frame:00000000000056B0                 db  18h
.eh_frame:00000000000056B1                 db  83h
.eh_frame:00000000000056B2                 db    3
.eh_frame:00000000000056B3                 db  44h ; D
.eh_frame:00000000000056B4                 db  0Eh
.eh_frame:00000000000056B5                 db  20h
.eh_frame:00000000000056B6                 db  7Ah ; z
.eh_frame:00000000000056B7                 db  0Ah
.eh_frame:00000000000056B8                 db  0Eh
.eh_frame:00000000000056B9                 db  18h
.eh_frame:00000000000056BA                 db  41h ; A
.eh_frame:00000000000056BB                 db  0Eh
.eh_frame:00000000000056BC                 db  10h
.eh_frame:00000000000056BD                 db  41h ; A
.eh_frame:00000000000056BE                 db  0Eh
.eh_frame:00000000000056BF                 db    8
.eh_frame:00000000000056C0                 db  41h ; A
.eh_frame:00000000000056C1                 db  0Bh
.eh_frame:00000000000056C2                 db    0
.eh_frame:00000000000056C3                 db    0
.eh_frame:00000000000056C4                 db    0
.eh_frame:00000000000056C5                 db    0
.eh_frame:00000000000056C6                 db    0
.eh_frame:00000000000056C7                 db    0
.eh_frame:00000000000056C8                 db  30h ; 0
.eh_frame:00000000000056C9                 db    0
.eh_frame:00000000000056CA                 db    0
.eh_frame:00000000000056CB                 db    0
.eh_frame:00000000000056CC                 db  2Ch ; ,
.eh_frame:00000000000056CD                 db    1
.eh_frame:00000000000056CE                 db    0
.eh_frame:00000000000056CF                 db    0
.eh_frame:00000000000056D0                 db  10h
.eh_frame:00000000000056D1                 db 0C5h
.eh_frame:00000000000056D2                 db 0FFh
.eh_frame:00000000000056D3                 db 0FFh
.eh_frame:00000000000056D4                 db  5Dh ; ]
.eh_frame:00000000000056D5                 db    0
.eh_frame:00000000000056D6                 db    0
.eh_frame:00000000000056D7                 db    0
.eh_frame:00000000000056D8                 db    0
.eh_frame:00000000000056D9                 db  41h ; A
.eh_frame:00000000000056DA                 db  0Eh
.eh_frame:00000000000056DB                 db  10h
.eh_frame:00000000000056DC                 db  86h
.eh_frame:00000000000056DD                 db    2
.eh_frame:00000000000056DE                 db  41h ; A
.eh_frame:00000000000056DF                 db  0Eh
.eh_frame:00000000000056E0                 db  18h
.eh_frame:00000000000056E1                 db  83h
.eh_frame:00000000000056E2                 db    3
.eh_frame:00000000000056E3                 db  49h ; I
.eh_frame:00000000000056E4                 db  0Eh
.eh_frame:00000000000056E5                 db  20h
.eh_frame:00000000000056E6                 db  7Ch ; |
.eh_frame:00000000000056E7                 db  0Ah
.eh_frame:00000000000056E8                 db  0Eh
.eh_frame:00000000000056E9                 db  18h
.eh_frame:00000000000056EA                 db  44h ; D
.eh_frame:00000000000056EB                 db  0Eh
.eh_frame:00000000000056EC                 db  10h
.eh_frame:00000000000056ED                 db  41h ; A
.eh_frame:00000000000056EE                 db  0Eh
.eh_frame:00000000000056EF                 db    8
.eh_frame:00000000000056F0                 db  44h ; D
.eh_frame:00000000000056F1                 db  0Bh
.eh_frame:00000000000056F2                 db  44h ; D
.eh_frame:00000000000056F3                 db  0Eh
.eh_frame:00000000000056F4                 db  18h
.eh_frame:00000000000056F5                 db  47h ; G
.eh_frame:00000000000056F6                 db  0Eh
.eh_frame:00000000000056F7                 db  10h
.eh_frame:00000000000056F8                 db  41h ; A
.eh_frame:00000000000056F9                 db  0Eh
.eh_frame:00000000000056FA                 db    8
.eh_frame:00000000000056FB                 db    0
.eh_frame:00000000000056FC                 db  28h ; (
.eh_frame:00000000000056FD                 db    0
.eh_frame:00000000000056FE                 db    0
.eh_frame:00000000000056FF                 db    0
.eh_frame:0000000000005700                 db  60h ; `
.eh_frame:0000000000005701                 db    1
.eh_frame:0000000000005702                 db    0
.eh_frame:0000000000005703                 db    0
.eh_frame:0000000000005704                 db  3Ch ; <
.eh_frame:0000000000005705                 db 0C5h
.eh_frame:0000000000005706                 db 0FFh
.eh_frame:0000000000005707                 db 0FFh
.eh_frame:0000000000005708                 db  5Ah ; Z
.eh_frame:0000000000005709                 db    0
.eh_frame:000000000000570A                 db    0
.eh_frame:000000000000570B                 db    0
.eh_frame:000000000000570C                 db    0
.eh_frame:000000000000570D                 db  41h ; A
.eh_frame:000000000000570E                 db  0Eh
.eh_frame:000000000000570F                 db  10h
.eh_frame:0000000000005710                 db  86h
.eh_frame:0000000000005711                 db    2
.eh_frame:0000000000005712                 db  41h ; A
.eh_frame:0000000000005713                 db  0Eh
.eh_frame:0000000000005714                 db  18h
.eh_frame:0000000000005715                 db  83h
.eh_frame:0000000000005716                 db    3
.eh_frame:0000000000005717                 db  47h ; G
.eh_frame:0000000000005718                 db  0Eh
.eh_frame:0000000000005719                 db  20h
.eh_frame:000000000000571A                 db    2
.eh_frame:000000000000571B                 db  41h ; A
.eh_frame:000000000000571C                 db  0Ah
.eh_frame:000000000000571D                 db  0Eh
.eh_frame:000000000000571E                 db  18h
.eh_frame:000000000000571F                 db  44h ; D
.eh_frame:0000000000005720                 db  0Eh
.eh_frame:0000000000005721                 db  10h
.eh_frame:0000000000005722                 db  41h ; A
.eh_frame:0000000000005723                 db  0Eh
.eh_frame:0000000000005724                 db    8
.eh_frame:0000000000005725                 db  41h ; A
.eh_frame:0000000000005726                 db  0Bh
.eh_frame:0000000000005727                 db    0
.eh_frame:0000000000005728                 db  10h
.eh_frame:0000000000005729                 db    0
.eh_frame:000000000000572A                 db    0
.eh_frame:000000000000572B                 db    0
.eh_frame:000000000000572C                 db  8Ch
.eh_frame:000000000000572D                 db    1
.eh_frame:000000000000572E                 db    0
.eh_frame:000000000000572F                 db    0
.eh_frame:0000000000005730                 db  70h ; p
.eh_frame:0000000000005731                 db 0C5h
.eh_frame:0000000000005732                 db 0FFh
.eh_frame:0000000000005733                 db 0FFh
.eh_frame:0000000000005734                 db  5Ch ; \
.eh_frame:0000000000005735                 db    0
.eh_frame:0000000000005736                 db    0
.eh_frame:0000000000005737                 db    0
.eh_frame:0000000000005738                 db    0
.eh_frame:0000000000005739                 db    0
.eh_frame:000000000000573A                 db    0
.eh_frame:000000000000573B                 db    0
.eh_frame:000000000000573C                 db  28h ; (
.eh_frame:000000000000573D                 db    0
.eh_frame:000000000000573E                 db    0
.eh_frame:000000000000573F                 db    0
.eh_frame:0000000000005740                 db 0A0h
.eh_frame:0000000000005741                 db    1
.eh_frame:0000000000005742                 db    0
.eh_frame:0000000000005743                 db    0
.eh_frame:0000000000005744                 db 0BCh
.eh_frame:0000000000005745                 db 0C5h
.eh_frame:0000000000005746                 db 0FFh
.eh_frame:0000000000005747                 db 0FFh
.eh_frame:0000000000005748                 db  47h ; G
.eh_frame:0000000000005749                 db    0
.eh_frame:000000000000574A                 db    0
.eh_frame:000000000000574B                 db    0
.eh_frame:000000000000574C                 db    0
.eh_frame:000000000000574D                 db  41h ; A
.eh_frame:000000000000574E                 db  0Eh
.eh_frame:000000000000574F                 db  10h
.eh_frame:0000000000005750                 db  83h
.eh_frame:0000000000005751                 db    2
.eh_frame:0000000000005752                 db  5Ah ; Z
.eh_frame:0000000000005753                 db  0Ah
.eh_frame:0000000000005754                 db  0Eh
.eh_frame:0000000000005755                 db    8
.eh_frame:0000000000005756                 db  45h ; E
.eh_frame:0000000000005757                 db  0Bh
.eh_frame:0000000000005758                 db  5Dh ; ]
.eh_frame:0000000000005759                 db  0Ah
.eh_frame:000000000000575A                 db  0Eh
.eh_frame:000000000000575B                 db    8
.eh_frame:000000000000575C                 db  43h ; C
.eh_frame:000000000000575D                 db  0Bh
.eh_frame:000000000000575E                 db  46h ; F
.eh_frame:000000000000575F                 db  0Eh
.eh_frame:0000000000005760                 db    8
.eh_frame:0000000000005761                 db    0
.eh_frame:0000000000005762                 db    0
.eh_frame:0000000000005763                 db    0
.eh_frame:0000000000005764                 db    0
.eh_frame:0000000000005765                 db    0
.eh_frame:0000000000005766                 db    0
.eh_frame:0000000000005767                 db    0
.eh_frame:0000000000005768                 db  1Ch
.eh_frame:0000000000005769                 db    0
.eh_frame:000000000000576A                 db    0
.eh_frame:000000000000576B                 db    0
.eh_frame:000000000000576C                 db 0CCh
.eh_frame:000000000000576D                 db    1
.eh_frame:000000000000576E                 db    0
.eh_frame:000000000000576F                 db    0
.eh_frame:0000000000005770                 db 0E0h
.eh_frame:0000000000005771                 db 0C5h
.eh_frame:0000000000005772                 db 0FFh
.eh_frame:0000000000005773                 db 0FFh
.eh_frame:0000000000005774                 db  9Fh
.eh_frame:0000000000005775                 db    0
.eh_frame:0000000000005776                 db    0
.eh_frame:0000000000005777                 db    0
.eh_frame:0000000000005778                 db    0
.eh_frame:0000000000005779                 db  44h ; D
.eh_frame:000000000000577A                 db  0Eh
.eh_frame:000000000000577B                 db  10h
.eh_frame:000000000000577C                 db  83h
.eh_frame:000000000000577D                 db    2
.eh_frame:000000000000577E                 db    2
.eh_frame:000000000000577F                 db  78h ; x
.eh_frame:0000000000005780                 db  0Ah
.eh_frame:0000000000005781                 db  0Eh
.eh_frame:0000000000005782                 db    8
.eh_frame:0000000000005783                 db  41h ; A
.eh_frame:0000000000005784                 db  0Bh
.eh_frame:0000000000005785                 db    0
.eh_frame:0000000000005786                 db    0
.eh_frame:0000000000005787                 db    0
.eh_frame:0000000000005788                 db  40h ; @
.eh_frame:0000000000005789                 db    0
.eh_frame:000000000000578A                 db    0
.eh_frame:000000000000578B                 db    0
.eh_frame:000000000000578C                 db 0ECh
.eh_frame:000000000000578D                 db    1
.eh_frame:000000000000578E                 db    0
.eh_frame:000000000000578F                 db    0
.eh_frame:0000000000005790                 db  60h ; `
.eh_frame:0000000000005791                 db 0C6h
.eh_frame:0000000000005792                 db 0FFh
.eh_frame:0000000000005793                 db 0FFh
.eh_frame:0000000000005794                 db 0E7h
.eh_frame:0000000000005795                 db    0
.eh_frame:0000000000005796                 db    0
.eh_frame:0000000000005797                 db    0
.eh_frame:0000000000005798                 db    0
.eh_frame:0000000000005799                 db  41h ; A
.eh_frame:000000000000579A                 db  0Eh
.eh_frame:000000000000579B                 db  10h
.eh_frame:000000000000579C                 db  86h
.eh_frame:000000000000579D                 db    2
.eh_frame:000000000000579E                 db  41h ; A
.eh_frame:000000000000579F                 db  0Eh
.eh_frame:00000000000057A0                 db  18h
.eh_frame:00000000000057A1                 db  83h
.eh_frame:00000000000057A2                 db    3
.eh_frame:00000000000057A3                 db  49h ; I
.eh_frame:00000000000057A4                 db  0Eh
.eh_frame:00000000000057A5                 db  20h
.eh_frame:00000000000057A6                 db  6Eh ; n
.eh_frame:00000000000057A7                 db  0Ah
.eh_frame:00000000000057A8                 db  0Eh
.eh_frame:00000000000057A9                 db  18h
.eh_frame:00000000000057AA                 db  41h ; A
.eh_frame:00000000000057AB                 db  0Eh
.eh_frame:00000000000057AC                 db  10h
.eh_frame:00000000000057AD                 db  41h ; A
.eh_frame:00000000000057AE                 db  0Eh
.eh_frame:00000000000057AF                 db    8
.eh_frame:00000000000057B0                 db  45h ; E
.eh_frame:00000000000057B1                 db  0Bh
.eh_frame:00000000000057B2                 db    2
.eh_frame:00000000000057B3                 db  4Ah ; J
.eh_frame:00000000000057B4                 db  0Ah
.eh_frame:00000000000057B5                 db  0Eh
.eh_frame:00000000000057B6                 db  18h
.eh_frame:00000000000057B7                 db  41h ; A
.eh_frame:00000000000057B8                 db  0Eh
.eh_frame:00000000000057B9                 db  10h
.eh_frame:00000000000057BA                 db  41h ; A
.eh_frame:00000000000057BB                 db  0Eh
.eh_frame:00000000000057BC                 db    8
.eh_frame:00000000000057BD                 db  44h ; D
.eh_frame:00000000000057BE                 db  0Bh
.eh_frame:00000000000057BF                 db    2
.eh_frame:00000000000057C0                 db  54h ; T
.eh_frame:00000000000057C1                 db  0Eh
.eh_frame:00000000000057C2                 db  18h
.eh_frame:00000000000057C3                 db  41h ; A
.eh_frame:00000000000057C4                 db  0Eh
.eh_frame:00000000000057C5                 db  10h
.eh_frame:00000000000057C6                 db  41h ; A
.eh_frame:00000000000057C7                 db  0Eh
.eh_frame:00000000000057C8                 db    8
.eh_frame:00000000000057C9                 db    0
.eh_frame:00000000000057CA                 db    0
.eh_frame:00000000000057CB                 db    0
.eh_frame:00000000000057CC                 db  74h ; t
.eh_frame:00000000000057CD                 db    0
.eh_frame:00000000000057CE                 db    0
.eh_frame:00000000000057CF                 db    0
.eh_frame:00000000000057D0                 db  30h ; 0
.eh_frame:00000000000057D1                 db    2
.eh_frame:00000000000057D2                 db    0
.eh_frame:00000000000057D3                 db    0
.eh_frame:00000000000057D4                 db  0Ch
.eh_frame:00000000000057D5                 db 0C7h
.eh_frame:00000000000057D6                 db 0FFh
.eh_frame:00000000000057D7                 db 0FFh
.eh_frame:00000000000057D8                 db  34h ; 4
.eh_frame:00000000000057D9                 db  12h
.eh_frame:00000000000057DA                 db    0
.eh_frame:00000000000057DB                 db    0
.eh_frame:00000000000057DC                 db    0
.eh_frame:00000000000057DD                 db  42h ; B
.eh_frame:00000000000057DE                 db  0Eh
.eh_frame:00000000000057DF                 db  10h
.eh_frame:00000000000057E0                 db  8Fh
.eh_frame:00000000000057E1                 db    2
.eh_frame:00000000000057E2                 db  42h ; B
.eh_frame:00000000000057E3                 db  0Eh
.eh_frame:00000000000057E4                 db  18h
.eh_frame:00000000000057E5                 db  8Eh
.eh_frame:00000000000057E6                 db    3
.eh_frame:00000000000057E7                 db  45h ; E
.eh_frame:00000000000057E8                 db  0Eh
.eh_frame:00000000000057E9                 db  20h
.eh_frame:00000000000057EA                 db  8Dh
.eh_frame:00000000000057EB                 db    4
.eh_frame:00000000000057EC                 db  42h ; B
.eh_frame:00000000000057ED                 db  0Eh
.eh_frame:00000000000057EE                 db  28h ; (
.eh_frame:00000000000057EF                 db  8Ch
.eh_frame:00000000000057F0                 db    5
.eh_frame:00000000000057F1                 db  44h ; D
.eh_frame:00000000000057F2                 db  0Eh
.eh_frame:00000000000057F3                 db  30h ; 0
.eh_frame:00000000000057F4                 db  86h
.eh_frame:00000000000057F5                 db    6
.eh_frame:00000000000057F6                 db  41h ; A
.eh_frame:00000000000057F7                 db  0Eh
.eh_frame:00000000000057F8                 db  38h ; 8
.eh_frame:00000000000057F9                 db  83h
.eh_frame:00000000000057FA                 db    7
.eh_frame:00000000000057FB                 db  53h ; S
.eh_frame:00000000000057FC                 db  0Eh
.eh_frame:00000000000057FD                 db 0F0h
.eh_frame:00000000000057FE                 db    1
.eh_frame:00000000000057FF                 db    3
.eh_frame:0000000000005800                 db  81h
.eh_frame:0000000000005801                 db  0Bh
.eh_frame:0000000000005802                 db  0Eh
.eh_frame:0000000000005803                 db 0F8h
.eh_frame:0000000000005804                 db    1
.eh_frame:0000000000005805                 db  4Ah ; J
.eh_frame:0000000000005806                 db  0Eh
.eh_frame:0000000000005807                 db  80h
.eh_frame:0000000000005808                 db    2
.eh_frame:0000000000005809                 db  44h ; D
.eh_frame:000000000000580A                 db  0Eh
.eh_frame:000000000000580B                 db  88h
.eh_frame:000000000000580C                 db    2
.eh_frame:000000000000580D                 db  45h ; E
.eh_frame:000000000000580E                 db  0Eh
.eh_frame:000000000000580F                 db  90h
.eh_frame:0000000000005810                 db    2
.eh_frame:0000000000005811                 db  5Fh ; _
.eh_frame:0000000000005812                 db  0Eh
.eh_frame:0000000000005813                 db 0F0h
.eh_frame:0000000000005814                 db    1
.eh_frame:0000000000005815                 db  64h ; d
.eh_frame:0000000000005816                 db  0Ah
.eh_frame:0000000000005817                 db  0Eh
.eh_frame:0000000000005818                 db  38h ; 8
.eh_frame:0000000000005819                 db  41h ; A
.eh_frame:000000000000581A                 db  0Eh
.eh_frame:000000000000581B                 db  30h ; 0
.eh_frame:000000000000581C                 db  41h ; A
.eh_frame:000000000000581D                 db  0Eh
.eh_frame:000000000000581E                 db  28h ; (
.eh_frame:000000000000581F                 db  42h ; B
.eh_frame:0000000000005820                 db  0Eh
.eh_frame:0000000000005821                 db  20h
.eh_frame:0000000000005822                 db  42h ; B
.eh_frame:0000000000005823                 db  0Eh
.eh_frame:0000000000005824                 db  18h
.eh_frame:0000000000005825                 db  42h ; B
.eh_frame:0000000000005826                 db  0Eh
.eh_frame:0000000000005827                 db  10h
.eh_frame:0000000000005828                 db  42h ; B
.eh_frame:0000000000005829                 db  0Eh
.eh_frame:000000000000582A                 db    8
.eh_frame:000000000000582B                 db  44h ; D
.eh_frame:000000000000582C                 db  0Bh
.eh_frame:000000000000582D                 db    3
.eh_frame:000000000000582E                 db  99h
.eh_frame:000000000000582F                 db    5
.eh_frame:0000000000005830                 db  0Eh
.eh_frame:0000000000005831                 db 0F8h
.eh_frame:0000000000005832                 db    1
.eh_frame:0000000000005833                 db  4Dh ; M
.eh_frame:0000000000005834                 db  0Eh
.eh_frame:0000000000005835                 db  80h
.eh_frame:0000000000005836                 db    2
.eh_frame:0000000000005837                 db  44h ; D
.eh_frame:0000000000005838                 db  0Eh
.eh_frame:0000000000005839                 db  88h
.eh_frame:000000000000583A                 db    2
.eh_frame:000000000000583B                 db  47h ; G
.eh_frame:000000000000583C                 db  0Eh
.eh_frame:000000000000583D                 db  90h
.eh_frame:000000000000583E                 db    2
.eh_frame:000000000000583F                 db  5Bh ; [
.eh_frame:0000000000005840                 db  0Eh
.eh_frame:0000000000005841                 db 0F0h
.eh_frame:0000000000005842                 db    1
.eh_frame:0000000000005843                 db    0
.eh_frame:0000000000005844                 db  68h ; h
.eh_frame:0000000000005845                 db    0
.eh_frame:0000000000005846                 db    0
.eh_frame:0000000000005847                 db    0
.eh_frame:0000000000005848                 db 0A8h
.eh_frame:0000000000005849                 db    2
.eh_frame:000000000000584A                 db    0
.eh_frame:000000000000584B                 db    0
.eh_frame:000000000000584C                 db 0D4h
.eh_frame:000000000000584D                 db 0D8h
.eh_frame:000000000000584E                 db 0FFh
.eh_frame:000000000000584F                 db 0FFh
.eh_frame:0000000000005850                 db 0ABh
.eh_frame:0000000000005851                 db    1
.eh_frame:0000000000005852                 db    0
.eh_frame:0000000000005853                 db    0
.eh_frame:0000000000005854                 db    0
.eh_frame:0000000000005855                 db  42h ; B
.eh_frame:0000000000005856                 db  0Eh
.eh_frame:0000000000005857                 db  10h
.eh_frame:0000000000005858                 db  8Fh
.eh_frame:0000000000005859                 db    2
.eh_frame:000000000000585A                 db  42h ; B
.eh_frame:000000000000585B                 db  0Eh
.eh_frame:000000000000585C                 db  18h
.eh_frame:000000000000585D                 db  8Eh
.eh_frame:000000000000585E                 db    3
.eh_frame:000000000000585F                 db  45h ; E
.eh_frame:0000000000005860                 db  0Eh
.eh_frame:0000000000005861                 db  20h
.eh_frame:0000000000005862                 db  8Dh
.eh_frame:0000000000005863                 db    4
.eh_frame:0000000000005864                 db  42h ; B
.eh_frame:0000000000005865                 db  0Eh
.eh_frame:0000000000005866                 db  28h ; (
.eh_frame:0000000000005867                 db  8Ch
.eh_frame:0000000000005868                 db    5
.eh_frame:0000000000005869                 db  44h ; D
.eh_frame:000000000000586A                 db  0Eh
.eh_frame:000000000000586B                 db  30h ; 0
.eh_frame:000000000000586C                 db  86h
.eh_frame:000000000000586D                 db    6
.eh_frame:000000000000586E                 db  41h ; A
.eh_frame:000000000000586F                 db  0Eh
.eh_frame:0000000000005870                 db  38h ; 8
.eh_frame:0000000000005871                 db  83h
.eh_frame:0000000000005872                 db    7
.eh_frame:0000000000005873                 db  47h ; G
.eh_frame:0000000000005874                 db  0Eh
.eh_frame:0000000000005875                 db  60h ; `
.eh_frame:0000000000005876                 db    2
.eh_frame:0000000000005877                 db  99h
.eh_frame:0000000000005878                 db  0Eh
.eh_frame:0000000000005879                 db  68h ; h
.eh_frame:000000000000587A                 db  5Fh ; _
.eh_frame:000000000000587B                 db  0Eh
.eh_frame:000000000000587C                 db  70h ; p
.eh_frame:000000000000587D                 db  46h ; F
.eh_frame:000000000000587E                 db  0Eh
.eh_frame:000000000000587F                 db  78h ; x
.eh_frame:0000000000005880                 db  42h ; B
.eh_frame:0000000000005881                 db  0Eh
.eh_frame:0000000000005882                 db  80h
.eh_frame:0000000000005883                 db    1
.eh_frame:0000000000005884                 db  59h ; Y
.eh_frame:0000000000005885                 db  0Eh
.eh_frame:0000000000005886                 db  60h ; `
.eh_frame:0000000000005887                 db    2
.eh_frame:0000000000005888                 db  40h ; @
.eh_frame:0000000000005889                 db  0Eh
.eh_frame:000000000000588A                 db  68h ; h
.eh_frame:000000000000588B                 db  4Bh ; K
.eh_frame:000000000000588C                 db  0Eh
.eh_frame:000000000000588D                 db  70h ; p
.eh_frame:000000000000588E                 db  43h ; C
.eh_frame:000000000000588F                 db  0Eh
.eh_frame:0000000000005890                 db  78h ; x
.eh_frame:0000000000005891                 db  45h ; E
.eh_frame:0000000000005892                 db  0Eh
.eh_frame:0000000000005893                 db  80h
.eh_frame:0000000000005894                 db    1
.eh_frame:0000000000005895                 db  5Eh ; ^
.eh_frame:0000000000005896                 db  0Eh
.eh_frame:0000000000005897                 db  60h ; `
.eh_frame:0000000000005898                 db  4Ch ; L
.eh_frame:0000000000005899                 db  0Ah
.eh_frame:000000000000589A                 db  0Eh
.eh_frame:000000000000589B                 db  38h ; 8
.eh_frame:000000000000589C                 db  44h ; D
.eh_frame:000000000000589D                 db  0Eh
.eh_frame:000000000000589E                 db  30h ; 0
.eh_frame:000000000000589F                 db  41h ; A
.eh_frame:00000000000058A0                 db  0Eh
.eh_frame:00000000000058A1                 db  28h ; (
.eh_frame:00000000000058A2                 db  42h ; B
.eh_frame:00000000000058A3                 db  0Eh
.eh_frame:00000000000058A4                 db  20h
.eh_frame:00000000000058A5                 db  42h ; B
.eh_frame:00000000000058A6                 db  0Eh
.eh_frame:00000000000058A7                 db  18h
.eh_frame:00000000000058A8                 db  42h ; B
.eh_frame:00000000000058A9                 db  0Eh
.eh_frame:00000000000058AA                 db  10h
.eh_frame:00000000000058AB                 db  42h ; B
.eh_frame:00000000000058AC                 db  0Eh
.eh_frame:00000000000058AD                 db    8
.eh_frame:00000000000058AE                 db  46h ; F
.eh_frame:00000000000058AF                 db  0Bh
.eh_frame:00000000000058B0                 db  28h ; (
.eh_frame:00000000000058B1                 db    0
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db  14h
.eh_frame:00000000000058B5                 db    3
.eh_frame:00000000000058B6                 db    0
.eh_frame:00000000000058B7                 db    0
.eh_frame:00000000000058B8                 db  18h
.eh_frame:00000000000058B9                 db 0DAh
.eh_frame:00000000000058BA                 db 0FFh
.eh_frame:00000000000058BB                 db 0FFh
.eh_frame:00000000000058BC                 db  36h ; 6
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db    0
.eh_frame:00000000000058C1                 db  42h ; B
.eh_frame:00000000000058C2                 db  0Eh
.eh_frame:00000000000058C3                 db  10h
.eh_frame:00000000000058C4                 db  8Ch
.eh_frame:00000000000058C5                 db    2
.eh_frame:00000000000058C6                 db  41h ; A
.eh_frame:00000000000058C7                 db  0Eh
.eh_frame:00000000000058C8                 db  18h
.eh_frame:00000000000058C9                 db  86h
.eh_frame:00000000000058CA                 db    3
.eh_frame:00000000000058CB                 db  41h ; A
.eh_frame:00000000000058CC                 db  0Eh
.eh_frame:00000000000058CD                 db  20h
.eh_frame:00000000000058CE                 db  83h
.eh_frame:00000000000058CF                 db    4
.eh_frame:00000000000058D0                 db  6Eh ; n
.eh_frame:00000000000058D1                 db  0Eh
.eh_frame:00000000000058D2                 db  18h
.eh_frame:00000000000058D3                 db  41h ; A
.eh_frame:00000000000058D4                 db  0Eh
.eh_frame:00000000000058D5                 db  10h
.eh_frame:00000000000058D6                 db  42h ; B
.eh_frame:00000000000058D7                 db  0Eh
.eh_frame:00000000000058D8                 db    8
.eh_frame:00000000000058D9                 db    0
.eh_frame:00000000000058DA                 db    0
.eh_frame:00000000000058DB                 db    0
.eh_frame:00000000000058DC                 db  10h
.eh_frame:00000000000058DD                 db    0
.eh_frame:00000000000058DE                 db    0
.eh_frame:00000000000058DF                 db    0
.eh_frame:00000000000058E0                 db  40h ; @
.eh_frame:00000000000058E1                 db    3
.eh_frame:00000000000058E2                 db    0
.eh_frame:00000000000058E3                 db    0
.eh_frame:00000000000058E4                 db  2Ch ; ,
.eh_frame:00000000000058E5                 db 0DAh
.eh_frame:00000000000058E6                 db 0FFh
.eh_frame:00000000000058E7                 db 0FFh
.eh_frame:00000000000058E8                 db  11h
.eh_frame:00000000000058E9                 db    0
.eh_frame:00000000000058EA                 db    0
.eh_frame:00000000000058EB                 db    0
.eh_frame:00000000000058EC                 db    0
.eh_frame:00000000000058ED                 db    0
.eh_frame:00000000000058EE                 db    0
.eh_frame:00000000000058EF                 db    0
.eh_frame:00000000000058F0                 db  10h
.eh_frame:00000000000058F1                 db    0
.eh_frame:00000000000058F2                 db    0
.eh_frame:00000000000058F3                 db    0
.eh_frame:00000000000058F4                 db  54h ; T
.eh_frame:00000000000058F5                 db    3
.eh_frame:00000000000058F6                 db    0
.eh_frame:00000000000058F7                 db    0
.eh_frame:00000000000058F8                 db  38h ; 8
.eh_frame:00000000000058F9                 db 0DAh
.eh_frame:00000000000058FA                 db 0FFh
.eh_frame:00000000000058FB                 db 0FFh
.eh_frame:00000000000058FC                 db  11h
.eh_frame:00000000000058FD                 db    0
.eh_frame:00000000000058FE                 db    0
.eh_frame:00000000000058FF                 db    0
.eh_frame:0000000000005900                 db    0
.eh_frame:0000000000005901                 db    0
.eh_frame:0000000000005902                 db    0
.eh_frame:0000000000005903                 db    0
.eh_frame:0000000000005904                 db  10h
.eh_frame:0000000000005905                 db    0
.eh_frame:0000000000005906                 db    0
.eh_frame:0000000000005907                 db    0
.eh_frame:0000000000005908                 db  68h ; h
.eh_frame:0000000000005909                 db    3
.eh_frame:000000000000590A                 db    0
.eh_frame:000000000000590B                 db    0
.eh_frame:000000000000590C                 db  44h ; D
.eh_frame:000000000000590D                 db 0DAh
.eh_frame:000000000000590E                 db 0FFh
.eh_frame:000000000000590F                 db 0FFh
.eh_frame:0000000000005910                 db  35h ; 5
.eh_frame:0000000000005911                 db    0
.eh_frame:0000000000005912                 db    0
.eh_frame:0000000000005913                 db    0
.eh_frame:0000000000005914                 db    0
.eh_frame:0000000000005915                 db    0
.eh_frame:0000000000005916                 db    0
.eh_frame:0000000000005917                 db    0
.eh_frame:0000000000005918                 db  10h
.eh_frame:0000000000005919                 db    0
.eh_frame:000000000000591A                 db    0
.eh_frame:000000000000591B                 db    0
.eh_frame:000000000000591C                 db  7Ch ; |
.eh_frame:000000000000591D                 db    3
.eh_frame:000000000000591E                 db    0
.eh_frame:000000000000591F                 db    0
.eh_frame:0000000000005920                 db  70h ; p
.eh_frame:0000000000005921                 db 0DAh
.eh_frame:0000000000005922                 db 0FFh
.eh_frame:0000000000005923                 db 0FFh
.eh_frame:0000000000005924                 db  15h
.eh_frame:0000000000005925                 db    0
.eh_frame:0000000000005926                 db    0
.eh_frame:0000000000005927                 db    0
.eh_frame:0000000000005928                 db    0
.eh_frame:0000000000005929                 db    0
.eh_frame:000000000000592A                 db    0
.eh_frame:000000000000592B                 db    0
.eh_frame:000000000000592C                 db  10h
.eh_frame:000000000000592D                 db    0
.eh_frame:000000000000592E                 db    0
.eh_frame:000000000000592F                 db    0
.eh_frame:0000000000005930                 db  90h
.eh_frame:0000000000005931                 db    3
.eh_frame:0000000000005932                 db    0
.eh_frame:0000000000005933                 db    0
.eh_frame:0000000000005934                 db  7Ch ; |
.eh_frame:0000000000005935                 db 0DAh
.eh_frame:0000000000005936                 db 0FFh
.eh_frame:0000000000005937                 db 0FFh
.eh_frame:0000000000005938                 db  30h ; 0
.eh_frame:0000000000005939                 db    0
.eh_frame:000000000000593A                 db    0
.eh_frame:000000000000593B                 db    0
.eh_frame:000000000000593C                 db    0
.eh_frame:000000000000593D                 db  6Bh ; k
.eh_frame:000000000000593E                 db  0Eh
.eh_frame:000000000000593F                 db  10h
.eh_frame:0000000000005940                 db  50h ; P
.eh_frame:0000000000005941                 db    0
.eh_frame:0000000000005942                 db    0
.eh_frame:0000000000005943                 db    0
.eh_frame:0000000000005944                 db 0A4h
.eh_frame:0000000000005945                 db    3
.eh_frame:0000000000005946                 db    0
.eh_frame:0000000000005947                 db    0
.eh_frame:0000000000005948                 db  98h
.eh_frame:0000000000005949                 db 0DAh
.eh_frame:000000000000594A                 db 0FFh
.eh_frame:000000000000594B                 db 0FFh
.eh_frame:000000000000594C                 db  74h ; t
.eh_frame:000000000000594D                 db    0
.eh_frame:000000000000594E                 db    0
.eh_frame:000000000000594F                 db    0
.eh_frame:0000000000005950                 db    0
.eh_frame:0000000000005951                 db  42h ; B
.eh_frame:0000000000005952                 db  0Eh
.eh_frame:0000000000005953                 db  10h
.eh_frame:0000000000005954                 db  8Fh
.eh_frame:0000000000005955                 db    2
.eh_frame:0000000000005956                 db  42h ; B
.eh_frame:0000000000005957                 db  0Eh
.eh_frame:0000000000005958                 db  18h
.eh_frame:0000000000005959                 db  8Eh
.eh_frame:000000000000595A                 db    3
.eh_frame:000000000000595B                 db  49h ; I
.eh_frame:000000000000595C                 db  0Eh
.eh_frame:000000000000595D                 db  20h
.eh_frame:000000000000595E                 db  8Dh
.eh_frame:000000000000595F                 db    4
.eh_frame:0000000000005960                 db  42h ; B
.eh_frame:0000000000005961                 db  0Eh
.eh_frame:0000000000005962                 db  28h ; (
.eh_frame:0000000000005963                 db  8Ch
.eh_frame:0000000000005964                 db    5
.eh_frame:0000000000005965                 db  44h ; D
.eh_frame:0000000000005966                 db  0Eh
.eh_frame:0000000000005967                 db  30h ; 0
.eh_frame:0000000000005968                 db  86h
.eh_frame:0000000000005969                 db    6
.eh_frame:000000000000596A                 db  41h ; A
.eh_frame:000000000000596B                 db  0Eh
.eh_frame:000000000000596C                 db  38h ; 8
.eh_frame:000000000000596D                 db  83h
.eh_frame:000000000000596E                 db    7
.eh_frame:000000000000596F                 db  4Dh ; M
.eh_frame:0000000000005970                 db  0Eh
.eh_frame:0000000000005971                 db  50h ; P
.eh_frame:0000000000005972                 db  5Fh ; _
.eh_frame:0000000000005973                 db  0Eh
.eh_frame:0000000000005974                 db  58h ; X
.eh_frame:0000000000005975                 db  47h ; G
.eh_frame:0000000000005976                 db  0Eh
.eh_frame:0000000000005977                 db  60h ; `
.eh_frame:0000000000005978                 db  46h ; F
.eh_frame:0000000000005979                 db  0Eh
.eh_frame:000000000000597A                 db  68h ; h
.eh_frame:000000000000597B                 db  44h ; D
.eh_frame:000000000000597C                 db  0Eh
.eh_frame:000000000000597D                 db  70h ; p
.eh_frame:000000000000597E                 db  58h ; X
.eh_frame:000000000000597F                 db  0Eh
.eh_frame:0000000000005980                 db  38h ; 8
.eh_frame:0000000000005981                 db  41h ; A
.eh_frame:0000000000005982                 db  0Eh
.eh_frame:0000000000005983                 db  30h ; 0
.eh_frame:0000000000005984                 db  41h ; A
.eh_frame:0000000000005985                 db  0Eh
.eh_frame:0000000000005986                 db  28h ; (
.eh_frame:0000000000005987                 db  42h ; B
.eh_frame:0000000000005988                 db  0Eh
.eh_frame:0000000000005989                 db  20h
.eh_frame:000000000000598A                 db  42h ; B
.eh_frame:000000000000598B                 db  0Eh
.eh_frame:000000000000598C                 db  18h
.eh_frame:000000000000598D                 db  42h ; B
.eh_frame:000000000000598E                 db  0Eh
.eh_frame:000000000000598F                 db  10h
.eh_frame:0000000000005990                 db  42h ; B
.eh_frame:0000000000005991                 db  0Eh
.eh_frame:0000000000005992                 db    8
.eh_frame:0000000000005993                 db    0
.eh_frame:0000000000005994                 db  68h ; h
.eh_frame:0000000000005995                 db    0
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db 0F8h
.eh_frame:0000000000005999                 db    3
.eh_frame:000000000000599A                 db    0
.eh_frame:000000000000599B                 db    0
.eh_frame:000000000000599C                 db 0C4h
.eh_frame:000000000000599D                 db 0DAh
.eh_frame:000000000000599E                 db 0FFh
.eh_frame:000000000000599F                 db 0FFh
.eh_frame:00000000000059A0                 db 0E3h
.eh_frame:00000000000059A1                 db    0
.eh_frame:00000000000059A2                 db    0
.eh_frame:00000000000059A3                 db    0
.eh_frame:00000000000059A4                 db    0
.eh_frame:00000000000059A5                 db  42h ; B
.eh_frame:00000000000059A6                 db  0Eh
.eh_frame:00000000000059A7                 db  10h
.eh_frame:00000000000059A8                 db  8Fh
.eh_frame:00000000000059A9                 db    2
.eh_frame:00000000000059AA                 db  42h ; B
.eh_frame:00000000000059AB                 db  0Eh
.eh_frame:00000000000059AC                 db  18h
.eh_frame:00000000000059AD                 db  8Eh
.eh_frame:00000000000059AE                 db    3
.eh_frame:00000000000059AF                 db  49h ; I
.eh_frame:00000000000059B0                 db  0Eh
.eh_frame:00000000000059B1                 db  20h
.eh_frame:00000000000059B2                 db  8Dh
.eh_frame:00000000000059B3                 db    4
.eh_frame:00000000000059B4                 db  42h ; B
.eh_frame:00000000000059B5                 db  0Eh
.eh_frame:00000000000059B6                 db  28h ; (
.eh_frame:00000000000059B7                 db  8Ch
.eh_frame:00000000000059B8                 db    5
.eh_frame:00000000000059B9                 db  44h ; D
.eh_frame:00000000000059BA                 db  0Eh
.eh_frame:00000000000059BB                 db  30h ; 0
.eh_frame:00000000000059BC                 db  86h
.eh_frame:00000000000059BD                 db    6
.eh_frame:00000000000059BE                 db  41h ; A
.eh_frame:00000000000059BF                 db  0Eh
.eh_frame:00000000000059C0                 db  38h ; 8
.eh_frame:00000000000059C1                 db  83h
.eh_frame:00000000000059C2                 db    7
.eh_frame:00000000000059C3                 db  4Dh ; M
.eh_frame:00000000000059C4                 db  0Eh
.eh_frame:00000000000059C5                 db  70h ; p
.eh_frame:00000000000059C6                 db  65h ; e
.eh_frame:00000000000059C7                 db  0Eh
.eh_frame:00000000000059C8                 db  78h ; x
.eh_frame:00000000000059C9                 db  4Dh ; M
.eh_frame:00000000000059CA                 db  0Eh
.eh_frame:00000000000059CB                 db  80h
.eh_frame:00000000000059CC                 db    1
.eh_frame:00000000000059CD                 db  46h ; F
.eh_frame:00000000000059CE                 db  0Eh
.eh_frame:00000000000059CF                 db  88h
.eh_frame:00000000000059D0                 db    1
.eh_frame:00000000000059D1                 db  42h ; B
.eh_frame:00000000000059D2                 db  0Eh
.eh_frame:00000000000059D3                 db  90h
.eh_frame:00000000000059D4                 db    1
.eh_frame:00000000000059D5                 db  5Eh ; ^
.eh_frame:00000000000059D6                 db  0Eh
.eh_frame:00000000000059D7                 db  70h ; p
.eh_frame:00000000000059D8                 db  56h ; V
.eh_frame:00000000000059D9                 db  0Eh
.eh_frame:00000000000059DA                 db  78h ; x
.eh_frame:00000000000059DB                 db  43h ; C
.eh_frame:00000000000059DC                 db  0Eh
.eh_frame:00000000000059DD                 db  80h
.eh_frame:00000000000059DE                 db    1
.eh_frame:00000000000059DF                 db  43h ; C
.eh_frame:00000000000059E0                 db  0Eh
.eh_frame:00000000000059E1                 db  88h
.eh_frame:00000000000059E2                 db    1
.eh_frame:00000000000059E3                 db  56h ; V
.eh_frame:00000000000059E4                 db  0Eh
.eh_frame:00000000000059E5                 db  90h
.eh_frame:00000000000059E6                 db    1
.eh_frame:00000000000059E7                 db  52h ; R
.eh_frame:00000000000059E8                 db  0Eh
.eh_frame:00000000000059E9                 db  70h ; p
.eh_frame:00000000000059EA                 db  5Bh ; [
.eh_frame:00000000000059EB                 db  0Eh
.eh_frame:00000000000059EC                 db  38h ; 8
.eh_frame:00000000000059ED                 db  41h ; A
.eh_frame:00000000000059EE                 db  0Eh
.eh_frame:00000000000059EF                 db  30h ; 0
.eh_frame:00000000000059F0                 db  41h ; A
.eh_frame:00000000000059F1                 db  0Eh
.eh_frame:00000000000059F2                 db  28h ; (
.eh_frame:00000000000059F3                 db  42h ; B
.eh_frame:00000000000059F4                 db  0Eh
.eh_frame:00000000000059F5                 db  20h
.eh_frame:00000000000059F6                 db  42h ; B
.eh_frame:00000000000059F7                 db  0Eh
.eh_frame:00000000000059F8                 db  18h
.eh_frame:00000000000059F9                 db  42h ; B
.eh_frame:00000000000059FA                 db  0Eh
.eh_frame:00000000000059FB                 db  10h
.eh_frame:00000000000059FC                 db  42h ; B
.eh_frame:00000000000059FD                 db  0Eh
.eh_frame:00000000000059FE                 db    8
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db  10h
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db  64h ; d
.eh_frame:0000000000005A05                 db    4
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db  48h ; H
.eh_frame:0000000000005A09                 db 0DBh
.eh_frame:0000000000005A0A                 db 0FFh
.eh_frame:0000000000005A0B                 db 0FFh
.eh_frame:0000000000005A0C                 db  0Ah
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db    0
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db  28h ; (
.eh_frame:0000000000005A15                 db    0
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db  78h ; x
.eh_frame:0000000000005A19                 db    4
.eh_frame:0000000000005A1A                 db    0
.eh_frame:0000000000005A1B                 db    0
.eh_frame:0000000000005A1C                 db  44h ; D
.eh_frame:0000000000005A1D                 db 0DBh
.eh_frame:0000000000005A1E                 db 0FFh
.eh_frame:0000000000005A1F                 db 0FFh
.eh_frame:0000000000005A20                 db  93h
.eh_frame:0000000000005A21                 db    0
.eh_frame:0000000000005A22                 db    0
.eh_frame:0000000000005A23                 db    0
.eh_frame:0000000000005A24                 db    0
.eh_frame:0000000000005A25                 db  48h ; H
.eh_frame:0000000000005A26                 db  0Eh
.eh_frame:0000000000005A27                 db  10h
.eh_frame:0000000000005A28                 db  8Ch
.eh_frame:0000000000005A29                 db    2
.eh_frame:0000000000005A2A                 db  48h ; H
.eh_frame:0000000000005A2B                 db  0Eh
.eh_frame:0000000000005A2C                 db  18h
.eh_frame:0000000000005A2D                 db  86h
.eh_frame:0000000000005A2E                 db    3
.eh_frame:0000000000005A2F                 db  41h ; A
.eh_frame:0000000000005A30                 db  0Eh
.eh_frame:0000000000005A31                 db  20h
.eh_frame:0000000000005A32                 db  83h
.eh_frame:0000000000005A33                 db    4
.eh_frame:0000000000005A34                 db    2
.eh_frame:0000000000005A35                 db  74h ; t
.eh_frame:0000000000005A36                 db  0Eh
.eh_frame:0000000000005A37                 db  18h
.eh_frame:0000000000005A38                 db  4Bh ; K
.eh_frame:0000000000005A39                 db  0Eh
.eh_frame:0000000000005A3A                 db  10h
.eh_frame:0000000000005A3B                 db  42h ; B
.eh_frame:0000000000005A3C                 db  0Eh
.eh_frame:0000000000005A3D                 db    8
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db  10h
.eh_frame:0000000000005A41                 db    0
.eh_frame:0000000000005A42                 db    0
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db 0A4h
.eh_frame:0000000000005A45                 db    4
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db 0B8h
.eh_frame:0000000000005A49                 db 0DBh
.eh_frame:0000000000005A4A                 db 0FFh
.eh_frame:0000000000005A4B                 db 0FFh
.eh_frame:0000000000005A4C                 db  13h
.eh_frame:0000000000005A4D                 db    0
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db    0
.eh_frame:0000000000005A51                 db    0
.eh_frame:0000000000005A52                 db    0
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db  10h
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db 0B8h
.eh_frame:0000000000005A59                 db    4
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db 0C4h
.eh_frame:0000000000005A5D                 db 0DBh
.eh_frame:0000000000005A5E                 db 0FFh
.eh_frame:0000000000005A5F                 db 0FFh
.eh_frame:0000000000005A60                 db  0Ch
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db    0
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  10h
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db 0CCh
.eh_frame:0000000000005A6D                 db    4
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db 0C0h
.eh_frame:0000000000005A71                 db 0DBh
.eh_frame:0000000000005A72                 db 0FFh
.eh_frame:0000000000005A73                 db 0FFh
.eh_frame:0000000000005A74                 db  18h
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db    0
.eh_frame:0000000000005A79                 db    0
.eh_frame:0000000000005A7A                 db    0
.eh_frame:0000000000005A7B                 db    0
.eh_frame:0000000000005A7C                 db  10h
.eh_frame:0000000000005A7D                 db    0
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db 0E0h
.eh_frame:0000000000005A81                 db    4
.eh_frame:0000000000005A82                 db    0
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db 0CCh
.eh_frame:0000000000005A85                 db 0DBh
.eh_frame:0000000000005A86                 db 0FFh
.eh_frame:0000000000005A87                 db 0FFh
.eh_frame:0000000000005A88                 db  14h
.eh_frame:0000000000005A89                 db    0
.eh_frame:0000000000005A8A                 db    0
.eh_frame:0000000000005A8B                 db    0
.eh_frame:0000000000005A8C                 db    0
.eh_frame:0000000000005A8D                 db    0
.eh_frame:0000000000005A8E                 db    0
.eh_frame:0000000000005A8F                 db    0
.eh_frame:0000000000005A90                 db  18h
.eh_frame:0000000000005A91                 db    0
.eh_frame:0000000000005A92                 db    0
.eh_frame:0000000000005A93                 db    0
.eh_frame:0000000000005A94                 db 0F4h
.eh_frame:0000000000005A95                 db    4
.eh_frame:0000000000005A96                 db    0
.eh_frame:0000000000005A97                 db    0
.eh_frame:0000000000005A98                 db 0D8h
.eh_frame:0000000000005A99                 db 0DBh
.eh_frame:0000000000005A9A                 db 0FFh
.eh_frame:0000000000005A9B                 db 0FFh
.eh_frame:0000000000005A9C                 db  8Eh
.eh_frame:0000000000005A9D                 db    0
.eh_frame:0000000000005A9E                 db    0
.eh_frame:0000000000005A9F                 db    0
.eh_frame:0000000000005AA0                 db    0
.eh_frame:0000000000005AA1                 db  44h ; D
.eh_frame:0000000000005AA2                 db  0Eh
.eh_frame:0000000000005AA3                 db  50h ; P
.eh_frame:0000000000005AA4                 db    2
.eh_frame:0000000000005AA5                 db  7Fh ; 
.eh_frame:0000000000005AA6                 db  0Ah
.eh_frame:0000000000005AA7                 db  0Eh
.eh_frame:0000000000005AA8                 db    8
.eh_frame:0000000000005AA9                 db  41h ; A
.eh_frame:0000000000005AAA                 db  0Bh
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db  18h
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  10h
.eh_frame:0000000000005AB1                 db    5
.eh_frame:0000000000005AB2                 db    0
.eh_frame:0000000000005AB3                 db    0
.eh_frame:0000000000005AB4                 db  4Ch ; L
.eh_frame:0000000000005AB5                 db 0DCh
.eh_frame:0000000000005AB6                 db 0FFh
.eh_frame:0000000000005AB7                 db 0FFh
.eh_frame:0000000000005AB8                 db  8Ah
.eh_frame:0000000000005AB9                 db    0
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db    0
.eh_frame:0000000000005ABD                 db  44h ; D
.eh_frame:0000000000005ABE                 db  0Eh
.eh_frame:0000000000005ABF                 db  50h ; P
.eh_frame:0000000000005AC0                 db    2
.eh_frame:0000000000005AC1                 db  7Bh ; {
.eh_frame:0000000000005AC2                 db  0Ah
.eh_frame:0000000000005AC3                 db  0Eh
.eh_frame:0000000000005AC4                 db    8
.eh_frame:0000000000005AC5                 db  41h ; A
.eh_frame:0000000000005AC6                 db  0Bh
.eh_frame:0000000000005AC7                 db    0
.eh_frame:0000000000005AC8                 db  10h
.eh_frame:0000000000005AC9                 db    0
.eh_frame:0000000000005ACA                 db    0
.eh_frame:0000000000005ACB                 db    0
.eh_frame:0000000000005ACC                 db  2Ch ; ,
.eh_frame:0000000000005ACD                 db    5
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db 0C0h
.eh_frame:0000000000005AD1                 db 0DCh
.eh_frame:0000000000005AD2                 db 0FFh
.eh_frame:0000000000005AD3                 db 0FFh
.eh_frame:0000000000005AD4                 db  0Ch
.eh_frame:0000000000005AD5                 db    0
.eh_frame:0000000000005AD6                 db    0
.eh_frame:0000000000005AD7                 db    0
.eh_frame:0000000000005AD8                 db    0
.eh_frame:0000000000005AD9                 db    0
.eh_frame:0000000000005ADA                 db    0
.eh_frame:0000000000005ADB                 db    0
.eh_frame:0000000000005ADC                 db  10h
.eh_frame:0000000000005ADD                 db    0
.eh_frame:0000000000005ADE                 db    0
.eh_frame:0000000000005ADF                 db    0
.eh_frame:0000000000005AE0                 db  40h ; @
.eh_frame:0000000000005AE1                 db    5
.eh_frame:0000000000005AE2                 db    0
.eh_frame:0000000000005AE3                 db    0
.eh_frame:0000000000005AE4                 db 0BCh
.eh_frame:0000000000005AE5                 db 0DCh
.eh_frame:0000000000005AE6                 db 0FFh
.eh_frame:0000000000005AE7                 db 0FFh
.eh_frame:0000000000005AE8                 db  0Fh
.eh_frame:0000000000005AE9                 db    0
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db    0
.eh_frame:0000000000005AED                 db    0
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db  18h
.eh_frame:0000000000005AF1                 db    0
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db  54h ; T
.eh_frame:0000000000005AF5                 db    5
.eh_frame:0000000000005AF6                 db    0
.eh_frame:0000000000005AF7                 db    0
.eh_frame:0000000000005AF8                 db 0B8h
.eh_frame:0000000000005AF9                 db 0DCh
.eh_frame:0000000000005AFA                 db 0FFh
.eh_frame:0000000000005AFB                 db 0FFh
.eh_frame:0000000000005AFC                 db  98h
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db    0
.eh_frame:0000000000005B01                 db  44h ; D
.eh_frame:0000000000005B02                 db  0Eh
.eh_frame:0000000000005B03                 db  50h ; P
.eh_frame:0000000000005B04                 db    2
.eh_frame:0000000000005B05                 db  8Eh
.eh_frame:0000000000005B06                 db  0Ah
.eh_frame:0000000000005B07                 db  0Eh
.eh_frame:0000000000005B08                 db    8
.eh_frame:0000000000005B09                 db  41h ; A
.eh_frame:0000000000005B0A                 db  0Bh
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db  10h
.eh_frame:0000000000005B0D                 db    0
.eh_frame:0000000000005B0E                 db    0
.eh_frame:0000000000005B0F                 db    0
.eh_frame:0000000000005B10                 db  70h ; p
.eh_frame:0000000000005B11                 db    5
.eh_frame:0000000000005B12                 db    0
.eh_frame:0000000000005B13                 db    0
.eh_frame:0000000000005B14                 db  3Ch ; <
.eh_frame:0000000000005B15                 db 0DDh
.eh_frame:0000000000005B16                 db 0FFh
.eh_frame:0000000000005B17                 db 0FFh
.eh_frame:0000000000005B18                 db  10h
.eh_frame:0000000000005B19                 db    0
.eh_frame:0000000000005B1A                 db    0
.eh_frame:0000000000005B1B                 db    0
.eh_frame:0000000000005B1C                 db    0
.eh_frame:0000000000005B1D                 db    0
.eh_frame:0000000000005B1E                 db    0
.eh_frame:0000000000005B1F                 db    0
.eh_frame:0000000000005B20                 db  10h
.eh_frame:0000000000005B21                 db    0
.eh_frame:0000000000005B22                 db    0
.eh_frame:0000000000005B23                 db    0
.eh_frame:0000000000005B24                 db  84h
.eh_frame:0000000000005B25                 db    5
.eh_frame:0000000000005B26                 db    0
.eh_frame:0000000000005B27                 db    0
.eh_frame:0000000000005B28                 db  38h ; 8
.eh_frame:0000000000005B29                 db 0DDh
.eh_frame:0000000000005B2A                 db 0FFh
.eh_frame:0000000000005B2B                 db 0FFh
.eh_frame:0000000000005B2C                 db  11h
.eh_frame:0000000000005B2D                 db    0
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db    0
.eh_frame:0000000000005B31                 db    0
.eh_frame:0000000000005B32                 db    0
.eh_frame:0000000000005B33                 db    0
.eh_frame:0000000000005B34                 db  10h
.eh_frame:0000000000005B35                 db    0
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db  98h
.eh_frame:0000000000005B39                 db    5
.eh_frame:0000000000005B3A                 db    0
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db  44h ; D
.eh_frame:0000000000005B3D                 db 0DDh
.eh_frame:0000000000005B3E                 db 0FFh
.eh_frame:0000000000005B3F                 db 0FFh
.eh_frame:0000000000005B40                 db  0Ah
.eh_frame:0000000000005B41                 db    0
.eh_frame:0000000000005B42                 db    0
.eh_frame:0000000000005B43                 db    0
.eh_frame:0000000000005B44                 db    0
.eh_frame:0000000000005B45                 db    0
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db  18h
.eh_frame:0000000000005B49                 db    0
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db 0ACh
.eh_frame:0000000000005B4D                 db    5
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  40h ; @
.eh_frame:0000000000005B51                 db 0DDh
.eh_frame:0000000000005B52                 db 0FFh
.eh_frame:0000000000005B53                 db 0FFh
.eh_frame:0000000000005B54                 db  8Eh
.eh_frame:0000000000005B55                 db    0
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db    0
.eh_frame:0000000000005B59                 db  44h ; D
.eh_frame:0000000000005B5A                 db  0Eh
.eh_frame:0000000000005B5B                 db  50h ; P
.eh_frame:0000000000005B5C                 db    2
.eh_frame:0000000000005B5D                 db  7Fh ; 
.eh_frame:0000000000005B5E                 db  0Ah
.eh_frame:0000000000005B5F                 db  0Eh
.eh_frame:0000000000005B60                 db    8
.eh_frame:0000000000005B61                 db  41h ; A
.eh_frame:0000000000005B62                 db  0Bh
.eh_frame:0000000000005B63                 db    0
.eh_frame:0000000000005B64                 db  18h
.eh_frame:0000000000005B65                 db    0
.eh_frame:0000000000005B66                 db    0
.eh_frame:0000000000005B67                 db    0
.eh_frame:0000000000005B68                 db 0C8h
.eh_frame:0000000000005B69                 db    5
.eh_frame:0000000000005B6A                 db    0
.eh_frame:0000000000005B6B                 db    0
.eh_frame:0000000000005B6C                 db 0B4h
.eh_frame:0000000000005B6D                 db 0DDh
.eh_frame:0000000000005B6E                 db 0FFh
.eh_frame:0000000000005B6F                 db 0FFh
.eh_frame:0000000000005B70                 db  91h
.eh_frame:0000000000005B71                 db    0
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db    0
.eh_frame:0000000000005B75                 db  44h ; D
.eh_frame:0000000000005B76                 db  0Eh
.eh_frame:0000000000005B77                 db  50h ; P
.eh_frame:0000000000005B78                 db    2
.eh_frame:0000000000005B79                 db  82h
.eh_frame:0000000000005B7A                 db  0Ah
.eh_frame:0000000000005B7B                 db  0Eh
.eh_frame:0000000000005B7C                 db    8
.eh_frame:0000000000005B7D                 db  41h ; A
.eh_frame:0000000000005B7E                 db  0Bh
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db  10h
.eh_frame:0000000000005B81                 db    0
.eh_frame:0000000000005B82                 db    0
.eh_frame:0000000000005B83                 db    0
.eh_frame:0000000000005B84                 db 0E4h
.eh_frame:0000000000005B85                 db    5
.eh_frame:0000000000005B86                 db    0
.eh_frame:0000000000005B87                 db    0
.eh_frame:0000000000005B88                 db  38h ; 8
.eh_frame:0000000000005B89                 db 0DEh
.eh_frame:0000000000005B8A                 db 0FFh
.eh_frame:0000000000005B8B                 db 0FFh
.eh_frame:0000000000005B8C                 db  0Ch
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db    0
.eh_frame:0000000000005B91                 db    0
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db  10h
.eh_frame:0000000000005B95                 db    0
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db 0F8h
.eh_frame:0000000000005B99                 db    5
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db  34h ; 4
.eh_frame:0000000000005B9D                 db 0DEh
.eh_frame:0000000000005B9E                 db 0FFh
.eh_frame:0000000000005B9F                 db 0FFh
.eh_frame:0000000000005BA0                 db  17h
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db    0
.eh_frame:0000000000005BA5                 db    0
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db  10h
.eh_frame:0000000000005BA9                 db    0
.eh_frame:0000000000005BAA                 db    0
.eh_frame:0000000000005BAB                 db    0
.eh_frame:0000000000005BAC                 db  0Ch
.eh_frame:0000000000005BAD                 db    6
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db  40h ; @
.eh_frame:0000000000005BB1                 db 0DEh
.eh_frame:0000000000005BB2                 db 0FFh
.eh_frame:0000000000005BB3                 db 0FFh
.eh_frame:0000000000005BB4                 db  13h
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db    0
.eh_frame:0000000000005BB9                 db    0
.eh_frame:0000000000005BBA                 db    0
.eh_frame:0000000000005BBB                 db    0
.eh_frame:0000000000005BBC                 db  10h
.eh_frame:0000000000005BBD                 db    0
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db  20h
.eh_frame:0000000000005BC1                 db    6
.eh_frame:0000000000005BC2                 db    0
.eh_frame:0000000000005BC3                 db    0
.eh_frame:0000000000005BC4                 db  4Ch ; L
.eh_frame:0000000000005BC5                 db 0DEh
.eh_frame:0000000000005BC6                 db 0FFh
.eh_frame:0000000000005BC7                 db 0FFh
.eh_frame:0000000000005BC8                 db  0Ch
.eh_frame:0000000000005BC9                 db    0
.eh_frame:0000000000005BCA                 db    0
.eh_frame:0000000000005BCB                 db    0
.eh_frame:0000000000005BCC                 db    0
.eh_frame:0000000000005BCD                 db    0
.eh_frame:0000000000005BCE                 db    0
.eh_frame:0000000000005BCF                 db    0
.eh_frame:0000000000005BD0                 db  10h
.eh_frame:0000000000005BD1                 db    0
.eh_frame:0000000000005BD2                 db    0
.eh_frame:0000000000005BD3                 db    0
.eh_frame:0000000000005BD4                 db  34h ; 4
.eh_frame:0000000000005BD5                 db    6
.eh_frame:0000000000005BD6                 db    0
.eh_frame:0000000000005BD7                 db    0
.eh_frame:0000000000005BD8                 db  48h ; H
.eh_frame:0000000000005BD9                 db 0DEh
.eh_frame:0000000000005BDA                 db 0FFh
.eh_frame:0000000000005BDB                 db 0FFh
.eh_frame:0000000000005BDC                 db  14h
.eh_frame:0000000000005BDD                 db    0
.eh_frame:0000000000005BDE                 db    0
.eh_frame:0000000000005BDF                 db    0
.eh_frame:0000000000005BE0                 db    0
.eh_frame:0000000000005BE1                 db    0
.eh_frame:0000000000005BE2                 db    0
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db  10h
.eh_frame:0000000000005BE5                 db    0
.eh_frame:0000000000005BE6                 db    0
.eh_frame:0000000000005BE7                 db    0
.eh_frame:0000000000005BE8                 db  48h ; H
.eh_frame:0000000000005BE9                 db    6
.eh_frame:0000000000005BEA                 db    0
.eh_frame:0000000000005BEB                 db    0
.eh_frame:0000000000005BEC                 db  54h ; T
.eh_frame:0000000000005BED                 db 0DEh
.eh_frame:0000000000005BEE                 db 0FFh
.eh_frame:0000000000005BEF                 db 0FFh
.eh_frame:0000000000005BF0                 db  13h
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db    0
.eh_frame:0000000000005BF5                 db    0
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db  14h
.eh_frame:0000000000005BF9                 db    0
.eh_frame:0000000000005BFA                 db    0
.eh_frame:0000000000005BFB                 db    0
.eh_frame:0000000000005BFC                 db  5Ch ; \
.eh_frame:0000000000005BFD                 db    6
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db  60h ; `
.eh_frame:0000000000005C01                 db 0DEh
.eh_frame:0000000000005C02                 db 0FFh
.eh_frame:0000000000005C03                 db 0FFh
.eh_frame:0000000000005C04                 db  18h
.eh_frame:0000000000005C05                 db    0
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db    0
.eh_frame:0000000000005C09                 db    0
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db    0
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db  10h
.eh_frame:0000000000005C11                 db    1
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db  74h ; t
.eh_frame:0000000000005C15                 db    6
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db  68h ; h
.eh_frame:0000000000005C19                 db 0DEh
.eh_frame:0000000000005C1A                 db 0FFh
.eh_frame:0000000000005C1B                 db 0FFh
.eh_frame:0000000000005C1C                 db  17h
.eh_frame:0000000000005C1D                 db    4
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db    0
.eh_frame:0000000000005C21                 db  42h ; B
.eh_frame:0000000000005C22                 db  0Eh
.eh_frame:0000000000005C23                 db  10h
.eh_frame:0000000000005C24                 db  8Fh
.eh_frame:0000000000005C25                 db    2
.eh_frame:0000000000005C26                 db  42h ; B
.eh_frame:0000000000005C27                 db  0Eh
.eh_frame:0000000000005C28                 db  18h
.eh_frame:0000000000005C29                 db  8Eh
.eh_frame:0000000000005C2A                 db    3
.eh_frame:0000000000005C2B                 db  42h ; B
.eh_frame:0000000000005C2C                 db  0Eh
.eh_frame:0000000000005C2D                 db  20h
.eh_frame:0000000000005C2E                 db  8Dh
.eh_frame:0000000000005C2F                 db    4
.eh_frame:0000000000005C30                 db  42h ; B
.eh_frame:0000000000005C31                 db  0Eh
.eh_frame:0000000000005C32                 db  28h ; (
.eh_frame:0000000000005C33                 db  8Ch
.eh_frame:0000000000005C34                 db    5
.eh_frame:0000000000005C35                 db  44h ; D
.eh_frame:0000000000005C36                 db  0Eh
.eh_frame:0000000000005C37                 db  30h ; 0
.eh_frame:0000000000005C38                 db  86h
.eh_frame:0000000000005C39                 db    6
.eh_frame:0000000000005C3A                 db  41h ; A
.eh_frame:0000000000005C3B                 db  0Eh
.eh_frame:0000000000005C3C                 db  38h ; 8
.eh_frame:0000000000005C3D                 db  83h
.eh_frame:0000000000005C3E                 db    7
.eh_frame:0000000000005C3F                 db  4Ah ; J
.eh_frame:0000000000005C40                 db  0Eh
.eh_frame:0000000000005C41                 db  60h ; `
.eh_frame:0000000000005C42                 db    2
.eh_frame:0000000000005C43                 db 0DDh
.eh_frame:0000000000005C44                 db  0Eh
.eh_frame:0000000000005C45                 db  68h ; h
.eh_frame:0000000000005C46                 db  57h ; W
.eh_frame:0000000000005C47                 db  0Eh
.eh_frame:0000000000005C48                 db  70h ; p
.eh_frame:0000000000005C49                 db  42h ; B
.eh_frame:0000000000005C4A                 db  0Eh
.eh_frame:0000000000005C4B                 db  78h ; x
.eh_frame:0000000000005C4C                 db  42h ; B
.eh_frame:0000000000005C4D                 db  0Eh
.eh_frame:0000000000005C4E                 db  80h
.eh_frame:0000000000005C4F                 db    1
.eh_frame:0000000000005C50                 db  42h ; B
.eh_frame:0000000000005C51                 db  0Eh
.eh_frame:0000000000005C52                 db  88h
.eh_frame:0000000000005C53                 db    1
.eh_frame:0000000000005C54                 db  42h ; B
.eh_frame:0000000000005C55                 db  0Eh
.eh_frame:0000000000005C56                 db  90h
.eh_frame:0000000000005C57                 db    1
.eh_frame:0000000000005C58                 db  53h ; S
.eh_frame:0000000000005C59                 db  0Eh
.eh_frame:0000000000005C5A                 db  60h ; `
.eh_frame:0000000000005C5B                 db  44h ; D
.eh_frame:0000000000005C5C                 db  0Ah
.eh_frame:0000000000005C5D                 db  0Eh
.eh_frame:0000000000005C5E                 db  38h ; 8
.eh_frame:0000000000005C5F                 db  41h ; A
.eh_frame:0000000000005C60                 db  0Eh
.eh_frame:0000000000005C61                 db  30h ; 0
.eh_frame:0000000000005C62                 db  41h ; A
.eh_frame:0000000000005C63                 db  0Eh
.eh_frame:0000000000005C64                 db  28h ; (
.eh_frame:0000000000005C65                 db  42h ; B
.eh_frame:0000000000005C66                 db  0Eh
.eh_frame:0000000000005C67                 db  20h
.eh_frame:0000000000005C68                 db  42h ; B
.eh_frame:0000000000005C69                 db  0Eh
.eh_frame:0000000000005C6A                 db  18h
.eh_frame:0000000000005C6B                 db  42h ; B
.eh_frame:0000000000005C6C                 db  0Eh
.eh_frame:0000000000005C6D                 db  10h
.eh_frame:0000000000005C6E                 db  42h ; B
.eh_frame:0000000000005C6F                 db  0Eh
.eh_frame:0000000000005C70                 db    8
.eh_frame:0000000000005C71                 db  44h ; D
.eh_frame:0000000000005C72                 db  0Bh
.eh_frame:0000000000005C73                 db    2
.eh_frame:0000000000005C74                 db  78h ; x
.eh_frame:0000000000005C75                 db  0Ah
.eh_frame:0000000000005C76                 db  0Eh
.eh_frame:0000000000005C77                 db  68h ; h
.eh_frame:0000000000005C78                 db  48h ; H
.eh_frame:0000000000005C79                 db  0Bh
.eh_frame:0000000000005C7A                 db  5Ah ; Z
.eh_frame:0000000000005C7B                 db  0Ah
.eh_frame:0000000000005C7C                 db  0Eh
.eh_frame:0000000000005C7D                 db  38h ; 8
.eh_frame:0000000000005C7E                 db  47h ; G
.eh_frame:0000000000005C7F                 db  0Eh
.eh_frame:0000000000005C80                 db  30h ; 0
.eh_frame:0000000000005C81                 db  41h ; A
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  28h ; (
.eh_frame:0000000000005C84                 db  42h ; B
.eh_frame:0000000000005C85                 db  0Eh
.eh_frame:0000000000005C86                 db  20h
.eh_frame:0000000000005C87                 db  42h ; B
.eh_frame:0000000000005C88                 db  0Eh
.eh_frame:0000000000005C89                 db  18h
.eh_frame:0000000000005C8A                 db  42h ; B
.eh_frame:0000000000005C8B                 db  0Eh
.eh_frame:0000000000005C8C                 db  10h
.eh_frame:0000000000005C8D                 db  42h ; B
.eh_frame:0000000000005C8E                 db  0Eh
.eh_frame:0000000000005C8F                 db    8
.eh_frame:0000000000005C90                 db  56h ; V
.eh_frame:0000000000005C91                 db  0Bh
.eh_frame:0000000000005C92                 db  5Eh ; ^
.eh_frame:0000000000005C93                 db  0Ah
.eh_frame:0000000000005C94                 db  0Eh
.eh_frame:0000000000005C95                 db  38h ; 8
.eh_frame:0000000000005C96                 db  52h ; R
.eh_frame:0000000000005C97                 db  0Eh
.eh_frame:0000000000005C98                 db  30h ; 0
.eh_frame:0000000000005C99                 db  41h ; A
.eh_frame:0000000000005C9A                 db  0Eh
.eh_frame:0000000000005C9B                 db  28h ; (
.eh_frame:0000000000005C9C                 db  42h ; B
.eh_frame:0000000000005C9D                 db  0Eh
.eh_frame:0000000000005C9E                 db  20h
.eh_frame:0000000000005C9F                 db  42h ; B
.eh_frame:0000000000005CA0                 db  0Eh
.eh_frame:0000000000005CA1                 db  18h
.eh_frame:0000000000005CA2                 db  42h ; B
.eh_frame:0000000000005CA3                 db  0Eh
.eh_frame:0000000000005CA4                 db  10h
.eh_frame:0000000000005CA5                 db  42h ; B
.eh_frame:0000000000005CA6                 db  0Eh
.eh_frame:0000000000005CA7                 db    8
.eh_frame:0000000000005CA8                 db  4Fh ; O
.eh_frame:0000000000005CA9                 db  0Bh
.eh_frame:0000000000005CAA                 db  62h ; b
.eh_frame:0000000000005CAB                 db  0Ah
.eh_frame:0000000000005CAC                 db  0Eh
.eh_frame:0000000000005CAD                 db  38h ; 8
.eh_frame:0000000000005CAE                 db  50h ; P
.eh_frame:0000000000005CAF                 db  0Eh
.eh_frame:0000000000005CB0                 db  30h ; 0
.eh_frame:0000000000005CB1                 db  41h ; A
.eh_frame:0000000000005CB2                 db  0Eh
.eh_frame:0000000000005CB3                 db  28h ; (
.eh_frame:0000000000005CB4                 db  42h ; B
.eh_frame:0000000000005CB5                 db  0Eh
.eh_frame:0000000000005CB6                 db  20h
.eh_frame:0000000000005CB7                 db  42h ; B
.eh_frame:0000000000005CB8                 db  0Eh
.eh_frame:0000000000005CB9                 db  18h
.eh_frame:0000000000005CBA                 db  42h ; B
.eh_frame:0000000000005CBB                 db  0Eh
.eh_frame:0000000000005CBC                 db  10h
.eh_frame:0000000000005CBD                 db  42h ; B
.eh_frame:0000000000005CBE                 db  0Eh
.eh_frame:0000000000005CBF                 db    8
.eh_frame:0000000000005CC0                 db  55h ; U
.eh_frame:0000000000005CC1                 db  0Bh
.eh_frame:0000000000005CC2                 db  66h ; f
.eh_frame:0000000000005CC3                 db  0Eh
.eh_frame:0000000000005CC4                 db  68h ; h
.eh_frame:0000000000005CC5                 db  42h ; B
.eh_frame:0000000000005CC6                 db  0Eh
.eh_frame:0000000000005CC7                 db  70h ; p
.eh_frame:0000000000005CC8                 db  5Ch ; \
.eh_frame:0000000000005CC9                 db  0Eh
.eh_frame:0000000000005CCA                 db  68h ; h
.eh_frame:0000000000005CCB                 db  41h ; A
.eh_frame:0000000000005CCC                 db  0Eh
.eh_frame:0000000000005CCD                 db  60h ; `
.eh_frame:0000000000005CCE                 db  44h ; D
.eh_frame:0000000000005CCF                 db  0Ah
.eh_frame:0000000000005CD0                 db  0Eh
.eh_frame:0000000000005CD1                 db  38h ; 8
.eh_frame:0000000000005CD2                 db  41h ; A
.eh_frame:0000000000005CD3                 db  0Eh
.eh_frame:0000000000005CD4                 db  30h ; 0
.eh_frame:0000000000005CD5                 db  41h ; A
.eh_frame:0000000000005CD6                 db  0Eh
.eh_frame:0000000000005CD7                 db  28h ; (
.eh_frame:0000000000005CD8                 db  42h ; B
.eh_frame:0000000000005CD9                 db  0Eh
.eh_frame:0000000000005CDA                 db  20h
.eh_frame:0000000000005CDB                 db  42h ; B
.eh_frame:0000000000005CDC                 db  0Eh
.eh_frame:0000000000005CDD                 db  18h
.eh_frame:0000000000005CDE                 db  42h ; B
.eh_frame:0000000000005CDF                 db  0Eh
.eh_frame:0000000000005CE0                 db  10h
.eh_frame:0000000000005CE1                 db  42h ; B
.eh_frame:0000000000005CE2                 db  0Eh
.eh_frame:0000000000005CE3                 db    8
.eh_frame:0000000000005CE4                 db  45h ; E
.eh_frame:0000000000005CE5                 db  0Bh
.eh_frame:0000000000005CE6                 db  68h ; h
.eh_frame:0000000000005CE7                 db  0Ah
.eh_frame:0000000000005CE8                 db  0Eh
.eh_frame:0000000000005CE9                 db  68h ; h
.eh_frame:0000000000005CEA                 db  48h ; H
.eh_frame:0000000000005CEB                 db  0Bh
.eh_frame:0000000000005CEC                 db  72h ; r
.eh_frame:0000000000005CED                 db  0Eh
.eh_frame:0000000000005CEE                 db  68h ; h
.eh_frame:0000000000005CEF                 db  45h ; E
.eh_frame:0000000000005CF0                 db  0Eh
.eh_frame:0000000000005CF1                 db  70h ; p
.eh_frame:0000000000005CF2                 db  42h ; B
.eh_frame:0000000000005CF3                 db  0Eh
.eh_frame:0000000000005CF4                 db  78h ; x
.eh_frame:0000000000005CF5                 db  42h ; B
.eh_frame:0000000000005CF6                 db  0Eh
.eh_frame:0000000000005CF7                 db  80h
.eh_frame:0000000000005CF8                 db    1
.eh_frame:0000000000005CF9                 db  5Eh ; ^
.eh_frame:0000000000005CFA                 db  0Eh
.eh_frame:0000000000005CFB                 db  60h ; `
.eh_frame:0000000000005CFC                 db  44h ; D
.eh_frame:0000000000005CFD                 db  0Ah
.eh_frame:0000000000005CFE                 db  0Eh
.eh_frame:0000000000005CFF                 db  38h ; 8
.eh_frame:0000000000005D00                 db  41h ; A
.eh_frame:0000000000005D01                 db  0Eh
.eh_frame:0000000000005D02                 db  30h ; 0
.eh_frame:0000000000005D03                 db  41h ; A
.eh_frame:0000000000005D04                 db  0Eh
.eh_frame:0000000000005D05                 db  28h ; (
.eh_frame:0000000000005D06                 db  42h ; B
.eh_frame:0000000000005D07                 db  0Eh
.eh_frame:0000000000005D08                 db  20h
.eh_frame:0000000000005D09                 db  42h ; B
.eh_frame:0000000000005D0A                 db  0Eh
.eh_frame:0000000000005D0B                 db  18h
.eh_frame:0000000000005D0C                 db  42h ; B
.eh_frame:0000000000005D0D                 db  0Eh
.eh_frame:0000000000005D0E                 db  10h
.eh_frame:0000000000005D0F                 db  42h ; B
.eh_frame:0000000000005D10                 db  0Eh
.eh_frame:0000000000005D11                 db    8
.eh_frame:0000000000005D12                 db  41h ; A
.eh_frame:0000000000005D13                 db  0Bh
.eh_frame:0000000000005D14                 db  79h ; y
.eh_frame:0000000000005D15                 db  0Ah
.eh_frame:0000000000005D16                 db  0Eh
.eh_frame:0000000000005D17                 db  68h ; h
.eh_frame:0000000000005D18                 db  42h ; B
.eh_frame:0000000000005D19                 db  0Eh
.eh_frame:0000000000005D1A                 db  70h ; p
.eh_frame:0000000000005D1B                 db  42h ; B
.eh_frame:0000000000005D1C                 db  0Eh
.eh_frame:0000000000005D1D                 db  78h ; x
.eh_frame:0000000000005D1E                 db  42h ; B
.eh_frame:0000000000005D1F                 db  0Eh
.eh_frame:0000000000005D20                 db  80h
.eh_frame:0000000000005D21                 db    1
.eh_frame:0000000000005D22                 db  51h ; Q
.eh_frame:0000000000005D23                 db  0Bh
.eh_frame:0000000000005D24                 db  10h
.eh_frame:0000000000005D25                 db    0
.eh_frame:0000000000005D26                 db    0
.eh_frame:0000000000005D27                 db    0
.eh_frame:0000000000005D28                 db  88h
.eh_frame:0000000000005D29                 db    7
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db  74h ; t
.eh_frame:0000000000005D2D                 db 0E1h
.eh_frame:0000000000005D2E                 db 0FFh
.eh_frame:0000000000005D2F                 db 0FFh
.eh_frame:0000000000005D30                 db  20h
.eh_frame:0000000000005D31                 db    0
.eh_frame:0000000000005D32                 db    0
.eh_frame:0000000000005D33                 db    0
.eh_frame:0000000000005D34                 db    0
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db  18h
.eh_frame:0000000000005D39                 db    0
.eh_frame:0000000000005D3A                 db    0
.eh_frame:0000000000005D3B                 db    0
.eh_frame:0000000000005D3C                 db  9Ch
.eh_frame:0000000000005D3D                 db    7
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db  80h
.eh_frame:0000000000005D41                 db 0E1h
.eh_frame:0000000000005D42                 db 0FFh
.eh_frame:0000000000005D43                 db 0FFh
.eh_frame:0000000000005D44                 db  78h ; x
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db    0
.eh_frame:0000000000005D49                 db  44h ; D
.eh_frame:0000000000005D4A                 db  0Eh
.eh_frame:0000000000005D4B                 db  70h ; p
.eh_frame:0000000000005D4C                 db    2
.eh_frame:0000000000005D4D                 db  60h ; `
.eh_frame:0000000000005D4E                 db  0Ah
.eh_frame:0000000000005D4F                 db  0Eh
.eh_frame:0000000000005D50                 db    8
.eh_frame:0000000000005D51                 db  41h ; A
.eh_frame:0000000000005D52                 db  0Bh
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db  28h ; (
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db 0B8h
.eh_frame:0000000000005D59                 db    7
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db 0E4h
.eh_frame:0000000000005D5D                 db 0E1h
.eh_frame:0000000000005D5E                 db 0FFh
.eh_frame:0000000000005D5F                 db 0FFh
.eh_frame:0000000000005D60                 db 0D5h
.eh_frame:0000000000005D61                 db    0
.eh_frame:0000000000005D62                 db    0
.eh_frame:0000000000005D63                 db    0
.eh_frame:0000000000005D64                 db    0
.eh_frame:0000000000005D65                 db  41h ; A
.eh_frame:0000000000005D66                 db  0Eh
.eh_frame:0000000000005D67                 db  10h
.eh_frame:0000000000005D68                 db  86h
.eh_frame:0000000000005D69                 db    2
.eh_frame:0000000000005D6A                 db  41h ; A
.eh_frame:0000000000005D6B                 db  0Eh
.eh_frame:0000000000005D6C                 db  18h
.eh_frame:0000000000005D6D                 db  83h
.eh_frame:0000000000005D6E                 db    3
.eh_frame:0000000000005D6F                 db  50h ; P
.eh_frame:0000000000005D70                 db  0Eh
.eh_frame:0000000000005D71                 db 0D0h
.eh_frame:0000000000005D72                 db    1
.eh_frame:0000000000005D73                 db    2
.eh_frame:0000000000005D74                 db 0ABh
.eh_frame:0000000000005D75                 db  0Ah
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db  18h
.eh_frame:0000000000005D78                 db  41h ; A
.eh_frame:0000000000005D79                 db  0Eh
.eh_frame:0000000000005D7A                 db  10h
.eh_frame:0000000000005D7B                 db  41h ; A
.eh_frame:0000000000005D7C                 db  0Eh
.eh_frame:0000000000005D7D                 db    8
.eh_frame:0000000000005D7E                 db  41h ; A
.eh_frame:0000000000005D7F                 db  0Bh
.eh_frame:0000000000005D80                 db  1Ch
.eh_frame:0000000000005D81                 db    0
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db 0E4h
.eh_frame:0000000000005D85                 db    7
.eh_frame:0000000000005D86                 db    0
.eh_frame:0000000000005D87                 db    0
.eh_frame:0000000000005D88                 db  98h
.eh_frame:0000000000005D89                 db 0E2h
.eh_frame:0000000000005D8A                 db 0FFh
.eh_frame:0000000000005D8B                 db 0FFh
.eh_frame:0000000000005D8C                 db  80h
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db    0
.eh_frame:0000000000005D91                 db  41h ; A
.eh_frame:0000000000005D92                 db  0Eh
.eh_frame:0000000000005D93                 db  10h
.eh_frame:0000000000005D94                 db  83h
.eh_frame:0000000000005D95                 db    2
.eh_frame:0000000000005D96                 db    2
.eh_frame:0000000000005D97                 db  7Ah ; z
.eh_frame:0000000000005D98                 db  0Eh
.eh_frame:0000000000005D99                 db    8
.eh_frame:0000000000005D9A                 db    0
.eh_frame:0000000000005D9B                 db    0
.eh_frame:0000000000005D9C                 db    0
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db  18h
.eh_frame:0000000000005DA1                 db    0
.eh_frame:0000000000005DA2                 db    0
.eh_frame:0000000000005DA3                 db    0
.eh_frame:0000000000005DA4                 db    4
.eh_frame:0000000000005DA5                 db    8
.eh_frame:0000000000005DA6                 db    0
.eh_frame:0000000000005DA7                 db    0
.eh_frame:0000000000005DA8                 db 0F8h
.eh_frame:0000000000005DA9                 db 0E2h
.eh_frame:0000000000005DAA                 db 0FFh
.eh_frame:0000000000005DAB                 db 0FFh
.eh_frame:0000000000005DAC                 db  1Ah
.eh_frame:0000000000005DAD                 db    0
.eh_frame:0000000000005DAE                 db    0
.eh_frame:0000000000005DAF                 db    0
.eh_frame:0000000000005DB0                 db    0
.eh_frame:0000000000005DB1                 db  41h ; A
.eh_frame:0000000000005DB2                 db  0Eh
.eh_frame:0000000000005DB3                 db  10h
.eh_frame:0000000000005DB4                 db  83h
.eh_frame:0000000000005DB5                 db    2
.eh_frame:0000000000005DB6                 db  53h ; S
.eh_frame:0000000000005DB7                 db  0Ah
.eh_frame:0000000000005DB8                 db  0Eh
.eh_frame:0000000000005DB9                 db    8
.eh_frame:0000000000005DBA                 db  41h ; A
.eh_frame:0000000000005DBB                 db  0Bh
.eh_frame:0000000000005DBC                 db  10h
.eh_frame:0000000000005DBD                 db    0
.eh_frame:0000000000005DBE                 db    0
.eh_frame:0000000000005DBF                 db    0
.eh_frame:0000000000005DC0                 db  20h
.eh_frame:0000000000005DC1                 db    8
.eh_frame:0000000000005DC2                 db    0
.eh_frame:0000000000005DC3                 db    0
.eh_frame:0000000000005DC4                 db 0FCh
.eh_frame:0000000000005DC5                 db 0E2h
.eh_frame:0000000000005DC6                 db 0FFh
.eh_frame:0000000000005DC7                 db 0FFh
.eh_frame:0000000000005DC8                 db  24h ; $
.eh_frame:0000000000005DC9                 db    0
.eh_frame:0000000000005DCA                 db    0
.eh_frame:0000000000005DCB                 db    0
.eh_frame:0000000000005DCC                 db    0
.eh_frame:0000000000005DCD                 db  5Fh ; _
.eh_frame:0000000000005DCE                 db  0Eh
.eh_frame:0000000000005DCF                 db  10h
.eh_frame:0000000000005DD0                 db  10h
.eh_frame:0000000000005DD1                 db    0
.eh_frame:0000000000005DD2                 db    0
.eh_frame:0000000000005DD3                 db    0
.eh_frame:0000000000005DD4                 db  34h ; 4
.eh_frame:0000000000005DD5                 db    8
.eh_frame:0000000000005DD6                 db    0
.eh_frame:0000000000005DD7                 db    0
.eh_frame:0000000000005DD8                 db  18h
.eh_frame:0000000000005DD9                 db 0E3h
.eh_frame:0000000000005DDA                 db 0FFh
.eh_frame:0000000000005DDB                 db 0FFh
.eh_frame:0000000000005DDC                 db    2
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db    0
.eh_frame:0000000000005DE1                 db    0
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db  20h
.eh_frame:0000000000005DE5                 db    0
.eh_frame:0000000000005DE6                 db    0
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db  48h ; H
.eh_frame:0000000000005DE9                 db    8
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db  14h
.eh_frame:0000000000005DED                 db 0E3h
.eh_frame:0000000000005DEE                 db 0FFh
.eh_frame:0000000000005DEF                 db 0FFh
.eh_frame:0000000000005DF0                 db  36h ; 6
.eh_frame:0000000000005DF1                 db    0
.eh_frame:0000000000005DF2                 db    0
.eh_frame:0000000000005DF3                 db    0
.eh_frame:0000000000005DF4                 db    0
.eh_frame:0000000000005DF5                 db  44h ; D
.eh_frame:0000000000005DF6                 db  0Eh
.eh_frame:0000000000005DF7                 db  10h
.eh_frame:0000000000005DF8                 db  83h
.eh_frame:0000000000005DF9                 db    2
.eh_frame:0000000000005DFA                 db  5Dh ; ]
.eh_frame:0000000000005DFB                 db  0Ah
.eh_frame:0000000000005DFC                 db  0Eh
.eh_frame:0000000000005DFD                 db    8
.eh_frame:0000000000005DFE                 db  47h ; G
.eh_frame:0000000000005DFF                 db  0Bh
.eh_frame:0000000000005E00                 db  48h ; H
.eh_frame:0000000000005E01                 db  0Ah
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db    8
.eh_frame:0000000000005E04                 db  41h ; A
.eh_frame:0000000000005E05                 db  0Bh
.eh_frame:0000000000005E06                 db    0
.eh_frame:0000000000005E07                 db    0
.eh_frame:0000000000005E08                 db  10h
.eh_frame:0000000000005E09                 db    0
.eh_frame:0000000000005E0A                 db    0
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db  6Ch ; l
.eh_frame:0000000000005E0D                 db    8
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db  30h ; 0
.eh_frame:0000000000005E11                 db 0E3h
.eh_frame:0000000000005E12                 db 0FFh
.eh_frame:0000000000005E13                 db 0FFh
.eh_frame:0000000000005E14                 db  24h ; $
.eh_frame:0000000000005E15                 db    0
.eh_frame:0000000000005E16                 db    0
.eh_frame:0000000000005E17                 db    0
.eh_frame:0000000000005E18                 db    0
.eh_frame:0000000000005E19                 db  5Fh ; _
.eh_frame:0000000000005E1A                 db  0Eh
.eh_frame:0000000000005E1B                 db  10h
.eh_frame:0000000000005E1C                 db  14h
.eh_frame:0000000000005E1D                 db    0
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db  80h
.eh_frame:0000000000005E21                 db    8
.eh_frame:0000000000005E22                 db    0
.eh_frame:0000000000005E23                 db    0
.eh_frame:0000000000005E24                 db  4Ch ; L
.eh_frame:0000000000005E25                 db 0E3h
.eh_frame:0000000000005E26                 db 0FFh
.eh_frame:0000000000005E27                 db 0FFh
.eh_frame:0000000000005E28                 db  82h
.eh_frame:0000000000005E29                 db    0
.eh_frame:0000000000005E2A                 db    0
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db    0
.eh_frame:0000000000005E2D                 db    2
.eh_frame:0000000000005E2E                 db  5Fh ; _
.eh_frame:0000000000005E2F                 db  0Eh
.eh_frame:0000000000005E30                 db  10h
.eh_frame:0000000000005E31                 db  49h ; I
.eh_frame:0000000000005E32                 db  0Eh
.eh_frame:0000000000005E33                 db    8
.eh_frame:0000000000005E34                 db  14h
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db  98h
.eh_frame:0000000000005E39                 db    8
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db 0C4h
.eh_frame:0000000000005E3D                 db 0E3h
.eh_frame:0000000000005E3E                 db 0FFh
.eh_frame:0000000000005E3F                 db 0FFh
.eh_frame:0000000000005E40                 db  4Ah ; J
.eh_frame:0000000000005E41                 db    0
.eh_frame:0000000000005E42                 db    0
.eh_frame:0000000000005E43                 db    0
.eh_frame:0000000000005E44                 db    0
.eh_frame:0000000000005E45                 db    2
.eh_frame:0000000000005E46                 db  45h ; E
.eh_frame:0000000000005E47                 db  0Eh
.eh_frame:0000000000005E48                 db  10h
.eh_frame:0000000000005E49                 db    0
.eh_frame:0000000000005E4A                 db    0
.eh_frame:0000000000005E4B                 db    0
.eh_frame:0000000000005E4C                 db  18h
.eh_frame:0000000000005E4D                 db    0
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db 0B0h
.eh_frame:0000000000005E51                 db    8
.eh_frame:0000000000005E52                 db    0
.eh_frame:0000000000005E53                 db    0
.eh_frame:0000000000005E54                 db 0FCh
.eh_frame:0000000000005E55                 db 0E3h
.eh_frame:0000000000005E56                 db 0FFh
.eh_frame:0000000000005E57                 db 0FFh
.eh_frame:0000000000005E58                 db  17h
.eh_frame:0000000000005E59                 db    0
.eh_frame:0000000000005E5A                 db    0
.eh_frame:0000000000005E5B                 db    0
.eh_frame:0000000000005E5C                 db    0
.eh_frame:0000000000005E5D                 db  41h ; A
.eh_frame:0000000000005E5E                 db  0Eh
.eh_frame:0000000000005E5F                 db  10h
.eh_frame:0000000000005E60                 db  83h
.eh_frame:0000000000005E61                 db    2
.eh_frame:0000000000005E62                 db  51h ; Q
.eh_frame:0000000000005E63                 db  0Eh
.eh_frame:0000000000005E64                 db    8
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db  18h
.eh_frame:0000000000005E69                 db    0
.eh_frame:0000000000005E6A                 db    0
.eh_frame:0000000000005E6B                 db    0
.eh_frame:0000000000005E6C                 db 0CCh
.eh_frame:0000000000005E6D                 db    8
.eh_frame:0000000000005E6E                 db    0
.eh_frame:0000000000005E6F                 db    0
.eh_frame:0000000000005E70                 db    0
.eh_frame:0000000000005E71                 db 0E4h
.eh_frame:0000000000005E72                 db 0FFh
.eh_frame:0000000000005E73                 db 0FFh
.eh_frame:0000000000005E74                 db  2Eh ; .
.eh_frame:0000000000005E75                 db    0
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db    0
.eh_frame:0000000000005E79                 db  47h ; G
.eh_frame:0000000000005E7A                 db  0Eh
.eh_frame:0000000000005E7B                 db  10h
.eh_frame:0000000000005E7C                 db  61h ; a
.eh_frame:0000000000005E7D                 db  0Ah
.eh_frame:0000000000005E7E                 db  0Eh
.eh_frame:0000000000005E7F                 db    8
.eh_frame:0000000000005E80                 db  41h ; A
.eh_frame:0000000000005E81                 db  0Bh
.eh_frame:0000000000005E82                 db    0
.eh_frame:0000000000005E83                 db    0
.eh_frame:0000000000005E84                 db  24h ; $
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db 0E8h
.eh_frame:0000000000005E89                 db    8
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  14h
.eh_frame:0000000000005E8D                 db 0E4h
.eh_frame:0000000000005E8E                 db 0FFh
.eh_frame:0000000000005E8F                 db 0FFh
.eh_frame:0000000000005E90                 db  28h ; (
.eh_frame:0000000000005E91                 db    0
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db    0
.eh_frame:0000000000005E95                 db  41h ; A
.eh_frame:0000000000005E96                 db  0Eh
.eh_frame:0000000000005E97                 db  10h
.eh_frame:0000000000005E98                 db  86h
.eh_frame:0000000000005E99                 db    2
.eh_frame:0000000000005E9A                 db  41h ; A
.eh_frame:0000000000005E9B                 db  0Eh
.eh_frame:0000000000005E9C                 db  18h
.eh_frame:0000000000005E9D                 db  83h
.eh_frame:0000000000005E9E                 db    3
.eh_frame:0000000000005E9F                 db  4Dh ; M
.eh_frame:0000000000005EA0                 db  0Eh
.eh_frame:0000000000005EA1                 db  20h
.eh_frame:0000000000005EA2                 db  49h ; I
.eh_frame:0000000000005EA3                 db  0Eh
.eh_frame:0000000000005EA4                 db  18h
.eh_frame:0000000000005EA5                 db  47h ; G
.eh_frame:0000000000005EA6                 db  0Eh
.eh_frame:0000000000005EA7                 db  10h
.eh_frame:0000000000005EA8                 db  41h ; A
.eh_frame:0000000000005EA9                 db  0Eh
.eh_frame:0000000000005EAA                 db    8
.eh_frame:0000000000005EAB                 db    0
.eh_frame:0000000000005EAC                 db  18h
.eh_frame:0000000000005EAD                 db    0
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db  10h
.eh_frame:0000000000005EB1                 db    9
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db  1Ch
.eh_frame:0000000000005EB5                 db 0E4h
.eh_frame:0000000000005EB6                 db 0FFh
.eh_frame:0000000000005EB7                 db 0FFh
.eh_frame:0000000000005EB8                 db  13h
.eh_frame:0000000000005EB9                 db    0
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db    0
.eh_frame:0000000000005EBD                 db  41h ; A
.eh_frame:0000000000005EBE                 db  0Eh
.eh_frame:0000000000005EBF                 db  10h
.eh_frame:0000000000005EC0                 db  83h
.eh_frame:0000000000005EC1                 db    2
.eh_frame:0000000000005EC2                 db  50h ; P
.eh_frame:0000000000005EC3                 db  0Eh
.eh_frame:0000000000005EC4                 db    8
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db  14h
.eh_frame:0000000000005EC9                 db    0
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  2Ch ; ,
.eh_frame:0000000000005ECD                 db    9
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db  20h
.eh_frame:0000000000005ED1                 db 0E4h
.eh_frame:0000000000005ED2                 db 0FFh
.eh_frame:0000000000005ED3                 db 0FFh
.eh_frame:0000000000005ED4                 db  35h ; 5
.eh_frame:0000000000005ED5                 db    0
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db    0
.eh_frame:0000000000005ED9                 db  4Bh ; K
.eh_frame:0000000000005EDA                 db  0Eh
.eh_frame:0000000000005EDB                 db  10h
.eh_frame:0000000000005EDC                 db    0
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db  3Ch ; <
.eh_frame:0000000000005EE1                 db    0
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db  44h ; D
.eh_frame:0000000000005EE5                 db    9
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db  48h ; H
.eh_frame:0000000000005EE9                 db 0E4h
.eh_frame:0000000000005EEA                 db 0FFh
.eh_frame:0000000000005EEB                 db 0FFh
.eh_frame:0000000000005EEC                 db  83h
.eh_frame:0000000000005EED                 db    0
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db    0
.eh_frame:0000000000005EF1                 db  42h ; B
.eh_frame:0000000000005EF2                 db  0Eh
.eh_frame:0000000000005EF3                 db  10h
.eh_frame:0000000000005EF4                 db  8Dh
.eh_frame:0000000000005EF5                 db    2
.eh_frame:0000000000005EF6                 db  42h ; B
.eh_frame:0000000000005EF7                 db  0Eh
.eh_frame:0000000000005EF8                 db  18h
.eh_frame:0000000000005EF9                 db  8Ch
.eh_frame:0000000000005EFA                 db    3
.eh_frame:0000000000005EFB                 db  44h ; D
.eh_frame:0000000000005EFC                 db  0Eh
.eh_frame:0000000000005EFD                 db  20h
.eh_frame:0000000000005EFE                 db  86h
.eh_frame:0000000000005EFF                 db    4
.eh_frame:0000000000005F00                 db  41h ; A
.eh_frame:0000000000005F01                 db  0Eh
.eh_frame:0000000000005F02                 db  28h ; (
.eh_frame:0000000000005F03                 db  83h
.eh_frame:0000000000005F04                 db    5
.eh_frame:0000000000005F05                 db  4Ah ; J
.eh_frame:0000000000005F06                 db  0Eh
.eh_frame:0000000000005F07                 db  40h ; @
.eh_frame:0000000000005F08                 db    2
.eh_frame:0000000000005F09                 db  64h ; d
.eh_frame:0000000000005F0A                 db  0Ah
.eh_frame:0000000000005F0B                 db  0Eh
.eh_frame:0000000000005F0C                 db  28h ; (
.eh_frame:0000000000005F0D                 db  41h ; A
.eh_frame:0000000000005F0E                 db  0Eh
.eh_frame:0000000000005F0F                 db  20h
.eh_frame:0000000000005F10                 db  41h ; A
.eh_frame:0000000000005F11                 db  0Eh
.eh_frame:0000000000005F12                 db  18h
.eh_frame:0000000000005F13                 db  42h ; B
.eh_frame:0000000000005F14                 db  0Eh
.eh_frame:0000000000005F15                 db  10h
.eh_frame:0000000000005F16                 db  42h ; B
.eh_frame:0000000000005F17                 db  0Eh
.eh_frame:0000000000005F18                 db    8
.eh_frame:0000000000005F19                 db  41h ; A
.eh_frame:0000000000005F1A                 db  0Bh
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db    0
.eh_frame:0000000000005F1D                 db    0
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db  4Ch ; L
.eh_frame:0000000000005F21                 db    0
.eh_frame:0000000000005F22                 db    0
.eh_frame:0000000000005F23                 db    0
.eh_frame:0000000000005F24                 db  84h
.eh_frame:0000000000005F25                 db    9
.eh_frame:0000000000005F26                 db    0
.eh_frame:0000000000005F27                 db    0
.eh_frame:0000000000005F28                 db  98h
.eh_frame:0000000000005F29                 db 0E4h
.eh_frame:0000000000005F2A                 db 0FFh
.eh_frame:0000000000005F2B                 db 0FFh
.eh_frame:0000000000005F2C                 db  7Dh ; }
.eh_frame:0000000000005F2D                 db    0
.eh_frame:0000000000005F2E                 db    0
.eh_frame:0000000000005F2F                 db    0
.eh_frame:0000000000005F30                 db    0
.eh_frame:0000000000005F31                 db  42h ; B
.eh_frame:0000000000005F32                 db  0Eh
.eh_frame:0000000000005F33                 db  10h
.eh_frame:0000000000005F34                 db  8Ch
.eh_frame:0000000000005F35                 db    2
.eh_frame:0000000000005F36                 db  41h ; A
.eh_frame:0000000000005F37                 db  0Eh
.eh_frame:0000000000005F38                 db  18h
.eh_frame:0000000000005F39                 db  86h
.eh_frame:0000000000005F3A                 db    3
.eh_frame:0000000000005F3B                 db  44h ; D
.eh_frame:0000000000005F3C                 db  0Eh
.eh_frame:0000000000005F3D                 db  20h
.eh_frame:0000000000005F3E                 db  83h
.eh_frame:0000000000005F3F                 db    4
.eh_frame:0000000000005F40                 db  69h ; i
.eh_frame:0000000000005F41                 db  0Ah
.eh_frame:0000000000005F42                 db  0Eh
.eh_frame:0000000000005F43                 db  18h
.eh_frame:0000000000005F44                 db  41h ; A
.eh_frame:0000000000005F45                 db  0Eh
.eh_frame:0000000000005F46                 db  10h
.eh_frame:0000000000005F47                 db  42h ; B
.eh_frame:0000000000005F48                 db  0Eh
.eh_frame:0000000000005F49                 db    8
.eh_frame:0000000000005F4A                 db  45h ; E
.eh_frame:0000000000005F4B                 db  0Bh
.eh_frame:0000000000005F4C                 db  55h ; U
.eh_frame:0000000000005F4D                 db  0Ah
.eh_frame:0000000000005F4E                 db  0Eh
.eh_frame:0000000000005F4F                 db  18h
.eh_frame:0000000000005F50                 db  41h ; A
.eh_frame:0000000000005F51                 db  0Eh
.eh_frame:0000000000005F52                 db  10h
.eh_frame:0000000000005F53                 db  42h ; B
.eh_frame:0000000000005F54                 db  0Eh
.eh_frame:0000000000005F55                 db    8
.eh_frame:0000000000005F56                 db  48h ; H
.eh_frame:0000000000005F57                 db  0Bh
.eh_frame:0000000000005F58                 db  41h ; A
.eh_frame:0000000000005F59                 db  0Ah
.eh_frame:0000000000005F5A                 db  0Eh
.eh_frame:0000000000005F5B                 db  18h
.eh_frame:0000000000005F5C                 db  46h ; F
.eh_frame:0000000000005F5D                 db  0Eh
.eh_frame:0000000000005F5E                 db  10h
.eh_frame:0000000000005F5F                 db  42h ; B
.eh_frame:0000000000005F60                 db  0Eh
.eh_frame:0000000000005F61                 db    8
.eh_frame:0000000000005F62                 db  47h ; G
.eh_frame:0000000000005F63                 db  0Bh
.eh_frame:0000000000005F64                 db  49h ; I
.eh_frame:0000000000005F65                 db  0Eh
.eh_frame:0000000000005F66                 db  18h
.eh_frame:0000000000005F67                 db  41h ; A
.eh_frame:0000000000005F68                 db  0Eh
.eh_frame:0000000000005F69                 db  10h
.eh_frame:0000000000005F6A                 db  42h ; B
.eh_frame:0000000000005F6B                 db  0Eh
.eh_frame:0000000000005F6C                 db    8
.eh_frame:0000000000005F6D                 db    0
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db  1Ch
.eh_frame:0000000000005F71                 db    0
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74                 db 0D4h
.eh_frame:0000000000005F75                 db    9
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db 0C8h
.eh_frame:0000000000005F79                 db 0E4h
.eh_frame:0000000000005F7A                 db 0FFh
.eh_frame:0000000000005F7B                 db 0FFh
.eh_frame:0000000000005F7C                 db  60h ; `
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db    0
.eh_frame:0000000000005F81                 db  44h ; D
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  10h
.eh_frame:0000000000005F84                 db  75h ; u
.eh_frame:0000000000005F85                 db  0Ah
.eh_frame:0000000000005F86                 db  0Eh
.eh_frame:0000000000005F87                 db    8
.eh_frame:0000000000005F88                 db  47h ; G
.eh_frame:0000000000005F89                 db  0Bh
.eh_frame:0000000000005F8A                 db  5Fh ; _
.eh_frame:0000000000005F8B                 db  0Eh
.eh_frame:0000000000005F8C                 db    8
.eh_frame:0000000000005F8D                 db    0
.eh_frame:0000000000005F8E                 db    0
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db  1Ch
.eh_frame:0000000000005F91                 db    0
.eh_frame:0000000000005F92                 db    0
.eh_frame:0000000000005F93                 db    0
.eh_frame:0000000000005F94                 db 0F4h
.eh_frame:0000000000005F95                 db    9
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db    8
.eh_frame:0000000000005F99                 db 0E5h
.eh_frame:0000000000005F9A                 db 0FFh
.eh_frame:0000000000005F9B                 db 0FFh
.eh_frame:0000000000005F9C                 db  3Ch ; <
.eh_frame:0000000000005F9D                 db    0
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db    0
.eh_frame:0000000000005FA1                 db  44h ; D
.eh_frame:0000000000005FA2                 db  0Eh
.eh_frame:0000000000005FA3                 db  10h
.eh_frame:0000000000005FA4                 db  61h ; a
.eh_frame:0000000000005FA5                 db  0Ah
.eh_frame:0000000000005FA6                 db  0Eh
.eh_frame:0000000000005FA7                 db    8
.eh_frame:0000000000005FA8                 db  4Bh ; K
.eh_frame:0000000000005FA9                 db  0Bh
.eh_frame:0000000000005FAA                 db  4Bh ; K
.eh_frame:0000000000005FAB                 db  0Eh
.eh_frame:0000000000005FAC                 db    8
.eh_frame:0000000000005FAD                 db    0
.eh_frame:0000000000005FAE                 db    0
.eh_frame:0000000000005FAF                 db    0
.eh_frame:0000000000005FB0                 db  34h ; 4
.eh_frame:0000000000005FB1                 db    0
.eh_frame:0000000000005FB2                 db    0
.eh_frame:0000000000005FB3                 db    0
.eh_frame:0000000000005FB4                 db  14h
.eh_frame:0000000000005FB5                 db  0Ah
.eh_frame:0000000000005FB6                 db    0
.eh_frame:0000000000005FB7                 db    0
.eh_frame:0000000000005FB8                 db  28h ; (
.eh_frame:0000000000005FB9                 db 0E5h
.eh_frame:0000000000005FBA                 db 0FFh
.eh_frame:0000000000005FBB                 db 0FFh
.eh_frame:0000000000005FBC                 db  7Bh ; {
.eh_frame:0000000000005FBD                 db    0
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db    0
.eh_frame:0000000000005FC1                 db  42h ; B
.eh_frame:0000000000005FC2                 db  0Eh
.eh_frame:0000000000005FC3                 db  10h
.eh_frame:0000000000005FC4                 db  8Ch
.eh_frame:0000000000005FC5                 db    2
.eh_frame:0000000000005FC6                 db  41h ; A
.eh_frame:0000000000005FC7                 db  0Eh
.eh_frame:0000000000005FC8                 db  18h
.eh_frame:0000000000005FC9                 db  86h
.eh_frame:0000000000005FCA                 db    3
.eh_frame:0000000000005FCB                 db  41h ; A
.eh_frame:0000000000005FCC                 db  0Eh
.eh_frame:0000000000005FCD                 db  20h
.eh_frame:0000000000005FCE                 db  83h
.eh_frame:0000000000005FCF                 db    4
.eh_frame:0000000000005FD0                 db  7Dh ; }
.eh_frame:0000000000005FD1                 db  0Ah
.eh_frame:0000000000005FD2                 db  0Eh
.eh_frame:0000000000005FD3                 db  18h
.eh_frame:0000000000005FD4                 db  41h ; A
.eh_frame:0000000000005FD5                 db  0Eh
.eh_frame:0000000000005FD6                 db  10h
.eh_frame:0000000000005FD7                 db  42h ; B
.eh_frame:0000000000005FD8                 db  0Eh
.eh_frame:0000000000005FD9                 db    8
.eh_frame:0000000000005FDA                 db  44h ; D
.eh_frame:0000000000005FDB                 db  0Bh
.eh_frame:0000000000005FDC                 db  60h ; `
.eh_frame:0000000000005FDD                 db  0Ah
.eh_frame:0000000000005FDE                 db  0Eh
.eh_frame:0000000000005FDF                 db  18h
.eh_frame:0000000000005FE0                 db  41h ; A
.eh_frame:0000000000005FE1                 db  0Eh
.eh_frame:0000000000005FE2                 db  10h
.eh_frame:0000000000005FE3                 db  42h ; B
.eh_frame:0000000000005FE4                 db  0Eh
.eh_frame:0000000000005FE5                 db    8
.eh_frame:0000000000005FE6                 db  45h ; E
.eh_frame:0000000000005FE7                 db  0Bh
.eh_frame:0000000000005FE8                 db  1Ch
.eh_frame:0000000000005FE9                 db    0
.eh_frame:0000000000005FEA                 db    0
.eh_frame:0000000000005FEB                 db    0
.eh_frame:0000000000005FEC                 db  4Ch ; L
.eh_frame:0000000000005FED                 db  0Ah
.eh_frame:0000000000005FEE                 db    0
.eh_frame:0000000000005FEF                 db    0
.eh_frame:0000000000005FF0                 db  70h ; p
.eh_frame:0000000000005FF1                 db 0E5h
.eh_frame:0000000000005FF2                 db 0FFh
.eh_frame:0000000000005FF3                 db 0FFh
.eh_frame:0000000000005FF4                 db  40h ; @
.eh_frame:0000000000005FF5                 db    0
.eh_frame:0000000000005FF6                 db    0
.eh_frame:0000000000005FF7                 db    0
.eh_frame:0000000000005FF8                 db    0
.eh_frame:0000000000005FF9                 db  44h ; D
.eh_frame:0000000000005FFA                 db  0Eh
.eh_frame:0000000000005FFB                 db  10h
.eh_frame:0000000000005FFC                 db  83h
.eh_frame:0000000000005FFD                 db    2
.eh_frame:0000000000005FFE                 db  5Ah ; Z
.eh_frame:0000000000005FFF                 db  0Ah
.eh_frame:0000000000006000                 db  0Eh
.eh_frame:0000000000006001                 db    8
.eh_frame:0000000000006002                 db  4Ah ; J
.eh_frame:0000000000006003                 db  0Bh
.eh_frame:0000000000006004                 db  53h ; S
.eh_frame:0000000000006005                 db  0Eh
.eh_frame:0000000000006006                 db    8
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db  2Ch ; ,
.eh_frame:0000000000006009                 db    0
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db  6Ch ; l
.eh_frame:000000000000600D                 db  0Ah
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db  90h
.eh_frame:0000000000006011                 db 0E5h
.eh_frame:0000000000006012                 db 0FFh
.eh_frame:0000000000006013                 db 0FFh
.eh_frame:0000000000006014                 db  57h ; W
.eh_frame:0000000000006015                 db    0
.eh_frame:0000000000006016                 db    0
.eh_frame:0000000000006017                 db    0
.eh_frame:0000000000006018                 db    0
.eh_frame:0000000000006019                 db  63h ; c
.eh_frame:000000000000601A                 db  0Eh
.eh_frame:000000000000601B                 db  10h
.eh_frame:000000000000601C                 db  8Ch
.eh_frame:000000000000601D                 db    2
.eh_frame:000000000000601E                 db  41h ; A
.eh_frame:000000000000601F                 db  0Eh
.eh_frame:0000000000006020                 db  18h
.eh_frame:0000000000006021                 db  86h
.eh_frame:0000000000006022                 db    3
.eh_frame:0000000000006023                 db  44h ; D
.eh_frame:0000000000006024                 db  0Eh
.eh_frame:0000000000006025                 db  20h
.eh_frame:0000000000006026                 db  83h
.eh_frame:0000000000006027                 db    4
.eh_frame:0000000000006028                 db  6Bh ; k
.eh_frame:0000000000006029                 db  0Eh
.eh_frame:000000000000602A                 db  18h
.eh_frame:000000000000602B                 db  41h ; A
.eh_frame:000000000000602C                 db  0Eh
.eh_frame:000000000000602D                 db  10h
.eh_frame:000000000000602E                 db  42h ; B
.eh_frame:000000000000602F                 db  0Eh
.eh_frame:0000000000006030                 db    8
.eh_frame:0000000000006031                 db    0
.eh_frame:0000000000006032                 db    0
.eh_frame:0000000000006033                 db    0
.eh_frame:0000000000006034                 db    0
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db  44h ; D
.eh_frame:0000000000006039                 db    0
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db  9Ch
.eh_frame:000000000000603D                 db  0Ah
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db 0C0h
.eh_frame:0000000000006041                 db 0E5h
.eh_frame:0000000000006042                 db 0FFh
.eh_frame:0000000000006043                 db 0FFh
.eh_frame:0000000000006044                 db  65h ; e
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db    0
.eh_frame:0000000000006049                 db  42h ; B
.eh_frame:000000000000604A                 db  0Eh
.eh_frame:000000000000604B                 db  10h
.eh_frame:000000000000604C                 db  8Fh
.eh_frame:000000000000604D                 db    2
.eh_frame:000000000000604E                 db  42h ; B
.eh_frame:000000000000604F                 db  0Eh
.eh_frame:0000000000006050                 db  18h
.eh_frame:0000000000006051                 db  8Eh
.eh_frame:0000000000006052                 db    3
.eh_frame:0000000000006053                 db  45h ; E
.eh_frame:0000000000006054                 db  0Eh
.eh_frame:0000000000006055                 db  20h
.eh_frame:0000000000006056                 db  8Dh
.eh_frame:0000000000006057                 db    4
.eh_frame:0000000000006058                 db  42h ; B
.eh_frame:0000000000006059                 db  0Eh
.eh_frame:000000000000605A                 db  28h ; (
.eh_frame:000000000000605B                 db  8Ch
.eh_frame:000000000000605C                 db    5
.eh_frame:000000000000605D                 db  48h ; H
.eh_frame:000000000000605E                 db  0Eh
.eh_frame:000000000000605F                 db  30h ; 0
.eh_frame:0000000000006060                 db  86h
.eh_frame:0000000000006061                 db    6
.eh_frame:0000000000006062                 db  48h ; H
.eh_frame:0000000000006063                 db  0Eh
.eh_frame:0000000000006064                 db  38h ; 8
.eh_frame:0000000000006065                 db  83h
.eh_frame:0000000000006066                 db    7
.eh_frame:0000000000006067                 db  4Dh ; M
.eh_frame:0000000000006068                 db  0Eh
.eh_frame:0000000000006069                 db  40h ; @
.eh_frame:000000000000606A                 db  72h ; r
.eh_frame:000000000000606B                 db  0Eh
.eh_frame:000000000000606C                 db  38h ; 8
.eh_frame:000000000000606D                 db  41h ; A
.eh_frame:000000000000606E                 db  0Eh
.eh_frame:000000000000606F                 db  30h ; 0
.eh_frame:0000000000006070                 db  41h ; A
.eh_frame:0000000000006071                 db  0Eh
.eh_frame:0000000000006072                 db  28h ; (
.eh_frame:0000000000006073                 db  42h ; B
.eh_frame:0000000000006074                 db  0Eh
.eh_frame:0000000000006075                 db  20h
.eh_frame:0000000000006076                 db  42h ; B
.eh_frame:0000000000006077                 db  0Eh
.eh_frame:0000000000006078                 db  18h
.eh_frame:0000000000006079                 db  42h ; B
.eh_frame:000000000000607A                 db  0Eh
.eh_frame:000000000000607B                 db  10h
.eh_frame:000000000000607C                 db  42h ; B
.eh_frame:000000000000607D                 db  0Eh
.eh_frame:000000000000607E                 db    8
.eh_frame:000000000000607F                 db    0
.eh_frame:0000000000006080                 db  14h
.eh_frame:0000000000006081                 db    0
.eh_frame:0000000000006082                 db    0
.eh_frame:0000000000006083                 db    0
.eh_frame:0000000000006084                 db 0E4h
.eh_frame:0000000000006085                 db  0Ah
.eh_frame:0000000000006086                 db    0
.eh_frame:0000000000006087                 db    0
.eh_frame:0000000000006088                 db 0E8h
.eh_frame:0000000000006089                 db 0E5h
.eh_frame:000000000000608A                 db 0FFh
.eh_frame:000000000000608B                 db 0FFh
.eh_frame:000000000000608C                 db    2
.eh_frame:000000000000608D                 db    0
.eh_frame:000000000000608E                 db    0
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db    0
.eh_frame:0000000000006091                 db    0
.eh_frame:0000000000006092                 db    0
.eh_frame:0000000000006093                 db    0
.eh_frame:0000000000006094                 db    0
.eh_frame:0000000000006095                 db    0
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db  10h
.eh_frame:0000000000006099                 db    0
.eh_frame:000000000000609A                 db    0
.eh_frame:000000000000609B                 db    0
.eh_frame:000000000000609C                 db 0FCh
.eh_frame:000000000000609D                 db  0Ah
.eh_frame:000000000000609E                 db    0
.eh_frame:000000000000609F                 db    0
.eh_frame:00000000000060A0                 db 0E0h
.eh_frame:00000000000060A1                 db 0E5h
.eh_frame:00000000000060A2                 db 0FFh
.eh_frame:00000000000060A3                 db 0FFh
.eh_frame:00000000000060A4                 db  0Eh
.eh_frame:00000000000060A5                 db    0
.eh_frame:00000000000060A6                 db    0
.eh_frame:00000000000060A7                 db    0
.eh_frame:00000000000060A8                 db    0
.eh_frame:00000000000060A9                 db    0
.eh_frame:00000000000060AA                 db    0
.eh_frame:00000000000060AB                 db    0
.eh_frame:00000000000060AC __FRAME_END__   db    0
.eh_frame:00000000000060AD                 db    0
.eh_frame:00000000000060AE                 db    0
.eh_frame:00000000000060AF                 db    0
.eh_frame:00000000000060AF _eh_frame       ends
.eh_frame:00000000000060AF
.init_array:0000000000206B90 ; ELF Initialization Function Table
.init_array:0000000000206B90 ; ===========================================================================
.init_array:0000000000206B90
.init_array:0000000000206B90 ; Segment type: Pure data
.init_array:0000000000206B90 ; Segment permissions: Read/Write
.init_array:0000000000206B90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B90                 assume cs:_init_array
.init_array:0000000000206B90                 ;org 206B90h
.init_array:0000000000206B90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B90                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B90                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B90 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B90
.fini_array:0000000000206B98 ; ELF Termination Function Table
.fini_array:0000000000206B98 ; ===========================================================================
.fini_array:0000000000206B98
.fini_array:0000000000206B98 ; Segment type: Pure data
.fini_array:0000000000206B98 ; Segment permissions: Read/Write
.fini_array:0000000000206B98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B98                 assume cs:_fini_array
.fini_array:0000000000206B98                 ;org 206B98h
.fini_array:0000000000206B98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B98                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B98 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B98
.data.rel.ro:0000000000206BA0 ; ===========================================================================
.data.rel.ro:0000000000206BA0
.data.rel.ro:0000000000206BA0 ; Segment type: Pure data
.data.rel.ro:0000000000206BA0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BA0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BA0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BA0                 ;org 206BA0h
.data.rel.ro:0000000000206BA0 ; struct option longopts
.data.rel.ro:0000000000206BA0 longopts        dq offset aZero         ; name
.data.rel.ro:0000000000206BA0                                         ; DATA XREF: main:loc_14F4↑o
.data.rel.ro:0000000000206BA0                 dd 0                    ; has_arg ; "zero"
.data.rel.ro:0000000000206BA0                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq 0                    ; flag
.data.rel.ro:0000000000206BA0                 dd 7Ah                  ; val
.data.rel.ro:0000000000206BA0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Eh ; ~
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Dh ; }
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 11D8h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4690h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206B90h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206B98h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 7E8h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 293h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3D8h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E00h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B48h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0AE8h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A7Ch> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 13h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_11F0↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_11F0+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EC8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206ED8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F60 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000206F60                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000206F68 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F70 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F78 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD0                                         ; DATA XREF: start+24↑r
.got:0000000000206FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE8 _got            ends
.got:0000000000206FE8
LOAD:0000000000206FF0 ; ===========================================================================
LOAD:0000000000206FF0
LOAD:0000000000206FF0 ; Segment type: Pure data
LOAD:0000000000206FF0 ; Segment permissions: Read/Write
LOAD:0000000000206FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF0                 assume cs:LOAD
LOAD:0000000000206FF0                 ;org 206FF0h
LOAD:0000000000206FF0                 align 20h
LOAD:0000000000206FF0 LOAD            ends
LOAD:0000000000206FF0
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+AB↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1BB2↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_319D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000758↑o
.bss:0000000000207080                                         ; LOAD:00000000000007A0↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000740↑o
.bss:0000000000207088                                         ; main+A4↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007D0↑o
.bss:0000000000207090                                         ; main:loc_157E↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000770↑o
.bss:0000000000207098                                         ; LOAD:0000000000000788↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070A0 ; FILE *stderr
.bss:00000000002070A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007B8↑o
.bss:00000000002070A0                                         ; usage+3D↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'stderr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070A9                 align 10h
.bss:00000000002070B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070B0                                         ; close_stdout+1B↑r
.bss:00000000002070B1                 align 8
.bss:00000000002070B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070B8                                         ; close_stdout+56↑r
.bss:00000000002070C0                 public program_name
.bss:00000000002070C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070C0                                         ; usage+111↑r ...
.bss:00000000002070C8                 align 20h
.bss:00000000002070E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002070E0                                         ; quotearg_free+46↑o ...
.bss:00000000002070E1                 db    ? ;
.bss:00000000002070E2                 db    ? ;
.bss:00000000002070E3                 db    ? ;
.bss:00000000002070E4                 db    ? ;
.bss:00000000002070E5                 db    ? ;
.bss:00000000002070E6                 db    ? ;
.bss:00000000002070E7                 db    ? ;
.bss:00000000002070E8                 db    ? ;
.bss:00000000002070E9                 db    ? ;
.bss:00000000002070EA                 db    ? ;
.bss:00000000002070EB                 db    ? ;
.bss:00000000002070EC                 db    ? ;
.bss:00000000002070ED                 db    ? ;
.bss:00000000002070EE                 db    ? ;
.bss:00000000002070EF                 db    ? ;
.bss:00000000002070F0                 db    ? ;
.bss:00000000002070F1                 db    ? ;
.bss:00000000002070F2                 db    ? ;
.bss:00000000002070F3                 db    ? ;
.bss:00000000002070F4                 db    ? ;
.bss:00000000002070F5                 db    ? ;
.bss:00000000002070F6                 db    ? ;
.bss:00000000002070F7                 db    ? ;
.bss:00000000002070F8                 db    ? ;
.bss:00000000002070F9                 db    ? ;
.bss:00000000002070FA                 db    ? ;
.bss:00000000002070FB                 db    ? ;
.bss:00000000002070FC                 db    ? ;
.bss:00000000002070FD                 db    ? ;
.bss:00000000002070FE                 db    ? ;
.bss:00000000002070FF                 db    ? ;
.bss:0000000000207100                 db    ? ;
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002071E0                                         ; get_quoting_style↑o ...
.bss:00000000002071F0 xmmword_2071F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002071F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207200 xmmword_207200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207210 qword_207210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207210 _bss            ends
.bss:0000000000207210
.prgend:0000000000207218 ; ===========================================================================
.prgend:0000000000207218
.prgend:0000000000207218 ; Segment type: Zero-length
.prgend:0000000000207218 _prgend         segment byte public '' use64
.prgend:0000000000207218 _end            label byte
.prgend:0000000000207218 _prgend         ends
.prgend:0000000000207218
extern:0000000000207220 ; ===========================================================================
extern:0000000000207220
extern:0000000000207220 ; Segment type: Externs
extern:0000000000207220 ; extern
extern:0000000000207220 ; void free(void *ptr)
extern:0000000000207220                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207220                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207228 ; void __noreturn abort(void)
extern:0000000000207228                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207228                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207230 ; int *_errno_location(void)
extern:0000000000207230                 extrn __errno_location:near
extern:0000000000207230                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207230                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207238 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207238                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207238                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207240 ; void __noreturn exit(int status)
extern:0000000000207240                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207240                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207248 ; size_t _fpending(FILE *fp)
extern:0000000000207248                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207248                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207250 ; char *textdomain(const char *domainname)
extern:0000000000207250                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207250                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207258 ; int fclose(FILE *stream)
extern:0000000000207258                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207258                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207260 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207260                 extrn bindtextdomain:near
extern:0000000000207260                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207260                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207268 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207268                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207268                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207270 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207270                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207270                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207270                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207278 ; size_t strlen(const char *s)
extern:0000000000207278                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207278                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000207280                 extrn __stack_chk_fail:near
extern:0000000000207280                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000207280                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000207288 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000207288                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000207288                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000207290 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000207290                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000207290                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000207298 ; int _overflow(_IO_FILE *, int)
extern:0000000000207298                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000207298                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002072A0 ; char *strrchr(const char *s, int c)
extern:00000000002072A0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072A0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072A8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072A8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072A8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072B0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072B0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072B0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072B8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072B8                 extrn __libc_start_main:near
extern:00000000002072B8                                         ; CODE XREF: start+24↑p
extern:00000000002072B8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072C0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072C0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072C0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072C8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072C8                 extrn fputs_unlocked:near
extern:00000000002072C8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072C8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072D0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072D0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072D0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072D8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072D8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002072E0 ; int fileno(FILE *stream)
extern:00000000002072E0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002072E0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002072E8 ; void *malloc(size_t size)
extern:00000000002072E8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002072E8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002072F0 ; int fflush(FILE *stream)
extern:00000000002072F0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002072F0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002072F8 ; char *nl_langinfo(nl_item item)
extern:00000000002072F8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002072F8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207300 ; int _freading(FILE *fp)
extern:0000000000207300                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207300                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207308 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000207308                 extrn fwrite_unlocked:near
extern:0000000000207308                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000207308                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000207310 ; void *realloc(void *ptr, size_t size)
extern:0000000000207310                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207310                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207318 ; char *setlocale(int category, const char *locale)
extern:0000000000207318                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207318                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207320                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207320                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207328 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207328                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207328                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207330 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207330                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207330                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207338 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207338                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207338                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207340 ; void __noreturn exit(int status)
extern:0000000000207340                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207340                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207348 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207348                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207348                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207350                 extrn __fprintf_chk:near
extern:0000000000207350                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207350                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207358 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207358                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207358                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207360 ; int iswprint(wint_t wc)
extern:0000000000207360                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207360                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207368 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207368                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207368                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207368                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207370 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207370                 extrn __ctype_b_loc:near
extern:0000000000207370                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207370                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207378                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207378                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207380                 extrn __gmon_start__:near ; weak
extern:0000000000207380                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207380                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000207388                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000207388                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000207388
extern:0000000000207388
extern:0000000000207388                 end start
